unint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_0::operator()(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t SlowCase;
  unint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t result;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;

  v12 = *a1;
  v11 = a1[1];
  v13 = (unint64_t *)(*a1 + 40136);
  v14 = *(_QWORD *)(v11 + 664);
  v56 = 67440154;
  if ((v14 & 0xFFFE000000000002) == 0 && v14 && *(unsigned __int8 *)(v14 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v14, (JSC::VM *)v12, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v13;
  if (*v13 < v13[1])
    goto LABEL_9;
  SlowCase = v13[2];
  if ((SlowCase & 1) == 0)
  {
    v44 = *(_QWORD *)(SlowCase + 8) ^ v13[3];
    v13[1] = SlowCase + HIDWORD(v44);
    v13[2] = SlowCase + (int)v44;
LABEL_9:
    *v13 = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM((JSC *)v12, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v12 + 40112, v12 + 192, 128, 0, 0, v47, v48, v49);
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  v17 = JSC::Structure::Structure(SlowCase, v12, v11, v14, (uint64_t)&v56, (unint64_t)&JSC::JSStrictFunction::s_info, 0, 0);
  if (*(_BYTE *)(v12 + 755))
    __dmb(0xAu);
  *((_DWORD *)a2 + 2) = v17 >> 4;
  if (*(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v11 + 7))
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v11);
  v26 = *a1;
  v27 = (unint64_t *)(*a1 + 40136);
  v28 = *(_QWORD *)(v11 + 664);
  v57 = 67440154;
  if ((v28 & 0xFFFE000000000002) == 0 && v28 && *(unsigned __int8 *)(v28 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v28, (JSC::VM *)v26, v25, v19, v20, v21, v22, v23, v24);
  v29 = *v27;
  if (*v27 < v27[1])
    goto LABEL_19;
  v29 = v27[2];
  if ((v29 & 1) == 0)
  {
    v45 = *(_QWORD *)(v29 + 8) ^ v27[3];
    v27[1] = v29 + HIDWORD(v45);
    v27[2] = v29 + (int)v45;
LABEL_19:
    *v27 = v29 + 128;
    goto LABEL_20;
  }
  JSC::sanitizeStackForVM((JSC *)v26, v18, v19, v20, v21, v22, v23, v24);
  v29 = JSC::LocalAllocator::allocateSlowCase(v26 + 40112, v26 + 192, 128, 0, 0, v50, v51, v52);
LABEL_20:
  *(_DWORD *)v29 = 0;
  v30 = JSC::Structure::Structure(v29, v26, v11, v28, (uint64_t)&v57, (unint64_t)&JSC::JSSloppyFunction::s_info, 0, 0);
  if (*(_BYTE *)(v26 + 755))
    __dmb(0xAu);
  *((_DWORD *)a2 + 1) = v30 >> 4;
  if (*(_DWORD *)(v26 + 760) >= *(unsigned __int8 *)(v11 + 7))
    JSC::Heap::writeBarrierSlowPath(v26 + 192, v11);
  v39 = *a1;
  v40 = (unint64_t *)(v39 + 40136);
  v41 = *(_QWORD *)(v11 + 664);
  v58 = 67440154;
  if ((v41 & 0xFFFE000000000002) == 0 && v41 && *(unsigned __int8 *)(v41 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v41, (JSC::VM *)v39, v38, v32, v33, v34, v35, v36, v37);
  v42 = *v40;
  if (*v40 < *(_QWORD *)(v39 + 40144))
    goto LABEL_29;
  v42 = *(_QWORD *)(v39 + 40152);
  if ((v42 & 1) == 0)
  {
    v46 = *(_QWORD *)(v42 + 8) ^ *(_QWORD *)(v39 + 40160);
    *(_QWORD *)(v39 + 40144) = v42 + HIDWORD(v46);
    *(_QWORD *)(v39 + 40152) = v42 + (int)v46;
LABEL_29:
    *v40 = v42 + 128;
    goto LABEL_30;
  }
  JSC::sanitizeStackForVM((JSC *)v39, v31, v32, v33, v34, v35, v36, v37);
  v42 = JSC::LocalAllocator::allocateSlowCase(v39 + 40112, v39 + 192, 128, 0, 0, v53, v54, v55);
LABEL_30:
  *(_DWORD *)v42 = 0;
  result = JSC::Structure::Structure(v42, v39, v11, v41, (uint64_t)&v58, (unint64_t)&JSC::JSArrowFunction::s_info, 0, 0);
  if (*(_BYTE *)(v39 + 755))
    __dmb(0xAu);
  *(_DWORD *)a2 = result >> 4;
  if (*(_DWORD *)(v39 + 760) >= *(unsigned __int8 *)(v11 + 7))
    return JSC::Heap::writeBarrierSlowPath(v39 + 192, v11);
  return result;
}

uint64_t JSC::ShadowRealmObject::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 58;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::ShadowRealmObject::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::getGetterById(JSC *this, uint64_t a2, uint64_t a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned int v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t result;
  int v52;
  unsigned int *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _BYTE *v60;
  uint64_t v61;
  JSC::VM *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  int v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned __int16 *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  unsigned __int8 *v96;
  int v97;
  double v98;
  void *v99;
  const unsigned __int8 *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unsigned int v103;
  JSC::VM *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  uint64_t Index;
  int v120;
  int v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int16 *v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  unsigned __int8 *v129;
  unsigned int v130;
  JSC::VM *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  unsigned __int8 *v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  JSC::JSGlobalObject *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  char v155;
  unint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161[124];
  uint64_t v162;

  v9 = a3;
  v162 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)this + 7);
  v159 = 0;
  v160 = a2;
  a9.i64[0] = 0xFFFFFFFF00000000;
  v150 = 0xFFFFFFFF00000000;
  v152 = 0;
  v153 = 0;
  v151 = a2;
  v154 = 196608;
  v155 = 0;
  v158 = 0;
  v156 = v11;
  ++*(_DWORD *)(v11 + 4);
  v157 = 1;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v12 = a2;
    v13 = *(unsigned __int8 *)(a2 + 5);
    if (v13 > 0x16)
      goto LABEL_3;
    if (v13 == 2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768) == a3)
      {
        v116 = *(_QWORD *)(a2 + 8);
        if ((v116 & 1) != 0)
          v117 = (unsigned int *)(a2 + 16);
        else
          v117 = (unsigned int *)(v116 + 4);
        v118 = *v117;
        if ((v118 & 0x80000000) != 0)
          Index = COERCE__INT64((double)v118) + 0x2000000000000;
        else
          Index = v118 | 0xFFFE000000000000;
        v120 = 14;
LABEL_243:
        v148 = Index;
        LODWORD(v150) = v120;
        v152 = 0;
        BYTE1(v154) = 1;
        if (*(_DWORD *)(v11 + 80))
          JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
        goto LABEL_58;
      }
      if (!a3)
        goto LABEL_250;
      v121 = *(_DWORD *)(a3 + 16);
      if ((v121 & 0x20) != 0)
        goto LABEL_250;
      v122 = *(_BYTE **)(a3 + 8);
      v123 = *(unsigned int *)(a3 + 4);
      if ((v121 & 4) != 0)
      {
        if ((_DWORD)v123)
        {
          a3 = *v122 - 48;
          if (a3 <= 9 && (v123 < 2 || *v122 != 48))
          {
            v143 = v122 + 1;
            v144 = v123 - 1;
            while (v144)
            {
              if (a3 <= 0x19999999)
              {
                v145 = *v143 - 48;
                if (v145 <= 9)
                {
                  v45 = __CFADD__(v145, 10 * a3);
                  a3 = v145 + 10 * (_DWORD)a3;
                  ++v143;
                  --v144;
                  if (!v45)
                    continue;
                }
              }
              goto LABEL_250;
            }
LABEL_328:
            if ((_DWORD)a3 != -1)
            {
              v146 = *(_QWORD *)(a2 + 8);
              v147 = (JSC::JSGlobalObject *)((v146 & 1) != 0 ? a2 + 16 : v146 + 4);
              if (*(_DWORD *)v147 > a3)
              {
                Index = JSC::JSString::getIndex((JSC::JSString *)a2, this, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
                if (!*(_DWORD *)(v11 + 80)
                  || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
                {
                  v120 = 10;
                  goto LABEL_243;
                }
              }
            }
          }
        }
      }
      else if ((_DWORD)v123)
      {
        a3 = *(unsigned __int16 *)v122 - 48;
        if (a3 <= 9 && (*(_WORD *)v122 != 48 || v123 <= 1))
        {
          v125 = (unsigned __int16 *)(v122 + 2);
          v126 = v123 - 1;
          while (v126)
          {
            if (a3 <= 0x19999999)
            {
              v127 = *v125 - 48;
              if (v127 <= 9)
              {
                v45 = __CFADD__(v127, 10 * a3);
                a3 = v127 + 10 * (_DWORD)a3;
                ++v125;
                --v126;
                if (!v45)
                  continue;
              }
            }
            goto LABEL_250;
          }
          goto LABEL_328;
        }
      }
LABEL_250:
      if (*(_DWORD *)(v11 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        goto LABEL_58;
      }
    }
  }
  v124 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v160, (unint64_t)this);
  if (!v124)
    goto LABEL_58;
  v12 = v124;
  v11 = *((_QWORD *)this + 7);
LABEL_3:
  v14 = (_BYTE *)(v12 + 6);
  v15 = v9 >> 4;
  v16 = v12;
  if ((*(_BYTE *)(v12 + 6) & 8) == 0)
  {
    v17 = v12;
    do
    {
      v18 = *(_DWORD *)v17 & 0xFFFFFFFE;
      v19 = 16 * v18;
      if (!(_DWORD)v15 || (v15 & ~*(_DWORD *)(16 * v18 + 0x20)) != 0)
        goto LABEL_16;
      v20 = *(_QWORD *)(16 * v18 + 0x58);
      if (!v20)
      {
        v31 = *(_QWORD *)(16 * v18 + 0x40);
        if (!v31 || *(_BYTE *)(v31 + 5) != 1 && *(_DWORD *)(v31 + 80) < 2u)
          goto LABEL_16;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v19, (JSC::VM *)v11, 1, a4, a5, a6, a7, a8);
        if (!v20)
          goto LABEL_16;
      }
      if (!*(_DWORD *)(v20 + 24))
        goto LABEL_16;
      v21 = *(_QWORD *)(v20 + 16);
      v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
      v23 = *(unsigned int *)(v20 + 8);
      v24 = *(_DWORD *)(v9 + 16);
      if ((v21 & 1) != 0)
      {
        if ((v24 & 0x20) != 0)
          v24 = *(_DWORD *)(v9 + 32);
        v25 = *(_DWORD *)(v20 + 12);
        v26 = (v24 >> 8) & *(_QWORD *)&v25;
        v27 = *(unsigned __int8 *)(v22 + v26);
        if (!*(_BYTE *)(v22 + v26))
          goto LABEL_16;
        v28 = v22 + v23;
        v29 = 1;
        while (1)
        {
          v30 = *(_QWORD *)(v28 + 8 * (v27 - 1));
          if ((v30 & 0xFFFFFFFFFFFFLL) == v9)
            break;
          v26 = ((_DWORD)v26 + v29) & v25;
          v27 = *(unsigned __int8 *)(v22 + v26);
          ++v29;
          if (!*(_BYTE *)(v22 + v26))
            goto LABEL_16;
        }
        a6 = (v30 >> 16) & 0xFF00000000 | HIBYTE(v30);
      }
      else
      {
        if ((v24 & 0x20) != 0)
          v24 = *(_DWORD *)(v9 + 32);
        v32 = *(_DWORD *)(v20 + 12);
        v33 = v32 & (v24 >> 8);
        v34 = *(_DWORD *)(v22 + 4 * v33);
        if (!v34)
          goto LABEL_16;
        v35 = v22 + 4 * v23;
        v36 = 1;
        while (1)
        {
          v37 = (v34 - 1);
          if (*(_QWORD *)(v35 + 16 * v37) == v9)
            break;
          v33 = (v33 + v36) & v32;
          v34 = *(_DWORD *)(v22 + 4 * v33);
          ++v36;
          if (!v34)
            goto LABEL_16;
        }
        a6 = *(unsigned int *)(v35 + 16 * v37 + 8) | ((unint64_t)*(unsigned __int8 *)(v35 + 16 * v37 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        v46 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v47 = v17 + 16;
          v48 = a6 << 32;
        }
        else
        {
          v47 = *(_QWORD *)(v17 + 8) - 8;
          v48 = 0x3F00000000 - (a6 << 32);
        }
        v49 = *(_QWORD *)(v47 + (v48 >> 29));
        if ((v49 & 0xFFFE000000000002) == 0)
        {
          v50 = *(unsigned __int8 *)(v49 + 5);
          if (v50 != 5)
          {
            if (v50 != 6)
              goto LABEL_56;
            v55 = *(_DWORD *)(v19 + 16) & 3;
            v56 = *(_QWORD *)(v49 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)v49 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v58 = *(_QWORD *)(v49 + 24);
              v57 = *(_QWORD *)(v49 + 32);
              v148 = *(_QWORD *)(v49 + 8);
              v149 = v56;
              LODWORD(v150) = HIDWORD(a6);
              v152 = v17;
              goto LABEL_79;
            }
            v148 = *(_QWORD *)(v49 + 8);
            v149 = v56;
            LODWORD(v150) = HIDWORD(a6);
            v152 = v17;
LABEL_139:
            BYTE1(v154) = 3;
            if (v55 != 2)
              LOBYTE(v154) = 1;
            goto LABEL_58;
          }
          v53 = (unsigned int *)v17;
          v54 = v11;
LABEL_74:
          JSC::JSObject::fillGetterPropertySlot(v53, v54, (uint64_t)&v148, v49, v46, a6);
          goto LABEL_58;
        }
LABEL_56:
        v148 = v49;
        v152 = v17;
LABEL_57:
        v150 = __PAIR64__(a6, v46);
        LOWORD(v154) = 257;
        goto LABEL_58;
      }
LABEL_16:
      if ((*v14 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v17, (JSC::VM *)v11, v9, (uint64_t)&v148) & 1) != 0)
      {
        goto LABEL_58;
      }
      v16 = *(_QWORD *)(v19 + 48);
      if (!v16)
        v16 = *(_QWORD *)(v17 + 16);
      if ((v16 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v16 + 5) < 0x17u)
      {
        if (!v9)
          goto LABEL_58;
        v38 = *(_DWORD *)(v9 + 16);
        if ((v38 & 0x20) != 0)
          goto LABEL_58;
        v39 = *(_BYTE **)(v9 + 8);
        v40 = *(unsigned int *)(v9 + 4);
        if ((v38 & 4) != 0)
        {
          if (!(_DWORD)v40)
            goto LABEL_58;
          v41 = *v39 - 48;
          if (v41 > 9 || v40 >= 2 && *v39 == 48)
            goto LABEL_58;
          v101 = v40 - 1;
          v102 = v39 + 1;
          while (v101)
          {
            if (v41 <= 0x19999999)
            {
              v103 = *v102 - 48;
              if (v103 <= 9)
              {
                v45 = __CFADD__(v103, 10 * v41);
                v41 = v103 + 10 * (_DWORD)v41;
                --v101;
                ++v102;
                if (!v45)
                  continue;
              }
            }
            goto LABEL_58;
          }
        }
        else
        {
          if (!(_DWORD)v40)
            goto LABEL_58;
          v41 = *(unsigned __int16 *)v39 - 48;
          if (v41 > 9 || *(_WORD *)v39 == 48 && v40 > 1)
            goto LABEL_58;
          v42 = v40 - 1;
          v43 = (unsigned __int16 *)(v39 + 2);
          while (v42)
          {
            if (v41 <= 0x19999999)
            {
              v44 = *v43 - 48;
              if (v44 <= 9)
              {
                v45 = __CFADD__(v44, 10 * v41);
                v41 = v44 + 10 * (_DWORD)v41;
                --v42;
                ++v43;
                if (!v45)
                  continue;
              }
            }
            goto LABEL_58;
          }
        }
        if ((_DWORD)v41 == -1)
          goto LABEL_58;
        v104 = (JSC::VM *)*((_QWORD *)this + 7);
        while (1)
        {
          v105 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
          v106 = (*(uint64_t (**)(uint64_t, JSC *, uint64_t, uint64_t *))(16 * *(unsigned int *)(v105 + 0x4C)
                                                                               + 0x70))(v12, this, v41, &v148);
          if (*((_DWORD *)v104 + 20))
          {
            if (((JSC::VM::hasExceptionsAfterHandlingTraps(v104, v107, v108, v109, v110, v111, v112, v113) | v106) & 1) != 0)
              goto LABEL_58;
          }
          else if ((v106 & 1) != 0)
          {
            goto LABEL_58;
          }
          if (BYTE2(v154) != 3)
            break;
          if (v155)
            goto LABEL_290;
          v114 = *(unsigned __int8 *)(v12 + 5);
          if (v114 != 61)
            goto LABEL_207;
LABEL_208:
          if ((*(_WORD *)(v105 + 12) & 0x800) == 0 || BYTE2(v154) == 3)
          {
            v115 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
            if (!v115)
              v115 = *(_QWORD *)(v12 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v115 = (*(uint64_t (**)(uint64_t, JSC *))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0xB0))(v12, this);
            }
            else
            {
              v115 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
              if (!v115)
                v115 = *(_QWORD *)(v12 + 16);
            }
            if (*((_DWORD *)v104 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v104, v107, v108, v109, v110, v111, v112, v113))
            {
              goto LABEL_58;
            }
          }
          if ((v115 & 0xFFFE000000000002) == 0)
          {
            v12 = v115;
            if (*(unsigned __int8 *)(v115 + 5) > 0x16u)
              continue;
          }
          goto LABEL_58;
        }
        v114 = *(unsigned __int8 *)(v12 + 5);
        if (v114 == 61)
        {
          if (BYTE2(v154) == 1)
            goto LABEL_58;
          goto LABEL_208;
        }
LABEL_207:
        if ((v114 - 39) <= 0xA
          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v12, v107, v108, v109, v110, v111, v112, v113) <= v41)
        {
          goto LABEL_58;
        }
        goto LABEL_208;
      }
      v14 = (_BYTE *)(v16 + 6);
      v17 = v16;
    }
    while ((*(_BYTE *)(v16 + 6) & 8) == 0);
  }
  if (v9)
  {
    v59 = *(_DWORD *)(v9 + 16);
    if ((v59 & 0x20) == 0)
    {
      v60 = *(_BYTE **)(v9 + 8);
      v61 = *(unsigned int *)(v9 + 4);
      if ((v59 & 4) != 0)
      {
        if ((_DWORD)v61)
        {
          v11 = *v60 - 48;
          if (v11 <= 9 && (v61 < 2 || *v60 != 48))
          {
            v128 = v61 - 1;
            v129 = v60 + 1;
            while (v128)
            {
              if (v11 <= 0x19999999)
              {
                v130 = *v129 - 48;
                if (v130 <= 9)
                {
                  v45 = __CFADD__(v130, 10 * v11);
                  v11 = v130 + 10 * (_DWORD)v11;
                  --v128;
                  ++v129;
                  if (!v45)
                    continue;
                }
              }
              goto LABEL_87;
            }
LABEL_272:
            if ((_DWORD)v11 != -1)
            {
              v131 = (JSC::VM *)*((_QWORD *)this + 7);
              while (1)
              {
                v132 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
                v133 = (*(uint64_t (**)(uint64_t, JSC *, unint64_t, uint64_t *))(16
                                                                                              * *(unsigned int *)(v132 + 0x4C)
                                                                                              + 0x70))(v12, this, v11, &v148);
                if (*((_DWORD *)v131 + 20))
                {
                  if (((JSC::VM::hasExceptionsAfterHandlingTraps(v131, v134, v135, v136, v137, v138, v139, v140) | v133) & 1) != 0)
                    goto LABEL_58;
                }
                else if ((v133 & 1) != 0)
                {
                  goto LABEL_58;
                }
                if (BYTE2(v154) != 3)
                  break;
                if (v155)
                  goto LABEL_290;
                v141 = *(unsigned __int8 *)(v12 + 5);
                if (v141 != 61)
                  goto LABEL_278;
LABEL_279:
                if ((*(_WORD *)(v132 + 12) & 0x800) == 0 || BYTE2(v154) == 3)
                {
                  v142 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
                  if (!v142)
                    v142 = *(_QWORD *)(v12 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v142 = (*(uint64_t (**)(uint64_t, JSC *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xB0))(v12, this);
                  }
                  else
                  {
                    v142 = *(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x30);
                    if (!v142)
                      v142 = *(_QWORD *)(v12 + 16);
                  }
                  if (*((_DWORD *)v131 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v131, v134, v135, v136, v137, v138, v139, v140))
                  {
                    goto LABEL_58;
                  }
                }
                if ((v142 & 0xFFFE000000000002) == 0)
                {
                  v12 = v142;
                  if (*(unsigned __int8 *)(v142 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_58;
              }
              v141 = *(unsigned __int8 *)(v12 + 5);
              if (v141 == 61)
              {
                if (BYTE2(v154) == 1)
                  goto LABEL_58;
                goto LABEL_279;
              }
LABEL_278:
              if ((v141 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v12, v134, v135, v136, v137, v138, v139, v140) <= v11)
              {
                goto LABEL_58;
              }
              goto LABEL_279;
            }
          }
        }
      }
      else if ((_DWORD)v61)
      {
        v11 = *(unsigned __int16 *)v60 - 48;
        if (v11 <= 9 && (*(_WORD *)v60 != 48 || v61 <= 1))
        {
          v87 = v61 - 1;
          v88 = (unsigned __int16 *)(v60 + 2);
          while (v87)
          {
            if (v11 <= 0x19999999)
            {
              v89 = *v88 - 48;
              if (v89 <= 9)
              {
                v45 = __CFADD__(v89, 10 * v11);
                v11 = v89 + 10 * (_DWORD)v11;
                --v87;
                ++v88;
                if (!v45)
                  continue;
              }
            }
            goto LABEL_87;
          }
          goto LABEL_272;
        }
      }
    }
  }
LABEL_87:
  v62 = (JSC::VM *)*((_QWORD *)this + 7);
  while (1)
  {
    v63 = 16 * (*(_DWORD *)v16 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v16 + 6) & 8) == 0)
      break;
    v92 = (*(uint64_t (**)(uint64_t, JSC *, unint64_t, uint64_t *))(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0x68))(v16, this, v9, &v148);
    if (*((_DWORD *)v62 + 20))
    {
      if (((JSC::VM::hasExceptionsAfterHandlingTraps(v62, a2, a3, (uint64_t)a4, a5, a6, a7, a8) | v92) & 1) != 0)
        goto LABEL_58;
    }
    else if ((v92 & 1) != 0)
    {
      goto LABEL_58;
    }
    if (BYTE2(v154) == 3)
    {
      if (v155)
        goto LABEL_290;
      v93 = *(unsigned __int8 *)(v16 + 5);
      if (v93 != 61)
      {
LABEL_162:
        if (!v9)
          goto LABEL_101;
        if ((v93 - 50) < 0xFFFFFFF5)
          goto LABEL_101;
        v94 = *(_DWORD *)(v9 + 16);
        if ((v94 & 0x20) != 0)
          goto LABEL_101;
        v95 = *(unsigned int *)(v9 + 4);
        if (!(_DWORD)v95)
          goto LABEL_101;
        v96 = *(unsigned __int8 **)(v9 + 8);
        if ((v94 & 4) == 0)
        {
          v97 = *(unsigned __int16 *)v96;
          if ((_DWORD)v95 == 1)
            goto LABEL_168;
          if (v97 == 45)
          {
            v97 = *((unsigned __int16 *)v96 + 1);
            goto LABEL_173;
          }
          if ((v97 - 48) >= 0xA && ((_DWORD)v95 != 8 || v97 != 73))
          {
LABEL_186:
            if ((_DWORD)v95 != 3 || v97 != 78)
              goto LABEL_101;
          }
LABEL_177:
          v11 = v11 & 0xFFFFFF0000000000 | v95 | ((unint64_t)((v94 >> 2) & 1) << 32);
          JSC::jsToNumber(v96, v11);
          v99 = WTF::numberToString(v161, v98);
          if (WTF::equal(v9, (unint64_t)v99, v100))
            goto LABEL_58;
          goto LABEL_101;
        }
        v97 = *v96;
        if ((_DWORD)v95 == 1)
        {
LABEL_168:
          if ((v97 - 48) < 0xA)
            goto LABEL_58;
          goto LABEL_101;
        }
        if (v97 == 45)
        {
          v97 = v96[1];
LABEL_173:
          if ((v97 - 48) < 0xA)
          {
            if ((_DWORD)v95 == 2)
              goto LABEL_58;
            goto LABEL_177;
          }
          if ((_DWORD)v95 != 9)
            goto LABEL_101;
        }
        else
        {
          if ((v97 - 48) < 0xA)
            goto LABEL_177;
          if ((_DWORD)v95 != 8)
            goto LABEL_186;
        }
        if (v97 != 73)
          goto LABEL_101;
        goto LABEL_177;
      }
    }
    else
    {
      v93 = *(unsigned __int8 *)(v16 + 5);
      if (v93 != 61)
        goto LABEL_162;
      if (BYTE2(v154) == 1)
        goto LABEL_58;
    }
LABEL_101:
    if ((*(_WORD *)(v63 + 12) & 0x800) == 0)
    {
      v75 = *(_DWORD *)v16;
LABEL_103:
      v76 = *(_QWORD *)(16 * (v75 & 0xFFFFFFFE) + 0x30);
      if (!v76)
        v76 = *(_QWORD *)(v16 + 16);
      goto LABEL_105;
    }
    v75 = *(_DWORD *)v16;
    if (BYTE2(v154) == 3)
      goto LABEL_103;
    v91 = 16 * (v75 & 0xFFFFFFFE);
    if ((*(_WORD *)(v91 + 12) & 0x800) != 0)
    {
      v76 = (*(uint64_t (**)(uint64_t, JSC *))(16 * *(unsigned int *)(v91 + 76) + 0xB0))(v16, this);
    }
    else
    {
      v76 = *(_QWORD *)(v91 + 48);
      if (!v76)
        v76 = *(_QWORD *)(v16 + 16);
    }
    if (*((_DWORD *)v62 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v62, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
      goto LABEL_58;
LABEL_105:
    if ((v76 & 0xFFFE000000000002) == 0)
    {
      v16 = v76;
      if (*(unsigned __int8 *)(v76 + 5) > 0x16u)
        continue;
    }
    goto LABEL_58;
  }
  if (!(_DWORD)v15 || (v15 & ~*(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_100;
  v64 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x58);
  if (!v64)
  {
    v77 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x40);
    if (!v77 || *(_BYTE *)(v77 + 5) != 1 && *(_DWORD *)(v77 + 80) < 2u)
      goto LABEL_100;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE)), v62, 1, a4, a5, a6, a7, a8);
    if (!v64)
      goto LABEL_100;
  }
  if (!*(_DWORD *)(v64 + 24))
    goto LABEL_100;
  v65 = *(_QWORD *)(v64 + 16);
  v66 = v65 & 0xFFFFFFFFFFFFFFFELL;
  v67 = *(unsigned int *)(v64 + 8);
  v68 = *(_DWORD *)(v9 + 16);
  if ((v65 & 1) != 0)
  {
    if ((v68 & 0x20) != 0)
      v68 = *(_DWORD *)(v9 + 32);
    v69 = *(_DWORD *)(v64 + 12);
    v70 = (v68 >> 8) & *(_QWORD *)&v69;
    v71 = *(unsigned __int8 *)(v66 + v70);
    if (*(_BYTE *)(v66 + v70))
    {
      v72 = v66 + v67;
      v73 = 1;
      while (1)
      {
        v74 = *(_QWORD *)(v72 + 8 * (v71 - 1));
        if ((v74 & 0xFFFFFFFFFFFFLL) == v9)
          break;
        v70 = ((_DWORD)v70 + v73) & v69;
        v71 = *(unsigned __int8 *)(v66 + v70);
        ++v73;
        if (!*(_BYTE *)(v66 + v70))
          goto LABEL_100;
      }
      a6 = (v74 >> 16) & 0xFF00000000 | HIBYTE(v74);
      goto LABEL_113;
    }
LABEL_100:
    if ((*(_BYTE *)(v16 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v16, v62, v9, (uint64_t)&v148) & 1) != 0)
    {
      goto LABEL_58;
    }
    goto LABEL_101;
  }
  if ((v68 & 0x20) != 0)
    v68 = *(_DWORD *)(v9 + 32);
  v78 = *(_DWORD *)(v64 + 12);
  v79 = v78 & (v68 >> 8);
  v80 = *(_DWORD *)(v66 + 4 * v79);
  if (!v80)
    goto LABEL_100;
  v81 = v66 + 4 * v67;
  v82 = 1;
  while (1)
  {
    v83 = (v80 - 1);
    if (*(_QWORD *)(v81 + 16 * v83) == v9)
      break;
    v79 = (v79 + v82) & v78;
    v80 = *(_DWORD *)(v66 + 4 * v79);
    ++v82;
    if (!v80)
      goto LABEL_100;
  }
  a6 = *(unsigned int *)(v81 + 16 * v83 + 8) | ((unint64_t)*(unsigned __int8 *)(v81 + 16 * v83 + 12) << 32);
LABEL_113:
  if ((_DWORD)a6 == -1)
    goto LABEL_100;
  v46 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v84 = v16 + 16;
    v85 = a6 << 32;
  }
  else
  {
    v84 = *(_QWORD *)(v16 + 8) - 8;
    v85 = 0x3F00000000 - (a6 << 32);
  }
  v49 = *(_QWORD *)(v84 + (v85 >> 29));
  if ((v49 & 0xFFFE000000000002) != 0)
  {
LABEL_128:
    v148 = v49;
    v152 = v16;
    goto LABEL_57;
  }
  v86 = *(unsigned __int8 *)(v49 + 5);
  if (v86 == 5)
  {
    v53 = (unsigned int *)v16;
    v54 = (uint64_t)v62;
    goto LABEL_74;
  }
  if (v86 != 6)
    goto LABEL_128;
  v55 = *(_DWORD *)(v63 + 16) & 3;
  v90 = *(_QWORD *)(v49 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x4C)))
  {
    v148 = *(_QWORD *)(v49 + 8);
    v149 = v90;
    LODWORD(v150) = HIDWORD(a6);
    v152 = v16;
    goto LABEL_139;
  }
  v58 = *(_QWORD *)(v49 + 24);
  v57 = *(_QWORD *)(v49 + 32);
  v148 = *(_QWORD *)(v49 + 8);
  v149 = v90;
  LODWORD(v150) = HIDWORD(a6);
  v152 = v16;
LABEL_79:
  BYTE1(v154) = 3;
  if (v55 != 2)
    LOBYTE(v154) = 1;
  HIBYTE(v154) = 1;
  v158 = v58;
  v159 = v57;
LABEL_58:
  if (v155)
  {
LABEL_290:
    result = 2;
    goto LABEL_65;
  }
  if (BYTE1(v154))
  {
    if (BYTE1(v154) == 1 && v154 == 1
      || (result = 2, BYTE1(v154) == 2) && v154 == 1)
    {
      result = v148;
    }
  }
  else
  {
    result = 10;
  }
LABEL_65:
  if (v157)
  {
    v52 = *(_DWORD *)(v156 + 4);
    if (!v52)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C8E7CLL);
    }
    *(_DWORD *)(v156 + 4) = v52 - 1;
  }
  return result;
}

uint64_t JSC::enableSamplingProfiler(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM::enableSamplingProfiler(this[7]);
  return 10;
}

uint64_t JSC::disableSamplingProfiler(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM::disableSamplingProfiler(this[7], (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  return 10;
}

uint64_t JSC::dumpAndClearSamplingProfilerSamples(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  int *v10;
  JSC::SamplingProfiler *v11;
  WTF *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  int v21;
  _DWORD *v22;
  const void *v23;
  size_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::JSONImpl::Value *v33;
  WTF::JSONImpl::Value *v34;
  uint64_t v35;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  WTF::JSONImpl::Value *v71;
  int __fd;
  WTF::StringImpl *v73;
  unint64_t v74;

  v9 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v74 = 10;
    WTF::StringImpl::s_emptyAtomString += 2;
    v10 = &WTF::StringImpl::s_emptyAtomString;
    goto LABEL_11;
  }
  v74 = *((_QWORD *)a2 + 6);
  WTF::StringImpl::s_emptyAtomString += 2;
  v10 = &WTF::StringImpl::s_emptyAtomString;
  if ((v74 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if ((v74 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v74 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v74, this, a3, a4, a5, a6, a7, a8, (int **)&v71);
      v10 = (int *)v71;
    }
    else
    {
      v10 = *(int **)(v74 + 8);
      if ((v10 & 1) == 0)
      {
        if (!v10)
          goto LABEL_8;
        goto LABEL_7;
      }
      v10 = *JSC::JSRopeString::resolveRope(v74, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (v10)
LABEL_7:
        *v10 += 2;
    }
LABEL_8:
    v71 = 0;
    if (WTF::StringImpl::s_emptyAtomString == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      v33 = v71;
      v71 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
    }
    else
    {
      WTF::StringImpl::s_emptyAtomString -= 2;
    }
    if (*(_DWORD *)(v9 + 80))
    {
      v69 = *(_DWORD *)(v9 + 80);
      if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v9 + 16))
      {
        v35 = 0;
        if (!v10)
          return v35;
        goto LABEL_39;
      }
    }
  }
LABEL_11:
  v11 = *(JSC::SamplingProfiler **)(v9 + 93368);
  if (v11)
  {
    JSC::SamplingProfiler::stackTracesAsJSON(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t *)&v71);
    v12 = v71;
    if (v71)
    {
      WTF::JSONImpl::Value::toJSONString(v71, (uint64_t)a3, a4, a5, a6, a7, a8, &v73);
      if (v10)
      {
        v13 = *((_QWORD *)v10 + 1);
        v14 = v10[1] | ((unint64_t)((v10[4] >> 2) & 1) << 32);
      }
      else
      {
        v13 = 0;
        v14 = 0x100000000;
      }
      WTF::FileSystemImpl::openTemporaryFile(v13, v14, 0, 0x100000000, (uint64_t)&v71);
      if (__fd == -1)
      {
        WTF::dataLog<char [64],char [2]>();
      }
      else
      {
        WTF::String::utf8((uint64_t *)&v73, 0, v15, v16, v17, v18, v19, &v70, v20);
        v21 = __fd;
        v22 = (_DWORD *)v70;
        if (v70)
        {
          v23 = (const void *)(v70 + 16);
          v24 = *(_QWORD *)(v70 + 8);
        }
        else
        {
          v24 = 0;
          v23 = 0;
        }
        while (write(v21, v23, v24) < 0 && *__error() == 4)
          ;
        if (__fd != -1)
        {
          close(__fd);
          __fd = -1;
        }
        WTF::dataLog<char [37],WTF::String,char [2]>((WTF::PrintStream *)&v71);
        if (v22)
        {
          if (*v22 == 1)
            WTF::fastFree((unint64_t)v22, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            --*v22;
        }
      }
      v34 = v71;
      v71 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
        {
          WTF::StringImpl::~StringImpl(v73, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)v73 -= 2;
        }
      }
      if (*(_DWORD *)v12 == 1)
        WTF::JSONImpl::Value::operator delete(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      else
        --*(_DWORD *)v12;
    }
  }
  v35 = 10;
  if (v10)
  {
LABEL_39:
    if (*v10 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *v10 -= 2;
    }
  }
  return v35;
}

uint64_t JSC::enableSuperSampler(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  if (__ldaxr((unsigned __int8 *)&JSC::lock))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&JSC::lock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::lock);
LABEL_5:
  atomic_store(1u, (unsigned __int8 *)&JSC::g_superSamplerEnabled);
  v9 = __ldxr((unsigned __int8 *)&JSC::lock);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&JSC::lock))
      return 10;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::lock, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  return 10;
}

uint64_t JSC::disableSuperSampler(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  if (__ldaxr((unsigned __int8 *)&JSC::lock))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&JSC::lock))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::lock);
LABEL_5:
  atomic_store(0, (unsigned __int8 *)&JSC::g_superSamplerEnabled);
  v9 = __ldxr((unsigned __int8 *)&JSC::lock);
  if (v9 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&JSC::lock))
      return 10;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&JSC::lock, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  return 10;
}

uint64_t JSC::tracePointStart(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  JSC::JSObject *v12;
  unint64_t v13;
  JSC::JSObject *v14;
  unint64_t v15;
  JSC::JSObject *v16;
  unint64_t v17;
  JSC::JSObject *v18;
  int v20;
  int v21;
  int v22;
  int v23;
  JSC::JSObject *v24;

  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v12 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
    v24 = v12;
    if (v12 != (JSC::JSObject *)10)
    {
      if ((unint64_t)v12 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v12;
      }
      else
      {
        v13 = (unint64_t)v12 - 0x2000000000000;
        if (v13 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v24, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        else
          a9.i64[0] = v13;
      }
    }
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v20 = *(_DWORD *)(v11 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    v14 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
    v24 = v14;
    if (v14 != (JSC::JSObject *)10)
    {
      if ((unint64_t)v14 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v14;
      }
      else
      {
        v15 = (unint64_t)v14 - 0x2000000000000;
        if (v15 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v24, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        else
          a9.i64[0] = v15;
      }
    }
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v21 = *(_DWORD *)(v11 + 80);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) < 0xFFFFFFFFFFFFFFFDLL)
  {
    v16 = (JSC::JSObject *)*((_QWORD *)a2 + 8);
    v24 = v16;
    if (v16 != (JSC::JSObject *)10)
    {
      if ((unint64_t)v16 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v16;
      }
      else
      {
        v17 = (unint64_t)v16 - 0x2000000000000;
        if (v17 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v24, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        else
          a9.i64[0] = v17;
      }
    }
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v22 = *(_DWORD *)(v11 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) < 0xFFFFFFFFFFFFFFFCLL)
  {
    v18 = (JSC::JSObject *)*((_QWORD *)a2 + 9);
    v24 = v18;
    if (v18 != (JSC::JSObject *)10
      && (unint64_t)v18 < 0xFFFE000000000000
      && (unint64_t)v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase(&v24, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    }
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v23 = *(_DWORD *)(v11 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  kdebug_trace();
  return 10;
}

uint64_t JSC::tracePointStop(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  JSC::JSObject *v12;
  unint64_t v13;
  JSC::JSObject *v14;
  unint64_t v15;
  JSC::JSObject *v16;
  unint64_t v17;
  JSC::JSObject *v18;
  int v20;
  int v21;
  int v22;
  int v23;
  JSC::JSObject *v24;

  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v12 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
    v24 = v12;
    if (v12 != (JSC::JSObject *)10)
    {
      if ((unint64_t)v12 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v12;
      }
      else
      {
        v13 = (unint64_t)v12 - 0x2000000000000;
        if (v13 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v24, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        else
          a9.i64[0] = v13;
      }
    }
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v20 = *(_DWORD *)(v11 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    v14 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
    v24 = v14;
    if (v14 != (JSC::JSObject *)10)
    {
      if ((unint64_t)v14 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v14;
      }
      else
      {
        v15 = (unint64_t)v14 - 0x2000000000000;
        if (v15 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v24, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        else
          a9.i64[0] = v15;
      }
    }
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v21 = *(_DWORD *)(v11 + 80);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) < 0xFFFFFFFFFFFFFFFDLL)
  {
    v16 = (JSC::JSObject *)*((_QWORD *)a2 + 8);
    v24 = v16;
    if (v16 != (JSC::JSObject *)10)
    {
      if ((unint64_t)v16 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v16;
      }
      else
      {
        v17 = (unint64_t)v16 - 0x2000000000000;
        if (v17 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v24, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        else
          a9.i64[0] = v17;
      }
    }
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v22 = *(_DWORD *)(v11 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) < 0xFFFFFFFFFFFFFFFCLL)
  {
    v18 = (JSC::JSObject *)*((_QWORD *)a2 + 9);
    v24 = v18;
    if (v18 != (JSC::JSObject *)10
      && (unint64_t)v18 < 0xFFFE000000000000
      && (unint64_t)v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase(&v24, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    }
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v23 = *(_DWORD *)(v11 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  kdebug_trace();
  return 10;
}

uint64_t JSC::signpostStart(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  int *v12;
  unsigned int v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  os_signpost_id_t v18;
  os_signpost_id_t v19;
  char *v20;
  WTF *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF *v34;
  WTF::StringImpl *v35;
  _BYTE buf[14];
  __int16 v37;
  JSC *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v11 = *((_QWORD *)a2 + 6);
    *(_QWORD *)buf = v11;
    if (v11 != 10)
    {
      if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)buf, this, a3, a4, a5, a6, a7, a8, (int **)&v35);
        goto LABEL_10;
      }
      v12 = *(int **)(v11 + 8);
      if ((v12 & 1) != 0)
      {
        v12 = *JSC::JSRopeString::resolveRope(v11, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (!v12)
          goto LABEL_9;
      }
      else if (!v12)
      {
LABEL_9:
        v35 = (WTF::StringImpl *)v12;
        goto LABEL_10;
      }
      *v12 += 2;
      goto LABEL_9;
    }
  }
  WTF::StringImpl::s_emptyAtomString += 2;
  v35 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
LABEL_10:
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_46;
  v33 = *(_DWORD *)(v10 + 80);
  if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_46:
    do
      v13 = __ldaxr(&JSC::activeJSGlobalObjectSignpostIntervalCount);
    while (__stlxr(v13 + 1, &JSC::activeJSGlobalObjectSignpostIntervalCount));
    v14 = WTFSignpostIndirectLoggingEnabled;
    if (WTFSignpostLogHandle::once != -1)
      dispatch_once(&WTFSignpostLogHandle::once, &__block_literal_global_1);
    v15 = WTFSignpostLogHandle::handle;
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)WTFSignpostLogHandle::handle, OS_LOG_TYPE_DEFAULT))
      {
        v16 = mach_continuous_time();
        WTF::String::ascii((WTF::String *)&v35, (int8x16_t **)&v34);
        if (v34)
          v17 = (char *)v34 + 16;
        else
          v17 = 0;
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = 1;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = 5;
        v37 = 2048;
        v38 = this;
        v39 = 2048;
        v40 = v16;
        v41 = 2082;
        v42 = v17;
        _os_log_impl(&dword_197AA9000, v15, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu %{public}s", buf, 0x2Cu);
        goto LABEL_26;
      }
    }
    else
    {
      v18 = os_signpost_id_make_with_pointer((os_log_t)WTFSignpostLogHandle::handle, this);
      if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v19 = v18;
        if (os_signpost_enabled(v15))
        {
          WTF::String::ascii((WTF::String *)&v35, (int8x16_t **)&v34);
          if (v34)
            v20 = (char *)v34 + 16;
          else
            v20 = 0;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v20;
          _os_signpost_emit_with_name_impl(&dword_197AA9000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v19, "JSCJSGlobalObject", "%{public}s", buf, 0xCu);
LABEL_26:
          v21 = v34;
          v34 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              WTF::fastFree((unint64_t)v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            else
              --*(_DWORD *)v21;
          }
        }
      }
    }
    v22 = 10;
    goto LABEL_30;
  }
  v22 = 0;
LABEL_30:
  v23 = v35;
  v35 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  return v22;
}

uint64_t JSC::signpostStop(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  int *v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  char *v16;
  os_signpost_id_t v17;
  os_signpost_id_t v18;
  char *v19;
  WTF *v20;
  uint64_t v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  WTF *v34;
  WTF::StringImpl *v35;
  _BYTE buf[14];
  __int16 v37;
  JSC *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v11 = *((_QWORD *)a2 + 6);
    *(_QWORD *)buf = v11;
    if (v11 != 10)
    {
      if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)buf, this, a3, a4, a5, a6, a7, a8, (int **)&v35);
        goto LABEL_10;
      }
      v12 = *(int **)(v11 + 8);
      if ((v12 & 1) != 0)
      {
        v12 = *JSC::JSRopeString::resolveRope(v11, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (!v12)
          goto LABEL_9;
      }
      else if (!v12)
      {
LABEL_9:
        v35 = (WTF::StringImpl *)v12;
        goto LABEL_10;
      }
      *v12 += 2;
      goto LABEL_9;
    }
  }
  WTF::StringImpl::s_emptyAtomString += 2;
  v35 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
LABEL_10:
  if (*(_DWORD *)(v10 + 80))
  {
    v33 = *(_DWORD *)(v10 + 80);
    if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
    {
      v21 = 0;
      goto LABEL_30;
    }
  }
  v13 = WTFSignpostIndirectLoggingEnabled;
  if (WTFSignpostLogHandle::once != -1)
    dispatch_once(&WTFSignpostLogHandle::once, &__block_literal_global_1);
  v14 = WTFSignpostLogHandle::handle;
  if (v13)
  {
    if (os_log_type_enabled((os_log_t)WTFSignpostLogHandle::handle, OS_LOG_TYPE_DEFAULT))
    {
      v15 = mach_continuous_time();
      WTF::String::ascii((WTF::String *)&v35, (int8x16_t **)&v34);
      if (v34)
        v16 = (char *)v34 + 16;
      else
        v16 = 0;
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = 2;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = 5;
      v37 = 2048;
      v38 = this;
      v39 = 2048;
      v40 = v15;
      v41 = 2082;
      v42 = v16;
      _os_log_impl(&dword_197AA9000, v14, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu %{public}s", buf, 0x2Cu);
      goto LABEL_25;
    }
  }
  else
  {
    v17 = os_signpost_id_make_with_pointer((os_log_t)WTFSignpostLogHandle::handle, this);
    if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v18 = v17;
      if (os_signpost_enabled(v14))
      {
        WTF::String::ascii((WTF::String *)&v35, (int8x16_t **)&v34);
        if (v34)
          v19 = (char *)v34 + 16;
        else
          v19 = 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v19;
        _os_signpost_emit_with_name_impl(&dword_197AA9000, v14, OS_SIGNPOST_INTERVAL_END, v18, "JSCJSGlobalObject", "%{public}s", buf, 0xCu);
LABEL_25:
        v20 = v34;
        v34 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 1)
            WTF::fastFree((unint64_t)v20, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          else
            --*(_DWORD *)v20;
        }
      }
    }
  }
  v21 = 10;
  do
    v22 = __ldaxr(&JSC::activeJSGlobalObjectSignpostIntervalCount);
  while (__stlxr(v22 - 1, &JSC::activeJSGlobalObjectSignpostIntervalCount));
LABEL_30:
  v23 = v35;
  v35 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  return v21;
}

void JSC::JSGlobalObject::exposeDollarVM(JSC::JSGlobalObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;
  unint64_t *v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t (*v15)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  char OwnPropertySlotByIndex;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unsigned __int16 *v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  int v50;
  JSC::JSGlobalObject *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  unint64_t SlowCase;
  JSC::VM *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t Slow;
  int v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  __n128 v78;
  uint64_t v79;
  uint64_t v80;
  WTF::AtomStringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  JSC::JSGlobalObject *v115;
  unint64_t v116;
  JSC::JSGlobalObject *v117;
  JSC::JSGlobalObject *v118;
  uint64_t v119;
  int v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[2];
  int v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  if (byte_1ECF4C1E0)
    v8 = qword_1ECF4C6A7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    __break(0xC471u);
    goto LABEL_131;
  }
  v11 = (unint64_t *)((char *)a2 + 40136);
  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5244) + 48) + 4328);
  v13 = NAN;
  v116 = 0xFFFFFFFF00000000;
  v118 = 0;
  v119 = 0;
  v117 = this;
  v120 = 0x20000;
  v121 = 0;
  LOBYTE(v122) = 0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v14 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  v15 = *(uint64_t (**)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(16 * *(unsigned int *)(v14 + 0x4C) + 0x68);
  if (v15 != JSC::JSObject::getOwnPropertySlot)
  {
    OwnPropertySlotByIndex = ((uint64_t (*)(JSC::JSGlobalObject *, JSC::JSGlobalObject *, unint64_t, WTF::StringImpl **))v15)(this, this, v12, &v114);
    goto LABEL_86;
  }
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if (!(v12 >> 4)
    || ((v12 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x20)) != 0)
  {
    goto LABEL_40;
  }
  v17 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x58);
  if (!v17)
  {
    v18 = *(_QWORD *)(v14 + 64);
    if (!v18 || *(_BYTE *)(v18 + 5) != 1 && *(_DWORD *)(v18 + 80) < 2u)
      goto LABEL_40;
    JSC::Structure::materializePropertyTable((JSC::Structure *)v14, *((JSC::VM **)this + 7), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v17)
      goto LABEL_40;
  }
  if (!*(_DWORD *)(v17 + 24))
    goto LABEL_40;
  v19 = *(_QWORD *)(v17 + 16);
  v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
  v21 = *(unsigned int *)(v17 + 8);
  v22 = *(_DWORD *)(v12 + 16);
  if ((v19 & 1) != 0)
  {
    if ((v22 & 0x20) != 0)
      v22 = *(_DWORD *)(v12 + 32);
    v23 = *(_DWORD *)(v17 + 12);
    v24 = (v22 >> 8) & *(_QWORD *)&v23;
    v25 = *(unsigned __int8 *)(v20 + v24);
    if (*(_BYTE *)(v20 + v24))
    {
      v26 = v20 + v21;
      v27 = 1;
      while (1)
      {
        v28 = *(_QWORD *)(v26 + 8 * (v25 - 1));
        if (v12 == (v28 & 0xFFFFFFFFFFFFLL))
          break;
        v24 = ((_DWORD)v24 + v27) & v23;
        v25 = *(unsigned __int8 *)(v20 + v24);
        ++v27;
        if (!*(_BYTE *)(v20 + v24))
          goto LABEL_40;
      }
      a6 = (v28 >> 16) & 0xFF00000000 | HIBYTE(v28);
      goto LABEL_30;
    }
LABEL_40:
    if ((*((_BYTE *)this + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)this, v16, v12, (uint64_t)&v114) & 1) != 0)
    {
      goto LABEL_56;
    }
    if (!v12 || (v39 = *(_DWORD *)(v12 + 16), (v39 & 0x20) != 0))
    {
LABEL_85:
      OwnPropertySlotByIndex = 0;
      goto LABEL_86;
    }
    v40 = *(_BYTE **)(v12 + 8);
    v41 = *(unsigned int *)(v12 + 4);
    if ((v39 & 4) != 0)
    {
      if ((_DWORD)v41)
      {
        v42 = *v40 - 48;
        if (v42 <= 9 && (v41 < 2 || *v40 != 48))
        {
          v54 = v40 + 1;
          v55 = v41 - 1;
          while (v55)
          {
            if (v42 > 0x19999999)
              goto LABEL_46;
            v56 = *v54 - 48;
            if (v56 > 9)
              goto LABEL_46;
            v43 = 0;
            v44 = 0;
            v45 = 0;
            v49 = __CFADD__(v56, 10 * v42);
            v42 = v56 + 10 * v42;
            ++v54;
            --v55;
            if (v49)
              goto LABEL_84;
          }
          goto LABEL_78;
        }
      }
    }
    else if ((_DWORD)v41)
    {
      v42 = *(unsigned __int16 *)v40 - 48;
      if (v42 <= 9 && (*(_WORD *)v40 != 48 || v41 <= 1))
      {
        v46 = (unsigned __int16 *)(v40 + 2);
        v47 = v41 - 1;
        while (v47)
        {
          if (v42 > 0x19999999)
            goto LABEL_46;
          v48 = *v46 - 48;
          if (v48 > 9)
            goto LABEL_46;
          v43 = 0;
          v44 = 0;
          v45 = 0;
          v49 = __CFADD__(v48, 10 * v42);
          v42 = v48 + 10 * v42;
          ++v46;
          --v47;
          if (v49)
            goto LABEL_84;
        }
LABEL_78:
        v43 = 0x100000000;
        if (v42 == -1)
        {
          v43 = 0;
          v44 = 0;
        }
        else
        {
          v44 = v42;
        }
        if (v42 == -1)
          v45 = 0;
        else
          v45 = v42 & 0xFFFFFF00;
LABEL_84:
        a3 = v45 | v44;
        if ((v43 & 0x100000000) != 0)
        {
          OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex((uint64_t)this, (uint64_t)this, (const WTF::StringImpl *)a3, (uint64_t)&v114, a5, a6, a7, a8);
          goto LABEL_86;
        }
        goto LABEL_85;
      }
    }
LABEL_46:
    v43 = 0;
    v44 = 0;
    v45 = 0;
    goto LABEL_84;
  }
  if ((v22 & 0x20) != 0)
    v22 = *(_DWORD *)(v12 + 32);
  v29 = *(_DWORD *)(v17 + 12);
  v30 = v29 & (v22 >> 8);
  v31 = *(_DWORD *)(v20 + 4 * v30);
  if (!v31)
    goto LABEL_40;
  v32 = v20 + 4 * v21;
  v33 = 1;
  while (1)
  {
    v34 = (v31 - 1);
    if (v12 == *(_QWORD *)(v32 + 16 * v34))
      break;
    v30 = (v30 + v33) & v29;
    v31 = *(_DWORD *)(v20 + 4 * v30);
    ++v33;
    if (!v31)
      goto LABEL_40;
  }
  a6 = *(unsigned int *)(v32 + 16 * v34 + 8) | ((unint64_t)*(unsigned __int8 *)(v32 + 16 * v34 + 12) << 32);
LABEL_30:
  if ((_DWORD)a6 == -1)
    goto LABEL_40;
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v35 = (char *)this + 16;
    v36 = a6 << 32;
  }
  else
  {
    v35 = (char *)(*((_QWORD *)this + 1) - 8);
    v36 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)&v35[v36 >> 29];
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_37;
  v37 = *(unsigned __int8 *)(a4 + 5);
  if (v37 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)this, (uint64_t)v16, (uint64_t)&v114, a4, SHIDWORD(a6), a6);
LABEL_56:
    OwnPropertySlotByIndex = 1;
    goto LABEL_86;
  }
  if (v37 != 6)
  {
LABEL_37:
    v114 = (WTF::StringImpl *)a4;
    v118 = this;
    v116 = __PAIR64__(a6, HIDWORD(a6));
    OwnPropertySlotByIndex = 1;
    LOWORD(v120) = 257;
    goto LABEL_86;
  }
  v50 = *(_DWORD *)(v14 + 16) & 3;
  v51 = *(JSC::JSGlobalObject **)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v53 = *(_QWORD *)(a4 + 24);
    v52 = *(_QWORD *)(a4 + 32);
    v114 = *(WTF::StringImpl **)(a4 + 8);
    v115 = v51;
    LODWORD(v116) = HIDWORD(a6);
    v118 = this;
    BYTE1(v120) = 3;
    OwnPropertySlotByIndex = 1;
    if (v50 != 2)
      LOBYTE(v120) = 1;
    HIBYTE(v120) = 1;
    v124 = v53;
    v125 = v52;
  }
  else
  {
    v114 = *(WTF::StringImpl **)(a4 + 8);
    v115 = v51;
    LODWORD(v116) = HIDWORD(a6);
    v118 = this;
    OwnPropertySlotByIndex = 1;
    BYTE1(v120) = 3;
    if (v50 != 2)
      LOBYTE(v120) = 1;
  }
LABEL_86:
  if (v123)
  {
    v57 = *(_DWORD *)(v122 + 4);
    if (!v57)
    {
      __break(0xC471u);
      JUMPOUT(0x1989CADF8);
    }
    *(_DWORD *)(v122 + 4) = v57 - 1;
  }
  if ((OwnPropertySlotByIndex & 1) == 0)
  {
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989CAE18);
    }
    v58 = *((_QWORD *)this + 82);
    LODWORD(v114) = 131095;
    if ((v58 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v58 + 5) >= 0x17u && v58)
      JSC::JSObject::didBecomePrototype(v58, a2, v13, a3, a4, a5, a6, a7, a8);
    SlowCase = *v11;
    if (*v11 >= v11[1])
    {
      SlowCase = v11[2];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM(a2, a2, a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 40112, (uint64_t)a2 + 192, 128, 0, 0, v106, v107, v108);
        goto LABEL_97;
      }
      v104 = *(_QWORD *)(SlowCase + 8) ^ v11[3];
      v11[1] = SlowCase + HIDWORD(v104);
      v11[2] = SlowCase + (int)v104;
    }
    *v11 = SlowCase + 128;
LABEL_97:
    *(_DWORD *)SlowCase = 0;
    JSC::Structure::Structure(SlowCase, (uint64_t)a2, (uint64_t)this, v58, (uint64_t)&v114, (unint64_t)&JSC::JSDollarVM::s_info, 0, 0);
    if (*((_BYTE *)a2 + 755))
      __dmb(0xAu);
    if (!(_BYTE)qword_1ECF4C6A7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989CAE64);
    }
    v67 = *((_QWORD *)a2 + 1880);
    if (v67)
    {
      v68 = *(unsigned int *)(v67 + 60);
      Slow = *(_QWORD *)(v67 + 24);
      if (Slow < *(_QWORD *)(v67 + 32))
      {
LABEL_102:
        *(_QWORD *)(v67 + 24) = Slow + v68;
        goto LABEL_103;
      }
      Slow = *(_QWORD *)(v67 + 40);
      if ((Slow & 1) == 0)
      {
        v105 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v67 + 48);
        *(_QWORD *)(v67 + 32) = Slow + HIDWORD(v105);
        *(_QWORD *)(v67 + 40) = Slow + (int)v105;
        goto LABEL_102;
      }
      v109 = *((_QWORD *)a2 + 1880);
      v110 = *(unsigned int *)(v67 + 60);
      JSC::sanitizeStackForVM(a2, v60, v61, v62, v63, v64, v65, v66);
      Slow = JSC::LocalAllocator::allocateSlowCase(v109, (uint64_t)a2 + 192, v110, 0, 0, v111, v112, v113);
LABEL_103:
      *(_DWORD *)Slow = 0;
      v70 = *(_DWORD *)(SlowCase + 8);
      *(_DWORD *)Slow = SlowCase >> 4;
      *(_DWORD *)(Slow + 4) = v70;
      *(_QWORD *)(Slow + 8) = 0;
      *(_DWORD *)(Slow + 16) = 0;
      if (!(_BYTE)qword_1ECF4C6A7)
      {
        __break(0xC471u);
        JUMPOUT(0x1989CAE84);
      }
      JSC::JSDollarVM::finishCreation((JSC::JSDollarVM *)Slow, a2, v61, v62, v63, v64, v65, v66);
      if (!(_BYTE)qword_1ECF4C6A7)
      {
        __break(0xC471u);
        JUMPOUT(0x1989CAEC8);
      }
      v71 = *(WTF::StringImpl **)(*(_QWORD *)(v11[227] + 48) + 4328);
      if (v71)
        *(_DWORD *)v71 += 2;
      v126[0] = v71;
      v126[1] = Slow;
      v127 = 14;
      JSC::JSGlobalObject::addStaticGlobals((unint64_t)this, (uint64_t)v126, 1u);
      WTF::AtomStringImpl::addLiteral((uint64_t)"$vm", 3uLL, v72, v73, v74, v75, v76, &v114);
      v77 = v114;
      v114 = 0;
      v115 = this;
      v116 = 0x1000000FFFFFFFFLL;
      v78.n128_u64[0] = 0x100000001000000;
      v117 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, (uint64_t)a2, (unint64_t)v77, Slow, 4, (uint64_t)&v114, v79, v80, v78);
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
        {
          WTF::StringImpl::~StringImpl(v77, v81, v82, v83, v84, v85, v86, v87);
          WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
          if (!v71)
            return;
          goto LABEL_111;
        }
        *(_DWORD *)v77 -= 2;
      }
      if (!v71)
        return;
LABEL_111:
      if (*(_DWORD *)v71 == 2)
      {
        WTF::StringImpl::~StringImpl(v71, v81, v82, v83, v84, v85, v86, v87);
        WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
      }
      else
      {
        *(_DWORD *)v71 -= 2;
      }
      return;
    }
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a2 + 14936, a2, 0x20uLL, 0, v63, v64, v65, v66);
    if (Slow)
      goto LABEL_103;
    __break(0xC471u);
LABEL_131:
    JUMPOUT(0x1989CAAACLL);
  }
}

void JSC::setupAdaptiveWatchpoint(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int v13;
  JSC::VM *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  int v56;
  int v57;
  unsigned __int16 *v58;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned __int8 *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  JSC::JSObject *v79;
  JSC::JSObject *v80;
  uint64_t v81;
  int v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;

  v12 = *((_QWORD *)a2 + 7);
  v13 = *(_DWORD *)(v12 + 88);
  *(_DWORD *)(v12 + 88) = v13 + 1;
  v14 = (JSC::VM *)v12;
  if (!v13)
  {
    v15 = *(_QWORD *)(v12 + 16);
    v14 = (JSC::VM *)v12;
    if (v15)
    {
      v14 = (JSC::VM *)v12;
      if (*(_QWORD *)(v12 + 24) == v15)
      {
        *(_QWORD *)(v12 + 16) = 0;
        v66 = (unsigned int *)(v12 + 80);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 & 0xFFFFFFEF, v66));
        *(_BYTE *)(v12 + 86) = 1;
        v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
      }
    }
  }
  v78 = 0xFFFFFFFF00000000;
  v80 = 0;
  v81 = 0;
  v79 = a3;
  v82 = 196608;
  v83 = 0;
  v86 = 0;
  v87 = 0;
  v84 = v12;
  ++*(_DWORD *)(v12 + 4);
  v85 = 1;
  v16 = *(_QWORD *)a4;
  v17 = *(_QWORD *)a4 >> 4;
  if (!(_DWORD)v17)
    goto LABEL_38;
  v18 = 16 * (*(_DWORD *)a3 & 0xFFFFFFFE);
  if ((v17 & ~*(_DWORD *)(v18 + 0x20)) != 0)
    goto LABEL_38;
  v19 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x58);
  if (!v19)
  {
    v30 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x40);
    if (!v30 || *(_BYTE *)(v30 + 5) != 1 && *(_DWORD *)(v30 + 80) < 2u)
      goto LABEL_38;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE)), v14, 1, a4, a5, a6, a7, a8);
    if (!v19)
      goto LABEL_38;
  }
  if (!*(_DWORD *)(v19 + 24))
    goto LABEL_38;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = v20 & 0xFFFFFFFFFFFFFFFELL;
  v22 = *(unsigned int *)(v19 + 8);
  v23 = *(_DWORD *)(v16 + 16);
  if ((v20 & 1) != 0)
  {
    if ((v23 & 0x20) != 0)
      v23 = *(_DWORD *)(v16 + 32);
    v24 = *(_DWORD *)(v19 + 12);
    v25 = (v23 >> 8) & *(_QWORD *)&v24;
    v26 = *(unsigned __int8 *)(v21 + v25);
    if (*(_BYTE *)(v21 + v25))
    {
      v27 = v21 + v22;
      v28 = 1;
      while (1)
      {
        v29 = *(_QWORD *)(v27 + 8 * (v26 - 1));
        if (v16 == (v29 & 0xFFFFFFFFFFFFLL))
          break;
        v25 = ((_DWORD)v25 + v28) & v24;
        v26 = *(unsigned __int8 *)(v21 + v25);
        ++v28;
        if (!*(_BYTE *)(v21 + v25))
          goto LABEL_38;
      }
      a6 = (v29 >> 16) & 0xFF00000000 | HIBYTE(v29);
      goto LABEL_20;
    }
LABEL_38:
    if ((*((_BYTE *)a3 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a3, v14, v16, (uint64_t)&v76) & 1) != 0)
    {
      goto LABEL_47;
    }
    if (!v16)
      goto LABEL_47;
    v41 = *(_DWORD *)(v16 + 16);
    if ((v41 & 0x20) != 0)
      goto LABEL_47;
    v42 = *(_BYTE **)(v16 + 8);
    v43 = *(unsigned int *)(v16 + 4);
    if ((v41 & 4) != 0)
    {
      if ((_DWORD)v43)
      {
        v44 = *v42 - 48;
        if (v44 <= 9 && (v43 < 2 || *v42 != 48))
        {
          v73 = v42 + 1;
          v74 = v43 - 1;
          while (v74)
          {
            if (v44 > 0x19999999)
              goto LABEL_44;
            v75 = *v73 - 48;
            if (v75 > 9)
              goto LABEL_44;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v61 = __CFADD__(v75, 10 * v44);
            v44 = v75 + 10 * v44;
            ++v73;
            --v74;
            if (v61)
              goto LABEL_45;
          }
          goto LABEL_108;
        }
      }
    }
    else if ((_DWORD)v43)
    {
      v44 = *(unsigned __int16 *)v42 - 48;
      if (v44 <= 9 && (*(_WORD *)v42 != 48 || v43 <= 1))
      {
        v58 = (unsigned __int16 *)(v42 + 2);
        v59 = v43 - 1;
        while (v59)
        {
          if (v44 > 0x19999999)
            goto LABEL_44;
          v60 = *v58 - 48;
          if (v60 > 9)
            goto LABEL_44;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v61 = __CFADD__(v60, 10 * v44);
          v44 = v60 + 10 * v44;
          ++v58;
          --v59;
          if (v61)
            goto LABEL_45;
        }
LABEL_108:
        v45 = 0x100000000;
        if (v44 == -1)
        {
          v45 = 0;
          v46 = 0;
        }
        else
        {
          v46 = v44;
        }
        if (v44 == -1)
          v47 = 0;
        else
          v47 = v44 & 0xFFFFFF00;
LABEL_45:
        if ((v45 & 0x100000000) != 0)
          JSC::JSObject::getOwnPropertySlotByIndex((uint64_t)a3, (uint64_t)a2, (const WTF::StringImpl *)(v47 | v46), (uint64_t)&v76, a5, a6, a7, a8);
        goto LABEL_47;
      }
    }
LABEL_44:
    v45 = 0;
    v46 = 0;
    v47 = 0;
    goto LABEL_45;
  }
  if ((v23 & 0x20) != 0)
    v23 = *(_DWORD *)(v16 + 32);
  v35 = *(_DWORD *)(v19 + 12);
  v36 = v35 & (v23 >> 8);
  v37 = *(_DWORD *)(v21 + 4 * v36);
  if (!v37)
    goto LABEL_38;
  v38 = v21 + 4 * v22;
  v39 = 1;
  while (1)
  {
    v40 = (v37 - 1);
    if (v16 == *(_QWORD *)(v38 + 16 * v40))
      break;
    v36 = (v36 + v39) & v35;
    v37 = *(_DWORD *)(v21 + 4 * v36);
    ++v39;
    if (!v37)
      goto LABEL_38;
  }
  a6 = *(unsigned int *)(v38 + 16 * v40 + 8) | ((unint64_t)*(unsigned __int8 *)(v38 + 16 * v40 + 12) << 32);
LABEL_20:
  if ((_DWORD)a6 == -1)
    goto LABEL_38;
  if ((int)a6 <= 63)
  {
    v31 = (char *)a3 + 16;
    v32 = a6 << 32;
  }
  else
  {
    v31 = (char *)(*((_QWORD *)a3 + 1) - 8);
    v32 = 0x3F00000000 - (a6 << 32);
  }
  v33 = *(_QWORD *)&v31[v32 >> 29];
  if ((v33 & 0xFFFE000000000002) != 0)
    goto LABEL_26;
  v34 = *(unsigned __int8 *)(v33 + 5);
  if (v34 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a3, (uint64_t)v14, (uint64_t)&v76, v33, SHIDWORD(a6), a6);
    goto LABEL_47;
  }
  if (v34 == 6)
  {
    v62 = *(_DWORD *)(v18 + 16) & 3;
    v63 = *(_QWORD *)(v33 + 16);
    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v33 & 0xFFFFFFFE)
                                                                             + 0x4C)))
    {
      v65 = *(_QWORD *)(v33 + 24);
      v64 = *(_QWORD *)(v33 + 32);
      v76 = *(_QWORD *)(v33 + 8);
      v77 = v63;
      LODWORD(v78) = HIDWORD(a6);
      v80 = a3;
      BYTE1(v82) = 3;
      if (v62 != 2)
        LOBYTE(v82) = 1;
      HIBYTE(v82) = 1;
      v86 = v65;
      v87 = v64;
    }
    else
    {
      v76 = *(_QWORD *)(v33 + 8);
      v77 = v63;
      LODWORD(v78) = HIDWORD(a6);
      v80 = a3;
      BYTE1(v82) = 3;
      if (v62 != 2)
        LOBYTE(v82) = 1;
    }
  }
  else
  {
LABEL_26:
    v76 = v33;
    v80 = a3;
    v78 = __PAIR64__(a6, HIDWORD(a6));
    LOWORD(v82) = 257;
  }
LABEL_47:
  if (!BYTE1(v82) || (BYTE1(v82) != 1 || v82 != 1) && (BYTE1(v82) != 2 || v82 != 1))
  {
    __break(0xC471u);
    JUMPOUT(0x1989CB380);
  }
  v48 = v76;
  if (*((_QWORD *)this + 2) != v48)
  {
    __break(0xC471u);
    JUMPOUT(0x1989CB44CLL);
  }
  JSC::ObjectPropertyCondition::isWatchable((uint64_t)this, 1, v49, v50, v51, v52, v53, v54);
  if ((v55 & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989CB46CLL);
  }
  if (v85)
  {
    v56 = *(_DWORD *)(v84 + 4);
    if (!v56)
    {
      __break(0xC471u);
      JUMPOUT(0x1989CB4E4);
    }
    *(_DWORD *)(v84 + 4) = v56 - 1;
  }
  v57 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v57;
  if (!v57 && *(_BYTE *)(v12 + 93441))
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v68 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 16) = v68;
      *(_QWORD *)(v12 + 32) = v68;
      if (v68)
      {
        v69 = (unsigned int *)(v12 + 80);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 | 0x10, v69));
      }
      if (*(_BYTE *)(v12 + 93443))
        *(_BYTE *)(v12 + 93442) = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v71 = (unsigned int *)(v12 + 80);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 | 2, v71));
    }
  }
}

_QWORD **std::unique_ptr<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>>::operator=[abi:sn180100](_QWORD **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v9 = (_QWORD *)*a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    *v10 = off_1E3580B60;
    v11 = (_QWORD *)v10[8];
    if (v11)
    {
      v12 = v10[7];
      *v11 = v12;
      *(_QWORD *)(v12 + 8) = v11;
      v10[7] = 0;
      v10[8] = 0;
    }
    v13 = (_QWORD *)v10[5];
    if (v13)
    {
      v14 = v10[4];
      *v13 = v14;
      *(_QWORD *)(v14 + 8) = v13;
      v10[4] = 0;
      v10[5] = 0;
    }
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::setupAbsenceAdaptiveWatchpoint(uint64_t *a1, JSC::JSCell *a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v13;
  int v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _BYTE *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  int v51;
  unsigned __int16 *v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned __int8 *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  const WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;

  v10 = (uint64_t)a3;
  v13 = *((_QWORD *)a2 + 7);
  v14 = *(_DWORD *)(v13 + 88);
  *(_DWORD *)(v13 + 88) = v14 + 1;
  v15 = (JSC::VM *)v13;
  if (!v14)
  {
    v16 = *(_QWORD *)(v13 + 16);
    v15 = (JSC::VM *)v13;
    if (v16)
    {
      v15 = (JSC::VM *)v13;
      if (*(_QWORD *)(v13 + 24) == v16)
      {
        *(_QWORD *)(v13 + 16) = 0;
        v60 = (unsigned int *)(v13 + 80);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 & 0xFFFFFFEF, v60));
        *(_BYTE *)(v13 + 86) = 1;
        v15 = (JSC::VM *)*((_QWORD *)a2 + 7);
      }
    }
  }
  v72 = 0xFFFFFFFF00000000;
  v74 = 0;
  v75 = 0;
  v73 = a3;
  v76 = 196608;
  v77 = 0;
  v80 = 0;
  v81 = 0;
  v78 = v13;
  ++*(_DWORD *)(v13 + 4);
  v79 = 1;
  if ((a4 >> 4))
  {
    v17 = 16 * (*(_DWORD *)a3 & 0xFFFFFFFE);
    if (((a4 >> 4) & ~*(_DWORD *)(v17 + 0x20)) == 0)
    {
      v18 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x58);
      if (v18
        || (v29 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x40)) != 0
        && (*(_BYTE *)(v29 + 5) == 1 || *(_DWORD *)(v29 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE)), v15, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v18))
      {
        if (*(_DWORD *)(v18 + 24))
        {
          v19 = *(_QWORD *)(v18 + 16);
          v20 = v19 & 0xFFFFFFFFFFFFFFFELL;
          v21 = *(unsigned int *)(v18 + 8);
          v22 = *(_DWORD *)(a4 + 16);
          if ((v19 & 1) != 0)
          {
            if ((v22 & 0x20) != 0)
              v22 = *(_DWORD *)(a4 + 32);
            v23 = *(_DWORD *)(v18 + 12);
            v24 = (v22 >> 8) & *(_QWORD *)&v23;
            v25 = *(unsigned __int8 *)(v20 + v24);
            if (!*(_BYTE *)(v20 + v24))
              goto LABEL_39;
            v26 = v20 + v21;
            v27 = 1;
            while (1)
            {
              v28 = *(_QWORD *)(v26 + 8 * (v25 - 1));
              if (a4 == (v28 & 0xFFFFFFFFFFFFLL))
                break;
              v24 = ((_DWORD)v24 + v27) & v23;
              v25 = *(unsigned __int8 *)(v20 + v24);
              ++v27;
              if (!*(_BYTE *)(v20 + v24))
                goto LABEL_39;
            }
            a6 = (v28 >> 16) & 0xFF00000000 | HIBYTE(v28);
          }
          else
          {
            if ((v22 & 0x20) != 0)
              v22 = *(_DWORD *)(a4 + 32);
            v34 = *(_DWORD *)(v18 + 12);
            v35 = v34 & (v22 >> 8);
            v36 = *(_DWORD *)(v20 + 4 * v35);
            if (!v36)
              goto LABEL_39;
            v37 = v20 + 4 * v21;
            v38 = 1;
            while (1)
            {
              v39 = (v36 - 1);
              if (*(_QWORD *)(v37 + 16 * v39) == a4)
                break;
              v35 = (v35 + v38) & v34;
              v36 = *(_DWORD *)(v20 + 4 * v35);
              ++v38;
              if (!v36)
                goto LABEL_39;
            }
            a6 = *(unsigned int *)(v37 + 16 * v39 + 8) | ((unint64_t)*(unsigned __int8 *)(v37 + 16 * v39 + 12) << 32);
          }
          if ((_DWORD)a6 != -1)
          {
            if ((int)a6 <= 63)
            {
              v30 = v10 + 16;
              v31 = a6 << 32;
            }
            else
            {
              v30 = *(_QWORD *)(v10 + 8) - 8;
              v31 = 0x3F00000000 - (a6 << 32);
            }
            v32 = *(_QWORD *)(v30 + (v31 >> 29));
            if ((v32 & 0xFFFE000000000002) != 0)
              goto LABEL_26;
            v33 = *(unsigned __int8 *)(v32 + 5);
            if (v33 == 5)
            {
              JSC::JSObject::fillGetterPropertySlot((unsigned int *)v10, (uint64_t)v15, (uint64_t)&v70, v32, SHIDWORD(a6), a6);
              goto LABEL_27;
            }
            if (v33 == 6)
            {
              v56 = *(_DWORD *)(v17 + 16) & 3;
              v57 = *(_QWORD *)(v32 + 16);
              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v32 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
              {
                v59 = *(_QWORD *)(v32 + 24);
                v58 = *(_QWORD *)(v32 + 32);
                v70 = *(_QWORD *)(v32 + 8);
                v71 = v57;
                LODWORD(v72) = HIDWORD(a6);
                v74 = v10;
                BYTE1(v76) = 3;
                if (v56 != 2)
                  LOBYTE(v76) = 1;
                HIBYTE(v76) = 1;
                v80 = v59;
                v81 = v58;
              }
              else
              {
                v70 = *(_QWORD *)(v32 + 8);
                v71 = v57;
                LODWORD(v72) = HIDWORD(a6);
                v74 = v10;
                BYTE1(v76) = 3;
                if (v56 != 2)
                  LOBYTE(v76) = 1;
              }
            }
            else
            {
LABEL_26:
              v70 = v32;
              v74 = v10;
              v72 = __PAIR64__(a6, HIDWORD(a6));
              LOWORD(v76) = 257;
            }
LABEL_27:
            __break(0xC471u);
            JUMPOUT(0x1989CB81CLL);
          }
        }
      }
    }
  }
LABEL_39:
  if ((*(_BYTE *)(v10 + 6) & 0x20) != 0
    && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v10, v15, a4, (uint64_t)&v70) & 1) != 0)
  {
    goto LABEL_27;
  }
  if (a4)
  {
    v40 = *(_DWORD *)(a4 + 16);
    if ((v40 & 0x20) == 0)
    {
      v41 = *(_BYTE **)(a4 + 8);
      v42 = *(unsigned int *)(a4 + 4);
      if ((v40 & 4) != 0)
      {
        if ((_DWORD)v42)
        {
          v43 = *v41 - 48;
          if (v43 <= 9 && (v42 < 2 || *v41 != 48))
          {
            v67 = v41 + 1;
            v68 = v42 - 1;
            while (v68)
            {
              if (v43 > 0x19999999)
                goto LABEL_45;
              v69 = *v67 - 48;
              if (v69 > 9)
                goto LABEL_45;
              v44 = 0;
              v45 = 0;
              v46 = 0;
              v55 = __CFADD__(v69, 10 * v43);
              v43 = v69 + 10 * v43;
              ++v67;
              --v68;
              if (v55)
                goto LABEL_46;
            }
            goto LABEL_113;
          }
        }
      }
      else if ((_DWORD)v42)
      {
        v43 = *(unsigned __int16 *)v41 - 48;
        if (v43 <= 9 && (*(_WORD *)v41 != 48 || v42 <= 1))
        {
          v52 = (unsigned __int16 *)(v41 + 2);
          v53 = v42 - 1;
          while (v53)
          {
            if (v43 > 0x19999999)
              goto LABEL_45;
            v54 = *v52 - 48;
            if (v54 > 9)
              goto LABEL_45;
            v44 = 0;
            v45 = 0;
            v46 = 0;
            v55 = __CFADD__(v54, 10 * v43);
            v43 = v54 + 10 * v43;
            ++v52;
            --v53;
            if (v55)
              goto LABEL_46;
          }
LABEL_113:
          v44 = 0x100000000;
          if (v43 == -1)
          {
            v44 = 0;
            v45 = 0;
          }
          else
          {
            v45 = v43;
          }
          if (v43 == -1)
            v46 = 0;
          else
            v46 = v43 & 0xFFFFFF00;
LABEL_46:
          a3 = (const WTF::StringImpl *)(v46 | v45);
          if ((v44 & 0x100000000) != 0
            && JSC::JSObject::getOwnPropertySlotByIndex(v10, (uint64_t)a2, a3, (uint64_t)&v70, a5, a6, a7, a8))
          {
            goto LABEL_27;
          }
          goto LABEL_47;
        }
      }
LABEL_45:
      v44 = 0;
      v45 = 0;
      v46 = 0;
      goto LABEL_46;
    }
  }
LABEL_47:
  if (BYTE1(v76))
  {
    __break(0xC471u);
    JUMPOUT(0x1989CBB04);
  }
  v47 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
  if (!v47)
    v47 = *(_QWORD *)(v10 + 16);
  v48 = 2;
  if (a5)
    v48 = a5;
  if (v47 != v48)
  {
    __break(0xC471u);
    JUMPOUT(0x1989CBB24);
  }
  if (a2 && *(_DWORD *)(v13 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath(v13 + 192, (unint64_t)a2);
  *a1 = v10;
  a1[1] = a4 | 0x2000000000000;
  a1[2] = a5;
  JSC::ObjectPropertyCondition::isWatchable((uint64_t)a1, 1, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((v49 & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989CBB44);
  }
  if (v79)
  {
    v50 = *(_DWORD *)(v78 + 4);
    if (!v50)
    {
      __break(0xC471u);
      JUMPOUT(0x1989CBBCCLL);
    }
    *(_DWORD *)(v78 + 4) = v50 - 1;
  }
  v51 = *(_DWORD *)(v13 + 88) - 1;
  *(_DWORD *)(v13 + 88) = v51;
  if (!v51 && *(_BYTE *)(v13 + 93441))
  {
    if (*(_BYTE *)(v13 + 86))
    {
      v62 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 16) = v62;
      *(_QWORD *)(v13 + 32) = v62;
      if (v62)
      {
        v63 = (unsigned int *)(v13 + 80);
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 | 0x10, v63));
      }
      if (*(_BYTE *)(v13 + 93443))
        *(_BYTE *)(v13 + 93442) = 1;
      *(_BYTE *)(v13 + 86) = 0;
    }
    else
    {
      v65 = (unsigned int *)(v13 + 80);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 | 2, v65));
    }
  }
}

_QWORD *JSC::ObjectAdaptiveStructureWatchpoint::install(JSC::ObjectAdaptiveStructureWatchpoint *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD **v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  unsigned int v15;

  v9 = (_DWORD **)((char *)this + 24);
  JSC::ObjectPropertyCondition::isWatchable((uint64_t)this + 24, 0, a3, a4, a5, a6, a7, a8);
  if ((v10 & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989CBD38);
  }
  v11 = 16 * (**v9 & 0xFFFFFFFE);
  v12 = *(_QWORD *)(v11 + 0x60);
  if ((v12 & 1) != 0)
  {
    v15 = (v12 >> 1) & 3;
    v12 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v12 = 1;
    *(_BYTE *)(v12 + 4) = v15;
    *(_BYTE *)(v12 + 5) = 0;
    *(_QWORD *)(v12 + 8) = v12 + 8;
    *(_QWORD *)(v12 + 16) = v12 + 8;
    __dmb(0xAu);
    *(_QWORD *)(v11 + 96) = v12;
  }
  v14 = *(_QWORD *)(v12 + 8);
  result = (_QWORD *)(v12 + 8);
  *(_QWORD *)this = v14;
  *((_QWORD *)this + 1) = result;
  *result = this;
  *(_QWORD *)(v14 + 8) = this;
  *((_WORD *)result - 2) = 257;
  return result;
}

void JSC::JSGlobalObject::fixupPrototypeChainWithObjectPrototype(JSC::JSGlobalObject *this, JSC::VM *a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *i;
  JSC::JSGlobalObject *v10;
  JSC::JSGlobalObject *v11;
  unint64_t v12;

  for (i = this; ; i = v10)
  {
    v10 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x30);
    v11 = v10;
    if (!v10)
      v11 = (JSC::JSGlobalObject *)*((_QWORD *)i + 2);
    if (((unint64_t)v11 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)v11 + 5) < 0x17u)
      break;
    if (!v10)
      v10 = (JSC::JSGlobalObject *)*((_QWORD *)i + 2);
  }
  v12 = *((_QWORD *)this + 82);
  if (i != (JSC::JSGlobalObject *)v12)
    JSC::JSObject::setPrototypeDirect((unint64_t)i, a2, v12, a5, a6, a7, a8, a9, a3);
}

void JSC::JSGlobalObject::haveABadTime(JSC::JSGlobalObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int ***v24;
  uint64_t v25;
  unsigned int ***v26;
  uint64_t v27;
  unsigned int ***v28;
  unsigned int *v29;
  unint64_t v30;
  char v31;
  int *v32;
  unsigned int ***v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  JSC::VM *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int ***v56;
  uint64_t v57;
  unsigned int ***v58;
  uint64_t v59;
  unsigned int ***v60;
  unsigned int *v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  unsigned int v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  unsigned int v103;
  unint64_t v104;
  uint64_t i;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int ***v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  _DWORD *v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  unsigned int v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  unsigned int v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t *v177;
  unint64_t v178;
  char *v179;
  char *v180;
  unint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int ***v193;
  uint64_t v194;
  unsigned int ***v195;
  uint64_t v196;
  unsigned int ***v197;
  char *v198;
  unsigned int *v199;
  unint64_t v200;
  char v201;
  uint64_t v202;
  unsigned int ***v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  unsigned int j;
  unsigned __int8 *v212;
  unint64_t v213;
  int v214;
  BOOL v215;
  unsigned int ***v216;
  unsigned int ***v217;
  unsigned int ***v218;
  JSC::JSGlobalObject *v219;
  JSC::MarkedSpace *v220;
  unsigned int ***v221;
  unsigned int ***v222;
  JSC::VM *v223;
  unsigned int *v224;
  unsigned int v225;
  uint64_t v226;
  _QWORD v227[2];
  uint64_t *v228;
  char v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232[3];
  char v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236[2];

  if (*(_BYTE *)(*((_QWORD *)this + 256) + 4) == 2)
    return;
  ++*((_DWORD *)a2 + 229);
  JSC::JSGlobalObject::fireWatchpointAndMakeAllArrayStructuresSlowPut((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  v234 = 0;
  v235 = 0;
  v232[0] = (uint64_t)&v234;
  v232[1] = (uint64_t)this;
  v232[2] = 0;
  v233 = 0;
  v220 = (JSC::VM *)((char *)a2 + 352);
  JSC::MarkedSpace::willStartIterating((JSC::VM *)((char *)a2 + 352), v10, v11, v12, v13, v14, v15, v16);
  v223 = a2;
  v24 = (unsigned int ***)*((_QWORD *)a2 + 57);
  if (!v24)
  {
    v26 = 0;
    v216 = 0;
    v25 = 0;
LABEL_277:
    v28 = &v24[v25];
    v24 = v216;
    goto LABEL_10;
  }
  v25 = *((unsigned int *)v24 - 1);
  v26 = &v24[v25];
  if (!*((_DWORD *)v24 - 3))
  {
    v216 = &v24[v25];
    goto LABEL_277;
  }
  if ((_DWORD)v25)
  {
    v27 = 8 * v25;
    while ((unint64_t)*v24 + 1 <= 1)
    {
      ++v24;
      v27 -= 8;
      if (!v27)
      {
        v24 = v26;
        break;
      }
    }
  }
  v28 = v26;
LABEL_10:
  if (v26 == v24)
  {
LABEL_22:
    v34 = *((unsigned int *)v223 + 97);
    if ((_DWORD)v34)
    {
      v35 = (uint64_t *)*((_QWORD *)v223 + 47);
      v36 = &v35[v34];
      do
      {
        while (1)
        {
          v37 = *v35;
          if ((*(_BYTE *)(*v35 + 33) & 1) != 0 || (*(_BYTE *)(v37 + 32) & 1) != 0)
            break;
          if (++v35 == v36)
            goto LABEL_33;
        }
        ++v35;
        else
          v38 = v35 == v36;
      }
      while (!v38);
    }
  }
  else
  {
    while (1)
    {
      v29 = **v24;
      v30 = v29[1];
      if (v30 <= 0x3FF)
        break;
LABEL_16:
      v33 = v24 + 1;
      v24 = v28;
      if (v33 != v28)
      {
        v24 = v33;
        while ((unint64_t)*v24 + 1 <= 1)
        {
          if (++v24 == v28)
          {
            v24 = v28;
            break;
          }
        }
      }
      if (v24 == v26)
        goto LABEL_22;
    }
    v31 = *((_BYTE *)v29 + 9);
    while (1)
    {
      v32 = (int *)(*((_QWORD *)v29 + 11) + 16 * v30);
      if (JSC::MarkedBlock::Handle::isLive((uint64_t)v29, (uint64_t)v32, v18, v19, v20, v21, v22, v23))
      {
      }
      v30 += *v29;
      if (v30 >= 0x400)
        goto LABEL_16;
    }
  }
LABEL_33:
  JSC::MarkedSpace::didFinishIterating(v220, v17, v18, v19, v20, v21, v22, v23);
  if (!v233)
    goto LABEL_266;
  v47 = v223;
  if ((_DWORD)v235)
  {
    if (HIDWORD(v235))
      HIDWORD(v235) = 0;
    v48 = v234;
    if (v234)
    {
      v234 = 0;
      LODWORD(v235) = 0;
      WTF::fastFree(v48, v39, v40, v41, v42, v43, v44, v45);
    }
  }
  v219 = this;
  v231 = 0;
  JSC::MarkedSpace::willStartIterating(v220, (uint64_t)v39, v40, v41, v42, v43, v44, v45);
  v56 = (unsigned int ***)*((_QWORD *)v223 + 57);
  if (v56)
  {
    v57 = *((unsigned int *)v56 - 1);
    v58 = &v56[v57];
    if (*((_DWORD *)v56 - 3))
    {
      if ((_DWORD)v57)
      {
        v59 = 8 * v57;
        while ((unint64_t)*v56 + 1 <= 1)
        {
          ++v56;
          v59 -= 8;
          if (!v59)
          {
            v56 = v58;
            break;
          }
        }
      }
      v60 = v58;
      goto LABEL_47;
    }
    v217 = &v56[v57];
  }
  else
  {
    v58 = 0;
    v217 = 0;
    v57 = 0;
  }
  v60 = &v56[v57];
  v56 = v217;
LABEL_47:
  if (v58 != v56)
  {
    v221 = v60;
    v222 = v58;
    do
    {
      v61 = **v56;
      v62 = v61[1];
      if (v62 <= 0x3FF)
      {
        v224 = **v56;
        if (*((unsigned __int8 *)v61 + 9) < 2u)
        {
          while (1)
          {
            v63 = *((_QWORD *)v61 + 11) + 16 * v62;
            if (JSC::MarkedBlock::Handle::isLive((uint64_t)v61, v63, v50, v51, v52, v53, v54, v55))
            {
              if (*(unsigned __int8 *)(v63 + 5) >= 0x17u)
              {
                v64 = *(_DWORD *)v63;
                if ((*(_BYTE *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0x12) & 8) != 0)
                  break;
              }
            }
LABEL_54:
            v62 += *v61;
            if (v62 >= 0x400)
              goto LABEL_125;
          }
          v65 = *(_QWORD *)(16 * (v64 & 0xFFFFFFFE) + 0x28);
          v66 = (~(v65 << 32) + v65) ^ ((unint64_t)(~(v65 << 32) + v65) >> 22);
          v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
          v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
          v225 = (v68 >> 31) ^ v68;
          do
          {
LABEL_57:
            v69 = *(int **)(16 * (v64 & 0xFFFFFFFE) + 0x30);
            if (!v69)
              v69 = *(int **)(v63 + 16);
            if (v69 == (int *)2)
              goto LABEL_54;
            v64 = *v69;
            v70 = *(_QWORD *)(16 * (*v69 & 0xFFFFFFFE) + 0x28);
            v63 = (uint64_t)v69;
          }
          while (v70 == v65);
          v71 = v231;
          if (v231)
            goto LABEL_63;
          v72 = (_OWORD *)WTF::fastMalloc((WTF *)0x90);
          v72[2] = 0u;
          v72[3] = 0u;
          v72[4] = 0u;
          v72[5] = 0u;
          v72[6] = 0u;
          v72[7] = 0u;
          v72[8] = 0u;
          *v72 = xmmword_19914F680;
          v72[1] = 0u;
          v71 = (uint64_t)(v72 + 1);
          v231 = v71;
          if (v71)
LABEL_63:
            v73 = *(_DWORD *)(v71 - 8);
          else
            v73 = 0;
          v74 = (~(v70 << 32) + v70) ^ ((unint64_t)(~(v70 << 32) + v70) >> 22);
          v75 = 9 * ((v74 + ~(v74 << 13)) ^ ((v74 + ~(v74 << 13)) >> 8));
          v76 = (v75 ^ (v75 >> 15)) + ~((v75 ^ (v75 >> 15)) << 27);
          v77 = v73 & ((v76 >> 31) ^ v76);
          v78 = (uint64_t *)(v71 + 16 * v77);
          v79 = *v78;
          if (*v78)
          {
            v80 = 0;
            v81 = 1;
            while (v79 != v70)
            {
              if (v79 == -1)
                v80 = v78;
              v77 = (v77 + v81) & v73;
              v78 = (uint64_t *)(v71 + 16 * v77);
              v79 = *v78;
              ++v81;
              if (!*v78)
              {
                if (v80)
                {
                  *v80 = 0;
                  v80[1] = 0;
                  --*(_DWORD *)(v71 - 16);
                  v78 = v80;
                }
                goto LABEL_72;
              }
            }
LABEL_84:
            v88 = v78[1];
            if (v88
              || (v89 = WTF::fastZeroedMalloc(0x50uLL, (unint64_t)v49, v50, v51, v52, v53, v54, v55),
                  v78[1] = v89 + 16,
                  *(_DWORD *)(v89 + 12) = 8,
                  *(_DWORD *)(v78[1] - 8) = 7,
                  *(_DWORD *)(v78[1] - 16) = 0,
                  *(_DWORD *)(v78[1] - 12) = 0,
                  (v88 = v78[1]) != 0))
            {
              v90 = *(_DWORD *)(v88 - 8);
            }
            else
            {
              v90 = 0;
            }
            v91 = v90 & v225;
            v92 = (_QWORD *)(v88 + 8 * (v90 & v225));
            v93 = *v92;
            if (*v92)
            {
              v94 = 0;
              v95 = 1;
              while (v93 != v65)
              {
                if (v93 == -1)
                  v94 = v92;
                v91 = (v91 + v95) & v90;
                v92 = (_QWORD *)(v88 + 8 * v91);
                v93 = *v92;
                ++v95;
                if (!*v92)
                {
                  if (v94)
                  {
                    *v94 = 0;
                    --*(_DWORD *)(v78[1] - 16);
                    v92 = v94;
                  }
                  goto LABEL_95;
                }
              }
              goto LABEL_119;
            }
LABEL_95:
            *v92 = v65;
            v96 = v78[1];
            if (v96)
              v97 = *(_DWORD *)(v96 - 12) + 1;
            else
              v97 = 1;
            *(_DWORD *)(v96 - 12) = v97;
            v98 = v78[1];
            if (v98)
              v99 = *(_DWORD *)(v98 - 12);
            else
              v99 = 0;
            v100 = (*(_DWORD *)(v98 - 16) + v99);
            v101 = *(unsigned int *)(v98 - 4);
            if (v101 > 0x400)
            {
              if (v101 <= 2 * v100)
              {
LABEL_104:
                v102 = *(_DWORD *)(v98 - 12);
                v103 = (_DWORD)v101 << (6 * v102 >= (2 * v101));
                goto LABEL_107;
              }
            }
            else if (3 * v101 <= 4 * v100)
            {
              if ((_DWORD)v101)
                goto LABEL_104;
              v102 = *(_DWORD *)(v98 - 12);
              v103 = 8;
LABEL_107:
              v104 = WTF::fastZeroedMalloc(8 * v103 + 16, (unint64_t)v49, v50, v51, v52, v53, v54, v55);
              v78[1] = v104 + 16;
              *(_DWORD *)(v104 + 12) = v103;
              *(_DWORD *)(v78[1] - 8) = v103 - 1;
              *(_DWORD *)(v78[1] - 16) = 0;
              *(_DWORD *)(v78[1] - 12) = v102;
              v61 = v224;
              if (!(_DWORD)v101)
                goto LABEL_118;
              for (i = 0; i != v101; ++i)
              {
                v106 = *(_QWORD *)(v98 + 8 * i);
                if ((unint64_t)(v106 + 1) >= 2)
                {
                  v107 = v78[1];
                  if (v107)
                    v108 = *(_DWORD *)(v107 - 8);
                  else
                    v108 = 0;
                  v109 = (~(v106 << 32) + v106) ^ ((unint64_t)(~(v106 << 32) + v106) >> 22);
                  v110 = 9 * ((v109 + ~(v109 << 13)) ^ ((v109 + ~(v109 << 13)) >> 8));
                  v111 = (v110 ^ (v110 >> 15)) + ~((v110 ^ (v110 >> 15)) << 27);
                  v112 = v108 & ((v111 >> 31) ^ v111);
                  v113 = 1;
                  do
                  {
                    v114 = v112;
                    v115 = *(_QWORD *)(v107 + 8 * v112);
                    v112 = (v112 + v113++) & v108;
                  }
                  while (v115);
                  *(_QWORD *)(v107 + 8 * v114) = v106;
                }
              }
              if (v98)
LABEL_118:
                WTF::fastFree(v98 - 16, v49, v50, v51, v52, v53, v54, v55);
            }
LABEL_119:
            v64 = *v69;
            v63 = (uint64_t)v69;
            goto LABEL_57;
          }
LABEL_72:
          v82 = v78[1];
          *v78 = v70;
          v78[1] = 0;
          if (v82)
            WTF::fastFree(v82 - 16, v49, v50, v51, v52, v53, v54, v55);
          v83 = v231;
          if (v231)
            v84 = *(_DWORD *)(v231 - 12) + 1;
          else
            v84 = 1;
          *(_DWORD *)(v231 - 12) = v84;
          v85 = (*(_DWORD *)(v83 - 16) + v84);
          v86 = *(unsigned int *)(v83 - 4);
          if (v86 <= 0x400)
          {
            if (3 * v86 > 4 * v85)
              goto LABEL_84;
            if ((_DWORD)v86)
LABEL_80:
              v87 = (_DWORD)v86 << (6 * v84 >= (2 * v86));
            else
              v87 = 8;
            v78 = WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(&v231, v87, v78);
            goto LABEL_84;
          }
          if (v86 > 2 * v85)
            goto LABEL_84;
          goto LABEL_80;
        }
        do
        {
          JSC::MarkedBlock::Handle::isLive((uint64_t)v61, *((_QWORD *)v61 + 11) + 16 * v62, v50, v51, v52, v53, v54, v55);
          v62 += *v61;
        }
        while (v62 <= 0x3FF);
      }
LABEL_125:
      v116 = v56 + 1;
      v56 = v221;
      v47 = v223;
      if (v116 != v221)
      {
        v56 = v116;
        while ((unint64_t)*v56 + 1 <= 1)
        {
          if (++v56 == v221)
          {
            v56 = v221;
            break;
          }
        }
      }
    }
    while (v56 != v222);
  }
  v117 = *((unsigned int *)v47 + 97);
  if ((_DWORD)v117)
  {
    v118 = (uint64_t *)*((_QWORD *)v223 + 47);
    v119 = &v118[v117];
    while (1)
    {
      v120 = *v118;
      if (((*(_BYTE *)(*v118 + 33) & 1) != 0 || (*(_BYTE *)(v120 + 32) & 1) != 0)
        && *(unsigned __int16 *)(v120 + 34) <= 0x1FFu
        && *(unsigned __int8 *)(v120 + 117) >= 0x17u)
      {
        v123 = *(_DWORD *)(v120 + 112);
        v121 = (_DWORD *)(v120 + 112);
        v122 = v123;
        v124 = 16 * (v123 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v124 + 0x12) & 8) != 0)
          break;
      }
LABEL_138:
      if (++v118 == v119)
        goto LABEL_171;
    }
    v125 = *(_QWORD *)(v124 + 40);
    while (1)
    {
      do
      {
        v126 = *(_DWORD **)(16 * (v122 & 0xFFFFFFFE) + 0x30);
        if (!v126)
          v126 = (_DWORD *)*((_QWORD *)v121 + 2);
        if (v126 == (_DWORD *)2)
          goto LABEL_138;
        v122 = *v126;
        v127 = *(_QWORD *)(16 * (*v126 & 0xFFFFFFFE) + 0x28);
        v121 = v126;
      }
      while (v127 == v125);
      v236[0] = v125;
      v128 = v231;
      if (v231
        || (WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(&v231, 8u, 0), (v128 = v231) != 0))
      {
        v129 = *(_DWORD *)(v128 - 8);
      }
      else
      {
        v129 = 0;
      }
      v130 = (~(v127 << 32) + v127) ^ ((unint64_t)(~(v127 << 32) + v127) >> 22);
      v131 = 9 * ((v130 + ~(v130 << 13)) ^ ((v130 + ~(v130 << 13)) >> 8));
      v132 = (v131 ^ (v131 >> 15)) + ~((v131 ^ (v131 >> 15)) << 27);
      v133 = v129 & ((v132 >> 31) ^ v132);
      v134 = (uint64_t *)(v128 + 16 * v133);
      v135 = *v134;
      if (*v134)
      {
        v136 = 0;
        v137 = 1;
        while (v135 != v127)
        {
          if (v135 == -1)
            v136 = v134;
          v133 = (v133 + v137) & v129;
          v134 = (uint64_t *)(v128 + 16 * v133);
          v135 = *v134;
          ++v137;
          if (!*v134)
          {
            if (v136)
            {
              *v136 = 0;
              v136[1] = 0;
              --*(_DWORD *)(v128 - 16);
              v134 = v136;
            }
            goto LABEL_156;
          }
        }
      }
      else
      {
LABEL_156:
        v138 = v134[1];
        *v134 = v127;
        v134[1] = 0;
        if (v138)
          WTF::fastFree(v138 - 16, v49, v50, v51, v52, v53, v54, v55);
        v139 = v231;
        if (v231)
          v140 = *(_DWORD *)(v231 - 12) + 1;
        else
          v140 = 1;
        *(_DWORD *)(v231 - 12) = v140;
        v141 = (*(_DWORD *)(v139 - 16) + v140);
        v142 = *(unsigned int *)(v139 - 4);
        if (v142 <= 0x400)
        {
          if (3 * v142 > 4 * v141)
            goto LABEL_168;
          if ((_DWORD)v142)
LABEL_164:
            v143 = (_DWORD)v142 << (6 * v140 >= (2 * v142));
          else
            v143 = 8;
          v134 = WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::HashSet<JSC::JSCell *,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(&v231, v143, v134);
          goto LABEL_168;
        }
        if (v142 <= 2 * v141)
          goto LABEL_164;
      }
LABEL_168:
      WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::add(v134 + 1, v236, v51, v52, v53, v54, v55, (uint64_t)v227);
      v122 = *v126;
      v121 = v126;
    }
  }
LABEL_171:
  JSC::MarkedSpace::didFinishIterating(v220, (uint64_t)v49, v50, v51, v52, v53, v54, v55);
  v236[0] = 0;
  v144 = (char *)WTF::fastMalloc((WTF *)0x80);
  v151 = 0;
  *(_QWORD *)v144 = v219;
  v152 = v144;
  v153 = 16;
  v154 = 1;
  do
  {
    v230 = 0;
    v155 = *(_QWORD *)&v152[8 * v151];
    if (v151 == v153 - 1)
      v151 = 0;
    else
      ++v151;
    v230 = v155;
    JSC::JSGlobalObject::fireWatchpointAndMakeAllArrayStructuresSlowPut(v155, v223, v145, v146, v147, v148, v149, v150);
    WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::add(v236, (uint64_t *)&v230, v156, v157, v158, v159, v160, (uint64_t)v227);
    if (!(_BYTE)v228 || !v231)
      continue;
    v162 = *(_DWORD *)(v231 - 8);
    v163 = (~(v230 << 32) + v230) ^ ((~(v230 << 32) + v230) >> 22);
    v164 = 9 * ((v163 + ~(v163 << 13)) ^ ((v163 + ~(v163 << 13)) >> 8));
    v165 = (v164 ^ (v164 >> 15)) + ~((v164 ^ (v164 >> 15)) << 27);
    v166 = v162 & ((v165 >> 31) ^ v165);
    v167 = *(_QWORD *)(v231 + 16 * v166);
    if (v167 != v230)
    {
      v168 = 1;
      while (v167)
      {
        v166 = ((_DWORD)v166 + v168) & v162;
        v167 = *(_QWORD *)(v231 + 16 * v166);
        ++v168;
        if (v167 == v230)
          goto LABEL_183;
      }
      v166 = *(unsigned int *)(v231 - 4);
    }
LABEL_183:
    if (v166 == *(_DWORD *)(v231 - 4))
      continue;
    v169 = *(_QWORD *)(v231 + 16 * v166 + 8);
    if (v169)
    {
      v170 = *(unsigned int *)(v169 - 4);
      v171 = (uint64_t *)(v169 + 8 * v170);
      if (*(_DWORD *)(v169 - 12))
      {
        v172 = *(uint64_t **)(v231 + 16 * v166 + 8);
        if ((_DWORD)v170)
        {
          v173 = 8 * v170;
          v172 = *(uint64_t **)(v231 + 16 * v166 + 8);
          while ((unint64_t)(*v172 + 1) <= 1)
          {
            ++v172;
            v173 -= 8;
            if (!v173)
            {
              v172 = v171;
              break;
            }
          }
        }
LABEL_191:
        v174 = (uint64_t *)(v169 + 8 * *(unsigned int *)(v169 - 4));
        goto LABEL_196;
      }
      v172 = (uint64_t *)(v169 + 8 * v170);
    }
    else
    {
      v172 = 0;
      v170 = 0;
    }
    v171 = (uint64_t *)(v169 + 8 * v170);
    if (v169)
      goto LABEL_191;
    v174 = 0;
LABEL_196:
    while (v172 != v174)
    {
      v175 = *v172;
      if (v151)
      {
        v176 = v153;
        if (v154 + 1 == v151)
          goto LABEL_205;
      }
      else if (v154)
      {
        if (v154 == v153 - 1)
        {
          v176 = v153;
LABEL_205:
          v226 = *v172;
          v177 = v174;
          v178 = v176 + (v176 >> 2);
          if (v178 <= 0xF)
            v178 = 15;
          if (v178 >= 0x1FFFFFFF)
          {
            __break(0xC471u);
            JUMPOUT(0x1989CCC54);
          }
          v153 = v178 + 1;
          v179 = (char *)WTF::fastMalloc((WTF *)(8 * (v178 + 1)));
          v180 = v179;
          v181 = v151;
          if (v151 <= v154)
          {
            v182 = &v152[8 * v151];
            v183 = &v152[8 * v154];
            v184 = &v179[8 * v151];
          }
          else
          {
            memcpy(v179, v152, 8 * v154);
            v151 = v153 + v151 - v176;
            v182 = &v152[8 * v181];
            v183 = &v152[8 * v176];
            v184 = &v180[8 * v151];
          }
          memcpy(v184, v182, v183 - v182);
          v153 = v153;
          if (v152)
          {
            if (v180 == v152)
            {
              v153 = 0;
              v180 = 0;
            }
            WTF::fastFree((unint64_t)v152, v161, v145, v146, v147, v148, v149, v150);
          }
          v152 = v180;
          v174 = v177;
          v175 = v226;
          goto LABEL_216;
        }
        v151 = 0;
      }
      else
      {
        v176 = 0;
        if (!v153)
          goto LABEL_205;
        v151 = 0;
      }
LABEL_216:
      *(_QWORD *)&v152[8 * v154] = v175;
      if (v154 == v153 - 1)
        v154 = 0;
      else
        ++v154;
      v185 = v172 + 1;
      v172 = v171;
      if (v185 != v171)
      {
        v172 = v185;
        while ((unint64_t)(*v172 + 1) <= 1)
        {
          if (++v172 == v171)
          {
            v172 = v171;
            break;
          }
        }
      }
    }
  }
  while (v151 != v154);
  v227[0] = &v234;
  v227[1] = 0;
  v228 = v236;
  v229 = 0;
  JSC::MarkedSpace::willStartIterating(v220, (uint64_t)v161, v145, v146, v147, v148, v149, v150);
  v193 = (unsigned int ***)*((_QWORD *)v223 + 57);
  if (!v193)
  {
    v195 = 0;
    v218 = 0;
    v194 = 0;
LABEL_281:
    v197 = &v193[v194];
    v193 = v218;
    goto LABEL_236;
  }
  v194 = *((unsigned int *)v193 - 1);
  v195 = &v193[v194];
  if (!*((_DWORD *)v193 - 3))
  {
    v218 = &v193[v194];
    goto LABEL_281;
  }
  if ((_DWORD)v194)
  {
    v196 = 8 * v194;
    while ((unint64_t)*v193 + 1 <= 1)
    {
      ++v193;
      v196 -= 8;
      if (!v196)
      {
        v193 = v195;
        break;
      }
    }
  }
  v197 = v195;
LABEL_236:
  while (v193 != v195)
  {
    v198 = v152;
    v199 = **v193;
    v200 = v199[1];
    if (v200 <= 0x3FF)
    {
      v201 = *((_BYTE *)v199 + 9);
      do
      {
        v202 = *((_QWORD *)v199 + 11) + 16 * v200;
        if (JSC::MarkedBlock::Handle::isLive((uint64_t)v199, v202, v187, v188, v189, v190, v191, v192))
        v200 += *v199;
      }
      while (v200 < 0x400);
    }
    v203 = v193 + 1;
    v193 = v197;
    v152 = v198;
    if (v203 != v197)
    {
      v193 = v203;
      while ((unint64_t)*v193 + 1 <= 1)
      {
        if (++v193 == v197)
        {
          v193 = v197;
          break;
        }
      }
    }
  }
  v204 = *((unsigned int *)v223 + 97);
  if ((_DWORD)v204)
  {
    v205 = (uint64_t *)*((_QWORD *)v223 + 47);
    v206 = 8 * v204;
    do
    {
      v207 = *v205;
      if ((*(_BYTE *)(*v205 + 33) & 1) != 0 || (*(_BYTE *)(v207 + 32) & 1) != 0)
      ++v205;
      v206 -= 8;
    }
    while (v206);
  }
  JSC::MarkedSpace::didFinishIterating(v220, v186, v187, v188, v189, v190, v191, v192);
  if (v152)
    WTF::fastFree((unint64_t)v152, v39, v40, v41, v42, v43, v44, v45);
  if (v236[0])
    WTF::fastFree(v236[0] - 16, v39, v40, v41, v42, v43, v44, v45);
  v208 = v231;
  if (v231)
  {
    v209 = *(unsigned int *)(v231 - 4);
    if ((_DWORD)v209)
    {
      v210 = (_QWORD *)(v231 + 8);
      do
      {
        if (*(v210 - 1) != -1 && *v210)
          WTF::fastFree(*v210 - 16, v39, v40, v41, v42, v43, v44, v45);
        v210 += 2;
        --v209;
      }
      while (v209);
    }
    WTF::fastFree(v208 - 16, v39, v40, v41, v42, v43, v44, v45);
  }
LABEL_266:
  for (j = HIDWORD(v235); HIDWORD(v235); j = HIDWORD(v235))
  {
    v212 = *(unsigned __int8 **)(v234 + 8 * j - 8);
    HIDWORD(v235) = j - 1;
    JSC::JSObject::switchToSlowPutArrayStorage(v212, v223, v40, v41, v42, v43, v44, v45, v46);
  }
  v213 = v234;
  if (v234)
  {
    v234 = 0;
    LODWORD(v235) = 0;
    WTF::fastFree(v213, v39, v40, v41, v42, v43, v44, v45);
  }
  v214 = *((_DWORD *)v223 + 229) - 1;
  *((_DWORD *)v223 + 229) = v214;
  if (*((unsigned __int8 *)v223 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v215 = v214 == 0;
  else
    v215 = 0;
  if (v215)
  {
    *((_BYTE *)v223 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v223 + 192, 0);
  }
}

void JSC::SymbolTable::set<JSC::SymbolTableEntry &>(uint64_t a1, WTF::StringImpl *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;

  v11 = (unsigned __int8 *)(a1 + 20);
  if (__ldaxr((unsigned __int8 *)(a1 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 20);
LABEL_5:
  if (*(_QWORD *)(a1 + 48))
  {
    __break(0xC471u);
    JUMPOUT(0x1989CCD98);
  }
  v13 = (unint64_t *)*a3;
  if ((*a3 & 1) != 0)
    v13 = (unint64_t *)a3;
  v14 = *v13;
  if ((v14 & 0x30) <= 0x10)
  {
    v15 = v14 >> 6;
    v16 = *(_DWORD *)(a1 + 16);
    if (v16 == -1 || v16 < v15)
      *(_DWORD *)(a1 + 16) = v15;
  }
  if (a2)
    *(_DWORD *)a2 += 2;
  v35 = a2;
  WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry&>((uint64_t *)(a1 + 8), (WTF::AtomStringImpl *)&v35, a3, a4, a5, a6, a7, a8, (uint64_t)&v34);
  v24 = v35;
  v35 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  v25 = __ldxr(v11);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, v11))
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, v18, v19, v20, v21, v22, v23);
}

unint64_t JSC::JSGlobalObject::fireWatchpointAndMakeAllArrayStructuresSlowPut(unint64_t this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  int v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  int v24;
  unsigned int v25;
  unint64_t StructureImpl;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  unint64_t StructureWithIndicesImpl;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  unint64_t IndicesStructureImpl;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  _QWORD *v56;
  uint64_t v57;
  void (**v58)(JSC::StringFireDetail *__hidden);
  const char *v59;

  if (*(_BYTE *)(*(_QWORD *)(this + 2048) + 4) == 2)
    return this;
  v9 = this;
  v10 = (unsigned __int8 *)(this + 1992);
  if (__ldaxr((unsigned __int8 *)(this + 1992)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(this + 1992);
LABEL_6:
  v12 = *(_QWORD *)(v9 + 1976);
  if (v12)
  {
    *(_QWORD *)(v9 + 1976) = 0;
    v13 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v13)
    {
      v14 = v12 + 32;
      do
      {
        if (*(_QWORD *)(v14 - 32))
          v15 = 0;
        else
          v15 = *(_QWORD *)(v14 - 24) == 0;
        v16 = v15 && *(_DWORD *)(v14 - 16) == 1;
        if ((!v16 || *(_QWORD *)(v14 - 8)) && *(_QWORD *)v14)
        {
          *(_QWORD *)(*(_QWORD *)v14 + 8) = 3;
          *(_QWORD *)v14 = 0;
        }
        v14 += 40;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree(v12 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = __ldxr(v10);
  if (v17 == 1)
  {
    if (!__stlxr(0, v10))
      goto LABEL_27;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
LABEL_27:
  v58 = &off_1E3583C90;
  v59 = "Clearing StructureCache";
  JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(v9 + 2336), (uint64_t)a2);
  v24 = *(_DWORD *)(v9 + 876);
  if ((v24 & 0xFFFFFFFE) != 0)
  {
    *(_DWORD *)(v9 + 892) = v24 & 0xFFFFFFFE;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
      v24 = *(_DWORD *)(v9 + 876);
    }
  }
  else
  {
    *(_DWORD *)(v9 + 892) = 0;
  }
  if ((v24 & 0xFFFFFFFE) != 0)
  {
    *(_DWORD *)(v9 + 896) = v24 & 0xFFFFFFFE;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
      v24 = *(_DWORD *)(v9 + 876);
    }
  }
  else
  {
    *(_DWORD *)(v9 + 896) = 0;
  }
  if ((v24 & 0xFFFFFFFE) != 0)
  {
    *(_DWORD *)(v9 + 900) = v24 & 0xFFFFFFFE;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
      v24 = *(_DWORD *)(v9 + 876);
    }
  }
  else
  {
    *(_DWORD *)(v9 + 900) = 0;
  }
  if ((v24 & 0xFFFFFFFE) != 0)
  {
    *(_DWORD *)(v9 + 904) = v24 & 0xFFFFFFFE;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
      v24 = *(_DWORD *)(v9 + 876);
    }
  }
  else
  {
    *(_DWORD *)(v9 + 904) = 0;
  }
  if ((v24 & 0xFFFFFFFE) != 0)
  {
    *(_DWORD *)(v9 + 908) = v24 & 0xFFFFFFFE;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
      v24 = *(_DWORD *)(v9 + 876);
    }
  }
  else
  {
    *(_DWORD *)(v9 + 908) = 0;
  }
  if ((v24 & 0xFFFFFFFE) != 0)
  {
    *(_DWORD *)(v9 + 912) = v24 & 0xFFFFFFFE;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
      v24 = *(_DWORD *)(v9 + 876);
    }
  }
  else
  {
    *(_DWORD *)(v9 + 912) = 0;
  }
  if ((v24 & 0xFFFFFFFE) != 0)
  {
    *(_DWORD *)(v9 + 916) = v24 & 0xFFFFFFFE;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
      v24 = *(_DWORD *)(v9 + 876);
    }
  }
  else
  {
    *(_DWORD *)(v9 + 916) = 0;
  }
  if ((v24 & 0xFFFFFFFE) != 0)
  {
    *(_DWORD *)(v9 + 920) = v24 & 0xFFFFFFFE;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
      v24 = *(_DWORD *)(v9 + 876);
    }
  }
  else
  {
    *(_DWORD *)(v9 + 920) = 0;
  }
  if ((v24 & 0xFFFFFFFE) != 0)
  {
    *(_DWORD *)(v9 + 924) = v24 & 0xFFFFFFFE;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
      v24 = *(_DWORD *)(v9 + 876);
    }
  }
  else
  {
    *(_DWORD *)(v9 + 924) = 0;
  }
  v25 = v24 & 0xFFFFFFFE;
  if (v25)
  {
    *(_DWORD *)(v9 + 928) = v25;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
  }
  else
  {
    *(_DWORD *)(v9 + 928) = 0;
  }
  StructureImpl = JSC::createStructureImpl(a2, (JSC::VM *)v9, (JSC::JSGlobalObject *)0xD, v18, v23, v19, v20, v21, v22);
  if (StructureImpl)
  {
    *(_DWORD *)(v9 + 1012) = StructureImpl >> 4;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
  }
  else
  {
    *(_DWORD *)(v9 + 1012) = 0;
  }
  StructureWithIndicesImpl = JSC::createStructureWithIndicesImpl(a2, (JSC::VM *)v9, (JSC::JSGlobalObject *)0xD, v27, v32, v28, v29, v30, v31);
  if (StructureWithIndicesImpl)
  {
    *(_DWORD *)(v9 + 1016) = StructureWithIndicesImpl >> 4;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
  }
  else
  {
    *(_DWORD *)(v9 + 1016) = 0;
  }
  IndicesStructureImpl = JSC::createIndicesStructureImpl(a2, (JSC::VM *)v9, (JSC::JSGlobalObject *)0xD, v34, v39, v35, v36, v37, v38);
  if (IndicesStructureImpl)
  {
    *(_DWORD *)(v9 + 1020) = IndicesStructureImpl >> 4;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
  }
  else
  {
    *(_DWORD *)(v9 + 1020) = 0;
  }
  this = JSC::ClonedArguments::createStructure((uint64_t)a2, (JSC::VM *)v9, *(_QWORD *)(v9 + 656), 12, v41, v42, v43, v44, v45);
  if (this)
  {
    *(_DWORD *)(v9 + 844) = this >> 4;
    if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v9 + 7))
      this = JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v9);
  }
  else
  {
    *(_DWORD *)(v9 + 844) = 0;
  }
  v52 = *(_QWORD *)(v9 + 2048);
  if (*(_BYTE *)(v52 + 4) == 1)
  {
    v58 = &off_1E3583C90;
    v59 = "Having a bad time";
    __dmb(0xAu);
    v54 = *(_QWORD *)(v52 + 8);
    v53 = (unint64_t *)(v52 + 8);
    this = v54;
    *((_BYTE *)v53 - 4) = 2;
    v55 = *((_DWORD *)a2 + 229);
    *((_DWORD *)a2 + 229) = v55 + 1;
    if ((unint64_t *)v54 != v53)
    {
      do
      {
        v57 = *(_QWORD *)this;
        v56 = *(_QWORD **)(this + 8);
        *v56 = *(_QWORD *)this;
        *(_QWORD *)(v57 + 8) = v56;
        *(_QWORD *)this = 0;
        *(_QWORD *)(this + 8) = 0;
        JSC::Watchpoint::fire(this, a2, &v58, v46, v47, v48, v49, v50, v51);
        this = *v53;
      }
      while ((unint64_t *)*v53 != v53);
      v55 = *((_DWORD *)a2 + 229) - 1;
    }
    *((_DWORD *)a2 + 229) = v55;
    __dmb(0xAu);
  }
  return this;
}

uint64_t JSC::JSGlobalObject::resetPrototype(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  unint64_t SlowCase;
  JSC::JSGlobalObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v11 = result;
  v12 = *(_QWORD *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x30);
  if (!v12)
    v12 = *(_QWORD *)(result + 16);
  if (v12 != a3)
  {
    v13 = (unint64_t *)(a2 + 40136);
    JSC::JSObject::setPrototypeDirect(result, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8, a9);
    JSC::JSGlobalObject::fixupPrototypeChainWithObjectPrototype((JSC::JSGlobalObject *)v11, (JSC::VM *)a2, v20, v14, v15, v16, v17, v18, v19);
    v39 = 755107872;
    if ((a3 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(a3 + 5) >= 0x17u && a3)
      JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a2, v28, v22, v23, v24, v25, v26, v27);
    SlowCase = *v13;
    if (*v13 >= *(_QWORD *)(a2 + 40144))
    {
      SlowCase = *(_QWORD *)(a2 + 40152);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)a2, v21, v22, v23, v24, v25, v26, v27);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(a2 + 40112, a2 + 192, 128, 0, 0, v36, v37, v38);
        goto LABEL_10;
      }
      v35 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(a2 + 40160);
      *(_QWORD *)(a2 + 40144) = SlowCase + HIDWORD(v35);
      *(_QWORD *)(a2 + 40152) = SlowCase + (int)v35;
    }
    *v13 = SlowCase + 128;
LABEL_10:
    *(_DWORD *)SlowCase = 0;
    JSC::Structure::Structure(SlowCase, a2, v11, a3, (uint64_t)&v39, (unint64_t)&JSC::JSGlobalProxy::s_info, 0, 0);
    if (*(_BYTE *)(a2 + 755))
      __dmb(0xAu);
    result = JSC::JSGlobalProxy::create((JSC::JSGlobalProxy *)a2, SlowCase, (JSC::Structure *)v11, v30, v31, v32, v33, v34);
    *(_QWORD *)(v11 + 64) = result;
    if (result)
    {
      if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(v11 + 7))
        return JSC::Heap::writeBarrierSlowPath(a2 + 192, v11);
    }
  }
  return result;
}

unint64_t JSC::JSGlobalProxy::create(JSC::JSGlobalProxy *this, unint64_t a2, JSC::Structure *a3, JSC::JSGlobalObject *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  int v12;

  result = JSC::allocateCell<JSC::JSGlobalProxy>(this, (JSC::VM *)0x18, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v12;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a3;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return result;
}

void JSC::JSGlobalObject::addStaticGlobals(unint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned __int8 *v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t casual;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  WTF::StringImpl **v55;
  WTF::StringImpl *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  JSC::VM *v67;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t **v75;
  uint64_t *i;
  unsigned int v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t StatusReg;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  _QWORD v97[3];

  v6 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v7 = *v6;
    if ((v7 & 0x40) != 0)
      break;
    v8 = __ldaxr(v6);
    if (v8 == v7)
    {
      if (!__stxr(v7 | 0x40, v6))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_8:
  v94 = a3;
  v95 = *(_QWORD *)(a1 + 32);
  WTF::SegmentedVector<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,16ul>::grow(a1 + 32, v95 + a3);
  if (a3)
  {
    v17 = *(unsigned int *)(a1 + 52);
    v18 = a3;
    v19 = v95 - 1;
    do
    {
      v20 = (unint64_t)(v19 + v18) >> 4;
      if (v20 >= v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1989CDB34);
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v20) + 8 * (((_BYTE)v19 + (_BYTE)v18--) & 0xF)) = 10;
    }
    while (v18);
  }
  while (1)
  {
    v21 = *v6;
    if ((v21 & 0xC0) != 0x40)
      break;
    v22 = __ldxr(v6);
    if (v22 == v21)
    {
      if (!__stxr(v21 & 0xBF, v6))
        goto LABEL_18;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v6, 0, v10, v11, v12, v13, v14, v15);
LABEL_18:
  if ((int)a3 >= 1)
  {
    v23 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    while (1)
    {
      v24 = (unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 20);
      if (__ldaxr(v24))
        break;
      if (__stxr(1u, v24))
        goto LABEL_22;
LABEL_23:
      v26 = *(_QWORD *)(a1 + 24);
      v27 = (*(_DWORD *)(v26 + 16) + 1);
      *(_DWORD *)(v26 + 16) = v27;
      if ((_DWORD)v27 != (_DWORD)v23 + (_DWORD)v95)
      {
        __break(0xC471u);
        JUMPOUT(0x1989CD990);
      }
      v28 = a2 + 24 * v23;
      v29 = *(_DWORD *)(v28 + 16);
      v30 = 11;
      if ((v29 & 2) == 0)
        v30 = 9;
      v31 = v30 | (v27 << 6);
      if ((v29 & 4) != 0)
        v32 = v31 | 4;
      else
        v32 = v31;
      v97[0] = v32;
      if ((_DWORD)v27 == -1)
      {
        __break(0xC471u);
        JUMPOUT(0x1989CDB14);
      }
      if ((v32 & 0x30) == 0 && BYTE1(dword_1ECF4C240) != 0)
      {
        if ((v32 & 1) != 0)
        {
          v74 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v74 = v32 & 0x3FFFFFFFFELL;
          v74[1] = 0;
          v97[0] = v74;
          v32 = (uint64_t)v74;
        }
        else if (*(_QWORD *)(v32 + 8))
        {
          goto LABEL_43;
        }
        v34 = *(_QWORD *)(StatusReg + 752);
        if (v34)
        {
          v35 = (_BYTE *)(v34 + 8488);
          *(_BYTE *)(v34 + 8488) = 1;
          v36 = *(unsigned int *)(v34 + 8504);
          if ((_DWORD)v36)
          {
            *(_DWORD *)(v34 + 8504) = v36 - *(_DWORD *)(v34 + 8508);
            casual = *(_QWORD *)(v34 + 8496) - v36;
            goto LABEL_39;
          }
          v70 = *(_QWORD *)(v34 + 8528);
          v71 = *(_QWORD *)(v34 + 8512);
          if (v70)
          {
LABEL_94:
            v72 = __clz(v70);
            *(_QWORD *)(v34 + 8528) = v70 & ~(0x8000000000000000 >> v72);
            casual = v71 + 16 * v72;
LABEL_39:
            *v35 = 0;
LABEL_40:
            *(_DWORD *)casual = 1;
            *(_WORD *)(casual + 4) = 0;
            *(_QWORD *)(casual + 8) = casual + 8;
            *(_QWORD *)(casual + 16) = casual + 8;
            v38 = *(_QWORD *)(v32 + 8);
            *(_QWORD *)(v32 + 8) = casual;
            if (v38)
            {
              do
              {
                v39 = __ldaxr((unsigned int *)v38);
                v40 = v39 - 1;
              }
              while (__stlxr(v40, (unsigned int *)v38));
              if (!v40)
              {
                atomic_store(1u, (unsigned int *)v38);
                v75 = (uint64_t **)(v38 + 8);
                for (i = *(uint64_t **)(v38 + 8); i != (uint64_t *)v75; i = *v75)
                {
                  v84 = *i;
                  v83 = (uint64_t *)i[1];
                  *v83 = *i;
                  *(_QWORD *)(v84 + 8) = v83;
                  *i = 0;
                  i[1] = 0;
                }
                WTF::fastFree(v38, v9, v10, v11, v12, v13, v14, v15);
              }
            }
            goto LABEL_43;
          }
          if (*(_BYTE *)(v34 + 8493) == 6)
          {
            v77 = *(_DWORD *)(v34 + 8524);
            v78 = *(unsigned int *)(v34 + 8520);
            if (v78 < v77)
            {
              *(_QWORD *)&v35[8 * v78 + 56] = 0;
              v79 = (unint64_t *)(v34 + 8 * v78 + 8552);
              v80 = v77 - 1 - v78;
              while (v80)
              {
                v71 += 1024;
                v82 = *v79++;
                v81 = v82;
                LODWORD(v78) = v78 + 1;
                --v80;
                if (v82)
                {
                  v70 = __rbit64(v81);
                  *(_DWORD *)(v34 + 8520) = v78;
                  *(_QWORD *)(v34 + 8512) = v71;
                  goto LABEL_94;
                }
              }
              *(_DWORD *)(v34 + 8520) = v77;
            }
          }
          *v35 = 0;
        }
        casual = bmalloc_allocate_casual(24, 1);
        goto LABEL_40;
      }
LABEL_43:
      v41 = v97[0];
      if ((v97[0] & 1) != 0)
        v42 = 0;
      else
        v42 = *(_QWORD *)(v97[0] + 8);
      v43 = *(_QWORD *)(a1 + 24);
      if (*(_QWORD *)(v43 + 48))
      {
        __break(0xC471u);
        JUMPOUT(0x1989CD9B0);
      }
      v44 = *(WTF::StringImpl **)v28;
      v45 = v97;
      if ((v97[0] & 1) == 0)
        v45 = (unint64_t *)v97[0];
      v46 = *v45;
      if ((v46 & 0x30) <= 0x10)
      {
        v47 = v46 >> 6;
        v48 = *(_DWORD *)(v43 + 16);
        if (v48 == -1 || v48 < v47)
          *(_DWORD *)(v43 + 16) = v47;
      }
      if (v44)
        *(_DWORD *)v44 += 2;
      v50 = (uint64_t *)(v43 + 8);
      v51 = *(_QWORD *)(v43 + 8);
      if (v51
        || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v50, 8u, 0), (v51 = *v50) != 0))
      {
        v52 = *(_DWORD *)(v51 - 8);
      }
      else
      {
        v52 = 0;
      }
      v53 = *((_DWORD *)v44 + 4);
      if ((v53 & 0x20) != 0)
        v53 = *((_DWORD *)v44 + 8);
      v54 = v52 & (v53 >> 8);
      v55 = (WTF::StringImpl **)(v51 + 16 * v54);
      v56 = *v55;
      if (*v55)
      {
        v10 = 0;
        v57 = 1;
        do
        {
          if (v56 == v44)
          {
            if (v44)
            {
              if (*(_DWORD *)v44 == 2)
              {
                WTF::StringImpl::~StringImpl(v44, (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
                WTF::fastFree(v85, v86, v87, v88, v89, v90, v91, v92);
              }
              else
              {
                *(_DWORD *)v44 -= 2;
              }
            }
            goto LABEL_74;
          }
          if (v56 == (WTF::StringImpl *)-1)
            v10 = (uint64_t)v55;
          v54 = (v54 + v57) & v52;
          v55 = (WTF::StringImpl **)(v51 + 16 * v54);
          v56 = *v55;
          ++v57;
        }
        while (*v55);
        if (!v10)
          goto LABEL_67;
        v58 = 1;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)(v10 + 8) = 1;
        --*(_DWORD *)(*v50 - 16);
        *(_QWORD *)v10 = v44;
      }
      else
      {
LABEL_67:
        *v55 = v44;
        v58 = (uint64_t)v55[1];
        v10 = (uint64_t)v55;
      }
      *(_QWORD *)(v10 + 8) = v41;
      v97[0] = v58;
      v59 = *v50;
      if (*v50)
        v60 = *(_DWORD *)(v59 - 12) + 1;
      else
        v60 = 1;
      *(_DWORD *)(v59 - 12) = v60;
      v61 = *v50;
      if (*v50)
        v62 = *(_DWORD *)(v61 - 12);
      else
        v62 = 0;
      v63 = (*(_DWORD *)(v61 - 16) + v62);
      v64 = *(unsigned int *)(v61 - 4);
      if (v64 > 0x400)
      {
        if (v64 > 2 * v63)
          goto LABEL_74;
LABEL_108:
        v73 = (_DWORD)v64 << (6 * *(_DWORD *)(v61 - 12) >= (2 * v64));
        goto LABEL_106;
      }
      if (3 * v64 > 4 * v63)
        goto LABEL_74;
      if ((_DWORD)v64)
        goto LABEL_108;
      v73 = 8;
LABEL_106:
      WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::SymbolTableEntry,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,JSC::SymbolTableIndexHashTraits,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v50, v73, (WTF::StringImpl **)v10);
LABEL_74:
      if (v27 >> 4 >= *(unsigned int *)(a1 + 52))
      {
        __break(0xC471u);
        JUMPOUT(0x1989CDB2CLL);
      }
      v65 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * (v27 >> 4));
      if ((v97[0] & 1) == 0)
        JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)v97, v9, v10, v11, v12, v13, v14, v15);
      v66 = __ldxr(v24);
      if (v66 == 1)
      {
        if (!__stlxr(0, v24))
          goto LABEL_82;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v24, 0, v10, v11, v12, v13, v14, v15);
LABEL_82:
      v67 = *(JSC::VM **)(a1 + 56);
      v68 = *(_QWORD *)(a2 + 24 * v23 + 8);
      v96 = *(WTF::StringImpl **)v28;
      *(_QWORD *)(v65 + 8 * (v27 & 0xF)) = v68;
      if (v68)
        v69 = (v68 & 0xFFFE000000000002) == 0;
      else
        v69 = 0;
      if (v69 && *((_DWORD *)v67 + 190) >= *(unsigned __int8 *)(a1 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v67 + 192, a1);
      if (v42)
      {
        v97[0] = &off_1E3583740;
        v97[1] = a1;
        v97[2] = &v96;
        if (*(_BYTE *)(v42 + 4))
        {
          if (*(_BYTE *)(v42 + 4) == 1)
            JSC::WatchpointSet::fireAllSlow(v42, v67, v97, v11, v12, v13, v14, v15, v16);
        }
        else
        {
          __dmb(0xAu);
          *(_BYTE *)(v42 + 4) = 1;
          __dmb(0xAu);
        }
      }
      if (++v23 == v94)
        return;
    }
    __clrex();
LABEL_22:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v24);
    goto LABEL_23;
  }
}

void JSC::JSGlobalObject::clearRareData(JSC::JSGlobalObject *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::JSCell **v11;

  v8 = *((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = 0;
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = *(unsigned int *)(v9 - 4);
      if ((_DWORD)v10)
      {
        v11 = (JSC::JSCell **)(v9 + 8);
        do
        {
          if (*(v11 - 1) != (JSC::JSCell *)-1)
          {
            a2 = *v11;
            *v11 = 0;
            if (a2)
              std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100]((uint64_t)v11, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
          }
          v11 += 2;
          --v10;
        }
        while (v10);
      }
      WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::JSGlobalObject::tryInstallSpeciesWatchpoint<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  JSC::Structure *v19;
  int v20;
  double v21;
  uint64_t *v22;
  unint64_t v23;
  JSC::VM *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  JSC::VM *v38;
  JSC::Structure *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  JSC::Structure *v51;
  int v52;
  _BYTE *v53;
  uint64_t v54;
  const WTF::StringImpl *v55;
  uint64_t v57;
  uint64_t v58;
  JSC::Structure *v59;
  double v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unsigned __int16 *v74;
  uint64_t v75;
  unsigned int v76;
  BOOL v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  JSC::VM *v81;
  uint64_t v82;
  uint64_t *v83;
  JSC::Structure *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  void (**v88)(JSC::StringFireDetail *__hidden);
  int v89;
  unsigned int v90;
  int v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t **v96;
  int v97;
  uint64_t *v98;
  JSC::Structure *v99;
  char OwnStaticPropertySlot;
  JSC::Structure *v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  _BYTE *v105;
  uint64_t v106;
  const WTF::StringImpl *v107;
  BOOL v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  int v131;
  char v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  const JSC::PropertyTable *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  const JSC::PropertyTable *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (**v160)(JSC::StringFireDetail *__hidden);
  uint64_t v161;
  unsigned int v162;
  _QWORD *v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  unsigned __int16 *v171;
  uint64_t v172;
  unsigned int v173;
  JSC::Structure *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t **v177;
  int v178;
  JSC::VM *v179;
  JSC::Structure *v180;
  uint64_t *v181;
  JSC::Structure *v182;
  char v183;
  uint64_t *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int *v194;
  unsigned int v195;
  _BYTE *v196;
  uint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  JSC::Structure *v200;
  uint64_t v201;
  unsigned int *v202;
  unsigned int v203;
  unsigned __int8 *v204;
  uint64_t v205;
  unsigned int v206;
  uint64_t *v207;
  JSC::Structure *v208;
  unsigned __int8 *v209;
  uint64_t v210;
  unsigned int v211;
  unint64_t v212;
  _BYTE *v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t *v217;
  __int128 v218;
  void (**v219)(JSC::StringFireDetail *__hidden);
  __int128 v220;
  uint64_t v221;
  void (**v222)(JSC::StringFireDetail *__hidden);
  const char *v223;
  int v224[2];
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  char v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236[2];
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  char v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD v246[3];

  if (*(_QWORD *)a4)
  {
    __break(0xC471u);
    JUMPOUT(0x1989CE81CLL);
  }
  v8 = a5;
  if (*a5)
  {
    __break(0xC471u);
    JUMPOUT(0x1989CE83CLL);
  }
  v10 = (uint64_t *)a6;
  v11 = (uint64_t *)a4;
  v14 = a1;
  v15 = *(_QWORD *)(a1 + 56);
  v16 = (_BYTE *)(v15 + 64);
  v17 = *(_DWORD *)(v15 + 88);
  *(_DWORD *)(v15 + 88) = v17 + 1;
  if (!v17)
  {
    v18 = *(_QWORD *)(v15 + 16);
    if (v18)
    {
      if (*(_QWORD *)(v15 + 24) == v18)
      {
        *(_QWORD *)(v15 + 16) = 0;
        v194 = (unsigned int *)(v15 + 80);
        do
          v195 = __ldaxr(v194);
        while (__stlxr(v195 & 0xFFFFFFEF, v194));
        *(_BYTE *)(v15 + 86) = 1;
      }
    }
  }
  v19 = (JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE));
  v20 = *((_DWORD *)v19 + 4);
  if ((v20 & 3) != 0)
  {
    v19 = (JSC::Structure *)JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)a2 & 0xFFFFFFFE), (JSC::VM *)v15, (JSC::JSObject *)a2, a4, (uint64_t)a5, a6, a7, a8);
    v20 = *((_DWORD *)v19 + 4);
  }
  if ((v20 & 3) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989CE85CLL);
  }
  v215 = v11;
  v216 = a7;
  v214 = v8;
  v21 = NAN;
  *(_QWORD *)v236 = 0xFFFFFFFF00000000;
  v238 = 0;
  v239 = 0;
  v237 = a2;
  v240 = 196608;
  v241 = 0;
  v244 = 0;
  v245 = 0;
  v242 = v15;
  ++*(_DWORD *)(v15 + 4);
  v243 = 1;
  v22 = (uint64_t *)(v15 + 41952);
  v23 = *(_QWORD *)(*(_QWORD *)(v15 + 41952) + 1080);
  v24 = *(JSC::VM **)(v14 + 56);
  if (!(v23 >> 4))
    goto LABEL_43;
  v25 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if (((v23 >> 4) & ~*(_DWORD *)(v25 + 0x20)) != 0)
    goto LABEL_43;
  v26 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x58);
  if (!v26)
  {
    v37 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x40);
    if (!v37 || *(_BYTE *)(v37 + 5) != 1 && *(_DWORD *)(v37 + 80) < 2u)
      goto LABEL_43;
    v38 = *(JSC::VM **)(v14 + 56);
    v39 = v19;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), v24, 1, (const JSC::PropertyTable *)a4, (uint64_t)a5, a6, a7, a8);
    v24 = v38;
    v16 = (_BYTE *)(v15 + 64);
    v19 = v39;
    v22 = (uint64_t *)(v15 + 41952);
    if (!v26)
      goto LABEL_43;
  }
  if (!*(_DWORD *)(v26 + 24))
    goto LABEL_43;
  v27 = *(_QWORD *)(v26 + 16);
  v28 = v27 & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(unsigned int *)(v26 + 8);
  v30 = *(_DWORD *)(v23 + 16);
  if ((v27 & 1) != 0)
  {
    if ((v30 & 0x20) != 0)
      v30 = *(_DWORD *)(v23 + 32);
    v31 = *(_DWORD *)(v26 + 12);
    v32 = (v30 >> 8) & *(_QWORD *)&v31;
    v33 = *(unsigned __int8 *)(v28 + v32);
    if (*(_BYTE *)(v28 + v32))
    {
      v34 = v28 + v29;
      v35 = 1;
      while (1)
      {
        v36 = *(_QWORD *)(v34 + 8 * (v33 - 1));
        if (v23 == (v36 & 0xFFFFFFFFFFFFLL))
          break;
        v32 = ((_DWORD)v32 + v35) & v31;
        v33 = *(unsigned __int8 *)(v28 + v32);
        ++v35;
        if (!*(_BYTE *)(v28 + v32))
          goto LABEL_43;
      }
      a6 = (v36 >> 16) & 0xFF00000000 | HIBYTE(v36);
      goto LABEL_25;
    }
LABEL_43:
    if ((*(_BYTE *)(a2 + 6) & 0x20) == 0
      || (v98 = v22,
          v99 = v19,
          OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a2, v24, v23, (uint64_t)&v234),
          v19 = v99,
          v22 = v98,
          (OwnStaticPropertySlot & 1) == 0))
    {
      if (v23)
      {
        v52 = *(_DWORD *)(v23 + 16);
        if ((v52 & 0x20) == 0)
        {
          v53 = *(_BYTE **)(v23 + 8);
          v54 = *(unsigned int *)(v23 + 4);
          if ((v52 & 4) != 0)
          {
            if (!(_DWORD)v54)
              goto LABEL_49;
            v55 = (const WTF::StringImpl *)(*v53 - 48);
            if (v55 > 9 || v54 >= 2 && *v53 == 48)
              goto LABEL_49;
            v204 = v53 + 1;
            v205 = v54 - 1;
            while (v205)
            {
              if (v55 <= 0x19999999)
              {
                v206 = *v204 - 48;
                if (v206 <= 9)
                {
                  v77 = __CFADD__(v206, 10 * (_DWORD)v55);
                  v55 = (const WTF::StringImpl *)(v206 + 10 * (_DWORD)v55);
                  ++v204;
                  --v205;
                  if (!v77)
                    continue;
                }
              }
              goto LABEL_49;
            }
          }
          else
          {
            if (!(_DWORD)v54)
              goto LABEL_49;
            v55 = (const WTF::StringImpl *)(*(unsigned __int16 *)v53 - 48);
            if (v55 > 9 || *(_WORD *)v53 == 48 && v54 > 1)
              goto LABEL_49;
            v74 = (unsigned __int16 *)(v53 + 2);
            v75 = v54 - 1;
            while (v75)
            {
              if (v55 <= 0x19999999)
              {
                v76 = *v74 - 48;
                if (v76 <= 9)
                {
                  v77 = __CFADD__(v76, 10 * (_DWORD)v55);
                  v55 = (const WTF::StringImpl *)(v76 + 10 * (_DWORD)v55);
                  ++v74;
                  --v75;
                  if (!v77)
                    continue;
                }
              }
              goto LABEL_49;
            }
          }
          if ((_DWORD)v55 != -1)
          {
            v207 = v22;
            v208 = v19;
            JSC::JSObject::getOwnPropertySlotByIndex(a2, v14, v55, (uint64_t)&v234, (uint64_t)a5, a6, a7, a8);
            v19 = v208;
            v22 = v207;
          }
        }
      }
    }
    goto LABEL_49;
  }
  if ((v30 & 0x20) != 0)
    v30 = *(_DWORD *)(v23 + 32);
  v43 = *(_DWORD *)(v26 + 12);
  v44 = v43 & (v30 >> 8);
  v45 = *(_DWORD *)(v28 + 4 * v44);
  if (!v45)
    goto LABEL_43;
  v46 = v28 + 4 * v29;
  v47 = 1;
  while (1)
  {
    v48 = (v45 - 1);
    if (v23 == *(_QWORD *)(v46 + 16 * v48))
      break;
    v44 = (v44 + v47) & v43;
    v45 = *(_DWORD *)(v28 + 4 * v44);
    ++v47;
    if (!v45)
      goto LABEL_43;
  }
  a6 = *(unsigned int *)(v46 + 16 * v48 + 8) | ((unint64_t)*(unsigned __int8 *)(v46 + 16 * v48 + 12) << 32);
LABEL_25:
  if ((_DWORD)a6 == -1)
    goto LABEL_43;
  a5 = (uint64_t *)HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v40 = a2 + 16;
    v41 = a6 << 32;
  }
  else
  {
    v40 = *(_QWORD *)(a2 + 8) - 8;
    v41 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v40 + (v41 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_31;
  v42 = *(unsigned __int8 *)(a4 + 5);
  if (v42 == 5)
  {
    v49 = v10;
    v50 = v22;
    v51 = v19;
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a2, (uint64_t)v24, (uint64_t)&v234, a4, SHIDWORD(a6), a6);
    v19 = v51;
    v22 = v50;
    v10 = v49;
    goto LABEL_49;
  }
  if (v42 == 6)
  {
    v186 = *(_DWORD *)(v25 + 16) & 3;
    v187 = *(_QWORD *)(a4 + 16);
    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
    {
      v189 = *(_QWORD *)(a4 + 24);
      v188 = *(_QWORD *)(a4 + 32);
      v234 = *(_QWORD *)(a4 + 8);
      v235 = v187;
      v236[0] = HIDWORD(a6);
      v238 = a2;
      BYTE1(v240) = 3;
      if (v186 != 2)
        LOBYTE(v240) = 1;
      HIBYTE(v240) = 1;
      v244 = v189;
      v245 = v188;
    }
    else
    {
      v234 = *(_QWORD *)(a4 + 8);
      v235 = v187;
      v236[0] = HIDWORD(a6);
      v238 = a2;
      BYTE1(v240) = 3;
      if (v186 != 2)
        LOBYTE(v240) = 1;
    }
  }
  else
  {
LABEL_31:
    v234 = a4;
    v238 = a2;
    v236[0] = HIDWORD(a6);
    v236[1] = a6;
    LOWORD(v240) = 257;
  }
LABEL_49:
  v217 = v10;
  if (v238 == a2 && BYTE1(v240) == 1 && v240 == 1)
  {
    v57 = v234;
    if (v234 == a3)
    {
      v213 = v16;
      v58 = 16 * (*(_DWORD *)a3 & 0xFFFFFFFE);
      v59 = (JSC::Structure *)v58;
      if ((*(_BYTE *)(v58 + 0x10) & 3) != 0)
      {
        v200 = v19;
        v201 = JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)a3 & 0xFFFFFFFE), (JSC::VM *)v15, (JSC::JSObject *)a3, a4, (uint64_t)a5, a6, a7, a8);
        v19 = v200;
        v59 = (JSC::Structure *)v201;
        v58 = 16 * (*(_DWORD *)a3 & 0xFFFFFFFE);
      }
      v60 = NAN;
      *(_QWORD *)v224 = 0xFFFFFFFF00000000;
      v226 = 0;
      v227 = 0;
      v225 = v57;
      v228 = 196608;
      v229 = 0;
      v232 = 0;
      v233 = 0;
      v230 = v15;
      ++*(_DWORD *)(v15 + 4);
      v231 = 1;
      v61 = *(_QWORD *)(*v22 + 2752);
      v62 = *(_QWORD *)(v14 + 56);
      if ((v61 >> 4) && ((v61 >> 4) & ~*(_DWORD *)(v58 + 32)) == 0)
      {
        v63 = *(_QWORD *)(v58 + 88);
        if (v63)
          goto LABEL_276;
        v80 = *(_QWORD *)(v58 + 64);
        if (v80 && (*(_BYTE *)(v80 + 5) == 1 || *(_DWORD *)(v80 + 80) >= 2u))
        {
          v81 = *(JSC::VM **)(v14 + 56);
          v212 = v14;
          v82 = v57;
          v83 = v22;
          v84 = v19;
          JSC::Structure::materializePropertyTable((JSC::Structure *)v58, v81, 1, (const JSC::PropertyTable *)a4, (uint64_t)a5, a6, a7, a8);
          v19 = v84;
          v22 = v83;
          v57 = v82;
          v14 = v212;
          if (v63)
          {
LABEL_276:
            if (*(_DWORD *)(v63 + 24))
            {
              v64 = *(_QWORD *)(v63 + 16);
              v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
              v66 = *(unsigned int *)(v63 + 8);
              v67 = *(_DWORD *)(v61 + 16);
              if ((v64 & 1) != 0)
              {
                if ((v67 & 0x20) != 0)
                  v67 = *(_DWORD *)(v61 + 32);
                v68 = *(_DWORD *)(v63 + 12);
                v69 = (v67 >> 8) & *(_QWORD *)&v68;
                v70 = *(unsigned __int8 *)(v65 + v69);
                if (!*(_BYTE *)(v65 + v69))
                  goto LABEL_111;
                v71 = v65 + v66;
                v72 = 1;
                while (1)
                {
                  v73 = *(_QWORD *)(v71 + 8 * (v70 - 1));
                  if (v61 == (v73 & 0xFFFFFFFFFFFFLL))
                    break;
                  v69 = ((_DWORD)v69 + v72) & v68;
                  v70 = *(unsigned __int8 *)(v65 + v69);
                  ++v72;
                  if (!*(_BYTE *)(v65 + v69))
                    goto LABEL_111;
                }
                a6 = (v73 >> 16) & 0xFF00000000 | HIBYTE(v73);
              }
              else
              {
                if ((v67 & 0x20) != 0)
                  v67 = *(_DWORD *)(v61 + 32);
                v89 = *(_DWORD *)(v63 + 12);
                v90 = v89 & (v67 >> 8);
                v91 = *(_DWORD *)(v65 + 4 * v90);
                if (!v91)
                  goto LABEL_111;
                v92 = v65 + 4 * v66;
                v93 = 1;
                while (1)
                {
                  v94 = (v91 - 1);
                  if (v61 == *(_QWORD *)(v92 + 16 * v94))
                    break;
                  v90 = (v90 + v93) & v89;
                  v91 = *(_DWORD *)(v65 + 4 * v90);
                  ++v93;
                  if (!v91)
                    goto LABEL_111;
                }
                a6 = *(unsigned int *)(v92 + 16 * v94 + 8) | ((unint64_t)*(unsigned __int8 *)(v92 + 16 * v94 + 12) << 32);
              }
              if ((_DWORD)a6 != -1)
              {
                a5 = (uint64_t *)HIDWORD(a6);
                if ((int)a6 <= 63)
                {
                  v85 = a3 + 16;
                  v86 = a6 << 32;
                }
                else
                {
                  v85 = *(_QWORD *)(a3 + 8) - 8;
                  v86 = 0x3F00000000 - (a6 << 32);
                }
                a4 = *(_QWORD *)(v85 + (v86 >> 29));
                if ((a4 & 0xFFFE000000000002) == 0)
                {
                  v87 = *(unsigned __int8 *)(a4 + 5);
                  if (v87 == 5)
                  {
                    v101 = v19;
                    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a3, v62, (uint64_t)&v222, a4, SHIDWORD(a6), a6);
                    v19 = v101;
                    goto LABEL_93;
                  }
                  if (v87 == 6)
                  {
                    v190 = *(_DWORD *)(v58 + 16) & 3;
                    v191 = *(const char **)(a4 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v193 = *(_QWORD *)(a4 + 24);
                      v192 = *(_QWORD *)(a4 + 32);
                      v222 = *(void (***)(JSC::StringFireDetail *__hidden))(a4 + 8);
                      v223 = v191;
                      v224[0] = HIDWORD(a6);
                      v226 = a3;
                      BYTE1(v228) = 3;
                      v88 = (void (**)(JSC::StringFireDetail *__hidden))v216;
                      if (v190 != 2)
                        LOBYTE(v228) = 1;
                      HIBYTE(v228) = 1;
                      v232 = v193;
                      v233 = v192;
                    }
                    else
                    {
                      v222 = *(void (***)(JSC::StringFireDetail *__hidden))(a4 + 8);
                      v223 = v191;
                      v224[0] = HIDWORD(a6);
                      v226 = a3;
                      BYTE1(v228) = 3;
                      v88 = (void (**)(JSC::StringFireDetail *__hidden))v216;
                      if (v190 != 2)
                        LOBYTE(v228) = 1;
                    }
                    goto LABEL_117;
                  }
                }
                v222 = (void (**)(JSC::StringFireDetail *__hidden))a4;
                v226 = a3;
                v224[0] = HIDWORD(a6);
                v224[1] = a6;
                LOWORD(v228) = 257;
LABEL_93:
                v88 = (void (**)(JSC::StringFireDetail *__hidden))v216;
                goto LABEL_117;
              }
            }
          }
        }
      }
LABEL_111:
      v88 = (void (**)(JSC::StringFireDetail *__hidden))v216;
      if ((*(_BYTE *)(a3 + 6) & 0x20) == 0)
        goto LABEL_275;
      v179 = (JSC::VM *)v62;
      v180 = v59;
      v181 = v22;
      v182 = v19;
      v183 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a3, v179, v61, (uint64_t)&v222);
      v19 = v182;
      v22 = v181;
      v59 = v180;
      if ((v183 & 1) == 0)
      {
LABEL_275:
        if (v61)
        {
          v104 = *(_DWORD *)(v61 + 16);
          if ((v104 & 0x20) == 0)
          {
            v105 = *(_BYTE **)(v61 + 8);
            v106 = *(unsigned int *)(v61 + 4);
            if ((v104 & 4) != 0)
            {
              if (!(_DWORD)v106)
                goto LABEL_117;
              v107 = (const WTF::StringImpl *)(*v105 - 48);
              if (v107 > 9 || v106 >= 2 && *v105 == 48)
                goto LABEL_117;
              v209 = v105 + 1;
              v210 = v106 - 1;
              v88 = (void (**)(JSC::StringFireDetail *__hidden))v216;
              while (v210)
              {
                if (v107 <= 0x19999999)
                {
                  v211 = *v209 - 48;
                  if (v211 <= 9)
                  {
                    v77 = __CFADD__(v211, 10 * (_DWORD)v107);
                    v107 = (const WTF::StringImpl *)(v211 + 10 * (_DWORD)v107);
                    ++v209;
                    --v210;
                    if (!v77)
                      continue;
                  }
                }
                goto LABEL_117;
              }
              v88 = (void (**)(JSC::StringFireDetail *__hidden))v216;
              if ((_DWORD)v107 == -1)
                goto LABEL_117;
            }
            else
            {
              if (!(_DWORD)v106)
                goto LABEL_117;
              v107 = (const WTF::StringImpl *)(*(unsigned __int16 *)v105 - 48);
              if (v107 > 9 || *(_WORD *)v105 == 48 && v106 > 1)
                goto LABEL_117;
              v171 = (unsigned __int16 *)(v105 + 2);
              v172 = v106 - 1;
              while (v172)
              {
                if (v107 <= 0x19999999)
                {
                  v173 = *v171 - 48;
                  if (v173 <= 9)
                  {
                    v77 = __CFADD__(v173, 10 * (_DWORD)v107);
                    v107 = (const WTF::StringImpl *)(v173 + 10 * (_DWORD)v107);
                    ++v171;
                    --v172;
                    if (!v77)
                      continue;
                  }
                }
                goto LABEL_117;
              }
              if ((_DWORD)v107 == -1)
                goto LABEL_117;
            }
            v174 = v19;
            JSC::JSObject::getOwnPropertySlotByIndex(a3, v14, v107, (uint64_t)&v222, (uint64_t)a5, a6, a7, a8);
            v19 = v174;
          }
        }
      }
LABEL_117:
      if (v226 == a3
        && (BYTE1(v228) == 2 ? (v108 = v228 == 1) : (v108 = 0),
            v108 ? (v109 = v222 == v88) : (v109 = 0),
            v109))
      {
        JSC::Structure::ensurePropertyReplacementWatchpointSet(v19, (JSC::VM *)v15, (JSC::Structure *)v236[1], a4, (uint64_t)a5, a6, a7, a8);
        JSC::Structure::ensurePropertyReplacementWatchpointSet(v59, (JSC::VM *)v15, (JSC::Structure *)v224[1], v110, v111, v112, v113, v114);
        v121 = *v22;
        v122 = *(_QWORD *)(*v22 + 1080);
        if (v14 && *(_DWORD *)(v15 + 760) >= *(unsigned __int8 *)(v14 + 7))
        {
          JSC::Heap::writeBarrierSlowPath(v15 + 192, v14);
          v121 = *v22;
        }
        *(_QWORD *)&v220 = a2;
        *((_QWORD *)&v220 + 1) = v122 | 0x5000000000000;
        v221 = v57;
        v218 = 0uLL;
        v219 = 0;
        v123 = *(_QWORD *)(v121 + 2752);
        if (v14 && *(_DWORD *)(v15 + 760) >= *(unsigned __int8 *)(v14 + 7))
          JSC::Heap::writeBarrierSlowPath(v15 + 192, v14);
        *(_QWORD *)&v218 = a3;
        *((_QWORD *)&v218 + 1) = v123 | 0x5000000000000;
        v219 = v88;
        JSC::ObjectPropertyCondition::isWatchable((uint64_t)&v220, 0, v115, v116, v117, v118, v119, v120);
        if (v131
          && (JSC::ObjectPropertyCondition::isWatchable((uint64_t)&v218, 0, v124, v125, v126, v127, v128, v129),
              (v132 & 1) != 0))
        {
          v133 = *v217;
          if ((*v217 & 1) != 0)
          {
            v134 = (v133 >> 1) & 3;
            if (v134 != 2)
            {
              __dmb(0xAu);
              if (v134)
                v135 = 5;
              else
                v135 = 3;
              *v217 = v135;
              __dmb(0xAu);
            }
          }
          else
          {
            if (*(_BYTE *)(v133 + 5))
            {
              __break(0xC471u);
              JUMPOUT(0x1989CE918);
            }
            v246[0] = &off_1E3583C90;
            v246[1] = "Set up species watchpoint.";
            JSC::WatchpointSet::touch(v133, (JSC::VM *)v15, v246, v125, v126, v127, v128, v129, v130);
          }
          v136 = WTF::fastMalloc((WTF *)0x60);
          *(_QWORD *)v136 = off_1E3580B60;
          v144 = v221;
          *(_OWORD *)(v136 + 8) = v220;
          *(_QWORD *)(v136 + 32) = 0;
          *(_QWORD *)(v136 + 40) = 0;
          *(_QWORD *)(v136 + 24) = v144;
          *(_BYTE *)(v136 + 48) = 0;
          *(_QWORD *)(v136 + 56) = 0;
          *(_QWORD *)(v136 + 64) = 0;
          *(_BYTE *)(v136 + 72) = 1;
          if ((unint64_t)BYTE14(v220) << 48 != 0x5000000000000)
          {
            __break(0xC471u);
            JUMPOUT(0x1989CE938);
          }
          *(_QWORD *)v136 = off_1E35A0718;
          *(_QWORD *)(v136 + 80) = v14;
          *(_QWORD *)(v136 + 88) = v217;
          v145 = *v217;
          if ((*v217 & 1) != 0)
            v146 = (v145 >> 1) & 3;
          else
            v146 = *(unsigned __int8 *)(v145 + 4);
          if (v146 != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1989CE958);
          }
          v147 = (_QWORD *)*v215;
          *v215 = v136;
          if (v147)
          {
            *v147 = off_1E3580B60;
            v148 = (_QWORD *)v147[8];
            if (v148)
            {
              v149 = v147[7];
              *v148 = v149;
              *(_QWORD *)(v149 + 8) = v148;
              v147[7] = 0;
              v147[8] = 0;
            }
            v150 = (_QWORD *)v147[5];
            if (v150)
            {
              v151 = v147[4];
              *v150 = v151;
              *(_QWORD *)(v151 + 8) = v150;
              v147[4] = 0;
              v147[5] = 0;
            }
            WTF::fastFree((unint64_t)v147, v137, v138, (uint64_t)v139, v140, v141, v142, v143);
            v136 = *v215;
          }
          JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v136, (JSC::VM *)v15, v138, v139, v140, v141, v142, v143);
          v152 = WTF::fastMalloc((WTF *)0x60);
          *(_QWORD *)v152 = off_1E3580B60;
          v160 = v219;
          *(_OWORD *)(v152 + 8) = v218;
          *(_QWORD *)(v152 + 32) = 0;
          *(_QWORD *)(v152 + 40) = 0;
          *(_QWORD *)(v152 + 24) = v160;
          *(_BYTE *)(v152 + 48) = 0;
          *(_QWORD *)(v152 + 56) = 0;
          *(_QWORD *)(v152 + 64) = 0;
          *(_BYTE *)(v152 + 72) = 1;
          if ((unint64_t)BYTE14(v218) << 48 != 0x5000000000000)
          {
            __break(0xC471u);
            JUMPOUT(0x1989CE978);
          }
          *(_QWORD *)v152 = off_1E35A0718;
          *(_QWORD *)(v152 + 80) = v14;
          *(_QWORD *)(v152 + 88) = v217;
          v161 = *v217;
          if ((*v217 & 1) != 0)
            v162 = (v161 >> 1) & 3;
          else
            v162 = *(unsigned __int8 *)(v161 + 4);
          if (v162 != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1989CE998);
          }
          v163 = (_QWORD *)*v214;
          *v214 = v152;
          if (v163)
          {
            *v163 = off_1E3580B60;
            v164 = (_QWORD *)v163[8];
            if (v164)
            {
              v165 = v163[7];
              *v164 = v165;
              *(_QWORD *)(v165 + 8) = v164;
              v163[7] = 0;
              v163[8] = 0;
            }
            v166 = (_QWORD *)v163[5];
            if (v166)
            {
              v167 = v163[4];
              *v166 = v167;
              *(_QWORD *)(v167 + 8) = v166;
              v163[4] = 0;
              v163[5] = 0;
            }
            WTF::fastFree((unint64_t)v163, v153, v154, (uint64_t)v155, v156, v157, v158, v159);
            v152 = *v214;
          }
          JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v152, (JSC::VM *)v15, v154, v155, v156, v157, v158, v159);
        }
        else
        {
          JSC::JSGlobalObject::tryInstallSpeciesWatchpoint<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>>(JSC::JSObject *,JSC::JSObject *,std::unique_ptr<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>> &,std::unique_ptr<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>> &,JSC::InlineWatchpointSet&,JSC::JSGlobalObject::HasSpeciesProperty,JSC::GetterSetter *)::{lambda(void)#1}::operator()(v217, (JSC::VM *)v15, v130, v124, v125, v126, v127, v128, v129);
        }
      }
      else
      {
        *(_QWORD *)&v220 = &off_1E3583C90;
        *((_QWORD *)&v220 + 1) = "Was not able to set up species watchpoint.";
        v175 = *v217;
        if ((*v217 & 1) != 0)
        {
          *v217 = 5;
        }
        else
        {
          if (*(_BYTE *)(v175 + 4) == 1)
          {
            __dmb(0xAu);
            v177 = (uint64_t **)(v175 + 8);
            v176 = *(uint64_t **)(v175 + 8);
            *(_BYTE *)(v175 + 4) = 2;
            v178 = *(_DWORD *)(v15 + 916);
            *(_DWORD *)(v15 + 916) = v178 + 1;
            if (v176 != (uint64_t *)(v175 + 8))
            {
              do
              {
                v185 = *v176;
                v184 = (uint64_t *)v176[1];
                *v184 = *v176;
                *(_QWORD *)(v185 + 8) = v184;
                *v176 = 0;
                v176[1] = 0;
                JSC::Watchpoint::fire((unint64_t)v176, (JSC::VM *)v15, &v220, a4, (uint64_t)a5, a6, a7, a8, v60);
                v176 = *v177;
              }
              while (*v177 != (uint64_t *)v177);
              v178 = *(_DWORD *)(v15 + 916) - 1;
            }
            *(_DWORD *)(v15 + 916) = v178;
            __dmb(0xAu);
          }
          *(_BYTE *)(v175 + 4) = 2;
        }
      }
      v78 = v213;
      if (v231)
      {
        v168 = *(_DWORD *)(v230 + 4);
        if (!v168)
        {
          __break(0xC471u);
          JUMPOUT(0x1989CE9F4);
        }
        *(_DWORD *)(v230 + 4) = v168 - 1;
      }
      goto LABEL_163;
    }
  }
  v78 = v16;
  v222 = &off_1E3583C90;
  v223 = "Was not able to set up species watchpoint.";
  v79 = *v217;
  if ((*v217 & 1) != 0)
  {
    *v217 = 5;
  }
  else
  {
    if (*(_BYTE *)(v79 + 4) == 1)
    {
      __dmb(0xAu);
      v96 = (uint64_t **)(v79 + 8);
      v95 = *(uint64_t **)(v79 + 8);
      *(_BYTE *)(v79 + 4) = 2;
      v97 = *(_DWORD *)(v15 + 916);
      *(_DWORD *)(v15 + 916) = v97 + 1;
      if (v95 != (uint64_t *)(v79 + 8))
      {
        do
        {
          v103 = *v95;
          v102 = (uint64_t *)v95[1];
          *v102 = *v95;
          *(_QWORD *)(v103 + 8) = v102;
          *v95 = 0;
          v95[1] = 0;
          JSC::Watchpoint::fire((unint64_t)v95, (JSC::VM *)v15, &v222, a4, (uint64_t)a5, a6, a7, a8, v21);
          v95 = *v96;
        }
        while (*v96 != (uint64_t *)v96);
        v97 = *(_DWORD *)(v15 + 916) - 1;
      }
      *(_DWORD *)(v15 + 916) = v97;
      __dmb(0xAu);
    }
    *(_BYTE *)(v79 + 4) = 2;
  }
LABEL_163:
  if (v243)
  {
    v169 = *(_DWORD *)(v242 + 4);
    if (!v169)
    {
      __break(0xC471u);
      JUMPOUT(0x1989CE9B8);
    }
    *(_DWORD *)(v242 + 4) = v169 - 1;
  }
  v170 = *(_DWORD *)(v15 + 88) - 1;
  *(_DWORD *)(v15 + 88) = v170;
  if (!v170 && v78[93377])
  {
    if (*(_BYTE *)(v15 + 86))
    {
      v196 = v78 - 64;
      v197 = *((_QWORD *)v78 - 5);
      *((_QWORD *)v196 + 2) = v197;
      *((_QWORD *)v196 + 4) = v197;
      if (v197)
      {
        v198 = (unsigned int *)(v78 + 16);
        do
          v199 = __ldaxr(v198);
        while (__stlxr(v199 | 0x10, v198));
      }
      if (v78[93379])
        v78[93378] = 1;
      *(_BYTE *)(v15 + 86) = 0;
    }
    else
    {
      v202 = (unsigned int *)(v15 + 80);
      do
        v203 = __ldaxr(v202);
      while (__stlxr(v203 | 2, v202));
    }
  }
}

void JSC::JSGlobalObject::tryInstallArrayBufferSpeciesWatchpoint(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t *);
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *);
  uint64_t *v23;
  uint64_t (*v24)(uint64_t *);
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t *);
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  if ((a2 & 1) != 0)
  {
    v10 = *(_QWORD *)(a1 + 1144);
    if ((v10 & 1) != 0)
    {
      v18 = *(uint64_t (**)(uint64_t *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
      v19 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v19 = (uint64_t *)(a1 - 16);
      v30 = *v19;
      v31 = a1;
      v32 = a1 + 1144;
      v20 = v18(&v30);
      v21 = *(_QWORD *)(a1 + 1144);
      if (*(_QWORD *)(v20 + 48) == 2)
        v12 = 0;
      else
        v12 = *(_QWORD *)(v20 + 48);
      if ((v21 & 1) != 0)
      {
        v22 = *(void (**)(uint64_t *))(v21 & 0xFFFFFFFFFFFFFFFCLL);
        v23 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v23 = (uint64_t *)(a1 - 16);
        v30 = *v23;
        v31 = a1;
        v32 = a1 + 1144;
        v22(&v30);
      }
    }
    else
    {
      v11 = *(_QWORD *)(v10 + 48);
      if (v11 == 2)
        v12 = 0;
      else
        v12 = v11;
    }
    v13 = (uint64_t *)(a1 + 1152);
    v14 = a1 + 2352;
    v15 = (uint64_t *)(a1 + 1640);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 1600);
    if ((v16 & 1) != 0)
    {
      v24 = *(uint64_t (**)(uint64_t *))(v16 & 0xFFFFFFFFFFFFFFFCLL);
      v25 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v25 = (uint64_t *)(a1 - 16);
      v30 = *v25;
      v31 = a1;
      v32 = a1 + 1600;
      v26 = v24(&v30);
      v27 = *(_QWORD *)(a1 + 1600);
      if (*(_QWORD *)(v26 + 48) == 2)
        v12 = 0;
      else
        v12 = *(_QWORD *)(v26 + 48);
      if ((v27 & 1) != 0)
      {
        v28 = *(void (**)(uint64_t *))(v27 & 0xFFFFFFFFFFFFFFFCLL);
        v29 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
        if ((a1 & 8) != 0)
          v29 = (uint64_t *)(a1 - 16);
        v30 = *v29;
        v31 = a1;
        v32 = a1 + 1600;
        v28(&v30);
      }
    }
    else
    {
      v17 = *(_QWORD *)(v16 + 48);
      if (v17 == 2)
        v12 = 0;
      else
        v12 = v17;
    }
    v13 = (uint64_t *)(a1 + 1608);
    v14 = a1 + 2344;
    v15 = (uint64_t *)(a1 + 1632);
  }
  JSC::JSGlobalObject::tryInstallSpeciesWatchpoint<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>>(a1, v12, *v13, a1 + 8 * a2 + 2816, (uint64_t *)(a1 + 8 * a2 + 2800), v14, *v15, a8);
}

uint64_t *JSC::JSGlobalObject::tryInstallTypedArraySpeciesWatchpoint(uint64_t *a1, int a2)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  unint64_t *v16;
  _QWORD v18[2];

  v4 = (JSC::VM *)a1[7];
  v5 = JSC::JSGlobalObject::typedArrayPrototype(a1, a2);
  v6 = JSC::JSGlobalObject::typedArrayConstructor((unint64_t)a1, a2);
  v7 = (uint64_t *)JSC::JSGlobalObject::typedArraySpeciesWatchpointSet((uint64_t)a1, a2);
  v8 = *(_QWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x30);
  if (!v8)
    v8 = *(_QWORD *)(v6 + 16);
  if (v8 == JSC::LazyClassStructure::get((JSC::LazyClassStructure *)(a1 + 207), (unint64_t)a1))
  {
    v15 = JSC::JSGlobalObject::typedArrayPrototypeConstructorWatchpoint((uint64_t)a1, a2);
    v16 = (unint64_t *)JSC::JSGlobalObject::typedArrayConstructorSpeciesAbsenceWatchpoint((uint64_t)a1, a2);
    return JSC::JSGlobalObject::tryInstallSpeciesWatchpoint<JSC::ObjectAdaptiveStructureWatchpoint>((uint64_t)a1, v5, v6, v15, v16, (uint64_t)v7, 0, a1[203]);
  }
  else
  {
    v18[0] = &off_1E3583C90;
    v18[1] = "Was not able to set up species watchpoint.";
    return JSC::InlineWatchpointSet::invalidate(v7, v4, v18, v9, v10, v11, v12, v13, v14);
  }
}

uint64_t JSC::JSGlobalObject::typedArrayConstructor(unint64_t a1, int a2)
{
  _QWORD *v2;
  void (*v4)(_QWORD *);
  uint64_t *v5;
  uint64_t v6;
  _QWORD v7[3];

  switch(a2)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1989CEF8CLL);
    case 1:
      v2 = (_QWORD *)(a1 + 1664);
      break;
    case 2:
      v2 = (_QWORD *)(a1 + 1688);
      break;
    case 3:
      v2 = (_QWORD *)(a1 + 1712);
      break;
    case 4:
      v2 = (_QWORD *)(a1 + 1736);
      break;
    case 5:
      v2 = (_QWORD *)(a1 + 1760);
      break;
    case 6:
      v2 = (_QWORD *)(a1 + 1784);
      break;
    case 7:
      v2 = (_QWORD *)(a1 + 1808);
      break;
    case 8:
      v2 = (_QWORD *)(a1 + 1832);
      break;
    case 9:
      v2 = (_QWORD *)(a1 + 1856);
      break;
    case 10:
      v2 = (_QWORD *)(a1 + 1880);
      break;
    case 11:
      v2 = (_QWORD *)(a1 + 1904);
      break;
    case 12:
      v2 = (_QWORD *)(a1 + 1928);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1989CEFACLL);
  }
  if ((*v2 & 1) != 0)
  {
    v4 = *(void (**)(_QWORD *))(*v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (a1)
    {
      v5 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v5 = (uint64_t *)(a1 - 16);
      v6 = *v5;
    }
    else
    {
      v6 = -192;
    }
    v7[0] = v6;
    v7[1] = a1;
    v7[2] = v2;
    v4(v7);
  }
  return v2[1];
}

uint64_t JSC::JSGlobalObject::typedArraySpeciesWatchpointSet(uint64_t a1, int a2)
{
  uint64_t result;

  if (a2 == 2)
    return a1 + 2400;
  switch(a2)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1989CF054);
    case 1:
      result = a1 + 2384;
      break;
    case 3:
      result = a1 + 2416;
      break;
    case 4:
      result = a1 + 2432;
      break;
    case 5:
      result = a1 + 2448;
      break;
    case 6:
      result = a1 + 2464;
      break;
    case 7:
      result = a1 + 2480;
      break;
    case 8:
      result = a1 + 2496;
      break;
    case 9:
      result = a1 + 2512;
      break;
    case 10:
      result = a1 + 2528;
      break;
    case 11:
      result = a1 + 2544;
      break;
    case 12:
      result = a1 + 2560;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1989CF074);
  }
  return result;
}

uint64_t *JSC::JSGlobalObject::tryInstallSpeciesWatchpoint<JSC::ObjectAdaptiveStructureWatchpoint>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  int v10;
  uint64_t *v11;
  JSC::AdaptiveInferredPropertyValueWatchpointBase **v12;
  uint64_t v13;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  JSC::VM *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  JSC::VM *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const JSC::PropertyTable *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  JSC::ObjectAdaptiveStructureWatchpoint *v89;
  unint64_t v90;
  int v91;
  int v92;
  unsigned __int16 *v95;
  uint64_t v96;
  unsigned int v97;
  BOOL v98;
  unsigned __int16 *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned __int8 *v119;
  uint64_t v120;
  unsigned int v121;
  unsigned __int8 *v122;
  uint64_t v123;
  unsigned int v124;
  JSC::Structure *v125;
  uint64_t v126;
  JSC::AdaptiveInferredPropertyValueWatchpointBase **v127;
  unint64_t *v128;
  JSC::Structure *v129;
  int v130;
  uint64_t v131;
  JSC::ObjectAdaptiveStructureWatchpoint *v132;
  _QWORD v133[3];
  uint64_t v134[3];
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  char v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  if (*(_QWORD *)a4)
  {
    __break(0xC471u);
    JUMPOUT(0x1989CF8E8);
  }
  v8 = a5;
  if (*a5)
  {
    __break(0xC471u);
    JUMPOUT(0x1989CF908);
  }
  v10 = a7;
  v11 = (uint64_t *)a6;
  v12 = (JSC::AdaptiveInferredPropertyValueWatchpointBase **)a4;
  v13 = a3;
  v16 = *(_QWORD *)(a1 + 56);
  v159 = v16;
  v17 = *(_DWORD *)(v16 + 88);
  *(_DWORD *)(v16 + 88) = v17 + 1;
  if (!v17)
  {
    v18 = *(_QWORD *)(v16 + 16);
    if (v18)
    {
      if (*(_QWORD *)(v16 + 24) == v18)
      {
        *(_QWORD *)(v16 + 16) = 0;
        v116 = (unsigned int *)(v16 + 80);
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 & 0xFFFFFFEF, v116));
        *(_BYTE *)(v16 + 86) = 1;
      }
    }
  }
  v19 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  v20 = *(_DWORD *)(v19 + 0x10);
  if ((v20 & 3) != 0)
  {
    v19 = JSC::Structure::flattenDictionaryStructure(v19, (JSC::VM *)v16, (JSC::JSObject *)a2, a4, (uint64_t)a5, a6, a7, a8);
    v20 = *(_DWORD *)(v19 + 16);
  }
  if ((v20 & 3) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989CF928);
  }
  v128 = v8;
  v129 = (JSC::Structure *)v19;
  v130 = v10;
  v127 = v12;
  v21 = NAN;
  v149 = 0xFFFFFFFF00000000;
  v151 = 0;
  v152 = 0;
  v150 = a2;
  v153 = 196608;
  v154 = 0;
  v157 = 0;
  v158 = 0;
  v155 = v16;
  ++*(_DWORD *)(v16 + 4);
  v156 = 1;
  v22 = v16 + 41952;
  v23 = *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 1080);
  v24 = *(JSC::VM **)(a1 + 56);
  if (!(v23 >> 4)
    || (v25 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE), ((v23 >> 4) & ~*(_DWORD *)(v25 + 0x20)) != 0)
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), *(JSC::VM **)(a1 + 56), a3, (const JSC::PropertyTable *)a4, (uint64_t)a5, a6, a7, a8), !v26)|| (v135 = v23, v27 = JSC::PropertyTable::get(v26, (uint64_t *)&v135), a6 = v27, (_DWORD)v27 == -1))
  {
    if ((*(_BYTE *)(a2 + 6) & 0x20) == 0
      || (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a2, v24, v23, (uint64_t)&v147) & 1) == 0)
    {
      if (v23)
      {
        v31 = *(_DWORD *)(v23 + 16);
        if ((v31 & 0x20) == 0)
        {
          v32 = *(_BYTE **)(v23 + 8);
          v33 = *(unsigned int *)(v23 + 4);
          if ((v31 & 4) != 0)
          {
            if (!(_DWORD)v33)
              goto LABEL_24;
            a3 = *v32 - 48;
            if (a3 > 9)
              goto LABEL_24;
            if (v33 >= 2 && *v32 == 48)
              goto LABEL_24;
            v119 = v32 + 1;
            v120 = v33 - 1;
            while (v120)
            {
              if (a3 <= 0x19999999)
              {
                v121 = *v119 - 48;
                if (v121 <= 9)
                {
                  v98 = __CFADD__(v121, 10 * a3);
                  a3 = v121 + 10 * (_DWORD)a3;
                  ++v119;
                  --v120;
                  if (!v98)
                    continue;
                }
              }
              goto LABEL_24;
            }
          }
          else
          {
            if (!(_DWORD)v33)
              goto LABEL_24;
            a3 = *(unsigned __int16 *)v32 - 48;
            if (a3 > 9)
              goto LABEL_24;
            if (*(_WORD *)v32 == 48 && v33 > 1)
              goto LABEL_24;
            v95 = (unsigned __int16 *)(v32 + 2);
            v96 = v33 - 1;
            while (v96)
            {
              if (a3 <= 0x19999999)
              {
                v97 = *v95 - 48;
                if (v97 <= 9)
                {
                  v98 = __CFADD__(v97, 10 * a3);
                  a3 = v97 + 10 * (_DWORD)a3;
                  ++v95;
                  --v96;
                  if (!v98)
                    continue;
                }
              }
              goto LABEL_24;
            }
          }
          if ((_DWORD)a3 != -1)
            JSC::JSObject::getOwnPropertySlotByIndex(a2, a1, (const WTF::StringImpl *)a3, (uint64_t)&v147, (uint64_t)a5, a6, a7, a8);
        }
      }
    }
  }
  else
  {
    a5 = (unint64_t *)HIDWORD(v27);
    if ((int)v27 <= 63)
    {
      v28 = a2 + 16;
      v29 = v27 << 32;
    }
    else
    {
      v28 = *(_QWORD *)(a2 + 8) - 8;
      v29 = 0x3F00000000 - (v27 << 32);
    }
    a4 = *(_QWORD *)(v28 + (v29 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_17;
    v30 = *(unsigned __int8 *)(a4 + 5);
    if (v30 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot((unsigned int *)a2, (uint64_t)v24, (uint64_t)&v147, a4, SHIDWORD(v27), v27);
      goto LABEL_24;
    }
    if (v30 == 6)
    {
      v108 = *(_DWORD *)(v25 + 16) & 3;
      v109 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v111 = *(_QWORD *)(a4 + 24);
        v110 = *(_QWORD *)(a4 + 32);
        v147 = *(_QWORD *)(a4 + 8);
        v148 = v109;
        LODWORD(v149) = HIDWORD(v27);
        v151 = a2;
        BYTE1(v153) = 3;
        if (v108 != 2)
          LOBYTE(v153) = 1;
        HIBYTE(v153) = 1;
        v157 = v111;
        v158 = v110;
      }
      else
      {
        v147 = *(_QWORD *)(a4 + 8);
        v148 = v109;
        LODWORD(v149) = HIDWORD(v27);
        v151 = a2;
        BYTE1(v153) = 3;
        if (v108 != 2)
          LOBYTE(v153) = 1;
      }
    }
    else
    {
LABEL_17:
      v147 = a4;
      v151 = a2;
      v149 = __PAIR64__(v27, HIDWORD(v27));
      LOWORD(v153) = 257;
    }
  }
LABEL_24:
  v126 = a8;
  if (v151 != a2
    || (BYTE1(v153) == 1 ? (v34 = v153 == 1) : (v34 = 0), !v34 || (v35 = v147, v147 != v13)))
  {
    JSC::JSGlobalObject::tryInstallSpeciesWatchpoint<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>>(JSC::JSObject *,JSC::JSObject *,std::unique_ptr<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>> &,std::unique_ptr<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>> &,JSC::InlineWatchpointSet&,JSC::JSGlobalObject::HasSpeciesProperty,JSC::GetterSetter *)::{lambda(void)#1}::operator()(v11, (JSC::VM *)v16, v21, a3, a4, (uint64_t)a5, a6, a7, a8);
    goto LABEL_73;
  }
  v36 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
  v37 = v36;
  if ((*(_BYTE *)(v36 + 0x10) & 3) != 0)
  {
    v37 = JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)v13 & 0xFFFFFFFE), (JSC::VM *)v16, (JSC::JSObject *)v13, a4, (uint64_t)a5, a6, a7, a8);
    v36 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
  }
  v125 = (JSC::Structure *)v37;
  v38 = NAN;
  v137 = 0xFFFFFFFF00000000;
  v139 = 0;
  v140 = 0;
  v138 = v35;
  v141 = 196608;
  v142 = 0;
  v145 = 0;
  v146 = 0;
  v143 = v16;
  ++*(_DWORD *)(v16 + 4);
  v144 = 1;
  v39 = *(_QWORD *)(*(_QWORD *)v22 + 2752);
  v40 = *(JSC::VM **)(a1 + 56);
  if (!(v39 >> 4)
    || ((v39 >> 4) & ~*(_DWORD *)(v36 + 32)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v36, *(JSC::VM **)(a1 + 56), a3, (const JSC::PropertyTable *)a4, (uint64_t)a5, a6, a7, a8), !v41)|| (v134[0] = v39, v42 = JSC::PropertyTable::get(v41, v134), a6 = v42, (_DWORD)v42 == -1))
  {
    if ((*(_BYTE *)(v13 + 6) & 0x20) == 0
      || (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v13, v40, v39, (uint64_t)&v135) & 1) == 0)
    {
      if (v39)
      {
        v46 = *(_DWORD *)(v39 + 16);
        if ((v46 & 0x20) == 0)
        {
          v47 = *(_BYTE **)(v39 + 8);
          v48 = *(unsigned int *)(v39 + 4);
          if ((v46 & 4) != 0)
          {
            if (!(_DWORD)v48)
              goto LABEL_49;
            a3 = *v47 - 48;
            if (a3 > 9 || v48 >= 2 && *v47 == 48)
              goto LABEL_49;
            v122 = v47 + 1;
            v123 = v48 - 1;
            while (v123)
            {
              if (a3 <= 0x19999999)
              {
                v124 = *v122 - 48;
                if (v124 <= 9)
                {
                  v98 = __CFADD__(v124, 10 * a3);
                  a3 = v124 + 10 * (_DWORD)a3;
                  ++v122;
                  --v123;
                  if (!v98)
                    continue;
                }
              }
              goto LABEL_49;
            }
          }
          else
          {
            if (!(_DWORD)v48)
              goto LABEL_49;
            a3 = *(unsigned __int16 *)v47 - 48;
            if (a3 > 9)
              goto LABEL_49;
            if (*(_WORD *)v47 == 48 && v48 > 1)
              goto LABEL_49;
            v100 = (unsigned __int16 *)(v47 + 2);
            v101 = v48 - 1;
            while (v101)
            {
              if (a3 <= 0x19999999)
              {
                v102 = *v100 - 48;
                if (v102 <= 9)
                {
                  v98 = __CFADD__(v102, 10 * a3);
                  a3 = v102 + 10 * (_DWORD)a3;
                  ++v100;
                  --v101;
                  if (!v98)
                    continue;
                }
              }
              goto LABEL_49;
            }
          }
          if ((_DWORD)a3 != -1)
            JSC::JSObject::getOwnPropertySlotByIndex(v13, a1, (const WTF::StringImpl *)a3, (uint64_t)&v135, (uint64_t)a5, a6, a7, a8);
        }
      }
    }
  }
  else
  {
    a5 = (unint64_t *)HIDWORD(v42);
    if ((int)v42 <= 63)
    {
      v43 = v13 + 16;
      v44 = v42 << 32;
    }
    else
    {
      v43 = *(_QWORD *)(v13 + 8) - 8;
      v44 = 0x3F00000000 - (v42 << 32);
    }
    a4 = *(_QWORD *)(v43 + (v44 >> 29));
    if ((a4 & 0xFFFE000000000002) != 0)
      goto LABEL_42;
    v45 = *(unsigned __int8 *)(a4 + 5);
    if (v45 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot((unsigned int *)v13, (uint64_t)v40, (uint64_t)&v135, a4, SHIDWORD(v42), v42);
    }
    else
    {
      if (v45 != 6)
      {
LABEL_42:
        v135 = a4;
        v139 = v13;
        v137 = __PAIR64__(v42, HIDWORD(v42));
        LOWORD(v141) = 257;
        goto LABEL_49;
      }
      v112 = *(_DWORD *)(v36 + 16) & 3;
      v113 = *(_QWORD *)(a4 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v115 = *(_QWORD *)(a4 + 24);
        v114 = *(_QWORD *)(a4 + 32);
        v135 = *(_QWORD *)(a4 + 8);
        v136 = v113;
        LODWORD(v137) = HIDWORD(v42);
        v139 = v13;
        BYTE1(v141) = 3;
        if (v112 != 2)
          LOBYTE(v141) = 1;
        HIBYTE(v141) = 1;
        v145 = v115;
        v146 = v114;
      }
      else
      {
        v135 = *(_QWORD *)(a4 + 8);
        v136 = v113;
        LODWORD(v137) = HIDWORD(v42);
        v139 = v13;
        BYTE1(v141) = 3;
        if (v112 != 2)
          LOBYTE(v141) = 1;
      }
    }
  }
LABEL_49:
  if (v130)
  {
    if (v139 != v13 || BYTE1(v141) != 2 || v141 != 1 || v135 != v126)
      goto LABEL_107;
    JSC::Structure::ensurePropertyReplacementWatchpointSet(v129, (JSC::VM *)v16, (JSC::Structure *)HIDWORD(v149), a4, (uint64_t)a5, a6, a7, a8);
    JSC::Structure::ensurePropertyReplacementWatchpointSet(v125, (JSC::VM *)v16, (JSC::Structure *)HIDWORD(v137), v103, v104, v105, v106, v107);
  }
  else
  {
    if (BYTE1(v141))
      goto LABEL_107;
    JSC::Structure::ensurePropertyReplacementWatchpointSet(v129, (JSC::VM *)v16, (JSC::Structure *)HIDWORD(v149), a4, (uint64_t)a5, a6, a7, a8);
  }
  v55 = *(_QWORD *)v22;
  v56 = *(_QWORD *)(*(_QWORD *)v22 + 1080);
  if (a1 && *(_DWORD *)(v16 + 760) >= *(unsigned __int8 *)(a1 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v16 + 192, a1);
    v55 = *(_QWORD *)v22;
  }
  v134[0] = a2;
  v134[1] = v56 | 0x5000000000000;
  v134[2] = v35;
  v57 = *(_QWORD *)(v55 + 2752);
  if (!v130)
  {
    v58 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
    if (!v58)
      v58 = *(_QWORD *)(v13 + 16);
    if ((v58 & 0xFFFE000000000002) != 0)
    {
      v59 = 0;
    }
    else if (*(unsigned __int8 *)(v58 + 5) <= 0x16u)
    {
      v59 = 0;
    }
    else
    {
      v59 = v58;
    }
    if (!a1)
    {
      v60 = 0x2000000000000;
      goto LABEL_64;
    }
    v60 = 0x2000000000000;
    if (*(_DWORD *)(v16 + 760) < *(unsigned __int8 *)(a1 + 7))
      goto LABEL_64;
LABEL_110:
    JSC::Heap::writeBarrierSlowPath(v16 + 192, a1);
    goto LABEL_64;
  }
  if (!a1)
  {
    v60 = 0x5000000000000;
    v59 = v126;
    goto LABEL_64;
  }
  v60 = 0x5000000000000;
  v59 = v126;
  if (*(_DWORD *)(v16 + 760) >= *(unsigned __int8 *)(a1 + 7))
    goto LABEL_110;
LABEL_64:
  v133[0] = v13;
  v133[1] = v60 | v57;
  v133[2] = v59;
  JSC::ObjectPropertyCondition::isWatchable((uint64_t)v134, 0, v49, v50, v51, v52, v53, v54);
  if (v61)
  {
    JSC::ObjectPropertyCondition::isWatchable((uint64_t)v133, 0, a3, a4, (uint64_t)a5, a6, a7, a8);
    if ((v62 & 1) != 0)
    {
      if ((*v11 & 1) == 0 && *(_BYTE *)(*v11 + 5))
      {
        __break(0xC471u);
        JUMPOUT(0x1989CF858);
      }
      JSC::InlineWatchpointSet::touch(v11, (JSC::VM *)v16, "Set up species watchpoint.", a4, (uint64_t)a5, a6, a7, a8, v38);
      v131 = a1;
      std::make_unique[abi:sn180100]<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>,JSC::JSGlobalObject *,JSC::ObjectPropertyCondition &,JSC::InlineWatchpointSet&>((uint64_t *)&v132, &v131, (uint64_t)v134, v11);
      std::unique_ptr<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>>::operator=[abi:sn180100]((_QWORD **)v127, &v132, v63, v64, v65, v66, v67, v68);
      std::unique_ptr<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>>::~unique_ptr[abi:sn180100]((_QWORD **)&v132, v69, v70, v71, v72, v73, v74, v75);
      JSC::AdaptiveInferredPropertyValueWatchpointBase::install(*v127, (JSC::VM *)v16, v76, v77, v78, v79, v80, v81);
      v131 = a1;
      std::make_unique[abi:sn180100]<JSC::ObjectAdaptiveStructureWatchpoint,JSC::JSGlobalObject *,JSC::ObjectPropertyCondition &,JSC::InlineWatchpointSet &>((uint64_t *)&v132, &v131, (uint64_t)v133, v11);
      v89 = v132;
      v90 = *v128;
      *v128 = (unint64_t)v132;
      if (v90)
      {
        JSC::Watchpoint::operator delete(v90, v82, v83, v84, v85, v86, v87, v88);
        v89 = (JSC::ObjectAdaptiveStructureWatchpoint *)*v128;
      }
      JSC::ObjectAdaptiveStructureWatchpoint::install(v89, (JSC::VM *)v82, v83, v84, v85, v86, v87, v88);
      goto LABEL_70;
    }
  }
LABEL_107:
  JSC::JSGlobalObject::tryInstallSpeciesWatchpoint<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>>(JSC::JSObject *,JSC::JSObject *,std::unique_ptr<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>> &,std::unique_ptr<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>> &,JSC::InlineWatchpointSet&,JSC::JSGlobalObject::HasSpeciesProperty,JSC::GetterSetter *)::{lambda(void)#1}::operator()(v11, (JSC::VM *)v16, v38, a3, a4, (uint64_t)a5, a6, a7, a8);
LABEL_70:
  if (v144)
  {
    v91 = *(_DWORD *)(v143 + 4);
    if (!v91)
    {
      __break(0xC471u);
      JUMPOUT(0x1989CF9B4);
    }
    *(_DWORD *)(v143 + 4) = v91 - 1;
  }
LABEL_73:
  if (v156)
  {
    v92 = *(_DWORD *)(v155 + 4);
    if (!v92)
    {
      __break(0xC471u);
      JUMPOUT(0x1989CF980);
    }
    *(_DWORD *)(v155 + 4) = v92 - 1;
  }
  return JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v159);
}

uint64_t JSC::JSGlobalObject::typedArrayPrototypeConstructorWatchpoint(uint64_t a1, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1989CFB98);
    case 1:
      result = a1 + 2864;
      break;
    case 2:
      result = a1 + 2888;
      break;
    case 3:
      result = a1 + 2912;
      break;
    case 4:
      result = a1 + 2936;
      break;
    case 5:
      result = a1 + 2960;
      break;
    case 6:
      result = a1 + 2984;
      break;
    case 7:
      result = a1 + 3008;
      break;
    case 8:
      result = a1 + 3032;
      break;
    case 9:
      result = a1 + 3056;
      break;
    case 10:
      result = a1 + 3080;
      break;
    case 11:
      result = a1 + 3104;
      break;
    case 12:
      result = a1 + 3128;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1989CFB78);
  }
  return result;
}

uint64_t JSC::JSGlobalObject::typedArrayConstructorSpeciesAbsenceWatchpoint(uint64_t a1, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1989CFC90);
    case 1:
      result = a1 + 2848;
      break;
    case 2:
      result = a1 + 2872;
      break;
    case 3:
      result = a1 + 2896;
      break;
    case 4:
      result = a1 + 2920;
      break;
    case 5:
      result = a1 + 2944;
      break;
    case 6:
      result = a1 + 2968;
      break;
    case 7:
      result = a1 + 2992;
      break;
    case 8:
      result = a1 + 3016;
      break;
    case 9:
      result = a1 + 3040;
      break;
    case 10:
      result = a1 + 3064;
      break;
    case 11:
      result = a1 + 3088;
      break;
    case 12:
      result = a1 + 3112;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1989CFC70);
  }
  return result;
}

void JSC::JSGlobalObject::installTypedArrayConstructorSpeciesWatchpoint(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  const JSC::PropertyTable *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  unsigned __int16 *v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v10 = a1[7];
  *(_QWORD *)v58 = 0xFFFFFFFF00000000;
  v60 = 0;
  v61 = 0;
  v59 = a2;
  v62 = 196608;
  v63 = 0;
  v66 = 0;
  v67 = 0;
  v64 = v10;
  ++*(_DWORD *)(v10 + 4);
  v65 = 1;
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 2752);
  if (!(v11 >> 4)
    || (v12 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE), ((v11 >> 4) & ~*(_DWORD *)(v12 + 0x20)) != 0)
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), (JSC::VM *)v10, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v13)|| (v68 = v11, v14 = JSC::PropertyTable::get(v13, (uint64_t *)&v68), a6 = v14, (_DWORD)v14 == -1))
  {
    if ((*(_BYTE *)(a2 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a2, (JSC::VM *)v10, v11, (uint64_t)&v56) & 1) != 0)
    {
      goto LABEL_20;
    }
    if (!v11)
      goto LABEL_20;
    v18 = *(_DWORD *)(v11 + 16);
    if ((v18 & 0x20) != 0)
      goto LABEL_20;
    v19 = *(_BYTE **)(v11 + 8);
    v20 = *(unsigned int *)(v11 + 4);
    if ((v18 & 4) != 0)
    {
      if ((_DWORD)v20)
      {
        v21 = *v19 - 48;
        if (v21 <= 9 && (v20 < 2 || *v19 != 48))
        {
          v53 = v19 + 1;
          v54 = v20 - 1;
          while (v54)
          {
            if (v21 > 0x19999999)
              goto LABEL_17;
            v55 = *v53 - 48;
            if (v55 > 9)
              goto LABEL_17;
            v22 = 0;
            v23 = 0;
            v24 = 0;
            v47 = __CFADD__(v55, 10 * v21);
            v21 = v55 + 10 * v21;
            ++v53;
            --v54;
            if (v47)
              goto LABEL_18;
          }
          goto LABEL_73;
        }
      }
    }
    else if ((_DWORD)v20)
    {
      v21 = *(unsigned __int16 *)v19 - 48;
      if (v21 <= 9 && (*(_WORD *)v19 != 48 || v20 <= 1))
      {
        v44 = (unsigned __int16 *)(v19 + 2);
        v45 = v20 - 1;
        while (v45)
        {
          if (v21 > 0x19999999)
            goto LABEL_17;
          v46 = *v44 - 48;
          if (v46 > 9)
            goto LABEL_17;
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v47 = __CFADD__(v46, 10 * v21);
          v21 = v46 + 10 * v21;
          ++v44;
          --v45;
          if (v47)
            goto LABEL_18;
        }
LABEL_73:
        v22 = 0x100000000;
        if (v21 == -1)
        {
          v22 = 0;
          v23 = 0;
        }
        else
        {
          v23 = v21;
        }
        if (v21 == -1)
          v24 = 0;
        else
          v24 = v21 & 0xFFFFFF00;
LABEL_18:
        if ((v22 & 0x100000000) != 0)
          JSC::JSObject::getOwnPropertySlotByIndex(a2, (uint64_t)a1, (const WTF::StringImpl *)(v24 | v23), (uint64_t)&v56, a5, a6, a7, a8);
        goto LABEL_20;
      }
    }
LABEL_17:
    v22 = 0;
    v23 = 0;
    v24 = 0;
    goto LABEL_18;
  }
  a5 = HIDWORD(v14);
  if ((int)v14 <= 63)
  {
    v15 = a2 + 16;
    v16 = v14 << 32;
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 8) - 8;
    v16 = 0x3F00000000 - (v14 << 32);
  }
  a4 = *(_QWORD *)(v15 + (v16 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
    goto LABEL_10;
  v17 = *(unsigned __int8 *)(a4 + 5);
  if (v17 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a2, v10, (uint64_t)&v56, a4, SHIDWORD(v14), v14);
  }
  else
  {
    if (v17 != 6)
    {
LABEL_10:
      v56 = a4;
      v60 = a2;
      v58[0] = HIDWORD(v14);
      v58[1] = v14;
      LOWORD(v62) = 257;
      goto LABEL_20;
    }
    v48 = *(_DWORD *)(v12 + 16) & 3;
    v49 = *(_QWORD *)(a4 + 16);
    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
    {
      v51 = *(_QWORD *)(a4 + 24);
      v50 = *(_QWORD *)(a4 + 32);
      v56 = *(_QWORD *)(a4 + 8);
      v57 = v49;
      v58[0] = HIDWORD(v14);
      v60 = a2;
      BYTE1(v62) = 3;
      if (v48 != 2)
        LOBYTE(v62) = 1;
      HIBYTE(v62) = 1;
      v66 = v51;
      v67 = v50;
    }
    else
    {
      v56 = *(_QWORD *)(a4 + 8);
      v57 = v49;
      v58[0] = HIDWORD(v14);
      v60 = a2;
      BYTE1(v62) = 3;
      if (v48 != 2)
        LOBYTE(v62) = 1;
    }
  }
LABEL_20:
  JSC::Structure::ensurePropertyReplacementWatchpointSet((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), (JSC::VM *)v10, (JSC::Structure *)v58[1], a4, a5, a6, a7, a8);
  v25 = a1[203];
  v26 = *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 2752) | 0x5000000000000;
  v27 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v27 = off_1E3580B60;
  *(_QWORD *)(v27 + 8) = a2;
  *(_QWORD *)(v27 + 16) = v26;
  *(_QWORD *)(v27 + 24) = v25;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)(v27 + 40) = 0;
  *(_BYTE *)(v27 + 48) = 0;
  *(_QWORD *)(v27 + 56) = 0;
  *(_QWORD *)(v27 + 64) = 0;
  *(_BYTE *)(v27 + 72) = 1;
  if ((v26 & 0xFF000000000000) != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D00A8);
  }
  *(_QWORD *)v27 = off_1E35A0718;
  *(_QWORD *)(v27 + 80) = a1;
  *(_QWORD *)(v27 + 88) = a1 + 295;
  v35 = a1[295];
  if ((v35 & 1) != 0)
    v36 = (v35 >> 1) & 3;
  else
    v36 = *(unsigned __int8 *)(v35 + 4);
  if (v36 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D00C8);
  }
  v37 = (_QWORD *)a1[354];
  a1[354] = v27;
  if (v37)
  {
    *v37 = off_1E3580B60;
    v38 = (_QWORD *)v37[8];
    if (v38)
    {
      v39 = v37[7];
      *v38 = v39;
      *(_QWORD *)(v39 + 8) = v38;
      v37[7] = 0;
      v37[8] = 0;
    }
    v40 = (_QWORD *)v37[5];
    if (v40)
    {
      v41 = v37[4];
      *v40 = v41;
      *(_QWORD *)(v41 + 8) = v40;
      v37[4] = 0;
      v37[5] = 0;
    }
    WTF::fastFree((unint64_t)v37, v28, v29, (uint64_t)v30, v31, v32, v33, v34);
    v27 = a1[354];
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v27, (JSC::VM *)v10, v29, v30, v31, v32, v33, v34);
  if (v65)
  {
    v42 = *(_DWORD *)(v64 + 4);
    if (!v42)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D00E8);
    }
    *(_DWORD *)(v64 + 4) = v42 - 1;
  }
}

uint64_t *JSC::JSGlobalObject::installTypedArrayIteratorProtocolWatchpoint(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  int v12;
  JSC::VM *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  char *v79;
  _QWORD *v80;
  _DWORD **v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *result;
  uint64_t v86;
  int v87;
  unsigned __int16 *v88;
  uint64_t v89;
  unsigned int v90;
  BOOL v91;
  int v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  unsigned int *v103;
  unsigned int v104;
  uint64_t (*v105)(__int128 *);
  _QWORD *v106;
  uint64_t (*v107)(__int128 *);
  _QWORD *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned __int8 *v115;
  uint64_t v116;
  unsigned int v117;
  void (**v118)(JSC::StringFireDetail *__hidden);
  const char *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  char v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  char *v131;

  v8 = a3;
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_DWORD *)(v11 + 88);
  *(_DWORD *)(v11 + 88) = v12 + 1;
  v13 = (JSC::VM *)v11;
  if (!v12)
  {
    v14 = *(_QWORD *)(v11 + 16);
    v13 = (JSC::VM *)v11;
    if (v14)
    {
      v13 = (JSC::VM *)v11;
      if (*(_QWORD *)(v11 + 24) == v14)
      {
        *(_QWORD *)(v11 + 16) = 0;
        v103 = (unsigned int *)(v11 + 80);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 & 0xFFFFFFEF, v103));
        *(_BYTE *)(v11 + 86) = 1;
        v13 = *(JSC::VM **)(a1 + 56);
      }
    }
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2712);
  v120 = 0xFFFFFFFF00000000;
  v122 = 0;
  v123 = 0;
  v121 = a2;
  v124 = 196608;
  v125 = 0;
  v128 = 0;
  v129 = 0;
  v126 = v11;
  ++*(_DWORD *)(v11 + 4);
  v127 = 1;
  if ((v15 >> 4))
  {
    v16 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
    if (((v15 >> 4) & ~*(_DWORD *)(v16 + 0x20)) == 0)
    {
      v17 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x58);
      if (v17
        || (v28 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x40)) != 0
        && (*(_BYTE *)(v28 + 5) == 1 || *(_DWORD *)(v28 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)), v13, 1, a4, a5, a6, a7, a8), v17))
      {
        if (*(_DWORD *)(v17 + 24))
        {
          v18 = *(_QWORD *)(v17 + 16);
          v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
          v20 = *(unsigned int *)(v17 + 8);
          v21 = *(_DWORD *)(v15 + 16);
          if ((v18 & 1) != 0)
          {
            if ((v21 & 0x20) != 0)
              v21 = *(_DWORD *)(v15 + 32);
            v22 = *(_DWORD *)(v17 + 12);
            v23 = (v21 >> 8) & *(_QWORD *)&v22;
            v24 = *(unsigned __int8 *)(v19 + v23);
            if (!*(_BYTE *)(v19 + v23))
              goto LABEL_39;
            v25 = v19 + v20;
            v26 = 1;
            while (1)
            {
              v27 = *(_QWORD *)(v25 + 8 * (v24 - 1));
              if (v15 == (v27 & 0xFFFFFFFFFFFFLL))
                break;
              v23 = ((_DWORD)v23 + v26) & v22;
              v24 = *(unsigned __int8 *)(v19 + v23);
              ++v26;
              if (!*(_BYTE *)(v19 + v23))
                goto LABEL_39;
            }
            a6 = (v27 >> 16) & 0xFF00000000 | HIBYTE(v27);
          }
          else
          {
            if ((v21 & 0x20) != 0)
              v21 = *(_DWORD *)(v15 + 32);
            v33 = *(_DWORD *)(v17 + 12);
            v34 = v33 & (v21 >> 8);
            v35 = *(_DWORD *)(v19 + 4 * v34);
            if (!v35)
              goto LABEL_39;
            v36 = v19 + 4 * v20;
            v37 = 1;
            while (1)
            {
              v38 = (v35 - 1);
              if (*(_QWORD *)(v36 + 16 * v38) == v15)
                break;
              v34 = (v34 + v37) & v33;
              v35 = *(_DWORD *)(v19 + 4 * v34);
              ++v37;
              if (!v35)
                goto LABEL_39;
            }
            a6 = *(unsigned int *)(v36 + 16 * v38 + 8) | ((unint64_t)*(unsigned __int8 *)(v36 + 16 * v38 + 12) << 32);
          }
          if ((_DWORD)a6 != -1)
          {
            if ((int)a6 <= 63)
            {
              v29 = a2 + 16;
              v30 = a6 << 32;
            }
            else
            {
              v29 = *(_QWORD *)(a2 + 8) - 8;
              v30 = 0x3F00000000 - (a6 << 32);
            }
            v31 = *(_QWORD *)(v29 + (v30 >> 29));
            if ((v31 & 0xFFFE000000000002) != 0)
              goto LABEL_26;
            v32 = *(unsigned __int8 *)(v31 + 5);
            if (v32 == 5)
            {
              JSC::JSObject::fillGetterPropertySlot((unsigned int *)a2, (uint64_t)v13, (uint64_t)&v118, v31, SHIDWORD(a6), a6);
              goto LABEL_27;
            }
            if (v32 == 6)
            {
              v92 = *(_DWORD *)(v16 + 16) & 3;
              v93 = *(const char **)(v31 + 16);
              if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v31 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
              {
                v95 = *(_QWORD *)(v31 + 24);
                v94 = *(_QWORD *)(v31 + 32);
                v118 = *(void (***)(JSC::StringFireDetail *__hidden))(v31 + 8);
                v119 = v93;
                LODWORD(v120) = HIDWORD(a6);
                v122 = a2;
                BYTE1(v124) = 3;
                if (v92 != 2)
                  LOBYTE(v124) = 1;
                HIBYTE(v124) = 1;
                v128 = v95;
                v129 = v94;
              }
              else
              {
                v118 = *(void (***)(JSC::StringFireDetail *__hidden))(v31 + 8);
                v119 = v93;
                LODWORD(v120) = HIDWORD(a6);
                v122 = a2;
                BYTE1(v124) = 3;
                if (v92 != 2)
                  LOBYTE(v124) = 1;
              }
            }
            else
            {
LABEL_26:
              v118 = (void (**)(JSC::StringFireDetail *__hidden))v31;
              v122 = a2;
              v120 = __PAIR64__(a6, HIDWORD(a6));
              LOWORD(v124) = 257;
            }
LABEL_27:
            __break(0xC471u);
            JUMPOUT(0x1989D0388);
          }
        }
      }
    }
  }
LABEL_39:
  if ((*(_BYTE *)(a2 + 6) & 0x20) != 0
    && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a2, v13, v15, (uint64_t)&v118) & 1) != 0)
  {
    goto LABEL_27;
  }
  if (v15)
  {
    v39 = *(_DWORD *)(v15 + 16);
    if ((v39 & 0x20) == 0)
    {
      v40 = *(_BYTE **)(v15 + 8);
      v41 = *(unsigned int *)(v15 + 4);
      if ((v39 & 4) != 0)
      {
        if ((_DWORD)v41)
        {
          v42 = *v40 - 48;
          if (v42 <= 9 && (v41 < 2 || *v40 != 48))
          {
            v115 = v40 + 1;
            v116 = v41 - 1;
            while (v116)
            {
              if (v42 > 0x19999999)
                goto LABEL_45;
              v117 = *v115 - 48;
              if (v117 > 9)
                goto LABEL_45;
              v43 = 0;
              v44 = 0;
              v45 = 0;
              v91 = __CFADD__(v117, 10 * v42);
              v42 = v117 + 10 * v42;
              ++v115;
              --v116;
              if (v91)
                goto LABEL_46;
            }
            goto LABEL_213;
          }
        }
      }
      else if ((_DWORD)v41)
      {
        v42 = *(unsigned __int16 *)v40 - 48;
        if (v42 <= 9 && (*(_WORD *)v40 != 48 || v41 <= 1))
        {
          v88 = (unsigned __int16 *)(v40 + 2);
          v89 = v41 - 1;
          while (v89)
          {
            if (v42 > 0x19999999)
              goto LABEL_45;
            v90 = *v88 - 48;
            if (v90 > 9)
              goto LABEL_45;
            v43 = 0;
            v44 = 0;
            v45 = 0;
            v91 = __CFADD__(v90, 10 * v42);
            v42 = v90 + 10 * v42;
            ++v88;
            --v89;
            if (v91)
              goto LABEL_46;
          }
LABEL_213:
          v43 = 0x100000000;
          if (v42 == -1)
          {
            v43 = 0;
            v44 = 0;
          }
          else
          {
            v44 = v42;
          }
          if (v42 == -1)
            v45 = 0;
          else
            v45 = v42 & 0xFFFFFF00;
LABEL_46:
          a3 = v45 | v44;
          if ((v43 & 0x100000000) != 0
            && JSC::JSObject::getOwnPropertySlotByIndex(a2, a1, (const WTF::StringImpl *)a3, (uint64_t)&v118, a5, a6, a7, a8))
          {
            goto LABEL_27;
          }
          goto LABEL_47;
        }
      }
LABEL_45:
      v43 = 0;
      v44 = 0;
      v45 = 0;
      goto LABEL_46;
    }
  }
LABEL_47:
  if (BYTE1(v124))
  {
    __break(0xC471u);
    JUMPOUT(0x1989D0A48);
  }
  v46 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
  if (!v46)
    v46 = *(_QWORD *)(a2 + 16);
  v47 = (uint64_t *)(a1 + 1648);
  v48 = *(_QWORD *)(a1 + 1648);
  if ((v48 & 1) != 0)
  {
    v105 = *(uint64_t (**)(__int128 *))(v48 & 0xFFFFFFFFFFFFFFFCLL);
    v106 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v106 = (_QWORD *)(a1 - 16);
    *(_QWORD *)&v130 = *v106;
    *((_QWORD *)&v130 + 1) = a1;
    v131 = (char *)(a1 + 1648);
    v48 = v105(&v130);
  }
  if (v48 != v46)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D0A9CLL);
  }
  v49 = *v47;
  if ((*v47 & 1) != 0)
  {
    v107 = *(uint64_t (**)(__int128 *))(v49 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a1 & 8) != 0)
      v108 = (_QWORD *)(a1 - 16);
    else
      v108 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)&v130 = *v108;
    *((_QWORD *)&v130 + 1) = a1;
    v131 = (char *)(a1 + 1648);
    v49 = v107(&v130);
  }
  if (*(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath(v11 + 192, a1);
  *(_QWORD *)&v130 = a2;
  *((_QWORD *)&v130 + 1) = v15 | 0x2000000000000;
  v131 = (char *)v49;
  if (v127)
  {
    v50 = *(_DWORD *)(v126 + 4);
    if (!v50)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D0C04);
    }
    *(_DWORD *)(v126 + 4) = v50 - 1;
  }
  JSC::ObjectPropertyCondition::isWatchable((uint64_t)&v130, 1, a3, (uint64_t)a4, a5, a6, a7, a8);
  if ((v57 & 1) != 0)
  {
    if (v8 == 6)
    {
      v58 = (char *)(a1 + 2472);
    }
    else
    {
      switch(v8)
      {
        case 1:
          v58 = (char *)(a1 + 2392);
          break;
        case 2:
          v58 = (char *)(a1 + 2408);
          break;
        case 3:
          v58 = (char *)(a1 + 2424);
          break;
        case 4:
          v58 = (char *)(a1 + 2440);
          break;
        case 5:
          v58 = (char *)(a1 + 2456);
          break;
        case 7:
          v58 = (char *)(a1 + 2488);
          break;
        case 8:
          v58 = (char *)(a1 + 2504);
          break;
        case 9:
          v58 = (char *)(a1 + 2520);
          break;
        case 10:
          v58 = (char *)(a1 + 2536);
          break;
        case 11:
          v58 = (char *)(a1 + 2552);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1989D0C34);
      }
    }
    v59 = *(_QWORD *)v58;
    if ((v59 & 1) == 0 && *(_BYTE *)(v59 + 5))
    {
      __break(0xC471u);
      JUMPOUT(0x1989D08ACLL);
    }
    if (v8 == 6)
    {
      v60 = (uint64_t *)(a1 + 2472);
    }
    else
    {
      switch(v8)
      {
        case 1:
          v60 = (uint64_t *)(a1 + 2392);
          break;
        case 2:
          v60 = (uint64_t *)(a1 + 2408);
          break;
        case 3:
          v60 = (uint64_t *)(a1 + 2424);
          break;
        case 4:
          v60 = (uint64_t *)(a1 + 2440);
          break;
        case 5:
          v60 = (uint64_t *)(a1 + 2456);
          break;
        case 7:
          v60 = (uint64_t *)(a1 + 2488);
          break;
        case 8:
          v60 = (uint64_t *)(a1 + 2504);
          break;
        case 9:
          v60 = (uint64_t *)(a1 + 2520);
          break;
        case 10:
          v60 = (uint64_t *)(a1 + 2536);
          break;
        case 11:
          v60 = (uint64_t *)(a1 + 2552);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1989D0C74);
      }
    }
    v118 = &off_1E3583C90;
    v119 = "Set up iterator protocol watchpoint.";
    v61 = *v60;
    if ((*v60 & 1) != 0)
    {
      v62 = (v61 >> 1) & 3;
      if (v62 != 2)
      {
        __dmb(0xAu);
        if (v62)
          v63 = 5;
        else
          v63 = 3;
        *v60 = v63;
        __dmb(0xAu);
      }
    }
    else
    {
      JSC::WatchpointSet::touch(v61, (JSC::VM *)v11, &v118, v51, v52, v53, v54, v55, v56);
    }
    if (v8 == 6)
    {
      v64 = (char *)(a1 + 2472);
    }
    else
    {
      switch(v8)
      {
        case 1:
          v64 = (char *)(a1 + 2392);
          break;
        case 2:
          v64 = (char *)(a1 + 2408);
          break;
        case 3:
          v64 = (char *)(a1 + 2424);
          break;
        case 4:
          v64 = (char *)(a1 + 2440);
          break;
        case 5:
          v64 = (char *)(a1 + 2456);
          break;
        case 7:
          v64 = (char *)(a1 + 2488);
          break;
        case 8:
          v64 = (char *)(a1 + 2504);
          break;
        case 9:
          v64 = (char *)(a1 + 2520);
          break;
        case 10:
          v64 = (char *)(a1 + 2536);
          break;
        case 11:
          v64 = (char *)(a1 + 2552);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1989D0C94);
      }
    }
    v65 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v65 = 0;
    *(_QWORD *)(v65 + 8) = 0;
    *(_BYTE *)(v65 + 16) = 7;
    *(_BYTE *)(v65 + 21) = BYTE4(a1);
    *(_DWORD *)(v65 + 17) = a1;
    *(_OWORD *)(v65 + 24) = v130;
    v73 = *((_QWORD *)&v130 + 1);
    *(_QWORD *)(v65 + 40) = v131;
    *(_QWORD *)(v65 + 48) = v64;
    if ((v73 & 0xFF000000000000) == 0x5000000000000)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D0AFCLL);
    }
    if ((v73 & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D0B1CLL);
    }
    v74 = *(_QWORD *)v64;
    if ((*(_QWORD *)v64 & 1) != 0)
      v75 = (v74 >> 1) & 3;
    else
      v75 = *(unsigned __int8 *)(v74 + 4);
    if (v75 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D0B3CLL);
    }
    v76 = v8 - 1;
    switch(v76)
    {
      case 0:
        v77 = (unint64_t *)(a1 + 2856);
        break;
      case 1:
        v77 = (unint64_t *)(a1 + 2880);
        break;
      case 2:
        v77 = (unint64_t *)(a1 + 2904);
        break;
      case 3:
        v77 = (unint64_t *)(a1 + 2928);
        break;
      case 4:
        v77 = (unint64_t *)(a1 + 2952);
        break;
      case 5:
        v77 = (unint64_t *)(a1 + 2976);
        break;
      case 6:
        v77 = (unint64_t *)(a1 + 3000);
        break;
      case 7:
        v77 = (unint64_t *)(a1 + 3024);
        break;
      case 8:
        v77 = (unint64_t *)(a1 + 3048);
        break;
      case 9:
        v77 = (unint64_t *)(a1 + 3072);
        break;
      case 10:
        v77 = (unint64_t *)(a1 + 3096);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1989D099CLL);
    }
    v78 = *v77;
    *v77 = v65;
    if (v78)
      JSC::Watchpoint::operator delete(v78, v66, v67, v68, v69, v70, v71, v72);
    switch(v76)
    {
      case 0:
        v79 = (char *)(a1 + 2856);
        break;
      case 1:
        v79 = (char *)(a1 + 2880);
        break;
      case 2:
        v79 = (char *)(a1 + 2904);
        break;
      case 3:
        v79 = (char *)(a1 + 2928);
        break;
      case 4:
        v79 = (char *)(a1 + 2952);
        break;
      case 5:
        v79 = (char *)(a1 + 2976);
        break;
      case 6:
        v79 = (char *)(a1 + 3000);
        break;
      case 7:
        v79 = (char *)(a1 + 3024);
        break;
      case 8:
        v79 = (char *)(a1 + 3048);
        break;
      case 9:
        v79 = (char *)(a1 + 3072);
        break;
      case 10:
        v79 = (char *)(a1 + 3096);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1989D09CCLL);
    }
    v80 = *(_QWORD **)v79;
    v81 = (_DWORD **)(*(_QWORD *)v79 + 24);
    JSC::ObjectPropertyCondition::isWatchable((uint64_t)v81, 0, v67, v68, v69, v70, v71, v72);
    if ((v82 & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D0B5CLL);
    }
    v83 = 16 * (**v81 & 0xFFFFFFFE);
    v84 = *(_QWORD *)(v83 + 0x60);
    if ((v84 & 1) != 0)
    {
      v109 = (v84 >> 1) & 3;
      v84 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v84 = 1;
      *(_BYTE *)(v84 + 4) = v109;
      *(_BYTE *)(v84 + 5) = 0;
      *(_QWORD *)(v84 + 8) = v84 + 8;
      *(_QWORD *)(v84 + 16) = v84 + 8;
      __dmb(0xAu);
      *(_QWORD *)(v83 + 96) = v84;
    }
    v86 = *(_QWORD *)(v84 + 8);
    result = (uint64_t *)(v84 + 8);
    *v80 = v86;
    v80[1] = result;
    *result = (uint64_t)v80;
    *(_QWORD *)(v86 + 8) = v80;
    *((_WORD *)result - 2) = 257;
  }
  else
  {
    v96 = (uint64_t *)JSC::JSGlobalObject::typedArrayIteratorProtocolWatchpointSet(a1, v8);
    v118 = &off_1E3583C90;
    v119 = "Was not able to set up iterator protocol watchpoint.";
    result = JSC::InlineWatchpointSet::invalidate(v96, (JSC::VM *)v11, &v118, v97, v98, v99, v100, v101, v102);
  }
  v87 = *(_DWORD *)(v11 + 88) - 1;
  *(_DWORD *)(v11 + 88) = v87;
  if (!v87 && *(_BYTE *)(v11 + 93441))
  {
    if (*(_BYTE *)(v11 + 86))
    {
      v110 = *(_QWORD *)(v11 + 24);
      *(_QWORD *)(v11 + 16) = v110;
      *(_QWORD *)(v11 + 32) = v110;
      if (v110)
      {
        v111 = (unsigned int *)(v11 + 80);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 | 0x10, v111));
      }
      if (*(_BYTE *)(v11 + 93443))
        *(_BYTE *)(v11 + 93442) = 1;
      *(_BYTE *)(v11 + 86) = 0;
    }
    else
    {
      v113 = (unsigned int *)(v11 + 80);
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 | 2, v113));
    }
  }
  return result;
}

uint64_t JSC::JSGlobalObject::typedArrayIteratorProtocolWatchpointSet(uint64_t a1, int a2)
{
  uint64_t result;

  if (a2 == 6)
    return a1 + 2472;
  switch(a2)
  {
    case 1:
      result = a1 + 2392;
      break;
    case 2:
      result = a1 + 2408;
      break;
    case 3:
      result = a1 + 2424;
      break;
    case 4:
      result = a1 + 2440;
      break;
    case 5:
      result = a1 + 2456;
      break;
    case 7:
      result = a1 + 2488;
      break;
    case 8:
      result = a1 + 2504;
      break;
    case 9:
      result = a1 + 2520;
      break;
    case 10:
      result = a1 + 2536;
      break;
    case 11:
      result = a1 + 2552;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1989D0F08);
  }
  return result;
}

uint64_t *JSC::InlineWatchpointSet::touch(uint64_t *this, JSC::VM *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = &off_1E3583C90;
  v11[1] = a3;
  if ((*this & 1) == 0)
    return (uint64_t *)JSC::WatchpointSet::touch(*this, a2, v11, a4, a5, a6, a7, a8, a9);
  v9 = (*this >> 1) & 3;
  if (v9 != 2)
  {
    __dmb(0xAu);
    if (v9)
      v10 = 5;
    else
      v10 = 3;
    *this = v10;
    __dmb(0xAu);
  }
  return this;
}

uint64_t *JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(uint64_t *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;

  v1 = *result;
  v2 = *(_DWORD *)(*result + 88) - 1;
  *(_DWORD *)(*result + 88) = v2;
  if (!v2 && *(_BYTE *)(v1 + 93441))
  {
    if (*(_BYTE *)(v1 + 86))
    {
      v3 = *(_QWORD *)(v1 + 24);
      *(_QWORD *)(v1 + 16) = v3;
      *(_QWORD *)(v1 + 32) = v3;
      if (v3)
      {
        v4 = (unsigned int *)(v1 + 80);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 | 0x10, v4));
      }
      if (*(_BYTE *)(v1 + 93443))
        *(_BYTE *)(v1 + 93442) = 1;
      *(_BYTE *)(v1 + 86) = 0;
    }
    else
    {
      v6 = (unsigned int *)(v1 + 80);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 | 2, v6));
    }
  }
  return result;
}

void JSC::JSGlobalObject::installTypedArrayPrototypeIteratorProtocolWatchpoint(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const JSC::PropertyTable *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
  JSC::setupAdaptiveWatchpoint((JSC *)&v26, a1, a2, (const JSC::Identifier *)(*((_QWORD *)v9 + 5244) + 2712), a5, a6, a7, a8);
  v10 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v10 = off_1E3580B60;
  v18 = v27;
  *(_OWORD *)(v10 + 8) = v26;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 24) = v18;
  *(_BYTE *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  *(_BYTE *)(v10 + 72) = 1;
  if ((unint64_t)BYTE14(v26) << 48 != 0x5000000000000
    || ((*(_QWORD *)v10 = off_1E35A0718,
         *(_QWORD *)(v10 + 80) = a1,
         *(_QWORD *)(v10 + 88) = (char *)a1 + 2368,
         v19 = *((_QWORD *)a1 + 296),
         (v19 & 1) != 0)
      ? (v20 = (v19 >> 1) & 3)
      : (v20 = *(unsigned __int8 *)(v19 + 4)),
        v20 != 1))
  {
    __break(0xC471u);
    JUMPOUT(0x1989D116CLL);
  }
  v21 = (_QWORD *)*((_QWORD *)a1 + 355);
  *((_QWORD *)a1 + 355) = v10;
  if (v21)
  {
    *v21 = off_1E3580B60;
    v22 = (_QWORD *)v21[8];
    if (v22)
    {
      v23 = v21[7];
      *v22 = v23;
      *(_QWORD *)(v23 + 8) = v22;
      v21[7] = 0;
      v21[8] = 0;
    }
    v24 = (_QWORD *)v21[5];
    if (v24)
    {
      v25 = v21[4];
      *v24 = v25;
      *(_QWORD *)(v25 + 8) = v24;
      v21[4] = 0;
      v21[5] = 0;
    }
    WTF::fastFree((unint64_t)v21, v11, v12, (uint64_t)v13, v14, v15, v16, v17);
    v10 = *((_QWORD *)a1 + 355);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v10, v9, v12, v13, v14, v15, v16, v17);
}

void JSC::JSGlobalObject::installNumberPrototypeWatchpoint(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const JSC::PropertyTable *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
  JSC::setupAdaptiveWatchpoint((JSC *)&v26, a1, a2, (const JSC::Identifier *)(*((_QWORD *)v9 + 5244) + 2512), a5, a6, a7, a8);
  v10 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v10 = off_1E3580B60;
  v18 = v27;
  *(_OWORD *)(v10 + 8) = v26;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 24) = v18;
  *(_BYTE *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v10 + 64) = 0;
  *(_BYTE *)(v10 + 72) = 1;
  if ((unint64_t)BYTE14(v26) << 48 != 0x5000000000000
    || ((*(_QWORD *)v10 = off_1E35A0718,
         *(_QWORD *)(v10 + 80) = a1,
         *(_QWORD *)(v10 + 88) = (char *)a1 + 2328,
         v19 = *((_QWORD *)a1 + 291),
         (v19 & 1) != 0)
      ? (v20 = (v19 >> 1) & 3)
      : (v20 = *(unsigned __int8 *)(v19 + 4)),
        v20 != 1))
  {
    __break(0xC471u);
    JUMPOUT(0x1989D12BCLL);
  }
  v21 = (_QWORD *)*((_QWORD *)a1 + 349);
  *((_QWORD *)a1 + 349) = v10;
  if (v21)
  {
    *v21 = off_1E3580B60;
    v22 = (_QWORD *)v21[8];
    if (v22)
    {
      v23 = v21[7];
      *v22 = v23;
      *(_QWORD *)(v23 + 8) = v22;
      v21[7] = 0;
      v21[8] = 0;
    }
    v24 = (_QWORD *)v21[5];
    if (v24)
    {
      v25 = v21[4];
      *v24 = v25;
      *(_QWORD *)(v25 + 8) = v24;
      v21[4] = 0;
      v21[5] = 0;
    }
    WTF::fastFree((unint64_t)v21, v11, v12, (uint64_t)v13, v14, v15, v16, v17);
    v10 = *((_QWORD *)a1 + 349);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v10, v9, v12, v13, v14, v15, v16, v17);
}

void JSC::JSGlobalObject::installMapPrototypeWatchpoint(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  const JSC::PropertyTable *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  const JSC::PropertyTable *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v11 = *((_QWORD *)a1 + 278);
  if ((v11 & 1) != 0)
    v12 = (v11 >> 1) & 3;
  else
    v12 = *(unsigned __int8 *)(v11 + 4);
  if (v12 != 2)
  {
    JSC::setupAdaptiveWatchpoint((JSC *)&v45, a1, a2, (const JSC::Identifier *)(*((_QWORD *)v10 + 5244) + 2712), a5, a6, a7, a8);
    v13 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v13 = off_1E3580B60;
    v21 = v46;
    *(_OWORD *)(v13 + 8) = v45;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 24) = v21;
    *(_BYTE *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = 0;
    *(_QWORD *)(v13 + 64) = 0;
    *(_BYTE *)(v13 + 72) = 1;
    if ((unint64_t)BYTE14(v45) << 48 != 0x5000000000000)
      goto LABEL_32;
    *(_QWORD *)v13 = off_1E35A0718;
    *(_QWORD *)(v13 + 80) = a1;
    *(_QWORD *)(v13 + 88) = (char *)a1 + 2224;
    v22 = *((_QWORD *)a1 + 278);
    if ((v22 & 1) != 0)
      v23 = (v22 >> 1) & 3;
    else
      v23 = *(unsigned __int8 *)(v22 + 4);
    if (v23 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D1534);
    }
    v24 = (_QWORD *)*((_QWORD *)a1 + 332);
    *((_QWORD *)a1 + 332) = v13;
    if (v24)
    {
      *v24 = off_1E3580B60;
      v25 = (_QWORD *)v24[8];
      if (v25)
      {
        v26 = v24[7];
        *v25 = v26;
        *(_QWORD *)(v26 + 8) = v25;
        v24[7] = 0;
        v24[8] = 0;
      }
      v27 = (_QWORD *)v24[5];
      if (v27)
      {
        v28 = v24[4];
        *v27 = v28;
        *(_QWORD *)(v28 + 8) = v27;
        v24[4] = 0;
        v24[5] = 0;
      }
      WTF::fastFree((unint64_t)v24, v14, v15, (uint64_t)v16, v17, v18, v19, v20);
      v13 = *((_QWORD *)a1 + 332);
    }
    JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v13, v10, v15, v16, v17, v18, v19, v20);
  }
  JSC::setupAdaptiveWatchpoint((JSC *)&v45, a1, a2, (const JSC::Identifier *)(*((_QWORD *)v10 + 5244) + 2296), a5, a6, a7, a8);
  v29 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v29 = off_1E3580B60;
  v37 = v46;
  *(_OWORD *)(v29 + 8) = v45;
  *(_QWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 40) = 0;
  *(_QWORD *)(v29 + 24) = v37;
  *(_BYTE *)(v29 + 48) = 0;
  *(_QWORD *)(v29 + 56) = 0;
  *(_QWORD *)(v29 + 64) = 0;
  *(_BYTE *)(v29 + 72) = 1;
  if ((unint64_t)BYTE14(v45) << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D1554);
  }
  *(_QWORD *)v29 = off_1E35A0718;
  *(_QWORD *)(v29 + 80) = a1;
  *(_QWORD *)(v29 + 88) = (char *)a1 + 2264;
  v38 = *((_QWORD *)a1 + 283);
  if ((v38 & 1) != 0)
    v39 = (v38 >> 1) & 3;
  else
    v39 = *(unsigned __int8 *)(v38 + 4);
  if (v39 != 1)
  {
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x1989D1514);
  }
  v40 = (_QWORD *)*((_QWORD *)a1 + 347);
  *((_QWORD *)a1 + 347) = v29;
  if (v40)
  {
    *v40 = off_1E3580B60;
    v41 = (_QWORD *)v40[8];
    if (v41)
    {
      v42 = v40[7];
      *v41 = v42;
      *(_QWORD *)(v42 + 8) = v41;
      v40[7] = 0;
      v40[8] = 0;
    }
    v43 = (_QWORD *)v40[5];
    if (v43)
    {
      v44 = v40[4];
      *v43 = v44;
      *(_QWORD *)(v44 + 8) = v43;
      v40[4] = 0;
      v40[5] = 0;
    }
    WTF::fastFree((unint64_t)v40, v30, v31, (uint64_t)v32, v33, v34, v35, v36);
    v29 = *((_QWORD *)a1 + 347);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v29, v10, v31, v32, v33, v34, v35, v36);
}

void JSC::JSGlobalObject::installSetPrototypeWatchpoint(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  const JSC::PropertyTable *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  const JSC::PropertyTable *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v11 = *((_QWORD *)a1 + 279);
  if ((v11 & 1) != 0)
    v12 = (v11 >> 1) & 3;
  else
    v12 = *(unsigned __int8 *)(v11 + 4);
  if (v12 != 2)
  {
    JSC::setupAdaptiveWatchpoint((JSC *)&v45, a1, a2, (const JSC::Identifier *)(*((_QWORD *)v10 + 5244) + 2712), a5, a6, a7, a8);
    v13 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v13 = off_1E3580B60;
    v21 = v46;
    *(_OWORD *)(v13 + 8) = v45;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 24) = v21;
    *(_BYTE *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = 0;
    *(_QWORD *)(v13 + 64) = 0;
    *(_BYTE *)(v13 + 72) = 1;
    if ((unint64_t)BYTE14(v45) << 48 != 0x5000000000000)
      goto LABEL_32;
    *(_QWORD *)v13 = off_1E35A0718;
    *(_QWORD *)(v13 + 80) = a1;
    *(_QWORD *)(v13 + 88) = (char *)a1 + 2232;
    v22 = *((_QWORD *)a1 + 279);
    if ((v22 & 1) != 0)
      v23 = (v22 >> 1) & 3;
    else
      v23 = *(unsigned __int8 *)(v22 + 4);
    if (v23 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D17CCLL);
    }
    v24 = (_QWORD *)*((_QWORD *)a1 + 334);
    *((_QWORD *)a1 + 334) = v13;
    if (v24)
    {
      *v24 = off_1E3580B60;
      v25 = (_QWORD *)v24[8];
      if (v25)
      {
        v26 = v24[7];
        *v25 = v26;
        *(_QWORD *)(v26 + 8) = v25;
        v24[7] = 0;
        v24[8] = 0;
      }
      v27 = (_QWORD *)v24[5];
      if (v27)
      {
        v28 = v24[4];
        *v27 = v28;
        *(_QWORD *)(v28 + 8) = v27;
        v24[4] = 0;
        v24[5] = 0;
      }
      WTF::fastFree((unint64_t)v24, v14, v15, (uint64_t)v16, v17, v18, v19, v20);
      v13 = *((_QWORD *)a1 + 334);
    }
    JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v13, v10, v15, v16, v17, v18, v19, v20);
  }
  JSC::setupAdaptiveWatchpoint((JSC *)&v45, a1, a2, (const JSC::Identifier *)(*((_QWORD *)v10 + 5244) + 848), a5, a6, a7, a8);
  v29 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v29 = off_1E3580B60;
  v37 = v46;
  *(_OWORD *)(v29 + 8) = v45;
  *(_QWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 40) = 0;
  *(_QWORD *)(v29 + 24) = v37;
  *(_BYTE *)(v29 + 48) = 0;
  *(_QWORD *)(v29 + 56) = 0;
  *(_QWORD *)(v29 + 64) = 0;
  *(_BYTE *)(v29 + 72) = 1;
  if ((unint64_t)BYTE14(v45) << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D17ECLL);
  }
  *(_QWORD *)v29 = off_1E35A0718;
  *(_QWORD *)(v29 + 80) = a1;
  *(_QWORD *)(v29 + 88) = (char *)a1 + 2272;
  v38 = *((_QWORD *)a1 + 284);
  if ((v38 & 1) != 0)
    v39 = (v38 >> 1) & 3;
  else
    v39 = *(unsigned __int8 *)(v38 + 4);
  if (v39 != 1)
  {
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x1989D17ACLL);
  }
  v40 = (_QWORD *)*((_QWORD *)a1 + 348);
  *((_QWORD *)a1 + 348) = v29;
  if (v40)
  {
    *v40 = off_1E3580B60;
    v41 = (_QWORD *)v40[8];
    if (v41)
    {
      v42 = v40[7];
      *v41 = v42;
      *(_QWORD *)(v42 + 8) = v41;
      v40[7] = 0;
      v40[8] = 0;
    }
    v43 = (_QWORD *)v40[5];
    if (v43)
    {
      v44 = v40[4];
      *v43 = v44;
      *(_QWORD *)(v44 + 8) = v43;
      v40[4] = 0;
      v40[5] = 0;
    }
    WTF::fastFree((unint64_t)v40, v30, v31, (uint64_t)v32, v33, v34, v35, v36);
    v29 = *((_QWORD *)a1 + 348);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v29, v10, v31, v32, v33, v34, v35, v36);
}

void JSC::JSGlobalObject::tryInstallPropertyDescriptorFastPathWatchpoint(JSC::JSGlobalObject *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  __int128 v25;
  char *v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  void *v32;
  char *v33;
  unsigned int v34;
  WTF *v35;
  uint64_t v36;
  char v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v71;
  unsigned int *v72;
  unsigned int v73;
  _BYTE *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  _BYTE *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  WTF *v86;
  uint64_t v87;
  _BYTE v88[192];
  _QWORD v89[3];
  uint64_t v90;

  v10 = *((_QWORD *)this + 7);
  v11 = (_BYTE *)(v10 + 64);
  v12 = *(_DWORD *)(v10 + 88);
  *(_DWORD *)(v10 + 88) = v12 + 1;
  if (!v12)
  {
    v13 = *(_QWORD *)(v10 + 16);
    if (v13)
    {
      if (*(_QWORD *)(v10 + 24) == v13)
      {
        *(_QWORD *)(v10 + 16) = 0;
        v72 = (unsigned int *)(v10 + 80);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 & 0xFFFFFFEF, v72));
        *(_BYTE *)(v10 + 86) = 1;
      }
    }
  }
  v89[0] = v10;
  v89[1] = this;
  v89[2] = &v90;
  v90 = v10;
  v14 = *((_QWORD *)this + 289);
  if ((v14 & 1) != 0)
    v15 = (v14 >> 1) & 3;
  else
    v15 = *(unsigned __int8 *)(v14 + 4);
  if (v15 == 2)
  {
    JSC::JSGlobalObject::tryInstallPropertyDescriptorFastPathWatchpoint(void)::$_0::operator()((uint64_t *)this, (JSC::VM *)v10, a2, a4, a5, a6, a7, a8, a9);
    goto LABEL_60;
  }
  v86 = (WTF *)v88;
  v87 = 8;
  v16 = v10 + 41952;
  JSC::JSGlobalObject::tryInstallPropertyDescriptorFastPathWatchpoint(void)::$_1::operator()((uint64_t)&v83, v89, *((_QWORD *)this + 82), *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1376), a6, a7, a8, a9);
  v81 = (_BYTE *)(v10 + 64);
  v82 = v10;
  if (!v85)
    goto LABEL_52;
  if (HIDWORD(v87) == (_DWORD)v87)
  {
    WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPropertyCondition&>((uint64_t)&v86, (unint64_t)&v83, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    v24 = (char *)v86 + 24 * HIDWORD(v87);
    v25 = v83;
    *((_QWORD *)v24 + 2) = v84;
    *(_OWORD *)v24 = v25;
    ++HIDWORD(v87);
  }
  JSC::JSGlobalObject::tryInstallPropertyDescriptorFastPathWatchpoint(void)::$_1::operator()((uint64_t)&v83, v89, *((_QWORD *)this + 82), *(_QWORD *)(*(_QWORD *)v16 + 2296), v19, v20, v21, v22);
  if (!v85)
    goto LABEL_52;
  if (HIDWORD(v87) == (_DWORD)v87)
  {
    WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPropertyCondition&>((uint64_t)&v86, (unint64_t)&v83, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    v26 = (char *)v86 + 24 * HIDWORD(v87);
    v27 = v83;
    *((_QWORD *)v26 + 2) = v84;
    *(_OWORD *)v26 = v27;
    ++HIDWORD(v87);
  }
  JSC::JSGlobalObject::tryInstallPropertyDescriptorFastPathWatchpoint(void)::$_1::operator()((uint64_t)&v83, v89, *((_QWORD *)this + 82), *(_QWORD *)(*(_QWORD *)v16 + 1216), v19, v20, v21, v22);
  if (!v85)
    goto LABEL_52;
  if (HIDWORD(v87) == (_DWORD)v87)
  {
    WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPropertyCondition&>((uint64_t)&v86, (unint64_t)&v83, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    v28 = (char *)v86 + 24 * HIDWORD(v87);
    v29 = v83;
    *((_QWORD *)v28 + 2) = v84;
    *(_OWORD *)v28 = v29;
    ++HIDWORD(v87);
  }
  JSC::JSGlobalObject::tryInstallPropertyDescriptorFastPathWatchpoint(void)::$_1::operator()((uint64_t)&v83, v89, *((_QWORD *)this + 82), *(_QWORD *)(*(_QWORD *)v16 + 1072), v19, v20, v21, v22);
  if (!v85)
    goto LABEL_52;
  if (HIDWORD(v87) == (_DWORD)v87)
  {
    WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPropertyCondition&>((uint64_t)&v86, (unint64_t)&v83, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    v30 = (char *)v86 + 24 * HIDWORD(v87);
    v31 = v83;
    *((_QWORD *)v30 + 2) = v84;
    *(_OWORD *)v30 = v31;
    ++HIDWORD(v87);
  }
  JSC::JSGlobalObject::tryInstallPropertyDescriptorFastPathWatchpoint(void)::$_1::operator()((uint64_t)&v83, v89, *((_QWORD *)this + 82), *(_QWORD *)(*(_QWORD *)v16 + 2656), v19, v20, v21, v22);
  if (!v85)
    goto LABEL_52;
  if (HIDWORD(v87) == (_DWORD)v87)
  {
    *(_QWORD *)&v23 = WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPropertyCondition&>((uint64_t)&v86, (unint64_t)&v83, v17, v18, v19, v20, v21, v22).n128_u64[0];
    v34 = HIDWORD(v87);
  }
  else
  {
    v33 = (char *)v86 + 24 * HIDWORD(v87);
    v23 = v83;
    *((_QWORD *)v33 + 2) = v84;
    *(_OWORD *)v33 = v23;
    v34 = ++HIDWORD(v87);
  }
  if (v34)
  {
    v35 = v86;
    v36 = 24 * v34;
    while (1)
    {
      JSC::ObjectPropertyCondition::isWatchable((uint64_t)v35, 1, v17, v18, v19, v20, v21, v22);
      if ((v37 & 1) == 0)
        break;
      v35 = (WTF *)((char *)v35 + 24);
      v36 -= 24;
      if (!v36)
        goto LABEL_25;
    }
LABEL_52:
    JSC::JSGlobalObject::tryInstallPropertyDescriptorFastPathWatchpoint(void)::$_0::operator()((uint64_t *)this, (JSC::VM *)v10, *(double *)&v23, v17, v18, v19, v20, v21, v22);
    goto LABEL_53;
  }
LABEL_25:
  v38 = (uint64_t *)((char *)this + 2376);
  v39 = *((_QWORD *)this + 297);
  if ((v39 & 1) != 0)
  {
    v40 = (v39 >> 1) & 3;
    if (v40 != 2)
    {
      __dmb(0xAu);
      if (v40)
        v41 = 5;
      else
        v41 = 3;
      *v38 = v41;
      __dmb(0xAu);
    }
  }
  else
  {
    if (*(_BYTE *)(v39 + 5))
    {
      __break(0xC471u);
      JUMPOUT(0x1989D1D60);
    }
    *(_QWORD *)&v83 = &off_1E3583C90;
    *((_QWORD *)&v83 + 1) = "Set up property descriptor fast path watchpoint set.";
    JSC::WatchpointSet::touch(v39, (JSC::VM *)v10, &v83, v18, v19, v20, v21, v22, *(double *)&v23);
  }
  v42 = v86;
  if (!HIDWORD(v87))
    goto LABEL_54;
  v43 = (WTF *)((char *)v86 + 24 * HIDWORD(v87));
  v44 = (uint64_t *)((char *)this + 3136);
  do
  {
    v45 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v45 = 0;
    *(_QWORD *)(v45 + 8) = 0;
    *(_BYTE *)(v45 + 16) = 7;
    *(_BYTE *)(v45 + 21) = BYTE4(this);
    *(_DWORD *)(v45 + 17) = (_DWORD)this;
    v53 = *((_QWORD *)v42 + 2);
    *(_OWORD *)(v45 + 24) = *(_OWORD *)v42;
    *(_QWORD *)(v45 + 40) = v53;
    *(_QWORD *)(v45 + 48) = v38;
    v54 = *((_QWORD *)v42 + 1);
    if ((v54 & 0xFF000000000000) == 0x5000000000000)
      goto LABEL_89;
    if ((v54 & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D1CB8);
    }
    v55 = *v38;
    if ((*v38 & 1) != 0)
      v56 = (v55 >> 1) & 3;
    else
      v56 = *(unsigned __int8 *)(v55 + 4);
    if (v56 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D1CD8);
    }
    *(_QWORD *)&v83 = v45;
    v57 = *((unsigned int *)this + 787);
    if ((_DWORD)v57 == *((_DWORD *)this + 786))
    {
      v67 = (uint64_t *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 3136, v57 + 1, (unint64_t)&v83);
      v57 = *((unsigned int *)this + 787);
      v68 = *((_QWORD *)this + 392);
      v69 = *v67;
      *v67 = 0;
      *(_QWORD *)(v68 + 8 * v57) = v69;
    }
    else
    {
      v58 = *v44;
      *(_QWORD *)&v83 = 0;
      *(_QWORD *)(v58 + 8 * v57) = v45;
    }
    v59 = v57 + 1;
    *((_DWORD *)this + 787) = v59;
    v60 = v83;
    *(_QWORD *)&v83 = 0;
    if (v60)
    {
      JSC::Watchpoint::operator delete(v60, v46, v47, v48, v49, v50, v51, v52);
      v59 = *((_DWORD *)this + 787);
    }
    if (!v59)
    {
LABEL_89:
      __break(0xC471u);
      JUMPOUT(0x1989D1C98);
    }
    v61 = *(_QWORD *)(*v44 + 8 * v59 - 8);
    JSC::ObjectPropertyCondition::isWatchable(v61 + 24, 0, v47, v48, v49, v50, v51, v52);
    if ((v62 & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D1CF8);
    }
    v63 = 16 * (**(_DWORD **)(v61 + 24) & 0xFFFFFFFE);
    v64 = *(_QWORD *)(v63 + 0x60);
    if ((v64 & 1) != 0)
    {
      v80 = (v64 >> 1) & 3;
      v64 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v64 = 1;
      *(_BYTE *)(v64 + 4) = v80;
      *(_BYTE *)(v64 + 5) = 0;
      *(_QWORD *)(v64 + 8) = v64 + 8;
      *(_QWORD *)(v64 + 16) = v64 + 8;
      __dmb(0xAu);
      *(_QWORD *)(v63 + 96) = v64;
    }
    v66 = *(_QWORD *)(v64 + 8);
    v65 = (_QWORD *)(v64 + 8);
    *(_QWORD *)v61 = v66;
    *(_QWORD *)(v61 + 8) = v65;
    *v65 = v61;
    *(_QWORD *)(v66 + 8) = v61;
    *((_WORD *)v65 - 2) = 257;
    v42 = (WTF *)((char *)v42 + 24);
  }
  while (v42 != v43);
LABEL_53:
  v42 = v86;
LABEL_54:
  v11 = v81;
  if (v88 != (_BYTE *)v42 && v42 != 0)
  {
    v86 = 0;
    LODWORD(v87) = 0;
    WTF::fastFree((unint64_t)v42, v32, v17, v18, v19, v20, v21, v22);
  }
  v10 = v82;
LABEL_60:
  v71 = *(_DWORD *)(v10 + 88) - 1;
  *(_DWORD *)(v10 + 88) = v71;
  if (!v71 && v11[93377])
  {
    if (*(_BYTE *)(v10 + 86))
    {
      v74 = v11 - 64;
      v75 = *((_QWORD *)v11 - 5);
      *((_QWORD *)v74 + 2) = v75;
      *((_QWORD *)v74 + 4) = v75;
      if (v75)
      {
        v76 = (unsigned int *)(v11 + 16);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 | 0x10, v76));
      }
      if (v11[93379])
        v11[93378] = 1;
      *(_BYTE *)(v10 + 86) = 0;
    }
    else
    {
      v78 = (unsigned int *)(v10 + 80);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 | 2, v78));
    }
  }
}

uint64_t *JSC::JSGlobalObject::tryInstallPropertyDescriptorFastPathWatchpoint(void)::$_0::operator()(uint64_t *result, JSC::VM *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t **v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = &off_1E3583C90;
  v15[1] = "Was not able to set up property descriptor related names watchpoint set.";
  v9 = result[297];
  if ((v9 & 1) != 0)
  {
    result[297] = 5;
  }
  else
  {
    if (*(_BYTE *)(v9 + 4) == 1)
    {
      __dmb(0xAu);
      v11 = (uint64_t **)(v9 + 8);
      result = *(uint64_t **)(v9 + 8);
      *(_BYTE *)(v9 + 4) = 2;
      v12 = *((_DWORD *)a2 + 229);
      *((_DWORD *)a2 + 229) = v12 + 1;
      if (result != (uint64_t *)(v9 + 8))
      {
        do
        {
          v14 = *result;
          v13 = (uint64_t *)result[1];
          *v13 = *result;
          *(_QWORD *)(v14 + 8) = v13;
          *result = 0;
          result[1] = 0;
          JSC::Watchpoint::fire((unint64_t)result, a2, v15, a5, a6, a7, a8, a9, a3);
          result = *v11;
        }
        while (*v11 != (uint64_t *)v11);
        v12 = *((_DWORD *)a2 + 229) - 1;
      }
      *((_DWORD *)a2 + 229) = v12;
      __dmb(0xAu);
    }
    *(_BYTE *)(v9 + 4) = 2;
  }
  return result;
}

void JSC::JSGlobalObject::tryInstallPropertyDescriptorFastPathWatchpoint(void)::$_1::operator()(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned int v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;

  v12 = *a2;
  v13 = a2[1];
  v60 = 0xFFFFFFFF00000000;
  v62 = 0;
  v63 = 0;
  v61 = a3;
  v64 = 196608;
  v65 = 0;
  v68 = 0;
  v69 = 0;
  v66 = v12;
  ++*(_DWORD *)(v12 + 4);
  v67 = 1;
  v14 = *(JSC::VM **)(v13 + 56);
  if (!(a4 >> 4))
    goto LABEL_35;
  v15 = 16 * (*(_DWORD *)a3 & 0xFFFFFFFE);
  if (((a4 >> 4) & ~*(_DWORD *)(v15 + 0x20)) != 0)
    goto LABEL_35;
  v16 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x58);
  if (!v16)
  {
    v17 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x40);
    if (!v17 || *(_BYTE *)(v17 + 5) != 1 && *(_DWORD *)(v17 + 80) < 2u)
      goto LABEL_35;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE)), *(JSC::VM **)(v13 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v16)
      goto LABEL_35;
  }
  if (!*(_DWORD *)(v16 + 24))
    goto LABEL_35;
  v18 = *(_QWORD *)(v16 + 16);
  v19 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v20 = *(unsigned int *)(v16 + 8);
  v21 = *(_DWORD *)(a4 + 16);
  if ((v18 & 1) != 0)
  {
    if ((v21 & 0x20) != 0)
      v21 = *(_DWORD *)(a4 + 32);
    v22 = *(_DWORD *)(v16 + 12);
    v23 = (v21 >> 8) & *(_QWORD *)&v22;
    v24 = *(unsigned __int8 *)(v19 + v23);
    if (!*(_BYTE *)(v19 + v23))
      goto LABEL_35;
    v25 = v19 + v20;
    v26 = 1;
    while (1)
    {
      v27 = *(_QWORD *)(v25 + 8 * (v24 - 1));
      if (a4 == (v27 & 0xFFFFFFFFFFFFLL))
        break;
      v23 = ((_DWORD)v23 + v26) & v22;
      v24 = *(unsigned __int8 *)(v19 + v23);
      ++v26;
      if (!*(_BYTE *)(v19 + v23))
        goto LABEL_35;
    }
    a6 = (v27 >> 16) & 0xFF00000000 | HIBYTE(v27);
  }
  else
  {
    if ((v21 & 0x20) != 0)
      v21 = *(_DWORD *)(a4 + 32);
    v28 = *(_DWORD *)(v16 + 12);
    v29 = v28 & (v21 >> 8);
    v30 = *(_DWORD *)(v19 + 4 * v29);
    if (!v30)
      goto LABEL_35;
    v31 = v19 + 4 * v20;
    v32 = 1;
    while (1)
    {
      v33 = (v30 - 1);
      if (*(_QWORD *)(v31 + 16 * v33) == a4)
        break;
      v29 = (v29 + v32) & v28;
      v30 = *(_DWORD *)(v19 + 4 * v29);
      ++v32;
      if (!v30)
        goto LABEL_35;
    }
    a6 = *(unsigned int *)(v31 + 16 * v33 + 8) | ((unint64_t)*(unsigned __int8 *)(v31 + 16 * v33 + 12) << 32);
  }
  if ((_DWORD)a6 != -1)
  {
    if ((int)a6 <= 63)
    {
      v34 = a3 + 16;
      v35 = a6 << 32;
    }
    else
    {
      v34 = *(_QWORD *)(a3 + 8) - 8;
      v35 = 0x3F00000000 - (a6 << 32);
    }
    v36 = *(_QWORD *)(v34 + (v35 >> 29));
    if ((v36 & 0xFFFE000000000002) == 0)
    {
      v37 = *(unsigned __int8 *)(v36 + 5);
      if (v37 == 5)
      {
        JSC::JSObject::fillGetterPropertySlot((unsigned int *)a3, (uint64_t)v14, (uint64_t)&v58, v36, SHIDWORD(a6), a6);
        goto LABEL_85;
      }
      if (v37 == 6)
      {
        v49 = *(_DWORD *)(v15 + 16) & 3;
        v50 = *(_QWORD *)(v36 + 16);
        if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
        {
          v52 = *(_QWORD *)(v36 + 24);
          v51 = *(_QWORD *)(v36 + 32);
          v58 = *(_QWORD *)(v36 + 8);
          v59 = v50;
          LODWORD(v60) = HIDWORD(a6);
          v62 = a3;
          BYTE1(v64) = 3;
          if (v49 != 2)
            LOBYTE(v64) = 1;
          HIBYTE(v64) = 1;
          v68 = v52;
          v69 = v51;
        }
        else
        {
          v58 = *(_QWORD *)(v36 + 8);
          v59 = v50;
          LODWORD(v60) = HIDWORD(a6);
          v62 = a3;
          BYTE1(v64) = 3;
          if (v49 != 2)
            LOBYTE(v64) = 1;
        }
        goto LABEL_85;
      }
    }
    v58 = v36;
    v62 = a3;
    v60 = __PAIR64__(a6, HIDWORD(a6));
    LOWORD(v64) = 257;
LABEL_85:
    v56 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_86;
  }
LABEL_35:
  if ((*(_BYTE *)(a3 + 6) & 0x20) != 0
    && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a3, v14, a4, (uint64_t)&v58) & 1) != 0)
  {
    goto LABEL_85;
  }
  if (!a4)
    goto LABEL_79;
  v38 = *(_DWORD *)(a4 + 16);
  if ((v38 & 0x20) != 0)
    goto LABEL_79;
  v39 = *(_BYTE **)(a4 + 8);
  v40 = *(unsigned int *)(a4 + 4);
  if ((v38 & 4) != 0)
  {
    if ((_DWORD)v40)
    {
      v41 = *v39 - 48;
      if (v41 <= 9 && (v40 < 2 || *v39 != 48))
      {
        v53 = v39 + 1;
        v54 = v40 - 1;
        while (v54)
        {
          if (v41 > 0x19999999)
            goto LABEL_41;
          v55 = *v53 - 48;
          if (v55 > 9)
            goto LABEL_41;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v48 = __CFADD__(v55, 10 * v41);
          v41 = v55 + 10 * v41;
          ++v53;
          --v54;
          if (v48)
            goto LABEL_78;
        }
        goto LABEL_72;
      }
    }
LABEL_41:
    v42 = 0;
    v43 = 0;
    v44 = 0;
    goto LABEL_78;
  }
  if (!(_DWORD)v40)
    goto LABEL_41;
  v41 = *(unsigned __int16 *)v39 - 48;
  if (v41 > 9 || *(_WORD *)v39 == 48 && v40 > 1)
    goto LABEL_41;
  v45 = (unsigned __int16 *)(v39 + 2);
  v46 = v40 - 1;
  while (v46)
  {
    if (v41 > 0x19999999)
      goto LABEL_41;
    v47 = *v45 - 48;
    if (v47 > 9)
      goto LABEL_41;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v48 = __CFADD__(v47, 10 * v41);
    v41 = v47 + 10 * v41;
    ++v45;
    --v46;
    if (v48)
      goto LABEL_78;
  }
LABEL_72:
  v42 = 0x100000000;
  if (v41 == -1)
  {
    v42 = 0;
    v43 = 0;
  }
  else
  {
    v43 = v41;
  }
  if (v41 == -1)
    v44 = 0;
  else
    v44 = v41 & 0xFFFFFF00;
LABEL_78:
  if ((v42 & 0x100000000) != 0
    && JSC::JSObject::getOwnPropertySlotByIndex(a3, v13, (const WTF::StringImpl *)(v44 | v43), (uint64_t)&v58, a5, a6, a7, a8))
  {
    goto LABEL_85;
  }
LABEL_79:
  if (BYTE1(v64))
    goto LABEL_90;
  if (v13 && *(_DWORD *)(*a2 + 760) >= *(unsigned __int8 *)(v13 + 7))
    JSC::Heap::writeBarrierSlowPath(*a2 + 192, v13);
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4 | 0x2000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  v56 = 1;
LABEL_86:
  *(_BYTE *)(a1 + 24) = v56;
  if (!v67)
    return;
  v57 = *(_DWORD *)(v66 + 4);
  if (!v57)
  {
LABEL_90:
    __break(0xC471u);
    JUMPOUT(0x1989D2404);
  }
  *(_DWORD *)(v66 + 4) = v57 - 1;
}

uint64_t JSC::slowValidateCell(uint64_t this, JSC::JSGlobalObject *a2)
{
  if (*(_BYTE *)(this + 5) != 51)
  {
    this = 3123;
    __break(0xC471u);
  }
  return this;
}

void JSC::JSGlobalObject::setInspectable(Inspector::RemoteInspectionTarget **this, int a2)
{
  Inspector::RemoteInspectionTarget::setInspectable(this[254], a2);
}

BOOL JSC::JSGlobalObject::inspectable(JSC::JSGlobalObject *this)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(*((_QWORD *)this + 254) + 20);
  return (v1 & 7) == 0 && v1 < 3;
}

void JSC::CodeBlockSet::iterate<JSC::JSGlobalObject::bumpGlobalLexicalBindingEpoch(JSC::VM &)::$_0>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  JSC::CodeBlock **v12;
  uint64_t v13;
  JSC::CodeBlock **v14;
  JSC::CodeBlock **v15;
  uint64_t v16;
  JSC::CodeBlock **v17;
  JSC::CodeBlock **v18;
  int v19;

  v10 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 16);
LABEL_5:
  v12 = *(JSC::CodeBlock ***)a1;
  if (*(_QWORD *)a1)
  {
    v13 = *((unsigned int *)v12 - 1);
    v14 = &v12[v13];
    if (*((_DWORD *)v12 - 3))
    {
      v15 = v12;
      if ((_DWORD)v13)
      {
        v16 = 8 * v13;
        v15 = v12;
        while ((unint64_t)*v15 + 1 <= 1)
        {
          ++v15;
          v16 -= 8;
          if (!v16)
          {
            v15 = v14;
            break;
          }
        }
      }
      if (v12)
        goto LABEL_13;
      goto LABEL_30;
    }
    v15 = &v12[v13];
  }
  else
  {
    v15 = 0;
    v13 = 0;
  }
  v14 = &v12[v13];
  if (v12)
  {
LABEL_13:
    v17 = &v12[*((unsigned int *)v12 - 1)];
    goto LABEL_14;
  }
LABEL_30:
  v17 = 0;
LABEL_14:
  while (v15 != v17)
  {
    if (*((_QWORD *)*v15 + 1) == *a2)
      JSC::CodeBlock::notifyLexicalBindingUpdate(*v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v18 = v15 + 1;
    v15 = v14;
    if (v18 != v14)
    {
      v15 = v18;
      while ((unint64_t)*v15 + 1 <= 1)
      {
        if (++v15 == v14)
        {
          v15 = v14;
          break;
        }
      }
    }
  }
  v19 = __ldxr(v10);
  if (v19 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, v10))
LABEL_27:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSGlobalObject::queueMicrotask(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 3280) + 24))();
  result = *(_QWORD *)(a1 + 2016);
  if (result)
    return JSC::Debugger::didQueueMicrotask(result, a1, *(_QWORD *)(v3 + 16));
  return result;
}

uint64_t JSC::JSGlobalObject::queueMicrotask(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_QWORD *)(a1[410] + 24))
  {
    JSC::createJSMicrotask(a1[7], a2, a3, a4, a5, a6, a7, a8, (uint64_t *)&v15);
    v9 = v15;
    (*(void (**)(uint64_t *, __int128 *))(a1[410] + 24))(a1, &v15);
    v10 = a1[252];
    if (v10)
      JSC::Debugger::didQueueMicrotask(v10, (uint64_t)a1, *(_QWORD *)(v9 + 16));
    result = v15;
    *(_QWORD *)&v15 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  else if (WTF::ObjectIdentifierGeneric<JSC::MicrotaskIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    result = 142;
    __break(0xC471u);
  }
  else
  {
    do
    {
      v12 = __ldaxr(&WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal(void)::current);
      v13 = v12 + 1;
    }
    while (__stlxr(v12 + 1, &WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal(void)::current));
    v14 = a1[7];
    *(_QWORD *)&v15 = v12 + 1;
    *((_QWORD *)&v15 + 1) = a2;
    v16 = a3;
    v17 = a4;
    v18 = a5;
    v19 = a6;
    JSC::VM::queueMicrotask(v14, &v15);
    result = a1[252];
    if (result)
      return JSC::Debugger::didQueueMicrotask(result, (uint64_t)a1, v13);
  }
  return result;
}

void JSC::JSGlobalObject::setConsoleClient(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v9 = *a2;
  *a2 = 0;
  v10 = *(unsigned int **)(a1 + 3208);
  *(_QWORD *)(a1 + 3208) = v9;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::JSGlobalObject::isAcquiringImportMaps(JSC::JSGlobalObject *this)
{
  return *(_BYTE *)(*((_QWORD *)this + 409) + 40) & 1;
}

uint64_t JSC::JSGlobalObject::setAcquiringImportMaps(uint64_t this)
{
  *(_BYTE *)(*(_QWORD *)(this + 3272) + 40) &= ~1u;
  return this;
}

uint64_t JSC::JSGlobalObject::setPendingImportMaps(uint64_t this)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;
  _QWORD v4[3];

  v1 = *(_QWORD *)(this + 1952);
  if ((v1 & 1) != 0)
  {
    v2 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v3 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v3 = (_QWORD *)(this - 16);
    v4[0] = *v3;
    v4[1] = this;
    v4[2] = this + 1952;
    return v2(v4);
  }
  return this;
}

void JSC::JSGlobalObject::clearPendingImportMaps(JSC::JSGlobalObject *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *((_QWORD *)this + 244);
  if ((v9 & 1) == 0)
    JSC::JSPromise::resolve(v9, (uint64_t *)this, 0xAuLL, a4, a5, a6, a7, a8);
}

WTF::StringImpl *JSC::JSGlobalObject::ensureReferencedPropertyWatchpointSet(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  WTF::StringImpl **v19;
  int v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t **v35;
  uint64_t *i;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;

  v10 = (unsigned __int8 *)(a1 + 3168);
  if (__ldaxr((unsigned __int8 *)(a1 + 3168)))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 3168);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  v12 = (uint64_t *)(a1 + 3160);
  if (a2)
    *(_DWORD *)a2 += 2;
  v13 = *v12;
  if (*v12
    || (WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Ref<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Ref<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Ref<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Ref<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v12, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *v12) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = *((_DWORD *)a2 + 4);
  if ((v15 & 0x20) != 0)
    v15 = *((_DWORD *)a2 + 8);
  v16 = v14 & (v15 >> 8);
  v17 = (WTF::StringImpl **)(v13 + 16 * v16);
  v18 = *v17;
  if (!*v17)
  {
LABEL_19:
    *v17 = a2;
    v22 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v22 = 1;
    *(_WORD *)(v22 + 4) = 1;
    *(_QWORD *)(v22 + 8) = v22 + 8;
    *(_QWORD *)(v22 + 16) = v22 + 8;
    v23 = (unint64_t)v17[1];
    v17[1] = (WTF::StringImpl *)v22;
    if (v23)
    {
      do
      {
        v33 = __ldaxr((unsigned int *)v23);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, (unsigned int *)v23));
      if (!v34)
      {
        atomic_store(1u, (unsigned int *)v23);
        v35 = (uint64_t **)(v23 + 8);
        for (i = *(uint64_t **)(v23 + 8); i != (uint64_t *)v35; i = *v35)
        {
          v47 = *i;
          v46 = (uint64_t *)i[1];
          *v46 = *i;
          *(_QWORD *)(v47 + 8) = v46;
          *i = 0;
          i[1] = 0;
        }
        WTF::fastFree(v23, v21, a3, a4, a5, a6, a7, a8);
      }
    }
    v24 = *v12;
    if (*v12)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v26 = *v12;
    if (*v12)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_29;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_29:
        v31 = v17[1];
        goto LABEL_30;
      }
      if (!(_DWORD)v29)
      {
        v30 = 8;
LABEL_28:
        v17 = (WTF::StringImpl **)WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Ref<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Ref<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Ref<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Ref<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v12, v30, (uint64_t)v17, a4, a5, a6, a7, a8);
        goto LABEL_29;
      }
    }
    v30 = ((_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29)));
    goto LABEL_28;
  }
  v19 = 0;
  v20 = 1;
  while (v18 != a2)
  {
    if (v18 == (WTF::StringImpl *)-1)
      v19 = v17;
    v16 = (v16 + v20) & v14;
    v17 = (WTF::StringImpl **)(v13 + 16 * v16);
    v18 = *v17;
    ++v20;
    if (!*v17)
    {
      if (v19)
      {
        *v19 = 0;
        v19[1] = 0;
        --*(_DWORD *)(*v12 - 16);
        v17 = v19;
      }
      goto LABEL_19;
    }
  }
  v31 = v17[1];
  if (a2)
  {
    if (*(_DWORD *)a2 == 2)
    {
      WTF::StringImpl::~StringImpl(a2, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)a2 -= 2;
    }
  }
LABEL_30:
  v32 = __ldxr(v10);
  if (v32 == 1)
  {
    if (!__stlxr(0, v10))
      return v31;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v31;
}

unint64_t JSC::JSGlobalObject::create(JSC::JSGlobalObject *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t SlowCase;
  JSC::JSGlobalObject *v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = (_QWORD *)*((_QWORD *)this + 5062);
  if (!v10)
    v10 = (_QWORD *)JSC::GCClient::Heap::globalObjectSpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = v10[3];
  if (SlowCase >= v10[4])
  {
    SlowCase = v10[5];
    if ((SlowCase & 1) != 0)
    {
      v15 = (uint64_t)v10;
      JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v15, (uint64_t)this + 192, 3296, 0, 0, v16, v17, v18);
      goto LABEL_5;
    }
    v14 = *(_QWORD *)(SlowCase + 8) ^ v10[6];
    v10[4] = SlowCase + HIDWORD(v14);
    v10[5] = SlowCase + (int)v14;
  }
  v10[3] = SlowCase + 3296;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v12 = (JSC::JSGlobalObject *)JSC::JSGlobalObject::JSGlobalObject(SlowCase, (uint64_t)this, (unint64_t)a2, 0);
  JSC::JSGlobalObject::finishCreation(v12, this);
  return SlowCase;
}

uint64_t *JSC::JSGlobalObject::finishCreation(JSC::JSGlobalObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  JSC::JSGlobalObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int *v32;
  unsigned int v33;
  JSC::VM *v34;
  int v35;

  v34 = a2;
  v10 = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v10 + 1;
  if (!v10)
  {
    v11 = *((_QWORD *)a2 + 2);
    if (v11)
    {
      if (*((_QWORD *)a2 + 3) == v11)
      {
        *((_QWORD *)a2 + 2) = 0;
        v32 = (unsigned int *)((char *)a2 + 80);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 & 0xFFFFFFEF, v32));
        *((_BYTE *)a2 + 86) = 1;
      }
    }
  }
  JSC::JSSegmentedVariableObject::finishCreation(this, a2, a3, a4, a5, a6, a7, a8);
  v12 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  *(_QWORD *)(v12 + 40) = this;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v12 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v12);
  v13 = (*(double (**)(JSC::JSGlobalObject *))(*((_QWORD *)this + 410) + 16))(this);
  *((_DWORD *)this + 800) = v14;
  JSC::JSGlobalObject::init((uint64_t)this, a2, v13, v15, v16, v17, v18, v19, v20);
  v23 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
  if (!v23)
    v23 = *((_QWORD *)this + 2);
  v35 = 755107872;
  v24 = JSC::Structure::create(a2, this, v23, (uint64_t)&v35, (unint64_t)&JSC::JSGlobalProxy::s_info, 0, 0, v21, v22);
  v30 = JSC::JSGlobalProxy::create(a2, v24, this, v25, v26, v27, v28, v29);
  *((_QWORD *)this + 8) = v30;
  if (v30 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  return JSC::DeferTermination<(JSC::VMTraps::DeferAction)1>::~DeferTermination((uint64_t *)&v34);
}

unint64_t JSC::JSGlobalObject::createWithCustomMethodTable(uint64_t a1, JSC::VM *a2, uint64_t (**a3)(JSC::JSGlobalObject *__hidden this, const JSC::JSGlobalObject *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t SlowCase;
  JSC::JSGlobalObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v11 = *(_QWORD **)(a1 + 40496);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::globalObjectSpaceSlow((JSC::Heap **)(a1 + 37552));
  SlowCase = v11[3];
  if (SlowCase >= v11[4])
  {
    SlowCase = v11[5];
    if ((SlowCase & 1) != 0)
    {
      v22 = (uint64_t)v11;
      JSC::sanitizeStackForVM((JSC *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v22, a1 + 192, 3296, 0, 0, v23, v24, v25);
      goto LABEL_5;
    }
    v21 = *(_QWORD *)(SlowCase + 8) ^ v11[6];
    v11[4] = SlowCase + HIDWORD(v21);
    v11[5] = SlowCase + (int)v21;
  }
  v11[3] = SlowCase + 3296;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v13 = (JSC::JSGlobalObject *)JSC::JSGlobalObject::JSGlobalObject(SlowCase, a1, (unint64_t)a2, a3);
  JSC::JSGlobalObject::finishCreation(v13, (JSC::VM *)a1, v14, v15, v16, v17, v18, v19);
  return SlowCase;
}

void JSC::JSGlobalObject::finishCreation(JSC::JSGlobalObject *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;

  v11 = (char *)a2 + 64;
  v12 = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v12 + 1;
  if (!v12)
  {
    v13 = *((_QWORD *)a2 + 2);
    if (v13)
    {
      if (*((_QWORD *)a2 + 3) == v13)
      {
        *((_QWORD *)a2 + 2) = 0;
        v24 = (unsigned int *)((char *)a2 + 80);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 & 0xFFFFFFEF, v24));
        *((_BYTE *)a2 + 86) = 1;
      }
    }
  }
  JSC::JSSegmentedVariableObject::finishCreation(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v14 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  *(_QWORD *)(v14 + 40) = this;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v14 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v14);
  v15 = (*(double (**)(JSC::JSGlobalObject *))(*((_QWORD *)this + 410) + 16))(this);
  *((_DWORD *)this + 800) = v16;
  JSC::JSGlobalObject::init((uint64_t)this, a2, v15, v17, v18, v19, v20, v21, v22);
  *((_QWORD *)this + 8) = a3;
  if (a3 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  v23 = *((_DWORD *)a2 + 22) - 1;
  *((_DWORD *)a2 + 22) = v23;
  if (!v23 && v11[93377])
  {
    v26 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 2) = v26;
    *((_QWORD *)a2 + 4) = v26;
    if (v26)
    {
      v27 = (unsigned int *)(v11 + 16);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 0x10, v27));
    }
    if (v11[93379])
      v11[93378] = 1;
    *((_BYTE *)a2 + 86) = 0;
  }
}

_QWORD *JSC::JSGlobalObject::addWeakTicket(JSC::JSGlobalObject *this, WTF::ThreadSafeWeakPtrControlBlock **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v37;
  JSC::JSGlobalObject *v38;

  v38 = this;
  v10 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v11 = *v10;
    if ((v11 & 0x40) != 0)
      break;
    v12 = __ldaxr(v10);
    if (v12 == v11)
    {
      if (!__stxr(v11 | 0x40, v10))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_8:
  v13 = *((_QWORD *)this + 394);
  if (!v13)
  {
    v14 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = 0;
    v37 = v14;
    __dmb(0xAu);
    std::unique_ptr<WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>>::operator=[abi:sn180100]((uint64_t **)this + 394, &v37, v15, v16, v17, v18, v19, v20);
    std::unique_ptr<WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>>::~unique_ptr[abi:sn180100](&v37, v21, v22, v23, v24, v25, v26, v27);
    v13 = *((_QWORD *)this + 394);
  }
  WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>::add<JSC::DeferredWorkTimer::TicketData,(void *)0>(v13, a2, a3, a4, a5, a6, a7, a8);
  v35 = *((_QWORD *)this + 7);
  if (*(_DWORD *)(v35 + 760) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath(v35 + 192, (unint64_t)this);
  return WTF::Locker<JSC::JSCellLock,void>::~Locker(&v38, v28, v29, v30, v31, v32, v33, v34);
}

uint64_t **std::unique_ptr<WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>>::operator=[abi:sn180100](uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t *v10;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    if (*v10)
      WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::deallocateTable(*v10, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>::add<JSC::DeferredWorkTimer::TicketData,(void *)0>(uint64_t a1, WTF::ThreadSafeWeakPtrControlBlock **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  int v30;
  _BYTE v31[24];
  WTF::ThreadSafeWeakPtrControlBlock **v32;
  WTF::ThreadSafeWeakPtrControlBlock *v33;

  if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(*a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    __break(0xC471u);
    return;
  }
  v17 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v17))
    goto LABEL_4;
LABEL_5:
  v33 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(*a2, v10, v11, v12, v13, v14, v15, v16);
  if (v33)
  {
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v27;
    if (v27 > v26)
    {
      _ZN3WTF9HashTableIPKN3JSC17DeferredWorkTimer10TicketDataENS_12KeyValuePairIS5_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS8_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISD_EENS_11DefaultHashIS5_EENS_7HashMapIS5_SC_SH_NS_10HashTraitsIS5_EENSJ_ISC_EENS_15HashTableTraitsEE18KeyValuePairTraitsESK_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS3_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKST_((uint64_t *)a1, v19, v20, v21, v22, v23, v24, v25);
      *(_DWORD *)(a1 + 8) = 0;
      v28 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        LODWORD(v28) = *(_DWORD *)(v28 - 12);
        if (v28 > 0x7FFFFFFE)
          LODWORD(v28) = 0x7FFFFFFF;
      }
      *(_DWORD *)(a1 + 12) = 2 * v28;
    }
    v32 = a2;
    WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::add<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>((uint64_t)v31, (uint64_t *)a1, (uint64_t *)&v32, (uint64_t *)&v33, v22, v23, v24, v25);
    if (v33)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v33, v29, v20, v21, v22, v23, v24, v25);
  }
  v30 = __ldxr(v17);
  if (v30 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v17))
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a1 + 16), 0, v20, v21, v22, v23, v24, v25);
}

uint64_t JSC::initializeEvalFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  v2 = *(_QWORD *)(a2 + 1960);
  if (*(_DWORD *)v2 <= 0xA2u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D3184);
  }
  result = *(_QWORD *)(v2 + 1304);
  if ((result & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(result & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a2 & 8) != 0)
      v5 = (_QWORD *)(a2 - 16);
    v6[0] = *v5;
    v6[1] = a2;
    v6[2] = v2 + 1304;
    return v4(v6);
  }
  return result;
}

unint64_t JSC::createProxyProperty(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v11;
  unint64_t v12;
  unint64_t SlowCase;
  JSC::Structure *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v11 = (unint64_t *)((char *)this + 40136);
  v12 = *((_QWORD *)a2 + 83);
  v26 = 67099;
  if ((v12 & 0xFFFE000000000002) == 0 && v12 && *(unsigned __int8 *)(v12 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v12, this, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = *v11;
  if (*v11 < v11[1])
    goto LABEL_9;
  SlowCase = v11[2];
  if ((SlowCase & 1) == 0)
  {
    v22 = *(_QWORD *)(SlowCase + 8) ^ v11[3];
    v11[1] = SlowCase + HIDWORD(v22);
    v11[2] = SlowCase + (int)v22;
LABEL_9:
    *v11 = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 40112, (uint64_t)this + 192, 128, 0, 0, v23, v24, v25);
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, (uint64_t)this, (uint64_t)a2, v12, (uint64_t)&v26, (unint64_t)&JSC::ProxyConstructor::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return JSC::ProxyConstructor::create(this, (JSC::JSGlobalObject **)SlowCase, v15, v16, v17, v18, v19, v20);
}

unint64_t JSC::createReflectProperty(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v14;
  unint64_t SlowCase;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  JSC::ReflectObject *v24;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v11 = (unint64_t *)((char *)this + 40136);
  v12 = *((_QWORD *)a2 + 82);
  v34 = 8215;
  if ((v12 & 0xFFFE000000000002) == 0 && v12 && *(unsigned __int8 *)(v12 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v12, this, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  v14 = (unint64_t *)((char *)this + 38904);
  SlowCase = *v11;
  if (*v11 < v11[1])
    goto LABEL_9;
  SlowCase = v11[2];
  if ((SlowCase & 1) == 0)
  {
    v26 = *(_QWORD *)(SlowCase + 8) ^ v11[3];
    v11[1] = SlowCase + HIDWORD(v26);
    v11[2] = SlowCase + (int)v26;
LABEL_9:
    *v11 = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 40112, (uint64_t)this + 192, 128, 0, 0, v28, v29, v30);
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, (uint64_t)this, (uint64_t)a2, v12, (uint64_t)&v34, (unint64_t)&JSC::ReflectObject::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v23 = *v14;
  if (*((_QWORD *)this + 4863) >= *((_QWORD *)this + 4864))
  {
    v23 = *((_QWORD *)this + 4865);
    if ((v23 & 1) != 0)
    {
      JSC::sanitizeStackForVM(this, v16, v17, v18, v19, v20, v21, v22);
      v23 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v31, v32, v33);
      goto LABEL_14;
    }
    v27 = *(_QWORD *)(v23 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v23 + HIDWORD(v27);
    *((_QWORD *)this + 4865) = v23 + (int)v27;
  }
  *v14 = v23 + 16;
LABEL_14:
  *(_DWORD *)v23 = 0;
  v24 = (JSC::ReflectObject *)JSC::AggregateErrorPrototype::AggregateErrorPrototype(v23, (uint64_t)this, SlowCase);
  JSC::ReflectObject::finishCreation(v24, this, a2);
  return v23;
}

unint64_t JSC::createJSONProperty(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v14;
  unint64_t SlowCase;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  v11 = (unint64_t *)((char *)this + 40136);
  v12 = *((_QWORD *)a2 + 82);
  v34 = 8215;
  if ((v12 & 0xFFFE000000000002) == 0 && v12 && *(unsigned __int8 *)(v12 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v12, this, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  v14 = (unint64_t *)((char *)this + 38904);
  SlowCase = *v11;
  if (*v11 < v11[1])
    goto LABEL_9;
  SlowCase = v11[2];
  if ((SlowCase & 1) == 0)
  {
    v26 = *(_QWORD *)(SlowCase + 8) ^ v11[3];
    v11[1] = SlowCase + HIDWORD(v26);
    v11[2] = SlowCase + (int)v26;
LABEL_9:
    *v11 = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 40112, (uint64_t)this + 192, 128, 0, 0, v28, v29, v30);
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, (uint64_t)this, (uint64_t)a2, v12, (uint64_t)&v34, (unint64_t)&JSC::JSONObject::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v23 = *v14;
  if (*((_QWORD *)this + 4863) >= *((_QWORD *)this + 4864))
  {
    v23 = *((_QWORD *)this + 4865);
    if ((v23 & 1) != 0)
    {
      JSC::sanitizeStackForVM(this, v16, v17, v18, v19, v20, v21, v22);
      v23 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v31, v32, v33);
      goto LABEL_14;
    }
    v27 = *(_QWORD *)(v23 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v23 + HIDWORD(v27);
    *((_QWORD *)this + 4865) = v23 + (int)v27;
  }
  *v14 = v23 + 16;
LABEL_14:
  *(_DWORD *)v23 = 0;
  v24 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v23 = SlowCase >> 4;
  *(_DWORD *)(v23 + 4) = v24;
  *(_QWORD *)(v23 + 8) = 0;
  JSC::JSONObject::finishCreation((JSC::JSONObject *)v23, this);
  return v23;
}

unint64_t JSC::createMathProperty(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v14;
  unint64_t SlowCase;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  int v25;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v11 = (unint64_t *)((char *)this + 40136);
  v12 = *((_QWORD *)a2 + 82);
  v35 = 23;
  if ((v12 & 0xFFFE000000000002) == 0 && v12 && *(unsigned __int8 *)(v12 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v12, this, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  v14 = (unint64_t *)((char *)this + 38904);
  SlowCase = *v11;
  if (*v11 < v11[1])
    goto LABEL_9;
  SlowCase = v11[2];
  if ((SlowCase & 1) == 0)
  {
    v27 = *(_QWORD *)(SlowCase + 8) ^ v11[3];
    v11[1] = SlowCase + HIDWORD(v27);
    v11[2] = SlowCase + (int)v27;
LABEL_9:
    *v11 = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 40112, (uint64_t)this + 192, 128, 0, 0, v29, v30, v31);
LABEL_10:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, (uint64_t)this, (uint64_t)a2, v12, (uint64_t)&v35, (unint64_t)&JSC::MathObject::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v24 = *v14;
  if (*((_QWORD *)this + 4863) >= *((_QWORD *)this + 4864))
  {
    v24 = *((_QWORD *)this + 4865);
    if ((v24 & 1) != 0)
    {
      JSC::sanitizeStackForVM(this, v16, v17, v18, v19, v20, v21, v22);
      v24 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v32, v33, v34);
      goto LABEL_14;
    }
    v28 = *(_QWORD *)(v24 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v24 + HIDWORD(v28);
    *((_QWORD *)this + 4865) = v24 + (int)v28;
  }
  *v14 = v24 + 16;
LABEL_14:
  *(_DWORD *)v24 = 0;
  v25 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v24 = SlowCase >> 4;
  *(_DWORD *)(v24 + 4) = v25;
  *(_QWORD *)(v24 + 8) = 0;
  JSC::MathObject::finishCreation((JSC::MathObject *)v24, this, a2, v18, v19, v20, v21, v22, v23);
  return v24;
}

unint64_t JSC::createAtomicsProperty(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t Structure;
  JSC::Structure *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  Structure = JSC::AtomicsObject::createStructure((unint64_t *)this, a2, *((_QWORD *)a2 + 82), a4, a5, a6, a7, a8, a9);
  return JSC::AtomicsObject::create(this, a2, Structure, v12, v13, v14, v15, v16);
}

unint64_t JSC::createConsoleProperty(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t SlowCase;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t result;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v10 = *((_QWORD *)a2 + 7);
  v11 = *(_QWORD *)(v10 + 15056);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 + 60);
    SlowCase = *(_QWORD *)(v11 + 24);
    if (SlowCase < *(_QWORD *)(v11 + 32))
    {
LABEL_3:
      *(_QWORD *)(v11 + 24) = SlowCase + v12;
      goto LABEL_4;
    }
    SlowCase = *(_QWORD *)(v11 + 40);
    if ((SlowCase & 1) == 0)
    {
      v29 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 48);
      *(_QWORD *)(v11 + 32) = SlowCase + HIDWORD(v29);
      *(_QWORD *)(v11 + 40) = SlowCase + (int)v29;
      goto LABEL_3;
    }
    JSC::sanitizeStackForVM(*((JSC **)a2 + 7), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v11, v10 + 192, v12, 0, 0, v36, v37, v38);
LABEL_4:
    v14 = (unint64_t *)((char *)this + 40136);
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *((_DWORD *)a2 + 212);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*(_BYTE *)(v10 + 755))
      __dmb(0xAu);
    v39 = 23;
    if ((SlowCase & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(SlowCase + 5) >= 0x17u)
      JSC::JSObject::didBecomePrototype(SlowCase, this, 0.0, (uint64_t)a3, a4, a5, a6, a7, a8);
    v15 = (unint64_t *)((char *)this + 38904);
    v16 = *v14;
    if (*v14 >= *((_QWORD *)this + 5018))
    {
      v16 = *((_QWORD *)this + 5019);
      if ((v16 & 1) != 0)
      {
        JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v16 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 40112, (uint64_t)this + 192, 128, 0, 0, v30, v31, v32);
LABEL_11:
        *(_DWORD *)v16 = 0;
        JSC::Structure::Structure(v16, (uint64_t)this, (uint64_t)a2, SlowCase, (uint64_t)&v39, (unint64_t)&JSC::ConsoleObject::s_info, 0, 0);
        if (*((_BYTE *)this + 755))
          __dmb(0xAu);
        v24 = *v15;
        if (*v15 >= *((_QWORD *)this + 4864))
        {
          v24 = *((_QWORD *)this + 4865);
          if ((v24 & 1) != 0)
          {
            JSC::sanitizeStackForVM(this, v17, v18, v19, v20, v21, v22, v23);
            v24 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v33, v34, v35);
            goto LABEL_15;
          }
          v28 = *(_QWORD *)(v24 + 8) ^ *((_QWORD *)this + 4866);
          *((_QWORD *)this + 4864) = v24 + HIDWORD(v28);
          *((_QWORD *)this + 4865) = v24 + (int)v28;
        }
        *v15 = v24 + 16;
LABEL_15:
        *(_DWORD *)v24 = 0;
        v25 = *(_DWORD *)(v16 + 8);
        *(_DWORD *)v24 = v16 >> 4;
        *(_DWORD *)(v24 + 4) = v25;
        *(_QWORD *)(v24 + 8) = 0;
        JSC::ConsoleObject::finishCreation((JSC::ConsoleObject *)v24, this, a2, v19, v20, v21, v22, v23);
        return v24;
      }
      v27 = *(_QWORD *)(v16 + 8) ^ *((_QWORD *)this + 5020);
      *((_QWORD *)this + 5018) = v16 + HIDWORD(v27);
      *((_QWORD *)this + 5019) = v16 + (int)v27;
    }
    *v14 = v16 + 128;
    goto LABEL_11;
  }
  SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v10 + 14936, *((JSC **)a2 + 7), 0x40uLL, 0, a5, a6, a7, a8);
  if (SlowCase)
    goto LABEL_4;
  result = 110;
  __break(0xC471u);
  return result;
}

uint64_t JSC::WeakGCMap<JSC::PrototypeKey,JSC::Structure,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>>::~WeakGCMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = v16 + 32;
      do
      {
        if (*(_QWORD *)(v18 - 32))
          v19 = 0;
        else
          v19 = *(_QWORD *)(v18 - 24) == 0;
        v20 = v19 && *(_DWORD *)(v18 - 16) == 1;
        if (!v20 || *(_QWORD *)(v18 - 8))
        {
          if (*(_QWORD *)v18)
          {
            *(_QWORD *)(*(_QWORD *)v18 + 8) = 3;
            *(_QWORD *)v18 = 0;
          }
        }
        v18 += 40;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  return a1;
}

void JSC::WeakGCMap<JSC::PrototypeKey,JSC::Structure,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>>::~WeakGCMap(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = v16 + 32;
      do
      {
        if (*(_QWORD *)(v18 - 32))
          v19 = 0;
        else
          v19 = *(_QWORD *)(v18 - 24) == 0;
        v20 = v19 && *(_DWORD *)(v18 - 16) == 1;
        if (!v20 || *(_QWORD *)(v18 - 8))
        {
          if (*(_QWORD *)v18)
          {
            *(_QWORD *)(*(_QWORD *)v18 + 8) = 3;
            *(_QWORD *)v18 = 0;
          }
        }
        v18 += 40;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t *JSC::WeakGCMap<JSC::PrototypeKey,JSC::Structure,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>>::pruneStaleEntries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  double v32;
  double v33;
  double v34;
  unint64_t v35;

  v10 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v9 = v10;
  if (!v10)
    return result;
  v11 = *(_DWORD *)(v9 - 4);
  if (!v11)
    return result;
  v12 = 0;
  v13 = v11 - 1;
  do
  {
    v14 = v13;
    v15 = v9 + 40 * v13;
    v16 = *(_OWORD *)v15 == 0;
    v17 = *(_DWORD *)(v15 + 16);
    if (*(_OWORD *)v15 != 0 || v17 != 0)
    {
      if (v17 != 1)
        v16 = 0;
      if (!v16)
        goto LABEL_12;
    }
    if (*(_QWORD *)(v15 + 24))
    {
LABEL_12:
      v19 = v9 + 40 * v13;
      v22 = *(_QWORD **)(v19 + 32);
      v20 = (_QWORD *)(v19 + 32);
      v21 = v22;
      if (!v22)
      {
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        *(_DWORD *)(v15 + 16) = 1;
        v20 = (_QWORD *)(v15 + 24);
        goto LABEL_16;
      }
      if (!*v21 || (v21[1] & 3) != 0)
      {
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        *(_DWORD *)(v15 + 16) = 1;
        *(_QWORD *)(v15 + 24) = 0;
        v21[1] = 3;
LABEL_16:
        *v20 = 0;
        ++v12;
      }
    }
    --v13;
  }
  while (v14);
  v23 = *result;
  if (v12)
  {
    *(_DWORD *)(v23 - 16) += v12;
    v27 = *result;
    if (*result)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    *(_DWORD *)(v27 - 12) = v28 - v12;
    v23 = *result;
  }
  if (v23)
  {
    v24 = *(_DWORD *)(v23 - 4);
    v25 = *(unsigned int *)(v23 - 12);
    if (v24 >= 9 && 6 * (int)v25 < v24)
    {
      v29 = (v25 - 1) | ((v25 - 1) >> 1) | ((((_DWORD)v25 - 1) | ((v25 - 1) >> 1)) >> 2);
      v30 = v29 | (v29 >> 4) | ((v29 | (v29 >> 4)) >> 8);
      v31 = (v30 | HIWORD(v30)) + 1;
      if (v31 > 0x400)
      {
        if (v31 <= 2 * v25)
        {
LABEL_30:
          LODWORD(v31) = 2 * v31;
          if (v31 <= 0x400)
            goto LABEL_31;
        }
        v32 = (double)v25;
        v33 = (double)v31;
        v34 = 0.416666667;
      }
      else
      {
        if (3 * v31 <= 4 * v25)
          goto LABEL_30;
LABEL_31:
        v32 = (double)v25;
        v33 = (double)v31;
        v34 = 0.604166667;
      }
      if (v33 * v34 <= v32)
        LODWORD(v31) = 2 * v31;
      if (v31 <= 8)
        v35 = 8;
      else
        v35 = v31;
      return (uint64_t *)WTF::HashTable<JSC::PrototypeKey,WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashMap<JSC::PrototypeKey,JSC::Weak<JSC::Structure>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::PrototypeKey>>::rehash(result, v35, 0, a4, a5, a6, a7, a8);
    }
  }
  return result;
}

BOOL WTF::HashTable<JSC::PrototypeKey,WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashMap<JSC::PrototypeKey,JSC::Weak<JSC::Structure>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::PrototypeKey>>::isEmptyOrDeletedBucket(uint64_t a1)
{
  _BOOL4 v1;
  int v2;

  v1 = *(_OWORD *)a1 == 0;
  v2 = *(_DWORD *)(a1 + 16);
  if (*(_OWORD *)a1 == 0 && v2 == 0)
    return *(_QWORD *)(a1 + 24) == 0;
  if (v2 != 1)
    v1 = 0;
  return v1 && *(_QWORD *)(a1 + 24) == 0;
}

uint64_t WTF::HashTable<JSC::PrototypeKey,WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashMap<JSC::PrototypeKey,JSC::Weak<JSC::Structure>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::PrototypeKey>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  int v26;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int i;
  unsigned int v35;
  uint64_t v36;
  BOOL v37;
  BOOL v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(40 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = v11 + 40 * v22;
      v25 = *(_OWORD *)v24 == 0;
      v26 = *(_DWORD *)(v24 + 16);
      if (*(_OWORD *)v24 == 0 && v26 == 1)
      {
        if (*(_QWORD *)(v24 + 24))
          goto LABEL_11;
      }
      else
      {
        if (v26)
          v25 = 0;
        if (!v25 || *(_QWORD *)(v24 + 24))
        {
LABEL_11:
          v28 = *a1;
          if (*a1)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v30 = 0;
          v31 = (*(_QWORD *)(v24 + 8) ^ *(_QWORD *)v24 ^ *(_QWORD *)(v24 + 24))
              + ~((*(_QWORD *)(v24 + 8) ^ *(_QWORD *)v24 ^ *(_QWORD *)(v24 + 24)) << 32);
          v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
          v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
          for (i = v26 + (((v33 + ~(v33 << 27)) >> 31) ^ (v33 + ~((_DWORD)v33 << 27))); ; i = v30 + v35)
          {
            v35 = i & v29;
            v36 = v28 + 40 * (i & v29);
            v15 = *(void **)(v36 + 8);
            v16 = *(unsigned int *)(v36 + 16);
            v37 = !*(_QWORD *)v36 && v15 == 0;
            v38 = v37 && (_DWORD)v16 == 0;
            if (v38 && !*(_QWORD *)(v36 + 24))
              break;
            ++v30;
          }
          v39 = v28 + 40 * v35;
          v42 = *(_QWORD *)(v39 + 32);
          v40 = (_QWORD *)(v39 + 32);
          v41 = v42;
          if (v42)
          {
            *(_QWORD *)(v41 + 8) = 3;
            *v40 = 0;
          }
          v43 = *(_OWORD *)(v24 + 16);
          *(_OWORD *)v36 = *(_OWORD *)v24;
          *(_OWORD *)(v36 + 16) = v43;
          v44 = v11 + 40 * v22;
          v46 = *(_QWORD *)(v44 + 32);
          v45 = v44 + 32;
          *(_QWORD *)v45 = 0;
          *v40 = v46;
          if (*(_QWORD *)v45)
          {
            *(_QWORD *)(*(_QWORD *)v45 + 8) = 3;
            *(_QWORD *)v45 = 0;
          }
          if (v24 == a3)
            v23 = v36;
          goto LABEL_30;
        }
        v48 = v11 + 40 * v22;
        v51 = *(_QWORD *)(v48 + 32);
        v49 = (_QWORD *)(v48 + 32);
        v50 = v51;
        if (v51)
        {
          *(_QWORD *)(v50 + 8) = 3;
          *v49 = 0;
        }
      }
LABEL_30:
      if (++v22 == v12)
        goto LABEL_34;
    }
  }
  v23 = 0;
  result = 0;
  if (v11)
  {
LABEL_34:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

void WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::deallocateTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::ThreadSafeWeakPtrControlBlock **v10;
  WTF::ThreadSafeWeakPtrControlBlock *v11;

  v9 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v9)
  {
    v10 = (WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 8);
    do
    {
      if (*(v10 - 1) != (WTF::ThreadSafeWeakPtrControlBlock *)-1)
      {
        v11 = *v10;
        *v10 = 0;
        if (v11)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v11, a2, a3, a4, a5, a6, a7, a8);
      }
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>::~ObjectPropertyChangeAdaptiveWatchpoint(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *result = off_1E3580B60;
  v1 = (_QWORD *)result[8];
  if (v1)
  {
    v2 = result[7];
    *v1 = v2;
    *(_QWORD *)(v2 + 8) = v1;
    result[7] = 0;
    result[8] = 0;
  }
  v3 = (_QWORD *)result[5];
  if (v3)
  {
    v4 = result[4];
    *v3 = v4;
    *(_QWORD *)(v4 + 8) = v3;
    result[4] = 0;
    result[5] = 0;
  }
  return result;
}

unint64_t JSC::allocateCell<JSC::AggregateErrorConstructor>(_QWORD *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = a1 + 4819;
  result = a1[4819];
  if (result >= v9[1])
  {
    result = v9[2];
    if ((result & 1) != 0)
    {
      v12 = (uint64_t)(a1 + 4816);
      v13 = (uint64_t)(a1 + 24);
      JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v12, v13, 48, 0, 0, v14, v15, v16);
      goto LABEL_3;
    }
    v11 = *(_QWORD *)(result + 8) ^ v9[3];
    v9[1] = result + HIDWORD(v11);
    v9[2] = result + (int)v11;
  }
  *v9 = result + 48;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WTF::dataLog<char [64],char [2]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "Dumping sampling profiler samples failed to open temporary file");
  WTF::PrintStream::printf(v2, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char [37],WTF::String,char [2]>(WTF::PrintStream *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Dumped sampling profiler samples to ");
  WTF::printInternal(v4, a1, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t std::make_unique[abi:sn180100]<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>,JSC::JSGlobalObject *,JSC::ObjectPropertyCondition &,JSC::InlineWatchpointSet&>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  result = WTF::fastMalloc((WTF *)0x60);
  v9 = *a2;
  *(_QWORD *)result = off_1E3580B60;
  v10 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(result + 8) = *(_OWORD *)a3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = v10;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 1;
  if ((unint64_t)*(unsigned __int8 *)(a3 + 14) << 48 != 0x5000000000000
    || ((*(_QWORD *)result = off_1E35A0718,
         *(_QWORD *)(result + 80) = v9,
         *(_QWORD *)(result + 88) = a4,
         v11 = *a4,
         (*a4 & 1) != 0)
      ? (v12 = (v11 >> 1) & 3)
      : (v12 = *(unsigned __int8 *)(v11 + 4)),
        v12 != 1))
  {
    __break(0xC471u);
    JUMPOUT(0x1989D440CLL);
  }
  *a1 = result;
  return result;
}

void JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>::~ObjectPropertyChangeAdaptiveWatchpoint(unint64_t this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)this = off_1E3580B60;
  v8 = *(_QWORD **)(this + 64);
  if (v8)
  {
    v9 = *(_QWORD *)(this + 56);
    *v8 = v9;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(this + 56) = 0;
    *(_QWORD *)(this + 64) = 0;
  }
  v10 = *(_QWORD **)(this + 40);
  if (v10)
  {
    v11 = *(_QWORD *)(this + 32);
    *v10 = v11;
    *(_QWORD *)(v11 + 8) = v10;
    *(_QWORD *)(this + 32) = 0;
    *(_QWORD *)(this + 40) = 0;
  }
  WTF::fastFree(this, a2, a3, a4, a5, a6, a7, a8);
}

unint64_t JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>::isValid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;

  v8 = *(_QWORD *)(a1 + 80);
  if ((v8 & 8) != 0)
  {
    if ((*(_BYTE *)(v8 - 79) & 1) == 0)
      return *(_BYTE *)(v8 - 80) & 1;
    return 1;
  }
  v9 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFC000);
  if (!*(_BYTE *)(v9 + 10))
    return JSC::MarkedBlock::Handle::isLive(v9, v8, a3, a4, a5, a6, a7, a8);
  v11 = *(_QWORD *)(v9 + 24);
  v14 = *(_QWORD **)(v11 + 104);
  v13 = (_QWORD *)(v11 + 104);
  v12 = v14;
  if (v14 == v13)
    return 1;
  v15 = 0;
  do
  {
    v16 = (_QWORD *)*v12;
    v15 |= JSC::FreeList::contains(v12 + 3, v8);
    v12 = v16;
  }
  while (v16 != v13);
  return v15 == 0;
}

uint64_t *JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>::handleFire(uint64_t *result, JSC::VM *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t **v16;
  _QWORD v18[2];

  v9 = (uint64_t *)result[11];
  v18[0] = &off_1E3583C90;
  v18[1] = "Object Property is changed.";
  v10 = *v9;
  if ((*v9 & 1) != 0)
  {
    if ((v10 & 6) != 0)
    {
      *v9 = 5;
      __dmb(0xAu);
    }
  }
  else if (*(_BYTE *)(v10 + 4) == 1)
  {
    __dmb(0xAu);
    v12 = *(uint64_t **)(v10 + 8);
    v11 = (uint64_t *)(v10 + 8);
    result = v12;
    *((_BYTE *)v11 - 4) = 2;
    v13 = *((_DWORD *)a2 + 229);
    v16 = (uint64_t **)v11;
    *((_DWORD *)a2 + 229) = v13 + 1;
    if (v12 != v11)
    {
      do
      {
        v15 = *result;
        v14 = (uint64_t *)result[1];
        *v14 = *result;
        *(_QWORD *)(v15 + 8) = v14;
        *result = 0;
        result[1] = 0;
        JSC::Watchpoint::fire((unint64_t)result, a2, v18, a5, a6, a7, a8, a9, a3);
        result = *v16;
      }
      while (*v16 != (uint64_t *)v16);
      v13 = *((_DWORD *)a2 + 229) - 1;
    }
    *((_DWORD *)a2 + 229) = v13;
    __dmb(0xAu);
  }
  return result;
}

uint64_t std::make_unique[abi:sn180100]<JSC::ObjectAdaptiveStructureWatchpoint,JSC::JSGlobalObject *,JSC::ObjectPropertyCondition &,JSC::InlineWatchpointSet &>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  result = WTF::fastMalloc((WTF *)0x38);
  v9 = *a2;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 7;
  *(_DWORD *)(result + 17) = v9;
  *(_BYTE *)(result + 21) = BYTE4(v9);
  v10 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(result + 24) = *(_OWORD *)a3;
  *(_QWORD *)(result + 40) = v10;
  *(_QWORD *)(result + 48) = a4;
  v11 = *(_QWORD *)(a3 + 8);
  if ((v11 & 0xFF000000000000) == 0x5000000000000)
    goto LABEL_10;
  if ((v11 & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D46B4);
  }
  v12 = *a4;
  v13 = (*a4 & 1) != 0 ? (v12 >> 1) & 3 : *(unsigned __int8 *)(v12 + 4);
  if (v13 != 1)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x1989D4694);
  }
  *a1 = result;
  return result;
}

unint64_t JSC::allocateCell<JSC::JSGlobalProxy>(_QWORD *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = a1 + 4830;
  v10 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  result = a1[4830];
  if (result >= v9[1])
  {
    result = v9[2];
    if ((result & 1) != 0)
    {
      v13 = (uint64_t)(a1 + 4827);
      v14 = (uint64_t)(a1 + 24);
      JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v13, v14, v10, 0, 0, v15, v16, v17);
      goto LABEL_3;
    }
    v12 = *(_QWORD *)(result + 8) ^ v9[3];
    v9[1] = result + HIDWORD(v12);
    v9[2] = result + (int)v12;
  }
  *v9 = result + v10;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t JSC::WatchpointSet::touch(uint64_t a1, JSC::VM *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  if (*(_BYTE *)(a1 + 4))
  {
    if (*(_BYTE *)(a1 + 4) == 1)
      return (uint64_t)JSC::WatchpointSet::fireAllSlow(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    __dmb(0xAu);
    *(_BYTE *)(a1 + 4) = 1;
    __dmb(0xAu);
  }
  return a1;
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::JSDestructibleObjectDestroyFunc>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  WTF *v43;
  const char *v44;
  const char *v45;
  char v46;
  WTF::PrintStream *v47;
  WTF *v48;
  const char *v49;
  const char *v50;
  WTF *v51;
  const char *v52;
  const char *v53;
  WTF::PrintStream *v54;
  WTF *v55;
  const char *v56;
  const char *v57;
  char v58;
  char **v59;
  char *v60;

  v9 = *a1;
  v10 = *((_QWORD *)a1 + 10);
  v11 = *((_QWORD *)a1 + 11);
  v12 = *(_QWORD *)(v10 + 168);
  v13 = *(_QWORD *)(v10 + 160) ^ (*(_QWORD *)(v10 + 160) << 23);
  *(_QWORD *)(v10 + 160) = v12;
  *(_QWORD *)(v10 + 168) = (v12 >> 26) ^ (v13 >> 17) ^ v12 ^ v13;
  if (!BYTE1(qword_1ECF4C414))
  {
    v19 = 1024 - v9;
    v20 = a1[1];
    if (1024 - v9 >= v20)
    {
      do
      {
        v21 = v11 + 16 * v19;
        if (*(_DWORD *)v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)(v21 + 16) + 48))(v11 + 16 * v19);
          *(_DWORD *)v21 = 0;
          *(_DWORD *)(v21 + 8) = 1;
          v9 = *a1;
          v20 = a1[1];
        }
        v19 -= v9;
      }
      while (v19 >= v20);
      v10 = *((_QWORD *)a1 + 10);
    }
    if (*(_BYTE *)(v10 + 445))
    {
      v22 = (unsigned int *)(v11 + 24);
      while (1)
      {
        v23 = *v22;
        if ((*v22 & 3) != 1)
          break;
        v24 = __ldxr(v22);
        if (v24 == v23)
        {
          if (!__stxr(v23 & 0xFFFFFFFE, v22))
            goto LABEL_54;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v22, 0, a3, a4, a5, a6, a7, a8);
    }
LABEL_54:
    v33 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
    if (__ldaxr(v33))
    {
      __clrex();
    }
    else if (!__stxr(1u, v33))
    {
      goto LABEL_58;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v33);
LABEL_58:
    v35 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
    v36 = v35 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v36 + 24) &= ~(1 << a1[3]);
    v37 = v35 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v37 + 16) &= ~(1 << a1[3]);
    v38 = v35 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v38 + 4) &= ~(1 << a1[3]);
    v39 = v35 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v39 + 4) |= 1 << a1[3];
    LODWORD(v39) = __ldxr(v33);
    if ((_DWORD)v39 == 1)
    {
      if (!__stlxr(0, v33))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v33, 0, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_QWORD *)(v11 + 40)
    || *(_QWORD *)(v11 + 48)
    || *(_QWORD *)(v11 + 56)
    || *(_QWORD *)(v11 + 64)
    || *(_QWORD *)(v11 + 72)
    || *(_QWORD *)(v11 + 80)
    || *(_QWORD *)(v11 + 88)
    || *(_QWORD *)(v11 + 96)
    || *(_QWORD *)(v11 + 104)
    || *(_QWORD *)(v11 + 112)
    || *(_QWORD *)(v11 + 120)
    || *(_QWORD *)(v11 + 128)
    || *(_QWORD *)(v11 + 136)
    || *(_QWORD *)(v11 + 144)
    || *(_QWORD *)(v11 + 152)
    || *(_QWORD *)(v11 + 160))
  {
    v41 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v41 != -1)
    {
      v60 = &v58;
      v59 = &v60;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v59, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
    v43 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    WTF::printInternal(v43, (WTF::PrintStream *)"Block ", v44);
    WTF::printInternal(v43, (const void *)v11);
    WTF::printInternal(v43, (WTF::PrintStream *)": marks not empty!\n", v45);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v46 = atomic_load((unsigned int *)(v11 + 24));
    v47 = (WTF::PrintStream *)(v46 & 1);
    v48 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    WTF::printInternal(v48, (WTF::PrintStream *)"Block lock is held: ", v49);
    WTF::printInternal(v48, v47);
    WTF::printInternal(v48, (WTF::PrintStream *)"\n", v50);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v51 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    WTF::printInternal(v51, (WTF::PrintStream *)"Marking version of block: ", v52);
    WTF::printInternal(v51, (WTF::PrintStream *)*(unsigned int *)(v11 + 32));
    WTF::printInternal(v51, (WTF::PrintStream *)"\n", v53);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v54 = (WTF::PrintStream *)*(unsigned int *)(*((_QWORD *)a1 + 10) + 432);
    v55 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
    WTF::printInternal(v55, (WTF::PrintStream *)"Marking version of heap: ", v56);
    WTF::printInternal(v55, v54);
    WTF::printInternal(v55, (WTF::PrintStream *)"\n", v57);
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    __break(0xC471u);
LABEL_67:
    JUMPOUT(0x1989D4D48);
  }
  v14 = (16 * v9);
  v15 = a1[1];
  v16 = v11 + 16 * v15;
  if ((unint64_t)(16 * v15 - 16385) <= 0xFFFFFFFFFFFFC12ELL)
  {
    __break(0xC471u);
    goto LABEL_67;
  }
  v17 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v17))
  {
    goto LABEL_35;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v17);
LABEL_35:
  v25 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v26 = v25 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v26 + 24) &= ~(1 << a1[3]);
  v27 = v25 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v27 + 16) &= ~(1 << a1[3]);
  v28 = v25 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v28 + 4) &= ~(1 << a1[3]);
  v29 = v25 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v29 + 4) |= 1 << a1[3];
  LODWORD(v29) = __ldxr(v17);
  if ((_DWORD)v29 == 1)
  {
    if (!__stlxr(0, v17))
      goto LABEL_40;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v17, 0, a3, a4, a5, a6, a7, a8);
LABEL_40:
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v30 = (unsigned int *)(v11 + 24);
    while (1)
    {
      v31 = *v30;
      if ((*v30 & 3) != 1)
        break;
      v32 = __ldxr(v30);
      if (v32 == v31)
      {
        if (!__stxr(v31 & 0xFFFFFFFE, v30))
          goto LABEL_48;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v30, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_48:
  if (v15 <= 0x3FF)
  {
    do
    {
      if (*(_DWORD *)v16)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)(v16 + 16) + 48))(v16);
        *(_DWORD *)v16 = 0;
        *(_DWORD *)(v16 + 8) = 1;
      }
      v16 += v14;
    }
    while (v16 < v11 + 0x4000);
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::JSDestructibleObjectDestroyFunc>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  signed int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v55;
  uint64_t v56;
  WTF *v57;
  const char *v58;
  const char *v59;
  char v60;
  WTF::PrintStream *v61;
  WTF *v62;
  const char *v63;
  const char *v64;
  WTF *v65;
  const char *v66;
  const char *v67;
  WTF::PrintStream *v68;
  WTF *v69;
  const char *v70;
  const char *v71;
  char v73;
  char **v74;
  char *v75;

  v8 = a2;
  v10 = *a1;
  v11 = *((_QWORD *)a1 + 10);
  v12 = *((_QWORD *)a1 + 11);
  v13 = *(_QWORD *)(v11 + 168);
  v14 = *(_QWORD *)(v11 + 160) ^ (*(_QWORD *)(v11 + 160) << 23);
  v15 = (v13 >> 26) ^ (v14 >> 17) ^ v13 ^ v14;
  *(_QWORD *)(v11 + 160) = v13;
  *(_QWORD *)(v11 + 168) = v15;
  v16 = v15 + v13;
  if (!BYTE1(qword_1ECF4C414))
  {
    v24 = 1024 - v10;
    if (1024 - (int)v10 >= (int)a1[1])
    {
      v34 = 0;
      v26 = 0;
      v35 = 0;
      v36 = 0;
      do
      {
        v25 = v12 + 16 * v24;
        if (*(_DWORD *)v25)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)(v25 + 16) + 48))(v12 + 16 * v24);
          *(_DWORD *)v25 = 0;
          *(_DWORD *)(v25 + 8) = 1;
          v10 = *a1;
        }
        v37 = v24;
        if (v24 + (unint64_t)v10 >= v36)
        {
          v40 = v10;
        }
        else
        {
          v38 = v12 + 16 * v36;
          v39 = (v34 << 36) | 1;
          if (v35)
            v39 = ((int)v35 - (int)v38) | (unint64_t)(v34 << 36);
          *(_QWORD *)(v38 + 8) = v39 ^ v16;
          v26 += 16 * v34;
          v40 = *a1;
          v35 = v12 + 16 * v36;
          v34 = 0;
        }
        v34 += v10;
        v24 -= v40;
        v10 = v40;
        v36 = v37;
      }
      while (v24 >= (int)a1[1]);
      if (v34)
      {
        v41 = (v34 << 36) | 1;
        if (v35)
          v41 = ((int)v35 - (int)v25) | (unint64_t)(v34 << 36);
        *(_QWORD *)(v25 + 8) = v41 ^ v16;
        v26 += 16 * v34;
      }
      else
      {
        v25 = v35;
      }
      v8 = a2;
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
    if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
    {
      v42 = (unsigned int *)(v12 + 24);
      while (1)
      {
        v43 = *v42;
        if ((*v42 & 3) != 1)
          break;
        v44 = __ldxr(v42);
        if (v44 == v43)
        {
          if (!__stxr(v43 & 0xFFFFFFFE, v42))
            goto LABEL_68;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v42, 0, a3, a4, a5, a6, a7, a8);
    }
LABEL_68:
    if (v25)
    {
      v46 = *(_QWORD *)(v25 + 8) ^ v16;
      *(_QWORD *)v8 = v25;
      *(_QWORD *)(v8 + 8) = v25 + HIDWORD(v46);
      v47 = v25 + (int)v46;
    }
    else
    {
      v16 = 0;
      v26 = 0;
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      v47 = 1;
    }
    *(_QWORD *)(v8 + 16) = v47;
    *(_QWORD *)(v8 + 24) = v16;
    *(_DWORD *)(v8 + 32) = v26;
    v48 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
    if (__ldaxr(v48))
    {
      __clrex();
    }
    else if (!__stxr(1u, v48))
    {
      goto LABEL_74;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v48);
LABEL_74:
    v50 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
    v51 = v50 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v51 + 24) &= ~(1 << a1[3]);
    v52 = v50 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v52 + 16) &= ~(1 << a1[3]);
    v53 = v50 + 40 * (a1[3] >> 5);
    *(_DWORD *)(v53 + 4) &= ~(1 << a1[3]);
    *((_BYTE *)a1 + 10) = 1;
    LODWORD(v53) = __ldxr(v48);
    if ((_DWORD)v53 == 1)
    {
      if (!__stlxr(0, v48))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v48, 0, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (*(_QWORD *)(v12 + 40)
    || *(_QWORD *)(v12 + 48)
    || *(_QWORD *)(v12 + 56)
    || *(_QWORD *)(v12 + 64)
    || *(_QWORD *)(v12 + 72)
    || *(_QWORD *)(v12 + 80)
    || *(_QWORD *)(v12 + 88)
    || *(_QWORD *)(v12 + 96)
    || *(_QWORD *)(v12 + 104)
    || *(_QWORD *)(v12 + 112)
    || *(_QWORD *)(v12 + 120)
    || *(_QWORD *)(v12 + 128)
    || *(_QWORD *)(v12 + 136)
    || *(_QWORD *)(v12 + 144)
    || *(_QWORD *)(v12 + 152)
    || *(_QWORD *)(v12 + 160))
  {
    v55 = atomic_load(&WTF::initializeLogFile(void)::once);
    if (v55 != -1)
    {
      v75 = &v73;
      v74 = &v75;
      std::__call_once(&WTF::initializeLogFile(void)::once, &v74, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
    }
    v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
    v57 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
    WTF::printInternal(v57, (WTF::PrintStream *)"Block ", v58);
    WTF::printInternal(v57, (const void *)v12);
    WTF::printInternal(v57, (WTF::PrintStream *)": marks not empty!\n", v59);
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
    v60 = atomic_load((unsigned int *)(v12 + 24));
    v61 = (WTF::PrintStream *)(v60 & 1);
    v62 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
    WTF::printInternal(v62, (WTF::PrintStream *)"Block lock is held: ", v63);
    WTF::printInternal(v62, v61);
    WTF::printInternal(v62, (WTF::PrintStream *)"\n", v64);
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
    v65 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
    WTF::printInternal(v65, (WTF::PrintStream *)"Marking version of block: ", v66);
    WTF::printInternal(v65, (WTF::PrintStream *)*(unsigned int *)(v12 + 32));
    WTF::printInternal(v65, (WTF::PrintStream *)"\n", v67);
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
    v68 = (WTF::PrintStream *)*(unsigned int *)(*((_QWORD *)a1 + 10) + 432);
    v69 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 32))(v56);
    WTF::printInternal(v69, (WTF::PrintStream *)"Marking version of heap: ", v70);
    WTF::printInternal(v69, v68);
    WTF::printInternal(v69, (WTF::PrintStream *)"\n", v71);
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 40))(v56);
    __break(0xC471u);
LABEL_84:
    JUMPOUT(0x1989D5404);
  }
  v17 = (16 * v10);
  v18 = v12 + 0x4000;
  v19 = a1[1];
  v20 = v12 + 16 * v19;
  v21 = 0x4000 - 16 * v19;
  if (v21 >= 0x3ED1)
  {
    __break(0xC471u);
    goto LABEL_84;
  }
  v22 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, v22))
  {
    goto LABEL_25;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v22);
LABEL_25:
  v27 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v28 = v27 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v28 + 24) &= ~(1 << a1[3]);
  v29 = v27 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v29 + 16) &= ~(1 << a1[3]);
  v30 = v27 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v30 + 4) &= ~(1 << a1[3]);
  *((_BYTE *)a1 + 10) = 1;
  LODWORD(v30) = __ldxr(v22);
  if ((_DWORD)v30 == 1)
  {
    if (!__stlxr(0, v22))
      goto LABEL_30;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v22, 0, a3, a4, a5, a6, a7, a8);
LABEL_30:
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v31 = (unsigned int *)(v12 + 24);
    while (1)
    {
      v32 = *v31;
      if ((*v31 & 3) != 1)
        break;
      v33 = __ldxr(v31);
      if (v33 == v32)
      {
        if (!__stxr(v32 & 0xFFFFFFFE, v31))
          goto LABEL_60;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v31, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_60:
  if (v19 <= 0x3FF)
  {
    v45 = v12 + 16 * v19;
    do
    {
      if (*(_DWORD *)v45)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)(v45 + 16) + 48))(v45);
        *(_DWORD *)v45 = 0;
        *(_DWORD *)(v45 + 8) = 1;
      }
      v45 += v17;
    }
    while (v45 < v18);
  }
  *(_QWORD *)(v20 + 8) = ((v21 << 32) | 1) ^ v16;
  *(_QWORD *)v8 = v20;
  *(_QWORD *)(v8 + 8) = v20 + v21;
  *(_QWORD *)(v8 + 16) = v20 + 1;
  *(_QWORD *)(v8 + 24) = v16;
  *(_DWORD *)(v8 + 32) = v21;
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::JSDestructibleObjectDestroyFunc>(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = *((_QWORD *)a1 + 10);
  v10 = *((_QWORD *)a1 + 11);
  v11 = *(_QWORD *)(v9 + 168);
  v12 = *(_QWORD *)(v9 + 160) ^ (*(_QWORD *)(v9 + 160) << 23);
  *(_QWORD *)(v9 + 160) = v11;
  *(_QWORD *)(v9 + 168) = (v11 >> 26) ^ (v12 >> 17) ^ v11 ^ v12;
  v13 = *a1;
  v14 = a1[1];
  v15 = 1024 - *a1;
  if (v15 >= v14)
  {
    do
    {
      v16 = v10 + 16 * v15;
      if (*(_DWORD *)v16)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(v16 + 16) + 48))(v10 + 16 * v15);
        *(_DWORD *)v16 = 0;
        *(_DWORD *)(v16 + 8) = 1;
        v13 = *a1;
        v14 = a1[1];
      }
      v15 -= v13;
    }
    while (v15 >= v14);
    v9 = *((_QWORD *)a1 + 10);
  }
  if (*(_BYTE *)(v9 + 445))
  {
    v17 = (unsigned int *)(v10 + 24);
    while (1)
    {
      v18 = *v17;
      if ((*v17 & 3) != 1)
        break;
      v19 = __ldxr(v17);
      if (v19 == v18)
      {
        if (!__stxr(v18 & 0xFFFFFFFE, v17))
          goto LABEL_14;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v17, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_14:
  v20 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v20))
  {
    __clrex();
  }
  else if (!__stxr(1u, v20))
  {
    goto LABEL_18;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v20);
LABEL_18:
  v22 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v23 = v22 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v23 + 24) &= ~(1 << a1[3]);
  v24 = v22 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v24 + 16) &= ~(1 << a1[3]);
  v25 = v22 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v25 + 4) &= ~(1 << a1[3]);
  v26 = v22 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v26 + 4) |= 1 << a1[3];
  LODWORD(v26) = __ldxr(v20);
  if ((_DWORD)v26 != 1)
  {
    __clrex();
    goto LABEL_22;
  }
  if (__stlxr(0, v20))
LABEL_22:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v20, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::JSDestructibleObjectDestroyFunc>(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  signed int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = a2;
  v10 = *((_QWORD *)a1 + 10);
  v11 = *((_QWORD *)a1 + 11);
  v12 = *(_QWORD *)(v10 + 168);
  v13 = *(_QWORD *)(v10 + 160) ^ (*(_QWORD *)(v10 + 160) << 23);
  v14 = (v12 >> 26) ^ (v13 >> 17) ^ v12 ^ v13;
  *(_QWORD *)(v10 + 160) = v12;
  *(_QWORD *)(v10 + 168) = v14;
  v15 = v14 + v12;
  v16 = *a1;
  v17 = 1024 - v16;
  if (1024 - (int)v16 >= (int)a1[1])
  {
    v20 = 0;
    v19 = 0;
    v21 = 0;
    v22 = 0;
    do
    {
      v18 = v11 + 16 * v17;
      if (*(_DWORD *)v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(v18 + 16) + 48))(v11 + 16 * v17);
        *(_DWORD *)v18 = 0;
        *(_DWORD *)(v18 + 8) = 1;
        v16 = *a1;
      }
      v23 = v17;
      if (v17 + (unint64_t)v16 >= v22)
      {
        v26 = v16;
      }
      else
      {
        v24 = v11 + 16 * v22;
        v25 = (v20 << 36) | 1;
        if (v21)
          v25 = ((int)v21 - (int)v24) | (unint64_t)(v20 << 36);
        *(_QWORD *)(v24 + 8) = v25 ^ v15;
        v19 += 16 * v20;
        v26 = *a1;
        v21 = v11 + 16 * v22;
        v20 = 0;
      }
      v20 += v16;
      v17 -= v26;
      v16 = v26;
      v22 = v23;
    }
    while (v17 >= (int)a1[1]);
    if (v20)
    {
      v27 = (v20 << 36) | 1;
      if (v21)
        v27 = ((int)v21 - (int)v18) | (unint64_t)(v20 << 36);
      *(_QWORD *)(v18 + 8) = v27 ^ v15;
      v19 += 16 * v20;
    }
    else
    {
      v18 = v21;
    }
    v8 = a2;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  if (*(_BYTE *)(*((_QWORD *)a1 + 10) + 445))
  {
    v28 = (unsigned int *)(v11 + 24);
    while (1)
    {
      v29 = *v28;
      if ((*v28 & 3) != 1)
        break;
      v30 = __ldxr(v28);
      if (v30 == v29)
      {
        if (!__stxr(v29 & 0xFFFFFFFE, v28))
          goto LABEL_26;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v28, 0, a3, a4, a5, a6, a7, a8);
  }
LABEL_26:
  if (v18)
  {
    v31 = *(_QWORD *)(v18 + 8) ^ v15;
    *(_QWORD *)v8 = v18;
    *(_QWORD *)(v8 + 8) = v18 + HIDWORD(v31);
    v32 = v18 + (int)v31;
  }
  else
  {
    v15 = 0;
    v19 = 0;
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    v32 = 1;
  }
  *(_QWORD *)(v8 + 16) = v32;
  *(_QWORD *)(v8 + 24) = v15;
  *(_DWORD *)(v8 + 32) = v19;
  v33 = (unsigned __int8 *)(*((_QWORD *)a1 + 3) + 56);
  if (__ldaxr(v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, v33))
  {
    goto LABEL_32;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v33);
LABEL_32:
  v35 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 32);
  v36 = v35 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v36 + 24) &= ~(1 << a1[3]);
  v37 = v35 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v37 + 16) &= ~(1 << a1[3]);
  v38 = v35 + 40 * (a1[3] >> 5);
  *(_DWORD *)(v38 + 4) &= ~(1 << a1[3]);
  *((_BYTE *)a1 + 10) = 1;
  LODWORD(v38) = __ldxr(v33);
  if ((_DWORD)v38 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, v33))
LABEL_36:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v33, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::JSDestructibleObjectDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::JSDestructibleObjectDestroyFunc const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v4 = *(unsigned int **)(a1 + 48);
  v5 = (_QWORD *)(*(_QWORD *)a1 + 16 * a2);
  if (**(_DWORD **)(a1 + 8) && *(_DWORD *)v5)
  {
    (*(void (**)(uint64_t))(v5[2] + 48))(*(_QWORD *)a1 + 16 * a2);
    *(_DWORD *)v5 = 0;
    *((_DWORD *)v5 + 2) = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v15 = **(_DWORD **)(a1 + 40);
      if (v15 >= 8)
        memset_pattern16(v5, &unk_1991567C0, v15 & 0xFFFFFFF8);
    }
    v6 = *v4;
    v8 = *(_QWORD **)(a1 + 56);
    v7 = *(uint64_t **)(a1 + 64);
    v9 = *v7;
    if ((unint64_t)(v6 + a2) < *v8)
    {
      v10 = 16 * v9;
      v11 = *(_QWORD *)a1 + 16 * *v8;
      v12 = *(_QWORD **)(a1 + 72);
      v13 = (v9 << 36) | 1;
      v14 = (int)(*v12 - v11) | (unint64_t)(v9 << 36);
      if (!*v12)
        v14 = v13;
      *(_QWORD *)(v11 + 8) = v14 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v10;
      *v12 = v11;
      v8 = *(_QWORD **)(a1 + 56);
      v7 = *(uint64_t **)(a1 + 64);
      *v7 = 0;
      v9 = 0;
    }
    *v7 = v9 + v6;
    *v8 = a2;
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::JSDestructibleObjectDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::JSDestructibleObjectDestroyFunc const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v4 = *(unsigned int **)(a1 + 48);
  v5 = (_QWORD *)(*(_QWORD *)a1 + 16 * a2);
  if (**(_DWORD **)(a1 + 8) && *(_DWORD *)v5)
  {
    (*(void (**)(uint64_t))(v5[2] + 48))(*(_QWORD *)a1 + 16 * a2);
    *(_DWORD *)v5 = 0;
    *((_DWORD *)v5 + 2) = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v15 = **(_DWORD **)(a1 + 40);
      if (v15 >= 8)
        memset_pattern16(v5, &unk_1991567C0, v15 & 0xFFFFFFF8);
    }
    v6 = *v4;
    v8 = *(_QWORD **)(a1 + 56);
    v7 = *(uint64_t **)(a1 + 64);
    v9 = *v7;
    if ((unint64_t)(v6 + a2) < *v8)
    {
      v10 = 16 * v9;
      v11 = *(_QWORD *)a1 + 16 * *v8;
      v12 = *(_QWORD **)(a1 + 72);
      v13 = (v9 << 36) | 1;
      v14 = (int)(*v12 - v11) | (unint64_t)(v9 << 36);
      if (!*v12)
        v14 = v13;
      *(_QWORD *)(v11 + 8) = v14 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v10;
      *v12 = v11;
      v8 = *(_QWORD **)(a1 + 56);
      v7 = *(uint64_t **)(a1 + 64);
      *v7 = 0;
      v9 = 0;
    }
    *v7 = v9 + v6;
    *v8 = a2;
  }
}

void JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::JSDestructibleObjectDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::JSDestructibleObjectDestroyFunc const&)::{lambda(unsigned long)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v4 = *(unsigned int **)(a1 + 48);
  v5 = (_QWORD *)(*(_QWORD *)a1 + 16 * a2);
  if (**(_DWORD **)(a1 + 8) && *(_DWORD *)v5)
  {
    (*(void (**)(uint64_t))(v5[2] + 48))(*(_QWORD *)a1 + 16 * a2);
    *(_DWORD *)v5 = 0;
    *((_DWORD *)v5 + 2) = 1;
  }
  if (**(_DWORD **)(a1 + 24) == 1)
  {
    if (**(_DWORD **)(a1 + 32) == 1)
    {
      v15 = **(_DWORD **)(a1 + 40);
      if (v15 >= 8)
        memset_pattern16(v5, &unk_1991567C0, v15 & 0xFFFFFFF8);
    }
    v6 = *v4;
    v8 = *(_QWORD **)(a1 + 56);
    v7 = *(uint64_t **)(a1 + 64);
    v9 = *v7;
    if ((unint64_t)(v6 + a2) < *v8)
    {
      v10 = 16 * v9;
      v11 = *(_QWORD *)a1 + 16 * *v8;
      v12 = *(_QWORD **)(a1 + 72);
      v13 = (v9 << 36) | 1;
      v14 = (int)(*v12 - v11) | (unint64_t)(v9 << 36);
      if (!*v12)
        v14 = v13;
      *(_QWORD *)(v11 + 8) = v14 ^ **(_QWORD **)(a1 + 80);
      **(_QWORD **)(a1 + 88) += v10;
      *v12 = v11;
      v8 = *(_QWORD **)(a1 + 56);
      v7 = *(uint64_t **)(a1 + 64);
      *v7 = 0;
      v9 = 0;
    }
    *v7 = v9 + v6;
    *v8 = a2;
  }
}

void JSC::JSInternalFieldObjectImpl<1u>::visitChildren(JSC::JSObject *a1, uint64_t a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;

  JSC::JSObject::visitChildren(a1, (JSC::JSCell *)a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)a1 + 2);
  if ((v16 & 0xFFFE000000000002) == 0 && v16 != 0)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_12;
    }
    else
    {
      v18 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_12;
    }
    if (!*(_QWORD *)(a2 + 168))
      return;
LABEL_12:
    JSC::SlotVisitor::appendSlow(a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

void WTF::Detail::CallableWrapper<JSC::JSFinalizationRegistry::finalizeUnconditionally(JSC::VM &,JSC::CollectionScope)::$_2,void,JSC::DeferredWorkTimer::TicketData *>::call(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  uint64_t *v42;
  int v43;
  char v44;
  _QWORD v45[3];
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x28);
  *(_BYTE *)(v8 + 72) = 0;
  v10 = *(_QWORD *)(v9 + 56);
  v11 = (unsigned __int8 *)(v8 + 4);
  v41 = (uint64_t *)(v8 + 32);
  while (1)
  {
    v12 = *v11;
    if ((v12 & 0x40) != 0)
    {
      WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 4);
    }
    else
    {
      v13 = __ldaxr(v11);
      if (v13 != v12)
      {
        __clrex();
        continue;
      }
      if (__stxr(v12 | 0x40, v11))
        continue;
    }
    v14 = *(unsigned int *)(v8 + 68);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v14 - 8);
      *(_DWORD *)(v8 + 68) = v14 - 1;
      goto LABEL_38;
    }
    v16 = *v41;
    if (!*v41)
    {
      v15 = 0;
      goto LABEL_38;
    }
    if (!*(_DWORD *)(v16 - 12))
    {
      v15 = 0;
      goto LABEL_38;
    }
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = 24 * v17;
      v19 = *v41;
      while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
      {
        v19 += 24;
        v18 -= 24;
        if (!v18)
          goto LABEL_26;
      }
    }
    else
    {
      v19 = *v41;
    }
    if (v16 + 24 * v17 == v19)
    {
LABEL_26:
      v15 = 0;
      goto LABEL_38;
    }
    v20 = *(unsigned int *)(v19 + 20);
    if (!(_DWORD)v20)
      break;
    v21 = *(_QWORD *)(v19 + 8);
    v15 = *(_QWORD *)(v21 + 8 * v20 - 8);
    v22 = v20 - 1;
    *(_DWORD *)(v19 + 20) = v22;
    if (!v22)
    {
      v23 = *v41;
      if (!*v41 || (v23 += 24 * *(unsigned int *)(v23 - 4), v23 != v19))
      {
        if (v23 != v19)
        {
          *(_QWORD *)v19 = -1;
          *(_QWORD *)(v19 + 8) = 0;
          *(_DWORD *)(v19 + 16) = 0;
          WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
          ++*(_DWORD *)(*v41 - 16);
          v24 = *v41;
          v25 = *v41 ? *(_DWORD *)(v24 - 12) - 1 : -1;
          *(_DWORD *)(v24 - 12) = v25;
          v26 = *v41;
          if (*v41)
          {
            v27 = 6 * *(_DWORD *)(v26 - 12);
            v28 = *(_DWORD *)(v26 - 4);
            if (v27 < v28 && v28 >= 9)
              WTF::HashTable<JSC::B3::Variable *,WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Variable *>>::rehash(v41, v28 >> 1, 0, a4, a5, a6, a7, a8);
          }
        }
      }
    }
    do
    {
      while (1)
      {
LABEL_38:
        v30 = *v11;
        if ((v30 & 0xC0) != 0x40)
        {
          WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 4), 0, a3, a4, a5, a6, a7, a8);
          if (v15)
            goto LABEL_42;
          return;
        }
        v31 = __ldxr(v11);
        if (v31 == v30)
          break;
        __clrex();
      }
    }
    while (__stxr(v30 & 0xBF, v11));
    if (!v15)
      return;
LABEL_42:
    v44 = 0;
    v45[2] = 0;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0;
    v45[1] = &v46;
    v46 = v15;
    v45[0] = 0x800000001;
    v32 = *(_QWORD *)(v8 + 16);
    v42 = &v46;
    v43 = 1;
    JSC::call(v9, v32, (uint64_t)&v42, (uint64_t)"This should not be visible: please report a bug to bugs.webkit.org", 67, a6, a7, a8);
    if (*(_DWORD *)(v10 + 80))
    {
      v40 = *(_DWORD *)(v10 + 80);
      if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v34, v35, v36, v37, v38, v39);
      if (*(_QWORD *)(v10 + 16))
      {
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v45, v33, v34, v35, v36, v37, v38, v39);
        return;
      }
    }
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v45, v33, v34, v35, v36, v37, v38, v39);
  }
  __break(0xC471u);
}

uint64_t WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int **a4@<X8>)
{
  int8x16_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int8x16_t *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;

  v5 = *(int8x16_t **)result;
  v6 = *(_QWORD *)(result + 8);
  if (v6)
  {
    v7 = v6 - 1;
    if ((unint64_t)(v6 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D6088);
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = *a2;
  v9 = *(int8x16_t **)a3;
  v10 = *(_QWORD *)(a3 + 8);
  if (v10)
  {
    v11 = v10 - 1;
    if ((unint64_t)(v10 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1989D60B4);
    }
  }
  else
  {
    v11 = 0;
  }
  if (v8)
  {
    v12 = *(_DWORD *)(v8 + 4);
    if (v12 < 0)
    {
LABEL_13:
      *a4 = 0;
      return result;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (v13)
    goto LABEL_13;
  result = v7 + v14;
  if (__OFADD__(v7, v14))
    goto LABEL_13;
  v15 = !v8 || (*(_BYTE *)(v8 + 16) & 4) != 0;
  return WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v15, v5, v7, v8, v9, v11, a4);
}

void JSC::WeakGCSet<JSC::JSCustomGetterFunction,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>>::~WeakGCSet(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(a1 + 8);
      do
      {
        if ((unint64_t)(*(_QWORD *)v18 + 1) >= 2)
        {
          *(_QWORD *)(*(_QWORD *)v18 + 8) = 3;
          *(_QWORD *)v18 = 0;
        }
        v18 += 8;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t *JSC::WeakGCSet<JSC::JSCustomGetterFunction,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>>::pruneStaleEntries(uint64_t a1)
{
  uint64_t *result;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  int v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v2 = v3;
  if (v3)
  {
    v4 = *(_DWORD *)(v2 - 4);
    if (v4)
    {
      v5 = 0;
      v6 = v4 - 1;
      do
      {
        v7 = v6;
        v8 = *(_QWORD **)(v2 + 8 * v6);
        if ((unint64_t)v8 + 1 >= 2 && (!*v8 || (v8[1] & 3) != 0))
        {
          v8[1] = 3;
          *(_QWORD *)(v2 + 8 * v6) = -1;
          ++v5;
        }
        --v6;
      }
      while (v7);
      v9 = *result;
      if (v5)
      {
        *(_DWORD *)(v9 - 16) += v5;
        v13 = *result;
        if (*result)
          v14 = *(_DWORD *)(v13 - 12);
        else
          v14 = 0;
        *(_DWORD *)(v13 - 12) = v14 - v5;
        v9 = *result;
      }
      if (v9)
      {
        v10 = *(_DWORD *)(v9 - 4);
        v11 = 6 * *(_DWORD *)(v9 - 12);
        if (v10 >= 9 && v11 < v10)
          return (uint64_t *)WTF::HashTable<JSC::Weak<JSC::JSCustomGetterFunction>,JSC::Weak<JSC::JSCustomGetterFunction>,WTF::IdentityExtractor,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>>::shrinkToBestSize(result);
      }
    }
  }
  return result;
}

uint64_t **WTF::HashTable<JSC::Weak<JSC::JSCustomGetterFunction>,JSC::Weak<JSC::JSCustomGetterFunction>,WTF::IdentityExtractor,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::computeBestTableSize(v2);
  return WTF::HashTable<JSC::Weak<JSC::JSCustomGetterFunction>,JSC::Weak<JSC::JSCustomGetterFunction>,WTF::IdentityExtractor,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>>::rehash(a1, v3, 0, v4, v5, v6, v7, v8);
}

uint64_t **WTF::HashTable<JSC::Weak<JSC::JSCustomGetterFunction>,JSC::Weak<JSC::JSCustomGetterFunction>,WTF::IdentityExtractor,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t **result;
  uint64_t v36;
  int v37;
  uint64_t v38;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t **)(v11 + 8 * v22);
      v25 = *v24;
      if ((unint64_t)*v24 + 1 >= 2)
      {
        v26 = *v25;
        if (!*v25 || (v25[1] & 3) != 0)
        {
          v25[1] = 3;
          *v24 = 0;
          v36 = *a1;
          if (*a1)
            v37 = *(_DWORD *)(v36 - 12);
          else
            v37 = 0;
          *(_DWORD *)(v36 - 12) = v37 - 1;
        }
        else
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v38 = *(_QWORD *)(v26 + 32);
          if (*(_BYTE *)(v26 + 64))
            v29 = *(_QWORD *)(v26 + 48);
          else
            v29 = 0;
          v30 = JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>::hash(&v38, *(_QWORD *)(v26 + 40), v29);
          v31 = 0;
          do
          {
            v32 = v30 & v28;
            v30 = ++v31 + v32;
          }
          while (*(_QWORD *)(v27 + 8 * v32));
          v33 = (uint64_t **)(v27 + 8 * v32);
          v34 = *v24;
          *v24 = 0;
          *v33 = v34;
          if (*v24)
          {
            (*v24)[1] = 3;
            *v24 = 0;
          }
          if (v24 == (uint64_t **)a3)
            v23 = v33;
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

uint64_t JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>::hash(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned __int16 v24;
  char v25;

  v22 = a3;
  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 + 16);
    if ((v4 & 0x20) != 0)
      v4 = *(_DWORD *)(v3 + 32);
    v5 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                            - 1640531527);
    v6 = v5 + WORD2(a2) + (v5 >> 11);
    v7 = (a2 >> 37) & 0x7FFF800 ^ (v6 << 16);
    v8 = (v7 ^ v6) + ((v7 ^ v6) >> 11) + (unsigned __int16)(v4 >> 8);
    v9 = (v4 >> 13) & 0x7F800 ^ (v8 << 16) ^ v8;
    v10 = (a3 >> 5) & 0x7FFF800 ^ ((v9 + (unsigned __int16)a3 + (v9 >> 11)) << 16) ^ (v9
                                                                                                  + (unsigned __int16)a3
                                                                                                  + (v9 >> 11));
    v11 = v10 + WORD2(a3) + (v10 >> 11);
    v12 = (a3 >> 37) & 0x7FFF800 ^ (v11 << 16);
    v13 = (v12 ^ v11) + ((v12 ^ v11) >> 11);
  }
  else
  {
    v24 = 0;
    v25 = 0;
    v14 = (a2 >> 5) & 0x7FFF800 ^ (((unsigned __int16)a2 - 1640531527) << 16) ^ ((unsigned __int16)a2
                                                                                             - 1640531527);
    v15 = v14 + WORD2(a2) + (v14 >> 11);
    v16 = (a2 >> 37) & 0x7FFF800 ^ (v15 << 16);
    v23 = (v16 ^ v15) + ((v16 ^ v15) >> 11);
    WTF::addArgs<JSC::ClassInfo const*>(&v23, &v22);
    v13 = v23;
    if (v25)
    {
      v21 = (v23 + v24) ^ ((v23 + v24) << 11);
      v13 = v21 + (v21 >> 17);
    }
  }
  v17 = (v13 ^ (8 * v13)) + ((v13 ^ (8 * v13)) >> 5);
  v18 = (v17 ^ (4 * v17)) + ((v17 ^ (4 * v17)) >> 15);
  v19 = v18 ^ (v18 << 10);
  if (v19)
    return v19;
  else
    return 0x800000;
}

_DWORD *WTF::addArgs<JSC::ClassInfo const*>(_DWORD *result, _QWORD *a2)
{
  int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;

  v2 = *result + (unsigned __int16)*a2;
  v3 = (*a2 >> 5) & 0x7FFF800 ^ (v2 << 16) ^ v2;
  v4 = v3 + (unsigned __int16)WORD2(*a2) + (v3 >> 11);
  v5 = (*a2 >> 37) & 0x7FFF800 ^ (v4 << 16) ^ v4;
  *result = v5 + (v5 >> 11);
  return result;
}

void JSC::WeakGCSet<JSC::JSCustomSetterFunction,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>>::~WeakGCSet(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = *(_QWORD *)(a1 + 8);
      do
      {
        if ((unint64_t)(*(_QWORD *)v18 + 1) >= 2)
        {
          *(_QWORD *)(*(_QWORD *)v18 + 8) = 3;
          *(_QWORD *)v18 = 0;
        }
        v18 += 8;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  WTF::fastFree(a1, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t *JSC::WeakGCSet<JSC::JSCustomSetterFunction,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>>::pruneStaleEntries(uint64_t a1)
{
  uint64_t *result;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  int v14;

  v3 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v2 = v3;
  if (v3)
  {
    v4 = *(_DWORD *)(v2 - 4);
    if (v4)
    {
      v5 = 0;
      v6 = v4 - 1;
      do
      {
        v7 = v6;
        v8 = *(_QWORD **)(v2 + 8 * v6);
        if ((unint64_t)v8 + 1 >= 2 && (!*v8 || (v8[1] & 3) != 0))
        {
          v8[1] = 3;
          *(_QWORD *)(v2 + 8 * v6) = -1;
          ++v5;
        }
        --v6;
      }
      while (v7);
      v9 = *result;
      if (v5)
      {
        *(_DWORD *)(v9 - 16) += v5;
        v13 = *result;
        if (*result)
          v14 = *(_DWORD *)(v13 - 12);
        else
          v14 = 0;
        *(_DWORD *)(v13 - 12) = v14 - v5;
        v9 = *result;
      }
      if (v9)
      {
        v10 = *(_DWORD *)(v9 - 4);
        v11 = 6 * *(_DWORD *)(v9 - 12);
        if (v10 >= 9 && v11 < v10)
          return (uint64_t *)WTF::HashTable<JSC::Weak<JSC::JSCustomSetterFunction>,JSC::Weak<JSC::JSCustomSetterFunction>,WTF::IdentityExtractor,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>>::shrinkToBestSize(result);
      }
    }
  }
  return result;
}

uint64_t **WTF::HashTable<JSC::Weak<JSC::JSCustomSetterFunction>,JSC::Weak<JSC::JSCustomSetterFunction>,WTF::IdentityExtractor,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::computeBestTableSize(v2);
  return WTF::HashTable<JSC::Weak<JSC::JSCustomSetterFunction>,JSC::Weak<JSC::JSCustomSetterFunction>,WTF::IdentityExtractor,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>>::rehash(a1, v3, 0, v4, v5, v6, v7, v8);
}

uint64_t **WTF::HashTable<JSC::Weak<JSC::JSCustomSetterFunction>,JSC::Weak<JSC::JSCustomSetterFunction>,WTF::IdentityExtractor,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t **result;
  uint64_t v36;
  int v37;
  uint64_t v38;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t **)(v11 + 8 * v22);
      v25 = *v24;
      if ((unint64_t)*v24 + 1 >= 2)
      {
        v26 = *v25;
        if (!*v25 || (v25[1] & 3) != 0)
        {
          v25[1] = 3;
          *v24 = 0;
          v36 = *a1;
          if (*a1)
            v37 = *(_DWORD *)(v36 - 12);
          else
            v37 = 0;
          *(_DWORD *)(v36 - 12) = v37 - 1;
        }
        else
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = *(_QWORD *)(v26 + 40);
          v38 = *(_QWORD *)(v26 + 32);
          v30 = JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>::hash(&v38, v29, 0);
          v31 = 0;
          do
          {
            v32 = v30 & v28;
            v30 = ++v31 + v32;
          }
          while (*(_QWORD *)(v27 + 8 * v32));
          v33 = (uint64_t **)(v27 + 8 * v32);
          v34 = *v24;
          *v24 = 0;
          *v33 = v34;
          if (*v24)
          {
            (*v24)[1] = 3;
            *v24 = 0;
          }
          if (v24 == (uint64_t **)a3)
            v23 = v33;
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_1>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v31 = (unsigned int *)(v13 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 664);
  v38 = 67440154;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 >= *(_QWORD *)(v16 + 40144))
  {
    SlowCase = *(_QWORD *)(v16 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v35, v36, v37);
      goto LABEL_14;
    }
    v30 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v30);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v30;
  }
  *v17 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v38, (unint64_t)&JSC::JSCustomGetterFunction::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D6A80);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D6AA0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D6AE4);
  }
  v25 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v25;
  if (!v25 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v26 = v13 - 64;
      v27 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v13 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v33 = (unsigned int *)(v12 + 80);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 | 2, v33));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer::set(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D6BC0);
  }
  v4 = *(_QWORD *)result;
  v3 = *(_QWORD *)(result + 8);
  **(_QWORD **)(result + 16) = a2;
  if ((a2 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D6BE0);
  }
  if (v3)
  {
    if (*(_DWORD *)(v4 + 760) >= *(unsigned __int8 *)(v3 + 7))
      return JSC::Heap::writeBarrierSlowPath(v4 + 192, v3);
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_2>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v31 = (unsigned int *)(v13 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 664);
  v38 = 67440154;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 >= *(_QWORD *)(v16 + 40144))
  {
    SlowCase = *(_QWORD *)(v16 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v35, v36, v37);
      goto LABEL_14;
    }
    v30 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v30);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v30;
  }
  *v17 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v38, (unint64_t)&JSC::JSCustomSetterFunction::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D6DDCLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D6DFCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D6E40);
  }
  v25 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v25;
  if (!v25 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v26 = v13 - 64;
      v27 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v13 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v33 = (unsigned int *)(v12 + 80);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 | 2, v33));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_3>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v31 = (unsigned int *)(v13 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 664);
  v38 = 67440154;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 >= *(_QWORD *)(v16 + 40144))
  {
    SlowCase = *(_QWORD *)(v16 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v35, v36, v37);
      goto LABEL_14;
    }
    v30 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v30);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v30;
  }
  *v17 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v38, (unint64_t)&JSC::JSNativeStdFunction::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D70C0);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D70E0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7124);
  }
  v25 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v25;
  if (!v25 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v26 = v13 - 64;
      v27 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v13 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v33 = (unsigned int *)(v12 + 80);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 | 2, v33));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_4>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v31 = (unsigned int *)(v13 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 664);
  v38 = 67440154;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 >= *(_QWORD *)(v16 + 40144))
  {
    SlowCase = *(_QWORD *)(v16 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v35, v36, v37);
      goto LABEL_14;
    }
    v30 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v30);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v30;
  }
  *v17 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v38, (unint64_t)&JSC::JSRemoteFunction::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D73A4);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D73C4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7408);
  }
  v25 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v25;
  if (!v25 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v26 = v13 - 64;
      v27 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v13 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v33 = (unsigned int *)(v12 + 80);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 | 2, v33));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_5>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v17 = (unsigned int *)(v5 + 16);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 & 0xFFFFFFEF, v17));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  result = JSC::JSFunction::create(v8, a1[1], 0, (WTF::StringImpl **)(*(_QWORD *)(v8 + 41952) + 2512), (uint64_t)JSC::objectProtoFuncToString, 0, 73, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D75F8);
  }
  v11 = *a1;
  v10 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7618);
  }
  if (v10 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v11 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D765CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D767CLL);
  }
  v12 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v12;
  if (!v12 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v13 = v5 - 64;
      v14 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v13 + 2) = v14;
      *((_QWORD *)v13 + 4) = v14;
      if (v14)
      {
        v15 = (unsigned int *)(v5 + 16);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 | 0x10, v15));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v19 = (unsigned int *)(v4 + 80);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 | 2, v19));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_6>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v17 = (unsigned int *)(v5 + 16);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 & 0xFFFFFFEF, v17));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  result = JSC::JSFunction::create(v8, a1[1], 0, (WTF::StringImpl **)(*(_QWORD *)(v8 + 41952) + 2512), (uint64_t)JSC::arrayProtoFuncToString, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D782CLL);
  }
  v11 = *a1;
  v10 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D784CLL);
  }
  if (v10 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v11 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7890);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D78B0);
  }
  v12 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v12;
  if (!v12 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v13 = v5 - 64;
      v14 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v13 + 2) = v14;
      *((_QWORD *)v13 + 4) = v14;
      if (v14)
      {
        v15 = (unsigned int *)(v5 + 16);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 | 0x10, v15));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v19 = (unsigned int *)(v4 + 80);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 | 2, v19));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_7>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v17 = (unsigned int *)(v5 + 16);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 & 0xFFFFFFEF, v17));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  result = JSC::JSFunction::create(v8, a1[1], 0, (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v8 + 41952) + 48) + 3024), (uint64_t)JSC::arrayProtoFuncValues, 0, 24, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7A64);
  }
  v11 = *a1;
  v10 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7A84);
  }
  if (v10 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v11 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7AC8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7AE8);
  }
  v12 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v12;
  if (!v12 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v13 = v5 - 64;
      v14 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v13 + 2) = v14;
      *((_QWORD *)v13 + 4) = v14;
      if (v14)
      {
        v15 = (unsigned int *)(v5 + 16);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 | 0x10, v15));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v19 = (unsigned int *)(v4 + 80);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 | 2, v19));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_8>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  double v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  _DWORD *v33;
  __int128 v34;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v29 = (unsigned int *)(v5 + 16);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 & 0xFFFFFFEF, v29));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = JSC::BuiltinExecutables::promiseConstructorResolveCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v10 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v10[2];
  v33 = v10;
  v34 = xmmword_199125890;
  v19 = JSC::UnlinkedFunctionExecutable::link(v9, v8, 0, (uint64_t)&v33, 0, 0, 0, v11, COERCE_DOUBLE(0x249BB0002492FLL), v12, v13);
  v20 = v33;
  v33 = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  result = JSC::JSFunction::create(v8, v19, (_DWORD *)a1[1], v14, v15, v16, v17, v18);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7CFCLL);
  }
  v23 = *a1;
  v22 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7D1CLL);
  }
  if (v22 && *(_DWORD *)(v23 + 760) >= *(unsigned __int8 *)(v22 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v23 + 192, v22);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7D60);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7D80);
  }
  v24 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v24;
  if (!v24 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v25 = v5 - 64;
      v26 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v25 + 2) = v26;
      *((_QWORD *)v25 + 4) = v26;
      if (v26)
      {
        v27 = (unsigned int *)(v5 + 16);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 | 0x10, v27));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v31 = (unsigned int *)(v4 + 80);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 | 2, v31));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_9>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v13 = (unsigned int *)(v5 + 16);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 & 0xFFFFFFEF, v13));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  result = JSC::JSFunction::create(v8, a1[1], 1, (WTF::StringImpl **)(*(_QWORD *)(v8 + 41952) + 2512), (uint64_t)JSC::numberProtoFuncToString, 0, 87, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7ED4);
  }
  v11 = *a1;
  v10 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7EF4);
  }
  if (v10 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v11 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7F38);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D7F58);
  }
  v12 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v12;
  if (!v12 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v15 = v5 - 64;
      v16 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v15 + 2) = v16;
      *((_QWORD *)v15 + 4) = v16;
      if (v16)
      {
        v17 = (unsigned int *)(v5 + 16);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 | 0x10, v17));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v19 = (unsigned int *)(v4 + 80);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 | 2, v19));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_10>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x900000002;
  *(_QWORD *)(v10 + 8) = "substring";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 2, &v39, (uint64_t)JSC::stringProtoFuncSubstring, 0, 85, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D81C8);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D81E8);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8224);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8244);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D82E0);
  }
  v4 = *(_QWORD *)result;
  v3 = *(_QWORD *)(result + 8);
  **(_QWORD **)(result + 16) = a2;
  if ((a2 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8300);
  }
  if (v3)
  {
    if (*(_DWORD *)(v4 + 760) >= *(unsigned __int8 *)(v3 + 7))
      return JSC::Heap::writeBarrierSlowPath(v4 + 192, v3);
  }
  return result;
}

unint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::GetterSetter>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_11>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  JSC::JSObject *v9;
  uint64_t v10;
  const JSC::PropertyTable *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  JSC::JSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  unint64_t v22;
  JSC::VM *v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v29 = (unsigned int *)(v5 + 16);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 & 0xFFFFFFEF, v29));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (JSC::JSObject *)JSC::JSFunction::create(v8, a1[1], 0, (WTF::StringImpl **)&WTF::emptyStringData, (uint64_t)JSC::globalFuncThrowTypeErrorArgumentsCalleeAndCaller, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::freeze(v9, (JSC::VM *)*a1, v10, v11, v12, v13, v14, v15, v16);
  result = JSC::GetterSetter::create((JSC::GetterSetter *)*a1, (JSC::VM *)a1[1], v9, v9, v17, v18, v19, v20);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8484);
  }
  v23 = (JSC::VM *)*a1;
  v22 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D84A4);
  }
  if (v22 && *((_DWORD *)v23 + 190) >= *(unsigned __int8 *)(v22 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v23 + 192, v22);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D84E8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8508);
  }
  v24 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v24;
  if (!v24 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v25 = v5 - 64;
      v26 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v25 + 2) = v26;
      *((_QWORD *)v25 + 4) = v26;
      if (v26)
      {
        v27 = (unsigned int *)(v5 + 16);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 | 0x10, v27));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v31 = (unsigned int *)(v4 + 80);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 | 2, v31));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSTypedArrayViewPrototype>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_12>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t result;
  int v30;
  _BYTE *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  void (*v35)(_QWORD *);
  _QWORD *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  _QWORD v41[3];

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v37 = (unsigned int *)(v13 + 16);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 & 0xFFFFFFEF, v37));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = JSC::JSTypedArrayViewPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v25 = JSC::JSTypedArrayViewPrototype::create((JSC::JSTypedArrayViewPrototype *)v16, (JSC::VM *)v17, Structure, v19, v20, v21, v22, v23, v24);
  if (!v25)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D86C0);
  }
  v27 = *a1;
  v26 = (unint64_t)a1[1];
  *a1[2] = v25;
  if ((v25 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D86E0);
  }
  if (v26 && *((_DWORD *)v27 + 190) >= *(unsigned __int8 *)(v26 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v27 + 24), v26);
    v26 = (unint64_t)a1[1];
  }
  v28 = *(_QWORD *)(v26 + 1656);
  if ((v28 & 1) != 0)
  {
    v35 = *(void (**)(_QWORD *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
    v36 = (_QWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v26 & 8) != 0)
      v36 = (_QWORD *)(v26 - 16);
    v41[0] = *v36;
    v41[1] = v26;
    v41[2] = v26 + 1656;
    v35(v41);
  }
  result = *a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8758);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8778);
  }
  v30 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v30;
  if (!v30 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v31 = v13 - 64;
      v32 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v31 + 2) = v32;
      *((_QWORD *)v31 + 4) = v32;
      if (v32)
      {
        v33 = (unsigned int *)(v13 + 16);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 | 0x10, v33));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v39 = (unsigned int *)(v12 + 10);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 | 2, v39));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSTypedArrayViewConstructor>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_13>(JSC **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  JSC *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC *v18;
  uint64_t *v19;
  JSC::VM *v20;
  uint64_t Structure;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::JSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  unint64_t v33;
  unint64_t *v34;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t (*v41)(_QWORD *);
  unint64_t *v42;
  unint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t SlowCase;
  _QWORD v53[3];

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (char *)*a1 + 64;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14)
  {
    v15 = *((_QWORD *)v13 - 6);
    if (v15)
    {
      if (*((_QWORD *)v13 - 5) == v15)
      {
        *((_QWORD *)v13 - 6) = 0;
        v44 = (unsigned int *)(v13 + 16);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 & 0xFFFFFFEF, v44));
        *((_BYTE *)v12 + 86) = 1;
        v9 = (uint64_t *)a1[2];
        v10 = *v9;
      }
    }
  }
  *v9 = v10 | 2;
  v16 = (uint64_t)a1[1];
  v17 = *(_QWORD *)(v16 + 1648);
  if ((v17 & 1) != 0)
  {
    v41 = *(uint64_t (**)(_QWORD *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v42 = (unint64_t *)(v16 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v16 & 8) != 0)
      v42 = (unint64_t *)(v16 - 16);
    v53[0] = *v42;
    v53[1] = v16;
    v53[2] = v16 + 1648;
    v17 = v41(v53);
    v16 = (uint64_t)a1[1];
  }
  v18 = *a1;
  v19 = (uint64_t *)((char *)*a1 + 38552);
  Structure = JSC::JSTypedArrayViewConstructor::createStructure((unint64_t *)*a1, (JSC::VM *)v16, *(_QWORD *)(v16 + 664), a5, a6, a7, a8, a9, a2);
  v27 = *v19;
  if (*v19 >= (unint64_t)v19[1])
  {
    v27 = v19[2];
    if ((v27 & 1) != 0)
    {
      v48 = Structure;
      JSC::sanitizeStackForVM(v18, v20, Structure, v22, v23, v24, v25, v26);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v18 + 38528, (uint64_t)v18 + 192, 48, 0, 0, v49, v50, v51);
      Structure = v48;
      v27 = SlowCase;
      goto LABEL_7;
    }
    v43 = *(_QWORD *)(v27 + 8) ^ v19[3];
    v19[1] = v27 + HIDWORD(v43);
    v19[2] = v27 + (int)v43;
  }
  *v19 = v27 + 48;
LABEL_7:
  *(_DWORD *)v27 = 0;
  v28 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v27, (uint64_t)v18, Structure, (uint64_t)JSC::constructTypedArrayView, JSC::constructTypedArrayView);
  JSC::JSTypedArrayViewConstructor::finishCreation(v28, v18, v16, v17);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v17, (uint64_t)*a1, *(_QWORD *)(*((_QWORD *)*a1 + 5244) + 1080), v27, 4, v29, v30, v31, v32);
  v34 = (unint64_t *)*a1;
  v33 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = v27;
  if ((v27 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D89F0);
  }
  if (v33 && *((_DWORD *)v34 + 190) >= *(unsigned __int8 *)(v33 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v34 + 24), v33);
    v27 = *(_QWORD *)a1[2];
  }
  if ((v27 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8A10);
  }
  if ((v27 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8A54);
  }
  v35 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v35;
  if (!v35 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v36 = v13 - 64;
      v37 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v36 + 2) = v37;
      *((_QWORD *)v36 + 4) = v37;
      if (v37)
      {
        v38 = (unsigned int *)(v13 + 16);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 | 0x10, v38));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v46 = (unsigned int *)((char *)v12 + 80);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 | 2, v46));
    }
  }
  return v27;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_14>(JSC::JSGlobalObject::init(JSC::VM &)::$_14 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  JSC::Structure *Structure;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  JSC *v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  JSC::JSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  unint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t result;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(WTF::StringImpl **);
  WTF::StringImpl **v77;
  unint64_t v78;
  uint64_t (*v79)(WTF::StringImpl **);
  WTF::StringImpl **v80;
  unint64_t v81;
  void (*v82)(WTF::StringImpl **);
  WTF::StringImpl **v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  JSC::JSObject *v98;
  uint64_t v99;
  unint64_t v100;
  WTF::StringImpl *v101;
  JSC::VM *v102;
  char *v103;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v84 = (unsigned int *)(v13 + 16);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 & 0xFFFFFFEF, v84));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v94 = (JSC *)v16;
  v95 = v18;
  v96 = v9;
  v97 = a1;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  v19 = *(_QWORD *)(v18 + 1648);
  if ((v19 & 1) != 0)
  {
    v76 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v77 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v77 = (WTF::StringImpl **)(v18 - 16);
    v101 = *v77;
    v102 = (JSC::VM *)v18;
    v103 = (char *)(v18 + 1648);
    v19 = v76(&v101);
  }
  LODWORD(v101) = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v78 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v78);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v78;
LABEL_11:
    *v17 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v88, v89, v90);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v26 = JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>::create((_QWORD *)v16, (JSC::VM *)v18, SlowCase, v21, v22, v23, v24, v25);
  if (v98)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8EA8);
  }
  if (v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8EC8);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8EE8);
  }
  v98 = (JSC::JSObject *)v26;
  Structure = (JSC::Structure *)JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createStructure(v94, (JSC::VM *)v95, v26);
  JSC::LazyClassStructure::Initializer::setStructure(&v94, Structure);
  v37 = v94;
  v36 = v95;
  v38 = (unint64_t *)((char *)v94 + 40136);
  v39 = *(_QWORD *)(v95 + 1656);
  if ((v39 & 1) != 0)
  {
    v79 = *(uint64_t (**)(WTF::StringImpl **))(v39 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v95 & 8) != 0)
      v80 = (WTF::StringImpl **)(v95 - 16);
    else
      v80 = (WTF::StringImpl **)(v95 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v80;
    v102 = (JSC::VM *)v95;
    v103 = (char *)(v95 + 1656);
    v39 = v79(&v101);
  }
  LODWORD(v101) = 67099;
  if ((v39 & 0xFFFE000000000002) == 0 && v39 && *(unsigned __int8 *)(v39 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v39, v37, v35, v29, v30, v31, v32, v33, v34);
  v40 = *v38;
  if (*v38 >= v38[1])
  {
    v40 = v38[2];
    if ((v40 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v37, v28, v29, v30, v31, v32, v33, v34);
      v40 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v37 + 40112, (uint64_t)v37 + 192, 128, 0, 0, v91, v92, v93);
      goto LABEL_24;
    }
    v81 = *(_QWORD *)(v40 + 8) ^ v38[3];
    v38[1] = v40 + HIDWORD(v81);
    v38[2] = v40 + (int)v81;
  }
  *v38 = v40 + 128;
LABEL_24:
  *(_DWORD *)v40 = 0;
  JSC::Structure::Structure(v40, (uint64_t)v37, v36, v39, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>::s_info, 0, 0);
  if (*((_BYTE *)v37 + 755))
    __dmb(0xAu);
  v41 = v98;
  v42 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v42 = 0x900000002;
  *(_QWORD *)(v42 + 8) = "Int8Array";
  *(_DWORD *)(v42 + 16) = 4;
  v101 = (WTF::StringImpl *)v42;
  v47 = JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>::create(v37, (JSC::VM *)v40, (uint64_t)v41, (JSC::VM *)&v101, v43, v44, v45, v46);
  if (!v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8F68);
  }
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8F88);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D8FA8);
  }
  v52 = v47;
  v100 = v47;
  JSC::JSObject::putDirectWithoutTransition(v41, (uint64_t)v37, *(_QWORD *)(v38[227] + 1080), v47, 4, v48, v49, v50, v51);
  v96[1] = v52;
  if (v52 && *((_DWORD *)v37 + 190) >= *(unsigned __int8 *)(v36 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v37 + 192, v36);
  v60 = v101;
  v101 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = *(_QWORD *)(v36 + 1680);
  if ((v61 & 1) != 0)
  {
    v82 = *(void (**)(WTF::StringImpl **))(v61 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v36 & 8) != 0)
      v83 = (WTF::StringImpl **)(v36 - 16);
    else
      v83 = (WTF::StringImpl **)(v36 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v83;
    v102 = (JSC::VM *)v36;
    v103 = (char *)(v36 + 1680);
    v82(&v101);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D9018);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D9038);
  }
  v63 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v63;
  if (!v63 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v64 = v13 - 64;
      v65 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v64 + 2) = v65;
      *((_QWORD *)v64 + 4) = v65;
      if (v65)
      {
        v66 = (unsigned int *)(v13 + 16);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 | 0x10, v66));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v86 = (unsigned int *)(v12 + 80);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 | 2, v86));
    }
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>::create(_QWORD *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  v11 = JSC::allocateCell<JSC::IntlCollatorPrototype>(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v11 = a3 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>::finishCreation((JSC::JSObject *)v11, (uint64_t)a1, (uint64_t)a2, v18, v13, v14, v15, v16, v17);
  return v11;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **Int8ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019239;
  Int8ArrayClassInfo = JSC::getInt8ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)Int8ArrayClassInfo, 0, 0, v7, v8);
}

unint64_t JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>::create(JSC *a1, JSC::VM *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  JSC::JSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = JSC::allocateCell<JSC::AggregateErrorConstructor>(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v12, (uint64_t)a1, (unint64_t)a2, (uint64_t)JSC::callInt8Array, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructInt8Array);
  JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>::finishCreation(v13, a1, a3, a4, v14, v15, v16, v17);
  return v12;
}

uint64_t *JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>::finishCreation(JSC::JSObject *a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const JSC::PropertyTable *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 528), 0xFFFE000000000001, 14, a7, a8, a9, a4);
  return JSC::JSGlobalObject::installTypedArrayIteratorProtocolWatchpoint(a3, (uint64_t)a1, 1, v11, v12, v13, v14, v15);
}

void JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)3, a4, 1, a6, a7, a8);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v11, v12, v13, v14);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 528), 0xFFFE000000000001, 14, v15, v16, v17, v18);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_15>(JSC **a1)
{
  uint64_t *v1;
  uint64_t v2;
  JSC *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  JSC *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  unint64_t v13;
  JSC *v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t *);
  uint64_t *v23;
  void (*v24)(uint64_t *);
  uint64_t *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  JSC::VM *v31;
  _QWORD *v32;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (char *)*a1 + 64;
  v6 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *((_BYTE *)v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (unint64_t)a1[1];
  v10 = *(_QWORD *)(v9 + 1664);
  if ((v10 & 1) != 0)
  {
    v22 = *(uint64_t (**)(uint64_t *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v9 & 8) != 0)
      v23 = (uint64_t *)(v9 - 16);
    v30 = *v23;
    v31 = (JSC::VM *)v9;
    v32 = (_QWORD *)(v9 + 1664);
    v10 = v22(&v30);
  }
  if (*(_QWORD *)(v10 + 48) == 2)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v10 + 48);
  Structure = JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Int8Adaptor>::createStructure(v8, (JSC::VM *)v9, v11);
  if (!Structure)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D94DCLL);
  }
  v14 = *a1;
  v13 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = Structure;
  if ((Structure & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D94FCLL);
  }
  if (*((_DWORD *)v14 + 190) >= *(unsigned __int8 *)(v13 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v14 + 192, v13);
    v13 = (unint64_t)a1[1];
  }
  v15 = *(_QWORD *)(v13 + 1664);
  if ((v15 & 1) != 0)
  {
    v24 = *(void (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v25 = (uint64_t *)(v13 - 16);
    v30 = *v25;
    v31 = (JSC::VM *)v13;
    v32 = (_QWORD *)(v13 + 1664);
    v24(&v30);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D9554);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D9574);
  }
  v17 = *((_DWORD *)v4 + 22) - 1;
  *((_DWORD *)v4 + 22) = v17;
  if (!v17 && v5[93377])
  {
    if (*((_BYTE *)v4 + 86))
    {
      v18 = v5 - 64;
      v19 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v18 + 2) = v19;
      *((_QWORD *)v18 + 4) = v19;
      if (v19)
      {
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 | 0x10, v20));
      }
      if (v5[93379])
        v5[93378] = 1;
      *((_BYTE *)v4 + 86) = 0;
    }
    else
    {
      v28 = (unsigned int *)((char *)v4 + 80);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 | 2, v28));
    }
  }
  return result;
}

uint64_t JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Int8Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **ResizableOrGrowableSharedInt8ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019239;
  ResizableOrGrowableSharedInt8ArrayClassInfo = JSC::getResizableOrGrowableSharedInt8ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)ResizableOrGrowableSharedInt8ArrayClassInfo, 0, 0, v7, v8);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_16>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void (*v18)(_QWORD *, unint64_t);
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[3];

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *((_QWORD *)v5 - 6);
    if (v7)
    {
      if (*((_QWORD *)v5 - 5) == v7)
      {
        *((_QWORD *)v5 - 6) = 0;
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 & 0xFFFFFFEF, v20));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 1664);
  v10 = v8;
  if ((v9 & 1) != 0)
  {
    v18 = *(void (**)(_QWORD *, unint64_t))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v8 & 8) != 0)
      v19 = (_QWORD *)(v8 - 16);
    v24[0] = *v19;
    v24[1] = v8;
    v24[2] = v8 + 1664;
    v18(v24, v8);
    v10 = a1[1];
  }
  result = *(_QWORD *)(v8 + 1672);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D97A0);
  }
  v12 = *a1;
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D97C0);
  }
  if (v10 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D9804);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D9824);
  }
  v13 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v13;
  if (!v13 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v14 = v5 - 64;
      v15 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v14 + 2) = v15;
      *((_QWORD *)v14 + 4) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 | 0x10, v16));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v22 = (unsigned int *)(v4 + 80);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 | 2, v22));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_17>(JSC::JSGlobalObject::init(JSC::VM &)::$_17 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t SlowCase;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;
  int v31;
  const JSC::PropertyTable *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  JSC *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  JSC::VM *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  unint64_t v57;
  JSC *v58;
  unint64_t *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  JSC::JSObject *v63;
  uint64_t v64;
  JSC::VM *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  uint64_t result;
  int v99;
  _BYTE *v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::AtomStringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  WTF::StringImpl *v123;
  WTF::AtomStringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::AtomStringImpl *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  WTF::StringImpl *v142;
  WTF::AtomStringImpl *v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t (*v177)(WTF::StringImpl **);
  WTF::StringImpl **v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t (*v182)(WTF::StringImpl **);
  WTF::StringImpl **v183;
  unint64_t v184;
  unint64_t v185;
  void (*v186)(WTF::StringImpl **);
  WTF::StringImpl **v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int *v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _BYTE *v207;
  JSC *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  JSC::JSObject *v212;
  uint64_t v213;
  unint64_t v214;
  WTF::StringImpl *v215;
  unint64_t v216;
  uint64_t v217;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v207 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v188 = (unsigned int *)(v13 + 16);
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 & 0xFFFFFFEF, v188));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v208 = (JSC *)v16;
  v209 = v18;
  v210 = v9;
  v211 = a1;
  v213 = 0;
  v214 = 0;
  v212 = 0;
  v19 = *(_QWORD *)(v18 + 1648);
  if ((v19 & 1) != 0)
  {
    v177 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v18 & 8) != 0)
      v178 = (WTF::StringImpl **)(v18 - 16);
    else
      v178 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    v215 = *v178;
    v216 = v18;
    v217 = v18 + 1648;
    v19 = v177(&v215);
  }
  LODWORD(v215) = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  v20 = (unint64_t *)(v16 + 38904);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v179 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v179);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v179;
LABEL_11:
    *v17 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v192, v193, v194);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v215, (unint64_t)&JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v30 = *v20;
  if (*v20 < *(_QWORD *)(v16 + 38912))
    goto LABEL_15;
  v30 = *(_QWORD *)(v16 + 38920);
  if ((v30 & 1) == 0)
  {
    v180 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v16 + 38928);
    *(_QWORD *)(v16 + 38912) = v30 + HIDWORD(v180);
    *(_QWORD *)(v16 + 38920) = v30 + (int)v180;
LABEL_15:
    *v20 = v30 + 16;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v22, v23, v24, v25, v26, v27, v28);
  v30 = JSC::LocalAllocator::allocateSlowCase(v16 + 38880, v16 + 192, 16, 0, 0, v195, v196, v197);
LABEL_16:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v30, v16, *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 528), 0xFFFE000000000001, 14, v26, v27, v28, v29);
  if ((_BYTE)dword_1ECF4C7B0)
  {
    JSC::Identifier::add(v16, "toBase64", 9, (uint64_t)v32, v33, v34, v35, v36, &v215);
    v112 = v215;
    if (!v215 || (*((_BYTE *)v215 + 16) & 0x20) != 0)
    {
      v113 = *(WTF::StringImpl **)(*(_QWORD *)(v16 + 41952) + 872);
      if (!v113)
      {
LABEL_67:
        v215 = v113;
        v121 = JSC::JSFunction::create(v16, v18, 0, &v215, (uint64_t)JSC::uint8ArrayPrototypeToBase64, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
        v123 = v215;
        v215 = 0;
        if (v123)
        {
          if (*(_DWORD *)v123 == 2)
          {
            WTF::StringImpl::~StringImpl(v123, v114, v115, v116, v117, v118, v119, v120);
            WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
          }
          else
          {
            *(_DWORD *)v123 -= 2;
          }
        }
        JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v30, v16, (unint64_t)v112, v121, 4, v118, v119, v120, v122);
        if (v112)
        {
          if (*(_DWORD *)v112 == 2)
          {
            WTF::StringImpl::~StringImpl(v112, v124, v125, v126, v127, v128, v129, v130);
            WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
          }
          else
          {
            *(_DWORD *)v112 -= 2;
          }
        }
        JSC::Identifier::add(v16, "toHex", 6, v126, v127, v128, v129, v130, &v215);
        v131 = v215;
        if (!v215 || (*((_BYTE *)v215 + 16) & 0x20) != 0)
        {
          v132 = *(WTF::StringImpl **)(*(_QWORD *)(v16 + 41952) + 872);
          if (!v132)
            goto LABEL_77;
        }
        else
        {
          v132 = v215;
        }
        *(_DWORD *)v132 += 2;
LABEL_77:
        v215 = v132;
        v140 = JSC::JSFunction::create(v16, v18, 0, &v215, (uint64_t)JSC::uint8ArrayPrototypeToHex, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
        v142 = v215;
        v215 = 0;
        if (v142)
        {
          if (*(_DWORD *)v142 == 2)
          {
            WTF::StringImpl::~StringImpl(v142, v133, v134, v135, v136, v137, v138, v139);
            WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
          }
          else
          {
            *(_DWORD *)v142 -= 2;
          }
        }
        JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v30, v16, (unint64_t)v131, v140, 4, v137, v138, v139, v141);
        if (v131)
        {
          if (*(_DWORD *)v131 == 2)
          {
            WTF::StringImpl::~StringImpl(v131, v143, v144, (uint64_t)v32, v33, v34, v35, v36);
            WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
          }
          else
          {
            *(_DWORD *)v131 -= 2;
          }
        }
        goto LABEL_19;
      }
    }
    else
    {
      v113 = v215;
    }
    *(_DWORD *)v113 += 2;
    goto LABEL_67;
  }
LABEL_19:
  JSC::JSGlobalObject::installTypedArrayIteratorProtocolWatchpoint(v18, v30, 2, v32, v33, v34, v35, v36);
  if (v212)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D9FBCLL);
  }
  if (v213)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D9FDCLL);
  }
  if (v214)
  {
    __break(0xC471u);
    JUMPOUT(0x1989D9FFCLL);
  }
  v212 = (JSC::JSObject *)v30;
  v45 = v208;
  v46 = v209;
  v47 = (unint64_t *)((char *)v208 + 40136);
  LODWORD(v215) = 84019240;
  if ((v30 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v30 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v30, v208, v44, v38, v39, v40, v41, v42, v43);
  v48 = *v47;
  if (*((_QWORD *)v208 + 5017) < *((_QWORD *)v208 + 5018))
    goto LABEL_26;
  v48 = *((_QWORD *)v208 + 5019);
  if ((v48 & 1) == 0)
  {
    v181 = *(_QWORD *)(v48 + 8) ^ *((_QWORD *)v208 + 5020);
    *((_QWORD *)v208 + 5018) = v48 + HIDWORD(v181);
    v47[2] = v48 + (int)v181;
LABEL_26:
    *v47 = v48 + 128;
    goto LABEL_27;
  }
  JSC::sanitizeStackForVM(v208, v37, v38, v39, v40, v41, v42, v43);
  v48 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v208 + 40112, (uint64_t)v208 + 192, 128, 0, 0, v198, v199, v200);
LABEL_27:
  *(_DWORD *)v48 = 0;
  JSC::Structure::Structure(v48, (uint64_t)v45, v46, v30, (uint64_t)&v215, (unint64_t)&JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::s_info, 0, 0);
  if (*((_BYTE *)v45 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v208, (JSC::Structure *)v48);
  v58 = v208;
  v57 = v209;
  v59 = (unint64_t *)((char *)v208 + 40136);
  v60 = *(_QWORD *)(v209 + 1656);
  if ((v60 & 1) != 0)
  {
    v182 = *(uint64_t (**)(WTF::StringImpl **))(v60 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v209 & 8) != 0)
      v183 = (WTF::StringImpl **)(v209 - 16);
    else
      v183 = (WTF::StringImpl **)(v209 & 0xFFFFFFFFFFFFC000 | 8);
    v215 = *v183;
    v216 = v209;
    v217 = v209 + 1656;
    v60 = v182(&v215);
  }
  LODWORD(v215) = 67099;
  if ((v60 & 0xFFFE000000000002) == 0 && v60 && *(unsigned __int8 *)(v60 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v60, v58, v56, v50, v51, v52, v53, v54, v55);
  v61 = (unint64_t *)((char *)v58 + 38552);
  v62 = *v59;
  if (*v59 < v59[1])
    goto LABEL_35;
  v62 = v59[2];
  if ((v62 & 1) == 0)
  {
    v184 = *(_QWORD *)(v62 + 8) ^ v59[3];
    v59[1] = v62 + HIDWORD(v184);
    v59[2] = v62 + (int)v184;
LABEL_35:
    *v59 = v62 + 128;
    goto LABEL_36;
  }
  JSC::sanitizeStackForVM(v58, v49, v50, v51, v52, v53, v54, v55);
  v62 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v58 + 40112, (uint64_t)v58 + 192, 128, 0, 0, v201, v202, v203);
LABEL_36:
  *(_DWORD *)v62 = 0;
  JSC::Structure::Structure(v62, (uint64_t)v58, v57, v60, (uint64_t)&v215, (unint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>::s_info, 0, 0);
  if (*((_BYTE *)v58 + 755))
    __dmb(0xAu);
  v63 = v212;
  v64 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v64 = 0xA00000002;
  *(_QWORD *)(v64 + 8) = "Uint8Array";
  *(_DWORD *)(v64 + 16) = 4;
  v215 = (WTF::StringImpl *)v64;
  v72 = *v61;
  if (*v61 >= *((_QWORD *)v58 + 4820))
  {
    v72 = *((_QWORD *)v58 + 4821);
    if ((v72 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v58, v65, v66, v67, v68, v69, v70, v71);
      v72 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v58 + 38528, (uint64_t)v58 + 192, 48, 0, 0, v204, v205, v206);
      goto LABEL_40;
    }
    v185 = *(_QWORD *)(v72 + 8) ^ *((_QWORD *)v58 + 4822);
    *((_QWORD *)v58 + 4820) = v72 + HIDWORD(v185);
    *((_QWORD *)v58 + 4821) = v72 + (int)v185;
  }
  *v61 = v72 + 48;
LABEL_40:
  *(_DWORD *)v72 = 0;
  v73 = JSC::InternalFunction::InternalFunction(v72, (uint64_t)v58, v62, (uint64_t)JSC::callUint8Array, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructUint8Array);
  JSC::InternalFunction::finishCreation(v73, v58, (const WTF::String *)3, (JSC::VM *)&v215, 1, v74, v75, v76);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v72, (uint64_t)v58, *(_QWORD *)(v59[227] + 2160), (uint64_t)v63, 14, v77, v78, v79, v80);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v72, (uint64_t)v58, *(_QWORD *)(v59[227] + 528), 0xFFFE000000000001, 14, v81, v82, v83, v84);
  if (!v213)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DA0CCLL);
  }
  if (!v63)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DA0ECLL);
  }
  if (v214)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DA10CLL);
  }
  v214 = v72;
  JSC::JSObject::putDirectWithoutTransition(v63, (uint64_t)v58, *(_QWORD *)(v59[227] + 1080), v72, 4, v85, v86, v87, v88);
  v210[1] = v72;
  if (*((_DWORD *)v58 + 190) >= *(unsigned __int8 *)(v57 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v58 + 192, v57);
  v96 = v215;
  v215 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = *(_QWORD *)(v57 + 1704);
  if ((v97 & 1) != 0)
  {
    v186 = *(void (**)(WTF::StringImpl **))(v97 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v57 & 8) != 0)
      v187 = (WTF::StringImpl **)(v57 - 16);
    else
      v187 = (WTF::StringImpl **)(v57 & 0xFFFFFFFFFFFFC000 | 8);
    v215 = *v187;
    v216 = v57;
    v217 = v57 + 1704;
    v186(&v215);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DA15CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DA17CLL);
  }
  v99 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v99;
  if (!v99 && v207[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v100 = v207 - 64;
      v101 = *((_QWORD *)v207 - 5);
      *((_QWORD *)v100 + 2) = v101;
      *((_QWORD *)v100 + 4) = v101;
      if (v101)
      {
        v102 = (unsigned int *)(v207 + 16);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 | 0x10, v102));
      }
      if (v207[93379])
        v207[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v190 = (unsigned int *)(v12 + 80);
      do
        v191 = __ldaxr(v190);
      while (__stlxr(v191 | 2, v190));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_18>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t SlowCase;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t (*v33)(uint64_t *);
  uint64_t *v34;
  unint64_t v35;
  void (*v36)(uint64_t *);
  uint64_t *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v38 = (unsigned int *)(v13 + 16);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 & 0xFFFFFFEF, v38));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 1688);
  if ((v19 & 1) != 0)
  {
    v33 = *(uint64_t (**)(uint64_t *))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v34 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v34 = (uint64_t *)(v18 - 16);
    v45 = *v34;
    v46 = v18;
    v47 = v18 + 1688;
    v19 = v33(&v45);
  }
  if (*(_QWORD *)(v19 + 48) == 2)
    v20 = 0;
  else
    v20 = *(_QWORD *)(v19 + 48);
  LODWORD(v45) = 84019240;
  if ((v20 & 0xFFFE000000000002) == 0 && v20 && *(unsigned __int8 *)(v20 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v20, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 >= *(_QWORD *)(v16 + 40144))
  {
    SlowCase = *(_QWORD *)(v16 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v42, v43, v44);
      goto LABEL_18;
    }
    v35 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v35);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v35;
  }
  *v17 = SlowCase + 128;
LABEL_18:
  *(_DWORD *)SlowCase = 0;
  v23 = JSC::Structure::Structure(SlowCase, v16, v18, v20, (uint64_t)&v45, (unint64_t)&JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Uint8Adaptor>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v25 = *a1;
  v24 = a1[1];
  *(_QWORD *)a1[2] = v23;
  if ((v23 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DA53CLL);
  }
  if (*(_DWORD *)(v25 + 760) >= *(unsigned __int8 *)(v24 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v25 + 192, v24);
    v24 = a1[1];
  }
  v26 = *(_QWORD *)(v24 + 1688);
  if ((v26 & 1) != 0)
  {
    v36 = *(void (**)(uint64_t *))(v26 & 0xFFFFFFFFFFFFFFFCLL);
    v37 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v24 & 8) != 0)
      v37 = (uint64_t *)(v24 - 16);
    v45 = *v37;
    v46 = v24;
    v47 = v24 + 1688;
    v36(&v45);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DA594);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DA5B4);
  }
  v28 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v28;
  if (!v28 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v29 = v13 - 64;
      v30 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v29 + 2) = v30;
      *((_QWORD *)v29 + 4) = v30;
      if (v30)
      {
        v31 = (unsigned int *)(v13 + 16);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 | 0x10, v31));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v40 = (unsigned int *)(v12 + 80);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 | 2, v40));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_19>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void (*v18)(_QWORD *, unint64_t);
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[3];

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *((_QWORD *)v5 - 6);
    if (v7)
    {
      if (*((_QWORD *)v5 - 5) == v7)
      {
        *((_QWORD *)v5 - 6) = 0;
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 & 0xFFFFFFEF, v20));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 1688);
  v10 = v8;
  if ((v9 & 1) != 0)
  {
    v18 = *(void (**)(_QWORD *, unint64_t))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v8 & 8) != 0)
      v19 = (_QWORD *)(v8 - 16);
    v24[0] = *v19;
    v24[1] = v8;
    v24[2] = v8 + 1688;
    v18(v24, v8);
    v10 = a1[1];
  }
  result = *(_QWORD *)(v8 + 1696);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DA7BCLL);
  }
  v12 = *a1;
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DA7DCLL);
  }
  if (v10 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DA820);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DA840);
  }
  v13 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v13;
  if (!v13 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v14 = v5 - 64;
      v15 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v14 + 2) = v15;
      *((_QWORD *)v14 + 4) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 | 0x10, v16));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v22 = (unsigned int *)(v4 + 80);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 | 2, v22));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_20>(JSC::JSGlobalObject::init(JSC::VM &)::$_20 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  JSC::Structure *Structure;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  JSC *v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  JSC::JSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  unint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t result;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(WTF::StringImpl **);
  WTF::StringImpl **v77;
  unint64_t v78;
  uint64_t (*v79)(WTF::StringImpl **);
  WTF::StringImpl **v80;
  unint64_t v81;
  void (*v82)(WTF::StringImpl **);
  WTF::StringImpl **v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  JSC::JSObject *v98;
  uint64_t v99;
  unint64_t v100;
  WTF::StringImpl *v101;
  JSC::VM *v102;
  char *v103;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v84 = (unsigned int *)(v13 + 16);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 & 0xFFFFFFEF, v84));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v94 = (JSC *)v16;
  v95 = v18;
  v96 = v9;
  v97 = a1;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  v19 = *(_QWORD *)(v18 + 1648);
  if ((v19 & 1) != 0)
  {
    v76 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v77 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v77 = (WTF::StringImpl **)(v18 - 16);
    v101 = *v77;
    v102 = (JSC::VM *)v18;
    v103 = (char *)(v18 + 1648);
    v19 = v76(&v101);
  }
  LODWORD(v101) = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v78 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v78);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v78;
LABEL_11:
    *v17 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v88, v89, v90);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v26 = JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>::create((_QWORD *)v16, (JSC::VM *)v18, SlowCase, v21, v22, v23, v24, v25);
  if (v98)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DAC50);
  }
  if (v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DAC70);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DAC90);
  }
  v98 = (JSC::JSObject *)v26;
  Structure = (JSC::Structure *)JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createStructure(v94, (JSC::VM *)v95, v26);
  JSC::LazyClassStructure::Initializer::setStructure(&v94, Structure);
  v37 = v94;
  v36 = v95;
  v38 = (unint64_t *)((char *)v94 + 40136);
  v39 = *(_QWORD *)(v95 + 1656);
  if ((v39 & 1) != 0)
  {
    v79 = *(uint64_t (**)(WTF::StringImpl **))(v39 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v95 & 8) != 0)
      v80 = (WTF::StringImpl **)(v95 - 16);
    else
      v80 = (WTF::StringImpl **)(v95 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v80;
    v102 = (JSC::VM *)v95;
    v103 = (char *)(v95 + 1656);
    v39 = v79(&v101);
  }
  LODWORD(v101) = 67099;
  if ((v39 & 0xFFFE000000000002) == 0 && v39 && *(unsigned __int8 *)(v39 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v39, v37, v35, v29, v30, v31, v32, v33, v34);
  v40 = *v38;
  if (*v38 >= v38[1])
  {
    v40 = v38[2];
    if ((v40 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v37, v28, v29, v30, v31, v32, v33, v34);
      v40 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v37 + 40112, (uint64_t)v37 + 192, 128, 0, 0, v91, v92, v93);
      goto LABEL_24;
    }
    v81 = *(_QWORD *)(v40 + 8) ^ v38[3];
    v38[1] = v40 + HIDWORD(v81);
    v38[2] = v40 + (int)v81;
  }
  *v38 = v40 + 128;
LABEL_24:
  *(_DWORD *)v40 = 0;
  JSC::Structure::Structure(v40, (uint64_t)v37, v36, v39, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>::s_info, 0, 0);
  if (*((_BYTE *)v37 + 755))
    __dmb(0xAu);
  v41 = v98;
  v42 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v42 = 0x1100000002;
  *(_QWORD *)(v42 + 8) = "Uint8ClampedArray";
  *(_DWORD *)(v42 + 16) = 4;
  v101 = (WTF::StringImpl *)v42;
  v47 = JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>::create(v37, (JSC::VM *)v40, (uint64_t)v41, (JSC::VM *)&v101, v43, v44, v45, v46);
  if (!v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DAD10);
  }
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DAD30);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DAD50);
  }
  v52 = v47;
  v100 = v47;
  JSC::JSObject::putDirectWithoutTransition(v41, (uint64_t)v37, *(_QWORD *)(v38[227] + 1080), v47, 4, v48, v49, v50, v51);
  v96[1] = v52;
  if (v52 && *((_DWORD *)v37 + 190) >= *(unsigned __int8 *)(v36 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v37 + 192, v36);
  v60 = v101;
  v101 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = *(_QWORD *)(v36 + 1728);
  if ((v61 & 1) != 0)
  {
    v82 = *(void (**)(WTF::StringImpl **))(v61 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v36 & 8) != 0)
      v83 = (WTF::StringImpl **)(v36 - 16);
    else
      v83 = (WTF::StringImpl **)(v36 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v83;
    v102 = (JSC::VM *)v36;
    v103 = (char *)(v36 + 1728);
    v82(&v101);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DADC0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DADE0);
  }
  v63 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v63;
  if (!v63 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v64 = v13 - 64;
      v65 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v64 + 2) = v65;
      *((_QWORD *)v64 + 4) = v65;
      if (v65)
      {
        v66 = (unsigned int *)(v13 + 16);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 | 0x10, v66));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v86 = (unsigned int *)(v12 + 80);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 | 2, v86));
    }
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>::create(_QWORD *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  v11 = JSC::allocateCell<JSC::IntlCollatorPrototype>(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v11 = a3 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>::finishCreation((JSC::JSObject *)v11, (uint64_t)a1, (uint64_t)a2, v18, v13, v14, v15, v16, v17);
  return v11;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **Uint8ClampedArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019241;
  Uint8ClampedArrayClassInfo = JSC::getUint8ClampedArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)Uint8ClampedArrayClassInfo, 0, 0, v7, v8);
}

unint64_t JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>::create(JSC *a1, JSC::VM *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  JSC::JSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = JSC::allocateCell<JSC::AggregateErrorConstructor>(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v12, (uint64_t)a1, (unint64_t)a2, (uint64_t)JSC::callUint8ClampedArray, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructUint8ClampedArray);
  JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>::finishCreation(v13, a1, a3, a4, v14, v15, v16, v17);
  return v12;
}

uint64_t *JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>::finishCreation(JSC::JSObject *a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const JSC::PropertyTable *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 528), 0xFFFE000000000001, 14, a7, a8, a9, a4);
  return JSC::JSGlobalObject::installTypedArrayIteratorProtocolWatchpoint(a3, (uint64_t)a1, 3, v11, v12, v13, v14, v15);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_21>(JSC **a1)
{
  uint64_t *v1;
  uint64_t v2;
  JSC *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  JSC *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  unint64_t v13;
  JSC *v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t *);
  uint64_t *v23;
  void (*v24)(uint64_t *);
  uint64_t *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  JSC::VM *v31;
  _QWORD *v32;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (char *)*a1 + 64;
  v6 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *((_BYTE *)v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (unint64_t)a1[1];
  v10 = *(_QWORD *)(v9 + 1712);
  if ((v10 & 1) != 0)
  {
    v22 = *(uint64_t (**)(uint64_t *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v9 & 8) != 0)
      v23 = (uint64_t *)(v9 - 16);
    v30 = *v23;
    v31 = (JSC::VM *)v9;
    v32 = (_QWORD *)(v9 + 1712);
    v10 = v22(&v30);
  }
  if (*(_QWORD *)(v10 + 48) == 2)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v10 + 48);
  Structure = JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Uint8ClampedAdaptor>::createStructure(v8, (JSC::VM *)v9, v11);
  if (!Structure)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DB214);
  }
  v14 = *a1;
  v13 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = Structure;
  if ((Structure & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DB234);
  }
  if (*((_DWORD *)v14 + 190) >= *(unsigned __int8 *)(v13 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v14 + 192, v13);
    v13 = (unint64_t)a1[1];
  }
  v15 = *(_QWORD *)(v13 + 1712);
  if ((v15 & 1) != 0)
  {
    v24 = *(void (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v25 = (uint64_t *)(v13 - 16);
    v30 = *v25;
    v31 = (JSC::VM *)v13;
    v32 = (_QWORD *)(v13 + 1712);
    v24(&v30);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DB28CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DB2ACLL);
  }
  v17 = *((_DWORD *)v4 + 22) - 1;
  *((_DWORD *)v4 + 22) = v17;
  if (!v17 && v5[93377])
  {
    if (*((_BYTE *)v4 + 86))
    {
      v18 = v5 - 64;
      v19 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v18 + 2) = v19;
      *((_QWORD *)v18 + 4) = v19;
      if (v19)
      {
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 | 0x10, v20));
      }
      if (v5[93379])
        v5[93378] = 1;
      *((_BYTE *)v4 + 86) = 0;
    }
    else
    {
      v28 = (unsigned int *)((char *)v4 + 80);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 | 2, v28));
    }
  }
  return result;
}

uint64_t JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Uint8ClampedAdaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **ResizableOrGrowableSharedUint8ClampedArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019241;
  ResizableOrGrowableSharedUint8ClampedArrayClassInfo = JSC::getResizableOrGrowableSharedUint8ClampedArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)ResizableOrGrowableSharedUint8ClampedArrayClassInfo, 0, 0, v7, v8);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_22>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void (*v18)(_QWORD *, unint64_t);
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[3];

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *((_QWORD *)v5 - 6);
    if (v7)
    {
      if (*((_QWORD *)v5 - 5) == v7)
      {
        *((_QWORD *)v5 - 6) = 0;
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 & 0xFFFFFFEF, v20));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 1712);
  v10 = v8;
  if ((v9 & 1) != 0)
  {
    v18 = *(void (**)(_QWORD *, unint64_t))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v8 & 8) != 0)
      v19 = (_QWORD *)(v8 - 16);
    v24[0] = *v19;
    v24[1] = v8;
    v24[2] = v8 + 1712;
    v18(v24, v8);
    v10 = a1[1];
  }
  result = *(_QWORD *)(v8 + 1720);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DB4D8);
  }
  v12 = *a1;
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DB4F8);
  }
  if (v10 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DB53CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DB55CLL);
  }
  v13 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v13;
  if (!v13 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v14 = v5 - 64;
      v15 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v14 + 2) = v15;
      *((_QWORD *)v14 + 4) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 | 0x10, v16));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v22 = (unsigned int *)(v4 + 80);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 | 2, v22));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_23>(JSC::JSGlobalObject::init(JSC::VM &)::$_23 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  JSC::Structure *Structure;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  JSC *v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  JSC::JSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  unint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t result;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(WTF::StringImpl **);
  WTF::StringImpl **v77;
  unint64_t v78;
  uint64_t (*v79)(WTF::StringImpl **);
  WTF::StringImpl **v80;
  unint64_t v81;
  void (*v82)(WTF::StringImpl **);
  WTF::StringImpl **v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  JSC::JSObject *v98;
  uint64_t v99;
  unint64_t v100;
  WTF::StringImpl *v101;
  JSC::VM *v102;
  char *v103;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v84 = (unsigned int *)(v13 + 16);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 & 0xFFFFFFEF, v84));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v94 = (JSC *)v16;
  v95 = v18;
  v96 = v9;
  v97 = a1;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  v19 = *(_QWORD *)(v18 + 1648);
  if ((v19 & 1) != 0)
  {
    v76 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v77 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v77 = (WTF::StringImpl **)(v18 - 16);
    v101 = *v77;
    v102 = (JSC::VM *)v18;
    v103 = (char *)(v18 + 1648);
    v19 = v76(&v101);
  }
  LODWORD(v101) = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v78 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v78);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v78;
LABEL_11:
    *v17 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v88, v89, v90);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v26 = JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>::create((_QWORD *)v16, (JSC::VM *)v18, SlowCase, v21, v22, v23, v24, v25);
  if (v98)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DB96CLL);
  }
  if (v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DB98CLL);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DB9ACLL);
  }
  v98 = (JSC::JSObject *)v26;
  Structure = (JSC::Structure *)JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::createStructure(v94, (JSC::VM *)v95, v26);
  JSC::LazyClassStructure::Initializer::setStructure(&v94, Structure);
  v37 = v94;
  v36 = v95;
  v38 = (unint64_t *)((char *)v94 + 40136);
  v39 = *(_QWORD *)(v95 + 1656);
  if ((v39 & 1) != 0)
  {
    v79 = *(uint64_t (**)(WTF::StringImpl **))(v39 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v95 & 8) != 0)
      v80 = (WTF::StringImpl **)(v95 - 16);
    else
      v80 = (WTF::StringImpl **)(v95 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v80;
    v102 = (JSC::VM *)v95;
    v103 = (char *)(v95 + 1656);
    v39 = v79(&v101);
  }
  LODWORD(v101) = 67099;
  if ((v39 & 0xFFFE000000000002) == 0 && v39 && *(unsigned __int8 *)(v39 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v39, v37, v35, v29, v30, v31, v32, v33, v34);
  v40 = *v38;
  if (*v38 >= v38[1])
  {
    v40 = v38[2];
    if ((v40 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v37, v28, v29, v30, v31, v32, v33, v34);
      v40 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v37 + 40112, (uint64_t)v37 + 192, 128, 0, 0, v91, v92, v93);
      goto LABEL_24;
    }
    v81 = *(_QWORD *)(v40 + 8) ^ v38[3];
    v38[1] = v40 + HIDWORD(v81);
    v38[2] = v40 + (int)v81;
  }
  *v38 = v40 + 128;
LABEL_24:
  *(_DWORD *)v40 = 0;
  JSC::Structure::Structure(v40, (uint64_t)v37, v36, v39, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>::s_info, 0, 0);
  if (*((_BYTE *)v37 + 755))
    __dmb(0xAu);
  v41 = v98;
  v42 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v42 = 0xA00000002;
  *(_QWORD *)(v42 + 8) = "Int16Array";
  *(_DWORD *)(v42 + 16) = 4;
  v101 = (WTF::StringImpl *)v42;
  v47 = JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>::create(v37, (JSC::VM *)v40, (uint64_t)v41, (JSC::VM *)&v101, v43, v44, v45, v46);
  if (!v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DBA2CLL);
  }
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DBA4CLL);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DBA6CLL);
  }
  v52 = v47;
  v100 = v47;
  JSC::JSObject::putDirectWithoutTransition(v41, (uint64_t)v37, *(_QWORD *)(v38[227] + 1080), v47, 4, v48, v49, v50, v51);
  v96[1] = v52;
  if (v52 && *((_DWORD *)v37 + 190) >= *(unsigned __int8 *)(v36 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v37 + 192, v36);
  v60 = v101;
  v101 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = *(_QWORD *)(v36 + 1752);
  if ((v61 & 1) != 0)
  {
    v82 = *(void (**)(WTF::StringImpl **))(v61 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v36 & 8) != 0)
      v83 = (WTF::StringImpl **)(v36 - 16);
    else
      v83 = (WTF::StringImpl **)(v36 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v83;
    v102 = (JSC::VM *)v36;
    v103 = (char *)(v36 + 1752);
    v82(&v101);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DBADCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DBAFCLL);
  }
  v63 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v63;
  if (!v63 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v64 = v13 - 64;
      v65 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v64 + 2) = v65;
      *((_QWORD *)v64 + 4) = v65;
      if (v65)
      {
        v66 = (unsigned int *)(v13 + 16);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 | 0x10, v66));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v86 = (unsigned int *)(v12 + 80);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 | 2, v86));
    }
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>::create(_QWORD *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  v11 = JSC::allocateCell<JSC::IntlCollatorPrototype>(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v11 = a3 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>::finishCreation((JSC::JSObject *)v11, (uint64_t)a1, (uint64_t)a2, v18, v13, v14, v15, v16, v17);
  return v11;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **Int16ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019242;
  Int16ArrayClassInfo = JSC::getInt16ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)Int16ArrayClassInfo, 0, 0, v7, v8);
}

unint64_t JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>::create(JSC *a1, JSC::VM *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  JSC::JSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = JSC::allocateCell<JSC::AggregateErrorConstructor>(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v12, (uint64_t)a1, (unint64_t)a2, (uint64_t)JSC::callInt16Array, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructInt16Array);
  JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>::finishCreation(v13, a1, a3, a4, v14, v15, v16, v17);
  return v12;
}

uint64_t *JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>::finishCreation(JSC::JSObject *a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const JSC::PropertyTable *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 528), 0xFFFE000000000002, 14, a7, a8, a9, a4);
  return JSC::JSGlobalObject::installTypedArrayIteratorProtocolWatchpoint(a3, (uint64_t)a1, 4, v11, v12, v13, v14, v15);
}

void JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)3, a4, 1, a6, a7, a8);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v11, v12, v13, v14);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 528), 0xFFFE000000000002, 14, v15, v16, v17, v18);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_24>(JSC **a1)
{
  uint64_t *v1;
  uint64_t v2;
  JSC *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  JSC *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  unint64_t v13;
  JSC *v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t *);
  uint64_t *v23;
  void (*v24)(uint64_t *);
  uint64_t *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  JSC::VM *v31;
  _QWORD *v32;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (char *)*a1 + 64;
  v6 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *((_BYTE *)v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (unint64_t)a1[1];
  v10 = *(_QWORD *)(v9 + 1736);
  if ((v10 & 1) != 0)
  {
    v22 = *(uint64_t (**)(uint64_t *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v9 & 8) != 0)
      v23 = (uint64_t *)(v9 - 16);
    v30 = *v23;
    v31 = (JSC::VM *)v9;
    v32 = (_QWORD *)(v9 + 1736);
    v10 = v22(&v30);
  }
  if (*(_QWORD *)(v10 + 48) == 2)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v10 + 48);
  Structure = JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Int16Adaptor>::createStructure(v8, (JSC::VM *)v9, v11);
  if (!Structure)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DBFA8);
  }
  v14 = *a1;
  v13 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = Structure;
  if ((Structure & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DBFC8);
  }
  if (*((_DWORD *)v14 + 190) >= *(unsigned __int8 *)(v13 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v14 + 192, v13);
    v13 = (unint64_t)a1[1];
  }
  v15 = *(_QWORD *)(v13 + 1736);
  if ((v15 & 1) != 0)
  {
    v24 = *(void (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v25 = (uint64_t *)(v13 - 16);
    v30 = *v25;
    v31 = (JSC::VM *)v13;
    v32 = (_QWORD *)(v13 + 1736);
    v24(&v30);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC020);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC040);
  }
  v17 = *((_DWORD *)v4 + 22) - 1;
  *((_DWORD *)v4 + 22) = v17;
  if (!v17 && v5[93377])
  {
    if (*((_BYTE *)v4 + 86))
    {
      v18 = v5 - 64;
      v19 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v18 + 2) = v19;
      *((_QWORD *)v18 + 4) = v19;
      if (v19)
      {
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 | 0x10, v20));
      }
      if (v5[93379])
        v5[93378] = 1;
      *((_BYTE *)v4 + 86) = 0;
    }
    else
    {
      v28 = (unsigned int *)((char *)v4 + 80);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 | 2, v28));
    }
  }
  return result;
}

uint64_t JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Int16Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **ResizableOrGrowableSharedInt16ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019242;
  ResizableOrGrowableSharedInt16ArrayClassInfo = JSC::getResizableOrGrowableSharedInt16ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)ResizableOrGrowableSharedInt16ArrayClassInfo, 0, 0, v7, v8);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_25>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void (*v18)(_QWORD *, unint64_t);
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[3];

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *((_QWORD *)v5 - 6);
    if (v7)
    {
      if (*((_QWORD *)v5 - 5) == v7)
      {
        *((_QWORD *)v5 - 6) = 0;
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 & 0xFFFFFFEF, v20));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 1736);
  v10 = v8;
  if ((v9 & 1) != 0)
  {
    v18 = *(void (**)(_QWORD *, unint64_t))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v8 & 8) != 0)
      v19 = (_QWORD *)(v8 - 16);
    v24[0] = *v19;
    v24[1] = v8;
    v24[2] = v8 + 1736;
    v18(v24, v8);
    v10 = a1[1];
  }
  result = *(_QWORD *)(v8 + 1744);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC26CLL);
  }
  v12 = *a1;
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC28CLL);
  }
  if (v10 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC2D0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC2F0);
  }
  v13 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v13;
  if (!v13 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v14 = v5 - 64;
      v15 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v14 + 2) = v15;
      *((_QWORD *)v14 + 4) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 | 0x10, v16));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v22 = (unsigned int *)(v4 + 80);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 | 2, v22));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_26>(JSC::JSGlobalObject::init(JSC::VM &)::$_26 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  JSC::Structure *Structure;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  JSC *v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  JSC::JSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  unint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t result;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(WTF::StringImpl **);
  WTF::StringImpl **v77;
  unint64_t v78;
  uint64_t (*v79)(WTF::StringImpl **);
  WTF::StringImpl **v80;
  unint64_t v81;
  void (*v82)(WTF::StringImpl **);
  WTF::StringImpl **v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  JSC::JSObject *v98;
  uint64_t v99;
  unint64_t v100;
  WTF::StringImpl *v101;
  JSC::VM *v102;
  char *v103;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v84 = (unsigned int *)(v13 + 16);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 & 0xFFFFFFEF, v84));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v94 = (JSC *)v16;
  v95 = v18;
  v96 = v9;
  v97 = a1;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  v19 = *(_QWORD *)(v18 + 1648);
  if ((v19 & 1) != 0)
  {
    v76 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v77 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v77 = (WTF::StringImpl **)(v18 - 16);
    v101 = *v77;
    v102 = (JSC::VM *)v18;
    v103 = (char *)(v18 + 1648);
    v19 = v76(&v101);
  }
  LODWORD(v101) = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v78 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v78);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v78;
LABEL_11:
    *v17 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v88, v89, v90);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v26 = JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>::create((_QWORD *)v16, (JSC::VM *)v18, SlowCase, v21, v22, v23, v24, v25);
  if (v98)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC700);
  }
  if (v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC720);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC740);
  }
  v98 = (JSC::JSObject *)v26;
  Structure = (JSC::Structure *)JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::createStructure(v94, (JSC::VM *)v95, v26);
  JSC::LazyClassStructure::Initializer::setStructure(&v94, Structure);
  v37 = v94;
  v36 = v95;
  v38 = (unint64_t *)((char *)v94 + 40136);
  v39 = *(_QWORD *)(v95 + 1656);
  if ((v39 & 1) != 0)
  {
    v79 = *(uint64_t (**)(WTF::StringImpl **))(v39 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v95 & 8) != 0)
      v80 = (WTF::StringImpl **)(v95 - 16);
    else
      v80 = (WTF::StringImpl **)(v95 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v80;
    v102 = (JSC::VM *)v95;
    v103 = (char *)(v95 + 1656);
    v39 = v79(&v101);
  }
  LODWORD(v101) = 67099;
  if ((v39 & 0xFFFE000000000002) == 0 && v39 && *(unsigned __int8 *)(v39 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v39, v37, v35, v29, v30, v31, v32, v33, v34);
  v40 = *v38;
  if (*v38 >= v38[1])
  {
    v40 = v38[2];
    if ((v40 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v37, v28, v29, v30, v31, v32, v33, v34);
      v40 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v37 + 40112, (uint64_t)v37 + 192, 128, 0, 0, v91, v92, v93);
      goto LABEL_24;
    }
    v81 = *(_QWORD *)(v40 + 8) ^ v38[3];
    v38[1] = v40 + HIDWORD(v81);
    v38[2] = v40 + (int)v81;
  }
  *v38 = v40 + 128;
LABEL_24:
  *(_DWORD *)v40 = 0;
  JSC::Structure::Structure(v40, (uint64_t)v37, v36, v39, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>::s_info, 0, 0);
  if (*((_BYTE *)v37 + 755))
    __dmb(0xAu);
  v41 = v98;
  v42 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v42 = 0xB00000002;
  *(_QWORD *)(v42 + 8) = "Uint16Array";
  *(_DWORD *)(v42 + 16) = 4;
  v101 = (WTF::StringImpl *)v42;
  v47 = JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>::create(v37, (JSC::VM *)v40, (uint64_t)v41, (JSC::VM *)&v101, v43, v44, v45, v46);
  if (!v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC7C0);
  }
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC7E0);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC800);
  }
  v52 = v47;
  v100 = v47;
  JSC::JSObject::putDirectWithoutTransition(v41, (uint64_t)v37, *(_QWORD *)(v38[227] + 1080), v47, 4, v48, v49, v50, v51);
  v96[1] = v52;
  if (v52 && *((_DWORD *)v37 + 190) >= *(unsigned __int8 *)(v36 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v37 + 192, v36);
  v60 = v101;
  v101 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = *(_QWORD *)(v36 + 1776);
  if ((v61 & 1) != 0)
  {
    v82 = *(void (**)(WTF::StringImpl **))(v61 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v36 & 8) != 0)
      v83 = (WTF::StringImpl **)(v36 - 16);
    else
      v83 = (WTF::StringImpl **)(v36 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v83;
    v102 = (JSC::VM *)v36;
    v103 = (char *)(v36 + 1776);
    v82(&v101);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC870);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DC890);
  }
  v63 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v63;
  if (!v63 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v64 = v13 - 64;
      v65 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v64 + 2) = v65;
      *((_QWORD *)v64 + 4) = v65;
      if (v65)
      {
        v66 = (unsigned int *)(v13 + 16);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 | 0x10, v66));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v86 = (unsigned int *)(v12 + 80);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 | 2, v86));
    }
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>::create(_QWORD *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  v11 = JSC::allocateCell<JSC::IntlCollatorPrototype>(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v11 = a3 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>::finishCreation((JSC::JSObject *)v11, (uint64_t)a1, (uint64_t)a2, v18, v13, v14, v15, v16, v17);
  return v11;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **Uint16ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019243;
  Uint16ArrayClassInfo = JSC::getUint16ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)Uint16ArrayClassInfo, 0, 0, v7, v8);
}

unint64_t JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>::create(JSC *a1, JSC::VM *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  JSC::JSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = JSC::allocateCell<JSC::AggregateErrorConstructor>(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v12, (uint64_t)a1, (unint64_t)a2, (uint64_t)JSC::callUint16Array, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructUint16Array);
  JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>::finishCreation(v13, a1, a3, a4, v14, v15, v16, v17);
  return v12;
}

uint64_t *JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>::finishCreation(JSC::JSObject *a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const JSC::PropertyTable *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 528), 0xFFFE000000000002, 14, a7, a8, a9, a4);
  return JSC::JSGlobalObject::installTypedArrayIteratorProtocolWatchpoint(a3, (uint64_t)a1, 5, v11, v12, v13, v14, v15);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_27>(JSC **a1)
{
  uint64_t *v1;
  uint64_t v2;
  JSC *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  JSC *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  unint64_t v13;
  JSC *v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t *);
  uint64_t *v23;
  void (*v24)(uint64_t *);
  uint64_t *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  JSC::VM *v31;
  _QWORD *v32;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (char *)*a1 + 64;
  v6 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *((_BYTE *)v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (unint64_t)a1[1];
  v10 = *(_QWORD *)(v9 + 1760);
  if ((v10 & 1) != 0)
  {
    v22 = *(uint64_t (**)(uint64_t *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v9 & 8) != 0)
      v23 = (uint64_t *)(v9 - 16);
    v30 = *v23;
    v31 = (JSC::VM *)v9;
    v32 = (_QWORD *)(v9 + 1760);
    v10 = v22(&v30);
  }
  if (*(_QWORD *)(v10 + 48) == 2)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v10 + 48);
  Structure = JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Uint16Adaptor>::createStructure(v8, (JSC::VM *)v9, v11);
  if (!Structure)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DCCC8);
  }
  v14 = *a1;
  v13 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = Structure;
  if ((Structure & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DCCE8);
  }
  if (*((_DWORD *)v14 + 190) >= *(unsigned __int8 *)(v13 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v14 + 192, v13);
    v13 = (unint64_t)a1[1];
  }
  v15 = *(_QWORD *)(v13 + 1760);
  if ((v15 & 1) != 0)
  {
    v24 = *(void (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v25 = (uint64_t *)(v13 - 16);
    v30 = *v25;
    v31 = (JSC::VM *)v13;
    v32 = (_QWORD *)(v13 + 1760);
    v24(&v30);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DCD40);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DCD60);
  }
  v17 = *((_DWORD *)v4 + 22) - 1;
  *((_DWORD *)v4 + 22) = v17;
  if (!v17 && v5[93377])
  {
    if (*((_BYTE *)v4 + 86))
    {
      v18 = v5 - 64;
      v19 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v18 + 2) = v19;
      *((_QWORD *)v18 + 4) = v19;
      if (v19)
      {
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 | 0x10, v20));
      }
      if (v5[93379])
        v5[93378] = 1;
      *((_BYTE *)v4 + 86) = 0;
    }
    else
    {
      v28 = (unsigned int *)((char *)v4 + 80);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 | 2, v28));
    }
  }
  return result;
}

uint64_t JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Uint16Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **ResizableOrGrowableSharedUint16ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019243;
  ResizableOrGrowableSharedUint16ArrayClassInfo = JSC::getResizableOrGrowableSharedUint16ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)ResizableOrGrowableSharedUint16ArrayClassInfo, 0, 0, v7, v8);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_28>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void (*v18)(_QWORD *, unint64_t);
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[3];

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *((_QWORD *)v5 - 6);
    if (v7)
    {
      if (*((_QWORD *)v5 - 5) == v7)
      {
        *((_QWORD *)v5 - 6) = 0;
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 & 0xFFFFFFEF, v20));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 1760);
  v10 = v8;
  if ((v9 & 1) != 0)
  {
    v18 = *(void (**)(_QWORD *, unint64_t))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v8 & 8) != 0)
      v19 = (_QWORD *)(v8 - 16);
    v24[0] = *v19;
    v24[1] = v8;
    v24[2] = v8 + 1760;
    v18(v24, v8);
    v10 = a1[1];
  }
  result = *(_QWORD *)(v8 + 1768);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DCF8CLL);
  }
  v12 = *a1;
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DCFACLL);
  }
  if (v10 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DCFF0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DD010);
  }
  v13 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v13;
  if (!v13 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v14 = v5 - 64;
      v15 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v14 + 2) = v15;
      *((_QWORD *)v14 + 4) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 | 0x10, v16));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v22 = (unsigned int *)(v4 + 80);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 | 2, v22));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_29>(JSC::JSGlobalObject::init(JSC::VM &)::$_29 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  JSC::Structure *Structure;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  JSC *v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  JSC::JSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  unint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t result;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(WTF::StringImpl **);
  WTF::StringImpl **v77;
  unint64_t v78;
  uint64_t (*v79)(WTF::StringImpl **);
  WTF::StringImpl **v80;
  unint64_t v81;
  void (*v82)(WTF::StringImpl **);
  WTF::StringImpl **v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  JSC::JSObject *v98;
  uint64_t v99;
  unint64_t v100;
  WTF::StringImpl *v101;
  JSC::VM *v102;
  char *v103;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v84 = (unsigned int *)(v13 + 16);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 & 0xFFFFFFEF, v84));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v94 = (JSC *)v16;
  v95 = v18;
  v96 = v9;
  v97 = a1;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  v19 = *(_QWORD *)(v18 + 1648);
  if ((v19 & 1) != 0)
  {
    v76 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v77 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v77 = (WTF::StringImpl **)(v18 - 16);
    v101 = *v77;
    v102 = (JSC::VM *)v18;
    v103 = (char *)(v18 + 1648);
    v19 = v76(&v101);
  }
  LODWORD(v101) = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v78 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v78);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v78;
LABEL_11:
    *v17 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v88, v89, v90);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v26 = JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::create((_QWORD *)v16, (JSC::VM *)v18, SlowCase, v21, v22, v23, v24, v25);
  if (v98)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DD420);
  }
  if (v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DD440);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DD460);
  }
  v98 = (JSC::JSObject *)v26;
  Structure = (JSC::Structure *)JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createStructure(v94, (JSC::VM *)v95, v26);
  JSC::LazyClassStructure::Initializer::setStructure(&v94, Structure);
  v37 = v94;
  v36 = v95;
  v38 = (unint64_t *)((char *)v94 + 40136);
  v39 = *(_QWORD *)(v95 + 1656);
  if ((v39 & 1) != 0)
  {
    v79 = *(uint64_t (**)(WTF::StringImpl **))(v39 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v95 & 8) != 0)
      v80 = (WTF::StringImpl **)(v95 - 16);
    else
      v80 = (WTF::StringImpl **)(v95 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v80;
    v102 = (JSC::VM *)v95;
    v103 = (char *)(v95 + 1656);
    v39 = v79(&v101);
  }
  LODWORD(v101) = 67099;
  if ((v39 & 0xFFFE000000000002) == 0 && v39 && *(unsigned __int8 *)(v39 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v39, v37, v35, v29, v30, v31, v32, v33, v34);
  v40 = *v38;
  if (*v38 >= v38[1])
  {
    v40 = v38[2];
    if ((v40 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v37, v28, v29, v30, v31, v32, v33, v34);
      v40 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v37 + 40112, (uint64_t)v37 + 192, 128, 0, 0, v91, v92, v93);
      goto LABEL_24;
    }
    v81 = *(_QWORD *)(v40 + 8) ^ v38[3];
    v38[1] = v40 + HIDWORD(v81);
    v38[2] = v40 + (int)v81;
  }
  *v38 = v40 + 128;
LABEL_24:
  *(_DWORD *)v40 = 0;
  JSC::Structure::Structure(v40, (uint64_t)v37, v36, v39, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::s_info, 0, 0);
  if (*((_BYTE *)v37 + 755))
    __dmb(0xAu);
  v41 = v98;
  v42 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v42 = 0xA00000002;
  *(_QWORD *)(v42 + 8) = "Int32Array";
  *(_DWORD *)(v42 + 16) = 4;
  v101 = (WTF::StringImpl *)v42;
  v47 = JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::create(v37, (JSC::VM *)v40, (uint64_t)v41, (JSC::VM *)&v101, v43, v44, v45, v46);
  if (!v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DD4E0);
  }
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DD500);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DD520);
  }
  v52 = v47;
  v100 = v47;
  JSC::JSObject::putDirectWithoutTransition(v41, (uint64_t)v37, *(_QWORD *)(v38[227] + 1080), v47, 4, v48, v49, v50, v51);
  v96[1] = v52;
  if (v52 && *((_DWORD *)v37 + 190) >= *(unsigned __int8 *)(v36 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v37 + 192, v36);
  v60 = v101;
  v101 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = *(_QWORD *)(v36 + 1800);
  if ((v61 & 1) != 0)
  {
    v82 = *(void (**)(WTF::StringImpl **))(v61 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v36 & 8) != 0)
      v83 = (WTF::StringImpl **)(v36 - 16);
    else
      v83 = (WTF::StringImpl **)(v36 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v83;
    v102 = (JSC::VM *)v36;
    v103 = (char *)(v36 + 1800);
    v82(&v101);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DD590);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DD5B0);
  }
  v63 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v63;
  if (!v63 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v64 = v13 - 64;
      v65 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v64 + 2) = v65;
      *((_QWORD *)v64 + 4) = v65;
      if (v65)
      {
        v66 = (unsigned int *)(v13 + 16);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 | 0x10, v66));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v86 = (unsigned int *)(v12 + 80);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 | 2, v86));
    }
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::create(_QWORD *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  v11 = JSC::allocateCell<JSC::IntlCollatorPrototype>(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v11 = a3 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::finishCreation((JSC::JSObject *)v11, (uint64_t)a1, (uint64_t)a2, v18, v13, v14, v15, v16, v17);
  return v11;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **Int32ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019244;
  Int32ArrayClassInfo = JSC::getInt32ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)Int32ArrayClassInfo, 0, 0, v7, v8);
}

unint64_t JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::create(JSC *a1, JSC::VM *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  JSC::JSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = JSC::allocateCell<JSC::AggregateErrorConstructor>(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v12, (uint64_t)a1, (unint64_t)a2, (uint64_t)JSC::callInt32Array, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructInt32Array);
  JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::finishCreation(v13, a1, a3, a4, v14, v15, v16, v17);
  return v12;
}

uint64_t *JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::finishCreation(JSC::JSObject *a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const JSC::PropertyTable *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 528), 0xFFFE000000000004, 14, a7, a8, a9, a4);
  return JSC::JSGlobalObject::installTypedArrayIteratorProtocolWatchpoint(a3, (uint64_t)a1, 6, v11, v12, v13, v14, v15);
}

void JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)3, a4, 1, a6, a7, a8);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v11, v12, v13, v14);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 528), 0xFFFE000000000004, 14, v15, v16, v17, v18);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_30>(JSC **a1)
{
  uint64_t *v1;
  uint64_t v2;
  JSC *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  JSC *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  unint64_t v13;
  JSC *v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t *);
  uint64_t *v23;
  void (*v24)(uint64_t *);
  uint64_t *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  JSC::VM *v31;
  _QWORD *v32;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (char *)*a1 + 64;
  v6 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *((_BYTE *)v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (unint64_t)a1[1];
  v10 = *(_QWORD *)(v9 + 1784);
  if ((v10 & 1) != 0)
  {
    v22 = *(uint64_t (**)(uint64_t *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v9 & 8) != 0)
      v23 = (uint64_t *)(v9 - 16);
    v30 = *v23;
    v31 = (JSC::VM *)v9;
    v32 = (_QWORD *)(v9 + 1784);
    v10 = v22(&v30);
  }
  if (*(_QWORD *)(v10 + 48) == 2)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v10 + 48);
  Structure = JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Int32Adaptor>::createStructure(v8, (JSC::VM *)v9, v11);
  if (!Structure)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DDA5CLL);
  }
  v14 = *a1;
  v13 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = Structure;
  if ((Structure & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DDA7CLL);
  }
  if (*((_DWORD *)v14 + 190) >= *(unsigned __int8 *)(v13 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v14 + 192, v13);
    v13 = (unint64_t)a1[1];
  }
  v15 = *(_QWORD *)(v13 + 1784);
  if ((v15 & 1) != 0)
  {
    v24 = *(void (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v25 = (uint64_t *)(v13 - 16);
    v30 = *v25;
    v31 = (JSC::VM *)v13;
    v32 = (_QWORD *)(v13 + 1784);
    v24(&v30);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DDAD4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DDAF4);
  }
  v17 = *((_DWORD *)v4 + 22) - 1;
  *((_DWORD *)v4 + 22) = v17;
  if (!v17 && v5[93377])
  {
    if (*((_BYTE *)v4 + 86))
    {
      v18 = v5 - 64;
      v19 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v18 + 2) = v19;
      *((_QWORD *)v18 + 4) = v19;
      if (v19)
      {
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 | 0x10, v20));
      }
      if (v5[93379])
        v5[93378] = 1;
      *((_BYTE *)v4 + 86) = 0;
    }
    else
    {
      v28 = (unsigned int *)((char *)v4 + 80);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 | 2, v28));
    }
  }
  return result;
}

uint64_t JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Int32Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **ResizableOrGrowableSharedInt32ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019244;
  ResizableOrGrowableSharedInt32ArrayClassInfo = JSC::getResizableOrGrowableSharedInt32ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)ResizableOrGrowableSharedInt32ArrayClassInfo, 0, 0, v7, v8);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_31>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void (*v18)(_QWORD *, unint64_t);
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[3];

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *((_QWORD *)v5 - 6);
    if (v7)
    {
      if (*((_QWORD *)v5 - 5) == v7)
      {
        *((_QWORD *)v5 - 6) = 0;
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 & 0xFFFFFFEF, v20));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 1784);
  v10 = v8;
  if ((v9 & 1) != 0)
  {
    v18 = *(void (**)(_QWORD *, unint64_t))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v8 & 8) != 0)
      v19 = (_QWORD *)(v8 - 16);
    v24[0] = *v19;
    v24[1] = v8;
    v24[2] = v8 + 1784;
    v18(v24, v8);
    v10 = a1[1];
  }
  result = *(_QWORD *)(v8 + 1792);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DDD20);
  }
  v12 = *a1;
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DDD40);
  }
  if (v10 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DDD84);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DDDA4);
  }
  v13 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v13;
  if (!v13 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v14 = v5 - 64;
      v15 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v14 + 2) = v15;
      *((_QWORD *)v14 + 4) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 | 0x10, v16));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v22 = (unsigned int *)(v4 + 80);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 | 2, v22));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_32>(JSC::JSGlobalObject::init(JSC::VM &)::$_32 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  JSC::Structure *Structure;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  JSC *v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  JSC::JSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  unint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t result;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(WTF::StringImpl **);
  WTF::StringImpl **v77;
  unint64_t v78;
  uint64_t (*v79)(WTF::StringImpl **);
  WTF::StringImpl **v80;
  unint64_t v81;
  void (*v82)(WTF::StringImpl **);
  WTF::StringImpl **v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  JSC::JSObject *v98;
  uint64_t v99;
  unint64_t v100;
  WTF::StringImpl *v101;
  JSC::VM *v102;
  char *v103;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v84 = (unsigned int *)(v13 + 16);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 & 0xFFFFFFEF, v84));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v94 = (JSC *)v16;
  v95 = v18;
  v96 = v9;
  v97 = a1;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  v19 = *(_QWORD *)(v18 + 1648);
  if ((v19 & 1) != 0)
  {
    v76 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v77 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v77 = (WTF::StringImpl **)(v18 - 16);
    v101 = *v77;
    v102 = (JSC::VM *)v18;
    v103 = (char *)(v18 + 1648);
    v19 = v76(&v101);
  }
  LODWORD(v101) = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v78 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v78);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v78;
LABEL_11:
    *v17 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v88, v89, v90);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v26 = JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>::create((_QWORD *)v16, (JSC::VM *)v18, SlowCase, v21, v22, v23, v24, v25);
  if (v98)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DE1B4);
  }
  if (v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DE1D4);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DE1F4);
  }
  v98 = (JSC::JSObject *)v26;
  Structure = (JSC::Structure *)JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createStructure(v94, (JSC::VM *)v95, v26);
  JSC::LazyClassStructure::Initializer::setStructure(&v94, Structure);
  v37 = v94;
  v36 = v95;
  v38 = (unint64_t *)((char *)v94 + 40136);
  v39 = *(_QWORD *)(v95 + 1656);
  if ((v39 & 1) != 0)
  {
    v79 = *(uint64_t (**)(WTF::StringImpl **))(v39 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v95 & 8) != 0)
      v80 = (WTF::StringImpl **)(v95 - 16);
    else
      v80 = (WTF::StringImpl **)(v95 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v80;
    v102 = (JSC::VM *)v95;
    v103 = (char *)(v95 + 1656);
    v39 = v79(&v101);
  }
  LODWORD(v101) = 67099;
  if ((v39 & 0xFFFE000000000002) == 0 && v39 && *(unsigned __int8 *)(v39 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v39, v37, v35, v29, v30, v31, v32, v33, v34);
  v40 = *v38;
  if (*v38 >= v38[1])
  {
    v40 = v38[2];
    if ((v40 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v37, v28, v29, v30, v31, v32, v33, v34);
      v40 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v37 + 40112, (uint64_t)v37 + 192, 128, 0, 0, v91, v92, v93);
      goto LABEL_24;
    }
    v81 = *(_QWORD *)(v40 + 8) ^ v38[3];
    v38[1] = v40 + HIDWORD(v81);
    v38[2] = v40 + (int)v81;
  }
  *v38 = v40 + 128;
LABEL_24:
  *(_DWORD *)v40 = 0;
  JSC::Structure::Structure(v40, (uint64_t)v37, v36, v39, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>::s_info, 0, 0);
  if (*((_BYTE *)v37 + 755))
    __dmb(0xAu);
  v41 = v98;
  v42 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v42 = 0xB00000002;
  *(_QWORD *)(v42 + 8) = "Uint32Array";
  *(_DWORD *)(v42 + 16) = 4;
  v101 = (WTF::StringImpl *)v42;
  v47 = JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>::create(v37, (JSC::VM *)v40, (uint64_t)v41, (JSC::VM *)&v101, v43, v44, v45, v46);
  if (!v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DE274);
  }
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DE294);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DE2B4);
  }
  v52 = v47;
  v100 = v47;
  JSC::JSObject::putDirectWithoutTransition(v41, (uint64_t)v37, *(_QWORD *)(v38[227] + 1080), v47, 4, v48, v49, v50, v51);
  v96[1] = v52;
  if (v52 && *((_DWORD *)v37 + 190) >= *(unsigned __int8 *)(v36 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v37 + 192, v36);
  v60 = v101;
  v101 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = *(_QWORD *)(v36 + 1824);
  if ((v61 & 1) != 0)
  {
    v82 = *(void (**)(WTF::StringImpl **))(v61 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v36 & 8) != 0)
      v83 = (WTF::StringImpl **)(v36 - 16);
    else
      v83 = (WTF::StringImpl **)(v36 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v83;
    v102 = (JSC::VM *)v36;
    v103 = (char *)(v36 + 1824);
    v82(&v101);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DE324);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DE344);
  }
  v63 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v63;
  if (!v63 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v64 = v13 - 64;
      v65 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v64 + 2) = v65;
      *((_QWORD *)v64 + 4) = v65;
      if (v65)
      {
        v66 = (unsigned int *)(v13 + 16);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 | 0x10, v66));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v86 = (unsigned int *)(v12 + 80);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 | 2, v86));
    }
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>::create(_QWORD *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  v11 = JSC::allocateCell<JSC::IntlCollatorPrototype>(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v11 = a3 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>::finishCreation((JSC::JSObject *)v11, (uint64_t)a1, (uint64_t)a2, v18, v13, v14, v15, v16, v17);
  return v11;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **Uint32ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019245;
  Uint32ArrayClassInfo = JSC::getUint32ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)Uint32ArrayClassInfo, 0, 0, v7, v8);
}

unint64_t JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>::create(JSC *a1, JSC::VM *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  JSC::JSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = JSC::allocateCell<JSC::AggregateErrorConstructor>(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v12, (uint64_t)a1, (unint64_t)a2, (uint64_t)JSC::callUint32Array, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructUint32Array);
  JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::finishCreation(v13, a1, a3, a4, v14, v15, v16, v17);
  return v12;
}

uint64_t *JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>::finishCreation(JSC::JSObject *a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const JSC::PropertyTable *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 528), 0xFFFE000000000004, 14, a7, a8, a9, a4);
  return JSC::JSGlobalObject::installTypedArrayIteratorProtocolWatchpoint(a3, (uint64_t)a1, 7, v11, v12, v13, v14, v15);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_33>(JSC **a1)
{
  uint64_t *v1;
  uint64_t v2;
  JSC *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  JSC *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  unint64_t v13;
  JSC *v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t *);
  uint64_t *v23;
  void (*v24)(uint64_t *);
  uint64_t *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  JSC::VM *v31;
  _QWORD *v32;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (char *)*a1 + 64;
  v6 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *((_BYTE *)v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (unint64_t)a1[1];
  v10 = *(_QWORD *)(v9 + 1808);
  if ((v10 & 1) != 0)
  {
    v22 = *(uint64_t (**)(uint64_t *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v9 & 8) != 0)
      v23 = (uint64_t *)(v9 - 16);
    v30 = *v23;
    v31 = (JSC::VM *)v9;
    v32 = (_QWORD *)(v9 + 1808);
    v10 = v22(&v30);
  }
  if (*(_QWORD *)(v10 + 48) == 2)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v10 + 48);
  Structure = JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Uint32Adaptor>::createStructure(v8, (JSC::VM *)v9, v11);
  if (!Structure)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DE77CLL);
  }
  v14 = *a1;
  v13 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = Structure;
  if ((Structure & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DE79CLL);
  }
  if (*((_DWORD *)v14 + 190) >= *(unsigned __int8 *)(v13 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v14 + 192, v13);
    v13 = (unint64_t)a1[1];
  }
  v15 = *(_QWORD *)(v13 + 1808);
  if ((v15 & 1) != 0)
  {
    v24 = *(void (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v25 = (uint64_t *)(v13 - 16);
    v30 = *v25;
    v31 = (JSC::VM *)v13;
    v32 = (_QWORD *)(v13 + 1808);
    v24(&v30);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DE7F4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DE814);
  }
  v17 = *((_DWORD *)v4 + 22) - 1;
  *((_DWORD *)v4 + 22) = v17;
  if (!v17 && v5[93377])
  {
    if (*((_BYTE *)v4 + 86))
    {
      v18 = v5 - 64;
      v19 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v18 + 2) = v19;
      *((_QWORD *)v18 + 4) = v19;
      if (v19)
      {
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 | 0x10, v20));
      }
      if (v5[93379])
        v5[93378] = 1;
      *((_BYTE *)v4 + 86) = 0;
    }
    else
    {
      v28 = (unsigned int *)((char *)v4 + 80);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 | 2, v28));
    }
  }
  return result;
}

uint64_t JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Uint32Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **ResizableOrGrowableSharedUint32ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019245;
  ResizableOrGrowableSharedUint32ArrayClassInfo = JSC::getResizableOrGrowableSharedUint32ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)ResizableOrGrowableSharedUint32ArrayClassInfo, 0, 0, v7, v8);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_34>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void (*v18)(_QWORD *, unint64_t);
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[3];

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *((_QWORD *)v5 - 6);
    if (v7)
    {
      if (*((_QWORD *)v5 - 5) == v7)
      {
        *((_QWORD *)v5 - 6) = 0;
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 & 0xFFFFFFEF, v20));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 1808);
  v10 = v8;
  if ((v9 & 1) != 0)
  {
    v18 = *(void (**)(_QWORD *, unint64_t))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v8 & 8) != 0)
      v19 = (_QWORD *)(v8 - 16);
    v24[0] = *v19;
    v24[1] = v8;
    v24[2] = v8 + 1808;
    v18(v24, v8);
    v10 = a1[1];
  }
  result = *(_QWORD *)(v8 + 1816);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DEA40);
  }
  v12 = *a1;
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DEA60);
  }
  if (v10 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DEAA4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DEAC4);
  }
  v13 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v13;
  if (!v13 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v14 = v5 - 64;
      v15 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v14 + 2) = v15;
      *((_QWORD *)v14 + 4) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 | 0x10, v16));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v22 = (unsigned int *)(v4 + 80);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 | 2, v22));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_35>(JSC::JSGlobalObject::init(JSC::VM &)::$_35 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  JSC::Structure *Structure;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  JSC *v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  JSC::JSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  unint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t result;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(WTF::StringImpl **);
  WTF::StringImpl **v77;
  unint64_t v78;
  uint64_t (*v79)(WTF::StringImpl **);
  WTF::StringImpl **v80;
  unint64_t v81;
  void (*v82)(WTF::StringImpl **);
  WTF::StringImpl **v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  JSC::JSObject *v98;
  uint64_t v99;
  unint64_t v100;
  WTF::StringImpl *v101;
  JSC::VM *v102;
  char *v103;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v84 = (unsigned int *)(v13 + 16);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 & 0xFFFFFFEF, v84));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v94 = (JSC *)v16;
  v95 = v18;
  v96 = v9;
  v97 = a1;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  v19 = *(_QWORD *)(v18 + 1648);
  if ((v19 & 1) != 0)
  {
    v76 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v77 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v77 = (WTF::StringImpl **)(v18 - 16);
    v101 = *v77;
    v102 = (JSC::VM *)v18;
    v103 = (char *)(v18 + 1648);
    v19 = v76(&v101);
  }
  LODWORD(v101) = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v78 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v78);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v78;
LABEL_11:
    *v17 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v88, v89, v90);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v26 = JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>::create((_QWORD *)v16, (JSC::VM *)v18, SlowCase, v21, v22, v23, v24, v25);
  if (v98)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DEED4);
  }
  if (v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DEEF4);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DEF14);
  }
  v98 = (JSC::JSObject *)v26;
  Structure = (JSC::Structure *)JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createStructure(v94, (JSC::VM *)v95, v26);
  JSC::LazyClassStructure::Initializer::setStructure(&v94, Structure);
  v37 = v94;
  v36 = v95;
  v38 = (unint64_t *)((char *)v94 + 40136);
  v39 = *(_QWORD *)(v95 + 1656);
  if ((v39 & 1) != 0)
  {
    v79 = *(uint64_t (**)(WTF::StringImpl **))(v39 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v95 & 8) != 0)
      v80 = (WTF::StringImpl **)(v95 - 16);
    else
      v80 = (WTF::StringImpl **)(v95 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v80;
    v102 = (JSC::VM *)v95;
    v103 = (char *)(v95 + 1656);
    v39 = v79(&v101);
  }
  LODWORD(v101) = 67099;
  if ((v39 & 0xFFFE000000000002) == 0 && v39 && *(unsigned __int8 *)(v39 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v39, v37, v35, v29, v30, v31, v32, v33, v34);
  v40 = *v38;
  if (*v38 >= v38[1])
  {
    v40 = v38[2];
    if ((v40 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v37, v28, v29, v30, v31, v32, v33, v34);
      v40 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v37 + 40112, (uint64_t)v37 + 192, 128, 0, 0, v91, v92, v93);
      goto LABEL_24;
    }
    v81 = *(_QWORD *)(v40 + 8) ^ v38[3];
    v38[1] = v40 + HIDWORD(v81);
    v38[2] = v40 + (int)v81;
  }
  *v38 = v40 + 128;
LABEL_24:
  *(_DWORD *)v40 = 0;
  JSC::Structure::Structure(v40, (uint64_t)v37, v36, v39, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>::s_info, 0, 0);
  if (*((_BYTE *)v37 + 755))
    __dmb(0xAu);
  v41 = v98;
  v42 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v42 = 0xC00000002;
  *(_QWORD *)(v42 + 8) = "Float32Array";
  *(_DWORD *)(v42 + 16) = 4;
  v101 = (WTF::StringImpl *)v42;
  v47 = JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>::create(v37, (JSC::VM *)v40, (uint64_t)v41, (JSC::VM *)&v101, v43, v44, v45, v46);
  if (!v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DEF94);
  }
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DEFB4);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DEFD4);
  }
  v52 = v47;
  v100 = v47;
  JSC::JSObject::putDirectWithoutTransition(v41, (uint64_t)v37, *(_QWORD *)(v38[227] + 1080), v47, 4, v48, v49, v50, v51);
  v96[1] = v52;
  if (v52 && *((_DWORD *)v37 + 190) >= *(unsigned __int8 *)(v36 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v37 + 192, v36);
  v60 = v101;
  v101 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = *(_QWORD *)(v36 + 1848);
  if ((v61 & 1) != 0)
  {
    v82 = *(void (**)(WTF::StringImpl **))(v61 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v36 & 8) != 0)
      v83 = (WTF::StringImpl **)(v36 - 16);
    else
      v83 = (WTF::StringImpl **)(v36 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v83;
    v102 = (JSC::VM *)v36;
    v103 = (char *)(v36 + 1848);
    v82(&v101);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DF044);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DF064);
  }
  v63 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v63;
  if (!v63 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v64 = v13 - 64;
      v65 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v64 + 2) = v65;
      *((_QWORD *)v64 + 4) = v65;
      if (v65)
      {
        v66 = (unsigned int *)(v13 + 16);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 | 0x10, v66));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v86 = (unsigned int *)(v12 + 80);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 | 2, v86));
    }
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>::create(_QWORD *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  v11 = JSC::allocateCell<JSC::IntlCollatorPrototype>(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v11 = a3 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>::finishCreation((JSC::JSObject *)v11, (uint64_t)a1, (uint64_t)a2, v18, v13, v14, v15, v16, v17);
  return v11;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **Float32ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019246;
  Float32ArrayClassInfo = JSC::getFloat32ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)Float32ArrayClassInfo, 0, 0, v7, v8);
}

unint64_t JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>::create(JSC *a1, JSC::VM *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  JSC::JSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = JSC::allocateCell<JSC::AggregateErrorConstructor>(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v12, (uint64_t)a1, (unint64_t)a2, (uint64_t)JSC::callFloat32Array, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructFloat32Array);
  JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>::finishCreation(v13, a1, a3, a4, v14, v15, v16, v17);
  return v12;
}

uint64_t *JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>::finishCreation(JSC::JSObject *a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const JSC::PropertyTable *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 528), 0xFFFE000000000004, 14, a7, a8, a9, a4);
  return JSC::JSGlobalObject::installTypedArrayIteratorProtocolWatchpoint(a3, (uint64_t)a1, 8, v11, v12, v13, v14, v15);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_36>(JSC **a1)
{
  uint64_t *v1;
  uint64_t v2;
  JSC *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  JSC *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  unint64_t v13;
  JSC *v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t *);
  uint64_t *v23;
  void (*v24)(uint64_t *);
  uint64_t *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  JSC::VM *v31;
  _QWORD *v32;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (char *)*a1 + 64;
  v6 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *((_BYTE *)v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (unint64_t)a1[1];
  v10 = *(_QWORD *)(v9 + 1832);
  if ((v10 & 1) != 0)
  {
    v22 = *(uint64_t (**)(uint64_t *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v9 & 8) != 0)
      v23 = (uint64_t *)(v9 - 16);
    v30 = *v23;
    v31 = (JSC::VM *)v9;
    v32 = (_QWORD *)(v9 + 1832);
    v10 = v22(&v30);
  }
  if (*(_QWORD *)(v10 + 48) == 2)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v10 + 48);
  Structure = JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Float32Adaptor>::createStructure(v8, (JSC::VM *)v9, v11);
  if (!Structure)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DF49CLL);
  }
  v14 = *a1;
  v13 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = Structure;
  if ((Structure & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DF4BCLL);
  }
  if (*((_DWORD *)v14 + 190) >= *(unsigned __int8 *)(v13 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v14 + 192, v13);
    v13 = (unint64_t)a1[1];
  }
  v15 = *(_QWORD *)(v13 + 1832);
  if ((v15 & 1) != 0)
  {
    v24 = *(void (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v25 = (uint64_t *)(v13 - 16);
    v30 = *v25;
    v31 = (JSC::VM *)v13;
    v32 = (_QWORD *)(v13 + 1832);
    v24(&v30);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DF514);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DF534);
  }
  v17 = *((_DWORD *)v4 + 22) - 1;
  *((_DWORD *)v4 + 22) = v17;
  if (!v17 && v5[93377])
  {
    if (*((_BYTE *)v4 + 86))
    {
      v18 = v5 - 64;
      v19 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v18 + 2) = v19;
      *((_QWORD *)v18 + 4) = v19;
      if (v19)
      {
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 | 0x10, v20));
      }
      if (v5[93379])
        v5[93378] = 1;
      *((_BYTE *)v4 + 86) = 0;
    }
    else
    {
      v28 = (unsigned int *)((char *)v4 + 80);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 | 2, v28));
    }
  }
  return result;
}

uint64_t JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Float32Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **ResizableOrGrowableSharedFloat32ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019246;
  ResizableOrGrowableSharedFloat32ArrayClassInfo = JSC::getResizableOrGrowableSharedFloat32ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)ResizableOrGrowableSharedFloat32ArrayClassInfo, 0, 0, v7, v8);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_37>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void (*v18)(_QWORD *, unint64_t);
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[3];

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *((_QWORD *)v5 - 6);
    if (v7)
    {
      if (*((_QWORD *)v5 - 5) == v7)
      {
        *((_QWORD *)v5 - 6) = 0;
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 & 0xFFFFFFEF, v20));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 1832);
  v10 = v8;
  if ((v9 & 1) != 0)
  {
    v18 = *(void (**)(_QWORD *, unint64_t))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v8 & 8) != 0)
      v19 = (_QWORD *)(v8 - 16);
    v24[0] = *v19;
    v24[1] = v8;
    v24[2] = v8 + 1832;
    v18(v24, v8);
    v10 = a1[1];
  }
  result = *(_QWORD *)(v8 + 1840);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DF760);
  }
  v12 = *a1;
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DF780);
  }
  if (v10 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DF7C4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DF7E4);
  }
  v13 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v13;
  if (!v13 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v14 = v5 - 64;
      v15 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v14 + 2) = v15;
      *((_QWORD *)v14 + 4) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 | 0x10, v16));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v22 = (unsigned int *)(v4 + 80);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 | 2, v22));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_38>(JSC::JSGlobalObject::init(JSC::VM &)::$_38 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t SlowCase;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  JSC::Structure *Structure;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  JSC *v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  JSC::JSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  unint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t result;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(WTF::StringImpl **);
  WTF::StringImpl **v77;
  unint64_t v78;
  uint64_t (*v79)(WTF::StringImpl **);
  WTF::StringImpl **v80;
  unint64_t v81;
  void (*v82)(WTF::StringImpl **);
  WTF::StringImpl **v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  JSC::JSObject *v98;
  uint64_t v99;
  unint64_t v100;
  WTF::StringImpl *v101;
  JSC::VM *v102;
  char *v103;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v84 = (unsigned int *)(v13 + 16);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 & 0xFFFFFFEF, v84));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v94 = (JSC *)v16;
  v95 = v18;
  v96 = v9;
  v97 = a1;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  v19 = *(_QWORD *)(v18 + 1648);
  if ((v19 & 1) != 0)
  {
    v76 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v77 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v77 = (WTF::StringImpl **)(v18 - 16);
    v101 = *v77;
    v102 = (JSC::VM *)v18;
    v103 = (char *)(v18 + 1648);
    v19 = v76(&v101);
  }
  LODWORD(v101) = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v78 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v78);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v78;
LABEL_11:
    *v17 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v88, v89, v90);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v26 = JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::create((_QWORD *)v16, (JSC::VM *)v18, SlowCase, v21, v22, v23, v24, v25);
  if (v98)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DFBF4);
  }
  if (v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DFC14);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DFC34);
  }
  v98 = (JSC::JSObject *)v26;
  Structure = (JSC::Structure *)JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createStructure(v94, (JSC::VM *)v95, v26);
  JSC::LazyClassStructure::Initializer::setStructure(&v94, Structure);
  v37 = v94;
  v36 = v95;
  v38 = (unint64_t *)((char *)v94 + 40136);
  v39 = *(_QWORD *)(v95 + 1656);
  if ((v39 & 1) != 0)
  {
    v79 = *(uint64_t (**)(WTF::StringImpl **))(v39 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v95 & 8) != 0)
      v80 = (WTF::StringImpl **)(v95 - 16);
    else
      v80 = (WTF::StringImpl **)(v95 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v80;
    v102 = (JSC::VM *)v95;
    v103 = (char *)(v95 + 1656);
    v39 = v79(&v101);
  }
  LODWORD(v101) = 67099;
  if ((v39 & 0xFFFE000000000002) == 0 && v39 && *(unsigned __int8 *)(v39 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v39, v37, v35, v29, v30, v31, v32, v33, v34);
  v40 = *v38;
  if (*v38 >= v38[1])
  {
    v40 = v38[2];
    if ((v40 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v37, v28, v29, v30, v31, v32, v33, v34);
      v40 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v37 + 40112, (uint64_t)v37 + 192, 128, 0, 0, v91, v92, v93);
      goto LABEL_24;
    }
    v81 = *(_QWORD *)(v40 + 8) ^ v38[3];
    v38[1] = v40 + HIDWORD(v81);
    v38[2] = v40 + (int)v81;
  }
  *v38 = v40 + 128;
LABEL_24:
  *(_DWORD *)v40 = 0;
  JSC::Structure::Structure(v40, (uint64_t)v37, v36, v39, (uint64_t)&v101, (unint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::s_info, 0, 0);
  if (*((_BYTE *)v37 + 755))
    __dmb(0xAu);
  v41 = v98;
  v42 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v42 = 0xC00000002;
  *(_QWORD *)(v42 + 8) = "Float64Array";
  *(_DWORD *)(v42 + 16) = 4;
  v101 = (WTF::StringImpl *)v42;
  v47 = JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::create(v37, (JSC::VM *)v40, (uint64_t)v41, (JSC::VM *)&v101, v43, v44, v45, v46);
  if (!v99)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DFCB4);
  }
  if (!v41)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DFCD4);
  }
  if (v100)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DFCF4);
  }
  v52 = v47;
  v100 = v47;
  JSC::JSObject::putDirectWithoutTransition(v41, (uint64_t)v37, *(_QWORD *)(v38[227] + 1080), v47, 4, v48, v49, v50, v51);
  v96[1] = v52;
  if (v52 && *((_DWORD *)v37 + 190) >= *(unsigned __int8 *)(v36 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v37 + 192, v36);
  v60 = v101;
  v101 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = *(_QWORD *)(v36 + 1872);
  if ((v61 & 1) != 0)
  {
    v82 = *(void (**)(WTF::StringImpl **))(v61 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v36 & 8) != 0)
      v83 = (WTF::StringImpl **)(v36 - 16);
    else
      v83 = (WTF::StringImpl **)(v36 & 0xFFFFFFFFFFFFC000 | 8);
    v101 = *v83;
    v102 = (JSC::VM *)v36;
    v103 = (char *)(v36 + 1872);
    v82(&v101);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DFD64);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989DFD84);
  }
  v63 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v63;
  if (!v63 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v64 = v13 - 64;
      v65 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v64 + 2) = v65;
      *((_QWORD *)v64 + 4) = v65;
      if (v65)
      {
        v66 = (unsigned int *)(v13 + 16);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 | 0x10, v66));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v86 = (unsigned int *)(v12 + 80);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 | 2, v86));
    }
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::create(_QWORD *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  v11 = JSC::allocateCell<JSC::IntlCollatorPrototype>(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v11 = a3 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::finishCreation((JSC::JSObject *)v11, (uint64_t)a1, (uint64_t)a2, v18, v13, v14, v15, v16, v17);
  return v11;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **Float64ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019247;
  Float64ArrayClassInfo = JSC::getFloat64ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)Float64ArrayClassInfo, 0, 0, v7, v8);
}

unint64_t JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::create(JSC *a1, JSC::VM *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  JSC::JSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = JSC::allocateCell<JSC::AggregateErrorConstructor>(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v12, (uint64_t)a1, (unint64_t)a2, (uint64_t)JSC::callFloat64Array, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructFloat64Array);
  JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::finishCreation(v13, a1, a3, a4, v14, v15, v16, v17);
  return v12;
}

uint64_t *JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::finishCreation(JSC::JSObject *a1, uint64_t a2, uint64_t a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const JSC::PropertyTable *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 528), 0xFFFE000000000008, 14, a7, a8, a9, a4);
  return JSC::JSGlobalObject::installTypedArrayIteratorProtocolWatchpoint(a3, (uint64_t)a1, 9, v11, v12, v13, v14, v15);
}

void JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)3, a4, 1, a6, a7, a8);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v11, v12, v13, v14);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 528), 0xFFFE000000000008, 14, v15, v16, v17, v18);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_39>(JSC **a1)
{
  uint64_t *v1;
  uint64_t v2;
  JSC *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  JSC *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Structure;
  unint64_t v13;
  JSC *v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t (*v22)(uint64_t *);
  uint64_t *v23;
  void (*v24)(uint64_t *);
  uint64_t *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  JSC::VM *v31;
  _QWORD *v32;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (char *)*a1 + 64;
  v6 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *((_BYTE *)v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (unint64_t)a1[1];
  v10 = *(_QWORD *)(v9 + 1856);
  if ((v10 & 1) != 0)
  {
    v22 = *(uint64_t (**)(uint64_t *))(v10 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v9 & 8) != 0)
      v23 = (uint64_t *)(v9 - 16);
    v30 = *v23;
    v31 = (JSC::VM *)v9;
    v32 = (_QWORD *)(v9 + 1856);
    v10 = v22(&v30);
  }
  if (*(_QWORD *)(v10 + 48) == 2)
    v11 = 0;
  else
    v11 = *(_QWORD *)(v10 + 48);
  Structure = JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Float64Adaptor>::createStructure(v8, (JSC::VM *)v9, v11);
  if (!Structure)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E0230);
  }
  v14 = *a1;
  v13 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = Structure;
  if ((Structure & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E0250);
  }
  if (*((_DWORD *)v14 + 190) >= *(unsigned __int8 *)(v13 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v14 + 192, v13);
    v13 = (unint64_t)a1[1];
  }
  v15 = *(_QWORD *)(v13 + 1856);
  if ((v15 & 1) != 0)
  {
    v24 = *(void (**)(uint64_t *))(v15 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v25 = (uint64_t *)(v13 - 16);
    v30 = *v25;
    v31 = (JSC::VM *)v13;
    v32 = (_QWORD *)(v13 + 1856);
    v24(&v30);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E02A8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E02C8);
  }
  v17 = *((_DWORD *)v4 + 22) - 1;
  *((_DWORD *)v4 + 22) = v17;
  if (!v17 && v5[93377])
  {
    if (*((_BYTE *)v4 + 86))
    {
      v18 = v5 - 64;
      v19 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v18 + 2) = v19;
      *((_QWORD *)v18 + 4) = v19;
      if (v19)
      {
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 | 0x10, v20));
      }
      if (v5[93379])
        v5[93378] = 1;
      *((_BYTE *)v4 + 86) = 0;
    }
    else
    {
      v28 = (unsigned int *)((char *)v4 + 80);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 | 2, v28));
    }
  }
  return result;
}

uint64_t JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::Float64Adaptor>::createStructure(JSC *a1, JSC::VM *a2, uint64_t a3)
{
  char **ResizableOrGrowableSharedFloat64ArrayClassInfo;
  uint64_t v7;
  double v8;
  int v10;

  v10 = 84019247;
  ResizableOrGrowableSharedFloat64ArrayClassInfo = JSC::getResizableOrGrowableSharedFloat64ArrayClassInfo(a1);
  return JSC::Structure::create(a1, a2, a3, (uint64_t)&v10, (unint64_t)ResizableOrGrowableSharedFloat64ArrayClassInfo, 0, 0, v7, v8);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_40>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void (*v18)(_QWORD *, unint64_t);
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[3];

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *((_QWORD *)v5 - 6);
    if (v7)
    {
      if (*((_QWORD *)v5 - 5) == v7)
      {
        *((_QWORD *)v5 - 6) = 0;
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 & 0xFFFFFFEF, v20));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 1856);
  v10 = v8;
  if ((v9 & 1) != 0)
  {
    v18 = *(void (**)(_QWORD *, unint64_t))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v8 & 8) != 0)
      v19 = (_QWORD *)(v8 - 16);
    v24[0] = *v19;
    v24[1] = v8;
    v24[2] = v8 + 1856;
    v18(v24, v8);
    v10 = a1[1];
  }
  result = *(_QWORD *)(v8 + 1864);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E04F4);
  }
  v12 = *a1;
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E0514);
  }
  if (v10 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E0558);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E0578);
  }
  v13 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v13;
  if (!v13 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v14 = v5 - 64;
      v15 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v14 + 2) = v15;
      *((_QWORD *)v14 + 4) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 | 0x10, v16));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v22 = (unsigned int *)(v4 + 80);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 | 2, v22));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_41>(JSC::JSGlobalObject::init(JSC::VM &)::$_41 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t SlowCase;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;
  int v31;
  const JSC::PropertyTable *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  JSC *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  JSC::VM *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  unint64_t v57;
  JSC *v58;
  unint64_t *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  JSC::JSObject *v63;
  uint64_t v64;
  JSC::VM *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  uint64_t result;
  int v99;
  _BYTE *v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(WTF::StringImpl **);
  WTF::StringImpl **v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t (*v117)(WTF::StringImpl **);
  WTF::StringImpl **v118;
  unint64_t v119;
  unint64_t v120;
  void (*v121)(WTF::StringImpl **);
  WTF::StringImpl **v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  JSC::Heap *v142;
  _BYTE *v143;
  JSC *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  JSC::JSObject *v148;
  uint64_t v149;
  unint64_t v150;
  WTF::StringImpl *v151;
  unint64_t v152;
  uint64_t v153;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v143 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v123 = (unsigned int *)(v13 + 16);
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 & 0xFFFFFFEF, v123));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v144 = (JSC *)v16;
  v145 = v18;
  v146 = v9;
  v147 = a1;
  v149 = 0;
  v150 = 0;
  v148 = 0;
  v19 = *(_QWORD *)(v18 + 1648);
  if ((v19 & 1) != 0)
  {
    v112 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v18 & 8) != 0)
      v113 = (WTF::StringImpl **)(v18 - 16);
    else
      v113 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    v151 = *v113;
    v152 = v18;
    v153 = v18 + 1648;
    v19 = v112(&v151);
  }
  LODWORD(v151) = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  v20 = (unint64_t *)(v16 + 38904);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v114 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v114);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v114;
LABEL_11:
    *v17 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v127, v128, v129);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v151, (unint64_t)&JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v30 = *v20;
  if (*v20 < *(_QWORD *)(v16 + 38912))
    goto LABEL_15;
  v30 = *(_QWORD *)(v16 + 38920);
  if ((v30 & 1) == 0)
  {
    v115 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v16 + 38928);
    *(_QWORD *)(v16 + 38912) = v30 + HIDWORD(v115);
    *(_QWORD *)(v16 + 38920) = v30 + (int)v115;
LABEL_15:
    *v20 = v30 + 16;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v22, v23, v24, v25, v26, v27, v28);
  v30 = JSC::LocalAllocator::allocateSlowCase(v16 + 38880, v16 + 192, 16, 0, 0, v130, v131, v132);
LABEL_16:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v30, v16, *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 528), 0xFFFE000000000008, 14, v26, v27, v28, v29);
  JSC::JSGlobalObject::installTypedArrayIteratorProtocolWatchpoint(v18, v30, 10, v32, v33, v34, v35, v36);
  if (v148)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E0B38);
  }
  if (v149)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E0B58);
  }
  if (v150)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E0B78);
  }
  v148 = (JSC::JSObject *)v30;
  v45 = v144;
  v46 = v145;
  v47 = (unint64_t *)((char *)v144 + 40136);
  LODWORD(v151) = 84019248;
  if ((v30 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v30 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v30, v144, v44, v38, v39, v40, v41, v42, v43);
  v48 = *v47;
  if (*((_QWORD *)v144 + 5017) < *((_QWORD *)v144 + 5018))
    goto LABEL_25;
  v48 = *((_QWORD *)v144 + 5019);
  if ((v48 & 1) == 0)
  {
    v116 = *(_QWORD *)(v48 + 8) ^ *((_QWORD *)v144 + 5020);
    *((_QWORD *)v144 + 5018) = v48 + HIDWORD(v116);
    v47[2] = v48 + (int)v116;
LABEL_25:
    *v47 = v48 + 128;
    goto LABEL_26;
  }
  JSC::sanitizeStackForVM(v144, v37, v38, v39, v40, v41, v42, v43);
  v48 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v144 + 40112, (uint64_t)v144 + 192, 128, 0, 0, v133, v134, v135);
LABEL_26:
  *(_DWORD *)v48 = 0;
  JSC::Structure::Structure(v48, (uint64_t)v45, v46, v30, (uint64_t)&v151, (unint64_t)&JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::s_info, 0, 0);
  if (*((_BYTE *)v45 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v144, (JSC::Structure *)v48);
  v58 = v144;
  v57 = v145;
  v59 = (unint64_t *)((char *)v144 + 40136);
  v60 = *(_QWORD *)(v145 + 1656);
  if ((v60 & 1) != 0)
  {
    v117 = *(uint64_t (**)(WTF::StringImpl **))(v60 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v145 & 8) != 0)
      v118 = (WTF::StringImpl **)(v145 - 16);
    else
      v118 = (WTF::StringImpl **)(v145 & 0xFFFFFFFFFFFFC000 | 8);
    v151 = *v118;
    v152 = v145;
    v153 = v145 + 1656;
    v60 = v117(&v151);
  }
  LODWORD(v151) = 67099;
  if ((v60 & 0xFFFE000000000002) == 0 && v60 && *(unsigned __int8 *)(v60 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v60, v58, v56, v50, v51, v52, v53, v54, v55);
  v61 = (unint64_t *)((char *)v58 + 38552);
  v142 = (JSC *)((char *)v58 + 192);
  v62 = *v59;
  if (*v59 < v59[1])
    goto LABEL_34;
  v62 = v59[2];
  if ((v62 & 1) == 0)
  {
    v119 = *(_QWORD *)(v62 + 8) ^ v59[3];
    v59[1] = v62 + HIDWORD(v119);
    v59[2] = v62 + (int)v119;
LABEL_34:
    *v59 = v62 + 128;
    goto LABEL_35;
  }
  JSC::sanitizeStackForVM(v58, v49, v50, v51, v52, v53, v54, v55);
  v62 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v58 + 40112, (uint64_t)v142, 128, 0, 0, v136, v137, v138);
LABEL_35:
  *(_DWORD *)v62 = 0;
  JSC::Structure::Structure(v62, (uint64_t)v58, v57, v60, (uint64_t)&v151, (unint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>::s_info, 0, 0);
  if (*((_BYTE *)v58 + 755))
    __dmb(0xAu);
  v63 = v148;
  v64 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v64 = 0xD00000002;
  *(_QWORD *)(v64 + 8) = "BigInt64Array";
  *(_DWORD *)(v64 + 16) = 4;
  v151 = (WTF::StringImpl *)v64;
  v72 = *v61;
  if (*v61 >= *((_QWORD *)v58 + 4820))
  {
    v72 = *((_QWORD *)v58 + 4821);
    if ((v72 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v58, v65, v66, v67, v68, v69, v70, v71);
      v72 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v58 + 38528, (uint64_t)v142, 48, 0, 0, v139, v140, v141);
      goto LABEL_39;
    }
    v120 = *(_QWORD *)(v72 + 8) ^ *((_QWORD *)v58 + 4822);
    *((_QWORD *)v58 + 4820) = v72 + HIDWORD(v120);
    *((_QWORD *)v58 + 4821) = v72 + (int)v120;
  }
  *v61 = v72 + 48;
LABEL_39:
  *(_DWORD *)v72 = 0;
  v73 = JSC::InternalFunction::InternalFunction(v72, (uint64_t)v58, v62, (uint64_t)JSC::callBigInt64Array, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructBigInt64Array);
  JSC::InternalFunction::finishCreation(v73, v58, (const WTF::String *)3, (JSC::VM *)&v151, 1, v74, v75, v76);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v72, (uint64_t)v58, *(_QWORD *)(v59[227] + 2160), (uint64_t)v63, 14, v77, v78, v79, v80);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v72, (uint64_t)v58, *(_QWORD *)(v59[227] + 528), 0xFFFE000000000008, 14, v81, v82, v83, v84);
  if (!v149)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E0C48);
  }
  if (!v63)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E0C68);
  }
  if (v150)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E0C88);
  }
  v150 = v72;
  JSC::JSObject::putDirectWithoutTransition(v63, (uint64_t)v58, *(_QWORD *)(v59[227] + 1080), v72, 4, v85, v86, v87, v88);
  v146[1] = v72;
  if (*((_DWORD *)v58 + 190) >= *(unsigned __int8 *)(v57 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v142, v57);
  v96 = v151;
  v151 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = *(_QWORD *)(v57 + 1896);
  if ((v97 & 1) != 0)
  {
    v121 = *(void (**)(WTF::StringImpl **))(v97 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v57 & 8) != 0)
      v122 = (WTF::StringImpl **)(v57 - 16);
    else
      v122 = (WTF::StringImpl **)(v57 & 0xFFFFFFFFFFFFC000 | 8);
    v151 = *v122;
    v152 = v57;
    v153 = v57 + 1896;
    v121(&v151);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E0CD8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E0CF8);
  }
  v99 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v99;
  if (!v99 && v143[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v100 = v143 - 64;
      v101 = *((_QWORD *)v143 - 5);
      *((_QWORD *)v100 + 2) = v101;
      *((_QWORD *)v100 + 4) = v101;
      if (v101)
      {
        v102 = (unsigned int *)(v143 + 16);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 | 0x10, v102));
      }
      if (v143[93379])
        v143[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v125 = (unsigned int *)(v12 + 80);
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 | 2, v125));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_42>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t SlowCase;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t (*v33)(uint64_t *);
  uint64_t *v34;
  unint64_t v35;
  void (*v36)(uint64_t *);
  uint64_t *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v38 = (unsigned int *)(v13 + 16);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 & 0xFFFFFFEF, v38));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 1880);
  if ((v19 & 1) != 0)
  {
    v33 = *(uint64_t (**)(uint64_t *))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v34 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v34 = (uint64_t *)(v18 - 16);
    v45 = *v34;
    v46 = v18;
    v47 = v18 + 1880;
    v19 = v33(&v45);
  }
  if (*(_QWORD *)(v19 + 48) == 2)
    v20 = 0;
  else
    v20 = *(_QWORD *)(v19 + 48);
  LODWORD(v45) = 84019248;
  if ((v20 & 0xFFFE000000000002) == 0 && v20 && *(unsigned __int8 *)(v20 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v20, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 >= *(_QWORD *)(v16 + 40144))
  {
    SlowCase = *(_QWORD *)(v16 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v42, v43, v44);
      goto LABEL_18;
    }
    v35 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v35);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v35;
  }
  *v17 = SlowCase + 128;
LABEL_18:
  *(_DWORD *)SlowCase = 0;
  v23 = JSC::Structure::Structure(SlowCase, v16, v18, v20, (uint64_t)&v45, (unint64_t)&JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::BigInt64Adaptor>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v25 = *a1;
  v24 = a1[1];
  *(_QWORD *)a1[2] = v23;
  if ((v23 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E10B8);
  }
  if (*(_DWORD *)(v25 + 760) >= *(unsigned __int8 *)(v24 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v25 + 192, v24);
    v24 = a1[1];
  }
  v26 = *(_QWORD *)(v24 + 1880);
  if ((v26 & 1) != 0)
  {
    v36 = *(void (**)(uint64_t *))(v26 & 0xFFFFFFFFFFFFFFFCLL);
    v37 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v24 & 8) != 0)
      v37 = (uint64_t *)(v24 - 16);
    v45 = *v37;
    v46 = v24;
    v47 = v24 + 1880;
    v36(&v45);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E1110);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E1130);
  }
  v28 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v28;
  if (!v28 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v29 = v13 - 64;
      v30 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v29 + 2) = v30;
      *((_QWORD *)v29 + 4) = v30;
      if (v30)
      {
        v31 = (unsigned int *)(v13 + 16);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 | 0x10, v31));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v40 = (unsigned int *)(v12 + 80);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 | 2, v40));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_43>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void (*v18)(_QWORD *, unint64_t);
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[3];

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *((_QWORD *)v5 - 6);
    if (v7)
    {
      if (*((_QWORD *)v5 - 5) == v7)
      {
        *((_QWORD *)v5 - 6) = 0;
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 & 0xFFFFFFEF, v20));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 1880);
  v10 = v8;
  if ((v9 & 1) != 0)
  {
    v18 = *(void (**)(_QWORD *, unint64_t))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v8 & 8) != 0)
      v19 = (_QWORD *)(v8 - 16);
    v24[0] = *v19;
    v24[1] = v8;
    v24[2] = v8 + 1880;
    v18(v24, v8);
    v10 = a1[1];
  }
  result = *(_QWORD *)(v8 + 1888);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E1338);
  }
  v12 = *a1;
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E1358);
  }
  if (v10 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E139CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E13BCLL);
  }
  v13 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v13;
  if (!v13 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v14 = v5 - 64;
      v15 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v14 + 2) = v15;
      *((_QWORD *)v14 + 4) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 | 0x10, v16));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v22 = (unsigned int *)(v4 + 80);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 | 2, v22));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_44>(JSC::JSGlobalObject::init(JSC::VM &)::$_44 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t SlowCase;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;
  int v31;
  const JSC::PropertyTable *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  JSC *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  JSC::VM *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  unint64_t v57;
  JSC *v58;
  unint64_t *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  JSC::JSObject *v63;
  uint64_t v64;
  JSC::VM *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  uint64_t v97;
  uint64_t result;
  int v99;
  _BYTE *v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(WTF::StringImpl **);
  WTF::StringImpl **v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t (*v117)(WTF::StringImpl **);
  WTF::StringImpl **v118;
  unint64_t v119;
  unint64_t v120;
  void (*v121)(WTF::StringImpl **);
  WTF::StringImpl **v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  JSC::Heap *v142;
  _BYTE *v143;
  JSC *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  JSC::JSObject *v148;
  uint64_t v149;
  unint64_t v150;
  WTF::StringImpl *v151;
  unint64_t v152;
  uint64_t v153;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v143 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v123 = (unsigned int *)(v13 + 16);
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 & 0xFFFFFFEF, v123));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v144 = (JSC *)v16;
  v145 = v18;
  v146 = v9;
  v147 = a1;
  v149 = 0;
  v150 = 0;
  v148 = 0;
  v19 = *(_QWORD *)(v18 + 1648);
  if ((v19 & 1) != 0)
  {
    v112 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v18 & 8) != 0)
      v113 = (WTF::StringImpl **)(v18 - 16);
    else
      v113 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    v151 = *v113;
    v152 = v18;
    v153 = v18 + 1648;
    v19 = v112(&v151);
  }
  LODWORD(v151) = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  v20 = (unint64_t *)(v16 + 38904);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_11;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v114 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v114);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v114;
LABEL_11:
    *v17 = SlowCase + 128;
    goto LABEL_12;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v127, v128, v129);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v151, (unint64_t)&JSC::JSGenericTypedArrayViewPrototype<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v30 = *v20;
  if (*v20 < *(_QWORD *)(v16 + 38912))
    goto LABEL_15;
  v30 = *(_QWORD *)(v16 + 38920);
  if ((v30 & 1) == 0)
  {
    v115 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v16 + 38928);
    *(_QWORD *)(v16 + 38912) = v30 + HIDWORD(v115);
    *(_QWORD *)(v16 + 38920) = v30 + (int)v115;
LABEL_15:
    *v20 = v30 + 16;
    goto LABEL_16;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v22, v23, v24, v25, v26, v27, v28);
  v30 = JSC::LocalAllocator::allocateSlowCase(v16 + 38880, v16 + 192, 16, 0, 0, v130, v131, v132);
LABEL_16:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v30, v16, *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 528), 0xFFFE000000000008, 14, v26, v27, v28, v29);
  JSC::JSGlobalObject::installTypedArrayIteratorProtocolWatchpoint(v18, v30, 11, v32, v33, v34, v35, v36);
  if (v148)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E197CLL);
  }
  if (v149)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E199CLL);
  }
  if (v150)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E19BCLL);
  }
  v148 = (JSC::JSObject *)v30;
  v45 = v144;
  v46 = v145;
  v47 = (unint64_t *)((char *)v144 + 40136);
  LODWORD(v151) = 84019249;
  if ((v30 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v30 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v30, v144, v44, v38, v39, v40, v41, v42, v43);
  v48 = *v47;
  if (*((_QWORD *)v144 + 5017) < *((_QWORD *)v144 + 5018))
    goto LABEL_25;
  v48 = *((_QWORD *)v144 + 5019);
  if ((v48 & 1) == 0)
  {
    v116 = *(_QWORD *)(v48 + 8) ^ *((_QWORD *)v144 + 5020);
    *((_QWORD *)v144 + 5018) = v48 + HIDWORD(v116);
    v47[2] = v48 + (int)v116;
LABEL_25:
    *v47 = v48 + 128;
    goto LABEL_26;
  }
  JSC::sanitizeStackForVM(v144, v37, v38, v39, v40, v41, v42, v43);
  v48 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v144 + 40112, (uint64_t)v144 + 192, 128, 0, 0, v133, v134, v135);
LABEL_26:
  *(_DWORD *)v48 = 0;
  JSC::Structure::Structure(v48, (uint64_t)v45, v46, v30, (uint64_t)&v151, (unint64_t)&JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::s_info, 0, 0);
  if (*((_BYTE *)v45 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v144, (JSC::Structure *)v48);
  v58 = v144;
  v57 = v145;
  v59 = (unint64_t *)((char *)v144 + 40136);
  v60 = *(_QWORD *)(v145 + 1656);
  if ((v60 & 1) != 0)
  {
    v117 = *(uint64_t (**)(WTF::StringImpl **))(v60 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v145 & 8) != 0)
      v118 = (WTF::StringImpl **)(v145 - 16);
    else
      v118 = (WTF::StringImpl **)(v145 & 0xFFFFFFFFFFFFC000 | 8);
    v151 = *v118;
    v152 = v145;
    v153 = v145 + 1656;
    v60 = v117(&v151);
  }
  LODWORD(v151) = 67099;
  if ((v60 & 0xFFFE000000000002) == 0 && v60 && *(unsigned __int8 *)(v60 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v60, v58, v56, v50, v51, v52, v53, v54, v55);
  v61 = (unint64_t *)((char *)v58 + 38552);
  v142 = (JSC *)((char *)v58 + 192);
  v62 = *v59;
  if (*v59 < v59[1])
    goto LABEL_34;
  v62 = v59[2];
  if ((v62 & 1) == 0)
  {
    v119 = *(_QWORD *)(v62 + 8) ^ v59[3];
    v59[1] = v62 + HIDWORD(v119);
    v59[2] = v62 + (int)v119;
LABEL_34:
    *v59 = v62 + 128;
    goto LABEL_35;
  }
  JSC::sanitizeStackForVM(v58, v49, v50, v51, v52, v53, v54, v55);
  v62 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v58 + 40112, (uint64_t)v142, 128, 0, 0, v136, v137, v138);
LABEL_35:
  *(_DWORD *)v62 = 0;
  JSC::Structure::Structure(v62, (uint64_t)v58, v57, v60, (uint64_t)&v151, (unint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>::s_info, 0, 0);
  if (*((_BYTE *)v58 + 755))
    __dmb(0xAu);
  v63 = v148;
  v64 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v64 = 0xE00000002;
  *(_QWORD *)(v64 + 8) = "BigUint64Array";
  *(_DWORD *)(v64 + 16) = 4;
  v151 = (WTF::StringImpl *)v64;
  v72 = *v61;
  if (*v61 >= *((_QWORD *)v58 + 4820))
  {
    v72 = *((_QWORD *)v58 + 4821);
    if ((v72 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v58, v65, v66, v67, v68, v69, v70, v71);
      v72 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v58 + 38528, (uint64_t)v142, 48, 0, 0, v139, v140, v141);
      goto LABEL_39;
    }
    v120 = *(_QWORD *)(v72 + 8) ^ *((_QWORD *)v58 + 4822);
    *((_QWORD *)v58 + 4820) = v72 + HIDWORD(v120);
    *((_QWORD *)v58 + 4821) = v72 + (int)v120;
  }
  *v61 = v72 + 48;
LABEL_39:
  *(_DWORD *)v72 = 0;
  v73 = JSC::InternalFunction::InternalFunction(v72, (uint64_t)v58, v62, (uint64_t)JSC::callBigUint64Array, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructBigUint64Array);
  JSC::InternalFunction::finishCreation(v73, v58, (const WTF::String *)3, (JSC::VM *)&v151, 1, v74, v75, v76);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v72, (uint64_t)v58, *(_QWORD *)(v59[227] + 2160), (uint64_t)v63, 14, v77, v78, v79, v80);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v72, (uint64_t)v58, *(_QWORD *)(v59[227] + 528), 0xFFFE000000000008, 14, v81, v82, v83, v84);
  if (!v149)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E1A8CLL);
  }
  if (!v63)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E1AACLL);
  }
  if (v150)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E1ACCLL);
  }
  v150 = v72;
  JSC::JSObject::putDirectWithoutTransition(v63, (uint64_t)v58, *(_QWORD *)(v59[227] + 1080), v72, 4, v85, v86, v87, v88);
  v146[1] = v72;
  if (*((_DWORD *)v58 + 190) >= *(unsigned __int8 *)(v57 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v142, v57);
  v96 = v151;
  v151 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = *(_QWORD *)(v57 + 1920);
  if ((v97 & 1) != 0)
  {
    v121 = *(void (**)(WTF::StringImpl **))(v97 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v57 & 8) != 0)
      v122 = (WTF::StringImpl **)(v57 - 16);
    else
      v122 = (WTF::StringImpl **)(v57 & 0xFFFFFFFFFFFFC000 | 8);
    v151 = *v122;
    v152 = v57;
    v153 = v57 + 1920;
    v121(&v151);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E1B1CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E1B3CLL);
  }
  v99 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v99;
  if (!v99 && v143[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v100 = v143 - 64;
      v101 = *((_QWORD *)v143 - 5);
      *((_QWORD *)v100 + 2) = v101;
      *((_QWORD *)v100 + 4) = v101;
      if (v101)
      {
        v102 = (unsigned int *)(v143 + 16);
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 | 0x10, v102));
      }
      if (v143[93379])
        v143[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v125 = (unsigned int *)(v12 + 80);
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 | 2, v125));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_45>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t SlowCase;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t (*v33)(uint64_t *);
  uint64_t *v34;
  unint64_t v35;
  void (*v36)(uint64_t *);
  uint64_t *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v38 = (unsigned int *)(v13 + 16);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 & 0xFFFFFFEF, v38));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 1904);
  if ((v19 & 1) != 0)
  {
    v33 = *(uint64_t (**)(uint64_t *))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v34 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v34 = (uint64_t *)(v18 - 16);
    v45 = *v34;
    v46 = v18;
    v47 = v18 + 1904;
    v19 = v33(&v45);
  }
  if (*(_QWORD *)(v19 + 48) == 2)
    v20 = 0;
  else
    v20 = *(_QWORD *)(v19 + 48);
  LODWORD(v45) = 84019249;
  if ((v20 & 0xFFFE000000000002) == 0 && v20 && *(unsigned __int8 *)(v20 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v20, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 >= *(_QWORD *)(v16 + 40144))
  {
    SlowCase = *(_QWORD *)(v16 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v42, v43, v44);
      goto LABEL_18;
    }
    v35 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v35);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v35;
  }
  *v17 = SlowCase + 128;
LABEL_18:
  *(_DWORD *)SlowCase = 0;
  v23 = JSC::Structure::Structure(SlowCase, v16, v18, v20, (uint64_t)&v45, (unint64_t)&JSC::JSGenericResizableOrGrowableSharedTypedArrayView<JSC::BigUint64Adaptor>::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v25 = *a1;
  v24 = a1[1];
  *(_QWORD *)a1[2] = v23;
  if ((v23 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E1EFCLL);
  }
  if (*(_DWORD *)(v25 + 760) >= *(unsigned __int8 *)(v24 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v25 + 192, v24);
    v24 = a1[1];
  }
  v26 = *(_QWORD *)(v24 + 1904);
  if ((v26 & 1) != 0)
  {
    v36 = *(void (**)(uint64_t *))(v26 & 0xFFFFFFFFFFFFFFFCLL);
    v37 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v24 & 8) != 0)
      v37 = (uint64_t *)(v24 - 16);
    v45 = *v37;
    v46 = v24;
    v47 = v24 + 1904;
    v36(&v45);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E1F54);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E1F74);
  }
  v28 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v28;
  if (!v28 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v29 = v13 - 64;
      v30 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v29 + 2) = v30;
      *((_QWORD *)v29 + 4) = v30;
      if (v30)
      {
        v31 = (unsigned int *)(v13 + 16);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 | 0x10, v31));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v40 = (unsigned int *)(v12 + 80);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 | 2, v40));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_46>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  void (*v18)(_QWORD *, unint64_t);
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[3];

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *((_QWORD *)v5 - 6);
    if (v7)
    {
      if (*((_QWORD *)v5 - 5) == v7)
      {
        *((_QWORD *)v5 - 6) = 0;
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 & 0xFFFFFFEF, v20));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 1904);
  v10 = v8;
  if ((v9 & 1) != 0)
  {
    v18 = *(void (**)(_QWORD *, unint64_t))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v19 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v8 & 8) != 0)
      v19 = (_QWORD *)(v8 - 16);
    v24[0] = *v19;
    v24[1] = v8;
    v24[2] = v8 + 1904;
    v18(v24, v8);
    v10 = a1[1];
  }
  result = *(_QWORD *)(v8 + 1912);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E217CLL);
  }
  v12 = *a1;
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E219CLL);
  }
  if (v10 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E21E0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E2200);
  }
  v13 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v13;
  if (!v13 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v14 = v5 - 64;
      v15 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v14 + 2) = v15;
      *((_QWORD *)v14 + 4) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 | 0x10, v16));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v22 = (unsigned int *)(v4 + 80);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 | 2, v22));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_47>(JSC::JSGlobalObject::init(JSC::VM &)::$_47 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t SlowCase;
  JSC::Structure *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  JSC::VM *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  JSC::VM *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  JSC::JSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  unint64_t v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t result;
  int v73;
  _BYTE *v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  void (*v89)(WTF::StringImpl **);
  WTF::StringImpl **v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  JSC::VM *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  JSC::JSObject *v109;
  uint64_t v110;
  unint64_t v111;
  WTF::StringImpl *v112[3];

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v104 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v91 = (unsigned int *)(v13 + 16);
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 & 0xFFFFFFEF, v91));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v105 = (JSC::VM *)v16;
  v106 = v18;
  v107 = v9;
  v108 = a1;
  v110 = 0;
  v111 = 0;
  v109 = 0;
  v19 = *(_QWORD *)(v18 + 656);
  LODWORD(v112[0]) = 8215;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v86 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v86);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v86;
LABEL_10:
    *v17 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v95, v96, v97);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)v112, (unint64_t)&JSC::JSDataViewPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v27 = JSC::JSDataViewPrototype::create((JSC::JSDataViewPrototype *)v16, (JSC::VM *)SlowCase, v21, v22, v23, v24, v25, v26);
  v36 = v27;
  v109 = (JSC::JSObject *)v27;
  LODWORD(v112[0]) = 50;
  if ((v27 & 0xFFFE000000000002) == 0 && v27 && *(unsigned __int8 *)(v27 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v27, (JSC::VM *)v16, v35, v29, v30, v31, v32, v33, v34);
  v37 = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_18;
  v37 = *(_QWORD *)(v16 + 40152);
  if ((v37 & 1) == 0)
  {
    v87 = *(_QWORD *)(v37 + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = v37 + HIDWORD(v87);
    *(_QWORD *)(v16 + 40152) = v37 + (int)v87;
LABEL_18:
    *v17 = v37 + 128;
    goto LABEL_19;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v28, v29, v30, v31, v32, v33, v34);
  v37 = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v98, v99, v100);
LABEL_19:
  *(_DWORD *)v37 = 0;
  JSC::Structure::Structure(v37, v16, v18, v36, (uint64_t)v112, (unint64_t)&JSC::JSDataView::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v105, (JSC::Structure *)v37);
  v47 = v105;
  v46 = v106;
  v48 = (unint64_t *)((char *)v105 + 40136);
  v49 = *(_QWORD *)(v106 + 664);
  LODWORD(v112[0]) = 67099;
  if ((v49 & 0xFFFE000000000002) == 0 && v49 && *(unsigned __int8 *)(v49 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v49, v105, v45, v39, v40, v41, v42, v43, v44);
  v50 = *v48;
  if (*v48 >= v48[1])
  {
    v50 = v48[2];
    if ((v50 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v47, v38, v39, v40, v41, v42, v43, v44);
      v50 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v47 + 40112, (uint64_t)v47 + 192, 128, 0, 0, v101, v102, v103);
      goto LABEL_27;
    }
    v88 = *(_QWORD *)(v50 + 8) ^ v48[3];
    v48[1] = v50 + HIDWORD(v88);
    v48[2] = v50 + (int)v88;
  }
  *v48 = v50 + 128;
LABEL_27:
  *(_DWORD *)v50 = 0;
  JSC::Structure::Structure(v50, (uint64_t)v47, v46, v49, (uint64_t)v112, (unint64_t)&JSC::JSGenericTypedArrayViewConstructor<JSC::JSDataView>::s_info, 0, 0);
  if (*((_BYTE *)v47 + 755))
    __dmb(0xAu);
  v51 = v109;
  v52 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v52 = 0x800000002;
  *(_QWORD *)(v52 + 8) = "DataView";
  *(_DWORD *)(v52 + 16) = 4;
  v112[0] = (WTF::StringImpl *)v52;
  v57 = JSC::JSGenericTypedArrayViewConstructor<JSC::JSDataView>::create(v47, (JSC::VM *)v50, (uint64_t)v51, (JSC::VM *)v112, v53, v54, v55, v56);
  if (!v110)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E2688);
  }
  if (!v51)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E26A8);
  }
  if (v111)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E26C8);
  }
  v62 = v57;
  v111 = v57;
  JSC::JSObject::putDirectWithoutTransition(v51, (uint64_t)v47, *(_QWORD *)(v48[227] + 1080), v57, 4, v58, v59, v60, v61);
  v107[1] = v62;
  if (v62 && *((_DWORD *)v47 + 190) >= *(unsigned __int8 *)(v46 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v47 + 192, v46);
  v70 = v112[0];
  v112[0] = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = *(_QWORD *)(v46 + 1944);
  if ((v71 & 1) != 0)
  {
    v89 = *(void (**)(WTF::StringImpl **))(v71 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v46 & 8) != 0)
      v90 = (WTF::StringImpl **)(v46 - 16);
    else
      v90 = (WTF::StringImpl **)(v46 & 0xFFFFFFFFFFFFC000 | 8);
    v112[0] = *v90;
    v112[1] = (WTF::StringImpl *)v46;
    v112[2] = (WTF::StringImpl *)(v46 + 1944);
    v89(v112);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E2718);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E2758);
  }
  v73 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v73;
  if (!v73 && v104[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v74 = v104 - 64;
      v75 = *((_QWORD *)v104 - 5);
      *((_QWORD *)v74 + 2) = v75;
      *((_QWORD *)v74 + 4) = v75;
      if (v75)
      {
        v76 = (unsigned int *)(v104 + 16);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 | 0x10, v76));
      }
      if (v104[93379])
        v104[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v93 = (unsigned int *)(v12 + 80);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 | 2, v93));
    }
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayViewConstructor<JSC::JSDataView>::create(JSC *a1, JSC::VM *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v12;
  JSC::JSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = JSC::allocateCell<JSC::AggregateErrorConstructor>(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v12, (uint64_t)a1, (unint64_t)a2, (uint64_t)JSC::callDataView, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructDataView);
  JSC::JSGenericTypedArrayViewConstructor<JSC::JSDataView>::finishCreation(v13, a1, a3, a4, v14, v15, v16, v17);
  return v12;
}

void JSC::JSGenericTypedArrayViewConstructor<JSC::JSDataView>::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;

  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)1, a4, 1, a6, a7, a8);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v11, v12, v13, v14);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 528), 0xFFFE000000000001, 14, v15, v16, v17, v18);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_48>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t SlowCase;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t (*v33)(uint64_t *);
  uint64_t *v34;
  unint64_t v35;
  void (*v36)(uint64_t *);
  uint64_t *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v38 = (unsigned int *)(v13 + 16);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 & 0xFFFFFFEF, v38));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 1928);
  if ((v19 & 1) != 0)
  {
    v33 = *(uint64_t (**)(uint64_t *))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v34 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v18 & 8) != 0)
      v34 = (uint64_t *)(v18 - 16);
    v45 = *v34;
    v46 = v18;
    v47 = v18 + 1928;
    v19 = v33(&v45);
  }
  if (*(_QWORD *)(v19 + 48) == 2)
    v20 = 0;
  else
    v20 = *(_QWORD *)(v19 + 48);
  LODWORD(v45) = 50;
  if ((v20 & 0xFFFE000000000002) == 0 && v20 && *(unsigned __int8 *)(v20 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v20, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 >= *(_QWORD *)(v16 + 40144))
  {
    SlowCase = *(_QWORD *)(v16 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v42, v43, v44);
      goto LABEL_18;
    }
    v35 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v35);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v35;
  }
  *v17 = SlowCase + 128;
LABEL_18:
  *(_DWORD *)SlowCase = 0;
  v23 = JSC::Structure::Structure(SlowCase, v16, v18, v20, (uint64_t)&v45, (unint64_t)&JSC::JSResizableOrGrowableSharedDataView::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v25 = *a1;
  v24 = a1[1];
  *(_QWORD *)a1[2] = v23;
  if ((v23 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E2B70);
  }
  if (*(_DWORD *)(v25 + 760) >= *(unsigned __int8 *)(v24 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v25 + 192, v24);
    v24 = a1[1];
  }
  v26 = *(_QWORD *)(v24 + 1928);
  if ((v26 & 1) != 0)
  {
    v36 = *(void (**)(uint64_t *))(v26 & 0xFFFFFFFFFFFFFFFCLL);
    v37 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v24 & 8) != 0)
      v37 = (uint64_t *)(v24 - 16);
    v45 = *v37;
    v46 = v24;
    v47 = v24 + 1928;
    v36(&v45);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E2BC8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E2BE8);
  }
  v28 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v28;
  if (!v28 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v29 = v13 - 64;
      v30 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v29 + 2) = v30;
      *((_QWORD *)v29 + 4) = v30;
      if (v30)
      {
        v31 = (unsigned int *)(v13 + 16);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 | 0x10, v31));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v40 = (unsigned int *)(v12 + 80);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 | 2, v40));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_49>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v12 = (_BYTE *)(*a1 + 64);
  v13 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v13 + 1;
  if (!v13 && (v14 = *((_QWORD *)v12 - 6)) != 0)
  {
    v15 = v11;
    if (*((_QWORD *)v12 - 5) == v14)
    {
      *((_QWORD *)v12 - 6) = 0;
      v27 = (unsigned int *)(v12 + 16);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 & 0xFFFFFFEF, v27));
      *(_BYTE *)(v11 + 86) = 1;
      v8 = (uint64_t *)a1[2];
      v9 = *v8;
      v15 = *a1;
    }
  }
  else
  {
    v15 = v11;
  }
  *v8 = v9 | 2;
  v16 = a1[1];
  v35 = 67373110;
  SlowCase = *(_QWORD *)(v15 + 40136);
  if (SlowCase >= *(_QWORD *)(v15 + 40144))
  {
    SlowCase = *(_QWORD *)(v15 + 40152);
    if ((SlowCase & 1) != 0)
    {
      v34 = v16;
      JSC::sanitizeStackForVM((JSC *)v15, a2, v16, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v15 + 40112, v15 + 192, 128, 0, 0, v31, v32, v33);
      v16 = v34;
      goto LABEL_7;
    }
    v26 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v15 + 40160);
    *(_QWORD *)(v15 + 40144) = SlowCase + HIDWORD(v26);
    *(_QWORD *)(v15 + 40152) = SlowCase + (int)v26;
  }
  *(_QWORD *)(v15 + 40136) = SlowCase + 128;
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, v15, v16, 2, (uint64_t)&v35, (unint64_t)&JSC::JSModuleEnvironment::s_info, 0, 0);
  if (*(_BYTE *)(v15 + 755))
    __dmb(0xAu);
  v20 = *a1;
  v19 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E2E24);
  }
  if (v19 && *(_DWORD *)(v20 + 760) >= *(unsigned __int8 *)(v19 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v20 + 192, v19);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E2E44);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E2E88);
  }
  v21 = *(_DWORD *)(v11 + 88) - 1;
  *(_DWORD *)(v11 + 88) = v21;
  if (!v21 && v12[93377])
  {
    if (*(_BYTE *)(v11 + 86))
    {
      v22 = v12 - 64;
      v23 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v22 + 2) = v23;
      *((_QWORD *)v22 + 4) = v23;
      if (v23)
      {
        v24 = (unsigned int *)(v12 + 16);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 | 0x10, v24));
      }
      if (v12[93379])
        v12[93378] = 1;
      *(_BYTE *)(v11 + 86) = 0;
    }
    else
    {
      v29 = (unsigned int *)(v11 + 80);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 | 2, v29));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_50>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v12 = (_BYTE *)(*a1 + 64);
  v13 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v13 + 1;
  if (!v13 && (v14 = *((_QWORD *)v12 - 6)) != 0)
  {
    v15 = v11;
    if (*((_QWORD *)v12 - 5) == v14)
    {
      *((_QWORD *)v12 - 6) = 0;
      v27 = (unsigned int *)(v12 + 16);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 & 0xFFFFFFEF, v27));
      *(_BYTE *)(v11 + 86) = 1;
      v8 = (uint64_t *)a1[2];
      v9 = *v8;
      v15 = *a1;
    }
  }
  else
  {
    v15 = v11;
  }
  *v8 = v9 | 2;
  v16 = a1[1];
  v35 = 55;
  SlowCase = *(_QWORD *)(v15 + 40136);
  if (SlowCase >= *(_QWORD *)(v15 + 40144))
  {
    SlowCase = *(_QWORD *)(v15 + 40152);
    if ((SlowCase & 1) != 0)
    {
      v34 = v16;
      JSC::sanitizeStackForVM((JSC *)v15, a2, v16, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v15 + 40112, v15 + 192, 128, 0, 0, v31, v32, v33);
      v16 = v34;
      goto LABEL_7;
    }
    v26 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v15 + 40160);
    *(_QWORD *)(v15 + 40144) = SlowCase + HIDWORD(v26);
    *(_QWORD *)(v15 + 40152) = SlowCase + (int)v26;
  }
  *(_QWORD *)(v15 + 40136) = SlowCase + 128;
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, v15, v16, 2, (uint64_t)&v35, (unint64_t)&JSC::StrictEvalActivation::s_info, 0, 0);
  if (*(_BYTE *)(v15 + 755))
    __dmb(0xAu);
  v20 = *a1;
  v19 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E30C0);
  }
  if (v19 && *(_DWORD *)(v20 + 760) >= *(unsigned __int8 *)(v19 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v20 + 192, v19);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E30E0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3124);
  }
  v21 = *(_DWORD *)(v11 + 88) - 1;
  *(_DWORD *)(v11 + 88) = v21;
  if (!v21 && v12[93377])
  {
    if (*(_BYTE *)(v11 + 86))
    {
      v22 = v12 - 64;
      v23 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v22 + 2) = v23;
      *((_QWORD *)v22 + 4) = v23;
      if (v23)
      {
        v24 = (unsigned int *)(v12 + 16);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 | 0x10, v24));
      }
      if (v12[93379])
        v12[93378] = 1;
      *(_BYTE *)(v11 + 86) = 0;
    }
    else
    {
      v29 = (unsigned int *)(v11 + 80);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 | 2, v29));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_51>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v12 = (_BYTE *)(*a1 + 64);
  v13 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v13 + 1;
  if (!v13 && (v14 = *((_QWORD *)v12 - 6)) != 0)
  {
    v15 = v11;
    if (*((_QWORD *)v12 - 5) == v14)
    {
      *((_QWORD *)v12 - 6) = 0;
      v27 = (unsigned int *)(v12 + 16);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 & 0xFFFFFFEF, v27));
      *(_BYTE *)(v11 + 86) = 1;
      v8 = (uint64_t *)a1[2];
      v9 = *v8;
      v15 = *a1;
    }
  }
  else
  {
    v15 = v11;
  }
  *v8 = v9 | 2;
  v16 = a1[1];
  v35 = 67242007;
  SlowCase = *(_QWORD *)(v15 + 40136);
  if (SlowCase >= *(_QWORD *)(v15 + 40144))
  {
    SlowCase = *(_QWORD *)(v15 + 40152);
    if ((SlowCase & 1) != 0)
    {
      v34 = v16;
      JSC::sanitizeStackForVM((JSC *)v15, a2, v16, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v15 + 40112, v15 + 192, 128, 0, 0, v31, v32, v33);
      v16 = v34;
      goto LABEL_7;
    }
    v26 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v15 + 40160);
    *(_QWORD *)(v15 + 40144) = SlowCase + HIDWORD(v26);
    *(_QWORD *)(v15 + 40152) = SlowCase + (int)v26;
  }
  *(_QWORD *)(v15 + 40136) = SlowCase + 128;
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, v15, v16, 2, (uint64_t)&v35, (unint64_t)&JSC::DebuggerScope::s_info, 0, 0);
  if (*(_BYTE *)(v15 + 755))
    __dmb(0xAu);
  v20 = *a1;
  v19 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3360);
  }
  if (v19 && *(_DWORD *)(v20 + 760) >= *(unsigned __int8 *)(v19 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v20 + 192, v19);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3380);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E33C4);
  }
  v21 = *(_DWORD *)(v11 + 88) - 1;
  *(_DWORD *)(v11 + 88) = v21;
  if (!v21 && v12[93377])
  {
    if (*(_BYTE *)(v11 + 86))
    {
      v22 = v12 - 64;
      v23 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v22 + 2) = v23;
      *((_QWORD *)v22 + 4) = v23;
      if (v23)
      {
        v24 = (unsigned int *)(v12 + 16);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 | 0x10, v24));
      }
      if (v12[93379])
        v12[93378] = 1;
      *(_BYTE *)(v11 + 86) = 0;
    }
    else
    {
      v29 = (unsigned int *)(v11 + 80);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 | 2, v29));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_52>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  JSC::VM *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v17;
  unsigned int v18;
  JSC::VM *v19;

  v9 = *(uint64_t **)(a1 + 16);
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *(JSC::VM **)a1;
  v19 = v12;
  v13 = *((_DWORD *)v12 + 22);
  *((_DWORD *)v12 + 22) = v13 + 1;
  if (!v13)
  {
    v14 = *((_QWORD *)v12 + 2);
    if (v14)
    {
      if (*((_QWORD *)v12 + 3) == v14)
      {
        *((_QWORD *)v12 + 2) = 0;
        v17 = (unsigned int *)((char *)v12 + 80);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 & 0xFFFFFFEF, v17));
        *((_BYTE *)v12 + 86) = 1;
        v9 = *(uint64_t **)(a1 + 16);
        v10 = *v9;
      }
    }
  }
  *v9 = v10 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_52::operator()((JSC::VM **)a1, a9, a2, a3, a4, a5, a6, a7, a8);
  v15 = **(_QWORD **)(a1 + 16);
  if ((v15 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3504);
  }
  if ((v15 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3524);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination((uint64_t *)&v19);
  return v15;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_52::operator()(JSC::VM **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t Structure;

  Structure = JSC::JSWithScope::createStructure(*a1, a1[1], 2, a2, a5, a6, a7, a8, a9);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer::set((uint64_t)a1, Structure);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_53>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v27 = (unsigned int *)(v13 + 16);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 & 0xFFFFFFEF, v27));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 664);
  v38 = 67099;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 >= *(_QWORD *)(v16 + 40144))
  {
    SlowCase = *(_QWORD *)(v16 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v35, v36, v37);
      goto LABEL_14;
    }
    v26 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v26);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v26;
  }
  *v17 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v38, (unint64_t)&JSC::JSCallbackFunction::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3720);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3740);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3784);
  }
  v25 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v25;
  if (!v25 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v29 = v13 - 64;
      v30 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v29 + 2) = v30;
      *((_QWORD *)v29 + 4) = v30;
      if (v30)
      {
        v31 = (unsigned int *)(v13 + 16);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 | 0x10, v31));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v33 = (unsigned int *)(v12 + 80);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 | 2, v33));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_54>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v31 = (unsigned int *)(v13 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 656);
  v38 = 66071;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 >= *(_QWORD *)(v16 + 40144))
  {
    SlowCase = *(_QWORD *)(v16 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v35, v36, v37);
      goto LABEL_14;
    }
    v30 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v30);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v30;
  }
  *v17 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v38, (unint64_t)&JSC::JSCallbackConstructor::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3A5CLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3A7CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3AC0);
  }
  v25 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v25;
  if (!v25 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v26 = v13 - 64;
      v27 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v13 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v33 = (unsigned int *)(v12 + 80);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 | 2, v33));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_55>(JSC::VM **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  JSC::VM *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  JSC::VM *v16;
  uint64_t result;
  unint64_t v18;
  JSC::VM *v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (char *)*a1 + 64;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v25 = (unsigned int *)(v13 + 16);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 & 0xFFFFFFEF, v25));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  result = JSC::JSCallbackObject<JSC::JSNonFinalObject>::createStructure(v16, a1[1], *((_QWORD *)a1[1] + 82), a5, a6, a7, a8, a9, a2);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3C80);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3CA0);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v19 + 192, v18);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3CE4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3D04);
  }
  v20 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v20;
  if (!v20 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v21 = v13 - 64;
      v22 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v21 + 2) = v22;
      *((_QWORD *)v21 + 4) = v22;
      if (v22)
      {
        v23 = (unsigned int *)(v13 + 16);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 | 0x10, v23));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)((char *)v12 + 80);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_56>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v19 = v12;
  v13 = *(_DWORD *)(v12 + 88);
  *(_DWORD *)(v12 + 88) = v13 + 1;
  if (!v13)
  {
    v14 = *(_QWORD *)(v12 + 16);
    if (v14)
    {
      if (*(_QWORD *)(v12 + 24) == v14)
      {
        *(_QWORD *)(v12 + 16) = 0;
        v17 = (unsigned int *)(v12 + 80);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 & 0xFFFFFFEF, v17));
        *(_BYTE *)(v12 + 86) = 1;
        v9 = (uint64_t *)a1[2];
        v10 = *v9;
      }
    }
  }
  *v9 = v10 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_56::operator()((uint64_t)a1, a9, a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)a1[2];
  if ((v15 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3E04);
  }
  if ((v15 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E3E24);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v19);
  return v15;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_56::operator()(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t Structure;

  Structure = JSC::ObjCCallbackFunction::createStructure(*(unint64_t **)a1, *(JSC::VM **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 664), a5, a6, a7, a8, a9, a2);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer::set(a1, Structure);
}

uint64_t JSC::ObjCCallbackFunction::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 67099;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::ObjCCallbackFunction::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_57>(JSC::VM **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  JSC::VM *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  JSC::VM *v16;
  uint64_t result;
  unint64_t v18;
  JSC::VM *v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (char *)*a1 + 64;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v21 = (unsigned int *)(v13 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 & 0xFFFFFFEF, v21));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  result = JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::createStructure(v16, a1[1], *((_QWORD *)a1[1] + 82), a5, a6, a7, a8, a9, a2);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E407CLL);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E409CLL);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v19 + 192, v18);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E40E0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E4100);
  }
  v20 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v20;
  if (!v20 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v23 = v13 - 64;
      v24 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v13 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)((char *)v12 + 80);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_58>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t result;
  unint64_t v18;
  unint64_t *v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v25 = (unsigned int *)(v13 + 16);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 & 0xFFFFFFEF, v25));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  result = JSC::JSModuleRecord::createStructure(v16, (JSC::VM *)a1[1], 2uLL, a5, a6, a7, a8, a9, a2);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E42D8);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E42F8);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E433CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E435CLL);
  }
  v20 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v20;
  if (!v20 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v21 = v13 - 64;
      v22 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v21 + 2) = v22;
      *((_QWORD *)v21 + 4) = v22;
      if (v22)
      {
        v23 = (unsigned int *)(v13 + 16);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 | 0x10, v23));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v12 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_59>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t result;
  unint64_t v18;
  unint64_t *v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v21 = (unsigned int *)(v13 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 & 0xFFFFFFEF, v21));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  result = JSC::SyntheticModuleRecord::createStructure(v16, (JSC::VM *)a1[1], 2uLL, a5, a6, a7, a8, a9, a2);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E4488);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E44A8);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E44ECLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E450CLL);
  }
  v20 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v20;
  if (!v20 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v23 = v13 - 64;
      v24 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v13 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v12 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_60>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v12 = (_BYTE *)(*a1 + 64);
  v13 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v13 + 1;
  if (!v13 && (v14 = *((_QWORD *)v12 - 6)) != 0)
  {
    v15 = v11;
    if (*((_QWORD *)v12 - 5) == v14)
    {
      *((_QWORD *)v12 - 6) = 0;
      v27 = (unsigned int *)(v12 + 16);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 & 0xFFFFFFEF, v27));
      *(_BYTE *)(v11 + 86) = 1;
      v8 = (uint64_t *)a1[2];
      v9 = *v8;
      v15 = *a1;
    }
  }
  else
  {
    v15 = v11;
  }
  *v8 = v9 | 2;
  v16 = a1[1];
  v35 = 96602169;
  SlowCase = *(_QWORD *)(v15 + 40136);
  if (SlowCase >= *(_QWORD *)(v15 + 40144))
  {
    SlowCase = *(_QWORD *)(v15 + 40152);
    if ((SlowCase & 1) != 0)
    {
      v34 = v16;
      JSC::sanitizeStackForVM((JSC *)v15, a2, v16, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v15 + 40112, v15 + 192, 128, 0, 0, v31, v32, v33);
      v16 = v34;
      goto LABEL_7;
    }
    v26 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v15 + 40160);
    *(_QWORD *)(v15 + 40144) = SlowCase + HIDWORD(v26);
    *(_QWORD *)(v15 + 40152) = SlowCase + (int)v26;
  }
  *(_QWORD *)(v15 + 40136) = SlowCase + 128;
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, v15, v16, 2, (uint64_t)&v35, (unint64_t)&JSC::JSModuleNamespaceObject::s_info, 0, 0);
  if (*(_BYTE *)(v15 + 755))
    __dmb(0xAu);
  v20 = *a1;
  v19 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E4760);
  }
  if (v19 && *(_DWORD *)(v20 + 760) >= *(unsigned __int8 *)(v19 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v20 + 192, v19);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E4780);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E47C4);
  }
  v21 = *(_DWORD *)(v11 + 88) - 1;
  *(_DWORD *)(v11 + 88) = v21;
  if (!v21 && v12[93377])
  {
    if (*(_BYTE *)(v11 + 86))
    {
      v22 = v12 - 64;
      v23 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v22 + 2) = v23;
      *((_QWORD *)v22 + 4) = v23;
      if (v23)
      {
        v24 = (unsigned int *)(v12 + 16);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 | 0x10, v24));
      }
      if (v12[93379])
        v12[93378] = 1;
      *(_BYTE *)(v11 + 86) = 0;
    }
    else
    {
      v29 = (unsigned int *)(v11 + 80);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 | 2, v29));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_61>(unint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t result;
  unint64_t v17;
  unint64_t *v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v12 = *a1 + 8;
  v13 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v13 + 1;
  if (!v13 && (v14 = *((_QWORD *)v12 - 6)) != 0)
  {
    v15 = v11;
    if (*((_QWORD *)v12 - 5) == v14)
    {
      *((_QWORD *)v12 - 6) = 0;
      v24 = (unsigned int *)(v12 + 16);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 & 0xFFFFFFEF, v24));
      *((_BYTE *)v11 + 86) = 1;
      v8 = (uint64_t *)a1[2];
      v9 = *v8;
      v15 = *a1;
    }
  }
  else
  {
    v15 = v11;
  }
  *v8 = v9 | 2;
  result = JSC::ProxyObject::createStructure(v15, (JSC::VM *)a1[1], 0, a4, a5, a6, a7, a8);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E4984);
  }
  v18 = *a1;
  v17 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E49A4);
  }
  if (v17 && *((_DWORD *)v18 + 190) >= *(unsigned __int8 *)(v17 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v18 + 24), v17);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E49E8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E4A08);
  }
  v19 = *((_DWORD *)v11 + 22) - 1;
  *((_DWORD *)v11 + 22) = v19;
  if (!v19 && v12[93377])
  {
    if (*((_BYTE *)v11 + 86))
    {
      v20 = v12 - 64;
      v21 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v20 + 2) = v21;
      *((_QWORD *)v20 + 4) = v21;
      if (v21)
      {
        v22 = (unsigned int *)(v12 + 16);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 | 0x10, v22));
      }
      if (v12[93379])
        v12[93378] = 1;
      *((_BYTE *)v11 + 86) = 0;
    }
    else
    {
      v26 = (unsigned int *)(v11 + 10);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 | 2, v26));
    }
  }
  return result;
}

uint64_t JSC::ProxyObject::createStructure(unint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  unsigned int v11;
  unint64_t SlowCase;
  uint64_t result;
  int v14;
  BOOL v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[2];
  __int16 v23;

  v10 = a1 + 5017;
  if ((_DWORD)a3)
    v11 = 2951950;
  else
    v11 = 2951692;
  v22[0] = 61;
  v22[1] = v11;
  v23 = v11 >> 8;
  SlowCase = *v10;
  if (*v10 < v10[1])
    goto LABEL_5;
  SlowCase = v10[2];
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ v10[3];
    v10[1] = SlowCase + HIDWORD(v18);
    v10[2] = SlowCase + (int)v18;
LABEL_5:
    *v10 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v19, v20, v21);
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, 2, (uint64_t)v22, (unint64_t)&JSC::ProxyObject::s_info, 32, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  v14 = *(_DWORD *)(result + 16) & 3;
  v15 = (*(_DWORD *)(result + 16) & 0x28) != 0x20 || v14 == 2;
  if (!v15 && (*(_WORD *)(result + 12) & 2) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E4BF8);
  }
  if (!v14 && (*(_BYTE *)(result + 8) & 0xE) == 0 && (*(_WORD *)(result + 12) & 6) == 0)
  {
    v16 = *(_DWORD **)(*(_QWORD *)(result + 56) + 8);
    do
    {
      if (!*v16)
      {
        __break(0xC471u);
        JUMPOUT(0x1989E4BACLL);
      }
      v17 = 16 * (*v16 & 0xFFFFFFFE);
      if ((*(_BYTE *)(v17 + 0x10) & 3) != 0)
        break;
      if ((*(_BYTE *)(16 * (*v16 & 0xFFFFFFFE) + 8) & 0xE) != 0)
        break;
      ++v16;
    }
    while ((*(_WORD *)(v17 + 12) & 6) == 0);
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_62>(unint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t result;
  unint64_t v17;
  unint64_t *v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v12 = *a1 + 8;
  v13 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v13 + 1;
  if (!v13 && (v14 = *((_QWORD *)v12 - 6)) != 0)
  {
    v15 = v11;
    if (*((_QWORD *)v12 - 5) == v14)
    {
      *((_QWORD *)v12 - 6) = 0;
      v20 = (unsigned int *)(v12 + 16);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 & 0xFFFFFFEF, v20));
      *((_BYTE *)v11 + 86) = 1;
      v8 = (uint64_t *)a1[2];
      v9 = *v8;
      v15 = *a1;
    }
  }
  else
  {
    v15 = v11;
  }
  *v8 = v9 | 2;
  result = JSC::ProxyObject::createStructure(v15, (JSC::VM *)a1[1], 1, a4, a5, a6, a7, a8);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E4CF8);
  }
  v18 = *a1;
  v17 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E4D18);
  }
  if (v17 && *((_DWORD *)v18 + 190) >= *(unsigned __int8 *)(v17 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v18 + 24), v17);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E4D5CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E4D7CLL);
  }
  v19 = *((_DWORD *)v11 + 22) - 1;
  *((_DWORD *)v11 + 22) = v19;
  if (!v19 && v12[93377])
  {
    if (*((_BYTE *)v11 + 86))
    {
      v22 = v12 - 64;
      v23 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v22 + 2) = v23;
      *((_QWORD *)v22 + 4) = v23;
      if (v23)
      {
        v24 = (unsigned int *)(v12 + 16);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 | 0x10, v24));
      }
      if (v12[93379])
        v12[93378] = 1;
      *((_BYTE *)v11 + 86) = 0;
    }
    else
    {
      v26 = (unsigned int *)(v11 + 10);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 | 2, v26));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_63>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v31 = (unsigned int *)(v13 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 664);
  v38 = 67099;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 >= *(_QWORD *)(v16 + 40144))
  {
    SlowCase = *(_QWORD *)(v16 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v35, v36, v37);
      goto LABEL_14;
    }
    v30 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v30);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v30;
  }
  *v17 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v38, (unint64_t)&JSC::ProxyRevoke::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5014);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5034);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5078);
  }
  v25 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v25;
  if (!v25 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v26 = v13 - 64;
      v27 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v13 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v33 = (unsigned int *)(v12 + 80);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 | 2, v33));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_64>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v17 = (unsigned int *)(v5 + 16);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 & 0xFFFFFFEF, v17));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  result = JSC::JSFunction::create(v8, a1[1], 2, (WTF::StringImpl **)(*(_QWORD *)(v8 + 41952) + 2128), (uint64_t)JSC::globalFuncParseInt, 0, 148, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5268);
  }
  v11 = *a1;
  v10 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5288);
  }
  if (v10 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v11 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E52CCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E52ECLL);
  }
  v12 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v12;
  if (!v12 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v13 = v5 - 64;
      v14 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v13 + 2) = v14;
      *((_QWORD *)v13 + 4) = v14;
      if (v14)
      {
        v15 = (unsigned int *)(v5 + 16);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 | 0x10, v15));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v19 = (unsigned int *)(v4 + 80);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 | 2, v19));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_65>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v17 = (unsigned int *)(v5 + 16);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 & 0xFFFFFFEF, v17));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  result = JSC::JSFunction::create(v8, a1[1], 1, (WTF::StringImpl **)(*(_QWORD *)(v8 + 41952) + 2136), (uint64_t)JSC::globalFuncParseFloat, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E549CLL);
  }
  v11 = *a1;
  v10 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E54BCLL);
  }
  if (v10 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v11 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5500);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5520);
  }
  v12 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v12;
  if (!v12 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v13 = v5 - 64;
      v14 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v13 + 2) = v14;
      *((_QWORD *)v13 + 4) = v14;
      if (v14)
      {
        v15 = (unsigned int *)(v5 + 16);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 | 0x10, v15));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v19 = (unsigned int *)(v4 + 80);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 | 2, v19));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_66>(JSC::JSGlobalObject::init(JSC::VM &)::$_66 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::VM **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  JSC::VM *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  JSC::VM *v16;
  unint64_t *v17;
  unint64_t Structure;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  JSC::Structure *v29;
  JSC::VM *v30;
  JSC::VM *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  JSC::VM *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::JSObject *v46;
  uint64_t v47;
  JSC::JSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t result;
  int v54;
  _BYTE *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t SlowCase;
  uint64_t v68;
  JSC::VM *v69;
  JSC::VM *v70;
  uint64_t *v71;
  JSC::VM **v72;
  JSC::JSObject *v73;
  uint64_t v74;
  uint64_t v75;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (char *)*a1 + 64;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v60 = (unsigned int *)(v13 + 16);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 & 0xFFFFFFEF, v60));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = (unint64_t *)a1[1];
  v69 = v16;
  v70 = (JSC::VM *)v17;
  v71 = v9;
  v72 = a1;
  v74 = 0;
  v75 = 0;
  Structure = JSC::JSArrayBufferPrototype::createStructure((unint64_t *)v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v73 = (JSC::JSObject *)JSC::JSArrayBufferPrototype::create(v16, (JSC::VM *)v17, Structure, 1, v19, v20, v21, v22);
  v29 = (JSC::Structure *)JSC::JSArrayBuffer::createStructure((unint64_t *)v16, (JSC::VM *)v17, (unint64_t)v73, v23, v24, v25, v26, v27, v28);
  JSC::LazyClassStructure::Initializer::setStructure(&v69, v29);
  v31 = v69;
  v30 = v70;
  v32 = (uint64_t *)((char *)v69 + 38552);
  v40 = JSC::JSGenericArrayBufferConstructor<(JSC::ArrayBufferSharingMode)1>::createStructure(v69, v70, *((_QWORD *)v70 + 83), v33, v34, v35, v36, v37, v38);
  v46 = v73;
  v47 = *v32;
  if (*v32 >= (unint64_t)v32[1])
  {
    v47 = v32[2];
    if ((v47 & 1) != 0)
    {
      v68 = v40;
      JSC::sanitizeStackForVM(v31, v39, v40, v41, v42, v43, v44, v45);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v31 + 38528, (uint64_t)v31 + 192, 48, 0, 0, v64, v65, v66);
      v40 = v68;
      v47 = SlowCase;
      goto LABEL_7;
    }
    v59 = *(_QWORD *)(v47 + 8) ^ v32[3];
    v32[1] = v47 + HIDWORD(v59);
    v32[2] = v47 + (int)v59;
  }
  *v32 = v47 + 48;
LABEL_7:
  *(_DWORD *)v47 = 0;
  v48 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v47, (uint64_t)v31, v40, (uint64_t)JSC::callArrayBuffer, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructSharedArrayBuffer);
  JSC::JSGenericArrayBufferConstructor<(JSC::ArrayBufferSharingMode)1>::finishCreation(v48, v31, (uint64_t)v46);
  if (!v74)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E57E0);
  }
  if (!v46)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5800);
  }
  if (v75)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5820);
  }
  v75 = v47;
  JSC::JSObject::putDirectWithoutTransition(v46, (uint64_t)v31, *(_QWORD *)(v32[425] + 1080), v47, 4, v49, v50, v51, v52);
  v71[1] = v47;
  if (*((_DWORD *)v31 + 190) >= *((unsigned __int8 *)v30 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v31 + 192, (unint64_t)v30);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5840);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5860);
  }
  v54 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v54;
  if (!v54 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v55 = v13 - 64;
      v56 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v55 + 2) = v56;
      *((_QWORD *)v55 + 4) = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v13 + 16);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 | 0x10, v57));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v62 = (unsigned int *)((char *)v12 + 80);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 | 2, v62));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_67>(JSC::JSGlobalObject::init(JSC::VM &)::$_67 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t SlowCase;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  _QWORD *v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  JSC::VM *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  unint64_t v41;
  JSC::VM *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::JSObject *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  unint64_t v57;
  uint64_t result;
  int v59;
  _BYTE *v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  JSC::VM *v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  JSC::JSObject *v90;
  uint64_t v91;
  unint64_t v92;
  int v93;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v85 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v68 = (unsigned int *)(v13 + 16);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 & 0xFFFFFFEF, v68));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v86 = (JSC::VM *)v16;
  v87 = v18;
  v88 = v9;
  v89 = a1;
  v91 = 0;
  v92 = 0;
  v90 = 0;
  v19 = *(_QWORD *)(v18 + 656);
  v93 = 8221;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v64 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v64);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v64;
LABEL_10:
    *v17 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v72, v73, v74);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v93, (unint64_t)&JSC::BooleanPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v29 = *(_QWORD **)(v16 + 40368);
  if (!v29)
    v29 = (_QWORD *)JSC::GCClient::Heap::BOOLeanObjectSpaceSlow((JSC::Heap **)(v16 + 37552));
  v30 = v29[3];
  if (v30 < v29[4])
    goto LABEL_16;
  v30 = v29[5];
  if ((v30 & 1) == 0)
  {
    v65 = *(_QWORD *)(v30 + 8) ^ v29[6];
    v29[4] = v30 + HIDWORD(v65);
    v29[5] = v30 + (int)v65;
LABEL_16:
    v29[3] = v30 + 32;
    goto LABEL_17;
  }
  v75 = (uint64_t)v29;
  JSC::sanitizeStackForVM((JSC *)v16, v21, v22, v23, v24, v25, v26, v27);
  v30 = JSC::LocalAllocator::allocateSlowCase(v75, v16 + 192, 32, 0, 0, v76, v77, v78);
LABEL_17:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v30 + 16) = 6;
  v90 = (JSC::JSObject *)v30;
  v93 = 29;
  if ((v30 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v30 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v30, (JSC::VM *)v16, v28, v22, v23, v24, v25, v26, v27);
  v32 = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_23;
  v32 = *(_QWORD *)(v16 + 40152);
  if ((v32 & 1) == 0)
  {
    v66 = *(_QWORD *)(v32 + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = v32 + HIDWORD(v66);
    *(_QWORD *)(v16 + 40152) = v32 + (int)v66;
LABEL_23:
    *v17 = v32 + 128;
    goto LABEL_24;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v21, v22, v23, v24, v25, v26, v27);
  v32 = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v79, v80, v81);
LABEL_24:
  *(_DWORD *)v32 = 0;
  JSC::Structure::Structure(v32, v16, v18, v30, (uint64_t)&v93, (unint64_t)&JSC::BooleanObject::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v86, (JSC::Structure *)v32);
  v42 = v86;
  v41 = v87;
  v43 = (unint64_t *)((char *)v86 + 40136);
  v44 = *(_QWORD *)(v87 + 664);
  v93 = 67440154;
  if ((v44 & 0xFFFE000000000002) == 0 && v44 && *(unsigned __int8 *)(v44 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v44, v86, v40, v34, v35, v36, v37, v38, v39);
  v45 = *v43;
  if (*v43 >= v43[1])
  {
    v45 = v43[2];
    if ((v45 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v42, v33, v34, v35, v36, v37, v38, v39);
      v45 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v42 + 40112, (uint64_t)v42 + 192, 128, 0, 0, v82, v83, v84);
      goto LABEL_32;
    }
    v67 = *(_QWORD *)(v45 + 8) ^ v43[3];
    v43[1] = v45 + HIDWORD(v67);
    v43[2] = v45 + (int)v67;
  }
  *v43 = v45 + 128;
LABEL_32:
  *(_DWORD *)v45 = 0;
  JSC::Structure::Structure(v45, (uint64_t)v42, v41, v44, (uint64_t)&v93, (unint64_t)&JSC::BooleanConstructor::s_info, 0, 0);
  if (*((_BYTE *)v42 + 755))
    __dmb(0xAu);
  v51 = v90;
  v52 = JSC::BooleanConstructor::create((uint64_t)v42, v45, (uint64_t)v90, v46, v47, v48, v49, v50);
  if (!v91)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5D54);
  }
  if (!v51)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5D74);
  }
  if (v92)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5D94);
  }
  v57 = v52;
  v92 = v52;
  JSC::JSObject::putDirectWithoutTransition(v51, (uint64_t)v42, *(_QWORD *)(v43[227] + 1080), v52, 4, v53, v54, v55, v56);
  v88[1] = v57;
  if (v57 && *((_DWORD *)v42 + 190) >= *(unsigned __int8 *)(v41 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v42 + 192, v41);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5DB4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E5DF4);
  }
  v59 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v59;
  if (!v59 && v85[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v60 = v85 - 64;
      v61 = *((_QWORD *)v85 - 5);
      *((_QWORD *)v60 + 2) = v61;
      *((_QWORD *)v60 + 4) = v61;
      if (v61)
      {
        v62 = (unsigned int *)(v85 + 16);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 | 0x10, v62));
      }
      if (v85[93379])
        v85[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v70 = (unsigned int *)(v12 + 80);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 | 2, v70));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_68>(JSC::JSGlobalObject::init(JSC::VM &)::$_68 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  JSC::JSGlobalObject *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t SlowCase;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  JSC::VM *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  unint64_t v48;
  JSC::VM *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  JSC::VM *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::JSObject *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t result;
  int v76;
  _BYTE *v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  JSC::VM *v107;
  JSC::JSGlobalObject *v108;
  uint64_t *v109;
  uint64_t *v110;
  JSC::JSObject *v111;
  uint64_t v112;
  unint64_t v113;
  int v114;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v106 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v86 = (unsigned int *)(v13 + 16);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 & 0xFFFFFFEF, v86));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = (JSC::JSGlobalObject *)a1[1];
  v107 = (JSC::VM *)v16;
  v108 = v18;
  v109 = v9;
  v110 = a1;
  v112 = 0;
  v113 = 0;
  v111 = 0;
  v19 = *((_QWORD *)v18 + 82);
  v114 = 8215;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  v20 = (unint64_t *)(v16 + 38904);
  v105 = v16 + 40112;
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v81 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v81);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v81;
LABEL_10:
    *v17 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v105, v16 + 192, 128, 0, 0, v90, v91, v92);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, (uint64_t)v18, v19, (uint64_t)&v114, (unint64_t)&JSC::DatePrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v29 = *v20;
  if (*(_QWORD *)(v16 + 38904) >= *(_QWORD *)(v16 + 38912))
  {
    v29 = *(_QWORD *)(v16 + 38920);
    if ((v29 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, v22, v23, v24, v25, v26, v27, v28);
      v29 = JSC::LocalAllocator::allocateSlowCase(v16 + 38880, v16 + 192, 16, 0, 0, v93, v94, v95);
      goto LABEL_15;
    }
    v82 = *(_QWORD *)(v29 + 8) ^ *(_QWORD *)(v16 + 38928);
    *(_QWORD *)(v16 + 38912) = v29 + HIDWORD(v82);
    *(_QWORD *)(v16 + 38920) = v29 + (int)v82;
  }
  *v20 = v29 + 16;
LABEL_15:
  *(_DWORD *)v29 = 0;
  v30 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v29 = SlowCase >> 4;
  *(_DWORD *)(v29 + 4) = v30;
  *(_QWORD *)(v29 + 8) = 0;
  JSC::DatePrototype::finishCreation((JSC::DatePrototype *)v29, (JSC::VM *)v16, v18, v24, v25, v26, v27, v28);
  v111 = (JSC::JSObject *)v29;
  v114 = 60;
  if ((v29 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v29 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)v16, v38, v32, v33, v34, v35, v36, v37);
  v39 = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_19;
  v39 = *(_QWORD *)(v16 + 40152);
  if ((v39 & 1) == 0)
  {
    v83 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = v39 + HIDWORD(v83);
    *(_QWORD *)(v16 + 40152) = v39 + (int)v83;
LABEL_19:
    *v17 = v39 + 128;
    goto LABEL_20;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v31, v32, v33, v34, v35, v36, v37);
  v39 = JSC::LocalAllocator::allocateSlowCase(v105, v16 + 192, 128, 0, 0, v96, v97, v98);
LABEL_20:
  *(_DWORD *)v39 = 0;
  JSC::Structure::Structure(v39, v16, (uint64_t)v18, v29, (uint64_t)&v114, (unint64_t)&JSC::DateInstance::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v107, (JSC::Structure *)v39);
  v49 = v107;
  v48 = (unint64_t)v108;
  v50 = (unint64_t *)((char *)v107 + 40136);
  v51 = *((_QWORD *)v108 + 83);
  v114 = 75291;
  if ((v51 & 0xFFFE000000000002) == 0 && v51 && *(unsigned __int8 *)(v51 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v51, v107, v47, v41, v42, v43, v44, v45, v46);
  v52 = (unint64_t *)((char *)v49 + 38552);
  v53 = *v50;
  if (*v50 < v50[1])
    goto LABEL_27;
  v53 = v50[2];
  if ((v53 & 1) == 0)
  {
    v84 = *(_QWORD *)(v53 + 8) ^ v50[3];
    v50[1] = v53 + HIDWORD(v84);
    v50[2] = v53 + (int)v84;
LABEL_27:
    *v50 = v53 + 128;
    goto LABEL_28;
  }
  JSC::sanitizeStackForVM(v49, v40, v41, v42, v43, v44, v45, v46);
  v53 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v49 + 40112, (uint64_t)v49 + 192, 128, 0, 0, v99, v100, v101);
LABEL_28:
  *(_DWORD *)v53 = 0;
  JSC::Structure::Structure(v53, (uint64_t)v49, v48, v51, (uint64_t)&v114, (unint64_t)&JSC::DateConstructor::s_info, 0, 0);
  if (*((_BYTE *)v49 + 755))
    __dmb(0xAu);
  v61 = v111;
  v62 = *v52;
  if (*v52 >= *((_QWORD *)v49 + 4820))
  {
    v62 = *((_QWORD *)v49 + 4821);
    if ((v62 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v49, v54, v55, v56, v57, v58, v59, v60);
      v62 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v49 + 38528, (uint64_t)v49 + 192, 48, 0, 0, v102, v103, v104);
      goto LABEL_32;
    }
    v85 = *(_QWORD *)(v62 + 8) ^ *((_QWORD *)v49 + 4822);
    *((_QWORD *)v49 + 4820) = v62 + HIDWORD(v85);
    *((_QWORD *)v49 + 4821) = v62 + (int)v85;
  }
  *v52 = v62 + 48;
LABEL_32:
  *(_DWORD *)v62 = 0;
  v63 = JSC::InternalFunction::InternalFunction(v62, (uint64_t)v49, v53, (uint64_t)JSC::callDate, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructWithDateConstructor);
  JSC::InternalFunction::finishCreation(v63, v49, (const WTF::String *)7, (JSC::VM *)(v50[227] + 568), 1, v64, v65, v66);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v62, (uint64_t)v49, *(_QWORD *)(v50[227] + 2160), (uint64_t)v61, 14, v67, v68, v69, v70);
  if (!v112)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E63E8);
  }
  if (!v61)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6408);
  }
  if (v113)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6428);
  }
  v113 = v62;
  JSC::JSObject::putDirectWithoutTransition(v61, (uint64_t)v49, *(_QWORD *)(v50[227] + 1080), v62, 4, v71, v72, v73, v74);
  v109[1] = v62;
  if (*((_DWORD *)v49 + 190) >= *(unsigned __int8 *)(v48 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v49 + 192, v48);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6448);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6468);
  }
  v76 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v76;
  if (!v76 && v106[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v77 = v106 - 64;
      v78 = *((_QWORD *)v106 - 5);
      *((_QWORD *)v77 + 2) = v78;
      *((_QWORD *)v77 + 4) = v78;
      if (v78)
      {
        v79 = (unsigned int *)(v106 + 16);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 | 0x10, v79));
      }
      if (v106[93379])
        v106[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v88 = (unsigned int *)(v12 + 80);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 | 2, v88));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_69>(JSC::JSGlobalObject::init(JSC::VM &)::$_69 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  JSC::VM *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t SlowCase;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  WTF::StringImpl *v56;
  JSC::Structure *Structure;
  JSC::VM *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  JSC::VM *v66;
  unint64_t *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  JSC::VM *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  JSC::JSObject *v79;
  unint64_t v80;
  JSC::JSObject *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  uint64_t result;
  int v92;
  _BYTE *v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  unint64_t *v126;
  JSC::VM *v127;
  uint64_t *v128;
  uint64_t *v129;
  JSC::JSObject *v130;
  uint64_t v131;
  unint64_t v132;
  WTF::StringImpl *v133;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v125 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v109 = (unsigned int *)(v13 + 16);
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 & 0xFFFFFFEF, v109));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = (JSC::VM *)a1[1];
  v126 = (unint64_t *)v16;
  v127 = v18;
  v128 = v9;
  v129 = a1;
  v131 = 0;
  v132 = 0;
  v130 = 0;
  v19 = *((_QWORD *)v18 + 82);
  LODWORD(v133) = 8215;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  v20 = (unint64_t *)(v16 + 38904);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v105 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v105);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v105;
LABEL_10:
    *v17 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v113, v114, v115);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, (uint64_t)v18, v19, (uint64_t)&v133, (unint64_t)&JSC::ErrorPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v29 = *v20;
  if (*(_QWORD *)(v16 + 38904) < *(_QWORD *)(v16 + 38912))
    goto LABEL_14;
  v29 = *(_QWORD *)(v16 + 38920);
  if ((v29 & 1) == 0)
  {
    v106 = *(_QWORD *)(v29 + 8) ^ *(_QWORD *)(v16 + 38928);
    *(_QWORD *)(v16 + 38912) = v29 + HIDWORD(v106);
    *(_QWORD *)(v16 + 38920) = v29 + (int)v106;
LABEL_14:
    *v20 = v29 + 16;
    goto LABEL_15;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v22, v23, v24, v25, v26, v27, v28);
  v29 = JSC::LocalAllocator::allocateSlowCase(v16 + 38880, v16 + 192, 16, 0, 0, v116, v117, v118);
LABEL_15:
  *(_DWORD *)v29 = 0;
  v30 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v29 = SlowCase >> 4;
  *(_DWORD *)(v29 + 4) = v30;
  *(_QWORD *)(v29 + 8) = 0;
  v31 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v31 = 0x500000002;
  *(_QWORD *)(v31 + 8) = "Error";
  *(_DWORD *)(v31 + 16) = 4;
  v133 = (WTF::StringImpl *)v31;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 1968);
  v39 = JSC::jsString((JSC *)v16, (JSC::VM *)&v133, v32, v33, v34, v35, v36, v37);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v29, v16, v38, v39, 4, v40, v41, v42, v43);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v29, v16, *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 1824), *(_QWORD *)(v16 + 41968), 4, v44, v45, v46, v47);
  v56 = v133;
  v133 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::~StringImpl(v56, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v56 -= 2;
    }
  }
  if (v130)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6A40);
  }
  if (v131)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6A60);
  }
  if (v132)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6A80);
  }
  v130 = (JSC::JSObject *)v29;
  Structure = (JSC::Structure *)JSC::ErrorInstance::createStructure(v126, v127, v29, v50, v51, v52, v53, v54, v55);
  JSC::LazyClassStructure::Initializer::setStructure(&v126, Structure);
  v67 = v126;
  v66 = v127;
  v68 = v126 + 5017;
  v69 = *((_QWORD *)v127 + 83);
  LODWORD(v133) = 67175963;
  if ((v69 & 0xFFFE000000000002) == 0 && v69 && *(unsigned __int8 *)(v69 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v69, (JSC::VM *)v126, v65, v59, v60, v61, v62, v63, v64);
  v70 = v67 + 4819;
  v71 = *v68;
  if (*v68 < v68[1])
    goto LABEL_28;
  v71 = v68[2];
  if ((v71 & 1) == 0)
  {
    v107 = *(_QWORD *)(v71 + 8) ^ v68[3];
    v68[1] = v71 + HIDWORD(v107);
    v68[2] = v71 + (int)v107;
LABEL_28:
    *v68 = v71 + 128;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM((JSC *)v67, v58, v59, v60, v61, v62, v63, v64);
  v71 = JSC::LocalAllocator::allocateSlowCase((uint64_t)(v67 + 5014), (uint64_t)(v67 + 24), 128, 0, 0, v119, v120, v121);
LABEL_29:
  *(_DWORD *)v71 = 0;
  JSC::Structure::Structure(v71, (uint64_t)v67, (uint64_t)v66, v69, (uint64_t)&v133, (unint64_t)&JSC::ErrorConstructor::s_info, 0, 0);
  if (*((_BYTE *)v67 + 755))
    __dmb(0xAu);
  v79 = v130;
  v80 = *v70;
  if (*v70 >= v67[4820])
  {
    v80 = v67[4821];
    if ((v80 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v67, v72, v73, v74, v75, v76, v77, v78);
      v80 = JSC::LocalAllocator::allocateSlowCase((uint64_t)(v67 + 4816), (uint64_t)(v67 + 24), 48, 0, 0, v122, v123, v124);
      goto LABEL_33;
    }
    v108 = *(_QWORD *)(v80 + 8) ^ v67[4822];
    v67[4820] = v80 + HIDWORD(v108);
    v67[4821] = v80 + (int)v108;
  }
  *v70 = v80 + 48;
LABEL_33:
  *(_DWORD *)v80 = 0;
  v81 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v80, (uint64_t)v67, v71, (uint64_t)JSC::callErrorConstructor, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructErrorConstructor);
  JSC::ErrorConstructor::finishCreation(v81, (JSC *)v67, v79, v82, v83, v84, v85, v86);
  if (!v131)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6AF0);
  }
  if (!v79)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6B10);
  }
  if (v132)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6B30);
  }
  v132 = v80;
  JSC::JSObject::putDirectWithoutTransition(v79, (uint64_t)v67, *(_QWORD *)(v68[227] + 1080), v80, 4, v87, v88, v89, v90);
  v128[1] = v80;
  if (*((_DWORD *)v67 + 190) >= *((unsigned __int8 *)v66 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v67 + 24), (unint64_t)v66);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6B50);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E6B70);
  }
  v92 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v92;
  if (!v92 && v125[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v93 = v125 - 64;
      v94 = *((_QWORD *)v125 - 5);
      *((_QWORD *)v93 + 2) = v94;
      *((_QWORD *)v93 + 4) = v94;
      if (v94)
      {
        v95 = (unsigned int *)(v125 + 16);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 | 0x10, v95));
      }
      if (v125[93379])
        v125[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v111 = (unsigned int *)(v12 + 80);
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 | 2, v111));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_70>(JSC::JSGlobalObject::init(JSC::VM &)::$_70 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  JSC::JSGlobalObject *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t SlowCase;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  JSC::VM *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  unint64_t v48;
  JSC::VM *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  JSC::VM *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::JSObject *v61;
  unint64_t v62;
  JSC::JSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t result;
  int v69;
  _BYTE *v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  JSC::VM *v100;
  JSC::JSGlobalObject *v101;
  uint64_t *v102;
  uint64_t *v103;
  JSC::JSObject *v104;
  uint64_t v105;
  unint64_t v106;
  int v107;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v99 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v79 = (unsigned int *)(v13 + 16);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 & 0xFFFFFFEF, v79));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = (JSC::JSGlobalObject *)a1[1];
  v100 = (JSC::VM *)v16;
  v101 = v18;
  v102 = v9;
  v103 = a1;
  v105 = 0;
  v106 = 0;
  v104 = 0;
  v19 = *((_QWORD *)v18 + 82);
  v107 = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  v20 = (unint64_t *)(v16 + 38904);
  v98 = v16 + 40112;
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v74 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v74);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v74;
LABEL_10:
    *v17 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v98, v16 + 192, 128, 0, 0, v83, v84, v85);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, (uint64_t)v18, v19, (uint64_t)&v107, (unint64_t)&JSC::MapPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v29 = *v20;
  if (*(_QWORD *)(v16 + 38904) >= *(_QWORD *)(v16 + 38912))
  {
    v29 = *(_QWORD *)(v16 + 38920);
    if ((v29 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, v22, v23, v24, v25, v26, v27, v28);
      v29 = JSC::LocalAllocator::allocateSlowCase(v16 + 38880, v16 + 192, 16, 0, 0, v86, v87, v88);
      goto LABEL_15;
    }
    v75 = *(_QWORD *)(v29 + 8) ^ *(_QWORD *)(v16 + 38928);
    *(_QWORD *)(v16 + 38912) = v29 + HIDWORD(v75);
    *(_QWORD *)(v16 + 38920) = v29 + (int)v75;
  }
  *v20 = v29 + 16;
LABEL_15:
  *(_DWORD *)v29 = 0;
  v30 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v29 = SlowCase >> 4;
  *(_DWORD *)(v29 + 4) = v30;
  *(_QWORD *)(v29 + 8) = 0;
  JSC::MapPrototype::finishCreation((JSC::MapPrototype *)v29, (JSC::VM *)v16, v18);
  v104 = (JSC::JSObject *)v29;
  v107 = 69;
  if ((v29 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v29 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)v16, v38, v32, v33, v34, v35, v36, v37);
  v39 = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_19;
  v39 = *(_QWORD *)(v16 + 40152);
  if ((v39 & 1) == 0)
  {
    v76 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = v39 + HIDWORD(v76);
    *(_QWORD *)(v16 + 40152) = v39 + (int)v76;
LABEL_19:
    *v17 = v39 + 128;
    goto LABEL_20;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v31, v32, v33, v34, v35, v36, v37);
  v39 = JSC::LocalAllocator::allocateSlowCase(v98, v16 + 192, 128, 0, 0, v89, v90, v91);
LABEL_20:
  *(_DWORD *)v39 = 0;
  JSC::Structure::Structure(v39, v16, (uint64_t)v18, v29, (uint64_t)&v107, (unint64_t)&JSC::JSMap::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v100, (JSC::Structure *)v39);
  v49 = v100;
  v48 = (unint64_t)v101;
  v50 = (unint64_t *)((char *)v100 + 40136);
  v51 = *((_QWORD *)v101 + 83);
  v107 = 67099;
  if ((v51 & 0xFFFE000000000002) == 0 && v51 && *(unsigned __int8 *)(v51 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v51, v100, v47, v41, v42, v43, v44, v45, v46);
  v52 = (unint64_t *)((char *)v49 + 38552);
  v53 = *v50;
  if (*v50 < v50[1])
    goto LABEL_27;
  v53 = v50[2];
  if ((v53 & 1) == 0)
  {
    v77 = *(_QWORD *)(v53 + 8) ^ v50[3];
    v50[1] = v53 + HIDWORD(v77);
    v50[2] = v53 + (int)v77;
LABEL_27:
    *v50 = v53 + 128;
    goto LABEL_28;
  }
  JSC::sanitizeStackForVM(v49, v40, v41, v42, v43, v44, v45, v46);
  v53 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v49 + 40112, (uint64_t)v49 + 192, 128, 0, 0, v92, v93, v94);
LABEL_28:
  *(_DWORD *)v53 = 0;
  JSC::Structure::Structure(v53, (uint64_t)v49, v48, v51, (uint64_t)&v107, (unint64_t)&JSC::MapConstructor::s_info, 0, 0);
  if (*((_BYTE *)v49 + 755))
    __dmb(0xAu);
  v61 = v104;
  v62 = *v52;
  if (*v52 >= *((_QWORD *)v49 + 4820))
  {
    v62 = *((_QWORD *)v49 + 4821);
    if ((v62 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v49, v54, v55, v56, v57, v58, v59, v60);
      v62 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v49 + 38528, (uint64_t)v49 + 192, 48, 0, 0, v95, v96, v97);
      goto LABEL_32;
    }
    v78 = *(_QWORD *)(v62 + 8) ^ *((_QWORD *)v49 + 4822);
    *((_QWORD *)v49 + 4820) = v62 + HIDWORD(v78);
    *((_QWORD *)v49 + 4821) = v62 + (int)v78;
  }
  *v52 = v62 + 48;
LABEL_32:
  *(_DWORD *)v62 = 0;
  v63 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v62, (uint64_t)v49, v53, (uint64_t)JSC::callMap, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructMap);
  JSC::MapConstructor::finishCreation(v63, (JSC::BuiltinExecutables **)v49, v61);
  if (!v105)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7150);
  }
  if (!v61)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7170);
  }
  if (v106)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7190);
  }
  v106 = v62;
  JSC::JSObject::putDirectWithoutTransition(v61, (uint64_t)v49, *(_QWORD *)(v50[227] + 1080), v62, 4, v64, v65, v66, v67);
  v102[1] = v62;
  if (*((_DWORD *)v49 + 190) >= *(unsigned __int8 *)(v48 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v49 + 192, v48);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E71B0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E71D0);
  }
  v69 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v69;
  if (!v69 && v99[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v70 = v99 - 64;
      v71 = *((_QWORD *)v99 - 5);
      *((_QWORD *)v70 + 2) = v71;
      *((_QWORD *)v70 + 4) = v71;
      if (v71)
      {
        v72 = (unsigned int *)(v99 + 16);
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 | 0x10, v72));
      }
      if (v99[93379])
        v99[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v81 = (unsigned int *)(v12 + 80);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 | 2, v81));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_71>(JSC::JSGlobalObject::init(JSC::VM &)::$_71 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t SlowCase;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::VM *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  JSC *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  JSC::VM *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  unint64_t v60;
  JSC *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  JSC::JSObject *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  unint64_t v76;
  uint64_t result;
  int v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t (*v81)(_QWORD *);
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  _BYTE *v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  JSC *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  JSC::JSObject *v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD v113[3];

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v105 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v85 = (unsigned int *)(v13 + 16);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 & 0xFFFFFFEF, v85));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v106 = (JSC *)v16;
  v107 = v18;
  v108 = v9;
  v109 = a1;
  v111 = 0;
  v112 = 0;
  v110 = 0;
  v19 = *(_QWORD *)(v18 + 656);
  LODWORD(v113[0]) = 8222;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  v20 = (unint64_t *)(v16 + 38816);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v79 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v79);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v79;
LABEL_10:
    *v17 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v93, v94, v95);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)v113, (unint64_t)&JSC::NumberPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v30 = *v20;
  if (*(_QWORD *)(v16 + 38816) < *(_QWORD *)(v16 + 38824))
    goto LABEL_14;
  v30 = *(_QWORD *)(v16 + 38832);
  if ((v30 & 1) == 0)
  {
    v80 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v16 + 38840);
    *(_QWORD *)(v16 + 38824) = v30 + HIDWORD(v80);
    *(_QWORD *)(v16 + 38832) = v30 + (int)v80;
LABEL_14:
    *v20 = v30 + 32;
    goto LABEL_15;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v22, v23, v24, v25, v26, v27, v28);
  v30 = JSC::LocalAllocator::allocateSlowCase(v16 + 38792, v16 + 192, 32, 0, 0, v96, v97, v98);
LABEL_15:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v30 + 16) = 0xFFFE000000000000;
  v32 = *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 2512);
  v33 = *(_QWORD *)(v18 + 544);
  if ((v33 & 1) != 0)
  {
    v81 = *(uint64_t (**)(_QWORD *))(v33 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v18 & 8) != 0)
      v82 = (_QWORD *)(v18 - 16);
    else
      v82 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    v113[0] = *v82;
    v113[1] = v18;
    v113[2] = v18 + 544;
    v33 = v81(v113);
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v30, v16, v32, v33, 4, v26, v27, v28, v29);
  JSC::JSGlobalObject::installNumberPrototypeWatchpoint((JSC::JSGlobalObject *)v18, (JSC::JSObject *)v30, v34, v35, v36, v37, v38, v39);
  if (v110)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7728);
  }
  if (v111)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7748);
  }
  if (v112)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7768);
  }
  v110 = (JSC::JSObject *)v30;
  v48 = v106;
  v49 = v107;
  v50 = (unint64_t *)((char *)v106 + 40136);
  LODWORD(v113[0]) = 30;
  if ((v30 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v30 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v30, v106, v47, v41, v42, v43, v44, v45, v46);
  v51 = *v50;
  if (*((_QWORD *)v106 + 5017) < *((_QWORD *)v106 + 5018))
    goto LABEL_25;
  v51 = *((_QWORD *)v106 + 5019);
  if ((v51 & 1) == 0)
  {
    v83 = *(_QWORD *)(v51 + 8) ^ *((_QWORD *)v106 + 5020);
    *((_QWORD *)v106 + 5018) = v51 + HIDWORD(v83);
    v50[2] = v51 + (int)v83;
LABEL_25:
    *v50 = v51 + 128;
    goto LABEL_26;
  }
  JSC::sanitizeStackForVM(v106, v40, v41, v42, v43, v44, v45, v46);
  v51 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v106 + 40112, (uint64_t)v106 + 192, 128, 0, 0, v99, v100, v101);
LABEL_26:
  *(_DWORD *)v51 = 0;
  JSC::Structure::Structure(v51, (uint64_t)v48, v49, v30, (uint64_t)v113, (unint64_t)&JSC::NumberObject::s_info, 0, 0);
  if (*((_BYTE *)v48 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v106, (JSC::Structure *)v51);
  v61 = v106;
  v60 = v107;
  v62 = (unint64_t *)((char *)v106 + 40136);
  v63 = *(_QWORD *)(v107 + 664);
  LODWORD(v113[0]) = 67448346;
  if ((v63 & 0xFFFE000000000002) == 0 && v63 && *(unsigned __int8 *)(v63 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v63, v106, v59, v53, v54, v55, v56, v57, v58);
  v64 = *v62;
  if (*v62 >= v62[1])
  {
    v64 = v62[2];
    if ((v64 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v61, v52, v53, v54, v55, v56, v57, v58);
      v64 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v61 + 40112, (uint64_t)v61 + 192, 128, 0, 0, v102, v103, v104);
      goto LABEL_34;
    }
    v84 = *(_QWORD *)(v64 + 8) ^ v62[3];
    v62[1] = v64 + HIDWORD(v84);
    v62[2] = v64 + (int)v84;
  }
  *v62 = v64 + 128;
LABEL_34:
  *(_DWORD *)v64 = 0;
  JSC::Structure::Structure(v64, (uint64_t)v61, v60, v63, (uint64_t)v113, (unint64_t)&JSC::NumberConstructor::s_info, 0, 0);
  if (*((_BYTE *)v61 + 755))
    __dmb(0xAu);
  v70 = v110;
  v71 = JSC::NumberConstructor::create((uint64_t *)v61, v64, v110, v65, v66, v67, v68, v69);
  if (!v111)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E77E0);
  }
  if (!v70)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7800);
  }
  if (v112)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7820);
  }
  v76 = v71;
  v112 = v71;
  JSC::JSObject::putDirectWithoutTransition(v70, (uint64_t)v61, *(_QWORD *)(v62[227] + 1080), v71, 4, v72, v73, v74, v75);
  v108[1] = v76;
  if (v76 && *((_DWORD *)v61 + 190) >= *(unsigned __int8 *)(v60 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v61 + 192, v60);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7860);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7880);
  }
  v78 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v78;
  if (!v78 && v105[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v87 = v105 - 64;
      v88 = *((_QWORD *)v105 - 5);
      *((_QWORD *)v87 + 2) = v88;
      *((_QWORD *)v87 + 4) = v88;
      if (v88)
      {
        v89 = (unsigned int *)(v105 + 16);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 | 0x10, v89));
      }
      if (v105[93379])
        v105[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v91 = (unsigned int *)(v12 + 80);
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 | 2, v91));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_72>(JSC::JSGlobalObject::init(JSC::VM &)::$_72 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  JSC::JSGlobalObject *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t SlowCase;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  JSC::VM *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  unint64_t v48;
  JSC::VM *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  JSC::VM *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::JSObject *v61;
  unint64_t v62;
  JSC::JSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t result;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  _BYTE *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  JSC::VM *v105;
  JSC::JSGlobalObject *v106;
  uint64_t *v107;
  uint64_t *v108;
  JSC::JSObject *v109;
  uint64_t v110;
  unint64_t v111;
  int v112;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v104 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v80 = (unsigned int *)(v13 + 16);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 & 0xFFFFFFEF, v80));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = (JSC::JSGlobalObject *)a1[1];
  v105 = (JSC::VM *)v16;
  v106 = v18;
  v107 = v9;
  v108 = a1;
  v110 = 0;
  v111 = 0;
  v109 = 0;
  v19 = *((_QWORD *)v18 + 82);
  v112 = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  v20 = (unint64_t *)(v16 + 38904);
  v103 = v16 + 40112;
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v75 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v75);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v75;
LABEL_10:
    *v17 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v103, v16 + 192, 128, 0, 0, v88, v89, v90);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, (uint64_t)v18, v19, (uint64_t)&v112, (unint64_t)&JSC::SetPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v29 = *v20;
  if (*(_QWORD *)(v16 + 38904) >= *(_QWORD *)(v16 + 38912))
  {
    v29 = *(_QWORD *)(v16 + 38920);
    if ((v29 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, v22, v23, v24, v25, v26, v27, v28);
      v29 = JSC::LocalAllocator::allocateSlowCase(v16 + 38880, v16 + 192, 16, 0, 0, v91, v92, v93);
      goto LABEL_15;
    }
    v76 = *(_QWORD *)(v29 + 8) ^ *(_QWORD *)(v16 + 38928);
    *(_QWORD *)(v16 + 38912) = v29 + HIDWORD(v76);
    *(_QWORD *)(v16 + 38920) = v29 + (int)v76;
  }
  *v20 = v29 + 16;
LABEL_15:
  *(_DWORD *)v29 = 0;
  v30 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v29 = SlowCase >> 4;
  *(_DWORD *)(v29 + 4) = v30;
  *(_QWORD *)(v29 + 8) = 0;
  JSC::SetPrototype::finishCreation((JSC::SetPrototype *)v29, (JSC::VM *)v16, v18);
  v109 = (JSC::JSObject *)v29;
  v112 = 70;
  if ((v29 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v29 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)v16, v38, v32, v33, v34, v35, v36, v37);
  v39 = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_19;
  v39 = *(_QWORD *)(v16 + 40152);
  if ((v39 & 1) == 0)
  {
    v77 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = v39 + HIDWORD(v77);
    *(_QWORD *)(v16 + 40152) = v39 + (int)v77;
LABEL_19:
    *v17 = v39 + 128;
    goto LABEL_20;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v31, v32, v33, v34, v35, v36, v37);
  v39 = JSC::LocalAllocator::allocateSlowCase(v103, v16 + 192, 128, 0, 0, v94, v95, v96);
LABEL_20:
  *(_DWORD *)v39 = 0;
  JSC::Structure::Structure(v39, v16, (uint64_t)v18, v29, (uint64_t)&v112, (unint64_t)&JSC::JSSet::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v105, (JSC::Structure *)v39);
  v49 = v105;
  v48 = (unint64_t)v106;
  v50 = (unint64_t *)((char *)v105 + 40136);
  v51 = *((_QWORD *)v106 + 83);
  v112 = 67099;
  if ((v51 & 0xFFFE000000000002) == 0 && v51 && *(unsigned __int8 *)(v51 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v51, v105, v47, v41, v42, v43, v44, v45, v46);
  v52 = (unint64_t *)((char *)v49 + 38552);
  v53 = *v50;
  if (*v50 < v50[1])
    goto LABEL_27;
  v53 = v50[2];
  if ((v53 & 1) == 0)
  {
    v78 = *(_QWORD *)(v53 + 8) ^ v50[3];
    v50[1] = v53 + HIDWORD(v78);
    v50[2] = v53 + (int)v78;
LABEL_27:
    *v50 = v53 + 128;
    goto LABEL_28;
  }
  JSC::sanitizeStackForVM(v49, v40, v41, v42, v43, v44, v45, v46);
  v53 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v49 + 40112, (uint64_t)v49 + 192, 128, 0, 0, v97, v98, v99);
LABEL_28:
  *(_DWORD *)v53 = 0;
  JSC::Structure::Structure(v53, (uint64_t)v49, v48, v51, (uint64_t)&v112, (unint64_t)&JSC::SetConstructor::s_info, 0, 0);
  if (*((_BYTE *)v49 + 755))
    __dmb(0xAu);
  v61 = v109;
  v62 = *v52;
  if (*v52 >= *((_QWORD *)v49 + 4820))
  {
    v62 = *((_QWORD *)v49 + 4821);
    if ((v62 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v49, v54, v55, v56, v57, v58, v59, v60);
      v62 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v49 + 38528, (uint64_t)v49 + 192, 48, 0, 0, v100, v101, v102);
      goto LABEL_32;
    }
    v79 = *(_QWORD *)(v62 + 8) ^ *((_QWORD *)v49 + 4822);
    *((_QWORD *)v49 + 4820) = v62 + HIDWORD(v79);
    *((_QWORD *)v49 + 4821) = v62 + (int)v79;
  }
  *v52 = v62 + 48;
LABEL_32:
  *(_DWORD *)v62 = 0;
  v63 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v62, (uint64_t)v49, v53, (uint64_t)JSC::callSet, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructSet);
  JSC::SetConstructor::finishCreation(v63, v49, v61, v64, v65, v66, v67, v68);
  if (!v110)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7E78);
  }
  if (!v61)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7E98);
  }
  if (v111)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7EB8);
  }
  v111 = v62;
  JSC::JSObject::putDirectWithoutTransition(v61, (uint64_t)v49, *(_QWORD *)(v50[227] + 1080), v62, 4, v69, v70, v71, v72);
  v107[1] = v62;
  if (*((_DWORD *)v49 + 190) >= *(unsigned __int8 *)(v48 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v49 + 192, v48);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7ED8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E7EF8);
  }
  v74 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v74;
  if (!v74 && v104[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v82 = v104 - 64;
      v83 = *((_QWORD *)v104 - 5);
      *((_QWORD *)v82 + 2) = v83;
      *((_QWORD *)v82 + 4) = v83;
      if (v83)
      {
        v84 = (unsigned int *)(v104 + 16);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 | 0x10, v84));
      }
      if (v104[93379])
        v104[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v86 = (unsigned int *)(v12 + 80);
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 | 2, v86));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_73>(JSC::JSGlobalObject::init(JSC::VM &)::$_73 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  JSC::JSGlobalObject *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t SlowCase;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  JSC::VM *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  unint64_t v48;
  JSC::VM *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  JSC::VM *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::JSObject *v61;
  unint64_t v62;
  JSC::JSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t result;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  _BYTE *v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  JSC::VM *v100;
  JSC::JSGlobalObject *v101;
  uint64_t *v102;
  uint64_t *v103;
  JSC::JSObject *v104;
  uint64_t v105;
  unint64_t v106;
  int v107;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v99 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v75 = (unsigned int *)(v13 + 16);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 & 0xFFFFFFEF, v75));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = (JSC::JSGlobalObject *)a1[1];
  v100 = (JSC::VM *)v16;
  v101 = v18;
  v102 = v9;
  v103 = a1;
  v105 = 0;
  v106 = 0;
  v104 = 0;
  v19 = *((_QWORD *)v18 + 82);
  v107 = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  v20 = (unint64_t *)(v16 + 38904);
  v98 = v16 + 40112;
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v70 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v70);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v70;
LABEL_10:
    *v17 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v98, v16 + 192, 128, 0, 0, v83, v84, v85);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, (uint64_t)v18, v19, (uint64_t)&v107, (unint64_t)&JSC::WeakMapPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v29 = *v20;
  if (*(_QWORD *)(v16 + 38904) >= *(_QWORD *)(v16 + 38912))
  {
    v29 = *(_QWORD *)(v16 + 38920);
    if ((v29 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, v22, v23, v24, v25, v26, v27, v28);
      v29 = JSC::LocalAllocator::allocateSlowCase(v16 + 38880, v16 + 192, 16, 0, 0, v86, v87, v88);
      goto LABEL_15;
    }
    v71 = *(_QWORD *)(v29 + 8) ^ *(_QWORD *)(v16 + 38928);
    *(_QWORD *)(v16 + 38912) = v29 + HIDWORD(v71);
    *(_QWORD *)(v16 + 38920) = v29 + (int)v71;
  }
  *v20 = v29 + 16;
LABEL_15:
  *(_DWORD *)v29 = 0;
  v30 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v29 = SlowCase >> 4;
  *(_DWORD *)(v29 + 4) = v30;
  *(_QWORD *)(v29 + 8) = 0;
  JSC::WeakMapPrototype::finishCreation((JSC::WeakMapPrototype *)v29, (JSC::VM *)v16, v18);
  v104 = (JSC::JSObject *)v29;
  v107 = 71;
  if ((v29 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v29 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)v16, v38, v32, v33, v34, v35, v36, v37);
  v39 = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_19;
  v39 = *(_QWORD *)(v16 + 40152);
  if ((v39 & 1) == 0)
  {
    v72 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = v39 + HIDWORD(v72);
    *(_QWORD *)(v16 + 40152) = v39 + (int)v72;
LABEL_19:
    *v17 = v39 + 128;
    goto LABEL_20;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v31, v32, v33, v34, v35, v36, v37);
  v39 = JSC::LocalAllocator::allocateSlowCase(v98, v16 + 192, 128, 0, 0, v89, v90, v91);
LABEL_20:
  *(_DWORD *)v39 = 0;
  JSC::Structure::Structure(v39, v16, (uint64_t)v18, v29, (uint64_t)&v107, (unint64_t)&JSC::JSWeakMap::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v100, (JSC::Structure *)v39);
  v49 = v100;
  v48 = (unint64_t)v101;
  v50 = (unint64_t *)((char *)v100 + 40136);
  v51 = *((_QWORD *)v101 + 83);
  v107 = 67099;
  if ((v51 & 0xFFFE000000000002) == 0 && v51 && *(unsigned __int8 *)(v51 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v51, v100, v47, v41, v42, v43, v44, v45, v46);
  v52 = (unint64_t *)((char *)v49 + 38552);
  v53 = *v50;
  if (*v50 < v50[1])
    goto LABEL_27;
  v53 = v50[2];
  if ((v53 & 1) == 0)
  {
    v73 = *(_QWORD *)(v53 + 8) ^ v50[3];
    v50[1] = v53 + HIDWORD(v73);
    v50[2] = v53 + (int)v73;
LABEL_27:
    *v50 = v53 + 128;
    goto LABEL_28;
  }
  JSC::sanitizeStackForVM(v49, v40, v41, v42, v43, v44, v45, v46);
  v53 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v49 + 40112, (uint64_t)v49 + 192, 128, 0, 0, v92, v93, v94);
LABEL_28:
  *(_DWORD *)v53 = 0;
  JSC::Structure::Structure(v53, (uint64_t)v49, v48, v51, (uint64_t)&v107, (unint64_t)&JSC::WeakMapConstructor::s_info, 0, 0);
  if (*((_BYTE *)v49 + 755))
    __dmb(0xAu);
  v61 = v104;
  v62 = *v52;
  if (*v52 >= *((_QWORD *)v49 + 4820))
  {
    v62 = *((_QWORD *)v49 + 4821);
    if ((v62 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v49, v54, v55, v56, v57, v58, v59, v60);
      v62 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v49 + 38528, (uint64_t)v49 + 192, 48, 0, 0, v95, v96, v97);
      goto LABEL_32;
    }
    v74 = *(_QWORD *)(v62 + 8) ^ *((_QWORD *)v49 + 4822);
    *((_QWORD *)v49 + 4820) = v62 + HIDWORD(v74);
    *((_QWORD *)v49 + 4821) = v62 + (int)v74;
  }
  *v52 = v62 + 48;
LABEL_32:
  *(_DWORD *)v62 = 0;
  v63 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v62, (uint64_t)v49, v53, (uint64_t)JSC::callWeakMap, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructWeakMap);
  JSC::WeakMapConstructor::finishCreation(v63, v49, (uint64_t)v61);
  if (!v105)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E84FCLL);
  }
  if (!v61)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E851CLL);
  }
  if (v106)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E853CLL);
  }
  v106 = v62;
  JSC::JSObject::putDirectWithoutTransition(v61, (uint64_t)v49, *(_QWORD *)(v50[227] + 1080), v62, 4, v64, v65, v66, v67);
  v102[1] = v62;
  if (*((_DWORD *)v49 + 190) >= *(unsigned __int8 *)(v48 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v49 + 192, v48);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E855CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E857CLL);
  }
  v69 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v69;
  if (!v69 && v99[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v77 = v99 - 64;
      v78 = *((_QWORD *)v99 - 5);
      *((_QWORD *)v77 + 2) = v78;
      *((_QWORD *)v77 + 4) = v78;
      if (v78)
      {
        v79 = (unsigned int *)(v99 + 16);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 | 0x10, v79));
      }
      if (v99[93379])
        v99[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v81 = (unsigned int *)(v12 + 80);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 | 2, v81));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_74>(JSC::JSGlobalObject::init(JSC::VM &)::$_74 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  JSC::JSGlobalObject *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t SlowCase;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  JSC::VM *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  unint64_t v48;
  JSC::VM *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  JSC::VM *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::JSObject *v61;
  unint64_t v62;
  JSC::JSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  uint64_t result;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  _BYTE *v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  JSC::VM *v100;
  JSC::JSGlobalObject *v101;
  uint64_t *v102;
  uint64_t *v103;
  JSC::JSObject *v104;
  uint64_t v105;
  unint64_t v106;
  int v107;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v99 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v75 = (unsigned int *)(v13 + 16);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 & 0xFFFFFFEF, v75));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = (JSC::JSGlobalObject *)a1[1];
  v100 = (JSC::VM *)v16;
  v101 = v18;
  v102 = v9;
  v103 = a1;
  v105 = 0;
  v106 = 0;
  v104 = 0;
  v19 = *((_QWORD *)v18 + 82);
  v107 = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  v20 = (unint64_t *)(v16 + 38904);
  v98 = v16 + 40112;
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v70 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v70);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v70;
LABEL_10:
    *v17 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v98, v16 + 192, 128, 0, 0, v83, v84, v85);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, (uint64_t)v18, v19, (uint64_t)&v107, (unint64_t)&JSC::WeakSetPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v29 = *v20;
  if (*(_QWORD *)(v16 + 38904) >= *(_QWORD *)(v16 + 38912))
  {
    v29 = *(_QWORD *)(v16 + 38920);
    if ((v29 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, v22, v23, v24, v25, v26, v27, v28);
      v29 = JSC::LocalAllocator::allocateSlowCase(v16 + 38880, v16 + 192, 16, 0, 0, v86, v87, v88);
      goto LABEL_15;
    }
    v71 = *(_QWORD *)(v29 + 8) ^ *(_QWORD *)(v16 + 38928);
    *(_QWORD *)(v16 + 38912) = v29 + HIDWORD(v71);
    *(_QWORD *)(v16 + 38920) = v29 + (int)v71;
  }
  *v20 = v29 + 16;
LABEL_15:
  *(_DWORD *)v29 = 0;
  v30 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v29 = SlowCase >> 4;
  *(_DWORD *)(v29 + 4) = v30;
  *(_QWORD *)(v29 + 8) = 0;
  JSC::WeakSetPrototype::finishCreation((JSC::WeakSetPrototype *)v29, (JSC::VM *)v16, v18);
  v104 = (JSC::JSObject *)v29;
  v107 = 72;
  if ((v29 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v29 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v29, (JSC::VM *)v16, v38, v32, v33, v34, v35, v36, v37);
  v39 = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_19;
  v39 = *(_QWORD *)(v16 + 40152);
  if ((v39 & 1) == 0)
  {
    v72 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = v39 + HIDWORD(v72);
    *(_QWORD *)(v16 + 40152) = v39 + (int)v72;
LABEL_19:
    *v17 = v39 + 128;
    goto LABEL_20;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v31, v32, v33, v34, v35, v36, v37);
  v39 = JSC::LocalAllocator::allocateSlowCase(v98, v16 + 192, 128, 0, 0, v89, v90, v91);
LABEL_20:
  *(_DWORD *)v39 = 0;
  JSC::Structure::Structure(v39, v16, (uint64_t)v18, v29, (uint64_t)&v107, (unint64_t)&JSC::JSWeakSet::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v100, (JSC::Structure *)v39);
  v49 = v100;
  v48 = (unint64_t)v101;
  v50 = (unint64_t *)((char *)v100 + 40136);
  v51 = *((_QWORD *)v101 + 83);
  v107 = 67099;
  if ((v51 & 0xFFFE000000000002) == 0 && v51 && *(unsigned __int8 *)(v51 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v51, v100, v47, v41, v42, v43, v44, v45, v46);
  v52 = (unint64_t *)((char *)v49 + 38552);
  v53 = *v50;
  if (*v50 < v50[1])
    goto LABEL_27;
  v53 = v50[2];
  if ((v53 & 1) == 0)
  {
    v73 = *(_QWORD *)(v53 + 8) ^ v50[3];
    v50[1] = v53 + HIDWORD(v73);
    v50[2] = v53 + (int)v73;
LABEL_27:
    *v50 = v53 + 128;
    goto LABEL_28;
  }
  JSC::sanitizeStackForVM(v49, v40, v41, v42, v43, v44, v45, v46);
  v53 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v49 + 40112, (uint64_t)v49 + 192, 128, 0, 0, v92, v93, v94);
LABEL_28:
  *(_DWORD *)v53 = 0;
  JSC::Structure::Structure(v53, (uint64_t)v49, v48, v51, (uint64_t)&v107, (unint64_t)&JSC::WeakSetConstructor::s_info, 0, 0);
  if (*((_BYTE *)v49 + 755))
    __dmb(0xAu);
  v61 = v104;
  v62 = *v52;
  if (*v52 >= *((_QWORD *)v49 + 4820))
  {
    v62 = *((_QWORD *)v49 + 4821);
    if ((v62 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v49, v54, v55, v56, v57, v58, v59, v60);
      v62 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v49 + 38528, (uint64_t)v49 + 192, 48, 0, 0, v95, v96, v97);
      goto LABEL_32;
    }
    v74 = *(_QWORD *)(v62 + 8) ^ *((_QWORD *)v49 + 4822);
    *((_QWORD *)v49 + 4820) = v62 + HIDWORD(v74);
    *((_QWORD *)v49 + 4821) = v62 + (int)v74;
  }
  *v52 = v62 + 48;
LABEL_32:
  *(_DWORD *)v62 = 0;
  v63 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v62, (uint64_t)v49, v53, (uint64_t)JSC::callWeakSet, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructWeakSet);
  JSC::WeakSetConstructor::finishCreation(v63, v49, (uint64_t)v61);
  if (!v105)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E8B80);
  }
  if (!v61)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E8BA0);
  }
  if (v106)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E8BC0);
  }
  v106 = v62;
  JSC::JSObject::putDirectWithoutTransition(v61, (uint64_t)v49, *(_QWORD *)(v50[227] + 1080), v62, 4, v64, v65, v66, v67);
  v102[1] = v62;
  if (*((_DWORD *)v49 + 190) >= *(unsigned __int8 *)(v48 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v49 + 192, v48);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E8BE0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E8C00);
  }
  v69 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v69;
  if (!v69 && v99[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v77 = v99 - 64;
      v78 = *((_QWORD *)v99 - 5);
      *((_QWORD *)v77 + 2) = v78;
      *((_QWORD *)v77 + 4) = v78;
      if (v78)
      {
        v79 = (unsigned int *)(v99 + 16);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 | 0x10, v79));
      }
      if (v99[93379])
        v99[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v81 = (unsigned int *)(v12 + 80);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 | 2, v81));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_75>(JSC::JSGlobalObject::init(JSC::VM &)::$_75 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::VM **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  JSC::VM *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  JSC::VM *v16;
  unint64_t *v17;
  unint64_t Structure;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  JSC::Structure *v29;
  JSC::VM *v30;
  JSC::VM *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  JSC::VM *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::JSObject *v46;
  uint64_t v47;
  JSC::JSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t result;
  int v54;
  unint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  _BYTE *v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t SlowCase;
  uint64_t v68;
  JSC::VM *v69;
  JSC::VM *v70;
  uint64_t *v71;
  JSC::VM **v72;
  JSC::JSObject *v73;
  uint64_t v74;
  uint64_t v75;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (char *)*a1 + 64;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v56 = (unsigned int *)(v13 + 16);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 & 0xFFFFFFEF, v56));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = (unint64_t *)a1[1];
  v69 = v16;
  v70 = (JSC::VM *)v17;
  v71 = v9;
  v72 = a1;
  v74 = 0;
  v75 = 0;
  Structure = JSC::JSArrayBufferPrototype::createStructure((unint64_t *)v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v73 = (JSC::JSObject *)JSC::JSArrayBufferPrototype::create(v16, (JSC::VM *)v17, Structure, 0, v19, v20, v21, v22);
  v29 = (JSC::Structure *)JSC::JSArrayBuffer::createStructure((unint64_t *)v16, (JSC::VM *)v17, (unint64_t)v73, v23, v24, v25, v26, v27, v28);
  JSC::LazyClassStructure::Initializer::setStructure(&v69, v29);
  v31 = v69;
  v30 = v70;
  v32 = (uint64_t *)((char *)v69 + 38552);
  v40 = JSC::JSGenericArrayBufferConstructor<(JSC::ArrayBufferSharingMode)0>::createStructure(v69, v70, *((_QWORD *)v70 + 83), v33, v34, v35, v36, v37, v38);
  v46 = v73;
  v47 = *v32;
  if (*v32 >= (unint64_t)v32[1])
  {
    v47 = v32[2];
    if ((v47 & 1) != 0)
    {
      v68 = v40;
      JSC::sanitizeStackForVM(v31, v39, v40, v41, v42, v43, v44, v45);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v31 + 38528, (uint64_t)v31 + 192, 48, 0, 0, v64, v65, v66);
      v40 = v68;
      v47 = SlowCase;
      goto LABEL_7;
    }
    v55 = *(_QWORD *)(v47 + 8) ^ v32[3];
    v32[1] = v47 + HIDWORD(v55);
    v32[2] = v47 + (int)v55;
  }
  *v32 = v47 + 48;
LABEL_7:
  *(_DWORD *)v47 = 0;
  v48 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v47, (uint64_t)v31, v40, (uint64_t)JSC::callArrayBuffer, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructArrayBuffer);
  JSC::JSGenericArrayBufferConstructor<(JSC::ArrayBufferSharingMode)0>::finishCreation(v48, v31, (uint64_t)v46);
  if (!v74)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E8F9CLL);
  }
  if (!v46)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E8FBCLL);
  }
  if (v75)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E8FDCLL);
  }
  v75 = v47;
  JSC::JSObject::putDirectWithoutTransition(v46, (uint64_t)v31, *(_QWORD *)(v32[425] + 1080), v47, 4, v49, v50, v51, v52);
  v71[1] = v47;
  if (*((_DWORD *)v31 + 190) >= *((unsigned __int8 *)v30 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v31 + 192, (unint64_t)v30);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E8FFCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E901CLL);
  }
  v54 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v54;
  if (!v54 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v58 = v13 - 64;
      v59 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v58 + 2) = v59;
      *((_QWORD *)v58 + 4) = v59;
      if (v59)
      {
        v60 = (unsigned int *)(v13 + 16);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 | 0x10, v60));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v62 = (unsigned int *)((char *)v12 + 80);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 | 2, v62));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_76>(JSC::JSGlobalObject::init(JSC::VM &)::$_76 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t Structure;
  uint64_t v22;
  JSC::VM *v23;
  const WTF::String *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t SlowCase;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  WTF::StringImpl *v50;
  JSC::Structure *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  unint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  JSC::VM *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::JSObject *v68;
  uint64_t v69;
  JSC::JSObject *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  unint64_t v79;
  uint64_t result;
  int v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(WTF::StringImpl **);
  WTF::StringImpl **v91;
  unint64_t v92;
  void (*v93)(WTF::StringImpl **);
  WTF::StringImpl **v94;
  unint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  _BYTE *v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t *v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t *v115;
  JSC::JSObject *v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  JSC::VM *v120;
  _QWORD *v121;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v96 = (unsigned int *)(v13 + 16);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 & 0xFFFFFFEF, v96));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 38904);
  *v9 = v10 | 2;
  v18 = a1[1];
  v112 = (unint64_t *)v16;
  v113 = (_QWORD *)v18;
  v114 = v9;
  v115 = a1;
  v117 = 0;
  v118 = 0;
  v116 = 0;
  v19 = *(_QWORD *)(v18 + 1504);
  if ((v19 & 1) != 0)
  {
    v90 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v18 & 8) != 0)
      v91 = (WTF::StringImpl **)(v18 - 16);
    else
      v91 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    v119 = *v91;
    v120 = (JSC::VM *)v18;
    v121 = (_QWORD *)(v18 + 1504);
    v19 = v90(&v119);
  }
  if (*(_QWORD *)(v19 + 48) == 2)
    v20 = 0;
  else
    v20 = *(_QWORD *)(v19 + 48);
  Structure = JSC::NativeErrorPrototype::createStructure((unint64_t *)v16, (JSC::VM *)v18, v20, a5, a6, a7, a8, a9, a2);
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v22 = 0x900000002;
  *(_QWORD *)(v22 + 8) = "EvalError";
  *(_DWORD *)(v22 + 16) = 4;
  v119 = (WTF::StringImpl *)v22;
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 38912))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 38920);
  if ((SlowCase & 1) == 0)
  {
    v92 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 38928);
    *(_QWORD *)(v16 + 38912) = SlowCase + HIDWORD(v92);
    *(_QWORD *)(v16 + 38920) = SlowCase + (int)v92;
LABEL_10:
    *v17 = SlowCase + 16;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 38880, v16 + 192, 16, 0, 0, v104, v105, v106);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  v31 = *(_DWORD *)(Structure + 8);
  *(_DWORD *)SlowCase = Structure >> 4;
  *(_DWORD *)(SlowCase + 4) = v31;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 1968);
  v33 = JSC::jsString((JSC *)v16, (JSC::VM *)&v119, v24, v25, v26, v27, v28, v29);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, v16, v32, v33, 4, v34, v35, v36, v37);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, v16, *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 1824), *(_QWORD *)(v16 + 41968), 4, v38, v39, v40, v41);
  if (v116)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9464);
  }
  if (v117)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9484);
  }
  if (v118)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E94A4);
  }
  v116 = (JSC::JSObject *)SlowCase;
  v50 = v119;
  v119 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = (JSC::Structure *)JSC::ErrorInstance::createStructure(v112, (JSC::VM *)v18, SlowCase, v44, v45, v46, v47, v48, v49);
  JSC::LazyClassStructure::Initializer::setStructure(&v112, v51);
  v58 = v112;
  v59 = (uint64_t *)(v112 + 4819);
  v60 = *(_QWORD *)(v18 + 1504);
  if ((v60 & 1) != 0)
  {
    v93 = *(void (**)(WTF::StringImpl **))(v60 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v18 & 8) != 0)
      v94 = (WTF::StringImpl **)(v18 - 16);
    else
      v94 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    v119 = *v94;
    v120 = (JSC::VM *)v18;
    v121 = (_QWORD *)(v18 + 1504);
    v93(&v119);
  }
  v62 = JSC::NativeErrorConstructorBase::createStructure(v58, (JSC::VM *)v18, *(_QWORD *)(v18 + 1512), v52, v53, v54, v55, v56, v57);
  v68 = v116;
  v69 = *v59;
  if (*v59 >= (unint64_t)v59[1])
  {
    v69 = v59[2];
    if ((v69 & 1) != 0)
    {
      v107 = v62;
      JSC::sanitizeStackForVM((JSC *)v58, v61, v62, v63, v64, v65, v66, v67);
      v111 = JSC::LocalAllocator::allocateSlowCase((uint64_t)(v58 + 4816), (uint64_t)(v58 + 24), 48, 0, 0, v108, v109, v110);
      v62 = v107;
      v69 = v111;
      goto LABEL_22;
    }
    v95 = *(_QWORD *)(v69 + 8) ^ v59[3];
    v59[1] = v69 + HIDWORD(v95);
    v59[2] = v69 + (int)v95;
  }
  *v59 = v69 + 48;
LABEL_22:
  *(_DWORD *)v69 = 0;
  v70 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v69, (uint64_t)v58, v62, (uint64_t)JSC::callEvalError, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructEvalError);
  JSC::NativeErrorConstructorBase::finishCreation(v70, (JSC *)v58, (uint64_t)v68, 1u, v71, v72, v73, v74);
  if (!v117)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9514);
  }
  if (!v68)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9534);
  }
  if (v118)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9554);
  }
  v118 = v69;
  JSC::JSObject::putDirectWithoutTransition(v68, (uint64_t)v58, *(_QWORD *)(v59[425] + 1080), v69, 4, v75, v76, v77, v78);
  v79 = (unint64_t)v113;
  v114[1] = v69;
  if (v79 && *((_DWORD *)v58 + 190) >= *(unsigned __int8 *)(v79 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v58 + 24), v79);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9590);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E95B0);
  }
  v81 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v81;
  if (!v81 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v98 = v13 - 64;
      v99 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v98 + 2) = v99;
      *((_QWORD *)v98 + 4) = v99;
      if (v99)
      {
        v100 = (unsigned int *)(v13 + 16);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 | 0x10, v100));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v102 = (unsigned int *)(v12 + 80);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 | 2, v102));
    }
  }
  return result;
}

unint64_t JSC::NativeErrorPrototype::create(JSC::NativeErrorPrototype *this, JSC::VM *a2, JSC::Structure *a3, const WTF::String *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v24;
  JSC::Structure *v25;
  JSC::VM *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t SlowCase;

  v9 = (uint64_t *)((char *)this + 41968);
  v10 = (_QWORD *)((char *)this + 38904);
  v11 = *((_QWORD *)this + 4863);
  if (v11 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v11 = *((_QWORD *)this + 4865);
  if ((v11 & 1) == 0)
  {
    v24 = *(_QWORD *)(v11 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v11 + HIDWORD(v24);
    *((_QWORD *)this + 4865) = v11 + (int)v24;
LABEL_2:
    *v10 = v11 + 16;
    goto LABEL_3;
  }
  v25 = a3;
  v26 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v27, v28, v29);
  a2 = v26;
  a3 = v25;
  v11 = SlowCase;
LABEL_3:
  *(_DWORD *)v11 = 0;
  v12 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v11 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v13 = *(_QWORD *)(v10[381] + 1968);
  v14 = JSC::jsString(this, a3, a3, (uint64_t)a4, a5, a6, a7, a8);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v11, (uint64_t)this, v13, v14, 4, v15, v16, v17, v18);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v11, (uint64_t)this, *(_QWORD *)(v10[381] + 1824), *v9, 4, v19, v20, v21, v22);
  return v11;
}

uint64_t JSC::NativeErrorPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSObject::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::NativeErrorConstructorBase::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 67099;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::NativeErrorConstructorBase::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_77>(JSC::JSGlobalObject::init(JSC::VM &)::$_77 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(unint64_t **a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t result;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t *v20[7];

  v1 = a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = *a1 + 8;
  v6 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v12 = (unsigned int *)(v5 + 16);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 & 0xFFFFFFEF, v12));
      *((_BYTE *)v4 + 86) = 1;
      v1 = a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v20[0] = v8;
  v20[1] = v9;
  v20[2] = v1;
  v20[3] = (unint64_t *)a1;
  memset(&v20[4], 0, 24);
  JSC::JSGlobalObject::initializeErrorConstructor<(JSC::ErrorType)2>((JSC::JSGlobalObject *)v9, v20);
  result = *a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9B50);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9B70);
  }
  v11 = *((_DWORD *)v4 + 22) - 1;
  *((_DWORD *)v4 + 22) = v11;
  if (!v11 && v5[93377])
  {
    if (*((_BYTE *)v4 + 86))
    {
      v14 = v5 - 64;
      v15 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v14 + 2) = v15;
      *((_QWORD *)v14 + 4) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 | 0x10, v16));
      }
      if (v5[93379])
        v5[93378] = 1;
      *((_BYTE *)v4 + 86) = 0;
    }
    else
    {
      v18 = (unsigned int *)(v4 + 10);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 | 2, v18));
    }
  }
  return result;
}

void JSC::JSGlobalObject::initializeErrorConstructor<(JSC::ErrorType)2>(JSC::JSGlobalObject *a1, unint64_t **a2)
{
  unint64_t *v4;
  JSC::LazyClassStructure *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  JSC::VM *Structure;
  uint64_t v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::JSObject *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  WTF::StringImpl *v29;
  JSC::Structure *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::JSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;

  v4 = *a2;
  v5 = (JSC::JSGlobalObject *)((char *)a1 + 1504);
  v6 = JSC::LazyClassStructure::prototype((JSC::JSGlobalObject *)((char *)a1 + 1504), (unint64_t)a1);
  Structure = (JSC::VM *)JSC::NativeErrorPrototype::createStructure(v4, a1, v6, v7, v8, v9, v10, v11, v12);
  v14 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v14 = 0xA00000002;
  *(_QWORD *)(v14 + 8) = "RangeError";
  *(_DWORD *)(v14 + 16) = 4;
  v61 = (WTF::StringImpl *)v14;
  v20 = (JSC::JSObject *)JSC::NativeErrorPrototype::create((JSC::NativeErrorPrototype *)v4, Structure, (JSC::Structure *)&v61, v15, v16, v17, v18, v19);
  JSC::LazyClassStructure::Initializer::setPrototype(a2, v20);
  v29 = v61;
  v61 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = (JSC::Structure *)JSC::ErrorInstance::createStructure(*a2, a1, (unint64_t)a2[4], v23, v24, v25, v26, v27, v28);
  JSC::LazyClassStructure::Initializer::setStructure(a2, v30);
  v31 = *a2;
  v32 = JSC::LazyClassStructure::constructor(v5, (unint64_t)a1);
  v39 = JSC::NativeErrorConstructorBase::createStructure(v31, a1, v32, v33, v34, v35, v36, v37, v38);
  v45 = (JSC::JSObject *)JSC::NativeErrorConstructor<(JSC::ErrorType)2>::create((JSC *)v31, v39, (uint64_t)a2[4], v40, v41, v42, v43, v44);
  JSC::LazyClassStructure::Initializer::setConstructor((JSC::LazyClassStructure::Initializer *)a2, v45, v52, v46, v47, v48, v49, v50, v51);
}

unint64_t JSC::NativeErrorConstructor<(JSC::ErrorType)2>::create(JSC *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  JSC::JSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = JSC::allocateCell<JSC::IntlNumberFormatConstructor>(a1, (JSC::VM *)0x30, a3, a4, a5, a6, a7, a8);
  v12 = (JSC::JSObject *)JSC::NativeErrorConstructor<(JSC::ErrorType)2>::NativeErrorConstructor(v11, (uint64_t)a1, a2);
  JSC::NativeErrorConstructorBase::finishCreation(v12, a1, a3, 2u, v13, v14, v15, v16);
  return v11;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_78>(JSC::JSGlobalObject::init(JSC::VM &)::$_78 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(unint64_t **a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t result;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t *v20[7];

  v1 = a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = *a1 + 8;
  v6 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v12 = (unsigned int *)(v5 + 16);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 & 0xFFFFFFEF, v12));
      *((_BYTE *)v4 + 86) = 1;
      v1 = a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v20[0] = v8;
  v20[1] = v9;
  v20[2] = v1;
  v20[3] = (unint64_t *)a1;
  memset(&v20[4], 0, 24);
  JSC::JSGlobalObject::initializeErrorConstructor<(JSC::ErrorType)3>((JSC::JSGlobalObject *)v9, v20);
  result = *a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9E7CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989E9E9CLL);
  }
  v11 = *((_DWORD *)v4 + 22) - 1;
  *((_DWORD *)v4 + 22) = v11;
  if (!v11 && v5[93377])
  {
    if (*((_BYTE *)v4 + 86))
    {
      v14 = v5 - 64;
      v15 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v14 + 2) = v15;
      *((_QWORD *)v14 + 4) = v15;
      if (v15)
      {
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 | 0x10, v16));
      }
      if (v5[93379])
        v5[93378] = 1;
      *((_BYTE *)v4 + 86) = 0;
    }
    else
    {
      v18 = (unsigned int *)(v4 + 10);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 | 2, v18));
    }
  }
  return result;
}

void JSC::JSGlobalObject::initializeErrorConstructor<(JSC::ErrorType)3>(JSC::JSGlobalObject *a1, unint64_t **a2)
{
  unint64_t *v4;
  JSC::LazyClassStructure *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  JSC::VM *Structure;
  uint64_t v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::JSObject *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  WTF::StringImpl *v29;
  JSC::Structure *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::JSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;

  v4 = *a2;
  v5 = (JSC::JSGlobalObject *)((char *)a1 + 1504);
  v6 = JSC::LazyClassStructure::prototype((JSC::JSGlobalObject *)((char *)a1 + 1504), (unint64_t)a1);
  Structure = (JSC::VM *)JSC::NativeErrorPrototype::createStructure(v4, a1, v6, v7, v8, v9, v10, v11, v12);
  v14 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v14 = 0xE00000002;
  *(_QWORD *)(v14 + 8) = "ReferenceError";
  *(_DWORD *)(v14 + 16) = 4;
  v61 = (WTF::StringImpl *)v14;
  v20 = (JSC::JSObject *)JSC::NativeErrorPrototype::create((JSC::NativeErrorPrototype *)v4, Structure, (JSC::Structure *)&v61, v15, v16, v17, v18, v19);
  JSC::LazyClassStructure::Initializer::setPrototype(a2, v20);
  v29 = v61;
  v61 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = (JSC::Structure *)JSC::ErrorInstance::createStructure(*a2, a1, (unint64_t)a2[4], v23, v24, v25, v26, v27, v28);
  JSC::LazyClassStructure::Initializer::setStructure(a2, v30);
  v31 = *a2;
  v32 = JSC::LazyClassStructure::constructor(v5, (unint64_t)a1);
  v39 = JSC::NativeErrorConstructorBase::createStructure(v31, a1, v32, v33, v34, v35, v36, v37, v38);
  v45 = (JSC::JSObject *)JSC::NativeErrorConstructor<(JSC::ErrorType)3>::create((JSC *)v31, v39, (uint64_t)a2[4], v40, v41, v42, v43, v44);
  JSC::LazyClassStructure::Initializer::setConstructor((JSC::LazyClassStructure::Initializer *)a2, v45, v52, v46, v47, v48, v49, v50, v51);
}

unint64_t JSC::NativeErrorConstructor<(JSC::ErrorType)3>::create(JSC *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  JSC::JSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = JSC::allocateCell<JSC::IntlNumberFormatConstructor>(a1, (JSC::VM *)0x30, a3, a4, a5, a6, a7, a8);
  v12 = (JSC::JSObject *)JSC::NativeErrorConstructor<(JSC::ErrorType)3>::NativeErrorConstructor(v11, (uint64_t)a1, a2);
  JSC::NativeErrorConstructorBase::finishCreation(v12, a1, a3, 3u, v13, v14, v15, v16);
  return v11;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_79>(JSC::JSGlobalObject::init(JSC::VM &)::$_79 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t Structure;
  uint64_t v22;
  JSC::VM *v23;
  const WTF::String *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t SlowCase;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  WTF::StringImpl *v50;
  JSC::Structure *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  unint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  JSC::VM *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::JSObject *v68;
  uint64_t v69;
  JSC::JSObject *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  unint64_t v79;
  uint64_t result;
  int v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(WTF::StringImpl **);
  WTF::StringImpl **v91;
  unint64_t v92;
  void (*v93)(WTF::StringImpl **);
  WTF::StringImpl **v94;
  unint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  _BYTE *v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t *v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t *v115;
  JSC::JSObject *v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  JSC::VM *v120;
  _QWORD *v121;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v96 = (unsigned int *)(v13 + 16);
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 & 0xFFFFFFEF, v96));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 38904);
  *v9 = v10 | 2;
  v18 = a1[1];
  v112 = (unint64_t *)v16;
  v113 = (_QWORD *)v18;
  v114 = v9;
  v115 = a1;
  v117 = 0;
  v118 = 0;
  v116 = 0;
  v19 = *(_QWORD *)(v18 + 1504);
  if ((v19 & 1) != 0)
  {
    v90 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v18 & 8) != 0)
      v91 = (WTF::StringImpl **)(v18 - 16);
    else
      v91 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    v119 = *v91;
    v120 = (JSC::VM *)v18;
    v121 = (_QWORD *)(v18 + 1504);
    v19 = v90(&v119);
  }
  if (*(_QWORD *)(v19 + 48) == 2)
    v20 = 0;
  else
    v20 = *(_QWORD *)(v19 + 48);
  Structure = JSC::NativeErrorPrototype::createStructure((unint64_t *)v16, (JSC::VM *)v18, v20, a5, a6, a7, a8, a9, a2);
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v22 = 0xB00000002;
  *(_QWORD *)(v22 + 8) = "SyntaxError";
  *(_DWORD *)(v22 + 16) = 4;
  v119 = (WTF::StringImpl *)v22;
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 38912))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 38920);
  if ((SlowCase & 1) == 0)
  {
    v92 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 38928);
    *(_QWORD *)(v16 + 38912) = SlowCase + HIDWORD(v92);
    *(_QWORD *)(v16 + 38920) = SlowCase + (int)v92;
LABEL_10:
    *v17 = SlowCase + 16;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 38880, v16 + 192, 16, 0, 0, v104, v105, v106);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  v31 = *(_DWORD *)(Structure + 8);
  *(_DWORD *)SlowCase = Structure >> 4;
  *(_DWORD *)(SlowCase + 4) = v31;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 1968);
  v33 = JSC::jsString((JSC *)v16, (JSC::VM *)&v119, v24, v25, v26, v27, v28, v29);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, v16, v32, v33, 4, v34, v35, v36, v37);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, v16, *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 1824), *(_QWORD *)(v16 + 41968), 4, v38, v39, v40, v41);
  if (v116)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EA41CLL);
  }
  if (v117)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EA43CLL);
  }
  if (v118)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EA45CLL);
  }
  v116 = (JSC::JSObject *)SlowCase;
  v50 = v119;
  v119 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = (JSC::Structure *)JSC::ErrorInstance::createStructure(v112, (JSC::VM *)v18, SlowCase, v44, v45, v46, v47, v48, v49);
  JSC::LazyClassStructure::Initializer::setStructure(&v112, v51);
  v58 = v112;
  v59 = (uint64_t *)(v112 + 4819);
  v60 = *(_QWORD *)(v18 + 1504);
  if ((v60 & 1) != 0)
  {
    v93 = *(void (**)(WTF::StringImpl **))(v60 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v18 & 8) != 0)
      v94 = (WTF::StringImpl **)(v18 - 16);
    else
      v94 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    v119 = *v94;
    v120 = (JSC::VM *)v18;
    v121 = (_QWORD *)(v18 + 1504);
    v93(&v119);
  }
  v62 = JSC::NativeErrorConstructorBase::createStructure(v58, (JSC::VM *)v18, *(_QWORD *)(v18 + 1512), v52, v53, v54, v55, v56, v57);
  v68 = v116;
  v69 = *v59;
  if (*v59 >= (unint64_t)v59[1])
  {
    v69 = v59[2];
    if ((v69 & 1) != 0)
    {
      v107 = v62;
      JSC::sanitizeStackForVM((JSC *)v58, v61, v62, v63, v64, v65, v66, v67);
      v111 = JSC::LocalAllocator::allocateSlowCase((uint64_t)(v58 + 4816), (uint64_t)(v58 + 24), 48, 0, 0, v108, v109, v110);
      v62 = v107;
      v69 = v111;
      goto LABEL_22;
    }
    v95 = *(_QWORD *)(v69 + 8) ^ v59[3];
    v59[1] = v69 + HIDWORD(v95);
    v59[2] = v69 + (int)v95;
  }
  *v59 = v69 + 48;
LABEL_22:
  *(_DWORD *)v69 = 0;
  v70 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v69, (uint64_t)v58, v62, (uint64_t)JSC::callSyntaxError, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructSyntaxError);
  JSC::NativeErrorConstructorBase::finishCreation(v70, (JSC *)v58, (uint64_t)v68, 4u, v71, v72, v73, v74);
  if (!v117)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EA4CCLL);
  }
  if (!v68)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EA4ECLL);
  }
  if (v118)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EA50CLL);
  }
  v118 = v69;
  JSC::JSObject::putDirectWithoutTransition(v68, (uint64_t)v58, *(_QWORD *)(v59[425] + 1080), v69, 4, v75, v76, v77, v78);
  v79 = (unint64_t)v113;
  v114[1] = v69;
  if (v79 && *((_DWORD *)v58 + 190) >= *(unsigned __int8 *)(v79 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v58 + 24), v79);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EA548);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EA568);
  }
  v81 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v81;
  if (!v81 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v98 = v13 - 64;
      v99 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v98 + 2) = v99;
      *((_QWORD *)v98 + 4) = v99;
      if (v99)
      {
        v100 = (unsigned int *)(v13 + 16);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 | 0x10, v100));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v102 = (unsigned int *)(v12 + 80);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 | 2, v102));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_80>(JSC::JSGlobalObject::init(JSC::VM &)::$_80 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t Structure;
  uint64_t v22;
  JSC::VM *v23;
  const WTF::String *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t SlowCase;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  WTF::StringImpl *v50;
  JSC::Structure *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  unint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  JSC::VM *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::JSObject *v68;
  uint64_t v69;
  JSC::JSObject *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  unint64_t v79;
  uint64_t result;
  int v81;
  _BYTE *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(WTF::StringImpl **);
  WTF::StringImpl **v95;
  unint64_t v96;
  void (*v97)(WTF::StringImpl **);
  WTF::StringImpl **v98;
  unint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t *v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t *v115;
  JSC::JSObject *v116;
  uint64_t v117;
  uint64_t v118;
  WTF::StringImpl *v119;
  JSC::VM *v120;
  _QWORD *v121;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v100 = (unsigned int *)(v13 + 16);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 & 0xFFFFFFEF, v100));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 38904);
  *v9 = v10 | 2;
  v18 = a1[1];
  v112 = (unint64_t *)v16;
  v113 = (_QWORD *)v18;
  v114 = v9;
  v115 = a1;
  v117 = 0;
  v118 = 0;
  v116 = 0;
  v19 = *(_QWORD *)(v18 + 1504);
  if ((v19 & 1) != 0)
  {
    v94 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v18 & 8) != 0)
      v95 = (WTF::StringImpl **)(v18 - 16);
    else
      v95 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    v119 = *v95;
    v120 = (JSC::VM *)v18;
    v121 = (_QWORD *)(v18 + 1504);
    v19 = v94(&v119);
  }
  if (*(_QWORD *)(v19 + 48) == 2)
    v20 = 0;
  else
    v20 = *(_QWORD *)(v19 + 48);
  Structure = JSC::NativeErrorPrototype::createStructure((unint64_t *)v16, (JSC::VM *)v18, v20, a5, a6, a7, a8, a9, a2);
  v22 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v22 = 0x900000002;
  *(_QWORD *)(v22 + 8) = "TypeError";
  *(_DWORD *)(v22 + 16) = 4;
  v119 = (WTF::StringImpl *)v22;
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 38912))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 38920);
  if ((SlowCase & 1) == 0)
  {
    v96 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 38928);
    *(_QWORD *)(v16 + 38912) = SlowCase + HIDWORD(v96);
    *(_QWORD *)(v16 + 38920) = SlowCase + (int)v96;
LABEL_10:
    *v17 = SlowCase + 16;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v23, (uint64_t)v24, v25, v26, v27, v28, v29);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 38880, v16 + 192, 16, 0, 0, v104, v105, v106);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  v31 = *(_DWORD *)(Structure + 8);
  *(_DWORD *)SlowCase = Structure >> 4;
  *(_DWORD *)(SlowCase + 4) = v31;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 1968);
  v33 = JSC::jsString((JSC *)v16, (JSC::VM *)&v119, v24, v25, v26, v27, v28, v29);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, v16, v32, v33, 4, v34, v35, v36, v37);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, v16, *(_QWORD *)(*(_QWORD *)(v16 + 41952) + 1824), *(_QWORD *)(v16 + 41968), 4, v38, v39, v40, v41);
  if (v116)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EAA50);
  }
  if (v117)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EAA70);
  }
  if (v118)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EAA90);
  }
  v116 = (JSC::JSObject *)SlowCase;
  v50 = v119;
  v119 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = (JSC::Structure *)JSC::ErrorInstance::createStructure(v112, (JSC::VM *)v18, SlowCase, v44, v45, v46, v47, v48, v49);
  JSC::LazyClassStructure::Initializer::setStructure(&v112, v51);
  v58 = v112;
  v59 = (uint64_t *)(v112 + 4819);
  v60 = *(_QWORD *)(v18 + 1504);
  if ((v60 & 1) != 0)
  {
    v97 = *(void (**)(WTF::StringImpl **))(v60 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v18 & 8) != 0)
      v98 = (WTF::StringImpl **)(v18 - 16);
    else
      v98 = (WTF::StringImpl **)(v18 & 0xFFFFFFFFFFFFC000 | 8);
    v119 = *v98;
    v120 = (JSC::VM *)v18;
    v121 = (_QWORD *)(v18 + 1504);
    v97(&v119);
  }
  v62 = JSC::NativeErrorConstructorBase::createStructure(v58, (JSC::VM *)v18, *(_QWORD *)(v18 + 1512), v52, v53, v54, v55, v56, v57);
  v68 = v116;
  v69 = *v59;
  if (*v59 >= (unint64_t)v59[1])
  {
    v69 = v59[2];
    if ((v69 & 1) != 0)
    {
      v107 = v62;
      JSC::sanitizeStackForVM((JSC *)v58, v61, v62, v63, v64, v65, v66, v67);
      v111 = JSC::LocalAllocator::allocateSlowCase((uint64_t)(v58 + 4816), (uint64_t)(v58 + 24), 48, 0, 0, v108, v109, v110);
      v62 = v107;
      v69 = v111;
      goto LABEL_22;
    }
    v99 = *(_QWORD *)(v69 + 8) ^ v59[3];
    v59[1] = v69 + HIDWORD(v99);
    v59[2] = v69 + (int)v99;
  }
  *v59 = v69 + 48;
LABEL_22:
  *(_DWORD *)v69 = 0;
  v70 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v69, (uint64_t)v58, v62, (uint64_t)JSC::callTypeError, JSC::constructTypeError);
  JSC::NativeErrorConstructorBase::finishCreation(v70, (JSC *)v58, (uint64_t)v68, 5u, v71, v72, v73, v74);
  if (!v117)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EAB00);
  }
  if (!v68)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EAB20);
  }
  if (v118)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EAB40);
  }
  v118 = v69;
  JSC::JSObject::putDirectWithoutTransition(v68, (uint64_t)v58, *(_QWORD *)(v59[425] + 1080), v69, 4, v75, v76, v77, v78);
  v79 = (unint64_t)v113;
  v114[1] = v69;
  if (v79 && *((_DWORD *)v58 + 190) >= *(unsigned __int8 *)(v79 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v58 + 24), v79);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EAB7CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EAB9CLL);
  }
  v81 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v81;
  if (!v81 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v82 = v13 - 64;
      v83 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v82 + 2) = v83;
      *((_QWORD *)v82 + 4) = v83;
      if (v83)
      {
        v84 = (unsigned int *)(v13 + 16);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 | 0x10, v84));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v102 = (unsigned int *)(v12 + 80);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 | 2, v102));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_81>(JSC::JSGlobalObject::init(JSC::VM &)::$_81 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v11 = v4;
  v5 = *(_DWORD *)(v4 + 88);
  *(_DWORD *)(v4 + 88) = v5 + 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      if (*(_QWORD *)(v4 + 24) == v6)
      {
        *(_QWORD *)(v4 + 16) = 0;
        v9 = (unsigned int *)(v4 + 80);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 & 0xFFFFFFEF, v9));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_81>(JSC::JSGlobalObject::init(JSC::VM &)::$_81 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}::operator()((uint64_t)a1);
  v7 = *(_QWORD *)a1[2];
  if ((v7 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EAD20);
  }
  if ((v7 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EAD40);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v11);
  return v7;
}

void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_81>(JSC::JSGlobalObject::init(JSC::VM &)::$_81 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}::operator()(uint64_t a1)
{
  unint64_t *v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(unint64_t **)a1;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = a1;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  JSC::JSGlobalObject::initializeErrorConstructor<(JSC::ErrorType)6>((JSC::JSGlobalObject *)v2, &v1);
}

void JSC::JSGlobalObject::initializeErrorConstructor<(JSC::ErrorType)6>(JSC::JSGlobalObject *a1, unint64_t **a2)
{
  unint64_t *v4;
  JSC::LazyClassStructure *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  JSC::VM *Structure;
  uint64_t v14;
  const WTF::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::JSObject *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  WTF::StringImpl *v29;
  JSC::Structure *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::JSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;

  v4 = *a2;
  v5 = (JSC::JSGlobalObject *)((char *)a1 + 1504);
  v6 = JSC::LazyClassStructure::prototype((JSC::JSGlobalObject *)((char *)a1 + 1504), (unint64_t)a1);
  Structure = (JSC::VM *)JSC::NativeErrorPrototype::createStructure(v4, a1, v6, v7, v8, v9, v10, v11, v12);
  v14 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v14 = 0x800000002;
  *(_QWORD *)(v14 + 8) = "URIError";
  *(_DWORD *)(v14 + 16) = 4;
  v61 = (WTF::StringImpl *)v14;
  v20 = (JSC::JSObject *)JSC::NativeErrorPrototype::create((JSC::NativeErrorPrototype *)v4, Structure, (JSC::Structure *)&v61, v15, v16, v17, v18, v19);
  JSC::LazyClassStructure::Initializer::setPrototype(a2, v20);
  v29 = v61;
  v61 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = (JSC::Structure *)JSC::ErrorInstance::createStructure(*a2, a1, (unint64_t)a2[4], v23, v24, v25, v26, v27, v28);
  JSC::LazyClassStructure::Initializer::setStructure(a2, v30);
  v31 = *a2;
  v32 = JSC::LazyClassStructure::constructor(v5, (unint64_t)a1);
  v39 = JSC::NativeErrorConstructorBase::createStructure(v31, a1, v32, v33, v34, v35, v36, v37, v38);
  v45 = (JSC::JSObject *)JSC::NativeErrorConstructor<(JSC::ErrorType)6>::create((JSC *)v31, v39, (uint64_t)a2[4], v40, v41, v42, v43, v44);
  JSC::LazyClassStructure::Initializer::setConstructor((JSC::LazyClassStructure::Initializer *)a2, v45, v52, v46, v47, v48, v49, v50, v51);
}

unint64_t JSC::NativeErrorConstructor<(JSC::ErrorType)6>::create(JSC *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  JSC::JSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = JSC::allocateCell<JSC::IntlNumberFormatConstructor>(a1, (JSC::VM *)0x30, a3, a4, a5, a6, a7, a8);
  v12 = (JSC::JSObject *)JSC::NativeErrorConstructor<(JSC::ErrorType)6>::NativeErrorConstructor(v11, (uint64_t)a1, a2);
  JSC::NativeErrorConstructorBase::finishCreation(v12, a1, a3, 6u, v13, v14, v15, v16);
  return v11;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_82>(JSC::JSGlobalObject::init(JSC::VM &)::$_82 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v11 = v4;
  v5 = *(_DWORD *)(v4 + 88);
  *(_DWORD *)(v4 + 88) = v5 + 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      if (*(_QWORD *)(v4 + 24) == v6)
      {
        *(_QWORD *)(v4 + 16) = 0;
        v9 = (unsigned int *)(v4 + 80);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 & 0xFFFFFFEF, v9));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_82>(JSC::JSGlobalObject::init(JSC::VM &)::$_82 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}::operator()(a1);
  v7 = *(_QWORD *)a1[2];
  if ((v7 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EAFD8);
  }
  if ((v7 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EAFF8);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v11);
  return v7;
}

void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_82>(JSC::JSGlobalObject::init(JSC::VM &)::$_82 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}::operator()(uint64_t *a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = *(_OWORD *)(a1 + 1);
  v3 = a1;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  JSC::JSGlobalObject::initializeAggregateErrorConstructor((JSC::JSGlobalObject *)v2, (JSC::LazyClassStructure::Initializer *)&v1);
}

unint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_83>(JSC **a1, double a2, uint64_t a3, JSC::JSGlobalObject *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  JSC *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  JSC *v16;
  unint64_t result;
  unint64_t v18;
  JSC *v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (char *)*a1 + 64;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v25 = (unsigned int *)(v13 + 16);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 & 0xFFFFFFEF, v25));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  result = JSC::createIteratorResultObjectStructure(v16, (JSC::JSObject **)a1[1], a4, a2, a5, a6, a7, a8, a9);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EB18CLL);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EB1ACLL);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v19 + 192, v18);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EB1F0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EB210);
  }
  v20 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v20;
  if (!v20 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v21 = v13 - 64;
      v22 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v21 + 2) = v22;
      *((_QWORD *)v21 + 4) = v22;
      if (v22)
      {
        v23 = (unsigned int *)(v13 + 16);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 | 0x10, v23));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)((char *)v12 + 80);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

unint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_84>(uint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  unsigned int **v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t result;
  int v36;
  unint64_t v37;
  JSC::VM *v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  int v48;

  v9 = a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = (JSC::VM *)v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v44 = (unsigned int *)(v13 + 16);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 & 0xFFFFFFEF, v44));
      *((_BYTE *)v12 + 86) = 1;
      v9 = a1[2];
      v10 = *v9;
      v16 = (JSC::VM *)*a1;
    }
  }
  else
  {
    v16 = (JSC::VM *)v12;
  }
  *v9 = v10 | 2;
  v17 = JSC::StructureCache::emptyObjectStructureForPrototype((JSC::StructureCache *)(a1[1] + 246), (JSC::JSGlobalObject *)a1[1], (JSC::JSObject *)a1[1][82], 6, 0, 0, a8, a9, a2);
  v20 = (unsigned int **)v17;
  v21 = (_QWORD *)((char *)v16 + 41952);
  v22 = *(_QWORD *)(*((_QWORD *)v16 + 5244) + 2608);
  v48 = -1;
  if ((*(_BYTE *)(v17 + 19) & 8) == 0)
  {
    v23 = JSC::StructureTransitionTable::get((uint64_t *)(v17 + 80), v22, 0, 1);
    if (v23)
    {
      v24 = v23;
      v25 = *(unsigned __int16 *)(v23 + 22);
      if (v25 == 65534)
      {
        v25 = -1;
      }
      else if (v25 == 0xFFFF)
      {
        v25 = *(_DWORD *)(*(_QWORD *)(v23 + 64) + 88);
      }
      v48 = v25;
      if (!v25)
        goto LABEL_11;
LABEL_49:
      __break(0xC471u);
      JUMPOUT(0x1989EB558);
    }
  }
  v24 = JSC::Structure::addNewPropertyTransition(v16, v20, v22, 0, &v48, 0, 0, v18, v19);
  if (v48)
    goto LABEL_49;
LABEL_11:
  v26 = *(_QWORD *)(*v21 + 2656);
  v48 = -1;
  if ((*(_BYTE *)(v24 + 19) & 8) != 0
    || (v27 = JSC::StructureTransitionTable::get((uint64_t *)(v24 + 80), v26, 0, 1)) == 0)
  {
    v28 = JSC::Structure::addNewPropertyTransition(v16, (unsigned int **)v24, v26, 0, &v48, 0, 0, v18, v19);
    v29 = v48;
  }
  else
  {
    v28 = v27;
    v29 = *(unsigned __int16 *)(v27 + 22);
    if (v29 == 65534)
    {
      v29 = -1;
    }
    else if (v29 == 0xFFFF)
    {
      v29 = *(_DWORD *)(*(_QWORD *)(v27 + 64) + 88);
    }
    v48 = v29;
  }
  if (v29 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EB5F8);
  }
  v30 = *(_QWORD *)(*v21 + 1216);
  v48 = -1;
  if ((*(_BYTE *)(v28 + 19) & 8) != 0
    || (v31 = JSC::StructureTransitionTable::get((uint64_t *)(v28 + 80), v30, 0, 1)) == 0)
  {
    v32 = JSC::Structure::addNewPropertyTransition(v16, (unsigned int **)v28, v30, 0, &v48, 0, 0, v18, v19);
    v33 = v48;
  }
  else
  {
    v32 = v31;
    v33 = *(unsigned __int16 *)(v31 + 22);
    if (v33 == 65534)
    {
      v33 = -1;
    }
    else if (v33 == 0xFFFF)
    {
      v33 = *(_DWORD *)(*(_QWORD *)(v31 + 64) + 88);
    }
    v48 = v33;
  }
  if (v33 != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EB618);
  }
  v34 = *(_QWORD *)(*v21 + 1072);
  v48 = -1;
  if ((*(_BYTE *)(v32 + 19) & 8) != 0
    || (result = JSC::StructureTransitionTable::get((uint64_t *)(v32 + 80), v34, 0, 1)) == 0)
  {
    result = JSC::Structure::addNewPropertyTransition(v16, (unsigned int **)v32, v34, 0, &v48, 0, 0, v18, v19);
    v36 = v48;
  }
  else
  {
    v36 = *(unsigned __int16 *)(result + 22);
    if (v36 == 65534)
    {
      v36 = -1;
    }
    else if (v36 == 0xFFFF)
    {
      v36 = *(_DWORD *)(*(_QWORD *)(result + 64) + 88);
    }
    v48 = v36;
  }
  if (v36 != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EB638);
  }
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EB658);
  }
  v38 = (JSC::VM *)*a1;
  v37 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EB678);
  }
  if (v37 && *((_DWORD *)v38 + 190) >= *(unsigned __int8 *)(v37 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v38 + 192, v37);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EB698);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EB6DCLL);
  }
  v39 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v39;
  if (!v39 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v40 = v13 - 64;
      v41 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v40 + 2) = v41;
      *((_QWORD *)v40 + 4) = v41;
      if (v41)
      {
        v42 = (unsigned int *)(v13 + 16);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 | 0x10, v42));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v46 = (unsigned int *)(v12 + 10);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 | 2, v46));
    }
  }
  return result;
}

unint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_85>(uint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  JSC::VM *v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  unsigned int **v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t result;
  int v36;
  unint64_t v37;
  JSC::VM *v38;
  int v39;
  _BYTE *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  int v48;

  v9 = a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = (JSC::VM *)v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v44 = (unsigned int *)(v13 + 16);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 & 0xFFFFFFEF, v44));
      *((_BYTE *)v12 + 86) = 1;
      v9 = a1[2];
      v10 = *v9;
      v16 = (JSC::VM *)*a1;
    }
  }
  else
  {
    v16 = (JSC::VM *)v12;
  }
  *v9 = v10 | 2;
  v17 = JSC::StructureCache::emptyObjectStructureForPrototype((JSC::StructureCache *)(a1[1] + 246), (JSC::JSGlobalObject *)a1[1], (JSC::JSObject *)a1[1][82], 6, 0, 0, a8, a9, a2);
  v20 = (unsigned int **)v17;
  v21 = (_QWORD *)((char *)v16 + 41952);
  v22 = *(_QWORD *)(*((_QWORD *)v16 + 5244) + 1376);
  v48 = -1;
  if ((*(_BYTE *)(v17 + 19) & 8) == 0)
  {
    v23 = JSC::StructureTransitionTable::get((uint64_t *)(v17 + 80), v22, 0, 1);
    if (v23)
    {
      v24 = v23;
      v25 = *(unsigned __int16 *)(v23 + 22);
      if (v25 == 65534)
      {
        v25 = -1;
      }
      else if (v25 == 0xFFFF)
      {
        v25 = *(_DWORD *)(*(_QWORD *)(v23 + 64) + 88);
      }
      v48 = v25;
      if (!v25)
        goto LABEL_11;
LABEL_49:
      __break(0xC471u);
      JUMPOUT(0x1989EBA74);
    }
  }
  v24 = JSC::Structure::addNewPropertyTransition(v16, v20, v22, 0, &v48, 0, 0, v18, v19);
  if (v48)
    goto LABEL_49;
LABEL_11:
  v26 = *(_QWORD *)(*v21 + 2296);
  v48 = -1;
  if ((*(_BYTE *)(v24 + 19) & 8) != 0
    || (v27 = JSC::StructureTransitionTable::get((uint64_t *)(v24 + 80), v26, 0, 1)) == 0)
  {
    v28 = JSC::Structure::addNewPropertyTransition(v16, (unsigned int **)v24, v26, 0, &v48, 0, 0, v18, v19);
    v29 = v48;
  }
  else
  {
    v28 = v27;
    v29 = *(unsigned __int16 *)(v27 + 22);
    if (v29 == 65534)
    {
      v29 = -1;
    }
    else if (v29 == 0xFFFF)
    {
      v29 = *(_DWORD *)(*(_QWORD *)(v27 + 64) + 88);
    }
    v48 = v29;
  }
  if (v29 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EBB14);
  }
  v30 = *(_QWORD *)(*v21 + 1216);
  v48 = -1;
  if ((*(_BYTE *)(v28 + 19) & 8) != 0
    || (v31 = JSC::StructureTransitionTable::get((uint64_t *)(v28 + 80), v30, 0, 1)) == 0)
  {
    v32 = JSC::Structure::addNewPropertyTransition(v16, (unsigned int **)v28, v30, 0, &v48, 0, 0, v18, v19);
    v33 = v48;
  }
  else
  {
    v32 = v31;
    v33 = *(unsigned __int16 *)(v31 + 22);
    if (v33 == 65534)
    {
      v33 = -1;
    }
    else if (v33 == 0xFFFF)
    {
      v33 = *(_DWORD *)(*(_QWORD *)(v31 + 64) + 88);
    }
    v48 = v33;
  }
  if (v33 != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EBB34);
  }
  v34 = *(_QWORD *)(*v21 + 1072);
  v48 = -1;
  if ((*(_BYTE *)(v32 + 19) & 8) != 0
    || (result = JSC::StructureTransitionTable::get((uint64_t *)(v32 + 80), v34, 0, 1)) == 0)
  {
    result = JSC::Structure::addNewPropertyTransition(v16, (unsigned int **)v32, v34, 0, &v48, 0, 0, v18, v19);
    v36 = v48;
  }
  else
  {
    v36 = *(unsigned __int16 *)(result + 22);
    if (v36 == 65534)
    {
      v36 = -1;
    }
    else if (v36 == 0xFFFF)
    {
      v36 = *(_DWORD *)(*(_QWORD *)(result + 64) + 88);
    }
    v48 = v36;
  }
  if (v36 != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EBB54);
  }
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EBB74);
  }
  v38 = (JSC::VM *)*a1;
  v37 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EBB94);
  }
  if (v37 && *((_DWORD *)v38 + 190) >= *(unsigned __int8 *)(v37 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v38 + 192, v37);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EBBB4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EBBF8);
  }
  v39 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v39;
  if (!v39 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v40 = v13 - 64;
      v41 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v40 + 2) = v41;
      *((_QWORD *)v40 + 4) = v41;
      if (v41)
      {
        v42 = (unsigned int *)(v13 + 16);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 | 0x10, v42));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v46 = (unsigned int *)(v12 + 10);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 | 2, v46));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_86>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  JSC::VM *v18;
  unint64_t v19;
  unint64_t SlowCase;
  JSC::Structure *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  JSC::VM *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  JSC::VM *v37;
  unint64_t *v38;
  unint64_t v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  int v44;
  _BYTE *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v51 = (unsigned int *)(v13 + 16);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 & 0xFFFFFFEF, v51));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = (JSC::VM *)a1[1];
  v19 = *((_QWORD *)v18 + 82);
  v61 = 8215;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_13;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v49 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v49);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v49;
LABEL_13:
    *v17 = SlowCase + 128;
    goto LABEL_14;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v55, v56, v57);
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, (uint64_t)v18, v19, (uint64_t)&v61, (unint64_t)&JSC::IntlCollatorPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v27 = JSC::IntlCollatorPrototype::create((JSC::IntlCollatorPrototype *)v16, v18, SlowCase, v22, v23, v24, v25, v26);
  v36 = v27;
  v37 = (JSC::VM *)*a1;
  v38 = (unint64_t *)(*a1 + 40136);
  v62 = 23;
  if ((v27 & 0xFFFE000000000002) == 0 && v27 && *(unsigned __int8 *)(v27 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v27, v37, v35, v29, v30, v31, v32, v33, v34);
  v40 = *v38;
  if (*v38 >= v38[1])
  {
    v40 = v38[2];
    if ((v40 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v37, v28, v29, v30, v31, v32, v33, v34);
      v40 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v37 + 40112, (uint64_t)v37 + 192, 128, 0, 0, v58, v59, v60);
      goto LABEL_25;
    }
    v50 = *(_QWORD *)(v40 + 8) ^ v38[3];
    v38[1] = v40 + HIDWORD(v50);
    v38[2] = v40 + (int)v50;
  }
  *v38 = v40 + 128;
LABEL_25:
  *(_DWORD *)v40 = 0;
  result = JSC::Structure::Structure(v40, (uint64_t)v37, (uint64_t)v18, v36, (uint64_t)&v62, (unint64_t)&JSC::IntlCollator::s_info, 0, 0);
  if (*((_BYTE *)v37 + 755))
    __dmb(0xAu);
  v43 = *a1;
  v42 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EBF4CLL);
  }
  if (v42 && *(_DWORD *)(v43 + 760) >= *(unsigned __int8 *)(v42 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v43 + 192, v42);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EBF6CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EBFB0);
  }
  v44 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v44;
  if (!v44 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v45 = v13 - 64;
      v46 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v45 + 2) = v46;
      *((_QWORD *)v45 + 4) = v46;
      if (v46)
      {
        v47 = (unsigned int *)(v13 + 16);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 | 0x10, v47));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v53 = (unsigned int *)(v12 + 80);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 | 2, v53));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_87>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v19 = v12;
  v13 = *(_DWORD *)(v12 + 88);
  *(_DWORD *)(v12 + 88) = v13 + 1;
  if (!v13)
  {
    v14 = *(_QWORD *)(v12 + 16);
    if (v14)
    {
      if (*(_QWORD *)(v12 + 24) == v14)
      {
        *(_QWORD *)(v12 + 16) = 0;
        v17 = (unsigned int *)(v12 + 80);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 & 0xFFFFFFEF, v17));
        *(_BYTE *)(v12 + 86) = 1;
        v9 = (uint64_t *)a1[2];
        v10 = *v9;
      }
    }
  }
  *v9 = v10 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_87::operator()((uint64_t)a1, a9, a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)a1[2];
  if ((v15 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC124);
  }
  if ((v15 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC144);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v19);
  return v15;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_87::operator()(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t *v10;
  unint64_t *v11;
  JSC::VM *Structure;
  JSC::Structure *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;

  v11 = *(unint64_t **)a1;
  v10 = *(unint64_t **)(a1 + 8);
  Structure = (JSC::VM *)JSC::IntlDisplayNamesPrototype::createStructure(*(unint64_t **)a1, (JSC::VM *)v10, v10[82], a5, a6, a7, a8, a9, a2);
  v19 = JSC::IntlDisplayNamesPrototype::create((JSC::IntlDisplayNamesPrototype *)v11, Structure, v13, v14, v15, v16, v17, v18);
  v26 = JSC::IntlDisplayNames::createStructure(*(unint64_t **)a1, (JSC::VM *)v10, v19, v20, v21, v22, v23, v24, v25);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer::set(a1, v26);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_88>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  JSC::VM *Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t result;
  unint64_t v33;
  unint64_t *v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v36 = (unsigned int *)(v13 + 16);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 & 0xFFFFFFEF, v36));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = (JSC::VM *)JSC::IntlDurationFormatPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v25 = JSC::IntlDurationFormatPrototype::create((JSC::IntlDurationFormatPrototype *)v16, Structure, v19, v20, v21, v22, v23, v24);
  result = JSC::IntlDurationFormat::createStructure(*a1, (JSC::VM *)v17, v25, v26, v27, v28, v29, v30, v31);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC2D4);
  }
  v34 = *a1;
  v33 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC2F4);
  }
  if (v33 && *((_DWORD *)v34 + 190) >= *(unsigned __int8 *)(v33 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v34 + 24), v33);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC338);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC358);
  }
  v35 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v35;
  if (!v35 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v38 = v13 - 64;
      v39 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v38 + 2) = v39;
      *((_QWORD *)v38 + 4) = v39;
      if (v39)
      {
        v40 = (unsigned int *)(v13 + 16);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 | 0x10, v40));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v42 = (unsigned int *)(v12 + 10);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 | 2, v42));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_89>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  JSC::VM *Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t result;
  unint64_t v33;
  unint64_t *v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v36 = (unsigned int *)(v13 + 16);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 & 0xFFFFFFEF, v36));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = (JSC::VM *)JSC::IntlListFormatPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v25 = JSC::IntlListFormatPrototype::create((JSC::IntlListFormatPrototype *)v16, Structure, v19, v20, v21, v22, v23, v24);
  result = JSC::IntlListFormat::createStructure(*a1, (JSC::VM *)v17, v25, v26, v27, v28, v29, v30, v31);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC508);
  }
  v34 = *a1;
  v33 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC528);
  }
  if (v33 && *((_DWORD *)v34 + 190) >= *(unsigned __int8 *)(v33 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v34 + 24), v33);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC56CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC58CLL);
  }
  v35 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v35;
  if (!v35 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v38 = v13 - 64;
      v39 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v38 + 2) = v39;
      *((_QWORD *)v38 + 4) = v39;
      if (v39)
      {
        v40 = (unsigned int *)(v13 + 16);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 | 0x10, v40));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v42 = (unsigned int *)(v12 + 10);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 | 2, v42));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_90>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v19 = v12;
  v13 = *(_DWORD *)(v12 + 88);
  *(_DWORD *)(v12 + 88) = v13 + 1;
  if (!v13)
  {
    v14 = *(_QWORD *)(v12 + 16);
    if (v14)
    {
      if (*(_QWORD *)(v12 + 24) == v14)
      {
        *(_QWORD *)(v12 + 16) = 0;
        v17 = (unsigned int *)(v12 + 80);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 & 0xFFFFFFEF, v17));
        *(_BYTE *)(v12 + 86) = 1;
        v9 = (uint64_t *)a1[2];
        v10 = *v9;
      }
    }
  }
  *v9 = v10 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_90::operator()((uint64_t)a1, a9, a2, a3, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)a1[2];
  if ((v15 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC6E4);
  }
  if ((v15 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC704);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v19);
  return v15;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_90::operator()(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t *v10;
  unint64_t *v11;
  JSC::VM *Structure;
  JSC::Structure *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;

  v11 = *(unint64_t **)a1;
  v10 = *(unint64_t **)(a1 + 8);
  Structure = (JSC::VM *)JSC::IntlLocalePrototype::createStructure(*(unint64_t **)a1, (JSC::VM *)v10, v10[82], a5, a6, a7, a8, a9, a2);
  v19 = JSC::IntlLocalePrototype::create((JSC::IntlLocalePrototype *)v11, Structure, v13, v14, v15, v16, v17, v18);
  v26 = JSC::IntlLocale::createStructure(*(unint64_t **)a1, (JSC::VM *)v10, v19, v20, v21, v22, v23, v24, v25);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer::set(a1, v26);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_91>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t result;
  unint64_t v32;
  unint64_t *v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v39 = (unsigned int *)(v13 + 16);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 & 0xFFFFFFEF, v39));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = JSC::IntlPluralRulesPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v24 = JSC::IntlPluralRulesPrototype::create((JSC::IntlPluralRulesPrototype *)v16, (JSC::VM *)v17, Structure, v19, v20, v21, v22, v23);
  result = JSC::IntlPluralRules::createStructure(*a1, (JSC::VM *)v17, v24, v25, v26, v27, v28, v29, v30);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC8ECLL);
  }
  v33 = *a1;
  v32 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC90CLL);
  }
  if (v32 && *((_DWORD *)v33 + 190) >= *(unsigned __int8 *)(v32 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v33 + 24), v32);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC950);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EC970);
  }
  v34 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v34;
  if (!v34 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v35 = v13 - 64;
      v36 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v35 + 2) = v36;
      *((_QWORD *)v35 + 4) = v36;
      if (v36)
      {
        v37 = (unsigned int *)(v13 + 16);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 | 0x10, v37));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v41 = (unsigned int *)(v12 + 10);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 | 2, v41));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_92>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  JSC::VM *Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t result;
  unint64_t v33;
  unint64_t *v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v36 = (unsigned int *)(v13 + 16);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 & 0xFFFFFFEF, v36));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = (JSC::VM *)JSC::IntlRelativeTimeFormatPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v25 = JSC::IntlRelativeTimeFormatPrototype::create((JSC::IntlRelativeTimeFormatPrototype *)v16, Structure, v19, v20, v21, v22, v23, v24);
  result = JSC::IntlRelativeTimeFormat::createStructure(*a1, (JSC::VM *)v17, v25, v26, v27, v28, v29, v30, v31);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ECAC0);
  }
  v34 = *a1;
  v33 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ECAE0);
  }
  if (v33 && *((_DWORD *)v34 + 190) >= *(unsigned __int8 *)(v33 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v34 + 24), v33);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ECB24);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ECB44);
  }
  v35 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v35;
  if (!v35 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v38 = v13 - 64;
      v39 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v38 + 2) = v39;
      *((_QWORD *)v38 + 4) = v39;
      if (v39)
      {
        v40 = (unsigned int *)(v13 + 16);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 | 0x10, v40));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v42 = (unsigned int *)(v12 + 10);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 | 2, v42));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_93>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  JSC::VM *Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t result;
  unint64_t v33;
  unint64_t *v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v36 = (unsigned int *)(v13 + 16);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 & 0xFFFFFFEF, v36));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = (JSC::VM *)JSC::IntlSegmentIteratorPrototype::createStructure(v16, (JSC::VM *)v17, v17[87], a5, a6, a7, a8, a9, a2);
  v25 = JSC::IntlSegmentIteratorPrototype::create((JSC::IntlSegmentIteratorPrototype *)v16, Structure, v19, v20, v21, v22, v23, v24);
  result = JSC::IntlSegmentIterator::createStructure(*a1, (JSC::VM *)v17, v25, v26, v27, v28, v29, v30, v31);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ECCF4);
  }
  v34 = *a1;
  v33 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ECD14);
  }
  if (v33 && *((_DWORD *)v34 + 190) >= *(unsigned __int8 *)(v33 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v34 + 24), v33);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ECD58);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ECD78);
  }
  v35 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v35;
  if (!v35 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v38 = v13 - 64;
      v39 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v38 + 2) = v39;
      *((_QWORD *)v38 + 4) = v39;
      if (v39)
      {
        v40 = (unsigned int *)(v13 + 16);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 | 0x10, v40));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v42 = (unsigned int *)(v12 + 10);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 | 2, v42));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_94>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  JSC::VM *Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t result;
  unint64_t v33;
  unint64_t *v34;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v40 = (unsigned int *)(v13 + 16);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 & 0xFFFFFFEF, v40));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = (JSC::VM *)JSC::IntlSegmenterPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v25 = JSC::IntlSegmenterPrototype::create((JSC::IntlSegmenterPrototype *)v16, Structure, v19, v20, v21, v22, v23, v24);
  result = JSC::IntlSegmenter::createStructure(*a1, (JSC::VM *)v17, v25, v26, v27, v28, v29, v30, v31);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ECF84);
  }
  v34 = *a1;
  v33 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ECFA4);
  }
  if (v33 && *((_DWORD *)v34 + 190) >= *(unsigned __int8 *)(v33 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v34 + 24), v33);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ECFE8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED008);
  }
  v35 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v35;
  if (!v35 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v36 = v13 - 64;
      v37 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v36 + 2) = v37;
      *((_QWORD *)v36 + 4) = v37;
      if (v37)
      {
        v38 = (unsigned int *)(v13 + 16);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 | 0x10, v38));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v42 = (unsigned int *)(v12 + 10);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 | 2, v42));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_95>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t result;
  unint64_t v32;
  unint64_t *v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v39 = (unsigned int *)(v13 + 16);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 & 0xFFFFFFEF, v39));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = JSC::IntlSegmentsPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v24 = JSC::IntlSegmentsPrototype::create((JSC::IntlSegmentsPrototype *)v16, (JSC::VM *)v17, Structure, v19, v20, v21, v22, v23);
  result = JSC::IntlSegments::createStructure(*a1, (JSC::VM *)v17, v24, v25, v26, v27, v28, v29, v30);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED1B8);
  }
  v33 = *a1;
  v32 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED1D8);
  }
  if (v32 && *((_DWORD *)v33 + 190) >= *(unsigned __int8 *)(v32 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v33 + 24), v32);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED21CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED23CLL);
  }
  v34 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v34;
  if (!v34 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v35 = v13 - 64;
      v36 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v35 + 2) = v36;
      *((_QWORD *)v35 + 4) = v36;
      if (v36)
      {
        v37 = (unsigned int *)(v13 + 16);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 | 0x10, v37));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v41 = (unsigned int *)(v12 + 10);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 | 2, v41));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_96>(JSC::JSGlobalObject::init(JSC::VM &)::$_96 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  JSC::Structure *v30;
  JSC::VM *v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  JSC::JSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  unint64_t v51;
  uint64_t result;
  int v53;
  _BYTE *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unint64_t *v62;
  JSC::VM *v63;
  uint64_t *v64;
  unint64_t **v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v58 = (unsigned int *)(v13 + 16);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 & 0xFFFFFFEF, v58));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  v62 = v16;
  v63 = (JSC::VM *)v17;
  v64 = v9;
  v65 = a1;
  v67 = 0;
  v68 = 0;
  Structure = JSC::IntlDateTimeFormatPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v66 = JSC::IntlDateTimeFormatPrototype::create((JSC::IntlDateTimeFormatPrototype *)v16, (JSC::VM *)v17, Structure, v19, v20, v21, v22, v23);
  v30 = (JSC::Structure *)JSC::IntlDateTimeFormat::createStructure(v16, (JSC::VM *)v17, v66, v24, v25, v26, v27, v28, v29);
  JSC::LazyClassStructure::Initializer::setStructure(&v62, v30);
  v32 = v62;
  v31 = v63;
  v39 = JSC::IntlDateTimeFormatConstructor::createStructure(v62, v63, *((_QWORD *)v63 + 83), v33, v34, v35, v36, v37, v38);
  v40 = (JSC::JSObject *)v66;
  v46 = JSC::IntlDateTimeFormatConstructor::create((uint64_t)v32, v39, v66, v41, v42, v43, v44, v45);
  if (!v67)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED478);
  }
  if (!v40)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED498);
  }
  if (v68)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED4B8);
  }
  v51 = v46;
  v68 = v46;
  JSC::JSObject::putDirectWithoutTransition(v40, (uint64_t)v32, *(_QWORD *)(v32[5244] + 1080), v46, 4, v47, v48, v49, v50);
  v64[1] = v51;
  if (v51 && *((_DWORD *)v32 + 190) >= *((unsigned __int8 *)v31 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v32 + 24), (unint64_t)v31);
  result = *a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED4D8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED518);
  }
  v53 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v53;
  if (!v53 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v54 = v13 - 64;
      v55 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v54 + 2) = v55;
      *((_QWORD *)v54 + 4) = v55;
      if (v55)
      {
        v56 = (unsigned int *)(v13 + 16);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 | 0x10, v56));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v60 = (unsigned int *)(v12 + 10);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 | 2, v60));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_97>(JSC::JSGlobalObject::init(JSC::VM &)::$_97 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  JSC::VM *v18;
  unint64_t v19;
  unint64_t SlowCase;
  JSC::Structure *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::VM *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  unint64_t v45;
  JSC::VM *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::JSObject *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  unint64_t v61;
  uint64_t result;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  JSC::VM *v85;
  JSC::VM *v86;
  uint64_t *v87;
  uint64_t *v88;
  JSC::JSObject *v89;
  uint64_t v90;
  unint64_t v91;
  int v92;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v84 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v71 = (unsigned int *)(v13 + 16);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 & 0xFFFFFFEF, v71));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = (JSC::VM *)a1[1];
  v85 = (JSC::VM *)v16;
  v86 = v18;
  v87 = v9;
  v88 = a1;
  v90 = 0;
  v91 = 0;
  v89 = 0;
  v19 = *((_QWORD *)v18 + 82);
  v92 = 8215;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v68 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v68);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v68;
LABEL_10:
    *v17 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v75, v76, v77);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, (uint64_t)v18, v19, (uint64_t)&v92, (unint64_t)&JSC::IntlNumberFormatPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v26 = JSC::IntlNumberFormatPrototype::create((JSC::IntlNumberFormatPrototype *)v16, v18, SlowCase, v21, v22, v23, v24, v25);
  v35 = v26;
  v89 = (JSC::JSObject *)v26;
  v92 = 23;
  if ((v26 & 0xFFFE000000000002) == 0 && v26 && *(unsigned __int8 *)(v26 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v26, (JSC::VM *)v16, v34, v28, v29, v30, v31, v32, v33);
  v36 = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_18;
  v36 = *(_QWORD *)(v16 + 40152);
  if ((v36 & 1) == 0)
  {
    v69 = *(_QWORD *)(v36 + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = v36 + HIDWORD(v69);
    *(_QWORD *)(v16 + 40152) = v36 + (int)v69;
LABEL_18:
    *v17 = v36 + 128;
    goto LABEL_19;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v27, v28, v29, v30, v31, v32, v33);
  v36 = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v78, v79, v80);
LABEL_19:
  *(_DWORD *)v36 = 0;
  JSC::Structure::Structure(v36, v16, (uint64_t)v18, v35, (uint64_t)&v92, (unint64_t)&JSC::IntlNumberFormat::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v85, (JSC::Structure *)v36);
  v46 = v85;
  v45 = (unint64_t)v86;
  v47 = (unint64_t *)((char *)v85 + 40136);
  v48 = *((_QWORD *)v86 + 83);
  v92 = 75291;
  if ((v48 & 0xFFFE000000000002) == 0 && v48 && *(unsigned __int8 *)(v48 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v48, v85, v44, v38, v39, v40, v41, v42, v43);
  v49 = *v47;
  if (*v47 >= v47[1])
  {
    v49 = v47[2];
    if ((v49 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v46, v37, v38, v39, v40, v41, v42, v43);
      v49 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v46 + 40112, (uint64_t)v46 + 192, 128, 0, 0, v81, v82, v83);
      goto LABEL_27;
    }
    v70 = *(_QWORD *)(v49 + 8) ^ v47[3];
    v47[1] = v49 + HIDWORD(v70);
    v47[2] = v49 + (int)v70;
  }
  *v47 = v49 + 128;
LABEL_27:
  *(_DWORD *)v49 = 0;
  JSC::Structure::Structure(v49, (uint64_t)v46, v45, v48, (uint64_t)&v92, (unint64_t)&JSC::IntlNumberFormatConstructor::s_info, 0, 0);
  if (*((_BYTE *)v46 + 755))
    __dmb(0xAu);
  v55 = v89;
  v56 = JSC::IntlNumberFormatConstructor::create(v46, v49, (uint64_t)v89, v50, v51, v52, v53, v54);
  if (!v90)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED94CLL);
  }
  if (!v55)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED96CLL);
  }
  if (v91)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED98CLL);
  }
  v61 = v56;
  v91 = v56;
  JSC::JSObject::putDirectWithoutTransition(v55, (uint64_t)v46, *(_QWORD *)(v47[227] + 1080), v56, 4, v57, v58, v59, v60);
  v87[1] = v61;
  if (v61 && *((_DWORD *)v46 + 190) >= *(unsigned __int8 *)(v45 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v46 + 192, v45);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED9ACLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989ED9ECLL);
  }
  v63 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v63;
  if (!v63 && v84[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v64 = v84 - 64;
      v65 = *((_QWORD *)v84 - 5);
      *((_QWORD *)v64 + 2) = v65;
      *((_QWORD *)v64 + 4) = v65;
      if (v65)
      {
        v66 = (unsigned int *)(v84 + 16);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 | 0x10, v66));
      }
      if (v84[93379])
        v84[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v73 = (unsigned int *)(v12 + 80);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 | 2, v73));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::IntlCollator>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_98>(uint64_t *a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t (*v36)(_QWORD *);
  _QWORD *v37;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  _QWORD v43[3];

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v12 = (_BYTE *)(*a1 + 64);
  v13 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v13 + 1;
  if (!v13 && (v14 = *((_QWORD *)v12 - 6)) != 0)
  {
    v15 = v11;
    if (*((_QWORD *)v12 - 5) == v14)
    {
      *((_QWORD *)v12 - 6) = 0;
      v39 = (unsigned int *)(v12 + 16);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 & 0xFFFFFFEF, v39));
      *(_BYTE *)(v11 + 86) = 1;
      v8 = (uint64_t *)a1[2];
      v9 = *v8;
      v15 = *a1;
    }
  }
  else
  {
    v15 = v11;
  }
  *v8 = v9 | 2;
  v16 = a1[1];
  v17 = *(_QWORD *)(v16 + 304);
  if ((v17 & 1) != 0)
  {
    v36 = *(uint64_t (**)(_QWORD *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v37 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v16 & 8) != 0)
      v37 = (_QWORD *)(v16 - 16);
    v43[0] = *v37;
    v43[1] = v16;
    v43[2] = v16 + 304;
    v17 = v36(v43);
  }
  v18 = JSC::IntlCollator::create((JSC::Heap **)v15, (JSC::VM *)v17, a3, a4, a5, a6, a7, a8);
  JSC::IntlCollator::initializeCollator(v18, (JSC::JSGlobalObject *)v16, 0xAuLL, (JSC::Symbol *)0xA, v19, v20, v21, v22, v23);
  if (!*(_DWORD *)(v15 + 80))
    goto LABEL_7;
  v38 = *(_DWORD *)(v15 + 80);
  if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, v24, v25, v26, v27, v28, v29);
  if (!*(_QWORD *)(v15 + 16))
LABEL_7:
    JSC::LazyProperty<JSC::JSGlobalObject,JSC::IntlCollator>::set((_QWORD *)a1[2], *a1, (JSC::JSCell *)a1[1], v18);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EDC78);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EDC98);
  }
  v31 = *(_DWORD *)(v11 + 88) - 1;
  *(_DWORD *)(v11 + 88) = v31;
  if (!v31 && v12[93377])
  {
    if (*(_BYTE *)(v11 + 86))
    {
      v32 = v12 - 64;
      v33 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v32 + 2) = v33;
      *((_QWORD *)v32 + 4) = v33;
      if (v33)
      {
        v34 = (unsigned int *)(v12 + 16);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 | 0x10, v34));
      }
      if (v12[93379])
        v12[93378] = 1;
      *(_BYTE *)(v11 + 86) = 0;
    }
    else
    {
      v41 = (unsigned int *)(v11 + 80);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 | 2, v41));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::IntlCollator>::set(_QWORD *a1, uint64_t a2, JSC::JSCell *a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
    return (uint64_t)JSC::LazyProperty<JSC::JSGlobalObject,JSC::IntlCollator>::setMayBeNull(a1, a2, a3, a4);
  result = 66;
  __break(0xC471u);
  return result;
}

_QWORD *JSC::LazyProperty<JSC::JSGlobalObject,JSC::IntlCollator>::setMayBeNull(_QWORD *result, uint64_t a2, JSC::JSCell *a3, uint64_t a4)
{
  *result = a4;
  if ((a4 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EDD60);
  }
  if (a3)
  {
    if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a3 + 7))
      return (_QWORD *)JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a3);
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::IntlNumberFormat>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_99>(_QWORD *a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t result;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t (*v38)(_QWORD *);
  _QWORD *v39;
  int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  _QWORD v45[3];

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v12 = (_BYTE *)(*a1 + 64);
  v13 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v13 + 1;
  if (!v13 && (v14 = *((_QWORD *)v12 - 6)) != 0)
  {
    v15 = v11;
    if (*((_QWORD *)v12 - 5) == v14)
    {
      *((_QWORD *)v12 - 6) = 0;
      v41 = (unsigned int *)(v12 + 16);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 & 0xFFFFFFEF, v41));
      *(_BYTE *)(v11 + 86) = 1;
      v8 = (uint64_t *)a1[2];
      v9 = *v8;
      v15 = *a1;
    }
  }
  else
  {
    v15 = v11;
  }
  *v8 = v9 | 2;
  v16 = a1[1];
  v17 = *(_QWORD *)(v16 + 400);
  if ((v17 & 1) != 0)
  {
    v38 = *(uint64_t (**)(_QWORD *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v39 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v16 & 8) != 0)
      v39 = (_QWORD *)(v16 - 16);
    v45[0] = *v39;
    v45[1] = v16;
    v45[2] = v16 + 400;
    v17 = v38(v45);
  }
  v18 = JSC::IntlNumberFormat::create((JSC::IntlNumberFormat *)v15, (JSC::VM *)v17, a3, a4, a5, a6, a7, a8);
  JSC::IntlNumberFormat::initializeNumberFormat(v18, (JSC::JSGlobalObject *)v16, 0xAuLL, (JSC::Symbol *)0xA, v19, v20, v21, v22, v23);
  if (!*(_DWORD *)(v15 + 80))
    goto LABEL_7;
  v40 = *(_DWORD *)(v15 + 80);
  if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, v24, v25, v26, v27, v28, v29);
  if (!*(_QWORD *)(v15 + 16))
  {
LABEL_7:
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1989EDF34);
    }
    v31 = *a1;
    v30 = a1[1];
    *(_QWORD *)a1[2] = v18;
    if ((v18 & 1) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1989EDF54);
    }
    if (v30 && *(_DWORD *)(v31 + 760) >= *(unsigned __int8 *)(v30 + 7))
      JSC::Heap::writeBarrierSlowPath(v31 + 192, v30);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EDF74);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EDFB0);
  }
  v33 = *(_DWORD *)(v11 + 88) - 1;
  *(_DWORD *)(v11 + 88) = v33;
  if (!v33 && v12[93377])
  {
    if (*(_BYTE *)(v11 + 86))
    {
      v34 = v12 - 64;
      v35 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v34 + 2) = v35;
      *((_QWORD *)v34 + 4) = v35;
      if (v35)
      {
        v36 = (unsigned int *)(v12 + 16);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 | 0x10, v36));
      }
      if (v12[93379])
        v12[93378] = 1;
      *(_BYTE *)(v11 + 86) = 0;
    }
    else
    {
      v43 = (unsigned int *)(v11 + 80);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 | 2, v43));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_100>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t result;
  unint64_t v32;
  unint64_t *v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v39 = (unsigned int *)(v13 + 16);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 & 0xFFFFFFEF, v39));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = JSC::TemporalCalendarPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v24 = JSC::TemporalCalendarPrototype::create((JSC::TemporalCalendarPrototype *)v16, (JSC::VM *)v17, Structure, v19, v20, v21, v22, v23);
  result = JSC::TemporalCalendar::createStructure(*a1, (JSC::VM *)v17, v24, v25, v26, v27, v28, v29, v30);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE174);
  }
  v33 = *a1;
  v32 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE194);
  }
  if (v32 && *((_DWORD *)v33 + 190) >= *(unsigned __int8 *)(v32 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v33 + 24), v32);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE1D8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE1F8);
  }
  v34 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v34;
  if (!v34 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v35 = v13 - 64;
      v36 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v35 + 2) = v36;
      *((_QWORD *)v35 + 4) = v36;
      if (v36)
      {
        v37 = (unsigned int *)(v13 + 16);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 | 0x10, v37));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v41 = (unsigned int *)(v12 + 10);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 | 2, v41));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_101>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  JSC::VM *Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t result;
  unint64_t v33;
  unint64_t *v34;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v40 = (unsigned int *)(v13 + 16);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 & 0xFFFFFFEF, v40));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = (JSC::VM *)JSC::TemporalDurationPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v25 = JSC::TemporalDurationPrototype::create((JSC::TemporalDurationPrototype *)v16, Structure, v19, v20, v21, v22, v23, v24);
  result = JSC::TemporalDuration::createStructure(*a1, (JSC::VM *)v17, v25, v26, v27, v28, v29, v30, v31);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE3A4);
  }
  v34 = *a1;
  v33 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE3C4);
  }
  if (v33 && *((_DWORD *)v34 + 190) >= *(unsigned __int8 *)(v33 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v34 + 24), v33);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE408);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE428);
  }
  v35 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v35;
  if (!v35 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v36 = v13 - 64;
      v37 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v36 + 2) = v37;
      *((_QWORD *)v36 + 4) = v37;
      if (v37)
      {
        v38 = (unsigned int *)(v13 + 16);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 | 0x10, v38));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v42 = (unsigned int *)(v12 + 10);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 | 2, v42));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_102>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  JSC::VM *Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t result;
  unint64_t v33;
  unint64_t *v34;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v40 = (unsigned int *)(v13 + 16);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 & 0xFFFFFFEF, v40));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = (JSC::VM *)JSC::TemporalInstantPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v25 = JSC::TemporalInstantPrototype::create((JSC::TemporalInstantPrototype *)v16, Structure, v19, v20, v21, v22, v23, v24);
  result = JSC::TemporalInstant::createStructure(*a1, (JSC::VM *)v17, v25, v26, v27, v28, v29, v30, v31);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE5D4);
  }
  v34 = *a1;
  v33 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE5F4);
  }
  if (v33 && *((_DWORD *)v34 + 190) >= *(unsigned __int8 *)(v33 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v34 + 24), v33);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE638);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE658);
  }
  v35 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v35;
  if (!v35 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v36 = v13 - 64;
      v37 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v36 + 2) = v37;
      *((_QWORD *)v36 + 4) = v37;
      if (v37)
      {
        v38 = (unsigned int *)(v13 + 16);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 | 0x10, v38));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v42 = (unsigned int *)(v12 + 10);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 | 2, v42));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_103>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t result;
  unint64_t v32;
  unint64_t *v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v39 = (unsigned int *)(v13 + 16);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 & 0xFFFFFFEF, v39));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = JSC::TemporalPlainDatePrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v24 = JSC::TemporalPlainDatePrototype::create((JSC::TemporalPlainDatePrototype *)v16, (JSC::VM *)v17, Structure, v19, v20, v21, v22, v23);
  result = JSC::TemporalPlainDate::createStructure(*a1, (JSC::VM *)v17, v24, v25, v26, v27, v28, v29, v30);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE808);
  }
  v33 = *a1;
  v32 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE828);
  }
  if (v32 && *((_DWORD *)v33 + 190) >= *(unsigned __int8 *)(v32 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v33 + 24), v32);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE86CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EE88CLL);
  }
  v34 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v34;
  if (!v34 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v35 = v13 - 64;
      v36 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v35 + 2) = v36;
      *((_QWORD *)v35 + 4) = v36;
      if (v36)
      {
        v37 = (unsigned int *)(v13 + 16);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 | 0x10, v37));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v41 = (unsigned int *)(v12 + 10);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 | 2, v41));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_104>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t result;
  unint64_t v32;
  unint64_t *v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v39 = (unsigned int *)(v13 + 16);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 & 0xFFFFFFEF, v39));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = JSC::TemporalPlainDateTimePrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v24 = JSC::TemporalPlainDateTimePrototype::create((JSC::TemporalPlainDateTimePrototype *)v16, (JSC::VM *)v17, Structure, v19, v20, v21, v22, v23);
  result = JSC::TemporalPlainDateTime::createStructure(*a1, (JSC::VM *)v17, v24, v25, v26, v27, v28, v29, v30);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EEA3CLL);
  }
  v33 = *a1;
  v32 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EEA5CLL);
  }
  if (v32 && *((_DWORD *)v33 + 190) >= *(unsigned __int8 *)(v32 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v33 + 24), v32);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EEAA0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EEAC0);
  }
  v34 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v34;
  if (!v34 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v35 = v13 - 64;
      v36 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v35 + 2) = v36;
      *((_QWORD *)v35 + 4) = v36;
      if (v36)
      {
        v37 = (unsigned int *)(v13 + 16);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 | 0x10, v37));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v41 = (unsigned int *)(v12 + 10);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 | 2, v41));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_105>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t result;
  unint64_t v32;
  unint64_t *v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v39 = (unsigned int *)(v13 + 16);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 & 0xFFFFFFEF, v39));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = JSC::TemporalPlainTimePrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v24 = JSC::TemporalPlainTimePrototype::create((JSC::TemporalPlainTimePrototype *)v16, (JSC::VM *)v17, Structure, v19, v20, v21, v22, v23);
  result = JSC::TemporalPlainTime::createStructure(*a1, (JSC::VM *)v17, v24, v25, v26, v27, v28, v29, v30);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EEC70);
  }
  v33 = *a1;
  v32 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EEC90);
  }
  if (v32 && *((_DWORD *)v33 + 190) >= *(unsigned __int8 *)(v32 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v33 + 24), v32);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EECD4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EECF4);
  }
  v34 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v34;
  if (!v34 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v35 = v13 - 64;
      v36 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v35 + 2) = v36;
      *((_QWORD *)v35 + 4) = v36;
      if (v36)
      {
        v37 = (unsigned int *)(v13 + 16);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 | 0x10, v37));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v41 = (unsigned int *)(v12 + 10);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 | 2, v41));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_106>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t result;
  unint64_t v32;
  unint64_t *v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v39 = (unsigned int *)(v13 + 16);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 & 0xFFFFFFEF, v39));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  Structure = JSC::TemporalTimeZonePrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v24 = JSC::TemporalTimeZonePrototype::create((JSC::TemporalTimeZonePrototype *)v16, (JSC::VM *)v17, Structure, v19, v20, v21, v22, v23);
  result = JSC::TemporalTimeZone::createStructure(*a1, (JSC::VM *)v17, v24, v25, v26, v27, v28, v29, v30);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EEEA4);
  }
  v33 = *a1;
  v32 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EEEC4);
  }
  if (v32 && *((_DWORD *)v33 + 190) >= *(unsigned __int8 *)(v32 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v33 + 24), v32);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EEF08);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EEF28);
  }
  v34 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v34;
  if (!v34 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v35 = v13 - 64;
      v36 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v35 + 2) = v36;
      *((_QWORD *)v35 + 4) = v36;
      if (v36)
      {
        v37 = (unsigned int *)(v13 + 16);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 | 0x10, v37));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v41 = (unsigned int *)(v12 + 10);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 | 2, v41));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSModuleLoader>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_107>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t result;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v12 = (_BYTE *)(*a1 + 64);
  v13 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v13 + 1;
  if (!v13 && (v14 = *((_QWORD *)v12 - 6)) != 0)
  {
    v15 = v11;
    if (*((_QWORD *)v12 - 5) == v14)
    {
      *((_QWORD *)v12 - 6) = 0;
      v38 = (unsigned int *)(v12 + 16);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 & 0xFFFFFFEF, v38));
      *(_BYTE *)(v11 + 86) = 1;
      v8 = (uint64_t *)a1[2];
      v9 = *v8;
      v15 = *a1;
    }
  }
  else
  {
    v15 = v11;
  }
  v16 = (unint64_t *)(v15 + 38904);
  *v8 = v9 | 2;
  v17 = a1[1];
  v48 = 23;
  SlowCase = *(_QWORD *)(v15 + 40136);
  if (SlowCase < *(_QWORD *)(v15 + 40144))
    goto LABEL_6;
  SlowCase = *(_QWORD *)(v15 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v36 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v15 + 40160);
    *(_QWORD *)(v15 + 40144) = SlowCase + HIDWORD(v36);
    *(_QWORD *)(v15 + 40152) = SlowCase + (int)v36;
LABEL_6:
    *(_QWORD *)(v15 + 40136) = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)v15, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v15 + 40112, v15 + 192, 128, 0, 0, v42, v43, v44);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v15, v17, 2, (uint64_t)&v48, (unint64_t)&JSC::JSModuleLoader::s_info, 0, 0);
  if (*(_BYTE *)(v15 + 755))
    __dmb(0xAu);
  v26 = *v16;
  if (*v16 >= *(_QWORD *)(v15 + 38912))
  {
    v26 = *(_QWORD *)(v15 + 38920);
    if ((v26 & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v15, v19, v20, v21, v22, v23, v24, v25);
      v26 = JSC::LocalAllocator::allocateSlowCase(v15 + 38880, v15 + 192, 16, 0, 0, v45, v46, v47);
      goto LABEL_11;
    }
    v37 = *(_QWORD *)(v26 + 8) ^ *(_QWORD *)(v15 + 38928);
    *(_QWORD *)(v15 + 38912) = v26 + HIDWORD(v37);
    *(_QWORD *)(v15 + 38920) = v26 + (int)v37;
  }
  *v16 = v26 + 16;
LABEL_11:
  *(_DWORD *)v26 = 0;
  v27 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v26 = SlowCase >> 4;
  *(_DWORD *)(v26 + 4) = v27;
  *(_QWORD *)(v26 + 8) = 0;
  JSC::JSModuleLoader::finishCreation((JSC::JSModuleLoader *)v26, v17, (JSC::VM *)v15, v21, v22, v23, v24, v25);
  v29 = *a1;
  v28 = a1[1];
  *(_QWORD *)a1[2] = v26;
  if ((v26 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EF1DCLL);
  }
  if (v28 && *(_DWORD *)(v29 + 760) >= *(unsigned __int8 *)(v28 + 7))
    JSC::Heap::writeBarrierSlowPath(v29 + 192, v28);
  if (*(_QWORD *)(v15 + 16))
  {
    __break(0xC471u);
    JUMPOUT(0x1989EF1FCLL);
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EF238);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EF258);
  }
  v31 = *(_DWORD *)(v11 + 88) - 1;
  *(_DWORD *)(v11 + 88) = v31;
  if (!v31 && v12[93377])
  {
    if (*(_BYTE *)(v11 + 86))
    {
      v32 = v12 - 64;
      v33 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v32 + 2) = v33;
      *((_QWORD *)v32 + 4) = v33;
      if (v33)
      {
        v34 = (unsigned int *)(v12 + 16);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 | 0x10, v34));
      }
      if (v12[93379])
        v12[93378] = 1;
      *(_BYTE *)(v11 + 86) = 0;
    }
    else
    {
      v40 = (unsigned int *)(v11 + 80);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 | 2, v40));
    }
  }
  return result;
}

unint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSInternalPromise>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_108>(_QWORD *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  int v17;
  unint64_t v18;
  unint64_t result;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  _QWORD *v45;

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v10 = a1;
  v11 = *a1;
  v12 = (_BYTE *)(*a1 + 64);
  v13 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v13 + 1;
  if (!v13 && (v14 = *((_QWORD *)v12 - 6)) != 0)
  {
    v15 = v11;
    if (*((_QWORD *)v12 - 5) == v14)
    {
      *((_QWORD *)v12 - 6) = 0;
      v30 = (unsigned int *)(v12 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v11 + 86) = 1;
      v8 = (uint64_t *)a1[2];
      v9 = *v8;
      v15 = *a1;
    }
  }
  else
  {
    v15 = v11;
  }
  v16 = (unint64_t *)(v15 + 38992);
  *v8 = v9 | 2;
  v17 = *(_DWORD *)(a1[1] + 1184);
  if (v17)
    v18 = 16 * (v17 & 0xFFFFFFFE);
  else
    v18 = 0;
  result = *v16;
  if (*v16 >= *(_QWORD *)(v15 + 39000))
  {
    result = *(_QWORD *)(v15 + 39008);
    if ((result & 1) != 0)
    {
      v43 = v12;
      v44 = v11;
      v34 = v15 + 38968;
      v35 = v15 + 192;
      v45 = v10;
      v41 = v18;
      v42 = v15;
      JSC::sanitizeStackForVM((JSC *)v15, a2, a3, a4, a5, a6, a7, a8);
      v36 = v34;
      v37 = v35;
      v12 = v43;
      v11 = v44;
      result = JSC::LocalAllocator::allocateSlowCase(v36, v37, 32, 0, 0, v38, v39, v40);
      v18 = v41;
      v15 = v42;
      v10 = v45;
      goto LABEL_10;
    }
    v28 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v15 + 39016);
    *(_QWORD *)(v15 + 39000) = result + HIDWORD(v28);
    *(_QWORD *)(v15 + 39008) = result + (int)v28;
  }
  *v16 = result + 32;
LABEL_10:
  *(_DWORD *)result = 0;
  v20 = *(_DWORD *)(v18 + 8);
  *(_DWORD *)result = v18 >> 4;
  *(_DWORD *)(result + 4) = v20;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  if (*(_BYTE *)(v15 + 755))
    __dmb(0xAu);
  *(_OWORD *)(result + 16) = xmmword_19914EFB0;
  v22 = *v10;
  v21 = v10[1];
  *(_QWORD *)v10[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EF4E0);
  }
  if (v21 && *(_DWORD *)(v22 + 760) >= *(unsigned __int8 *)(v21 + 7))
  {
    v29 = v10;
    JSC::Heap::writeBarrierSlowPath(v22 + 192, v21);
    result = *(_QWORD *)v29[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EF500);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EF548);
  }
  v23 = *(_DWORD *)(v11 + 88) - 1;
  *(_DWORD *)(v11 + 88) = v23;
  if (!v23 && v12[93377])
  {
    if (*(_BYTE *)(v11 + 86))
    {
      v24 = v12 - 64;
      v25 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v24 + 2) = v25;
      *((_QWORD *)v24 + 4) = v25;
      if (v25)
      {
        v26 = (unsigned int *)(v12 + 16);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 | 0x10, v26));
      }
      if (v12[93379])
        v12[93378] = 1;
      *(_BYTE *)(v11 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v11 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_109>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeAsyncFromSyncIteratorConstructorCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199124DB0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0xAA00000000), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EF7A8);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EF7C8);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EF80CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EF82CLL);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_110>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::regExpPrototypeRegExpStringIteratorConstructorCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199124DE0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x67A000004E5), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EFA44);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EFA64);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EFAA8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EFAC8);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_111>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::regExpPrototypeAdvanceStringIndexCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199124DF0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x7D90000067ALL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EFCE0);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EFD00);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EFD44);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EFD64);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_112>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t HelperCodeExecutable;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  HelperCodeExecutable = JSC::BuiltinExecutables::arrayIteratorPrototypeArrayIteratorNextHelperCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199124E50;
  v20 = JSC::UnlinkedFunctionExecutable::link(HelperCodeExecutable, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1C24000019C3), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EFF7CLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EFF9CLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989EFFE0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0000);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_113>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeAsyncFromSyncIteratorOnFulfilledContinueCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199124E60;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1CB700001C24), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F01BCLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F01DCLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0220);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0240);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_114>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t done;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  done = JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeAsyncFromSyncIteratorOnFulfilledDoneCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199124E70;
  v20 = JSC::UnlinkedFunctionExecutable::link(done, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1D4900001CB7), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F045CLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F047CLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F04C0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F04E0);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_115>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::asyncFromSyncIteratorPrototypeAsyncFromSyncIteratorOnRejectedCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199124E80;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1DC100001D49), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0704);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0724);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0768);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0788);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_116>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::asyncFunctionPrototypeAsyncFunctionResumeCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199124E90;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x218900001DC1), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F09A4);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F09C4);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0A08);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0A28);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_117>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::asyncFunctionPrototypeAsyncFunctionResumeOnFulfilledCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199124EA0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x220400002189), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0C98);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0CB8);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0CFCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0D1CLL);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_118>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::asyncFunctionPrototypeAsyncFunctionResumeOnRejectedCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199124EB0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x227E00002204), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0F34);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0F54);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0F98);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F0FB8);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_119>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v25 = (unsigned int *)(v6 + 16);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 & 0xFFFFFFEF, v25));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  v11 = JSC::asyncGeneratorPrototypeAsyncGeneratorEnqueueCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, v11, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1150);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1170);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F11B4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F11D4);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v21 = v6 - 64;
      v22 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v21 + 2) = v22;
      *((_QWORD *)v21 + 4) = v22;
      if (v22)
      {
        v23 = (unsigned int *)(v6 + 16);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 | 0x10, v23));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_120>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v21 = (unsigned int *)(v6 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 & 0xFFFFFFEF, v21));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  v11 = JSC::asyncGeneratorPrototypeAsyncGeneratorQueueDequeueCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, v11, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1318);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1338);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F137CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F139CLL);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v23 = v6 - 64;
      v24 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v6 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_121>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v21 = (unsigned int *)(v6 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 & 0xFFFFFFEF, v21));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  v11 = JSC::asyncGeneratorPrototypeAsyncGeneratorQueueEnqueueCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, v11, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1538);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1558);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F159CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F15BCLL);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v23 = v6 - 64;
      v24 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v6 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_122>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t IsEmptyCodeGenerator;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v21 = (unsigned int *)(v6 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 & 0xFFFFFFEF, v21));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  IsEmptyCodeGenerator = JSC::asyncGeneratorPrototypeAsyncGeneratorQueueIsEmptyCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, IsEmptyCodeGenerator, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1758);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1778);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F17BCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F17DCLL);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v23 = v6 - 64;
      v24 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v6 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_123>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_123::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1934);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1954);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_123::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::asyncGeneratorPrototypeAsyncGeneratorRejectCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_124>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_124::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1A78);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1A98);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_124::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::asyncGeneratorPrototypeAsyncGeneratorResolveCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_125>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_125::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1BBCLL);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1BDCLL);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_125::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t CodeGenerator;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  CodeGenerator = JSC::asyncGeneratorPrototypeAsyncGeneratorResumeNextCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, CodeGenerator, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_126>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_126::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1D00);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1D20);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_126::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::asyncGeneratorPrototypeAsyncGeneratorResumeNextOnFulfilledCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_127>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_127::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1E44);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1E64);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_127::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::asyncGeneratorPrototypeAsyncGeneratorResumeNextOnRejectedCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_128>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_128::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1F88);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F1FA8);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_128::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::asyncGeneratorPrototypeAsyncGeneratorYieldCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_129>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_129::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F20CCLL);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F20ECLL);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_129::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::asyncGeneratorPrototypeAsyncGeneratorYieldAwaitedCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_130>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_130::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2210);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2230);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_130::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::asyncGeneratorPrototypeAsyncGeneratorYieldOnRejectedCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_131>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_131::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2354);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2374);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_131::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::asyncGeneratorPrototypeAwaitValueCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_132>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_132::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2498);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F24B8);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_132::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::iteratorHelpersBuiltinMapIterableCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_133>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_133::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F25DCLL);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F25FCLL);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_133::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::iteratorHelpersBuiltinSetIterableCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_134>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_134::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2720);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2740);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_134::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::moduleLoaderCacheSatisfyCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_135>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_135::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2864);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2884);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_135::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::moduleLoaderCacheSatisfyAndReturnCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_136>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::arrayPrototypeConcatSlowPathCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199124FC0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x4A0D00004546), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2AC0);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2AE0);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2B24);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2B44);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_137>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t ArrayWithoutPrototypeCodeExecutable;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  ArrayWithoutPrototypeCodeExecutable = JSC::BuiltinExecutables::injectedScriptSourceCreateArrayWithoutPrototypeCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199124FE0;
  v20 = JSC::UnlinkedFunctionExecutable::link(ArrayWithoutPrototypeCodeExecutable, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x4F6D00004EBFLL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2D5CLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2D7CLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2DC0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2DE0);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_138>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t AsyncFromSyncIteratorCodeGenerator;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v21 = (unsigned int *)(v6 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 & 0xFFFFFFEF, v21));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  AsyncFromSyncIteratorCodeGenerator = JSC::asyncFromSyncIteratorPrototypeCreateAsyncFromSyncIteratorCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, AsyncFromSyncIteratorCodeGenerator, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2F24);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2F44);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2F88);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F2FA8);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v23 = v6 - 64;
      v24 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v6 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_139>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t HTMLCodeExecutable;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  HTMLCodeExecutable = JSC::BuiltinExecutables::stringPrototypeCreateHTMLCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199124FF0;
  v20 = JSC::UnlinkedFunctionExecutable::link(HTMLCodeExecutable, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x52150000504BLL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F31C4);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F31E4);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3228);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3248);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_140>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t InspectorInjectedScriptCodeExecutable;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  InspectorInjectedScriptCodeExecutable = JSC::BuiltinExecutables::injectedScriptSourceCreateInspectorInjectedScriptCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125000;
  v20 = JSC::UnlinkedFunctionExecutable::link(InspectorInjectedScriptCodeExecutable, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0xFE2000005215), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3464);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3484);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F34C8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F34E8);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_141>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t ObjectWithoutPrototypeCodeExecutable;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  ObjectWithoutPrototypeCodeExecutable = JSC::BuiltinExecutables::injectedScriptSourceCreateObjectWithoutPrototypeCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125010;
  v20 = JSC::UnlinkedFunctionExecutable::link(ObjectWithoutPrototypeCodeExecutable, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0xFF710000FE20), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3758);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3778);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F37BCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F37DCLL);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_142>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_142::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F38DCLL);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F38FCLL);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_142::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t ResolvingFunctionsCodeGenerator;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  ResolvingFunctionsCodeGenerator = JSC::promiseOperationsCreateResolvingFunctionsCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, ResolvingFunctionsCodeGenerator, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_143>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t ResolvingFunctionsWithoutPromiseCodeExecutable;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  ResolvingFunctionsWithoutPromiseCodeExecutable = JSC::BuiltinExecutables::promiseOperationsCreateResolvingFunctionsWithoutPromiseCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125030;
  v20 = JSC::UnlinkedFunctionExecutable::link(ResolvingFunctionsWithoutPromiseCodeExecutable, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x102DE00010111), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3B38);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3B58);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3B9CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3BBCLL);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_144>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::shadowRealmPrototypeCrossRealmThrowCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125040;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x10326000102DELL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3DD4);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3DF4);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3E38);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F3E58);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_145>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::arrayConstructorDefaultAsyncFromAsyncArrayLikeCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125050;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x105A500010326), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F4070);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F4090);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F40D4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F40F4);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_146>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::arrayConstructorDefaultAsyncFromAsyncIteratorCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125060;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x107C5000105A5), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F42B8);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F42D8);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F431CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F433CLL);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_147>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v21 = (unsigned int *)(v6 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 & 0xFFFFFFEF, v21));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  v11 = JSC::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, v11, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F44D8);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F44F8);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F453CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F455CLL);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v23 = v6 - 64;
      v24 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v6 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_148>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v25 = (unsigned int *)(v6 + 16);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 & 0xFFFFFFEF, v25));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  v11 = JSC::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallOnFulfilledNormalCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, v11, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F474CLL);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F476CLL);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F47B0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F47D0);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v21 = v6 - 64;
      v22 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v21 + 2) = v22;
      *((_QWORD *)v21 + 4) = v22;
      if (v22)
      {
        v23 = (unsigned int *)(v6 + 16);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 | 0x10, v23));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_149>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v25 = (unsigned int *)(v6 + 16);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 & 0xFFFFFFEF, v25));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  v11 = JSC::asyncGeneratorPrototypeDoAsyncGeneratorBodyCallOnFulfilledReturnCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, v11, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F4968);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F4988);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F49CCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F49ECLL);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v21 = v6 - 64;
      v22 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v21 + 2) = v22;
      *((_QWORD *)v21 + 4) = v22;
      if (v22)
      {
        v23 = (unsigned int *)(v6 + 16);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 | 0x10, v23));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_150>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::arrayPrototypeFlatIntoArrayCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991251B0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x137720001355CLL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F4C04);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F4C24);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F4C68);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F4C88);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_151>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_151::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F4D88);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F4DA8);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_151::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::arrayPrototypeFlatIntoArrayWithCallbackCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_152>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_152::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F4ECCLL);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F4EECLL);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_152::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::moduleLoaderForceFulfillPromiseCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_153>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_153::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5010);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5030);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_153::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t CodeGenerator;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  CodeGenerator = JSC::moduleLoaderFulfillFetchCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, CodeGenerator, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_154>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsFulfillPromiseCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991252A0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x15B800001594BLL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5218);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5238);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F527CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F529CLL);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_155>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsFulfillPromiseWithFirstResolvingFunctionCallCheckCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991252B0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x15CE400015B80), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F54B8);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F54D8);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F551CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F553CLL);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_156>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsFulfillWithoutPromiseCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991252C0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x15D7800015CE4), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F57ACLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F57CCLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5810);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5830);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_157>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v25 = (unsigned int *)(v6 + 16);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 & 0xFFFFFFEF, v25));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  v11 = JSC::generatorPrototypeGeneratorResumeCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, v11, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F59C8);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F59E8);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5A2CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5A4CLL);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v21 = v6 - 64;
      v22 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v21 + 2) = v22;
      *((_QWORD *)v21 + 4) = v22;
      if (v22)
      {
        v23 = (unsigned int *)(v6 + 16);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 | 0x10, v23));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_158>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t SetSizeAsIntCodeExecutable;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  SetSizeAsIntCodeExecutable = JSC::BuiltinExecutables::setPrototypeGetSetSizeAsIntCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991252D0;
  v20 = JSC::UnlinkedFunctionExecutable::link(SetSizeAsIntCodeExecutable, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x16355000161A6), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5C10);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5C30);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5C74);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5C94);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_159>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t SubstitutionCodeExecutable;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  SubstitutionCodeExecutable = JSC::BuiltinExecutables::regExpPrototypeGetSubstitutionCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991252E0;
  v20 = JSC::UnlinkedFunctionExecutable::link(SubstitutionCodeExecutable, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x16BDB00016355), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5EB0);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5ED0);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5F14);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F5F34);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_160>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t HasObservableSideEffectsForRegExpMatchCodeExecutable;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  HasObservableSideEffectsForRegExpMatchCodeExecutable = JSC::BuiltinExecutables::regExpPrototypeHasObservableSideEffectsForRegExpMatchCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125310;
  v20 = JSC::UnlinkedFunctionExecutable::link(HasObservableSideEffectsForRegExpMatchCodeExecutable, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1758A00017348), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6150);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6170);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F61B4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F61D4);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_161>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_161::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F632CLL);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F634CLL);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_161::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t HasObservableSideEffectsForRegExpSplitCodeGenerator;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  HasObservableSideEffectsForRegExpSplitCodeGenerator = JSC::regExpPrototypeHasObservableSideEffectsForRegExpSplitCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, HasObservableSideEffectsForRegExpSplitCodeGenerator, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_162>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t HasObservableSideEffectsForStringReplaceCodeExecutable;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  HasObservableSideEffectsForStringReplaceCodeExecutable = JSC::BuiltinExecutables::stringPrototypeHasObservableSideEffectsForStringReplaceCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125330;
  v20 = JSC::UnlinkedFunctionExecutable::link(HasObservableSideEffectsForStringReplaceCodeExecutable, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x17E0C00017B83), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6534);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6554);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6598);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F65B8);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_163>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t IsExecutionStateCodeGenerator;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v25 = (unsigned int *)(v6 + 16);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 & 0xFFFFFFEF, v25));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  IsExecutionStateCodeGenerator = JSC::asyncGeneratorPrototypeIsExecutionStateCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, IsExecutionStateCodeGenerator, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F67A8);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F67C8);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F680CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F682CLL);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v21 = v6 - 64;
      v22 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v21 + 2) = v22;
      *((_QWORD *)v21 + 4) = v22;
      if (v22)
      {
        v23 = (unsigned int *)(v6 + 16);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 | 0x10, v23));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_164>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t IsFiniteCodeExecutable;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  IsFiniteCodeExecutable = JSC::BuiltinExecutables::globalObjectIsFiniteCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991253B0;
  v20 = JSC::UnlinkedFunctionExecutable::link(IsFiniteCodeExecutable, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x192350001917DLL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F69F0);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6A10);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6A54);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6A74);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_165>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t IsSuspendYieldStateCodeGenerator;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v21 = (unsigned int *)(v6 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 & 0xFFFFFFEF, v21));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  IsSuspendYieldStateCodeGenerator = JSC::asyncGeneratorPrototypeIsSuspendYieldStateCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, IsSuspendYieldStateCodeGenerator, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6C10);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6C30);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6C74);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6C94);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v23 = v6 - 64;
      v24 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v6 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_166>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t matched;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  matched = JSC::BuiltinExecutables::regExpPrototypeMatchSlowCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991254A0;
  v20 = JSC::UnlinkedFunctionExecutable::link(matched, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1AE760001AC14), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6EB0);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6ED0);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6F14);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F6F34);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_167>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_167::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F708CLL);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F70ACLL);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_167::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::arrayPrototypeMaxWithPositivesCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_168>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::arrayPrototypeMinWithMaybeNegativeZeroAndPositiveCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991254C0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1AF330001AEB2), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F72E8);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F7308);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F734CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F736CLL);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_169>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_169::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F746CLL);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F748CLL);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_169::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::promiseOperationsNewHandledRejectedPromiseCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_170>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsNewPromiseCapabilityCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991254F0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1B3F10001B217), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F7674);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F7694);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F76D8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F76F8);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_171>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsNewPromiseCapabilitySlowCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125500;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1B6CB0001B3F1), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F7968);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F7988);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F79CCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F79ECLL);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_172>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::moduleLoaderNewRegistryEntryCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125510;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1B7F40001B6CBLL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F7C04);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F7C24);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F7C68);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F7C88);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_173>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::iteratorHelpersPerformIterationCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991255C0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1D6850001D404), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F7EA0);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F7EC0);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F7F04);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F7F24);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_174>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsPerformPromiseThenCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991255D0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1DA7E0001D685), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F813CLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F815CLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F81A0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F81C0);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_175>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t CodeExecutable;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  CodeExecutable = JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectGetCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991255E0;
  v20 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1DD590001DA7ELL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8384);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F83A4);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F83E8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8408);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_176>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectGetByValCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991255F0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1E0650001DD59), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8624);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8644);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8688);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F86A8);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_177>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t HasCodeExecutable;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  HasCodeExecutable = JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectHasCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125600;
  v20 = JSC::UnlinkedFunctionExecutable::link(HasCodeExecutable, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1E3050001E065), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F88C4);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F88E4);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8928);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8948);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_178>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectHasByValCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125610;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1E5D60001E305), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8B64);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8B84);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8BC8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8BE8);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_179>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectSetByValSloppyCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125620;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1E8EE0001E5D6), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8DFCLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8E1CLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8E60);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F8E80);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_180>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectSetByValStrictCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125630;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1EC6E0001E8EELL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F909CLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F90BCLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9100);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9120);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_181>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectSetSloppyCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125640;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1EF550001EC6ELL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F933CLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F935CLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F93A0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F93C0);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_182>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::proxyHelpersPerformProxyObjectSetStrictCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125650;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1F2A40001EF55), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F95DCLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F95FCLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9640);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9660);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_183>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v21 = (unsigned int *)(v6 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 & 0xFFFFFFEF, v21));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  v11 = JSC::promiseConstructorPromiseAllNewResolveElementCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, v11, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F97FCLL);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F981CLL);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9860);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9880);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v23 = v6 - 64;
      v24 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v6 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_184>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v21 = (unsigned int *)(v6 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 & 0xFFFFFFEF, v21));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  v11 = JSC::promiseConstructorPromiseAllOnFulfilledCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, v11, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9A1CLL);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9A3CLL);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9A80);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9AA0);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v23 = v6 - 64;
      v24 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v6 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_185>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v21 = (unsigned int *)(v6 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 & 0xFFFFFFEF, v21));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  v11 = JSC::promiseConstructorPromiseAllSlowCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, v11, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9C3CLL);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9C5CLL);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9CA0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9CC0);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v23 = v6 - 64;
      v24 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v6 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_186>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsPromiseEmptyOnFulfilledCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125660;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1FA230001F9EALL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9EDCLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9EFCLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9F40);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989F9F60);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_187>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_187::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA0C0);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA0E0);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_187::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::promiseOperationsPromiseEmptyOnRejectedCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_188>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_188::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA204);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA224);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_188::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::promiseConstructorPromiseNewOnRejectedCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_189>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_189::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA348);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA368);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_189::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::promiseConstructorPromiseOnRejectedWithContextCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_190>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsPromiseReactionJobCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125680;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1FEE50001FB86), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA550);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA570);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA5B4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA5D4);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_191>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsPromiseReactionJobWithoutPromiseCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125690;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x1FF720001FEE5), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA7F0);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA810);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA854);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA874);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_192>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_192::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA9CCLL);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FA9ECLL);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_192::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::promiseOperationsPromiseRejectSlowCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_193>(uint64_t *a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v12 = v5;
  v6 = *(_DWORD *)(v5 + 88);
  *(_DWORD *)(v5 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if (*(_QWORD *)(v5 + 24) == v7)
      {
        *(_QWORD *)(v5 + 16) = 0;
        v10 = (unsigned int *)(v5 + 80);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 & 0xFFFFFFEF, v10));
        *(_BYTE *)(v5 + 86) = 1;
        v2 = (uint64_t *)a1[2];
        v3 = *v2;
      }
    }
  }
  *v2 = v3 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_193::operator()((uint64_t)a1, a2);
  v8 = *(_QWORD *)a1[2];
  if ((v8 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FAB10);
  }
  if ((v8 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FAB30);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v12);
  return v8;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_193::operator()(uint64_t a1, JSC::VM *a2)
{
  _DWORD *v3;
  JSC::BuiltinExecutables **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(JSC::BuiltinExecutables ***)a1;
  v3 = *(_DWORD **)(a1 + 8);
  v5 = JSC::promiseOperationsPromiseResolveCodeGenerator(*(JSC::BuiltinExecutables ***)a1, a2);
  v11 = JSC::JSFunction::create((uint64_t)v4, v5, v3, v6, v7, v8, v9, v10);
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v11);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_194>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsPromiseResolveSlowCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991256C0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x202880002019DLL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FAD18);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FAD38);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FAD7CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FAD9CLL);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_195>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsPromiseResolveThenableJobCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991256D0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x2037300020288), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FAFB8);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FAFD8);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB01CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB03CLL);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_196>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsPromiseResolveThenableJobFastCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991256E0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x207B000020373), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB2ACLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB2CCLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB310);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB330);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_197>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsPromiseResolveThenableJobWithDerivedPromiseCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991256F0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x2092B000207B0), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB4F4);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB514);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB558);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB578);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_198>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsPromiseResolveThenableJobWithoutPromiseFastCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125700;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x20DBD0002092BLL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB794);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB7B4);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB7F8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FB818);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_199>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsPushNewPromiseReactionCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125720;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x211DE00020E85), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FBA34);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FBA54);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FBA98);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FBAB8);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_200>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::regExpPrototypeRegExpExecCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125790;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x2230600022199), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FBCD4);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FBCF4);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FBD38);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FBD58);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_201>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsRejectPromiseCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991257B0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x226C000022423), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FBF74);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FBF94);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FBFD8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FBFF8);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_202>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsRejectPromiseWithFirstResolvingFunctionCallCheckCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991257C0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x22825000226C0), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FC214);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FC234);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FC278);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FC298);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_203>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsRejectWithoutPromiseCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991257D0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x228BA00022825), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FC4B4);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FC4D4);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FC518);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FC538);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_204>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::stringPrototypeRepeatCharactersSlowPathCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991257F0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x22C3A00022A95), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FC754);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FC774);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FC7B8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FC7D8);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_205>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::stringPrototypeRepeatSlowPathCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125800;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x22D9A00022C3ALL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FC9F4);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FCA14);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FCA58);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FCA78);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_206>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsResolvePromiseCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991258A0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x24C5A000249BBLL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FCC94);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FCCB4);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FCCF8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FCD18);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_207>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsResolvePromiseWithFirstResolvingFunctionCallCheckCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991258B0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x24DBE00024C5ALL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FCF34);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FCF54);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FCF98);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FCFB8);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_208>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsResolveWithoutPromiseCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991258C0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x2509D00024DBELL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD228);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD248);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD28CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD2ACLL);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_209>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v30 = (unsigned int *)(v5 + 16);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 & 0xFFFFFFEF, v30));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsResolveWithoutPromiseForAsyncAwaitCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_1991258D0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x2524E0002509DLL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD4C4);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD4E4);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD528);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD548);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v26 = v5 - 64;
      v27 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v5 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_210>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::moduleLoaderSetStateToMaxCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125910;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x25DCD00025D6ALL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD70CLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD72CLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD770);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD790);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_211>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::globalOperationsSpeciesConstructorCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125950;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x2630C0002612FLL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD9ACLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FD9CCLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FDA10);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FDA30);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_212>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::stringPrototypeStringConcatSlowPathCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125990;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x26D9800026CECLL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FDC4CLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FDC6CLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FDCB0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FDCD0);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_213>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::promiseOperationsTriggerPromiseReactionsCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125A90;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x28965000286DCLL), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FDEECLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FDF0CLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FDF50);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FDF70);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_214>(JSC::BuiltinExecutables ***a1, JSC::VM *a2)
{
  uint64_t *v2;
  uint64_t v3;
  JSC::BuiltinExecutables **v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  JSC::BuiltinExecutables **v9;
  JSC::BuiltinExecutables **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  JSC::BuiltinExecutables **v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v2 = (uint64_t *)a1[2];
  v3 = *v2;
  if ((*v2 & 2) != 0)
    return 0;
  v5 = *a1;
  v6 = *a1 + 8;
  v7 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v7 + 1;
  if (!v7 && (v8 = *((_QWORD *)v6 - 6)) != 0)
  {
    v9 = v5;
    if (*((_QWORD *)v6 - 5) == v8)
    {
      *((_QWORD *)v6 - 6) = 0;
      v21 = (unsigned int *)(v6 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 & 0xFFFFFFEF, v21));
      *((_BYTE *)v5 + 86) = 1;
      v2 = (uint64_t *)a1[2];
      v3 = *v2;
      v9 = *a1;
    }
  }
  else
  {
    v9 = v5;
  }
  *v2 = v3 | 2;
  v10 = a1[1];
  v11 = JSC::typedArrayPrototypeTypedArraySpeciesConstructorCodeGenerator(v9, a2);
  result = JSC::JSFunction::create((uint64_t)v9, v11, v10, v12, v13, v14, v15, v16);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE10CLL);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = (JSC::BuiltinExecutables *)result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE12CLL);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = (uint64_t)*a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE170);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE190);
  }
  v20 = *((_DWORD *)v5 + 22) - 1;
  *((_DWORD *)v5 + 22) = v20;
  if (!v20 && v6[93377])
  {
    if (*((_BYTE *)v5 + 86))
    {
      v23 = v6 - 64;
      v24 = *((_QWORD *)v6 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v6 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v6[93379])
        v6[93378] = 1;
      *((_BYTE *)v5 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v5 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_215>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::shadowRealmPrototypeWrapRemoteValueCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125AE0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x292E4000291C6), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE3ACLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE3CCLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE410);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE430);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_216>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _DWORD *v34;
  __int128 v35;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v26 = (unsigned int *)(v5 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 & 0xFFFFFFEF, v26));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = (_DWORD *)a1[1];
  v10 = JSC::BuiltinExecutables::iteratorHelpersWrappedIteratorCodeExecutable(*(JSC::BuiltinExecutables **)(v8 + 93152));
  v11 = *(_DWORD **)(*(_QWORD *)(v8 + 93152) + 8);
  ++v11[2];
  v34 = v11;
  v35 = xmmword_199125AF0;
  v20 = JSC::UnlinkedFunctionExecutable::link(v10, v8, 0, (uint64_t)&v34, 0, 0, 0, v12, COERCE_DOUBLE(0x29368000292E4), v13, v14);
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  result = JSC::JSFunction::create(v8, v20, v9, v15, v16, v17, v18, v19);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE64CLL);
  }
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE66CLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE6B0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE6D0);
  }
  v25 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v25;
  if (!v25 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v28 = v5 - 64;
      v29 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v28 + 2) = v29;
      *((_QWORD *)v28 + 4) = v29;
      if (v29)
      {
        v30 = (unsigned int *)(v5 + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 | 0x10, v30));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v32 = (unsigned int *)(v4 + 80);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 | 2, v32));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_217>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  void (*v14)(_QWORD *, unint64_t);
  _QWORD *v15;
  unsigned int *v16;
  unsigned int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[3];

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *((_QWORD *)v5 - 6);
    if (v7)
    {
      if (*((_QWORD *)v5 - 5) == v7)
      {
        *((_QWORD *)v5 - 6) = 0;
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 & 0xFFFFFFEF, v16));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 1552);
  v10 = v8;
  if ((v9 & 1) != 0)
  {
    v14 = *(void (**)(_QWORD *, unint64_t))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v8 & 8) != 0)
      v15 = (_QWORD *)(v8 - 16);
    v24[0] = *v15;
    v24[1] = v8;
    v24[2] = v8 + 1552;
    v14(v24, v8);
    v10 = a1[1];
  }
  result = *(_QWORD *)(v8 + 1560);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE89CLL);
  }
  v12 = *a1;
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE8BCLL);
  }
  if (v10 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE900);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FE920);
  }
  v13 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v13;
  if (!v13 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v18 = v5 - 64;
      v19 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v18 + 2) = v19;
      *((_QWORD *)v18 + 4) = v19;
      if (v19)
      {
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 | 0x10, v20));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v22 = (unsigned int *)(v4 + 80);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 | 2, v22));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_218>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v11 = v4;
  v5 = *(_DWORD *)(v4 + 88);
  *(_DWORD *)(v4 + 88) = v5 + 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      if (*(_QWORD *)(v4 + 24) == v6)
      {
        *(_QWORD *)(v4 + 16) = 0;
        v9 = (unsigned int *)(v4 + 80);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 & 0xFFFFFFEF, v9));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_218::operator()((uint64_t)a1);
  v7 = *(_QWORD *)a1[2];
  if ((v7 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FEA70);
  }
  if ((v7 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FEA90);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v11);
  return v7;
}

uint64_t JSC::JSGlobalObject::init(JSC::VM &)::$_218::operator()(uint64_t a1)
{
  uint64_t v2;

  v2 = JSC::JSGlobalObject::mapConstructor(*(_QWORD *)(a1 + 8));
  return JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set(a1, v2);
}

uint64_t JSC::JSGlobalObject::mapConstructor(unint64_t this)
{
  uint64_t v2;
  void (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  v2 = *(_QWORD *)(this + 1520);
  if ((v2 & 1) != 0)
  {
    v4 = *(void (**)(_QWORD *))(v2 & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v5 = (_QWORD *)(this - 16);
    v6[0] = *v5;
    v6[1] = this;
    v6[2] = this + 1520;
    v4(v6);
  }
  return *(_QWORD *)(this + 1528);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_219>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1000000002;
  *(_QWORD *)(v10 + 8) = "mapIterationNext";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::mapPrivateFuncMapIterationNext, 1, 111, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FED10);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FED30);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FED6CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FED8CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_220>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1100000002;
  *(_QWORD *)(v10 + 8) = "mapIterationEntry";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::mapPrivateFuncMapIterationEntry, 1, 112, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FEF9CLL);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FEFBCLL);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FEFF8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF018);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_221>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xA00000002;
  *(_QWORD *)(v10 + 8) = "mapStorage";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::mapPrivateFuncMapStorage, 1, 110, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF1D4);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF1F4);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF230);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF250);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_222>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xF00000002;
  *(_QWORD *)(v10 + 8) = "mapIteratorNext";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::mapIteratorPrivateFuncMapIteratorNext, 1, 119, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF4B8);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF4D8);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF514);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF534);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_223>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xE00000002;
  *(_QWORD *)(v10 + 8) = "mapIteratorKey";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::mapIteratorPrivateFuncMapIteratorKey, 1, 120, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF6F0);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF710);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF74CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF76CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_224>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1000000002;
  *(_QWORD *)(v10 + 8) = "mapIteratorValue";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::mapIteratorPrivateFuncMapIteratorValue, 1, 121, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF980);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF9A0);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF9DCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FF9FCLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_225>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1400000002;
  *(_QWORD *)(v10 + 8) = "mapIterationEntryKey";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::mapPrivateFuncMapIterationEntryKey, 1, 113, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FFC10);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FFC30);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FFC6CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FFC8CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_226>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1600000002;
  *(_QWORD *)(v10 + 8) = "mapIterationEntryValue";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::mapPrivateFuncMapIterationEntryValue, 1, 114, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FFEA0);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FFEC0);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FFEFCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989FFF1CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_227>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1000000002;
  *(_QWORD *)(v10 + 8) = "setIterationNext";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::setPrivateFuncSetIterationNext, 1, 116, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A00130);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A00150);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0018CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A001ACLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_228>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1100000002;
  *(_QWORD *)(v10 + 8) = "setIterationEntry";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::setPrivateFuncSetIterationEntry, 1, 117, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A003C0);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A003E0);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0041CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0043CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_229>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1400000002;
  *(_QWORD *)(v10 + 8) = "setIterationEntryKey";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::setPrivateFuncSetIterationEntryKey, 1, 118, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A00650);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A00670);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A006ACLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A006CCLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_230>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xF00000002;
  *(_QWORD *)(v10 + 8) = "setIteratorNext";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::setIteratorPrivateFuncSetIteratorNext, 1, 122, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A008E0);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A00900);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0093CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0095CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_231>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xE00000002;
  *(_QWORD *)(v10 + 8) = "setIteratorKey";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::setIteratorPrivateFuncSetIteratorKey, 1, 123, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A00B70);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A00B90);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A00BCCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A00BECLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_232>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xA00000002;
  *(_QWORD *)(v10 + 8) = "setStorage";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::setPrivateFuncSetStorage, 1, 115, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A00E00);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A00E20);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A00E5CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A00E7CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_233>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x800000002;
  *(_QWORD *)(v10 + 8) = "setClone";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::setPrivateFuncClone, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A01090);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A010B0);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A010ECLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0110CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_234>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xC00000002;
  *(_QWORD *)(v10 + 8) = "importModule";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::globalFuncImportModule, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A01320);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A01340);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0137CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0139CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_235>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1200000002;
  *(_QWORD *)(v10 + 8) = "copyDataProperties";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 2, &v39, (uint64_t)JSC::globalFuncCopyDataProperties, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A015B0);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A015D0);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0160CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0162CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_236>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xB00000002;
  *(_QWORD *)(v10 + 8) = "cloneObject";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::globalFuncCloneObject, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A01840);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A01860);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0189CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A018BCLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_237>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xA00000002;
  *(_QWORD *)(v10 + 8) = "enqueueJob";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::enqueueJob, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A01AD0);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A01AF0);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A01B2CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A01B4CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::enqueueJob(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t casual;
  unint64_t v20;
  unint64_t v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t *v24;
  int v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _BOOL4 v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _BOOL4 v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  _BOOL4 v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  _QWORD *v91;
  JSC *v92;

  v9 = *((int *)a2 + 8) - 1;
  if (v9 >= 5)
  {
    v11 = *((_QWORD *)a2 + 6);
    v10 = *((_QWORD *)a2 + 7);
    v13 = *((_QWORD *)a2 + 8);
    v12 = *((_QWORD *)a2 + 9);
    v14 = *((_QWORD *)a2 + 10);
    goto LABEL_3;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v12 = 10;
    v10 = 10;
    v11 = 10;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) == 2)
    {
      v12 = 10;
      v10 = 10;
    }
    else
    {
      v10 = *((_QWORD *)a2 + 7);
      if (v9 >= 3)
      {
        v13 = *((_QWORD *)a2 + 8);
        if (*((_DWORD *)a2 + 8) == 4)
          v12 = 10;
        else
          v12 = *((_QWORD *)a2 + 9);
        goto LABEL_111;
      }
      v12 = 10;
    }
  }
  v13 = 10;
LABEL_111:
  v14 = 10;
LABEL_3:
  if (*(_QWORD *)(*((_QWORD *)this + 410) + 24))
  {
    v15 = *((_QWORD *)this + 7);
    v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (v16)
    {
      v17 = (_BYTE *)(v16 + 8856);
      *(_BYTE *)(v16 + 8856) = 1;
      v18 = *(unsigned int *)(v16 + 8872);
      if ((_DWORD)v18)
      {
        *(_DWORD *)(v16 + 8872) = v18 - *(_DWORD *)(v16 + 8876);
        casual = *(_QWORD *)(v16 + 8864) - v18;
LABEL_7:
        *v17 = 0;
LABEL_8:
        *(_DWORD *)(casual + 8) = 1;
        *(_QWORD *)casual = off_1E35A1B58;
        if (WTF::ObjectIdentifierGeneric<JSC::MicrotaskIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
        {
          __break(0xC471u);
          JUMPOUT(0x198A01FF4);
        }
        do
        {
          v20 = __ldaxr(&WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal(void)::current);
          v21 = v20 + 1;
        }
        while (__stlxr(v21, &WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal(void)::current));
        *(_QWORD *)(casual + 16) = v21;
        *(_QWORD *)casual = off_1E35A1B30;
        *(_OWORD *)(casual + 24) = 0u;
        v22 = (uint64_t **)(casual + 24);
        *(_OWORD *)(casual + 40) = 0u;
        *(_QWORD *)(casual + 56) = 0;
        v23 = *(_QWORD *)(v15 + 712);
        if (!v23)
        {
          JSC::HandleSet::grow((JSC::HandleSet *)(v15 + 672), (uint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8);
          v23 = *(_QWORD *)(v15 + 712);
        }
        *(_QWORD *)(v15 + 712) = *(_QWORD *)v23;
        *(_QWORD *)(v23 + 16) = 0;
        v24 = (uint64_t *)(v23 + 16);
        *(_QWORD *)v23 = 0;
        *(_QWORD *)(v23 + 8) = 0;
        *v22 = (uint64_t *)(v23 + 16);
        v26 = (v11 & 0xFFFE000000000002) == 0 && v11 != 0;
        if (*v24)
          v27 = (*v24 & 0xFFFE000000000002) == 0;
        else
          v27 = 0;
        if (v27 != v26)
        {
          if ((v26 & 1) != 0)
          {
            v28 = *(unint64_t **)((v23 & 0xFFFFFFFFFFFFF000) + 0x10);
            v29 = v28[3];
            v28 += 3;
            *(_QWORD *)v23 = v29;
            *(_QWORD *)(v23 + 8) = v28;
            *v28 = v23;
            *(_QWORD *)(v29 + 8) = v23;
          }
          else
          {
            v76 = *(_QWORD *)v23;
            v75 = *(_QWORD **)(v23 + 8);
            *v75 = *(_QWORD *)v23;
            *(_QWORD *)(v76 + 8) = v75;
            *(_QWORD *)v23 = 0;
            *(_QWORD *)(v23 + 8) = 0;
            v24 = *v22;
          }
        }
        *v24 = v11;
        if (v10 != 10 && v10)
        {
          v30 = *(uint64_t **)(casual + 32);
          if (!v30)
          {
            v31 = *(_QWORD **)(v15 + 712);
            if (!v31)
            {
              JSC::HandleSet::grow((JSC::HandleSet *)(v15 + 672), (uint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8);
              v31 = *(_QWORD **)(v15 + 712);
            }
            *(_QWORD *)(v15 + 712) = *v31;
            v31[2] = 0;
            v30 = v31 + 2;
            *v31 = 0;
            v31[1] = 0;
            *(_QWORD *)(casual + 32) = v31 + 2;
          }
          v32 = (unint64_t)(v30 - 2);
          v33 = v10 & 0xFFFE000000000002;
          if (*v30)
            v34 = (*v30 & 0xFFFE000000000002) == 0;
          else
            v34 = 0;
          if (v34 != (v33 == 0))
          {
            if (v33)
            {
              v84 = *(_QWORD *)v32;
              v83 = (_QWORD *)*(v30 - 1);
              *v83 = *(_QWORD *)v32;
              *(_QWORD *)(v84 + 8) = v83;
              *(_QWORD *)v32 = 0;
              *(_QWORD *)(v32 + 8) = 0;
              v30 = *(uint64_t **)(casual + 32);
            }
            else
            {
              v35 = *(unint64_t **)((v32 & 0xFFFFFFFFFFFFF000) + 0x10);
              v36 = v35[3];
              v35 += 3;
              *(_QWORD *)v32 = v36;
              *(v30 - 1) = (uint64_t)v35;
              *v35 = v32;
              *(_QWORD *)(v36 + 8) = v32;
            }
          }
          *v30 = v10;
        }
        if (v13 != 10 && v13)
        {
          v37 = *(uint64_t **)(casual + 40);
          if (!v37)
          {
            v38 = *(_QWORD **)(v15 + 712);
            if (!v38)
            {
              JSC::HandleSet::grow((JSC::HandleSet *)(v15 + 672), (uint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8);
              v38 = *(_QWORD **)(v15 + 712);
            }
            *(_QWORD *)(v15 + 712) = *v38;
            v38[2] = 0;
            v37 = v38 + 2;
            *v38 = 0;
            v38[1] = 0;
            *(_QWORD *)(casual + 40) = v38 + 2;
          }
          v39 = (unint64_t)(v37 - 2);
          v40 = v13 & 0xFFFE000000000002;
          if (*v37)
            v41 = (*v37 & 0xFFFE000000000002) == 0;
          else
            v41 = 0;
          if (v41 != (v40 == 0))
          {
            if (v40)
            {
              v78 = *(_QWORD *)v39;
              v77 = (_QWORD *)*(v37 - 1);
              *v77 = *(_QWORD *)v39;
              *(_QWORD *)(v78 + 8) = v77;
              *(_QWORD *)v39 = 0;
              *(_QWORD *)(v39 + 8) = 0;
              v37 = *(uint64_t **)(casual + 40);
            }
            else
            {
              v42 = *(unint64_t **)((v39 & 0xFFFFFFFFFFFFF000) + 0x10);
              v43 = v42[3];
              v42 += 3;
              *(_QWORD *)v39 = v43;
              *(v37 - 1) = (uint64_t)v42;
              *v42 = v39;
              *(_QWORD *)(v43 + 8) = v39;
            }
          }
          *v37 = v13;
        }
        if (v12 != 10 && v12)
        {
          v44 = *(uint64_t **)(casual + 48);
          if (!v44)
          {
            v45 = *(_QWORD **)(v15 + 712);
            if (!v45)
            {
              JSC::HandleSet::grow((JSC::HandleSet *)(v15 + 672), (uint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8);
              v45 = *(_QWORD **)(v15 + 712);
            }
            *(_QWORD *)(v15 + 712) = *v45;
            v45[2] = 0;
            v44 = v45 + 2;
            *v45 = 0;
            v45[1] = 0;
            *(_QWORD *)(casual + 48) = v45 + 2;
          }
          v46 = (unint64_t)(v44 - 2);
          v47 = v12 & 0xFFFE000000000002;
          if (*v44)
            v48 = (*v44 & 0xFFFE000000000002) == 0;
          else
            v48 = 0;
          if (v48 != (v47 == 0))
          {
            if (v47)
            {
              v80 = *(_QWORD *)v46;
              v79 = (_QWORD *)*(v44 - 1);
              *v79 = *(_QWORD *)v46;
              *(_QWORD *)(v80 + 8) = v79;
              *(_QWORD *)v46 = 0;
              *(_QWORD *)(v46 + 8) = 0;
              v44 = *(uint64_t **)(casual + 48);
            }
            else
            {
              v49 = *(unint64_t **)((v46 & 0xFFFFFFFFFFFFF000) + 0x10);
              v50 = v49[3];
              v49 += 3;
              *(_QWORD *)v46 = v50;
              *(v44 - 1) = (uint64_t)v49;
              *v49 = v46;
              *(_QWORD *)(v50 + 8) = v46;
            }
          }
          *v44 = v12;
        }
        if (v14 != 10 && v14)
        {
          v51 = *(uint64_t **)(casual + 56);
          if (!v51)
          {
            v52 = *(_QWORD **)(v15 + 712);
            if (!v52)
            {
              JSC::HandleSet::grow((JSC::HandleSet *)(v15 + 672), (uint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8);
              v52 = *(_QWORD **)(v15 + 712);
            }
            *(_QWORD *)(v15 + 712) = *v52;
            v52[2] = 0;
            v51 = v52 + 2;
            *v52 = 0;
            v52[1] = 0;
            *(_QWORD *)(casual + 56) = v52 + 2;
          }
          v53 = (unint64_t)(v51 - 2);
          v54 = v14 & 0xFFFE000000000002;
          v55 = (*v51 & 0xFFFE000000000002) == 0;
          if (!*v51)
            v55 = 0;
          if (v55 != (v54 == 0))
          {
            if (v54)
            {
              v82 = *(_QWORD *)v53;
              v81 = *(_QWORD **)(v53 + 8);
              *v81 = *(_QWORD *)v53;
              *(_QWORD *)(v82 + 8) = v81;
              *(_QWORD *)v53 = 0;
              *(_QWORD *)(v53 + 8) = 0;
              v51 = *(uint64_t **)(casual + 56);
            }
            else
            {
              v56 = *(unint64_t **)((v53 & 0xFFFFFFFFFFFFF000) + 0x10);
              v57 = v56[3];
              v56 += 3;
              *(_QWORD *)v53 = v57;
              *(v51 - 1) = (uint64_t)v56;
              *v56 = v53;
              *(_QWORD *)(v57 + 8) = v53;
            }
          }
          *v51 = v14;
        }
        v90 = (_DWORD *)casual;
        (*(void (**)(JSC *, _DWORD **, JSC::CallFrame *))(*((_QWORD *)this + 410) + 24))(this, &v90, a3);
        v58 = *((_QWORD *)this + 252);
        if (v58)
        {
          *(_QWORD *)&v85 = *(_QWORD *)(casual + 16);
          v92 = this;
          v64 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v64 = off_1E358C018;
          v64[1] = &v92;
          v64[2] = &v85;
          v91 = v64;
          JSC::Debugger::dispatchFunctionToObservers(v58, &v91);
          (*(void (**)(_QWORD *))(*v64 + 8))(v64);
        }
        v59 = v90;
        v90 = 0;
        if (v59)
        {
          if (v59[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 8))(v59);
          else
            --v59[2];
        }
        return 10;
      }
      v61 = *(_QWORD *)(v16 + 8896);
      v62 = *(_QWORD *)(v16 + 8880);
      if (v61)
      {
LABEL_80:
        v63 = __clz(v61);
        *(_QWORD *)(v16 + 8896) = v61 & ~(0x8000000000000000 >> v63);
        casual = v62 + 16 * v63;
        goto LABEL_7;
      }
      if (*(_BYTE *)(v16 + 8861) == 6)
      {
        v65 = *(_DWORD *)(v16 + 8892);
        v66 = *(unsigned int *)(v16 + 8888);
        if (v66 < v65)
        {
          *(_QWORD *)&v17[8 * v66 + 56] = 0;
          v67 = (unint64_t *)(v16 + 8 * v66 + 8920);
          v68 = v65 - 1 - v66;
          while (v68)
          {
            v62 += 1024;
            v70 = *v67++;
            v69 = v70;
            LODWORD(v66) = v66 + 1;
            --v68;
            if (v70)
            {
              v61 = __rbit64(v69);
              *(_DWORD *)(v16 + 8888) = v66;
              *(_QWORD *)(v16 + 8880) = v62;
              goto LABEL_80;
            }
          }
          *(_DWORD *)(v16 + 8888) = v65;
        }
      }
      *v17 = 0;
    }
    casual = bmalloc_allocate_casual(64, 1);
    goto LABEL_8;
  }
  if (WTF::ObjectIdentifierGeneric<JSC::MicrotaskIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02240);
  }
  do
  {
    v71 = __ldaxr(&WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal(void)::current);
    v72 = v71 + 1;
  }
  while (__stlxr(v71 + 1, &WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal(void)::current));
  v73 = *((_QWORD *)this + 7);
  *(_QWORD *)&v85 = v71 + 1;
  *((_QWORD *)&v85 + 1) = v11;
  v86 = v10;
  v87 = v13;
  v88 = v12;
  v89 = v14;
  JSC::VM::queueMicrotask(v73, &v85);
  v74 = *((_QWORD *)this + 252);
  if (v74)
    JSC::Debugger::didQueueMicrotask(v74, (uint64_t)this, v72);
  return 10;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_238>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xD00000002;
  *(_QWORD *)(v10 + 8) = "makeTypeError";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::globalFuncMakeTypeError, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02460);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02480);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A024BCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A024DCLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_239>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  void (*v14)(_QWORD *, unint64_t);
  _QWORD *v15;
  unsigned int *v16;
  unsigned int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  _QWORD v24[3];

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6)
  {
    v7 = *((_QWORD *)v5 - 6);
    if (v7)
    {
      if (*((_QWORD *)v5 - 5) == v7)
      {
        *((_QWORD *)v5 - 6) = 0;
        v16 = (unsigned int *)(v5 + 16);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 & 0xFFFFFFEF, v16));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  v8 = a1[1];
  v9 = *(_QWORD *)(v8 + 208);
  v10 = v8;
  if ((v9 & 1) != 0)
  {
    v14 = *(void (**)(_QWORD *, unint64_t))(v9 & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v8 & 8) != 0)
      v15 = (_QWORD *)(v8 - 16);
    v24[0] = *v15;
    v24[1] = v8;
    v24[2] = v8 + 208;
    v14(v24, v8);
    v10 = a1[1];
  }
  result = *(_QWORD *)(v8 + 216);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02650);
  }
  v12 = *a1;
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02670);
  }
  if (v10 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A026B4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A026D4);
  }
  v13 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v13;
  if (!v13 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v18 = v5 - 64;
      v19 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v18 + 2) = v19;
      *((_QWORD *)v18 + 4) = v19;
      if (v19)
      {
        v20 = (unsigned int *)(v5 + 16);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 | 0x10, v20));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v22 = (unsigned int *)(v4 + 80);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 | 2, v22));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_240>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1400000002;
  *(_QWORD *)(v10 + 8) = "typedArrayViewLength";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::typedArrayViewPrivateFuncLength, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A028E0);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02900);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0293CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0295CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_241>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x2400000002;
  *(_QWORD *)(v10 + 8) = "typedArrayViewGetOriginalConstructor";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::typedArrayViewPrivateFuncGetOriginalConstructor, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02B70);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02B90);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02BCCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02BECLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_242>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1900000002;
  *(_QWORD *)(v10 + 8) = "typedArrayViewContentType";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::typedArrayViewPrivateFuncContentType, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02E00);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02E20);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02E5CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A02E7CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_243>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1E00000002;
  *(_QWORD *)(v10 + 8) = "typedArrayViewIsTypedArrayView";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::typedArrayViewPrivateFuncIsTypedArrayView, 1, 100, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A030E4);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03104);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03140);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03160);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_244>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x2400000002;
  *(_QWORD *)(v10 + 8) = "typedArrayViewIsSharedTypedArrayView";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::typedArrayViewPrivateFuncIsSharedTypedArrayView, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0331CLL);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0333CLL);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03378);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03398);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_245>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v11 = v4;
  v5 = *(_DWORD *)(v4 + 88);
  *(_DWORD *)(v4 + 88) = v5 + 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      if (*(_QWORD *)(v4 + 24) == v6)
      {
        *(_QWORD *)(v4 + 16) = 0;
        v9 = (unsigned int *)(v4 + 80);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 & 0xFFFFFFEF, v9));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_245::operator()(a1);
  v7 = *(_QWORD *)a1[2];
  if ((v7 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A034F0);
  }
  if ((v7 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03510);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v11);
  return v7;
}

void JSC::JSGlobalObject::init(JSC::VM &)::$_245::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v2 = *a1;
  v3 = a1[1];
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x4200000002;
  *(_QWORD *)(v4 + 8) = "typedArrayViewPrivateFuncIsResizableOrGrowableSharedTypedArrayView";
  *(_DWORD *)(v4 + 16) = 4;
  v22 = (WTF::StringImpl *)v4;
  v5 = JSC::JSFunction::create(v2, v3, 1, &v22, (uint64_t)JSC::typedArrayViewPrivateFuncIsResizableOrGrowableSharedTypedArrayView, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set((uint64_t)a1, v5);
  v13 = v22;
  v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_246>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v11 = v4;
  v5 = *(_DWORD *)(v4 + 88);
  *(_DWORD *)(v4 + 88) = v5 + 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      if (*(_QWORD *)(v4 + 24) == v6)
      {
        *(_QWORD *)(v4 + 16) = 0;
        v9 = (unsigned int *)(v4 + 80);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 & 0xFFFFFFEF, v9));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_246::operator()(a1);
  v7 = *(_QWORD *)a1[2];
  if ((v7 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A036A8);
  }
  if ((v7 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A036C8);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v11);
  return v7;
}

void JSC::JSGlobalObject::init(JSC::VM &)::$_246::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v2 = *a1;
  v3 = a1[1];
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x2000000002;
  *(_QWORD *)(v4 + 8) = "typedArrayViewTypedArrayFromFast";
  *(_DWORD *)(v4 + 16) = 4;
  v22 = (WTF::StringImpl *)v4;
  v5 = JSC::JSFunction::create(v2, v3, 2, &v22, (uint64_t)JSC::typedArrayViewPrivateFuncTypedArrayFromFast, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set((uint64_t)a1, v5);
  v13 = v22;
  v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_247>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xD00000002;
  *(_QWORD *)(v10 + 8) = "arrayFromFast";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 2, &v39, (uint64_t)JSC::arrayProtoPrivateFuncFromFast, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0391CLL);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0393CLL);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03978);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03998);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_248>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1800000002;
  *(_QWORD *)(v10 + 8) = "typedArrayViewIsDetached";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::typedArrayViewPrivateFuncIsDetached, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03C00);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03C20);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03C5CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03C7CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_249>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x700000002;
  *(_QWORD *)(v10 + 8) = "isBound";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::isBoundFunction, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03E8CLL);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03EACLL);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03EE8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A03F08);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_250>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v11 = v4;
  v5 = *(_DWORD *)(v4 + 88);
  *(_DWORD *)(v4 + 88) = v5 + 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      if (*(_QWORD *)(v4 + 24) == v6)
      {
        *(_QWORD *)(v4 + 16) = 0;
        v9 = (unsigned int *)(v4 + 80);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 & 0xFFFFFFEF, v9));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_250::operator()(a1);
  v7 = *(_QWORD *)a1[2];
  if ((v7 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04008);
  }
  if ((v7 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04028);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v11);
  return v7;
}

void JSC::JSGlobalObject::init(JSC::VM &)::$_250::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v2 = *a1;
  v3 = a1[1];
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x1000000002;
  *(_QWORD *)(v4 + 8) = "hasInstanceBound";
  *(_DWORD *)(v4 + 16) = 4;
  v22 = (WTF::StringImpl *)v4;
  v5 = JSC::JSFunction::create(v2, v3, 0, &v22, (uint64_t)JSC::hasInstanceBoundFunction, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set((uint64_t)a1, v5);
  v13 = v22;
  v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_251>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xA00000002;
  *(_QWORD *)(v10 + 8) = "instanceOf";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::objectPrivateFuncInstanceOf, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0427CLL);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0429CLL);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A042D8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A042F8);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_252>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xA00000002;
  *(_QWORD *)(v10 + 8) = "BuiltinLog";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::globalFuncBuiltinLog, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0450CLL);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0452CLL);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04568);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04588);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_253>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xF00000002;
  *(_QWORD *)(v10 + 8) = "BuiltinDescribe";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::globalFuncBuiltinDescribe, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A047F0);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04810);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0484CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0486CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_254>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x300000002;
  *(_QWORD *)(v10 + 8) = "min";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::mathProtoFuncMin, 1, 8, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04A7CLL);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04A9CLL);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04AD8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04AF8);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_255>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xF00000002;
  *(_QWORD *)(v10 + 8) = "repeatCharacter";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 2, &v39, (uint64_t)JSC::stringProtoFuncRepeatCharacter, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04D08);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04D28);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04D64);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04D84);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_256>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xB00000002;
  *(_QWORD *)(v10 + 8) = "isArraySlow";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::arrayConstructorPrivateFuncIsArraySlow, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04F94);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04FB4);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A04FF0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05010);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_257>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xC00000002;
  *(_QWORD *)(v10 + 8) = "concatMemcpy";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::arrayProtoPrivateFuncConcatMemcpy, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05220);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05240);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0527CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0529CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_258>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xC00000002;
  *(_QWORD *)(v10 + 8) = "appendMemcpy";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::arrayProtoPrivateFuncAppendMemcpy, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A054ACLL);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A054CCLL);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05508);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05528);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_259>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1B00000002;
  *(_QWORD *)(v10 + 8) = "hostPromiseRejectionTracker";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 2, &v39, (uint64_t)JSC::globalFuncHostPromiseRejectionTracker, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05738);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05758);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05794);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A057B4);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_260>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xF00000002;
  *(_QWORD *)(v10 + 8) = "importMapStatus";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::globalFuncImportMapStatus, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05970);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05990);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A059CCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A059ECLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_261>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xD00000002;
  *(_QWORD *)(v10 + 8) = "importInRealm";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::importInRealm, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05C00);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05C20);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05C5CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05C7CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_262>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v13 = (unsigned int *)(v5 + 16);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 & 0xFFFFFFEF, v13));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  result = JSC::JSFunction::create(v8, a1[1], 1, (WTF::StringImpl **)(*(_QWORD *)(v8 + 41952) + 1248), (uint64_t)JSC::globalFuncEval, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05E30);
  }
  v11 = *a1;
  v10 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05E50);
  }
  if (v10 && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v11 + 192, v10);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05E94);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A05EB4);
  }
  v12 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v12;
  if (!v12 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v15 = v5 - 64;
      v16 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v15 + 2) = v16;
      *((_QWORD *)v15 + 4) = v16;
      if (v16)
      {
        v17 = (unsigned int *)(v5 + 16);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 | 0x10, v17));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v19 = (unsigned int *)(v4 + 80);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 | 2, v19));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_263>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xB00000002;
  *(_QWORD *)(v10 + 8) = "evalInRealm";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::evalInRealm, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A060C8);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A060E8);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06124);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06144);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_264>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1300000002;
  *(_QWORD *)(v10 + 8) = "moveFunctionToRealm";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::moveFunctionToRealm, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06358);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06378);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A063B4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A063D4);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_265>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x200000002;
  *(_QWORD *)(v10 + 8) = "is";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 2, &v39, (uint64_t)JSC::objectConstructorIs, 1, 71, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06638);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06658);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06694);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A066B4);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_266>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1200000002;
  *(_QWORD *)(v10 + 8) = "setPrototypeDirect";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 2, &v39, (uint64_t)JSC::globalFuncSetPrototypeDirect, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06870);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06890);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A068CCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A068ECLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_267>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1900000002;
  *(_QWORD *)(v10 + 8) = "setPrototypeDirectOrThrow";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 2, &v39, (uint64_t)JSC::globalFuncSetPrototypeDirectOrThrow, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06B54);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06B74);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06BB0);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06BD0);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_268>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1300000002;
  *(_QWORD *)(v10 + 8) = "toIntegerOrInfinity";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::globalFuncToIntegerOrInfinity, 1, 94, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06DE0);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06E00);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06E3CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06E5CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_269>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v11 = v4;
  v5 = *(_DWORD *)(v4 + 88);
  *(_DWORD *)(v4 + 88) = v5 + 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      if (*(_QWORD *)(v4 + 24) == v6)
      {
        *(_QWORD *)(v4 + 16) = 0;
        v9 = (unsigned int *)(v4 + 80);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 & 0xFFFFFFEF, v9));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_269::operator()(a1);
  v7 = *(_QWORD *)a1[2];
  if ((v7 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06F5CLL);
  }
  if ((v7 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A06F7CLL);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v11);
  return v7;
}

void JSC::JSGlobalObject::init(JSC::VM &)::$_269::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v2 = *a1;
  v3 = a1[1];
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x800000002;
  *(_QWORD *)(v4 + 8) = "toLength";
  *(_DWORD *)(v4 + 16) = 4;
  v22 = (WTF::StringImpl *)v4;
  v5 = JSC::JSFunction::create(v2, v3, 1, &v22, (uint64_t)JSC::globalFuncToLength, 1, 95, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set((uint64_t)a1, v5);
  v13 = v22;
  v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_270>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1200000002;
  *(_QWORD *)(v10 + 8) = "esSpecRegExpCreate";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 2, &v39, (uint64_t)JSC::esSpecRegExpCreate, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A071D0);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A071F0);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0722CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0724CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_271>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xE00000002;
  *(_QWORD *)(v10 + 8) = "esSpecIsRegExp";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::esSpecIsRegExp, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A07460);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A07480);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A074BCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A074DCLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_272>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xF00000002;
  *(_QWORD *)(v10 + 8) = "regExpMatchFast";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::regExpProtoFuncMatchFast, 1, 65, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A076F0);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A07710);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0774CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0776CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_273>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1000000002;
  *(_QWORD *)(v10 + 8) = "regExpSearchFast";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::regExpProtoFuncSearchFast, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A07980);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A079A0);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A079DCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A079FCLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_274>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xF00000002;
  *(_QWORD *)(v10 + 8) = "regExpSplitFast";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 2, &v39, (uint64_t)JSC::regExpProtoFuncSplitFast, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A07C10);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A07C30);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A07C6CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A07C8CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_275>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xE00000002;
  *(_QWORD *)(v10 + 8) = "regExpTestFast";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::regExpProtoFuncTestFast, 1, 64, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A07EA0);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A07EC0);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A07EFCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A07F1CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_276>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1600000002;
  *(_QWORD *)(v10 + 8) = "stringIncludesInternal";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::builtinStringIncludesInternal, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08130);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08150);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0818CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A081ACLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_277>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v11 = v4;
  v5 = *(_DWORD *)(v4 + 88);
  *(_DWORD *)(v4 + 88) = v5 + 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      if (*(_QWORD *)(v4 + 24) == v6)
      {
        *(_QWORD *)(v4 + 16) = 0;
        v9 = (unsigned int *)(v4 + 80);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 & 0xFFFFFFEF, v9));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_277::operator()(a1);
  v7 = *(_QWORD *)a1[2];
  if ((v7 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08304);
  }
  if ((v7 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08324);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v11);
  return v7;
}

void JSC::JSGlobalObject::init(JSC::VM &)::$_277::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v2 = *a1;
  v3 = a1[1];
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x1500000002;
  *(_QWORD *)(v4 + 8) = "stringIndexOfInternal";
  *(_DWORD *)(v4 + 16) = 4;
  v22 = (WTF::StringImpl *)v4;
  v5 = JSC::JSFunction::create(v2, v3, 1, &v22, (uint64_t)JSC::builtinStringIndexOfInternal, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set((uint64_t)a1, v5);
  v13 = v22;
  v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_278>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xF00000002;
  *(_QWORD *)(v10 + 8) = "stringSplitFast";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 2, &v39, (uint64_t)JSC::stringProtoFuncSplitFast, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08578);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08598);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A085D4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A085F4);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_279>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x2000000002;
  *(_QWORD *)(v10 + 8) = "handleNegativeProxyHasTrapResult";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 2, &v39, (uint64_t)JSC::globalFuncHandleNegativeProxyHasTrapResult, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08808);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08828);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08864);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08884);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_280>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1800000002;
  *(_QWORD *)(v10 + 8) = "handleProxyGetTrapResult";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 3, &v39, (uint64_t)JSC::globalFuncHandleProxyGetTrapResult, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08A98);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08AB8);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08AF4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08B14);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_281>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x2000000002;
  *(_QWORD *)(v10 + 8) = "handlePositiveProxySetTrapResult";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 3, &v39, (uint64_t)JSC::globalFuncHandlePositiveProxySetTrapResult, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08D7CLL);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08D9CLL);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08DD8);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08DF8);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_282>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1300000002;
  *(_QWORD *)(v10 + 8) = "createPrivateSymbol";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::createPrivateSymbol, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08FB4);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A08FD4);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09010);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09030);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

unint64_t JSC::createPrivateSymbol(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::Symbol *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  WTF::SymbolImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;

  v9 = (JSC::Symbol *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v52 = 10;
LABEL_21:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v52, this, a3, a4, a5, a6, a7, a8, (int **)&v53);
    goto LABEL_9;
  }
  v10 = *((_QWORD *)a2 + 6);
  v52 = v10;
  if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 2)
    goto LABEL_21;
  v11 = *(WTF::StringImpl **)(v10 + 8);
  if ((v11 & 1) != 0)
    v11 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v10, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (v11)
    *(_DWORD *)v11 += 2;
  v53 = v11;
LABEL_9:
  if (*((_DWORD *)v9 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v33 = 0;
  }
  else
  {
    v12 = v53;
    v13 = *((_DWORD *)v53 + 4);
    v14 = v53;
    if ((v13 & 3) == 2)
      v14 = (WTF::StringImpl *)*((_QWORD *)v53 + 3);
    v15 = v13 & 4;
    v16 = WTF::fastCompactMalloc((WTF *)0x30);
    v17 = *((_QWORD *)v12 + 1);
    v18 = *((_DWORD *)v12 + 1);
    *(_DWORD *)v14 += 2;
    *(_DWORD *)v16 = 2;
    *(_DWORD *)(v16 + 4) = v18;
    *(_QWORD *)(v16 + 8) = v17;
    *(_DWORD *)(v16 + 16) = v15 | 0x22;
    *(_QWORD *)(v16 + 24) = v14;
    v19 = (WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol + 256) | 0x80000000;
    *(_DWORD *)(v16 + 32) = v19;
    *(_DWORD *)(v16 + 36) = 4;
    WTF::SymbolImpl::nextHashForSymbol(void)::s_nextHashForSymbol = v19;
    v33 = JSC::Symbol::create(v9, (JSC::VM *)v16, v20, v21, v22, v23, v24, v25);
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v16, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  v34 = v53;
  v53 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  return v33;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_283>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v11 = v4;
  v5 = *(_DWORD *)(v4 + 88);
  *(_DWORD *)(v4 + 88) = v5 + 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      if (*(_QWORD *)(v4 + 24) == v6)
      {
        *(_QWORD *)(v4 + 16) = 0;
        v9 = (unsigned int *)(v4 + 80);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 & 0xFFFFFFEF, v9));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_283::operator()(a1);
  v7 = *(_QWORD *)a1[2];
  if ((v7 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09334);
  }
  if ((v7 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09354);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v11);
  return v7;
}

void JSC::JSGlobalObject::init(JSC::VM &)::$_283::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v2 = *a1;
  v3 = a1[1];
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x500000002;
  *(_QWORD *)(v4 + 8) = "parse";
  *(_DWORD *)(v4 + 16) = 4;
  v22 = (WTF::StringImpl *)v4;
  v5 = JSC::JSFunction::create(v2, v3, 1, &v22, (uint64_t)JSC::jsonParse, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set((uint64_t)a1, v5);
  v13 = v22;
  v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
}

uint64_t JSC::jsonParse(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v10 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27 = 10;
LABEL_20:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v27, this, a3, a4, a5, a6, a7, a8, (int **)&v28);
    goto LABEL_8;
  }
  v11 = *((_QWORD *)a2 + 6);
  v27 = v11;
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
    goto LABEL_20;
  v12 = *(WTF::StringImpl **)(v11 + 8);
  if ((v12 & 1) != 0)
  {
    v12 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v11, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (!v12)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v12)
LABEL_6:
    *(_DWORD *)v12 += 2;
LABEL_7:
  v28 = v12;
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_9;
LABEL_8:
  v26 = *(_DWORD *)(v10 + 80);
  if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
  {
    v15 = 0;
  }
  else
  {
LABEL_9:
    if (v28)
    {
      v13 = *((_QWORD *)v28 + 1);
      v14 = *((unsigned int *)v28 + 1) | ((unint64_t)((*((_DWORD *)v28 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v13 = 0;
      v14 = 0x100000000;
    }
    v15 = JSC::JSONParse((uint64_t)this, v13, v14, a4, a5, a6, a7, a8);
  }
  v16 = v28;
  v28 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  return v15;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_284>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x900000002;
  *(_QWORD *)(v10 + 8) = "stringify";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 2, &v39, (uint64_t)JSC::jsonStringify, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A096FCLL);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0971CLL);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09758);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09778);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::jsonStringify(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC *v3;
  const WTF::String *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;

  v3 = (JSC *)*((_QWORD *)this + 7);
  JSC::stringify((uint64_t)&v28, (uint64_t)this);
  v17 = JSC::jsString(v3, (JSC::VM *)&v28, v4, v5, v6, v7, v8, v9);
  v18 = v28;
  v28 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return v17;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_285>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v11 = v4;
  v5 = *(_DWORD *)(v4 + 88);
  *(_DWORD *)(v4 + 88) = v5 + 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      if (*(_QWORD *)(v4 + 24) == v6)
      {
        *(_QWORD *)(v4 + 16) = 0;
        v9 = (unsigned int *)(v4 + 80);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 & 0xFFFFFFEF, v9));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  JSC::JSGlobalObject::init(JSC::VM &)::$_285::operator()(a1);
  v7 = *(_QWORD *)a1[2];
  if ((v7 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0996CLL);
  }
  if ((v7 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0998CLL);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v11);
  return v7;
}

void JSC::JSGlobalObject::init(JSC::VM &)::$_285::operator()(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;

  v2 = *a1;
  v3 = a1[1];
  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0x1400000002;
  *(_QWORD *)(v4 + 8) = "createRemoteFunction";
  *(_DWORD *)(v4 + 16) = 4;
  v22 = (WTF::StringImpl *)v4;
  v5 = JSC::JSFunction::create(v2, v3, 0, &v22, (uint64_t)JSC::createRemoteFunction, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::Initializer::set((uint64_t)a1, v5);
  v13 = v22;
  v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v6, v7, v8, v9, v10, v11, v12);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_286>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v31 = (unsigned int *)(v5 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1000000002;
  *(_QWORD *)(v10 + 8) = "isRemoteFunction";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 0, &v39, (uint64_t)JSC::isRemoteFunction, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09BE0);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09C00);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09C3CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09C5CLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v33 = v5 - 64;
      v34 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v33 + 2) = v34;
      *((_QWORD *)v33 + 4) = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v5 + 16);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 | 0x10, v35));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_287>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1800000002;
  *(_QWORD *)(v10 + 8) = "compileStreamingInternal";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::webAssemblyCompileStreamingInternal, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09EC4);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09EE4);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09F20);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A09F40);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_288>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  WTF::StringImpl *v39;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v5 = (_BYTE *)(*a1 + 64);
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *((_QWORD *)v5 - 6)) != 0)
  {
    v8 = v4;
    if (*((_QWORD *)v5 - 5) == v7)
    {
      *((_QWORD *)v5 - 6) = 0;
      v35 = (unsigned int *)(v5 + 16);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 & 0xFFFFFFEF, v35));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  v9 = a1[1];
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x1C00000002;
  *(_QWORD *)(v10 + 8) = "instantiateStreamingInternal";
  *(_DWORD *)(v10 + 16) = 4;
  v39 = (WTF::StringImpl *)v10;
  v11 = JSC::JSFunction::create(v8, v9, 1, &v39, (uint64_t)JSC::webAssemblyInstantiateStreamingInternal, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0A150);
  }
  v19 = *a1;
  v18 = (unsigned __int8 *)a1[1];
  *(_QWORD *)a1[2] = v11;
  if ((v11 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0A170);
  }
  if (v18 && *(_DWORD *)(v19 + 760) >= v18[7])
    JSC::Heap::writeBarrierSlowPath(v19 + 192, (unint64_t)v18);
  v20 = v39;
  v39 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)v18, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0A1ACLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0A1CCLL);
  }
  v22 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v22;
  if (!v22 && v5[93377])
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v23 = v5 - 64;
      v24 = *((_QWORD *)v5 - 5);
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 4) = v24;
      if (v24)
      {
        v25 = (unsigned int *)(v5 + 16);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 | 0x10, v25));
      }
      if (v5[93379])
        v5[93378] = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v37 = (unsigned int *)(v4 + 80);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 | 2, v37));
    }
  }
  return result;
}

unint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_289>(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v3 = a1;
  v4 = *a1;
  v5 = *a1 + 64;
  v6 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v6 + 1;
  if (!v6 && (v7 = *(_QWORD *)(v5 - 48)) != 0)
  {
    v8 = v4;
    if (*(_QWORD *)(v5 - 40) == v7)
    {
      *(_QWORD *)(v5 - 48) = 0;
      v17 = (unsigned int *)(v5 + 16);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 & 0xFFFFFFEF, v17));
      *(_BYTE *)(v4 + 86) = 1;
      v1 = (uint64_t *)a1[2];
      v2 = *v1;
      v8 = *a1;
    }
  }
  else
  {
    v8 = v4;
  }
  *v1 = v2 | 2;
  result = *(_QWORD *)(v8 + 41832);
  if (!result)
  {
    v22 = v5;
    v24 = v4;
    v21 = v3;
    result = JSC::VM::emptyPropertyNameEnumeratorSlow((JSC::VM *)v8);
    if (!result)
    {
      __break(0xC471u);
      JUMPOUT(0x198A0A358);
    }
    v3 = v21;
    v5 = v22;
    v8 = *v21;
    v1 = (uint64_t *)v21[2];
    v4 = v24;
  }
  v10 = v3[1];
  *v1 = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0A378);
  }
  if (v10 && *(_DWORD *)(v8 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    v16 = v3;
    v23 = v5;
    v25 = v4;
    JSC::Heap::writeBarrierSlowPath(v8 + 192, v10);
    v5 = v23;
    v4 = v25;
    result = *(_QWORD *)v16[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0A398);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0A3E8);
  }
  v11 = *(_DWORD *)(v4 + 88) - 1;
  *(_DWORD *)(v4 + 88) = v11;
  if (!v11 && *(_BYTE *)(v5 + 93377))
  {
    if (*(_BYTE *)(v4 + 86))
    {
      v12 = v5 - 64;
      v13 = *(_QWORD *)(v5 - 40);
      *(_QWORD *)(v12 + 16) = v13;
      *(_QWORD *)(v12 + 32) = v13;
      if (v13)
      {
        v14 = (unsigned int *)(v5 + 16);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 | 0x10, v14));
      }
      if (*(_BYTE *)(v12 + 93443))
        *(_BYTE *)(v12 + 93442) = 1;
      *(_BYTE *)(v4 + 86) = 0;
    }
    else
    {
      v19 = (unsigned int *)(v4 + 80);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 | 2, v19));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_290>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v31 = (unsigned int *)(v13 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 656);
  v38 = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 >= *(_QWORD *)(v16 + 40144))
  {
    SlowCase = *(_QWORD *)(v16 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v35, v36, v37);
      goto LABEL_14;
    }
    v30 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v30);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v30;
  }
  *v17 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v38, (unint64_t)&JSC::WebAssemblyModuleRecord::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0A638);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0A658);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0A69CLL);
  }
  v25 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v25;
  if (!v25 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v26 = v13 - 64;
      v27 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v13 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v33 = (unsigned int *)(v12 + 80);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 | 2, v33));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_291>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = (_BYTE *)(*a1 + 64);
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v31 = (unsigned int *)(v13 + 16);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 & 0xFFFFFFEF, v31));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = a1[1];
  v19 = *(_QWORD *)(v18 + 664);
  v38 = 67440154;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 >= *(_QWORD *)(v16 + 40144))
  {
    SlowCase = *(_QWORD *)(v16 + 40152);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v35, v36, v37);
      goto LABEL_14;
    }
    v30 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v30);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v30;
  }
  *v17 = SlowCase + 128;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, v16, v18, v19, (uint64_t)&v38, (unint64_t)&JSC::WebAssemblyFunction::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v24 = *a1;
  v23 = a1[1];
  *(_QWORD *)a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0A91CLL);
  }
  if (v23 && *(_DWORD *)(v24 + 760) >= *(unsigned __int8 *)(v23 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v24 + 192, v23);
    result = *(_QWORD *)a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0A93CLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0A980);
  }
  v25 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v25;
  if (!v25 && v13[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v26 = v13 - 64;
      v27 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v26 + 2) = v27;
      *((_QWORD *)v26 + 4) = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v13 + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 | 0x10, v28));
      }
      if (v13[93379])
        v13[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v33 = (unsigned int *)(v12 + 80);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 | 2, v33));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<JSC::JSGlobalObject::init(JSC::VM &)::$_292>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t result;
  unint64_t v18;
  unint64_t *v19;
  int v20;
  _BYTE *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v25 = (unsigned int *)(v13 + 16);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 & 0xFFFFFFEF, v25));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  result = JSC::WebAssemblyWrapperFunction::createStructure(v16, (JSC::VM *)a1[1], a1[1][83], a5, a6, a7, a8, a9, a2);
  if (!result)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0AB40);
  }
  v19 = *a1;
  v18 = (unint64_t)a1[1];
  *a1[2] = result;
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0AB60);
  }
  if (v18 && *((_DWORD *)v19 + 190) >= *(unsigned __int8 *)(v18 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v19 + 24), v18);
    result = *a1[2];
  }
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0ABA4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0ABC4);
  }
  v20 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v20;
  if (!v20 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v21 = v13 - 64;
      v22 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v21 + 2) = v22;
      *((_QWORD *)v21 + 4) = v22;
      if (v22)
      {
        v23 = (unsigned int *)(v13 + 16);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 | 0x10, v23));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v27 = (unsigned int *)(v12 + 10);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 | 2, v27));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_293>(JSC::JSGlobalObject::init(JSC::VM &)::$_293 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  JSC::Structure *v30;
  JSC::VM *v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  JSC::VM *v39;
  JSC::JSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  unint64_t v51;
  uint64_t result;
  int v53;
  _BYTE *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unint64_t *v62;
  JSC::VM *v63;
  uint64_t *v64;
  unint64_t **v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v58 = (unsigned int *)(v13 + 16);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 & 0xFFFFFFEF, v58));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  v62 = v16;
  v63 = (JSC::VM *)v17;
  v64 = v9;
  v65 = a1;
  v67 = 0;
  v68 = 0;
  Structure = JSC::WebAssemblyArrayPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v66 = JSC::WebAssemblyArrayPrototype::create((JSC::WebAssemblyArrayPrototype *)v16, (JSC::VM *)v17, Structure, v19, v20, v21, v22, v23);
  v30 = (JSC::Structure *)JSC::JSWebAssemblyArray::createStructure(v16, (JSC::VM *)v17, v66, v24, v25, v26, v27, v28, v29);
  JSC::LazyClassStructure::Initializer::setStructure(&v62, v30);
  v32 = v62;
  v31 = v63;
  v39 = (JSC::VM *)JSC::WebAssemblyArrayConstructor::createStructure(v62, v63, *((_QWORD *)v63 + 83), v33, v34, v35, v36, v37, v38);
  v40 = (JSC::JSObject *)v66;
  v46 = JSC::WebAssemblyArrayConstructor::create((JSC *)v32, v39, v66, v41, v42, v43, v44, v45);
  if (!v67)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0AE00);
  }
  if (!v40)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0AE20);
  }
  if (v68)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0AE40);
  }
  v51 = v46;
  v68 = v46;
  JSC::JSObject::putDirectWithoutTransition(v40, (uint64_t)v32, *(_QWORD *)(v32[5244] + 1080), v46, 4, v47, v48, v49, v50);
  v64[1] = v51;
  if (v51 && *((_DWORD *)v32 + 190) >= *((unsigned __int8 *)v31 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v32 + 24), (unint64_t)v31);
  result = *a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0AE60);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0AEA0);
  }
  v53 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v53;
  if (!v53 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v54 = v13 - 64;
      v55 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v54 + 2) = v55;
      *((_QWORD *)v54 + 4) = v55;
      if (v55)
      {
        v56 = (unsigned int *)(v13 + 16);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 | 0x10, v56));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v60 = (unsigned int *)(v12 + 10);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 | 2, v60));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_294>(JSC::JSGlobalObject::init(JSC::VM &)::$_294 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t Structure;
  JSC::Structure *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  JSC::Structure *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  JSC::VM *v42;
  JSC::JSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  unint64_t v54;
  uint64_t result;
  int v56;
  _BYTE *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t (*v61)(uint64_t *);
  uint64_t *v62;
  void (*v63)(uint64_t *);
  uint64_t *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t **v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  JSC::VM *v77;
  _QWORD *v78;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v65 = (unsigned int *)(v13 + 16);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 & 0xFFFFFFEF, v65));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = (unint64_t)a1[1];
  v69 = v16;
  v70 = v17;
  v71 = v9;
  v72 = a1;
  v74 = 0;
  v75 = 0;
  v73 = 0;
  v18 = *(_QWORD *)(v17 + 1504);
  if ((v18 & 1) != 0)
  {
    v61 = *(uint64_t (**)(uint64_t *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
    v62 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v17 & 8) != 0)
      v62 = (uint64_t *)(v17 - 16);
    v76 = *v62;
    v77 = (JSC::VM *)v17;
    v78 = (_QWORD *)(v17 + 1504);
    v18 = v61(&v76);
  }
  if (*(_QWORD *)(v18 + 48) == 2)
    v19 = 0;
  else
    v19 = *(_QWORD *)(v18 + 48);
  Structure = JSC::WebAssemblyCompileErrorPrototype::createStructure(v16, (JSC::VM *)v17, v19, a5, a6, a7, a8, a9, a2);
  v73 = JSC::WebAssemblyCompileErrorPrototype::create((JSC::WebAssemblyCompileErrorPrototype *)v16, (JSC::VM *)v17, Structure, v21, v22, v23, v24, v25);
  v32 = (JSC::Structure *)JSC::ErrorInstance::createStructure(v16, (JSC::VM *)v17, v73, v26, v27, v28, v29, v30, v31);
  JSC::LazyClassStructure::Initializer::setStructure(&v69, v32);
  v39 = v70;
  v40 = *(_QWORD *)(v70 + 1504);
  if ((v40 & 1) != 0)
  {
    v63 = *(void (**)(uint64_t *))(v40 & 0xFFFFFFFFFFFFFFFCLL);
    v64 = (uint64_t *)(v70 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v70 & 8) != 0)
      v64 = (uint64_t *)(v70 - 16);
    v76 = *v64;
    v77 = (JSC::VM *)v70;
    v78 = (_QWORD *)(v70 + 1504);
    v63(&v76);
  }
  v41 = v69;
  v42 = (JSC::VM *)JSC::WebAssemblyCompileErrorConstructor::createStructure(v69, (JSC::VM *)v39, *(_QWORD *)(v39 + 1512), v33, v34, v35, v36, v37, v38);
  v43 = (JSC::JSObject *)v73;
  v49 = JSC::WebAssemblyCompileErrorConstructor::create((JSC *)v41, v42, v73, v44, v45, v46, v47, v48);
  if (!v74)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B1E4);
  }
  if (!v43)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B204);
  }
  if (v75)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B224);
  }
  v54 = v49;
  v75 = v49;
  JSC::JSObject::putDirectWithoutTransition(v43, (uint64_t)v41, *(_QWORD *)(v41[5244] + 1080), v49, 4, v50, v51, v52, v53);
  v71[1] = v54;
  if (v54 && *((_DWORD *)v41 + 190) >= *(unsigned __int8 *)(v39 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v41 + 24), v39);
  result = *a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B264);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B284);
  }
  v56 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v56;
  if (!v56 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v57 = v13 - 64;
      v58 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v57 + 2) = v58;
      *((_QWORD *)v57 + 4) = v58;
      if (v58)
      {
        v59 = (unsigned int *)(v13 + 16);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 | 0x10, v59));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v67 = (unsigned int *)(v12 + 10);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 | 2, v67));
    }
  }
  return result;
}

uint64_t JSC::JSGlobalObject::errorPrototype(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  v1 = *(_QWORD *)(this + 1504);
  if ((v1 & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v5 = (_QWORD *)(this - 16);
    v6[0] = *v5;
    v6[1] = this;
    v6[2] = this + 1504;
    v1 = v4(v6);
  }
  v2 = *(_QWORD *)(v1 + 48);
  if (v2 == 2)
    return 0;
  else
    return v2;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_295>(JSC::JSGlobalObject::init(JSC::VM &)::$_295 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  JSC::Structure *v30;
  JSC::VM *v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  JSC::VM *v39;
  JSC::JSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  unint64_t v51;
  uint64_t result;
  int v53;
  _BYTE *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unint64_t *v62;
  JSC::VM *v63;
  uint64_t *v64;
  unint64_t **v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v58 = (unsigned int *)(v13 + 16);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 & 0xFFFFFFEF, v58));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  v62 = v16;
  v63 = (JSC::VM *)v17;
  v64 = v9;
  v65 = a1;
  v67 = 0;
  v68 = 0;
  Structure = JSC::WebAssemblyExceptionPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v66 = JSC::WebAssemblyExceptionPrototype::create((JSC::WebAssemblyExceptionPrototype *)v16, (JSC::VM *)v17, Structure, v19, v20, v21, v22, v23);
  v30 = (JSC::Structure *)JSC::JSWebAssemblyException::createStructure(v16, (JSC::VM *)v17, v66, v24, v25, v26, v27, v28, v29);
  JSC::LazyClassStructure::Initializer::setStructure(&v62, v30);
  v32 = v62;
  v31 = v63;
  v39 = (JSC::VM *)JSC::WebAssemblyExceptionConstructor::createStructure(v62, v63, *((_QWORD *)v63 + 83), v33, v34, v35, v36, v37, v38);
  v40 = (JSC::JSObject *)v66;
  v46 = JSC::WebAssemblyExceptionConstructor::create((JSC *)v32, v39, v66, v41, v42, v43, v44, v45);
  if (!v67)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B528);
  }
  if (!v40)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B548);
  }
  if (v68)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B568);
  }
  v51 = v46;
  v68 = v46;
  JSC::JSObject::putDirectWithoutTransition(v40, (uint64_t)v32, *(_QWORD *)(v32[5244] + 1080), v46, 4, v47, v48, v49, v50);
  v64[1] = v51;
  if (v51 && *((_DWORD *)v32 + 190) >= *((unsigned __int8 *)v31 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v32 + 24), (unint64_t)v31);
  result = *a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B588);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B5C8);
  }
  v53 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v53;
  if (!v53 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v54 = v13 - 64;
      v55 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v54 + 2) = v55;
      *((_QWORD *)v54 + 4) = v55;
      if (v55)
      {
        v56 = (unsigned int *)(v13 + 16);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 | 0x10, v56));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v60 = (unsigned int *)(v12 + 10);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 | 2, v60));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_296>(JSC::JSGlobalObject::init(JSC::VM &)::$_296 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  JSC::Structure *v30;
  JSC::VM *v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  JSC::VM *v39;
  JSC::JSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  unint64_t v51;
  uint64_t result;
  int v53;
  _BYTE *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unint64_t *v62;
  JSC::VM *v63;
  uint64_t *v64;
  unint64_t **v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v58 = (unsigned int *)(v13 + 16);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 & 0xFFFFFFEF, v58));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  v62 = v16;
  v63 = (JSC::VM *)v17;
  v64 = v9;
  v65 = a1;
  v67 = 0;
  v68 = 0;
  Structure = JSC::WebAssemblyGlobalPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v66 = JSC::WebAssemblyGlobalPrototype::create((JSC::WebAssemblyGlobalPrototype *)v16, (JSC::VM *)v17, Structure, v19, v20, v21, v22, v23);
  v30 = (JSC::Structure *)JSC::JSWebAssemblyGlobal::createStructure(v16, (JSC::VM *)v17, v66, v24, v25, v26, v27, v28, v29);
  JSC::LazyClassStructure::Initializer::setStructure(&v62, v30);
  v32 = v62;
  v31 = v63;
  v39 = (JSC::VM *)JSC::WebAssemblyGlobalConstructor::createStructure(v62, v63, *((_QWORD *)v63 + 83), v33, v34, v35, v36, v37, v38);
  v40 = (JSC::JSObject *)v66;
  v46 = JSC::WebAssemblyGlobalConstructor::create((JSC *)v32, v39, v66, v41, v42, v43, v44, v45);
  if (!v67)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B804);
  }
  if (!v40)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B824);
  }
  if (v68)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B844);
  }
  v51 = v46;
  v68 = v46;
  JSC::JSObject::putDirectWithoutTransition(v40, (uint64_t)v32, *(_QWORD *)(v32[5244] + 1080), v46, 4, v47, v48, v49, v50);
  v64[1] = v51;
  if (v51 && *((_DWORD *)v32 + 190) >= *((unsigned __int8 *)v31 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v32 + 24), (unint64_t)v31);
  result = *a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B864);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0B8A4);
  }
  v53 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v53;
  if (!v53 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v54 = v13 - 64;
      v55 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v54 + 2) = v55;
      *((_QWORD *)v54 + 4) = v55;
      if (v55)
      {
        v56 = (unsigned int *)(v13 + 16);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 | 0x10, v56));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v60 = (unsigned int *)(v12 + 10);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 | 2, v60));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_297>(JSC::JSGlobalObject::init(JSC::VM &)::$_297 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  JSC::VM *v18;
  unint64_t v19;
  unint64_t SlowCase;
  JSC::Structure *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::VM *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  unint64_t v45;
  JSC::VM *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::JSObject *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  unint64_t v61;
  uint64_t result;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  JSC::VM *v85;
  JSC::VM *v86;
  uint64_t *v87;
  uint64_t *v88;
  JSC::JSObject *v89;
  uint64_t v90;
  unint64_t v91;
  int v92;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v84 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v71 = (unsigned int *)(v13 + 16);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 & 0xFFFFFFEF, v71));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = (JSC::VM *)a1[1];
  v85 = (JSC::VM *)v16;
  v86 = v18;
  v87 = v9;
  v88 = a1;
  v90 = 0;
  v91 = 0;
  v89 = 0;
  v19 = *((_QWORD *)v18 + 82);
  v92 = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v68 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v68);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v68;
LABEL_10:
    *v17 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v75, v76, v77);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, (uint64_t)v18, v19, (uint64_t)&v92, (unint64_t)&JSC::WebAssemblyInstancePrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v26 = JSC::WebAssemblyInstancePrototype::create((JSC::WebAssemblyInstancePrototype *)v16, v18, SlowCase, v21, v22, v23, v24, v25);
  v35 = v26;
  v89 = (JSC::JSObject *)v26;
  v92 = 74;
  if ((v26 & 0xFFFE000000000002) == 0 && v26 && *(unsigned __int8 *)(v26 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v26, (JSC::VM *)v16, v34, v28, v29, v30, v31, v32, v33);
  v36 = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_18;
  v36 = *(_QWORD *)(v16 + 40152);
  if ((v36 & 1) == 0)
  {
    v69 = *(_QWORD *)(v36 + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = v36 + HIDWORD(v69);
    *(_QWORD *)(v16 + 40152) = v36 + (int)v69;
LABEL_18:
    *v17 = v36 + 128;
    goto LABEL_19;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v27, v28, v29, v30, v31, v32, v33);
  v36 = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v78, v79, v80);
LABEL_19:
  *(_DWORD *)v36 = 0;
  JSC::Structure::Structure(v36, v16, (uint64_t)v18, v35, (uint64_t)&v92, (unint64_t)&JSC::JSWebAssemblyInstance::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v85, (JSC::Structure *)v36);
  v46 = v85;
  v45 = (unint64_t)v86;
  v47 = *((_QWORD *)v86 + 83);
  v48 = (unint64_t *)((char *)v85 + 40136);
  v92 = 67099;
  if ((v47 & 0xFFFE000000000002) == 0 && v47 && *(unsigned __int8 *)(v47 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v47, v85, v44, v38, v39, v40, v41, v42, v43);
  v49 = *v48;
  if (*v48 >= v48[1])
  {
    v49 = v48[2];
    if ((v49 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v46, v37, v38, v39, v40, v41, v42, v43);
      v49 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v46 + 40112, (uint64_t)v46 + 192, 128, 0, 0, v81, v82, v83);
      goto LABEL_27;
    }
    v70 = *(_QWORD *)(v49 + 8) ^ v48[3];
    v48[1] = v49 + HIDWORD(v70);
    v48[2] = v49 + (int)v70;
  }
  *v48 = v49 + 128;
LABEL_27:
  *(_DWORD *)v49 = 0;
  JSC::Structure::Structure(v49, (uint64_t)v46, v45, v47, (uint64_t)&v92, (unint64_t)&JSC::WebAssemblyInstanceConstructor::s_info, 0, 0);
  if (*((_BYTE *)v46 + 755))
    __dmb(0xAu);
  v55 = v89;
  v56 = JSC::WebAssemblyInstanceConstructor::create(v46, v49, (uint64_t)v89, v50, v51, v52, v53, v54);
  if (!v90)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0BCD8);
  }
  if (!v55)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0BCF8);
  }
  if (v91)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0BD18);
  }
  v61 = v56;
  v91 = v56;
  JSC::JSObject::putDirectWithoutTransition(v55, (uint64_t)v46, *(_QWORD *)(v48[227] + 1080), v56, 4, v57, v58, v59, v60);
  v87[1] = v61;
  if (v61 && *((_DWORD *)v46 + 190) >= *(unsigned __int8 *)(v45 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v46 + 192, v45);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0BD38);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0BD78);
  }
  v63 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v63;
  if (!v63 && v84[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v64 = v84 - 64;
      v65 = *((_QWORD *)v84 - 5);
      *((_QWORD *)v64 + 2) = v65;
      *((_QWORD *)v64 + 4) = v65;
      if (v65)
      {
        v66 = (unsigned int *)(v84 + 16);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 | 0x10, v66));
      }
      if (v84[93379])
        v84[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v73 = (unsigned int *)(v12 + 80);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 | 2, v73));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_298>(JSC::JSGlobalObject::init(JSC::VM &)::$_298 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t Structure;
  JSC::Structure *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  JSC::Structure *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  JSC::VM *v42;
  JSC::JSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  unint64_t v54;
  uint64_t result;
  int v56;
  _BYTE *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t (*v61)(uint64_t *);
  uint64_t *v62;
  void (*v63)(uint64_t *);
  uint64_t *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t **v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  JSC::VM *v77;
  _QWORD *v78;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v65 = (unsigned int *)(v13 + 16);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 & 0xFFFFFFEF, v65));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = (unint64_t)a1[1];
  v69 = v16;
  v70 = v17;
  v71 = v9;
  v72 = a1;
  v74 = 0;
  v75 = 0;
  v73 = 0;
  v18 = *(_QWORD *)(v17 + 1504);
  if ((v18 & 1) != 0)
  {
    v61 = *(uint64_t (**)(uint64_t *))(v18 & 0xFFFFFFFFFFFFFFFCLL);
    v62 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v17 & 8) != 0)
      v62 = (uint64_t *)(v17 - 16);
    v76 = *v62;
    v77 = (JSC::VM *)v17;
    v78 = (_QWORD *)(v17 + 1504);
    v18 = v61(&v76);
  }
  if (*(_QWORD *)(v18 + 48) == 2)
    v19 = 0;
  else
    v19 = *(_QWORD *)(v18 + 48);
  Structure = JSC::WebAssemblyLinkErrorPrototype::createStructure(v16, (JSC::VM *)v17, v19, a5, a6, a7, a8, a9, a2);
  v73 = JSC::WebAssemblyLinkErrorPrototype::create((JSC::WebAssemblyLinkErrorPrototype *)v16, (JSC::VM *)v17, Structure, v21, v22, v23, v24, v25);
  v32 = (JSC::Structure *)JSC::ErrorInstance::createStructure(v16, (JSC::VM *)v17, v73, v26, v27, v28, v29, v30, v31);
  JSC::LazyClassStructure::Initializer::setStructure(&v69, v32);
  v39 = v70;
  v40 = *(_QWORD *)(v70 + 1504);
  if ((v40 & 1) != 0)
  {
    v63 = *(void (**)(uint64_t *))(v40 & 0xFFFFFFFFFFFFFFFCLL);
    v64 = (uint64_t *)(v70 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v70 & 8) != 0)
      v64 = (uint64_t *)(v70 - 16);
    v76 = *v64;
    v77 = (JSC::VM *)v70;
    v78 = (_QWORD *)(v70 + 1504);
    v63(&v76);
  }
  v41 = v69;
  v42 = (JSC::VM *)JSC::WebAssemblyLinkErrorConstructor::createStructure(v69, (JSC::VM *)v39, *(_QWORD *)(v39 + 1512), v33, v34, v35, v36, v37, v38);
  v43 = (JSC::JSObject *)v73;
  v49 = JSC::WebAssemblyLinkErrorConstructor::create((JSC *)v41, v42, v73, v44, v45, v46, v47, v48);
  if (!v74)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0C13CLL);
  }
  if (!v43)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0C15CLL);
  }
  if (v75)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0C17CLL);
  }
  v54 = v49;
  v75 = v49;
  JSC::JSObject::putDirectWithoutTransition(v43, (uint64_t)v41, *(_QWORD *)(v41[5244] + 1080), v49, 4, v50, v51, v52, v53);
  v71[1] = v54;
  if (v54 && *((_DWORD *)v41 + 190) >= *(unsigned __int8 *)(v39 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v41 + 24), v39);
  result = *a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0C1BCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0C1DCLL);
  }
  v56 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v56;
  if (!v56 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v57 = v13 - 64;
      v58 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v57 + 2) = v58;
      *((_QWORD *)v57 + 4) = v58;
      if (v58)
      {
        v59 = (unsigned int *)(v13 + 16);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 | 0x10, v59));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v67 = (unsigned int *)(v12 + 10);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 | 2, v67));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_299>(JSC::JSGlobalObject::init(JSC::VM &)::$_299 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  JSC::VM *v18;
  unint64_t v19;
  unint64_t SlowCase;
  JSC::Structure *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::VM *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  unint64_t v45;
  JSC::VM *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::JSObject *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  unint64_t v61;
  uint64_t result;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  JSC::VM *v85;
  JSC::VM *v86;
  uint64_t *v87;
  uint64_t *v88;
  JSC::JSObject *v89;
  uint64_t v90;
  unint64_t v91;
  int v92;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v84 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v71 = (unsigned int *)(v13 + 16);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 & 0xFFFFFFEF, v71));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = (JSC::VM *)a1[1];
  v85 = (JSC::VM *)v16;
  v86 = v18;
  v87 = v9;
  v88 = a1;
  v90 = 0;
  v91 = 0;
  v89 = 0;
  v19 = *((_QWORD *)v18 + 82);
  v92 = 8215;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v68 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v68);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v68;
LABEL_10:
    *v17 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v75, v76, v77);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, (uint64_t)v18, v19, (uint64_t)&v92, (unint64_t)&JSC::WebAssemblyMemoryPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v26 = JSC::WebAssemblyMemoryPrototype::create((JSC::WebAssemblyMemoryPrototype *)v16, v18, SlowCase, v21, v22, v23, v24, v25);
  v35 = v26;
  v89 = (JSC::JSObject *)v26;
  v92 = 23;
  if ((v26 & 0xFFFE000000000002) == 0 && v26 && *(unsigned __int8 *)(v26 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v26, (JSC::VM *)v16, v34, v28, v29, v30, v31, v32, v33);
  v36 = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_18;
  v36 = *(_QWORD *)(v16 + 40152);
  if ((v36 & 1) == 0)
  {
    v69 = *(_QWORD *)(v36 + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = v36 + HIDWORD(v69);
    *(_QWORD *)(v16 + 40152) = v36 + (int)v69;
LABEL_18:
    *v17 = v36 + 128;
    goto LABEL_19;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v27, v28, v29, v30, v31, v32, v33);
  v36 = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v78, v79, v80);
LABEL_19:
  *(_DWORD *)v36 = 0;
  JSC::Structure::Structure(v36, v16, (uint64_t)v18, v35, (uint64_t)&v92, (unint64_t)&JSC::JSWebAssemblyMemory::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v85, (JSC::Structure *)v36);
  v46 = v85;
  v45 = (unint64_t)v86;
  v47 = *((_QWORD *)v86 + 83);
  v48 = (unint64_t *)((char *)v85 + 40136);
  v92 = 67099;
  if ((v47 & 0xFFFE000000000002) == 0 && v47 && *(unsigned __int8 *)(v47 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v47, v85, v44, v38, v39, v40, v41, v42, v43);
  v49 = *v48;
  if (*v48 >= v48[1])
  {
    v49 = v48[2];
    if ((v49 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v46, v37, v38, v39, v40, v41, v42, v43);
      v49 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v46 + 40112, (uint64_t)v46 + 192, 128, 0, 0, v81, v82, v83);
      goto LABEL_27;
    }
    v70 = *(_QWORD *)(v49 + 8) ^ v48[3];
    v48[1] = v49 + HIDWORD(v70);
    v48[2] = v49 + (int)v70;
  }
  *v48 = v49 + 128;
LABEL_27:
  *(_DWORD *)v49 = 0;
  JSC::Structure::Structure(v49, (uint64_t)v46, v45, v47, (uint64_t)&v92, (unint64_t)&JSC::WebAssemblyMemoryConstructor::s_info, 0, 0);
  if (*((_BYTE *)v46 + 755))
    __dmb(0xAu);
  v55 = v89;
  v56 = JSC::WebAssemblyMemoryConstructor::create(v46, v49, (uint64_t)v89, v50, v51, v52, v53, v54);
  if (!v90)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0C610);
  }
  if (!v55)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0C630);
  }
  if (v91)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0C650);
  }
  v61 = v56;
  v91 = v56;
  JSC::JSObject::putDirectWithoutTransition(v55, (uint64_t)v46, *(_QWORD *)(v48[227] + 1080), v56, 4, v57, v58, v59, v60);
  v87[1] = v61;
  if (v61 && *((_DWORD *)v46 + 190) >= *(unsigned __int8 *)(v45 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v46 + 192, v45);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0C670);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0C6B0);
  }
  v63 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v63;
  if (!v63 && v84[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v64 = v84 - 64;
      v65 = *((_QWORD *)v84 - 5);
      *((_QWORD *)v64 + 2) = v65;
      *((_QWORD *)v64 + 4) = v65;
      if (v65)
      {
        v66 = (unsigned int *)(v84 + 16);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 | 0x10, v66));
      }
      if (v84[93379])
        v84[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v73 = (unsigned int *)(v12 + 80);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 | 2, v73));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_300>(JSC::JSGlobalObject::init(JSC::VM &)::$_300 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  JSC::VM *v18;
  unint64_t v19;
  unint64_t SlowCase;
  JSC::Structure *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::VM *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  unint64_t v45;
  JSC::VM *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  JSC::JSObject *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  unint64_t v61;
  uint64_t result;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  JSC::VM *v85;
  JSC::VM *v86;
  uint64_t *v87;
  uint64_t *v88;
  JSC::JSObject *v89;
  uint64_t v90;
  unint64_t v91;
  int v92;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 64;
  v14 = *(_DWORD *)(*a1 + 88);
  *(_DWORD *)(*a1 + 88) = v14 + 1;
  v84 = (_BYTE *)v13;
  if (!v14 && (v15 = *(_QWORD *)(v13 - 48)) != 0)
  {
    v16 = v12;
    if (*(_QWORD *)(v13 - 40) == v15)
    {
      *(_QWORD *)(v13 - 48) = 0;
      v71 = (unsigned int *)(v13 + 16);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 & 0xFFFFFFEF, v71));
      *(_BYTE *)(v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  v17 = (unint64_t *)(v16 + 40136);
  *v9 = v10 | 2;
  v18 = (JSC::VM *)a1[1];
  v85 = (JSC::VM *)v16;
  v86 = v18;
  v87 = v9;
  v88 = a1;
  v90 = 0;
  v91 = 0;
  v89 = 0;
  v19 = *((_QWORD *)v18 + 82);
  v92 = 23;
  if ((v19 & 0xFFFE000000000002) == 0 && v19 && *(unsigned __int8 *)(v19 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v19, (JSC::VM *)v16, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_10;
  SlowCase = *(_QWORD *)(v16 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v68 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = SlowCase + HIDWORD(v68);
    *(_QWORD *)(v16 + 40152) = SlowCase + (int)v68;
LABEL_10:
    *v17 = SlowCase + 128;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM((JSC *)v16, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v75, v76, v77);
LABEL_11:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, v16, (uint64_t)v18, v19, (uint64_t)&v92, (unint64_t)&JSC::WebAssemblyModulePrototype::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  v26 = JSC::WebAssemblyModulePrototype::create((JSC::WebAssemblyModulePrototype *)v16, v18, SlowCase, v21, v22, v23, v24, v25);
  v35 = v26;
  v89 = (JSC::JSObject *)v26;
  v92 = 73;
  if ((v26 & 0xFFFE000000000002) == 0 && v26 && *(unsigned __int8 *)(v26 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v26, (JSC::VM *)v16, v34, v28, v29, v30, v31, v32, v33);
  v36 = *v17;
  if (*v17 < *(_QWORD *)(v16 + 40144))
    goto LABEL_18;
  v36 = *(_QWORD *)(v16 + 40152);
  if ((v36 & 1) == 0)
  {
    v69 = *(_QWORD *)(v36 + 8) ^ *(_QWORD *)(v16 + 40160);
    *(_QWORD *)(v16 + 40144) = v36 + HIDWORD(v69);
    *(_QWORD *)(v16 + 40152) = v36 + (int)v69;
LABEL_18:
    *v17 = v36 + 128;
    goto LABEL_19;
  }
  JSC::sanitizeStackForVM((JSC *)v16, v27, v28, v29, v30, v31, v32, v33);
  v36 = JSC::LocalAllocator::allocateSlowCase(v16 + 40112, v16 + 192, 128, 0, 0, v78, v79, v80);
LABEL_19:
  *(_DWORD *)v36 = 0;
  JSC::Structure::Structure(v36, v16, (uint64_t)v18, v35, (uint64_t)&v92, (unint64_t)&JSC::JSWebAssemblyModule::s_info, 0, 0);
  if (*(_BYTE *)(v16 + 755))
    __dmb(0xAu);
  JSC::LazyClassStructure::Initializer::setStructure(&v85, (JSC::Structure *)v36);
  v46 = v85;
  v45 = (unint64_t)v86;
  v47 = *((_QWORD *)v86 + 83);
  v48 = (unint64_t *)((char *)v85 + 40136);
  v92 = 75291;
  if ((v47 & 0xFFFE000000000002) == 0 && v47 && *(unsigned __int8 *)(v47 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v47, v85, v44, v38, v39, v40, v41, v42, v43);
  v49 = *v48;
  if (*v48 >= v48[1])
  {
    v49 = v48[2];
    if ((v49 & 1) != 0)
    {
      JSC::sanitizeStackForVM(v46, v37, v38, v39, v40, v41, v42, v43);
      v49 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v46 + 40112, (uint64_t)v46 + 192, 128, 0, 0, v81, v82, v83);
      goto LABEL_27;
    }
    v70 = *(_QWORD *)(v49 + 8) ^ v48[3];
    v48[1] = v49 + HIDWORD(v70);
    v48[2] = v49 + (int)v70;
  }
  *v48 = v49 + 128;
LABEL_27:
  *(_DWORD *)v49 = 0;
  JSC::Structure::Structure(v49, (uint64_t)v46, v45, v47, (uint64_t)&v92, (unint64_t)&JSC::WebAssemblyModuleConstructor::s_info, 0, 0);
  if (*((_BYTE *)v46 + 755))
    __dmb(0xAu);
  v55 = v89;
  v56 = JSC::WebAssemblyModuleConstructor::create(v46, v49, (uint64_t)v89, v50, v51, v52, v53, v54);
  if (!v90)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0CB64);
  }
  if (!v55)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0CB84);
  }
  if (v91)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0CBA4);
  }
  v61 = v56;
  v91 = v56;
  JSC::JSObject::putDirectWithoutTransition(v55, (uint64_t)v46, *(_QWORD *)(v48[227] + 1080), v56, 4, v57, v58, v59, v60);
  v87[1] = v61;
  if (v61 && *((_DWORD *)v46 + 190) >= *(unsigned __int8 *)(v45 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v46 + 192, v45);
  result = *(_QWORD *)a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0CBC4);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0CC04);
  }
  v63 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v63;
  if (!v63 && v84[93377])
  {
    if (*(_BYTE *)(v12 + 86))
    {
      v64 = v84 - 64;
      v65 = *((_QWORD *)v84 - 5);
      *((_QWORD *)v64 + 2) = v65;
      *((_QWORD *)v64 + 4) = v65;
      if (v65)
      {
        v66 = (unsigned int *)(v84 + 16);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 | 0x10, v66));
      }
      if (v84[93379])
        v84[93378] = 1;
      *(_BYTE *)(v12 + 86) = 0;
    }
    else
    {
      v73 = (unsigned int *)(v12 + 80);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 | 2, v73));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_301>(JSC::JSGlobalObject::init(JSC::VM &)::$_301 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;

  v1 = (uint64_t *)a1[2];
  v2 = *v1;
  if ((*v1 & 2) != 0)
    return 0;
  v4 = *a1;
  v11 = v4;
  v5 = *(_DWORD *)(v4 + 88);
  *(_DWORD *)(v4 + 88) = v5 + 1;
  if (!v5)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      if (*(_QWORD *)(v4 + 24) == v6)
      {
        *(_QWORD *)(v4 + 16) = 0;
        v9 = (unsigned int *)(v4 + 80);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 & 0xFFFFFFEF, v9));
        *(_BYTE *)(v4 + 86) = 1;
        v1 = (uint64_t *)a1[2];
        v2 = *v1;
      }
    }
  }
  *v1 = v2 | 2;
  JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_301>(JSC::JSGlobalObject::init(JSC::VM &)::$_301 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}::operator()((__int128 *)a1);
  v7 = *(_QWORD *)a1[2];
  if ((v7 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0CD84);
  }
  if ((v7 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0CDA4);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v11);
  return v7;
}

void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_301>(JSC::JSGlobalObject::init(JSC::VM &)::$_301 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}::operator()(__int128 *a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *((_QWORD *)a1 + 2);
  v2 = *a1;
  v3 = v1;
  v4 = a1;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  JSC::JSGlobalObject::init(JSC::VM &)::$_301::operator()((uint64_t)&v2);
}

void JSC::JSGlobalObject::init(JSC::VM &)::$_301::operator()(uint64_t a1)
{
  unint64_t *v2;
  JSC::VM *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t Structure;
  JSC::Structure *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  JSC::Structure *v24;
  unint64_t v25;
  JSC *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  JSC::VM *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::JSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;

  v2 = *(unint64_t **)a1;
  v3 = *(JSC::VM **)(a1 + 8);
  v4 = JSC::JSGlobalObject::errorPrototype((unint64_t)v3);
  Structure = JSC::WebAssemblyRuntimeErrorPrototype::createStructure(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  v17 = (JSC::JSObject *)JSC::WebAssemblyRuntimeErrorPrototype::create((JSC::WebAssemblyRuntimeErrorPrototype *)v2, v3, Structure, v12, v13, v14, v15, v16);
  JSC::LazyClassStructure::Initializer::setPrototype((_QWORD *)a1, v17);
  v24 = (JSC::Structure *)JSC::ErrorInstance::createStructure(*(unint64_t **)a1, *(JSC::VM **)(a1 + 8), *(_QWORD *)(a1 + 32), v18, v19, v20, v21, v22, v23);
  JSC::LazyClassStructure::Initializer::setStructure((_QWORD *)a1, v24);
  v25 = JSC::LazyClassStructure::constructor((JSC::LazyClassStructure *)(*(_QWORD *)(a1 + 8) + 1504), *(_QWORD *)(a1 + 8));
  v26 = *(JSC **)a1;
  v33 = (JSC::VM *)JSC::WebAssemblyRuntimeErrorConstructor::createStructure(*(unint64_t **)a1, *(JSC::VM **)(a1 + 8), v25, v27, v28, v29, v30, v31, v32);
  v39 = (JSC::JSObject *)JSC::WebAssemblyRuntimeErrorConstructor::create(v26, v33, *(_QWORD *)(a1 + 32), v34, v35, v36, v37, v38);
  JSC::LazyClassStructure::Initializer::setConstructor((JSC::LazyClassStructure::Initializer *)a1, v39, v46, v40, v41, v42, v43, v44, v45);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_302>(JSC::JSGlobalObject::init(JSC::VM &)::$_302 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(unint64_t **a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t Structure;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  JSC::Structure *v30;
  JSC::VM *v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  JSC::VM *v39;
  JSC::JSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  unint64_t v51;
  uint64_t result;
  int v53;
  _BYTE *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unint64_t *v62;
  JSC::VM *v63;
  uint64_t *v64;
  unint64_t **v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  if ((*v9 & 2) != 0)
    return 0;
  v12 = *a1;
  v13 = *a1 + 8;
  v14 = *((_DWORD *)*a1 + 22);
  *((_DWORD *)*a1 + 22) = v14 + 1;
  if (!v14 && (v15 = *((_QWORD *)v13 - 6)) != 0)
  {
    v16 = v12;
    if (*((_QWORD *)v13 - 5) == v15)
    {
      *((_QWORD *)v13 - 6) = 0;
      v58 = (unsigned int *)(v13 + 16);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 & 0xFFFFFFEF, v58));
      *((_BYTE *)v12 + 86) = 1;
      v9 = (uint64_t *)a1[2];
      v10 = *v9;
      v16 = *a1;
    }
  }
  else
  {
    v16 = v12;
  }
  *v9 = v10 | 2;
  v17 = a1[1];
  v62 = v16;
  v63 = (JSC::VM *)v17;
  v64 = v9;
  v65 = a1;
  v67 = 0;
  v68 = 0;
  Structure = JSC::WebAssemblyStructPrototype::createStructure(v16, (JSC::VM *)v17, v17[82], a5, a6, a7, a8, a9, a2);
  v66 = JSC::WebAssemblyStructPrototype::create((JSC::WebAssemblyStructPrototype *)v16, (JSC::VM *)v17, Structure, v19, v20, v21, v22, v23);
  v30 = (JSC::Structure *)JSC::JSWebAssemblyStruct::createStructure(v16, (JSC::VM *)v17, v66, v24, v25, v26, v27, v28, v29);
  JSC::LazyClassStructure::Initializer::setStructure(&v62, v30);
  v32 = v62;
  v31 = v63;
  v39 = (JSC::VM *)JSC::WebAssemblyStructConstructor::createStructure(v62, v63, *((_QWORD *)v63 + 83), v33, v34, v35, v36, v37, v38);
  v40 = (JSC::JSObject *)v66;
  v46 = JSC::WebAssemblyStructConstructor::create((JSC *)v32, v39, v66, v41, v42, v43, v44, v45);
  if (!v67)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0D09CLL);
  }
  if (!v40)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0D0BCLL);
  }
  if (v68)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0D0DCLL);
  }
  v51 = v46;
  v68 = v46;
  JSC::JSObject::putDirectWithoutTransition(v40, (uint64_t)v32, *(_QWORD *)(v32[5244] + 1080), v46, 4, v47, v48, v49, v50);
  v64[1] = v51;
  if (v51 && *((_DWORD *)v32 + 190) >= *((unsigned __int8 *)v31 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(v32 + 24), (unint64_t)v31);
  result = *a1[2];
  if ((result & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0D0FCLL);
  }
  if ((result & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0D13CLL);
  }
  v53 = *((_DWORD *)v12 + 22) - 1;
  *((_DWORD *)v12 + 22) = v53;
  if (!v53 && v13[93377])
  {
    if (*((_BYTE *)v12 + 86))
    {
      v54 = v13 - 64;
      v55 = *((_QWORD *)v13 - 5);
      *((_QWORD *)v54 + 2) = v55;
      *((_QWORD *)v54 + 4) = v55;
      if (v55)
      {
        v56 = (unsigned int *)(v13 + 16);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 | 0x10, v56));
      }
      if (v13[93379])
        v13[93378] = 1;
      *((_BYTE *)v12 + 86) = 0;
    }
    else
    {
      v60 = (unsigned int *)(v12 + 10);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 | 2, v60));
    }
  }
  return result;
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_303>(JSC::JSGlobalObject::init(JSC::VM &)::$_303 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v18 = v11;
  v12 = *(_DWORD *)(v11 + 88);
  *(_DWORD *)(v11 + 88) = v12 + 1;
  if (!v12)
  {
    v13 = *(_QWORD *)(v11 + 16);
    if (v13)
    {
      if (*(_QWORD *)(v11 + 24) == v13)
      {
        *(_QWORD *)(v11 + 16) = 0;
        v16 = (unsigned int *)(v11 + 80);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 & 0xFFFFFFEF, v16));
        *(_BYTE *)(v11 + 86) = 1;
        v8 = (uint64_t *)a1[2];
        v9 = *v8;
      }
    }
  }
  *v8 = v9 | 2;
  JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_303>(JSC::JSGlobalObject::init(JSC::VM &)::$_303 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}::operator()((__int128 *)a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)a1[2];
  if ((v14 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0D23CLL);
  }
  if ((v14 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0D25CLL);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v18);
  return v14;
}

void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_303>(JSC::JSGlobalObject::init(JSC::VM &)::$_303 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}::operator()(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *((_QWORD *)a1 + 2);
  v9 = *a1;
  v10 = v8;
  v11 = a1;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  JSC::JSGlobalObject::init(JSC::VM &)::$_303::operator()((uint64_t)&v9, *(double *)&v9, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::JSGlobalObject::init(JSC::VM &)::$_303::operator()(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::WebAssemblyTablePrototype *v10;
  uint64_t *v11;
  uint64_t Structure;
  JSC::Structure *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  JSC::Structure *v25;
  JSC *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  JSC::VM *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::JSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;

  v10 = *(JSC::WebAssemblyTablePrototype **)a1;
  v11 = *(uint64_t **)(a1 + 8);
  Structure = JSC::WebAssemblyTablePrototype::createStructure(*(JSC::VM **)a1, (JSC::VM *)v11, v11[82], a2, a5, a6, a7, a8, a9);
  v18 = (JSC::JSObject *)JSC::WebAssemblyTablePrototype::create(v10, (JSC::VM *)v11, Structure, v13, v14, v15, v16, v17);
  JSC::LazyClassStructure::Initializer::setPrototype((_QWORD *)a1, v18);
  v25 = (JSC::Structure *)JSC::JSWebAssemblyTable::createStructure(*(JSC::VM **)a1, *(JSC::VM **)(a1 + 8), *(_QWORD *)(a1 + 32), v24, v19, v20, v21, v22, v23);
  JSC::LazyClassStructure::Initializer::setStructure((_QWORD *)a1, v25);
  v26 = *(JSC **)a1;
  v33 = (JSC::VM *)JSC::WebAssemblyTableConstructor::createStructure(*(JSC::VM **)a1, *(JSC::VM **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 664), v32, v27, v28, v29, v30, v31);
  v39 = (JSC::JSObject *)JSC::WebAssemblyTableConstructor::create(v26, v33, *(_QWORD *)(a1 + 32), v34, v35, v36, v37, v38);
  JSC::LazyClassStructure::Initializer::setConstructor((JSC::LazyClassStructure::Initializer *)a1, v39, v46, v40, v41, v42, v43, v44, v45);
}

uint64_t JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::callFunc<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_304>(JSC::JSGlobalObject::init(JSC::VM &)::$_304 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;

  v8 = (uint64_t *)a1[2];
  v9 = *v8;
  if ((*v8 & 2) != 0)
    return 0;
  v11 = *a1;
  v18 = v11;
  v12 = *(_DWORD *)(v11 + 88);
  *(_DWORD *)(v11 + 88) = v12 + 1;
  if (!v12)
  {
    v13 = *(_QWORD *)(v11 + 16);
    if (v13)
    {
      if (*(_QWORD *)(v11 + 24) == v13)
      {
        *(_QWORD *)(v11 + 16) = 0;
        v16 = (unsigned int *)(v11 + 80);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 & 0xFFFFFFEF, v16));
        *(_BYTE *)(v11 + 86) = 1;
        v8 = (uint64_t *)a1[2];
        v9 = *v8;
      }
    }
  }
  *v8 = v9 | 2;
  JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_304>(JSC::JSGlobalObject::init(JSC::VM &)::$_304 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}::operator()((__int128 *)a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)a1[2];
  if ((v14 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0D404);
  }
  if ((v14 & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198A0D424);
  }
  JSC::DeferTermination<(JSC::VMTraps::DeferAction)0>::~DeferTermination(&v18);
  return v14;
}

void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_304>(JSC::JSGlobalObject::init(JSC::VM &)::$_304 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}::operator()(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *((_QWORD *)a1 + 2);
  v9 = *a1;
  v10 = v8;
  v11 = a1;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  JSC::JSGlobalObject::init(JSC::VM &)::$_304::operator()((uint64_t)&v9, *(double *)&v9, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::JSGlobalObject::init(JSC::VM &)::$_304::operator()(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t *v10;
  unint64_t *v11;
  uint64_t Structure;
  JSC::Structure *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  JSC::Structure *v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  JSC::VM *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::JSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;

  v10 = *(unint64_t **)a1;
  v11 = *(unint64_t **)(a1 + 8);
  Structure = JSC::WebAssemblyTagPrototype::createStructure(*(unint64_t **)a1, (JSC::VM *)v11, v11[82], a5, a6, a7, a8, a9, a2);
  v18 = (JSC::JSObject *)JSC::WebAssemblyTagPrototype::create((JSC::WebAssemblyTagPrototype *)v10, (JSC::VM *)v11, Structure, v13, v14, v15, v16, v17);
  JSC::LazyClassStructure::Initializer::setPrototype((_QWORD *)a1, v18);
  v25 = (JSC::Structure *)JSC::JSWebAssemblyTag::createStructure(*(unint64_t **)a1, *(JSC::VM **)(a1 + 8), *(_QWORD *)(a1 + 32), v19, v20, v21, v22, v23, v24);
  JSC::LazyClassStructure::Initializer::setStructure((_QWORD *)a1, v25);
  v26 = *(unint64_t **)a1;
  v33 = (JSC::VM *)JSC::WebAssemblyTagConstructor::createStructure(*(unint64_t **)a1, *(JSC::VM **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 664), v27, v28, v29, v30, v31, v32);
  v39 = (JSC::JSObject *)JSC::WebAssemblyTagConstructor::create((JSC *)v26, v33, *(_QWORD *)(a1 + 32), v34, v35, v36, v37, v38);
  JSC::LazyClassStructure::Initializer::setConstructor((JSC::LazyClassStructure::Initializer *)a1, v39, v46, v40, v41, v42, v43, v44, v45);
}

uint64_t JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSGlobalObject>(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, uint64_t a8, double a9)
{
  char v10;
  int v11;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  JSC::VM *v37;
  uint64_t v38;
  _QWORD v39[3];

  v10 = a6;
  v11 = a5;
  v16 = *(_QWORD *)(a2 + 56);
  v37 = (JSC::VM *)v16;
  v17 = *(_QWORD *)(a1 + 24);
  v18 = (unsigned __int8 *)(v17 + 20);
  if (__ldaxr((unsigned __int8 *)(v17 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v17 + 20);
LABEL_4:
  ++*(_DWORD *)(v16 + 916);
  v20 = *(_QWORD *)(v17 + 8);
  if (!v20)
    goto LABEL_45;
  v21 = *(_DWORD *)(v20 - 8);
  v22 = *(_DWORD *)(a3 + 16);
  if ((v22 & 0x20) != 0)
    v22 = *(_DWORD *)(a3 + 32);
  v23 = v21 & (v22 >> 8);
  v24 = *(_QWORD *)(v20 + 16 * v23);
  if (v24 != a3)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v21;
      v24 = *(_QWORD *)(v20 + 16 * v23);
      ++v25;
      if (v24 == a3)
        goto LABEL_15;
    }
    v23 = *(unsigned int *)(v20 - 4);
  }
LABEL_15:
  if (v23 == *(_DWORD *)(v20 - 4))
    goto LABEL_45;
  v26 = *(_QWORD **)(v20 + 16 * v23 + 8);
  v27 = (unint64_t)v26;
  if ((v26 & 1) == 0)
    v27 = *v26 | 1;
  if ((v27 & 2) == 0 || (v10 & 1) != 0)
  {
    v28 = (v27 >> 6);
    if (v28 != 0xFFFFFFFF && *(_QWORD *)(a1 + 32) > v28)
    {
      if ((v26 & 1) != 0)
        v29 = 0;
      else
        v29 = v26[1];
      if (v28 >> 4 >= *(unsigned int *)(a1 + 52))
      {
        __break(0xC471u);
        JUMPOUT(0x198A0D7F8);
      }
      v30 = 0;
      v31 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * (v28 >> 4)) + 8 * ((v27 >> 6) & 0xF));
      v32 = 1;
      goto LABEL_26;
    }
LABEL_45:
    v32 = 0;
    v31 = 0;
    v29 = 0;
    v30 = 0;
    goto LABEL_26;
  }
  if (v11)
    JSC::throwTypeError(a2, &v37, (uint64_t)"Attempted to assign to readonly property.", 42);
  v32 = 0;
  v31 = 0;
  v29 = 0;
  *a7 = 0;
  v30 = 1;
LABEL_26:
  v33 = __ldxr(v18);
  if (v33 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, v18))
LABEL_30:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v18, 0, a3, a4, a5, a6, (uint64_t)a7, a8);
  v34 = *(_DWORD *)(v16 + 916) - 1;
  *(_DWORD *)(v16 + 916) = v34;
  if (*(unsigned __int8 *)(v16 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v35 = v34 == 0;
  else
    v35 = 0;
  if (v35)
  {
    *(_BYTE *)(v16 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v16 + 192, 0);
  }
  if (v32)
  {
    v38 = a3;
    *v31 = a4;
    if ((a4 & 0xFFFE000000000002) == 0
      && a1
      && a4
      && *(_DWORD *)(v16 + 760) >= *(unsigned __int8 *)(a1 + 7))
    {
      JSC::Heap::writeBarrierSlowPath(v16 + 192, a1);
    }
    if (v29)
    {
      v39[0] = &off_1E3583740;
      v39[1] = a1;
      v39[2] = &v38;
      if (*(_BYTE *)(v29 + 4))
      {
        if (*(_BYTE *)(v29 + 4) == 1)
          JSC::WatchpointSet::fireAllSlow(v29, (JSC::VM *)v16, v39, a4, a5, a6, (uint64_t)a7, a8, a9);
      }
      else
      {
        __dmb(0xAu);
        *(_BYTE *)(v29 + 4) = 1;
        __dmb(0xAu);
      }
    }
    v30 = 1;
    *a7 = 1;
  }
  return v30;
}

uint64_t JSC::`anonymous namespace'::ObjectsWithBrokenIndexingFinder<(JSC::`anonymous namespace'::BadTimeFinderMode)0>::operator()(uint64_t *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  int *v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  _DWORD *i;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  _BOOL4 v69;
  int v70;
  int v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  int *v83;
  void (**v84)(JSC::StringFireDetail *__hidden);
  const char *v85;
  uint64_t v86;
  uint64_t v87;

  if (a3 > 1)
    return 0;
  v86 = v8;
  v87 = v9;
  v11 = *((unsigned __int8 *)a2 + 5);
  if (v11 < 0x17)
    return 0;
  v83 = a2;
  if (v11 != 26)
    goto LABEL_30;
  v13 = *((_QWORD *)a2 + 3);
  if ((v13 & 1) == 0)
    goto LABEL_32;
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if ((v13 & 0xFFFFFFFFFFFFFFFELL) == 0)
    goto LABEL_32;
  v15 = *(_DWORD *)(v14 + 40) & 0xFFFFFFFE;
  if (!(_DWORD)v15)
    goto LABEL_32;
  v16 = 16 * v15;
  v17 = *(_BYTE *)(16 * v15 + 8);
  v18 = v17 & 0xF;
  v19 = v17 & 0xE;
  if (v18)
    v20 = v19 == 12;
  else
    v20 = 1;
  if (v20)
    goto LABEL_12;
  v23 = a1[1];
  if (v23 == *(_QWORD *)(v16 + 40))
  {
LABEL_23:
    v21 = 1;
    goto LABEL_24;
  }
  v24 = *(_QWORD *)(v16 + 48);
  if ((v24 & 0xFFFFFFFFFFFFFFFDLL) == 0)
  {
LABEL_12:
    v21 = 0;
    goto LABEL_24;
  }
  v25 = *(_DWORD *)v24;
  v26 = 16 * (*(_DWORD *)v24 & 0xFFFFFFFE);
  v27 = *(_QWORD *)(v26 + 0x28);
  if (v27 == v23)
    goto LABEL_23;
  if ((*(_DWORD *)(16 * (v25 & 0xFFFFFFFE) + 0x10) & 0x80000) != 0)
  {
    while (1)
    {
      v80 = 16 * (v25 & 0xFFFFFFFE);
      v81 = *(_QWORD *)(v80 + 0x28);
      if (v81 != v27)
        *((_BYTE *)a1 + 24) = 1;
      v20 = v81 == v23;
      v21 = v81 == v23;
      if (v20)
        break;
      v82 = *(int **)(v80 + 48);
      if (!v82)
        v82 = *(int **)(v24 + 16);
      if (v82 == (int *)2)
        break;
      v25 = *v82;
      v24 = (unint64_t)v82;
    }
  }
  else
  {
    do
    {
      v28 = *(_DWORD **)(v26 + 48);
      if (!v28)
        v28 = *(_DWORD **)(v24 + 16);
      v21 = v28 != (_DWORD *)2;
      if (v28 == (_DWORD *)2)
        break;
      v26 = 16 * (*v28 & 0xFFFFFFFE);
      v24 = (unint64_t)v28;
    }
    while (*(_QWORD *)(v26 + 0x28) != v23);
  }
LABEL_24:
  if (!*((_BYTE *)a1 + 24))
  {
    if (!v21)
      goto LABEL_32;
    *(_DWORD *)(v14 + 40) = 0;
    if ((v13 & 8) != 0)
      v29 = (uint64_t *)(v14 - 16);
    else
      v29 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFC000 | 8);
    v30 = *v29;
    v84 = &off_1E3583C90;
    v85 = "have a bad time breaking internal function allocation";
    JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(v14 + 32), v30);
    v11 = *((unsigned __int8 *)a2 + 5);
LABEL_30:
    if (v11 != 51 || *(_BYTE *)(*((_QWORD *)a2 + 256) + 4) == 2)
      goto LABEL_32;
    v39 = *((_QWORD *)a2 + 7);
    v40 = (unsigned __int8 *)(a2 + 498);
    if (__ldaxr((unsigned __int8 *)a2 + 1992))
    {
      __clrex();
    }
    else if (!__stxr(1u, v40))
    {
      goto LABEL_63;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(a2 + 498));
LABEL_63:
    v49 = *((_QWORD *)a2 + 247);
    if (v49)
    {
      v50 = *(unsigned int *)(v49 - 4);
      v51 = v49 + 40 * v50;
      if (*(_DWORD *)(v49 - 12))
      {
        v52 = *((_QWORD *)a2 + 247);
        if ((_DWORD)v50)
        {
          v53 = 40 * v50;
          v52 = *((_QWORD *)a2 + 247);
          while (WTF::HashTable<JSC::PrototypeKey,WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashMap<JSC::PrototypeKey,JSC::Weak<JSC::Structure>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::PrototypeKey>>::isEmptyOrDeletedBucket(v52))
          {
            v52 += 40;
            v53 -= 40;
            if (!v53)
            {
              v52 = v51;
              break;
            }
          }
        }
LABEL_72:
        if (v49)
          v54 = v49 + 40 * *(unsigned int *)(v49 - 4);
        else
          v54 = 0;
        if (v54 != v52)
        {
          v55 = 0;
          while (1)
          {
            v56 = *(uint64_t **)(v52 + 32);
            if (v56)
            {
              v57 = *v56;
              if (*v56)
              {
                if ((v56[1] & 3) == 0)
                {
                  if ((*(_BYTE *)(v57 + 8) & 0xF) != 0 && (*(_BYTE *)(v57 + 8) & 0xE) != 12)
                  {
                    v59 = a1[1];
                    if (v59 == *(_QWORD *)(v57 + 40))
                      goto LABEL_102;
                    v60 = *(_QWORD *)(v57 + 48);
                    if ((v60 & 0xFFFFFFFFFFFFFFFDLL) != 0)
                    {
                      v61 = *(_DWORD *)v60;
                      v62 = 16 * (*(_DWORD *)v60 & 0xFFFFFFFE);
                      v63 = *(_QWORD *)(v62 + 0x28);
                      if (v63 == v59)
                        goto LABEL_102;
                      if ((*(_DWORD *)(16 * (v61 & 0xFFFFFFFE) + 0x10) & 0x80000) != 0)
                      {
                        while (1)
                        {
                          v65 = 16 * (v61 & 0xFFFFFFFE);
                          v66 = *(_QWORD *)(v65 + 40);
                          if (v66 != v63)
                            *((_BYTE *)a1 + 24) = 1;
                          if (v66 == v59)
                            break;
                          v67 = *(int **)(v65 + 48);
                          if (!v67)
                            v67 = *(int **)(v60 + 16);
                          if (v67 == (int *)2)
                            goto LABEL_84;
                          v61 = *v67;
                          v60 = (unint64_t)v67;
                        }
LABEL_102:
                        if (*((_BYTE *)a1 + 24))
                          goto LABEL_120;
                        v55 = 1;
                        goto LABEL_104;
                      }
                      while (1)
                      {
                        v64 = *(_DWORD **)(v62 + 48);
                        if (!v64)
                          v64 = *(_DWORD **)(v60 + 16);
                        if (v64 == (_DWORD *)2)
                          break;
                        v62 = 16 * (*v64 & 0xFFFFFFFE);
                        v60 = (unint64_t)v64;
                        if (*(_QWORD *)(v62 + 0x28) == v59)
                          goto LABEL_102;
                      }
                    }
                  }
LABEL_84:
                  if (*((_BYTE *)a1 + 24))
                    goto LABEL_120;
                }
              }
            }
LABEL_104:
            v68 = v52 + 40;
            v52 = v51;
            if (v68 != v51)
            {
              v52 = v68;
              while (1)
              {
                v69 = *(_OWORD *)v52 == 0;
                v70 = *(_DWORD *)(v52 + 16);
                if (*(_OWORD *)v52 != 0 || v70 != 0)
                {
                  if (v70 != 1)
                    v69 = 0;
                  if (!v69)
                    break;
                }
                if (*(_QWORD *)(v52 + 24))
                  break;
                v52 += 40;
                if (v52 == v51)
                {
                  v52 = v51;
                  break;
                }
              }
            }
            if (v52 == v54)
              goto LABEL_120;
          }
        }
        v55 = 0;
LABEL_120:
        v72 = __ldxr(v40);
        if (v72 == 1)
        {
          if (!__stlxr(0, v40))
          {
LABEL_125:
            if (*((_BYTE *)a1 + 24))
              return 1;
            if (!v55)
            {
LABEL_32:
              v31 = v83;
              if ((v83[1] & 0xF) != 0 && (v83[1] & 0xE) != 12)
              {
                v33 = *v83;
                v34 = 16 * (*v83 & 0xFFFFFFFE);
                v35 = *(_QWORD *)(v34 + 0x28);
                v36 = a1[1];
                if (v35 != v36)
                {
                  if ((*(_DWORD *)(16 * (v33 & 0xFFFFFFFE) + 0x10) & 0x80000) == 0)
                  {
                    v37 = v83;
                    while (1)
                    {
                      v38 = *(_DWORD **)(v34 + 48);
                      if (!v38)
                        v38 = (_DWORD *)*((_QWORD *)v37 + 2);
                      if (v38 == (_DWORD *)2)
                        return *((unsigned __int8 *)a1 + 24);
                      v34 = 16 * (*v38 & 0xFFFFFFFE);
                      v37 = v38;
                      if (*(_QWORD *)(v34 + 0x28) == v36)
                        goto LABEL_56;
                    }
                  }
                  for (i = v83; ; i = v45)
                  {
                    v43 = 16 * (v33 & 0xFFFFFFFE);
                    v44 = *(_QWORD *)(v43 + 40);
                    if (v44 != v35)
                      *((_BYTE *)a1 + 24) = 1;
                    if (v44 == v36)
                      break;
                    v45 = *(_DWORD **)(v43 + 48);
                    if (!v45)
                      v45 = (_DWORD *)*((_QWORD *)i + 2);
                    if (v45 == (_DWORD *)2)
                      return *((unsigned __int8 *)a1 + 24);
                    v33 = *v45;
                  }
                }
LABEL_56:
                v46 = *a1;
                v47 = *(unsigned int *)(*a1 + 12);
                if ((_DWORD)v47 == *(_DWORD *)(*a1 + 8))
                {
                  v48 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)*a1, v47 + 1, (unint64_t)&v83);
                  v47 = *(unsigned int *)(v46 + 12);
                  *(_QWORD *)(*(_QWORD *)v46 + 8 * v47) = *(_QWORD *)v48;
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)v46 + 8 * v47) = v31;
                }
                *(_DWORD *)(v46 + 12) = v47 + 1;
                return *((unsigned __int8 *)a1 + 24);
              }
              return 0;
            }
            if (__ldaxr(v40))
            {
              __clrex();
            }
            else if (!__stxr(1u, v40))
            {
              goto LABEL_132;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(a2 + 498));
LABEL_132:
            v74 = *((_QWORD *)a2 + 247);
            if (v74)
            {
              *((_QWORD *)a2 + 247) = 0;
              v75 = *(unsigned int *)(v74 - 4);
              if ((_DWORD)v75)
              {
                v76 = v74 + 32;
                do
                {
                  if (*(_QWORD *)(v76 - 32))
                    v77 = 0;
                  else
                    v77 = *(_QWORD *)(v76 - 24) == 0;
                  v78 = v77 && *(_DWORD *)(v76 - 16) == 1;
                  if ((!v78 || *(_QWORD *)(v76 - 8)) && *(_QWORD *)v76)
                  {
                    *(_QWORD *)(*(_QWORD *)v76 + 8) = 3;
                    *(_QWORD *)v76 = 0;
                  }
                  v76 += 40;
                  --v75;
                }
                while (v75);
              }
              WTF::fastFree(v74 - 16, a2, a3, a4, a5, a6, a7, a8);
            }
            v79 = __ldxr(v40);
            if (v79 == 1)
            {
              if (!__stlxr(0, v40))
                goto LABEL_153;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 1992, 0, a3, a4, a5, a6, a7, a8);
LABEL_153:
            v84 = &off_1E3583C90;
            v85 = "Clearing StructureCache";
            JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)a2 + 292, v39);
            goto LABEL_32;
          }
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)a2 + 1992, 0, a3, a4, a5, a6, a7, a8);
        goto LABEL_125;
      }
      v52 = v49 + 40 * v50;
    }
    else
    {
      v52 = 0;
      LODWORD(v50) = 0;
    }
    v51 = v49 + 40 * v50;
    goto LABEL_72;
  }
  return 1;
}

void JSC::`anonymous namespace'::ObjectsWithBrokenIndexingFinder<(JSC::`anonymous namespace'::BadTimeFinderMode)1>::operator()(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  BOOL v39;
  int v40;
  uint64_t v42;
  int v43;
  uint64_t i;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  void (**v58)(JSC::StringFireDetail *__hidden);
  const char *v59;
  uint64_t v60;
  uint64_t v61;

  if (a3 > 1)
    return;
  v60 = v8;
  v61 = v9;
  v11 = *(unsigned __int8 *)(a2 + 5);
  if (v11 < 0x17)
    return;
  v56 = a1;
  v57 = a2;
  if (v11 == 26)
  {
    v13 = *(_QWORD *)(a2 + 24);
    if ((v13 & 1) == 0)
      goto LABEL_83;
    v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    if ((v13 & 0xFFFFFFFFFFFFFFFELL) == 0)
      goto LABEL_83;
    v15 = *(_DWORD *)(v14 + 40) & 0xFFFFFFFE;
    if (!(_DWORD)v15
    {
      goto LABEL_83;
    }
    *(_DWORD *)(v14 + 40) = 0;
    v16 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v16 = (uint64_t *)(v14 - 16);
    v17 = *v16;
    v58 = &off_1E3583C90;
    v59 = "have a bad time breaking internal function allocation";
    JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(v14 + 32), v17);
    v11 = *(unsigned __int8 *)(a2 + 5);
  }
  if (v11 == 51 && *(_BYTE *)(*(_QWORD *)(a2 + 2048) + 4) != 2)
  {
    v18 = *(_QWORD *)(a2 + 56);
    v19 = (unsigned __int8 *)(a2 + 1992);
    if (__ldaxr((unsigned __int8 *)(a2 + 1992)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v19))
    {
      goto LABEL_17;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 1992);
LABEL_17:
    v21 = *(_QWORD *)(a2 + 1976);
    if (v21)
    {
      v22 = *(unsigned int *)(v21 - 4);
      v23 = v21 + 40 * v22;
      if (*(_DWORD *)(v21 - 12))
      {
        v24 = *(_QWORD *)(a2 + 1976);
        if ((_DWORD)v22)
        {
          v25 = 40 * v22;
          v24 = *(_QWORD *)(a2 + 1976);
          while (WTF::HashTable<JSC::PrototypeKey,WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::PrototypeKey,JSC::Weak<JSC::Structure>>>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashMap<JSC::PrototypeKey,JSC::Weak<JSC::Structure>,WTF::DefaultHash<JSC::PrototypeKey>,WTF::HashTraits<JSC::PrototypeKey>,WTF::HashTraits<JSC::Weak<JSC::Structure>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::PrototypeKey>>::isEmptyOrDeletedBucket(v24))
          {
            v24 += 40;
            v25 -= 40;
            if (!v25)
            {
              v24 = v23;
              break;
            }
          }
        }
LABEL_26:
        if (v21)
          v26 = v21 + 40 * *(unsigned int *)(v21 - 4);
        else
          v26 = 0;
        if (v26 == v24)
        {
          v27 = 0;
        }
        else
        {
          v27 = 0;
          do
          {
            v28 = *(_QWORD *)(v24 + 32);
            if (v28)
            {
              a3 = *(_QWORD *)v28;
              if (*(_QWORD *)v28)
              {
                if ((*(_BYTE *)(v28 + 8) & 3) == 0
                {
                  v27 = 1;
                }
              }
            }
            v29 = v24 + 40;
            v24 = v23;
            if (v29 != v23)
            {
              v24 = v29;
              while (1)
              {
                v30 = *(_OWORD *)v24 == 0;
                v31 = *(_DWORD *)(v24 + 16);
                if (*(_OWORD *)v24 != 0 || v31 != 0)
                {
                  if (v31 != 1)
                    v30 = 0;
                  if (!v30)
                    break;
                }
                if (*(_QWORD *)(v24 + 24))
                  break;
                v24 += 40;
                if (v24 == v23)
                {
                  v24 = v23;
                  break;
                }
              }
            }
          }
          while (v24 != v26);
        }
        v33 = __ldxr(v19);
        if (v33 == 1)
        {
          if (!__stlxr(0, v19))
          {
LABEL_56:
            if (!v27)
              goto LABEL_83;
            if (__ldaxr(v19))
            {
              __clrex();
            }
            else if (!__stxr(1u, v19))
            {
              goto LABEL_61;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a2 + 1992);
LABEL_61:
            v35 = *(_QWORD *)(a2 + 1976);
            if (v35)
            {
              *(_QWORD *)(a2 + 1976) = 0;
              v36 = *(unsigned int *)(v35 - 4);
              if ((_DWORD)v36)
              {
                v37 = v35 + 32;
                do
                {
                  if (*(_QWORD *)(v37 - 32))
                    v38 = 0;
                  else
                    v38 = *(_QWORD *)(v37 - 24) == 0;
                  v39 = v38 && *(_DWORD *)(v37 - 16) == 1;
                  if ((!v39 || *(_QWORD *)(v37 - 8)) && *(_QWORD *)v37)
                  {
                    *(_QWORD *)(*(_QWORD *)v37 + 8) = 3;
                    *(_QWORD *)v37 = 0;
                  }
                  v37 += 40;
                  --v36;
                }
                while (v36);
              }
              WTF::fastFree(v35 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
            v40 = __ldxr(v19);
            if (v40 == 1)
            {
              if (!__stlxr(0, v19))
                goto LABEL_82;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 1992), 0, a3, a4, a5, a6, a7, a8);
LABEL_82:
            v58 = &off_1E3583C90;
            v59 = "Clearing StructureCache";
            JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(a2 + 2336), v18);
            goto LABEL_83;
          }
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(a2 + 1992), 0, a3, a4, a5, a6, a7, a8);
        goto LABEL_56;
      }
      v24 = v21 + 40 * v22;
    }
    else
    {
      v24 = 0;
      LODWORD(v22) = 0;
    }
    v23 = v21 + 40 * v22;
    goto LABEL_26;
  }
LABEL_83:
  if ((*(_BYTE *)(v57 + 4) & 0xF) != 0 && (*(_BYTE *)(v57 + 4) & 0xE) != 12)
  {
    v42 = *(_QWORD *)v56[2];
    if (v42)
    {
      v43 = *(_DWORD *)(v42 - 8);
      for (i = v57; ; i = v52)
      {
        v45 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        v46 = (~(v45 << 32) + v45) ^ ((unint64_t)(~(v45 << 32) + v45) >> 22);
        v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
        v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
        v49 = v43 & ((v48 >> 31) ^ v48);
        v50 = *(_QWORD *)(v42 + 8 * v49);
        if (v50 == v45)
          break;
        v51 = 1;
        while (v50)
        {
          v49 = (v49 + v51) & v43;
          v50 = *(_QWORD *)(v42 + 8 * v49);
          ++v51;
          if (v50 == v45)
            goto LABEL_98;
        }
        v52 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x30);
        if (!v52)
          v52 = *(_QWORD *)(i + 16);
        if (v52 == 2)
          return;
      }
LABEL_98:
      v53 = *a1;
      v54 = *(unsigned int *)(v53 + 12);
      if ((_DWORD)v54 == *(_DWORD *)(v53 + 8))
      {
        v55 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v53, v54 + 1, (unint64_t)&v57);
        v54 = *(unsigned int *)(v53 + 12);
        *(_QWORD *)(*(_QWORD *)v53 + 8 * v54) = *(_QWORD *)v55;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v53 + 8 * v54) = v57;
      }
      *(_DWORD *)(v53 + 12) = v54 + 1;
    }
  }
}

BOOL JSC::`anonymous namespace'::ObjectsWithBrokenIndexingFinder<(JSC::`anonymous namespace'::BadTimeFinderMode)1>::visit(JSC::JSObject *)::{lambda(JSC::Structure *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  if ((*(_BYTE *)(a3 + 8) & 0xF) == 0 || (*(_BYTE *)(a3 + 8) & 0xE) == 12)
    return 0;
  v5 = **(_QWORD **)(a1 + 16);
  if (!v5)
  {
LABEL_13:
    v14 = *(_QWORD *)(a3 + 48);
    if ((v14 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    {
      v15 = **(_QWORD **)(*(_QWORD *)a2 + 16);
      if (v15)
      {
        v16 = *(_DWORD *)(v15 - 8);
        while (1)
        {
          v17 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x28);
          v18 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v16 & ((v20 >> 31) ^ v20);
          v22 = *(_QWORD *)(v15 + 8 * v21);
          result = v22 == v17;
          if (v22 == v17)
            break;
          v23 = 1;
          while (v22)
          {
            v21 = (v21 + v23) & v16;
            v22 = *(_QWORD *)(v15 + 8 * v21);
            ++v23;
            if (v22 == v17)
              return 1;
          }
          v24 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
          if (!v24)
            v24 = *(_QWORD *)(v14 + 16);
          v14 = v24;
          if (v24 == 2)
            return result;
        }
        return 1;
      }
    }
    return 0;
  }
  v6 = *(_QWORD *)(a3 + 40);
  v7 = *(_DWORD *)(v5 - 8);
  v8 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(_QWORD *)(v5 + 8 * v11);
  if (v12 != v6)
  {
    v13 = 1;
    while (v12)
    {
      v11 = (v11 + v13) & v7;
      v12 = *(_QWORD *)(v5 + 8 * v11);
      ++v13;
      if (v12 == v6)
        return 1;
    }
    goto LABEL_13;
  }
  return 1;
}

void JSC::JSGlobalObject::visitChildrenImpl<JSC::SlotVisitor>(JSC::JSCell *,JSC::SlotVisitor &)::{lambda(JSC::JSGlobalObject::FunctionStructures &)#1}::operator()(uint64_t *a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;

  v10 = *a2 & 0xFFFFFFFE;
  if ((*a2 & 0xFFFFFFFE) != 0)
  {
    v11 = *a1;
    v12 = *(_DWORD *)(*a1 + 132);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v12)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v12, a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *(_QWORD *)(v11 + 168))
    {
      JSC::SlotVisitor::appendSlow(v11, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v13 = a2[1];
  v14 = v13 & 0xFFFFFFFE;
  if ((v13 & 0xFFFFFFFE) != 0)
  {
    v15 = *a1;
    v16 = *(_DWORD *)(*a1 + 132);
    if (*(_DWORD *)((16 * v14) & 0xFFFFFC000 | 0x20) != v16)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v14) & 0xFFFFFC000), v16, a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v14) & 0xFFFFFC000) + 8 * ((v14 >> 6) & 0xF) + 0x28) >> (v14 & 0x3E)) & 1) == 0
      || *(_QWORD *)(v15 + 168))
    {
      JSC::SlotVisitor::appendSlow(v15, 16 * v14, 0, a4, a5, a6, a7, a8);
    }
  }
  v17 = a2[2];
  v18 = v17 & 0xFFFFFFFE;
  if ((v17 & 0xFFFFFFFE) != 0)
  {
    v19 = *a1;
    v20 = *(_DWORD *)(v19 + 132);
    if (*(_DWORD *)((16 * v18) & 0xFFFFFC000 | 0x20) != v20)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v18) & 0xFFFFFC000), v20, a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v18) & 0xFFFFFC000) + 8 * ((v18 >> 6) & 0xF) + 0x28) >> (v18 & 0x3E)) & 1) == 0
      || *(_QWORD *)(v19 + 168))
    {
      JSC::SlotVisitor::appendSlow(v19, 16 * v18, 0, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t *JSC::JSGlobalObject::tryInstallSpeciesWatchpoint<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>>(JSC::JSObject *,JSC::JSObject *,std::unique_ptr<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>> &,std::unique_ptr<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>> &,JSC::InlineWatchpointSet&,JSC::JSGlobalObject::HasSpeciesProperty,JSC::GetterSetter *)::{lambda(void)#1}::operator()(uint64_t *result, JSC::VM *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t **v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = &off_1E3583C90;
  v15[1] = "Was not able to set up species watchpoint.";
  v9 = *result;
  if ((*result & 1) != 0)
  {
    *result = 5;
  }
  else
  {
    if (*(_BYTE *)(v9 + 4) == 1)
    {
      __dmb(0xAu);
      v11 = (uint64_t **)(v9 + 8);
      result = *(uint64_t **)(v9 + 8);
      *(_BYTE *)(v9 + 4) = 2;
      v12 = *((_DWORD *)a2 + 229);
      *((_DWORD *)a2 + 229) = v12 + 1;
      if (result != (uint64_t *)(v9 + 8))
      {
        do
        {
          v14 = *result;
          v13 = (uint64_t *)result[1];
          *v13 = *result;
          *(_QWORD *)(v14 + 8) = v13;
          *result = 0;
          result[1] = 0;
          JSC::Watchpoint::fire((unint64_t)result, a2, v15, a5, a6, a7, a8, a9, a3);
          result = *v11;
        }
        while (*v11 != (uint64_t *)v11);
        v12 = *((_DWORD *)a2 + 229) - 1;
      }
      *((_DWORD *)a2 + 229) = v12;
      __dmb(0xAu);
    }
    *(_BYTE *)(v9 + 4) = 2;
  }
  return result;
}

__n128 WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ObjectPropertyCondition&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 *v10;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::ObjectPropertyCondition,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v9;
  v10[1].n128_u64[0] = v9[1].n128_u64[0];
  *v10 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::dataLog<char [33],JSC::JSValue,char [2]>(JSC::JSValue *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  JSC::Structure *v5;
  unint64_t v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Uncaught Exception at run loop: ");
  v5 = 0;
  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 && (v6 & 0xFFFE000000000002) == 0)
    v5 = (JSC::Structure *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure(a1, v4, 0, v5);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Ref<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Ref<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::Ref<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::Ref<JSC::WatchpointSet,WTF::RawPtrTraits<JSC::WatchpointSet>,WTF::DefaultRefDerefTraits<JSC::WatchpointSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t **v73;
  uint64_t *i;
  uint64_t **v75;
  uint64_t *j;
  uint64_t **v77;
  uint64_t *k;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (WTF::StringImpl **)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24)
      {
        if (v25 != (WTF::StringImpl *)-1)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = *((_DWORD *)v25 + 4);
          if ((v28 & 0x20) != 0)
            v28 = *((_DWORD *)v25 + 8);
          v29 = 0;
          v30 = v28 >> 8;
          do
          {
            v31 = v30 & v27;
            v30 = ++v29 + v31;
          }
          while (*(_QWORD *)(v26 + 16 * v31));
          v32 = v26 + 16 * v31;
          v33 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v32 + 8) = 0;
          if (v33)
          {
            do
            {
              v40 = __ldaxr((unsigned int *)v33);
              v41 = v40 - 1;
            }
            while (__stlxr(v41, (unsigned int *)v33));
            if (!v41)
            {
              atomic_store(1u, (unsigned int *)v33);
              v73 = (uint64_t **)(v33 + 8);
              for (i = *(uint64_t **)(v33 + 8); i != (uint64_t *)v73; i = *v73)
              {
                v80 = *i;
                v79 = (uint64_t *)i[1];
                *v79 = *i;
                *(_QWORD *)(v80 + 8) = v79;
                *i = 0;
                i[1] = 0;
              }
              WTF::fastFree(v33, v15, v16, v17, v18, v19, v20, v21);
            }
          }
          v34 = *(WTF::StringImpl **)v32;
          *(_QWORD *)v32 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
            {
              WTF::StringImpl::~StringImpl(v34, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
            }
            else
            {
              *(_DWORD *)v34 -= 2;
            }
          }
          v35 = *v24;
          *v24 = 0;
          *(_QWORD *)v32 = v35;
          v36 = v11 + 16 * v22;
          v37 = *(_QWORD *)(v36 + 8);
          *(_QWORD *)(v36 + 8) = 0;
          *(_QWORD *)(v32 + 8) = v37;
          v38 = *(_QWORD *)(v36 + 8);
          *(_QWORD *)(v36 + 8) = 0;
          if (v38)
          {
            do
            {
              v42 = __ldaxr((unsigned int *)v38);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, (unsigned int *)v38));
            if (!v43)
            {
              atomic_store(1u, (unsigned int *)v38);
              v75 = (uint64_t **)(v38 + 8);
              for (j = *(uint64_t **)(v38 + 8); j != (uint64_t *)v75; j = *v75)
              {
                v82 = *j;
                v81 = (uint64_t *)j[1];
                *v81 = *j;
                *(_QWORD *)(v82 + 8) = v81;
                *j = 0;
                j[1] = 0;
              }
              WTF::fastFree(v38, v15, v16, v17, v18, v19, v20, v21);
            }
          }
          v39 = *v24;
          *v24 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 2)
            {
              WTF::StringImpl::~StringImpl(v39, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
            }
            else
            {
              *(_DWORD *)v39 -= 2;
            }
          }
          if (v24 == (WTF::StringImpl **)a3)
            v23 = v32;
        }
      }
      else
      {
        v44 = (unint64_t)v24[1];
        v24[1] = 0;
        if (v44)
        {
          do
          {
            v46 = __ldaxr((unsigned int *)v44);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, (unsigned int *)v44));
          if (!v47)
          {
            atomic_store(1u, (unsigned int *)v44);
            v77 = (uint64_t **)(v44 + 8);
            for (k = *(uint64_t **)(v44 + 8); k != (uint64_t *)v77; k = *v77)
            {
              v84 = *k;
              v83 = (uint64_t *)k[1];
              *v83 = *k;
              *(_QWORD *)(v84 + 8) = v83;
              *k = 0;
              k[1] = 0;
            }
            WTF::fastFree(v44, v15, v16, v17, v18, v19, v20, v21);
          }
        }
        v45 = *v24;
        *v24 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
          {
            WTF::StringImpl::~StringImpl(v45, (WTF::AtomStringImpl *)v15, v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
          }
          else
          {
            *(_DWORD *)v45 -= 2;
          }
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::add<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::ThreadSafeWeakPtrControlBlock *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::expand(a2, 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v21 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a3) & v13;
  v22 = (uint64_t *)(v12 + 16 * v21);
  v23 = *v22;
  v24 = *a3;
  if (*v22)
  {
    v35 = 0;
    v36 = 1;
    do
    {
      if (v23 == v24)
      {
        v37 = *a2;
        if (*a2)
          v38 = *(unsigned int *)(v37 - 4);
        else
          v38 = 0;
        v34 = 0;
        v33 = v37 + 16 * v38;
        goto LABEL_14;
      }
      if (v23 == -1)
        v35 = v22;
      v21 = (v21 + v36) & v13;
      v22 = (uint64_t *)(v12 + 16 * v21);
      v23 = *v22;
      ++v36;
    }
    while (*v22);
    if (v35)
    {
      *v35 = 0;
      v35[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v24 = *a3;
      v22 = v35;
    }
  }
  *v22 = v24;
  v25 = *a4;
  *a4 = 0;
  v26 = (WTF::ThreadSafeWeakPtrControlBlock *)v22[1];
  v22[1] = v25;
  if (v26)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v26, v14, v15, v16, v17, v18, v19, v20);
  v27 = *a2;
  if (*a2)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *a2;
  if (*a2)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 > 2 * v31)
      goto LABEL_13;
LABEL_26:
    v22 = WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::expand(a2, (uint64_t)v22, v15, v16, v17, v18, v19, v20);
    v29 = *a2;
    if (*a2)
      v32 = *(unsigned int *)(v29 - 4);
    else
      v32 = 0;
    goto LABEL_13;
  }
  if (3 * v32 <= 4 * v31)
    goto LABEL_26;
LABEL_13:
  v33 = v29 + 16 * v32;
  v34 = 1;
LABEL_14:
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v33;
  *(_BYTE *)(a1 + 16) = v34;
}

void _ZN3WTF9HashTableIPKN3JSC17DeferredWorkTimer10TicketDataENS_12KeyValuePairIS5_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS8_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISD_EENS_11DefaultHashIS5_EENS_7HashMapIS5_SC_SH_NS_10HashTraitsIS5_EENSJ_ISC_EENS_15HashTableTraitsEE18KeyValuePairTraitsESK_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS3_E24amortizedCleanupIfNeededEvEUlRT_E_EEbRKST_(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  WTF::ThreadSafeWeakPtrControlBlock **v16;
  WTF::ThreadSafeWeakPtrControlBlock *v17;
  WTF::ThreadSafeWeakPtrControlBlock *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v22;
  int v23;

  v8 = *a1;
  if (*a1)
  {
    v9 = *(_DWORD *)(v8 - 4);
    if (v9)
    {
      v11 = 0;
      v12 = v9 - 1;
      do
      {
        v13 = v12;
        v14 = (_QWORD *)(v8 + 16 * v12);
        if ((unint64_t)(*v14 + 1) >= 2)
        {
          v15 = v8 + 16 * v12;
          v17 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v15 + 8);
          v16 = (WTF::ThreadSafeWeakPtrControlBlock **)(v15 + 8);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v17, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
          {
            *v14 = -1;
            v18 = *v16;
            *v16 = 0;
            if (v18)
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v18, a2, a3, a4, a5, a6, a7, a8);
            ++v11;
          }
        }
        --v12;
      }
      while (v13);
      v19 = *a1;
      if (v11)
      {
        *(_DWORD *)(v19 - 16) += v11;
        v22 = *a1;
        if (*a1)
          v23 = *(_DWORD *)(v22 - 12);
        else
          v23 = 0;
        *(_DWORD *)(v22 - 12) = v23 - v11;
        v19 = *a1;
      }
      if (v19)
      {
        v20 = *(_DWORD *)(v19 - 4);
        if (6 * *(_DWORD *)(v19 - 12) < v20 && v20 >= 9)
          WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::shrinkToBestSize(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
}

_QWORD *WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

void JSC::JSGlobalObjectDebuggable::name(JSC::JSGlobalObjectDebuggable *this@<X0>, WTF::AtomStringImpl *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  WTF::StringImpl *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v10 = *(WTF::StringImpl **)(*((_QWORD *)this + 5) + 2000);
  if (v10)
  {
    v11 = *(_DWORD *)v10;
    v12 = *((_DWORD *)v10 + 1);
    *(_DWORD *)v10 += 2;
    if (v12)
    {
      v13 = v11 + 4;
      *(_DWORD *)v10 = v13;
      v14 = (uint64_t)v10;
    }
    else
    {
      v14 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v14 = 0x900000002;
      *(_QWORD *)(v14 + 8) = "JSContext";
      *(_DWORD *)(v14 + 16) = 4;
      v13 = *(_DWORD *)v10;
    }
    *a9 = v14;
    v15 = v13 - 2;
    if (v15)
    {
      *(_DWORD *)v10 = v15;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  else
  {
    v24 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v24 = 0x900000002;
    *(_QWORD *)(v24 + 8) = "JSContext";
    *(_DWORD *)(v24 + 16) = 4;
    *a9 = v24;
  }
}

void JSC::JSGlobalObjectDebuggable::connect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  char v10;
  char v11;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;

  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    v10 = a4;
    v11 = a3;
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v21, *(JSC::VM **)(v9 + 56), a3, a4, a5, a6, a7, a8, a9);
    Inspector::JSGlobalObjectInspectorController::connectFrontend(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 2024), a2, v11, v10);
    JSC::JSLockHolder::~JSLockHolder(&v21, v14, v15, v16, v17, v18, v19, v20);
  }
}

void JSC::JSGlobalObjectDebuggable::disconnect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;

  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v19, *(JSC::VM **)(v9 + 56), a3, a4, a5, a6, a7, a8, a9);
    Inspector::JSGlobalObjectInspectorController::disconnectFrontend(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 2024), a2);
    JSC::JSLockHolder::~JSLockHolder(&v19, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::JSGlobalObjectDebuggable::dispatchMessageFromRemote(uint64_t a1, const WTF::String *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;

  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v19, *(JSC::VM **)(v9 + 56), a3, a4, a5, a6, a7, a8, a9);
    Inspector::BackendDispatcher::dispatch(*(Inspector::BackendDispatcher **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 2024) + 104), a2);
    JSC::JSLockHolder::~JSLockHolder(&v19, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::JSGlobalObjectDebuggable::pauseWaitingForAutomaticInspection(JSC::JSGlobalObjectDebuggable *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 5);
  if (v8)
  {
    JSC::JSLock::DropAllLocks::DropAllLocks((JSC::JSLock::DropAllLocks *)&v23, *(JSC::VM **)(v8 + 56), a3, a4, a5, a6, a7, a8);
    Inspector::RemoteInspectionTarget::pauseWaitingForAutomaticInspection(this);
    if (v24)
    {
      JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v24 + 112), (uint64_t)&v23, v23, v10, v11, v12, v13, v14);
      v22 = (unsigned int *)v24;
      v24 = 0;
      if (v22)
        WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v22, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

void JSC::jsToNumber(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *i;
  unsigned int v5;
  int v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;

  if ((a2 & 0xFF00000000) != 0)
  {
    switch((_DWORD)a2)
    {
      case 1:
        return;
      case 2:
        if (*a1 == 45)
          return;
        break;
      case 0:
        return;
    }
    v3 = 0;
    for (i = a1; ; ++i)
    {
      v6 = a1[v3];
      if ((v6 - 9) >= 5 && v6 != 32 && v6 != 160)
        break;
      if (a2 == ++v3)
        return;
    }
    v7 = a2 - v3;
    v17 = i;
    v18 = v7;
    if (v7 >= 3 && v6 == 48)
    {
      v9 = (unint64_t)&a1[v3];
      v14 = a1[v3 + 1] & 0xDF;
      if (v14 != 66)
      {
        if (v14 == 88)
        {
          v15 = a1[v3 + 2];
          if ((v15 - 48) < 0xA || (v15 | 0x20u) - 97 <= 5)
          {
            JSC::jsHexIntegerLiteral<unsigned char>((unint64_t *)&v17);
            goto LABEL_70;
          }
        }
        else if (v14 == 79 && (a1[v3 + 2] & 0xF8) == 0x30)
        {
          JSC::jsOctalIntegerLiteral<unsigned char>((unint64_t *)&v17);
          goto LABEL_70;
        }
LABEL_74:
        JSC::jsStrDecimalLiteral<unsigned char>(&v17);
        goto LABEL_70;
      }
    }
    else
    {
      v19 = 0;
      v16 = a2;
      v8 = fast_float::from_chars_advanced<double,char>(i, &i[a2 - v3], &v19, 0x2E00000005);
      v9 = v8 - i;
      if (v8 == i)
      {
        v13 = a1[v3];
        if (v13 == 43)
        {
          v10 = v7 - 9;
          if (v7 - 9 > 0xFFFFFFFFFFFFFFF7
            || a1[v3 + 1] != 73
            || a1[v3 + 2] != 110
            || a1[v3 + 3] != 102
            || a1[v3 + 4] != 105
            || a1[v3 + 5] != 110
            || a1[v3 + 6] != 105
            || a1[v3 + 7] != 116
            || a1[v3 + 8] != 121)
          {
            goto LABEL_70;
          }
        }
        else
        {
          if (v13 != 45)
          {
            if (v13 == 73)
            {
              v10 = v7 - 8;
              if (v7 >= 8
                && a1[v3 + 1] == 110
                && a1[v3 + 2] == 102
                && a1[v3 + 3] == 105
                && a1[v3 + 4] == 110
                && a1[v3 + 5] == 105
                && a1[v3 + 6] == 116
                && a1[v3 + 7] == 121)
              {
                v9 = 8;
                goto LABEL_29;
              }
            }
LABEL_70:
            v10 = v18;
LABEL_30:
            if (v10)
            {
              v11 = v17;
              do
              {
                v12 = *v11;
                if ((v12 - 9) >= 5 && v12 != 32 && v12 != 160)
                  break;
                ++v11;
                --v10;
              }
              while (v10);
            }
            return;
          }
          v10 = v7 - 9;
          if (v7 - 9 > 0xFFFFFFFFFFFFFFF7
            || a1[v3 + 1] != 73
            || a1[v3 + 2] != 110
            || a1[v3 + 3] != 102
            || a1[v3 + 4] != 105
            || a1[v3 + 5] != 110
            || a1[v3 + 6] != 105
            || a1[v3 + 7] != 116
            || a1[v3 + 8] != 121)
          {
            goto LABEL_70;
          }
        }
        v9 = 9;
        goto LABEL_29;
      }
      if (v7 >= v9)
      {
        v10 = v16 + i - v8 - v3;
LABEL_29:
        v17 = &a1[v3 + v9];
        v18 = v10;
        goto LABEL_30;
      }
      __break(1u);
    }
    if ((*(_BYTE *)(v9 + 2) & 0xFE) == 0x30)
    {
      JSC::jsBinaryIntegerLiteral<unsigned char>((unint64_t *)&v17);
      goto LABEL_70;
    }
    goto LABEL_74;
  }
  if ((_DWORD)a2 == 1)
  {
    v5 = *(unsigned __int16 *)a1;
    if (v5 - 48 > 9 && v5 > 0xFF)
      u_charType(v5);
  }
  else if ((_DWORD)a2 != 2 || *(_WORD *)a1 != 45)
  {
    JSC::toDouble<char16_t>((uint64_t)a1, a2);
  }
}

uint64_t JSC::globalFuncEval(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int **v14;
  int *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  BOOL v20;
  unsigned int v21;
  JSC::CallFrame *v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  char v28;
  unsigned __int8 **v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  __int128 v49;
  _DWORD *v50;
  int *v51;
  int v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  double v61;
  WTF::StringImpl *v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  JSC::CallFrame *v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  unsigned __int8 *v79;
  int v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  unint64_t v87;
  BOOL v88;
  unsigned int v89;
  unint64_t v90;
  JSC::CallFrame *v91;
  unsigned __int8 *v92;
  int8x16_t v93;
  int8x16_t v94;
  uint8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  unsigned __int8 *v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  uint8x16_t v104;
  const WTF::String *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  unsigned __int8 *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(JSC *, uint64_t, WTF::StringImpl **, uint64_t);
  int *v122;
  char v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  const WTF::String *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::AtomStringImpl *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF::StringImpl *v140;
  const WTF::String *v141;
  unint64_t EvalError;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  JSC::CallFrame *v149;
  WTF::AtomStringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  WTF::AtomStringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  int v176;
  int v177;
  int v178;
  unint64_t v179;
  int v180;
  int v181;
  BOOL v182;
  unint64_t v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  WTF::AtomStringImpl *v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  JSC::CallFrame *v201;
  JSC::CallFrame *v202;
  char *v203;
  unsigned __int8 *v204;
  uint8x16_t v205;
  char v206;
  char v207;
  int v208;
  unsigned __int8 *v209;
  int v210;
  int v211;
  int v212;
  int v213;
  double v214;
  unsigned __int8 *v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  const char *v218;
  unsigned __int8 *v219;
  int v220;
  unsigned __int8 *v221;
  JSC::CallFrame *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  int v225;
  int v226;
  int v227;
  int64_t v228;
  int v229;
  BOOL v230;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  WTF::StringImpl *v249;
  uint64_t v250;
  const char *v251;
  unsigned __int8 *v252;
  int v253;
  unsigned __int8 *v254;
  uint64_t v255;
  unsigned int v256;
  BOOL v257;
  BOOL v258;
  BOOL v259;
  unint64_t v260;
  WTF::StringImpl *v261;
  int v262;
  int v263;
  uint64_t v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266[2];
  __int128 v267;
  _DWORD *v268;
  JSC::CallFrame *v269;
  JSC::CallFrame *v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  char v274;
  char v275;
  uint64_t v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  char *v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  uint64_t v285;
  _BYTE *v286;
  uint64_t v287;
  _BYTE v288[16];
  _BYTE *v289;
  uint64_t v290;
  _BYTE v291[128];
  WTF::StringImpl *v292;
  char v293;

  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v12 = 10;
  }
  else
  {
    v12 = *((_QWORD *)a2 + 6);
    if ((v12 & 0xFFFE000000000002) == 0)
    {
      v13 = *((_QWORD *)a2 + 6);
      if (*(_BYTE *)(v12 + 5) == 2)
        goto LABEL_4;
    }
  }
  if (!HIBYTE(qword_1ECF4C7A8))
    return v12;
  (*(void (**)(WTF::StringImpl **__return_ptr, JSC *, uint64_t, JSC::CallFrame *))(*((_QWORD *)this + 410)
                                                                                           + 152))(&v265, this, v12, a3);
  if (!v265)
    return v12;
  v13 = JSC::jsString((JSC *)v11, (JSC::VM *)&v265, v105, v106, v107, v108, v109, v110);
  v111 = v265;
  v265 = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
    {
      WTF::StringImpl::~StringImpl(v111, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v111 -= 2;
    }
  }
  if (!v13)
    return v12;
LABEL_4:
  v14 = (int **)(v13 + 8);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    v14 = JSC::JSRopeString::resolveRope(v13, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (HIBYTE(qword_1ECF4C7A8) && *((_BYTE *)this + 3171))
  {
    v121 = *(uint64_t (**)(JSC *, uint64_t, WTF::StringImpl **, uint64_t))(*((_QWORD *)this + 410) + 160);
    v122 = *v14;
    if (*v14)
      *v122 += 2;
    v292 = (WTF::StringImpl *)v122;
    v123 = v121(this, 2, &v292, v12);
    v124 = v292;
    v292 = 0;
    if (v124)
    {
      if (*(_DWORD *)v124 == 2)
      {
        WTF::StringImpl::~StringImpl(v124, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
      }
      else
      {
        *(_DWORD *)v124 -= 2;
      }
    }
    if ((v123 & 1) == 0)
    {
      v125 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v125 = 0x6600000002;
      *(_QWORD *)(v125 + 8) = "Refused to evaluate a string as JavaScript because this document requires a 'Trusted Type' assignment.";
      *(_DWORD *)(v125 + 16) = 4;
      v265 = (WTF::StringImpl *)v125;
      v127 = JSC::createEvalError((unint64_t)this, &v265, v126);
      JSC::VM::throwException((JSC::VM *)v11, this, v127, v128, v129, v130, v131, v132);
      v140 = v265;
      v265 = 0;
      if (v140)
      {
        if (*(_DWORD *)v140 == 2)
        {
          WTF::StringImpl::~StringImpl(v140, v133, v134, v135, v136, v137, v138, v139);
          WTF::fastFree(v165, v166, v167, v168, v169, v170, v171, v172);
        }
        else
        {
          *(_DWORD *)v140 -= 2;
        }
      }
      return 0;
    }
  }
  if (!*((_BYTE *)this + 3169))
  {
    (*(void (**)(JSC *, unint64_t))(*((_QWORD *)this + 410) + 112))(this, v13);
    EvalError = JSC::createEvalError((unint64_t)this, (WTF::StringImpl **)this + 398, v141);
    JSC::VM::throwException((JSC::VM *)v11, this, EvalError, v143, v144, v145, v146, v147);
    return 10;
  }
  v15 = *v14;
  if (!*v14)
  {
    v16 = 0;
    v17 = 0;
LABEL_12:
    v266[0] = 0;
    v266[1] = 0;
    v265 = this;
    LOBYTE(v268) = 1;
    v18 = (unint64_t)&v16[v17];
    v269 = (JSC::CallFrame *)v16;
    v270 = (JSC::CallFrame *)&v16[v17];
    v271 = 0;
    v272 = 0;
    v273 = 0;
    v274 = 1;
    v275 = 1;
    v276 = 0;
    v277 = 0;
    v278 = 0;
    v279 = 0x800000000;
    v281 = 0u;
    v282 = 0u;
    v283 = 0u;
    v284 = 0u;
    v280 = (char *)&v281 + 8;
    v285 = 0;
    v286 = v288;
    v19 = (__n128)0x10uLL;
    v287 = 16;
    v289 = v291;
    v290 = 16;
    if (v17)
    {
      if (JSC::tokenTypesOfLatin1Characters[*v16] == 19)
      {
        v66 = (JSC::CallFrame *)(v16 + 1);
        v67 = v17 - 1;
        while (1)
        {
          v269 = v66;
          if (!v67)
            goto LABEL_164;
          v68 = *(unsigned __int8 *)v66;
          v66 = (JSC::CallFrame *)((char *)v66 + 1);
          --v67;
          if (JSC::tokenTypesOfLatin1Characters[v68] != 19)
          {
            v16 = (unsigned __int8 *)v66 - 1;
            v20 = (unint64_t)v16 < v18;
            goto LABEL_15;
          }
        }
      }
      v20 = 1;
    }
    else
    {
      v20 = 0;
    }
LABEL_15:
    if (v16 != (unsigned __int8 *)v18)
    {
      LOBYTE(v267) = 18;
      a4 = *v16;
      v21 = JSC::tokenTypesOfLatin1Characters[a4];
      if (v21 <= 4)
      {
        if (v21 == 4)
        {
          a3 = (JSC::CallFrame *)(v16 + 1);
          v269 = a3;
          v22 = (JSC::CallFrame *)(v16 + 1);
          if ((unint64_t)a3 < v18)
          {
            v23 = v18 - (_QWORD)a3;
            v22 = a3;
            while (1)
            {
              v24 = *(unsigned __int8 *)v22;
              v25 = v24 < 0x20 || v24 == 92;
              v26 = v25 || v24 == (_DWORD)a4;
              v27 = v26;
              if (v24 != 9 && v27)
                break;
              v22 = (JSC::CallFrame *)((char *)v22 + 1);
              v269 = v22;
              if (!--v23)
              {
                v22 = (JSC::CallFrame *)v18;
                break;
              }
            }
          }
          if ((unint64_t)v22 >= v18 || *(unsigned __int8 *)v22 != (_DWORD)a4)
          {
            JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)&v266[1], (uint64_t)&v267, (size_t)a3, a4, a5, a6, a7, a8);
            goto LABEL_41;
          }
          BYTE1(v267) |= 1u;
          *((_QWORD *)&v267 + 1) = a3;
          v269 = (JSC::CallFrame *)((char *)v22 + 1);
          DWORD1(v267) = DWORD1(v267) & 0x80000000 | ((_DWORD)v22 - (_DWORD)a3) & 0x7FFFFFFF;
          v28 = 4;
          goto LABEL_36;
        }
LABEL_40:
        LOBYTE(v267) = v21;
        v269 = (JSC::CallFrame *)(v16 + 1);
        goto LABEL_41;
      }
      if (v21 != 6)
      {
        if (v21 != 5)
        {
          if (v21 - 18 >= 2)
            goto LABEL_40;
          WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>("Unrecognized token '", 21, v16, 1uLL, 39, &v261);
          v174 = v261;
          *(double *)&v261 = 0.0;
          v175 = v266[1];
          v266[1] = v174;
          if (!v175)
            goto LABEL_41;
          v176 = *(_DWORD *)v175 - 2;
          if (*(_DWORD *)v175 != 2)
          {
LABEL_176:
            *(_DWORD *)v175 = v176;
            goto LABEL_41;
          }
          WTF::StringImpl::~StringImpl(v175, v173, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v184, v185, v186, v187, v188, v189, v190, v191);
          v175 = v261;
          *(double *)&v261 = 0.0;
          if (!v175)
            goto LABEL_41;
LABEL_199:
          v176 = *(_DWORD *)v175 - 2;
          if (*(_DWORD *)v175 == 2)
          {
            WTF::StringImpl::~StringImpl(v175, v192, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
            goto LABEL_41;
          }
          goto LABEL_176;
        }
        if ((_DWORD)a4 == 110)
        {
          if ((uint64_t)(v18 - (_QWORD)v16) >= 4 && *(_WORD *)(v16 + 1) == 27765 && v16[3] == 108)
          {
            v269 = (JSC::CallFrame *)(v16 + 4);
            v28 = 13;
LABEL_36:
            LOBYTE(v267) = v28;
LABEL_41:
            v29 = (unsigned __int8 **)*((_QWORD *)v265 + 7);
            if (!v275)
            {
              v30 = JSC::LiteralParser<unsigned char>::parseRecursivelyEntry((uint64_t)&v265, v29, v19, (uint64_t)a3, a4, a5, a6, a7, a8);
              goto LABEL_43;
            }
            v30 = JSC::LiteralParser<unsigned char>::parse((uint64_t)&v265, (uint64_t)v29, 3uLL, a4, a5, a6, a7, a8);
            if (v267 == 17)
            {
              v260 = v30;
              v16 = (unsigned __int8 *)v269;
              v87 = (unint64_t)v270;
              if (v269 >= v270)
              {
                v88 = 0;
              }
              else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v269] == 19)
              {
                v201 = v270;
                v202 = (JSC::CallFrame *)((char *)v269 + 1);
                v203 = (char *)v270 + ~(unint64_t)v269;
                while (1)
                {
                  v204 = (unsigned __int8 *)v202;
                  v269 = v202;
                  if (!v203)
                    break;
                  v202 = (JSC::CallFrame *)((char *)v202 + 1);
                  --v203;
                  if (JSC::tokenTypesOfLatin1Characters[*v204] != 19)
                  {
                    v201 = (JSC::CallFrame *)v204;
                    break;
                  }
                }
                v88 = v204 < (unsigned __int8 *)v270;
                v16 = (unsigned __int8 *)v201;
              }
              else
              {
                v88 = 1;
              }
              if (v16 == (unsigned __int8 *)v270)
              {
                v206 = 14;
                goto LABEL_217;
              }
              LOBYTE(v267) = 18;
              a4 = *v16;
              v89 = JSC::tokenTypesOfLatin1Characters[a4];
              if (v89 > 4)
              {
                if (v89 == 6)
                {
                  v207 = (_DWORD)a4 != 45 || !v88;
                  v82 = v16;
                  if ((v207 & 1) == 0)
                  {
                    v82 = v16 + 1;
                    v269 = (JSC::CallFrame *)(v16 + 1);
                  }
                  if (v82 < (unsigned __int8 *)v270)
                  {
                    v208 = *v82;
                    if (v208 == 48)
                      goto LABEL_254;
                    if ((v208 - 49) <= 8)
                    {
                      v209 = v82 + 1;
                      do
                      {
                        v82 = v209;
                        v269 = (JSC::CallFrame *)v209;
                        if (v209 >= (unsigned __int8 *)v270)
                          break;
                        ++v209;
                      }
                      while (*v82 - 48 < 0xA);
                      goto LABEL_229;
                    }
                  }
                  v248 = WTF::fastCompactMalloc((WTF *)0x20);
                  v249 = (WTF::StringImpl *)v248;
                  v250 = 0xE00000002;
                  v251 = "Invalid number";
LABEL_318:
                  *(_QWORD *)v248 = v250;
                  *(_QWORD *)(v248 + 8) = v251;
                  *(_DWORD *)(v248 + 16) = 4;
                  v224 = v266[1];
                  v266[1] = v249;
                  if (!v224)
                    goto LABEL_205;
                  goto LABEL_315;
                }
                if (v89 == 5)
                {
                  if ((_DWORD)a4 == 110)
                  {
                    if (v270 - (JSC::CallFrame *)v16 >= 4 && *(_WORD *)(v16 + 1) == 27765 && v16[3] == 108)
                    {
                      v269 = (JSC::CallFrame *)(v16 + 4);
                      v206 = 13;
                      goto LABEL_217;
                    }
                  }
                  else if ((_DWORD)a4 == 102)
                  {
                    if (v270 - (JSC::CallFrame *)v16 >= 5
                      && *(_WORD *)(v16 + 1) == 27745
                      && *(_WORD *)(v16 + 3) == 25971)
                    {
                      v269 = (JSC::CallFrame *)(v16 + 5);
                      v206 = 12;
                      goto LABEL_217;
                    }
                  }
                  else if ((_DWORD)a4 == 116
                         && v270 - (JSC::CallFrame *)v16 >= 4
                         && *(_WORD *)(v16 + 1) == 30066
                         && v16[3] == 101)
                  {
                    v269 = (JSC::CallFrame *)(v16 + 4);
                    v206 = 11;
                    goto LABEL_217;
                  }
                  v226 = (int)v16;
                  *((_QWORD *)&v267 + 1) = v16;
                  v227 = (int)v16;
                  if (v16 < (unsigned __int8 *)v270)
                  {
                    v228 = v270 - (JSC::CallFrame *)v16;
                    while (1)
                    {
                      v229 = *v16;
                      if (v229 != 36)
                      {
                        v230 = v229 != 95 && (v229 - 48) >= 0xA;
                        if (v230 && (v229 | 0x20u) - 97 > 0x19)
                          break;
                      }
                      v269 = (JSC::CallFrame *)++v16;
                      if (!--v228)
                      {
                        LODWORD(v16) = (_DWORD)v270;
                        break;
                      }
                    }
                    v227 = (int)v16;
                  }
                  DWORD1(v267) = DWORD1(v267) & 0x80000000 | (v227 - v226) & 0x7FFFFFFF;
                  v206 = 5;
                  goto LABEL_217;
                }
                if (v89 - 18 < 2)
                {
                  WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>("Unrecognized token '", 21, v16, 1uLL, 39, &v261);
                  v223 = v261;
                  *(double *)&v261 = 0.0;
                  v224 = v266[1];
                  v266[1] = v223;
                  if (!v224)
                    goto LABEL_205;
                  v225 = *(_DWORD *)v224 - 2;
                  if (*(_DWORD *)v224 != 2)
                    goto LABEL_294;
                  WTF::StringImpl::~StringImpl(v224, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v232, v233, v234, v235, v236, v237, v238, v239);
                  v224 = v261;
                  *(double *)&v261 = 0.0;
                  if (!v224)
                    goto LABEL_205;
LABEL_315:
                  v225 = *(_DWORD *)v224 - 2;
                  if (*(_DWORD *)v224 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v224, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v240, v241, v242, v243, v244, v245, v246, v247);
                    goto LABEL_205;
                  }
LABEL_294:
                  *(_DWORD *)v224 = v225;
                  goto LABEL_205;
                }
              }
              else if (v89 == 4)
              {
                v82 = (unsigned __int8 *)v268;
                if ((_DWORD)a4 != 39)
                {
                  a3 = (JSC::CallFrame *)(v16 + 1);
                  v269 = (JSC::CallFrame *)(v16 + 1);
                  if (!(_BYTE)v268)
                  {
                    v90 = v270 - a3;
                    if (v270 - a3 < 0)
                      goto LABEL_253;
                    v91 = (JSC::CallFrame *)&v16[v90 + 1];
                    if (v90 >= 0x10)
                    {
                      v92 = v16 + 16;
                      v93.i64[0] = 0x2222222222222222;
                      v93.i64[1] = 0x2222222222222222;
                      v94.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                      v94.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                      v95.i64[0] = 0x2020202020202020;
                      v95.i64[1] = 0x2020202020202020;
                      while (1)
                      {
                        v96 = *(int8x16_t *)(v92 - 15);
                        v97 = vceqq_s8(v96, v93);
                        v98 = vorrq_s8(vorrq_s8(vceqq_s8(v96, v94), (int8x16_t)vcgtq_u8(v95, (uint8x16_t)v96)), v97);
                        v97.i8[0] = vmaxvq_u8((uint8x16_t)v98);
                        if (v97.i32[0])
                          break;
                        v92 += 16;
                        if (v92 >= (unsigned __int8 *)v91)
                        {
                          if (v92 - 15 >= (unsigned __int8 *)v91)
                            goto LABEL_213;
                          v99 = (unsigned __int8 *)v91 - 16;
                          v100 = *((int8x16_t *)v91 - 1);
                          v101.i64[0] = 0x2222222222222222;
                          v101.i64[1] = 0x2222222222222222;
                          v102 = vceqq_s8(v100, v101);
                          v103.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                          v103.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                          v104.i64[0] = 0x2020202020202020;
                          v104.i64[1] = 0x2020202020202020;
                          v98 = vorrq_s8(vorrq_s8(vceqq_s8(v100, v103), (int8x16_t)vcgtq_u8(v104, (uint8x16_t)v100)), v102);
                          v102.i8[0] = vmaxvq_u8((uint8x16_t)v98);
                          if (!v102.i32[0])
                            goto LABEL_213;
LABEL_212:
                          v205 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v98);
                          v205.i8[0] = vminvq_u8(v205);
                          v91 = (JSC::CallFrame *)&v99[v205.u32[0]];
                          goto LABEL_213;
                        }
                      }
                      v99 = v92 - 15;
                      goto LABEL_212;
                    }
                    if (v270 == a3)
                      goto LABEL_213;
                    v222 = (JSC::CallFrame *)(v16 + 1);
                    do
                    {
                      if (!JSC::safeStringLatin1CharactersInStrictJSON[*(unsigned __int8 *)v222])
                      {
                        v91 = v222;
                        break;
                      }
                      v222 = (JSC::CallFrame *)((char *)v222 + 1);
                      --v90;
                    }
                    while (v90);
LABEL_213:
                    v269 = v91;
LABEL_214:
                    if (v91 >= v270 || *(unsigned __int8 *)v91 != (_DWORD)a4)
                    {
                      JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)&v266[1], (uint64_t)&v267, (size_t)a3, a4, a5, a6, a7, a8);
                      goto LABEL_205;
                    }
                    BYTE1(v267) |= 1u;
                    *((_QWORD *)&v267 + 1) = a3;
                    v269 = (JSC::CallFrame *)((char *)v91 + 1);
                    DWORD1(v267) = DWORD1(v267) & 0x80000000 | ((_DWORD)v91 - (_DWORD)a3) & 0x7FFFFFFF;
                    v206 = 4;
LABEL_217:
                    LOBYTE(v267) = v206;
                    goto LABEL_205;
                  }
LABEL_334:
                  if (a3 >= v270)
                  {
                    v91 = a3;
                  }
                  else
                  {
                    v255 = (uint64_t)&v16[v270 - a3 + 1];
                    v91 = a3;
                    while (1)
                    {
                      v256 = *(unsigned __int8 *)v91;
                      v257 = v256 < 0x20 || v256 == 92;
                      v258 = v257 || v256 == (_DWORD)a4;
                      v259 = v258;
                      if (v256 != 9 && v259)
                        break;
                      v91 = (JSC::CallFrame *)((char *)v91 + 1);
                      v269 = v91;
                      if (v91 == (JSC::CallFrame *)v255)
                      {
                        v91 = (JSC::CallFrame *)v255;
                        goto LABEL_214;
                      }
                    }
                  }
                  goto LABEL_214;
                }
                if ((_BYTE)v268)
                {
                  a3 = (JSC::CallFrame *)(v16 + 1);
                  v269 = (JSC::CallFrame *)(v16 + 1);
                  goto LABEL_334;
                }
                v248 = WTF::fastCompactMalloc((WTF *)0x20);
                v249 = (WTF::StringImpl *)v248;
                v250 = 0x2900000002;
                v251 = "Single quotes (') are not allowed in JSON";
                goto LABEL_318;
              }
              LOBYTE(v267) = v89;
              v269 = (JSC::CallFrame *)(v16 + 1);
              goto LABEL_205;
            }
LABEL_43:
            if (v267 == 14)
              v12 = v30;
            else
              v12 = 0;
            JSC::LiteralParser<unsigned char>::~LiteralParser((uint64_t)&v265, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            goto LABEL_47;
          }
        }
        else if ((_DWORD)a4 == 102)
        {
          if ((uint64_t)(v18 - (_QWORD)v16) >= 5 && *(_WORD *)(v16 + 1) == 27745 && *(_WORD *)(v16 + 3) == 25971)
          {
            v269 = (JSC::CallFrame *)(v16 + 5);
            v28 = 12;
            goto LABEL_36;
          }
        }
        else if ((_DWORD)a4 == 116
               && (uint64_t)(v18 - (_QWORD)v16) >= 4
               && *(_WORD *)(v16 + 1) == 30066
               && v16[3] == 101)
        {
          v269 = (JSC::CallFrame *)(v16 + 4);
          v28 = 11;
          goto LABEL_36;
        }
        v177 = (int)v16;
        *((_QWORD *)&v267 + 1) = v16;
        v178 = (int)v16;
        if ((unint64_t)v16 < v18)
        {
          v179 = v18 - (_QWORD)v16;
          v180 = (_DWORD)v16 + v179;
          while (1)
          {
            v181 = *v16;
            if (v181 != 36)
            {
              v182 = v181 != 95 && (v181 - 48) >= 0xA;
              if (v182 && (v181 | 0x20u) - 97 > 0x19)
                break;
            }
            v269 = (JSC::CallFrame *)++v16;
            if (!--v179)
            {
              LODWORD(v16) = v180;
              break;
            }
          }
          v178 = (int)v16;
        }
        DWORD1(v267) = DWORD1(v267) & 0x80000000 | (v178 - v177) & 0x7FFFFFFF;
        v28 = 5;
        goto LABEL_36;
      }
      v77 = !v20;
      if ((_DWORD)a4 == 45)
        v78 = v77;
      else
        v78 = 1;
      v79 = v16;
      if ((v78 & 1) == 0)
      {
        v79 = v16 + 1;
        v269 = (JSC::CallFrame *)(v16 + 1);
      }
      if ((unint64_t)v79 < v18)
      {
        v80 = *v79;
        if (v80 == 48)
        {
          v82 = v79 + 1;
          v269 = (JSC::CallFrame *)v82;
          goto LABEL_87;
        }
        if ((v80 - 49) <= 8)
        {
          v81 = v79 + 1;
          do
          {
            v82 = v81;
            v269 = (JSC::CallFrame *)v81;
            if ((unint64_t)v81 >= v18)
              break;
            ++v81;
          }
          while (*v82 - 48 < 0xA);
LABEL_87:
          if ((unint64_t)v82 < v18)
          {
            v83 = *v82;
            if (v83 == 46)
            {
              v269 = (JSC::CallFrame *)(v82 + 1);
              if ((unint64_t)(v82 + 1) >= v18 || v82[1] - 48 > 9)
              {
                v216 = WTF::fastCompactMalloc((WTF *)0x20);
                v217 = (WTF::StringImpl *)v216;
                v19.n128_u64[0] = 0x2200000002;
                v218 = "Invalid digits after decimal point";
                goto LABEL_261;
              }
              v112 = v82 + 2;
              do
              {
                v82 = v112;
                v269 = (JSC::CallFrame *)v112;
                if ((unint64_t)v112 >= v18)
                  break;
                ++v112;
              }
              while (*v82 - 48 < 0xA);
            }
            else if (v83 != 69 && v83 != 101 && v82 - v16 <= 9)
            {
              LOBYTE(v267) = 6;
              v84 = *v16;
              if (v84 == 45)
                ++v16;
              if (v16 >= v82)
              {
                if (v84 != 45)
                {
                  v85 = 0;
LABEL_98:
                  v19.n128_f64[0] = (double)v85;
LABEL_99:
                  *((_QWORD *)&v267 + 1) = v19.n128_u64[0];
                  goto LABEL_41;
                }
              }
              else
              {
                v85 = 0;
                do
                {
                  v86 = *v16++;
                  v85 = v86 + 10 * v85 - 48;
                }
                while (v16 < v82);
                if (v84 != 45)
                  goto LABEL_98;
                if (v85)
                {
                  v85 = -v85;
                  goto LABEL_98;
                }
              }
              *((_QWORD *)&v267 + 1) = 0x8000000000000000;
              goto LABEL_41;
            }
          }
          if ((unint64_t)v82 >= v18 || (*v82 | 0x20) != 0x65)
          {
LABEL_134:
            LOBYTE(v267) = 6;
            v87 = v82 - v16;
            if (v82 - v16 < 0)
            {
              while (1)
              {
LABEL_253:
                __break(1u);
LABEL_254:
                v269 = (JSC::CallFrame *)++v82;
LABEL_229:
                if ((unint64_t)v82 < v87)
                {
                  v210 = *v82;
                  if (v210 == 46)
                  {
                    v269 = (JSC::CallFrame *)(v82 + 1);
                    if ((unint64_t)(v82 + 1) >= v87 || v82[1] - 48 > 9)
                    {
                      v248 = WTF::fastCompactMalloc((WTF *)0x20);
                      v249 = (WTF::StringImpl *)v248;
                      v250 = 0x2200000002;
                      v251 = "Invalid digits after decimal point";
                      goto LABEL_318;
                    }
                    v215 = v82 + 2;
                    do
                    {
                      v82 = v215;
                      v269 = (JSC::CallFrame *)v215;
                      if ((unint64_t)v215 >= v87)
                        break;
                      ++v215;
                    }
                    while (*v82 - 48 < 0xA);
                  }
                  else if (v210 != 69 && v210 != 101 && v82 - v16 <= 9)
                  {
                    LOBYTE(v267) = 6;
                    v211 = *v16;
                    if (v211 == 45)
                      ++v16;
                    if (v16 >= v82)
                    {
                      if (v211 != 45)
                      {
                        v212 = 0;
LABEL_240:
                        v214 = (double)v212;
LABEL_241:
                        *((double *)&v267 + 1) = v214;
                        goto LABEL_205;
                      }
                    }
                    else
                    {
                      v212 = 0;
                      do
                      {
                        v213 = *v16++;
                        v212 = v213 + 10 * v212 - 48;
                      }
                      while (v16 < v82);
                      if (v211 != 45)
                        goto LABEL_240;
                      if (v212)
                      {
                        v212 = -v212;
                        goto LABEL_240;
                      }
                    }
                    *((_QWORD *)&v267 + 1) = 0x8000000000000000;
LABEL_205:
                    v30 = v260;
                    goto LABEL_43;
                  }
                }
                if ((unint64_t)v82 < v87 && (*v82 | 0x20) == 0x65)
                {
                  v252 = v82 + 1;
                  v269 = (JSC::CallFrame *)(v82 + 1);
                  if ((unint64_t)(v82 + 1) < v87)
                  {
                    v253 = *v252;
                    if (v253 == 45 || v253 == 43)
                    {
                      v252 = v82 + 2;
                      v269 = (JSC::CallFrame *)(v82 + 2);
                    }
                  }
                  if ((unint64_t)v252 >= v87 || *v252 - 48 > 9)
                  {
                    v248 = WTF::fastCompactMalloc((WTF *)0x20);
                    v249 = (WTF::StringImpl *)v248;
                    v250 = 0x5D00000002;
                    v251 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                    goto LABEL_318;
                  }
                  v254 = v252 + 1;
                  do
                  {
                    v82 = v254;
                    v269 = (JSC::CallFrame *)v254;
                    if ((unint64_t)v254 >= v87)
                      break;
                    ++v254;
                  }
                  while (*v82 - 48 < 0xA);
                }
                LOBYTE(v267) = 6;
                v87 = v82 - v16;
                if (v82 - v16 >= 0)
                {
                  *(double *)&v261 = 0.0;
                  fast_float::from_chars_advanced<double,char>(v16, v82, (unint64_t *)&v261, 0x2E00000005);
                  v214 = *(double *)&v261;
                  goto LABEL_241;
                }
              }
            }
            *(double *)&v261 = 0.0;
            fast_float::from_chars_advanced<double,char>(v16, v82, (unint64_t *)&v261, 0x2E00000005);
            v19.n128_u64[0] = (unint64_t)v261;
            goto LABEL_99;
          }
          v219 = v82 + 1;
          v269 = (JSC::CallFrame *)(v82 + 1);
          if ((unint64_t)(v82 + 1) < v18)
          {
            v220 = *v219;
            if (v220 == 45 || v220 == 43)
            {
              v219 = v82 + 2;
              v269 = (JSC::CallFrame *)(v82 + 2);
            }
          }
          if ((unint64_t)v219 < v18 && *v219 - 48 <= 9)
          {
            v221 = v219 + 1;
            do
            {
              v82 = v221;
              v269 = (JSC::CallFrame *)v221;
              if ((unint64_t)v221 >= v18)
                break;
              ++v221;
            }
            while (*v82 - 48 < 0xA);
            goto LABEL_134;
          }
          v216 = WTF::fastCompactMalloc((WTF *)0x20);
          v217 = (WTF::StringImpl *)v216;
          v19.n128_u64[0] = 0x5D00000002;
          v218 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_261:
          *(_QWORD *)v216 = v19.n128_u64[0];
          *(_QWORD *)(v216 + 8) = v218;
          *(_DWORD *)(v216 + 16) = 4;
          v175 = v266[1];
          v266[1] = v217;
          if (!v175)
            goto LABEL_41;
          goto LABEL_199;
        }
      }
      v216 = WTF::fastCompactMalloc((WTF *)0x20);
      v217 = (WTF::StringImpl *)v216;
      v19.n128_u64[0] = 0xE00000002;
      v218 = "Invalid number";
      goto LABEL_261;
    }
LABEL_164:
    v28 = 14;
    goto LABEL_36;
  }
  if ((v15[4] & 4) != 0)
  {
    v16 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
    v17 = v15[1];
    goto LABEL_12;
  }
  v148 = v15[1];
  v149 = (JSC::CallFrame *)*((_QWORD *)v15 + 1);
  v266[0] = 0;
  v266[1] = 0;
  v265 = this;
  LOBYTE(v268) = 1;
  v269 = v149;
  v270 = (JSC::CallFrame *)((char *)v149 + 2 * v148);
  v271 = 0;
  v272 = 0;
  v273 = 0;
  v274 = 1;
  v275 = 1;
  v276 = 0;
  v277 = 0;
  v278 = 0;
  v279 = 0x800000000;
  v281 = 0u;
  v282 = 0u;
  v283 = 0u;
  v284 = 0u;
  v280 = (char *)&v281 + 8;
  v285 = 0;
  v286 = v288;
  v287 = 16;
  v289 = v291;
  v290 = 16;
  v12 = JSC::LiteralParser<char16_t>::tryLiteralParse((uint64_t)&v265, (int8x16_t)0x10uLL, (uint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8);
  JSC::LiteralParser<unsigned char>::~LiteralParser((uint64_t)&v265, v150, v151, v152, v153, v154, v155, v156);
LABEL_47:
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v31, v32, v33, v34, v35, v36, v37))
  {
    return 0;
  }
  if (!v12)
  {
    JSC::CallFrame::callerSourceOrigin(a2, (JSC::VM *)v11, v34, v35, v36, v37, (uint64_t)&v265);
    if (*(_BYTE *)(v11 + 41452))
    {
      v293 = 1;
      *(double *)&v261 = COERCE_DOUBLE(&v293);
      JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,JSC::computeNewSourceTaintedOriginFromStack(JSC::VM &,JSC::CallFrame *)::$_0>(a2, (JSC::VM *)v11, (_BYTE **)&v261, v38, v39, v40, v41, v42);
      v43 = v293;
    }
    else
    {
      v43 = 0;
    }
    v44 = WTF::fastMalloc((WTF *)0x80);
    *(_DWORD *)(v44 + 8) = 1;
    *(_QWORD *)v44 = off_1E35964B0;
    *(_BYTE *)(v44 + 12) = 0;
    v48 = v265;
    if (v265)
      *(_DWORD *)v265 += 2;
    *(_QWORD *)(v44 + 16) = v48;
    v49 = v267;
    *(_OWORD *)(v44 + 24) = *(_OWORD *)v266;
    *(_OWORD *)(v44 + 40) = v49;
    v50 = v268;
    if (v268)
      ++v268[2];
    *(_QWORD *)(v44 + 56) = v50;
    *(_OWORD *)(v44 + 64) = 0u;
    *(_OWORD *)(v44 + 80) = 0u;
    *(_OWORD *)(v44 + 96) = 0u;
    *(_DWORD *)(v44 + 112) = 0;
    *(_BYTE *)(v44 + 116) = v43;
    *(_QWORD *)v44 = off_1E357C4B0;
    v51 = *v14;
    if (!*v14)
      v51 = &WTF::StringImpl::s_emptyAtomString;
    *v51 += 2;
    *(_QWORD *)(v44 + 120) = v51;
    v261 = (WTF::StringImpl *)v44;
    v262 = 0;
    v52 = v51[1];
    v264 = 0;
    v263 = v52;
    v60 = JSC::IndirectEvalExecutable::tryCreate((uint64_t)this, (JSC::VM *)&v261, 0, 0, 0, v45, v46, v47);
    v62 = v261;
    *(double *)&v261 = 0.0;
    if (v62)
    {
      if (*((_DWORD *)v62 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v62 + 8))(v62);
      else
        --*((_DWORD *)v62 + 2);
    }
    if (v60)
      v12 = JSC::Interpreter::executeEval((WTF::Thread *)(v11 + 90560), v60, *((JSC::JSGlobalObject **)this + 8), *((const JSC::Identifier **)this + 9), v56, v57, v58, v59, v61);
    else
      v12 = 0;
    v63 = v268;
    v268 = 0;
    if (v63)
    {
      if (v63[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
      else
        --v63[2];
    }
    v64 = v265;
    v265 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
      {
        WTF::StringImpl::~StringImpl(v64, v53, v54, v55, v56, v57, v58, v59);
        WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
      }
      else
      {
        *(_DWORD *)v64 -= 2;
      }
    }
  }
  return v12;
}

unint64_t JSC::globalFuncParseInt(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  double v9;
  unint64_t v11;
  unint64_t v12;
  double v14;
  uint64_t v15;
  JSC::VM *v17;
  int *v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v44;
  int v45;
  int v46;
  int v47;
  double v48;
  unint64_t i;
  int v50;
  int v51;
  int v52;
  int v53;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  int v60;
  int v61;
  int v62;
  int v63;
  double v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  int v68;
  int v69;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  double v75;

  if (*((_DWORD *)a2 + 8) != 1)
  {
    v11 = *((_QWORD *)a2 + 6);
    if (*((_DWORD *)a2 + 8) == 2)
      v12 = 10;
    else
      v12 = *((_QWORD *)a2 + 7);
    v73 = v12;
    if (!(v11 >> 49) || (v12 & 0xFFFFFFFFFFFFFFF7) != 2 && (v12 < 0xFFFE000000000000 || v12 != 10))
    {
LABEL_27:
      v74 = v11;
      v17 = (JSC::VM *)*((_QWORD *)this + 7);
      if ((v11 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v11 + 5) == 2)
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v11 > 0xFFFDFFFFFFFFFFFFLL)
      return v11;
    a9.i64[0] = v11 - 0x2000000000000;
    if (COERCE_DOUBLE(v11 - 0x2000000000000) == 0.0)
    {
      v14 = 0.0;
    }
    else
    {
      if (fabs(*(double *)a9.i64) > 9.00719925e15)
        goto LABEL_27;
      if (*(double *)a9.i64 < 0.000001 && *(double *)a9.i64 > -1.0)
        goto LABEL_27;
      v14 = trunc(*(double *)a9.i64);
    }
    if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v15 = (int)v14, (double)(int)v15 == v14)
      && ((*(_QWORD *)&v14 & 0x8000000000000000) == 0 || (_DWORD)v15))
    {
      return v15 | 0xFFFE000000000000;
    }
    else
    {
      return *(_QWORD *)&v14 + 0x2000000000000;
    }
  }
  v73 = 10;
  v74 = 10;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
LABEL_22:
  v11 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v74, (uint64_t)this, 0, a4, a5, a6, a7, a8);
  if (!v11)
    return 0;
LABEL_29:
  v19 = *(int **)(v11 + 8);
  if ((v19 & 1) != 0)
  {
    if ((v19 & 2) != 0)
    {
      v26 = *(_QWORD *)(v11 + 20) & 0xFFFFFFFFFLL;
      v27 = *(_QWORD *)(v26 + 8);
      if (v27
        && (v28 = *(unsigned int *)(v27 + 4),
            v29 = *(_QWORD *)(v11 + 24),
            v30 = v29 >> 16,
            v28 > (v29 >> 16)))
      {
        v31 = *(unsigned int *)(v27 + 16);
        v21 = *(const char **)(v27 + 8);
        v32 = *(_DWORD *)(v11 + 16);
        if ((int)v28 - (int)v30 > v32 || (v32 = v28 - v30, (_DWORD)v30))
        {
          v33 = (v29 >> 16);
          v23 = v32;
          v34 = v28 - v30;
          if (((v31 >> 2) & 1) != 0)
          {
            if (v34 < v32)
              goto LABEL_213;
            v21 += v33;
            v23 = v32 | 0x100000000;
          }
          else
          {
            if (v34 < v32)
              goto LABEL_213;
            v21 += 2 * v33;
          }
        }
        else
        {
          v23 = v28 & 0xFFFFFFFEFFFFFFFFLL | (((v31 >> 2) & 1) << 32);
        }
      }
      else
      {
        v21 = "";
        v23 = 0x100000000;
      }
      goto LABEL_33;
    }
    v19 = *JSC::JSRopeString::resolveRope(v11, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (v19)
      goto LABEL_31;
LABEL_61:
    v21 = 0;
    v22 = 1;
    goto LABEL_32;
  }
  if (!v19)
    goto LABEL_61;
LABEL_31:
  v20 = v19[4];
  v21 = (const char *)*((_QWORD *)v19 + 1);
  LODWORD(v19) = v19[1];
  v22 = (v20 >> 2) & 1;
LABEL_32:
  v23 = v19 | (unint64_t)(v22 << 32);
LABEL_33:
  if (*((_DWORD *)v17 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v17, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v24 = v73;
  if (v73 < 0xFFFE000000000000)
  {
    if (v73 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v73, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    else
      v35 = v73 - 0x2000000000000;
    v36 = (v35 >> 52) & 0x7FF;
    v37 = v36 - 1023;
    v38 = v35 >> (51 - (v35 >> 52));
    if (v36 > 0x433)
      LODWORD(v38) = v35 << ((v35 >> 52) - 51);
    if (v36 >= 0x41F)
      v39 = v38;
    else
      v39 = (((1 << ((v35 >> 52) + 1)) - 1) & v38) + (1 << ((v35 >> 52) + 1));
    if ((v35 & 0x8000000000000000) == 0)
      v40 = v39;
    else
      v40 = -v39;
    if (v37 <= 0x53)
      v24 = v40;
    else
      v24 = 0;
  }
  v25 = v23;
  if ((v23 & 0x100000000) == 0)
  {
    v41 = v24;
    v9 = 1.0;
    v26 = 0;
    if (!v25)
      goto LABEL_76;
    while (1)
    {
      v42 = *(unsigned __int16 *)&v21[2 * v26];
      if (v42 > 0xFF)
      {
        v72 = v26;
        v53 = u_charType(*(unsigned __int16 *)&v21[2 * v26]);
        v26 = v72;
        if (v53 != 12 && v42 - 8232 >= 2 && v42 != 65279)
        {
          v42 = *(unsigned __int16 *)&v21[2 * v72];
LABEL_108:
          if (v42 == 43)
          {
            v26 = v72 + 1;
          }
          else
          {
            if (v42 == 45)
              v9 = -1.0;
            else
              v9 = 1.0;
            v26 = v72;
            if (v42 == 45)
              v26 = v72 + 1;
          }
LABEL_76:
          v44 = v41;
          if ((v41 | 0x10) != 0x10)
            goto LABEL_80;
          v30 = v25 - v26;
          if (v25 - v26 < 2)
            goto LABEL_80;
          if (v25 > v26)
          {
            v44 = v41;
            if (*(_WORD *)&v21[2 * v26] != 48)
              goto LABEL_80;
            if (v25 > v26 + 1)
            {
              v44 = v41;
              if ((*(unsigned __int16 *)&v21[2 * v26 + 2] | 0x20) == 0x78)
              {
                v26 += 2;
                LODWORD(a3) = 16;
                goto LABEL_84;
              }
LABEL_80:
              if (v44)
                LODWORD(a3) = v44;
              else
                LODWORD(a3) = 10;
              if (((_DWORD)a3 - 37) < 0xFFFFFFDD)
                goto LABEL_175;
LABEL_84:
              if (v26 >= v25)
                goto LABEL_175;
              v45 = *(unsigned __int16 *)&v21[2 * v26];
              if ((v45 - 48) < 0xA)
              {
                v46 = -48;
                goto LABEL_87;
              }
              if ((v45 - 65) >= 0x1A)
              {
                if ((v45 - 97) <= 0x19)
                {
                  v46 = -87;
                  goto LABEL_87;
                }
                goto LABEL_175;
              }
              v46 = -55;
LABEL_87:
              v47 = v46 + v45;
              if (v47 < a3)
              {
                v48 = (double)(int)a3 * 0.0 + (double)v47;
                for (i = v26 + 1; v25 != i; ++i)
                {
                  v50 = *(unsigned __int16 *)&v21[2 * i];
                  if ((v50 - 48) >= 0xA)
                  {
                    if ((v50 - 65) < 0x1A)
                    {
                      v51 = -55;
                    }
                    else
                    {
                      if ((v50 - 97) > 0x19)
                        goto LABEL_116;
                      v51 = -87;
                    }
                  }
                  else
                  {
                    v51 = -48;
                  }
                  v52 = v51 + v50;
                  if (v52 >= (int)a3)
                    goto LABEL_116;
                  v48 = v48 * (double)(int)a3 + (double)v52;
                }
                i = v25;
LABEL_116:
                if (v48 >= 9.00719925e15)
                {
                  v30 = ((_DWORD)a3 - 2);
                  switch((int)a3)
                  {
                    case 2:
                    case 4:
                    case 8:
                      goto LABEL_118;
                    case 3:
                    case 5:
                    case 6:
                    case 7:
                    case 9:
                      break;
                    case 10:
                      v75 = 0.0;
                      if (v25 < (int)v26)
                        goto LABEL_213;
                      v30 = (int)v26;
                      v57 = i - (int)v26;
                      v26 = v25 - (int)v26;
                      if (v57 == -1)
                      {
                        v57 = v26;
                      }
                      else if (v26 < v57)
                      {
                        goto LABEL_213;
                      }
                      v48 = WTF::parseDouble((unsigned __int16 *)&v21[2 * v30], v57, &v75);
                      break;
                    default:
                      if ((_DWORD)a3 != 16 && (_DWORD)a3 != 32)
                        break;
LABEL_118:
                      if (v25 < (int)v26)
                        goto LABEL_213;
                      v30 = (int)v26;
                      v56 = i - (int)v26;
                      v26 = v25 - (int)v26;
                      if (v56 == -1)
                      {
                        v56 = v26;
                      }
                      else if (v26 < v56)
                      {
                        goto LABEL_213;
                      }
                      v48 = JSC::parseIntOverflow((unint64_t)&v21[2 * v30], v56, (int)a3);
                      break;
                  }
                }
LABEL_190:
                v64 = v9 * v48;
                goto LABEL_165;
              }
LABEL_175:
              v64 = NAN;
              goto LABEL_165;
            }
          }
LABEL_213:
          __break(1u);
LABEL_214:
          v71 = v26;
LABEL_212:
          v48 = JSC::parseIntOverflow((unint64_t)&v21[v30], v71, (int)a3);
          goto LABEL_190;
        }
      }
      else if (*(_WORD *)&v21[2 * v26] > 0x20u || ((1 << v42) & 0x100001A00) == 0)
      {
        v58 = *(_WORD *)&v21[2 * v26] == 160 || v42 == 13;
        if (!v58 && v42 != 10)
        {
          v72 = v26;
          goto LABEL_108;
        }
      }
      if (v25 == ++v26)
      {
        v26 = v25;
        goto LABEL_76;
      }
    }
  }
  v9 = 1.0;
  v26 = 0;
  if (!(_DWORD)v23)
    goto LABEL_152;
  while (1)
  {
    v60 = v21[v26];
    if ((v60 - 9) >= 5)
      break;
LABEL_146:
    if (v23 == ++v26)
    {
      v26 = v23;
      goto LABEL_152;
    }
  }
  if (v21[v26] <= 0x2Au)
  {
    if (v60 != 32)
      goto LABEL_152;
    goto LABEL_146;
  }
  if (v60 == 43)
  {
    ++v26;
    goto LABEL_152;
  }
  if (v60 != 45)
  {
    if (v60 != 160)
      goto LABEL_152;
    goto LABEL_146;
  }
  ++v26;
  v9 = -1.0;
LABEL_152:
  if ((v24 | 0x10) != 0x10)
    goto LABEL_156;
  v30 = v23 - v26;
  if (v30 < 2)
    goto LABEL_156;
  if (v23 <= v26)
    goto LABEL_213;
  if (v21[v26] != 48)
    goto LABEL_156;
  v30 = v26 + 1;
  if (v23 <= v26 + 1)
    goto LABEL_213;
  if ((v21[v30] | 0x20) == 0x78)
  {
    v26 += 2;
    LODWORD(a3) = 16;
    goto LABEL_160;
  }
LABEL_156:
  if (v24)
    LODWORD(a3) = v24;
  else
    LODWORD(a3) = 10;
  if (((_DWORD)a3 - 37) < 0xFFFFFFDD)
    goto LABEL_175;
LABEL_160:
  if (v26 >= v23)
    goto LABEL_175;
  v61 = v21[v26];
  if ((v61 - 48) >= 0xA)
  {
    if ((v61 - 65) < 0x1A)
    {
      v62 = -55;
      goto LABEL_163;
    }
    if ((v61 - 97) <= 0x19)
    {
      v62 = -87;
      goto LABEL_163;
    }
    goto LABEL_175;
  }
  v62 = -48;
LABEL_163:
  v63 = v62 + v61;
  v64 = NAN;
  if (v63 < (int)a3 && v63 != -1)
  {
    v48 = (double)(int)a3 * 0.0 + (double)v63;
    v66 = v26 + 1;
    if (v26 + 1 == v23)
    {
LABEL_188:
      v66 = v23;
    }
    else
    {
      while (1)
      {
        v67 = v21[v66];
        if ((v67 - 48) >= 0xA)
        {
          if ((v67 - 65) < 0x1A)
          {
            v68 = -55;
          }
          else
          {
            if ((v67 - 97) > 0x19)
              break;
            v68 = -87;
          }
        }
        else
        {
          v68 = -48;
        }
        v69 = v68 + v67;
        if (v69 >= (int)a3 || v69 == -1)
          break;
        v48 = v48 * (double)(int)a3 + (double)v69;
        if (v23 == ++v66)
          goto LABEL_188;
      }
    }
    if (v48 >= 9.00719925e15)
    {
      v30 = ((_DWORD)a3 - 2);
      switch((int)a3)
      {
        case 2:
        case 4:
        case 8:
          goto LABEL_209;
        case 3:
        case 5:
        case 6:
        case 7:
        case 9:
          goto LABEL_190;
        case 10:
          if (v23 < (unint64_t)(int)v26)
            goto LABEL_213;
          v30 = (int)v26;
          v26 = v66 - (int)v26;
          if (v26 == -1)
          {
            v26 = v23 - v30;
          }
          else if (v23 - v30 < v26)
          {
            goto LABEL_213;
          }
          v75 = 0.0;
          fast_float::from_chars_advanced<double,char>((unsigned __int8 *)&v21[v30], (unsigned __int8 *)&v21[v30 + v26], (unint64_t *)&v75, 0x2E00000005);
          v48 = v75;
          break;
        default:
          if ((_DWORD)a3 != 16 && (_DWORD)a3 != 32)
            goto LABEL_190;
LABEL_209:
          if (v23 < (unint64_t)(int)v26)
            goto LABEL_213;
          v30 = (int)v26;
          v71 = v66 - (int)v26;
          v26 = v23 - (uint64_t)(int)v26;
          if (v71 == -1)
            goto LABEL_214;
          if (v26 >= v71)
            goto LABEL_212;
          goto LABEL_213;
      }
    }
    goto LABEL_190;
  }
LABEL_165:
  if ((*(_QWORD *)&v64 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v65 = (int)v64, v64 == (double)(int)v65)
    && ((_DWORD)v65 || (*(_QWORD *)&v64 & 0x8000000000000000) == 0))
  {
    return v65 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v64 + 0x2000000000000;
  }
}

unint64_t JSC::globalFuncParseFloat(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  int *v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  double v28;
  unint64_t v29;
  int v31;
  int v32;
  const char *v33;
  unsigned __int8 *v34;
  const char *v35;
  unsigned int v36;
  uint64_t v38;
  unint64_t v39;
  BOOL v42;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;

  v10 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v45 = 10;
LABEL_28:
    v11 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v45, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_5;
  }
  v11 = *((_QWORD *)a2 + 6);
  v45 = v11;
  if (v11 >> 49)
  {
    v29 = 0xFFFE000000000000;
    if (((v11 + 0x7FFE000000000000) & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v29 = v11;
    if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
      return v29;
    else
      return v11;
  }
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
    goto LABEL_28;
LABEL_5:
  if (*(_DWORD *)(v10 + 80))
  {
    v31 = *(_DWORD *)(v10 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v12 = *(int **)(v11 + 8);
  if ((v12 & 1) == 0)
  {
    if (v12)
      goto LABEL_8;
LABEL_30:
    v13 = 0;
    v14 = 0x100000000;
    goto LABEL_9;
  }
  if ((v12 & 2) != 0)
  {
    v17 = *(_QWORD *)((*(_QWORD *)(v11 + 20) & 0xFFFFFFFFFLL) + 8);
    if (!v17
      || (v18 = *(unsigned int *)(v17 + 4),
          v19 = *(_QWORD *)(v11 + 24),
          v20 = v19 >> 16,
          v18 <= (v19 >> 16)))
    {
      v13 = "";
      v14 = 0x100000000;
      goto LABEL_9;
    }
    v21 = *(unsigned int *)(v17 + 16);
    v13 = *(const char **)(v17 + 8);
    v22 = *(_DWORD *)(v11 + 16);
    if ((int)v18 - (int)v20 <= v22)
    {
      v22 = v18 - v20;
      if (!(_DWORD)v20)
      {
        v14 = v18 & 0xFFFFFFFEFFFFFFFFLL | (((v21 >> 2) & 1) << 32);
        goto LABEL_9;
      }
    }
    v23 = (v21 >> 2) & 1;
    v24 = (v19 >> 16);
    v14 = v22;
    v25 = v18 - v20;
    if ((_DWORD)v23)
    {
      if (v25 >= v22)
      {
        v13 += v24;
        v14 = v22 | 0x100000000;
        goto LABEL_9;
      }
    }
    else if (v25 >= v22)
    {
      v13 += 2 * v24;
      goto LABEL_9;
    }
    __break(1u);
LABEL_47:
    if (v10)
    {
      v33 = v13;
      v34 = (unsigned __int8 *)v13;
      do
      {
        v35 = v33;
        v36 = *(unsigned __int16 *)v33;
        if (v36 > 0xFF)
        {
          if (u_charType(*(unsigned __int16 *)v33) != 12 && v36 - 8232 >= 2 && v36 != 65279)
          {
LABEL_73:
            v46 = v34;
            v47 = v10;
            JSC::jsStrDecimalLiteral<char16_t>((uint64_t *)&v46);
            goto LABEL_56;
          }
        }
        else if (*(_WORD *)v33 > 0x20u || ((1 << v36) & 0x100001A00) == 0)
        {
          v42 = *(_WORD *)v33 == 160 || v36 == 13;
          if (!v42 && v36 != 10)
            goto LABEL_73;
        }
        v33 = v35 + 2;
        v34 += 2;
        --v10;
      }
      while (v10);
    }
LABEL_55:
    v28 = NAN;
    goto LABEL_56;
  }
  v12 = *JSC::JSRopeString::resolveRope(v11, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (!v12)
    goto LABEL_30;
LABEL_8:
  v13 = (const char *)*((_QWORD *)v12 + 1);
  v14 = v12[1] | ((unint64_t)((v12[4] >> 2) & 1) << 32);
LABEL_9:
  if (*(_DWORD *)(v10 + 80))
  {
    v32 = *(_DWORD *)(v10 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
    {
      v39 = v14;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v14 = v39;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v10 = v14;
  v15 = v14 & 0x100000000;
  if (v10 == 1)
  {
    if (v15)
      v26 = *(unsigned __int8 *)v13;
    else
      v26 = *(unsigned __int16 *)v13;
    v27 = v26 - 48;
    if (v27 <= 9)
    {
      v28 = (double)v27;
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (!v15)
    goto LABEL_47;
  if (!v10)
    goto LABEL_55;
  v16 = (unsigned __int8 *)v13;
  while (1)
  {
    v44 = *(unsigned __int8 *)v13;
    if ((v44 - 9) >= 5 && v44 != 32 && v44 != 160)
      break;
    ++v13;
    ++v16;
    if (!--v10)
      goto LABEL_55;
  }
  v46 = v16;
  v47 = v10;
  JSC::jsStrDecimalLiteral<unsigned char>(&v46);
LABEL_56:
  if ((*(_QWORD *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v38 = (int)v28, v28 == (double)(int)v38)
    && ((_DWORD)v38 || (*(_QWORD *)&v28 & 0x8000000000000000) == 0))
  {
    return v38 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v28 + 0x2000000000000;
  }
}

uint64_t JSC::globalFuncDecodeURI(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  return JSC::decode((uint64_t)this, v9, (uint64_t)&JSC::globalFuncDecodeURI(JSC::JSGlobalObject *,JSC::CallFrame *)::doNotUnescapeWhenDecodingURI, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::decode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  JSC::VM *v15;
  unsigned __int8 *v16;
  int *v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  _DWORD *v29;
  uint64_t v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v43;
  const char *v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  BOOL v49;
  char v50;
  char v51;
  char v52;
  unsigned __int8 v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v62;
  char v64;
  char v65;
  char v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::AtomStringImpl *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  JSC::Heap **v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  JSC::Exception *v152;
  WTF::StringImpl *v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)(unint64_t *);
  uint64_t *v180;
  unsigned int v181;
  unsigned int v183;
  char v185;
  char v186;
  char v187;
  int v188;
  int v189;
  uint64_t v190;
  const char *v191;
  uint64_t v192;
  unsigned int v193;
  unsigned int v195;
  char v197;
  char v198;
  char v199;
  unsigned int v200;
  int v201;
  unsigned int v202;
  int v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  const WTF::String *v214;
  unint64_t URIError;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned __int8 *v222;
  WTF::StringImpl *v223;
  _QWORD v224[3];
  int8x16_t v225;
  __int128 v226;

  v13 = a3;
  v222 = (unsigned __int8 *)a2;
  v15 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0 || (v16 = (unsigned __int8 *)a2, *(_BYTE *)(a2 + 5) != 2))
  {
    v16 = JSC::JSValue::toStringSlowCase(&v222, a1, 0, a4, a5, a6, a7, a8);
    if (!v16)
      return 0;
  }
  v17 = (int *)*((_QWORD *)v16 + 1);
  if ((v17 & 1) != 0)
  {
    if ((v17 & 2) != 0)
    {
      v23 = *(_QWORD *)(v16 + 20) & 0xFFFFFFFFFLL;
      v74 = *(_QWORD *)(v23 + 8);
      if (!v74
        || (v75 = *(unsigned int *)(v74 + 4),
            v76 = *((_QWORD *)v16 + 3),
            v77 = v76 >> 16,
            v75 <= (v76 >> 16)))
      {
        v19 = "";
        v21 = 0x100000000;
        goto LABEL_7;
      }
      v78 = *(unsigned int *)(v74 + 16);
      v19 = *(const char **)(v74 + 8);
      v79 = *((_DWORD *)v16 + 4);
      if ((int)v75 - (int)v77 <= v79)
      {
        v79 = v75 - v77;
        if (!(_DWORD)v77)
        {
          v21 = v75 & 0xFFFFFFFEFFFFFFFFLL | (((v78 >> 2) & 1) << 32);
          goto LABEL_7;
        }
      }
      v80 = (v76 >> 16);
      v21 = v79;
      v81 = v75 - v77;
      if (((v78 >> 2) & 1) != 0)
      {
        if (v81 >= v79)
        {
          v19 += v80;
          v21 = v79 | 0x100000000;
          goto LABEL_7;
        }
      }
      else if (v81 >= v79)
      {
        v19 += 2 * v80;
        goto LABEL_7;
      }
      __break(1u);
      goto LABEL_247;
    }
    v17 = *JSC::JSRopeString::resolveRope((unint64_t)v16, (JSC::JSGlobalObject *)a1, a3, a4, a9, a5, a6, a7, a8);
    if (v17)
      goto LABEL_5;
LABEL_125:
    v19 = 0;
    v20 = 1;
    goto LABEL_6;
  }
  if (!v17)
    goto LABEL_125;
LABEL_5:
  v18 = v17[4];
  v19 = (const char *)*((_QWORD *)v17 + 1);
  LODWORD(v17) = v17[1];
  v20 = (v18 >> 2) & 1;
LABEL_6:
  v21 = v17 | (unint64_t)(v20 << 32);
LABEL_7:
  if (*((_DWORD *)v15 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v15, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v9 = v21;
  v15 = *(JSC::VM **)(a1 + 56);
  if ((v21 & 0x100000000) == 0)
  {
    v225.i64[0] = *(_QWORD *)(a1 + 56);
    memset(v224, 0, 21);
    if (!(_DWORD)v21)
    {
      v90 = 0;
      goto LABEL_115;
    }
    v43 = 0;
    while (1)
    {
      v44 = &v19[2 * v43];
      v45 = *(unsigned __int16 *)v44;
      if (v45 != 37)
      {
LABEL_92:
        v225.i16[4] = v45;
        if (v224[1]
          && ((v70 = LODWORD(v224[2]), LODWORD(v224[2]) < *(_DWORD *)(v224[1] + 4))
            ? (v71 = v224[0] == 0)
            : (v71 = 0),
              v71))
        {
          if ((*(_BYTE *)(v224[1] + 16) & 4) != 0)
          {
            if (v45 > 0xFF)
              goto LABEL_97;
            v73 = *(_QWORD *)(v224[1] + 8);
            ++LODWORD(v224[2]);
            *(_BYTE *)(v73 + v70) = v45;
          }
          else
          {
            v72 = *(_QWORD *)(v224[1] + 8);
            ++LODWORD(v224[2]);
            *(_WORD *)(v72 + 2 * v70) = v45;
          }
        }
        else
        {
LABEL_97:
          WTF::StringBuilder::append((uint64_t)v224, &v225.i16[4], 1uLL, a4, a5, a6, a7, a8);
        }
        ++v43;
        goto LABEL_99;
      }
      if (v43 + 3 > v9
        || ((v46 = *((unsigned __int16 *)v44 + 1), v46 - 48 >= 0xA)
          ? (v47 = (unsigned __int16)((v46 | 0x20) - 97) > 5u)
          : (v47 = 0),
            v47
         || ((v48 = *((unsigned __int16 *)v44 + 2), v48 - 48 >= 0xA)
           ? (v49 = (unsigned __int16)((v48 | 0x20) - 97) > 5u)
           : (v49 = 0),
             v49)))
      {
LABEL_171:
        v142 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v142 = 0x900000002;
        *(_QWORD *)(v142 + 8) = "URI error";
        *(_DWORD *)(v142 + 16) = 4;
        v223 = (WTF::StringImpl *)v142;
        v143 = *(_QWORD *)(a1 + 192);
        v144 = *(JSC::Heap ***)(a1 + 56);
        if ((v143 & 1) != 0)
        {
          v179 = *(uint64_t (**)(unint64_t *))(v143 & 0xFFFFFFFFFFFFFFFCLL);
          v180 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
          if ((a1 & 8) != 0)
            v180 = (uint64_t *)(a1 - 16);
          v225.i64[1] = *v180;
          *(_QWORD *)&v226 = a1;
          *((_QWORD *)&v226 + 1) = a1 + 192;
          v143 = v179(&v225.u64[1]);
        }
        v145 = JSC::ErrorInstance::create(v144, v143, &v223, 0, 0, 0, 6, 1);
        v152 = (JSC::Exception *)v145;
        if ((v145 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v145 & 0xFFFFFFFE) + 0x4C)))
        {
          v152 = (JSC::Exception *)JSC::Exception::create((uint64_t)v15, (JSC::VM *)v145, 0, v146, v147, v148, v149, v150);
        }
        v38 = (uint64_t)JSC::VM::throwException(v15, (JSC::JSGlobalObject *)a1, v152, v151, v146, v147, v148, v149, v150);
        v125 = v223;
        v223 = 0;
        if (v125)
        {
LABEL_175:
          if (*(_DWORD *)v125 == 2)
          {
            WTF::StringImpl::~StringImpl(v125, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
          }
          else
          {
            *(_DWORD *)v125 -= 2;
          }
        }
LABEL_177:
        v153 = (WTF::StringImpl *)v224[1];
        v224[1] = 0;
        if (v153)
        {
          if (*(_DWORD *)v153 == 2)
          {
            WTF::StringImpl::~StringImpl(v153, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
          }
          else
          {
            *(_DWORD *)v153 -= 2;
          }
        }
        v41 = (WTF::StringImpl *)v224[0];
        v224[0] = 0;
        if (v41)
          goto LABEL_33;
        return v38;
      }
      if (v46 >= 0x41)
        v50 = 9;
      else
        v50 = 0;
      v51 = v50 + v46;
      if (v48 >= 0x41)
        v52 = (v48 + 9) & 0xF;
      else
        v52 = v48 - 48;
      v53 = v52 | (16 * v51);
      if ((v53 + 62) > 0x32u)
      {
        if ((v53 & 0x80) != 0)
          goto LABEL_171;
        v67 = v53;
        v57 = 3;
      }
      else
      {
        if (v53 <= 0xEFu)
          v54 = 1;
        else
          v54 = 2;
        if (v53 <= 0xDFu)
          v55 = 1;
        else
          v55 = 2;
        v56 = (v55 + v54);
        v57 = (3 * v56);
        if (v43 + v57 > v9)
          goto LABEL_171;
        v58 = &v19[2 * v43 + 10];
        v59 = 1;
        do
        {
          if (*((_WORD *)v58 - 2) != 37)
            goto LABEL_171;
          v60 = *((unsigned __int16 *)v58 - 1);
          if (v60 - 48 >= 0xA && (unsigned __int16)((v60 | 0x20) - 97) > 5u)
            goto LABEL_171;
          v62 = *(unsigned __int16 *)v58;
          if (v62 - 48 >= 0xA && (unsigned __int16)((v62 | 0x20) - 97) > 5u)
            goto LABEL_171;
          if (v60 >= 0x41)
            v64 = 9;
          else
            v64 = 0;
          v65 = v64 + v60;
          if (v62 >= 0x41)
            v66 = (v62 + 9) & 0xF;
          else
            v66 = v62 - 48;
          v225.i8[v59++ + 8] = v66 | (16 * v65);
          v58 += 6;
        }
        while (v56 != v59);
        v67 = v53;
        if ((v53 & 0x80) != 0)
        {
          if (v53 < 0xE0u)
          {
            if (v53 < 0xC2u)
              goto LABEL_171;
            v129 = v53 & 0x1F;
            v128 = 1;
          }
          else
          {
            if (v53 > 0xEFu)
            {
              if (v53 - 240 > 4)
                goto LABEL_171;
              if ((_DWORD)v56 == 2)
                goto LABEL_171;
              if (((1 << (v53 + 16)) & byte_1991585C0[(unint64_t)v225.u8[9] >> 4]) == 0)
                goto LABEL_171;
              v127 = v225.u8[10] ^ 0x80;
              if (v127 > 0x3F)
                goto LABEL_171;
              v126 = v225.i8[9] & 0x3F | ((v53 - 240) << 6);
              v128 = 3;
            }
            else
            {
              v126 = v53 & 0xF;
              if (((a00000000000000[v53 & 0xF] >> (v225.i8[9] >> 5)) & 1) == 0)
                goto LABEL_171;
              v127 = v225.i8[9] & 0x3F;
              v128 = 2;
            }
            if (v128 == (_DWORD)v56)
              goto LABEL_171;
            v129 = v127 | (v126 << 6);
          }
          v138 = v225.u8[v128 + 8] ^ 0x80;
          if (v138 > 0x3F)
            goto LABEL_171;
          v67 = v138 | (v129 << 6);
          if (v67 >= 0x10000)
          {
            v139 = (v129 >> 4) - 10304;
            LOWORD(v223) = (v129 >> 4) - 10304;
            if (!v224[1]
              || (v140 = LODWORD(v224[2]), LODWORD(v224[2]) >= *(_DWORD *)(v224[1] + 4))
              || v224[0]
              || (*(_BYTE *)(v224[1] + 16) & 4) != 0)
            {
              WTF::StringBuilder::append((uint64_t)v224, &v223, 1uLL, a4, a5, a6, a7, a8);
            }
            else
            {
              v141 = *(_QWORD *)(v224[1] + 8);
              ++LODWORD(v224[2]);
              *(_WORD *)(v141 + 2 * v140) = v139;
            }
            v68 = v67 & 0x3FF | 0xDC00;
            goto LABEL_84;
          }
        }
      }
      v68 = (unsigned __int16)v67;
      if ((unsigned __int16)v67 <= 0x7Fu
        && ((*(_QWORD *)(v13 + (((unint64_t)v67 >> 3) & 0x1FFFFFF8)) >> v67) & 1) != 0)
      {
        goto LABEL_92;
      }
LABEL_84:
      v225.i16[4] = v68;
      if (!v224[1])
        goto LABEL_89;
      v69 = LODWORD(v224[2]);
      if (LODWORD(v224[2]) >= *(_DWORD *)(v224[1] + 4) || v224[0])
        goto LABEL_89;
      if ((*(_BYTE *)(v224[1] + 16) & 4) != 0)
      {
        if (v68 <= 0xFF)
        {
          v122 = *(_QWORD *)(v224[1] + 8);
          ++LODWORD(v224[2]);
          *(_BYTE *)(v122 + v69) = v68;
          goto LABEL_90;
        }
LABEL_89:
        WTF::StringBuilder::append((uint64_t)v224, &v225.i16[4], 1uLL, a4, a5, a6, a7, a8);
        goto LABEL_90;
      }
      v121 = *(_QWORD *)(v224[1] + 8);
      ++LODWORD(v224[2]);
      *(_WORD *)(v121 + 2 * v69) = v68;
LABEL_90:
      v43 += v57;
LABEL_99:
      if (v43 >= v9)
      {
        v90 = (WTF::AtomStringImpl *)LODWORD(v224[2]);
        if ((v224[2] & 0x80000000) != 0)
        {
          v38 = (uint64_t)JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v225);
          goto LABEL_177;
        }
        v123 = (_DWORD *)v224[0];
        if (v224[0])
        {
LABEL_144:
          *v123 += 2;
        }
        else
        {
LABEL_115:
          if (v224[1] && *(_DWORD *)(v224[1] + 4) > v90 + (v90 >> 2))
          {
            if ((*(_BYTE *)(v224[1] + 16) & 4) != 0)
              WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)v224, v90, a3, a4, a5, a6, a7, a8);
            else
              WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)v224, v90, a3, a4, a5, a6, a7, a8);
            v124 = (WTF::StringImpl *)v224[0];
            v224[0] = v224[1];
            v224[1] = 0;
            if (v124)
            {
              if (*(_DWORD *)v124 == 2)
              {
                WTF::StringImpl::~StringImpl(v124, v91, v92, v93, v94, v95, v96, v97);
                WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
              }
              else
              {
                *(_DWORD *)v124 -= 2;
              }
            }
          }
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)v224);
          v123 = (_DWORD *)v224[0];
          if (v224[0])
            goto LABEL_144;
        }
        v225.i64[1] = (uint64_t)v123;
        v38 = JSC::jsString((uint64_t)v15, (JSC::VM *)&v225.u64[1], a3, a4, a5, a6, a7, a8);
        v125 = (WTF::StringImpl *)v225.i64[1];
        v225.i64[1] = 0;
        if (v125)
          goto LABEL_175;
        goto LABEL_177;
      }
    }
  }
  v224[0] = *(_QWORD *)(a1 + 56);
  v225.i64[1] = 0;
  *(_QWORD *)&v226 = 0;
  *(_QWORD *)((char *)&v226 + 5) = 0;
  if (!(_DWORD)v21)
  {
    v28 = 0;
LABEL_129:
    if ((_QWORD)v226 && *(_DWORD *)(v226 + 4) > v28 + (v28 >> 2))
    {
      if ((*(_BYTE *)(v226 + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v225.i64[1], v28, a3, a4, a5, a6, a7, a8);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v225.i64[1], v28, a3, a4, a5, a6, a7, a8);
      v170 = (WTF::StringImpl *)v225.i64[1];
      v225.i64[1] = v226;
      *(_QWORD *)&v226 = 0;
      if (v170)
      {
        if (*(_DWORD *)v170 == 2)
        {
          WTF::StringImpl::~StringImpl(v170, v114, v115, v116, v117, v118, v119, v120);
          WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
        }
        else
        {
          *(_DWORD *)v170 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v225.u64[1]);
    v29 = (_DWORD *)v225.i64[1];
    if (v225.i64[1])
      goto LABEL_24;
    goto LABEL_25;
  }
  v10 = 0;
  v11 = v19 + 5;
  do
  {
    v22 = &v19[v10];
    LODWORD(v23) = v19[v10];
    if ((_DWORD)v23 == 37)
    {
      if (v10 + 3 > v9)
        goto LABEL_278;
      v181 = *((unsigned __int8 *)v22 + 1);
      if (v181 - 48 >= 0xA && ((v181 | 0x20) - 97) > 5u)
        goto LABEL_278;
      v183 = *((unsigned __int8 *)v22 + 2);
      if (v183 - 48 >= 0xA && ((v183 | 0x20) - 97) > 5u)
        goto LABEL_278;
      v12 = v13;
      if (v181 >= 0x41)
        v185 = 9;
      else
        v185 = 0;
      v186 = v185 + v181;
      if (v183 >= 0x41)
        v187 = (v183 + 9) & 0xF;
      else
        v187 = v183 - 48;
      LOBYTE(v77) = v187 | (16 * v186);
      if ((v77 + 62) <= 0x32u)
      {
        if (v77 <= 0xEFu)
          v188 = 1;
        else
          v188 = 2;
        if (v77 <= 0xDFu)
          v189 = 1;
        else
          v189 = 2;
        v190 = (v189 + v188);
        v221 = (3 * v190);
        if (v10 + v221 <= v9)
        {
          v191 = &v11[v10];
          v192 = 1;
          while (*(v191 - 2) == 37)
          {
            v193 = *((unsigned __int8 *)v191 - 1);
            if (v193 - 48 >= 0xA && ((v193 | 0x20) - 97) > 5u)
              break;
            v195 = *(unsigned __int8 *)v191;
            if (v195 - 48 >= 0xA && ((v195 | 0x20) - 97) > 5u)
              break;
            if (v193 >= 0x41)
              v197 = 9;
            else
              v197 = 0;
            v198 = v197 + v193;
            if (v195 >= 0x41)
              v199 = (v195 + 9) & 0xF;
            else
              v199 = v195 - 48;
            v225.i8[v192++] = v199 | (16 * v198);
            v191 += 3;
            if (v190 == v192)
            {
              v200 = v77;
              if ((v77 & 0x80) == 0)
                goto LABEL_249;
              if (v77 < 0xE0u)
              {
                if (v77 < 0xC2u)
                  break;
                v204 = v77 & 0x1F;
                v203 = 1;
              }
              else
              {
                if (v77 > 0xEFu)
                {
                  if (v77 - 240 > 4)
                    break;
                  if ((_DWORD)v190 == 2)
                    break;
                  if (((1 << (v77 + 16)) & byte_1991585C0[(unint64_t)v225.u8[1] >> 4]) == 0)
                    break;
                  v202 = v225.u8[2] ^ 0x80;
                  if (v202 > 0x3F)
                    break;
                  v201 = v225.i8[1] & 0x3F | ((v77 - 240) << 6);
                  v203 = 3;
                }
                else
                {
                  v201 = v77 & 0xF;
                  if (((a00000000000000[v77 & 0xF] >> (v225.i8[1] >> 5)) & 1) == 0)
                    break;
                  v202 = v225.i8[1] & 0x3F;
                  v203 = 2;
                }
                if (v203 == (_DWORD)v190)
                  break;
                v204 = v202 | (v201 << 6);
              }
              v209 = v225.u8[v203] ^ 0x80;
              if (v209 > 0x3F)
                break;
              v200 = v209 | (v204 << 6);
              if (v200 >= 0x10000)
              {
                v210 = (v204 >> 4) - 10304;
                LOWORD(v223) = (v204 >> 4) - 10304;
                if (!(_QWORD)v226
                  || (v211 = DWORD2(v226), DWORD2(v226) >= *(_DWORD *)(v226 + 4))
                  || v225.i64[1]
                  || (*(_BYTE *)(v226 + 16) & 4) != 0)
                {
                  WTF::StringBuilder::append((uint64_t)&v225.i64[1], &v223, 1uLL, a4, a5, a6, a7, a8);
                }
                else
                {
                  v212 = *(_QWORD *)(v226 + 8);
                  ++DWORD2(v226);
                  *(_WORD *)(v212 + 2 * v211) = v210;
                }
                v205 = v200 & 0x3FF | 0xDC00;
                goto LABEL_250;
              }
              goto LABEL_249;
            }
          }
        }
LABEL_278:
        v213 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v213 = 0x900000002;
        *(_QWORD *)(v213 + 8) = "URI error";
        *(_DWORD *)(v213 + 16) = 4;
        v225.i64[0] = v213;
        URIError = JSC::createURIError(a1, (WTF::StringImpl **)&v225, v214);
        v30 = JSC::VM::throwException(v15, (JSC::JSGlobalObject *)a1, URIError, v216, v217, v218, v219, v220);
        goto LABEL_26;
      }
LABEL_247:
      if ((v77 & 0x80) != 0)
        goto LABEL_278;
      v200 = v77;
      v221 = 3;
LABEL_249:
      v205 = (unsigned __int16)v200;
      if ((unsigned __int16)v200 > 0x7Fu
        || (v13 = v12, ((*(_QWORD *)(v12 + (((unint64_t)v200 >> 3) & 0x1FFFFFF8)) >> v200) & 1) == 0))
      {
LABEL_250:
        v225.i16[0] = v205;
        if ((_QWORD)v226)
        {
          v206 = DWORD2(v226);
          if (DWORD2(v226) < *(_DWORD *)(v226 + 4) && !v225.i64[1])
          {
            if ((*(_BYTE *)(v226 + 16) & 4) == 0)
            {
              v207 = *(_QWORD *)(v226 + 8);
              ++DWORD2(v226);
              *(_WORD *)(v207 + 2 * v206) = v205;
LABEL_261:
              v10 += v221;
              v13 = v12;
              continue;
            }
            if (v205 <= 0xFF)
            {
              v208 = *(_QWORD *)(v226 + 8);
              ++DWORD2(v226);
              *(_BYTE *)(v208 + v206) = v205;
              goto LABEL_261;
            }
          }
        }
        WTF::StringBuilder::append((uint64_t)&v225.i64[1], &v225, 1uLL, a4, a5, a6, a7, a8);
        goto LABEL_261;
      }
    }
    v225.i8[0] = v23;
    if ((_QWORD)v226
      && ((v24 = DWORD2(v226), DWORD2(v226) < *(_DWORD *)(v226 + 4)) ? (v25 = v225.i64[1] == 0) : (v25 = 0), v25))
    {
      v26 = *(_DWORD *)(v226 + 16);
      v27 = *(_QWORD *)(v226 + 8);
      ++DWORD2(v226);
      if ((v26 & 4) != 0)
        *(_BYTE *)(v27 + v24) = v23;
      else
        *(_WORD *)(v27 + 2 * v24) = v23;
    }
    else
    {
      WTF::StringBuilder::append((uint64_t)&v225.i64[1], &v225, 1uLL, a4, a5, a6, a7, a8);
    }
    ++v10;
  }
  while (v10 < v9);
  v28 = (WTF::AtomStringImpl *)DWORD2(v226);
  if ((DWORD2(v226) & 0x80000000) != 0)
  {
    v38 = (uint64_t)JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)v224);
    goto LABEL_29;
  }
  v29 = (_DWORD *)v225.i64[1];
  if (!v225.i64[1])
    goto LABEL_129;
LABEL_24:
  *v29 += 2;
LABEL_25:
  v225.i64[0] = (uint64_t)v29;
  v30 = JSC::jsString((uint64_t)v15, (JSC::VM *)&v225, a3, a4, a5, a6, a7, a8);
LABEL_26:
  v38 = v30;
  v39 = (WTF::StringImpl *)v225.i64[0];
  v225.i64[0] = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
LABEL_29:
  v40 = (WTF::StringImpl *)v226;
  *(_QWORD *)&v226 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
  v41 = (WTF::StringImpl *)v225.i64[1];
  v225.i64[1] = 0;
  if (v41)
  {
LABEL_33:
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  return v38;
}

uint64_t JSC::globalFuncDecodeURIComponent(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  return JSC::decode((uint64_t)this, v9, (uint64_t)&JSC::globalFuncDecodeURIComponent(JSC::JSGlobalObject *,JSC::CallFrame *)::emptyBitmap, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::globalFuncEncodeURI(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  return JSC::encode(this, v9, (uint64_t)&JSC::globalFuncEncodeURI(JSC::JSGlobalObject *,JSC::CallFrame *)::doNotEscapeWhenEncodingURI, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::encode(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC::VM *v11;
  unsigned __int8 *v12;
  int *v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  unint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  __int8 *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  _BYTE *v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  __int8 *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  _BYTE *v66;
  int8x16_t *v67;
  __int16 v68;
  char *v69;
  WTF::StringImpl *v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const WTF::String *v116;
  unint64_t URIError;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  int8x16_t *v128;
  char *v129;
  char *v130;
  __int16 v131;
  char *v132;
  int8x16_t v133;
  int8x16_t v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  int8x16_t v139;
  int8x16_t v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  unsigned __int8 *v147;
  char v148;
  char v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151[2];
  JSC::VM *v152;
  int8x16_t v153;
  size_t __n[2];
  int8x16x2_t v155;
  int8x16x2_t v156;
  int8x16x2_t v157;
  int8x16x2_t v158;
  int8x16x2_t v159;
  int8x16x2_t v160;
  int8x16x2_t v161;
  int8x16x2_t v162;

  v9 = a3;
  __n[1] = *MEMORY[0x1E0C80C00];
  v147 = (unsigned __int8 *)a2;
  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0 || (v12 = (unsigned __int8 *)a2, *(_BYTE *)(a2 + 5) != 2))
  {
    v12 = JSC::JSValue::toStringSlowCase(&v147, (uint64_t)a1, 0, a4, a5, a6, a7, a8);
    if (!v12)
      return 0;
  }
  v13 = (int *)*((_QWORD *)v12 + 1);
  if ((v13 & 1) == 0)
  {
    if (v13)
    {
LABEL_5:
      v14 = v13[4];
      v15 = (const char *)*((_QWORD *)v13 + 1);
      LODWORD(v13) = v13[1];
      v16 = (v14 >> 2) & 1;
LABEL_6:
      v17 = v13 | (unint64_t)(v16 << 32);
      goto LABEL_7;
    }
LABEL_139:
    v15 = 0;
    v16 = 1;
    goto LABEL_6;
  }
  if ((v13 & 2) == 0)
  {
    v13 = *JSC::JSRopeString::resolveRope((unint64_t)v12, a1, a3, a4, a9, a5, a6, a7, a8);
    if (v13)
      goto LABEL_5;
    goto LABEL_139;
  }
  v83 = *(_QWORD *)((*(_QWORD *)(v12 + 20) & 0xFFFFFFFFFLL) + 8);
  if (v83
    && (v84 = *(unsigned int *)(v83 + 4),
        v85 = *((_QWORD *)v12 + 3),
        v86 = v85 >> 16,
        v84 > (v85 >> 16)))
  {
    v87 = *(unsigned int *)(v83 + 16);
    v15 = *(const char **)(v83 + 8);
    v88 = *((_DWORD *)v12 + 4);
    if ((int)v84 - (int)v86 > v88 || (v88 = v84 - v86, (_DWORD)v86))
    {
      v89 = (v85 >> 16);
      v17 = v88;
      v90 = v84 - v86;
      if (((v87 >> 2) & 1) != 0)
      {
        if (v90 >= v88)
        {
          v15 += v89;
          v17 = v88 | 0x100000000;
          goto LABEL_7;
        }
LABEL_174:
        __break(1u);
      }
      if (v90 < v88)
        goto LABEL_174;
      v15 += 2 * v89;
    }
    else
    {
      v17 = v84 & 0xFFFFFFFEFFFFFFFFLL | (((v87 >> 2) & 1) << 32);
    }
  }
  else
  {
    v15 = "";
    v17 = 0x100000000;
  }
LABEL_7:
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v144 = *((_QWORD *)a1 + 7);
  if ((v17 & 0x100000000) != 0)
  {
    v152 = (JSC::VM *)*((_QWORD *)a1 + 7);
    v150 = 0;
    memset(v151, 0, 13);
    WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v150, (WTF::AtomStringImpl *)v17, a3, a4, a5, a6, a7, a8);
    if ((_DWORD)v17)
    {
      v25 = &v15[v17];
      do
      {
        v26 = *(unsigned __int8 *)v15;
        v27 = *v15;
        if (((*(_QWORD *)(v9 + ((v26 >> 3) & 0x18)) >> v26) & 1) != 0)
        {
          v153.i8[0] = *v15;
          if (v151[0]
            && ((v28 = LODWORD(v151[1]), LODWORD(v151[1]) < *((_DWORD *)v151[0] + 1)) ? (v29 = v150 == 0) : (v29 = 0),
                v29))
          {
            v30 = *((_DWORD *)v151[0] + 4);
            v31 = *((_QWORD *)v151[0] + 1);
            ++LODWORD(v151[1]);
            if ((v30 & 4) != 0)
              *(_BYTE *)(v31 + v28) = v27;
            else
              *(_WORD *)(v31 + 2 * v28) = v26;
          }
          else
          {
            WTF::StringBuilder::append((uint64_t)&v150, &v153, 1uLL, v20, v21, v22, v23, v24);
          }
        }
        else
        {
          if ((char)v26 < 0)
          {
            v149 = v27 & 0x3F | 0x80;
            v32 = 2;
            v27 = (v27 >> 6) | 0xC0;
          }
          else
          {
            v32 = 1;
          }
          v33 = 0;
          v148 = v27;
          do
          {
            v153.i8[0] = 37;
            if (v151[0]
              && ((v34 = LODWORD(v151[1]), LODWORD(v151[1]) < *((_DWORD *)v151[0] + 1))
                ? (v35 = v150 == 0)
                : (v35 = 0),
                  v35))
            {
              v36 = *((_DWORD *)v151[0] + 4);
              v37 = *((_QWORD *)v151[0] + 1);
              ++LODWORD(v151[1]);
              if ((v36 & 4) != 0)
                *(_BYTE *)(v37 + v34) = 37;
              else
                *(_WORD *)(v37 + 2 * v34) = 37;
            }
            else
            {
              WTF::StringBuilder::append((uint64_t)&v150, &v153, 1uLL, v20, v21, v22, v23, v24);
            }
            v38 = *(&v148 + v33);
            v39 = 15;
            do
            {
              v153.i8[v39--] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v38 & 0xF];
              v40 = v38 > 0xF;
              v38 >>= 4;
            }
            while (v40);
            if (v39 + 2 < 16)
            {
              v41 = &v153.i8[v39 + 1];
            }
            else
            {
              memset((char *)&v153.u64[1] + 6, 48, v39 - 13);
              v41 = &v153.i8[14];
            }
            LODWORD(__n[0]) = __n - (_DWORD)v41;
            if (__CFADD__(v151[1], __n[0]))
              v42 = 0xFFFFFFFFLL;
            else
              v42 = (LODWORD(v151[1]) + LODWORD(__n[0]));
            v43 = v151[0];
            if ((v151[0] || (v43 = v150) != 0) && (*((_BYTE *)v43 + 16) & 4) == 0)
            {
              v126 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v150, (WTF::AtomStringImpl *)v42, v19, v20, v21, v22, v23, v24);
              if (v126)
              {
                v127 = LODWORD(__n[0]);
                v128 = (int8x16_t *)((char *)__n - LODWORD(__n[0]));
                if (LODWORD(__n[0]) >= 0x40)
                {
                  v129 = (char *)(v126 + 2 * (__n[0] & 0xFFFFFFC0));
                  v138 = (char *)v126;
                  do
                  {
                    v156.val[0] = *v128;
                    v139 = v128[1];
                    v158.val[0] = v128[2];
                    v140 = v128[3];
                    v128 += 4;
                    v160.val[1] = 0uLL;
                    v160.val[0] = v140;
                    v158.val[1] = 0u;
                    v162.val[0] = v139;
                    v156.val[1] = 0u;
                    v141 = v138;
                    vst2q_s8(v141, v156);
                    v141 += 32;
                    v162.val[1] = 0u;
                    vst2q_s8(v141, v162);
                    v142 = v138 + 64;
                    vst2q_s8(v142, v158);
                    v143 = v138 + 96;
                    vst2q_s8(v143, v160);
                    v138 += 128;
                  }
                  while (v138 != v129);
                }
                else
                {
                  v129 = (char *)v126;
                }
                v130 = (char *)(v126 + 2 * v127);
                while (v129 != v130)
                {
                  v131 = v128->u8[0];
                  v128 = (int8x16_t *)((char *)v128 + 1);
                  *(_WORD *)v129 = v131;
                  v129 += 2;
                }
              }
            }
            else
            {
              v44 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v150, (WTF::AtomStringImpl *)v42, v19, v20, v21, v22, v23, v24);
              if (v44)
              {
                v19 = LODWORD(__n[0]);
                v18 = (char *)__n - LODWORD(__n[0]);
                if (LODWORD(__n[0]) == 1)
                {
                  *v44 = *v18;
                }
                else if (LODWORD(__n[0]))
                {
                  memcpy(v44, v18, LODWORD(__n[0]));
                }
              }
            }
            ++v33;
          }
          while (v33 != v32);
        }
        ++v15;
      }
      while (v15 != v25);
    }
LABEL_109:
    if (((uint64_t)v151[1] & 0x80000000) != 0)
    {
      v78 = (uint64_t)JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v152);
      goto LABEL_115;
    }
    v70 = v150;
    if (v150
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v150, (uint64_t)v18, v19, v20, v21, v22, v23, v24),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v150),
          (v70 = v150) != 0))
    {
      *(_DWORD *)v70 += 2;
    }
    v153.i64[0] = (uint64_t)v70;
    v78 = JSC::jsString(v144, (JSC::VM *)&v153, v19, v20, v21, v22, v23, v24);
    v79 = (WTF::StringImpl *)v153.i64[0];
    v153.i64[0] = 0;
    if (v79)
      goto LABEL_113;
    goto LABEL_115;
  }
  v152 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v150 = 0;
  memset(v151, 0, 13);
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v150, (WTF::AtomStringImpl *)v17, a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)v17)
    goto LABEL_109;
  v45 = &v15[2 * v17];
  v145 = v45;
  v146 = v9;
  while (1)
  {
    v46 = *(unsigned __int16 *)v15;
    if (v46 > 0xFF || ((*(_QWORD *)(v9 + ((v46 >> 3) & 0x1FF8)) >> v46) & 1) == 0)
      break;
    v153.i8[0] = *(_WORD *)v15;
    if (v151[0]
      && ((v47 = LODWORD(v151[1]), LODWORD(v151[1]) < *((_DWORD *)v151[0] + 1)) ? (v48 = v150 == 0) : (v48 = 0), v48))
    {
      v49 = *((_DWORD *)v151[0] + 4);
      v50 = *((_QWORD *)v151[0] + 1);
      ++LODWORD(v151[1]);
      if ((v49 & 4) != 0)
        *(_BYTE *)(v50 + v47) = v46;
      else
        *(_WORD *)(v50 + 2 * v47) = v46;
    }
    else
    {
      WTF::StringBuilder::append((uint64_t)&v150, &v153, 1uLL, v20, v21, v22, v23, v24);
    }
LABEL_102:
    v15 += 2;
    if (v15 == v45)
      goto LABEL_109;
  }
  if ((v46 & 0xFC00) != 0xD800)
  {
    if ((v46 & 0xFC00) == 0xDC00)
      goto LABEL_133;
    goto LABEL_64;
  }
  v15 += 2;
  if (v15 != v45)
  {
    v52 = *(unsigned __int16 *)v15;
    if ((v52 & 0xFC00) == 0xDC00)
    {
      LODWORD(v46) = v52 + ((_DWORD)v46 << 10) - 56613888;
LABEL_64:
      if (v46 > 0x7F)
      {
        if (v46 > 0x7FF)
        {
          if (WORD1(v46))
          {
            v54 = (v46 >> 18) | 0xFFFFFFF0;
            v149 = (v46 >> 12) & 0x3F | 0x80;
            v55 = 2;
          }
          else
          {
            v54 = (v46 >> 12) | 0xFFFFFFE0;
            v55 = 1;
          }
          v148 = v54;
          v53 = v55 + 1;
          *(&v148 + v55) = (v46 >> 6) & 0x3F | 0x80;
        }
        else
        {
          v148 = (v46 >> 6) | 0xC0;
          v53 = 1;
        }
        v51 = v53 + 1;
        *(&v148 + v53) = v46 & 0x3F | 0x80;
      }
      else
      {
        v148 = v46;
        v51 = 1;
      }
      v56 = 0;
      do
      {
        v153.i8[0] = 37;
        if (v151[0]
          && ((v57 = LODWORD(v151[1]), LODWORD(v151[1]) < *((_DWORD *)v151[0] + 1)) ? (v58 = v150 == 0) : (v58 = 0),
              v58))
        {
          v59 = *((_DWORD *)v151[0] + 4);
          v60 = *((_QWORD *)v151[0] + 1);
          ++LODWORD(v151[1]);
          if ((v59 & 4) != 0)
            *(_BYTE *)(v60 + v57) = 37;
          else
            *(_WORD *)(v60 + 2 * v57) = 37;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)&v150, &v153, 1uLL, v20, v21, v22, v23, v24);
        }
        v61 = *(&v148 + v56);
        v62 = 15;
        do
        {
          v153.i8[v62--] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v61 & 0xF];
          v40 = v61 > 0xF;
          v61 >>= 4;
        }
        while (v40);
        if (v62 + 2 < 16)
        {
          v63 = &v153.i8[v62 + 1];
        }
        else
        {
          memset((char *)&v153.u64[1] + 6, 48, v62 - 13);
          v63 = &v153.i8[14];
        }
        LODWORD(__n[0]) = __n - (_DWORD)v63;
        if (__CFADD__(v151[1], __n[0]))
          v64 = 0xFFFFFFFFLL;
        else
          v64 = (LODWORD(v151[1]) + LODWORD(__n[0]));
        v65 = v151[0];
        if ((v151[0] || (v65 = v150) != 0) && (*((_BYTE *)v65 + 16) & 4) == 0)
        {
          v123 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&v150, (WTF::AtomStringImpl *)v64, v19, v20, v21, v22, v23, v24);
          if (v123)
          {
            v124 = LODWORD(__n[0]);
            v67 = (int8x16_t *)((char *)__n - LODWORD(__n[0]));
            if (LODWORD(__n[0]) >= 0x40)
            {
              v69 = (char *)(v123 + 2 * (__n[0] & 0xFFFFFFC0));
              v132 = (char *)v123;
              do
              {
                v155.val[0] = *v67;
                v133 = v67[1];
                v157.val[0] = v67[2];
                v134 = v67[3];
                v67 += 4;
                v159.val[1] = 0uLL;
                v159.val[0] = v134;
                v157.val[1] = 0u;
                v161.val[0] = v133;
                v155.val[1] = 0u;
                v135 = v132;
                vst2q_s8(v135, v155);
                v135 += 32;
                v161.val[1] = 0u;
                vst2q_s8(v135, v161);
                v136 = v132 + 64;
                vst2q_s8(v136, v157);
                v137 = v132 + 96;
                vst2q_s8(v137, v159);
                v132 += 128;
              }
              while (v132 != v69);
            }
            else
            {
              v69 = (char *)v123;
            }
            v125 = (char *)(v123 + 2 * v124);
            while (v69 != v125)
            {
              v68 = v67->u8[0];
              v67 = (int8x16_t *)((char *)v67 + 1);
              *(_WORD *)v69 = v68;
              v69 += 2;
            }
          }
        }
        else
        {
          v66 = (_BYTE *)WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)&v150, (WTF::AtomStringImpl *)v64, v19, v20, v21, v22, v23, v24);
          if (v66)
          {
            v19 = LODWORD(__n[0]);
            v18 = (char *)__n - LODWORD(__n[0]);
            if (LODWORD(__n[0]) == 1)
            {
              *v66 = *v18;
            }
            else if (LODWORD(__n[0]))
            {
              memcpy(v66, v18, LODWORD(__n[0]));
            }
          }
        }
        ++v56;
      }
      while (v56 != v51);
      v45 = v145;
      v9 = v146;
      goto LABEL_102;
    }
  }
LABEL_133:
  v115 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v115 = 0x2C00000002;
  *(_QWORD *)(v115 + 8) = "String contained an illegal UTF-16 sequence.";
  *(_DWORD *)(v115 + 16) = 4;
  v153.i64[0] = v115;
  URIError = JSC::createURIError((unint64_t)a1, (WTF::StringImpl **)&v153, v116);
  v78 = JSC::VM::throwException(v152, a1, URIError, v118, v119, v120, v121, v122);
  v79 = (WTF::StringImpl *)v153.i64[0];
  v153.i64[0] = 0;
  if (!v79)
    goto LABEL_115;
LABEL_113:
  if (*(_DWORD *)v79 == 2)
  {
    WTF::StringImpl::~StringImpl(v79, v71, v72, v73, v74, v75, v76, v77);
    WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
  }
  else
  {
    *(_DWORD *)v79 -= 2;
  }
LABEL_115:
  v80 = v151[0];
  v151[0] = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
    {
      WTF::StringImpl::~StringImpl(v80, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v80 -= 2;
    }
  }
  v81 = v150;
  v150 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
    {
      WTF::StringImpl::~StringImpl(v81, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v81 -= 2;
    }
  }
  return v78;
}

uint64_t JSC::globalFuncEncodeURIComponent(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;

  if (*((_DWORD *)a2 + 8) == 1)
    v9 = 10;
  else
    v9 = *((_QWORD *)a2 + 6);
  return JSC::encode(this, v9, (uint64_t)&JSC::globalFuncEncodeURIComponent(JSC::JSGlobalObject *,JSC::CallFrame *)::doNotEscapeWhenEncodingURIComponent, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::globalFuncEscape(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v10;
  uint64_t *v11;
  JSC::VM *v12;
  int *v13;
  const char *v14;
  unint64_t v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  unsigned int v24;
  const char *v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  __int8 *v36;
  int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  int v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83[3];
  uint64_t v84;
  int8x16_t **v85;
  int8x16_t *v86;
  const char *v87;
  int v88;
  int8x16_t *v89;
  _BYTE v90[2];
  unsigned int v91;
  int8x16_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t vars0;

  v94 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v82 = 10;
    v11 = (uint64_t *)((char *)this + 56);
    v12 = (JSC::VM *)*((_QWORD *)this + 7);
  }
  else
  {
    v10 = *((_QWORD *)a2 + 6);
    v82 = v10;
    v11 = (uint64_t *)((char *)this + 56);
    v12 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((v10 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v10 + 5) == 2)
      goto LABEL_4;
  }
  v10 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v82, (uint64_t)this, 0, a4, a5, a6, a7, a8);
  if (!v10)
    return 0;
LABEL_4:
  v13 = *(int **)(v10 + 8);
  if ((v13 & 1) == 0)
  {
    if (v13)
    {
LABEL_6:
      v14 = (const char *)*((_QWORD *)v13 + 1);
      v15 = v13[1] | ((unint64_t)((v13[4] >> 2) & 1) << 32);
      goto LABEL_7;
    }
LABEL_84:
    v14 = 0;
    v15 = 0x100000000;
    goto LABEL_7;
  }
  if ((v13 & 2) == 0)
  {
    v13 = *JSC::JSRopeString::resolveRope(v10, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (v13)
      goto LABEL_6;
    goto LABEL_84;
  }
  v52 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
  v83[0] = 0;
  v53 = *(_QWORD *)(v52 + 8);
  if (v53)
  {
    v54 = *(unsigned __int8 *)(v53 + 16);
    v55 = *(WTF::StringImpl **)(v53 + 8);
    LODWORD(v53) = *(_DWORD *)(v53 + 4);
    v83[0] = v55;
    v56 = (v54 >> 2) & 1;
  }
  else
  {
    LOBYTE(v56) = 1;
  }
  LODWORD(v83[1]) = v53;
  BYTE4(v83[1]) = v56;
  v14 = WTF::StringView::substring((const char *)v83, *(_DWORD *)(v10 + 26), *(_DWORD *)(v10 + 16));
  v15 = (unint64_t)a2;
LABEL_7:
  if (*((_DWORD *)v12 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v12, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v81 = *v11;
  v84 = *v11;
  memset(v83, 0, 21);
  if ((v15 & 0xFF00000000) != 0)
  {
    if ((_DWORD)v15)
    {
      v16 = &v14[v15];
      do
      {
        v17 = *(unsigned __int8 *)v14;
        if (((*(_QWORD *)((char *)&JSC::globalFuncEscape(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator() const(WTF::StringView)::doNotEscape
                         + ((v17 >> 3) & 0x18)) >> v17) & 1) != 0)
        {
          v92.i8[0] = *v14;
          if (v83[1]
            && ((v18 = LODWORD(v83[2]), LODWORD(v83[2]) < *((_DWORD *)v83[1] + 1)) ? (v19 = v83[0] == 0) : (v19 = 0),
                v19))
          {
            v20 = *((_DWORD *)v83[1] + 4);
            v21 = *((_QWORD *)v83[1] + 1);
            ++LODWORD(v83[2]);
            if ((v20 & 4) != 0)
              *(_BYTE *)(v21 + v18) = v17;
            else
              *(_WORD *)(v21 + 2 * v18) = v17;
          }
          else
          {
            WTF::StringBuilder::append((uint64_t)v83, &v92, 1uLL, a4, a5, a6, a7, a8);
          }
        }
        else
        {
          v22 = 15;
          do
          {
            v92.i8[v22--] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v17 & 0xF];
            v23 = v17 > 0xF;
            v17 >>= 4;
          }
          while (v23);
          if (v22 + 2 < 16)
          {
            v24 = &v92 + v22 + 1;
          }
          else
          {
            memset((char *)&v92.u64[1] + 6, 48, v22 - 13);
            v24 = &vars0 - 106;
          }
          v93 = &v93 - v24;
          LOBYTE(v87) = 37;
          v89 = &v92;
          WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((uint64_t)v83, &v87, (uint64_t)&v89, a4, a5, a6, a7, a8);
        }
        ++v14;
      }
      while (v14 != v16);
    }
  }
  else if ((_DWORD)v15)
  {
    v25 = &v14[2 * v15];
    do
    {
      v26 = *(unsigned __int16 *)v14;
      if (v26 >= 0x100)
      {
        v29 = v26 >> 8;
        v30 = 15;
        do
        {
          v92.i8[v30--] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v29 & 0xF];
          v23 = v29 > 0xF;
          v29 >>= 4;
        }
        while (v23);
        if (v30 + 2 < 16)
        {
          v31 = &v92 + v30 + 1;
        }
        else
        {
          memset((char *)&v92.u64[1] + 6, 48, v30 - 13);
          v31 = &vars0 - 106;
        }
        v93 = &v93 - v31;
        v32 = v26;
        v33 = 15;
        do
        {
          v90[v33-- - 2] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v32 & 0xF];
          v23 = v32 > 0xF;
          v32 >>= 4;
        }
        while (v23);
        if (v33 + 2 < 16)
        {
          v34 = &v90[v33 - 1];
        }
        else
        {
          memset(v90, 48, v33 - 13);
          v34 = v90;
        }
        v91 = &v91 - (_DWORD)v34;
        v86 = &v92;
        v87 = "%u";
        v88 = 2;
        v85 = &v89;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((uint64_t)v83, (uint64_t)&v87, (uint64_t)&v86, (uint64_t)&v85, a5, a6, a7, a8);
      }
      else if (((*(_QWORD *)((char *)&JSC::globalFuncEscape(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator() const(WTF::StringView)::doNotEscape
                            + ((v26 >> 3) & 0x1FF8)) >> v26) & 1) != 0)
      {
        v92.i16[0] = *(_WORD *)v14;
        if (v83[1]
          && ((v27 = LODWORD(v83[2]), LODWORD(v83[2]) < *((_DWORD *)v83[1] + 1)) ? (v28 = v83[0] == 0) : (v28 = 0), v28))
        {
          v37 = *((_DWORD *)v83[1] + 4);
          v38 = *((_QWORD *)v83[1] + 1);
          ++LODWORD(v83[2]);
          if ((v37 & 4) != 0)
            *(_BYTE *)(v38 + v27) = v26;
          else
            *(_WORD *)(v38 + 2 * v27) = v26;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)v83, &v92, 1uLL, a4, a5, a6, a7, a8);
        }
      }
      else
      {
        v35 = 15;
        do
        {
          v92.i8[v35--] = WTF::Internal::hexDigitsForMode(WTF::HexConversionMode)::uppercaseHexDigits[v26 & 0xF];
          v23 = v26 > 0xF;
          v26 >>= 4;
        }
        while (v23);
        if (v35 + 2 < 16)
        {
          LODWORD(v36) = &v92 + v35 + 1;
        }
        else
        {
          v36 = &v92.i8[14];
          memset((char *)&v92.u64[1] + 6, 48, v35 - 13);
        }
        v93 = &v93 - (_DWORD)v36;
        LOBYTE(v87) = 37;
        v89 = &v92;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::HexNumberBuffer,void>>((uint64_t)v83, &v87, (uint64_t)&v89, a4, a5, a6, a7, a8);
      }
      v14 += 2;
    }
    while (v14 != v25);
  }
  if (((uint64_t)v83[2] & 0x80000000) != 0)
  {
    JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v84);
    v47 = 0;
  }
  else
  {
    v39 = v83[0];
    if (v83[0]
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)v83, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)v83),
          (v39 = v83[0]) != 0))
    {
      *(_DWORD *)v39 += 2;
    }
    v92.i64[0] = (uint64_t)v39;
    v47 = JSC::jsString(v81, (JSC::VM *)&v92, (uint64_t)a3, a4, a5, a6, a7, a8);
    v48 = (WTF::StringImpl *)v92.i64[0];
    v92.i64[0] = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
  }
  v49 = v83[1];
  v83[1] = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v83[0];
  v83[0] = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  return v47;
}

uint64_t JSC::globalFuncUnescape(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v10;
  JSC::VM *v11;
  uint64_t *v12;
  int *v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  __int16 v46;
  char v47;
  char v48;
  char v49;
  unsigned int v53;
  char v54;
  char v55;
  char v56;
  unsigned int v59;
  unsigned int v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;
  char v65;
  char v66;
  char v67;
  _DWORD *v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int8x16_t v111[2];
  uint64_t v112;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v110 = 10;
    v12 = (uint64_t *)((char *)this + 56);
    v11 = (JSC::VM *)*((_QWORD *)this + 7);
  }
  else
  {
    v10 = *((_QWORD *)a2 + 6);
    v110 = v10;
    v12 = (uint64_t *)((char *)this + 56);
    v11 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((v10 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v10 + 5) == 2)
      goto LABEL_4;
  }
  v10 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v110, (uint64_t)this, 0, a4, a5, a6, a7, a8);
  if (!v10)
    return 0;
LABEL_4:
  v13 = *(int **)(v10 + 8);
  if ((v13 & 1) == 0)
  {
    if (v13)
    {
LABEL_6:
      v14 = v13[4];
      v15 = (const char *)*((_QWORD *)v13 + 1);
      LODWORD(v13) = v13[1];
      v16 = (v14 >> 2) & 1;
LABEL_7:
      v17 = v13 | (unint64_t)(v16 << 32);
      goto LABEL_8;
    }
LABEL_176:
    v15 = 0;
    v16 = 1;
    goto LABEL_7;
  }
  if ((v13 & 2) == 0)
  {
    v13 = *JSC::JSRopeString::resolveRope(v10, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (v13)
      goto LABEL_6;
    goto LABEL_176;
  }
  v81 = *(_QWORD *)(v10 + 20) & 0xFFFFFFFFFLL;
  v111[0].i64[1] = 0;
  v111[1].i32[0] = 0;
  LOBYTE(v82) = 1;
  v111[1].i8[4] = 1;
  v83 = *(_QWORD *)(v81 + 8);
  if (v83)
  {
    v84 = *(unsigned __int8 *)(v83 + 16);
    v85 = *(_QWORD *)(v83 + 8);
    LODWORD(v83) = *(_DWORD *)(v83 + 4);
    v111[0].i64[1] = v85;
    v82 = (v84 >> 2) & 1;
  }
  v111[1].i32[0] = v83;
  v111[1].i8[4] = v82;
  v15 = WTF::StringView::substring(&v111[0].i8[8], *(_DWORD *)(v10 + 26), *(_DWORD *)(v10 + 16));
  v17 = (unint64_t)a2;
LABEL_8:
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v18 = *v12;
  v112 = *v12;
  v111[0].i64[1] = 0;
  memset(&v111[1], 0, 13);
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v111[0].u64[1], (WTF::AtomStringImpl *)v17, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((v17 & 0xFF00000000) != 0)
  {
    if ((int)v17 >= 1)
    {
      v30 = 0;
      v31 = v17 - 6;
      v32 = v17 - 3;
      while (1)
      {
        if (v17 < (unint64_t)v30)
          goto LABEL_177;
        LOWORD(v26) = v30;
        v27 = v17 - (uint64_t)v30;
        if (v17 == (uint64_t)v30)
          goto LABEL_177;
        v26 = (unint64_t)&v15[v30];
        v28 = *(unsigned __int8 *)v26;
        if ((_DWORD)v28 != 37 || v30 > v31)
          break;
        if (v27 <= 1)
          goto LABEL_177;
        v29 = *(unsigned __int8 *)(v26 + 1);
        if ((_DWORD)v29 != 117)
          break;
        if (v27 <= 2)
          goto LABEL_177;
        v28 = *(unsigned __int8 *)(v26 + 2);
        v29 = (v28 - 48);
        if (v29 >= 0xA)
        {
          v29 = ((v28 | 0x20) - 97);
          if (v29 > 5)
            goto LABEL_43;
        }
        if (v27 <= 3)
          goto LABEL_177;
        v29 = *(unsigned __int8 *)(v26 + 3);
        if ((v29 - 48) >= 0xA && ((v29 | 0x20) - 97) > 5u)
          goto LABEL_43;
        if (v27 <= 4)
          goto LABEL_177;
        v41 = *(unsigned __int8 *)(v26 + 4);
        if (v41 - 48 >= 0xA && ((v41 | 0x20) - 97) > 5u)
          goto LABEL_43;
        if (v27 <= 5)
          goto LABEL_177;
        v42 = *(unsigned __int8 *)(v26 + 5);
        if (v42 - 48 >= 0xA && ((v42 | 0x20) - 97) > 5u)
          goto LABEL_43;
        if (v28 >= 0x41)
          v43 = 9;
        else
          v43 = 0;
        v44 = v43 + v28;
        v45 = ((_BYTE)v29 + 9) & 0xF;
        if (v29 < 0x41)
          v45 = v29 - 48;
        v46 = (v44 << 12) | (v45 << 8);
        if (v41 >= 0x41)
          v47 = 9;
        else
          v47 = 0;
        v48 = v47 + v41;
        if (v42 >= 0x41)
          v49 = (v42 + 9) & 0xF;
        else
          v49 = v42 - 48;
        LOBYTE(v27) = v49 | (16 * v48);
        LOWORD(v26) = v46 & 0xFF00 | v27;
        v111[0].i16[0] = v26;
        v29 = v111[1].i64[0];
        if (v111[1].i64[0])
        {
          v28 = v111[1].u32[2];
          if (v111[1].i32[2] < *(_DWORD *)(v111[1].i64[0] + 4) && !v111[0].i64[1])
          {
            if ((*(_BYTE *)(v111[1].i64[0] + 16) & 4) == 0)
            {
              v27 = *(_QWORD *)(v111[1].i64[0] + 8);
              v29 = ++v111[1].i32[2];
              *(_WORD *)(v27 + 2 * v28) = v26;
              goto LABEL_79;
            }
            goto LABEL_178;
          }
        }
LABEL_78:
        WTF::StringBuilder::append((uint64_t)&v111[0].i64[1], v111, 1uLL, v21, v22, v23, v24, v25);
LABEL_79:
        v30 += 6;
LABEL_53:
        if (v30 >= (int)v17)
          goto LABEL_150;
      }
      if ((_DWORD)v28 != 37 || v30 > v32)
        goto LABEL_44;
      if (v27 > 1)
      {
        v28 = *(unsigned __int8 *)(v26 + 1);
        v29 = ((v28 | 0x20) - 97);
        if ((v28 - 48) >= 0xA && v29 > 5)
          goto LABEL_43;
        if (v27 > 2)
        {
          v36 = *(unsigned __int8 *)(v26 + 2);
          if (v36 - 48 >= 0xA && ((v36 | 0x20) - 97) > 5u)
          {
LABEL_43:
            v28 = 37;
          }
          else
          {
            if (v28 >= 0x41)
              v37 = 9;
            else
              v37 = 0;
            v38 = v37 + v28;
            if (v36 >= 0x41)
              v39 = ((_BYTE)v36 + 9) & 0xF;
            else
              v39 = v36 - 48;
            v28 = v39 | (16 * v38);
            v30 += 2;
          }
LABEL_44:
          v111[0].i8[0] = v28;
          if (v111[1].i64[0]
            && ((v26 = v111[1].u32[2], v111[1].i32[2] < *(_DWORD *)(v111[1].i64[0] + 4))
              ? (v40 = v111[0].i64[1] == 0)
              : (v40 = 0),
                v40))
          {
            v29 = *(unsigned int *)(v111[1].i64[0] + 16);
            v27 = *(_QWORD *)(v111[1].i64[0] + 8);
            ++v111[1].i32[2];
            if ((v29 & 4) != 0)
            {
              *(_BYTE *)(v27 + v26) = v28;
            }
            else
            {
              v28 = v28;
              *(_WORD *)(v27 + 2 * v26) = v28;
            }
          }
          else
          {
            WTF::StringBuilder::append((uint64_t)&v111[0].i64[1], v111, 1uLL, v21, v22, v23, v24, v25);
          }
          ++v30;
          goto LABEL_53;
        }
      }
LABEL_177:
      __break(1u);
LABEL_178:
      if ((unsigned __int16)v26 <= 0xFFu)
      {
        v26 = *(_QWORD *)(v29 + 8);
        v29 = (v28 + 1);
        v111[1].i32[2] = v28 + 1;
        *(_BYTE *)(v26 + v28) = v27;
        goto LABEL_79;
      }
      goto LABEL_78;
    }
    goto LABEL_150;
  }
  if ((int)v17 >= 1)
  {
    v30 = 0;
    v31 = v17 - 6;
    v32 = v17 - 3;
    do
    {
      if (v17 < (unint64_t)v30)
        goto LABEL_177;
      LOWORD(v26) = v30;
      v28 = v17 - (uint64_t)v30;
      if (v17 == (uint64_t)v30)
        goto LABEL_177;
      v27 = (unint64_t)&v15[2 * v30];
      LODWORD(v26) = *(unsigned __int16 *)v27;
      if ((_DWORD)v26 != 37 || v30 > v31)
        goto LABEL_88;
      if (v28 <= 1)
        goto LABEL_177;
      v29 = *(unsigned __int16 *)(v27 + 2);
      if ((_DWORD)v29 == 117)
      {
        if (v28 <= 2)
          goto LABEL_177;
        LODWORD(v26) = *(unsigned __int16 *)(v27 + 4);
        v29 = (unsigned __int16)((v26 | 0x20) - 97);
        if ((v26 - 48) >= 0xA && v29 > 5)
          goto LABEL_118;
        if (v28 <= 3)
          goto LABEL_177;
        v29 = *(unsigned __int16 *)(v27 + 6);
        if ((v29 - 48) >= 0xA && (unsigned __int16)((v29 | 0x20) - 97) > 5u)
          goto LABEL_118;
        if (v28 <= 4)
          goto LABEL_177;
        v59 = *(unsigned __int16 *)(v27 + 8);
        if (v59 - 48 >= 0xA && (unsigned __int16)((v59 | 0x20) - 97) > 5u)
          goto LABEL_118;
        if (v28 <= 5)
          goto LABEL_177;
        v60 = *(unsigned __int16 *)(v27 + 10);
        if (v60 - 48 >= 0xA && (unsigned __int16)((v60 | 0x20) - 97) > 5u)
        {
LABEL_118:
          LOWORD(v26) = 37;
          goto LABEL_119;
        }
        if (v26 >= 0x41)
          v61 = 9;
        else
          v61 = 0;
        v62 = v61 + v26;
        if (v29 >= 0x41)
          v63 = ((_BYTE)v29 + 9) & 0xF;
        else
          v63 = v29 - 48;
        v64 = (v62 << 12) | (v63 << 8);
        if (v59 >= 0x41)
          v65 = 9;
        else
          v65 = 0;
        v66 = v65 + v59;
        if (v60 >= 0x41)
          v67 = (v60 + 9) & 0xF;
        else
          v67 = v60 - 48;
        LOWORD(v26) = v64 & 0xFF00 | (v67 | (16 * v66));
        v30 += 5;
      }
      else
      {
LABEL_88:
        if ((_DWORD)v26 == 37 && v30 <= v32)
        {
          if (v28 <= 1)
            goto LABEL_177;
          LODWORD(v26) = *(unsigned __int16 *)(v27 + 2);
          v29 = (unsigned __int16)((v26 | 0x20) - 97);
          if ((v26 - 48) >= 0xA && v29 > 5)
            goto LABEL_118;
          if (v28 <= 2)
            goto LABEL_177;
          v53 = *(unsigned __int16 *)(v27 + 4);
          if (v53 - 48 >= 0xA && (unsigned __int16)((v53 | 0x20) - 97) > 5u)
            goto LABEL_118;
          if (v26 >= 0x41)
            v54 = 9;
          else
            v54 = 0;
          v55 = v54 + v26;
          if (v53 >= 0x41)
            v56 = (v53 + 9) & 0xF;
          else
            v56 = v53 - 48;
          LOWORD(v26) = (v56 | (16 * v55));
          v30 += 2;
        }
      }
LABEL_119:
      v111[0].i16[0] = v26;
      if (v111[1].i64[0])
      {
        v27 = v111[1].u32[2];
        if (v111[1].i32[2] < *(_DWORD *)(v111[1].i64[0] + 4) && v111[0].i64[1] == 0)
        {
          if ((*(_BYTE *)(v111[1].i64[0] + 16) & 4) == 0)
          {
            v28 = *(_QWORD *)(v111[1].i64[0] + 8);
            v29 = ++v111[1].i32[2];
            *(_WORD *)(v28 + 2 * v27) = v26;
            goto LABEL_125;
          }
          if ((unsigned __int16)v26 <= 0xFFu)
          {
            v28 = *(_QWORD *)(v111[1].i64[0] + 8);
            v29 = ++v111[1].i32[2];
            *(_BYTE *)(v28 + v27) = v26;
            goto LABEL_125;
          }
        }
      }
      WTF::StringBuilder::append((uint64_t)&v111[0].i64[1], v111, 1uLL, v21, v22, v23, v24, v25);
LABEL_125:
      ++v30;
    }
    while (v30 < (int)v17);
  }
LABEL_150:
  if (v111[1].i32[2] < 0)
  {
    JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v112);
    v76 = 0;
  }
  else
  {
    v68 = (_DWORD *)v111[0].i64[1];
    if (v111[0].i64[1]
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v111[0].u64[1], v19, v20, v21, v22, v23, v24, v25),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v111[0].u64[1]),
          (v68 = (_DWORD *)v111[0].i64[1]) != 0))
    {
      *v68 += 2;
    }
    v111[0].i64[0] = (uint64_t)v68;
    v76 = JSC::jsString(v18, (JSC::VM *)v111, v20, v21, v22, v23, v24, v25);
    v77 = (WTF::StringImpl *)v111[0].i64[0];
    v111[0].i64[0] = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 == 2)
      {
        WTF::StringImpl::~StringImpl(v77, v69, v70, v71, v72, v73, v74, v75);
        WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
      }
      else
      {
        *(_DWORD *)v77 -= 2;
      }
    }
  }
  v78 = (WTF::StringImpl *)v111[1].i64[0];
  v111[1].i64[0] = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  v79 = (WTF::StringImpl *)v111[0].i64[1];
  v111[0].i64[1] = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
    {
      WTF::StringImpl::~StringImpl(v79, v69, v70, v71, v72, v73, v74, v75);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    }
    else
    {
      *(_DWORD *)v79 -= 2;
    }
  }
  return v76;
}

uint64_t JSC::globalFuncThrowTypeError(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwTypeError(this, &v4);
}

uint64_t JSC::globalFuncThrowTypeErrorArgumentsCalleeAndCaller(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwTypeError((unint64_t)this, &v4, (uint64_t)"'arguments', 'callee', and 'caller' cannot be accessed in this context.", 72);
}

unint64_t JSC::globalFuncMakeTypeError(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;
  _QWORD v11[3];

  v6 = *(_QWORD *)(this + 176);
  if ((v6 & 1) != 0)
  {
    v9 = *(uint64_t (**)(_QWORD *))(v6 & 0xFFFFFFFFFFFFFFFCLL);
    v10 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v10 = (_QWORD *)(this - 16);
    v11[0] = *v10;
    v11[1] = this;
    v11[2] = this + 176;
    v6 = v9(v11);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v7 = 10;
  else
    v7 = *((_QWORD *)a2 + 6);
  return JSC::ErrorInstance::create((JSC::JSGlobalObject *)this, v6, v7, 10, 0, 0, 5, 0, a4);
}

uint64_t JSC::globalFuncProtoGetter(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
  {
    v8 = *((_QWORD *)a2 + 5);
    return JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v8, (unint64_t)this);
  }
  v5 = *(unsigned __int8 *)(v4 + 5);
  if (v5 - 51 <= 5)
  {
    v8 = 10;
    return JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v8, (unint64_t)this);
  }
  v8 = *((_QWORD *)a2 + 5);
  if (v5 < 0x17)
    return JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v8, (unint64_t)this);
  if ((*(_WORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0xC) & 0x800) == 0)
  {
    v6 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x30);
    if (!v6)
      return *(_QWORD *)(v4 + 16);
    return v6;
  }
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) + 0xB0))();
}

uint64_t JSC::globalFuncProtoSetter(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  JSC::VM *v8;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
  {
    if ((v4 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError((unint64_t)this, &v8, (uint64_t)"Object.prototype.__proto__ called on null or undefined", 55);
  }
  else if ((v4 & 0xFFFFFFFFFFFFFFF7) == 2 || *(unsigned __int8 *)(v4 + 5) - 51 < 6)
  {
    return JSC::throwTypeError((unint64_t)this, &v8, (uint64_t)"Object.prototype.__proto__ called on null or undefined", 55);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v6 = 10;
  else
    v6 = *((_QWORD *)a2 + 6);
  if ((v4 & 0xFFFE000000000002) == 0
    && *(unsigned __int8 *)(v4 + 5) >= 0x17u
    && ((v6 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v6 + 5) > 0x16u || v6 == 2))
  {
    (*(void (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) + 0xA8))();
  }
  return 10;
}

uint64_t JSC::globalFuncSetPrototypeDirect(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;

  v9 = *((_QWORD *)a2 + 6);
  if ((v9 & 0xFFFE000000000002) != 0)
  {
    if (v9 != 2)
      return 10;
    goto LABEL_7;
  }
  if (v9 == 2 || *(unsigned __int8 *)(v9 + 5) > 0x16u)
LABEL_7:
    JSC::JSObject::setPrototypeDirect(*((_QWORD *)a2 + 5), this[7], v9, a4, a5, a6, a7, a8, a9);
  return 10;
}

JSC::Exception *JSC::globalFuncSetPrototypeDirectOrThrow(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v10;
  unint64_t v11;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v11 + 5) > 0x16u || v11 == 2)
  {
    JSC::JSObject::setPrototypeDirect(*((_QWORD *)a2 + 5), v10, v11, a4, a5, a6, a7, a8, a9);
    return (JSC::Exception *)10;
  }
  else
  {
    v13 = WTF::fastCompactMalloc((WTF *)0x20);
    v14.i64[0] = 0x1800000002;
    *(_QWORD *)v13 = 0x1800000002;
    *(_QWORD *)(v13 + 8) = "is not an object or null";
    *(_DWORD *)(v13 + 16) = 4;
    v36 = v13;
    v26 = JSC::createError((unint64_t)this, v11, &v36, (uint64_t)JSC::invalidPrototypeSourceAppender, v15, v16, v17, v18, v14);
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v13, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
    if ((v26 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C)))
    {
      v26 = JSC::Exception::create((uint64_t)v10, (JSC::VM *)v26, 0, v21, v22, v23, v24, v25);
    }
    return JSC::VM::throwException(v10, this, (JSC::Exception *)v26, v27, v21, v22, v23, v24, v25);
  }
}

uint64_t JSC::globalFuncHostPromiseRejectionTracker(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  void (*v12)(JSC *, uint64_t);
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (*((_DWORD *)a2 + 8) == 1)
    v10 = 10;
  else
    v10 = *((_QWORD *)a2 + 6);
  if (&JSC::JSInternalPromise::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
    return 10;
  v11 = *((_QWORD *)this + 7);
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v28 = 10;
LABEL_20:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v28, this, a3, a4, a5, a6, a7, a8, a9);
    v21 = v20;
    goto LABEL_22;
  }
  a3 = *((_QWORD *)a2 + 7);
  v28 = a3;
  if ((unint64_t)a3 >= 0xFFFE000000000000)
    goto LABEL_6;
  v21 = a3 - 0x2000000000000;
  if ((unint64_t)(a3 - 0x2000000000000) >= 0xFFFC000000000000)
    goto LABEL_20;
LABEL_22:
  v22 = (v21 >> 52) & 0x7FF;
  if ((v22 - 1023) > 0x53)
  {
    v12 = *(void (**)(JSC *, uint64_t))(*((_QWORD *)this + 410) + 80);
    if (v12)
      goto LABEL_7;
    goto LABEL_9;
  }
  v23 = v21 >> (51 - (v21 >> 52));
  if (v22 > 0x433)
    LODWORD(v23) = v21 << ((v21 >> 52) - 51);
  if (v22 >= 0x41F)
    v24 = v23;
  else
    v24 = (((1 << ((v21 >> 52) + 1)) - 1) & v23) + (1 << ((v21 >> 52) + 1));
  if ((v21 & 0x8000000000000000) == 0)
    a3 = v24;
  else
    a3 = -v24;
LABEL_6:
  v12 = *(void (**)(JSC *, uint64_t))(*((_QWORD *)this + 410) + 80);
  if (v12)
  {
LABEL_7:
    v12(this, v10);
    goto LABEL_17;
  }
  if ((_DWORD)a3)
    goto LABEL_17;
LABEL_9:
  v13 = (uint64_t *)(v11 + 93408);
  v29 = v10;
  v14 = *(unsigned int *)(v11 + 93420);
  if ((_DWORD)v14 == *(_DWORD *)(v11 + 93416))
  {
    WTF::Vector<JSC::Strong<JSC::JSPromise,(JSC::ShouldStrongDestructorGrabLock)0>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::VM &,JSC::JSPromise*&>(v11 + 93408, (_QWORD *)v11, &v29, a4, a5, a6, a7, a8);
  }
  else
  {
    v15 = *v13;
    v16 = *(_QWORD *)(v11 + 712);
    if (!v16)
    {
      v26 = *v13;
      v27 = *(unsigned int *)(v11 + 93420);
      JSC::HandleSet::grow((JSC::HandleSet *)(v11 + 672), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v15 = v26;
      v14 = v27;
      v16 = *(_QWORD *)(v11 + 712);
    }
    *(_QWORD *)(v11 + 712) = *(_QWORD *)v16;
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)v16 = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_QWORD *)(v15 + 8 * v14) = v16 + 16;
    if (!*(_QWORD *)(v16 + 16))
    {
      v17 = *(unint64_t **)((v16 & 0xFFFFFFFFFFFFF000) + 0x10);
      v18 = v17[3];
      v17 += 3;
      *(_QWORD *)v16 = v18;
      *(_QWORD *)(v16 + 8) = v17;
      *v17 = v16;
      *(_QWORD *)(v18 + 8) = v16;
    }
    *(_QWORD *)(v16 + 16) = v10;
    ++*(_DWORD *)(v11 + 93420);
  }
LABEL_17:
  if (!*(_DWORD *)(v11 + 80))
    return 10;
  v25 = *(_DWORD *)(v11 + 80);
  if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v11 + 16))
    return 10;
  return 0;
}

uint64_t JSC::globalFuncBuiltinLog(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  int *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v28 = 10;
  }
  else
  {
    v9 = *((_QWORD *)a2 + 6);
    v28 = v9;
    if ((v9 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v9 + 5) == 2)
    {
      v10 = *(int **)(v9 + 8);
      if ((v10 & 1) != 0)
      {
        v10 = *JSC::JSRopeString::resolveRope(v9, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (!v10)
          goto LABEL_7;
      }
      else if (!v10)
      {
LABEL_7:
        v29 = (WTF::StringImpl *)v10;
        goto LABEL_8;
      }
      *v10 += 2;
      goto LABEL_7;
    }
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v28, this, a3, a4, a5, a6, a7, a8, (int **)&v29);
LABEL_8:
  WTF::dataLog<WTF::String,char [2]>((WTF::PrintStream *)&v29, "\n");
  v18 = v29;
  v29 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  return 10;
}

uint64_t JSC::globalFuncBuiltinDescribe(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::Structure *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  void (**v34)(WTF::StringPrintStream *__hidden);
  WTF *v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a2 + 8) == 1)
    v3 = 10;
  else
    v3 = *((_QWORD *)a2 + 6);
  v4 = 0;
  v5 = *((_QWORD *)this + 7);
  v32 = v3;
  v34 = off_1E3572250;
  v35 = (WTF *)v37;
  v36 = xmmword_199122F80;
  v37[0] = 0;
  if (v3 && (v3 & 0xFFFE000000000002) == 0)
    v4 = (JSC::Structure *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE));
  JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)&v32, (WTF::PrintStream *)&v34, 0, v4);
  v34[5]((WTF::StringPrintStream *)&v34);
  v13 = v35;
  if (!v35)
  {
    v33 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v35, v36, (uint64_t *)&v33);
  v13 = v35;
  if (v35 != (WTF *)v37)
LABEL_10:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  v21 = JSC::jsString(v5, (JSC::VM *)&v33, v7, v8, v9, v10, v11, v12);
  v22 = v33;
  v33 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  return v21;
}

uint64_t JSC::globalFuncImportMapStatus(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  *(_BYTE *)(*((_QWORD *)this + 409) + 40) &= ~1u;
  if ((*((_BYTE *)this + 1952) & 1) != 0)
    return 10;
  result = JSC::LazyClassStructure::get((JSC *)((char *)this + 1952), (unint64_t)this);
  if (!result)
    return 10;
  return result;
}

unint64_t JSC::globalFuncImportModule(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t *v11;
  int v12;
  unint64_t v13;
  unint64_t SlowCase;
  int v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t (*v43)(unsigned __int8 **);
  unsigned __int8 **v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50[5];
  _DWORD *v51;
  unsigned __int8 *v52[3];

  v10 = *(_QWORD *)(this + 56);
  v11 = (unint64_t *)(v10 + 38992);
  v12 = *(_DWORD *)(this + 1164);
  if (v12)
    v13 = 16 * (v12 & 0xFFFFFFFE);
  else
    v13 = 0;
  SlowCase = *v11;
  if (*v11 < *(_QWORD *)(v10 + 39000))
    goto LABEL_5;
  SlowCase = *(_QWORD *)(v10 + 39008);
  if ((SlowCase & 1) == 0)
  {
    v39 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 39016);
    *(_QWORD *)(v10 + 39000) = SlowCase + HIDWORD(v39);
    *(_QWORD *)(v10 + 39008) = SlowCase + (int)v39;
LABEL_5:
    *v11 = SlowCase + 32;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM(*(JSC **)(this + 56), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 38968, v10 + 192, 32, 0, 0, v47, v48, v49);
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v15 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)SlowCase = v13 >> 4;
  *(_DWORD *)(SlowCase + 4) = v15;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  *(_OWORD *)(SlowCase + 16) = xmmword_19914EFB0;
  JSC::CallFrame::callerSourceOrigin(a2, (JSC::VM *)v10, a5, a6, a7, a8, (uint64_t)v50);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x198A142DCLL);
  }
  v23 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  v52[0] = v23;
  if (((unint64_t)v23 & 0xFFFE000000000002) != 0 || v23[5] != 2)
    v23 = JSC::JSValue::toStringSlowCase(v52, this, (JSC::Structure *)1, v18, v19, v20, v21, v22);
  v24 = (unsigned int *)(v10 + 80);
  if (*(_DWORD *)(v10 + 80))
  {
    v40 = *(_DWORD *)(v10 + 80);
    if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v17, v18, v19, v20, v21, v22);
    v41 = *(_QWORD *)(v10 + 16);
    if (v41)
    {
      if (*(_QWORD *)(*(_QWORD *)(this + 56) + 24) == v41)
        goto LABEL_17;
      *(_QWORD *)(v10 + 16) = 0;
      do
        v42 = __ldaxr(v24);
      while (__stlxr(v42 & 0xFFFFFFEF, v24));
      goto LABEL_45;
    }
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v25 = 10;
  else
    v25 = *((_QWORD *)a2 + 7);
  v26 = *(_QWORD *)(this + 648);
  if ((v26 & 1) != 0)
  {
    v43 = *(uint64_t (**)(unsigned __int8 **))(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v44 = (unsigned __int8 **)(this - 16);
    else
      v44 = (unsigned __int8 **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v52[0] = *v44;
    v52[1] = (unsigned __int8 *)this;
    v52[2] = (unsigned __int8 *)(this + 648);
    v26 = v43(v52);
  }
  v27 = JSC::JSModuleLoader::importModule(v26, this, (unint64_t)v23, v25, (uint64_t)v50, v20, v21, v22);
  if (!*v24)
    goto LABEL_16;
  v45 = *(_DWORD *)(v10 + 80);
  if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v17, v18, v19, v20, v21, v22);
  v41 = *(_QWORD *)(v10 + 16);
  if (!v41)
  {
LABEL_16:
    JSC::JSPromise::resolve(SlowCase, (uint64_t *)this, v27, v18, v19, v20, v21, v22);
    goto LABEL_17;
  }
  if (*(_QWORD *)(*(_QWORD *)(this + 56) + 24) != v41)
  {
    *(_QWORD *)(v10 + 16) = 0;
    do
      v46 = __ldaxr(v24);
    while (__stlxr(v46 & 0xFFFFFFEF, v24));
LABEL_45:
    JSC::JSPromise::reject(SlowCase, (uint64_t *)this, *(_QWORD *)(v41 + 8), v18, v19, v20, v21, v22);
  }
LABEL_17:
  v28 = v51;
  v51 = 0;
  if (v28)
  {
    if (v28[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
    else
      --v28[2];
  }
  v29 = v50[0];
  v50[0] = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  return SlowCase;
}

unint64_t JSC::globalFuncCopyDataProperties(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t i;
  uint64_t *v16;
  uint64_t v17;
  __n128 v18;
  JSC::Structure *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  WTF *v45;
  void *v46;
  WTF *v47;
  unint64_t *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  _DWORD *v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  WTF *v69;
  void *v70;
  WTF *v71;
  uint64_t v72;
  int v73;
  _DWORD *v74;
  _DWORD *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  WTF *v79;
  uint64_t v81;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  WTF *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl **v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  WTF *v119;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  WTF::StringImpl *v138;
  int v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  JSC::VM *v153;
  uint64_t v154;
  uint64_t v155;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF *v160;
  uint64_t v161;
  WTF *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  _QWORD *v166;
  uint64_t *v167;
  uint64_t v168;
  char *v169;
  _QWORD *v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  WTF::StringImpl **v175;
  uint64_t v176;
  WTF::StringImpl *v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  __n128 v192;
  int v193;
  int v194;
  int v195;
  WTF::StringImpl *v196;
  uint64_t v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  _BOOL4 v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  WTF *v244;
  WTF *__src;
  char *__srca;
  char *__srcb;
  uint64_t *v248;
  uint64_t *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  WTF::StringImpl *v257;
  uint64_t v258;
  const JSC::PropertyTable *v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  WTF *v265;
  uint64_t v266;
  uint64_t v267;
  __int16 v268;
  WTF::StringImpl **v269;
  unsigned __int8 v270;
  unint64_t v271;
  _QWORD v272[2];
  int v273;
  int v274;
  uint64_t v275;
  uint64_t v276[2];

  v11 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)a2 + 5);
  i = *((_QWORD *)a2 + 6);
  v271 = i;
  if ((i & 0xFFFFFFFFFFFFFFF7) == 2)
    return v12;
  if ((i & 0xFFFE000000000002) != 0)
  {
    v157 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v271, this, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    if (*(unsigned __int8 *)(i + 5) > 0x16u)
      goto LABEL_4;
    v157 = JSC::JSCell::toObjectSlow((JSC::JSCell *)i, (JSC::SymbolObject **)this, (uint64_t)a3, (JSC::Symbol *)a4, a5, a6, a7, a8);
  }
  i = v157;
LABEL_4:
  LOBYTE(v269) = 0;
  v270 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v16 = 0;
    v17 = 0;
    goto LABEL_6;
  }
  v109 = *((_QWORD *)a2 + 7);
  if (v109 < 0xFFFE000000000000 || (v109 & 0x80000000) != 0)
  {
    v110 = i;
    v109 = COERCE_DOUBLE(v109 - 0x2000000000000);
  }
  else
  {
    v110 = i;
  }
  i = *(_QWORD *)a2;
  JSC::CallFrame::codeOrigin(*(_QWORD *)a2, (uint64_t *)&v257);
  v111 = (unint64_t)v257;
  if ((v257 & 2) == 0)
  {
    v112 = (unint64_t)v257 & 0xFFFFFFFF8;
    if ((v257 & 1) != 0)
      goto LABEL_292;
    if (v112)
      goto LABEL_293;
  }
LABEL_160:
  if ((*(_QWORD *)(i + 24) & 0xFFFE000000000007) != 3)
  {
    v113 = (uint64_t *)(i + 16);
    goto LABEL_162;
  }
  v114 = 0;
  for (i = v110; ; i = v110)
  {
    if ((v111 & 1) != 0 && (v111 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v111 & 0xFFFFFFFF8, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    v17 = *(_QWORD *)(v114 + 56);
    v111 = *(_QWORD *)(*(_QWORD *)(v17 + 152) + 48);
    v112 = *(unsigned int *)v111;
    if (v112 > v109)
      break;
    v16 = (uint64_t *)"/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Conte"
                     "nts/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/includ"
                     "e/wtf/TrailingArray.h";
    a3 = (JSC::CallFrame *)"reference WTF::TrailingArray<WTF::EmbeddedFixedVector<WTF::HashSet<WTF::RefPtr<WTF::UniquedSt"
                           "ringImpl>, JSC::IdentifierRepHash>>, WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl>, JSC::I"
                           "dentifierRepHash>>::at [Derived = WTF::EmbeddedFixedVector<WTF::HashSet<WTF::Re"
                           "fPtr<WTF::UniquedStringImpl>, JSC::IdentifierRepHash>>, T = WTF::HashSet<WTF::RefPtr<WTF::Uni"
                           "quedStringImpl>, JSC::IdentifierRepHash>]";
    a4 = 83;
    __break(0xC471u);
LABEL_291:
    __break(1u);
LABEL_292:
    v112 = *(_QWORD *)v112;
    if (!v112)
      goto LABEL_160;
LABEL_293:
    v113 = (uint64_t *)(v112 + 8);
LABEL_162:
    v114 = *v113;
  }
  v16 = (uint64_t *)(v111 + 8 * v109 + 8);
  if ((unint64_t)(*((int *)a2 + 8) - 4) <= 0xFFFFFFFFFFFFFFFCLL)
  {
    v115 = (WTF::StringImpl *)i;
    v254 = v17;
    std::optional<WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>>::emplace[abi:sn180100]<WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits> const&,void>((uint64_t)&v269, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    if ((unint64_t)(*((int *)a2 + 8) - 4) <= 0xFFFFFFFFFFFFFFFCLL)
    {
      v9 = 3;
      v116 = 2;
LABEL_168:
      v112 = 0x600000000;
      v117 = *(_QWORD *)((char *)a2 + (((v116 << 32) + 0x600000000) >> 29));
      v109 = *((_QWORD *)this + 7);
      v10 = v109 + 41952;
      if ((v117 & 0xFFFE000000000002) != 0)
        goto LABEL_188;
      if (*(_BYTE *)(v117 + 5) != 2)
        goto LABEL_370;
      v110 = *(_QWORD *)((char *)a2 + (((v116 << 32) + 0x600000000) >> 29));
      i = *(_QWORD *)(v117 + 8);
      if ((i & 1) != 0)
      {
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v117, this);
        if (!*(_DWORD *)(v109 + 80))
          goto LABEL_196;
        v153 = (JSC::VM *)v109;
LABEL_354:
        if (!JSC::VM::hasExceptionsAfterHandlingTraps(v153, (uint64_t)v16, (uint64_t)a3, a4, a5, a6, a7, a8))
          goto LABEL_196;
        i = 0;
        v138 = v257;
        v257 = 0;
        if (!v138)
          goto LABEL_174;
        goto LABEL_198;
      }
      if ((*(_BYTE *)(i + 16) & 0x10) == 0)
      {
        if (*(_QWORD *)(v109 + 64768) != i)
        {
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v109 + 64768), (WTF::AtomStringImpl *)i, (uint64_t)a3, a4, a5, a6, a7, a8);
          v140 = *(WTF::StringImpl **)(v110 + 8);
          if (v140)
          {
            if ((*((_BYTE *)v140 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v140 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v140, a3, a4, a5, a6, a7, a8, (WTF *)&v257);
              v140 = v257;
            }
          }
          v141 = *(WTF::StringImpl **)(v109 + 64776);
          *(_QWORD *)(v109 + 64776) = v140;
          if (v141)
          {
            if (*(_DWORD *)v141 == 2)
            {
              WTF::StringImpl::~StringImpl(v141, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
            }
            else
            {
              *(_DWORD *)v141 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v110 + 8) + 16) & 0x10) == 0)
        {
          v142 = *(WTF::StringImpl **)(v109 + 64776);
          *(_DWORD *)v142 += 2;
          v257 = v142;
          __dmb(0xAu);
          v143 = *(WTF::StringImpl **)(v110 + 8);
          *(_QWORD *)(v110 + 8) = v257;
          v257 = v143;
          JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v109 + 192, (unint64_t)&v257);
          v144 = v257;
          v257 = 0;
          if (v144)
          {
            if (*(_DWORD *)v144 == 2)
            {
              WTF::StringImpl::~StringImpl(v144, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v198, v199, v200, v201, v202, v203, v204, v205);
            }
            else
            {
              *(_DWORD *)v144 -= 2;
            }
          }
        }
        i = *(_QWORD *)(v109 + 64776);
      }
LABEL_172:
      v118 = *(_DWORD *)i + 2;
      goto LABEL_173;
    }
    while (1)
    {
      if (v270)
      {
        v16 = (uint64_t *)&v269;
        v17 = v254;
        i = (unint64_t)v115;
        break;
      }
      v117 = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_370:
      v117 = JSC::JSCell::toPrimitive(v117, (JSC::VM **)this, (JSC::Structure *)2, a4, a5, a6, a7, a8);
LABEL_188:
      v256 = v117;
      v265 = (WTF *)v117;
      if (*(_DWORD *)(v109 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v109, (uint64_t)v16, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          i = *(_QWORD *)(*(_QWORD *)v10 + 8);
          if (i)
            goto LABEL_172;
          goto LABEL_174;
        }
        v256 = (unint64_t)v265;
      }
      v112 = 0xFFFE000000000002;
      if ((v256 & 0xFFFE000000000002) == 0)
      {
        v137 = *(unsigned __int8 *)(v256 + 5);
        if (v137 == 2)
          goto LABEL_191;
        if (v137 == 4)
        {
          i = *(_QWORD *)(v256 + 8);
          v139 = *(_DWORD *)i;
          v112 = (*(_DWORD *)i + 4);
          *(_DWORD *)i = v112;
          v118 = v139 + 2;
          if (!v118)
          {
            v138 = (WTF::StringImpl *)i;
            goto LABEL_214;
          }
LABEL_173:
          *(_DWORD *)i = v118;
          goto LABEL_174;
        }
      }
      v256 = (unint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v265, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_191:
      if (!*(_DWORD *)(v109 + 80)
        || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v109, (uint64_t)v16, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        i = *(_QWORD *)(v256 + 8);
        v110 = *((_QWORD *)this + 7);
        if ((i & 1) == 0)
        {
          if ((*(_BYTE *)(i + 16) & 0x10) == 0)
          {
            v109 = v110 + 64768;
            if (*(_QWORD *)(v110 + 64768) != i)
            {
              WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v110 + 64768), *(WTF::AtomStringImpl **)(v256 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
              v206 = *(WTF::StringImpl **)(v256 + 8);
              if (v206)
              {
                if ((*((_BYTE *)v206 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v206 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v206, a3, a4, a5, a6, a7, a8, (WTF *)&v257);
                  v206 = v257;
                }
              }
              v207 = *(WTF::StringImpl **)(v110 + 64776);
              *(_QWORD *)(v110 + 64776) = v206;
              if (v207)
              {
                if (*(_DWORD *)v207 == 2)
                {
                  WTF::StringImpl::~StringImpl(v207, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v228, v229, v230, v231, v232, v233, v234, v235);
                }
                else
                {
                  *(_DWORD *)v207 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v256 + 8) + 16) & 0x10) == 0)
            {
              v208 = *(WTF::StringImpl **)(v110 + 64776);
              *(_DWORD *)v208 += 2;
              v257 = v208;
              __dmb(0xAu);
              v209 = *(WTF::StringImpl **)(v256 + 8);
              *(_QWORD *)(v256 + 8) = v257;
              v257 = v209;
              JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v110 + 192, (unint64_t)&v257);
              v210 = v257;
              v257 = 0;
              if (v210)
              {
                if (*(_DWORD *)v210 == 2)
                {
                  WTF::StringImpl::~StringImpl(v210, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v212, v213, v214, v215, v216, v217, v218, v219);
                }
                else
                {
                  *(_DWORD *)v210 -= 2;
                }
              }
            }
            i = *(_QWORD *)(v110 + 64776);
          }
          goto LABEL_172;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v256, this);
        if (*(_DWORD *)(v110 + 80))
        {
          v153 = (JSC::VM *)v110;
          goto LABEL_354;
        }
LABEL_196:
        i = (unint64_t)v257;
        if (!v257)
          goto LABEL_174;
        *(_DWORD *)v257 += 2;
        v257 = 0;
        v138 = (WTF::StringImpl *)i;
LABEL_198:
        if (*(_DWORD *)v138 != 2)
        {
          *(_DWORD *)v138 -= 2;
          goto LABEL_174;
        }
LABEL_214:
        WTF::StringImpl::~StringImpl(v138, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
        goto LABEL_174;
      }
      i = 0;
LABEL_174:
      if (*(_DWORD *)(v11 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v16, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        if (i)
        {
          if (*(_DWORD *)i != 2)
          {
            v12 = 0;
            *(_DWORD *)i -= 2;
            goto LABEL_128;
          }
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)i, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v236, v237, v238, v239, v240, v241, v242, v243);
        }
LABEL_230:
        v12 = 0;
        goto LABEL_128;
      }
      v111 = v270;
      if (!v270)
        goto LABEL_291;
      if (i)
        *(_DWORD *)i += 2;
      v265 = (WTF *)i;
      WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::IdentityExtractor,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::add((uint64_t *)&v269, (WTF::AtomStringImpl *)&v265, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)&v257);
      v119 = v265;
      v265 = 0;
      if (v119)
      {
        if (*(_DWORD *)v119 == 2)
        {
          WTF::StringImpl::~StringImpl(v119, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
        }
        else
        {
          *(_DWORD *)v119 -= 2;
        }
      }
      if (i)
      {
        if (*(_DWORD *)i == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)i, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
        }
        else
        {
          *(_DWORD *)i -= 2;
        }
      }
      v116 = v9;
      if (*((int *)a2 + 8) - 1 > (unint64_t)v9++)
        goto LABEL_168;
    }
  }
LABEL_6:
  if ((*(_BYTE *)((16 * *(unsigned int *)i) | 0x12) & 0x40) == 0)
  {
    v154 = (uint64_t)v16;
    v155 = v17;
    JSC::JSObject::reifyAllStaticProperties((JSC::JSObject *)i, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v17 = v155;
    v16 = (uint64_t *)v154;
    if (*(_DWORD *)(v11 + 80))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v154, (uint64_t)a3, a4, a5, a6, a7, a8);
      v17 = v155;
      v16 = (uint64_t *)v154;
      if (hasExceptionsAfterHandlingTraps)
        goto LABEL_230;
    }
  }
  if (*(_WORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0xC) & 6 | *(_BYTE *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0xA) & 8
    || (*(_BYTE *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 8) & 0xE) != 0
    || (*(_DWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x10) & 8) != 0
    || (*(_DWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x10) & 3) == 2)
  {
    v158 = v17;
    v159 = (uint64_t)v16;
    v160 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
    *(_DWORD *)v160 = 1;
    *((_QWORD *)v160 + 1) = (char *)v160 + 24;
    *((_QWORD *)v160 + 2) = 20;
    v265 = v160;
    v266 = 0;
    v267 = v11;
    v268 = 259;
    (*(void (**)(unint64_t, JSC *, WTF **, _QWORD))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)i & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x78))(i, this, &v265, 0);
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v16, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
LABEL_314:
      v12 = 0;
LABEL_241:
      if (v266)
        WTF::fastFree(v266 - 16, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
      v162 = v265;
      v265 = 0;
      if (v162)
      {
        if (*(_DWORD *)v162 != 1)
        {
          --*(_DWORD *)v162;
          goto LABEL_128;
        }
        v174 = *((unsigned int *)v162 + 5);
        if ((_DWORD)v174)
        {
          v175 = (WTF::StringImpl **)*((_QWORD *)v162 + 1);
          v176 = 8 * v174;
          do
          {
            v177 = *v175;
            *v175 = 0;
            if (v177)
            {
              if (*(_DWORD *)v177 == 2)
              {
                WTF::StringImpl::~StringImpl(v177, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v178, v179, v180, v181, v182, v183, v184, v185);
              }
              else
              {
                *(_DWORD *)v177 -= 2;
              }
            }
            ++v175;
            v176 -= 8;
          }
          while (v176);
        }
        v186 = *((_QWORD *)v162 + 1);
        if ((WTF *)((char *)v162 + 24) != (WTF *)v186 && v186 != 0)
        {
          *((_QWORD *)v162 + 1) = 0;
          *((_DWORD *)v162 + 4) = 0;
          WTF::fastFree(v186, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        v79 = v162;
LABEL_227:
        WTF::fastFree((unint64_t)v79, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
        goto LABEL_128;
      }
      goto LABEL_128;
    }
    v161 = *((unsigned int *)v265 + 5);
    if (!(_DWORD)v161)
      goto LABEL_241;
    v188 = (uint64_t *)*((_QWORD *)v265 + 1);
    v189 = 8 * v161;
    while (1)
    {
      v190 = v158;
      if ((JSC::globalFuncCopyDataProperties(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(v159, *v188) & 1) != 0)
        goto LABEL_286;
      v259 = (const JSC::PropertyTable *)0xFFFFFFFF00000000;
      v260 = i;
      *(_QWORD *)&v261 = 0;
      DWORD2(v261) = 0x20000;
      BYTE12(v261) = 0;
      LOBYTE(v262) = 0;
      BYTE8(v262) = 0;
      v263 = 0uLL;
      v191 = (*(uint64_t (**)(unint64_t, JSC *, uint64_t, WTF::StringImpl **))(16
                                                                                             * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C)
                                                                                             + 0x68))(i, this, *v188, &v257);
      v193 = v191;
      if (*(_DWORD *)(v11 + 80))
      {
        v211 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (v211)
          v194 = 1;
        else
          v194 = 17;
        if (v211 || ((v193 ^ 1) & 1) != 0)
          goto LABEL_281;
      }
      else if (!v191)
      {
        goto LABEL_280;
      }
      if ((v259 & 4) != 0)
      {
LABEL_280:
        v194 = 17;
        goto LABEL_281;
      }
      if (BYTE12(v261))
      {
        v197 = JSC::JSObject::get((unsigned int *)i, (uint64_t)this, *v188, a4, a5, a6, a7, a8);
      }
      else
      {
        if (BYTE9(v261) == 1)
        {
          v196 = v257;
          goto LABEL_304;
        }
        if (BYTE9(v261) == 2)
          v197 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v257, this, (uint64_t)a3, a4, a5, a6, a7, a8);
        else
          v197 = JSC::PropertySlot::customGetter((uint64_t)&v257, *((JSC::VM **)this + 7), (WTF::StringImpl *)*v188);
      }
      v196 = (WTF::StringImpl *)v197;
LABEL_304:
      v194 = 1;
      if (!*(_DWORD *)(v11 + 80)
        || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v16, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        JSC::JSObject::putDirectMayBeIndex((int *)v12, (unint64_t)this, *v188, (unint64_t)v196, a5, a6, a7, a8, v192);
        if (!*(_DWORD *)(v11 + 80)
          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)v16, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          v194 = 0;
        }
      }
LABEL_281:
      if (BYTE8(v262))
      {
        v195 = *(_DWORD *)(v262 + 4);
        if (!v195)
        {
          __break(0xC471u);
          JUMPOUT(0x198A15604);
        }
        *(_DWORD *)(v262 + 4) = v195 - 1;
      }
      if (v194 != 17 && v194)
        goto LABEL_314;
LABEL_286:
      ++v188;
      v189 -= 8;
      v158 = v190;
      if (!v189)
        goto LABEL_241;
    }
  }
  v264 = 0;
  v265 = (WTF *)&v267;
  v266 = 8;
  LOBYTE(v257) = 0;
  v258 = 0x800000000;
  v259 = (const JSC::PropertyTable *)((char *)&v260 + 8);
  v18 = 0uLL;
  v262 = 0u;
  v263 = 0u;
  v260 = 0u;
  v261 = 0u;
  v19 = (JSC::Structure *)(16 * (*(_DWORD *)i & 0xFFFFFFFE));
  v20 = *((_QWORD *)v19 + 11);
  if (!v20)
  {
    v83 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x40);
    if (!v83 || *(_BYTE *)(v83 + 5) != 1 && *(_DWORD *)(v83 + 80) < 2u)
      goto LABEL_106;
    v84 = v16;
    v85 = v17;
    JSC::Structure::materializePropertyTable(v19, (JSC::VM *)v11, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    v17 = v85;
    v16 = v84;
    v20 = v86;
    if (!v86)
      goto LABEL_106;
  }
  v21 = *(_QWORD *)(v20 + 16);
  v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
  v23 = *(unsigned int *)(v20 + 8);
  v24 = (*(_DWORD *)(v20 + 28) + *(_DWORD *)(v20 + 24));
  if ((v21 & 1) != 0)
  {
    if (!(_DWORD)v24)
      goto LABEL_106;
    v48 = (unint64_t *)(v22 + v23);
    v49 = v22 + v23 + 8 * v24;
    v50 = (char *)(i + 16);
    while (1)
    {
      v51 = *v48;
      v52 = (_DWORD *)(*v48 & 0xFFFFFFFFFFFFLL);
      if (v52 != (_DWORD *)1)
      {
        if (v52 && (*(_BYTE *)((*v48 & 0xFFFFFFFFFFFFLL) + 0x10) & 0x20) != 0)
        {
          if ((v51 & 0x4000000000000) != 0 || (*(_DWORD *)((*v48 & 0xFFFFFFFFFFFFLL) + 0x24) & 4) != 0)
            goto LABEL_84;
        }
        else if ((v51 & 0x4000000000000) != 0)
        {
          goto LABEL_84;
        }
        if (!v16)
          goto LABEL_74;
        v53 = *v16;
        if (!*v16)
          goto LABEL_74;
        v54 = *(_DWORD *)((*v48 & 0xFFFFFFFFFFFFLL) + 0x10);
        if ((v54 & 0x20) != 0)
          v54 = *(_DWORD *)((*v48 & 0xFFFFFFFFFFFFLL) + 0x20);
        v55 = *(_DWORD *)(v53 - 8);
        v56 = v55 & (v54 >> 8);
        v57 = *(_DWORD **)(v53 + 8 * v56);
        if (v57 != v52)
        {
          v58 = 1;
          while (v57)
          {
            v56 = (v56 + v58) & v55;
            v57 = *(_DWORD **)(v53 + 8 * v56);
            ++v58;
            if (v57 == v52)
              goto LABEL_84;
          }
LABEL_74:
          v59 = HIDWORD(v266);
          if (HIDWORD(v266) == (_DWORD)v266)
          {
            v251 = (WTF::StringImpl *)i;
            v253 = v17;
            v66 = HIDWORD(v266) + ((unint64_t)HIDWORD(v266) >> 2);
            if (v66 >= 0x10)
              v67 = v66 + 1;
            else
              v67 = 16;
            if (v67 <= (unint64_t)HIDWORD(v266) + 1)
              v68 = HIDWORD(v266) + 1;
            else
              v68 = v67;
            v244 = v265;
            __srca = v50;
            v249 = v16;
            if (v68 < 9)
            {
              v69 = (WTF *)&v267;
              v265 = (WTF *)&v267;
              LODWORD(v266) = 8;
            }
            else
            {
              if (v68 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x198A1574CLL);
              }
              v69 = (WTF *)WTF::fastMalloc((WTF *)(8 * v68));
              LODWORD(v266) = v68;
              v265 = v69;
            }
            memcpy(v69, v244, 8 * v59);
            i = (unint64_t)v251;
            if (&v267 != (uint64_t *)v244 && v244)
            {
              if (v265 == v244)
              {
                v265 = 0;
                LODWORD(v266) = 0;
              }
              WTF::fastFree((unint64_t)v244, v70, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            v59 = HIDWORD(v266);
            v71 = v265;
            if (v52)
              *v52 += 2;
            v60 = (_QWORD *)((char *)v71 + 8 * v59);
            v50 = __srca;
            v16 = v249;
            v17 = v253;
          }
          else
          {
            v60 = (_QWORD *)((char *)v265 + 8 * HIDWORD(v266));
            if (v52)
              *v52 += 2;
          }
          v61 = HIBYTE(v51);
          *v60 = v52;
          HIDWORD(v266) = v59 + 1;
          if (v51 >> 62)
            v62 = (char *)(*(_QWORD *)(i + 8) + 8 * (63 - v61) - 8);
          else
            v62 = &v50[8 * v61];
          v63 = *(_QWORD *)v62;
          v64 = v258;
          if ((_DWORD)v258 == HIDWORD(v258))
          {
            __srcb = v50;
            if (v258 >> 30
              || (v163 = v17,
                  v164 = v16,
                  JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v258, 2 * (int)v258)))
            {
              LOBYTE(v257) = 1;
LABEL_295:
              __break(0xC471u);
              JUMPOUT(0x198A153A0);
            }
            v64 = v258;
            v16 = v164;
            v17 = v163;
            v50 = __srcb;
          }
          else if (v259 == (const JSC::PropertyTable *)((char *)&v260 + 8) || !v259)
          {
            *((_QWORD *)v259 + v258) = v63;
            LODWORD(v258) = v64 + 1;
            goto LABEL_83;
          }
          *((_QWORD *)v259 + v64) = v63;
          LODWORD(v258) = v64 + 1;
          if (!(_QWORD)v260 && (v63 & 0xFFFE000000000002) == 0 && v63 != 0)
          {
            v166 = (_QWORD *)(v63 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v63 & 8) != 0)
              v166 = (_QWORD *)(v63 - 16);
            *(_QWORD *)&v260 = *v166 + 560;
            v276[0] = (uint64_t)&v258;
            v167 = v16;
            v168 = v17;
            v169 = v50;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add((uint64_t *)v260, v276, a4, a5, a6, a7, a8, (uint64_t)v272);
            v50 = v169;
            v17 = v168;
            v16 = v167;
          }
LABEL_83:
          if ((_BYTE)v257)
            goto LABEL_295;
        }
      }
LABEL_84:
      if (++v48 == (unint64_t *)v49)
        goto LABEL_106;
    }
  }
  if ((_DWORD)v24)
  {
    v25 = v22 + 4 * v23;
    v26 = v25 + 16 * v24;
    v27 = (char *)(i + 16);
    while (1)
    {
      v28 = *(_QWORD *)v25;
      if (*(_QWORD *)v25 != 1
        && (!v28 || (*(_BYTE *)(v28 + 16) & 0x20) == 0 || (*(_BYTE *)(v28 + 36) & 4) == 0)
        && (*(_BYTE *)(v25 + 12) & 4) == 0)
      {
        if (!v16)
          goto LABEL_28;
        v29 = *v16;
        if (!*v16)
          goto LABEL_28;
        v30 = *(_DWORD *)(v28 + 16);
        if ((v30 & 0x20) != 0)
          v30 = *(_DWORD *)(v28 + 32);
        v31 = *(_DWORD *)(v29 - 8);
        v32 = v31 & (v30 >> 8);
        v33 = *(_QWORD *)(v29 + 8 * v32);
        if (v33 != v28)
          break;
      }
LABEL_38:
      v25 += 16;
      if (v25 == v26)
        goto LABEL_106;
    }
    v34 = 1;
    while (v33)
    {
      v32 = (v32 + v34) & v31;
      v33 = *(_QWORD *)(v29 + 8 * v32);
      ++v34;
      if (v33 == v28)
        goto LABEL_38;
    }
LABEL_28:
    v35 = HIDWORD(v266);
    if (HIDWORD(v266) == (_DWORD)v266)
    {
      v250 = (WTF::StringImpl *)i;
      v252 = v17;
      v42 = HIDWORD(v266) + ((unint64_t)HIDWORD(v266) >> 2);
      if (v42 >= 0x10)
        v43 = v42 + 1;
      else
        v43 = 16;
      if (v43 <= (unint64_t)HIDWORD(v266) + 1)
        v44 = HIDWORD(v266) + 1;
      else
        v44 = v43;
      __src = v265;
      v248 = v16;
      if (v44 < 9)
      {
        v45 = (WTF *)&v267;
        v265 = (WTF *)&v267;
        LODWORD(v266) = 8;
      }
      else
      {
        if (v44 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x198A15744);
        }
        v45 = (WTF *)WTF::fastMalloc((WTF *)(8 * v44));
        LODWORD(v266) = v44;
        v265 = v45;
      }
      memcpy(v45, __src, 8 * v35);
      i = (unint64_t)v250;
      if (&v267 != (uint64_t *)__src && __src)
      {
        if (v265 == __src)
        {
          v265 = 0;
          LODWORD(v266) = 0;
        }
        WTF::fastFree((unint64_t)__src, v46, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      v35 = HIDWORD(v266);
      v47 = v265;
      if (v28)
        *(_DWORD *)v28 += 2;
      v36 = (_QWORD *)((char *)v47 + 8 * v35);
      v16 = v248;
      v17 = v252;
    }
    else
    {
      v36 = (_QWORD *)((char *)v265 + 8 * HIDWORD(v266));
      if (v28)
        *(_DWORD *)v28 += 2;
    }
    *v36 = v28;
    HIDWORD(v266) = v35 + 1;
    v37 = *(_DWORD *)(v25 + 8);
    v38 = (uint64_t)v27;
    if (v37 >= 64)
    {
      v38 = *(_QWORD *)(i + 8) - 8;
      v37 = 63 - v37;
    }
    v39 = *(_QWORD *)(v38 + 8 * v37);
    v40 = v258;
    if ((_DWORD)v258 == HIDWORD(v258))
    {
      v255 = v17;
      if (v258 >> 30
        || (v165 = v16,
            JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v258, 2 * (int)v258)))
      {
        LOBYTE(v257) = 1;
LABEL_297:
        __break(0xC471u);
        JUMPOUT(0x198A153C8);
      }
      v40 = v258;
      v16 = v165;
      v17 = v255;
    }
    else if (v259 == (const JSC::PropertyTable *)((char *)&v260 + 8) || !v259)
    {
      *((_QWORD *)v259 + v258) = v39;
      LODWORD(v258) = v40 + 1;
      goto LABEL_37;
    }
    *((_QWORD *)v259 + v40) = v39;
    LODWORD(v258) = v40 + 1;
    if (!(_QWORD)v260 && (v39 & 0xFFFE000000000002) == 0 && v39 != 0)
    {
      v170 = (_QWORD *)(v39 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v39 & 8) != 0)
        v170 = (_QWORD *)(v39 - 16);
      *(_QWORD *)&v260 = *v170 + 560;
      v276[0] = (uint64_t)&v258;
      v171 = v16;
      v172 = v17;
      WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add((uint64_t *)v260, v276, a4, a5, a6, a7, a8, (uint64_t)v272);
      v17 = v172;
      v16 = v171;
    }
LABEL_37:
    if ((_BYTE)v257)
      goto LABEL_297;
    goto LABEL_38;
  }
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_378;
LABEL_106:
  v173 = *(_DWORD *)(v11 + 80);
  if ((v173 & 0x27) != 0 && (v173 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v11 + 16))
  {
    v12 = 0;
  }
  else
  {
LABEL_378:
    if (*(_BYTE *)(v12 + 5) == 24)
    {
      v72 = 16 * (*(_DWORD *)v12 & 0xFFFFFFFE);
      v73 = *(_DWORD *)(v72 + 0x10);
      if ((v73 & 0x10) == 0)
      {
        v74 = (_DWORD *)v12;
        while ((*(_WORD *)(v72 + 12) & 0x800) == 0 && (v74 == (_DWORD *)v12 || (*(_WORD *)(v72 + 12) & 0x400) == 0))
        {
          v75 = *(_DWORD **)(v72 + 48);
          if (!v75)
            v75 = (_DWORD *)*((_QWORD *)v74 + 2);
          if (v75 == (_DWORD *)2)
          {
            if ((v73 & 0x100000) != 0)
              break;
            JSC::JSObject::putOwnDataPropertyBatching(v12, (JSC::VM *)v11, v265, v259, HIDWORD(v266), a6, a7, a8, v18);
            goto LABEL_122;
          }
          v72 = 16 * (*v75 & 0xFFFFFFFE);
          v74 = v75;
          if ((*(_BYTE *)(v72 + 0x10) & 0x10) != 0)
            break;
        }
      }
    }
    if (HIDWORD(v266))
    {
      v76 = 0;
      do
      {
        if (v258 <= v76)
          v77 = 10;
        else
          v77 = *((_QWORD *)v259 + v76);
        v78 = *((_QWORD *)v265 + v76);
        v272[0] = 0;
        v272[1] = v12;
        v273 = -1;
        v18.n128_u64[0] = 0x100000001000000;
        v274 = 0x1000000;
        v275 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v12, v11, v78, v77, 0, (uint64_t)v272, a7, a8, v18);
        ++v76;
      }
      while (v76 < HIDWORD(v266));
    }
  }
LABEL_122:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v258, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (HIDWORD(v266))
  {
    v87 = v265;
    v88 = 8 * HIDWORD(v266);
    do
    {
      v89 = *(WTF::StringImpl **)v87;
      *(_QWORD *)v87 = 0;
      if (v89)
      {
        if (*(_DWORD *)v89 == 2)
        {
          WTF::StringImpl::~StringImpl(v89, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
        }
        else
        {
          *(_DWORD *)v89 -= 2;
        }
      }
      v87 = (WTF *)((char *)v87 + 8);
      v88 -= 8;
    }
    while (v88);
  }
  v79 = v265;
  if (&v267 != (uint64_t *)v265 && v265 != 0)
  {
    v265 = 0;
    LODWORD(v266) = 0;
    goto LABEL_227;
  }
LABEL_128:
  if (v270)
  {
    v81 = (uint64_t)v269;
    if (v269)
    {
      v98 = *((unsigned int *)v269 - 1);
      if ((_DWORD)v98)
      {
        v99 = v269;
        do
        {
          v100 = *v99;
          if (*v99 != (WTF::StringImpl *)-1)
          {
            *v99 = 0;
            if (v100)
            {
              if (*(_DWORD *)v100 == 2)
              {
                WTF::StringImpl::~StringImpl(v100, (WTF::AtomStringImpl *)v16, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
              }
              else
              {
                *(_DWORD *)v100 -= 2;
              }
            }
          }
          ++v99;
          --v98;
        }
        while (v98);
      }
      WTF::fastFree(v81 - 16, v16, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
  return v12;
}

uint64_t std::optional<WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits>>::emplace[abi:sn180100]<WTF::HashSet<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTableTraits> const&,void>(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl **v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  unsigned int v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  WTF::StringImpl **v43;

  if (*(_BYTE *)(a1 + 8))
  {
    v10 = *(WTF::StringImpl ***)a1;
    if (*(_QWORD *)a1)
    {
      v18 = *((unsigned int *)v10 - 1);
      if ((_DWORD)v18)
      {
        v19 = *(WTF::StringImpl ***)a1;
        do
        {
          v20 = *v19;
          if (*v19 != (WTF::StringImpl *)-1)
          {
            *v19 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
              {
                WTF::StringImpl::~StringImpl(v20, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
              }
              else
              {
                *(_DWORD *)v20 -= 2;
              }
            }
          }
          ++v19;
          --v18;
        }
        while (v18);
      }
      WTF::fastFree((unint64_t)(v10 - 2), a2, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(a1 + 8) = 0;
  }
  *(_QWORD *)a1 = 0;
  if (!*(_QWORD *)a2)
    goto LABEL_53;
  v11 = *(unsigned int *)(*(_QWORD *)a2 - 12);
  if (!(_DWORD)v11)
    goto LABEL_53;
  v12 = (v11 - 1) | ((v11 - 1) >> 1) | ((((_DWORD)v11 - 1) | ((v11 - 1) >> 1)) >> 2);
  v13 = v12 | (v12 >> 4) | ((v12 | (v12 >> 4)) >> 8);
  v14 = (v13 | HIWORD(v13)) + 1;
  if (v14 > 0x400)
  {
    if (v14 > 2 * v11)
      goto LABEL_21;
  }
  else if (3 * v14 > 4 * v11)
  {
LABEL_9:
    v15 = (double)v11;
    v16 = (double)v14;
    v17 = 0.604166667;
    goto LABEL_22;
  }
  LODWORD(v14) = 2 * v14;
  if (v14 <= 0x400)
    goto LABEL_9;
LABEL_21:
  v15 = (double)v11;
  v16 = (double)v14;
  v17 = 0.416666667;
LABEL_22:
  if (v16 * v17 <= v15)
    LODWORD(v14) = 2 * v14;
  if (v14 <= 8)
    v29 = 8;
  else
    v29 = v14;
  v30 = WTF::fastZeroedMalloc(8 * v29 + 16, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)a1 = v30 + 16;
  *(_DWORD *)(v30 + 12) = v29;
  *(_DWORD *)(*(_QWORD *)a1 - 8) = v29 - 1;
  *(_DWORD *)(*(_QWORD *)a1 - 12) = v11;
  *(_DWORD *)(*(_QWORD *)a1 - 16) = 0;
  v31 = *(WTF::StringImpl ***)a2;
  if (*(_QWORD *)a2)
  {
    v32 = *((unsigned int *)v31 - 1);
    v33 = &v31[v32];
    if (*((_DWORD *)v31 - 3))
    {
      v34 = *(WTF::StringImpl ***)a2;
      if ((_DWORD)v32)
      {
        v35 = 8 * v32;
        v34 = *(WTF::StringImpl ***)a2;
        while ((unint64_t)*v34 + 1 <= 1)
        {
          ++v34;
          v35 -= 8;
          if (!v35)
          {
            v34 = v33;
            break;
          }
        }
      }
      if (!v31)
        goto LABEL_36;
      goto LABEL_35;
    }
    v34 = &v31[v32];
  }
  else
  {
    v34 = 0;
    v32 = 0;
  }
  v33 = &v31[v32];
  if (v31)
LABEL_35:
    v31 += *((unsigned int *)v31 - 1);
LABEL_36:
  while (v34 != v31)
  {
    v36 = *(WTF::StringImpl ***)a1;
    if (*(_QWORD *)a1)
      v37 = *((_DWORD *)v36 - 2);
    else
      v37 = 0;
    v38 = *v34;
    v39 = *((_DWORD *)*v34 + 4);
    if ((v39 & 0x20) != 0)
      v39 = *((_DWORD *)v38 + 8);
    v40 = 0;
    v41 = v39 >> 8;
    do
    {
      v42 = v41 & v37;
      v41 = ++v40 + v42;
    }
    while (v36[v42]);
    if (v38)
      *(_DWORD *)v38 += 2;
    v36[v42] = v38;
    v43 = v34 + 1;
    v34 = v33;
    if (v43 != v33)
    {
      v34 = v43;
      while ((unint64_t)*v34 + 1 <= 1)
      {
        if (++v34 == v33)
        {
          v34 = v33;
          break;
        }
      }
    }
  }
LABEL_53:
  *(_BYTE *)(a1 + 8) = 1;
  return a1;
}

uint64_t JSC::globalFuncCopyDataProperties(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v2 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v3 = *(_DWORD *)(v2 - 8);
      v4 = *(_DWORD *)(a2 + 16);
      if ((v4 & 0x20) != 0)
        v4 = *(_DWORD *)(a2 + 32);
      v5 = v3 & (v4 >> 8);
      v6 = *(_QWORD *)(v2 + 8 * v5);
      if (v6 == a2)
      {
        return 1;
      }
      else
      {
        v7 = 1;
        do
        {
          result = v6 != 0;
          if (!v6)
            break;
          v5 = (v5 + v7) & v3;
          v6 = *(_QWORD *)(v2 + 8 * v5);
          ++v7;
        }
        while (v6 != a2);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t JSC::globalFuncCloneObject(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::JSFinalObject *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t SlowCase;
  __n128 v23;
  JSC::Structure *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  WTF *v44;
  WTF *v45;
  unint64_t *v46;
  unsigned int *v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  unint64_t v51;
  WTF *v52;
  _QWORD *v53;
  unint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  WTF *v62;
  WTF *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF *v75;
  uint64_t v78;
  unsigned int *v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  JSC::JSFinalObject *v93;
  unsigned int *v94;
  JSC::Structure *v95;
  unint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  __int128 *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  JSC *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  JSC *v119;
  JSC::JSFinalObject *v120;
  unsigned int *v121;
  unsigned int *v122;
  WTF *v123;
  unsigned int *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  unint64_t *v134;
  uint64_t v135;
  int v136;
  __n128 v137;
  int v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  unsigned int *v142;
  JSC::JSFinalObject *v143;
  unsigned int *v144;
  JSC::JSFinalObject *v145;
  unsigned int *v146;
  unsigned int *v147;
  uint64_t v148;
  _QWORD *v149;
  unsigned int *v150;
  unsigned int *v151;
  _QWORD *v152;
  unsigned int *v153;
  unsigned int *v154;
  BOOL hasExceptionsAfterHandlingTraps;
  unsigned int *v156;
  BOOL v157;
  unint64_t v158;
  uint64_t v159;
  _OWORD *v160;
  _OWORD *v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  unint64_t v167;
  unint64_t v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  _BOOL4 v172;
  unsigned int *v173;
  unsigned int *v174;
  unsigned int *v175;
  unint64_t v176;
  unint64_t v177;
  unsigned int *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  uint64_t Slow;
  WTF *__src;
  unsigned int *__srca;
  unsigned int *v193;
  JSC::JSFinalObject *v194;
  JSC::JSFinalObject *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  const JSC::PropertyTable *v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  WTF *v205;
  uint64_t v206;
  JSC::JSFinalObject *v207;
  __int16 v208;
  unint64_t v209;
  _BYTE v210[24];
  uint64_t v211[2];

  v10 = (JSC::JSFinalObject *)*((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2 + 5);
  v209 = v11;
  if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v112 = v10;
    v113 = *((_QWORD *)v10 + 1882);
    if (v113)
    {
      v114 = *(unsigned int *)(v113 + 60);
      SlowCase = *(_QWORD *)(v113 + 24);
      if (SlowCase < *(_QWORD *)(v113 + 32))
      {
LABEL_159:
        *(_QWORD *)(v113 + 24) = SlowCase + v114;
        goto LABEL_160;
      }
      SlowCase = *(_QWORD *)(v113 + 40);
      if ((SlowCase & 1) == 0)
      {
        v177 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v113 + 48);
        *(_QWORD *)(v113 + 32) = SlowCase + HIDWORD(v177);
        *(_QWORD *)(v113 + 40) = SlowCase + (int)v177;
        goto LABEL_159;
      }
      JSC::sanitizeStackForVM(v112, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v113, (uint64_t)v112 + 192, v114, 0, 0, v186, v187, v188);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v112 + 14936, v112, 0x40uLL, 0, a5, a6, a7, a8);
      if (!SlowCase)
      {
        __break(0xC471u);
LABEL_288:
        JUMPOUT(0x198A16358);
      }
    }
LABEL_160:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *((_DWORD *)this + 212);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*((_BYTE *)v112 + 755))
      __dmb(0xAu);
    return SlowCase;
  }
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    v115 = JSC::JSValue::toObjectSlowCase((JSC::JSValue *)&v209, this, a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_164;
  }
  if (*(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    v115 = JSC::JSCell::toObjectSlow((JSC::JSCell *)v11, (JSC::SymbolObject **)this, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_164:
    v11 = v115;
  }
  if (*((_DWORD *)v10 + 20))
  {
    v154 = (unsigned int *)v11;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v11 = (unint64_t)v154;
    if (hasExceptionsAfterHandlingTraps)
      return 0;
  }
  if ((*(_BYTE *)((16 * *(unsigned int *)v11) | 0x12) & 0x40) == 0)
  {
    v102 = (unsigned int *)v11;
    JSC::JSObject::reifyAllStaticProperties((JSC::JSObject *)v11, this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    v11 = (unint64_t)v102;
    if (*((_DWORD *)v10 + 20))
    {
      v103 = JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v11 = (unint64_t)v102;
      if (v103)
        return 0;
    }
  }
  v12 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
  if (*(_WORD *)(v12 + 0xC) & 6 | *(_BYTE *)(v12 + 0xA) & 8)
    goto LABEL_20;
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x10);
  if ((v13 & 0x20000008) != 0 || (*(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x10) & 3) == 2)
    goto LABEL_20;
  v15 = 16 * (*(_DWORD *)v11 & 0xFFFFFFFE);
  if ((v13 & 0x3E000) == 0x1C000)
  {
    v15 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x40);
    if (!v15)
      goto LABEL_20;
    if (*(_BYTE *)(v15 + 5) != 1)
    {
      v165 = *(_DWORD *)(v15 + 80) & 0xFFFFFFFE;
      if (!(_DWORD)v165)
        goto LABEL_20;
      v15 = 16 * v165;
    }
    if ((*(_DWORD *)(v15 + 16) & 0x3E000) == 0x10000)
    {
      v147 = (unsigned int *)v11;
      if (JSC::JSObject::canHaveExistingOwnIndexedProperties((JSC::JSObject *)v11))
      {
        v11 = (unint64_t)v147;
      }
      else
      {
        v15 = *(_QWORD *)(v15 + 64);
        v11 = (unint64_t)v147;
        if (!v15)
          goto LABEL_20;
        if (*(_BYTE *)(v15 + 5) != 1)
        {
          v148 = *(_DWORD *)(v15 + 80) & 0xFFFFFFFE;
          if (!(_DWORD)v148)
            goto LABEL_20;
          v15 = 16 * v148;
        }
      }
    }
  }
  if (*(_BYTE *)(v15 + 9) != 24
    || (v16 = *(_DWORD *)(v15 + 16), (v16 & 3) != 0)
    || v16 & 0x9980000 | *(_BYTE *)(v15 + 8) & 0xE
    || ((v17 = *(_QWORD *)(v15 + 48), (v16 & 0x40200070) == 0x200020) ? (v18 = v17 == 0) : (v18 = 1),
        v18 || *(JSC **)(v15 + 40) != this || v17 != *((_QWORD *)this + 82)))
  {
LABEL_20:
    v19 = *((_QWORD *)this + 7);
    v20 = *(_QWORD *)(v19 + 15056);
    if (!v20)
    {
      v189 = (unsigned int *)v11;
      Slow = JSC::CompleteSubspace::tryAllocateSlow(v19 + 14936, *((JSC **)this + 7), 0x40uLL, 0, a5, a6, a7, a8);
      v11 = (unint64_t)v189;
      SlowCase = Slow;
      if (!Slow)
      {
        __break(0xC471u);
        JUMPOUT(0x198A16B00);
      }
      goto LABEL_23;
    }
    v21 = *(unsigned int *)(v20 + 60);
    SlowCase = *(_QWORD *)(v20 + 24);
    if (SlowCase >= *(_QWORD *)(v20 + 32))
    {
      SlowCase = *(_QWORD *)(v20 + 40);
      if ((SlowCase & 1) != 0)
      {
        v178 = (unsigned int *)v11;
        JSC::sanitizeStackForVM(*((JSC **)this + 7), a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v182 = JSC::LocalAllocator::allocateSlowCase(v20, v19 + 192, v21, 0, 0, v179, v180, v181);
        v11 = (unint64_t)v178;
        SlowCase = v182;
        goto LABEL_23;
      }
      v158 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v20 + 48);
      *(_QWORD *)(v20 + 32) = SlowCase + HIDWORD(v158);
      *(_QWORD *)(v20 + 40) = SlowCase + (int)v158;
    }
    *(_QWORD *)(v20 + 24) = SlowCase + v21;
LABEL_23:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *((_DWORD *)this + 212);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*(_BYTE *)(v19 + 755))
      __dmb(0xAu);
    if (*((_DWORD *)v10 + 20))
    {
      v156 = (unsigned int *)v11;
      v157 = JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v11 = (unint64_t)v156;
      if (v157)
        return 0;
    }
    if (!(*(_WORD *)(v12 + 12) & 6 | *(_BYTE *)(v12 + 10) & 8)
      && (*(_BYTE *)(v12 + 8) & 0xE) == 0
      && (*(_DWORD *)(v12 + 16) & 8) == 0
      && (*(_DWORD *)(v12 + 16) & 3) != 2)
    {
      v204 = 0;
      v205 = (WTF *)&v207;
      v206 = 8;
      LOBYTE(v197) = 0;
      v198 = 0x800000000;
      v199 = (const JSC::PropertyTable *)((char *)&v200 + 8);
      v23 = 0uLL;
      v203 = 0u;
      v202 = 0u;
      v201 = 0u;
      v200 = 0u;
      v24 = (JSC::Structure *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE));
      v25 = *((_QWORD *)v24 + 11);
      if (!v25)
      {
        if ((v78 = *(_QWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x40)) == 0
          || *(_BYTE *)(v78 + 5) != 1 && *(_DWORD *)(v78 + 80) < 2u
          || (v79 = (unsigned int *)v11,
              JSC::Structure::materializePropertyTable(v24, v10, 1, a4, a5, a6, a7, a8),
              v11 = (unint64_t)v79,
              (v25 = v80) == 0))
        {
LABEL_106:
          if (*((_DWORD *)v10 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
          {
            SlowCase = 0;
          }
          else
          {
            JSC::JSObject::putOwnDataPropertyBatching(SlowCase, v10, v205, v199, HIDWORD(v206), a6, a7, a8, v23);
          }
          JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v198, v64, v65, v66, v67, a6, a7, a8);
          if (HIDWORD(v206))
          {
            v81 = v205;
            v82 = 8 * HIDWORD(v206);
            do
            {
              v83 = *(WTF::StringImpl **)v81;
              *(_QWORD *)v81 = 0;
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                {
                  WTF::StringImpl::~StringImpl(v83, v68, v69, v70, v71, v72, v73, v74);
                  WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
                }
                else
                {
                  *(_DWORD *)v83 -= 2;
                }
              }
              v81 = (WTF *)((char *)v81 + 8);
              v82 -= 8;
            }
            while (v82);
          }
          v75 = v205;
          if (&v207 != (JSC::JSFinalObject **)v205 && v205 != 0)
          {
            v205 = 0;
            LODWORD(v206) = 0;
            WTF::fastFree((unint64_t)v75, v68, v69, v70, v71, v72, v73, v74);
          }
          return SlowCase;
        }
      }
      v26 = *(_QWORD *)(v25 + 16);
      v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
      v28 = *(unsigned int *)(v25 + 8);
      v29 = (*(_DWORD *)(v25 + 28) + *(_DWORD *)(v25 + 24));
      if ((v26 & 1) == 0)
      {
        if (!(_DWORD)v29)
          goto LABEL_106;
        v30 = (unsigned int *)(v11 + 16);
        v31 = 16 * v29;
        v32 = v27 + 4 * v28 + 8;
        while (1)
        {
          v33 = *(_QWORD *)(v32 - 8);
          if (v33 != 1
            && (!v33 || (*(_BYTE *)(v33 + 16) & 0x20) == 0 || (*(_BYTE *)(v33 + 36) & 4) == 0)
            && (*(_BYTE *)(v32 + 4) & 4) == 0)
          {
            break;
          }
LABEL_48:
          v32 += 16;
          v31 -= 16;
          if (!v31)
            goto LABEL_106;
        }
        v34 = HIDWORD(v206);
        if (HIDWORD(v206) == (_DWORD)v206)
        {
          v194 = v10;
          v40 = HIDWORD(v206) + ((unint64_t)HIDWORD(v206) >> 2);
          if (v40 >= 0x10)
            v41 = v40 + 1;
          else
            v41 = 16;
          if (v41 <= (unint64_t)HIDWORD(v206) + 1)
            v42 = HIDWORD(v206) + 1;
          else
            v42 = v41;
          __src = v205;
          if (v42 < 9)
          {
            v43 = (unsigned int *)v11;
            v44 = (WTF *)&v207;
            v205 = (WTF *)&v207;
            LODWORD(v206) = 8;
          }
          else
          {
            if (v42 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x198A16B08);
            }
            v43 = (unsigned int *)v11;
            v44 = (WTF *)WTF::fastMalloc((WTF *)(8 * v42));
            LODWORD(v206) = v42;
            v205 = v44;
          }
          memcpy(v44, __src, 8 * v34);
          if (&v207 != (JSC::JSFinalObject **)__src && __src)
          {
            if (v205 == __src)
            {
              v205 = 0;
              LODWORD(v206) = 0;
            }
            WTF::fastFree((unint64_t)__src, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          }
          v34 = HIDWORD(v206);
          v45 = v205;
          if (v33)
            *(_DWORD *)v33 += 2;
          v35 = (_QWORD *)((char *)v45 + 8 * v34);
          v11 = (unint64_t)v43;
          v10 = v194;
        }
        else
        {
          v35 = (_QWORD *)((char *)v205 + 8 * HIDWORD(v206));
          if (v33)
            *(_DWORD *)v33 += 2;
        }
        *v35 = v33;
        HIDWORD(v206) = v34 + 1;
        v36 = *(_DWORD *)v32;
        v37 = (uint64_t)v30;
        if (*(int *)v32 >= 64)
        {
          v37 = *(_QWORD *)(v11 + 8) - 8;
          v36 = 63 - v36;
        }
        v38 = *(_QWORD *)(v37 + 8 * v36);
        v39 = v198;
        if ((_DWORD)v198 == HIDWORD(v198))
        {
          if (v198 >> 30
            || (v145 = v10,
                v146 = (unsigned int *)v11,
                JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v198, 2 * (int)v198)))
          {
            LOBYTE(v197) = 1;
LABEL_267:
            __break(0xC471u);
            JUMPOUT(0x198A16964);
          }
          v39 = v198;
          v11 = (unint64_t)v146;
          v10 = v145;
        }
        else if (v199 == (const JSC::PropertyTable *)((char *)&v200 + 8) || !v199)
        {
          *((_QWORD *)v199 + v198) = v38;
          LODWORD(v198) = v39 + 1;
          goto LABEL_47;
        }
        *((_QWORD *)v199 + v39) = v38;
        LODWORD(v198) = v39 + 1;
        if (!(_QWORD)v200 && (v38 & 0xFFFE000000000002) == 0 && v38)
        {
          v152 = (_QWORD *)(v38 & 0xFFFFFFFFFFFFC000 | 8);
          if ((v38 & 8) != 0)
            v152 = (_QWORD *)(v38 - 16);
          *(_QWORD *)&v200 = *v152 + 560;
          v211[0] = (uint64_t)&v198;
          v153 = (unsigned int *)v11;
          WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add((uint64_t *)v200, v211, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v210);
          v11 = (unint64_t)v153;
        }
LABEL_47:
        if ((_BYTE)v197)
          goto LABEL_267;
        goto LABEL_48;
      }
      if (!(_DWORD)v29)
        goto LABEL_106;
      v46 = (unint64_t *)(v27 + v28);
      v47 = (unsigned int *)(v11 + 16);
      v48 = 8 * v29;
      while (1)
      {
        v49 = *v46;
        v50 = (_DWORD *)(*v46 & 0xFFFFFFFFFFFFLL);
        if (v50 != (_DWORD *)1)
        {
          if (v50 && (*(_BYTE *)((*v46 & 0xFFFFFFFFFFFFLL) + 0x10) & 0x20) != 0)
          {
            if ((v49 & 0x4000000000000) == 0 && (*(_DWORD *)((*v46 & 0xFFFFFFFFFFFFLL) + 0x24) & 4) == 0)
            {
              v51 = HIDWORD(v206);
              v52 = v205;
              if (HIDWORD(v206) != (_DWORD)v206)
              {
                v53 = (_QWORD *)((char *)v205 + 8 * HIDWORD(v206));
LABEL_75:
                *v50 += 2;
LABEL_76:
                v54 = HIBYTE(v49);
                *v53 = v50;
                HIDWORD(v206) = v51 + 1;
                if (v49 >> 62)
                  v55 = (unsigned int *)(*(_QWORD *)(v11 + 8) + 8 * (63 - v54) - 8);
                else
                  v55 = &v47[2 * v54];
                v56 = *(_QWORD *)v55;
                v57 = v198;
                if ((_DWORD)v198 == HIDWORD(v198))
                {
                  if (v198 >> 30
                    || (v142 = v47,
                        v143 = v10,
                        v144 = (unsigned int *)v11,
                        JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v198, 2 * (int)v198)))
                  {
                    LOBYTE(v197) = 1;
LABEL_265:
                    __break(0xC471u);
                    JUMPOUT(0x198A1693CLL);
                  }
                  v57 = v198;
                  v11 = (unint64_t)v144;
                  v10 = v143;
                  v47 = v142;
                }
                else if (v199 == (const JSC::PropertyTable *)((char *)&v200 + 8) || !v199)
                {
                  *((_QWORD *)v199 + v198) = v56;
                  LODWORD(v198) = v57 + 1;
                  goto LABEL_82;
                }
                *((_QWORD *)v199 + v57) = v56;
                LODWORD(v198) = v57 + 1;
                if (!(_QWORD)v200 && (v56 & 0xFFFE000000000002) == 0 && v56 != 0)
                {
                  v149 = (_QWORD *)(v56 & 0xFFFFFFFFFFFFC000 | 8);
                  if ((v56 & 8) != 0)
                    v149 = (_QWORD *)(v56 - 16);
                  *(_QWORD *)&v200 = *v149 + 560;
                  v211[0] = (uint64_t)&v198;
                  v150 = (unsigned int *)v11;
                  v151 = v47;
                  WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add((uint64_t *)v200, v211, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v210);
                  v47 = v151;
                  v11 = (unint64_t)v150;
                }
LABEL_82:
                if ((_BYTE)v197)
                  goto LABEL_265;
                goto LABEL_83;
              }
LABEL_92:
              v193 = (unsigned int *)v11;
              v195 = v10;
              v59 = v51 + (v51 >> 2);
              if (v59 >= 0x10)
                v60 = v59 + 1;
              else
                v60 = 16;
              if (v60 <= v51 + 1)
                v61 = v51 + 1;
              else
                v61 = v60;
              __srca = v47;
              if (v61 < 9)
              {
                v62 = (WTF *)&v207;
                v205 = (WTF *)&v207;
                LODWORD(v206) = 8;
              }
              else
              {
                if (v61 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198A16B10);
                }
                v62 = (WTF *)WTF::fastMalloc((WTF *)(8 * v61));
                LODWORD(v206) = v61;
                v205 = v62;
              }
              memcpy(v62, v52, 8 * v51);
              v10 = v195;
              if (&v207 != (JSC::JSFinalObject **)v52 && v52)
              {
                if (v205 == v52)
                {
                  v205 = 0;
                  LODWORD(v206) = 0;
                }
                WTF::fastFree((unint64_t)v52, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              }
              v51 = HIDWORD(v206);
              v63 = v205;
              if (v50)
                *v50 += 2;
              v53 = (_QWORD *)((char *)v63 + 8 * v51);
              v47 = __srca;
              v11 = (unint64_t)v193;
              goto LABEL_76;
            }
          }
          else if ((v49 & 0x4000000000000) == 0)
          {
            v51 = HIDWORD(v206);
            v52 = v205;
            if (HIDWORD(v206) != (_DWORD)v206)
            {
              v53 = (_QWORD *)((char *)v205 + 8 * HIDWORD(v206));
              if (v50)
                goto LABEL_75;
              goto LABEL_76;
            }
            goto LABEL_92;
          }
        }
LABEL_83:
        ++v46;
        v48 -= 8;
        if (!v48)
          goto LABEL_106;
      }
    }
    v122 = (unsigned int *)v11;
    v123 = (WTF *)WTF::fastMalloc((WTF *)0xB8);
    *(_DWORD *)v123 = 1;
    *((_QWORD *)v123 + 1) = (char *)v123 + 24;
    *((_QWORD *)v123 + 2) = 20;
    v205 = v123;
    v206 = 0;
    v207 = v10;
    v208 = 259;
    v124 = v122;
    (*(void (**)(unsigned int *, JSC *, WTF **, _QWORD))(16
                                                                  * *(unsigned int *)(16 * (*v122 & 0xFFFFFFFE) + 0x4C)
                                                                  + 0x78))(v122, this, &v205, 0);
    if (*((_DWORD *)v10 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v125, v126, v127, v128, v129, v130, v131))
    {
LABEL_277:
      SlowCase = 0;
      goto LABEL_278;
    }
    v132 = *((unsigned int *)v205 + 5);
    if (!(_DWORD)v132)
    {
LABEL_278:
      JSC::PropertyNameArray::~PropertyNameArray((JSC::PropertyNameArray *)&v205, v125, v126, v127, v128, v129, v130, v131);
      return SlowCase;
    }
    v133 = v122;
    v134 = (unint64_t *)*((_QWORD *)v205 + 1);
    v135 = 8 * v132;
    while (1)
    {
      v199 = (const JSC::PropertyTable *)0xFFFFFFFF00000000;
      v200 = (unint64_t)v133;
      *(_QWORD *)&v201 = 0;
      DWORD2(v201) = 0x20000;
      BYTE12(v201) = 0;
      LOBYTE(v202) = 0;
      BYTE8(v202) = 0;
      v203 = 0uLL;
      v136 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*v133 & 0xFFFFFFFE) + 0x4C) + 0x68))();
      if (!*((_DWORD *)v10 + 20))
        break;
      v172 = JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v125, v126, v127, v128, v129, v130, v131);
      if (v172)
        v138 = 1;
      else
        v138 = 15;
      if (v172)
        goto LABEL_193;
      v133 = v124;
      if (((v136 ^ 1) & 1) == 0)
        goto LABEL_186;
LABEL_194:
      if (BYTE8(v202))
      {
        v140 = *(_DWORD *)(v202 + 4);
        if (!v140)
        {
          __break(0xC471u);
          JUMPOUT(0x198A168E0);
        }
        *(_DWORD *)(v202 + 4) = v140 - 1;
      }
      if (v138 != 15 && v138)
        goto LABEL_277;
      ++v134;
      v135 -= 8;
      if (!v135)
        goto LABEL_278;
    }
    v133 = v124;
    if (!v136)
      goto LABEL_185;
LABEL_186:
    if ((v199 & 4) != 0)
    {
LABEL_185:
      v138 = 15;
      goto LABEL_194;
    }
    if (BYTE12(v201))
    {
      v141 = JSC::JSObject::get(v133, (uint64_t)this, *v134, v127, v128, v129, v130, v131);
    }
    else
    {
      if (BYTE9(v201) == 1)
      {
        v139 = v197;
        goto LABEL_190;
      }
      if (BYTE9(v201) == 2)
        v141 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v197, this, v126, v127, v128, v129, v130, v131);
      else
        v141 = JSC::PropertySlot::customGetter((uint64_t)&v197, *((JSC::VM **)this + 7), (WTF::StringImpl *)*v134);
    }
    v139 = v141;
LABEL_190:
    v138 = 1;
    if (!*((_DWORD *)v10 + 20)
      || !JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v125, v126, v127, v128, v129, v130, v131))
    {
      JSC::JSObject::putDirectMayBeIndex((int *)SlowCase, (unint64_t)this, *v134, v139, v128, v129, v130, v131, v137);
      if (!*((_DWORD *)v10 + 20)
        || !JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v125, v126, v127, v128, v129, v130, v131))
      {
        v138 = 0;
      }
    }
LABEL_193:
    v133 = v124;
    goto LABEL_194;
  }
  ++*((_DWORD *)v10 + 229);
  v92 = *(unsigned __int16 *)(v15 + 24);
  if (v92 == 65534)
    goto LABEL_134;
  if (v92 == 0xFFFF)
    v92 = *(_DWORD *)(*(_QWORD *)(v15 + 64) + 84);
  if (v92 < 64)
  {
LABEL_134:
    v93 = v10;
    v94 = (unsigned int *)v11;
    v95 = 0;
    goto LABEL_135;
  }
  if ((v92 - 63) > 4)
  {
    v116 = (v92 - 64) | ((v92 - 64) >> 1) | (((v92 - 64) | ((v92 - 64) >> 1)) >> 2);
    v117 = v116 | (v116 >> 4) | ((v116 | (v116 >> 4)) >> 8);
    v118 = v117 | HIWORD(v117);
    v105 = v118 + 1;
    v106 = 8 * v105;
    v104 = (uint64_t)v10 + 6648;
    if (v118 > 0x3EB)
      goto LABEL_166;
  }
  else
  {
    v104 = (uint64_t)v10 + 6648;
    v105 = 4;
    v106 = 32;
  }
  v107 = *(_QWORD *)((char *)v10 + (((v106 + 15) >> 1) & 0x7FFFFFFF8) + 6736);
  if (v107)
  {
    v108 = *(_QWORD *)(v107 + 24);
    if (v108 >= *(_QWORD *)(v107 + 32))
    {
      v175 = (unsigned int *)v11;
      v196 = *(unsigned int *)(v107 + 60);
      v108 = *(_QWORD *)(v107 + 40);
      if ((v108 & 1) != 0)
      {
        JSC::sanitizeStackForVM(v10, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v108 = JSC::LocalAllocator::allocateSlowCase(v107, (uint64_t)v10 + 192, v196, 0, 0, v183, v184, v185);
      }
      else
      {
        v176 = *(_QWORD *)(v108 + 8) ^ *(_QWORD *)(v107 + 48);
        *(_QWORD *)(v107 + 32) = v108 + HIDWORD(v176);
        *(_QWORD *)(v107 + 40) = v108 + (int)v176;
        *(_QWORD *)(v107 + 24) = v108 + v196;
      }
      v11 = (unint64_t)v175;
    }
    else
    {
      *(_QWORD *)(v107 + 24) = v108 + *(unsigned int *)(v107 + 60);
    }
    goto LABEL_152;
  }
LABEL_166:
  v119 = v10;
  v120 = v10;
  v121 = (unsigned int *)v11;
  v108 = JSC::CompleteSubspace::tryAllocateSlow(v104, v119, v106, 0, a5, a6, a7, a8);
  v11 = (unint64_t)v121;
  v10 = v120;
  if (!v108)
  {
    __break(0xC471u);
    goto LABEL_288;
  }
LABEL_152:
  v93 = v10;
  v95 = (JSC::Structure *)(v108 + 8 * v105 + 8);
  v109 = *(_QWORD *)(v11 + 8) - 8;
  v94 = (unsigned int *)v11;
  if (v105 > 0x1E)
  {
    v166 = (__int128 *)(v109 - 8 * v105);
    v167 = v106 + v108;
    v168 = (v106 & 0x7FFFFFFE0) + v108;
    while (v108 != v168)
    {
      v169 = *v166;
      v170 = v166[1];
      v166 += 2;
      *(_OWORD *)v108 = v169;
      *(_OWORD *)(v108 + 16) = v170;
      v108 += 32;
    }
    while (v108 != v167)
    {
      v171 = *(_QWORD *)v166;
      v166 = (__int128 *)((char *)v166 + 8);
      *(_QWORD *)v108 = v171;
      v108 += 8;
    }
  }
  else
  {
    v110 = -v105;
    do
    {
      *(_QWORD *)v108 = *(_QWORD *)(v109 + 8 * v110);
      v108 += 8;
    }
    while (!__CFADD__(v110++, 1));
  }
LABEL_135:
  v96 = JSC::JSFinalObject::createWithButterfly(v93, v15, v95, a4, a5, a6, a7, a8);
  SlowCase = v96;
  v97 = *(unsigned __int8 *)(v15 + 14);
  v11 = (unint64_t)v94;
  if (!*(_BYTE *)(v15 + 14))
    goto LABEL_239;
  v98 = (_OWORD *)(v96 + 16);
  v99 = (__int128 *)(v94 + 4);
  if (v97 > 0x1E)
  {
    v159 = (8 * v97) & 0x7E0;
    v160 = (_OWORD *)((char *)v98 + 8 * v97);
    v161 = (_OWORD *)((char *)v98 + v159);
    while (v98 != v161)
    {
      v162 = *v99;
      v163 = v99[1];
      v99 += 2;
      *v98 = v162;
      v98[1] = v163;
      v98 += 2;
    }
    while (v98 != v160)
    {
      v164 = *(_QWORD *)v99;
      v99 = (__int128 *)((char *)v99 + 8);
      *(_QWORD *)v98 = v164;
      v98 = (_OWORD *)((char *)v98 + 8);
    }
LABEL_239:
    v10 = v93;
    v101 = (uint64_t)v93 + 192;
    if (!v96)
      goto LABEL_141;
    goto LABEL_139;
  }
  do
  {
    v100 = *(_QWORD *)v99;
    v99 = (__int128 *)((char *)v99 + 8);
    *(_QWORD *)v98 = v100;
    v98 = (_OWORD *)((char *)v98 + 8);
    --v97;
  }
  while (v97);
  v10 = v93;
  v101 = (uint64_t)v93 + 192;
LABEL_139:
  if (*((_DWORD *)v10 + 190) >= *(unsigned __int8 *)(v96 + 7))
  {
    v174 = (unsigned int *)v11;
    JSC::Heap::writeBarrierSlowPath(v101, v96);
    v11 = (unint64_t)v174;
  }
LABEL_141:
  --*((_DWORD *)v10 + 229);
  if (*((unsigned __int8 *)v10 + 1198) | HIBYTE(dword_1ECF4C5CE) && !*(_DWORD *)(v101 + 724))
  {
    *(_BYTE *)(v101 + 1006) = 0;
    v173 = (unsigned int *)v11;
    JSC::Heap::collectIfNecessaryOrDefer(v101, 0);
    v11 = (unint64_t)v173;
  }
  if (!SlowCase)
    goto LABEL_20;
  return SlowCase;
}

uint64_t JSC::globalFuncHandleNegativeProxyHasTrapResult(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  _QWORD *v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  _DWORD *v75;
  WTF::StringImpl *v76;
  _QWORD *v77;
  uint64_t v78;
  WTF::StringImpl **v79;
  WTF::StringImpl **v80;
  WTF::StringImpl *v81;
  int v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  WTF::StringImpl *v110;

  v9 = *((_QWORD *)this + 7);
  v10 = (_DWORD *)*((_QWORD *)a2 + 6);
  v11 = *((_QWORD *)a2 + 7);
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_53;
  if (*(_BYTE *)(v11 + 5) != 2)
  {
    v11 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 7), (JSC::VM **)this, (JSC::Structure *)2, a4, a5, a6, a7, a8);
LABEL_53:
    v109 = (unsigned __int8 *)v11;
    if (*(_DWORD *)(v9 + 80))
    {
      v91 = *(_DWORD *)(v9 + 80);
      if ((v91 & 0x27) != 0 && (v91 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v9 + 16))
      {
        v12 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 41952) + 8);
        if (!v12)
          goto LABEL_7;
        goto LABEL_5;
      }
    }
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      v61 = *(unsigned __int8 *)(v11 + 5);
      if (v61 == 2)
      {
LABEL_61:
        if (*(_DWORD *)(v9 + 80))
        {
          v92 = *(_DWORD *)(v9 + 80);
          if ((v92 & 0x27) != 0 && (v92 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v9 + 16))
          {
            v12 = 0;
            goto LABEL_7;
          }
        }
        v12 = *(WTF::StringImpl **)(v11 + 8);
        v71 = *((_QWORD *)this + 7);
        if ((v12 & 1) == 0)
        {
          if ((*((_BYTE *)v12 + 16) & 0x10) == 0)
          {
            v72 = *(WTF::StringImpl **)(v71 + 64768);
            if (v72 != v12)
            {
              *(_DWORD *)v12 += 2;
              *(_QWORD *)(v71 + 64768) = v12;
              if (v72)
              {
                if (*(_DWORD *)v72 == 2)
                {
                  WTF::StringImpl::~StringImpl(v72, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
                }
                else
                {
                  *(_DWORD *)v72 -= 2;
                }
              }
              v73 = *(WTF::StringImpl **)(v11 + 8);
              if (v73)
              {
                if ((*((_BYTE *)v73 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v73 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v73, a3, a4, a5, a6, a7, a8, (WTF *)&v110);
                  v73 = v110;
                }
              }
              v74 = *(WTF::StringImpl **)(v71 + 64776);
              *(_QWORD *)(v71 + 64776) = v73;
              if (v74)
              {
                if (*(_DWORD *)v74 == 2)
                {
                  WTF::StringImpl::~StringImpl(v74, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
                }
                else
                {
                  *(_DWORD *)v74 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
            {
              v75 = *(_DWORD **)(v71 + 64776);
              *v75 += 2;
              __dmb(0xAu);
              v76 = *(WTF::StringImpl **)(v11 + 8);
              *(_QWORD *)(v11 + 8) = v75;
              v110 = v76;
              v77 = (_QWORD *)(v71 + 808);
              v78 = *(unsigned int *)(v71 + 820);
              if ((_DWORD)v78 == *(_DWORD *)(v71 + 816))
              {
                v80 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, v78 + 1, (unint64_t)&v110);
                v78 = *(unsigned int *)(v71 + 820);
                v79 = (WTF::StringImpl **)(*(_QWORD *)(v71 + 808) + 8 * v78);
                v76 = *v80;
              }
              else
              {
                v79 = (WTF::StringImpl **)(*v77 + 8 * v78);
                v80 = &v110;
              }
              *v80 = 0;
              *v79 = v76;
              *(_DWORD *)(v71 + 820) = v78 + 1;
              v81 = v110;
              v110 = 0;
              if (v81)
              {
                if (*(_DWORD *)v81 == 2)
                {
                  WTF::StringImpl::~StringImpl(v81, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
                }
                else
                {
                  *(_DWORD *)v81 -= 2;
                }
              }
            }
            v12 = *(WTF::StringImpl **)(v71 + 64776);
          }
          goto LABEL_5;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, this);
        if (*(_DWORD *)(v71 + 80))
        {
          v82 = *(_DWORD *)(v71 + 80);
          if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v71 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v71 + 16))
            goto LABEL_46;
        }
        goto LABEL_14;
      }
      if (v61 == 4)
      {
        v12 = *(WTF::StringImpl **)(v11 + 8);
        v62 = *(_DWORD *)v12;
        *(_DWORD *)v12 += 4;
        v13 = v62 + 2;
        if (v13)
          goto LABEL_6;
        v24 = v12;
LABEL_59:
        WTF::StringImpl::~StringImpl(v24, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
        goto LABEL_7;
      }
    }
    v11 = (uint64_t)JSC::JSValue::toStringSlowCase(&v109, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_61;
  }
  v12 = *(WTF::StringImpl **)(v11 + 8);
  if ((v12 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(*((JSC::JSRopeString **)a2 + 7), this);
    if (*(_DWORD *)(v9 + 80))
    {
      v60 = *(_DWORD *)(v9 + 80);
      if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v9 + 16))
      {
LABEL_46:
        v12 = 0;
        v24 = v110;
        v110 = 0;
        if (!v24)
          goto LABEL_7;
LABEL_16:
        if (*(_DWORD *)v24 != 2)
        {
          *(_DWORD *)v24 -= 2;
          goto LABEL_7;
        }
        goto LABEL_59;
      }
    }
LABEL_14:
    v12 = v110;
    if (!v110)
      goto LABEL_7;
    *(_DWORD *)v110 += 2;
    v110 = 0;
    v24 = v12;
    goto LABEL_16;
  }
  if ((*((_BYTE *)v12 + 16) & 0x10) == 0)
  {
    v25 = *(WTF::StringImpl **)(v9 + 64768);
    if (v25 != v12)
    {
      *(_DWORD *)v12 += 2;
      *(_QWORD *)(v9 + 64768) = v12;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::~StringImpl(v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
        }
        else
        {
          *(_DWORD *)v25 -= 2;
        }
      }
      v26 = *(WTF::StringImpl **)(v11 + 8);
      if (v26)
      {
        if ((*((_BYTE *)v26 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v26 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v26, a3, a4, a5, a6, a7, a8, (WTF *)&v110);
          v26 = v110;
        }
      }
      v27 = *(WTF::StringImpl **)(v9 + 64776);
      *(_QWORD *)(v9 + 64776) = v26;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::~StringImpl(v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
        }
        else
        {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
    {
      v28 = *(_DWORD **)(v9 + 64776);
      *v28 += 2;
      __dmb(0xAu);
      v29 = *(WTF::StringImpl **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v28;
      v110 = v29;
      v30 = (_QWORD *)(v9 + 808);
      v31 = *(unsigned int *)(v9 + 820);
      if ((_DWORD)v31 == *(_DWORD *)(v9 + 816))
      {
        v33 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, v31 + 1, (unint64_t)&v110);
        v31 = *(unsigned int *)(v9 + 820);
        v32 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 808) + 8 * v31);
        v29 = *v33;
      }
      else
      {
        v32 = (WTF::StringImpl **)(*v30 + 8 * v31);
        v33 = &v110;
      }
      *v33 = 0;
      *v32 = v29;
      *(_DWORD *)(v9 + 820) = v31 + 1;
      v34 = v110;
      v110 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    v12 = *(WTF::StringImpl **)(v9 + 64776);
  }
LABEL_5:
  v13 = *(_DWORD *)v12 + 2;
LABEL_6:
  *(_DWORD *)v12 = v13;
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_8;
LABEL_7:
  v43 = *(_DWORD *)(v9 + 80);
  if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v9 + 16))
  {
    v14 = 0;
    if (!v12)
      return v14;
  }
  else
  {
LABEL_8:
    JSC::ProxyObject::validateNegativeHasTrapResult((unint64_t)this, v10, v12);
    v14 = 10;
    if (!v12)
      return v14;
  }
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::~StringImpl(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  else
  {
    *(_DWORD *)v12 -= 2;
  }
  return v14;
}

uint64_t JSC::globalFuncHandleProxyGetTrapResult(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  _DWORD *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::VM *v54;
  int v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  int v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  WTF::StringImpl *v88;

  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 6);
  v11 = (_DWORD *)*((_QWORD *)a2 + 7);
  v12 = *((_QWORD *)a2 + 8);
  if ((v12 & 0xFFFE000000000002) != 0)
  {
LABEL_41:
    v87 = (unsigned __int8 *)v12;
    if (*(_DWORD *)(v9 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v13 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 41952) + 8);
      if (!v13)
        goto LABEL_7;
      goto LABEL_5;
    }
    if ((v12 & 0xFFFE000000000002) == 0)
    {
      v55 = *(unsigned __int8 *)(v12 + 5);
      if (v55 == 2)
        goto LABEL_44;
      if (v55 == 4)
      {
        v13 = *(WTF::StringImpl **)(v12 + 8);
        v62 = *(_DWORD *)v13;
        *(_DWORD *)v13 += 4;
        v14 = v62 + 2;
        if (v14)
          goto LABEL_6;
        v32 = v13;
LABEL_60:
        WTF::StringImpl::~StringImpl(v32, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
        goto LABEL_7;
      }
    }
    v12 = (uint64_t)JSC::JSValue::toStringSlowCase(&v87, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_44:
    if (*(_DWORD *)(v9 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v13 = 0;
      goto LABEL_7;
    }
    v13 = *(WTF::StringImpl **)(v12 + 8);
    v56 = *((_QWORD *)this + 7);
    if ((v13 & 1) == 0)
    {
      if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
      {
        if (*(WTF::StringImpl **)(v56 + 64768) != v13)
        {
          WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v56 + 64768), *(WTF::AtomStringImpl **)(v12 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
          v57 = *(WTF::StringImpl **)(v12 + 8);
          if (v57)
          {
            if ((*((_BYTE *)v57 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v57 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v57, a3, a4, a5, a6, a7, a8, (WTF *)&v88);
              v57 = v88;
            }
          }
          v58 = *(WTF::StringImpl **)(v56 + 64776);
          *(_QWORD *)(v56 + 64776) = v57;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
            {
              WTF::StringImpl::~StringImpl(v58, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
            }
            else
            {
              *(_DWORD *)v58 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
        {
          v59 = *(_DWORD **)(v56 + 64776);
          *v59 += 2;
          __dmb(0xAu);
          v60 = *(WTF::StringImpl **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = v59;
          v88 = v60;
          JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v56 + 192, (unint64_t)&v88);
          v61 = v88;
          v88 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2)
            {
              WTF::StringImpl::~StringImpl(v61, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
            }
            else
            {
              *(_DWORD *)v61 -= 2;
            }
          }
        }
        v13 = *(WTF::StringImpl **)(v56 + 64776);
      }
      goto LABEL_5;
    }
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, this);
    if (!*(_DWORD *)(v56 + 80))
      goto LABEL_15;
    v54 = (JSC::VM *)v56;
    goto LABEL_37;
  }
  if (*(_BYTE *)(v12 + 5) != 2)
  {
    v12 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 8), (JSC::VM **)this, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    goto LABEL_41;
  }
  v13 = *(WTF::StringImpl **)(v12 + 8);
  if ((v13 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(*((JSC::JSRopeString **)a2 + 8), this);
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_15;
    v54 = (JSC::VM *)v9;
LABEL_37:
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v54, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v13 = 0;
      v32 = v88;
      v88 = 0;
      if (!v32)
        goto LABEL_7;
LABEL_17:
      if (*(_DWORD *)v32 != 2)
      {
        *(_DWORD *)v32 -= 2;
        goto LABEL_7;
      }
      goto LABEL_60;
    }
LABEL_15:
    v13 = v88;
    if (!v88)
      goto LABEL_7;
    *(_DWORD *)v88 += 2;
    v88 = 0;
    v32 = v13;
    goto LABEL_17;
  }
  if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
  {
    if (*(WTF::StringImpl **)(v9 + 64768) != v13)
    {
      WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v9 + 64768), *(WTF::AtomStringImpl **)(v12 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
      v33 = *(WTF::StringImpl **)(v12 + 8);
      if (v33)
      {
        if ((*((_BYTE *)v33 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v33 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v33, a3, a4, a5, a6, a7, a8, (WTF *)&v88);
          v33 = v88;
        }
      }
      v34 = *(WTF::StringImpl **)(v9 + 64776);
      *(_QWORD *)(v9 + 64776) = v33;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
    {
      v35 = *(_DWORD **)(v9 + 64776);
      *v35 += 2;
      __dmb(0xAu);
      v36 = *(WTF::StringImpl **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = v35;
      v88 = v36;
      JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v9 + 192, (unint64_t)&v88);
      v37 = v88;
      v88 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
        {
          WTF::StringImpl::~StringImpl(v37, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
        }
        else
        {
          *(_DWORD *)v37 -= 2;
        }
      }
    }
    v13 = *(WTF::StringImpl **)(v9 + 64776);
  }
LABEL_5:
  v14 = *(_DWORD *)v13 + 2;
LABEL_6:
  *(_DWORD *)v13 = v14;
LABEL_7:
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v22 = 0;
  }
  else
  {
    JSC::ProxyObject::validateGetTrapResult(this, v10, v11, v13);
    v22 = 10;
  }
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  return v22;
}

uint64_t JSC::globalFuncHandlePositiveProxySetTrapResult(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  _QWORD *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  _DWORD *v76;
  WTF::StringImpl *v77;
  _QWORD *v78;
  uint64_t v79;
  WTF::StringImpl **v80;
  WTF::StringImpl **v81;
  WTF::StringImpl *v82;
  int v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  WTF::StringImpl *v111;

  v10 = *((_QWORD *)this + 7);
  v11 = (_DWORD *)*((_QWORD *)a2 + 6);
  v12 = *((_QWORD *)a2 + 7);
  if ((v12 & 0xFFFE000000000002) != 0)
    goto LABEL_53;
  if (*(_BYTE *)(v12 + 5) != 2)
  {
    v12 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 7), (JSC::VM **)this, (JSC::Structure *)2, a4, a5, a6, a7, a8);
LABEL_53:
    v110 = (unsigned __int8 *)v12;
    if (*(_DWORD *)(v10 + 80))
    {
      v92 = *(_DWORD *)(v10 + 80);
      if ((v92 & 0x27) != 0 && (v92 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
      {
        v13 = *(WTF::StringImpl **)(*(_QWORD *)(v10 + 41952) + 8);
        if (!v13)
          goto LABEL_7;
        goto LABEL_5;
      }
    }
    if ((v12 & 0xFFFE000000000002) == 0)
    {
      v62 = *(unsigned __int8 *)(v12 + 5);
      if (v62 == 2)
      {
LABEL_61:
        if (*(_DWORD *)(v10 + 80))
        {
          v93 = *(_DWORD *)(v10 + 80);
          if ((v93 & 0x27) != 0 && (v93 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v10 + 16))
          {
            v13 = 0;
            goto LABEL_7;
          }
        }
        v13 = *(WTF::StringImpl **)(v12 + 8);
        v72 = *((_QWORD *)this + 7);
        if ((v13 & 1) == 0)
        {
          if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
          {
            v73 = *(WTF::StringImpl **)(v72 + 64768);
            if (v73 != v13)
            {
              *(_DWORD *)v13 += 2;
              *(_QWORD *)(v72 + 64768) = v13;
              if (v73)
              {
                if (*(_DWORD *)v73 == 2)
                {
                  WTF::StringImpl::~StringImpl(v73, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
                }
                else
                {
                  *(_DWORD *)v73 -= 2;
                }
              }
              v74 = *(WTF::StringImpl **)(v12 + 8);
              if (v74)
              {
                if ((*((_BYTE *)v74 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v74 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v74, a3, a4, a5, a6, a7, a8, (WTF *)&v111);
                  v74 = v111;
                }
              }
              v75 = *(WTF::StringImpl **)(v72 + 64776);
              *(_QWORD *)(v72 + 64776) = v74;
              if (v75)
              {
                if (*(_DWORD *)v75 == 2)
                {
                  WTF::StringImpl::~StringImpl(v75, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
                }
                else
                {
                  *(_DWORD *)v75 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
            {
              v76 = *(_DWORD **)(v72 + 64776);
              *v76 += 2;
              __dmb(0xAu);
              v77 = *(WTF::StringImpl **)(v12 + 8);
              *(_QWORD *)(v12 + 8) = v76;
              v111 = v77;
              v78 = (_QWORD *)(v72 + 808);
              v79 = *(unsigned int *)(v72 + 820);
              if ((_DWORD)v79 == *(_DWORD *)(v72 + 816))
              {
                v81 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v78, v79 + 1, (unint64_t)&v111);
                v79 = *(unsigned int *)(v72 + 820);
                v80 = (WTF::StringImpl **)(*(_QWORD *)(v72 + 808) + 8 * v79);
                v77 = *v81;
              }
              else
              {
                v80 = (WTF::StringImpl **)(*v78 + 8 * v79);
                v81 = &v111;
              }
              *v81 = 0;
              *v80 = v77;
              *(_DWORD *)(v72 + 820) = v79 + 1;
              v82 = v111;
              v111 = 0;
              if (v82)
              {
                if (*(_DWORD *)v82 == 2)
                {
                  WTF::StringImpl::~StringImpl(v82, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
                }
                else
                {
                  *(_DWORD *)v82 -= 2;
                }
              }
            }
            v13 = *(WTF::StringImpl **)(v72 + 64776);
          }
          goto LABEL_5;
        }
        JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, this);
        if (*(_DWORD *)(v72 + 80))
        {
          v83 = *(_DWORD *)(v72 + 80);
          if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v72 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v72 + 16))
            goto LABEL_46;
        }
        goto LABEL_14;
      }
      if (v62 == 4)
      {
        v13 = *(WTF::StringImpl **)(v12 + 8);
        v63 = *(_DWORD *)v13;
        *(_DWORD *)v13 += 4;
        v14 = v63 + 2;
        if (v14)
          goto LABEL_6;
        v25 = v13;
LABEL_59:
        WTF::StringImpl::~StringImpl(v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
        goto LABEL_7;
      }
    }
    v12 = (uint64_t)JSC::JSValue::toStringSlowCase(&v110, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_61;
  }
  v13 = *(WTF::StringImpl **)(v12 + 8);
  if ((v13 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(*((JSC::JSRopeString **)a2 + 7), this);
    if (*(_DWORD *)(v10 + 80))
    {
      v61 = *(_DWORD *)(v10 + 80);
      if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
      {
LABEL_46:
        v13 = 0;
        v25 = v111;
        v111 = 0;
        if (!v25)
          goto LABEL_7;
LABEL_16:
        if (*(_DWORD *)v25 != 2)
        {
          *(_DWORD *)v25 -= 2;
          goto LABEL_7;
        }
        goto LABEL_59;
      }
    }
LABEL_14:
    v13 = v111;
    if (!v111)
      goto LABEL_7;
    *(_DWORD *)v111 += 2;
    v111 = 0;
    v25 = v13;
    goto LABEL_16;
  }
  if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
  {
    v26 = *(WTF::StringImpl **)(v10 + 64768);
    if (v26 != v13)
    {
      *(_DWORD *)v13 += 2;
      *(_QWORD *)(v10 + 64768) = v13;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::~StringImpl(v26, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)v26 -= 2;
        }
      }
      v27 = *(WTF::StringImpl **)(v12 + 8);
      if (v27)
      {
        if ((*((_BYTE *)v27 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v27 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v27, a3, a4, a5, a6, a7, a8, (WTF *)&v111);
          v27 = v111;
        }
      }
      v28 = *(WTF::StringImpl **)(v10 + 64776);
      *(_QWORD *)(v10 + 64776) = v27;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
    {
      v29 = *(_DWORD **)(v10 + 64776);
      *v29 += 2;
      __dmb(0xAu);
      v30 = *(WTF::StringImpl **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = v29;
      v111 = v30;
      v31 = (_QWORD *)(v10 + 808);
      v32 = *(unsigned int *)(v10 + 820);
      if ((_DWORD)v32 == *(_DWORD *)(v10 + 816))
      {
        v34 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, v32 + 1, (unint64_t)&v111);
        v32 = *(unsigned int *)(v10 + 820);
        v33 = (WTF::StringImpl **)(*(_QWORD *)(v10 + 808) + 8 * v32);
        v30 = *v34;
      }
      else
      {
        v33 = (WTF::StringImpl **)(*v31 + 8 * v32);
        v34 = &v111;
      }
      *v34 = 0;
      *v33 = v30;
      *(_DWORD *)(v10 + 820) = v32 + 1;
      v35 = v111;
      v111 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::~StringImpl(v35, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
        }
        else
        {
          *(_DWORD *)v35 -= 2;
        }
      }
    }
    v13 = *(WTF::StringImpl **)(v10 + 64776);
  }
LABEL_5:
  v14 = *(_DWORD *)v13 + 2;
LABEL_6:
  *(_DWORD *)v13 = v14;
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_8;
LABEL_7:
  v44 = *(_DWORD *)(v10 + 80);
  if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
  {
    v15 = 0;
    if (!v13)
      return v15;
  }
  else
  {
LABEL_8:
    JSC::ProxyObject::validatePositiveSetTrapResult(this, v11, v13, *((_QWORD *)a2 + 8));
    v15 = 10;
    if (!v13)
      return v15;
  }
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::~StringImpl(v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  else
  {
    *(_DWORD *)v13 -= 2;
  }
  return v15;
}

uint64_t JSC::globalFuncIsNaN(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  uint64_t v11;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
LABEL_7:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v11, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    return 6;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v11 = (uint64_t)v9;
  if ((unint64_t)v9 < 0xFFFE000000000000 && (unint64_t)v9 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_7;
  return 6;
}

JSC::JSObject *JSC::globalFuncToIntegerOrInfinity(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *result;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14 = 10;
LABEL_13:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v14, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_5;
  }
  result = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v14 = (uint64_t)result;
  if ((unint64_t)result > 0xFFFDFFFFFFFFFFFFLL)
    return result;
  if ((unint64_t)result - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_13;
  *(_QWORD *)&v11 = (char *)result - 0x2000000000000;
LABEL_5:
  v12 = trunc(v11 + 0.0);
  if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v13 = (int)v12, v12 == (double)(int)v13)
    && ((_DWORD)v13 || (*(_QWORD *)&v12 & 0x8000000000000000) == 0))
  {
    return (JSC::JSObject *)(v13 | 0xFFFE000000000000);
  }
  else
  {
    return (JSC::JSObject *)(*(_QWORD *)&v12 + 0x2000000000000);
  }
}

unint64_t JSC::globalFuncToLength(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unint64_t v10;
  double v11;
  double v13;
  uint64_t v14;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14 = 10;
LABEL_5:
    v11 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v14, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    if (v11 <= 0.0)
    {
      v10 = 0;
      return v10 | 0xFFFE000000000000;
    }
    if (v11 > 9.00719925e15)
      v11 = 9.00719925e15;
    v10 = (unint64_t)v11;
    if ((unint64_t)v11 >> 32)
    {
      v13 = (double)v10;
    }
    else
    {
      if ((v10 & 0x80000000) == 0)
        return v10 | 0xFFFE000000000000;
      v13 = (double)v10;
    }
    return *(_QWORD *)&v13 + 0x2000000000000;
  }
  v9 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v14 = (uint64_t)v9;
  if ((unint64_t)v9 < 0xFFFE000000000000)
    goto LABEL_5;
  v10 = v9 & ~((int)v9 >> 31);
  return v10 | 0xFFFE000000000000;
}

uint64_t JSC::globalFuncSpeciesGetter(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;

  result = *((_QWORD *)a2 + 5);
  if ((result & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(result + 5) - 51 <= 5)
    return 10;
  return result;
}

uint64_t JSC::JSGlobalProxy::put(uint64_t a1)
{
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (**(_DWORD **)(a1 + 16) & 0xFFFFFFFE) + 0x4C) + 0x48))();
}

uint64_t JSC::JSGlobalProxy::putByIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (**(_DWORD **)(a1 + 16) & 0xFFFFFFFE) + 0x4C) + 0x50))();
}

uint64_t JSC::JSGlobalProxy::deleteProperty(uint64_t a1)
{
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (**(_DWORD **)(a1 + 16) & 0xFFFFFFFE) + 0x4C) + 0x58))();
}

uint64_t JSC::JSGlobalProxy::deletePropertyByIndex(JSC::JSGlobalProxy *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (**((_DWORD **)this + 2) & 0xFFFFFFFE) + 0x4C) + 0x60))();
}

uint64_t JSC::JSGlobalProxy::getOwnPropertySlot(uint64_t a1)
{
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (**(_DWORD **)(a1 + 16) & 0xFFFFFFFE) + 0x4C) + 0x68))();
}

uint64_t JSC::JSGlobalProxy::getOwnPropertySlotByIndex(uint64_t a1)
{
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (**(_DWORD **)(a1 + 16) & 0xFFFFFFFE) + 0x4C) + 0x70))();
}

uint64_t JSC::JSGlobalProxy::getOwnPropertyNames(uint64_t a1)
{
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (**(_DWORD **)(a1 + 16) & 0xFFFFFFFE) + 0x4C) + 0x78))();
}

uint64_t JSC::JSGlobalProxy::defineOwnProperty(uint64_t a1)
{
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (**(_DWORD **)(a1 + 16) & 0xFFFFFFFE) + 0x4C) + 0x90))();
}

uint64_t JSC::JSGlobalProxy::preventExtensions(JSC::JSGlobalProxy *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3)
{
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (**((_DWORD **)this + 2) & 0xFFFFFFFE) + 0x4C) + 0x98))();
}

uint64_t JSC::JSGlobalProxy::isExtensible(JSC::JSGlobalProxy *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3)
{
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (**((_DWORD **)this + 2) & 0xFFFFFFFE) + 0x4C) + 0xA0))();
}

uint64_t JSC::JSGlobalProxy::setPrototype(uint64_t a1)
{
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (**(_DWORD **)(a1 + 16) & 0xFFFFFFFE) + 0x4C) + 0xA8))();
}

uint64_t JSC::JSGlobalProxy::getPrototype(JSC::JSGlobalProxy *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3)
{
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (**((_DWORD **)this + 2) & 0xFFFFFFFE) + 0x4C) + 0xB0))();
}

void JSC::JSGlobalProxy::visitChildren(JSC::JSGlobalProxy *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::JSGlobalProxy::visitChildren(JSC::JSGlobalProxy *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

void JSC::JSGlobalProxy::setTarget(JSC::JSGlobalProxy *this, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::JSGlobalProxy *v9;
  unint64_t v10;
  JSC::JSGlobalObject *v11;
  JSC::VM *v12;

  v9 = this;
  *((_QWORD *)this + 2) = a3;
  if (this && a3 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
  {
    v12 = a2;
    v11 = a3;
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    a3 = v11;
    a2 = v12;
    v9 = this;
  }
  v10 = *(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x30);
  if (!v10)
    v10 = *((_QWORD *)a3 + 2);
  JSC::JSObject::setPrototypeDirect((unint64_t)v9, a2, v10, a4, a5, a6, a7, a8, a9);
}

void JSC::JSImmutableButterfly::visitChildren(JSC::JSImmutableButterfly *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  int v17;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  if ((*((_BYTE *)this + 4) & 0xE) == 8)
  {
    v12 = *((unsigned int *)this + 2);
    if ((_DWORD)v12)
    {
      v13 = (unint64_t *)((char *)this + 16);
      do
      {
        v15 = *v13++;
        v14 = v15;
        if ((v15 & 0xFFFE000000000002) != 0 || v14 == 0)
          goto LABEL_18;
        if ((v14 & 8) != 0)
        {
          if ((*(_BYTE *)(v14 - 79) & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          v17 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000), v17, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (((*(_QWORD *)((v14 & 0xFFFFFFFFFFFFC000) + 8 * ((v14 >> 10) & 0xF) + 0x28) >> (v14 >> 4)) & 1) != 0)
            goto LABEL_18;
        }
        JSC::SlotVisitor::appendHiddenSlow(a2, v14, 0, a4, a5, a6, a7, a8);
LABEL_18:
        --v12;
      }
      while (v12);
    }
  }
}

uint64_t JSC::JSImmutableButterfly::visitChildren(JSC::JSImmutableButterfly *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  _QWORD *v14;
  char v15;

  v10[0] = a2;
  v10[1] = this;
  v12 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v11 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v13[0] = a2;
    v13[1] = this;
    v15 = 0;
    v14 = v10;
    *((_QWORD *)a2 + 11) = v13;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
    *(_QWORD *)(v13[0] + 88) = v14;
    if ((*((_BYTE *)this + 4) & 0xE) == 8)
    {
      v7 = *((unsigned int *)this + 2);
      if ((_DWORD)v7)
      {
        v8 = (uint64_t *)((char *)this + 16);
        do
        {
          v9 = *v8++;
          if ((v9 & 0xFFFE000000000002) == 0)
            result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
          --v7;
        }
        while (v7);
      }
    }
    *(_QWORD *)(v10[0] + 88) = v11;
  }
  return result;
}

unint64_t JSC::JSImmutableButterfly::createFromClonedArguments(JSC::JSImmutableButterfly *this, JSC::JSGlobalObject *a2, JSC::ClonedArguments *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  JSC::JSObject *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v28;
  uint64_t Slow;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t DirectIndex;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  JSC::VM *v50;
  JSC::JSObject *v51;

  v11 = *((_QWORD *)this + 7);
  v50 = (JSC::VM *)v11;
  if ((*(_BYTE *)((16 * *(unsigned int *)a2) | 0x12) & 0x20) == 0)
  {
    v12 = *(JSC::JSObject **)(*((_QWORD *)a2 + 1) - 16);
    v51 = v12;
    if ((unint64_t)v12 >= 0xFFFE000000000000)
    {
      v13 = v12 & ~((int)v12 >> 31);
      goto LABEL_4;
    }
    goto LABEL_45;
  }
  v51 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)a2, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768), a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v11 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v30, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
LABEL_45:
    v13 = JSC::JSValue::toLength(&v51, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_4;
  }
  v13 = 0;
LABEL_4:
  if ((*((_BYTE *)a2 + 4) & 0xE) != 0)
    v14 = *(_DWORD *)(*((_QWORD *)a2 + 1) - 4);
  else
    v14 = 0;
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (v13 > 0x10000000)
    goto LABEL_42;
  v15 = *(_QWORD *)(v11 + 41656);
  v16 = 8 * v13 + 31;
  v17 = v16 & 0xFFFFFFFF0;
  if ((v16 & 0xFFFFFFFF0) > 0x1F60 || (v18 = *(_QWORD *)(v11 + ((v16 >> 1) & 0x7FFFFFFF8) + 10880)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v11 + 10792, (JSC *)v11, v17, 0, a5, a6, a7, a8);
LABEL_39:
    v20 = Slow;
LABEL_12:
    if (v20)
      goto LABEL_13;
LABEL_42:
    JSC::throwOutOfMemoryError(this, &v50);
    return 0;
  }
  v19 = *(unsigned int *)(v18 + 60);
  v20 = *(_QWORD *)(v18 + 24);
  if (v20 < *(_QWORD *)(v18 + 32))
  {
    *(_QWORD *)(v18 + 24) = v20 + v19;
    goto LABEL_12;
  }
  v20 = *(_QWORD *)(v18 + 40);
  if ((v20 & 1) != 0)
  {
    v46 = v18;
    v47 = *(_QWORD *)(v11 + 41656);
    v48 = *(unsigned int *)(v18 + 60);
    JSC::sanitizeStackForVM((JSC *)v11, a2, v17, a4, a5, a6, a7, a8);
    v49 = v48;
    v15 = v47;
    Slow = JSC::LocalAllocator::allocateSlowCase(v46, v11 + 192, v49, 0, 1);
    goto LABEL_39;
  }
  v31 = *(_QWORD *)(v20 + 8) ^ *(_QWORD *)(v18 + 48);
  *(_QWORD *)(v18 + 32) = v20 + HIDWORD(v31);
  *(_QWORD *)(v18 + 40) = v20 + (int)v31;
  *(_QWORD *)(v18 + 24) = v20 + v19;
LABEL_13:
  *(_DWORD *)v20 = 0;
  v21 = *(_DWORD *)(v15 + 8);
  *(_DWORD *)v20 = v15 >> 4;
  *(_DWORD *)(v20 + 4) = v21;
  *(_DWORD *)(v20 + 8) = v13;
  *(_DWORD *)(v20 + 12) = v13;
  if (v13)
    v22 = (*(_BYTE *)(v20 + 4) & 0xE) == 8;
  else
    v22 = 0;
  if (v22)
    bzero((void *)(v20 + 16), 8 * v13);
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  if (v13)
  {
    if ((*((_BYTE *)a2 + 4) & 0xE) != 8)
    {
      v32 = 0;
      while (1)
      {
        DirectIndex = JSC::JSObject::getDirectIndex(a2, (uint64_t ***)this, v32);
        v40 = DirectIndex ? DirectIndex : 10;
        if (*((_DWORD *)v50 + 20))
        {
          v44 = v40;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v50, v34, v35, v40, v36, v37, v38, v39);
          v40 = v44;
          if (hasExceptionsAfterHandlingTraps)
            break;
        }
        JSC::JSImmutableButterfly::setIndex(v20, v11, v32, v40);
        v32 = (v32 + 1);
        if (v13 == (_DWORD)v32)
          return v20;
      }
      return 0;
    }
    if (v14 >= v13)
      v23 = v13;
    else
      v23 = v14;
    if (v23)
    {
      v24 = 0;
      v25 = 8 * v23;
      do
      {
        v26 = *(_QWORD *)(*((_QWORD *)a2 + 1) + v24);
        if (!v26)
          v26 = 10;
        if ((*(_BYTE *)(v20 + 4) & 0xE) == 6)
        {
          v28 = (double)(int)v26;
          if (v26 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v28 = v26 - 0x2000000000000;
          *(double *)(v20 + v24 + 16) = v28;
        }
        else
        {
          *(_QWORD *)(v20 + v24 + 16) = v26;
          if ((v26 & 0xFFFE000000000002) == 0
            && *(_DWORD *)(v11 + 760) >= *(unsigned __int8 *)(v20 + 7))
          {
            JSC::Heap::writeBarrierSlowPath(v11 + 192, v20);
          }
        }
        v24 += 8;
      }
      while (v25 != v24);
    }
    if (v14 < v13)
    {
      v41 = *(_BYTE *)(v20 + 4) & 0xE;
      v42 = v13 - (unint64_t)v14;
      v43 = 8 * v14 + 16;
      do
      {
        if (v41 == 6)
          *(_QWORD *)(v20 + v43) = 0xFFFE00000000000ALL;
        else
          *(_QWORD *)(v20 + v43) = 10;
        v43 += 8;
        --v42;
      }
      while (v42);
    }
  }
  return v20;
}

unint64_t JSC::JSImmutableButterfly::createFromDirectArguments(JSC::JSImmutableButterfly *this, JSC::JSGlobalObject *a2, JSC::DirectArguments *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  uint64_t SlowCase;
  unint64_t OutOfMemoryError;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::Exception *v30;
  unint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v9 = *((_QWORD *)this + 7);
  v10 = *((unsigned int *)a2 + 8);
  if (v10 > 0x10000000)
    goto LABEL_25;
  v12 = *(_QWORD *)(v9 + 41656);
  v13 = 8 * v10;
  v14 = 8 * v10 + 31;
  v15 = v14 & 0xFFFFFFFF0;
  if ((v14 & 0xFFFFFFFF0) <= 0x1F60 && (v16 = *(_QWORD *)(v9 + ((v14 >> 1) & 0x7FFFFFFF8) + 10880)) != 0)
  {
    v17 = *(unsigned int *)(v16 + 60);
    v18 = *(_QWORD *)(v16 + 24);
    if (v18 < *(_QWORD *)(v16 + 32))
    {
      *(_QWORD *)(v16 + 24) = v18 + v17;
      if (v18)
        goto LABEL_6;
LABEL_25:
      OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, a2);
      v30 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v30 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v25, v26, v27, v28, v29);
      }
      JSC::VM::throwException((JSC::VM *)v9, this, v30);
      return 0;
    }
    v18 = *(_QWORD *)(v16 + 40);
    if ((v18 & 1) == 0)
    {
      v32 = *(_QWORD *)(v18 + 8) ^ *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v16 + 32) = v18 + HIDWORD(v32);
      *(_QWORD *)(v16 + 40) = v18 + (int)v32;
      *(_QWORD *)(v16 + 24) = v18 + v17;
      goto LABEL_6;
    }
    v33 = *((_DWORD *)a2 + 8);
    v10 = v16;
    v34 = *(_QWORD *)(v9 + 41656);
    v35 = *(unsigned int *)(v16 + 60);
    JSC::sanitizeStackForVM(*((JSC **)this + 7), a2, v15, a4, a5, a6, a7, a8);
    v36 = v10;
    LODWORD(v10) = v33;
    v37 = v35;
    v12 = v34;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v36, v9 + 192, v37, 0, 1);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v9 + 10792, (JSC *)v9, v15, 0, a5, a6, a7, a8);
  }
  v18 = SlowCase;
  if (!SlowCase)
    goto LABEL_25;
LABEL_6:
  *(_DWORD *)v18 = 0;
  v19 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)v18 = v12 >> 4;
  *(_DWORD *)(v18 + 4) = v19;
  *(_DWORD *)(v18 + 8) = v10;
  *(_DWORD *)(v18 + 12) = v10;
  if ((_DWORD)v10 && (*(_BYTE *)(v18 + 4) & 0xE) == 8)
    bzero((void *)(v18 + 16), v13);
  if (*(_BYTE *)(v9 + 755))
  {
    __dmb(0xAu);
    if (!(_DWORD)v10)
      return v18;
  }
  else if (!(_DWORD)v10)
  {
    return v18;
  }
  v20 = 0;
  do
  {
    v21 = *(_QWORD *)((char *)a2 + v20 + 48);
    if (!v21)
      v21 = 10;
    if ((*(_BYTE *)(v18 + 4) & 0xE) == 6)
    {
      v22 = (double)(int)v21;
      if (v21 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v22 = v21 - 0x2000000000000;
      *(double *)(v18 + v20 + 16) = v22;
    }
    else
    {
      *(_QWORD *)(v18 + v20 + 16) = v21;
      if ((v21 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v18 + 7))
        JSC::Heap::writeBarrierSlowPath(v9 + 192, v18);
    }
    v20 += 8;
  }
  while (v13 != v20);
  return v18;
}

unint64_t JSC::JSImmutableButterfly::createFromScopedArguments(JSC::JSImmutableButterfly *this, JSC::JSGlobalObject *a2, JSC::ScopedArguments *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t IndexQuickly;
  unint64_t v23;
  double v24;
  uint64_t SlowCase;
  unint64_t OutOfMemoryError;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::Exception *v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = *((_QWORD *)this + 7);
  v10 = *((unsigned int *)a2 + 7);
  if (v10 > 0x10000000)
    goto LABEL_26;
  v12 = *(_QWORD *)(v9 + 41656);
  v13 = 8 * v10;
  v14 = 8 * v10 + 31;
  v15 = v14 & 0xFFFFFFFF0;
  if ((v14 & 0xFFFFFFFF0) <= 0x1F60 && (v16 = *(_QWORD *)(v9 + ((v14 >> 1) & 0x7FFFFFFF8) + 10880)) != 0)
  {
    v17 = *(unsigned int *)(v16 + 60);
    v18 = *(_QWORD *)(v16 + 24);
    if (v18 < *(_QWORD *)(v16 + 32))
    {
      *(_QWORD *)(v16 + 24) = v18 + v17;
      if (v18)
        goto LABEL_6;
LABEL_26:
      OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, a2);
      v32 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v32 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v27, v28, v29, v30, v31);
      }
      JSC::VM::throwException((JSC::VM *)v9, this, v32);
      return 0;
    }
    v18 = *(_QWORD *)(v16 + 40);
    if ((v18 & 1) == 0)
    {
      v34 = *(_QWORD *)(v18 + 8) ^ *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v16 + 32) = v18 + HIDWORD(v34);
      *(_QWORD *)(v16 + 40) = v18 + (int)v34;
      *(_QWORD *)(v16 + 24) = v18 + v17;
      goto LABEL_6;
    }
    v35 = *((unsigned int *)a2 + 7);
    v36 = v16;
    v37 = *(_QWORD *)(v9 + 41656);
    v38 = *(unsigned int *)(v16 + 60);
    JSC::sanitizeStackForVM(*((JSC **)this + 7), a2, v15, a4, a5, a6, a7, a8);
    v39 = v36;
    v10 = v35;
    v40 = v38;
    v12 = v37;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v39, v9 + 192, v40, 0, 1);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v9 + 10792, (JSC *)v9, v15, 0, a5, a6, a7, a8);
  }
  v18 = SlowCase;
  if (!SlowCase)
    goto LABEL_26;
LABEL_6:
  *(_DWORD *)v18 = 0;
  v19 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)v18 = v12 >> 4;
  *(_DWORD *)(v18 + 4) = v19;
  *(_DWORD *)(v18 + 8) = v10;
  *(_DWORD *)(v18 + 12) = v10;
  if ((_DWORD)v10 && (*(_BYTE *)(v18 + 4) & 0xE) == 8)
    bzero((void *)(v18 + 16), v13);
  if (*(_BYTE *)(v9 + 755))
  {
    __dmb(0xAu);
    if (!(_DWORD)v10)
      return v18;
  }
  else if (!(_DWORD)v10)
  {
    return v18;
  }
  v20 = 0;
  v21 = 16;
  do
  {
    IndexQuickly = JSC::ScopedArguments::getIndexQuickly(a2, v20);
    if (IndexQuickly)
      v23 = IndexQuickly;
    else
      v23 = 10;
    if ((*(_BYTE *)(v18 + 4) & 0xE) == 6)
    {
      v24 = (double)(int)v23;
      if (v23 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v24 = v23 - 0x2000000000000;
      *(double *)(v18 + v21) = v24;
    }
    else
    {
      *(_QWORD *)(v18 + v21) = v23;
      if ((v23 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v18 + 7))
        JSC::Heap::writeBarrierSlowPath(v9 + 192, v18);
    }
    ++v20;
    v21 += 8;
  }
  while (v10 != v20);
  return v18;
}

unint64_t JSC::JSImmutableButterfly::createFromString(JSC::JSImmutableButterfly *this, JSC::JSGlobalObject *a2, JSC::JSString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  size_t v9;
  unint64_t v10;
  uint64_t v12;
  int *v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  double v32;
  uint64_t Slow;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD v49[4];
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD v53[2];
  uint64_t v54;

  v12 = *((_QWORD *)this + 7);
  v54 = v12;
  v13 = (int *)*((_QWORD *)a2 + 1);
  if ((v13 & 1) == 0)
  {
    if (v13)
      goto LABEL_3;
LABEL_36:
    v14 = 0;
    v15 = 0x100000000;
    goto LABEL_4;
  }
  if ((v13 & 2) != 0)
  {
    v16 = *(_QWORD *)((_BYTE *)a2 + 20) & 0xFFFFFFFFFLL;
    v25 = *(_QWORD *)(v16 + 8);
    if (!v25
      || (v26 = *(unsigned int *)(v25 + 4),
          v27 = *((_QWORD *)a2 + 3),
          v28 = v27 >> 16,
          v26 <= (v27 >> 16)))
    {
      v14 = "";
      v15 = 0x100000000;
      goto LABEL_4;
    }
    v29 = *(unsigned int *)(v25 + 16);
    v14 = *(const char **)(v25 + 8);
    v30 = *((_DWORD *)a2 + 4);
    if ((int)v26 - (int)v28 <= v30)
    {
      v30 = v26 - v28;
      if (!(_DWORD)v28)
      {
        v15 = v26 & 0xFFFFFFFEFFFFFFFFLL | (((v29 >> 2) & 1) << 32);
        goto LABEL_4;
      }
    }
    v31 = (v27 >> 16);
    v15 = v30;
    v17 = v26 - v28;
    if (((v29 >> 2) & 1) != 0)
    {
      if (v17 >= v30)
      {
        v14 += v31;
        v15 = v30 | 0x100000000;
        goto LABEL_4;
      }
    }
    else if (v17 >= v30)
    {
      v14 += 2 * v31;
      goto LABEL_4;
    }
    __break(1u);
    goto LABEL_59;
  }
  v13 = *JSC::JSRopeString::resolveRope((unint64_t)a2, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (!v13)
    goto LABEL_36;
LABEL_3:
  v14 = (const char *)*((_QWORD *)v13 + 1);
  v15 = v13[1] | ((unint64_t)((v13[4] >> 2) & 1) << 32);
LABEL_4:
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if ((v15 & 0x100000000) != 0)
  {
    if (v15 > 0x10000000)
      goto LABEL_56;
    v10 = *(_QWORD *)(v12 + 41656);
    v9 = 8 * v15;
    a3 = (JSC::JSString *)((v9 + 31) & 0xFFFFFFFF0);
    if ((unint64_t)a3 > 0x1F60 || (v16 = *(_QWORD *)(v12 + (((v9 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) == 0)
    {
      Slow = JSC::CompleteSubspace::tryAllocateSlow(v12 + 10792, (JSC *)v12, (unint64_t)a3, 0, a5, a6, a7, a8);
LABEL_44:
      v18 = Slow;
LABEL_11:
      if (v18)
        goto LABEL_12;
LABEL_56:
      JSC::throwOutOfMemoryError(this, &v54);
      return 0;
    }
    v17 = *(unsigned int *)(v16 + 60);
    v18 = *(_QWORD *)(v16 + 24);
    if (v18 < *(_QWORD *)(v16 + 32))
    {
      *(_QWORD *)(v16 + 24) = v18 + v17;
      goto LABEL_11;
    }
    v18 = *(_QWORD *)(v16 + 40);
    if ((v18 & 1) == 0)
    {
      v34 = *(_QWORD *)(v18 + 8) ^ *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v16 + 32) = v18 + HIDWORD(v34);
      *(_QWORD *)(v16 + 40) = v18 + (int)v34;
      *(_QWORD *)(v16 + 24) = v18 + v17;
LABEL_12:
      *(_DWORD *)v18 = 0;
      v19 = *(_DWORD *)(v10 + 8);
      *(_DWORD *)v18 = v10 >> 4;
      *(_DWORD *)(v18 + 4) = v19;
      *(_DWORD *)(v18 + 8) = v15;
      *(_DWORD *)(v18 + 12) = v15;
      if ((_DWORD)v15 && (*(_BYTE *)(v18 + 4) & 0xE) == 8)
        bzero((void *)(v18 + 16), v9);
      if (*(_BYTE *)(v12 + 755))
        __dmb(0xAu);
      if ((_DWORD)v15)
      {
        v20 = 0;
        do
        {
          v21 = *(unsigned __int8 *)v14++;
          v22 = *(_QWORD *)(v12 + 8 * v21 + 42216);
          if ((*(_BYTE *)(v18 + 4) & 0xE) == 6)
          {
            v32 = (double)(int)v22;
            if (v22 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v32 = v22 - 0x2000000000000;
            *(double *)(v18 + v20 + 16) = v32;
          }
          else
          {
            *(_QWORD *)(v18 + v20 + 16) = v22;
            if (v22)
              v23 = (v22 & 0xFFFE000000000002) == 0;
            else
              v23 = 0;
            if (v23 && *(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v18 + 7))
              JSC::Heap::writeBarrierSlowPath(v12 + 192, v18);
          }
          v20 += 8;
        }
        while (8 * v15 != v20);
      }
      return v18;
    }
LABEL_59:
    v45 = v16;
    v46 = v10;
    v47 = v17;
    JSC::sanitizeStackForVM((JSC *)v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v48 = v47;
    v10 = v46;
    Slow = JSC::LocalAllocator::allocateSlowCase(v45, v12 + 192, v48, 0, 1);
    goto LABEL_44;
  }
  v53[0] = v14;
  v53[1] = v15;
  v52 = 0;
  JSC::JSImmutableButterfly::createFromString(JSC::JSGlobalObject *,JSC::JSString *)::$_0::operator()<JSC::JSImmutableButterfly::createFromString(JSC::JSGlobalObject *,JSC::JSString *)::$_1>((uint64_t)v14, v15, &v52);
  v41 = v52;
  if (v52 > 0x10000000)
    goto LABEL_56;
  v42 = *(_QWORD *)(v12 + 41656);
  v43 = JSC::tryAllocateCell<JSC::JSImmutableButterfly>((JSC *)v12, (JSC::VM *)(8 * v52 + 16), v35, v36, v37, v38, v39, v40);
  if (!v43)
    goto LABEL_56;
  v44 = JSC::JSImmutableButterfly::JSImmutableButterfly(v43, v12, v42, v41);
  if (*(_BYTE *)(v12 + 755))
    __dmb(0xAu);
  v50 = 0;
  v51 = v44;
  v49[0] = v12;
  v49[1] = v53;
  v49[2] = &v51;
  v49[3] = &v50;
  JSC::JSImmutableButterfly::createFromString(JSC::JSGlobalObject *,JSC::JSString *)::$_0::operator()<JSC::JSImmutableButterfly::createFromString(JSC::JSGlobalObject *,JSC::JSString *)::$_2>((uint64_t)v14, v15, (uint64_t)v49);
  return v51;
}

uint64_t JSC::JSImmutableButterfly::createFromString(JSC::JSGlobalObject *,JSC::JSString *)::$_0::operator()<JSC::JSImmutableButterfly::createFromString(JSC::JSGlobalObject *,JSC::JSString *)::$_1>(uint64_t result, unint64_t a2, _DWORD *a3)
{
  unint64_t i;
  unint64_t v4;
  int v6;

  if (a2)
  {
    for (i = 0; i < a2; ++i)
    {
      v4 = i + 1;
      if ((*(_WORD *)(result + 2 * i) & 0xFC00) != 0xD800 || v4 == a2)
      {
        ++*a3;
      }
      else
      {
        if (a2 <= v4)
        {
          __break(1u);
          return result;
        }
        v6 = *(_WORD *)(result + 2 * v4) & 0xFC00;
        ++*a3;
        if (v6 == 56320)
          ++i;
      }
    }
  }
  return result;
}

void JSC::JSImmutableButterfly::createFromString(JSC::JSGlobalObject *,JSC::JSString *)::$_0::operator()<JSC::JSImmutableButterfly::createFromString(JSC::JSGlobalObject *,JSC::JSString *)::$_2>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t i;
  unint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;

  if (a2)
  {
    for (i = 0; i < a2; ++i)
    {
      v7 = i + 1;
      if ((*(_WORD *)(a1 + 2 * i) & 0xFC00) != 0xD800 || v7 == a2)
        goto LABEL_8;
      if (a2 <= v7)
        goto LABEL_37;
      if ((*(_WORD *)(a1 + 2 * v7) & 0xFC00) != 0xDC00)
      {
LABEL_8:
        v9 = *(_QWORD **)(a3 + 8);
        if (v9[1] <= i)
          goto LABEL_37;
        v10 = *(_QWORD *)a3;
        v11 = *(unsigned __int16 *)(*v9 + 2 * i);
        if (v11 > 0xFF)
        {
          v39 = WTF::fastCompactMalloc((WTF *)0x16);
          *(_QWORD *)v39 = 0x100000002;
          *(_WORD *)(v39 + 20) = v11;
          *(_QWORD *)(v39 + 8) = v39 + 20;
          *(_DWORD *)(v39 + 16) = 0;
          v71 = (WTF::StringImpl *)v39;
          v12 = JSC::JSString::create(v10, (JSC::VM *)&v71, v40, v41, v42, v43, v44, v45);
          v53 = v71;
          v71 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
            {
              WTF::StringImpl::~StringImpl(v53, v46, v47, v48, v49, v50, v51, v52);
              WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
            }
            else
            {
              *(_DWORD *)v53 -= 2;
            }
          }
        }
        else
        {
          v12 = *(_QWORD *)(v10 + 8 * v11 + 42216);
        }
      }
      else
      {
        v18 = *(uint64_t **)(a3 + 8);
        v19 = v18[1];
        if (v19 <= i || v19 <= v7)
        {
LABEL_37:
          __break(1u);
          return;
        }
        v20 = *v18;
        v21 = *(unsigned __int16 *)(v20 + 2 * i);
        v22 = *(_QWORD *)a3;
        v23 = *(unsigned __int16 *)(v20 + 2 * v7);
        v24 = WTF::fastCompactMalloc((WTF *)0x18);
        *(_QWORD *)v24 = 0x200000002;
        *(_DWORD *)(v24 + 20) = v21 | (v23 << 16);
        *(_QWORD *)(v24 + 8) = v24 + 20;
        *(_DWORD *)(v24 + 16) = 0;
        v71 = (WTF::StringImpl *)v24;
        v12 = JSC::jsNontrivialString(v22, (JSC::VM *)&v71, v25, v26, v27, v28, v29, v30);
        v38 = v71;
        v71 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
            WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
        }
        i = v7;
      }
      v13 = *(_QWORD **)(a3 + 24);
      v14 = **(_QWORD **)(a3 + 16);
      v15 = *(_QWORD *)a3;
      v16 = (*v13)++;
      if ((*(_BYTE *)(v14 + 4) & 0xE) == 6)
      {
        v62 = (double)(int)v12;
        if (v12 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v62 = v12 - 0x2000000000000;
        *(double *)(v14 + 8 * v16 + 16) = v62;
      }
      else
      {
        *(_QWORD *)(v14 + 8 * v16 + 16) = v12;
        if (v12)
          v17 = (v12 & 0xFFFE000000000002) == 0;
        else
          v17 = 0;
        if (v17 && *(_DWORD *)(v15 + 760) >= *(unsigned __int8 *)(v14 + 7))
          JSC::Heap::writeBarrierSlowPath(v15 + 192, v14);
      }
    }
  }
}

unint64_t JSC::JSImmutableButterfly::tryCreateFromArgList(uint64_t a1, JSC::VM *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t Slow;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a3 > 0x10000000)
    return 0;
  v9 = a2;
  v11 = *(_QWORD *)(a1 + 41656);
  v12 = a3;
  v13 = 8 * a3;
  v14 = (v13 + 31) & 0xFFFFFFFF0;
  if (v14 > 0x1F60 || (v15 = *(_QWORD *)(a1 + (((unint64_t)(v13 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(a1 + 10792, (JSC *)a1, v14, 0, a5, a6, a7, a8);
LABEL_22:
    v17 = Slow;
LABEL_6:
    if (!v17)
      return v17;
    goto LABEL_7;
  }
  v16 = *(unsigned int *)(v15 + 60);
  v17 = *(_QWORD *)(v15 + 24);
  if (v17 < *(_QWORD *)(v15 + 32))
  {
    *(_QWORD *)(v15 + 24) = v17 + v16;
    goto LABEL_6;
  }
  v17 = *(_QWORD *)(v15 + 40);
  if ((v17 & 1) != 0)
  {
    v29 = *(_QWORD *)(a1 + (((unint64_t)(v13 + 31) >> 1) & 0x7FFFFFFF8) + 10880);
    v30 = *(_QWORD *)(a1 + 41656);
    v31 = *(unsigned int *)(v15 + 60);
    JSC::sanitizeStackForVM((JSC *)a1, a2, v14, a4, a5, a6, a7, a8);
    v32 = v31;
    v11 = v30;
    Slow = JSC::LocalAllocator::allocateSlowCase(v29, a1 + 192, v32, 0, 1, v33, v34, v35);
    goto LABEL_22;
  }
  v28 = *(_QWORD *)(v17 + 8) ^ *(_QWORD *)(v15 + 48);
  *(_QWORD *)(v15 + 32) = v17 + HIDWORD(v28);
  *(_QWORD *)(v15 + 40) = v17 + (int)v28;
  *(_QWORD *)(v15 + 24) = v17 + v16;
LABEL_7:
  *(_DWORD *)v17 = 0;
  v18 = *(_DWORD *)(v11 + 8);
  *(_DWORD *)v17 = v11 >> 4;
  *(_DWORD *)(v17 + 4) = v18;
  *(_DWORD *)(v17 + 8) = a3;
  *(_DWORD *)(v17 + 12) = a3;
  if (a3 && (*(_BYTE *)(v17 + 4) & 0xE) == 8)
    bzero((void *)(v17 + 16), 8 * a3);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v19 = v17 + 16;
  if (v12 <= 0x1E)
  {
    for (; v12; --v12)
    {
      v27 = *(_QWORD *)v9;
      v9 = (JSC::VM *)((char *)v9 + 8);
      *(_QWORD *)v19 = v27;
      v19 += 8;
    }
  }
  else
  {
    v20 = v13 + v19;
    v21 = (v13 & 0x7FFFFFFE0) + v19;
    while (v19 != v21)
    {
      v22 = *(_OWORD *)v9;
      v23 = *((_OWORD *)v9 + 1);
      v9 = (JSC::VM *)((char *)v9 + 32);
      *(_OWORD *)v19 = v22;
      *(_OWORD *)(v19 + 16) = v23;
      v19 += 32;
    }
    while (v19 != v20)
    {
      v24 = *(_QWORD *)v9;
      v9 = (JSC::VM *)((char *)v9 + 8);
      *(_QWORD *)v19 = v24;
      v19 += 8;
    }
  }
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v17 + 7))
    JSC::Heap::writeBarrierSlowPath(a1 + 192, v17);
  return v17;
}

unint64_t JSC::JSInternalPromise::create(JSC::JSInternalPromise *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  unint64_t v11;
  char *v12;
  char *v13;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::JSInternalPromise *v19;

  v8 = *((_QWORD *)this + 4874);
  if (v8 < *((_QWORD *)this + 4875))
    goto LABEL_2;
  v8 = *((_QWORD *)this + 4876);
  if ((v8 & 1) == 0)
  {
    v11 = *(_QWORD *)(v8 + 8) ^ *((_QWORD *)this + 4877);
    *((_QWORD *)this + 4875) = v8 + HIDWORD(v11);
    *((_QWORD *)this + 4876) = v8 + (int)v11;
LABEL_2:
    *((_QWORD *)this + 4874) = v8 + 32;
    goto LABEL_3;
  }
  v12 = (char *)this + 38968;
  v13 = (char *)this + 192;
  v19 = this;
  v14 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v12, (uint64_t)v13, 32, 0, 0, v15, v16, v17);
  a2 = v14;
  v8 = SlowCase;
  this = v19;
LABEL_3:
  *(_DWORD *)v8 = 0;
  v9 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v8 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_OWORD *)(v8 + 16) = xmmword_19914EFB0;
  return v8;
}

unint64_t JSC::JSInternalPromise::createWithInitialValues(JSC::JSInternalPromise *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v9;
  unint64_t v11;
  char *v12;
  char *v13;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t SlowCase;
  JSC::JSInternalPromise *v19;

  v8 = *((_QWORD *)this + 4874);
  if (v8 < *((_QWORD *)this + 4875))
    goto LABEL_2;
  v8 = *((_QWORD *)this + 4876);
  if ((v8 & 1) == 0)
  {
    v11 = *(_QWORD *)(v8 + 8) ^ *((_QWORD *)this + 4877);
    *((_QWORD *)this + 4875) = v8 + HIDWORD(v11);
    *((_QWORD *)this + 4876) = v8 + (int)v11;
LABEL_2:
    *((_QWORD *)this + 4874) = v8 + 32;
    goto LABEL_3;
  }
  v12 = (char *)this + 38968;
  v13 = (char *)this + 192;
  v19 = this;
  v14 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v12, (uint64_t)v13, 32, 0, 0, v15, v16, v17);
  a2 = v14;
  v8 = SlowCase;
  this = v19;
LABEL_3:
  *(_DWORD *)v8 = 0;
  v9 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v8 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v8 + 4) = v9;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_OWORD *)(v8 + 16) = xmmword_19914EFB0;
  return v8;
}

uint64_t JSC::JSInternalPromise::then(JSC::JSInternalPromise *this, JSC::JSGlobalObject *a2, uint64_t a3, JSC::JSFunction *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  char v43;
  _DWORD v44[2];
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v8 = (uint64_t)a4;
  v12 = *((_QWORD *)a2 + 7);
  v13 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v12 + 41952) + 48) + 1576);
  if (v13)
  {
    *(_DWORD *)v13 += 2;
    v21 = JSC::JSObject::get((unsigned int *)this, (uint64_t)a2, (unint64_t)v13, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  else
  {
    v21 = JSC::JSObject::get((unsigned int *)this, (uint64_t)a2, 0, (uint64_t)a4, a5, a6, a7, a8);
  }
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v14, v15, v16, v17, v18, v19, v20))
  {
    return 0;
  }
  if (*(_BYTE *)(v21 + 5) == 26)
  {
    v22 = *(_QWORD *)(v21 + 24);
    if ((v22 & 1) != 0)
      v22 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v22 + 5) == 8)
    {
      LOBYTE(v51) = 1;
      v52 = *(_QWORD *)(v22 + 40);
      LOBYTE(v53) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v51) = 2;
      v23 = *(_QWORD *)(v21 + 16);
      v52 = v22;
      v53 = v23;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE)
                                                                             + 0x4C)
                                                           + 0x38))(&v51, v21);
  }
  v43 = 0;
  v44[1] = 8;
  v45 = (char *)&v46 + 8;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0;
  if (!a3)
    a3 = 10;
  *((_QWORD *)&v46 + 1) = a3;
  if (!v8)
    v8 = 10;
  *(_QWORD *)&v47 = v8;
  v44[0] = 2;
  v41 = (char *)&v46 + 8;
  v42 = 2;
  v31 = JSC::call((uint64_t *)a2, v21, (unsigned __int8 *)&v51, (uint64_t)this, (uint64_t)&v41, v18, v19, v20);
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v24, v25, v26, v27, v28, v29, v30))
  {
    v31 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v44, v24, v25, v26, v27, v28, v29, v30);
  return v31;
}

unint64_t JSC::JSInternalPromise::rejectWithCaughtException(unint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v9 = *a3;
  v10 = *(_QWORD *)(*a3 + 16);
  if (*(_QWORD *)(a2[7] + 24) != v10)
  {
    *(_QWORD *)(v9 + 16) = 0;
    v11 = (unsigned int *)(v9 + 80);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 & 0xFFFFFFEF, v11));
    JSC::JSPromise::reject(a1, a2, *(_QWORD *)(v10 + 8), a4, a5, a6, a7, a8);
  }
  return a1;
}

BOOL JSC::JSLexicalEnvironment::put(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v19;
  char v20;

  if ((*(_BYTE *)(a5 + 20) & 1) != 0)
    v14 = 1;
  else
    v14 = *(unsigned __int8 *)(a1 + 5) - 53 <= 1 && (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 21) & 0x1C) == 8;
  v20 = 0;
  if (JSC::symbolTablePut<(JSC::SymbolTablePutMode)1,JSC::JSLexicalEnvironment>(a1, a2, a3, a4, v14, 0, &v20, a9, a6))return v20 != 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a1, *(_QWORD *)(a2 + 56), a3, a4, 0, a5, v15, v16, v17);
  return v19 == 0;
}

uint64_t JSC::JSLexicalEnvironment::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;

  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41952) + 880) == a3)
    return 0;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = (unsigned __int8 *)(v12 + 20);
  if (__ldaxr((unsigned __int8 *)(v12 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_6;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12 + 20);
LABEL_6:
  v15 = *(_QWORD *)(v12 + 8);
  if (v15)
  {
    v19 = *(_DWORD *)(v15 - 8);
    v20 = *(_DWORD *)(a3 + 16);
    if ((v20 & 0x20) != 0)
      v20 = *(_DWORD *)(a3 + 32);
    v21 = v19 & (v20 >> 8);
    v22 = *(_QWORD *)(v15 + 16 * v21);
    if (v22 == a3)
    {
      v16 = 1;
    }
    else
    {
      v23 = 1;
      do
      {
        v16 = v22 != 0;
        if (!v22)
          break;
        v21 = (v21 + v23) & v19;
        v22 = *(_QWORD *)(v15 + 16 * v21);
        ++v23;
      }
      while (v22 != a3);
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = __ldxr(v13);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, v13))
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!v16)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t JSC::JSLexicalEnvironment::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  char v30;
  int v31;
  uint64_t result;
  JSC::VM *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;

  v12 = *(_QWORD *)(a1 + 24);
  v13 = (unsigned __int8 *)(v12 + 20);
  if (__ldaxr((unsigned __int8 *)(v12 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v13))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12 + 20);
LABEL_4:
  v15 = *(_QWORD *)(v12 + 8);
  if (!v15)
    goto LABEL_32;
  v16 = *(_DWORD *)(v15 - 8);
  v17 = *(_DWORD *)(a3 + 16);
  if ((v17 & 0x20) != 0)
    v17 = *(_DWORD *)(a3 + 32);
  v18 = v16 & (v17 >> 8);
  v19 = *(_QWORD *)(v15 + 16 * v18);
  if (v19 != a3)
  {
    v20 = 1;
    while (v19)
    {
      v18 = ((_DWORD)v18 + v20) & v16;
      v19 = *(_QWORD *)(v15 + 16 * v18);
      ++v20;
      if (v19 == a3)
        goto LABEL_15;
    }
    v18 = *(unsigned int *)(v15 - 4);
  }
LABEL_15:
  if (v18 == *(_DWORD *)(v15 - 4))
    goto LABEL_32;
  v21 = v15 + 16 * v18;
  v24 = *(unint64_t **)(v21 + 8);
  v22 = (unint64_t *)(v21 + 8);
  v23 = v24;
  if ((v24 & 1) == 0)
    v22 = v23;
  v25 = *v22;
  if ((v25 >> 6) == -1 || *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) + 1 <= (v25 >> 6))
  {
LABEL_32:
    v30 = 0;
  }
  else
  {
    v26 = v25 & 2;
    v27 = (v25 & 4) == 0;
    v28 = *(_QWORD *)(a1 + 8 * (v25 >> 6) + 32);
    if (v27)
      v29 = v26;
    else
      v29 = v26 | 4;
    *(_QWORD *)a4 = v28;
    *(_DWORD *)(a4 + 16) = v29 | 8;
    *(_QWORD *)(a4 + 32) = a1;
    v30 = 1;
    *(_BYTE *)(a4 + 49) = 1;
  }
  v31 = __ldxr(v13);
  if (v31 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, v13))
LABEL_28:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, a3, a4, a5, a6, a7, a8);
  if ((v30 & 1) != 0)
    return 1;
  v33 = *(JSC::VM **)(a2 + 56);
  v37 = 0;
  JSC::JSObject::getDirect((_DWORD *)a1, v33, a3, (const JSC::PropertyTable *)&v37, a5, a6, a7, a8);
  v35 = v34;
  result = v34 != 0;
  if (v35)
  {
    v36 = v37;
    if ((v37 & 0x10) != 0)
    {
      result = 103;
      __break(0xC471u);
    }
    else
    {
      *(_QWORD *)a4 = v35;
      *(_DWORD *)(a4 + 16) = v36;
      *(_QWORD *)(a4 + 32) = a1;
      *(_BYTE *)(a4 + 49) = 1;
    }
  }
  return result;
}

void JSC::JSLexicalEnvironment::getOwnSpecialPropertyNames(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned __int8 *v12;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t *v41;
  WTF::StringImpl **v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t *v86;
  unsigned __int8 *v87;
  uint64_t **v88;
  uint64_t v89;
  WTF::StringImpl *v90[2];
  char v91;
  uint64_t v92;
  WTF::StringImpl *v93;

  v8 = a4;
  v89 = *(_QWORD *)(a1 + 24);
  v12 = (unsigned __int8 *)(v89 + 20);
  if (__ldaxr((unsigned __int8 *)(v89 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v12);
LABEL_5:
  v14 = *(unint64_t **)(v89 + 8);
  v87 = (unsigned __int8 *)(v89 + 20);
  if (!v14)
  {
    v16 = 0;
    v86 = 0;
    v15 = 0;
    v17 = *((_QWORD *)a2 + 7);
LABEL_92:
    v19 = &v14[2 * v15];
    v14 = v86;
    goto LABEL_13;
  }
  v15 = *((unsigned int *)v14 - 1);
  v16 = &v14[2 * v15];
  v17 = *((_QWORD *)a2 + 7);
  if (!*((_DWORD *)v14 - 3))
  {
    v86 = &v14[2 * v15];
    goto LABEL_92;
  }
  if ((_DWORD)v15)
  {
    v18 = 16 * v15;
    while (*v14 + 1 <= 1)
    {
      v14 += 2;
      v18 -= 16;
      if (!v18)
      {
        v14 = v16;
        break;
      }
    }
  }
  v19 = v16;
LABEL_13:
  if (v16 != v14)
  {
    v88 = (uint64_t **)(v17 + 41912);
    v20 = (_QWORD *)(a3 + 8);
    while (1)
    {
      v21 = v14 + 1;
      v22 = v14[1];
      if (v8 == 1)
      {
        v23 = (v22 & 1) != 0 ? v14 + 1 : (unint64_t *)v14[1];
        if ((*(_BYTE *)v23 & 4) != 0)
          goto LABEL_55;
      }
      if ((v22 & 1) == 0)
        v21 = (_QWORD *)v14[1];
      v24 = *v21 >> 6;
      if ((_DWORD)v24 == -1
        || *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) + 1 <= v24
        || (*(_BYTE *)(a3 + 24) & 1) == 0 && (*(_BYTE *)(*v14 + 16) & 0x20) != 0)
      {
        goto LABEL_55;
      }
      if (*(_BYTE *)(a3 + 25) == 1)
      {
        v25 = *(_QWORD *)(v89 + 24);
        if (v25)
        {
          v78 = *(_QWORD *)(v25 + 32);
          if (v78)
          {
            v79 = *v14;
            v80 = *(_DWORD *)(*v14 + 16);
            if ((v80 & 0x20) != 0)
              v80 = *(_DWORD *)(v79 + 32);
            v81 = *(_DWORD *)(v78 - 8);
            v82 = v81 & (v80 >> 8);
            v83 = *(_QWORD *)(v78 + 16 * v82);
            if (v83 == v79)
              goto LABEL_55;
            v84 = 1;
            while (v83)
            {
              v82 = (v82 + v84) & v81;
              v83 = *(_QWORD *)(v78 + 16 * v82);
              ++v84;
              if (v83 == v79)
                goto LABEL_55;
            }
          }
        }
      }
      v26 = (WTF::StringImpl *)*v14;
      v27 = *(_DWORD *)(*v14 + 16);
      if ((v27 & 0x20) != 0)
        break;
      if ((v27 & 0x10) != 0)
      {
        *(_DWORD *)v26 += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(*v88, *v14, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v90);
        v26 = v90[0];
      }
      v28 = *(_DWORD *)v26;
      *(_DWORD *)v26 += 2;
      if (v28)
        goto LABEL_33;
      WTF::StringImpl::~StringImpl(v26, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
LABEL_34:
      v93 = v26;
      v29 = *((_DWORD *)v26 + 4);
      if ((v29 & 0x20) != 0)
      {
        if ((*(_BYTE *)(a3 + 24) & 1) != 0 && (!*(_BYTE *)(a3 + 25) || (*((_BYTE *)v26 + 36) & 4) == 0))
        {
LABEL_36:
          v30 = *(_QWORD *)a3;
          v31 = *(unsigned int *)(*(_QWORD *)a3 + 20);
          if (v31 <= 0x13)
          {
            if ((_DWORD)v31)
            {
              v42 = *(WTF::StringImpl ***)(v30 + 8);
              while (*v42 != v26)
              {
                ++v42;
                if (!--v31)
                  goto LABEL_66;
              }
              goto LABEL_53;
            }
LABEL_66:
            v35 = v26;
            if ((v29 & 0x20) == 0)
              goto LABEL_43;
          }
          else
          {
            if (!*v20 || !*(_DWORD *)(*v20 - 12))
            {
              v32 = *(uint64_t **)(v30 + 8);
              v33 = 8 * v31;
              do
              {
                v34 = *v32++;
                v92 = v34;
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v92, a4, a5, a6, a7, a8, (uint64_t)v90);
                v33 -= 8;
              }
              while (v33);
            }
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v93, a4, a5, a6, a7, a8, (uint64_t)v90);
            if (!v91)
              goto LABEL_53;
            v35 = v93;
            v30 = *(_QWORD *)a3;
            v29 = *((_DWORD *)v93 + 4);
            if ((v29 & 0x20) == 0)
            {
LABEL_43:
              if ((v29 & 0x10) != 0)
              {
                *(_DWORD *)v35 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v35, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v90);
                v35 = v90[0];
              }
              v36 = *(_DWORD *)v35;
              *(_DWORD *)v35 += 2;
              if (v36)
              {
LABEL_47:
                *(_DWORD *)v35 = v36;
              }
              else
              {
                WTF::StringImpl::~StringImpl(v35, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
              }
              v37 = (uint64_t *)(v30 + 8);
              v90[0] = v35;
              v38 = *(unsigned int *)(v30 + 20);
              if ((_DWORD)v38 == *(_DWORD *)(v30 + 16))
              {
                v75 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)v90);
                v38 = *(unsigned int *)(v30 + 20);
                v76 = *(_QWORD *)(v30 + 8);
                v77 = *v75;
                *v75 = 0;
                *(_QWORD *)(v76 + 8 * v38) = v77;
              }
              else
              {
                v39 = *v37;
                v90[0] = 0;
                *(_QWORD *)(v39 + 8 * v38) = v35;
              }
              *(_DWORD *)(v30 + 20) = v38 + 1;
              v40 = v90[0];
              v90[0] = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                {
                  WTF::StringImpl::~StringImpl(v40, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
                }
                else
                {
                  *(_DWORD *)v40 -= 2;
                }
              }
              goto LABEL_53;
            }
          }
          v36 = *(_DWORD *)v35 + 2;
          goto LABEL_47;
        }
      }
      else if ((*(_BYTE *)(a3 + 24) & 2) != 0)
      {
        goto LABEL_36;
      }
LABEL_53:
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
LABEL_55:
      v41 = v14 + 2;
      v14 = v19;
      if (v41 != v19)
      {
        v14 = v41;
        while (*v14 + 1 <= 1)
        {
          v14 += 2;
          if (v14 == v19)
          {
            v14 = v19;
            break;
          }
        }
      }
      if (v14 == v16)
        goto LABEL_86;
    }
    v28 = *(_DWORD *)v26 + 2;
LABEL_33:
    *(_DWORD *)v26 = v28;
    goto LABEL_34;
  }
LABEL_86:
  v85 = __ldxr(v87);
  if (v85 != 1)
  {
    __clrex();
    goto LABEL_90;
  }
  if (__stlxr(0, v87))
LABEL_90:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v87, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::JSLexicalEnvironment::analyzeHeap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;

  JSC::JSObject::analyzeHeap(a1, a2, a3, a4, a5, a6, a7, a8);
  v16 = (unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 20);
  if (__ldaxr(v16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v16);
LABEL_5:
  v18 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 8);
  if (!v18)
  {
    v20 = 0;
    v28 = 0;
    v19 = 0;
LABEL_36:
    v22 = &v18[2 * v19];
    v18 = v28;
    goto LABEL_13;
  }
  v19 = *((unsigned int *)v18 - 1);
  v20 = &v18[2 * v19];
  if (!*((_DWORD *)v18 - 3))
  {
    v28 = &v18[2 * v19];
    goto LABEL_36;
  }
  if ((_DWORD)v19)
  {
    v21 = 16 * v19;
    while ((unint64_t)(*v18 + 1) <= 1)
    {
      v18 += 2;
      v21 -= 16;
      if (!v21)
      {
        v18 = v20;
        break;
      }
    }
  }
  v22 = v20;
LABEL_13:
  while (v18 != v20)
  {
    v23 = v18 + 1;
    if ((v18[1] & 1) == 0)
      v23 = (unint64_t *)v18[1];
    v24 = *v23;
    if ((v24 >> 6) != -1 && *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) + 1 > (v24 >> 6))
    {
      v10 = *(_QWORD *)(a1 + 32 + 8 * (v24 >> 6));
      if (v10)
        v25 = (v10 & 0xFFFE000000000002) == 0;
      else
        v25 = 0;
      if (v25)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1);
    }
    v26 = v18 + 2;
    v18 = v22;
    if (v26 != v22)
    {
      v18 = v26;
      while ((unint64_t)(*v18 + 1) <= 1)
      {
        v18 += 2;
        if (v18 == v22)
        {
          v18 = v22;
          break;
        }
      }
    }
  }
  v27 = __ldxr(v16);
  if (v27 != 1)
  {
    __clrex();
    goto LABEL_34;
  }
  if (__stlxr(0, v16))
LABEL_34:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v10, v11, v12, v13, v14, v15);
}

void JSC::JSLexicalEnvironment::visitChildren(JSC::JSLexicalEnvironment *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unsigned int **v26;
  int v27;
  unsigned int **v28;
  unint64_t *v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  uint64_t v45;
  int v46;
  uint64_t v47;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_6:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
LABEL_7:
  v18 = *((_QWORD *)this + 3);
  if (!v18)
    goto LABEL_13;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    v19 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v19)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v19, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
    {
LABEL_12:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_13;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, v11, v12, v13, v14, v15);
LABEL_13:
  v20 = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
  v21 = (v20 + 1);
  if (v20 != -1)
  {
    v22 = 0;
    v23 = (char *)this + 32;
    do
    {
      v24 = *(_QWORD *)&v23[8 * v22];
      if ((v24 & 0xFFFE000000000002) == 0 && v24 != 0)
      {
        if ((v24 & 8) != 0)
        {
          if ((*(_BYTE *)(v24 - 79) & 1) == 0)
          {
            v38 = (unsigned __int8 *)(v24 - 79);
            do
            {
              if (__ldaxr(v38))
              {
                __clrex();
                goto LABEL_19;
              }
            }
            while (__stlxr(1u, v38));
            *(_BYTE *)(v24 + 7) = 2;
            ++*((_QWORD *)a2 + 9);
            v35 = *((_QWORD *)a2 + 17) + *(_QWORD *)(v24 - 88);
LABEL_35:
            *((_QWORD *)a2 + 17) = v35;
            v36 = *((_QWORD *)a2 + 3);
            if (v36 == 510)
            {
              v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x1000);
              v36 = 0;
              *v40 = 0;
              v40[1] = 0;
              ++*((_QWORD *)a2 + 4);
              v41 = *((_QWORD *)a2 + 1);
              if (v41)
                v42 = (_QWORD *)*((_QWORD *)a2 + 1);
              else
                v42 = (_QWORD *)((char *)a2 + 16);
              *v42 = v40;
              *((_QWORD *)a2 + 1) = v40;
              *v40 = 0;
              v40[1] = v41;
            }
            v37 = *((_QWORD *)a2 + 1) + 8 * v36;
            *((_QWORD *)a2 + 3) = v36 + 1;
            *(_QWORD *)(v37 + 16) = v24;
          }
        }
        else
        {
          v26 = (unsigned int **)(v24 & 0xFFFFFFFFFFFFC000);
          v27 = *((_DWORD *)a2 + 33);
          if (*(_DWORD *)(v24 & 0xFFFFFFFFFFFFC000 | 0x20) != v27)
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v24 & 0xFFFFFFFFFFFFC000), v27, v10, v11, v12, v13, v14, v15);
          v28 = &v26[(v24 >> 10) & 0xF];
          v30 = v28[5];
          v29 = (unint64_t *)(v28 + 5);
          v31 = 1 << (v24 >> 4);
          if (((unint64_t)v30 & v31) == 0)
          {
            do
            {
              while (1)
              {
                v32 = *v29;
                if ((*v29 & v31) != 0)
                  goto LABEL_19;
                v33 = __ldxr(v29);
                if (v33 == v32)
                  break;
                __clrex();
              }
            }
            while (__stxr(v32 | v31, v29));
            *(_BYTE *)(v24 + 7) = 2;
            v34 = (unsigned __int16)(*(_WORD *)((v24 & 0xFFFFFFFFFFFFC000) + 0x1C))++ + 1;
            if ((v34 & 0x10000) == 0)
              goto LABEL_34;
            v47 = *((_QWORD *)*v26 + 3);
            v43 = (unsigned __int8 *)(v47 + 56);
            if (__ldaxr((unsigned __int8 *)(v47 + 56)))
            {
              __clrex();
              goto LABEL_49;
            }
            if (__stxr(1u, v43))
LABEL_49:
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v43);
            v45 = *(_QWORD *)(v47 + 32) + 40 * ((*v26)[3] >> 5);
            *(_DWORD *)(v45 + 36) |= 1 << (*v26)[3];
            v46 = __ldxr(v43);
            if (v46 == 1)
            {
              if (!__stlxr(0, v43))
                goto LABEL_34;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v43, 0, v10, v11, v12, v13, v14, v15);
LABEL_34:
            ++*((_QWORD *)a2 + 9);
            v35 = *((_QWORD *)a2 + 17) + 16 * **v26;
            goto LABEL_35;
          }
        }
      }
LABEL_19:
      ++v22;
    }
    while (v22 != v21);
  }
}

uint64_t JSC::JSLexicalEnvironment::visitChildren(JSC::JSLexicalEnvironment *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  char v13;
  _QWORD v14[2];
  _QWORD *v15;
  char v16;
  _QWORD v17[2];
  _QWORD *v18;
  char v19;

  v11[0] = a2;
  v11[1] = this;
  v13 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v12 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v14[0] = a2;
    v14[1] = this;
    v16 = 0;
    v15 = v11;
    v17[0] = a2;
    v17[1] = this;
    v19 = 0;
    v18 = v14;
    *((_QWORD *)a2 + 11) = v17;
    JSC::JSObject::visitChildren(this, a2, a3);
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v17[0] + 88) = v18;
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3));
    *(_QWORD *)(v14[0] + 88) = v15;
    v7 = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
    v8 = (v7 + 1);
    if (v7 != -1)
    {
      v9 = (uint64_t *)((char *)this + 32);
      do
      {
        v10 = *v9++;
        if ((v10 & 0xFFFE000000000002) == 0)
          result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 64))(a2);
        --v8;
      }
      while (v8);
    }
    *(_QWORD *)(v11[0] + 88) = v12;
  }
  return result;
}

void JSC::JSGlobalObjectDebuggable::~JSGlobalObjectDebuggable(JSC::JSGlobalObjectDebuggable *this)
{
  void *v2;
  Inspector::RemoteInspector *v3;
  const __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &unk_1E3595608;
  v2 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    CFRelease(v2);
  *(_QWORD *)this = off_1E3595560;
  v3 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton((Inspector::RemoteInspector *)v2);
  Inspector::RemoteInspector::unregisterTarget(v3, this, v4, v5, v6, v7, v8, v9);
}

{
  void *v2;
  Inspector::RemoteInspector *v3;
  const __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = &unk_1E3595608;
  v2 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    CFRelease(v2);
  *(_QWORD *)this = off_1E3595560;
  v3 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton((Inspector::RemoteInspector *)v2);
  Inspector::RemoteInspector::unregisterTarget(v3, this, v4, v5, v6, v7, v8, v9);
  WTF::fastFree((unint64_t)this, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t JSC::JSGlobalObjectDebuggable::type(JSC::JSGlobalObjectDebuggable *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t JSC::JSGlobalObjectDebuggable::hasLocalDebugger(JSC::JSGlobalObjectDebuggable *this)
{
  return 0;
}

uint64_t JSC::JSGlobalObjectDebuggable::automaticInspectionAllowed(JSC::JSGlobalObjectDebuggable *this)
{
  return 1;
}

uint64_t JSC::jsStrDecimalLiteral<unsigned char>(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;

  v1 = a1[1];
  if (!v1)
  {
    result = 327;
    __break(0xC471u);
    goto LABEL_43;
  }
  v3 = *a1;
  v12 = 0;
  result = (uint64_t)fast_float::from_chars_advanced<double,char>(v3, &v1[(_QWORD)v3], &v12, 0x2E00000005);
  v5 = (unint64_t)a1[1];
  v6 = result - (_QWORD)v3;
  if ((unsigned __int8 *)result != v3)
  {
    v7 = v5 >= v6;
    v8 = v5 - v6;
    if (!v7)
      goto LABEL_43;
    v9 = &(*a1)[v6];
LABEL_6:
    *a1 = v9;
    a1[1] = (unsigned __int8 *)v8;
    return result;
  }
  if (!v5)
  {
LABEL_43:
    __break(1u);
    return result;
  }
  v10 = *a1;
  v11 = **a1;
  switch(v11)
  {
    case '+':
      v8 = v5 - 9;
      if (v8 <= 0xFFFFFFFFFFFFFFF7
        && v10[1] == 73
        && v10[2] == 110
        && v10[3] == 102
        && v10[4] == 105
        && v10[5] == 110
        && v10[6] == 105
        && v10[7] == 116
        && v10[8] == 121)
      {
        v9 = v10 + 9;
        goto LABEL_6;
      }
      break;
    case '-':
      v8 = v5 - 9;
      if (v8 <= 0xFFFFFFFFFFFFFFF7
        && v10[1] == 73
        && v10[2] == 110
        && v10[3] == 102
        && v10[4] == 105
        && v10[5] == 110
        && v10[6] == 105
        && v10[7] == 116
        && v10[8] == 121)
      {
        v9 = v10 + 9;
        goto LABEL_6;
      }
      break;
    case 'I':
      v7 = v5 >= 8;
      v8 = v5 - 8;
      if (v7
        && v10[1] == 110
        && v10[2] == 102
        && v10[3] == 105
        && v10[4] == 110
        && v10[5] == 105
        && v10[6] == 116
        && v10[7] == 121)
      {
        v9 = v10 + 8;
        goto LABEL_6;
      }
      break;
  }
  return result;
}

void JSC::jsStrDecimalLiteral<char16_t>(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v3;
  unsigned __int16 *v4;
  int v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unint64_t v8;

  v1 = a1[1];
  if (!v1)
  {
    __break(0xC471u);
    goto LABEL_21;
  }
  v8 = 0;
  WTF::parseDouble((unsigned __int16 *)*a1, v1, &v8);
  v3 = a1[1];
  if (v8)
  {
    v6 = (unsigned __int16 *)(v3 - v8);
    if (v3 >= v8)
    {
      v7 = *a1 + 2 * v8;
      goto LABEL_12;
    }
    goto LABEL_21;
  }
  if (!v3)
  {
LABEL_21:
    __break(1u);
    return;
  }
  v4 = (unsigned __int16 *)*a1;
  v5 = *(unsigned __int16 *)*a1;
  if (v5 == 43)
  {
    if (!JSC::isInfinity<char16_t>(v4 + 1, v3 - 1))
      return;
    if (v3 > 8)
    {
      v6 = (unsigned __int16 *)(v3 - 9);
      v7 = (uint64_t)(v4 + 9);
      goto LABEL_12;
    }
    goto LABEL_21;
  }
  if (v5 == 45)
  {
    if (!JSC::isInfinity<char16_t>(v4 + 1, v3 - 1))
      return;
    if (v3 > 8)
    {
      v6 = (unsigned __int16 *)(v3 - 9);
      v7 = (uint64_t)(v4 + 9);
      goto LABEL_12;
    }
    goto LABEL_21;
  }
  if (v5 == 73 && JSC::isInfinity<char16_t>((_WORD *)*a1, a1[1]))
  {
    if (v3 > 7)
    {
      v6 = (unsigned __int16 *)(v3 - 8);
      v7 = (uint64_t)(v4 + 8);
LABEL_12:
      *a1 = v7;
      a1[1] = (uint64_t)v6;
      return;
    }
    goto LABEL_21;
  }
}

BOOL JSC::isInfinity<char16_t>(_WORD *a1, unint64_t a2)
{
  return a2 >= 8
      && *a1 == 73
      && a1[1] == 110
      && a1[2] == 102
      && a1[3] == 105
      && a1[4] == 110
      && a1[5] == 105
      && a1[6] == 116
      && a1[7] == 121;
}

uint64_t JSC::JSObject::canHaveExistingOwnIndexedProperties(JSC::JSObject *this)
{
  int v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  if ((*((_BYTE *)this + 4) & 0xE) == 0)
    return 0;
  v2 = *((_BYTE *)this + 4) & 0xF;
  if ((v2 - 10) >= 4)
  {
    if ((v2 - 4) >= 6)
    {
      if (v2 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x198A1AC24);
      }
      return 0;
    }
    return *(unsigned int *)(*((_QWORD *)this + 1) - 8);
  }
  else
  {
    v3 = (_QWORD *)*((_QWORD *)this + 1);
    v4 = *((_DWORD *)v3 - 2);
    if (*((_DWORD *)v3 - 1) < v4)
      v4 = *((_DWORD *)v3 - 1);
    if (v4)
    {
      return 1;
    }
    else
    {
      v5 = *v3;
      if (!v5)
        return 0;
      v6 = *(_QWORD *)(v5 + 8);
      if (!v6)
        return 0;
      return *(unsigned int *)(v6 - 12);
    }
  }
}

void JSC::jsHexIntegerLiteral<unsigned char>(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned __int8 v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v1 = a1[1];
  if (v1 > 1)
  {
    v3 = v1 - 2;
    v4 = *a1;
    v5 = *a1 + 2;
    *a1 = v5;
    a1[1] = v1 - 2;
    v6 = -(uint64_t)v1;
    v7 = v1 - 3;
    v8 = 0.0;
    v9 = 1;
    while (1)
    {
      v10 = v6 + v9;
      if (v6 + v9 == -1)
        break;
      v11 = v9;
      v12 = v4 + v9;
      v13 = *(unsigned __int8 *)(v12 + 1);
      if (v13 >= 0x41)
        v14 = (v13 + 9) & 0xF;
      else
        v14 = v13 - 48;
      v8 = (double)v14 + v8 * 16.0;
      *a1 = v12 + 2;
      a1[1] = v7;
      if (v10 != -2)
      {
        v15 = *(unsigned __int8 *)(v12 + 2);
        v16 = v15 - 48;
        v17 = (v15 | 0x20) - 97;
        v9 = v11 + 1;
        --v7;
        if (v16 < 0xA || v17 < 6)
          continue;
      }
      if (v8 < 9.00719925e15)
        return;
      if (v3 >= v11)
      {
        JSC::parseIntOverflow(v5, v11, 16);
        return;
      }
      break;
    }
  }
  __break(1u);
}

void JSC::jsOctalIntegerLiteral<unsigned char>(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;

  v1 = a1[1];
  if (v1 > 1)
  {
    v3 = v1 - 2;
    v4 = *a1;
    v5 = *a1 + 2;
    *a1 = v5;
    a1[1] = v1 - 2;
    v6 = -(uint64_t)v1;
    v7 = v1 - 3;
    v8 = 0.0;
    v9 = 1;
    while (1)
    {
      v10 = v6 + v9;
      if (v6 + v9 == -1)
        break;
      v11 = v9;
      v12 = v4 + v9;
      v8 = (double)(*(unsigned __int8 *)(v12 + 1) - 48) + v8 * 8.0;
      *a1 = v12 + 2;
      a1[1] = v7;
      if (v10 != -2)
      {
        v13 = *(_BYTE *)(v12 + 2) & 0xF8;
        v9 = v11 + 1;
        --v7;
        if (v13 == 48)
          continue;
      }
      if (v8 < 9.00719925e15)
        return;
      if (v3 >= v11)
      {
        JSC::parseIntOverflow(v5, v11, 8);
        return;
      }
      break;
    }
  }
  __break(1u);
}

void JSC::jsBinaryIntegerLiteral<unsigned char>(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;

  v1 = a1[1];
  if (v1 > 1)
  {
    v3 = v1 - 2;
    v4 = *a1;
    v5 = *a1 + 2;
    *a1 = v5;
    a1[1] = v1 - 2;
    v6 = -(uint64_t)v1;
    v7 = v1 - 3;
    v8 = 0.0;
    v9 = 1;
    while (1)
    {
      v10 = v6 + v9;
      if (v6 + v9 == -1)
        break;
      v11 = v9;
      v12 = v4 + v9;
      v8 = (double)(*(unsigned __int8 *)(v12 + 1) - 48) + v8 * 2.0;
      *a1 = v12 + 2;
      a1[1] = v7;
      if (v10 != -2)
      {
        v13 = *(_BYTE *)(v12 + 2) & 0xFE;
        v9 = v11 + 1;
        --v7;
        if (v13 == 48)
          continue;
      }
      if (v8 < 9.00719925e15)
        return;
      if (v3 >= v11)
      {
        JSC::parseIntOverflow(v5, v11, 2);
        return;
      }
      break;
    }
  }
  __break(1u);
}

double JSC::toDouble<char16_t>(uint64_t a1, unint64_t a2)
{
  double v2;
  unint64_t v3;
  uint64_t v4;
  _WORD *i;
  unsigned int v6;
  double v11;
  unint64_t v12;
  _WORD *v13;
  unsigned int v14;
  BOOL v16;
  int v18;
  int v19;
  BOOL v22;
  _WORD *v24;
  unint64_t v25;

  v2 = 0.0;
  if (!a2)
    return v2;
  v3 = a2;
  v4 = a1;
  for (i = (_WORD *)(a1 + 4); ; ++i)
  {
    v6 = (unsigned __int16)*(i - 2);
    if (v6 > 0xFF)
      break;
    if (*(i - 2) > 0x20u || ((1 << v6) & 0x100001A00) == 0)
    {
      v16 = *(i - 2) == 160 || v6 == 13;
      if (!v16 && v6 != 10)
        goto LABEL_18;
    }
LABEL_8:
    v4 += 2;
    if (!--v3)
      return v2;
  }
  if (u_charType((unsigned __int16)*(i - 2)) == 12 || v6 - 8232 < 2 || v6 == 65279)
    goto LABEL_8;
  v6 = (unsigned __int16)*(i - 2);
LABEL_18:
  v24 = (_WORD *)v4;
  v25 = v3;
  if (v3 >= 3 && v6 == 48)
  {
    v18 = *(i - 1) & 0xFFDF;
    switch(v18)
    {
      case 'B':
        if ((*i & 0xFFFE) != 0x30)
          goto LABEL_20;
        JSC::jsBinaryIntegerLiteral<char16_t>((uint64_t *)&v24);
        break;
      case 'O':
        if ((*i & 0xFFF8) != 0x30)
          goto LABEL_20;
        JSC::jsOctalIntegerLiteral<char16_t>((uint64_t *)&v24);
        break;
      case 'X':
        v19 = (unsigned __int16)*i;
        if ((v19 - 48) >= 0xA && (v19 | 0x20u) - 97 > 5)
          goto LABEL_20;
        JSC::jsHexIntegerLiteral<char16_t>((uint64_t *)&v24);
        break;
      default:
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    JSC::jsStrDecimalLiteral<char16_t>((uint64_t *)&v24);
  }
  v2 = v11;
  v12 = v25;
  if (v25)
  {
    v13 = v24;
    do
    {
      v14 = (unsigned __int16)*v13;
      if (v14 > 0xFF)
      {
        if (u_charType((unsigned __int16)*v13) != 12 && v14 - 8232 >= 2 && v14 != 65279)
          return NAN;
      }
      else if (*v13 > 0x20u || ((1 << v14) & 0x100001A00) == 0)
      {
        v22 = *v13 == 160 || v14 == 13;
        if (!v22 && v14 != 10)
          return NAN;
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  return v2;
}

uint64_t *JSC::jsHexIntegerLiteral<char16_t>(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unsigned __int8 v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  unsigned __int16 v21;
  int v22;
  uint64_t v23;
  int v24;

  v1 = result[1];
  if (v1 <= 1)
    goto LABEL_32;
  v2 = 0;
  v3 = v1 - 2;
  v4 = *result;
  v5 = *result + 4;
  *result = v5;
  result[1] = v1 - 2;
  v6 = v1 - 3;
  v7 = 0.0;
  do
  {
    if (v6 == -1)
      goto LABEL_32;
    v8 = v2;
    v9 = (unsigned __int16 *)(v5 + v2);
    v10 = *v9;
    if (v10 >= 0x41)
      v11 = (v10 + 9) & 0xF;
    else
      v11 = v10 - 48;
    v7 = (double)v11 + v7 * 16.0;
    *result = v4 + 6 + v8;
    result[1] = v6;
    if (!v6)
      break;
    v12 = v9[1];
    v13 = v12 - 48;
    v14 = (v12 | 0x20) - 97;
    --v6;
    v2 = v8 + 2;
  }
  while (v13 < 0xA || v14 < 6);
  if (v7 >= 9.00719925e15)
  {
    v16 = v8 + 2;
    if (v3 >= (v8 + 2) >> 1)
    {
      v17 = 0.0;
      if (v16 < 2)
        return result;
      v18 = v16 >> 1;
      v19 = v4 + 2;
      v20 = 1.0;
      while (1)
      {
        v21 = *(_WORD *)(v19 + 2 * v18);
        if (v20 == INFINITY)
        {
          if (*(_WORD *)(v19 + 2 * v18) != 48)
            return result;
          goto LABEL_24;
        }
        if ((unsigned __int16)(v21 - 48) > 9u)
        {
          if ((unsigned __int16)(v21 - 65) < 0x1Au)
          {
            v24 = -55;
          }
          else
          {
            if ((unsigned __int16)(v21 - 97) > 0x19u)
              goto LABEL_30;
            v24 = -87;
          }
          v22 = v24 + v21;
          if (v22 > 0xF)
LABEL_30:
            v22 = -1;
        }
        else
        {
          v22 = *(unsigned __int16 *)(v19 + 2 * v18) - 48;
        }
        v17 = v17 + (double)v22 * v20;
LABEL_24:
        v20 = v20 * 16.0;
        v23 = v18-- + 1;
        if (v23 <= 2)
          return result;
      }
    }
LABEL_32:
    __break(1u);
  }
  return result;
}

uint64_t *JSC::jsOctalIntegerLiteral<char16_t>(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  int v16;
  uint64_t v17;

  v1 = result[1];
  if (v1 > 1)
  {
    v2 = 0;
    v3 = v1 - 2;
    v4 = *result;
    v5 = *result + 4;
    *result = v5;
    result[1] = v1 - 2;
    v6 = v1 - 3;
    v7 = 0.0;
    while (v6 != -1)
    {
      v8 = v2;
      v9 = (unsigned __int16 *)(v5 + v2);
      v7 = (double)(*v9 - 48) + v7 * 8.0;
      *result = v4 + 6 + v8;
      result[1] = v6;
      if (v6)
      {
        v10 = v9[1] & 0xFFF8;
        --v6;
        v2 = v8 + 2;
        if (v10 == 48)
          continue;
      }
      if (v7 < 9.00719925e15)
        return result;
      v11 = v8 + 2;
      if (v3 >= (v8 + 2) >> 1)
      {
        v12 = 0.0;
        if (v11 >= 2)
        {
          v13 = v11 >> 1;
          v14 = v4 + 2;
          v15 = 1.0;
          do
          {
            if (v15 == INFINITY)
            {
              if (*(_WORD *)(v14 + 2 * v13) != 48)
                return result;
            }
            else
            {
              if ((unsigned __int16)(*(_WORD *)(v14 + 2 * v13) - 48) >= 0xAu)
              {
                v16 = -1;
              }
              else
              {
                v16 = *(unsigned __int16 *)(v14 + 2 * v13) - 48;
                if (v16 > 7)
                  v16 = -1;
              }
              v12 = v12 + (double)v16 * v15;
            }
            v15 = v15 * 8.0;
            v17 = v13-- + 1;
          }
          while (v17 > 2);
        }
        return result;
      }
      break;
    }
  }
  __break(1u);
  return result;
}

uint64_t *JSC::jsBinaryIntegerLiteral<char16_t>(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  int v16;
  uint64_t v17;

  v1 = result[1];
  if (v1 > 1)
  {
    v2 = 0;
    v3 = v1 - 2;
    v4 = *result;
    v5 = *result + 4;
    *result = v5;
    result[1] = v1 - 2;
    v6 = v1 - 3;
    v7 = 0.0;
    while (v6 != -1)
    {
      v8 = v2;
      v9 = (unsigned __int16 *)(v5 + v2);
      v7 = (double)(*v9 - 48) + v7 * 2.0;
      *result = v4 + 6 + v8;
      result[1] = v6;
      if (v6)
      {
        v10 = v9[1] & 0xFFFE;
        --v6;
        v2 = v8 + 2;
        if (v10 == 48)
          continue;
      }
      if (v7 < 9.00719925e15)
        return result;
      v11 = v8 + 2;
      if (v3 >= (v8 + 2) >> 1)
      {
        v12 = 0.0;
        if (v11 >= 2)
        {
          v13 = v11 >> 1;
          v14 = v4 + 2;
          v15 = 1.0;
          do
          {
            if (v15 == INFINITY)
            {
              if (*(_WORD *)(v14 + 2 * v13) != 48)
                return result;
            }
            else
            {
              if ((unsigned __int16)(*(_WORD *)(v14 + 2 * v13) - 48) >= 0xAu)
              {
                v16 = -1;
              }
              else
              {
                v16 = *(unsigned __int16 *)(v14 + 2 * v13) - 48;
                if (v16 > 1)
                  v16 = -1;
              }
              v12 = v12 + (double)v16 * v15;
            }
            v15 = v15 + v15;
            v17 = v13-- + 1;
          }
          while (v17 > 2);
        }
        return result;
      }
      break;
    }
  }
  __break(1u);
  return result;
}

uint64_t JSC::ScopedArguments::getIndexQuickly(JSC::ScopedArguments *this, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *((_QWORD *)this + 5);
  v3 = *(_DWORD *)(v2 + 8);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v4)
  {
    v6 = *((_QWORD *)this + 7) + 8 * v5;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v8 = (v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v6 = *((_QWORD *)this + 6) + 8 * *(unsigned int *)(v8 + 4 * a2) + 32;
  }
  return *(_QWORD *)v6;
}

uint64_t JSC::symbolTablePut<(JSC::SymbolTablePutMode)1,JSC::JSLexicalEnvironment>(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, uint64_t a8, double a9)
{
  char v10;
  int v11;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t *v37;
  uint64_t **v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::AtomStringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::VM *v53;
  WTF::StringImpl *v54[3];
  uint64_t v55;

  v10 = a6;
  v11 = a5;
  v16 = *(_QWORD *)(a2 + 56);
  v53 = (JSC::VM *)v16;
  v17 = *(_QWORD *)(a1 + 24);
  v18 = (unsigned __int8 *)(v17 + 20);
  if (__ldaxr((unsigned __int8 *)(v17 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v17 + 20);
LABEL_4:
  ++*(_DWORD *)(v16 + 916);
  v20 = *(_QWORD *)(v17 + 8);
  if (!v20)
    goto LABEL_44;
  v21 = *(_DWORD *)(v20 - 8);
  v22 = *(_DWORD *)(a3 + 16);
  if ((v22 & 0x20) != 0)
    v22 = *(_DWORD *)(a3 + 32);
  v23 = v21 & (v22 >> 8);
  v24 = *(_QWORD *)(v20 + 16 * v23);
  if (v24 != a3)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v21;
      v24 = *(_QWORD *)(v20 + 16 * v23);
      ++v25;
      if (v24 == a3)
        goto LABEL_15;
    }
    v23 = *(unsigned int *)(v20 - 4);
  }
LABEL_15:
  if (v23 == *(_DWORD *)(v20 - 4))
    goto LABEL_44;
  v26 = *(_QWORD **)(v20 + 16 * v23 + 8);
  v27 = (unint64_t)v26;
  if ((v26 & 1) == 0)
    v27 = *v26 | 1;
  if ((v27 & 2) == 0 || (v10 & 1) != 0)
  {
    if ((v27 >> 6) != -1 && *(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) + 1 > (v27 >> 6))
    {
      v28 = (v27 >> 6);
      if ((v26 & 1) != 0)
        v29 = 0;
      else
        v29 = v26[1];
      v30 = 0;
      v31 = (uint64_t *)(a1 + 8 * v28 + 32);
      v32 = 1;
      goto LABEL_25;
    }
LABEL_44:
    v32 = 0;
    v31 = 0;
    v29 = 0;
    v30 = 0;
    goto LABEL_25;
  }
  if (v11)
  {
    v42 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v42 = 0x2900000002;
    *(_QWORD *)(v42 + 8) = "Attempted to assign to readonly property.";
    *(_DWORD *)(v42 + 16) = 4;
    v54[0] = (WTF::StringImpl *)v42;
    JSC::throwTypeError(a2, &v53, v54);
    v44 = v54[0];
    v54[0] = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v43, a3, a4, a5, a6, (uint64_t)a7, a8);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  v32 = 0;
  v31 = 0;
  v29 = 0;
  *a7 = 0;
  v30 = 1;
LABEL_25:
  v33 = __ldxr(v18);
  if (v33 != 1)
  {
    __clrex();
    goto LABEL_29;
  }
  if (__stlxr(0, v18))
LABEL_29:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v18, 0, a3, a4, a5, a6, (uint64_t)a7, a8);
  v34 = *(_DWORD *)(v16 + 916) - 1;
  *(_DWORD *)(v16 + 916) = v34;
  if (*(unsigned __int8 *)(v16 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v35 = v34 == 0;
  else
    v35 = 0;
  if (v35)
  {
    *(_BYTE *)(v16 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v16 + 192, 0);
  }
  if (v32)
  {
    v55 = a3;
    *v31 = a4;
    if ((a4 & 0xFFFE000000000002) == 0
      && a1
      && a4
      && *(_DWORD *)(v16 + 760) >= *(unsigned __int8 *)(a1 + 7))
    {
      JSC::Heap::writeBarrierSlowPath(v16 + 192, a1);
    }
    if (v29)
    {
      v54[0] = (WTF::StringImpl *)&off_1E3583740;
      v54[1] = (WTF::StringImpl *)a1;
      v54[2] = (WTF::StringImpl *)&v55;
      if (*(_BYTE *)(v29 + 4) == 1)
      {
        __dmb(0xAu);
        v38 = (uint64_t **)(v29 + 8);
        v37 = *(uint64_t **)(v29 + 8);
        *(_BYTE *)(v29 + 4) = 2;
        v39 = *(_DWORD *)(v16 + 916);
        *(_DWORD *)(v16 + 916) = v39 + 1;
        if (v37 != (uint64_t *)(v29 + 8))
        {
          do
          {
            v41 = *v37;
            v40 = (uint64_t *)v37[1];
            *v40 = *v37;
            *(_QWORD *)(v41 + 8) = v40;
            *v37 = 0;
            v37[1] = 0;
            JSC::Watchpoint::fire((unint64_t)v37, (JSC::VM *)v16, v54, a4, a5, a6, (uint64_t)a7, a8, a9);
            v37 = *v38;
          }
          while (*v38 != (uint64_t *)v38);
          v39 = *(_DWORD *)(v16 + 916) - 1;
        }
        *(_DWORD *)(v16 + 916) = v39;
        __dmb(0xAu);
      }
      *(_BYTE *)(v29 + 4) = 2;
    }
    v30 = 1;
    *a7 = 1;
  }
  return v30;
}

JSC::GlobalJSLock *JSC::GlobalJSLock::GlobalJSLock(JSC::GlobalJSLock *this)
{
  if (__ldaxr(JSC::GlobalJSLock::s_sharedInstanceMutex))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::GlobalJSLock::s_sharedInstanceMutex);
    return this;
  }
  if (__stxr(1u, JSC::GlobalJSLock::s_sharedInstanceMutex))
    goto LABEL_4;
  return this;
}

{
  if (__ldaxr(JSC::GlobalJSLock::s_sharedInstanceMutex))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::GlobalJSLock::s_sharedInstanceMutex);
    return this;
  }
  if (__stxr(1u, JSC::GlobalJSLock::s_sharedInstanceMutex))
    goto LABEL_4;
  return this;
}

void JSC::GlobalJSLock::~GlobalJSLock(JSC::GlobalJSLock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = __ldxr(JSC::GlobalJSLock::s_sharedInstanceMutex);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_5;
  }
  if (__stlxr(0, JSC::GlobalJSLock::s_sharedInstanceMutex))
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::GlobalJSLock::s_sharedInstanceMutex, 0, a3, a4, a5, a6, a7, a8);
}

{
  int v8;

  v8 = __ldxr(JSC::GlobalJSLock::s_sharedInstanceMutex);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_5;
  }
  if (__stlxr(0, JSC::GlobalJSLock::s_sharedInstanceMutex))
LABEL_5:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::GlobalJSLock::s_sharedInstanceMutex, 0, a3, a4, a5, a6, a7, a8);
}

JSC::JSLockHolder *JSC::JSLockHolder::JSLockHolder(JSC::JSLockHolder *this, JSC::VM **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  return JSC::JSLockHolder::JSLockHolder(this, a2[7], a3, a4, a5, a6, a7, a8, a9);
}

JSC::JSLockHolder *JSC::JSLockHolder::JSLockHolder(JSC::JSLockHolder *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t StatusReg;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  WTF::Thread *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  JSC::SamplingProfiler *v53;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unsigned int v62;
  int v63;
  _QWORD *v65;
  uint64_t v66;
  unint64_t *v67;
  WTF::WordLock *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned __int8 ***v76;
  unsigned __int8 **v77;
  unsigned __int8 *v78;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  int v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count **v97;
  _QWORD *v98;
  _QWORD *i;
  unsigned __int8 **v100;
  uint64_t v101;
  int v103;
  int v104;
  unsigned __int8 **v105;
  unsigned __int8 *v106;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  WTF::Thread *v118;
  uint64_t v119;
  unsigned __int8 **v120;
  WTF::WordLock *v121;
  uint64_t v122;
  char v123;

  do
    v10 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v10 + 1, (unsigned int *)a2));
  *(_QWORD *)this = a2;
  v11 = *((_QWORD *)a2 + 14);
  if (*(_BYTE *)(v11 + 5))
    WebCoreWebThreadLock();
  v12 = (unsigned __int8 *)(v11 + 4);
  while (1)
  {
    v13 = *v12;
    if ((v13 & 1) != 0)
      break;
    v56 = __ldaxr(v12);
    if (v56 == v13)
    {
      if (!__stxr(v13 | 1, v12))
        goto LABEL_13;
    }
    else
    {
      __clrex();
    }
  }
  if (*(_BYTE *)(v11 + 6))
  {
    v14 = *(_QWORD *)(v11 + 8);
    v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v15)
      v15 = WTF::Thread::initializeCurrentTLS(0);
    if (v14 == v15)
    {
      ++*(_QWORD *)(v11 + 16);
      return this;
    }
  }
  if (__ldaxr(v12))
  {
    __clrex();
LABEL_12:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v11 + 4);
    goto LABEL_13;
  }
  if (__stxr(1u, v12))
    goto LABEL_12;
LABEL_13:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = *(unsigned int **)(StatusReg + 736);
  if (!v18)
    v18 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v20 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v11 + 8) = v18;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      v84 = *(unsigned int **)(v20 + 96);
      *(_QWORD *)(v20 + 96) = 0;
      if (v84)
      {
        v85 = v84 + 2;
        do
        {
          v86 = __ldaxr(v85);
          v87 = v86 - 1;
        }
        while (__stlxr(v87, v85));
        if (!v87)
        {
          atomic_store(1u, v84 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 8))(v84);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v20 + 64), a2, a3, a4, a5, a6, a7, a8);
      v95 = *(_QWORD *)(v20 + 32);
      if (v95)
      {
        v96 = *(unsigned int *)(v95 - 4);
        if ((_DWORD)v96)
        {
          v97 = (std::__shared_weak_count **)(v95 + 16);
          do
          {
            if (*(v97 - 2) != (std::__shared_weak_count *)-1 && *v97)
              std::__shared_weak_count::__release_weak(*v97);
            v97 += 3;
            --v96;
          }
          while (v96);
        }
        WTF::fastFree(v95 - 16, v88, v89, v90, v91, v92, v93, v94);
      }
      WTF::fastFree(v20, v88, v89, v90, v91, v92, v93, v94);
    }
  }
  __dmb(0xAu);
  *(_BYTE *)(v11 + 6) = 1;
  *(_QWORD *)(v11 + 16) = 1;
  v23 = *(_QWORD *)(v11 + 32);
  if (v23)
  {
    v24 = *(_QWORD *)(StatusReg + 736);
    if (!v24)
    {
      v24 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)v18);
      v23 = *(_QWORD *)(v11 + 32);
    }
    v25 = *(_QWORD *)(v24 + 56);
    *(_QWORD *)(v24 + 56) = *(_QWORD *)(v23 + 41912);
    *(_QWORD *)(v11 + 40) = v25;
    v26 = *(_QWORD *)(v24 + 80);
    *(_QWORD *)(v23 + 93112) = v26;
    v27 = *(_QWORD *)(v24 + 16);
    if (!v27 || (v27 >= v26 ? (v28 = *(_QWORD *)(v24 + 24) >= v26) : (v28 = 1), v28))
    {
      __break(0xC471u);
      JUMPOUT(0x198A1C28CLL);
    }
    if ((*(_DWORD *)(v23 + 1096) & 4) != 0)
    {
      *(_BYTE *)(v11 + 7) = 0;
      goto LABEL_29;
    }
    if (__ldaxr((unsigned int *)(v23 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v23 + 1096)))
    {
      goto LABEL_93;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v23 + 192), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
LABEL_93:
    *(_BYTE *)(v11 + 7) = 1;
    v23 = *(_QWORD *)(v11 + 32);
LABEL_29:
    if (*(_QWORD *)(v23 + 93088))
    {
      __break(0xC471u);
      goto LABEL_201;
    }
    v29 = *(_QWORD *)(v11 + 32);
    v30 = (unint64_t *)(v29 + 93088);
    *(_QWORD *)(v29 + 93088) = &v114;
    v31 = *(_QWORD *)(v29 + 8);
    v32 = *(WTF::Thread **)(StatusReg + 736);
    if (!v32)
      v32 = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(0);
    v33 = dword_1ECF4C250;
    if (!(dword_1ECF4C250 >> 14))
    {
      __break(0xC471u);
      JUMPOUT(0x198A1C018);
    }
    v34 = *v30;
    if (*v30)
    {
      v35 = qword_1ECF4C248;
      v36 = *(_QWORD *)(v29 + 93096);
      if (v36 > qword_1ECF4C248)
        v36 = qword_1ECF4C248;
      v37 = *((_QWORD *)v32 + 3);
      v38 = v37 + v36;
      if (v37 + v36 <= v34)
      {
        v39 = qword_1ECF4C248 - v36;
        v40 = v34 - v38;
        if (v39 < v40)
          v40 = v39;
        v38 = v34 - v40;
      }
      *(_QWORD *)(v29 + 8) = v38;
      if (v35 < v33)
        v33 = v35;
      v41 = v37 + v33;
      if (v41 <= v34)
      {
        v42 = v35 - v33;
        if (v42 >= v34 - v41)
          v42 = v34 - v41;
        v41 = v34 - v42;
      }
    }
    else
    {
      v55 = *((_QWORD *)v32 + 3);
      v38 = v55 + *(_QWORD *)(v29 + 93096);
      *(_QWORD *)(v29 + 8) = v38;
      v41 = v55 + v33;
    }
    *(_QWORD *)(v29 + 93104) = v41;
    if (v31 == v38)
    {
LABEL_62:
      v50 = *(_DWORD *)(v24 + 48);
      v51 = *(_QWORD *)(v11 + 32);
      if (v50 == *(_DWORD *)(v11 + 28))
        goto LABEL_63;
      *(_DWORD *)(v11 + 28) = v50;
      v65 = **(_QWORD ***)(v51 + 584);
      v66 = *(_QWORD *)(StatusReg + 736);
      if (!v66)
        v66 = WTF::Thread::initializeCurrentTLS(v32);
      v67 = v65 + 2;
      v121 = (WTF::WordLock *)(v65 + 2);
      if (__ldaxr(v65 + 2))
      {
        __clrex();
      }
      else if (!__stxr(1uLL, v67))
      {
LABEL_99:
        WTF::Thread::addToThreadGroup(v66, (uint64_t)&v121, v65, a4, a5, a6, a7, a8);
        v69 = v121;
        if (v121)
        {
          v70 = __ldxr((unint64_t *)v121);
          if (v70 == 1)
          {
            if (!__stlxr(0, (unint64_t *)v121))
              goto LABEL_109;
          }
          else
          {
            __clrex();
          }
          WTF::WordLock::unlockSlow(v69);
        }
LABEL_109:
        v51 = *(_QWORD *)(v11 + 32);
LABEL_63:
        v52 = *(_DWORD *)(v51 + 80);
        if ((v52 & 0x2F) != 0 && (v52 & 0x20) == 0)
        {
          JSC::VMTraps::invalidateCodeBlocksOnStack((JSC::VMTraps *)(v51 + 64), *(JSC::CallFrame **)(v51 + 40), a3, a4, a5, a6, a7, a8, a9);
          v51 = *(_QWORD *)(v11 + 32);
        }
        v53 = *(JSC::SamplingProfiler **)(v51 + 93368);
        if (v53)
          JSC::SamplingProfiler::noticeJSLockAcquisition(v53, a2, a3, a4, a5, a6, a7, a8);
        return this;
      }
      WTF::WordLock::lockSlow((WTF::WordLock *)v67);
      goto LABEL_99;
    }
    v43 = (_QWORD *)(v29 + 93480);
    v44 = (unsigned __int8 *)(v29 + 93496);
    if (__ldaxr((unsigned __int8 *)(v29 + 93496)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v44))
    {
LABEL_50:
      v119 = 0;
      if (!*v43 || (v57 = *(unsigned int *)(*v43 - 12), !(_DWORD)v57))
      {
        v46 = 0;
        v47 = 0;
        goto LABEL_52;
      }
      if (!(v57 >> 29))
      {
        v32 = (WTF::Thread *)WTF::fastMalloc((WTF *)(8 * v57));
        v47 = (unint64_t)v32;
        LODWORD(v119) = v57;
        v118 = v32;
        v58 = (_QWORD *)*v43;
        if (!*v43 || !*((_DWORD *)v58 - 3))
        {
          v111 = 0;
          goto LABEL_199;
        }
        v59 = *((unsigned int *)v58 - 1);
        if ((_DWORD)v59)
        {
          v60 = 16 * v59;
          v61 = (_QWORD *)*v43;
          while ((unint64_t)(*v61 + 1) <= 1)
          {
            v61 += 2;
            v60 -= 16;
            if (!v60)
              goto LABEL_84;
          }
        }
        else
        {
          v61 = (_QWORD *)*v43;
        }
        v98 = &v58[2 * v59];
        if (v98 == v61)
        {
LABEL_84:
          v62 = 0;
          v63 = 0;
LABEL_85:
          if (v57 <= v62)
            goto LABEL_86;
          v111 = v63;
          if (v62)
          {
            LODWORD(v119) = v62;
            v32 = (WTF::Thread *)WTF::fastRealloc(v47, 8 * v62, a3, a4, a5, a6, a7, a8);
            v47 = (unint64_t)v32;
            goto LABEL_182;
          }
          if (!v47)
          {
LABEL_182:
            v63 = v111;
LABEL_86:
            v46 = HIDWORD(v119);
            if (v63)
              v32 = (WTF::Thread *)_ZN3WTF9HashTableIPKN3JSC4Wasm8InstanceENS_12KeyValuePairIS5_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS8_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISD_EENS_11DefaultHashIS5_EENS_7HashMapIS5_SC_SH_NS_10HashTraitsIS5_EENSJ_ISC_EENS_15HashTableTraitsEE18KeyValuePairTraitsESK_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS3_E6valuesEvEUlRT_E0_EEbRKST_((uint64_t *)(v29 + 93480), &v121, a3, a4, a5, a6, a7, a8);
LABEL_52:
            v48 = 0;
            *(_DWORD *)(v29 + 93488) = 0;
            if (*v43)
            {
              v48 = *(_DWORD *)(*v43 - 12);
              if (v48 > 0x7FFFFFFE)
                v48 = 0x7FFFFFFF;
            }
            *(_DWORD *)(v29 + 93492) = 2 * v48;
            v49 = __ldxr(v44);
            if (v49 == 1)
            {
              if (!__stlxr(0, v44))
                goto LABEL_59;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v29 + 93496), 0, a3, a4, a5, a6, a7, a8);
LABEL_59:
            if (!v46)
            {
LABEL_60:
              if (v47)
                WTF::fastFree(v47, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_62;
            }
            v71 = *(_QWORD *)(v29 + 8);
            v72 = 8 * v46;
            v73 = v72;
            v74 = (uint64_t *)v47;
            do
            {
              v75 = *v74++;
              *(_QWORD *)(v75 + 16) = v71;
              v73 -= 8;
            }
            while (v73);
            v76 = (unsigned __int8 ***)v47;
            while (1)
            {
              v77 = *v76;
              *v76 = 0;
              if (v77)
                break;
LABEL_114:
              ++v76;
              v72 -= 8;
              if (!v72)
                goto LABEL_60;
            }
            v78 = *v77;
            if (__ldaxr(*v77))
            {
              __clrex();
            }
            else if (!__stxr(1u, v78))
            {
LABEL_119:
              v80 = *((_QWORD *)v78 + 1);
              v81 = v80 - 1;
              *((_QWORD *)v78 + 1) = v80 - 1;
              if (v80 == 1)
              {
                v117 = *((_QWORD *)v78 + 3);
                v112 = *((_QWORD *)v78 + 2);
                *((_QWORD *)v78 + 3) = 0;
                v82 = v112 == 0;
              }
              else
              {
                v82 = 0;
                v117 = 0;
              }
              v83 = __ldxr(v78);
              if (v83 == 1)
              {
                if (!__stlxr(0, v78))
                {
LABEL_126:
                  if (!v81)
                  {
                    v121 = (WTF::WordLock *)v78;
                    v122 = v117;
                    v123 = v82;
                    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v121, a2, a3, a4, a5, a6, a7, a8);
                  }
                  goto LABEL_114;
                }
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v78, 0, a3, a4, a5, a6, a7, a8);
              goto LABEL_126;
            }
            v32 = (WTF::Thread *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v78);
            goto LABEL_119;
          }
LABEL_199:
          v118 = 0;
          LODWORD(v119) = 0;
          WTF::fastFree(v47, a2, a3, a4, a5, a6, a7, a8);
          v47 = (unint64_t)v118;
          goto LABEL_182;
        }
        i = v61;
        LODWORD(v117) = 0;
        v100 = (unsigned __int8 **)*v61;
LABEL_149:
        v116 = i;
        v101 = i[1];
        if (__ldaxr((unsigned __int8 *)v101))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v101))
        {
LABEL_152:
          if (*(_QWORD *)(v101 + 24))
            ++*(_QWORD *)(v101 + 8);
          else
            v100 = 0;
          v103 = __ldxr((unsigned __int8 *)v101);
          if (v103 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v101))
            {
LABEL_159:
              if (!v100)
              {
                LODWORD(v117) = 1;
                goto LABEL_173;
              }
              v120 = v100;
              v104 = HIDWORD(v119);
              if (HIDWORD(v119) == (_DWORD)v119)
              {
                v32 = (WTF::Thread *)WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>((uint64_t)&v118, (unint64_t)&v120);
              }
              else
              {
                v120 = 0;
                *((_QWORD *)v118 + HIDWORD(v119)) = v100;
                HIDWORD(v119) = v104 + 1;
              }
              v105 = v120;
              v120 = 0;
              if (!v105)
              {
LABEL_173:
                for (i = v116 + 2; i != v98; i += 2)
                {
                  v100 = (unsigned __int8 **)*i;
                  if ((unint64_t)(*i + 1) > 1)
                  {
                    if (i != v98)
                      goto LABEL_149;
                    break;
                  }
                }
                LODWORD(v57) = v119;
                v62 = HIDWORD(v119);
                v47 = (unint64_t)v118;
                v63 = v117;
                goto LABEL_85;
              }
              v106 = *v105;
              if (__ldaxr(*v105))
              {
                __clrex();
              }
              else if (!__stxr(1u, v106))
              {
LABEL_166:
                v108 = *((_QWORD *)v106 + 1);
                v109 = v108 - 1;
                *((_QWORD *)v106 + 1) = v108 - 1;
                if (v108 == 1)
                {
                  v115 = *((_QWORD *)v106 + 3);
                  v113 = *((_QWORD *)v106 + 2);
                  *((_QWORD *)v106 + 3) = 0;
                  HIDWORD(v114) = v113 == 0;
                }
                else
                {
                  HIDWORD(v114) = 0;
                  v115 = 0;
                }
                v110 = __ldxr(v106);
                if (v110 == 1)
                {
                  if (!__stlxr(0, v106))
                  {
LABEL_178:
                    if (!v109)
                    {
                      v121 = (WTF::WordLock *)v106;
                      v122 = v115;
                      v123 = BYTE4(v114);
                      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v121, a2, a3, a4, a5, a6, a7, a8);
                    }
                    goto LABEL_173;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v106, 0, a3, a4, a5, a6, a7, a8);
                goto LABEL_178;
              }
              v32 = (WTF::Thread *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v106);
              goto LABEL_166;
            }
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v101, 0, a3, a4, a5, a6, a7, a8);
          goto LABEL_159;
        }
        v32 = (WTF::Thread *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v101);
        goto LABEL_152;
      }
      __break(0xC471u);
LABEL_201:
      JUMPOUT(0x198A1BF78);
    }
    v32 = (WTF::Thread *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v29 + 93496);
    goto LABEL_50;
  }
  return this;
}

JSC::JSLockHolder *JSC::JSLockHolder::JSLockHolder(JSC::JSLockHolder *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t StatusReg;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  WTF::Thread *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned __int8 *v45;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  JSC::SamplingProfiler *v54;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  unsigned int v63;
  int v64;
  _QWORD *v66;
  uint64_t v67;
  unint64_t *v68;
  WTF::WordLock *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  unsigned __int8 ***v77;
  unsigned __int8 **v78;
  unsigned __int8 *v79;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  int v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count **v98;
  _QWORD *v99;
  _QWORD *i;
  unsigned __int8 **v101;
  uint64_t v102;
  int v104;
  int v105;
  unsigned __int8 **v106;
  unsigned __int8 *v107;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  WTF::Thread *v119;
  uint64_t v120;
  unsigned __int8 **v121;
  WTF::WordLock *v122;
  uint64_t v123;
  char v124;

  v10 = *((_QWORD *)a2 + 7);
  do
    v11 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v11 + 1, (unsigned int *)v10));
  *(_QWORD *)this = v10;
  v12 = *(_QWORD *)(v10 + 112);
  if (*(_BYTE *)(v12 + 5))
    WebCoreWebThreadLock();
  v13 = (unsigned __int8 *)(v12 + 4);
  while (1)
  {
    v14 = *v13;
    if ((v14 & 1) != 0)
      break;
    v57 = __ldaxr(v13);
    if (v57 == v14)
    {
      if (!__stxr(v14 | 1, v13))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
  }
  if (*(_BYTE *)(v12 + 6))
  {
    v15 = *(_QWORD *)(v12 + 8);
    v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v16)
      v16 = WTF::Thread::initializeCurrentTLS(0);
    if (v15 == v16)
    {
      ++*(_QWORD *)(v12 + 16);
      return this;
    }
  }
  if (__ldaxr(v13))
  {
    __clrex();
LABEL_13:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v12 + 4);
    goto LABEL_14;
  }
  if (__stxr(1u, v13))
    goto LABEL_13;
LABEL_14:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v19 = *(unsigned int **)(StatusReg + 736);
  if (!v19)
    v19 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 + 1, v19));
  v21 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v12 + 8) = v19;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v85 = *(unsigned int **)(v21 + 96);
      *(_QWORD *)(v21 + 96) = 0;
      if (v85)
      {
        v86 = v85 + 2;
        do
        {
          v87 = __ldaxr(v86);
          v88 = v87 - 1;
        }
        while (__stlxr(v88, v86));
        if (!v88)
        {
          atomic_store(1u, v85 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v85 + 8))(v85);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v21 + 64), a2, a3, a4, a5, a6, a7, a8);
      v96 = *(_QWORD *)(v21 + 32);
      if (v96)
      {
        v97 = *(unsigned int *)(v96 - 4);
        if ((_DWORD)v97)
        {
          v98 = (std::__shared_weak_count **)(v96 + 16);
          do
          {
            if (*(v98 - 2) != (std::__shared_weak_count *)-1 && *v98)
              std::__shared_weak_count::__release_weak(*v98);
            v98 += 3;
            --v97;
          }
          while (v97);
        }
        WTF::fastFree(v96 - 16, v89, v90, v91, v92, v93, v94, v95);
      }
      WTF::fastFree(v21, v89, v90, v91, v92, v93, v94, v95);
    }
  }
  __dmb(0xAu);
  *(_BYTE *)(v12 + 6) = 1;
  *(_QWORD *)(v12 + 16) = 1;
  v24 = *(_QWORD *)(v12 + 32);
  if (v24)
  {
    v25 = *(_QWORD *)(StatusReg + 736);
    if (!v25)
    {
      v25 = WTF::Thread::initializeCurrentTLS((WTF::Thread *)v19);
      v24 = *(_QWORD *)(v12 + 32);
    }
    v26 = *(_QWORD *)(v25 + 56);
    *(_QWORD *)(v25 + 56) = *(_QWORD *)(v24 + 41912);
    *(_QWORD *)(v12 + 40) = v26;
    v27 = *(_QWORD *)(v25 + 80);
    *(_QWORD *)(v24 + 93112) = v27;
    v28 = *(_QWORD *)(v25 + 16);
    if (!v28 || (v28 >= v27 ? (v29 = *(_QWORD *)(v25 + 24) >= v27) : (v29 = 1), v29))
    {
      __break(0xC471u);
      JUMPOUT(0x198A1CB78);
    }
    if ((*(_DWORD *)(v24 + 1096) & 4) != 0)
    {
      *(_BYTE *)(v12 + 7) = 0;
      goto LABEL_30;
    }
    if (__ldaxr((unsigned int *)(v24 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v24 + 1096)))
    {
      goto LABEL_94;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v24 + 192), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
LABEL_94:
    *(_BYTE *)(v12 + 7) = 1;
    v24 = *(_QWORD *)(v12 + 32);
LABEL_30:
    if (*(_QWORD *)(v24 + 93088))
    {
      __break(0xC471u);
      goto LABEL_202;
    }
    v30 = *(_QWORD *)(v12 + 32);
    v31 = (unint64_t *)(v30 + 93088);
    *(_QWORD *)(v30 + 93088) = &v115;
    v32 = *(_QWORD *)(v30 + 8);
    v33 = *(WTF::Thread **)(StatusReg + 736);
    if (!v33)
      v33 = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(0);
    v34 = dword_1ECF4C250;
    if (!(dword_1ECF4C250 >> 14))
    {
      __break(0xC471u);
      JUMPOUT(0x198A1C904);
    }
    v35 = *v31;
    if (*v31)
    {
      v36 = qword_1ECF4C248;
      v37 = *(_QWORD *)(v30 + 93096);
      if (v37 > qword_1ECF4C248)
        v37 = qword_1ECF4C248;
      v38 = *((_QWORD *)v33 + 3);
      v39 = v38 + v37;
      if (v38 + v37 <= v35)
      {
        v40 = qword_1ECF4C248 - v37;
        v41 = v35 - v39;
        if (v40 < v41)
          v41 = v40;
        v39 = v35 - v41;
      }
      *(_QWORD *)(v30 + 8) = v39;
      if (v36 < v34)
        v34 = v36;
      v42 = v38 + v34;
      if (v42 <= v35)
      {
        v43 = v36 - v34;
        if (v43 >= v35 - v42)
          v43 = v35 - v42;
        v42 = v35 - v43;
      }
    }
    else
    {
      v56 = *((_QWORD *)v33 + 3);
      v39 = v56 + *(_QWORD *)(v30 + 93096);
      *(_QWORD *)(v30 + 8) = v39;
      v42 = v56 + v34;
    }
    *(_QWORD *)(v30 + 93104) = v42;
    if (v32 == v39)
    {
LABEL_63:
      v51 = *(_DWORD *)(v25 + 48);
      v52 = *(_QWORD *)(v12 + 32);
      if (v51 == *(_DWORD *)(v12 + 28))
        goto LABEL_64;
      *(_DWORD *)(v12 + 28) = v51;
      v66 = **(_QWORD ***)(v52 + 584);
      v67 = *(_QWORD *)(StatusReg + 736);
      if (!v67)
        v67 = WTF::Thread::initializeCurrentTLS(v33);
      v68 = v66 + 2;
      v122 = (WTF::WordLock *)(v66 + 2);
      if (__ldaxr(v66 + 2))
      {
        __clrex();
      }
      else if (!__stxr(1uLL, v68))
      {
LABEL_100:
        WTF::Thread::addToThreadGroup(v67, (uint64_t)&v122, v66, a4, a5, a6, a7, a8);
        v70 = v122;
        if (v122)
        {
          v71 = __ldxr((unint64_t *)v122);
          if (v71 == 1)
          {
            if (!__stlxr(0, (unint64_t *)v122))
              goto LABEL_110;
          }
          else
          {
            __clrex();
          }
          WTF::WordLock::unlockSlow(v70);
        }
LABEL_110:
        v52 = *(_QWORD *)(v12 + 32);
LABEL_64:
        v53 = *(_DWORD *)(v52 + 80);
        if ((v53 & 0x2F) != 0 && (v53 & 0x20) == 0)
        {
          JSC::VMTraps::invalidateCodeBlocksOnStack((JSC::VMTraps *)(v52 + 64), *(JSC::CallFrame **)(v52 + 40), a3, a4, a5, a6, a7, a8, a9);
          v52 = *(_QWORD *)(v12 + 32);
        }
        v54 = *(JSC::SamplingProfiler **)(v52 + 93368);
        if (v54)
          JSC::SamplingProfiler::noticeJSLockAcquisition(v54, a2, a3, a4, a5, a6, a7, a8);
        return this;
      }
      WTF::WordLock::lockSlow((WTF::WordLock *)v68);
      goto LABEL_100;
    }
    v44 = (_QWORD *)(v30 + 93480);
    v45 = (unsigned __int8 *)(v30 + 93496);
    if (__ldaxr((unsigned __int8 *)(v30 + 93496)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v45))
    {
LABEL_51:
      v120 = 0;
      if (!*v44 || (v58 = *(unsigned int *)(*v44 - 12), !(_DWORD)v58))
      {
        v47 = 0;
        v48 = 0;
        goto LABEL_53;
      }
      if (!(v58 >> 29))
      {
        v33 = (WTF::Thread *)WTF::fastMalloc((WTF *)(8 * v58));
        v48 = (unint64_t)v33;
        LODWORD(v120) = v58;
        v119 = v33;
        v59 = (_QWORD *)*v44;
        if (!*v44 || !*((_DWORD *)v59 - 3))
        {
          v112 = 0;
          goto LABEL_200;
        }
        v60 = *((unsigned int *)v59 - 1);
        if ((_DWORD)v60)
        {
          v61 = 16 * v60;
          v62 = (_QWORD *)*v44;
          while ((unint64_t)(*v62 + 1) <= 1)
          {
            v62 += 2;
            v61 -= 16;
            if (!v61)
              goto LABEL_85;
          }
        }
        else
        {
          v62 = (_QWORD *)*v44;
        }
        v99 = &v59[2 * v60];
        if (v99 == v62)
        {
LABEL_85:
          v63 = 0;
          v64 = 0;
LABEL_86:
          if (v58 <= v63)
            goto LABEL_87;
          v112 = v64;
          if (v63)
          {
            LODWORD(v120) = v63;
            v33 = (WTF::Thread *)WTF::fastRealloc(v48, 8 * v63, a3, a4, a5, a6, a7, a8);
            v48 = (unint64_t)v33;
            goto LABEL_183;
          }
          if (!v48)
          {
LABEL_183:
            v64 = v112;
LABEL_87:
            v47 = HIDWORD(v120);
            if (v64)
              v33 = (WTF::Thread *)_ZN3WTF9HashTableIPKN3JSC4Wasm8InstanceENS_12KeyValuePairIS5_NS_6RefPtrINS_29ThreadSafeWeakPtrControlBlockENS_12RawPtrTraitsIS8_EENS_43ThreadSafeWeakPtrControlBlockRefDerefTraitsEEEEENS_24KeyValuePairKeyExtractorISD_EENS_11DefaultHashIS5_EENS_7HashMapIS5_SC_SH_NS_10HashTraitsIS5_EENSJ_ISC_EENS_15HashTableTraitsEE18KeyValuePairTraitsESK_E8removeIfIZNKS_21ThreadSafeWeakHashSetIS3_E6valuesEvEUlRT_E0_EEbRKST_((uint64_t *)(v30 + 93480), &v122, a3, a4, a5, a6, a7, a8);
LABEL_53:
            v49 = 0;
            *(_DWORD *)(v30 + 93488) = 0;
            if (*v44)
            {
              v49 = *(_DWORD *)(*v44 - 12);
              if (v49 > 0x7FFFFFFE)
                v49 = 0x7FFFFFFF;
            }
            *(_DWORD *)(v30 + 93492) = 2 * v49;
            v50 = __ldxr(v45);
            if (v50 == 1)
            {
              if (!__stlxr(0, v45))
                goto LABEL_60;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v30 + 93496), 0, a3, a4, a5, a6, a7, a8);
LABEL_60:
            if (!v47)
            {
LABEL_61:
              if (v48)
                WTF::fastFree(v48, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_63;
            }
            v72 = *(_QWORD *)(v30 + 8);
            v73 = 8 * v47;
            v74 = v73;
            v75 = (uint64_t *)v48;
            do
            {
              v76 = *v75++;
              *(_QWORD *)(v76 + 16) = v72;
              v74 -= 8;
            }
            while (v74);
            v77 = (unsigned __int8 ***)v48;
            while (1)
            {
              v78 = *v77;
              *v77 = 0;
              if (v78)
                break;
LABEL_115:
              ++v77;
              v73 -= 8;
              if (!v73)
                goto LABEL_61;
            }
            v79 = *v78;
            if (__ldaxr(*v78))
            {
              __clrex();
            }
            else if (!__stxr(1u, v79))
            {
LABEL_120:
              v81 = *((_QWORD *)v79 + 1);
              v82 = v81 - 1;
              *((_QWORD *)v79 + 1) = v81 - 1;
              if (v81 == 1)
              {
                v118 = *((_QWORD *)v79 + 3);
                v113 = *((_QWORD *)v79 + 2);
                *((_QWORD *)v79 + 3) = 0;
                v83 = v113 == 0;
              }
              else
              {
                v83 = 0;
                v118 = 0;
              }
              v84 = __ldxr(v79);
              if (v84 == 1)
              {
                if (!__stlxr(0, v79))
                {
LABEL_127:
                  if (!v82)
                  {
                    v122 = (WTF::WordLock *)v79;
                    v123 = v118;
                    v124 = v83;
                    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v122, a2, a3, a4, a5, a6, a7, a8);
                  }
                  goto LABEL_115;
                }
              }
              else
              {
                __clrex();
              }
              WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v79, 0, a3, a4, a5, a6, a7, a8);
              goto LABEL_127;
            }
            v33 = (WTF::Thread *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v79);
            goto LABEL_120;
          }
LABEL_200:
          v119 = 0;
          LODWORD(v120) = 0;
          WTF::fastFree(v48, a2, a3, a4, a5, a6, a7, a8);
          v48 = (unint64_t)v119;
          goto LABEL_183;
        }
        i = v62;
        LODWORD(v118) = 0;
        v101 = (unsigned __int8 **)*v62;
LABEL_150:
        v117 = i;
        v102 = i[1];
        if (__ldaxr((unsigned __int8 *)v102))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v102))
        {
LABEL_153:
          if (*(_QWORD *)(v102 + 24))
            ++*(_QWORD *)(v102 + 8);
          else
            v101 = 0;
          v104 = __ldxr((unsigned __int8 *)v102);
          if (v104 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v102))
            {
LABEL_160:
              if (!v101)
              {
                LODWORD(v118) = 1;
                goto LABEL_174;
              }
              v121 = v101;
              v105 = HIDWORD(v120);
              if (HIDWORD(v120) == (_DWORD)v120)
              {
                v33 = (WTF::Thread *)WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>>((uint64_t)&v119, (unint64_t)&v121);
              }
              else
              {
                v121 = 0;
                *((_QWORD *)v119 + HIDWORD(v120)) = v101;
                HIDWORD(v120) = v105 + 1;
              }
              v106 = v121;
              v121 = 0;
              if (!v106)
              {
LABEL_174:
                for (i = v117 + 2; i != v99; i += 2)
                {
                  v101 = (unsigned __int8 **)*i;
                  if ((unint64_t)(*i + 1) > 1)
                  {
                    if (i != v99)
                      goto LABEL_150;
                    break;
                  }
                }
                LODWORD(v58) = v120;
                v63 = HIDWORD(v120);
                v48 = (unint64_t)v119;
                v64 = v118;
                goto LABEL_86;
              }
              v107 = *v106;
              if (__ldaxr(*v106))
              {
                __clrex();
              }
              else if (!__stxr(1u, v107))
              {
LABEL_167:
                v109 = *((_QWORD *)v107 + 1);
                v110 = v109 - 1;
                *((_QWORD *)v107 + 1) = v109 - 1;
                if (v109 == 1)
                {
                  v116 = *((_QWORD *)v107 + 3);
                  v114 = *((_QWORD *)v107 + 2);
                  *((_QWORD *)v107 + 3) = 0;
                  HIDWORD(v115) = v114 == 0;
                }
                else
                {
                  HIDWORD(v115) = 0;
                  v116 = 0;
                }
                v111 = __ldxr(v107);
                if (v111 == 1)
                {
                  if (!__stlxr(0, v107))
                  {
LABEL_179:
                    if (!v110)
                    {
                      v122 = (WTF::WordLock *)v107;
                      v123 = v116;
                      v124 = BYTE4(v115);
                      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::Wasm::Instance,(WTF::DestructionThread)0>(void)const::{lambda(void)#1}::operator()((uint64_t)&v122, a2, a3, a4, a5, a6, a7, a8);
                    }
                    goto LABEL_174;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v107, 0, a3, a4, a5, a6, a7, a8);
                goto LABEL_179;
              }
              v33 = (WTF::Thread *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v107);
              goto LABEL_167;
            }
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v102, 0, a3, a4, a5, a6, a7, a8);
          goto LABEL_160;
        }
        v33 = (WTF::Thread *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v102);
        goto LABEL_153;
      }
      __break(0xC471u);
LABEL_202:
      JUMPOUT(0x198A1C864);
    }
    v33 = (WTF::Thread *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v30 + 93496);
    goto LABEL_51;
  }
  return this;
}

void JSC::JSLock::lock(JSC::JSLock *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSLock *v8;
  unsigned __int8 *v9;
  int v10;
  JSC::JSLock *v11;
  unint64_t StatusReg;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF::Thread *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  int v38;
  uint64_t v39;
  int v40;
  JSC::SamplingProfiler *v41;
  int v42;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v8 = this;
  if (*((_BYTE *)this + 5))
    this = (JSC::JSLock *)WebCoreWebThreadLock();
  v9 = (unsigned __int8 *)v8 + 4;
  while (1)
  {
    v10 = *v9;
    if ((v10 & 1) != 0)
      break;
    v42 = __ldaxr(v9);
    if (v42 == v10)
    {
      if (!__stxr(v10 | 1, v9))
        goto LABEL_12;
    }
    else
    {
      __clrex();
    }
  }
  if (*((_BYTE *)v8 + 6))
  {
    v11 = (JSC::JSLock *)*((_QWORD *)v8 + 1);
    this = *(JSC::JSLock **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!this)
      this = (JSC::JSLock *)WTF::Thread::initializeCurrentTLS(0);
    if (v11 == this)
    {
      ++*((_QWORD *)v8 + 2);
      return;
    }
  }
  if (__ldaxr(v9))
  {
    __clrex();
LABEL_11:
    this = (JSC::JSLock *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v8 + 4);
    goto LABEL_12;
  }
  if (__stxr(1u, v9))
    goto LABEL_11;
LABEL_12:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v14 = *(unsigned int **)(StatusReg + 736);
  if (!v14)
    v14 = (unsigned int *)WTF::Thread::initializeCurrentTLS(this);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  v16 = (unsigned int *)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v14;
  if (v16)
  {
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::Thread::~Thread((WTF::Thread *)v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
  }
  __dmb(0xAu);
  *((_BYTE *)v8 + 6) = 1;
  *((_QWORD *)v8 + 2) = 1;
  v19 = (WTF::Thread *)*((_QWORD *)v8 + 4);
  if (v19)
  {
    v20 = *(_QWORD *)(StatusReg + 736);
    if (!v20)
    {
      v20 = WTF::Thread::initializeCurrentTLS(v19);
      v19 = (WTF::Thread *)*((_QWORD *)v8 + 4);
    }
    v21 = *(_QWORD *)(v20 + 56);
    *(_QWORD *)(v20 + 56) = *((_QWORD *)v19 + 5239);
    *((_QWORD *)v8 + 5) = v21;
    JSC::VM::setLastStackTop((uint64_t)v19, (const WTF::Thread *)v20);
    v29 = *((_QWORD *)v8 + 4);
    if ((*(_DWORD *)(v29 + 1096) & 4) != 0)
    {
      *((_BYTE *)v8 + 7) = 0;
LABEL_24:
      if (*(_QWORD *)(v29 + 93088))
      {
        __break(0xC471u);
        JUMPOUT(0x198A1CDF4);
      }
      JSC::VM::setStackPointerAtVMEntry(*((JSC::VM **)v8 + 4), &v52, v23, v24, v25, v26, v27, v28);
      v38 = *(_DWORD *)(v20 + 48);
      if (v38 != *((_DWORD *)v8 + 7))
      {
        *((_DWORD *)v8 + 7) = v38;
        WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(*((_QWORD *)v8 + 4) + 584), (uint64_t)v30, v31, v32, v33, v34, v35, v36);
      }
      v39 = *((_QWORD *)v8 + 4);
      v40 = *(_DWORD *)(v39 + 80);
      if ((v40 & 0x2F) != 0 && (v40 & 0x20) == 0)
      {
        JSC::VMTraps::invalidateCodeBlocksOnStack((JSC::VMTraps *)(v39 + 64), *(JSC::CallFrame **)(v39 + 40), v31, v32, v33, v34, v35, v36, v37);
        v39 = *((_QWORD *)v8 + 4);
      }
      v41 = *(JSC::SamplingProfiler **)(v39 + 93368);
      if (v41)
        JSC::SamplingProfiler::noticeJSLockAcquisition(v41, v30, v31, v32, v33, v34, v35, v36);
      return;
    }
    if (__ldaxr((unsigned int *)(v29 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v29 + 1096)))
    {
      goto LABEL_40;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v29 + 192), v22, v23, v24, v25, v26, v27, v28);
LABEL_40:
    *((_BYTE *)v8 + 7) = 1;
    v29 = *((_QWORD *)v8 + 4);
    goto LABEL_24;
  }
}

{
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count **v34;

  if (*((_BYTE *)this + 5))
    WebCoreWebThreadLock();
  v10 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v11 = *v10;
    if ((v11 & 1) != 0)
      break;
    v12 = __ldaxr(v10);
    if (v12 == v11)
    {
      if (!__stxr(v11 | 1, v10))
        goto LABEL_18;
    }
    else
    {
      __clrex();
    }
  }
  if (*((_BYTE *)this + 6))
  {
    v13 = *((_QWORD *)this + 1);
    v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v14)
      v14 = WTF::Thread::initializeCurrentTLS(0);
    if (v13 == v14)
    {
      *((_QWORD *)this + 2) += a2;
      return;
    }
  }
  if (__ldaxr(v10))
  {
    __clrex();
LABEL_17:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
    goto LABEL_18;
  }
  if (__stxr(1u, v10))
    goto LABEL_17;
LABEL_18:
  v16 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v16)
    v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v18 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v16;
  if (v18)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v18));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v18);
      v21 = *(unsigned int **)(v18 + 96);
      *(_QWORD *)(v18 + 96) = 0;
      if (v21)
      {
        v22 = v21 + 2;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v21 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v18 + 64), a2, a3, a4, a5, a6, a7, a8);
      v32 = *(_QWORD *)(v18 + 32);
      if (v32)
      {
        v33 = *(unsigned int *)(v32 - 4);
        if ((_DWORD)v33)
        {
          v34 = (std::__shared_weak_count **)(v32 + 16);
          do
          {
            if (*(v34 - 2) != (std::__shared_weak_count *)-1)
            {
              if (*v34)
                std::__shared_weak_count::__release_weak(*v34);
            }
            v34 += 3;
            --v33;
          }
          while (v33);
        }
        WTF::fastFree(v32 - 16, v25, v26, v27, v28, v29, v30, v31);
      }
      WTF::fastFree(v18, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  __dmb(0xAu);
  *((_BYTE *)this + 6) = 1;
  *((_QWORD *)this + 2) = a2;
  JSC::JSLock::didAcquireLock(this);
}

void JSC::JSLockHolder::~JSLockHolder(unsigned int **this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t StatusReg;
  uint64_t casual;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t *v26;
  unsigned int v27;
  unsigned int v28;
  _opaque_pthread_t *v29;
  unint64_t v31;
  char *stackaddr_np;
  _opaque_pthread_t *v33;
  unint64_t v34;
  int v35;
  _opaque_pthread_t *v36;
  rlim_t rlim_cur;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  rlimit *v78;
  rlimit v79;

  v9 = *((_QWORD *)*this + 14);
  do
    v10 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v10 + 1, (unsigned int *)v9));
  v11 = *this;
  *this = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      JSC::VM::~VM((JSC::VM *)v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
  }
  if (!*(_BYTE *)(v9 + 6))
  {
LABEL_59:
    __break(0xC471u);
    JUMPOUT(0x198A1D19CLL);
  }
  v14 = *(_QWORD *)(v9 + 8);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  casual = *(_QWORD *)(StatusReg + 736);
  if (!casual)
  {
    v22 = atomic_load(&WTF::initialize(void)::onceKey);
    if (v22 != -1)
    {
      v79.rlim_cur = (rlim_t)&v77;
      v78 = &v79;
      std::__call_once(&WTF::initialize(void)::onceKey, &v78, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
    }
    v23 = *(_QWORD *)(StatusReg + 752);
    if (v23)
    {
      v24 = (_BYTE *)(v23 + 9408);
      *(_BYTE *)(v23 + 9408) = 1;
      v25 = *(unsigned int *)(v23 + 9424);
      if ((_DWORD)v25)
      {
        *(_DWORD *)(v23 + 9424) = v25 - *(_DWORD *)(v23 + 9428);
        casual = *(_QWORD *)(v23 + 9416) - v25;
LABEL_24:
        *v24 = 0;
LABEL_25:
        *(_OWORD *)casual = 0u;
        *(_OWORD *)(casual + 16) = 0u;
        *(_QWORD *)(casual + 96) = 0;
        *(_OWORD *)(casual + 64) = 0u;
        *(_OWORD *)(casual + 80) = 0u;
        *(_OWORD *)(casual + 32) = 0u;
        *(_OWORD *)(casual + 48) = 0u;
        *(_DWORD *)casual = 1;
        *(_OWORD *)(casual + 8) = 0u;
        v26 = (unint64_t *)(casual + 8);
        *(_OWORD *)(casual + 24) = 0u;
        do
        {
          v27 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
          v28 = v27 + 1;
        }
        while (__stlxr(v28, (unsigned int *)&WTF::ThreadLike::s_uid));
        *(_DWORD *)(casual + 48) = v28;
        *(_QWORD *)(casual + 52) = 0;
        *(_QWORD *)(casual + 68) = 0;
        *(_QWORD *)(casual + 60) = 0;
        *(_DWORD *)(casual + 76) = 0;
        *(_QWORD *)(casual + 88) = 0;
        *(_QWORD *)(casual + 96) = 0;
        v29 = pthread_self();
        if (__ldaxr(v26))
        {
          __clrex();
        }
        else if (!__stxr(1uLL, v26))
        {
LABEL_30:
          *(_QWORD *)(casual + 40) = v29;
          *(_DWORD *)(casual + 52) = pthread_mach_thread_np(v29);
          v31 = __ldxr(v26);
          if (v31 == 1)
          {
            if (!__stlxr(0, v26))
              goto LABEL_35;
          }
          else
          {
            __clrex();
          }
          WTF::WordLock::unlockSlow((WTF::WordLock *)(casual + 8));
LABEL_35:
          stackaddr_np = *(char **)(casual + 16);
          if (!stackaddr_np)
          {
            v35 = pthread_main_np();
            v36 = pthread_self();
            stackaddr_np = (char *)pthread_get_stackaddr_np(v36);
            if (v35)
            {
              getrlimit(3, &v79);
              if (v79.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                rlim_cur = 0x800000;
              else
                rlim_cur = v79.rlim_cur;
            }
            else
            {
              rlim_cur = pthread_get_stacksize_np(v36);
            }
            *(_QWORD *)(casual + 16) = stackaddr_np;
            *(_QWORD *)(casual + 24) = &stackaddr_np[-rlim_cur];
          }
          *(_QWORD *)(casual + 80) = stackaddr_np;
          *(_QWORD *)(casual + 56) = casual + 64;
          v33 = pthread_self();
          if (pthread_equal(v33, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
          {
            v34 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
            if (v34 != -1)
            {
              v79.rlim_cur = (rlim_t)&v77;
              v78 = &v79;
              std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v78, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
            }
            *(_QWORD *)(casual + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
          }
          *(_QWORD *)(StatusReg + 736) = casual;
          pthread_key_init_np();
          goto LABEL_9;
        }
        WTF::WordLock::lockSlow((WTF::WordLock *)(casual + 8));
        goto LABEL_30;
      }
      v38 = *(_QWORD *)(v23 + 9448);
      v39 = *(_QWORD *)(v23 + 9432);
      if (v38)
      {
LABEL_51:
        v40 = __clz(v38);
        *(_QWORD *)(v23 + 9448) = v38 & ~(0x8000000000000000 >> v40);
        casual = v39 + 16 * v40;
        goto LABEL_24;
      }
      if (*(_BYTE *)(v23 + 9413) == 6)
      {
        v63 = *(_DWORD *)(v23 + 9444);
        v64 = *(unsigned int *)(v23 + 9440);
        if (v64 < v63)
        {
          *(_QWORD *)&v24[8 * v64 + 56] = 0;
          v65 = (unint64_t *)(v23 + 8 * v64 + 9472);
          v66 = v63 - 1 - v64;
          while (v66)
          {
            v39 += 1024;
            v68 = *v65++;
            v67 = v68;
            LODWORD(v64) = v64 + 1;
            --v66;
            if (v68)
            {
              v38 = __rbit64(v67);
              *(_DWORD *)(v23 + 9440) = v64;
              *(_QWORD *)(v23 + 9432) = v39;
              goto LABEL_51;
            }
          }
          *(_DWORD *)(v23 + 9440) = v63;
        }
      }
      *v24 = 0;
    }
    casual = bmalloc_allocate_casual(104, 1);
    goto LABEL_25;
  }
LABEL_9:
  if (v14 != casual)
    goto LABEL_59;
  if (*(_QWORD *)(v9 + 16) != 1)
  {
    --*(_QWORD *)(v9 + 16);
    goto LABEL_12;
  }
  JSC::JSLock::willReleaseLock((JSC::JSLock *)v9, a2, a3, a4, a5, a6, a7, a8);
  v41 = *(_QWORD *)(v9 + 16) - 1;
  *(_QWORD *)(v9 + 16) = v41;
  if (!v41)
  {
    *(_BYTE *)(v9 + 6) = 0;
    v42 = (unsigned __int8 *)(v9 + 4);
    v43 = __ldxr((unsigned __int8 *)(v9 + 4));
    if (v43 == 1)
    {
      if (!__stlxr(0, v42))
        goto LABEL_12;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v42, 0, a3, a4, a5, a6, a7, a8);
    goto LABEL_12;
  }
  do
  {
LABEL_12:
    v17 = __ldaxr((unsigned int *)v9);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, (unsigned int *)v9));
  if (!v18)
  {
    atomic_store(1u, (unsigned int *)v9);
    v52 = *(unsigned int **)(v9 + 8);
    *(_QWORD *)(v9 + 8) = 0;
    if (v52)
    {
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v52);
        WTF::Thread::~Thread((WTF::Thread *)v52, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
      }
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v19 = *this;
  *this = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      JSC::VM::~VM((JSC::VM *)v19, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
  }
}

void JSC::JSLock::unlock(JSC::JSLock *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;

  if (!*((_BYTE *)this + 6))
    goto LABEL_14;
  v9 = *((_QWORD *)this + 1);
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10)
    v10 = WTF::Thread::initializeCurrentTLS(0);
  if (v9 != v10)
  {
LABEL_14:
    __break(0xC471u);
    return;
  }
  if (*((_QWORD *)this + 2) != 1)
  {
    --*((_QWORD *)this + 2);
    return;
  }
  JSC::JSLock::willReleaseLock(this, a2, a3, a4, a5, a6, a7, a8);
  v17 = *((_QWORD *)this + 2) - 1;
  *((_QWORD *)this + 2) = v17;
  if (!v17)
  {
    *((_BYTE *)this + 6) = 0;
    v18 = (unsigned __int8 *)this + 4;
    v19 = __ldxr((unsigned __int8 *)this + 4);
    if (v19 == 1)
    {
      if (!__stlxr(0, v18))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v18, 0, v11, v12, v13, v14, v15, v16);
  }
}

void JSC::JSLock::~JSLock(JSC::JSLock *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::Thread::~Thread((WTF::Thread *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }
}

{
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count **v24;

  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v8));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v8);
      v11 = *(unsigned int **)(v8 + 96);
      *(_QWORD *)(v8 + 96) = 0;
      if (v11)
      {
        v12 = v11 + 2;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v11 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v8 + 64), a2, a3, a4, a5, a6, a7, a8);
      v22 = *(_QWORD *)(v8 + 32);
      if (v22)
      {
        v23 = *(unsigned int *)(v22 - 4);
        if ((_DWORD)v23)
        {
          v24 = (std::__shared_weak_count **)(v22 + 16);
          do
          {
            if (*(v24 - 2) != (std::__shared_weak_count *)-1)
            {
              if (*v24)
                std::__shared_weak_count::__release_weak(*v24);
            }
            v24 += 3;
            --v23;
          }
          while (v23);
        }
        WTF::fastFree(v22 - 16, v15, v16, v17, v18, v19, v20, v21);
      }
      WTF::fastFree(v8, v15, v16, v17, v18, v19, v20, v21);
    }
  }
}

BOOL JSC::JSLock::currentThreadIsHoldingLock(JSC::JSLock *this)
{
  uint64_t v1;
  unint64_t StatusReg;
  uint64_t casual;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  _opaque_pthread_t *v12;
  unint64_t v14;
  char *stackaddr_np;
  _opaque_pthread_t *v16;
  unint64_t v17;
  int v18;
  _opaque_pthread_t *v19;
  rlim_t rlim_cur;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  rlimit *v31;
  rlimit v32;

  if (*((_BYTE *)this + 6))
  {
    v1 = *((_QWORD *)this + 1);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    casual = *(_QWORD *)(StatusReg + 736);
    if (casual)
      return v1 == casual;
    v5 = atomic_load(&WTF::initialize(void)::onceKey);
    if (v5 != -1)
    {
      v32.rlim_cur = (rlim_t)&v30;
      v31 = &v32;
      std::__call_once(&WTF::initialize(void)::onceKey, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
    }
    v6 = *(_QWORD *)(StatusReg + 752);
    if (v6)
    {
      v7 = (_BYTE *)(v6 + 9408);
      *(_BYTE *)(v6 + 9408) = 1;
      v8 = *(unsigned int *)(v6 + 9424);
      if ((_DWORD)v8)
      {
        *(_DWORD *)(v6 + 9424) = v8 - *(_DWORD *)(v6 + 9428);
        casual = *(_QWORD *)(v6 + 9416) - v8;
LABEL_9:
        *v7 = 0;
LABEL_10:
        *(_OWORD *)casual = 0u;
        *(_OWORD *)(casual + 16) = 0u;
        *(_QWORD *)(casual + 96) = 0;
        *(_OWORD *)(casual + 64) = 0u;
        *(_OWORD *)(casual + 80) = 0u;
        *(_OWORD *)(casual + 32) = 0u;
        *(_OWORD *)(casual + 48) = 0u;
        *(_DWORD *)casual = 1;
        *(_OWORD *)(casual + 8) = 0u;
        v9 = (unint64_t *)(casual + 8);
        *(_OWORD *)(casual + 24) = 0u;
        do
        {
          v10 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
          v11 = v10 + 1;
        }
        while (__stlxr(v11, (unsigned int *)&WTF::ThreadLike::s_uid));
        *(_DWORD *)(casual + 48) = v11;
        *(_QWORD *)(casual + 52) = 0;
        *(_QWORD *)(casual + 68) = 0;
        *(_QWORD *)(casual + 60) = 0;
        *(_DWORD *)(casual + 76) = 0;
        *(_QWORD *)(casual + 88) = 0;
        *(_QWORD *)(casual + 96) = 0;
        v12 = pthread_self();
        if (__ldaxr(v9))
        {
          __clrex();
        }
        else if (!__stxr(1uLL, v9))
        {
LABEL_15:
          *(_QWORD *)(casual + 40) = v12;
          *(_DWORD *)(casual + 52) = pthread_mach_thread_np(v12);
          v14 = __ldxr(v9);
          if (v14 == 1)
          {
            if (!__stlxr(0, v9))
            {
LABEL_17:
              stackaddr_np = *(char **)(casual + 16);
              if (!stackaddr_np)
              {
                v18 = pthread_main_np();
                v19 = pthread_self();
                stackaddr_np = (char *)pthread_get_stackaddr_np(v19);
                if (v18)
                {
                  getrlimit(3, &v32);
                  if (v32.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                    rlim_cur = 0x800000;
                  else
                    rlim_cur = v32.rlim_cur;
                }
                else
                {
                  rlim_cur = pthread_get_stacksize_np(v19);
                }
                *(_QWORD *)(casual + 16) = stackaddr_np;
                *(_QWORD *)(casual + 24) = &stackaddr_np[-rlim_cur];
              }
              *(_QWORD *)(casual + 80) = stackaddr_np;
              *(_QWORD *)(casual + 56) = casual + 64;
              v16 = pthread_self();
              if (pthread_equal(v16, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
              {
                v17 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
                if (v17 != -1)
                {
                  v32.rlim_cur = (rlim_t)&v30;
                  v31 = &v32;
                  std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
                }
                *(_QWORD *)(casual + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
              }
              *(_QWORD *)(StatusReg + 736) = casual;
              pthread_key_init_np();
              return v1 == casual;
            }
          }
          else
          {
            __clrex();
          }
          WTF::WordLock::unlockSlow((WTF::WordLock *)(casual + 8));
          goto LABEL_17;
        }
        WTF::WordLock::lockSlow((WTF::WordLock *)(casual + 8));
        goto LABEL_15;
      }
      v21 = *(_QWORD *)(v6 + 9448);
      v22 = *(_QWORD *)(v6 + 9432);
      if (v21)
      {
LABEL_35:
        v23 = __clz(v21);
        *(_QWORD *)(v6 + 9448) = v21 & ~(0x8000000000000000 >> v23);
        casual = v22 + 16 * v23;
        goto LABEL_9;
      }
      if (*(_BYTE *)(v6 + 9413) == 6)
      {
        v24 = *(_DWORD *)(v6 + 9444);
        v25 = *(unsigned int *)(v6 + 9440);
        if (v25 < v24)
        {
          *(_QWORD *)&v7[8 * v25 + 56] = 0;
          v26 = (unint64_t *)(v6 + 8 * v25 + 9472);
          v27 = v24 - 1 - v25;
          while (v27)
          {
            v22 += 1024;
            v29 = *v26++;
            v28 = v29;
            LODWORD(v25) = v25 + 1;
            --v27;
            if (v29)
            {
              v21 = __rbit64(v28);
              *(_DWORD *)(v6 + 9440) = v25;
              *(_QWORD *)(v6 + 9432) = v22;
              goto LABEL_35;
            }
          }
          *(_DWORD *)(v6 + 9440) = v24;
        }
      }
      *v7 = 0;
    }
    casual = bmalloc_allocate_casual(104, 1);
    goto LABEL_10;
  }
  return 0;
}

void JSC::JSLock::didAcquireLock(JSC::JSLock *this)
{
  WTF::Thread *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  int v21;
  uint64_t v22;
  int v23;
  JSC::SamplingProfiler *v24;
  uint64_t v26;

  v2 = (WTF::Thread *)*((_QWORD *)this + 4);
  if (!v2)
    return;
  v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v3)
  {
    v3 = WTF::Thread::initializeCurrentTLS(v2);
    v2 = (WTF::Thread *)*((_QWORD *)this + 4);
  }
  v4 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 56) = *((_QWORD *)v2 + 5239);
  *((_QWORD *)this + 5) = v4;
  JSC::VM::setLastStackTop((uint64_t)v2, (const WTF::Thread *)v3);
  v12 = *((_QWORD *)this + 4);
  if ((*(_DWORD *)(v12 + 1096) & 4) == 0)
  {
    if (__ldaxr((unsigned int *)(v12 + 1096)))
    {
      __clrex();
    }
    else if (!__stlxr(4u, (unsigned int *)(v12 + 1096)))
    {
      goto LABEL_15;
    }
    JSC::Heap::acquireAccessSlow((JSC::Heap *)(v12 + 192), v5, v6, v7, v8, v9, v10, v11);
LABEL_15:
    *((_BYTE *)this + 7) = 1;
    v12 = *((_QWORD *)this + 4);
    goto LABEL_6;
  }
  *((_BYTE *)this + 7) = 0;
LABEL_6:
  if (*(_QWORD *)(v12 + 93088))
  {
    __break(0xC471u);
    JUMPOUT(0x198A1DA90);
  }
  JSC::VM::setStackPointerAtVMEntry(*((JSC::VM **)this + 4), &v26, v6, v7, v8, v9, v10, v11);
  v21 = *(_DWORD *)(v3 + 48);
  if (v21 != *((_DWORD *)this + 7))
  {
    *((_DWORD *)this + 7) = v21;
    WTF::ThreadGroup::addCurrentThread(**(WTF::ThreadGroup ***)(*((_QWORD *)this + 4) + 584), (uint64_t)v13, v14, v15, v16, v17, v18, v19);
  }
  v22 = *((_QWORD *)this + 4);
  v23 = *(_DWORD *)(v22 + 80);
  if ((v23 & 0x2F) != 0 && (v23 & 0x20) == 0)
  {
    JSC::VMTraps::invalidateCodeBlocksOnStack((JSC::VMTraps *)(v22 + 64), *(JSC::CallFrame **)(v22 + 40), v14, v15, v16, v17, v18, v19, v20);
    v22 = *((_QWORD *)this + 4);
  }
  v24 = *(JSC::SamplingProfiler **)(v22 + 93368);
  if (v24)
    JSC::SamplingProfiler::noticeJSLockAcquisition(v24, v13, v14, v15, v16, v17, v18, v19);
}

void JSC::JSLock::unlock(JSC::JSLock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;

  if (!*((_BYTE *)this + 6))
    goto LABEL_13;
  v10 = *((_QWORD *)this + 1);
  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = WTF::Thread::initializeCurrentTLS(0);
  if (v10 != v11)
  {
LABEL_13:
    __break(0xC471u);
    return;
  }
  v12 = *((_QWORD *)this + 2);
  if (v12 == a2)
  {
    JSC::JSLock::willReleaseLock(this);
    v12 = *((_QWORD *)this + 2);
  }
  v13 = v12 - a2;
  *((_QWORD *)this + 2) = v13;
  if (!v13)
  {
    *((_BYTE *)this + 6) = 0;
    v14 = (unsigned __int8 *)this + 4;
    v15 = __ldxr((unsigned __int8 *)this + 4);
    if (v15 == 1)
    {
      if (!__stlxr(0, v14))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v14, 0, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::JSLock::willReleaseLock(JSC::JSLock *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char **v40;
  char *v41;

  v9 = *((_QWORD *)this + 4);
  if (!v9)
    goto LABEL_16;
  do
    v10 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v10 + 1, (unsigned int *)v9));
  v11 = atomic_load(&qword_1ECF58F08);
  if (v11 != -1)
  {
    v41 = &v39;
    v40 = &v41;
    std::__call_once(&qword_1ECF58F08, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::JSLock::willReleaseLock(void)::$_0 &&>>);
  }
  if (*((_DWORD *)this + 6))
    v12 = _MergedGlobals_45 == 0;
  else
    v12 = 0;
  if (!v12)
    JSC::VM::drainMicrotasks((JSC::VM *)v9, a2, a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v9 + 40))
    *(_QWORD *)(v9 + 32) = 0;
  JSC::Heap::releaseDelayedReleasedObjects(v9 + 192);
  JSC::VM::setStackPointerAtVMEntry((JSC::VM *)v9, 0, v13, v14, v15, v16, v17, v18);
  if (*((_BYTE *)this + 7))
  {
    v30 = __ldaxr((unsigned int *)(v9 + 1096));
    if (v30 == 4)
    {
      if (!__stlxr(0, (unsigned int *)(v9 + 1096)))
        goto LABEL_13;
    }
    else
    {
      __clrex();
    }
    JSC::Heap::releaseAccessSlow((JSC::Heap *)(v9 + 192), v19, v20, v21, v22, v23, v24, v25);
    goto LABEL_13;
  }
  do
  {
LABEL_13:
    v26 = __ldaxr((unsigned int *)v9);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, (unsigned int *)v9));
  if (!v27)
  {
    atomic_store(1u, (unsigned int *)v9);
    JSC::VM::~VM((JSC::VM *)v9, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
  }
LABEL_16:
  v28 = *((_QWORD *)this + 5);
  if (v28)
  {
    v29 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v29)
    {
      v29 = WTF::Thread::initializeCurrentTLS(0);
      v28 = *((_QWORD *)this + 5);
    }
    *(_QWORD *)(v29 + 56) = v28;
    *((_QWORD *)this + 5) = 0;
  }
}

uint64_t JSC::JSLock::dropAllLocks(JSC::JSLock *this, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v22;
  int v23;

  if (!*((_BYTE *)this + 6))
    return 0;
  v10 = *((_QWORD *)this + 1);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = *(_QWORD *)(StatusReg + 736);
  if (!v12)
    v12 = WTF::Thread::initializeCurrentTLS(0);
  if (v10 != v12)
    return 0;
  v13 = *((_DWORD *)this + 6) + 1;
  *((_DWORD *)this + 6) = v13;
  a2[4] = v13;
  v14 = *(_QWORD *)(StatusReg + 736);
  if (!v14)
    v14 = WTF::Thread::initializeCurrentTLS(0);
  v15 = *(_QWORD *)(*((_QWORD *)this + 4) + 93112);
  *(_QWORD *)(v14 + 72) = *(_QWORD *)(*((_QWORD *)this + 4) + 93088);
  *(_QWORD *)(v14 + 80) = v15;
  if (!*((_BYTE *)this + 6))
    goto LABEL_20;
  v17 = *((_QWORD *)this + 1);
  v16 = *((_QWORD *)this + 2);
  v18 = *(_QWORD *)(StatusReg + 736);
  if (!v18)
    v18 = WTF::Thread::initializeCurrentTLS(0);
  if (v17 != v18)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x198A1DDE8);
  }
  v19 = *((_QWORD *)this + 2);
  if (v19 == v16)
  {
    JSC::JSLock::willReleaseLock(this, a2, a3, a4, a5, a6, a7, a8);
    v19 = *((_QWORD *)this + 2);
  }
  v20 = v19 - v16;
  *((_QWORD *)this + 2) = v20;
  if (!v20)
  {
    *((_BYTE *)this + 6) = 0;
    v22 = (unsigned __int8 *)this + 4;
    v23 = __ldxr((unsigned __int8 *)this + 4);
    if (v23 == 1)
    {
      if (!__stlxr(0, v22))
        return v16;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v22, 0, a3, a4, a5, a6, a7, a8);
  }
  return v16;
}

JSC::JSLock *JSC::JSLock::grabAllLocks(JSC::JSLock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSLock *v9;
  uint64_t v10;
  WTF::Thread *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void **v19;
  WTF::Thread *v20;

  if ((_DWORD)a3)
  {
    v9 = this;
    v10 = a3;
    JSC::JSLock::lock(this, (void *)a3, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a2 + 16);
    if (v18 != *((_DWORD *)v9 + 6))
    {
      JSC::JSLock::unlock(v9, v10, v12, v13, v14, v15, v16, v17);
      WTF::Thread::yield(v20);
    }
    *((_DWORD *)v9 + 6) = v18 - 1;
    v19 = *(void ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v19)
      v19 = (void **)WTF::Thread::initializeCurrentTLS(v11);
    JSC::VM::setStackPointerAtVMEntry(*((JSC::VM **)v9 + 4), v19[9], v12, v13, v14, v15, v16, v17);
    return (JSC::JSLock *)JSC::VM::setLastStackTop(*((_QWORD *)v9 + 4), (const WTF::Thread *)v19);
  }
  return this;
}

JSC::JSLock::DropAllLocks *JSC::JSLock::DropAllLocks::DropAllLocks(JSC::JSLock::DropAllLocks *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t StatusReg;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *v17;

  *(_QWORD *)this = 0;
  if (!a2 || (v9 = a2, *((_BYTE *)a2 + 754)))
  {
    *((_QWORD *)this + 1) = 0;
    return this;
  }
  do
    v10 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v10 + 1, (unsigned int *)a2));
  *((_QWORD *)this + 1) = a2;
  v11 = *((_QWORD *)a2 + 14);
  if (*(_BYTE *)(v11 + 6))
  {
    v12 = *(_QWORD *)(v11 + 8);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v14 = *(_QWORD *)(StatusReg + 736);
    if (!v14)
    {
      v14 = WTF::Thread::initializeCurrentTLS(0);
      v9 = (JSC::VM *)*((_QWORD *)this + 1);
    }
    if (v12 == v14)
    {
      v15 = *(_QWORD *)(StatusReg + 736);
      if (!v15)
        v15 = WTF::Thread::initializeCurrentTLS(0);
      if (*(unsigned __int8 *)(v15 + 5) >= 0x40u)
      {
        v17 = (JSC::VM *)*((_QWORD *)this + 1);
      }
      else
      {
        v16 = *(_QWORD *)(StatusReg + 736);
        if (!v16)
          v16 = WTF::Thread::initializeCurrentTLS(0);
        v17 = (JSC::VM *)*((_QWORD *)this + 1);
        if ((*(_BYTE *)(v16 + 5) & 8) == 0 && !*((_BYTE *)v9 + 202))
          goto LABEL_15;
      }
      JSC::JSLock::currentThreadIsHoldingLock(*((JSC::JSLock **)v17 + 14));
      JSC::VM::isCollectorBusyOnCurrentThread(*((JSC::VM **)this + 1));
      JSC::JSLock::currentThreadIsHoldingLock(*(JSC::JSLock **)(*((_QWORD *)this + 1) + 112));
      JSC::VM::isCollectorBusyOnCurrentThread(*((JSC::VM **)this + 1));
      WTFCrashWithInfoImpl(296, "./runtime/JSLock.cpp", "JSC::JSLock::DropAllLocks::DropAllLocks(VM *)");
    }
  }
  v17 = v9;
LABEL_15:
  *(_QWORD *)this = JSC::JSLock::dropAllLocks(*((JSC::JSLock **)v17 + 14), this, a3, a4, a5, a6, a7, a8);
  return this;
}

BOOL JSC::VM::isCollectorBusyOnCurrentThread(JSC::VM *this)
{
  unint64_t StatusReg;
  uint64_t v3;
  uint64_t v4;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v3 = *(_QWORD *)(StatusReg + 736);
  if (!v3)
    v3 = WTF::Thread::initializeCurrentTLS(0);
  if (*(unsigned __int8 *)(v3 + 5) > 0x3Fu)
    return 1;
  v4 = *(_QWORD *)(StatusReg + 736);
  if (!v4)
    v4 = WTF::Thread::initializeCurrentTLS(0);
  return (*(_BYTE *)(v4 + 5) & 8) != 0 || *((_BYTE *)this + 202) != 0;
}

JSC::JSLock::DropAllLocks *JSC::JSLock::DropAllLocks::DropAllLocks(JSC::JSLock::DropAllLocks *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
    a2 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 7);
  return JSC::JSLock::DropAllLocks::DropAllLocks(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  if (a2)
    a2 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 7);
  return JSC::JSLock::DropAllLocks::DropAllLocks(this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::JSLock::DropAllLocks::~DropAllLocks(JSC::JSLock::DropAllLocks *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;

  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v9 + 112), (uint64_t)this, *(unsigned int *)this, a4, a5, a6, a7, a8);
    v17 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v17)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v17, v10, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;

  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    JSC::JSLock::grabAllLocks(*(JSC::JSLock **)(v9 + 112), (uint64_t)this, *(unsigned int *)this, a4, a5, a6, a7, a8);
    v17 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v17)
      WTF::ThreadSafeRefCounted<JSC::VM,(WTF::DestructionThread)0>::deref(v17, v10, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

unint64_t JSC::JSMap::clone(JSC::JSMap *this, JSC::JSGlobalObject *a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  JSC::VM *v14;
  JSC::JSMap *v15;
  JSC::JSGlobalObject *v16;
  JSC::Structure *v17;
  char *v18;
  uint64_t v19;
  JSC::JSMap *v20;
  JSC::JSGlobalObject *v21;
  JSC::Structure *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t SlowCase;
  JSC::VM *v27;

  v9 = (JSC::Heap *)*((_QWORD *)a3 + 5083);
  if (!v9)
  {
    v14 = a3;
    v15 = this;
    v16 = a2;
    v17 = (JSC::Structure *)a4;
    v9 = JSC::GCClient::Heap::mapSpaceSlow((JSC::Heap **)a3 + 4694);
    a4 = (uint64_t)v17;
    a2 = v16;
    this = v15;
    a3 = v14;
  }
  v10 = *((_QWORD *)v9 + 3);
  if (v10 >= *((_QWORD *)v9 + 4))
  {
    v10 = *((_QWORD *)v9 + 5);
    if ((v10 & 1) != 0)
    {
      v18 = (char *)a3 + 192;
      v19 = (uint64_t)v9;
      v27 = a3;
      v20 = this;
      v21 = a2;
      v22 = (JSC::Structure *)a4;
      JSC::sanitizeStackForVM(a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v19, (uint64_t)v18, 32, 0, 0, v23, v24, v25);
      a4 = (uint64_t)v22;
      a2 = v21;
      this = v20;
      a3 = v27;
      v10 = SlowCase;
      goto LABEL_5;
    }
    v13 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 4) = v10 + HIDWORD(v13);
    *((_QWORD *)v9 + 5) = v10 + (int)v13;
  }
  *((_QWORD *)v9 + 3) = v10 + 32;
LABEL_5:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)v10 = (unint64_t)a4 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  JSC::OrderedHashTable<JSC::MapTraits>::finishCreation(v10, a2, (uint64_t)a3, (uint64_t)this, a5, a6, a7, a8);
  return v10;
}

uint64_t JSC::OrderedHashTable<JSC::MapTraits>::finishCreation(uint64_t result, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC *v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  JSC *v30;
  char *v31;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  int **v44;
  int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  JSC *v54;
  char *v55;
  BOOL v56;
  BOOL v57;
  char *v58;
  unint64_t v59;
  char *v60;
  BOOL hasExceptionsAfterHandlingTraps;
  BOOL v62;
  JSC *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  JSC::JSBigInt *v67;
  JSC *v68;
  char *v69;
  JSC *v70;
  JSC *v71;
  JSC *v72;
  JSC *v73;
  JSC *v74;
  JSC *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  int **v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  char *v98;
  JSC *v99;

  v10 = result;
  if (*(_BYTE *)(a3 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(a4 + 16);
  if (v11)
  {
    v14 = *(_QWORD *)(v11 + 16);
    v12 = v11 + 16;
    LODWORD(v13) = v14;
    v15 = *(_QWORD *)(v12 + 16);
    v83 = *(_DWORD *)(v12 + 8);
    v99 = (JSC *)*((_QWORD *)a2 + 7);
    v16 = v99;
    v17 = 4 * v15 + 4;
    v89 = v15;
    v98 = (char *)v99 + 41656;
    v84 = v14;
    if (v17 >= 0x10000001)
    {
      result = (uint64_t)JSC::throwOutOfMemoryError(a2, (JSC::JSGlobalObject *)&v99);
      v31 = (char *)v16 + 41656;
      v30 = v16;
      v32 = 0;
    }
    else
    {
      v18 = *((_QWORD *)v99 + 5207);
      v19 = JSC::tryAllocateCell<JSC::JSImmutableButterfly>(v99, (JSC::VM *)(8 * (4 * v15 + 4) + 16), a3, a4, a5, a6, a7, a8);
      if (v19)
      {
        v20 = v15;
        v13 = v13;
        v21 = (_QWORD *)v19;
        result = JSC::JSImmutableButterfly::JSImmutableButterfly(v19, (uint64_t)v99, v18, v17);
        v30 = v99;
        if (*((_BYTE *)v99 + 755))
          __dmb(0xAu);
        v21[2] = v13 | 0xFFFE000000000000;
        v21[3] = 0xFFFE000000000000;
        v21[4] = v20 | 0xFFFE000000000000;
        v31 = (char *)v16 + 41656;
        v32 = (unint64_t)v21;
      }
      else
      {
        result = (uint64_t)JSC::throwOutOfMemoryError(a2, (JSC::JSGlobalObject *)&v99);
        v32 = 0;
        v30 = v16;
        v31 = (char *)v16 + 41656;
      }
    }
    if (*((_DWORD *)v30 + 20))
    {
      v63 = v30;
      v64 = v31;
      v65 = v32;
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)v22, v23, v24, v25, v26, v27, v28);
      v32 = v65;
      v31 = v64;
      v30 = v63;
      if ((result & 1) != 0)
      {
LABEL_49:
        v32 = 0;
        goto LABEL_50;
      }
    }
    v33 = v83 + v84;
    if (!(v83 + v84))
    {
LABEL_50:
      if (!*(_DWORD *)(a3 + 80)
        || (v66 = v32,
            result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a3, (uint64_t)v22, v23, v24, v25, v26, v27, v28),
            v32 = v66,
            (result & 1) == 0))
      {
        *(_QWORD *)(v10 + 16) = v32;
        if (v10 && v32 && *(_DWORD *)(a3 + 760) >= *(unsigned __int8 *)(v10 + 7))
          return JSC::Heap::writeBarrierSlowPath(a3 + 192, v10);
      }
      return result;
    }
    v34 = v89 + 1;
    v35 = v32 + 16;
    v36 = v89 - 1;
    v37 = v89 + 5;
    while (1)
    {
      v38 = *(_QWORD *)(v12 + 8 * (v37 - 1));
      v39 = v38 & 0xFFFE000000000002;
      if ((v38 & 0xFFFE000000000002) != 0)
      {
        v40 = (v34 + 3);
        *(_QWORD *)(v35 + 8 * v40) = v38;
      }
      else
      {
        result = *((_QWORD *)v31 + 23);
        if (!result)
        {
          v72 = v30;
          v79 = v32;
          v58 = v31;
          v93 = v36;
          result = JSC::Symbol::create(v30, v22, v23, v24, v25, v26, v27, v28);
          v39 = v38 & 0xFFFE000000000002;
          v36 = v93;
          v30 = v72;
          v32 = v79;
          v31 = v58;
          *((_QWORD *)v58 + 23) = result;
        }
        if (result == v38)
          goto LABEL_32;
        v40 = (v34 + 3);
        *(_QWORD *)(v35 + 8 * v40) = v38;
        if (v32 && v38)
        {
          v86 = v39;
          v94 = v36;
          if (*((_DWORD *)v30 + 190) >= *(unsigned __int8 *)(v32 + 7))
          {
            v75 = v30;
            v81 = v32;
            JSC::Heap::writeBarrierSlowPath((uint64_t)v30 + 192, v32);
            v30 = v75;
            v32 = v81;
          }
          v31 = v98;
          v36 = v94;
          v39 = v86;
        }
      }
      v41 = *(_QWORD *)(v12 + 8 * v37);
      *(_QWORD *)(v35 + 8 * (v34 + 4)) = v41;
      if (v41)
        v42 = (v41 & 0xFFFE000000000002) == 0;
      else
        v42 = 0;
      if (v42 && *((_DWORD *)v30 + 190) >= *(unsigned __int8 *)(v32 + 7))
      {
        v59 = v32;
        v73 = v30;
        v95 = v36;
        v87 = v39;
        JSC::Heap::writeBarrierSlowPath((uint64_t)v30 + 192, v32);
        v39 = v87;
        v36 = v95;
        v32 = v59;
        v31 = v98;
        v30 = v73;
      }
      if (!v39)
      {
        v43 = *(unsigned __int8 *)(v38 + 5);
        if (v43 == 2)
        {
          v44 = (int **)(v38 + 8);
          if ((*(_BYTE *)(v38 + 8) & 1) != 0)
          {
            v71 = v30;
            v77 = v32;
            v53 = v31;
            v91 = v36;
            v44 = JSC::JSRopeString::resolveRope(v38, a2, v23, v24, v29, v25, v26, v27, v28);
            v36 = v91;
            v30 = v71;
            v32 = v77;
            v31 = v53;
          }
          if (!*((_DWORD *)v30 + 20))
            goto LABEL_28;
          v88 = v44;
          v74 = v30;
          v80 = v32;
          v60 = v31;
          v96 = v36;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)v22, v23, v24, v25, v26, v27, v28);
          v36 = v96;
          v30 = v74;
          v32 = v80;
          v31 = v60;
          v62 = hasExceptionsAfterHandlingTraps;
          v44 = v88;
          if (v62)
          {
            result = 0xFFFFFFFFLL;
          }
          else
          {
LABEL_28:
            v45 = *v44;
            v46 = v45[4];
            if (v46 < 0x100)
            {
              v70 = v30;
              v76 = v32;
              v52 = v31;
              v90 = v36;
              result = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v45);
              v36 = v90;
              v30 = v70;
              v32 = v76;
              v31 = v52;
            }
            else
            {
              result = v46 >> 8;
            }
          }
          goto LABEL_30;
        }
        if (v43 == 3)
        {
          result = *(unsigned int *)(v38 + 12);
          if (!(_DWORD)result)
          {
            v67 = (JSC::JSBigInt *)v38;
            v68 = v30;
            v69 = v31;
            v82 = v32;
            v97 = v36;
            result = JSC::JSBigInt::hashSlow(v67);
            v36 = v97;
            v32 = v82;
            v31 = v69;
            v30 = v68;
          }
          goto LABEL_30;
        }
      }
      v49 = (v38 + ~(v38 << 32)) ^ ((v38 + ~(v38 << 32)) >> 22);
      v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
      v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
      result = (v51 >> 31) ^ v51;
LABEL_30:
      if (*((_DWORD *)v30 + 20))
      {
        v85 = result;
        v54 = v30;
        v55 = v31;
        v78 = v32;
        v92 = v36;
        v56 = JSC::VM::hasExceptionsAfterHandlingTraps(v30, (uint64_t)v22, v23, v24, v25, v26, v27, v28);
        v36 = v92;
        v32 = v78;
        v31 = v55;
        v30 = v54;
        v57 = v56;
        result = v85;
        if (v57)
          goto LABEL_49;
      }
      v47 = (result & v36) + 4;
      v48 = *(_QWORD *)(v35 + 8 * v47);
      *(_QWORD *)(v35 + 8 * v47) = v40 | 0xFFFE000000000000;
      *(_QWORD *)(v35 + 8 * (v40 + 2)) = v48;
      v34 = v40;
LABEL_32:
      v37 += 3;
      if (!--v33)
        goto LABEL_50;
    }
  }
  return result;
}

uint64_t JSC::JSGlobalObject::mapPrototype(unint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  v1 = *(_QWORD *)(this + 1520);
  if ((v1 & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v5 = (_QWORD *)(this - 16);
    v6[0] = *v5;
    v6[1] = this;
    v6[2] = this + 1520;
    v1 = v4(v6);
  }
  v2 = *(_QWORD *)(v1 + 48);
  if (v2 == 2)
    return 0;
  else
    return v2;
}

BOOL JSC::JSMap::isIteratorProtocolFastAndNonObservable(JSC::JSMap *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  JSC::VM *v6;
  uint64_t v7;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;
  uint64_t v11;
  const JSC::PropertyTable *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];

  v2 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  v3 = *(_QWORD *)(v2 + 0x28);
  v4 = *(_QWORD *)(v3 + 2224);
  if ((v4 & 1) != 0)
    v5 = (v4 >> 1) & 3;
  else
    v5 = *(unsigned __int8 *)(v4 + 4);
  if (v5 == 2)
    return 0;
  v6 = *(JSC::VM **)(v3 + 56);
  v7 = *(_QWORD *)(v3 + 1520);
  if ((v7 & 1) != 0)
  {
    v9 = *(uint64_t (**)(_QWORD *))(v7 & 0xFFFFFFFFFFFFFFFCLL);
    v10 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v3 & 8) != 0)
      v10 = (_QWORD *)(v3 - 16);
    v17[0] = *v10;
    v17[1] = v3;
    v17[2] = v3 + 1520;
    v7 = v9(v17);
  }
  if (v7 != v2)
  {
    v11 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
    if (!v11)
      v11 = *((_QWORD *)this + 2);
    if (v11 == JSC::JSGlobalObject::mapPrototype(v3))
      return JSC::JSObject::getDirectOffset(this, v6, *(_QWORD *)(*((_QWORD *)v6 + 5244) + 2712), v12, v13, v14, v15, v16) == -1;
    return 0;
  }
  return 1;
}

void JSC::JSMapIterator::visitChildren(JSC::JSMapIterator *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v3;
  _QWORD v4[2];
  uint64_t v5;
  char v6;

  v4[0] = a2;
  v4[1] = this;
  v6 = 0;
  v3 = *((_QWORD *)a2 + 11);
  v5 = v3;
  if (v3 && *(_BYTE *)(v3 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v4;
    JSC::JSInternalFieldObjectImpl<4u>::visitChildren(this, a2, a3);
    *(_QWORD *)(v4[0] + 88) = v5;
  }
}

unint64_t JSC::JSMapIterator::createWithInitialValues(JSC::JSMapIterator *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v8;
  unint64_t SlowCase;
  int v10;
  unint64_t v12;
  JSC::JSMapIterator *v13;
  JSC::VM *v14;
  JSC::Heap *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::VM *v20;
  JSC::JSMapIterator *v21;

  v8 = (JSC::Heap *)*((_QWORD *)this + 5082);
  if (!v8)
  {
    v13 = this;
    v14 = a2;
    v15 = JSC::GCClient::Heap::mapIteratorSpaceSlow((JSC::Heap **)this + 4694);
    a2 = v14;
    v8 = v15;
    this = v13;
  }
  SlowCase = *((_QWORD *)v8 + 3);
  if (SlowCase < *((_QWORD *)v8 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v8 + 5);
  if ((SlowCase & 1) == 0)
  {
    v12 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v8 + 6);
    *((_QWORD *)v8 + 4) = SlowCase + HIDWORD(v12);
    *((_QWORD *)v8 + 5) = SlowCase + (int)v12;
LABEL_4:
    *((_QWORD *)v8 + 3) = SlowCase + 48;
    goto LABEL_5;
  }
  v16 = (char *)this + 192;
  v20 = a2;
  v21 = this;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v8, (uint64_t)v16, 48, 0, 0, v17, v18, v19);
  a2 = v20;
  this = v21;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v10 = *((_DWORD *)a2 + 2);
  *(_DWORD *)SlowCase = (unint64_t)a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v10;
  *(_QWORD *)(SlowCase + 40) = 0;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 8) = 0u;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_OWORD *)(SlowCase + 16) = xmmword_1991580B0;
  *(_OWORD *)(SlowCase + 32) = xmmword_1991582D0;
  return SlowCase;
}

uint64_t JSC::JSMapIterator::finishCreation(JSC::JSCell *a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  JSC::JSCell *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  JSC::JSCell *v19;
  int v20;
  JSC::JSCell *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  BOOL hasExceptionsAfterHandlingTraps;
  BOOL v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t SlowCase;
  uint64_t Slow;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  JSC::JSGlobalObject *v47;
  unint64_t v48;
  JSC::JSGlobalObject *v49;
  JSC::JSCell *v50;
  JSC::JSCell *v51;
  JSC::JSCell *v52;
  JSC::JSCell *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  JSC::JSCell *v64;
  JSC::JSCell *v65;
  JSC::JSCell *v66;
  JSC::JSCell *v67;
  JSC::JSCell *v68;
  JSC::JSCell *v69;
  JSC::JSCell *v70;
  JSC::JSCell *v71;
  uint64_t v72;

  v8 = a2;
  v9 = a1;
  v10 = *((_QWORD *)a2 + 7);
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  *((_QWORD *)a1 + 2) = 0xFFFE000000000000;
  *((_QWORD *)a1 + 3) = a3;
  result = v10 + 192;
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v10 + 760) >= *((unsigned __int8 *)v9 + 7))
  {
    v65 = v9;
    v42 = a4;
    v21 = (JSC::JSCell *)a3;
    JSC::Heap::writeBarrierSlowPath(result, (unint64_t)v9);
    v8 = a2;
    a3 = (uint64_t)v21;
    result = v10 + 192;
    v9 = v65;
    a4 = v42;
  }
  if (!*(_QWORD *)(a3 + 16))
  {
    v13 = *((_QWORD *)v8 + 7);
    v72 = v13;
    v14 = *(_QWORD *)(v13 + 41656);
    v15 = *(_QWORD *)(v13 + 11032);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 + 60);
      v17 = *(_QWORD *)(v15 + 24);
      if (v17 >= *(_QWORD *)(v15 + 32))
      {
        v47 = v8;
        v17 = *(_QWORD *)(v15 + 40);
        if ((v17 & 1) == 0)
        {
          v23 = *(_QWORD *)(v17 + 8) ^ *(_QWORD *)(v15 + 48);
          *(_QWORD *)(v15 + 32) = v17 + HIDWORD(v23);
          *(_QWORD *)(v15 + 40) = v17 + (int)v23;
          *(_QWORD *)(v15 + 24) = v17 + v16;
          goto LABEL_15;
        }
        v39 = *(_QWORD *)(v13 + 41656);
        v40 = v10;
        v29 = v13 + 192;
        v62 = result;
        v70 = v9;
        v44 = a4;
        v52 = (JSC::JSCell *)a3;
        v56 = v13;
        v30 = *(_QWORD *)(v13 + 11032);
        v31 = *(unsigned int *)(v15 + 60);
        JSC::sanitizeStackForVM((JSC *)v13, a2, a3, a4, a5, a6, a7, a8);
        v32 = v29;
        v33 = v31;
        v14 = v39;
        v10 = v40;
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v30, v32, v33, 0, 1, v34, v35, v36);
        a3 = (uint64_t)v52;
        v13 = v56;
        a4 = v44;
        v17 = SlowCase;
        result = v62;
        v9 = v70;
        v8 = v47;
      }
      else
      {
        *(_QWORD *)(v15 + 24) = v17 + v16;
      }
    }
    else
    {
      v63 = result;
      v71 = v9;
      v53 = (JSC::JSCell *)a3;
      v57 = v13;
      v45 = a4;
      v49 = v8;
      Slow = JSC::CompleteSubspace::tryAllocateSlow(v13 + 10792, (JSC *)v13, 0x130uLL, 0, a5, a6, a7, a8);
      v8 = v49;
      a3 = (uint64_t)v53;
      a4 = v45;
      v9 = v71;
      v17 = Slow;
      v13 = v57;
      result = v63;
    }
    if (!v17)
    {
      v61 = result;
      v69 = v9;
      v51 = (JSC::JSCell *)a3;
      v55 = v13;
      v28 = a4;
      JSC::throwOutOfMemoryError(v8, (JSC::JSGlobalObject *)&v72);
      a3 = (uint64_t)v51;
      v13 = v55;
      result = v61;
      v9 = v69;
      a4 = v28;
      v17 = 0;
LABEL_20:
      if (!*(_DWORD *)(v13 + 80))
        goto LABEL_23;
      v59 = result;
      v67 = v9;
      v24 = a4;
      v50 = (JSC::JSCell *)a3;
      v54 = v13;
      v48 = v17;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v17 = v48;
      a3 = (uint64_t)v50;
      a4 = v24;
      v9 = v67;
      v26 = hasExceptionsAfterHandlingTraps;
      v13 = v54;
      result = v59;
      if (!v26)
      {
LABEL_23:
        *(_QWORD *)(a3 + 16) = v17;
        if (a3)
        {
          if (v17 && *(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(a3 + 7))
          {
            v58 = result;
            v64 = v9;
            v41 = a4;
            v19 = (JSC::JSCell *)a3;
            JSC::Heap::writeBarrierSlowPath(v13 + 192, a3);
            a3 = (uint64_t)v19;
            result = v58;
            v9 = v64;
            a4 = v41;
          }
        }
      }
      goto LABEL_6;
    }
LABEL_15:
    *(_DWORD *)v17 = 0;
    v18 = *(_DWORD *)(v14 + 8);
    *(_DWORD *)v17 = v14 >> 4;
    *(_DWORD *)(v17 + 4) = v18;
    *(_QWORD *)(v17 + 8) = 0x2400000024;
    if ((*(_BYTE *)(v17 + 4) & 0xE) == 8)
    {
      *(_OWORD *)(v17 + 272) = 0u;
      *(_OWORD *)(v17 + 288) = 0u;
      *(_OWORD *)(v17 + 240) = 0u;
      *(_OWORD *)(v17 + 256) = 0u;
      *(_OWORD *)(v17 + 208) = 0u;
      *(_OWORD *)(v17 + 224) = 0u;
      *(_OWORD *)(v17 + 176) = 0u;
      *(_OWORD *)(v17 + 192) = 0u;
      *(_OWORD *)(v17 + 144) = 0u;
      *(_OWORD *)(v17 + 160) = 0u;
      *(_OWORD *)(v17 + 112) = 0u;
      *(_OWORD *)(v17 + 128) = 0u;
      *(_OWORD *)(v17 + 80) = 0u;
      *(_OWORD *)(v17 + 96) = 0u;
      *(_OWORD *)(v17 + 48) = 0u;
      *(_OWORD *)(v17 + 64) = 0u;
      *(_OWORD *)(v17 + 16) = 0u;
      *(_OWORD *)(v17 + 32) = 0u;
    }
    if (*(_BYTE *)(v13 + 755))
      __dmb(0xAu);
    *(int64x2_t *)(v17 + 16) = vdupq_n_s64(0xFFFE000000000000);
    *(_QWORD *)(v17 + 32) = 0xFFFE000000000008;
    goto LABEL_20;
  }
LABEL_6:
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_7;
  v20 = *(_DWORD *)(v10 + 80);
  if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
  {
    v60 = result;
    v68 = v9;
    v43 = a4;
    v27 = (JSC::JSCell *)a3;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
    a3 = (uint64_t)v27;
    result = v60;
    v9 = v68;
    LODWORD(a4) = v43;
  }
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_7:
    v12 = *(_QWORD *)(a3 + 16);
    *((_QWORD *)v9 + 4) = v12;
    if (v12
      && (v12 & 0xFFFE000000000002) == 0
      && *(_DWORD *)(v10 + 760) >= *((unsigned __int8 *)v9 + 7))
    {
      v66 = v9;
      v22 = a4;
      result = JSC::Heap::writeBarrierSlowPath(result, (unint64_t)v9);
      LODWORD(a4) = v22;
      v9 = v66;
    }
    *((_QWORD *)v9 + 5) = a4 | 0xFFFE000000000000;
  }
  return result;
}

unint64_t JSC::mapIteratorPrivateFuncMapIteratorNext(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::OrderedHashMap *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t result;
  JSC::OrderedHashMap *v22;
  unint64_t Sentinel;
  JSC::OrderedHashMap *v24;
  unint64_t v25;
  int v26;
  JSC::OrderedHashMap *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  JSC::OrderedHashMap *v35;

  v8 = (JSC::OrderedHashMap *)*((_QWORD *)this + 7);
  v9 = (unint64_t *)((char *)v8 + 41840);
  v10 = *((_QWORD *)a2 + 6);
  v11 = *((_QWORD *)v8 + 5231);
  if (!v11)
  {
    v22 = (JSC::OrderedHashMap *)*((_QWORD *)this + 7);
    Sentinel = JSC::OrderedHashMap::createSentinel(v22, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v8 = v22;
    v11 = Sentinel;
    v9[1] = Sentinel;
  }
  if (v11 == v10)
    return v10;
  v12 = *(_QWORD *)(v10 + 32);
  if (!v11)
  {
    v24 = v8;
    v25 = JSC::OrderedHashMap::createSentinel(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v8 = v24;
    v11 = v25;
    v9[1] = v25;
  }
  if (v11 == v12)
    return 7;
  v13 = *(_DWORD *)(v10 + 16);
  v14 = *(_QWORD *)(v12 + 16);
  if (v14)
    v15 = (v14 & 0xFFFE000000000002) == 0;
  else
    v15 = 0;
  if (v15)
  {
    v16 = v12;
    do
    {
      if (v13)
      {
        v26 = *(_DWORD *)(v16 + 24);
        if (v26)
        {
          v27 = v8;
          if (v26 == -1)
          {
            v13 = 0;
          }
          else
          {
            v28 = v26 + 2;
            if ((v26 + 2) >= 3)
            {
              v29 = 0;
              v30 = v13 - v26;
              v31 = (unsigned int *)(v16 + 32);
              v32 = 2 - v28;
              while (1)
              {
                v33 = *v31;
                v31 += 2;
                if (v13 <= v33)
                  break;
                if (v32 == --v29)
                {
                  v13 = v30;
                  goto LABEL_38;
                }
              }
              v13 += v29;
            }
          }
LABEL_38:
          v8 = v27;
        }
      }
      v16 = v14;
      v14 = *(_QWORD *)(v14 + 16);
      if (v14)
        v34 = (v14 & 0xFFFE000000000002) == 0;
      else
        v34 = 0;
    }
    while (v34);
  }
  else
  {
    v16 = v12;
  }
  v17 = *(_DWORD *)(v16 + 24) + v14;
  if (v13 >= v17)
  {
LABEL_24:
    *(_QWORD *)(v10 + 32) = v11;
    result = 7;
    if (!v11 || (v11 & 0xFFFE000000000002) != 0)
      return result;
    if (*((_DWORD *)v8 + 190) >= *(unsigned __int8 *)(v10 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v8 + 192, v10);
    return 7;
  }
  v18 = 3 * v13 + *(_DWORD *)(v16 + 32) + 4;
  while (1)
  {
    v19 = *(_QWORD *)(v16 + 16 + 8 * v18);
    if ((v19 & 0xFFFE000000000002) != 0)
      break;
    v20 = *v9;
    if (!*v9)
    {
      v35 = v8;
      v20 = JSC::Symbol::create(v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v8 = v35;
      *v9 = v20;
    }
    if (v20 != v19)
      break;
    ++v13;
    v18 += 3;
    if (v17 == v13)
      goto LABEL_24;
  }
  *(_QWORD *)(v10 + 16) = (v13 + 1) | 0xFFFE000000000000;
  if (v16 != v12)
  {
    *(_QWORD *)(v10 + 32) = v16;
    if ((v16 & 0xFFFE000000000002) == 0 && *((_DWORD *)v8 + 190) >= *(unsigned __int8 *)(v10 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v8 + 192, v10);
  }
  if (v19)
    return 6;
  else
    return 7;
}

uint64_t JSC::mapIteratorPrivateFuncMapIteratorKey(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t Sentinel;

  v8 = (unint64_t *)*((_QWORD *)this + 7);
  v9 = *((_QWORD *)a2 + 6);
  v10 = v8 + 5231;
  Sentinel = v8[5231];
  if (!Sentinel)
  {
    Sentinel = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    *v10 = Sentinel;
  }
  if (Sentinel != v9)
    return *(_QWORD *)(*(_QWORD *)(v9 + 32)
                     + 8 * (3 * *(_DWORD *)(v9 + 16) + *(_DWORD *)(*(_QWORD *)(v9 + 32) + 32) + 1)
                     + 16);
  return v9;
}

uint64_t JSC::mapIteratorPrivateFuncMapIteratorValue(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t Sentinel;

  v8 = (unint64_t *)*((_QWORD *)this + 7);
  v9 = *((_QWORD *)a2 + 6);
  v10 = v8 + 5231;
  Sentinel = v8[5231];
  if (!Sentinel)
  {
    Sentinel = JSC::OrderedHashMap::createSentinel((JSC::OrderedHashMap *)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    *v10 = Sentinel;
  }
  if (Sentinel != v9)
    return *(_QWORD *)(*(_QWORD *)(v9 + 32)
                     + 8 * (3 * *(_DWORD *)(v9 + 16) + *(_DWORD *)(*(_QWORD *)(v9 + 32) + 32) + 2)
                     + 16);
  return v9;
}

uint64_t JSC::createJSMicrotask@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t *v24;
  int v26;
  int v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _BOOL4 v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _BOOL4 v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  _BOOL4 v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t v82;

  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v16)
  {
    v17 = (_BYTE *)(v16 + 8856);
    *(_BYTE *)(v16 + 8856) = 1;
    v18 = *(unsigned int *)(v16 + 8872);
    if ((_DWORD)v18)
    {
      *(_DWORD *)(v16 + 8872) = v18 - *(_DWORD *)(v16 + 8876);
      result = *(_QWORD *)(v16 + 8864) - v18;
LABEL_4:
      *v17 = 0;
      goto LABEL_5;
    }
    v58 = *(_QWORD *)(v16 + 8896);
    v59 = *(_QWORD *)(v16 + 8880);
    if (v58)
    {
LABEL_74:
      v60 = __clz(v58);
      *(_QWORD *)(v16 + 8896) = v58 & ~(0x8000000000000000 >> v60);
      result = v59 + 16 * v60;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v16 + 8861) == 6)
    {
      v61 = *(_DWORD *)(v16 + 8892);
      v62 = *(unsigned int *)(v16 + 8888);
      if (v62 < v61)
      {
        *(_QWORD *)&v17[8 * v62 + 56] = 0;
        v63 = (unint64_t *)(v16 + 8 * v62 + 8920);
        v64 = v61 - 1 - v62;
        while (v64)
        {
          v59 += 1024;
          v66 = *v63++;
          v65 = v66;
          LODWORD(v62) = v62 + 1;
          --v64;
          if (v66)
          {
            v58 = __rbit64(v65);
            *(_DWORD *)(v16 + 8888) = v62;
            *(_QWORD *)(v16 + 8880) = v59;
            goto LABEL_74;
          }
        }
        *(_DWORD *)(v16 + 8888) = v61;
      }
    }
    *v17 = 0;
  }
  result = bmalloc_allocate_casual(64, 1);
LABEL_5:
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E35A1B58;
  if (WTF::ObjectIdentifierGeneric<JSC::MicrotaskIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x198A1F4D8);
  }
  do
  {
    v20 = __ldaxr(&WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal(void)::current);
    v21 = v20 + 1;
  }
  while (__stlxr(v21, &WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal(void)::current));
  *(_QWORD *)(result + 16) = v21;
  *(_QWORD *)result = off_1E35A1B30;
  *(_OWORD *)(result + 24) = 0u;
  v22 = (uint64_t **)(result + 24);
  *(_OWORD *)(result + 40) = 0u;
  *(_QWORD *)(result + 56) = 0;
  v23 = *(_QWORD *)(a1 + 712);
  if (!v23)
  {
    v81 = (uint64_t **)(result + 24);
    v82 = result;
    JSC::HandleSet::grow((JSC::HandleSet *)(a1 + 672), a2, a3, a4, a5, a6, a7, a8);
    v22 = v81;
    result = v82;
    v23 = *(_QWORD *)(a1 + 712);
  }
  *(_QWORD *)(a1 + 712) = *(_QWORD *)v23;
  *(_QWORD *)(v23 + 16) = 0;
  v24 = (uint64_t *)(v23 + 16);
  *(_QWORD *)v23 = 0;
  *(_QWORD *)(v23 + 8) = 0;
  *v22 = (uint64_t *)(v23 + 16);
  v26 = (a2 & 0xFFFE000000000002) == 0 && a2 != 0;
  if (*v24)
    v27 = (*v24 & 0xFFFE000000000002) == 0;
  else
    v27 = 0;
  if (v27 != v26)
  {
    if ((v26 & 1) != 0)
    {
      v28 = *(unint64_t **)((v23 & 0xFFFFFFFFFFFFF000) + 0x10);
      v29 = v28[3];
      v28 += 3;
      *(_QWORD *)v23 = v29;
      *(_QWORD *)(v23 + 8) = v28;
      *v28 = v23;
      *(_QWORD *)(v29 + 8) = v23;
    }
    else
    {
      v72 = *(_QWORD *)v23;
      v71 = *(_QWORD **)(v23 + 8);
      *v71 = *(_QWORD *)v23;
      *(_QWORD *)(v72 + 8) = v71;
      *(_QWORD *)v23 = 0;
      *(_QWORD *)(v23 + 8) = 0;
      v24 = *v22;
    }
  }
  *v24 = a2;
  if (a3 != 10 && a3)
  {
    v30 = *(unint64_t **)(result + 32);
    if (!v30)
    {
      v31 = *(_QWORD **)(a1 + 712);
      if (!v31)
      {
        v70 = result;
        JSC::HandleSet::grow((JSC::HandleSet *)(a1 + 672), a2, a3, a4, a5, a6, a7, a8);
        result = v70;
        v31 = *(_QWORD **)(a1 + 712);
      }
      *(_QWORD *)(a1 + 712) = *v31;
      v31[2] = 0;
      v30 = v31 + 2;
      *v31 = 0;
      v31[1] = 0;
      *(_QWORD *)(result + 32) = v31 + 2;
    }
    v32 = (unint64_t)(v30 - 2);
    v33 = a3 & 0xFFFE000000000002;
    if (*v30)
      v34 = (*v30 & 0xFFFE000000000002) == 0;
    else
      v34 = 0;
    if (v34 != (v33 == 0))
    {
      if (v33)
      {
        v80 = *(_QWORD *)v32;
        v79 = (_QWORD *)*(v30 - 1);
        *v79 = *(_QWORD *)v32;
        *(_QWORD *)(v80 + 8) = v79;
        *(_QWORD *)v32 = 0;
        *(_QWORD *)(v32 + 8) = 0;
        v30 = *(unint64_t **)(result + 32);
      }
      else
      {
        v35 = *(unint64_t **)((v32 & 0xFFFFFFFFFFFFF000) + 0x10);
        v36 = v35[3];
        v35 += 3;
        *(_QWORD *)v32 = v36;
        *(v30 - 1) = (unint64_t)v35;
        *v35 = v32;
        *(_QWORD *)(v36 + 8) = v32;
      }
    }
    *v30 = a3;
  }
  if (a4 != 10 && a4)
  {
    v37 = *(uint64_t **)(result + 40);
    if (!v37)
    {
      v38 = *(_QWORD **)(a1 + 712);
      if (!v38)
      {
        v67 = result;
        JSC::HandleSet::grow((JSC::HandleSet *)(a1 + 672), a2, a3, a4, a5, a6, a7, a8);
        result = v67;
        v38 = *(_QWORD **)(a1 + 712);
      }
      *(_QWORD *)(a1 + 712) = *v38;
      v38[2] = 0;
      v37 = v38 + 2;
      *v38 = 0;
      v38[1] = 0;
      *(_QWORD *)(result + 40) = v38 + 2;
    }
    v39 = (unint64_t)(v37 - 2);
    v40 = a4 & 0xFFFE000000000002;
    if (*v37)
      v41 = (*v37 & 0xFFFE000000000002) == 0;
    else
      v41 = 0;
    if (v41 != (v40 == 0))
    {
      if (v40)
      {
        v74 = *(_QWORD *)v39;
        v73 = (_QWORD *)*(v37 - 1);
        *v73 = *(_QWORD *)v39;
        *(_QWORD *)(v74 + 8) = v73;
        *(_QWORD *)v39 = 0;
        *(_QWORD *)(v39 + 8) = 0;
        v37 = *(uint64_t **)(result + 40);
      }
      else
      {
        v42 = *(unint64_t **)((v39 & 0xFFFFFFFFFFFFF000) + 0x10);
        v43 = v42[3];
        v42 += 3;
        *(_QWORD *)v39 = v43;
        *(v37 - 1) = (uint64_t)v42;
        *v42 = v39;
        *(_QWORD *)(v43 + 8) = v39;
      }
    }
    *v37 = a4;
  }
  if (a5 != 10 && a5)
  {
    v44 = *(uint64_t **)(result + 48);
    if (!v44)
    {
      v45 = *(_QWORD **)(a1 + 712);
      if (!v45)
      {
        v68 = result;
        JSC::HandleSet::grow((JSC::HandleSet *)(a1 + 672), a2, a3, a4, a5, a6, a7, a8);
        result = v68;
        v45 = *(_QWORD **)(a1 + 712);
      }
      *(_QWORD *)(a1 + 712) = *v45;
      v45[2] = 0;
      v44 = v45 + 2;
      *v45 = 0;
      v45[1] = 0;
      *(_QWORD *)(result + 48) = v45 + 2;
    }
    v46 = (unint64_t)(v44 - 2);
    v47 = a5 & 0xFFFE000000000002;
    if (*v44)
      v48 = (*v44 & 0xFFFE000000000002) == 0;
    else
      v48 = 0;
    if (v48 != (v47 == 0))
    {
      if (v47)
      {
        v76 = *(_QWORD *)v46;
        v75 = (_QWORD *)*(v44 - 1);
        *v75 = *(_QWORD *)v46;
        *(_QWORD *)(v76 + 8) = v75;
        *(_QWORD *)v46 = 0;
        *(_QWORD *)(v46 + 8) = 0;
        v44 = *(uint64_t **)(result + 48);
      }
      else
      {
        v49 = *(unint64_t **)((v46 & 0xFFFFFFFFFFFFF000) + 0x10);
        v50 = v49[3];
        v49 += 3;
        *(_QWORD *)v46 = v50;
        *(v44 - 1) = (uint64_t)v49;
        *v49 = v46;
        *(_QWORD *)(v50 + 8) = v46;
      }
    }
    *v44 = a5;
  }
  if (a6 != 10 && a6)
  {
    v51 = *(uint64_t **)(result + 56);
    if (!v51)
    {
      v52 = *(_QWORD **)(a1 + 712);
      if (!v52)
      {
        v69 = result;
        JSC::HandleSet::grow((JSC::HandleSet *)(a1 + 672), a2, a3, a4, a5, a6, a7, a8);
        result = v69;
        v52 = *(_QWORD **)(a1 + 712);
      }
      *(_QWORD *)(a1 + 712) = *v52;
      v52[2] = 0;
      v51 = v52 + 2;
      *v52 = 0;
      v52[1] = 0;
      *(_QWORD *)(result + 56) = v52 + 2;
    }
    v53 = (unint64_t)(v51 - 2);
    v54 = a6 & 0xFFFE000000000002;
    v55 = (*v51 & 0xFFFE000000000002) == 0;
    if (!*v51)
      v55 = 0;
    if (v55 != (v54 == 0))
    {
      if (v54)
      {
        v78 = *(_QWORD *)v53;
        v77 = *(_QWORD **)(v53 + 8);
        *v77 = *(_QWORD *)v53;
        *(_QWORD *)(v78 + 8) = v77;
        *(_QWORD *)v53 = 0;
        *(_QWORD *)(v53 + 8) = 0;
        v51 = *(uint64_t **)(result + 56);
      }
      else
      {
        v56 = *(unint64_t **)((v53 & 0xFFFFFFFFFFFFF000) + 0x10);
        v57 = v56[3];
        v56 += 3;
        *(_QWORD *)v53 = v57;
        *(v51 - 1) = (uint64_t)v56;
        *v56 = v53;
        *(_QWORD *)(v57 + 8) = v53;
      }
    }
    *v51 = a6;
  }
  *a9 = result;
  return result;
}

void JSC::runJSMicrotask(JSC::VM *a1, void *a2, uint64_t this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  WTF *v52;
  int v53;
  char v54;
  uint64_t v55;
  WTF *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v62[3];

  v15 = *((_QWORD *)a1 + 7);
  v16 = *(_QWORD *)(v15 + 16);
  if (!v16 || *(_QWORD *)(v15 + 24) != v16)
  {
    *(_QWORD *)(v15 + 16) = 0;
    v17 = (unsigned int *)(v15 + 80);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 & 0xFFFFFFEF, v17));
    if ((this & 0xFFFE000000000002) != 0)
    {
      LOBYTE(v62[0]) = 0;
    }
    else if (*(_BYTE *)(this + 5) == 26)
    {
      JSC::JSFunction::getCallData(this, (uint64_t)v62);
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                              + 0x4C)
                                                            + 0x38))(v62, this);
    }
    v19 = *(_QWORD *)(v15 + 16);
    if (!v19 || *(_QWORD *)(v15 + 24) != v19)
    {
      *(_QWORD *)(v15 + 16) = 0;
      do
        v20 = __ldaxr(v17);
      while (__stlxr(v20 & 0xFFFFFFEF, v17));
      v54 = 0;
      v56 = (WTF *)((char *)&v57 + 8);
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0;
      v21 = 10;
      if (a4)
        v22 = a4;
      else
        v22 = 10;
      if (a5)
        v23 = a5;
      else
        v23 = 10;
      if (a6)
        v24 = a6;
      else
        v24 = 10;
      *((_QWORD *)&v57 + 1) = v22;
      *(_QWORD *)&v58 = v23;
      if (a7)
        v21 = a7;
      *((_QWORD *)&v58 + 1) = v24;
      *(_QWORD *)&v59 = v21;
      v55 = 0x800000004;
      v25 = *((_QWORD *)a1 + 252);
      if (v25)
      {
        v46 = *(_DWORD *)(v15 + 88);
        *(_DWORD *)(v15 + 88) = v46 + 1;
        if (!v46 && *(_QWORD *)(v15 + 16))
        {
          JSC::VMTraps::deferTerminationSlow(v15 + 64);
          v25 = *((_QWORD *)a1 + 252);
        }
        JSC::Debugger::willRunMicrotask(v25, (uint64_t)a1, (uint64_t)a2);
        *(_QWORD *)(v15 + 16) = 0;
        do
          v47 = __ldaxr(v17);
        while (__stlxr(v47 & 0xFFFFFFEF, v17));
        v48 = *(_DWORD *)(v15 + 88) - 1;
        *(_DWORD *)(v15 + 88) = v48;
        if (!v48 && *(_BYTE *)(v15 + 93441))
          JSC::VMTraps::undoDeferTerminationSlow((_BYTE *)(v15 + 64), 0);
      }
      v26 = *(_QWORD *)(v15 + 16);
      if (!v26 || *(_QWORD *)(v15 + 24) != v26)
      {
        v52 = v56;
        v53 = v55;
        JSC::profiledCall(a1, (void *)1, this, (const WTF::StringImpl *)v62, 10, (uint64_t)&v52, a7, a8);
        v27 = *(_QWORD *)(v15 + 16);
        if (!v27 || *(_QWORD *)(v15 + 24) != v27)
        {
          *(_QWORD *)(v15 + 16) = 0;
          do
            v28 = __ldaxr(v17);
          while (__stlxr(v28 & 0xFFFFFFEF, v17));
        }
      }
      v29 = *((_QWORD *)a1 + 252);
      if (v29)
      {
        v49 = *(_DWORD *)(v15 + 88);
        *(_DWORD *)(v15 + 88) = v49 + 1;
        if (!v49 && *(_QWORD *)(v15 + 16))
        {
          JSC::VMTraps::deferTerminationSlow(v15 + 64);
          v29 = *((_QWORD *)a1 + 252);
        }
        JSC::Debugger::didRunMicrotask(v29, (uint64_t)a1, (uint64_t)a2);
        *(_QWORD *)(v15 + 16) = 0;
        do
          v50 = __ldaxr(v17);
        while (__stlxr(v50 & 0xFFFFFFEF, v17));
        v51 = *(_DWORD *)(v15 + 88) - 1;
        *(_DWORD *)(v15 + 88) = v51;
        if (!v51 && *(_BYTE *)(v15 + 93441))
          JSC::VMTraps::undoDeferTerminationSlow((_BYTE *)(v15 + 64), 0);
      }
      v30 = (uint64_t *)v57;
      if ((_QWORD)v57)
      {
        v32 = *(_QWORD *)v57;
        if (*(_QWORD *)v57)
        {
          v33 = *(_DWORD *)(v32 - 8);
          v34 = ((unint64_t)&v55 + ~((_QWORD)&v55 << 32)) ^ (((unint64_t)&v55 + ~((_QWORD)&v55 << 32)) >> 22);
          v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
          v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
          v37 = v33 & ((v36 >> 31) ^ v36);
          v38 = *(uint64_t **)(v32 + 8 * v37);
          if (v38 != &v55)
          {
            v45 = 1;
            while (v38)
            {
              v37 = ((_DWORD)v37 + v45) & v33;
              v38 = *(uint64_t **)(v32 + 8 * v37);
              ++v45;
              if (v38 == &v55)
                goto LABEL_45;
            }
            v37 = *(unsigned int *)(v32 - 4);
          }
LABEL_45:
          if (v37 != *(_DWORD *)(v32 - 4))
          {
            *(_QWORD *)(v32 + 8 * v37) = -1;
            ++*(_DWORD *)(*v30 - 16);
            v39 = *v30;
            v40 = *v30 ? *(_DWORD *)(v39 - 12) - 1 : -1;
            *(_DWORD *)(v39 - 12) = v40;
            v41 = *v30;
            if (*v30)
            {
              v42 = 6 * *(_DWORD *)(v41 - 12);
              v43 = *(_DWORD *)(v41 - 4);
              if (v42 < v43 && v43 >= 9)
                WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v30, v43 >> 1, 0, a4, a5, a6, a7, a8);
            }
          }
        }
      }
      if (v56 != (WTF *)((char *)&v57 + 8) && v56 != 0)
        WTF::fastFree((unint64_t)v56, a2, this, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::JSMicrotask::run(JSC::JSMicrotask *this, JSC::JSGlobalObject *a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  JSC::CodeBlock *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  const WTF::StringImpl *v25;
  uint64_t v26;
  unsigned int v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  JSC::JSGlobalObject *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  int v46;
  JSC::JSGlobalObject *v47;
  unsigned int *v48;
  int v49;
  unsigned int v50;
  JSC::CodeBlock *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  JSC::VM *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  BOOL v64;
  uint64_t (*v65)();
  unsigned int *v66;
  unsigned int v67;
  JSC::JSMicrotask *v68;
  int v69;
  const WTF::StringImpl *v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  _DWORD *v97;
  JSC::VM *v98;
  _QWORD *v99;
  int v100;
  unsigned int *v101;
  int v102;
  unsigned int v103;
  JSC::CodeBlock *v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  _QWORD *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  JSC::VM *v113;
  uint64_t (*v114)();
  unsigned int *v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  JSC::VM *v119;
  unsigned int v120;
  int v121;
  int v122;
  JSC::VM *v123;
  unsigned int v124;
  int v125;
  int v126;
  unsigned int v127;
  JSC::JSGlobalObject *v128;
  uint64_t v129;
  JSC::JSMicrotask *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  BOOL hasExceptionsAfterHandlingTraps;
  unsigned int v145;
  int v146;
  const WTF::StringImpl *v147;
  WTF *v148;
  const WTF::StringImpl *v149;
  JSC::JSGlobalObject *v150;
  int v151;
  uint64_t v152;
  JSC::CodeBlock *v153;
  const WTF::StringImpl *v154;
  uint64_t v155;
  WTF *v156;
  unsigned int v157;
  char v158;
  uint64_t v159;
  WTF *v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  const WTF::StringImpl *v168;
  JSC::VM *v169;
  uint64_t v170;
  const WTF::StringImpl *v171;
  JSC::CodeBlock *v172;
  JSC::VM *v173[2];
  JSC::CodeBlock *v174;
  JSC::CodeBlock *v175;
  uint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  int v180;
  WTF *v181;
  unint64_t v182;

  v8 = a2;
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9)
    v10 = *v9;
  else
    v10 = 0;
  v11 = (uint64_t *)*((_QWORD *)this + 4);
  if (v11)
    v12 = *v11;
  else
    v12 = 0;
  v13 = (uint64_t *)*((_QWORD *)this + 5);
  if (v13)
    v14 = *v13;
  else
    v14 = 0;
  v15 = (uint64_t *)*((_QWORD *)this + 6);
  if (v15)
    v16 = *v15;
  else
    v16 = 0;
  v17 = (uint64_t *)*((_QWORD *)this + 7);
  if (v17)
    v18 = *v17;
  else
    v18 = 0;
  v19 = (JSC::CodeBlock *)*((_QWORD *)this + 2);
  v20 = *((_QWORD *)a2 + 7);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21 && *(_QWORD *)(v20 + 24) == v21)
    return;
  *(_QWORD *)(v20 + 16) = 0;
  v22 = (unsigned int *)(v20 + 80);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 & 0xFFFFFFEF, v22));
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v166) = 0;
  }
  else if (*(_BYTE *)(v10 + 5) == 26)
  {
    v24 = *(_QWORD *)(v10 + 24);
    if ((v24 & 1) != 0)
      v24 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v24 + 5) == 8)
    {
      LOBYTE(v166) = 1;
      v167 = *(_QWORD *)(v24 + 40);
      LOBYTE(v168) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                + 0x4C));
    }
    else
    {
      LOBYTE(v166) = 2;
      v25 = *(const WTF::StringImpl **)(v10 + 16);
      v167 = v24;
      v168 = v25;
    }
  }
  else
  {
    v90 = v10;
    this = (JSC::JSMicrotask *)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))(16
                                                                                         * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                         + 0x38))(&v166, v10);
    v10 = v90;
  }
  v26 = *(_QWORD *)(v20 + 16);
  if (v26)
  {
    if (*(_QWORD *)(v20 + 24) == v26)
      return;
  }
  v153 = v19;
  *(_QWORD *)(v20 + 16) = 0;
  do
    v27 = __ldaxr(v22);
  while (__stlxr(v27 & 0xFFFFFFEF, v22));
  v158 = 0;
  v28 = (WTF *)((char *)&v161 + 8);
  v160 = (WTF *)((char *)&v161 + 8);
  v161 = 0u;
  v162 = 0u;
  v163 = 0u;
  v164 = 0u;
  v165 = 0;
  v29 = 10;
  if (v12)
    v30 = v12;
  else
    v30 = 10;
  if (v14)
    v31 = v14;
  else
    v31 = 10;
  if (v16)
    v32 = v16;
  else
    v32 = 10;
  *((_QWORD *)&v161 + 1) = v30;
  *(_QWORD *)&v162 = v31;
  if (v18)
    v29 = v18;
  *((_QWORD *)&v162 + 1) = v32;
  *(_QWORD *)&v163 = v29;
  v159 = 0x800000004;
  v33 = *((_QWORD *)v8 + 252);
  if (v33)
  {
    v117 = *(_DWORD *)(v20 + 88);
    *(_DWORD *)(v20 + 88) = v117 + 1;
    v118 = v10;
    if (!v117 && *(_QWORD *)(v20 + 16))
    {
      JSC::VMTraps::deferTerminationSlow(v20 + 64);
      v33 = *((_QWORD *)v8 + 252);
    }
    v175 = v153;
    v169 = v8;
    v119 = (JSC::VM *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v119 = off_1E358C040;
    *((_QWORD *)v119 + 1) = &v169;
    *((_QWORD *)v119 + 2) = &v175;
    v173[0] = v119;
    JSC::Debugger::dispatchFunctionToObservers(v33, v173);
    this = (JSC::JSMicrotask *)(*(uint64_t (**)(JSC::VM *))(*(_QWORD *)v119 + 8))(v119);
    *(_QWORD *)(v20 + 16) = 0;
    do
      v120 = __ldaxr(v22);
    while (__stlxr(v120 & 0xFFFFFFEF, v22));
    v121 = *(_DWORD *)(v20 + 88) - 1;
    *(_DWORD *)(v20 + 88) = v121;
    v10 = v118;
    if (!v121 && *(_BYTE *)(v20 + 93441))
    {
      this = (JSC::JSMicrotask *)JSC::VMTraps::undoDeferTerminationSlow((_BYTE *)(v20 + 64), 0);
      v10 = v118;
    }
  }
  v34 = *(_QWORD *)(v20 + 16);
  if (!v34 || *(_QWORD *)(v20 + 24) != v34)
  {
    v156 = v160;
    v35 = v159;
    v157 = v159;
    v36 = *((_QWORD *)v8 + 7);
    v37 = *(_QWORD *)(v36 + 90568);
    v38 = v8;
    if (!v37 || (v38 = *(JSC::JSGlobalObject **)(v37 + 8)) != 0)
    {
      v39 = *((_QWORD *)v38 + 252);
      if (v39)
      {
        this = *(JSC::JSMicrotask **)(v39 + 208);
        if (this)
        {
          v137 = v10;
          this = (JSC::JSMicrotask *)(*(uint64_t (**)(JSC::JSMicrotask *))(*(_QWORD *)this + 16))(this);
          if (!(_DWORD)this)
          {
            JSC::Debugger::willEvaluateScript(*((JSC::Debugger **)v38 + 252));
            JSC::Interpreter::executeCall((JSC::VM *)(*((_QWORD *)v8 + 7) + 90560), v137, (unsigned __int8 *)&v166, 10, (uint64_t)&v156, v138, v139, v140);
            v141 = *((_QWORD *)v38 + 252);
            if (v141 && *(_QWORD *)(v141 + 208))
              JSC::Debugger::didEvaluateScript(v141);
            goto LABEL_65;
          }
          v36 = *((_QWORD *)v8 + 7);
          v10 = v137;
          v35 = v159;
        }
      }
    }
    v40 = v36 + 90568;
    v41 = v166;
    v155 = v20;
    if (v166 == 2 || !(_BYTE)v168)
    {
      v173[0] = (JSC::VM *)v36;
      if (v166 == 2)
      {
        v43 = 0;
        v42 = v167;
        a4 = v168;
        v44 = v168;
      }
      else
      {
        a4 = 0;
        v42 = 0;
        v43 = v167;
        v44 = (_DWORD *)v10;
      }
      v45 = *(_QWORD *)(16 * (*v44 & 0xFFFFFFFE) + 0x28);
      v169 = (JSC::VM *)v36;
      v170 = v45;
      if (*(_QWORD *)v40)
      {
LABEL_43:
        *(_QWORD *)(v36 + 32) = 0;
        if ((unint64_t)&v148 < *(_QWORD *)(v36 + 8) || v157 > 0x10000)
        {
          JSC::throwStackOverflowError(v45, v173, v10, (uint64_t)a4, a5, a6, a7, a8);
        }
        else if (*(_DWORD *)(v36 + 4))
        {
          JSC::Interpreter::checkVMEntryPermission(this);
        }
        else
        {
          v46 = *(_DWORD *)(v36 + 80);
          if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
          {
            v126 = *(_DWORD *)(v36 + 80);
            if ((v126 & 0x27) != 0 && (v126 & 0x20) == 0)
            {
              v154 = (const WTF::StringImpl *)v10;
              v146 = v35;
              v152 = v43;
              v147 = a4;
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v36 + 64), 7u, v10, (uint64_t)a4, a5, a6, a7, a8);
              a4 = v147;
              v43 = v152;
              v35 = v146;
              v10 = (uint64_t)v154;
            }
            if (*(_QWORD *)(v36 + 16))
              goto LABEL_62;
          }
          v154 = (const WTF::StringImpl *)(v36 + 90568);
          v47 = v8;
          v48 = (unsigned int *)(v36 + 80);
          v49 = *(_DWORD *)(v36 + 80);
          if ((v49 & 0x20) == 0)
          {
            do
              v50 = __ldaxr(v48);
            while (__stlxr(v50 | 0x20, v48));
          }
          v51 = 0;
          v52 = 0;
          v174 = 0;
          if (v41 == 2)
          {
            if (*(_BYTE *)(v42 + 5) == 8
              || (*(_QWORD *)(v42 + 8)
                ? (v65 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                : (v65 = 0),
                  v65))
            {
              v174 = *(JSC::CodeBlock **)(v42 + 96);
            }
            else
            {
              v76 = v10;
              v151 = v35;
              v152 = v43;
              JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v42, v36, v10, a4, 0, &v174, a7, a8);
              v43 = v152;
              v35 = v151;
              v10 = v76;
            }
            if (*((_QWORD *)v173[0] + 2))
            {
              if ((v49 & 0x20) == 0)
              {
                do
                  v127 = __ldaxr(v48);
                while (__stlxr(v127 & 0xFFFFFFDF, v48));
              }
              v8 = v47;
              v28 = (WTF *)((char *)&v161 + 8);
              v40 = (uint64_t)v154;
              goto LABEL_62;
            }
            *((_BYTE *)v174 + 17) = 0;
            v52 = *(_QWORD *)(v42 + 8);
            v66 = (unsigned int *)(v52 + 8);
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 + 1, v66));
            v51 = v174;
          }
          v53 = v35 + 1;
          v175 = v51;
          v176 = v10;
          v181 = v156;
          v182 = v45;
          v177 = v35 + 1;
          if (v51)
          {
            v54 = *((_DWORD *)v51 + 7);
            if (v54 <= v53)
              v53 = v35 + 1;
            else
              v53 = v54;
          }
          v180 = v53 | 1;
          v178 = 0;
          v179 = 10;
          if ((v49 & 0x20) == 0)
          {
            do
              v55 = __ldaxr(v48);
            while (__stlxr(v55 & 0xFFFFFFDF, v48));
          }
          if (v41 == 2)
          {
            vmEntryToJavaScript(*(_QWORD *)(v52 + 16), (JSC::VM *)v36, (uint64_t)&v175, (uint64_t)a4, a5, a6, a7, a8);
            v8 = v47;
            v28 = (WTF *)((char *)&v161 + 8);
            v40 = (uint64_t)v154;
            goto LABEL_58;
          }
          vmEntryToNative(v43, (JSC::VM *)v36, (uint64_t)&v175, (uint64_t)a4, a5, a6, a7, a8);
          v8 = v47;
          v28 = (WTF *)((char *)&v161 + 8);
          v40 = (uint64_t)v154;
          if (v52)
          {
LABEL_58:
            v56 = (unsigned int *)(v52 + 8);
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
            {
              atomic_store(1u, (unsigned int *)(v52 + 8));
              (*(void (**)(uint64_t))(*(_QWORD *)v52 + 32))(v52);
            }
          }
        }
LABEL_62:
        v59 = v169;
        if (*((JSC::VM ***)v169 + 11321) == &v169)
        {
          *((_QWORD *)v169 + 11321) = 0;
          if (*((_BYTE *)v59 + 56))
            JSC::VM::executeEntryScopeServicesOnExit(v59, a2, v10, (uint64_t)a4, a5, a6, a7, a8);
        }
        *(_BYTE *)(v40 + 2552) = 1;
LABEL_64:
        v20 = v155;
LABEL_65:
        v60 = *(_QWORD *)(v20 + 16);
        if (!v60 || *(_QWORD *)(v20 + 24) != v60)
        {
          *(_QWORD *)(v20 + 16) = 0;
          do
            v61 = __ldaxr(v22);
          while (__stlxr(v61 & 0xFFFFFFEF, v22));
        }
        goto LABEL_68;
      }
      *(_QWORD *)v40 = &v169;
      v68 = *(JSC::JSMicrotask **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v68)
      {
        v154 = (const WTF::StringImpl *)v10;
        v69 = v35;
        v152 = v43;
        v70 = a4;
        this = (JSC::JSMicrotask *)WTF::Thread::initializeCurrentTLS(this);
        a4 = v70;
        v43 = v152;
        v35 = v69;
        v10 = (uint64_t)v154;
        v68 = this;
      }
      v71 = *((_BYTE *)v68 + 5);
      if ((v71 & 0x20) == 0)
      {
        v154 = a4;
        v152 = v43;
        v151 = v35;
        v136 = v10;
        *((_BYTE *)v68 + 5) = v71 | 0x20;
        if (BYTE2(dword_1ECF4C6C3))
          JSC::Wasm::startTrackingCurrentThread(this, (uint64_t)a2, v10, (uint64_t)a4, a5, a6, a7, a8);
        WTF::registerThreadForMachExceptionHandling(v68, a2, v10, (uint64_t)a4, a5, a6, a7, a8);
        v10 = v136;
        v35 = v151;
        v43 = v152;
        a4 = v154;
      }
      this = v169;
      if (*((_BYTE *)v169 + 56))
      {
        v154 = a4;
        v152 = v43;
        v74 = v35;
        v75 = v10;
      }
      else
      {
        v72 = *((_QWORD *)v169 + 11624);
        v73 = atomic_load(&JSC::lastTimeZoneID);
        if (v72 == v73)
          goto LABEL_43;
        v154 = a4;
        v152 = v43;
        v74 = v35;
        v75 = v10;
        this = v169;
      }
      JSC::VM::executeEntryScopeServicesOnEntry(this, a2, v10, (uint64_t)a4, a5, a6, a7, a8);
      v10 = v75;
      v35 = v74;
      v43 = v152;
      a4 = v154;
      goto LABEL_43;
    }
    if (*(_DWORD *)(v10 + 88))
    {
      JSC::Interpreter::executeBoundCall(this, v36, v10, (uint64_t)&v156, a5, a6, a7, a8);
      goto LABEL_65;
    }
    v92 = *(_QWORD *)(v10 + 32);
    v93 = *(_QWORD *)(v10 + 40);
    if (*(_BYTE *)(v92 + 5) == 26)
    {
      v94 = *(_QWORD *)(v92 + 24);
      if ((v94 & 1) != 0)
        v94 = *(_QWORD *)((v94 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v94 + 5) != 8)
      {
        v95 = 0;
        LOBYTE(v169) = 2;
        a4 = *(const WTF::StringImpl **)(v92 + 16);
        v170 = v94;
        v171 = a4;
        v174 = (JSC::CodeBlock *)v36;
        v96 = 1;
        v97 = a4;
        goto LABEL_133;
      }
      LOBYTE(v169) = 1;
      v95 = *(_QWORD *)(v94 + 40);
      v170 = v95;
      LOBYTE(v171) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE)
                                                                                + 0x4C));
      v174 = (JSC::CodeBlock *)v36;
    }
    else
    {
      v154 = *(const WTF::StringImpl **)(v10 + 40);
      v134 = v35;
      v135 = v92;
      this = (JSC::JSMicrotask *)(*(_QWORD *(**)(JSC::VM **__return_ptr, uint64_t))(16
                                                                                            * *(unsigned int *)(16 * (*(_DWORD *)v92 & 0xFFFFFFFE) + 0x4C)
                                                                                            + 0x38))(&v169, v92);
      v174 = (JSC::CodeBlock *)v36;
      if (v169 == 2)
      {
        v95 = 0;
        v96 = 1;
        v94 = v170;
        a4 = v171;
        v97 = v171;
        v92 = v135;
        v40 = v36 + 90568;
        v35 = v134;
        v93 = (uint64_t)v154;
LABEL_133:
        v98 = *(JSC::VM **)(16 * (*v97 & 0xFFFFFFFE) + 0x28);
        v173[0] = (JSC::VM *)v36;
        v173[1] = v98;
        v99 = (_QWORD *)v40;
        if (*(_QWORD *)v40)
        {
LABEL_134:
          v150 = v8;
          *(_QWORD *)(v36 + 32) = 0;
          if ((unint64_t)&v148 < *(_QWORD *)(v36 + 8) || v157 > 0x10000)
          {
            JSC::throwStackOverflowError((unint64_t)v98, &v174, v10, (uint64_t)a4, a5, a6, a7, a8);
          }
          else if (*(_DWORD *)(v36 + 4))
          {
            JSC::Interpreter::checkVMEntryPermission(this);
          }
          else
          {
            v100 = *(_DWORD *)(v36 + 80);
            if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
            {
              v109 = v99;
              v152 = v92;
              v142 = v35;
              v154 = (const WTF::StringImpl *)v93;
              v143 = v95;
              v149 = a4;
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v36, (uint64_t)a2, v10, (uint64_t)a4, a5, a6, a7, a8);
              a4 = v149;
              v95 = v143;
              v93 = (uint64_t)v154;
              v35 = v142;
              v92 = v152;
              if (hasExceptionsAfterHandlingTraps)
                goto LABEL_153;
            }
            v101 = (unsigned int *)(v36 + 80);
            v102 = *(_DWORD *)(v36 + 80);
            if ((v102 & 0x20) == 0)
            {
              do
                v103 = __ldaxr(v101);
              while (__stlxr(v103 | 0x20, v101));
            }
            v104 = 0;
            v105 = 0;
            v172 = 0;
            if (!v96)
              goto LABEL_141;
            if (*(_BYTE *)(v94 + 5) == 8
              || (*(_QWORD *)(v94 + 8)
                ? (v114 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
                : (v114 = 0),
                  v114))
            {
              v172 = *(JSC::CodeBlock **)(v94 + 96);
            }
            else
            {
              v133 = v92;
              v151 = v35;
              v154 = (const WTF::StringImpl *)v93;
              v152 = v95;
              JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v94, v36, v92, a4, 0, &v172, a7, a8);
              v95 = v152;
              v93 = (uint64_t)v154;
              v35 = v151;
              v92 = v133;
            }
            if (!*((_QWORD *)v174 + 2))
            {
              *((_BYTE *)v172 + 17) = 0;
              v105 = *(_QWORD *)(v94 + 8);
              v115 = (unsigned int *)(v105 + 8);
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 + 1, v115));
              v104 = v172;
LABEL_141:
              v106 = v35 + 1;
              v175 = v104;
              v176 = v92;
              v181 = v156;
              v182 = (unint64_t)v98;
              v177 = v35 + 1;
              if (v104)
              {
                v107 = *((_DWORD *)v104 + 7);
                if (v107 <= v106)
                  v106 = v35 + 1;
                else
                  v106 = v107;
              }
              v180 = v106 | 1;
              v178 = 0;
              v179 = v93;
              if ((v102 & 0x20) == 0)
              {
                do
                  v108 = __ldaxr(v101);
                while (__stlxr(v108 & 0xFFFFFFDF, v101));
              }
              if (v96)
              {
                vmEntryToJavaScript(*(_QWORD *)(v105 + 16), (JSC::VM *)v36, (uint64_t)&v175, (uint64_t)a4, a5, a6, a7, a8);
                v109 = v99;
                goto LABEL_149;
              }
              vmEntryToNative(v95, (JSC::VM *)v36, (uint64_t)&v175, (uint64_t)a4, a5, a6, a7, a8);
              v109 = v99;
              if (v105)
              {
LABEL_149:
                v110 = (unsigned int *)(v105 + 8);
                do
                {
                  v111 = __ldaxr(v110);
                  v112 = v111 - 1;
                }
                while (__stlxr(v112, v110));
                if (!v112)
                {
                  atomic_store(1u, (unsigned int *)(v105 + 8));
                  (*(void (**)(uint64_t))(*(_QWORD *)v105 + 32))(v105);
                }
              }
LABEL_153:
              v113 = v173[0];
              if (*((JSC::VM ***)v173[0] + 11321) == v173)
              {
                *((_QWORD *)v173[0] + 11321) = 0;
                if (*((_BYTE *)v113 + 56))
                  JSC::VM::executeEntryScopeServicesOnExit(v113, a2, v10, (uint64_t)a4, a5, a6, a7, a8);
              }
              *((_BYTE *)v109 + 2552) = 1;
              v8 = v150;
              goto LABEL_64;
            }
            if ((v102 & 0x20) == 0)
            {
              do
                v145 = __ldaxr(v101);
              while (__stlxr(v145 & 0xFFFFFFDF, v101));
            }
          }
          v109 = v99;
          goto LABEL_153;
        }
        v148 = (WTF *)((char *)&v161 + 8);
        v149 = a4;
        v152 = v95;
        v154 = (const WTF::StringImpl *)v93;
        v151 = v35;
        v128 = v8;
        v129 = v92;
        *v99 = v173;
        v130 = *(JSC::JSMicrotask **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v130)
        {
          this = (JSC::JSMicrotask *)WTF::Thread::initializeCurrentTLS(this);
          v130 = this;
        }
        if ((*((_BYTE *)v130 + 5) & 0x20) == 0)
        {
          *((_BYTE *)v130 + 5) |= 0x20u;
          if (BYTE2(dword_1ECF4C6C3))
            JSC::Wasm::startTrackingCurrentThread(this, (uint64_t)a2, v10, (uint64_t)a4, a5, a6, a7, a8);
          WTF::registerThreadForMachExceptionHandling(v130, a2, v10, (uint64_t)a4, a5, a6, a7, a8);
        }
        this = v173[0];
        if (!*((_BYTE *)v173[0] + 56))
        {
          v131 = *((_QWORD *)v173[0] + 11624);
          v132 = atomic_load(&JSC::lastTimeZoneID);
          v64 = v131 == v132;
          v92 = v129;
          v8 = v128;
          v28 = v148;
          a4 = v149;
          v35 = v151;
          v93 = (uint64_t)v154;
          v95 = v152;
          if (v64)
            goto LABEL_134;
          this = v173[0];
        }
        JSC::VM::executeEntryScopeServicesOnEntry(this, a2, v10, (uint64_t)a4, a5, a6, a7, a8);
        v92 = v129;
        v8 = v128;
        v28 = v148;
        a4 = v149;
        v35 = v151;
        v93 = (uint64_t)v154;
        v95 = v152;
        goto LABEL_134;
      }
      v95 = v170;
      v92 = v135;
      v40 = v36 + 90568;
      v35 = v134;
      v93 = (uint64_t)v154;
    }
    v96 = 0;
    a4 = 0;
    v94 = 0;
    v97 = (_DWORD *)v92;
    goto LABEL_133;
  }
LABEL_68:
  v62 = *((_QWORD *)v8 + 252);
  if (v62)
  {
    v122 = *(_DWORD *)(v20 + 88);
    *(_DWORD *)(v20 + 88) = v122 + 1;
    if (!v122 && *(_QWORD *)(v20 + 16))
    {
      JSC::VMTraps::deferTerminationSlow(v20 + 64);
      v62 = *((_QWORD *)v8 + 252);
    }
    v175 = v153;
    v169 = v8;
    v123 = (JSC::VM *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v123 = off_1E358C068;
    *((_QWORD *)v123 + 1) = &v169;
    *((_QWORD *)v123 + 2) = &v175;
    v173[0] = v123;
    JSC::Debugger::dispatchFunctionToObservers(v62, v173);
    (*(void (**)(JSC::VM *))(*(_QWORD *)v123 + 8))(v123);
    *(_QWORD *)(v20 + 16) = 0;
    do
      v124 = __ldaxr(v22);
    while (__stlxr(v124 & 0xFFFFFFEF, v22));
    v125 = *(_DWORD *)(v20 + 88) - 1;
    *(_DWORD *)(v20 + 88) = v125;
    if (!v125 && *(_BYTE *)(v20 + 93441))
      JSC::VMTraps::undoDeferTerminationSlow((_BYTE *)(v20 + 64), 0);
  }
  v63 = (uint64_t *)v161;
  if ((_QWORD)v161)
  {
    v77 = *(_QWORD *)v161;
    if (*(_QWORD *)v161)
    {
      v78 = *(_DWORD *)(v77 - 8);
      v79 = ((unint64_t)&v159 + ~((_QWORD)&v159 << 32)) ^ (((unint64_t)&v159 + ~((_QWORD)&v159 << 32)) >> 22);
      v80 = 9 * ((v79 + ~(v79 << 13)) ^ ((v79 + ~(v79 << 13)) >> 8));
      v81 = (v80 ^ (v80 >> 15)) + ~((v80 ^ (v80 >> 15)) << 27);
      v82 = v78 & ((v81 >> 31) ^ v81);
      v83 = *(uint64_t **)(v77 + 8 * v82);
      if (v83 != &v159)
      {
        v91 = 1;
        while (v83)
        {
          v82 = ((_DWORD)v82 + v91) & v78;
          v83 = *(uint64_t **)(v77 + 8 * v82);
          ++v91;
          if (v83 == &v159)
            goto LABEL_111;
        }
        v82 = *(unsigned int *)(v77 - 4);
      }
LABEL_111:
      if (v82 != *(_DWORD *)(v77 - 4))
      {
        *(_QWORD *)(v77 + 8 * v82) = -1;
        ++*(_DWORD *)(*v63 - 16);
        v84 = *v63;
        v85 = *v63 ? *(_DWORD *)(v84 - 12) - 1 : -1;
        *(_DWORD *)(v84 - 12) = v85;
        v86 = *v63;
        if (*v63)
        {
          v87 = 6 * *(_DWORD *)(v86 - 12);
          v88 = *(_DWORD *)(v86 - 4);
          if (v87 < v88 && v88 >= 9)
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::rehash(v63, v88 >> 1, 0, (uint64_t)a4, a5, a6, a7, a8);
        }
      }
    }
  }
  v64 = v160 == v28 || v160 == 0;
  if (!v64)
    WTF::fastFree((unint64_t)v160, a2, v10, (uint64_t)a4, a5, a6, a7, a8);
}

BOOL JSC::JSModuleEnvironment::put(unint64_t a1, JSC::JSGlobalObject *a2, WTF::StringImpl *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  JSC::AbstractModuleRecord *v14;
  int v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  __n128 v28;
  _BOOL8 v29;
  WTF::StringImpl *v30;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  WTF::StringImpl *v57;
  _QWORD v58[2];
  WTF::StringImpl *v59;
  JSC::VM *v60;

  v13 = *((_QWORD *)a2 + 7);
  v60 = (JSC::VM *)v13;
  v14 = *(JSC::AbstractModuleRecord **)(a1 + 8 * (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) + 1) + 32);
  v15 = *((_DWORD *)this + 4);
  if ((v15 & 0x20) != 0)
  {
    *(_DWORD *)this += 2;
    v16 = this;
  }
  else
  {
    if ((v15 & 0x10) != 0)
    {
      *(_DWORD *)this += 2;
      v16 = this;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v13 + 41912), (unint64_t)this, this, a4, a5, a6, a7, a8, v58);
      v16 = (WTF::StringImpl *)v58[0];
    }
    v17 = *(_DWORD *)v16;
    *(_DWORD *)v16 += 2;
    if (v17)
    {
      *(_DWORD *)v16 = v17;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v16, a2, (uint64_t)this, a4, a5, a6, a7, a8);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
  }
  v57 = v16;
  JSC::AbstractModuleRecord::resolveImport(v14, a2, (const JSC::Identifier *)&v57, a4, a5, a6, a7, a8, (uint64_t)v58);
  v26 = v57;
  v57 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_11;
  v56 = *(_DWORD *)(v13 + 80);
  if ((v56 & 0x27) != 0 && (v56 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v19, v20, v21, v22, v23, v24);
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_11:
    if (LODWORD(v58[0]))
    {
      if ((*(_BYTE *)(a5 + 20) & 1) != 0)
        v27 = 1;
      else
        v27 = *(unsigned __int8 *)(a1 + 5) - 53 <= 1
           && (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 21) & 0x1C) == 8;
      LOBYTE(v57) = 0;
      if (JSC::symbolTablePut<(JSC::SymbolTablePutMode)1,JSC::JSLexicalEnvironment>(a1, (unint64_t)a2, (uint64_t)this, a4, v27, 0, &v57, v24, v25))
      {
        v29 = (_BYTE)v57 != 0;
      }
      else
      {
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)a1, *((_QWORD *)a2 + 7), (unint64_t)this, a4, 0, a5, v23, v24, v28);
        v29 = v18 == 0;
      }
      goto LABEL_19;
    }
    JSC::throwTypeError((unint64_t)a2, &v60, (uint64_t)"Attempted to assign to readonly property.", 42);
  }
  v29 = 0;
LABEL_19:
  v30 = v59;
  v59 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  return v29;
}

uint64_t JSC::JSModuleEnvironment::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, WTF::StringImpl *this, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  JSC::AbstractModuleRecord *v13;
  int v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  WTF::StringImpl *v44;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  _QWORD v55[2];
  WTF::StringImpl *v56;

  v12 = *((_QWORD *)a2 + 7);
  v13 = *(JSC::AbstractModuleRecord **)(a1 + 8 * (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) + 1) + 32);
  v14 = *((_DWORD *)this + 4);
  if ((v14 & 0x20) != 0)
  {
    *(_DWORD *)this += 2;
    v15 = this;
  }
  else
  {
    if ((v14 & 0x10) != 0)
    {
      *(_DWORD *)this += 2;
      v15 = this;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v12 + 41912), (unint64_t)this, this, (uint64_t)a4, a5, a6, a7, a8, v55);
      v15 = (WTF::StringImpl *)v55[0];
    }
    v16 = *(_DWORD *)v15;
    *(_DWORD *)v15 += 2;
    if (v16)
    {
      *(_DWORD *)v15 = v16;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v15, a2, (uint64_t)this, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v54 = v15;
  JSC::AbstractModuleRecord::resolveImport(v13, a2, (const JSC::Identifier *)&v54, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v55);
  v24 = v54;
  v54 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (*(_DWORD *)(v12 + 80))
  {
    v42 = *(_DWORD *)(v12 + 80);
    if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v18, v19, v20, v21, v22, v23);
    if (*(_QWORD *)(v12 + 16))
      v43 = 1;
    else
      v43 = LODWORD(v55[0]) == 0;
    if (!v43)
      goto LABEL_12;
  }
  else if (LODWORD(v55[0]))
  {
LABEL_12:
    v25 = JSC::JSLexicalEnvironment::deleteProperty(a1, a2, (uint64_t)this, a4, v20, v21, v22, v23);
    goto LABEL_23;
  }
  v25 = 0;
LABEL_23:
  v44 = v56;
  v56 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  return v25;
}

uint64_t JSC::JSModuleEnvironment::getOwnPropertySlot(uint64_t a1, JSC::JSGlobalObject *a2, WTF::StringImpl *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  JSC::AbstractModuleRecord *v13;
  int v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OwnPropertySlot;
  WTF::StringImpl *v29;
  uint64_t result;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  WTF::StringImpl *v56;
  int v57;
  int v58;
  WTF::StringImpl *v59[2];
  unint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  _QWORD v63[2];
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  WTF::StringImpl *v70;

  v12 = *((_QWORD *)a2 + 7);
  v13 = *(JSC::AbstractModuleRecord **)(a1 + 8 * (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) + 1) + 32);
  v14 = *((_DWORD *)this + 4);
  if ((v14 & 0x20) != 0)
  {
    *(_DWORD *)this += 2;
    v15 = this;
  }
  else
  {
    if ((v14 & 0x10) != 0)
    {
      *(_DWORD *)this += 2;
      v15 = this;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v12 + 41912), (unint64_t)this, this, a4, a5, a6, a7, a8, v59);
      v15 = v59[0];
    }
    v16 = *(_DWORD *)v15;
    *(_DWORD *)v15 += 2;
    if (v16)
    {
      *(_DWORD *)v15 = v16;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v15, a2, (uint64_t)this, a4, a5, a6, a7, a8);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
  }
  v59[0] = v15;
  JSC::AbstractModuleRecord::resolveImport(v13, a2, (const JSC::Identifier *)v59, a4, a5, a6, a7, a8, (uint64_t)&v68);
  v24 = v59[0];
  v59[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)v17, v18, v19, v20, v21, v22, v23))
  {
    OwnPropertySlot = 0;
  }
  else if (v68)
  {
    OwnPropertySlot = JSC::JSLexicalEnvironment::getOwnPropertySlot(a1, (uint64_t)a2, (unint64_t)this, a4, v20, v21, v22, v23);
  }
  else
  {
    v55 = *(_DWORD **)(v69 + 112);
    v60 = 0xFFFFFFFF00000000;
    LOBYTE(v64) = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v62 = 0;
    memset(v63, 0, 13);
    v61 = v55;
    (*(void (**)(void))(16 * *(unsigned int *)(16 * (*v55 & 0xFFFFFFFE) + 0x4C) + 0x68))();
    if (BYTE1(v63[1]) == 1)
    {
      v56 = v59[0];
    }
    else if (BYTE1(v63[1]) == 2)
    {
      v56 = (WTF::StringImpl *)JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v59, a2, v26, v27, v20, v21, v22, v23);
    }
    else
    {
      v56 = (WTF::StringImpl *)JSC::PropertySlot::customGetter((uint64_t)v59, *((JSC::VM **)a2 + 7), v70);
    }
    v57 = v60;
    *(_QWORD *)a4 = v56;
    *(_DWORD *)(a4 + 16) = v57;
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 1;
    if (v65)
    {
      v58 = *(_DWORD *)(v64 + 4);
      if (!v58)
      {
        result = 57;
        __break(0xC471u);
        return result;
      }
      *(_DWORD *)(v64 + 4) = v58 - 1;
    }
    OwnPropertySlot = 1;
  }
  v29 = v70;
  v70 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v25, v26, v27, v20, v21, v22, v23);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  return OwnPropertySlot;
}

void JSC::JSModuleEnvironment::getOwnSpecialPropertyNames(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49[2];
  char v50;
  uint64_t v51;
  WTF::StringImpl *v52;

  if ((a3[3] & 2) == 0)
    return;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) + 1) + 32) + 40);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    v11 = v9 + 40 * v10;
    if (*(_DWORD *)(v9 - 12))
    {
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) + 1) + 32) + 40);
      if ((_DWORD)v10)
      {
        v13 = 40 * v10;
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 16) + 1) + 32)
                        + 40);
        while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
        {
          v12 += 40;
          v13 -= 40;
          if (!v13)
          {
            v12 = v11;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v12 = v9 + 40 * v10;
  }
  else
  {
    v12 = 0;
    LODWORD(v10) = 0;
  }
  v11 = v9 + 40 * v10;
  if (v9)
  {
LABEL_9:
    v14 = v9 + 40 * *(unsigned int *)(v9 - 4);
    goto LABEL_13;
  }
  v14 = 0;
LABEL_13:
  if (v14 != v12)
  {
    v15 = a3 + 1;
    do
    {
      if (!*(_DWORD *)(v12 + 8))
      {
        v16 = *(WTF::StringImpl **)(v12 + 32);
        v52 = v16;
        v17 = *((_DWORD *)v16 + 4);
        if ((v17 & 0x20) != 0)
        {
          if ((a3[3] & 1) != 0 && (!*((_BYTE *)a3 + 25) || (*((_BYTE *)v16 + 36) & 4) == 0))
          {
LABEL_18:
            v18 = *a3;
            v19 = *(unsigned int *)(*a3 + 20);
            if (v19 <= 0x13)
            {
              if ((_DWORD)v19)
              {
                v23 = *(WTF::StringImpl ***)(v18 + 8);
                while (*v23 != v16)
                {
                  ++v23;
                  if (!--v19)
                    goto LABEL_29;
                }
                goto LABEL_40;
              }
            }
            else
            {
              if (!*v15 || !*(_DWORD *)(*v15 - 12))
              {
                v20 = *(uint64_t **)(v18 + 8);
                v21 = 8 * v19;
                do
                {
                  v22 = *v20++;
                  v51 = v22;
                  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, &v51, a4, a5, a6, a7, a8, (uint64_t)v49);
                  v21 -= 8;
                }
                while (v21);
              }
              WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(a3 + 1, (uint64_t *)&v52, a4, a5, a6, a7, a8, (uint64_t)v49);
              if (!v50)
                goto LABEL_40;
              v16 = v52;
              v18 = *a3;
              v17 = *((_DWORD *)v52 + 4);
            }
LABEL_29:
            if ((v17 & 0x20) == 0)
            {
              if ((v17 & 0x10) != 0)
              {
                *(_DWORD *)v16 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a3[2] + 41912), (unint64_t)v16, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v49);
                v16 = v49[0];
              }
              v24 = *(_DWORD *)v16;
              *(_DWORD *)v16 += 2;
              if (v24)
              {
LABEL_34:
                *(_DWORD *)v16 = v24;
              }
              else
              {
                WTF::StringImpl::~StringImpl(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
              }
              v25 = (uint64_t *)(v18 + 8);
              v49[0] = v16;
              v26 = *(unsigned int *)(v18 + 20);
              if ((_DWORD)v26 == *(_DWORD *)(v18 + 16))
              {
                v46 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)v49);
                v26 = *(unsigned int *)(v18 + 20);
                v47 = *(_QWORD *)(v18 + 8);
                v48 = *v46;
                *v46 = 0;
                *(_QWORD *)(v47 + 8 * v26) = v48;
              }
              else
              {
                v27 = *v25;
                v49[0] = 0;
                *(_QWORD *)(v27 + 8 * v26) = v16;
              }
              *(_DWORD *)(v18 + 20) = v26 + 1;
              v28 = v49[0];
              v49[0] = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 2)
                {
                  WTF::StringImpl::~StringImpl(v28, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
                }
                else
                {
                  *(_DWORD *)v28 -= 2;
                }
              }
              goto LABEL_40;
            }
            v24 = *(_DWORD *)v16 + 2;
            goto LABEL_34;
          }
        }
        else if ((a3[3] & 2) != 0)
        {
          goto LABEL_18;
        }
      }
LABEL_40:
      v29 = v12 + 40;
      v12 = v11;
      if (v29 != v11)
      {
        v12 = v29;
        while ((unint64_t)(*(_QWORD *)v12 + 1) <= 1)
        {
          v12 += 40;
          if (v12 == v11)
          {
            v12 = v11;
            break;
          }
        }
      }
    }
    while (v12 != v14);
  }
}

void JSC::JSModuleEnvironment::visitChildren(JSC::JSModuleEnvironment *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;

  JSC::JSLexicalEnvironment::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
  v17 = (v16 + 1);
  if (v16 != -1)
  {
    v18 = (unint64_t *)((char *)this + 32);
    while (1)
    {
      v20 = *v18++;
      v19 = v20;
      if ((v20 & 0xFFFE000000000002) != 0 || v19 == 0)
        goto LABEL_12;
      if ((v19 & 8) != 0)
      {
        if ((*(_BYTE *)(v19 - 79) & 1) == 0)
          goto LABEL_23;
      }
      else
      {
        v22 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != v22)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000), v22, v10, v11, v12, v13, v14, v15);
        if (((*(_QWORD *)((v19 & 0xFFFFFFFFFFFFC000) + 8 * ((v19 >> 10) & 0xF) + 0x28) >> (v19 >> 4)) & 1) == 0)
        {
LABEL_23:
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v19, 0, v11, v12, v13, v14, v15);
          goto LABEL_12;
        }
      }
      if (*((_QWORD *)a2 + 21))
        goto LABEL_23;
LABEL_12:
      if (!--v17)
      {
        v23 = 8 * (*(_DWORD *)(*((_QWORD *)this + 3) + 16) + 1) + 32;
        goto LABEL_14;
      }
    }
  }
  v23 = 32;
LABEL_14:
  v24 = *(_QWORD *)((char *)this + v23);
  if (v24)
  {
    if ((v24 & 8) != 0)
    {
      if ((*(_BYTE *)(v24 - 79) & 1) == 0)
        goto LABEL_25;
    }
    else
    {
      v25 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v24 & 0xFFFFFFFFFFFFC000 | 0x20) != v25)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v24 & 0xFFFFFFFFFFFFC000), v25, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v24 & 0xFFFFFFFFFFFFC000) + 8 * ((v24 >> 10) & 0xF) + 0x28) >> (v24 >> 4)) & 1) == 0)
        goto LABEL_25;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_25:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v24, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::JSModuleEnvironment::visitChildren(JSC::JSModuleEnvironment *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[2];
  uint64_t v13;
  char v14;

  v12[0] = a2;
  v12[1] = this;
  v14 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v13 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v12;
    JSC::JSLexicalEnvironment::visitChildren(this, a2, a3);
    v6 = *(_DWORD *)(*((_QWORD *)this + 3) + 16);
    v7 = (v6 + 1);
    if (v6 == -1)
    {
      v8 = 32;
    }
    else
    {
      v9 = (uint64_t *)((char *)this + 32);
      do
      {
        v10 = *v9++;
        if ((v10 & 0xFFFE000000000002) == 0)
          (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
        --v7;
      }
      while (v7);
      v8 = 8 * (*(_DWORD *)(*((_QWORD *)this + 3) + 16) + 1) + 32;
    }
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)((char *)this + v8));
    *(_QWORD *)(v12[0] + 88) = v13;
  }
  return result;
}

unint64_t JSC::JSModuleEnvironment::create(JSC *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD v27[2];

  v10 = a4;
  v17 = JSC::allocateCell<JSC::DirectArguments>(a1, (JSC::VM *)(8 * (*(_DWORD *)(a4 + 16) + 1) + 40), a3, a4, a5, a6, a7, a8);
  v19 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v17 = a2 >> 4;
  *(_DWORD *)(v17 + 4) = v19;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = v10;
  v20 = *(_QWORD *)(v10 + 40);
  if ((v20 & 1) != 0)
    v21 = (v20 >> 1) & 3;
  else
    v21 = *(unsigned __int8 *)(v20 + 4);
  if (v21 != 2)
  {
    v27[0] = &off_1E3583C90;
    v27[1] = "Allocated a scope";
    JSC::InferredValue<JSC::JSScope>::notifyWriteSlow((uint64_t *)(v10 + 40), a1, v10, v17, v27, v14, v15, v16, v18);
    v10 = *(_QWORD *)(v17 + 24);
  }
  v22 = *(_DWORD *)(v10 + 16);
  if (v22 == -1)
  {
    v25 = 32;
  }
  else
  {
    v23 = (v22 + 1) - 1;
    do
      *(_QWORD *)(v17 + 32 + 8 * v23) = a5;
    while ((unint64_t)v23--);
    v25 = 8 * (*(_DWORD *)(v10 + 16) + 1) + 32;
  }
  *(_QWORD *)(v17 + v25) = a6;
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return v17;
}

void JSC::JSModuleLoader::finishCreation(JSC::JSModuleLoader *this, uint64_t a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v11;
  unint64_t v12;
  JSC::Heap *v13;
  unint64_t SlowCase;
  int v15;
  WTF::StringImpl *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  WTF::StringImpl *v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  WTF::StringImpl *v57;
  WTF::AtomStringImpl *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  WTF::StringImpl *v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __n128 v94;
  WTF::StringImpl *v95;
  WTF::AtomStringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::AtomStringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __n128 v113;
  WTF::StringImpl *v114;
  WTF::AtomStringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::AtomStringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __n128 v132;
  WTF::StringImpl *v133;
  WTF::AtomStringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::AtomStringImpl *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __n128 v151;
  WTF::StringImpl *v152;
  WTF::AtomStringImpl *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::AtomStringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __n128 v170;
  WTF::StringImpl *v171;
  JSC::BuiltinExecutables **v172;
  WTF::AtomStringImpl *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF::StringImpl *v180;
  uint64_t v181;
  WTF::StringImpl *v182;
  uint64_t v183;
  double v184;
  float v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  WTF::StringImpl *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __n128 v197;
  WTF::AtomStringImpl *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  WTF::StringImpl *v205;
  uint64_t CodeExecutable;
  WTF::StringImpl *v207;
  uint64_t v208;
  double v209;
  float v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  __n128 v222;
  WTF::AtomStringImpl *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  WTF::StringImpl *v230;
  uint64_t v231;
  WTF::StringImpl *v232;
  uint64_t v233;
  double v234;
  float v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  __n128 v247;
  WTF::AtomStringImpl *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  WTF::StringImpl *v255;
  uint64_t v256;
  WTF::StringImpl *v257;
  uint64_t v258;
  double v259;
  float v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  WTF::StringImpl *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  __n128 v272;
  WTF::AtomStringImpl *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  WTF::StringImpl *v280;
  uint64_t v281;
  WTF::StringImpl *v282;
  uint64_t v283;
  double v284;
  float v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  WTF::StringImpl *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  __n128 v297;
  WTF::AtomStringImpl *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  WTF::StringImpl *v305;
  uint64_t v306;
  WTF::StringImpl *v307;
  uint64_t v308;
  double v309;
  float v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  WTF::StringImpl *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  __n128 v322;
  WTF::AtomStringImpl *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  WTF::StringImpl *v330;
  uint64_t v331;
  WTF::StringImpl *v332;
  uint64_t v333;
  double v334;
  float v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  WTF::StringImpl *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  __n128 v347;
  WTF::AtomStringImpl *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  WTF::StringImpl *v355;
  uint64_t v356;
  WTF::StringImpl *v357;
  uint64_t v358;
  double v359;
  float v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  WTF::StringImpl *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  __n128 v372;
  WTF::AtomStringImpl *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  WTF::StringImpl *v380;
  uint64_t v381;
  WTF::StringImpl *v382;
  uint64_t v383;
  double v384;
  float v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  WTF::StringImpl *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  __n128 v397;
  WTF::AtomStringImpl *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  WTF::StringImpl *v405;
  uint64_t v406;
  WTF::StringImpl *v407;
  uint64_t v408;
  double v409;
  float v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  WTF::StringImpl *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  __n128 v422;
  WTF::AtomStringImpl *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  WTF::StringImpl *v430;
  uint64_t ModuleCodeExecutable;
  WTF::StringImpl *v432;
  uint64_t v433;
  double v434;
  float v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  WTF::StringImpl *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  __n128 v447;
  WTF::AtomStringImpl *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  WTF::StringImpl *v455;
  uint64_t v456;
  WTF::StringImpl *v457;
  uint64_t v458;
  double v459;
  float v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  WTF::StringImpl *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  __n128 v472;
  WTF::AtomStringImpl *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  WTF::StringImpl *v480;
  uint64_t v481;
  WTF::StringImpl *v482;
  uint64_t v483;
  double v484;
  float v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  WTF::StringImpl *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  __n128 v497;
  WTF::AtomStringImpl *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  WTF::StringImpl *v505;
  uint64_t v506;
  WTF::StringImpl *v507;
  uint64_t v508;
  double v509;
  float v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  WTF::StringImpl *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  __n128 v522;
  WTF::AtomStringImpl *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  void *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  void *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  void *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  void *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  void *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  void *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  void *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  void *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  unint64_t v594;
  void *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unint64_t v602;
  void *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unint64_t v610;
  void *v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  void *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  void *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  void *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unint64_t v642;
  void *v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  unint64_t v650;
  void *v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  unint64_t v658;
  void *v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  unint64_t v666;
  void *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  void *v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  unint64_t v682;
  void *v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unint64_t v690;
  void *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  void *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unint64_t v706;
  void *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  void *v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  unint64_t v722;
  void *v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  unint64_t v730;
  void *v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  unint64_t v738;
  void *v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  unint64_t v746;
  void *v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  unint64_t v754;
  void *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unint64_t v762;
  void *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  void *v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t (*v778)(WTF::StringImpl **);
  WTF::StringImpl **v779;
  unint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  __n128 v791;
  uint64_t CodeGenerator;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  __n128 v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  __n128 v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  __n128 v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  __n128 v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  __n128 v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  __n128 v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  __n128 v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  __n128 v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  __n128 v890;
  uint64_t ModuleCodeGenerator;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  __n128 v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  __n128 v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  __n128 v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  __n128 v934;
  unint64_t v935;
  unint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  WTF::StringImpl *v940;
  __int128 v941;
  uint64_t v942;

  v11 = (char *)a3 + 40664;
  if (*((_BYTE *)a3 + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(a2 + 1520);
  if ((v12 & 1) != 0)
  {
    v778 = *(uint64_t (**)(WTF::StringImpl **))(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v779 = (WTF::StringImpl **)(a2 - 16);
    else
      v779 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v940 = *v779;
    *(_QWORD *)&v941 = a2;
    *((_QWORD *)&v941 + 1) = a2 + 1520;
    v12 = v778(&v940);
  }
  v13 = *(JSC::Heap **)v11;
  if (!*(_QWORD *)v11)
  {
    v935 = v12;
    v13 = JSC::GCClient::Heap::mapSpaceSlow((JSC::Heap **)a3 + 4694);
    v12 = v935;
  }
  SlowCase = *((_QWORD *)v13 + 3);
  if (SlowCase < *((_QWORD *)v13 + 4))
    goto LABEL_7;
  SlowCase = *((_QWORD *)v13 + 5);
  if ((SlowCase & 1) == 0)
  {
    v780 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v13 + 6);
    *((_QWORD *)v13 + 4) = SlowCase + HIDWORD(v780);
    *((_QWORD *)v13 + 5) = SlowCase + (int)v780;
LABEL_7:
    *((_QWORD *)v13 + 3) = SlowCase + 32;
    goto LABEL_8;
  }
  v936 = v12;
  JSC::sanitizeStackForVM(a3, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v13, (uint64_t)a3 + 192, 32, 0, 0, v937, v938, v939);
  v12 = v936;
LABEL_8:
  *(_DWORD *)SlowCase = 0;
  v15 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)SlowCase = v12 >> 4;
  *(_DWORD *)(SlowCase + 4) = v15;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*((_BYTE *)a3 + 755))
    __dmb(0xAu);
  WTF::AtomStringImpl::addLiteral((uint64_t)"registry", 8uLL, a4, a5, a6, a7, a8, &v940);
  v16 = v940;
  v940 = 0;
  *(_QWORD *)&v941 = this;
  *((_QWORD *)&v941 + 1) = 0x1000000FFFFFFFFLL;
  v17.n128_u64[0] = 0x100000001000000;
  v942 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, (uint64_t)a3, (unint64_t)v16, SlowCase, 0, (uint64_t)&v940, v18, v19, v17);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v530, v531, v532, v533, v534, v535, v536, v537);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"getModuleNamespaceObject", 0x18uLL, v22, v23, v24, v25, v26, &v940);
  v27 = v940;
  if (v940 && (*((_BYTE *)v940 + 16) & 0x20) == 0)
  {
    v28 = v940;
LABEL_16:
    *(_DWORD *)v28 += 2;
    goto LABEL_17;
  }
  v28 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 161) + 872);
  if (v28)
    goto LABEL_16;
LABEL_17:
  v940 = v28;
  v36 = JSC::JSFunction::create((uint64_t)a3, a2, 1, &v940, (uint64_t)JSC::moduleLoaderGetModuleNamespaceObject, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v38 = v940;
  v940 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v538, v539, v540, v541, v542, v543, v544, v545);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v27, v36, 4, v33, v34, v35, v37);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v546, v547, v548, v549, v550, v551, v552, v553);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"parseModule", 0xBuLL, v41, v42, v43, v44, v45, &v940);
  v46 = v940;
  if (v940 && (*((_BYTE *)v940 + 16) & 0x20) == 0)
  {
    v47 = v940;
LABEL_26:
    *(_DWORD *)v47 += 2;
    goto LABEL_27;
  }
  v47 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 161) + 872);
  if (v47)
    goto LABEL_26;
LABEL_27:
  v940 = v47;
  v55 = JSC::JSFunction::create((uint64_t)a3, a2, 2, &v940, (uint64_t)JSC::moduleLoaderParseModule, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v57 = v940;
  v940 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
    {
      WTF::StringImpl::~StringImpl(v57, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v554, v555, v556, v557, v558, v559, v560, v561);
    }
    else
    {
      *(_DWORD *)v57 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v46, v55, 4, v52, v53, v54, v56);
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v562, v563, v564, v565, v566, v567, v568, v569);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"requestedModules", 0x10uLL, v60, v61, v62, v63, v64, &v940);
  v65 = v940;
  if (v940 && (*((_BYTE *)v940 + 16) & 0x20) == 0)
  {
    v66 = v940;
LABEL_36:
    *(_DWORD *)v66 += 2;
    goto LABEL_37;
  }
  v66 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 161) + 872);
  if (v66)
    goto LABEL_36;
LABEL_37:
  v940 = v66;
  v74 = JSC::JSFunction::create((uint64_t)a3, a2, 1, &v940, (uint64_t)JSC::moduleLoaderRequestedModules, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v76 = v940;
  v940 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v570, v571, v572, v573, v574, v575, v576, v577);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v65, v74, 4, v71, v72, v73, v75);
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v578, v579, v580, v581, v582, v583, v584, v585);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"requestedModuleParameters", 0x19uLL, v79, v80, v81, v82, v83, &v940);
  v84 = v940;
  if (v940 && (*((_BYTE *)v940 + 16) & 0x20) == 0)
  {
    v85 = v940;
LABEL_46:
    *(_DWORD *)v85 += 2;
    goto LABEL_47;
  }
  v85 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 161) + 872);
  if (v85)
    goto LABEL_46;
LABEL_47:
  v940 = v85;
  v93 = JSC::JSFunction::create((uint64_t)a3, a2, 1, &v940, (uint64_t)JSC::moduleLoaderRequestedModuleParameters, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v95 = v940;
  v940 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v586, v587, v588, v589, v590, v591, v592, v593);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v84, v93, 4, v90, v91, v92, v94);
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v96, v97, v98, v99, v100, v101, v102);
      WTF::fastFree(v594, v595, v596, v597, v598, v599, v600, v601);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"resolve", 7uLL, v98, v99, v100, v101, v102, &v940);
  v103 = v940;
  if (v940 && (*((_BYTE *)v940 + 16) & 0x20) == 0)
  {
    v104 = v940;
LABEL_56:
    *(_DWORD *)v104 += 2;
    goto LABEL_57;
  }
  v104 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 161) + 872);
  if (v104)
    goto LABEL_56;
LABEL_57:
  v940 = v104;
  v112 = JSC::JSFunction::create((uint64_t)a3, a2, 2, &v940, (uint64_t)JSC::moduleLoaderResolve, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v114 = v940;
  v940 = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
    {
      WTF::StringImpl::~StringImpl(v114, v105, v106, v107, v108, v109, v110, v111);
      WTF::fastFree(v602, v603, v604, v605, v606, v607, v608, v609);
    }
    else
    {
      *(_DWORD *)v114 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v103, v112, 4, v109, v110, v111, v113);
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
    {
      WTF::StringImpl::~StringImpl(v103, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v610, v611, v612, v613, v614, v615, v616, v617);
    }
    else
    {
      *(_DWORD *)v103 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"fetch", 5uLL, v117, v118, v119, v120, v121, &v940);
  v122 = v940;
  if (v940 && (*((_BYTE *)v940 + 16) & 0x20) == 0)
  {
    v123 = v940;
LABEL_66:
    *(_DWORD *)v123 += 2;
    goto LABEL_67;
  }
  v123 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 161) + 872);
  if (v123)
    goto LABEL_66;
LABEL_67:
  v940 = v123;
  v131 = JSC::JSFunction::create((uint64_t)a3, a2, 3, &v940, (uint64_t)JSC::moduleLoaderFetch, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v133 = v940;
  v940 = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
    {
      WTF::StringImpl::~StringImpl(v133, v124, v125, v126, v127, v128, v129, v130);
      WTF::fastFree(v618, v619, v620, v621, v622, v623, v624, v625);
    }
    else
    {
      *(_DWORD *)v133 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v122, v131, 4, v128, v129, v130, v132);
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
    {
      WTF::StringImpl::~StringImpl(v122, v134, v135, v136, v137, v138, v139, v140);
      WTF::fastFree(v626, v627, v628, v629, v630, v631, v632, v633);
    }
    else
    {
      *(_DWORD *)v122 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"moduleDeclarationInstantiation", 0x1EuLL, v136, v137, v138, v139, v140, &v940);
  v141 = v940;
  if (v940 && (*((_BYTE *)v940 + 16) & 0x20) == 0)
  {
    v142 = v940;
LABEL_76:
    *(_DWORD *)v142 += 2;
    goto LABEL_77;
  }
  v142 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 161) + 872);
  if (v142)
    goto LABEL_76;
LABEL_77:
  v940 = v142;
  v150 = JSC::JSFunction::create((uint64_t)a3, a2, 2, &v940, (uint64_t)JSC::moduleLoaderModuleDeclarationInstantiation, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v152 = v940;
  v940 = 0;
  if (v152)
  {
    if (*(_DWORD *)v152 == 2)
    {
      WTF::StringImpl::~StringImpl(v152, v143, v144, v145, v146, v147, v148, v149);
      WTF::fastFree(v634, v635, v636, v637, v638, v639, v640, v641);
    }
    else
    {
      *(_DWORD *)v152 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v141, v150, 4, v147, v148, v149, v151);
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
    {
      WTF::StringImpl::~StringImpl(v141, v153, v154, v155, v156, v157, v158, v159);
      WTF::fastFree(v642, v643, v644, v645, v646, v647, v648, v649);
    }
    else
    {
      *(_DWORD *)v141 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"evaluate", 8uLL, v155, v156, v157, v158, v159, &v940);
  v160 = v940;
  if (v940 && (*((_BYTE *)v940 + 16) & 0x20) == 0)
  {
    v161 = v940;
LABEL_86:
    *(_DWORD *)v161 += 2;
    goto LABEL_87;
  }
  v161 = *(WTF::StringImpl **)(*((_QWORD *)v11 + 161) + 872);
  if (v161)
    goto LABEL_86;
LABEL_87:
  v940 = v161;
  v169 = JSC::JSFunction::create((uint64_t)a3, a2, 3, &v940, (uint64_t)JSC::moduleLoaderEvaluate, 1, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v171 = v940;
  v940 = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
    {
      WTF::StringImpl::~StringImpl(v171, v162, v163, v164, v165, v166, v167, v168);
      WTF::fastFree(v650, v651, v652, v653, v654, v655, v656, v657);
    }
    else
    {
      *(_DWORD *)v171 -= 2;
    }
  }
  v172 = (JSC::BuiltinExecutables **)((char *)a3 + 93152);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v160, v169, 4, v166, v167, v168, v170);
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
    {
      WTF::StringImpl::~StringImpl(v160, v173, v174, v175, v176, v177, v178, v179);
      WTF::fastFree(v658, v659, v660, v661, v662, v663, v664, v665);
    }
    else
    {
      *(_DWORD *)v160 -= 2;
    }
  }
  v180 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 496);
  if (v180)
  {
    *(_DWORD *)v180 += 2;
    v181 = JSC::BuiltinExecutables::moduleLoaderEnsureRegisteredCodeExecutable(*v172);
    v182 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v182 + 2);
    v940 = v182;
    v941 = xmmword_1991250A0;
    v191 = JSC::UnlinkedFunctionExecutable::link(v181, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v183, COERCE_DOUBLE(0x1174D0001169ELL), v184, v185);
    v192 = v940;
    v940 = 0;
    if (v192)
    {
      if (*((_DWORD *)v192 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v192 + 8))(v192);
      else
        --*((_DWORD *)v192 + 2);
    }
    v193 = JSC::JSFunction::create((uint64_t)a3, v191, (_DWORD *)a2, v186, v187, v188, v189, v190);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v180, v193, 4, v194, v195, v196, v197);
    if (*(_DWORD *)v180 == 2)
    {
      WTF::StringImpl::~StringImpl(v180, v198, v199, v200, v201, v202, v203, v204);
      WTF::fastFree(v666, v667, v668, v669, v670, v671, v672, v673);
    }
    else
    {
      *(_DWORD *)v180 -= 2;
    }
  }
  else
  {
    v781 = JSC::moduleLoaderEnsureRegisteredCodeGenerator((JSC::BuiltinExecutables **)a3, v173);
    v787 = JSC::JSFunction::create((uint64_t)a3, v781, (_DWORD *)a2, v782, v783, v784, v785, v786);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v787, 4, v788, v789, v790, v791);
  }
  v205 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 1368);
  if (v205)
  {
    *(_DWORD *)v205 += 2;
    CodeExecutable = JSC::BuiltinExecutables::moduleLoaderRequestFetchCodeExecutable(*v172);
    v207 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v207 + 2);
    v940 = v207;
    v941 = xmmword_199125840;
    v216 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v208, COERCE_DOUBLE(0x23EB500023CAALL), v209, v210);
    v217 = v940;
    v940 = 0;
    if (v217)
    {
      if (*((_DWORD *)v217 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v217 + 8))(v217);
      else
        --*((_DWORD *)v217 + 2);
    }
    v218 = JSC::JSFunction::create((uint64_t)a3, v216, (_DWORD *)a2, v211, v212, v213, v214, v215);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v205, v218, 4, v219, v220, v221, v222);
    if (*(_DWORD *)v205 == 2)
    {
      WTF::StringImpl::~StringImpl(v205, v223, v224, v225, v226, v227, v228, v229);
      WTF::fastFree(v674, v675, v676, v677, v678, v679, v680, v681);
    }
    else
    {
      *(_DWORD *)v205 -= 2;
    }
  }
  else
  {
    CodeGenerator = JSC::moduleLoaderRequestFetchCodeGenerator((JSC::BuiltinExecutables **)a3, v198);
    v798 = JSC::JSFunction::create((uint64_t)a3, CodeGenerator, (_DWORD *)a2, v793, v794, v795, v796, v797);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v798, 4, v799, v800, v801, v802);
  }
  v230 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 1384);
  if (v230)
  {
    *(_DWORD *)v230 += 2;
    v231 = JSC::BuiltinExecutables::moduleLoaderRequestInstantiateCodeExecutable(*v172);
    v232 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v232 + 2);
    v940 = v232;
    v941 = xmmword_199125860;
    v241 = JSC::UnlinkedFunctionExecutable::link(v231, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v233, COERCE_DOUBLE(0x244300002404BLL), v234, v235);
    v242 = v940;
    v940 = 0;
    if (v242)
    {
      if (*((_DWORD *)v242 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v242 + 8))(v242);
      else
        --*((_DWORD *)v242 + 2);
    }
    v243 = JSC::JSFunction::create((uint64_t)a3, v241, (_DWORD *)a2, v236, v237, v238, v239, v240);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v230, v243, 4, v244, v245, v246, v247);
    if (*(_DWORD *)v230 == 2)
    {
      WTF::StringImpl::~StringImpl(v230, v248, v249, v250, v251, v252, v253, v254);
      WTF::fastFree(v682, v683, v684, v685, v686, v687, v688, v689);
    }
    else
    {
      *(_DWORD *)v230 -= 2;
    }
  }
  else
  {
    v803 = JSC::moduleLoaderRequestInstantiateCodeGenerator((JSC::BuiltinExecutables **)a3, v223);
    v809 = JSC::JSFunction::create((uint64_t)a3, v803, (_DWORD *)a2, v804, v805, v806, v807, v808);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v809, 4, v810, v811, v812, v813);
  }
  v255 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 1392);
  if (v255)
  {
    *(_DWORD *)v255 += 2;
    v256 = JSC::BuiltinExecutables::moduleLoaderRequestSatisfyCodeExecutable(*v172);
    v257 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v257 + 2);
    v940 = v257;
    v941 = xmmword_199125870;
    v266 = JSC::UnlinkedFunctionExecutable::link(v256, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v258, COERCE_DOUBLE(0x2458A00024430), v259, v260);
    v267 = v940;
    v940 = 0;
    if (v267)
    {
      if (*((_DWORD *)v267 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v267 + 8))(v267);
      else
        --*((_DWORD *)v267 + 2);
    }
    v268 = JSC::JSFunction::create((uint64_t)a3, v266, (_DWORD *)a2, v261, v262, v263, v264, v265);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v255, v268, 4, v269, v270, v271, v272);
    if (*(_DWORD *)v255 == 2)
    {
      WTF::StringImpl::~StringImpl(v255, v273, v274, v275, v276, v277, v278, v279);
      WTF::fastFree(v690, v691, v692, v693, v694, v695, v696, v697);
    }
    else
    {
      *(_DWORD *)v255 -= 2;
    }
  }
  else
  {
    v814 = JSC::moduleLoaderRequestSatisfyCodeGenerator((JSC::BuiltinExecutables **)a3, v248);
    v820 = JSC::JSFunction::create((uint64_t)a3, v814, (_DWORD *)a2, v815, v816, v817, v818, v819);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v820, 4, v821, v822, v823, v824);
  }
  v280 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 1400);
  if (v280)
  {
    *(_DWORD *)v280 += 2;
    v281 = JSC::BuiltinExecutables::moduleLoaderRequestSatisfyUtilCodeExecutable(*v172);
    v282 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v282 + 2);
    v940 = v282;
    v941 = xmmword_199125880;
    v291 = JSC::UnlinkedFunctionExecutable::link(v281, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v283, COERCE_DOUBLE(0x2492F0002458ALL), v284, v285);
    v292 = v940;
    v940 = 0;
    if (v292)
    {
      if (*((_DWORD *)v292 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v292 + 8))(v292);
      else
        --*((_DWORD *)v292 + 2);
    }
    v293 = JSC::JSFunction::create((uint64_t)a3, v291, (_DWORD *)a2, v286, v287, v288, v289, v290);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v280, v293, 4, v294, v295, v296, v297);
    if (*(_DWORD *)v280 == 2)
    {
      WTF::StringImpl::~StringImpl(v280, v298, v299, v300, v301, v302, v303, v304);
      WTF::fastFree(v698, v699, v700, v701, v702, v703, v704, v705);
    }
    else
    {
      *(_DWORD *)v280 -= 2;
    }
  }
  else
  {
    v825 = JSC::moduleLoaderRequestSatisfyUtilCodeGenerator((JSC::BuiltinExecutables **)a3, v273);
    v831 = JSC::JSFunction::create((uint64_t)a3, v825, (_DWORD *)a2, v826, v827, v828, v829, v830);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v831, 4, v832, v833, v834, v835);
  }
  v305 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 880);
  if (v305)
  {
    *(_DWORD *)v305 += 2;
    v306 = JSC::BuiltinExecutables::moduleLoaderLinkCodeExecutable(*v172);
    v307 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v307 + 2);
    v940 = v307;
    v941 = xmmword_1991253F0;
    v316 = JSC::UnlinkedFunctionExecutable::link(v306, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v308, COERCE_DOUBLE(0x19C82000199C1), v309, v310);
    v317 = v940;
    v940 = 0;
    if (v317)
    {
      if (*((_DWORD *)v317 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v317 + 8))(v317);
      else
        --*((_DWORD *)v317 + 2);
    }
    v318 = JSC::JSFunction::create((uint64_t)a3, v316, (_DWORD *)a2, v311, v312, v313, v314, v315);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v305, v318, 4, v319, v320, v321, v322);
    if (*(_DWORD *)v305 == 2)
    {
      WTF::StringImpl::~StringImpl(v305, v323, v324, v325, v326, v327, v328, v329);
      WTF::fastFree(v706, v707, v708, v709, v710, v711, v712, v713);
    }
    else
    {
      *(_DWORD *)v305 -= 2;
    }
  }
  else
  {
    v836 = JSC::moduleLoaderLinkCodeGenerator((JSC::BuiltinExecutables **)a3, v298);
    v842 = JSC::JSFunction::create((uint64_t)a3, v836, (_DWORD *)a2, v837, v838, v839, v840, v841);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v842, 4, v843, v844, v845, v846);
  }
  v330 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 960);
  if (v330)
  {
    *(_DWORD *)v330 += 2;
    v331 = JSC::BuiltinExecutables::moduleLoaderModuleEvaluationCodeExecutable(*v172);
    v332 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v332 + 2);
    v940 = v332;
    v941 = xmmword_1991254D0;
    v341 = JSC::UnlinkedFunctionExecutable::link(v331, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v333, COERCE_DOUBLE(0x1B0FB0001AF33), v334, v335);
    v342 = v940;
    v940 = 0;
    if (v342)
    {
      if (*((_DWORD *)v342 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v342 + 8))(v342);
      else
        --*((_DWORD *)v342 + 2);
    }
    v343 = JSC::JSFunction::create((uint64_t)a3, v341, (_DWORD *)a2, v336, v337, v338, v339, v340);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v330, v343, 4, v344, v345, v346, v347);
    if (*(_DWORD *)v330 == 2)
    {
      WTF::StringImpl::~StringImpl(v330, v348, v349, v350, v351, v352, v353, v354);
      WTF::fastFree(v714, v715, v716, v717, v718, v719, v720, v721);
    }
    else
    {
      *(_DWORD *)v330 -= 2;
    }
  }
  else
  {
    v847 = JSC::moduleLoaderModuleEvaluationCodeGenerator((JSC::BuiltinExecutables **)a3, v323);
    v853 = JSC::JSFunction::create((uint64_t)a3, v847, (_DWORD *)a2, v848, v849, v850, v851, v852);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v853, 4, v854, v855, v856, v857);
  }
  v355 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 240);
  if (v355)
  {
    *(_DWORD *)v355 += 2;
    v356 = JSC::BuiltinExecutables::moduleLoaderAsyncModuleEvaluationCodeExecutable(*v172);
    v357 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v357 + 2);
    v940 = v357;
    v941 = xmmword_199124EC0;
    v366 = JSC::UnlinkedFunctionExecutable::link(v356, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v358, COERCE_DOUBLE(0x388A0000361CLL), v359, v360);
    v367 = v940;
    v940 = 0;
    if (v367)
    {
      if (*((_DWORD *)v367 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v367 + 8))(v367);
      else
        --*((_DWORD *)v367 + 2);
    }
    v368 = JSC::JSFunction::create((uint64_t)a3, v366, (_DWORD *)a2, v361, v362, v363, v364, v365);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v355, v368, 4, v369, v370, v371, v372);
    if (*(_DWORD *)v355 == 2)
    {
      WTF::StringImpl::~StringImpl(v355, v373, v374, v375, v376, v377, v378, v379);
      WTF::fastFree(v722, v723, v724, v725, v726, v727, v728, v729);
    }
    else
    {
      *(_DWORD *)v355 -= 2;
    }
  }
  else
  {
    v858 = JSC::moduleLoaderAsyncModuleEvaluationCodeGenerator((JSC::BuiltinExecutables **)a3, v348);
    v864 = JSC::JSFunction::create((uint64_t)a3, v858, (_DWORD *)a2, v859, v860, v861, v862, v863);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v864, 4, v865, v866, v867, v868);
  }
  v380 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 1240);
  if (v380)
  {
    *(_DWORD *)v380 += 2;
    v381 = JSC::BuiltinExecutables::moduleLoaderProvideFetchCodeExecutable(*v172);
    v382 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v382 + 2);
    v940 = v382;
    v941 = xmmword_199125710;
    v391 = JSC::UnlinkedFunctionExecutable::link(v381, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v383, COERCE_DOUBLE(0x20E8500020DBDLL), v384, v385);
    v392 = v940;
    v940 = 0;
    if (v392)
    {
      if (*((_DWORD *)v392 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v392 + 8))(v392);
      else
        --*((_DWORD *)v392 + 2);
    }
    v393 = JSC::JSFunction::create((uint64_t)a3, v391, (_DWORD *)a2, v386, v387, v388, v389, v390);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v380, v393, 4, v394, v395, v396, v397);
    if (*(_DWORD *)v380 == 2)
    {
      WTF::StringImpl::~StringImpl(v380, v398, v399, v400, v401, v402, v403, v404);
      WTF::fastFree(v730, v731, v732, v733, v734, v735, v736, v737);
    }
    else
    {
      *(_DWORD *)v380 -= 2;
    }
  }
  else
  {
    v869 = JSC::moduleLoaderProvideFetchCodeGenerator((JSC::BuiltinExecutables **)a3, v373);
    v875 = JSC::JSFunction::create((uint64_t)a3, v869, (_DWORD *)a2, v870, v871, v872, v873, v874);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v875, 4, v876, v877, v878, v879);
  }
  v405 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 896);
  if (v405)
  {
    *(_DWORD *)v405 += 2;
    v406 = JSC::BuiltinExecutables::moduleLoaderLoadAndEvaluateModuleCodeExecutable(*v172);
    v407 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v407 + 2);
    v940 = v407;
    v941 = xmmword_199125420;
    v416 = JSC::UnlinkedFunctionExecutable::link(v406, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v408, COERCE_DOUBLE(0x19EB600019D86), v409, v410);
    v417 = v940;
    v940 = 0;
    if (v417)
    {
      if (*((_DWORD *)v417 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v417 + 8))(v417);
      else
        --*((_DWORD *)v417 + 2);
    }
    v418 = JSC::JSFunction::create((uint64_t)a3, v416, (_DWORD *)a2, v411, v412, v413, v414, v415);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v405, v418, 4, v419, v420, v421, v422);
    if (*(_DWORD *)v405 == 2)
    {
      WTF::StringImpl::~StringImpl(v405, v423, v424, v425, v426, v427, v428, v429);
      WTF::fastFree(v738, v739, v740, v741, v742, v743, v744, v745);
    }
    else
    {
      *(_DWORD *)v405 -= 2;
    }
  }
  else
  {
    v880 = JSC::moduleLoaderLoadAndEvaluateModuleCodeGenerator((JSC::BuiltinExecutables **)a3, v398);
    v886 = JSC::JSFunction::create((uint64_t)a3, v880, (_DWORD *)a2, v881, v882, v883, v884, v885);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v886, 4, v887, v888, v889, v890);
  }
  v430 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 904);
  if (v430)
  {
    *(_DWORD *)v430 += 2;
    ModuleCodeExecutable = JSC::BuiltinExecutables::moduleLoaderLoadModuleCodeExecutable(*v172);
    v432 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v432 + 2);
    v940 = v432;
    v941 = xmmword_199125430;
    v441 = JSC::UnlinkedFunctionExecutable::link(ModuleCodeExecutable, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v433, COERCE_DOUBLE(0x19FAC00019EB6), v434, v435);
    v442 = v940;
    v940 = 0;
    if (v442)
    {
      if (*((_DWORD *)v442 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v442 + 8))(v442);
      else
        --*((_DWORD *)v442 + 2);
    }
    v443 = JSC::JSFunction::create((uint64_t)a3, v441, (_DWORD *)a2, v436, v437, v438, v439, v440);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v430, v443, 4, v444, v445, v446, v447);
    if (*(_DWORD *)v430 == 2)
    {
      WTF::StringImpl::~StringImpl(v430, v448, v449, v450, v451, v452, v453, v454);
      WTF::fastFree(v746, v747, v748, v749, v750, v751, v752, v753);
    }
    else
    {
      *(_DWORD *)v430 -= 2;
    }
  }
  else
  {
    ModuleCodeGenerator = JSC::moduleLoaderLoadModuleCodeGenerator((JSC::BuiltinExecutables **)a3, v423);
    v897 = JSC::JSFunction::create((uint64_t)a3, ModuleCodeGenerator, (_DWORD *)a2, v892, v893, v894, v895, v896);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v897, 4, v898, v899, v900, v901);
  }
  v455 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 888);
  if (v455)
  {
    *(_DWORD *)v455 += 2;
    v456 = JSC::BuiltinExecutables::moduleLoaderLinkAndEvaluateModuleCodeExecutable(*v172);
    v457 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v457 + 2);
    v940 = v457;
    v941 = xmmword_199125410;
    v466 = JSC::UnlinkedFunctionExecutable::link(v456, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v458, COERCE_DOUBLE(0x19D8600019CE9), v459, v460);
    v467 = v940;
    v940 = 0;
    if (v467)
    {
      if (*((_DWORD *)v467 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v467 + 8))(v467);
      else
        --*((_DWORD *)v467 + 2);
    }
    v468 = JSC::JSFunction::create((uint64_t)a3, v466, (_DWORD *)a2, v461, v462, v463, v464, v465);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v455, v468, 4, v469, v470, v471, v472);
    if (*(_DWORD *)v455 == 2)
    {
      WTF::StringImpl::~StringImpl(v455, v473, v474, v475, v476, v477, v478, v479);
      WTF::fastFree(v754, v755, v756, v757, v758, v759, v760, v761);
    }
    else
    {
      *(_DWORD *)v455 -= 2;
    }
  }
  else
  {
    v902 = JSC::moduleLoaderLinkAndEvaluateModuleCodeGenerator((JSC::BuiltinExecutables **)a3, v448);
    v908 = JSC::JSFunction::create((uint64_t)a3, v902, (_DWORD *)a2, v903, v904, v905, v906, v907);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v908, 4, v909, v910, v911, v912);
  }
  v480 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 1376);
  if (v480)
  {
    *(_DWORD *)v480 += 2;
    v481 = JSC::BuiltinExecutables::moduleLoaderRequestImportModuleCodeExecutable(*v172);
    v482 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v482 + 2);
    v940 = v482;
    v941 = xmmword_199125850;
    v491 = JSC::UnlinkedFunctionExecutable::link(v481, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v483, COERCE_DOUBLE(0x2404B00023EB5), v484, v485);
    v492 = v940;
    v940 = 0;
    if (v492)
    {
      if (*((_DWORD *)v492 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v492 + 8))(v492);
      else
        --*((_DWORD *)v492 + 2);
    }
    v493 = JSC::JSFunction::create((uint64_t)a3, v491, (_DWORD *)a2, v486, v487, v488, v489, v490);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v480, v493, 4, v494, v495, v496, v497);
    if (*(_DWORD *)v480 == 2)
    {
      WTF::StringImpl::~StringImpl(v480, v498, v499, v500, v501, v502, v503, v504);
      WTF::fastFree(v762, v763, v764, v765, v766, v767, v768, v769);
    }
    else
    {
      *(_DWORD *)v480 -= 2;
    }
  }
  else
  {
    v913 = JSC::moduleLoaderRequestImportModuleCodeGenerator((JSC::BuiltinExecutables **)a3, v473);
    v919 = JSC::JSFunction::create((uint64_t)a3, v913, (_DWORD *)a2, v914, v915, v916, v917, v918);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v919, 4, v920, v921, v922, v923);
  }
  v505 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v11 + 161) + 48) + 456);
  if (v505)
  {
    *(_DWORD *)v505 += 2;
    v506 = JSC::BuiltinExecutables::moduleLoaderDependencyKeysIfEvaluatedCodeExecutable(*v172);
    v507 = (WTF::StringImpl *)*((_QWORD *)*v172 + 1);
    ++*((_DWORD *)v507 + 2);
    v940 = v507;
    v941 = xmmword_199125080;
    v516 = JSC::UnlinkedFunctionExecutable::link(v506, (uint64_t)a3, 0, (uint64_t)&v940, 0, 0, 0, v508, COERCE_DOUBLE(0x109A900010879), v509, v510);
    v517 = v940;
    v940 = 0;
    if (v517)
    {
      if (*((_DWORD *)v517 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v517 + 8))(v517);
      else
        --*((_DWORD *)v517 + 2);
    }
    v518 = JSC::JSFunction::create((uint64_t)a3, v516, (_DWORD *)a2, v511, v512, v513, v514, v515);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, (unint64_t)v505, v518, 4, v519, v520, v521, v522);
    if (*(_DWORD *)v505 == 2)
    {
      WTF::StringImpl::~StringImpl(v505, v523, v524, v525, v526, v527, v528, v529);
      WTF::fastFree(v770, v771, v772, v773, v774, v775, v776, v777);
    }
    else
    {
      *(_DWORD *)v505 -= 2;
    }
  }
  else
  {
    v924 = JSC::moduleLoaderDependencyKeysIfEvaluatedCodeGenerator((JSC::BuiltinExecutables **)a3, v498);
    v930 = JSC::JSFunction::create((uint64_t)a3, v924, (_DWORD *)a2, v925, v926, v927, v928, v929);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a3, 0, v930, 4, v931, v932, v933, v934);
  }
}

