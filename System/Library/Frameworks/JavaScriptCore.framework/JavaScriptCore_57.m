void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseFunctionIndex(_BYTE *a1, unint64_t *a2, unsigned int *a3, double a4, float a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v10 = a2[2];
  v11 = *a2;
  v12 = v10 > *a2;
  v13 = v10 - *a2;
  if (v12)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = a2[1];
    *a2 = v11 + 1;
    v18 = v17 + v11;
    v19 = v11 + 2;
    while (1)
    {
      v20 = *(char *)(v18 + v14);
      v16 |= (v20 & 0x7F) << v15;
      if ((v20 & 0x80000000) == 0)
        break;
      if (v13 >= 5)
        v21 = 5;
      else
        v21 = v13;
      if (v21 - 1 == v14)
        goto LABEL_18;
      *a2 = v19 + v14;
      v15 += 7;
      if (v13 == ++v14)
      {
        __break(1u);
LABEL_15:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>("function index ", a2, 16, v16, " exceeds function index space ", 31, a9, &v22, a5);
        goto LABEL_16;
      }
    }
    if ((_DWORD)v14 != 4 || *(unsigned __int8 *)(v18 + v14) < 0x10u)
    {
      a9 = *(unsigned int *)(a2[2574] + 52) + (unint64_t)*(unsigned int *)(a2[2574] + 36);
      if (a9 > v16)
      {
        *a3 = v16;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      goto LABEL_15;
    }
  }
LABEL_18:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse function index", a2, 27, &v22, a5);
LABEL_16:
  *(_QWORD *)a1 = v22;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseBranchTarget(_BYTE *a1, uint64_t a2, unsigned int *a3, int a4, double a5, float a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (v12)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = v11 + 1;
    v19 = v18 + v11;
    v20 = v11 + 2;
    while (1)
    {
      v21 = *(char *)(v19 + v15);
      v17 |= (v21 & 0x7F) << v16;
      if ((v21 & 0x80000000) == 0)
        break;
      if (v13 >= 5)
        v22 = 5;
      else
        v22 = v13;
      if (v22 - 1 == v15)
        goto LABEL_21;
      *(_QWORD *)a2 = v20 + v15;
      v16 += 7;
      if (v13 == ++v15)
      {
        __break(1u);
LABEL_18:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>("br / br_if's target ", (unint64_t *)a2, 21, v17, " exceeds control stack size ", 29, a9, &v23, a6);
        goto LABEL_19;
      }
    }
    if ((_DWORD)v15 != 4 || *(unsigned __int8 *)(v19 + v15) < 0x10u)
    {
      if (a4)
        a9 = *(unsigned int *)(a2 + 596) + (unint64_t)(a4 - 1);
      else
        a9 = *(unsigned int *)(a2 + 596);
      if (a9 > v17)
      {
        *a3 = v17;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      goto LABEL_18;
    }
  }
LABEL_21:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't get br / br_if's target", (unint64_t *)a2, 30, &v23, a6);
LABEL_19:
  *(_QWORD *)a1 = v23;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseTableInitImmediates(uint64_t a1, unint64_t *a2, _DWORD *a3, double a4, float a5)
{
  double v8;
  float v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  unsigned int v15;

  v15 = 0;
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseElementIndex((uint64_t)&v13, a2, &v15, a4, a5);
  if (v14
    || (v12 = 0,
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseTableIndex((uint64_t)&v13, a2, &v12, v8, v9),
        (v10 = v14) != 0))
  {
    *(_QWORD *)a1 = v13;
    v10 = 1;
  }
  else
  {
    v11 = v12;
    *a3 = v15;
    a3[1] = v11;
    *(_BYTE *)a1 = 0;
  }
  *(_BYTE *)(a1 + 8) = v10;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseElementIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unsigned int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse element index", a2, 26, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(_DWORD *)(a2[2574] + 188);
  if (v11 >= v18)
  {
    v22[0] = "element index ";
    v22[1] = 15;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseTableIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  void (**v19)(WTF::StringPrintStream *__hidden);
  unsigned int v20;
  _QWORD v21[2];
  _QWORD v22[2];
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int v24;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_16;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_16;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v24 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_16:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse table index", a2, 24, v22, a5);
    v19 = (void (**)(WTF::StringPrintStream *__hidden))v22[0];
    goto LABEL_14;
  }
  v18 = *(_DWORD *)(a2[2574] + 204);
  if (v11 >= v18)
  {
    v22[0] = "table index ";
    v22[1] = 13;
    v21[0] = " is invalid, limit is ";
    v21[1] = 23;
    v20 = v18;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v23, (uint64_t)v22, &v24, (uint64_t)v21, &v20, a4, a5);
    v19 = v23;
LABEL_14:
    *(_QWORD *)a1 = v19;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v11;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseTableCopyImmediates(_BYTE *a1, unint64_t *a2, _DWORD *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  void (**v30)(WTF::StringPrintStream *__hidden);
  unint64_t *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void (**v40)(WTF::StringPrintStream *__hidden);
  unsigned int v41;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 > *a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = a2[1];
    v13 = 5;
    if (v8 < 5)
      v13 = v6 - *a2;
    v14 = v13 - 1;
    *a2 = v7 + 1;
    while (1)
    {
      v15 = *(char *)(v12 + v7 + v9);
      LODWORD(v16) = (v15 & 0x7F) << v10;
      v11 |= v16;
      if ((v15 & 0x80000000) == 0)
        break;
      if (v14 == v9)
        goto LABEL_27;
      v17 = v7 + v9 + 2;
      *a2 = v17;
      ++v9;
      v10 += 7;
      if (v8 == v9)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    v41 = v11;
    if ((_DWORD)v9 != 4 || v15 < 0x10u)
    {
      v10 = *(_DWORD *)(a2[2574] + 204);
      if (v11 >= v10)
      {
        v38 = "table index ";
        v39 = 13;
        v36 = " is invalid, limit is ";
        v37 = 23;
        v35 = v10;
        v28 = &v41;
        v29 = &v35;
      }
      else
      {
        if (v6 <= v7 + v9 + 1)
          goto LABEL_29;
        v17 = 0;
        v18 = 0;
        LODWORD(v14) = 0;
        v19 = ~v9 + v8;
        v20 = 5;
        if (v19 < 5)
          v20 = v19;
        v21 = v7 + v9;
        *a2 = v7 + v9 + 2;
        v22 = v7 - v6;
        v23 = v12 + v7;
        v24 = v20 - 1;
        v25 = v22 + v9;
        while (1)
        {
          LODWORD(v16) = *(char *)(v23 + v17 + v9 + 1);
          LODWORD(v14) = ((v16 & 0x7F) << v18) | v14;
          if ((v16 & 0x80000000) == 0)
            break;
          if (v24 == v17)
            goto LABEL_29;
          v26 = v21 + v17;
          v27 = v25 + v17++;
          v16 = v26 + 3;
          *a2 = v16;
          v18 += 7;
          if (v27 == -2)
            goto LABEL_18;
        }
LABEL_19:
        v35 = v14;
        if ((_DWORD)v17 == 4 && v16 >= 0x10u)
        {
LABEL_29:
          v31 = a2;
          v32 = "can't parse source table index";
          v33 = 31;
          goto LABEL_30;
        }
        if (v14 < v10)
        {
          *a3 = v14;
          a3[1] = v11;
          *a1 = 0;
          a1[8] = 0;
          return;
        }
        v38 = "table index ";
        v39 = 13;
        v36 = " is invalid, limit is ";
        v37 = 23;
        v34 = v10;
        v28 = &v35;
        v29 = &v34;
      }
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v40, (uint64_t)&v38, v28, (uint64_t)&v36, v29, a4, a5);
      v30 = v40;
      goto LABEL_25;
    }
  }
LABEL_27:
  v31 = a2;
  v32 = "can't parse destination table index";
  v33 = 36;
LABEL_30:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v32, v31, v33, &v38, a5);
  v30 = (void (**)(WTF::StringPrintStream *__hidden))v38;
LABEL_25:
  *(_QWORD *)a1 = v30;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseMemoryInitImmediates(uint64_t a1, unint64_t *a2, _QWORD *a3, double a4, float a5)
{
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  char *v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;

  v26 = 0;
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseDataSegmentIndex(&v24, a2, &v26, a4, a5);
  if (v25)
    goto LABEL_16;
  v9 = a2[2];
  v10 = *a2;
  v11 = v9 - *a2;
  if (v9 <= *a2)
    goto LABEL_18;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = a2[1];
  v16 = 5;
  if (v11 < 5)
    v16 = v11;
  v17 = v16 - 1;
  *a2 = v10 + 1;
  v18 = v15 + v10;
  v19 = v10 + 2;
  while (1)
  {
    v20 = *(char *)(v18 + v12);
    v14 |= (v20 & 0x7F) << v13;
    if ((v20 & 0x80000000) == 0)
      break;
    if (v17 == v12)
      goto LABEL_18;
    LOBYTE(v20) = v19 + v12;
    *a2 = v19 + v12;
    v13 += 7;
    if (v11 == ++v12)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v12 == 4 && v20 >= 0x10u)
  {
LABEL_18:
    v21 = "can't parse unused";
    v22 = a2;
    v23 = 19;
    goto LABEL_15;
  }
  if (v14)
  {
    v21 = "memory.init invalid unsued byte";
    v22 = a2;
    v23 = 32;
LABEL_15:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v21, v22, v23, &v24, v8);
LABEL_16:
    *(_QWORD *)a1 = v24;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  *a3 = v26;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseDataSegmentIndex(_BYTE *a1, unint64_t *a2, unsigned int *a3, double a4, float a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  void (**v20)(WTF::StringPrintStream *__hidden);
  unsigned int v21;
  _QWORD v22[2];
  _QWORD v23[2];
  void (**v24)(WTF::StringPrintStream *__hidden);
  unsigned int v25;

  v6 = a2[2];
  v7 = *a2;
  v8 = v6 - *a2;
  if (v6 <= *a2)
    goto LABEL_18;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a2[1];
  v13 = 5;
  if (v8 < 5)
    v13 = v8;
  v14 = v13 - 1;
  *a2 = v7 + 1;
  v15 = v12 + v7;
  v16 = v7 + 2;
  while (1)
  {
    v17 = *(char *)(v15 + v9);
    v11 |= (v17 & 0x7F) << v10;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v14 == v9)
      goto LABEL_18;
    LOBYTE(v17) = v16 + v9;
    *a2 = v16 + v9;
    v10 += 7;
    if (v8 == ++v9)
    {
      __break(1u);
      break;
    }
  }
  v25 = v11;
  if ((_DWORD)v9 == 4 && v17 >= 0x10u)
  {
LABEL_18:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("can't parse data segment index", a2, 31, v23, a5);
    v20 = (void (**)(WTF::StringPrintStream *__hidden))v23[0];
  }
  else
  {
    v18 = a2[2574];
    if (*(_BYTE *)(v18 + 268))
    {
      v19 = *(_DWORD *)(v18 + 264);
      if (v11 < v19)
      {
        *a3 = v11;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
    }
    else
    {
      v19 = 0;
    }
    v23[0] = "data segment index ";
    v23[1] = 20;
    v22[0] = " is invalid, limit is ";
    v22[1] = 23;
    v21 = v19;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v24, (uint64_t)v23, &v25, (uint64_t)v22, &v21, a4, a5);
    v20 = v24;
  }
  *(_QWORD *)a1 = v20;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseAnnotatedSelectImmediates(_BYTE *a1, uint64_t a2, uint64_t a3, double a4, float a5)
{
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  WTF *v49;
  WTF *v50;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)a2;
  v9 = v7 - *(_QWORD *)a2;
  if (v7 <= *(_QWORD *)a2)
    goto LABEL_73;
  v11 = 0;
  v12 = 0;
  LODWORD(v13) = 0;
  v14 = *(_QWORD *)(a2 + 8);
  if (v9 >= 5)
    v9 = 5;
  v15 = v9 - 1;
  *(_QWORD *)a2 = v8 + 1;
  while (1)
  {
    LODWORD(v16) = *(char *)(v14 + v8 + v11);
    LODWORD(v13) = ((v16 & 0x7F) << v12) | v13;
    if ((v16 & 0x80000000) == 0)
      break;
    if (v15 == v11)
      goto LABEL_73;
    v16 = v8 + v11 + 2;
    *(_QWORD *)a2 = v16;
    ++v11;
    v12 += 7;
    if (!(v8 - v7 + v11))
    {
LABEL_8:
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v11 == 4 && v16 >= 0x10u)
  {
LABEL_73:
    v28 = "select can't parse the size of annotation vector";
    v29 = (unint64_t *)a2;
    v30 = 49;
    goto LABEL_24;
  }
  if ((_DWORD)v13 != 1)
  {
    v28 = "select invalid result arity for";
    v29 = (unint64_t *)a2;
    v30 = 32;
    goto LABEL_24;
  }
  if (v8 + v11 + 1 >= v7)
    goto LABEL_23;
  v17 = *(_QWORD *)(a2 + 20592);
  v18 = (char *)(v8 + v11);
  *(_QWORD *)a2 = v18 + 2;
  v19 = v18[v14 + 1];
  if ((v19 & 0x80000000) != 0)
    goto LABEL_23;
  v20 = v19 | (v19 >> 6 << 7);
  if (!JSC::Wasm::isValidTypeKind<signed char>((char)(v19 | ((v19 >> 6) << 7))))
    goto LABEL_23;
  if (!BYTE1(dword_1ECF4C7B0))
  {
    if ((v20 + 29) < 2u)
      goto LABEL_23;
    goto LABEL_17;
  }
  v8 = (char)v20;
  v26 = (char)v20 + 22;
  if (v26 <= 9 && (((1 << v26) & 0x39F) == 0 || BYTE2(dword_1ECF4C7B0)))
  {
    v27 = 227;
LABEL_28:
    if (BYTE1(dword_1ECF4C7B0))
      v31 = v8 == 0;
    else
      v31 = 1;
    if (!v31)
      goto LABEL_19;
    goto LABEL_23;
  }
  if ((v20 + 29) < 2u)
  {
    v32 = *(_QWORD *)(a2 + 16);
    v14 = *(_QWORD *)a2;
    v7 = v32 - *(_QWORD *)a2;
    if (v32 <= *(_QWORD *)a2)
      goto LABEL_23;
    v11 = 0;
    LODWORD(v8) = 0;
    v33 = *(_QWORD *)(a2 + 8);
    v34 = 5;
    if (v7 < 5)
      v34 = v7;
    v13 = v34 - 1;
    *(_QWORD *)a2 = v14 + 1;
    v35 = v33 + v14;
    v36 = v14 + 2;
    LODWORD(v14) = 7;
    while (1)
    {
      v37 = *(char *)(v35 + v11);
      LOBYTE(v16) = v37 & 0x7F;
      v8 = ((v37 & 0x7F) << (v14 - 7)) | v8;
      if ((v37 & 0x80000000) == 0)
        break;
      if (v13 == v11)
        goto LABEL_23;
      *(_QWORD *)a2 = v36 + v11;
      v14 = (v14 + 7);
      if (v7 == ++v11)
        goto LABEL_8;
    }
    if ((_DWORD)v11 == 4)
    {
      if ((v37 & 0x40) == 0)
      {
        if (*(unsigned __int8 *)(v35 + v11) > 7u)
          goto LABEL_23;
        goto LABEL_45;
      }
      if ((v37 & 0xF8) != 0x78)
        goto LABEL_23;
    }
    if (v14 <= 0x1F && (v37 & 0x40) != 0)
    {
      LODWORD(v8) = v8 | (-1 << v14);
      goto LABEL_66;
    }
LABEL_45:
    if ((v8 & 0x80000000) == 0)
    {
      if (v8 >= *(_DWORD *)(v17 + 100))
      {
        if (!*(_BYTE *)(a2 + 32))
          goto LABEL_23;
        v38 = *(_DWORD *)(a2 + 36);
        if (v8 < v38 || v8 >= *(_DWORD *)(a2 + 40))
          goto LABEL_23;
      }
      else if (!*(_BYTE *)(a2 + 32) || (v38 = *(_DWORD *)(a2 + 36), v8 < v38))
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v17 + 88) + 8 * v8);
        goto LABEL_18;
      }
      JSC::Wasm::TypeInformation::getPlaceholderProjection((JSC::Wasm::TypeInformation *)(v8 - v38), v21, v22, v23, v24, v25, (unsigned int **)&v50);
      v8 = (int64_t)v50;
      v50 = 0;
      if (v8)
      {
        do
        {
          v46 = __ldaxr((unsigned int *)v8);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, (unsigned int *)v8));
        if (!v47)
        {
          atomic_store(1u, (unsigned int *)v8);
          v49 = (WTF *)v8;
          WTF::fastFree(v8, v39, v40, v41, v42, v43, v44, v45);
          v8 = (int64_t)v49;
        }
      }
      goto LABEL_18;
    }
LABEL_66:
    v8 = (int)v8;
    v48 = (int)v8 + 22;
    if (v48 > 9 || ((1 << v48) & 0x39F) != 0 && !BYTE2(dword_1ECF4C7B0))
      goto LABEL_23;
    goto LABEL_18;
  }
LABEL_17:
  v8 = 0;
LABEL_18:
  v27 = v20;
  if (v20 - 252 < 4)
  {
LABEL_19:
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v27;
    *(_QWORD *)(a3 + 16) = v8;
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  if (v20 - 239 < 2)
  {
    if (!BYTE1(dword_1ECF4C7B0))
      goto LABEL_19;
  }
  else if (v20 == 251)
  {
    if (HIBYTE(dword_1ECF4C7B0))
    {
      v27 = 251;
      goto LABEL_19;
    }
  }
  else if (v20 - 227 < 2)
  {
    goto LABEL_28;
  }
LABEL_23:
  v28 = "select can't parse annotations";
  v29 = (unint64_t *)a2;
  v30 = 31;
LABEL_24:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v28, v29, v30, &v50, a5);
  *(_QWORD *)a1 = v50;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseStructTypeIndex(_BYTE *a1, unint64_t *a2, _DWORD *a3, char *a4, uint64_t a5, double a6, float a7)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  JSC::Wasm::TypeDefinition *v21;
  int v22;
  void (**v23)(WTF::StringPrintStream *__hidden);
  unsigned int *v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  _BOOL4 hasRecursiveReference;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t CachedUnrolling;
  uint64_t v36;
  uint64_t v37;
  const JSC::Wasm::Type *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  const JSC::Wasm::TypeDefinition *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  JSC::Wasm::TypeInformation *v49;
  void (**v50[2])(WTF::StringPrintStream *__hidden);
  const char *v51;
  uint64_t v52;
  void (**v53)(WTF::StringPrintStream *__hidden);
  unsigned int v54;
  _QWORD v55[2];

  v55[0] = a4;
  v55[1] = a5;
  v8 = a2[2];
  v9 = *a2;
  v10 = v8 - *a2;
  if (v8 <= *a2)
    goto LABEL_25;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = a2[1];
  v15 = 5;
  if (v10 < 5)
    v15 = v10;
  v16 = v15 - 1;
  *a2 = v9 + 1;
  v17 = v14 + v9;
  v18 = v9 + 2;
  while (1)
  {
    v19 = *(char *)(v17 + v11);
    v13 |= (v19 & 0x7F) << v12;
    if ((v19 & 0x80000000) == 0)
      break;
    if (v16 == v11)
      goto LABEL_25;
    LOBYTE(v19) = v18 + v11;
    *a2 = v18 + v11;
    v12 += 7;
    if (v10 == ++v11)
    {
      __break(1u);
      break;
    }
  }
  v54 = v13;
  if ((_DWORD)v11 == 4 && v19 >= 0x10u)
  {
LABEL_25:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a4, a5, &v51, a7);
    v23 = (void (**)(WTF::StringPrintStream *__hidden))v51;
  }
  else
  {
    v20 = a2[2574];
    if (v13 >= *(_DWORD *)(v20 + 100))
    {
      v51 = " index ";
      v52 = 8;
      v50[0] = (void (**)(WTF::StringPrintStream *__hidden))" is out of bound";
      v50[1] = (void (**)(WTF::StringPrintStream *__hidden))17;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v53, (uint64_t)v55, (uint64_t)&v51, &v54, (uint64_t)v50, a6, a7);
      v23 = v53;
    }
    else
    {
      v21 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v20 + 88) + 8 * v13);
      if (*((_DWORD *)v21 + 8) == 4)
      {
        v49 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v20 + 88) + 8 * v13);
        v24 = (unsigned int *)*((_QWORD *)v21 + 1);
        v25 = *(WTF **)v24;
        v21 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v24 + 8) + 8 * v24[2]);
        v26 = (uint64_t)a3;
        v27 = v13;
        hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v21);
        v13 = v27;
        a3 = (_DWORD *)v26;
        if (hasRecursiveReference)
        {
          CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v49, v29, v26, v30, v31, v32, v33, v34);
          if (v42)
          {
            v21 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
          }
          else
          {
            v21 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v21, v25, v36, v37, v38, v39, v40, v41);
            JSC::Wasm::TypeInformation::addCachedUnrolling(v49, v21, v43, v44, v45, v46, v47, v48);
          }
          a3 = (_DWORD *)v26;
          v13 = v27;
        }
      }
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 5)
        v22 = *(_DWORD *)(**((_QWORD **)v21 + 1) + 32);
      if (v22 == 1)
      {
        *a3 = v13;
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v51 = ": invalid type index ";
      v52 = 22;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int>(v50, (uint64_t)v55, (uint64_t)&v51, &v54, a6, a7);
      v23 = v50[0];
    }
  }
  *(_QWORD *)a1 = v23;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseStructTypeIndexAndFieldIndex(uint64_t a1, unint64_t *a2, unsigned int *a3, char *a4, uint64_t a5, double a6, float a7)
{
  float v12;
  unint64_t v13;
  unsigned int v14;
  JSC::Wasm::TypeDefinition *v15;
  int v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int *v31;
  WTF *v32;
  unsigned int v33;
  _BOOL4 hasRecursiveReference;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t CachedUnrolling;
  uint64_t v43;
  uint64_t v44;
  const JSC::Wasm::Type *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  const JSC::Wasm::TypeDefinition *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::Wasm::TypeInformation *v56;
  uint64_t v57;
  char v58;
  unsigned int v59;

  v59 = 0;
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseStructTypeIndex(&v57, a2, &v59, a4, a5, a6, a7);
  if (v58)
  {
LABEL_22:
    *(_QWORD *)a1 = v57;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v13 = a2[2574];
  v14 = v59;
  if (*(_DWORD *)(v13 + 100) > v59)
  {
    v15 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v13 + 88) + 8 * v59);
    if (*((_DWORD *)v15 + 8) == 4)
    {
      v56 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v13 + 88) + 8 * v59);
      v31 = (unsigned int *)*((_QWORD *)v15 + 1);
      v32 = *(WTF **)v31;
      v15 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v31 + 8) + 8 * v31[2]);
      v33 = v59;
      hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v15);
      v14 = v33;
      if (hasRecursiveReference)
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v56, v35, v36, v37, v38, v39, v40, v41);
        if (v49)
        {
          v15 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v15 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v15, v32, v43, v44, v45, v46, v47, v48);
          JSC::Wasm::TypeInformation::addCachedUnrolling(v56, v15, v50, v51, v52, v53, v54, v55);
        }
        v14 = v33;
      }
    }
    v16 = *((_DWORD *)v15 + 8);
    if (v16 == 5)
    {
      v15 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v15 + 1);
      v16 = *((_DWORD *)v15 + 8);
    }
    if (v16 == 1)
      v17 = (char *)v15 + 8;
    else
      v17 = 0;
    v18 = a2[2];
    v19 = *a2;
    v20 = v18 > *a2;
    v21 = v18 - *a2;
    if (!v20)
      goto LABEL_29;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = a2[1];
    v26 = 5;
    if (v21 < 5)
      v26 = v21;
    v27 = v26 - 1;
    *a2 = v19 + 1;
    v28 = v25 + v19;
    v29 = v19 + 2;
    while (1)
    {
      v30 = *(char *)(v28 + v22);
      v24 |= (v30 & 0x7F) << v23;
      if ((v30 & 0x80000000) == 0)
        break;
      if (v27 == v22)
        goto LABEL_29;
      LOBYTE(v30) = v29 + v22;
      *a2 = v29 + v22;
      v23 += 7;
      if (v21 == ++v22)
      {
        __break(1u);
        break;
      }
    }
    if ((_DWORD)v22 != 4 || v30 < 0x10u)
    {
      if (v24 < *((_DWORD *)v17 + 2))
      {
        *a3 = v14;
        a3[1] = v24;
        *(_BYTE *)a1 = 0;
        *(_BYTE *)(a1 + 8) = 0;
        return;
      }
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(a4, a2, a5, " field immediate ", 18, v24, " is out of bounds", 18, &v57, v12);
    }
    else
    {
LABEL_29:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a4, a5, &v57, v12);
    }
    goto LABEL_22;
  }
  __break(0xC471u);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<false,void>(uint64_t a1, unint64_t *a2, int a3, int a4, double a5, double a6, double a7, uint8x8_t a8)
{
  unsigned __int8 v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t *v23;
  int v24;
  unint64_t v25;
  __int8 v26;
  __int8 v27;
  __int8 v28;
  __int8 v29;
  uint8x16_t v30;
  uint8x8_t v31;
  unint64_t v32;
  int8x8_t v33;
  uint32x2_t v34;
  __int8 v35;
  uint8x8_t v36;
  uint16x4_t v37;
  unint64_t v38;
  int8x8_t v39;
  uint32x2_t v40;
  __int8 v41;
  uint8x8_t v42;
  uint16x4_t v43;
  __int8 v44;
  __int8 v45;
  __int8 v46;
  __int8 v47;
  uint8x8_t v48;
  __int8 v49;
  uint8x16_t v50;
  uint64_t v51;
  char v52;
  int v53;

  *(_BYTE *)(a2[6] + 1292) = 1;
  if ((a3 - 77) <= 3u && word_1ECF4C7B4 == 0)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("relaxed simd instructions not supported", a2, 40, &v51, *(float *)&a6);
    *(_QWORD *)a1 = v51;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  switch(a3)
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 15:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 28:
    case 30:
    case 31:
    case 32:
    case 33:
    case 38:
    case 39:
    case 42:
    case 43:
    case 44:
    case 45:
    case 47:
    case 49:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 57:
    case 58:
    case 59:
    case 60:
    case 62:
    case 63:
    case 67:
    case 68:
    case 69:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
      goto LABEL_6;
    case 2:
    case 16:
    case 46:
    case 71:
      if (a3 > 45)
      {
        if (a3 == 46)
        {
          v13 = 4;
        }
        else
        {
          if (a3 != 71)
          {
LABEL_74:
            __break(0xC471u);
            JUMPOUT(0x198F5E3C4);
          }
          v13 = 2;
        }
      }
      else if (a3 == 2)
      {
        v13 = 8;
      }
      else
      {
        v13 = a3;
        if (a3 != 16)
          goto LABEL_74;
      }
      JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v51, a3, a2, &v53, a5, *(float *)&a6);
      if (v52)
        goto LABEL_37;
      v21 = (v13 - 2) >> 1;
      if (v21 > 7 || ((1 << v21) & 0x8B) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198F5E3E4);
      }
      goto LABEL_49;
    case 7:
      v11 = 7;
      goto LABEL_9;
    case 8:
    case 25:
    case 29:
    case 48:
      if (a3 > 28)
      {
        if (a3 == 29)
        {
          v13 = 2;
        }
        else
        {
          if (a3 != 48)
            goto LABEL_73;
          v13 = 8;
        }
      }
      else
      {
        if (a3 != 8)
        {
          if (a3 == 25)
          {
            v13 = 4;
            goto LABEL_40;
          }
LABEL_73:
          __break(0xC471u);
          JUMPOUT(0x198F5E3A4);
        }
        v13 = 16;
      }
LABEL_40:
      JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v51, a3, a2, &v53, a5, *(float *)&a6);
      if (!v52)
      {
        v20 = (v13 - 2) >> 1;
        if (v20 > 7 || ((1 << v20) & 0x8B) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198F5DF68);
        }
LABEL_49:
        v22 = *a2;
        if (*a2 >= a2[2])
        {
LABEL_72:
          v16 = "Could not parse the lane index immediate byte.";
          v17 = a2;
          v18 = 47;
LABEL_35:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v16, v17, v18, &v51, *(float *)&a6);
        }
        else
        {
          *a2 = v22 + 1;
          if (*(unsigned __int8 *)(a2[1] + v22) < v13)
          {
LABEL_6:
            *(_BYTE *)a1 = 0;
            *(_BYTE *)(a1 + 8) = 0;
            return;
          }
          v23 = a2;
          v24 = v13;
          v14 = v13;
LABEL_62:
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", v23, 40, v24, ", expected an ImmLaneIdx", 25, v14, &v51, *(float *)&a6);
        }
      }
LABEL_37:
      *(_QWORD *)a1 = v51;
      v12 = 1;
LABEL_11:
      *(_BYTE *)(a1 + 8) = v12;
      return;
    case 13:
    case 14:
    case 27:
    case 34:
    case 35:
    case 36:
    case 37:
    case 40:
    case 50:
    case 56:
    case 61:
    case 64:
    case 70:
      v11 = a3;
LABEL_9:
      JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(&v51, v11, a2, &v53, a5, *(float *)&a6);
      v12 = v52;
      if (v52)
        goto LABEL_37;
      *(_BYTE *)a1 = 0;
      goto LABEL_11;
    case 19:
      v15 = *a2 + 16;
      if (a2[2] < v15)
      {
        v16 = "can't parse 128-bit vector constant";
        v17 = a2;
        v18 = 36;
        goto LABEL_35;
      }
      *a2 = v15;
      goto LABEL_6;
    case 41:
      v19 = *a2 + 16;
      if (a2[2] < v19)
      {
        v16 = "can't parse 128-bit shuffle immediate";
        v17 = a2;
        v18 = 38;
        goto LABEL_35;
      }
      v25 = a2[1] + *a2;
      LODWORD(a5) = *(_DWORD *)v25;
      v26 = *(_BYTE *)(v25 + 4);
      LODWORD(a6) = *(_DWORD *)(v25 + 5);
      v27 = *(_BYTE *)(v25 + 9);
      v28 = *(_BYTE *)(v25 + 10);
      v29 = *(_BYTE *)(v25 + 11);
      a8.i32[0] = *(_DWORD *)(v25 + 12);
      *a2 = v19;
      v30.i64[0] = vmovl_u8(*(uint8x8_t *)&a5).u64[0];
      v31 = (uint8x8_t)vmovl_u8(*(uint8x8_t *)&a6).u64[0];
      v32 = vmovl_u8(a8).u64[0];
      switch(a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198F5E484);
        case 1:
          v44 = v31.i8[6];
          v45 = v31.i8[4];
          v46 = v31.i8[2];
          v47 = v31.i8[0];
          v48.i8[0] = v30.i8[0];
          v48.i8[1] = v30.i8[4];
          v48.i8[2] = v30.i8[6];
          v48.i8[3] = v26;
          v48.i8[4] = v47;
          v48.i8[5] = v46;
          v48.i8[6] = v45;
          v48.i8[7] = v44;
          if ((vmaxv_u8(vcgt_u8(v48, (uint8x8_t)0x1F1F1F1F1F1F1F1FLL)) & 1) != 0
            || (v32 | v30.i8[2] | BYTE2(v32) | BYTE4(v32) | BYTE6(v32) | v29 | v27 | v28) >= 0x20u)
          {
            goto LABEL_70;
          }
          goto LABEL_6;
        case 2:
          v49 = v30.i8[0];
          v30.i8[0] = v30.i8[2];
          v30.i8[1] = v49;
          v30.i8[2] = v30.i8[4];
          v30.i8[3] = v30.i8[6];
          v30.i8[4] = v26;
          v30.i8[5] = v31.i8[0];
          v30.i8[6] = v31.i8[2];
          v30.i8[7] = v31.i8[4];
          v30.i8[8] = v31.i8[6];
          v30.i8[9] = v27;
          v30.i8[10] = v28;
          v30.i8[11] = v29;
          v30.i8[12] = v32;
          v30.i8[13] = BYTE2(v32);
          v30.i8[14] = BYTE4(v32);
          v30.i8[15] = BYTE6(v32);
          v50.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v50.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          if ((vmaxvq_u8(vcgtq_u8(v30, v50)) & 1) != 0)
            goto LABEL_70;
          goto LABEL_6;
        case 3:
        case 5:
          v33.i32[0] = v30.u16[1];
          v33.i32[1] = v30.u16[0];
          v34 = vcgt_u32((uint32x2_t)0x800000008, (uint32x2_t)vand_s8(v33, (int8x8_t)0xFF000000FFLL));
          v35 = v31.i8[0];
          v31.i8[0] = v26;
          v31.i8[1] = v35;
          v31.i8[3] = v31.i8[4];
          v31.i8[4] = v31.i8[6];
          v31.i8[5] = v27;
          v31.i8[6] = v28;
          v31.i8[7] = v29;
          v36 = vcgt_u8(v31, (uint8x8_t)0x707070707070707);
          v36.i8[0] = vmaxv_u8(v36);
          v37 = vcgt_u16((uint16x4_t)(v32 & 0xFF00FF00FF00FFLL), (uint16x4_t)0x7000700070007);
          v37.i16[0] = vmaxv_u16(v37);
          if ((~v36.i32[0] & ~v37.i32[0] & v34.i32[0] & v34.i32[1] & 1) == 0
            || (v30.i8[4] | v30.i8[6]) >= 8u)
          {
            goto LABEL_70;
          }
          goto LABEL_6;
        case 4:
        case 6:
          v39.i32[0] = v30.u16[1];
          v39.i32[1] = v30.u16[0];
          v40 = vcgt_u32((uint32x2_t)0x400000004, (uint32x2_t)vand_s8(v39, (int8x8_t)0xFF000000FFLL));
          v41 = v31.i8[0];
          v31.i8[0] = v26;
          v31.i8[1] = v41;
          v31.i8[3] = v31.i8[4];
          v31.i8[4] = v31.i8[6];
          v31.i8[5] = v27;
          v31.i8[6] = v28;
          v31.i8[7] = v29;
          v42 = vcgt_u8(v31, (uint8x8_t)0x303030303030303);
          v42.i8[0] = vmaxv_u8(v42);
          v43 = vcgt_u16((uint16x4_t)(v32 & 0xFF00FF00FF00FFLL), (uint16x4_t)0x3000300030003);
          v43.i16[0] = vmaxv_u16(v43);
          if ((~v42.i32[0] & ~v43.i32[0] & v40.i32[0] & v40.i32[1] & 1) != 0
            && (v30.i8[4] | v30.i8[6]) < 4u)
          {
            goto LABEL_6;
          }
LABEL_70:
          JSC::Wasm::ParserBase::fail<>(a2, &v51);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F5E464);
      }
      goto LABEL_37;
    case 65:
      v14 = 16;
      switch(a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198F5DE34);
        case 1:
          goto LABEL_59;
        case 2:
          goto LABEL_58;
        case 3:
        case 5:
          goto LABEL_29;
        case 4:
        case 6:
          goto LABEL_52;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F5E404);
      }
    case 66:
      v14 = 16;
      switch(a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198F5E444);
        case 1:
          break;
        case 2:
LABEL_58:
          v14 = 8;
          break;
        case 3:
        case 5:
LABEL_29:
          v14 = 4;
          break;
        case 4:
        case 6:
LABEL_52:
          v14 = 2;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F5E424);
      }
LABEL_59:
      v38 = *a2;
      if (*a2 >= a2[2])
        goto LABEL_72;
      *a2 = v38 + 1;
      if (*(unsigned __int8 *)(a2[1] + v38) < v14)
        goto LABEL_6;
      v23 = a2;
      v24 = v14;
      goto LABEL_62;
    default:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::SIMDLaneOperationDump>("invalid simd op ", a2, 17, a3, &v51, *(float *)&a6);
      goto LABEL_37;
  }
}

__n128 WTF::VectorBuffer<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::FastMalloc>::swapInlineBuffer(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  __int128 *v11;
  __int128 *v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  if (a1 != a2)
  {
    v4 = a1 + 16;
    v5 = a2 + 16;
    if (a4 >= a3)
      v6 = a3;
    else
      v6 = a4;
    if (v6)
    {
      v9 = 0;
      v10 = 1;
      do
      {
        v11 = (__int128 *)(v4 + 32 * v9);
        v12 = (__int128 *)(v5 + 32 * v9);
        v14 = *v11;
        result = (__n128)v11[1];
        v15 = v12[1];
        *v11 = *v12;
        v11[1] = v15;
        *v12 = v14;
        v12[1] = (__int128)result;
        v9 = v10;
      }
      while (v6 > v10++);
    }
    v7 = v4 + 32 * v6;
    v8 = v5 + 32 * v6;
    if (a3 > a4)
    {
      v17 = 32 * a3 - 32 * v6;
      v18 = v8;
      v19 = v7;
      do
      {
        result = *(__n128 *)v19;
        v20 = *(_OWORD *)(v19 + 16);
        v19 += 32;
        *(__n128 *)v18 = result;
        *(_OWORD *)(v18 + 16) = v20;
        v18 += 32;
        v17 -= 32;
      }
      while (v17);
    }
    if (a4 > a3)
    {
      v21 = 32 * a4 - 32 * v6;
      do
      {
        result = *(__n128 *)v8;
        v22 = *(_OWORD *)(v8 + 16);
        v8 += 32;
        *(__n128 *)v7 = result;
        *(_OWORD *)(v7 + 16) = v22;
        v7 += 32;
        v21 -= 32;
      }
      while (v21);
    }
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, JSC::Wasm::Type *a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  double v25;
  float v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  double v39;
  float v40;
  WTF *v41;
  WTF::PrintStream *v42;
  float v43;
  double v44;
  const WTF::String *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  const WTF::String *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  float v59;
  const WTF::String *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  float v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  float v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  char v125;
  void (**v126)(WTF::StringPrintStream *__hidden);
  WTF *v127;
  __int128 v128;
  _BYTE v129[128];
  void (**v130)(WTF::StringPrintStream *__hidden);
  WTF *v131;
  __int128 v132;
  _BYTE v133[128];
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v126 = off_1E3572250;
  v127 = (WTF *)v129;
  v128 = xmmword_199122F80;
  v129[0] = 0;
  v130 = off_1E3572250;
  v131 = (WTF *)v133;
  v132 = xmmword_199122F80;
  v133[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v123, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v123 = (WTF::StringImpl *)v16;
    v124 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v130, "StringView", &v123);
  if (v124 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v124])(&v122, &v123);
  v130[5]((WTF::StringPrintStream *)&v130);
  v130[5]((WTF::StringPrintStream *)&v130);
  v24 = v131;
  if (!v131)
  {
    v122 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v131, v132, (uint64_t *)&v122);
  v24 = v131;
  if (v131 != (WTF *)v133)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v121, a2, a4, v25, v26);
  v130 = off_1E3572250;
  v131 = (WTF *)v133;
  v132 = xmmword_199122F80;
  v133[0] = 0;
  if (*(_QWORD *)a5)
  {
    v28 = *(_QWORD *)(a5 + 8);
    v14 = v28 != 0;
    v29 = v28 - 1;
    if (!v14)
      v29 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v29, (uint64_t)&v123, v27);
  }
  else
  {
    v30 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = 0;
    *(_BYTE *)(v30 + 16) = 0;
    v123 = (WTF::StringImpl *)v30;
    v124 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v130, "StringView", &v123);
  if (v124 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v124])(&v120, &v123);
  v130[5]((WTF::StringPrintStream *)&v130);
  v130[5]((WTF::StringPrintStream *)&v130);
  v38 = v131;
  if (!v131)
  {
    v123 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v131, v132, (uint64_t *)&v123);
  v38 = v131;
  if (v131 != (WTF *)v133)
LABEL_24:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v120, a2, a6, v39, v40);
  v41 = (WTF *)((uint64_t (*)(_QWORD))v126[4])(&v126);
  v42 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v41 + 32))(v41);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v130, v43);
  WTF::printExpectedCStringHelper(v42, "StringView", &v130);
  if ((_DWORD)v131 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v131])(&v125, &v130);
  v44 = (*(double (**)(WTF *))(*(_QWORD *)v41 + 40))(v41);
  WTF::printInternal(v41, (WTF::PrintStream *)&v122, v45, v46, v47, v48, v49, v50, v44, v51);
  WTF::printInternal(v41, (WTF::PrintStream *)&v121, v52, v53, v54, v55, v56, v57, v58, v59);
  WTF::printInternal(v41, (WTF::PrintStream *)&v123, v60, v61, v62, v63, v64, v65, v66, v67);
  WTF::printInternal(v41, (WTF::PrintStream *)&v120, v68, v69, v70, v71, v72, v73, v74, v75);
  v126[5]((WTF::StringPrintStream *)&v126);
  v83 = v120;
  v120 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
    {
      WTF::StringImpl::~StringImpl(v83, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
    }
    else
    {
      *(_DWORD *)v83 -= 2;
    }
  }
  v84 = v123;
  v123 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v127;
  if (v127)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v127, v128, (uint64_t *)&v130);
    v87 = v127;
    *a1 = v130;
    if (v87 == (WTF *)v129)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v87, v76, v77, v78, v79, v80, v81, v82);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative(uint64_t *a1, uint64_t a2, JSC::Wasm::Type *this, double a4, float a5)
{
  char v7;
  BOOL v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  int v18;
  uint64_t v19;
  WTF::PrintStream *v20;
  float v21;
  unint64_t v22;
  const char *v23;
  WTF::PrintStream *v24;
  JSC::Wasm::TypeDefinition *v25;
  int v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::PrintStream *v36;
  uint64_t v37;
  WTF::PrintStream *v38;
  float v39;
  uint64_t v40;
  WTF::PrintStream *v41;
  float v42;
  unsigned int *v43;
  WTF *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t CachedUnrolling;
  uint64_t v53;
  uint64_t v54;
  const JSC::Wasm::Type *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  const JSC::Wasm::TypeDefinition *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  void (**v69)(WTF::StringPrintStream *__hidden);
  WTF *v70;
  __int128 v71;
  _BYTE v72[128];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (BYTE1(dword_1ECF4C7B0))
    v7 = 29;
  else
    v7 = 17;
  if (BYTE1(dword_1ECF4C7B0))
    v8 = (v7 + *(_BYTE *)this) > 1u;
  else
    v8 = 1;
  if (v8)
  {
    v69 = off_1E3572250;
    v70 = (WTF *)v72;
    v71 = xmmword_199122F80;
    v72[0] = 0;
    JSC::Wasm::Type::dump((uint64_t)this, (WTF::PrintStream *)&v69);
    v69[5]((WTF::StringPrintStream *)&v69);
    v16 = v70;
    if (v70)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v70, v71, a1);
      v16 = v70;
      if (v70 == (WTF *)v72)
        return;
LABEL_45:
      WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
      return;
    }
LABEL_44:
    *a1 = 0;
    goto LABEL_45;
  }
  v69 = off_1E3572250;
  v70 = (WTF *)v72;
  v71 = xmmword_199122F80;
  v72[0] = 0;
  WTF::StringImpl::utf8ForCharacters("(ref ", 5uLL, (uint64_t)&v66, a5);
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v69, "StringView", &v66);
  if (v67 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
  v69[5]((WTF::StringPrintStream *)&v69);
  v69[5]((WTF::StringPrintStream *)&v69);
  v18 = *(unsigned __int8 *)this;
  if ((v18 - 239) < 2 || v18 == 227)
  {
    v19 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
    v20 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
    WTF::StringImpl::utf8ForCharacters("null ", 5uLL, (uint64_t)&v66, v21);
    WTF::printExpectedCStringHelper(v20, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v69[5]((WTF::StringPrintStream *)&v69);
  }
  v22 = *((_QWORD *)this + 1);
  if (v22 < 0xFFFFFFFFFFFFFFC1)
  {
    v25 = (JSC::Wasm::TypeDefinition *)v22;
    if (*(_DWORD *)(v22 + 32) == 4)
    {
      v43 = *(unsigned int **)(v22 + 8);
      v44 = *(WTF **)v43;
      v25 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v43 + 8) + 8 * v43[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v25))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v45, v46, v47, v48, v49, v50, v51);
        if (v59)
        {
          v25 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v25 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v25, v44, v53, v54, v55, v56, v57, v58);
          JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v22, v25, v60, v61, v62, v63, v64, v65);
        }
      }
    }
    v26 = *((_DWORD *)v25 + 8);
    if (v26 == 5)
      v26 = *(_DWORD *)(**((_QWORD **)v25 + 1) + 32);
    if (v26 == 2)
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<array:";
      v31 = 7;
    }
    else if (v26)
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<struct:";
      v31 = 8;
    }
    else
    {
      v27 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
      v28 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 32))(v27);
      v30 = "<func:";
      v31 = 6;
    }
    WTF::StringImpl::utf8ForCharacters(v30, v31, (uint64_t)&v66, v29);
    WTF::printExpectedCStringHelper(v28, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    v69[5]((WTF::StringPrintStream *)&v69);
    v32 = *(_QWORD *)(a2 + 20592);
    v33 = *(unsigned int *)(v32 + 100);
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = *(_QWORD *)(v32 + 88);
      while (*(_QWORD *)(v35 + 8 * v34) != v22)
      {
        if (v33 == ++v34)
          goto LABEL_35;
      }
    }
    else
    {
LABEL_35:
      v34 = -1;
    }
    v36 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v69[4])(&v69);
    WTF::PrintStream::printf(v36, "%lu", v34);
    v69[5]((WTF::StringPrintStream *)&v69);
    v37 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
    v38 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
    WTF::StringImpl::utf8ForCharacters(">", 1uLL, (uint64_t)&v66, v39);
    WTF::printExpectedCStringHelper(v38, "StringView", &v66);
    if (v67 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
  }
  else
  {
    if ((v22 + 22) >= 0xAu)
    {
      __break(0xC471u);
      return;
    }
    v23 = off_1E35BE2A8[(char)(v22 + 22)];
    v24 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v69[4])(&v69);
    WTF::PrintStream::printf(v24, "%s", v23);
  }
  v69[5]((WTF::StringPrintStream *)&v69);
  v40 = ((uint64_t (*)(_QWORD))v69[4])(&v69);
  v41 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 32))(v40);
  WTF::StringImpl::utf8ForCharacters(")", 1uLL, (uint64_t)&v66, v42);
  WTF::printExpectedCStringHelper(v41, "StringView", &v66);
  if (v67 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v67])(&v68, &v66);
  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
  v69[5]((WTF::StringPrintStream *)&v69);
  v16 = v70;
  if (!v70)
    goto LABEL_44;
  WTF::fromUTF8Impl<false>((unint64_t)v70, v71, a1);
  v16 = v70;
  if (v70 != (WTF *)v72)
    goto LABEL_45;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<false,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(_BYTE *a1, unsigned __int8 a2, unint64_t *a3, _DWORD *a4, double a5, float a6)
{
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(WTF::StringPrintStream *__hidden);
  char *v32;
  unint64_t *v33;
  uint64_t v34;
  void (**v35[2])(WTF::StringPrintStream *__hidden);
  void (**v36)(WTF::StringPrintStream *__hidden);
  unsigned int v37;
  const char *v38;
  uint64_t v39;
  unsigned int v40;

  if (a2 <= 0x37u)
  {
    switch(a2)
    {
      case 0x19u:
      case 0x23u:
      case 0x2Eu:
        goto LABEL_10;
      case 0x1Au:
      case 0x1Cu:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x26u:
      case 0x27u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Fu:
      case 0x31u:
        goto LABEL_46;
      case 0x1Bu:
      case 0x1Du:
      case 0x24u:
      case 0x25u:
      case 0x32u:
        goto LABEL_13;
      case 0x22u:
LABEL_12:
        v7 = 0;
        v40 = 0;
        goto LABEL_16;
      case 0x28u:
LABEL_37:
        v7 = 4;
        goto LABEL_15;
      case 0x30u:
        goto LABEL_14;
      default:
        switch(a2)
        {
          case 2u:
            goto LABEL_14;
          case 7u:
            goto LABEL_37;
          case 8u:
          case 0x10u:
            goto LABEL_12;
          case 0xDu:
          case 0xEu:
            goto LABEL_13;
          default:
            goto LABEL_46;
        }
    }
  }
  if (a2 > 0x45u)
  {
    if (a2 - 70 >= 2)
      goto LABEL_46;
LABEL_13:
    v7 = 3;
    goto LABEL_15;
  }
  if (a2 == 56)
  {
LABEL_14:
    v7 = 1;
    goto LABEL_15;
  }
  if (a2 == 61)
    goto LABEL_13;
  if (a2 != 64)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x198F5F3A8);
  }
LABEL_10:
  v7 = 2;
LABEL_15:
  v40 = v7;
LABEL_16:
  if (*(_DWORD *)(a3[2574] + 104) == -1)
  {
    v38 = "simd memory instructions need a memory defined in the module";
    v39 = 61;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(v35, (uint64_t)&v38, a5, a6);
    v31 = v35[0];
  }
  else
  {
    v8 = a3[2];
    v9 = *a3;
    v10 = v8 - *a3;
    if (v8 <= *a3)
      goto LABEL_42;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = a3[1];
    v15 = 5;
    if (v10 < 5)
      v15 = v8 - *a3;
    v16 = v15 - 1;
    *a3 = v9 + 1;
    v17 = v14 + v9;
    while (1)
    {
      v18 = *(char *)(v17 + v11);
      v13 |= (v18 & 0x7F) << v12;
      if ((v18 & 0x80000000) == 0)
        break;
      if (v16 == v11)
        goto LABEL_42;
      v19 = v9 + v11 + 2;
      *a3 = v19;
      ++v11;
      v12 += 7;
      if (v10 == v11)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v37 = v13;
    if ((_DWORD)v11 == 4 && v18 >= 0x10u)
    {
LABEL_42:
      v32 = "can't get simd memory op alignment";
      v33 = a3;
      v34 = 35;
LABEL_45:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v32, v33, v34, &v38, a6);
      v31 = (void (**)(WTF::StringPrintStream *__hidden))v38;
    }
    else
    {
      if (v8 <= v9 + v11 + 1)
        goto LABEL_44;
      v17 = 0;
      v20 = 0;
      v21 = 0;
      *a4 = 0;
      v22 = ~v11 + v10;
      v23 = 5;
      if (v22 < 5)
        v23 = v22;
      v24 = v9 + v11;
      *a3 = v9 + v11 + 2;
      v25 = v9 - v8;
      v26 = v14 + v9;
      v27 = v23 - 1;
      v28 = v25 + v11;
      while (1)
      {
        LODWORD(v19) = *(char *)(v26 + v17 + v11 + 1);
        v21 |= (v19 & 0x7F) << v20;
        *a4 = v21;
        if ((v19 & 0x80000000) == 0)
          break;
        if (v27 == v17)
          goto LABEL_44;
        v29 = v24 + v17;
        v30 = v28 + v17++;
        v19 = v29 + 3;
        *a3 = v19;
        v20 += 7;
        if (v30 == -2)
          goto LABEL_33;
      }
LABEL_34:
      if ((_DWORD)v17 == 4 && v19 >= 0x10u)
      {
LABEL_44:
        v32 = "can't get simd memory op offset";
        v33 = a3;
        v34 = 32;
        goto LABEL_45;
      }
      if (v13 <= v7)
      {
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v38 = "alignment: ";
      v39 = 12;
      v35[0] = (void (**)(WTF::StringPrintStream *__hidden))" can't be larger than max alignment for simd operation: ";
      v35[1] = (void (**)(WTF::StringPrintStream *__hidden))57;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v36, (uint64_t)&v38, &v37, (uint64_t)v35, &v40, a5, a6);
      v31 = v36;
    }
  }
  *(_QWORD *)a1 = v31;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::binaryCase(uint64_t a1, uint64_t a2, char a3, void (*a4)(void (***__return_ptr)(WTF::StringPrintStream *__hidden this), _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *), uint64_t a5, uint64_t a6, uint64_t a7, double a8, float a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  char v47;
  char v48;
  _QWORD *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t *v77;
  uint64_t v78;
  void (**v79)(WTF::StringPrintStream *__hidden);
  unsigned int v80;
  const char *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (**v89)(WTF::StringPrintStream *__hidden);
  char v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  char v93;
  __int128 v94;
  __int128 v95;

  *(_QWORD *)&v94 = a6;
  *((_QWORD *)&v94 + 1) = a7;
  v93 = a3;
  v16 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v16)
  {
    v76 = "binary right";
    v77 = (unint64_t *)a2;
    v78 = 13;
LABEL_31:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v77, 26, v76, v78, &v95, a9);
    *(_QWORD *)a1 = v95;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v21 = *(_QWORD *)(a2 + 56) + 32 * v16;
  v22 = *(_QWORD *)(v21 - 32);
  v87 = *(_QWORD *)(v21 - 24);
  v23 = *(_QWORD *)(v21 - 16);
  v24 = *(_QWORD *)(v21 - 8);
  *(_DWORD *)(a2 + 68) = v16 - 1;
  *(_QWORD *)&v95 = "WasmFunctionParser.h:";
  DWORD2(v95) = 21;
  LODWORD(v89) = 522;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v95, (unsigned int *)&v89, (int **)&v92);
  v32 = v92;
  if (!v92)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x198F5F7B0);
  }
  v92 = 0;
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
    WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
  v33 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v33)
  {
    v76 = "binary left";
    v77 = (unint64_t *)a2;
    v78 = 12;
    goto LABEL_31;
  }
  v85 = v24;
  v86 = v23;
  v84 = a7;
  v88 = a1;
  v34 = *(_QWORD *)(a2 + 56) + 32 * v33;
  v35 = *(_QWORD *)(v34 - 32);
  v36 = *(_QWORD *)(v34 - 24);
  v37 = *(_QWORD *)(v34 - 16);
  v38 = *(_QWORD *)(v34 - 8);
  *(_DWORD *)(a2 + 68) = v33 - 1;
  *(_QWORD *)&v95 = "WasmFunctionParser.h:";
  DWORD2(v95) = 21;
  LODWORD(v89) = 523;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v95, (unsigned int *)&v89, (int **)&v91);
  v46 = v91;
  if (!v91)
    goto LABEL_47;
  v91 = 0;
  if (*(_DWORD *)v46 == 2)
  {
    WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
    WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
  }
  else
  {
    *(_DWORD *)v46 -= 2;
  }
  if (a11 != v35)
    goto LABEL_39;
  if (a11 - 239 < 2 || a11 == 227)
  {
    if (a12 == v36)
      v47 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v47 = 0;
    if ((v47 & 1) == 0)
      goto LABEL_39;
  }
  else
  {
    if (a12 == v36)
      v80 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
    else
      v80 = 1;
    if (v80 == 1)
    {
LABEL_39:
      v81 = " left value type mismatch";
      v82 = 26;
LABEL_46:
      *(_QWORD *)&v95 = v81;
      *((_QWORD *)&v95 + 1) = v82;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v89, (uint64_t)&v93, (uint64_t)&v95);
      *(_QWORD *)v88 = v89;
      *(_BYTE *)(v88 + 8) = 1;
      return;
    }
  }
  if (a13 != v22)
  {
LABEL_45:
    v81 = " right value type mismatch";
    v82 = 27;
    goto LABEL_46;
  }
  if (a13 - 239 < 2 || a13 == 227)
  {
    if (a14 == v87)
      v48 = ((a13 + 29) < 0xEu) & (0x3001u >> (a13 + 29));
    else
      v48 = 0;
    if ((v48 & 1) == 0)
      goto LABEL_45;
  }
  else
  {
    if (a14 == v87)
      v83 = ((a13 + 29) < 0xEu) & (0x3001u >> (a13 + 29));
    else
      v83 = 1;
    if (v83 == 1)
      goto LABEL_45;
  }
  BYTE8(v95) = 0;
  v49 = (_QWORD *)(*(_QWORD *)(a2 + 48) + (a5 >> 1));
  if ((a5 & 1) != 0)
    a4 = *(void (**)(void (***__return_ptr)(WTF::StringPrintStream *__hidden), _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *))(*v49 + a4);
  a4(&v89, v49, v37, v38, v86, v85, &v95);
  if (v90)
  {
    v79 = v89;
    v89 = 0;
    *(_QWORD *)v88 = v79;
    *(_BYTE *)(v88 + 8) = 1;
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v89, v50, v51, v52, v53, v54, v55, v56);
  }
  else
  {
    v57 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v57 == *(_DWORD *)(a2 + 64))
    {
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a2 + 56, &v94, &v95, v52, v53, v54, v55, v56);
    }
    else
    {
      v58 = *(_QWORD *)(a2 + 56) + 32 * v57;
      v59 = v95;
      *(_QWORD *)v58 = a6;
      *(_QWORD *)(v58 + 8) = v84;
      *(_OWORD *)(v58 + 16) = v59;
      ++*(_DWORD *)(a2 + 68);
    }
    *(_BYTE *)v88 = 0;
    *(_BYTE *)(v88 + 8) = 0;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::unaryCase(uint64_t a1, uint64_t a2, char a3, void (*a4)(void (***__return_ptr)(WTF::StringPrintStream *__hidden this), _QWORD *, uint64_t, uint64_t, __int128 *), uint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, float a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  char v32;
  _QWORD *v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (**v52)(WTF::StringPrintStream *__hidden);
  unsigned int v53;
  void (**v55)(WTF::StringPrintStream *__hidden);
  char v56;
  WTF::StringImpl *v57;
  char v58;
  __int128 v59;
  __int128 v60;

  *(_QWORD *)&v59 = a6;
  *((_QWORD *)&v59 + 1) = a7;
  v58 = a3;
  v14 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v14)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "unary", 6, &v60, a10);
    *(_QWORD *)a1 = v60;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v19 = *(_QWORD *)(a2 + 56) + 32 * v14;
  v21 = *(_QWORD *)(v19 - 32);
  v20 = *(_QWORD *)(v19 - 24);
  v22 = *(_QWORD *)(v19 - 16);
  v23 = *(_QWORD *)(v19 - 8);
  *(_DWORD *)(a2 + 68) = v14 - 1;
  *(_QWORD *)&v60 = "WasmFunctionParser.h:";
  DWORD2(v60) = 21;
  LODWORD(v55) = 538;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v60, (unsigned int *)&v55, (int **)&v57);
  v31 = v57;
  if (v57)
  {
    v57 = 0;
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
    if (a11 != v21)
      goto LABEL_26;
    if (a11 - 239 < 2 || a11 == 227)
    {
      if (a12 == v20)
        v32 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
      else
        v32 = 0;
      if ((v32 & 1) == 0)
        goto LABEL_26;
    }
    else
    {
      if (a12 == v20)
        v53 = ((a11 + 29) < 0xEu) & (0x3001u >> (a11 + 29));
      else
        v53 = 1;
      if (v53 == 1)
      {
LABEL_26:
        *(_QWORD *)&v60 = " value type mismatch";
        *((_QWORD *)&v60 + 1) = 21;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v55, (uint64_t)&v58, (uint64_t)&v60);
        *(_QWORD *)a1 = v55;
        *(_BYTE *)(a1 + 8) = 1;
        return;
      }
    }
    BYTE8(v60) = 0;
    v33 = (_QWORD *)(*(_QWORD *)(a2 + 48) + (a5 >> 1));
    if ((a5 & 1) != 0)
      a4 = *(void (**)(void (***__return_ptr)(WTF::StringPrintStream *__hidden), _QWORD *, uint64_t, uint64_t, __int128 *))(*v33 + a4);
    a4(&v55, v33, v22, v23, &v60);
    if (v56)
    {
      v52 = v55;
      v55 = 0;
      *(_QWORD *)a1 = v52;
      *(_BYTE *)(a1 + 8) = 1;
      std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v55, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      v41 = *(unsigned int *)(a2 + 68);
      if ((_DWORD)v41 == *(_DWORD *)(a2 + 64))
      {
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a2 + 56, &v59, &v60, v36, v37, v38, v39, v40);
      }
      else
      {
        v42 = *(_QWORD *)(a2 + 56) + 32 * v41;
        v43 = v60;
        *(_QWORD *)v42 = a6;
        *(_QWORD *)(v42 + 8) = a7;
        *(_OWORD *)(v42 + 16) = v43;
        ++*(_DWORD *)(a2 + 68);
      }
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, double a5, float a6)
{
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  double v21;
  float v22;
  WTF *v23;
  WTF::PrintStream *v24;
  float v25;
  double v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  const WTF::String *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  float v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF *v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  char v71;
  void (**v72)(WTF::StringPrintStream *__hidden);
  WTF *v73;
  __int128 v74;
  _BYTE v75[128];
  void (**v76)(WTF::StringPrintStream *__hidden);
  WTF *v77;
  __int128 v78;
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v72 = off_1E3572250;
  v73 = (WTF *)v75;
  v74 = xmmword_199122F80;
  v75[0] = 0;
  v76 = off_1E3572250;
  v77 = (WTF *)v79;
  v78 = xmmword_199122F80;
  v79[0] = 0;
  if (*(_QWORD *)a3)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v10 = v9 != 0;
    v11 = v9 - 1;
    if (!v10)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v11, (uint64_t)&v69, a6);
  }
  else
  {
    v12 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v69 = (WTF::StringImpl *)v12;
    v70 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v76, "StringView", &v69);
  if (v70 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v70])(&v68, &v69);
  v76[5]((WTF::StringPrintStream *)&v76);
  v76[5]((WTF::StringPrintStream *)&v76);
  v20 = v77;
  if (!v77)
  {
    v69 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v77, v78, (uint64_t *)&v69);
  v20 = v77;
  if (v77 != (WTF *)v79)
LABEL_12:
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v68, a2, a4, v21, v22);
  v23 = (WTF *)((uint64_t (*)(_QWORD))v72[4])(&v72);
  v24 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v23 + 32))(v23);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v76, v25);
  WTF::printExpectedCStringHelper(v24, "StringView", &v76);
  if ((_DWORD)v77 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v77])(&v71, &v76);
  v26 = (*(double (**)(WTF *))(*(_QWORD *)v23 + 40))(v23);
  WTF::printInternal(v23, (WTF::PrintStream *)&v69, v27, v28, v29, v30, v31, v32, v26, v33);
  WTF::printInternal(v23, (WTF::PrintStream *)&v68, v34, v35, v36, v37, v38, v39, v40, v41);
  v72[5]((WTF::StringPrintStream *)&v72);
  v49 = v68;
  v68 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v50 = v69;
  v69 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  v51 = v73;
  if (v73)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v73, v74, (uint64_t *)&v76);
    v51 = v73;
    *a1 = v76;
    if (v51 == (WTF *)v75)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v51, v42, v43, v44, v45, v46, v47, v48);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::load(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float a6)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::ARM64LogicalImmediate *v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  float v65;
  void (**v66)(WTF::StringPrintStream *__hidden);
  void (**v67)(WTF::StringPrintStream *__hidden);
  char *v68;
  unint64_t *v69;
  uint64_t v70;
  void (**v71)(WTF::StringPrintStream *__hidden);
  char v72;
  WTF::StringImpl *v73;
  __int128 v74;
  __int128 v75;

  *(_QWORD *)&v74 = a3;
  *((_QWORD *)&v74 + 1) = a4;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 20592) + 104) == -1)
  {
LABEL_34:
    *(_QWORD *)&v75 = "load instruction without memory";
    *((_QWORD *)&v75 + 1) = 32;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v71, (uint64_t)&v75, a5, a6);
LABEL_39:
    v66 = v71;
    goto LABEL_40;
  }
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)a2;
  v10 = v8 - *(_QWORD *)a2;
  if (v8 <= *(_QWORD *)a2)
    goto LABEL_44;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v9 + 1;
  while (1)
  {
    v17 = *(char *)(v16 + v9 + v13);
    v15 |= (v17 & 0x7F) << v14;
    if ((v17 & 0x80000000) == 0)
      break;
    if (v10 >= 5)
      v59 = 5;
    else
      v59 = v10;
    if (v59 - 1 == v13)
      goto LABEL_44;
    *(_QWORD *)a2 = v9 + v13++ + 2;
    v14 += 7;
    if (v10 == v13)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v13 == 4 && *(unsigned __int8 *)(v16 + v9 + v13) >= 0x10u)
  {
LABEL_44:
    v68 = "can't get load alignment";
    v69 = (unint64_t *)a2;
    v70 = 25;
LABEL_45:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v68, v69, v70, &v75, a6);
    goto LABEL_37;
  }
  v18 = (unsigned __int8 *)(a2 + 20624);
  v19 = *(unsigned __int8 *)(a2 + 20624);
  if ((v19 - 40) >= 0x17)
  {
    __break(0xC471u);
    goto LABEL_50;
  }
  if (v15 > dword_19919F610[(char)(v19 - 40)])
  {
    v63 = 1 << v15;
    v64 = JSC::Wasm::memoryLog2Alignment(v19);
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, v63, " exceeds load's natural alignment ", 35, 1 << v64, &v75, v65);
    *(_QWORD *)a1 = v75;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  if (v8 <= v9 + v13 + 1)
    goto LABEL_47;
  v20 = 0;
  v21 = 0;
  LODWORD(v22) = 0;
  v23 = v9 + v13;
  *(_QWORD *)a2 = v9 + v13 + 2;
  v24 = v9 - v8 + v13;
  v25 = v16 + v9;
  v26 = ~v13 + v10;
  while (1)
  {
    v27 = *(char *)(v25 + v20 + v13 + 1);
    v22 = ((v27 & 0x7F) << v21) | v22;
    if ((v27 & 0x80000000) == 0)
      break;
    if (v26 >= 5)
      v60 = 5;
    else
      v60 = v26;
    if (v60 - 1 == v20)
      goto LABEL_47;
    v61 = v23 + v20;
    v62 = v24 + v20++;
    *(_QWORD *)a2 = v61 + 3;
    v21 += 7;
    if (v62 == -2)
      goto LABEL_33;
  }
  if ((_DWORD)v20 == 4 && *(unsigned __int8 *)(v25 + v20 + v13 + 1) >= 0x10u)
  {
LABEL_47:
    v68 = "can't get load offset";
    v69 = (unint64_t *)a2;
    v70 = 22;
    goto LABEL_45;
  }
  v28 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v28)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "load pointer", 13, &v75, a6);
LABEL_37:
    v66 = (void (**)(WTF::StringPrintStream *__hidden))v75;
LABEL_40:
    *(_QWORD *)a1 = v66;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v29 = *(_QWORD *)(a2 + 56) + 32 * v28;
  v30 = *(unsigned __int8 *)(v29 - 32);
  v31 = *(JSC::ARM64LogicalImmediate **)(v29 - 16);
  v32 = *(_QWORD *)(v29 - 8);
  *(_DWORD *)(a2 + 68) = v28 - 1;
  *(_QWORD *)&v75 = "WasmFunctionParser.h:";
  DWORD2(v75) = 21;
  LODWORD(v71) = 559;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v75, (unsigned int *)&v71, (int **)&v73);
  v40 = v73;
  if (!v73)
  {
    __break(0xC471u);
LABEL_50:
    JUMPOUT(0x198F6009CLL);
  }
  v73 = 0;
  if (*(_DWORD *)v40 == 2)
  {
    WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
    WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    *(_DWORD *)v40 -= 2;
  }
  if (v30 != 255)
  {
    *(_QWORD *)&v75 = " pointer type mismatch";
    *((_QWORD *)&v75 + 1) = 23;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v71, a2 + 20624, (uint64_t)&v75);
    goto LABEL_39;
  }
  BYTE8(v75) = 0;
  JSC::Wasm::BBQJITImpl::BBQJIT::load(*(JSC::Wasm::BBQJITImpl::BBQJIT **)(a2 + 48), (JSC::ARM64LogicalImmediate *)*v18, v31, v32, (uint64_t)&v75, v22, v38, v39, &v71);
  if (v72)
  {
    v67 = v71;
    v71 = 0;
    *(_QWORD *)a1 = v67;
    *(_BYTE *)(a1 + 8) = 1;
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v71, v41, v42, v43, v44, v45, v46, v47);
  }
  else
  {
    v48 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v48 == *(_DWORD *)(a2 + 64))
    {
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a2 + 56, &v74, &v75, v43, v44, v45, v46, v47);
    }
    else
    {
      v49 = *(_QWORD *)(a2 + 56) + 32 * v48;
      v50 = v75;
      *(_QWORD *)v49 = a3;
      *(_QWORD *)(v49 + 8) = a4;
      *(_OWORD *)(v49 + 16) = v50;
      ++*(_DWORD *)(a2 + 68);
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::store(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, double a5, float a6)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  JSC::ARM64LogicalImmediate *v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::ARM64LogicalImmediate *v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  char v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (**v81)(WTF::StringPrintStream *__hidden);
  uint64_t v82;
  char v83;
  float v84;
  char *v85;
  unint64_t *v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  const char *v90;
  unsigned int v91;
  char *v92;
  unint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  void (**v101)(WTF::StringPrintStream *__hidden);
  const char *v102;
  uint64_t v103;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 20592) + 104) == -1)
  {
LABEL_43:
    v102 = "store instruction without memory";
    v103 = 33;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v101, (uint64_t)&v102, a5, a6);
    v81 = v101;
LABEL_49:
    *(_QWORD *)a1 = v81;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)a2;
  v10 = v8 - *(_QWORD *)a2;
  if (v8 <= *(_QWORD *)a2)
    goto LABEL_60;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = v9 + 1;
  while (1)
  {
    v16 = *(char *)(v15 + v9 + v12);
    v14 |= (v16 & 0x7F) << v13;
    if ((v16 & 0x80000000) == 0)
      break;
    if (v10 >= 5)
      v77 = 5;
    else
      v77 = v10;
    if (v77 - 1 == v12)
      goto LABEL_60;
    *(_QWORD *)a2 = v9 + v12++ + 2;
    v13 += 7;
    if (v10 == v12)
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
  }
  if ((_DWORD)v12 == 4 && *(unsigned __int8 *)(v15 + v9 + v12) >= 0x10u)
  {
LABEL_60:
    v92 = "can't get store alignment";
    v93 = (unint64_t *)a2;
    v94 = 26;
LABEL_61:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v92, v93, v94, &v102, a6);
    goto LABEL_48;
  }
  v17 = *(unsigned __int8 *)(a2 + 20624);
  if ((v17 - 40) >= 0x17)
  {
    __break(0xC471u);
    goto LABEL_67;
  }
  if (v14 > dword_19919F610[(char)(v17 - 40)])
  {
    v82 = 1 << v14;
    v83 = JSC::Wasm::memoryLog2Alignment(v17);
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, v82, " exceeds store's natural alignment ", 36, 1 << v83, &v102, v84);
    *(_QWORD *)a1 = v102;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  if (v8 <= v9 + v12 + 1)
    goto LABEL_63;
  v18 = 0;
  v19 = 0;
  LODWORD(v20) = 0;
  v21 = v9 + v12;
  *(_QWORD *)a2 = v9 + v12 + 2;
  v22 = v9 - v8 + v12;
  v23 = v15 + v9;
  v24 = ~v12 + v10;
  while (1)
  {
    v25 = *(char *)(v23 + v18 + v12 + 1);
    v20 = ((v25 & 0x7F) << v19) | v20;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v24 >= 5)
      v78 = 5;
    else
      v78 = v24;
    if (v78 - 1 == v18)
      goto LABEL_63;
    v79 = v21 + v18;
    v80 = v22 + v18++;
    *(_QWORD *)a2 = v79 + 3;
    v19 += 7;
    if (v80 == -2)
      goto LABEL_42;
  }
  if ((_DWORD)v18 == 4 && *(unsigned __int8 *)(v23 + v18 + v12 + 1) >= 0x10u)
  {
LABEL_63:
    v92 = "can't get store offset";
    v93 = (unint64_t *)a2;
    v94 = 23;
    goto LABEL_61;
  }
  v26 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v26)
  {
    v85 = "store value";
    v86 = (unint64_t *)a2;
    v87 = 12;
LABEL_47:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v86, 26, v85, v87, &v102, a6);
LABEL_48:
    v81 = (void (**)(WTF::StringPrintStream *__hidden))v102;
    goto LABEL_49;
  }
  v28 = *(_QWORD *)(a2 + 56) + 32 * v26;
  v29 = *(_QWORD *)(v28 - 24);
  v98 = *(_QWORD *)(v28 - 32);
  v30 = *(JSC::ARM64LogicalImmediate **)(v28 - 16);
  v31 = *(_QWORD *)(v28 - 8);
  *(_DWORD *)(a2 + 68) = v26 - 1;
  v102 = "WasmFunctionParser.h:";
  LODWORD(v103) = 21;
  LODWORD(v101) = 581;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v102, (unsigned int *)&v101, (int **)&v100);
  v39 = v100;
  if (!v100)
  {
    __break(0xC471u);
    JUMPOUT(0x198F60580);
  }
  v100 = 0;
  if (*(_DWORD *)v39 == 2)
  {
    WTF::StringImpl::~StringImpl(v39, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
  }
  else
  {
    *(_DWORD *)v39 -= 2;
  }
  v40 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v40)
  {
    v85 = "store pointer";
    v86 = (unint64_t *)a2;
    v87 = 14;
    goto LABEL_47;
  }
  v95 = v31;
  v96 = (unsigned __int8 *)(a2 + 20624);
  v97 = a1;
  v41 = *(_QWORD *)(a2 + 56) + 32 * v40;
  v42 = *(unsigned __int8 *)(v41 - 32);
  v44 = *(JSC::ARM64LogicalImmediate **)(v41 - 16);
  v43 = *(_QWORD *)(v41 - 8);
  *(_DWORD *)(a2 + 68) = v40 - 1;
  v102 = "WasmFunctionParser.h:";
  LODWORD(v103) = 21;
  LODWORD(v101) = 582;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v102, (unsigned int *)&v101, (int **)&v99);
  v52 = v99;
  if (!v99)
  {
    __break(0xC471u);
LABEL_67:
    JUMPOUT(0x198F60578);
  }
  v99 = 0;
  if (*(_DWORD *)v52 == 2)
  {
    WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
    WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
  }
  else
  {
    *(_DWORD *)v52 -= 2;
  }
  if (v42 != 255)
  {
    v88 = " pointer type mismatch";
    v89 = 23;
LABEL_58:
    v102 = v88;
    v103 = v89;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(&v101, (uint64_t)v96, (uint64_t)&v102);
    *(_QWORD *)v97 = v101;
    *(_BYTE *)(v97 + 8) = 1;
    return;
  }
  if (a3 != v98)
  {
LABEL_57:
    v88 = " value type mismatch";
    v89 = 21;
    goto LABEL_58;
  }
  if (a3 - 239 < 2 || a3 == 227)
  {
    if (a4 == v29)
      v53 = ((a3 + 29) < 0xEu) & (0x3001u >> (a3 + 29));
    else
      v53 = 0;
    if ((v53 & 1) == 0)
      goto LABEL_57;
  }
  else
  {
    if (a4 == v29)
      v91 = ((a3 + 29) < 0xEu) & (0x3001u >> (a3 + 29));
    else
      v91 = 1;
    if (v91 == 1)
      goto LABEL_57;
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::store(*(_QWORD *)(a2 + 48), *v96, v44, v43, v30, v95, v20, v51, &v102);
  if ((_BYTE)v103)
  {
    v90 = v102;
    v102 = 0;
    *(_QWORD *)v97 = v90;
    *(_BYTE *)(v97 + 8) = 1;
    std::experimental::fundamentals_v3::expected<void,WTF::String>::~expected((uint64_t)&v102, v54, v55, v56, v57, v58, v59, v60);
  }
  else
  {
    *(_BYTE *)v97 = 0;
    *(_BYTE *)(v97 + 8) = 0;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, char *a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  double v25;
  float v26;
  float v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  char *String;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::PrintStream *v43;
  float v44;
  unsigned int v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF *v55;
  WTF::PrintStream *v56;
  float v57;
  double v58;
  const WTF::String *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  const WTF::String *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  float v73;
  const WTF::String *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  float v81;
  const WTF::String *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  float v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  int v138;
  char v139;
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  void (**v144)(WTF::StringPrintStream *__hidden);
  WTF *v145;
  __int128 v146;
  _BYTE v147[128];
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v137, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v137 = (WTF::StringImpl *)v16;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v144, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v136, &v137);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v24 = v145;
  if (!v145)
  {
    v136 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v136);
  v24 = v145;
  if (v145 != (WTF *)v147)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v135, a2, a4, v25, v26);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  if (*(_QWORD *)a5)
  {
    v28 = *(_QWORD *)(a5 + 8);
    v14 = v28 != 0;
    v29 = v28 - 1;
    if (!v14)
      v29 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v29, (uint64_t)&v137, v27);
  }
  else
  {
    v30 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v30 = 1;
    *(_QWORD *)(v30 + 8) = 0;
    *(_BYTE *)(v30 + 16) = 0;
    v137 = (WTF::StringImpl *)v30;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v144, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v134, &v137);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v38 = v145;
  if (!v145)
  {
    v134 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v134);
  v38 = v145;
  if (v145 != (WTF *)v147)
LABEL_24:
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  v144 = off_1E3572250;
  v145 = (WTF *)v147;
  v146 = xmmword_199122F80;
  v147[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a6);
  v41 = v40;
  v42 = ((uint64_t (*)(_QWORD))v144[4])(&v144);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
  if (String)
  {
    v45 = v41 - 1;
    if (!v41)
      v45 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v45, (uint64_t)&v137, v44);
  }
  else
  {
    v46 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v46 = 1;
    *(_QWORD *)(v46 + 8) = 0;
    *(_BYTE *)(v46 + 16) = 0;
    v137 = (WTF::StringImpl *)v46;
    v138 = 0;
  }
  WTF::printExpectedCStringHelper(v43, "StringView", &v137);
  if (v138 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v138])(&v139, &v137);
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
  v144[5]((WTF::StringPrintStream *)&v144);
  v144[5]((WTF::StringPrintStream *)&v144);
  v54 = v145;
  if (!v145)
  {
    v137 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v145, v146, (uint64_t *)&v137);
  v54 = v145;
  if (v145 != (WTF *)v147)
LABEL_36:
    WTF::fastFree((unint64_t)v54, v47, v48, v49, v50, v51, v52, v53);
  v55 = (WTF *)((uint64_t (*)(_QWORD))v140[4])(&v140);
  v56 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v55 + 32))(v55);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v144, v57);
  WTF::printExpectedCStringHelper(v56, "StringView", &v144);
  if ((_DWORD)v145 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v145])(&v139, &v144);
  v58 = (*(double (**)(WTF *))(*(_QWORD *)v55 + 40))(v55);
  WTF::printInternal(v55, (WTF::PrintStream *)&v136, v59, v60, v61, v62, v63, v64, v58, v65);
  WTF::printInternal(v55, (WTF::PrintStream *)&v135, v66, v67, v68, v69, v70, v71, v72, v73);
  WTF::printInternal(v55, (WTF::PrintStream *)&v134, v74, v75, v76, v77, v78, v79, v80, v81);
  WTF::printInternal(v55, (WTF::PrintStream *)&v137, v82, v83, v84, v85, v86, v87, v88, v89);
  v140[5]((WTF::StringPrintStream *)&v140);
  v97 = v137;
  v137 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v134;
  v134 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v135;
  v135 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v136;
  v136 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v90, v91, v92, v93, v94, v95, v96);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v141;
  if (v141)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v144);
    v101 = v141;
    *a1 = v144;
    if (v101 == (WTF *)v143)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v101, v90, v91, v92, v93, v94, v95, v96);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [35],JSC::Wasm::Type,char [23],JSC::Wasm::Type,char [15]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  double v26;
  float v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  WTF *v36;
  WTF::PrintStream *v37;
  float v38;
  double v39;
  const WTF::String *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  const WTF::String *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  float v70;
  const WTF::String *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  float v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF *v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  char v137;
  void (**v138)(WTF::StringPrintStream *__hidden);
  WTF *v139;
  __int128 v140;
  _BYTE v141[128];
  void (**v142)(WTF::StringPrintStream *__hidden);
  unint64_t v143;
  __int128 v144;
  _BYTE v145[128];
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v138 = off_1E3572250;
  v139 = (WTF *)v141;
  v140 = xmmword_199122F80;
  v141[0] = 0;
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "table.init requires table's type \"");
  v142[5]((WTF::StringPrintStream *)&v142);
  v15 = v143;
  if (!v143)
  {
    v136 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v136);
  v15 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v135, a2, a3, v16, v17);
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "\" and element's type \"");
  v142[5]((WTF::StringPrintStream *)&v142);
  v25 = v143;
  if (!v143)
  {
    v134 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v134);
  v25 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v133, a2, a4, v26, v27);
  v142 = off_1E3572250;
  v143 = (unint64_t)v145;
  v144 = xmmword_199122F80;
  v145[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v142, "%s", "\" are the same");
  v142[5]((WTF::StringPrintStream *)&v142);
  v35 = v143;
  if (!v143)
  {
    v132 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v143, v144, (uint64_t *)&v132);
  v35 = v143;
  if ((_BYTE *)v143 != v145)
LABEL_15:
    WTF::fastFree(v35, v28, v29, v30, v31, v32, v33, v34);
  v36 = (WTF *)((uint64_t (*)(_QWORD))v138[4])(&v138);
  v37 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v36 + 32))(v36);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v142, v38);
  WTF::printExpectedCStringHelper(v37, "StringView", &v142);
  if ((_DWORD)v143 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v143])(&v137, &v142);
  v39 = (*(double (**)(WTF *))(*(_QWORD *)v36 + 40))(v36);
  WTF::printInternal(v36, (WTF::PrintStream *)&v136, v40, v41, v42, v43, v44, v45, v39, v46);
  WTF::printInternal(v36, (WTF::PrintStream *)&v135, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v36, (WTF::PrintStream *)&v134, v55, v56, v57, v58, v59, v60, v61, v62);
  WTF::printInternal(v36, (WTF::PrintStream *)&v133, v63, v64, v65, v66, v67, v68, v69, v70);
  WTF::printInternal(v36, (WTF::PrintStream *)&v132, v71, v72, v73, v74, v75, v76, v77, v78);
  v138[5]((WTF::StringPrintStream *)&v138);
  v86 = v132;
  v132 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v133;
  v133 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v134;
  v134 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = v135;
  v135 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v90 = v136;
  v136 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = v139;
  if (v139)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v139, v140, (uint64_t *)&v142);
    v91 = v139;
    *a1 = v142;
    if (v91 == (WTF *)v141)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v91, v79, v80, v81, v82, v83, v84, v85);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [32],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, const char *a3, JSC::Wasm::Type *a4, char *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  float v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *String;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::PrintStream *v31;
  float v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  WTF *v43;
  WTF::PrintStream *v44;
  float v45;
  double v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  const WTF::String *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  int v126;
  char v127;
  void (**v128)(WTF::StringPrintStream *__hidden);
  WTF *v129;
  __int128 v130;
  _BYTE v131[128];
  void (**v132)(WTF::StringPrintStream *__hidden);
  unint64_t v133;
  __int128 v134;
  _BYTE v135[128];
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v128 = off_1E3572250;
  v129 = (WTF *)v131;
  v130 = xmmword_199122F80;
  v131[0] = 0;
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v132, "%s", a3);
  v132[5]((WTF::StringPrintStream *)&v132);
  v16 = v133;
  if (!v133)
  {
    v124 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v124);
  v16 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_5:
    WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v123, a2, a4, v17, v18);
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v132, "%s", " expected ");
  v132[5]((WTF::StringPrintStream *)&v132);
  v26 = v133;
  if (!v133)
  {
    v122 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v122);
  v26 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_10:
    WTF::fastFree(v26, v19, v20, v21, v22, v23, v24, v25);
  v132 = off_1E3572250;
  v133 = (unint64_t)v135;
  v134 = xmmword_199122F80;
  v135[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a5);
  v29 = v28;
  v30 = ((uint64_t (*)(_QWORD))v132[4])(&v132);
  v31 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
  if (String)
  {
    v33 = v29 - 1;
    if (!v29)
      v33 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v33, (uint64_t)&v125, v32);
  }
  else
  {
    v34 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v34 = 1;
    *(_QWORD *)(v34 + 8) = 0;
    *(_BYTE *)(v34 + 16) = 0;
    v125 = (WTF::StringImpl *)v34;
    v126 = 0;
  }
  WTF::printExpectedCStringHelper(v31, "StringView", &v125);
  if (v126 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v126])(&v127, &v125);
  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
  v132[5]((WTF::StringPrintStream *)&v132);
  v132[5]((WTF::StringPrintStream *)&v132);
  v42 = v133;
  if (!v133)
  {
    v125 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v133, v134, (uint64_t *)&v125);
  v42 = v133;
  if ((_BYTE *)v133 != v135)
LABEL_22:
    WTF::fastFree(v42, v35, v36, v37, v38, v39, v40, v41);
  v43 = (WTF *)((uint64_t (*)(_QWORD))v128[4])(&v128);
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v43 + 32))(v43);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v132, v45);
  WTF::printExpectedCStringHelper(v44, "StringView", &v132);
  if ((_DWORD)v133 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v133])(&v127, &v132);
  v46 = (*(double (**)(WTF *))(*(_QWORD *)v43 + 40))(v43);
  WTF::printInternal(v43, (WTF::PrintStream *)&v124, v47, v48, v49, v50, v51, v52, v46, v53);
  WTF::printInternal(v43, (WTF::PrintStream *)&v123, v54, v55, v56, v57, v58, v59, v60, v61);
  WTF::printInternal(v43, (WTF::PrintStream *)&v122, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v43, (WTF::PrintStream *)&v125, v70, v71, v72, v73, v74, v75, v76, v77);
  v128[5]((WTF::StringPrintStream *)&v128);
  v85 = v125;
  v125 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v124;
  v124 = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
    {
      WTF::StringImpl::~StringImpl(v88, v78, v79, v80, v81, v82, v83, v84);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v88 -= 2;
    }
  }
  v89 = v129;
  if (v129)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v129, v130, (uint64_t *)&v132);
    v89 = v129;
    *a1 = v132;
    if (v89 == (WTF *)v131)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v89, v78, v79, v80, v81, v82, v83, v84);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [28],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, char *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *String;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF *v42;
  WTF::PrintStream *v43;
  float v44;
  double v45;
  const WTF::String *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  const WTF::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  float v68;
  const WTF::String *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  float v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  char v126;
  void (**v127)(WTF::StringPrintStream *__hidden);
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  void (**v131)(WTF::StringPrintStream *__hidden);
  unint64_t v132;
  __int128 v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v127 = off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", "memory.init length to type ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v15 = v132;
  if (!v132)
  {
    v123 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v123);
  v15 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v122, a2, a3, v16, v17);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", " expected ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v25 = v132;
  if (!v132)
  {
    v121 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v121);
  v25 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a4);
  v28 = v27;
  v29 = ((uint64_t (*)(_QWORD))v131[4])(&v131);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  if (String)
  {
    v32 = v28 - 1;
    if (!v28)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v32, (uint64_t)&v124, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v124 = (WTF::StringImpl *)v33;
    v125 = 0;
  }
  WTF::printExpectedCStringHelper(v30, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  v131[5]((WTF::StringPrintStream *)&v131);
  v131[5]((WTF::StringPrintStream *)&v131);
  v41 = v132;
  if (!v132)
  {
    v124 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v124);
  v41 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_22:
    WTF::fastFree(v41, v34, v35, v36, v37, v38, v39, v40);
  v42 = (WTF *)((uint64_t (*)(_QWORD))v127[4])(&v127);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v42 + 32))(v42);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v131, v44);
  WTF::printExpectedCStringHelper(v43, "StringView", &v131);
  if ((_DWORD)v132 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v132])(&v126, &v131);
  v45 = (*(double (**)(WTF *))(*(_QWORD *)v42 + 40))(v42);
  WTF::printInternal(v42, (WTF::PrintStream *)&v123, v46, v47, v48, v49, v50, v51, v45, v52);
  WTF::printInternal(v42, (WTF::PrintStream *)&v122, v53, v54, v55, v56, v57, v58, v59, v60);
  WTF::printInternal(v42, (WTF::PrintStream *)&v121, v61, v62, v63, v64, v65, v66, v67, v68);
  WTF::printInternal(v42, (WTF::PrintStream *)&v124, v69, v70, v71, v72, v73, v74, v75, v76);
  v127[5]((WTF::StringPrintStream *)&v127);
  v84 = v124;
  v124 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v128;
  if (v128)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v131);
    v88 = v128;
    *a1 = v131;
    if (v88 == (WTF *)v130)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v88, v77, v78, v79, v80, v81, v82, v83);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::truncSaturated(uint64_t a1, uint64_t a2, signed int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, float a9)
{
  uint64_t v11;
  unsigned __int8 v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  float v30;
  WTF::StringImpl *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (**v49)(WTF::StringPrintStream *__hidden);
  unsigned int v50;
  _QWORD v52[2];
  const char *v53;
  uint64_t v54;
  void (**v55)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v56;
  _QWORD v57[2];
  __int128 v58;
  __int128 v59;

  *(_QWORD *)&v58 = a4;
  *((_QWORD *)&v58 + 1) = a5;
  v57[0] = a6;
  v57[1] = a7;
  v11 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v11)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "unary", 6, &v59, a9);
    *(_QWORD *)a1 = v59;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v13 = a6;
  v17 = *(_QWORD *)(a2 + 56) + 32 * v11;
  v19 = *(_QWORD *)(v17 - 32);
  v18 = *(_QWORD *)(v17 - 24);
  v20 = *(_QWORD *)(v17 - 16);
  v21 = *(_QWORD *)(v17 - 8);
  *(_DWORD *)(a2 + 68) = v11 - 1;
  *(_QWORD *)&v59 = "WasmFunctionParser.h:";
  DWORD2(v59) = 21;
  LODWORD(v53) = 595;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v59, (unsigned int *)&v53, (int **)&v56);
  v31 = v56;
  if (v56)
  {
    v56 = 0;
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
    if (v13 != v19)
      goto LABEL_24;
    if (v13 - 239 < 2 || v13 == 227)
    {
      if (a7 == v18)
        v32 = ((v13 + 29) < 0xEu) & (0x3001u >> (v13 + 29));
      else
        v32 = 0;
      if ((v32 & 1) == 0)
        goto LABEL_24;
    }
    else
    {
      if (a7 == v18)
        v50 = ((v13 + 29) < 0xEu) & (0x3001u >> (v13 + 29));
      else
        v50 = 1;
      if (v50 == 1)
      {
LABEL_24:
        *(_QWORD *)&v59 = "trunc-saturated value type mismatch. Expected: ";
        *((_QWORD *)&v59 + 1) = 48;
        v53 = " but expression stack has ";
        v54 = 27;
        v52[0] = v19;
        v52[1] = v18;
        JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v55, a2, (uint64_t)&v59, (JSC::Wasm::Type *)v57, (uint64_t)&v53, (JSC::Wasm::Type *)v52, v29, v30);
        v49 = v55;
        goto LABEL_25;
      }
    }
    BYTE8(v59) = 0;
    JSC::Wasm::BBQJITImpl::BBQJIT::truncSaturated(*(JSC::Wasm::BBQJITImpl::BBQJIT **)(a2 + 48), a3, v20, v21, (uint64_t)&v59, a4, a5, v28);
    if ((_BYTE)v54)
    {
      v49 = (void (**)(WTF::StringPrintStream *__hidden))v53;
LABEL_25:
      *(_QWORD *)a1 = v49;
      *(_BYTE *)(a1 + 8) = 1;
      return;
    }
    v38 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v38 == *(_DWORD *)(a2 + 64))
    {
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a2 + 56, &v58, &v59, v33, v34, v35, v36, v37);
    }
    else
    {
      v39 = *(_QWORD *)(a2 + 56) + 32 * v38;
      v40 = v59;
      *(_QWORD *)v39 = a4;
      *(_QWORD *)(v39 + 8) = a5;
      *(_OWORD *)(v39 + 16) = v40;
      ++*(_DWORD *)(a2 + 68);
    }
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseArrayTypeDefinition(uint64_t a1, unint64_t *a2, char *a3, uint64_t a4, unsigned int a5, _DWORD *a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  JSC::Wasm::TypeInformation *v24;
  unint64_t v25;
  int v26;
  __int128 *v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  const char *v31;
  uint64_t v32;
  void (**v33)(WTF::StringPrintStream *__hidden);
  unsigned int *v34;
  WTF *v35;
  JSC::Wasm::TypeDefinition *v36;
  JSC::Wasm::TypeInformation *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 hasRecursiveReference;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t CachedUnrolling;
  uint64_t v46;
  uint64_t v47;
  const JSC::Wasm::Type *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  WTF *v53;
  const JSC::Wasm::TypeDefinition *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _QWORD v61[2];
  const char *v62;
  uint64_t v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  _QWORD v65[2];

  v65[0] = a3;
  v65[1] = a4;
  v11 = a2[2];
  v12 = *a2;
  v13 = v11 - *a2;
  if (v11 <= *a2)
    goto LABEL_28;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = a2[1];
  *a6 = 0;
  v18 = 5;
  if (v13 < 5)
    v18 = v13;
  v19 = v18 - 1;
  *a2 = v12 + 1;
  v20 = v17 + v12;
  v21 = v12 + 2;
  while (1)
  {
    v22 = *(char *)(v20 + v14);
    v16 |= (v22 & 0x7F) << v15;
    *a6 = v16;
    if ((v22 & 0x80000000) == 0)
      break;
    if (v19 == v14)
      goto LABEL_28;
    LOBYTE(v22) = v21 + v14;
    *a2 = v21 + v14;
    v15 += 7;
    if (v13 == ++v14)
    {
      __break(1u);
      break;
    }
  }
  if ((_DWORD)v14 == 4 && v22 >= 0x10u)
  {
LABEL_28:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't get type index for ", a2, 26, a3, a4, &v62, a10);
    v33 = (void (**)(WTF::StringPrintStream *__hidden))v62;
    goto LABEL_22;
  }
  v23 = a2[2574];
  if (v16 >= *(_DWORD *)(v23 + 100))
  {
    v62 = " index ";
    v63 = 8;
    v31 = " is out of bounds";
    v32 = 18;
LABEL_21:
    v61[0] = v31;
    v61[1] = v32;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v64, (uint64_t)v65, (uint64_t)&v62, a6, (uint64_t)v61, a9, a10);
    v33 = v64;
LABEL_22:
    *(_QWORD *)a1 = v33;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v24 = *(JSC::Wasm::TypeInformation **)(*(_QWORD *)(v23 + 88) + 8 * v16);
  v25 = (unint64_t)v24;
  if (*((_DWORD *)v24 + 8) == 4)
  {
    v34 = (unsigned int *)*((_QWORD *)v24 + 1);
    v35 = *(WTF **)v34;
    v36 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v34 + 8) + 8 * v34[2]);
    v37 = v24;
    v38 = (uint64_t)a6;
    v39 = a8;
    v40 = a7;
    v60 = a5;
    hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v36);
    a5 = v60;
    a7 = v40;
    a8 = v39;
    a6 = (_DWORD *)v38;
    v25 = (unint64_t)v36;
    v24 = v37;
    if (hasRecursiveReference)
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v37, v42, v43, v44, v60, v38, v40, v39);
      if (v52)
      {
        v25 = CachedUnrolling;
        a6 = (_DWORD *)v38;
        a8 = v39;
        a7 = v40;
        a5 = v60;
        v24 = v37;
      }
      else
      {
        v53 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v36, v35, v46, v47, v48, v49, v50, v51);
        JSC::Wasm::TypeInformation::addCachedUnrolling(v37, v53, v54, v55, v56, v57, v58, v59);
        v25 = (unint64_t)v53;
        v24 = v37;
        a6 = (_DWORD *)v38;
        a8 = v39;
        a7 = v40;
        a5 = v60;
      }
    }
  }
  v26 = *(_DWORD *)(v25 + 32);
  if (v26 == 5)
  {
    v25 = **(_QWORD **)(v25 + 8);
    v26 = *(_DWORD *)(v25 + 32);
  }
  if (v26 != 2)
  {
    v62 = " index ";
    v63 = 8;
    v31 = " does not reference an array definition";
    v32 = 40;
    goto LABEL_21;
  }
  v27 = *(__int128 **)(v25 + 8);
  v28 = *v27;
  v29 = *((_QWORD *)v27 + 2);
  *(_BYTE *)(a7 + 24) = *((_BYTE *)v27 + 24);
  *(_QWORD *)(a7 + 16) = v29;
  *(_OWORD *)a7 = v28;
  if (a5)
    v30 = -29;
  else
    v30 = -28;
  *(_BYTE *)a8 = v30;
  *(_QWORD *)(a8 + 8) = v24;
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [25],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, const char *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  double v17;
  float v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  double v27;
  float v28;
  WTF *v29;
  WTF::PrintStream *v30;
  float v31;
  double v32;
  const WTF::String *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  const WTF::String *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  float v47;
  const WTF::String *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  float v55;
  const WTF::String *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  float v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  char v112;
  void (**v113)(WTF::StringPrintStream *__hidden);
  WTF *v114;
  __int128 v115;
  _BYTE v116[128];
  void (**v117)(WTF::StringPrintStream *__hidden);
  WTF *v118;
  __int128 v119;
  _BYTE v120[128];
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v113 = off_1E3572250;
  v114 = (WTF *)v116;
  v115 = xmmword_199122F80;
  v116[0] = 0;
  v117 = off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v117, "%s", a3);
  v117[5]((WTF::StringPrintStream *)&v117);
  v16 = v118;
  if (!v118)
  {
    v111 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v111);
  v16 = v118;
  if (v118 != (WTF *)v120)
LABEL_5:
    WTF::fastFree((unint64_t)v16, v9, v10, v11, v12, v13, v14, v15);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v110, a2, a4, v17, v18);
  v117 = off_1E3572250;
  v118 = (WTF *)v120;
  v119 = xmmword_199122F80;
  v120[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v117, "%s", " expected ");
  v117[5]((WTF::StringPrintStream *)&v117);
  v26 = v118;
  if (!v118)
  {
    v109 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v118, v119, (uint64_t *)&v109);
  v26 = v118;
  if (v118 != (WTF *)v120)
LABEL_10:
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v108, a2, a5, v27, v28);
  v29 = (WTF *)((uint64_t (*)(_QWORD))v113[4])(&v113);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v29 + 32))(v29);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v117, v31);
  WTF::printExpectedCStringHelper(v30, "StringView", &v117);
  if ((_DWORD)v118 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v118])(&v112, &v117);
  v32 = (*(double (**)(WTF *))(*(_QWORD *)v29 + 40))(v29);
  WTF::printInternal(v29, (WTF::PrintStream *)&v111, v33, v34, v35, v36, v37, v38, v32, v39);
  WTF::printInternal(v29, (WTF::PrintStream *)&v110, v40, v41, v42, v43, v44, v45, v46, v47);
  WTF::printInternal(v29, (WTF::PrintStream *)&v109, v48, v49, v50, v51, v52, v53, v54, v55);
  WTF::printInternal(v29, (WTF::PrintStream *)&v108, v56, v57, v58, v59, v60, v61, v62, v63);
  v113[5]((WTF::StringPrintStream *)&v113);
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v111;
  v111 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v75 = v114;
  if (v114)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v114, v115, (uint64_t *)&v117);
    v75 = v114;
    *a1 = v117;
    if (v75 == (WTF *)v116)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v75, v64, v65, v66, v67, v68, v69, v70);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [48],JSC::Wasm::Type,char [25],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "argument type mismatch in array.new_fixed, got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", ", expected a subtype of ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [64],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "array.new_data expected numeric, packed, or vector type; found ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [30],unsigned int,char [50],unsigned int,char [2]>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2, _DWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  char v147;
  void (**v148)(WTF::StringPrintStream *__hidden);
  WTF *v149;
  __int128 v150;
  _BYTE v151[128];
  void (**v152)(WTF::StringPrintStream *__hidden);
  unint64_t v153;
  __int128 v154;
  _BYTE v155[128];
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v148 = off_1E3572250;
  v149 = (WTF *)v151;
  v150 = xmmword_199122F80;
  v151[0] = 0;
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", "array.new_data segment index ");
  v152[5]((WTF::StringPrintStream *)&v152);
  v13 = v153;
  if (!v153)
  {
    v146 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v146);
  v13 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_5:
    WTF::fastFree(v13, v6, v7, v8, v9, v10, v11, v12);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%u", *a2);
  v152[5]((WTF::StringPrintStream *)&v152);
  v21 = v153;
  if (!v153)
  {
    v145 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v145);
  v21 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_10:
    WTF::fastFree(v21, v14, v15, v16, v17, v18, v19, v20);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", " is out of bounds (maximum data segment index is ");
  v152[5]((WTF::StringPrintStream *)&v152);
  v29 = v153;
  if (!v153)
  {
    v144 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v144);
  v29 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_15:
    WTF::fastFree(v29, v22, v23, v24, v25, v26, v27, v28);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%u", *a3);
  v152[5]((WTF::StringPrintStream *)&v152);
  v37 = v153;
  if (!v153)
  {
    v143 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v143);
  v37 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_20:
    WTF::fastFree(v37, v30, v31, v32, v33, v34, v35, v36);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", ")");
  v152[5]((WTF::StringPrintStream *)&v152);
  v45 = v153;
  if (!v153)
  {
    v142 = 0;
    goto LABEL_25;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v142);
  v45 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_25:
    WTF::fastFree(v45, v38, v39, v40, v41, v42, v43, v44);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v148[4])(&v148);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v152, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v152);
  if ((_DWORD)v153 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v153])(&v147, &v152);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v146, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v145, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v144, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v143, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v142, v81, v82, v83, v84, v85, v86, v87, v88);
  v148[5]((WTF::StringPrintStream *)&v148);
  v96 = v142;
  v142 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v143;
  v143 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v144;
  v144 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v145;
  v145 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v146;
  v146 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v149;
  if (v149)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v149, v150, (uint64_t *)&v152);
    v101 = v149;
    *a1 = v152;
    if (v101 == (WTF *)v151)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v101, v89, v90, v91, v92, v93, v94, v95);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [30],unsigned int,char [53],unsigned int,char [2]>(void (***a1)(WTF::StringPrintStream *__hidden this), _DWORD *a2, _DWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  WTF::AtomStringImpl *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  char v147;
  void (**v148)(WTF::StringPrintStream *__hidden);
  WTF *v149;
  __int128 v150;
  _BYTE v151[128];
  void (**v152)(WTF::StringPrintStream *__hidden);
  unint64_t v153;
  __int128 v154;
  _BYTE v155[128];
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v148 = off_1E3572250;
  v149 = (WTF *)v151;
  v150 = xmmword_199122F80;
  v151[0] = 0;
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", "array.new_elem segment index ");
  v152[5]((WTF::StringPrintStream *)&v152);
  v13 = v153;
  if (!v153)
  {
    v146 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v146);
  v13 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_5:
    WTF::fastFree(v13, v6, v7, v8, v9, v10, v11, v12);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%u", *a2);
  v152[5]((WTF::StringPrintStream *)&v152);
  v21 = v153;
  if (!v153)
  {
    v145 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v145);
  v21 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_10:
    WTF::fastFree(v21, v14, v15, v16, v17, v18, v19, v20);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", " is out of bounds (maximum element segment index is ");
  v152[5]((WTF::StringPrintStream *)&v152);
  v29 = v153;
  if (!v153)
  {
    v144 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v144);
  v29 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_15:
    WTF::fastFree(v29, v22, v23, v24, v25, v26, v27, v28);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%u", *a3);
  v152[5]((WTF::StringPrintStream *)&v152);
  v37 = v153;
  if (!v153)
  {
    v143 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v143);
  v37 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_20:
    WTF::fastFree(v37, v30, v31, v32, v33, v34, v35, v36);
  v152 = off_1E3572250;
  v153 = (unint64_t)v155;
  v154 = xmmword_199122F80;
  v155[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v152, "%s", ")");
  v152[5]((WTF::StringPrintStream *)&v152);
  v45 = v153;
  if (!v153)
  {
    v142 = 0;
    goto LABEL_25;
  }
  WTF::fromUTF8Impl<false>(v153, v154, (uint64_t *)&v142);
  v45 = v153;
  if ((_BYTE *)v153 != v155)
LABEL_25:
    WTF::fastFree(v45, v38, v39, v40, v41, v42, v43, v44);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v148[4])(&v148);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v152, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v152);
  if ((_DWORD)v153 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v153])(&v147, &v152);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v146, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v145, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v144, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v143, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v142, v81, v82, v83, v84, v85, v86, v87, v88);
  v148[5]((WTF::StringPrintStream *)&v148);
  v96 = v142;
  v142 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v143;
  v143 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v144;
  v144 = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
    {
      WTF::StringImpl::~StringImpl(v98, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v98 -= 2;
    }
  }
  v99 = v145;
  v145 = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
    {
      WTF::StringImpl::~StringImpl(v99, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v99 -= 2;
    }
  }
  v100 = v146;
  v146 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v89, v90, v91, v92, v93, v94, v95);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v149;
  if (v149)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v149, v150, (uint64_t *)&v152);
    v101 = v149;
    *a1 = v152;
    if (v101 == (WTF *)v151)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v101, v89, v90, v91, v92, v93, v94, v95);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [61],JSC::Wasm::Type,char [56],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "type mismatch in array.new_elem: segment elements have type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " but array.new_elem operation expects elements of type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

uint64_t JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::addReferencedFunctions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t i;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;

  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a2 + 16);
  if (BYTE1(dword_1ECF4C7B0))
    v12 = 227;
  else
    v12 = 240;
  if (BYTE1(dword_1ECF4C7B0))
    v13 = -16;
  else
    v13 = 0;
  result = JSC::Wasm::isSubtype(v10, v11, v12, v13, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v15 = *(unsigned int *)(a2 + 60);
    if ((_DWORD)v15)
    {
      for (i = 0; i < v15; ++i)
      {
        if (i >= v15)
        {
LABEL_29:
          __break(0xC471u);
          JUMPOUT(0x198F631B4);
        }
        if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + i) == 1)
        {
          if (i >= *(unsigned int *)(a2 + 76))
            goto LABEL_29;
          v17 = *(_QWORD *)(a1 + 20592);
          v18 = *(_QWORD *)(v17 + 320);
          v19 = (unint64_t *)(2 * v18);
          if (v18 < 0)
            v20 = 63;
          else
            v20 = *v19;
          v21 = *(unsigned int *)(*(_QWORD *)(a2 + 64) + 8 * i);
          if (v20 > v21)
          {
            v22 = (_QWORD *)(v17 + 320);
            v23 = 1 << v21;
            v24 = v19 + 1;
            if (v18 >= 0)
              v25 = v24;
            else
              v25 = v22;
            v26 = (_QWORD *)((char *)v25 + ((v21 >> 3) & 0x1FFFFFF8));
            while (1)
            {
              v27 = *v26;
              if ((*v26 & v23) != 0)
                break;
              v28 = __ldxr(v26);
              if (v28 == v27)
              {
                if (!__stxr(v27 | v23, v26))
                  break;
              }
              else
              {
                __clrex();
              }
            }
            v15 = *(unsigned int *)(a2 + 60);
          }
        }
      }
    }
  }
  return result;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<WTF::ASCIILiteral,char [19],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5, double a6, float a7)
{
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  double v31;
  float v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  double v41;
  float v42;
  WTF *v43;
  WTF::PrintStream *v44;
  float v45;
  double v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  const WTF::String *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  const WTF::String *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  float v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF *v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  int v144;
  char v145;
  void (**v146)(WTF::StringPrintStream *__hidden);
  WTF *v147;
  __int128 v148;
  _BYTE v149[128];
  void (**v150)(WTF::StringPrintStream *__hidden);
  WTF *v151;
  __int128 v152;
  _BYTE v153[128];
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v146 = off_1E3572250;
  v147 = (WTF *)v149;
  v148 = xmmword_199122F80;
  v149[0] = 0;
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  if (*(_QWORD *)a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = v11 != 0;
    v13 = v11 - 1;
    if (!v12)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v13, (uint64_t)&v143, a7);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v143 = (WTF::StringImpl *)v14;
    v144 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v150, "StringView", &v143);
  if (v144 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v144])(&v142, &v143);
  v150[5]((WTF::StringPrintStream *)&v150);
  v150[5]((WTF::StringPrintStream *)&v150);
  v22 = v151;
  if (!v151)
  {
    v143 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v143);
  v22 = v151;
  if (v151 != (WTF *)v153)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v150, "%s", " arrayref to type ");
  v150[5]((WTF::StringPrintStream *)&v150);
  v30 = v151;
  if (!v151)
  {
    v142 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v142);
  v30 = v151;
  if (v151 != (WTF *)v153)
LABEL_17:
    WTF::fastFree((unint64_t)v30, v23, v24, v25, v26, v27, v28, v29);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v141, a2, a4, v31, v32);
  v150 = off_1E3572250;
  v151 = (WTF *)v153;
  v152 = xmmword_199122F80;
  v153[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v150, "%s", " expected ");
  v150[5]((WTF::StringPrintStream *)&v150);
  v40 = v151;
  if (!v151)
  {
    v140 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v151, v152, (uint64_t *)&v140);
  v40 = v151;
  if (v151 != (WTF *)v153)
LABEL_22:
    WTF::fastFree((unint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v139, a2, a5, v41, v42);
  v43 = (WTF *)((uint64_t (*)(_QWORD))v146[4])(&v146);
  v44 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v43 + 32))(v43);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v150, v45);
  WTF::printExpectedCStringHelper(v44, "StringView", &v150);
  if ((_DWORD)v151 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v151])(&v145, &v150);
  v46 = (*(double (**)(WTF *))(*(_QWORD *)v43 + 40))(v43);
  WTF::printInternal(v43, (WTF::PrintStream *)&v143, v47, v48, v49, v50, v51, v52, v46, v53);
  WTF::printInternal(v43, (WTF::PrintStream *)&v142, v54, v55, v56, v57, v58, v59, v60, v61);
  WTF::printInternal(v43, (WTF::PrintStream *)&v141, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v43, (WTF::PrintStream *)&v140, v70, v71, v72, v73, v74, v75, v76, v77);
  WTF::printInternal(v43, (WTF::PrintStream *)&v139, v78, v79, v80, v81, v82, v83, v84, v85);
  v146[5]((WTF::StringPrintStream *)&v146);
  v93 = v139;
  v139 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = v140;
  v140 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v141;
  v141 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v142;
  v142 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v143;
  v143 = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
    {
      WTF::StringImpl::~StringImpl(v97, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
    }
    else
    {
      *(_DWORD *)v97 -= 2;
    }
  }
  v98 = v147;
  if (v147)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v147, v148, (uint64_t *)&v150);
    v98 = v147;
    *a1 = v150;
    if (v98 == (WTF *)v149)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v98, v86, v87, v88, v89, v90, v91, v92);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [28],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "array.set arrayref to type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [25],JSC::Wasm::Type,char [19]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF::PrintStream *v25;
  float v26;
  double v27;
  const WTF::String *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  const WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  float v42;
  const WTF::String *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  float v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  char v89;
  void (**v90)(WTF::StringPrintStream *__hidden);
  WTF *v91;
  __int128 v92;
  _BYTE v93[128];
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v90 = off_1E3572250;
  v91 = (WTF *)v93;
  v92 = xmmword_199122F80;
  v93[0] = 0;
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", "array.len value to type ");
  v94[5]((WTF::StringPrintStream *)&v94);
  v13 = v95;
  if (!v95)
  {
    v88 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v88);
  v13 = v95;
  if (v95 != (WTF *)v97)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v87, a2, a3, v14, v15);
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", " expected arrayref");
  v94[5]((WTF::StringPrintStream *)&v94);
  v23 = v95;
  if (!v95)
  {
    v86 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v86);
  v23 = v95;
  if (v95 != (WTF *)v97)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v24 = (WTF *)((uint64_t (*)(_QWORD))v90[4])(&v90);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v24 + 32))(v24);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v94, v26);
  WTF::printExpectedCStringHelper(v25, "StringView", &v94);
  if ((_DWORD)v95 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v95])(&v89, &v94);
  v27 = (*(double (**)(WTF *))(*(_QWORD *)v24 + 40))(v24);
  WTF::printInternal(v24, (WTF::PrintStream *)&v88, v28, v29, v30, v31, v32, v33, v27, v34);
  WTF::printInternal(v24, (WTF::PrintStream *)&v87, v35, v36, v37, v38, v39, v40, v41, v42);
  WTF::printInternal(v24, (WTF::PrintStream *)&v86, v43, v44, v45, v46, v47, v48, v49, v50);
  v90[5]((WTF::StringPrintStream *)&v90);
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = v88;
  v88 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = v91;
  if (v91)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v91, v92, (uint64_t *)&v94);
    v61 = v91;
    *a1 = v94;
    if (v61 == (WTF *)v93)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v61, v51, v52, v53, v54, v55, v56, v57);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [27],JSC::Wasm::Type,char [11],JSC::Wasm::TypeKind>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, char *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *String;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::PrintStream *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF *v42;
  WTF::PrintStream *v43;
  float v44;
  double v45;
  const WTF::String *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  const WTF::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  float v68;
  const WTF::String *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  float v76;
  WTF::AtomStringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  int v125;
  char v126;
  void (**v127)(WTF::StringPrintStream *__hidden);
  WTF *v128;
  __int128 v129;
  _BYTE v130[128];
  void (**v131)(WTF::StringPrintStream *__hidden);
  unint64_t v132;
  __int128 v133;
  _BYTE v134[128];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v127 = off_1E3572250;
  v128 = (WTF *)v130;
  v129 = xmmword_199122F80;
  v130[0] = 0;
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", "array.fill offset to type ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v15 = v132;
  if (!v132)
  {
    v123 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v123);
  v15 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_5:
    WTF::fastFree(v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v122, a2, a3, v16, v17);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v131, "%s", " expected ");
  v131[5]((WTF::StringPrintStream *)&v131);
  v25 = v132;
  if (!v132)
  {
    v121 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v121);
  v25 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_10:
    WTF::fastFree(v25, v18, v19, v20, v21, v22, v23, v24);
  v131 = off_1E3572250;
  v132 = (unint64_t)v134;
  v133 = xmmword_199122F80;
  v134[0] = 0;
  String = (char *)JSC::Wasm::makeString(*a4);
  v28 = v27;
  v29 = ((uint64_t (*)(_QWORD))v131[4])(&v131);
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
  if (String)
  {
    v32 = v28 - 1;
    if (!v28)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(String, v32, (uint64_t)&v124, v31);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v124 = (WTF::StringImpl *)v33;
    v125 = 0;
  }
  WTF::printExpectedCStringHelper(v30, "StringView", &v124);
  if (v125 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v125])(&v126, &v124);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
  v131[5]((WTF::StringPrintStream *)&v131);
  v131[5]((WTF::StringPrintStream *)&v131);
  v41 = v132;
  if (!v132)
  {
    v124 = 0;
    goto LABEL_22;
  }
  WTF::fromUTF8Impl<false>(v132, v133, (uint64_t *)&v124);
  v41 = v132;
  if ((_BYTE *)v132 != v134)
LABEL_22:
    WTF::fastFree(v41, v34, v35, v36, v37, v38, v39, v40);
  v42 = (WTF *)((uint64_t (*)(_QWORD))v127[4])(&v127);
  v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v42 + 32))(v42);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v131, v44);
  WTF::printExpectedCStringHelper(v43, "StringView", &v131);
  if ((_DWORD)v132 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v132])(&v126, &v131);
  v45 = (*(double (**)(WTF *))(*(_QWORD *)v42 + 40))(v42);
  WTF::printInternal(v42, (WTF::PrintStream *)&v123, v46, v47, v48, v49, v50, v51, v45, v52);
  WTF::printInternal(v42, (WTF::PrintStream *)&v122, v53, v54, v55, v56, v57, v58, v59, v60);
  WTF::printInternal(v42, (WTF::PrintStream *)&v121, v61, v62, v63, v64, v65, v66, v67, v68);
  WTF::printInternal(v42, (WTF::PrintStream *)&v124, v69, v70, v71, v72, v73, v74, v75, v76);
  v127[5]((WTF::StringPrintStream *)&v127);
  v84 = v124;
  v124 = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
  }
  v85 = v121;
  v121 = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
    {
      WTF::StringImpl::~StringImpl(v85, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
    }
    else
    {
      *(_DWORD *)v85 -= 2;
    }
  }
  v86 = v122;
  v122 = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  v87 = v123;
  v123 = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
    {
      WTF::StringImpl::~StringImpl(v87, v77, v78, v79, v80, v81, v82, v83);
      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
    }
    else
    {
      *(_DWORD *)v87 -= 2;
    }
  }
  v88 = v128;
  if (v128)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v128, v129, (uint64_t *)&v131);
    v88 = v128;
    *a1 = v131;
    if (v88 == (WTF *)v130)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v88, v77, v78, v79, v80, v81, v82, v83);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [26],JSC::Wasm::Type,char [11],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "array.fill value to type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [62],JSC::Wasm::Type,char [57],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "type mismatch in array.init_elem: segment elements have type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " but array.init_elem operation expects elements of type ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseStructFieldManipulation(_BYTE *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, double a6, float a7)
{
  float v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(WTF::StringPrintStream *__hidden);
  void (**v14)(WTF::StringPrintStream *__hidden);
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  float v29;
  JSC::Wasm::TypeDefinition *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (**v44)(WTF::StringPrintStream *__hidden);
  unsigned int *v45;
  WTF *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t CachedUnrolling;
  uint64_t v55;
  uint64_t v56;
  const JSC::Wasm::Type *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  const JSC::Wasm::TypeDefinition *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::Wasm::TypeInformation *v68;
  _QWORD v69[2];
  void (**v70[2])(WTF::StringPrintStream *__hidden);
  const char *v71;
  uint64_t v72;
  void (**v73)(WTF::StringPrintStream *__hidden);
  WTF::StringImpl *v74;
  unsigned int v75[2];
  _QWORD v76[2];
  uint64_t v77;
  unint64_t v78;

  v76[0] = a4;
  v76[1] = a5;
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseStructTypeIndexAndFieldIndex((uint64_t)&v77, (unint64_t *)a2, v75, a4, a5, a6, a7);
  if ((_BYTE)v78)
    goto LABEL_15;
  v11 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v11)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "struct reference", 17, &v77, v10);
LABEL_15:
    v44 = (void (**)(WTF::StringPrintStream *__hidden))v77;
    goto LABEL_18;
  }
  v12 = *(_QWORD *)(a2 + 56) + 32 * v11;
  v14 = *(void (***)(WTF::StringPrintStream *__hidden))(v12 - 32);
  v13 = *(void (***)(WTF::StringPrintStream *__hidden))(v12 - 24);
  v15 = *(_QWORD *)(v12 - 16);
  v16 = *(_QWORD *)(v12 - 8);
  *(_DWORD *)(a2 + 68) = v11 - 1;
  v77 = (uint64_t)"WasmFunctionParser.h:";
  LODWORD(v78) = 21;
  LODWORD(v71) = 1581;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v77, (unsigned int *)&v71, (int **)&v74);
  v24 = v74;
  if (!v74)
    goto LABEL_23;
  v74 = 0;
  if (*(_DWORD *)v24 == 2)
  {
    WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
    WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
  }
  else
  {
    *(_DWORD *)v24 -= 2;
  }
  v25 = *(_QWORD *)(a2 + 20592);
  v26 = v75[0];
  if (*(_DWORD *)(v25 + 100) <= v75[0])
  {
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x198F64940);
  }
  v27 = *(_QWORD *)(v25 + 88);
  v77 = 227;
  v78 = *(_QWORD *)(v27 + 8 * v75[0]);
  if ((JSC::Wasm::isSubtype(v14, (unint64_t)v13, 227, v78, v20, v21, v22, v23) & 1) != 0)
  {
    v30 = *(JSC::Wasm::TypeDefinition **)(v27 + 8 * v26);
    if (*((_DWORD *)v30 + 8) == 4)
    {
      v68 = *(JSC::Wasm::TypeInformation **)(v27 + 8 * v26);
      v45 = (unsigned int *)*((_QWORD *)v30 + 1);
      v46 = *(WTF **)v45;
      v30 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v45 + 8) + 8 * v45[2]);
      if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v30))
      {
        CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling(v68, v47, v48, v49, v50, v51, v52, v53);
        if (v61)
        {
          v30 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
        }
        else
        {
          v30 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v30, v46, v55, v56, v57, v58, v59, v60);
          JSC::Wasm::TypeInformation::addCachedUnrolling(v68, v30, v62, v63, v64, v65, v66, v67);
        }
      }
    }
    v31 = *((_DWORD *)v30 + 8);
    if (v31 == 5)
    {
      v30 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v30 + 1);
      v31 = *((_DWORD *)v30 + 8);
    }
    if (v31 == 1)
    {
      *(_QWORD *)(a3 + 8) = v14;
      *(_QWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 24) = v15;
      *(_QWORD *)(a3 + 32) = v16;
      v32 = v75[1];
      *(_DWORD *)a3 = v26;
      *(_DWORD *)(a3 + 4) = v32;
      v33 = *((_QWORD *)v30 + 1) + 32 * v32;
      v34 = *(_QWORD *)(v33 + 16);
      v35 = *(_OWORD *)v33;
      *(_BYTE *)(a3 + 64) = *(_BYTE *)(v33 + 24);
      *(_OWORD *)(a3 + 40) = v35;
      *(_QWORD *)(a3 + 56) = v34;
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    v71 = " type index points into a non struct type";
    v72 = 42;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral>(v70, (uint64_t)v76, (uint64_t)&v71, v28, v29);
    v44 = v70[0];
  }
  else
  {
    v71 = " structref to type ";
    v72 = 20;
    v70[0] = v14;
    v70[1] = v13;
    v69[0] = " expected ";
    v69[1] = 11;
    JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(&v73, a2, (uint64_t)v76, (uint64_t)&v71, (JSC::Wasm::Type *)v70, (uint64_t)v69, (JSC::Wasm::Type *)&v77, v28, v29);
    v44 = v73;
  }
LABEL_18:
  *(_QWORD *)a1 = v44;
  a1[8] = 1;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, uint64_t a4, JSC::Wasm::Type *a5, uint64_t a6, double a7, float a8)
{
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  double v37;
  float v38;
  float v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF::PrintStream *v52;
  float v53;
  double v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  const WTF::String *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  float v69;
  const WTF::String *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  float v77;
  const WTF::String *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  float v85;
  WTF::AtomStringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  int v134;
  char v135;
  void (**v136)(WTF::StringPrintStream *__hidden);
  WTF *v137;
  __int128 v138;
  _BYTE v139[128];
  void (**v140)(WTF::StringPrintStream *__hidden);
  WTF *v141;
  __int128 v142;
  _BYTE v143[128];
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v136 = off_1E3572250;
  v137 = (WTF *)v139;
  v138 = xmmword_199122F80;
  v139[0] = 0;
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a3)
  {
    v13 = *(_QWORD *)(a3 + 8);
    v14 = v13 != 0;
    v15 = v13 - 1;
    if (!v14)
      v15 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v15, (uint64_t)&v133, a8);
  }
  else
  {
    v16 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = 0;
    *(_BYTE *)(v16 + 16) = 0;
    v133 = (WTF::StringImpl *)v16;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v132, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v24 = v141;
  if (!v141)
  {
    v132 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v132);
  v24 = v141;
  if (v141 != (WTF *)v143)
LABEL_12:
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a4)
  {
    v26 = *(_QWORD *)(a4 + 8);
    v14 = v26 != 0;
    v27 = v26 - 1;
    if (!v14)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v27, (uint64_t)&v133, v25);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v133 = (WTF::StringImpl *)v28;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v131, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v36 = v141;
  if (!v141)
  {
    v131 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v131);
  v36 = v141;
  if (v141 != (WTF *)v143)
LABEL_24:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v130, a2, a5, v37, v38);
  v140 = off_1E3572250;
  v141 = (WTF *)v143;
  v142 = xmmword_199122F80;
  v143[0] = 0;
  if (*(_QWORD *)a6)
  {
    v40 = *(_QWORD *)(a6 + 8);
    v14 = v40 != 0;
    v41 = v40 - 1;
    if (!v14)
      v41 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v41, (uint64_t)&v133, v39);
  }
  else
  {
    v42 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v42 = 1;
    *(_QWORD *)(v42 + 8) = 0;
    *(_BYTE *)(v42 + 16) = 0;
    v133 = (WTF::StringImpl *)v42;
    v134 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v140, "StringView", &v133);
  if (v134 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v134])(&v135, &v133);
  v140[5]((WTF::StringPrintStream *)&v140);
  v140[5]((WTF::StringPrintStream *)&v140);
  v50 = v141;
  if (!v141)
  {
    v133 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v141, v142, (uint64_t *)&v133);
  v50 = v141;
  if (v141 != (WTF *)v143)
LABEL_36:
    WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
  v51 = (WTF *)((uint64_t (*)(_QWORD))v136[4])(&v136);
  v52 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v51 + 32))(v51);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v140, v53);
  WTF::printExpectedCStringHelper(v52, "StringView", &v140);
  if ((_DWORD)v141 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v141])(&v135, &v140);
  v54 = (*(double (**)(WTF *))(*(_QWORD *)v51 + 40))(v51);
  WTF::printInternal(v51, (WTF::PrintStream *)&v132, v55, v56, v57, v58, v59, v60, v54, v61);
  WTF::printInternal(v51, (WTF::PrintStream *)&v131, v62, v63, v64, v65, v66, v67, v68, v69);
  WTF::printInternal(v51, (WTF::PrintStream *)&v130, v70, v71, v72, v73, v74, v75, v76, v77);
  WTF::printInternal(v51, (WTF::PrintStream *)&v133, v78, v79, v80, v81, v82, v83, v84, v85);
  v136[5]((WTF::StringPrintStream *)&v136);
  v93 = v133;
  v133 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
  v94 = v130;
  v130 = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  v95 = v131;
  v131 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
    {
      WTF::StringImpl::~StringImpl(v95, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v114, v115, v116, v117, v118, v119, v120, v121);
    }
    else
    {
      *(_DWORD *)v95 -= 2;
    }
  }
  v96 = v132;
  v132 = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
    {
      WTF::StringImpl::~StringImpl(v96, v86, v87, v88, v89, v90, v91, v92);
      WTF::fastFree(v122, v123, v124, v125, v126, v127, v128, v129);
    }
    else
    {
      *(_DWORD *)v96 -= 2;
    }
  }
  v97 = v137;
  if (v137)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v137, v138, (uint64_t *)&v140);
    v97 = v137;
    *a1 = v140;
    if (v97 == (WTF *)v139)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v97, v86, v87, v88, v89, v90, v91, v92);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, double a6, float a7)
{
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  double v23;
  float v24;
  float v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  WTF::PrintStream *v38;
  float v39;
  double v40;
  const WTF::String *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  const WTF::String *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  float v55;
  const WTF::String *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  float v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  int v102;
  char v103;
  void (**v104)(WTF::StringPrintStream *__hidden);
  WTF *v105;
  __int128 v106;
  _BYTE v107[128];
  void (**v108)(WTF::StringPrintStream *__hidden);
  WTF *v109;
  __int128 v110;
  _BYTE v111[128];
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v104 = off_1E3572250;
  v105 = (WTF *)v107;
  v106 = xmmword_199122F80;
  v107[0] = 0;
  v108 = off_1E3572250;
  v109 = (WTF *)v111;
  v110 = xmmword_199122F80;
  v111[0] = 0;
  if (*(_QWORD *)a3)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = v11 != 0;
    v13 = v11 - 1;
    if (!v12)
      v13 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v13, (uint64_t)&v101, a7);
  }
  else
  {
    v14 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    *(_BYTE *)(v14 + 16) = 0;
    v101 = (WTF::StringImpl *)v14;
    v102 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v108, "StringView", &v101);
  if (v102 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v102])(&v100, &v101);
  v108[5]((WTF::StringPrintStream *)&v108);
  v108[5]((WTF::StringPrintStream *)&v108);
  v22 = v109;
  if (!v109)
  {
    v100 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v109, v110, (uint64_t *)&v100);
  v22 = v109;
  if (v109 != (WTF *)v111)
LABEL_12:
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v99, a2, a4, v23, v24);
  v108 = off_1E3572250;
  v109 = (WTF *)v111;
  v110 = xmmword_199122F80;
  v111[0] = 0;
  if (*(_QWORD *)a5)
  {
    v26 = *(_QWORD *)(a5 + 8);
    v12 = v26 != 0;
    v27 = v26 - 1;
    if (!v12)
      v27 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v27, (uint64_t)&v101, v25);
  }
  else
  {
    v28 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v28 = 1;
    *(_QWORD *)(v28 + 8) = 0;
    *(_BYTE *)(v28 + 16) = 0;
    v101 = (WTF::StringImpl *)v28;
    v102 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v108, "StringView", &v101);
  if (v102 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v102])(&v103, &v101);
  v108[5]((WTF::StringPrintStream *)&v108);
  v108[5]((WTF::StringPrintStream *)&v108);
  v36 = v109;
  if (!v109)
  {
    v101 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v109, v110, (uint64_t *)&v101);
  v36 = v109;
  if (v109 != (WTF *)v111)
LABEL_24:
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  v37 = (WTF *)((uint64_t (*)(_QWORD))v104[4])(&v104);
  v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v37 + 32))(v37);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v108, v39);
  WTF::printExpectedCStringHelper(v38, "StringView", &v108);
  if ((_DWORD)v109 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v109])(&v103, &v108);
  v40 = (*(double (**)(WTF *))(*(_QWORD *)v37 + 40))(v37);
  WTF::printInternal(v37, (WTF::PrintStream *)&v100, v41, v42, v43, v44, v45, v46, v40, v47);
  WTF::printInternal(v37, (WTF::PrintStream *)&v99, v48, v49, v50, v51, v52, v53, v54, v55);
  WTF::printInternal(v37, (WTF::PrintStream *)&v101, v56, v57, v58, v59, v60, v61, v62, v63);
  v104[5]((WTF::StringPrintStream *)&v104);
  v71 = v101;
  v101 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v99;
  v99 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v100;
  v100 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v64, v65, v66, v67, v68, v69, v70);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v105;
  if (v105)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v105, v106, (uint64_t *)&v108);
    v74 = v105;
    *a1 = v108;
    if (v74 == (WTF *)v107)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v64, v65, v66, v67, v68, v69, v70);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::checkBranchTarget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  BOOL v10;
  JSC::Wasm::FunctionSignature *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  JSC::Wasm::FunctionSignature *v23;
  int32x2_t v24;
  int64x2_t v25;
  int8x16_t v26;
  int8x16_t v27;
  double v28;
  float v29;
  uint64_t v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  WTF::StringImpl *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  int8x16_t v56;
  void (**v57)(WTF::StringPrintStream *__hidden);

  v9 = *(_DWORD *)(a3 + 8);
  v10 = v9 == 2;
  v11 = *(JSC::Wasm::FunctionSignature **)a3;
  v12 = 12;
  if (v9 == 2)
    v12 = 8;
  v13 = *(_DWORD *)((char *)v11 + v12);
  if (v13)
  {
    v16 = *(unsigned int *)(a2 + 68);
    if (v16 < v13)
    {
      v24 = vdup_n_s32(v9 == 3);
      v25.i64[0] = v24.u32[0];
      v25.i64[1] = v24.u32[1];
      v26 = (int8x16_t)vdupq_n_s64(0x10uLL);
      v26.i64[0] = (uint64_t)"branch to block";
      v27 = (int8x16_t)vdupq_n_s64(0x17uLL);
      v27.i64[0] = (uint64_t)"branch out of function";
      v56 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v25, 0x3FuLL)), v27, v26);
      *(_QWORD *)&v55 = " on expression stack of size ";
      *((_QWORD *)&v55 + 1) = 30;
      v54 = v16;
      v52 = ", but block, ";
      v53 = 14;
      JSC::Wasm::FunctionSignature::toString(v11, (uint64_t *)&v51);
      *(_QWORD *)&v50 = " expects ";
      *((_QWORD *)&v50 + 1) = 10;
      v30 = 12;
      if (*(_DWORD *)(a3 + 8) == 2)
        v30 = 8;
      v49 = *(_DWORD *)(*(_QWORD *)a3 + v30);
      v47 = " values";
      v48 = 8;
      JSC::Wasm::FunctionParser<JSC::Wasm::IPIntGenerator>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral>(&v57, (uint64_t)&v56, (uint64_t)&v55, &v54, (uint64_t)&v52, (WTF::PrintStream *)&v51, (uint64_t)&v50, &v49, v28, v29, (uint64_t)&v47);
      *(_QWORD *)a1 = v57;
      *(_BYTE *)(a1 + 8) = 1;
      v38 = v51;
      v51 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
        {
          WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
          WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
        }
        else
        {
          *(_DWORD *)v38 -= 2;
        }
      }
    }
    else
    {
      v17 = 0;
      v18 = v16 - v13;
      while (1)
      {
        v19 = v10 ? *((_DWORD *)v11 + 3) + v17 : v17;
        v20 = (v18 + v17);
        if ((JSC::Wasm::isSubtype(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 32 * v20), *(_QWORD *)(*(_QWORD *)(a2 + 56) + 32 * v20 + 8), *(_QWORD *)(*(_QWORD *)v11 + 16 * v19), *(_QWORD *)(*(_QWORD *)v11 + 16 * v19 + 8), a5, a6, a7, a8) & 1) == 0)break;
        ++v17;
        v10 = *(_DWORD *)(a3 + 8) == 2;
        v11 = *(JSC::Wasm::FunctionSignature **)a3;
        if (*(_DWORD *)(a3 + 8) == 2)
          v22 = 8;
        else
          v22 = 12;
        if (v17 >= *(unsigned int *)((char *)v11 + v22))
          goto LABEL_4;
      }
      LODWORD(v54) = v17;
      v56.i64[0] = (uint64_t)"branch's stack type is not a subtype of block's type branch target type. Stack value has type ";
      v56.i64[1] = 95;
      v55 = *(_OWORD *)(*(_QWORD *)(a2 + 56) + 32 * v20);
      v52 = " but branch target expects a value of ";
      v53 = 39;
      v23 = *(JSC::Wasm::FunctionSignature **)a3;
      if (*(_DWORD *)(a3 + 8) == 2)
        LODWORD(v17) = *((_DWORD *)v23 + 3) + v17;
      v50 = *(_OWORD *)(*(_QWORD *)v23 + 16 * v17);
      v47 = " at index ";
      v48 = 11;
      JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,unsigned int>(&v57, a2, (uint64_t)&v56, (JSC::Wasm::Type *)&v55, (uint64_t)&v52, (JSC::Wasm::Type *)&v50, (uint64_t)&v47, &v54, *(double *)&v50, v21);
      *(_QWORD *)a1 = v57;
      *(_BYTE *)(a1 + 8) = 1;
    }
  }
  else
  {
LABEL_4:
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::atomicLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  int8x16_t *v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t Op;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  float v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  __int32 v91;
  const char *String;
  unsigned __int32 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v100;
  unint64_t *v101;
  uint64_t v102;
  __int128 v103;
  WTF::StringImpl *v104;
  __int128 v105;
  __int128 v106;
  int v107;
  const char *v108;
  uint64_t v109;
  const char *v110;
  int v111;

  *(_QWORD *)&v105 = a4;
  *((_QWORD *)&v105 + 1) = a5;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 20592) + 104) == -1)
  {
    v108 = "atomic instruction without memory";
    v109 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v106, (uint64_t)&v108, a6, a7);
LABEL_42:
    v84 = (const char *)v106;
    goto LABEL_43;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_64;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 5;
  if (v13 < 5)
    v21 = v13;
  v22 = v21 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v23 = v20 + v11;
  v24 = v11 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_64;
    LOBYTE(v26) = v24 + v17;
    *(_QWORD *)a2 = v24 + v17;
    v18 += 7;
    if (v13 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_64:
    v100 = "can't get load alignment";
    v101 = (unint64_t *)a2;
    v102 = 25;
LABEL_67:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v100, v101, v102, &v108, a7);
    goto LABEL_40;
  }
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v82 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v82, &v108, v83);
    *(_QWORD *)a1 = v108;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v12 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_66;
  v17 = 0;
  v30 = 0;
  LODWORD(v7) = 0;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = 5;
  if (v29 < 5)
    v32 = v29;
  v33 = v32 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v34 = v31 + v28;
  v35 = v28 + 2;
  while (1)
  {
    v26 = *(char *)(v34 + v17);
    v7 = ((v26 & 0x7F) << v30) | v7;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v33 == v17)
      goto LABEL_66;
    LOBYTE(v26) = v35 + v17;
    *(_QWORD *)a2 = v35 + v17;
    v30 += 7;
    if (v29 == ++v17)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v17 == 4 && v26 >= 0x10u)
  {
LABEL_66:
    v100 = "can't get load offset";
    v101 = (unint64_t *)a2;
    v102 = 22;
    goto LABEL_67;
  }
  v36 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v36)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "load pointer", 13, &v108, a7);
LABEL_40:
    v84 = v108;
LABEL_43:
    *(_QWORD *)a1 = v84;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v37 = *(_QWORD *)(a2 + 56) + 32 * v36;
  v38 = *(unsigned __int8 *)(v37 - 32);
  v40 = *(_QWORD *)(v37 - 16);
  v39 = *(_QWORD *)(v37 - 8);
  *(_DWORD *)(a2 + 68) = v36 - 1;
  v108 = "WasmFunctionParser.h:";
  LODWORD(v109) = 21;
  LODWORD(v106) = 616;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v108, (unsigned int *)&v106, (int **)&v104);
  v48 = v104;
  if (!v104)
  {
LABEL_70:
    __break(0xC471u);
    JUMPOUT(0x198F659ECLL);
  }
  v104 = 0;
  if (*(_DWORD *)v48 == 2)
  {
    WTF::StringImpl::~StringImpl(v48, v41, v42, v43, v44, v45, v46, v47);
    WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
  }
  else
  {
    *(_DWORD *)v48 -= 2;
  }
  if (v38 != 255)
  {
    LODWORD(v103) = a3;
    v108 = " pointer type mismatch";
    v109 = 23;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v106, &v103, (uint64_t)&v108);
    goto LABEL_42;
  }
  v49 = *(int8x16_t **)(a2 + 48);
  v108 = (const char *)v40;
  v109 = v39;
  v107 = v7;
  v50 = JSC::Wasm::memoryLog2Alignment();
  if (v50 >= 5u)
    goto LABEL_70;
  if (__CFADD__((_DWORD)v7, dword_19919F66C[(char)v50]))
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException((uint64_t)v49, 0, v51, v52, v53, v54, v55, v56);
    v90 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v49, v40, v39, v85, v86, v87, v88, v89);
    if (v39 == 2)
    {
      v91 = ((v49[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * v40 + 16;
      if (v49[80].i32[0] < v91)
        v49[80].i32[0] = v91;
      if ((v90 & 7) != 1 || ((-8 * v91) ^ v90) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)v49, v40, v39, v90);
    }
    Op = 0;
    if (a4 == 254)
      v64 = -511;
    else
      v64 = -255;
  }
  else
  {
    v57 = JSC::Wasm::memoryLog2Alignment();
    if (v57 >= 5u)
    {
      __break(0xC471u);
      JUMPOUT(0x198F65A0CLL);
    }
    v61 = JSC::Wasm::BBQJITImpl::BBQJIT::emitCheckAndPreparePointer(v49, (JSC::ARM64LogicalImmediate *)v40, v39, v7, dword_19919F66C[(char)v57], v58, v59, v60);
    Op = JSC::Wasm::BBQJITImpl::BBQJIT::emitAtomicLoadOp((uint64_t)v49, a3, a4, a5, v61, v7, v62, v63);
  }
  *(_QWORD *)&v103 = Op;
  WORD4(v103) = v64;
  if (HIBYTE(word_1ECF4C700))
  {
    String = JSC::Wasm::makeString();
    v106 = v103;
    v110 = String;
    WTF::dataLog<char [16]>("BBQ\t");
    if (v49->i32[0])
    {
      v93 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v93;
      }
      while (v93 < v49->i32[0]);
    }
    WTF::dataLog<char const*,char [2]>(&v110, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v108);
    if (v109 != 1 && v109 != 4)
    {
      v111 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v49, (uint64_t)v108, v109, v94, v95, v96, v97, v98);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v111);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)v49, 0, &v107, (uint64_t *)&v106);
  }
  v71 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v71 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a2 + 56, &v105, &v103, v65, v66, v67, v68, v69);
  }
  else
  {
    v72 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 32 * v71);
    v73 = *((_QWORD *)&v103 + 1);
    *v72 = a4;
    v72[1] = a5;
    v72[2] = Op;
    v72[3] = v73;
    ++*(_DWORD *)(a2 + 68);
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::atomicStore(_BYTE *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  char v61;
  int8x16_t *v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  _BYTE *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (**v92)(WTF::StringPrintStream *__hidden);
  char v93;
  float v94;
  char *v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int32 v112;
  int v113;
  __int32 v114;
  unsigned __int32 v115;
  unsigned int v116;
  char *v117;
  unint64_t *v118;
  uint64_t v119;
  _BYTE *v120;
  void (**v121)(WTF::StringPrintStream *__hidden);
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  int v126;
  int v127;
  void (**v128[2])(WTF::StringPrintStream *__hidden);
  const char *v129;
  uint64_t v130;
  const char *String;

  if (*(_DWORD *)(*(_QWORD *)(a2 + 20592) + 104) == -1)
  {
    v129 = "atomic instruction without memory";
    v130 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(v128, (uint64_t)&v129, a6, a7);
    v92 = v128[0];
LABEL_52:
    *(_QWORD *)a1 = v92;
    a1[8] = 1;
    return;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_78;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 5;
  if (v13 < 5)
    v21 = v13;
  v22 = v21 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v23 = v20 + v11;
  v24 = v11 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_78;
    LOBYTE(v26) = v24 + v17;
    *(_QWORD *)a2 = v24 + v17;
    v18 += 7;
    if (v13 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_78:
    v117 = "can't get store alignment";
    v118 = (unint64_t *)a2;
    v119 = 26;
LABEL_81:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v117, v118, v119, &v129, a7);
    goto LABEL_51;
  }
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v93 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v93, &v129, v94);
    *(_QWORD *)a1 = v129;
    a1[8] = 1;
    return;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v12 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_80;
  v17 = 0;
  v30 = 0;
  LODWORD(v7) = 0;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = 5;
  if (v29 < 5)
    v32 = v29;
  v33 = v32 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v34 = v31 + v28;
  v35 = v28 + 2;
  while (1)
  {
    v26 = *(char *)(v34 + v17);
    v7 = ((v26 & 0x7F) << v30) | v7;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v33 == v17)
      goto LABEL_80;
    LOBYTE(v26) = v35 + v17;
    *(_QWORD *)a2 = v35 + v17;
    v30 += 7;
    if (v29 == ++v17)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v17 == 4 && v26 >= 0x10u)
  {
LABEL_80:
    v117 = "can't get store offset";
    v118 = (unint64_t *)a2;
    v119 = 23;
    goto LABEL_81;
  }
  v36 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v36)
  {
    v95 = "store value";
    v96 = (unint64_t *)a2;
    v97 = 12;
LABEL_50:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v96, 26, v95, v97, &v129, a7);
LABEL_51:
    v92 = (void (**)(WTF::StringPrintStream *__hidden))v129;
    goto LABEL_52;
  }
  v123 = a5;
  v37 = *(_QWORD *)(a2 + 56) + 32 * v36;
  v39 = *(_QWORD *)(v37 - 32);
  v38 = *(_QWORD *)(v37 - 24);
  v121 = *(void (***)(WTF::StringPrintStream *__hidden))(v37 - 8);
  v122 = *(_QWORD *)(v37 - 16);
  *(_DWORD *)(a2 + 68) = v36 - 1;
  v129 = "WasmFunctionParser.h:";
  LODWORD(v130) = 21;
  LODWORD(v128[0]) = 638;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v129, (unsigned int *)v128, (int **)&v125);
  v47 = v125;
  if (!v125)
  {
    __break(0xC471u);
    JUMPOUT(0x198F660D4);
  }
  v125 = 0;
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
    WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
  }
  else
  {
    *(_DWORD *)v47 -= 2;
  }
  v48 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v48)
  {
    v95 = "store pointer";
    v96 = (unint64_t *)a2;
    v97 = 14;
    goto LABEL_50;
  }
  v120 = a1;
  v49 = *(_QWORD *)(a2 + 56) + 32 * v48;
  v50 = *(unsigned __int8 *)(v49 - 32);
  v52 = *(_QWORD *)(v49 - 16);
  v51 = *(_QWORD *)(v49 - 8);
  *(_DWORD *)(a2 + 68) = v48 - 1;
  v129 = "WasmFunctionParser.h:";
  LODWORD(v130) = 21;
  LODWORD(v128[0]) = 639;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v129, (unsigned int *)v128, (int **)&v124);
  v60 = v124;
  if (!v124)
    goto LABEL_85;
  v124 = 0;
  if (*(_DWORD *)v60 == 2)
  {
    WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
    WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
  }
  else
  {
    *(_DWORD *)v60 -= 2;
  }
  if (v50 != 255)
  {
    v98 = a2 + 20624;
    v99 = " pointer type mismatch";
    v100 = 23;
LABEL_76:
    v129 = v99;
    v130 = v100;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<JSC::Wasm::OpType,WTF::ASCIILiteral>(v128, v98, (uint64_t)&v129);
    *(void (***)(WTF::StringPrintStream *__hidden))v120 = v128[0];
    v120[8] = 1;
    return;
  }
  if (a4 != v39)
  {
LABEL_75:
    v98 = a2 + 20624;
    v99 = " value type mismatch";
    v100 = 21;
    goto LABEL_76;
  }
  if (a4 - 239 < 2 || a4 == 227)
  {
    if (v123 == v38)
      v61 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v61 = 0;
    if ((v61 & 1) == 0)
      goto LABEL_75;
  }
  else
  {
    if (v123 == v38)
      v116 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v116 = 1;
    if (v116 == 1)
      goto LABEL_75;
  }
  v62 = *(int8x16_t **)(a2 + 48);
  v129 = (const char *)v52;
  v130 = v51;
  v128[0] = (void (**)(WTF::StringPrintStream *__hidden))v122;
  v128[1] = v121;
  v127 = v7;
  v126 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v62, v122, (uint64_t)v121, v55, v56, v57, v58, v59);
  v63 = JSC::Wasm::memoryLog2Alignment();
  if (v63 >= 5u)
  {
LABEL_85:
    __break(0xC471u);
    JUMPOUT(0x198F660ACLL);
  }
  if (__CFADD__((_DWORD)v7, dword_19919F66C[(char)v63]))
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException((uint64_t)v62, 0, v64, v65, v66, v67, v68, v69);
    v106 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v62, v52, v51, v101, v102, v103, v104, v105);
    if (v51 == 2)
    {
      v112 = ((v62[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * v52 + 16;
      if (v62[80].i32[0] < v112)
        v62[80].i32[0] = v112;
      if ((v106 & 7) != 1 || ((-8 * v112) ^ v106) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)v62, v52, v51, v106);
    }
    v113 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v62, v122, (uint64_t)v121, v107, v108, v109, v110, v111);
    v75 = v120;
    if (v121 == 2)
    {
      v114 = ((v62[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * v122 + 16;
      if (v62[80].i32[0] < v114)
        v62[80].i32[0] = v114;
      if ((v113 & 7) != 1 || ((-8 * v114) ^ v113) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)v62, v122, (uint64_t)v121, v113);
    }
  }
  else
  {
    v70 = JSC::Wasm::memoryLog2Alignment();
    if (v70 >= 5u)
    {
      __break(0xC471u);
      JUMPOUT(0x198F660CCLL);
    }
    v74 = JSC::Wasm::BBQJITImpl::BBQJIT::emitCheckAndPreparePointer(v62, (JSC::ARM64LogicalImmediate *)v52, v51, v7, dword_19919F66C[(char)v70], v71, v72, v73);
    JSC::Wasm::BBQJITImpl::BBQJIT::emitAtomicStoreOp((uint64_t)v62, a3, a4, v123, v74, v122, (unint64_t)v121, v7);
    v75 = v120;
  }
  if (HIBYTE(word_1ECF4C700))
  {
    String = JSC::Wasm::makeString();
    WTF::dataLog<char [16]>("BBQ\t");
    if (v62->i32[0])
    {
      v115 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v115;
      }
      while (v115 < v62->i32[0]);
    }
    WTF::dataLog<char const*,char [2]>(&String, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)v62, 1, (uint64_t *)&v129, &v127, (uint64_t)v128, &v126);
  }
  *v75 = 0;
  v75[8] = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::atomicBinaryRMW(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  char v62;
  int8x16_t *v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (**v103)(WTF::StringPrintStream *__hidden);
  char v104;
  float v105;
  char *v106;
  unint64_t *v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int32 v122;
  int v123;
  __int32 v124;
  const char *String;
  unsigned __int32 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v133;
  char *v134;
  unint64_t *v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  void (**v139)(WTF::StringPrintStream *__hidden);
  __int128 v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  __int128 v144;
  __int128 v145;
  int v146;
  int v147;
  void (**v148[2])(WTF::StringPrintStream *__hidden);
  const char *v149;
  uint64_t v150;
  const char *v151;
  int v152[3];

  *(_QWORD *)&v144 = a4;
  *((_QWORD *)&v144 + 1) = a5;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 20592) + 104) == -1)
  {
    v149 = "atomic instruction without memory";
    v150 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(v148, (uint64_t)&v149, a6, a7);
    v103 = v148[0];
LABEL_54:
    *(_QWORD *)a1 = v103;
    a1[8] = 1;
    return;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_89;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = 5;
  if (v13 < 5)
    v20 = v13;
  v21 = v20 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v22 = v19 + v11;
  v23 = v11 + 2;
  while (1)
  {
    v24 = *(char *)(v22 + v16);
    v18 |= (v24 & 0x7F) << v17;
    if ((v24 & 0x80000000) == 0)
      break;
    if (v21 == v16)
      goto LABEL_89;
    LOBYTE(v25) = v23 + v16;
    *(_QWORD *)a2 = v23 + v16;
    v17 += 7;
    if (v13 == ++v16)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v16 == 4 && *(unsigned __int8 *)(v22 + v16) >= 0x10u)
  {
LABEL_89:
    v134 = "can't get load alignment";
    v135 = (unint64_t *)a2;
    v136 = 25;
LABEL_92:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v134, v135, v136, &v149, a7);
    goto LABEL_53;
  }
  if (v18 != JSC::Wasm::memoryLog2Alignment())
  {
    v104 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v18, " does not match against atomic op's natural alignment ", 55, 1 << v104, &v149, v105);
    *(_QWORD *)a1 = v149;
    a1[8] = 1;
    return;
  }
  v26 = *(_QWORD *)(a2 + 16);
  v27 = *(_QWORD *)a2;
  v12 = v26 > *(_QWORD *)a2;
  v28 = v26 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_91;
  v16 = 0;
  v29 = 0;
  LODWORD(v7) = 0;
  v30 = *(_QWORD *)(a2 + 8);
  v31 = 5;
  if (v28 < 5)
    v31 = v28;
  v32 = v31 - 1;
  *(_QWORD *)a2 = v27 + 1;
  v33 = v30 + v27;
  v34 = v27 + 2;
  while (1)
  {
    v25 = *(char *)(v33 + v16);
    v7 = ((v25 & 0x7F) << v29) | v7;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v32 == v16)
      goto LABEL_91;
    LOBYTE(v25) = v34 + v16;
    *(_QWORD *)a2 = v34 + v16;
    v29 += 7;
    if (v28 == ++v16)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v16 == 4 && v25 >= 0x10u)
  {
LABEL_91:
    v134 = "can't get load offset";
    v135 = (unint64_t *)a2;
    v136 = 22;
    goto LABEL_92;
  }
  v35 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v35)
  {
    v106 = "value";
    v107 = (unint64_t *)a2;
    v108 = 6;
LABEL_52:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v107, 26, v106, v108, &v149, a7);
LABEL_53:
    v103 = (void (**)(WTF::StringPrintStream *__hidden))v149;
    goto LABEL_54;
  }
  v138 = a5;
  v36 = *(_QWORD *)(a2 + 56) + 32 * v35;
  v37 = *(_QWORD *)(v36 - 32);
  v38 = *(_QWORD *)(v36 - 24);
  v39 = *(_QWORD *)(v36 - 16);
  v139 = *(void (***)(WTF::StringPrintStream *__hidden))(v36 - 8);
  *(_DWORD *)(a2 + 68) = v35 - 1;
  v149 = "WasmFunctionParser.h:";
  LODWORD(v150) = 21;
  LODWORD(v148[0]) = 660;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v149, (unsigned int *)v148, (int **)&v143);
  v47 = v143;
  if (!v143)
  {
    __break(0xC471u);
    JUMPOUT(0x198F66854);
  }
  v143 = 0;
  if (*(_DWORD *)v47 == 2)
  {
    WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
    WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
  }
  else
  {
    *(_DWORD *)v47 -= 2;
  }
  v48 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v48)
  {
    v106 = "pointer";
    v107 = (unint64_t *)a2;
    v108 = 8;
    goto LABEL_52;
  }
  v137 = a1;
  v49 = *(_QWORD *)(a2 + 56) + 32 * v48;
  v50 = *(unsigned __int8 *)(v49 - 32);
  v51 = *(_QWORD *)(v49 - 16);
  v52 = *(_QWORD *)(v49 - 8);
  *(_DWORD *)(a2 + 68) = v48 - 1;
  v149 = "WasmFunctionParser.h:";
  LODWORD(v150) = 21;
  LODWORD(v148[0]) = 661;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v149, (unsigned int *)v148, (int **)&v142);
  v60 = v142;
  if (!v142)
    goto LABEL_96;
  v142 = 0;
  v61 = v138;
  if (*(_DWORD *)v60 == 2)
  {
    WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
    WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
  }
  else
  {
    *(_DWORD *)v60 -= 2;
  }
  if (v50 != 255)
  {
    LODWORD(v145) = a3;
    v109 = " pointer type mismatch";
    v110 = 23;
LABEL_87:
    v149 = v109;
    v150 = v110;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(v148, &v145, (uint64_t)&v149);
    *(void (***)(WTF::StringPrintStream *__hidden))v137 = v148[0];
    v137[8] = 1;
    return;
  }
  if (a4 != v37)
  {
LABEL_86:
    LODWORD(v145) = a3;
    v109 = " value type mismatch";
    v110 = 21;
    goto LABEL_87;
  }
  if (a4 - 239 < 2 || a4 == 227)
  {
    if (v138 == v38)
      v62 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v62 = 0;
    if ((v62 & 1) == 0)
      goto LABEL_86;
  }
  else
  {
    if (v138 == v38)
      v133 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v133 = 1;
    if (v133 == 1)
      goto LABEL_86;
  }
  v63 = *(int8x16_t **)(a2 + 48);
  v149 = (const char *)v51;
  v150 = v52;
  v148[0] = (void (**)(WTF::StringPrintStream *__hidden))v39;
  v148[1] = v139;
  v147 = v7;
  v146 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v63, v39, (uint64_t)v139, v55, v56, v57, v58, v59);
  v64 = JSC::Wasm::memoryLog2Alignment();
  if (v64 >= 5u)
  {
LABEL_96:
    __break(0xC471u);
    JUMPOUT(0x198F6682CLL);
  }
  if (__CFADD__((_DWORD)v7, dword_19919F66C[(char)v64]))
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException((uint64_t)v63, 0, v65, v66, v67, v68, v69, v70);
    v116 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v63, v51, v52, v111, v112, v113, v114, v115);
    if (v52 == 2)
    {
      v122 = ((v63[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * v51 + 16;
      if (v63[80].i32[0] < v122)
        v63[80].i32[0] = v122;
      if ((v116 & 7) != 1 || ((-8 * v122) ^ v116) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)v63, v51, v52, v116);
    }
    v123 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v63, v39, (uint64_t)v139, v117, v118, v119, v120, v121);
    v83 = v137;
    if (v139 == 2)
    {
      v124 = ((v63[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * v39 + 16;
      if (v63[80].i32[0] < v124)
        v63[80].i32[0] = v124;
      if ((v123 & 7) != 1 || ((-8 * v124) ^ v123) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)v63, v39, (uint64_t)v139, v123);
    }
    v82 = 0;
    if (a4 == 254)
      v76 = -511;
    else
      v76 = -255;
  }
  else
  {
    v71 = JSC::Wasm::memoryLog2Alignment();
    if (v71 >= 5u)
    {
      __break(0xC471u);
      JUMPOUT(0x198F6684CLL);
    }
    v75 = JSC::Wasm::BBQJITImpl::BBQJIT::emitCheckAndPreparePointer(v63, (JSC::ARM64LogicalImmediate *)v51, v52, v7, dword_19919F66C[(char)v71], v72, v73, v74);
    v82 = JSC::Wasm::BBQJITImpl::BBQJIT::emitAtomicBinaryRMWOp((uint64_t)v63, a3, a4, v138, v75, v39, (unint64_t)v139, v7);
    v83 = v137;
  }
  *(_QWORD *)&v141 = v82;
  WORD4(v141) = v76;
  if (HIBYTE(word_1ECF4C700))
  {
    String = JSC::Wasm::makeString();
    v145 = v141;
    v151 = String;
    WTF::dataLog<char [16]>("BBQ\t");
    if (v63->i32[0])
    {
      v126 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v126;
      }
      while (v126 < v63->i32[0]);
    }
    WTF::dataLog<char const*,char [2]>(&v151, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v149);
    if (v150 != 1 && v150 != 4)
    {
      v152[0] = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v63, (uint64_t)v149, v150, v127, v128, v129, v130, v131);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", v152);
    }
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<unsigned int>(&v147);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)v63, 0, (uint64_t)v148, &v146, (uint64_t *)&v145);
    v61 = v138;
  }
  v84 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v84 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a2 + 56, &v144, &v141, v77, v78, v79, v80, v81);
  }
  else
  {
    v85 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 32 * v84);
    v86 = *((_QWORD *)&v141 + 1);
    *v85 = a4;
    v85[1] = v61;
    v85[2] = v82;
    v85[3] = v86;
    ++*(_DWORD *)(a2 + 68);
  }
  *v83 = 0;
  v83[8] = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::atomicWait(uint64_t a1, uint64_t a2, int a3, unsigned __int8 a4, uint64_t a5, double a6, float a7)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  char v79;
  unint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  const JSC::Wasm::Type *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned int v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t *v97;
  unsigned __int8 *v98;
  uint64_t v100;
  const JSC::Wasm::Type *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned __int8 *v108;
  unsigned int v109;
  _QWORD *v110;
  unint64_t v111;
  uint64_t *v112;
  unsigned __int8 *v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  unsigned int v122;
  int v123;
  unint64_t v124;
  unsigned __int8 **v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _DWORD *v145;
  unsigned int v146;
  uint64_t v147;
  _DWORD **v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF *v156;
  WTF *v157;
  unsigned int v158;
  BOOL v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  int v167;
  unint64_t v168;
  unsigned __int8 **v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _DWORD *v189;
  unsigned int v190;
  uint64_t v191;
  _DWORD **v192;
  WTF *v193;
  WTF *v194;
  unsigned int v195;
  unint64_t v196;
  WTF *v198;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int16 v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  unint64_t v216;
  _DWORD *v217;
  _QWORD *v218;
  _DWORD *v219;
  WTF *v220;
  uint64_t v221;
  _OWORD *v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  WTF *v249;
  char v250;
  float v251;
  char *v252;
  uint64_t v253;
  const char *v254;
  uint64_t v255;
  const char *String;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  char *v283;
  unint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  unsigned __int8 v291;
  int v292[2];
  __int128 v293;
  WTF::StringImpl *v294;
  WTF::StringImpl *v295;
  WTF::StringImpl *v296;
  WTF *v297;
  uint64_t v298;
  __int128 v299;
  uint64_t v300;
  __int16 v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  __int16 v305;
  uint64_t v306;
  __int16 v307;
  int v308;
  uint64_t v309[2];
  uint64_t v310[2];
  uint64_t v311;
  uint64_t v312;
  int v313[8];
  WTF *v314;
  int v315;
  WTF *v316;
  int v317;
  _BYTE v318[24];
  uint64_t v319;
  WTF *v320[2];
  uint64_t v321;
  WTF **v322;
  __int128 *v323;
  char v324;
  __int128 v325;
  _QWORD v326[34];

  v326[32] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(*(_QWORD *)(a2 + 20592) + 104) == -1)
  {
    v320[0] = (WTF *)"atomic instruction without memory";
    v320[1] = (WTF *)34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v325, (uint64_t)v320, a6, a7);
    v249 = (WTF *)v325;
LABEL_177:
    *(_QWORD *)a1 = v249;
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_214;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)(a2 + 8);
  v21 = 5;
  if (v13 < 5)
    v21 = v13;
  v22 = v21 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v23 = v20 + v11;
  v24 = v11 + 2;
  while (1)
  {
    v25 = *(char *)(v23 + v17);
    v19 |= (v25 & 0x7F) << v18;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v22 == v17)
      goto LABEL_214;
    LOBYTE(v26) = v24 + v17;
    *(_QWORD *)a2 = v24 + v17;
    v18 += 7;
    if (v13 == ++v17)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v17 == 4 && *(unsigned __int8 *)(v23 + v17) >= 0x10u)
  {
LABEL_214:
    v283 = "can't get load alignment";
    v284 = (unint64_t *)a2;
    v285 = 25;
LABEL_217:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v283, v284, v285, v320, a7);
    goto LABEL_176;
  }
  if (v19 != JSC::Wasm::memoryLog2Alignment())
  {
    v250 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v19, " does not match against atomic op's natural alignment ", 55, 1 << v250, v320, v251);
    *(WTF **)a1 = v320[0];
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_QWORD *)a2;
  v12 = v27 > *(_QWORD *)a2;
  v29 = v27 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_216;
  v17 = 0;
  v30 = 0;
  LODWORD(v7) = 0;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = 5;
  if (v29 < 5)
    v32 = v29;
  v33 = v32 - 1;
  *(_QWORD *)a2 = v28 + 1;
  v34 = v31 + v28;
  v35 = v28 + 2;
  while (1)
  {
    v26 = *(char *)(v34 + v17);
    v7 = ((v26 & 0x7F) << v30) | v7;
    if ((v26 & 0x80000000) == 0)
      break;
    if (v33 == v17)
      goto LABEL_216;
    LOBYTE(v26) = v35 + v17;
    *(_QWORD *)a2 = v35 + v17;
    v30 += 7;
    if (v29 == ++v17)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v17 == 4 && v26 >= 0x10u)
  {
LABEL_216:
    v283 = "can't get load offset";
    v284 = (unint64_t *)a2;
    v285 = 22;
    goto LABEL_217;
  }
  v36 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v36)
  {
    v252 = "timeout";
    v64 = (unint64_t *)a2;
LABEL_174:
    v253 = 8;
    goto LABEL_175;
  }
  v291 = a4;
  v37 = *(_QWORD *)(a2 + 56) + 32 * v36;
  v38 = *(unsigned __int8 *)(v37 - 32);
  v39 = *(_QWORD *)(v37 - 16);
  v40 = *(_QWORD *)(v37 - 8);
  *(_DWORD *)(a2 + 68) = v36 - 1;
  v320[0] = (WTF *)"WasmFunctionParser.h:";
  LODWORD(v320[1]) = 21;
  LODWORD(v325) = 712;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)v320, (unsigned int *)&v325, (int **)&v296);
  v48 = v296;
  if (!v296)
  {
    __break(0xC471u);
    JUMPOUT(0x198F678D4);
  }
  v296 = 0;
  if (*(_DWORD *)v48 == 2)
  {
    WTF::StringImpl::~StringImpl(v48, v41, v42, v43, v44, v45, v46, v47);
    WTF::fastFree(v223, v224, v225, v226, v227, v228, v229, v230);
  }
  else
  {
    *(_DWORD *)v48 -= 2;
  }
  v49 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v49)
  {
    v252 = "value";
    v64 = (unint64_t *)a2;
    v253 = 6;
LABEL_175:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v64, 26, v252, v253, v320, a7);
LABEL_176:
    v249 = v320[0];
    goto LABEL_177;
  }
  v287 = v39;
  v288 = v38;
  v286 = v40;
  v50 = *(_QWORD *)(a2 + 56) + 32 * v49;
  v51 = a2;
  v53 = *(_QWORD *)(v50 - 32);
  v52 = *(_QWORD *)(v50 - 24);
  v54 = *(_QWORD *)(v50 - 16);
  v55 = *(_QWORD *)(v50 - 8);
  *(_QWORD *)v292 = v51;
  *(_DWORD *)(v51 + 68) = v49 - 1;
  v320[0] = (WTF *)"WasmFunctionParser.h:";
  LODWORD(v320[1]) = 21;
  LODWORD(v325) = 713;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)v320, (unsigned int *)&v325, (int **)&v295);
  v63 = v295;
  if (!v295)
  {
    __break(0xC471u);
    JUMPOUT(0x198F678DCLL);
  }
  v295 = 0;
  if (*(_DWORD *)v63 == 2)
  {
    WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
    WTF::fastFree(v231, v232, v233, v234, v235, v236, v237, v238);
  }
  else
  {
    *(_DWORD *)v63 -= 2;
  }
  v64 = *(unint64_t **)v292;
  v65 = *(unsigned int *)(*(_QWORD *)v292 + 68);
  if (!(_DWORD)v65)
  {
    v252 = "pointer";
    goto LABEL_174;
  }
  v66 = a5;
  v290 = a3;
  v289 = a1;
  v67 = *(_QWORD *)(*(_QWORD *)v292 + 56) + 32 * v65;
  v68 = *(unsigned __int8 *)(v67 - 32);
  v69 = *(_QWORD *)(v67 - 16);
  v70 = *(_QWORD *)(v67 - 8);
  *(_DWORD *)(*(_QWORD *)v292 + 68) = v65 - 1;
  v320[0] = (WTF *)"WasmFunctionParser.h:";
  LODWORD(v320[1]) = 21;
  LODWORD(v325) = 714;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)v320, (unsigned int *)&v325, (int **)&v294);
  v78 = v294;
  if (!v294)
  {
    __break(0xC471u);
    JUMPOUT(0x198F678E4);
  }
  v294 = 0;
  if (*(_DWORD *)v78 == 2)
  {
    WTF::StringImpl::~StringImpl(v78, v71, v72, v73, v74, v75, v76, v77);
    WTF::fastFree(v239, v240, v241, v242, v243, v244, v245, v246);
  }
  else
  {
    *(_DWORD *)v78 -= 2;
  }
  if (v68 != 255)
  {
    LODWORD(v297) = v290;
    v254 = " pointer type mismatch";
LABEL_180:
    v255 = 23;
LABEL_212:
    v320[0] = (WTF *)v254;
    v320[1] = (WTF *)v255;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))&v325, &v297, (uint64_t)v320);
    *(_QWORD *)v289 = v325;
    *(_BYTE *)(v289 + 8) = 1;
    return;
  }
  if (v291 != v53)
  {
LABEL_211:
    LODWORD(v297) = v290;
    v254 = " value type mismatch";
    v255 = 21;
    goto LABEL_212;
  }
  if (v291 - 239 < 2 || v291 == 227)
  {
    if (v66 == v52)
      v79 = ((v291 + 29) < 0xEu) & (0x3001u >> (v291 + 29));
    else
      v79 = 0;
    if ((v79 & 1) == 0)
      goto LABEL_211;
  }
  else
  {
    if (v66 == v52)
      v282 = ((v291 + 29) < 0xEu) & (0x3001u >> (v291 + 29));
    else
      v282 = 1;
    if (v282 == 1)
      goto LABEL_211;
  }
  if (v288 != 254)
  {
    LODWORD(v297) = v290;
    v254 = " timeout type mismatch";
    goto LABEL_180;
  }
  BYTE8(v293) = 0;
  v80 = *(unint64_t **)v292;
  v81 = *(_QWORD *)(*(_QWORD *)v292 + 48);
  v311 = v69;
  v312 = v70;
  v310[0] = v54;
  v310[1] = v55;
  v309[0] = v287;
  v309[1] = v286;
  v308 = v7;
  v300 = v69;
  v301 = v70;
  v305 = v55;
  v307 = v286;
  v306 = v287;
  v297 = (WTF *)&v299;
  v299 = xmmword_19919F700;
  v302 = v7;
  v303 = 65281;
  v304 = v54;
  v298 = 0x500000008;
  v82 = *(_QWORD *)(v81 + 88);
  v83 = *(_DWORD *)(v82 + 596);
  if (!v83)
  {
    __break(0xC471u);
    JUMPOUT(0x198F678ECLL);
  }
  v84 = *(_QWORD *)(v82 + 584) + 1232 * v83;
  LODWORD(v82) = *(_DWORD *)(v82 + 68) + *(_DWORD *)(v84 - 32);
  if (*(_DWORD *)(v84 - 160) == 5)
    v82 = (v82 + 1);
  else
    v82 = v82;
  *(_QWORD *)&v293 = v82;
  WORD4(v293) = -254;
  if (v290 != 1)
  {
    LOBYTE(v325) = -1;
    *((_QWORD *)&v325 + 1) = 0;
    WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v320, &v325, 1uLL);
    *(_QWORD *)&v325 = v326;
    *((_QWORD *)&v325 + 1) = 16;
    v105 = HIDWORD(v298);
    if (HIDWORD(v298) >= 0x11)
    {
      if (HIDWORD(v298) >> 28)
        goto LABEL_233;
      v248 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v298)));
      DWORD2(v325) = v105;
      *(_QWORD *)&v325 = v248;
      v105 = HIDWORD(v298);
      if (!HIDWORD(v298))
      {
LABEL_60:
        v111 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
        if (v111 != -1)
        {
          *(_QWORD *)v313 = &v324;
          v322 = (WTF **)v313;
          std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v322, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
        }
        v112 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
        v113 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
        if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
        {
          __clrex();
        }
        else if (!__stxr(1u, v113))
        {
          goto LABEL_98;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v113);
LABEL_98:
        v322 = v320;
        v323 = &v325;
        WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v112, (uint64_t **)&v322, (uint64_t)&v322, v100, v101, v102, v103, v104, (uint64_t)v313);
        v121 = **(unsigned int ***)v313;
        if (**(_QWORD **)v313)
        {
          do
            v166 = __ldaxr(v121);
          while (__stlxr(v166 + 1, v121));
        }
        v167 = __ldxr(v113);
        if (v167 == 1)
        {
          if (!__stlxr(0, v113))
          {
LABEL_105:
            v168 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
            if (v168 != -1)
            {
              *(_QWORD *)v313 = &v324;
              v322 = (WTF **)v313;
              std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v322, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
            }
            if (v121[8])
              v169 = 0;
            else
              v169 = (unsigned __int8 **)(v121 + 2);
            JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v169, 0, (char *)v313);
            if ((unint64_t)(v319 + 15) >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x198F67904);
            }
            v175 = (v319 + 15) & 0xFFFFFFF0;
            if (*(_DWORD *)(v81 + 1284) > v175)
              v175 = *(_DWORD *)(v81 + 1284);
            *(_DWORD *)(v81 + 1284) = v175;
            v176 = *(unsigned int *)(v81 + 1300);
            if ((_DWORD)v176 == -1)
            {
              __break(0xC471u);
              JUMPOUT(0x198F6790CLL);
            }
            *(_DWORD *)(v81 + 1300) = v176 + 1;
            if (!*(_BYTE *)(v81 + 73) || *(_BYTE *)(v81 + 72))
            {
              v273 = *(_QWORD *)(v81 + 8);
              if (!*(_BYTE *)(v273 + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x198F678ACLL);
              }
              JSC::MacroAssemblerARM64::moveToCachedReg(*(unsigned int **)(v81 + 8), (JSC::ARM64LogicalImmediate *)(v176 + 1), v273 + 264, v170, v171, v172, v173, v174);
              v281 = *(_DWORD *)(v273 + 200);
              if (v281 + 4 > *(_DWORD *)(v273 + 192))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v273 + 56), v274, v275, v276, v277, v278, v279, v280);
                v281 = *(_DWORD *)(v273 + 200);
              }
              *(_DWORD *)(*(_QWORD *)(v273 + 56) + v281) = -1207811152;
              *(_DWORD *)(v273 + 200) += 4;
              JSC::Wasm::BBQJITImpl::BBQJIT::flushRegistersForException(v81, v274, v275, v276, v277, v278, v279, v280);
              v80 = *(unint64_t **)v292;
            }
            JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(v81, (uint64_t)&v297, (uint64_t)v313, (uint64_t)v121, v171, v172, v173, v174);
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(v81 + 8), (uint64_t)operationMemoryAtomicWait64, 8, v177, v178, v179, v180, v181);
            v189 = *(_DWORD **)(v81 + 8);
            v189[52] = 0;
            v190 = v189[50];
            if (v190 + 4 > v189[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v189 + 14), v182, v183, v184, v185, v186, v187, v188);
              v190 = v189[50];
            }
            v191 = 0;
            *(_DWORD *)(*((_QWORD *)v189 + 7) + v190) = -700514048;
            v189[50] += 4;
            if (BYTE9(v293) - 192 > 0x3F)
              goto LABEL_123;
            if (((1 << (BYTE9(v293) + 64)) & 0xC00FFC19C001C000) != 0)
            {
              if (!*(_DWORD *)(v81 + 340))
              {
                __break(0xC471u);
                JUMPOUT(0x198F6791CLL);
              }
              v192 = (_DWORD **)(v81 + 328);
              v191 = 2;
            }
            else
            {
              if (((1 << (BYTE9(v293) + 64)) & 0x3800000000000000) == 0)
              {
                if (BYTE9(v293) == 192)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198F67478);
                }
                goto LABEL_123;
              }
              if (!*(_DWORD *)(v81 + 484))
              {
                __break(0xC471u);
                JUMPOUT(0x198F6792CLL);
              }
              v192 = (_DWORD **)(v81 + 472);
              v191 = 3;
            }
            if ((**v192 & 0x700) == 0x300)
            {
              __break(0xC471u);
              JUMPOUT(0x198F676D0);
            }
LABEL_123:
            JSC::Wasm::BBQJITImpl::BBQJIT::bind(v81, v293, *((uint64_t *)&v293 + 1), v191, v185, v186, v187, v188);
            v193 = v316;
            if (v318 != (_BYTE *)v316 && v316)
            {
              v316 = 0;
              v317 = 0;
              WTF::fastFree((unint64_t)v193, v149, v150, v151, v152, v153, v154, v155);
            }
            v194 = v314;
            if (v314)
            {
              v314 = 0;
              v315 = 0;
              WTF::fastFree((unint64_t)v194, v149, v150, v151, v152, v153, v154, v155);
            }
            do
            {
              v195 = __ldaxr(v121);
              v159 = --v195 == 0;
            }
            while (__stlxr(v195, v121));
            goto LABEL_127;
          }
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v113, 0, v160, v161, v162, v163, v164, v165);
        goto LABEL_105;
      }
    }
    else if (!HIDWORD(v298))
    {
      goto LABEL_60;
    }
    v106 = HIDWORD(v325);
    v107 = 16 * v105;
    v108 = (unsigned __int8 *)v297 + 9;
    do
    {
      v109 = *v108;
      v108 += 16;
      v110 = (_QWORD *)(v325 + 16 * v106);
      *v110 = v109;
      v110[1] = 0;
      v106 = ++HIDWORD(v325);
      v107 -= 16;
    }
    while (v107);
    goto LABEL_60;
  }
  LOBYTE(v325) = -1;
  *((_QWORD *)&v325 + 1) = 0;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v320, &v325, 1uLL);
  *(_QWORD *)&v325 = v326;
  *((_QWORD *)&v325 + 1) = 16;
  v90 = HIDWORD(v298);
  if (HIDWORD(v298) < 0x11)
  {
    if (!HIDWORD(v298))
      goto LABEL_52;
    goto LABEL_50;
  }
  if (HIDWORD(v298) >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x198F67934);
  }
  v247 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v298)));
  DWORD2(v325) = v90;
  *(_QWORD *)&v325 = v247;
  v90 = HIDWORD(v298);
  if (HIDWORD(v298))
  {
LABEL_50:
    v91 = HIDWORD(v325);
    v92 = 16 * v90;
    v93 = (unsigned __int8 *)v297 + 9;
    do
    {
      v94 = *v93;
      v93 += 16;
      v95 = (_QWORD *)(v325 + 16 * v91);
      *v95 = v94;
      v95[1] = 0;
      v91 = ++HIDWORD(v325);
      v92 -= 16;
    }
    while (v92);
  }
LABEL_52:
  v96 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v96 != -1)
  {
    *(_QWORD *)v313 = &v324;
    v322 = (WTF **)v313;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v322, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v97 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v98 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v98))
  {
    goto LABEL_66;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v98);
LABEL_66:
  v322 = v320;
  v323 = &v325;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v97, (uint64_t **)&v322, (uint64_t)&v322, v85, v86, v87, v88, v89, (uint64_t)v313);
  v121 = **(unsigned int ***)v313;
  if (**(_QWORD **)v313)
  {
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 + 1, v121));
  }
  v123 = __ldxr(v98);
  if (v123 != 1)
  {
    __clrex();
    goto LABEL_72;
  }
  if (__stlxr(0, v98))
LABEL_72:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v98, 0, v115, v116, v117, v118, v119, v120);
  v124 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v124 != -1)
  {
    *(_QWORD *)v313 = &v324;
    v322 = (WTF **)v313;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v322, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (v121[8])
    v125 = 0;
  else
    v125 = (unsigned __int8 **)(v121 + 2);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v125, 0, (char *)v313);
  if ((unint64_t)(v319 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F678F4);
  }
  v131 = (v319 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(v81 + 1284) > v131)
    v131 = *(_DWORD *)(v81 + 1284);
  *(_DWORD *)(v81 + 1284) = v131;
  v132 = *(unsigned int *)(v81 + 1300);
  if ((_DWORD)v132 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x198F678FCLL);
  }
  *(_DWORD *)(v81 + 1300) = v132 + 1;
  if (!*(_BYTE *)(v81 + 73) || *(_BYTE *)(v81 + 72))
  {
    v264 = *(_QWORD *)(v81 + 8);
    if (!*(_BYTE *)(v264 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198F6788CLL);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(*(unsigned int **)(v81 + 8), (JSC::ARM64LogicalImmediate *)(v132 + 1), v264 + 264, v126, v127, v128, v129, v130);
    v272 = *(_DWORD *)(v264 + 200);
    if (v272 + 4 > *(_DWORD *)(v264 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v264 + 56), v265, v266, v267, v268, v269, v270, v271);
      v272 = *(_DWORD *)(v264 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v264 + 56) + v272) = -1207811152;
    *(_DWORD *)(v264 + 200) += 4;
    JSC::Wasm::BBQJITImpl::BBQJIT::flushRegistersForException(v81, v265, v266, v267, v268, v269, v270, v271);
    v80 = *(unint64_t **)v292;
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(v81, (uint64_t)&v297, (uint64_t)v313, (uint64_t)v121, v127, v128, v129, v130);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(v81 + 8), (uint64_t)operationMemoryAtomicWait32, 8, v133, v134, v135, v136, v137);
  v145 = *(_DWORD **)(v81 + 8);
  v145[52] = 0;
  v146 = v145[50];
  if (v146 + 4 > v145[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v145 + 14), v138, v139, v140, v141, v142, v143, v144);
    v146 = v145[50];
  }
  v147 = 0;
  *(_DWORD *)(*((_QWORD *)v145 + 7) + v146) = -700514048;
  v145[50] += 4;
  if (BYTE9(v293) - 192 > 0x3F)
    goto LABEL_91;
  if (((1 << (BYTE9(v293) + 64)) & 0xC00FFC19C001C000) != 0)
  {
    if (!*(_DWORD *)(v81 + 340))
    {
      __break(0xC471u);
      JUMPOUT(0x198F67914);
    }
    v148 = (_DWORD **)(v81 + 328);
    v147 = 2;
LABEL_90:
    if ((**v148 & 0x700) == 0x300)
    {
      __break(0xC471u);
      JUMPOUT(0x198F676B0);
    }
    goto LABEL_91;
  }
  if (((1 << (BYTE9(v293) + 64)) & 0x3800000000000000) != 0)
  {
    if (!*(_DWORD *)(v81 + 484))
    {
      __break(0xC471u);
      JUMPOUT(0x198F67924);
    }
    v148 = (_DWORD **)(v81 + 472);
    v147 = 3;
    goto LABEL_90;
  }
  if (BYTE9(v293) == 192)
  {
LABEL_233:
    __break(0xC471u);
    JUMPOUT(0x198F67454);
  }
LABEL_91:
  JSC::Wasm::BBQJITImpl::BBQJIT::bind(v81, v293, *((uint64_t *)&v293 + 1), v147, v141, v142, v143, v144);
  v156 = v316;
  if (v318 != (_BYTE *)v316 && v316)
  {
    v316 = 0;
    v317 = 0;
    WTF::fastFree((unint64_t)v156, v149, v150, v151, v152, v153, v154, v155);
  }
  v157 = v314;
  if (v314)
  {
    v314 = 0;
    v315 = 0;
    WTF::fastFree((unint64_t)v157, v149, v150, v151, v152, v153, v154, v155);
  }
  do
  {
    v158 = __ldaxr(v121);
    v159 = --v158 == 0;
  }
  while (__stlxr(v158, v121));
LABEL_127:
  if (v159)
  {
    atomic_store(1u, v121);
    WTF::fastFree((unint64_t)v121, v149, v150, v151, v152, v153, v154, v155);
  }
  v196 = v325;
  if (v326 != (_QWORD *)v325 && (_QWORD)v325 != 0)
  {
    *(_QWORD *)&v325 = 0;
    DWORD2(v325) = 0;
    WTF::fastFree(v196, v149, v150, v151, v152, v153, v154, v155);
  }
  v198 = v320[0];
  if (&v321 != (uint64_t *)v320[0] && v320[0] != 0)
  {
    v320[0] = 0;
    LODWORD(v320[1]) = 0;
    WTF::fastFree((unint64_t)v198, v149, v150, v151, v152, v153, v154, v155);
  }
  v200 = v293;
  v205 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(v81, v293, *((unint64_t *)&v293 + 1), 0, v152, v153, v154, v155);
  if (HIBYTE(word_1ECF4C700))
  {
    String = JSC::Wasm::makeString();
    *(_OWORD *)v320 = v293;
    *(_QWORD *)&v325 = String;
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)v81)
    {
      v257 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v257;
      }
      while (v257 < *(_DWORD *)v81);
    }
    WTF::dataLog<char const*,char [2]>((const char **)&v325, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v311);
    if (v312 != 1 && v312 != 4)
    {
      v313[0] = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(v81, v311, v312, v258, v259, v260, v261, v262);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", v313);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(v81, 0, v310, v309, &v308, (uint64_t *)v320);
  }
  JSC::MacroAssemblerARM64::branchTest32(*(_QWORD *)(v81 + 8), 4, (v205 >> 8), (v205 >> 8), v201, v202, v203, v204, (uint64_t)&v325);
  LODWORD(v320[0]) = v325;
  v213 = *(_QWORD *)((char *)&v325 + 4);
  *(WTF **)((char *)v320 + 4) = *(WTF **)((char *)&v325 + 4);
  if ((_DWORD)v325 != -1)
  {
    v214 = (_QWORD *)(v81 + 1360);
    v215 = *(unsigned int *)(v81 + 1372);
    if ((_DWORD)v215 == *(_DWORD *)(v81 + 1368))
    {
      v216 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v214, (void *)(v215 + 1), (unint64_t)v320, v208, v209, v210, v211, v212);
      v217 = (_DWORD *)(*(_QWORD *)(v81 + 1360) + 12 * *(unsigned int *)(v81 + 1372));
      *v217 = *(_DWORD *)v216;
      v218 = v217 + 1;
      v213 = *(_QWORD *)(v216 + 4);
    }
    else
    {
      v219 = (_DWORD *)(*v214 + 12 * v215);
      *v219 = v325;
      v218 = v219 + 1;
    }
    *v218 = v213;
    ++*(_DWORD *)(v81 + 1372);
  }
  v220 = v297;
  if (&v299 != (__int128 *)v297 && v297)
  {
    v297 = 0;
    LODWORD(v298) = 0;
    WTF::fastFree((unint64_t)v220, v206, v207, v208, v209, v210, v211, v212);
  }
  v221 = *((unsigned int *)v80 + 17);
  if ((_DWORD)v221 == *((_DWORD *)v80 + 16))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)(v80 + 7), &JSC::Wasm::Types::I32, &v293, v208, v209, v210, v211, v212);
  }
  else
  {
    v222 = (_OWORD *)(v80[7] + 32 * v221);
    *v222 = xmmword_19915A130;
    v222[1] = v200;
    ++*((_DWORD *)v80 + 17);
  }
  *(_BYTE *)v289 = 0;
  *(_BYTE *)(v289 + 8) = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::atomicCompareExchange(_BYTE *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, double a6, float a7)
{
  uint64_t v7;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  _BYTE *v77;
  int8x16_t *v78;
  unsigned __int8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  float v127;
  char *v128;
  unint64_t *v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int32 v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int32 v150;
  int v151;
  __int32 v152;
  const char *String;
  unsigned __int32 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  const char *v167;
  uint64_t v168;
  unsigned int v169;
  char *v170;
  unint64_t *v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  unint64_t v175;
  unsigned int v176;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __int128 v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  __int128 v186;
  __int128 v187;
  int v188;
  int v189;
  _QWORD v190[2];
  void (**v191)(WTF::StringPrintStream *__hidden);
  uint64_t v192;
  const char *v193;
  uint64_t v194;
  const char *v195;
  int v196[3];

  *(_QWORD *)&v186 = a4;
  *((_QWORD *)&v186 + 1) = a5;
  if (*(_DWORD *)(*(_QWORD *)(a2 + 20592) + 104) == -1)
  {
    v193 = "atomic instruction without memory";
    v194 = 34;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v191, (uint64_t)&v193, a6, a7);
LABEL_67:
    v131 = (const char *)v191;
    goto LABEL_68;
  }
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)a2;
  v12 = v10 > *(_QWORD *)a2;
  v13 = v10 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_119;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = *(_QWORD *)(a2 + 8);
  v20 = 5;
  if (v13 < 5)
    v20 = v13;
  v21 = v20 - 1;
  *(_QWORD *)a2 = v11 + 1;
  v22 = v19 + v11;
  v23 = v11 + 2;
  while (1)
  {
    v24 = *(char *)(v22 + v16);
    v18 |= (v24 & 0x7F) << v17;
    if ((v24 & 0x80000000) == 0)
      break;
    if (v21 == v16)
      goto LABEL_119;
    LOBYTE(v25) = v23 + v16;
    *(_QWORD *)a2 = v23 + v16;
    v17 += 7;
    if (v13 == ++v16)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  if ((_DWORD)v16 == 4 && *(unsigned __int8 *)(v22 + v16) >= 0x10u)
  {
LABEL_119:
    v170 = "can't get load alignment";
    v171 = (unint64_t *)a2;
    v172 = 25;
LABEL_122:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v170, v171, v172, &v193, a7);
    goto LABEL_65;
  }
  if (v18 != JSC::Wasm::memoryLog2Alignment())
  {
    v126 = JSC::Wasm::memoryLog2Alignment();
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned long long,WTF::ASCIILiteral,unsigned long long>("byte alignment ", (unint64_t *)a2, 16, 1 << v18, " does not match against atomic op's natural alignment ", 55, 1 << v126, &v193, v127);
    *(_QWORD *)a1 = v193;
    a1[8] = 1;
    return;
  }
  v26 = *(_QWORD *)(a2 + 16);
  v27 = *(_QWORD *)a2;
  v12 = v26 > *(_QWORD *)a2;
  v28 = v26 - *(_QWORD *)a2;
  if (!v12)
    goto LABEL_121;
  v16 = 0;
  v29 = 0;
  LODWORD(v7) = 0;
  v30 = *(_QWORD *)(a2 + 8);
  v31 = 5;
  if (v28 < 5)
    v31 = v28;
  v32 = v31 - 1;
  *(_QWORD *)a2 = v27 + 1;
  v33 = v30 + v27;
  v34 = v27 + 2;
  while (1)
  {
    v25 = *(char *)(v33 + v16);
    v7 = ((v25 & 0x7F) << v29) | v7;
    if ((v25 & 0x80000000) == 0)
      break;
    if (v32 == v16)
      goto LABEL_121;
    LOBYTE(v25) = v34 + v16;
    *(_QWORD *)a2 = v34 + v16;
    v29 += 7;
    if (v28 == ++v16)
      goto LABEL_21;
  }
LABEL_22:
  if ((_DWORD)v16 == 4 && v25 >= 0x10u)
  {
LABEL_121:
    v170 = "can't get load offset";
    v171 = (unint64_t *)a2;
    v172 = 22;
    goto LABEL_122;
  }
  v35 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v35)
  {
    v128 = "value";
    v129 = (unint64_t *)a2;
    v130 = 6;
LABEL_64:
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v129, 26, v128, v130, &v193, a7);
LABEL_65:
    v131 = v193;
LABEL_68:
    *(_QWORD *)a1 = v131;
    a1[8] = 1;
    return;
  }
  v36 = *(_QWORD *)(a2 + 56) + 32 * v35;
  v37 = *(_QWORD *)(v36 - 32);
  v38 = *(_QWORD *)(v36 - 24);
  v39 = *(_QWORD *)(v36 - 16);
  v40 = *(_QWORD *)(v36 - 8);
  *(_DWORD *)(a2 + 68) = v35 - 1;
  v193 = "WasmFunctionParser.h:";
  LODWORD(v194) = 21;
  LODWORD(v191) = 685;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v193, (unsigned int *)&v191, (int **)&v185);
  v48 = v185;
  if (!v185)
  {
    __break(0xC471u);
    JUMPOUT(0x198F682B0);
  }
  v185 = 0;
  if (*(_DWORD *)v48 == 2)
  {
    WTF::StringImpl::~StringImpl(v48, v41, v42, v43, v44, v45, v46, v47);
    WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
  }
  else
  {
    *(_DWORD *)v48 -= 2;
  }
  v49 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v49)
  {
    v128 = "expected";
    v129 = (unint64_t *)a2;
    v130 = 9;
    goto LABEL_64;
  }
  v174 = v39;
  v175 = v40;
  v176 = a3;
  v50 = *(_QWORD *)(a2 + 56) + 32 * v49;
  v52 = *(_QWORD *)(v50 - 32);
  v51 = *(_QWORD *)(v50 - 24);
  v180 = *(_QWORD *)(v50 - 8);
  v181 = *(_QWORD *)(v50 - 16);
  *(_DWORD *)(a2 + 68) = v49 - 1;
  v193 = "WasmFunctionParser.h:";
  LODWORD(v194) = 21;
  LODWORD(v191) = 686;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v193, (unsigned int *)&v191, (int **)&v184);
  v60 = v184;
  if (!v184)
  {
    __break(0xC471u);
    JUMPOUT(0x198F682B8);
  }
  v184 = 0;
  if (*(_DWORD *)v60 == 2)
  {
    WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
    WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
  }
  else
  {
    *(_DWORD *)v60 -= 2;
  }
  v61 = *(unsigned int *)(a2 + 68);
  if (!(_DWORD)v61)
  {
    v128 = "pointer";
    v129 = (unint64_t *)a2;
    v130 = 8;
    goto LABEL_64;
  }
  v62 = v37;
  v63 = *(_QWORD *)(a2 + 56) + 32 * v61;
  v64 = *(unsigned __int8 *)(v63 - 32);
  v178 = *(_QWORD *)(v63 - 8);
  v179 = *(_QWORD *)(v63 - 16);
  *(_DWORD *)(a2 + 68) = v61 - 1;
  v193 = "WasmFunctionParser.h:";
  LODWORD(v194) = 21;
  LODWORD(v191) = 687;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v193, (unsigned int *)&v191, (int **)&v183);
  v72 = v183;
  if (!v183)
    goto LABEL_127;
  v183 = 0;
  if (*(_DWORD *)v72 == 2)
  {
    WTF::StringImpl::~StringImpl(v72, v65, v66, v67, v68, v69, v70, v71);
    WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
  }
  else
  {
    *(_DWORD *)v72 -= 2;
  }
  if (v64 != 255)
  {
    LODWORD(v190[0]) = v176;
    v193 = " pointer type mismatch";
    v194 = 23;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v191, v190, (uint64_t)&v193);
    goto LABEL_67;
  }
  if (a4 != v52)
  {
LABEL_110:
    LODWORD(v190[0]) = v176;
    v167 = " expected type mismatch";
    v168 = 24;
LABEL_117:
    v193 = v167;
    v194 = v168;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<unsigned int,WTF::ASCIILiteral>(&v191, v190, (uint64_t)&v193);
    *(_QWORD *)a1 = v191;
    a1[8] = 1;
    return;
  }
  v73 = a5;
  v74 = a4;
  if (a4 - 239 < 2 || a4 == 227)
  {
    if (v73 == v51)
      v75 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v75 = 0;
    if ((v75 & 1) == 0)
      goto LABEL_110;
  }
  else
  {
    if (v73 == v51)
      v166 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v166 = 1;
    if (v166 == 1)
      goto LABEL_110;
  }
  if (a4 != v62)
  {
LABEL_116:
    LODWORD(v190[0]) = v176;
    v167 = " value type mismatch";
    v168 = 21;
    goto LABEL_117;
  }
  if (a4 - 239 < 2 || a4 == 227)
  {
    if (v73 == v38)
      v76 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v76 = 0;
    if ((v76 & 1) == 0)
      goto LABEL_116;
  }
  else
  {
    if (v73 == v38)
      v169 = ((a4 + 29) < 0xEu) & (0x3001u >> (a4 + 29));
    else
      v169 = 1;
    if (v169 == 1)
      goto LABEL_116;
  }
  v77 = a1;
  BYTE8(v182) = 0;
  v78 = *(int8x16_t **)(a2 + 48);
  v193 = (const char *)v179;
  v194 = v178;
  v191 = (void (**)(WTF::StringPrintStream *__hidden))v181;
  v192 = v180;
  v190[0] = v174;
  v190[1] = v175;
  v189 = v7;
  v173 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v78, v174, v175, v67, v68, v69, v70, v71);
  v188 = v173;
  v79 = JSC::Wasm::memoryLog2Alignment();
  if (v79 >= 5u)
  {
LABEL_127:
    __break(0xC471u);
    JUMPOUT(0x198F68288);
  }
  if (__CFADD__((_DWORD)v7, dword_19919F66C[(char)v79]))
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException((uint64_t)v78, 0, v80, v81, v82, v83, v84, v85);
    v137 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v78, v179, v178, v132, v133, v134, v135, v136);
    if (v178 == 2)
    {
      v143 = ((v78[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * v179 + 16;
      if (v78[80].i32[0] < v143)
        v78[80].i32[0] = v143;
      if ((v137 & 7) != 1 || ((-8 * v143) ^ v137) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)v78, v179, v178, v137);
    }
    v144 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v78, v181, v180, v138, v139, v140, v141, v142);
    if (v180 == 2)
    {
      v150 = ((v78[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * v181 + 16;
      if (v78[80].i32[0] < v150)
        v78[80].i32[0] = v150;
      if ((v144 & 7) != 1 || ((-8 * v150) ^ v144) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)v78, v181, v180, v144);
    }
    v151 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v78, v174, v175, v145, v146, v147, v148, v149);
    if (v175 == 2)
    {
      v152 = ((v78[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * v174 + 16;
      if (v78[80].i32[0] < v152)
        v78[80].i32[0] = v152;
      if ((v151 & 7) != 1 || ((-8 * v152) ^ v151) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)v78, v174, v175, v151);
    }
    v98 = 0;
    if (a4 == 254)
      v92 = -511;
    else
      v92 = -255;
  }
  else
  {
    v86 = JSC::Wasm::memoryLog2Alignment();
    if (v86 >= 5u)
    {
      __break(0xC471u);
      JUMPOUT(0x198F682A8);
    }
    v90 = JSC::Wasm::BBQJITImpl::BBQJIT::emitCheckAndPreparePointer(v78, (JSC::ARM64LogicalImmediate *)v179, v178, v7, dword_19919F66C[(char)v86], v87, v88, v89);
    v98 = JSC::Wasm::BBQJITImpl::BBQJIT::emitAtomicCompareExchange((uint64_t)v78, v176, a4, v73, v90, v181, v180, v91, v174, v175, v7);
  }
  *(_QWORD *)&v182 = v98;
  WORD4(v182) = v92;
  if (HIBYTE(word_1ECF4C700))
  {
    String = JSC::Wasm::makeString();
    v187 = v182;
    v195 = String;
    WTF::dataLog<char [16]>("BBQ\t");
    if (v78->i32[0])
    {
      v154 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v154;
      }
      while (v154 < v78->i32[0]);
    }
    WTF::dataLog<char const*,char [2]>(&v195, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v193);
    if (v194 != 1 && v194 != 4)
    {
      v196[0] = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v78, (uint64_t)v193, v194, v155, v156, v157, v158, v159);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", v196);
    }
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v191);
    if (v192 != 1 && v192 != 4)
    {
      v196[0] = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v78, (uint64_t)v191, v192, v161, v162, v163, v164, v165);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", v196);
    }
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v190);
    v74 = a4;
    if ((v173 & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v188);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)v78, 0, &v189, (uint64_t *)&v187);
  }
  v99 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v99 == *(_DWORD *)(a2 + 64))
  {
    WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a2 + 56, &v186, &v182, v93, v94, v95, v96, v97);
  }
  else
  {
    v100 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 32 * v99);
    v101 = *((_QWORD *)&v182 + 1);
    *v100 = v74;
    v100[1] = v73;
    v100[2] = v98;
    v100[3] = v101;
    ++*(_DWORD *)(a2 + 68);
  }
  *v77 = 0;
  v77[8] = 0;
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [29],JSC::Wasm::Type,char [27]>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  WTF::PrintStream *v25;
  float v26;
  double v27;
  const WTF::String *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  const WTF::String *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  float v42;
  const WTF::String *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  float v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  char v89;
  void (**v90)(WTF::StringPrintStream *__hidden);
  WTF *v91;
  __int128 v92;
  _BYTE v93[128];
  void (**v94)(WTF::StringPrintStream *__hidden);
  WTF *v95;
  __int128 v96;
  _BYTE v97[128];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v90 = off_1E3572250;
  v91 = (WTF *)v93;
  v92 = xmmword_199122F80;
  v93[0] = 0;
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", "ref.as_non_null ref to type ");
  v94[5]((WTF::StringPrintStream *)&v94);
  v13 = v95;
  if (!v95)
  {
    v88 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v88);
  v13 = v95;
  if (v95 != (WTF *)v97)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v87, a2, a3, v14, v15);
  v94 = off_1E3572250;
  v95 = (WTF *)v97;
  v96 = xmmword_199122F80;
  v97[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v94, "%s", " expected a reference type");
  v94[5]((WTF::StringPrintStream *)&v94);
  v23 = v95;
  if (!v95)
  {
    v86 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v95, v96, (uint64_t *)&v86);
  v23 = v95;
  if (v95 != (WTF *)v97)
LABEL_10:
    WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
  v24 = (WTF *)((uint64_t (*)(_QWORD))v90[4])(&v90);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v24 + 32))(v24);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v94, v26);
  WTF::printExpectedCStringHelper(v25, "StringView", &v94);
  if ((_DWORD)v95 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v95])(&v89, &v94);
  v27 = (*(double (**)(WTF *))(*(_QWORD *)v24 + 40))(v24);
  WTF::printInternal(v24, (WTF::PrintStream *)&v88, v28, v29, v30, v31, v32, v33, v27, v34);
  WTF::printInternal(v24, (WTF::PrintStream *)&v87, v35, v36, v37, v38, v39, v40, v41, v42);
  WTF::printInternal(v24, (WTF::PrintStream *)&v86, v43, v44, v45, v46, v47, v48, v49, v50);
  v90[5]((WTF::StringPrintStream *)&v90);
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = v88;
  v88 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  v61 = v91;
  if (v91)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v91, v92, (uint64_t *)&v94);
    v61 = v91;
    *a1 = v94;
    if (v61 == (WTF *)v93)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v61, v51, v52, v53, v54, v55, v56, v57);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, JSC::Wasm::Type *a7, uint64_t a8, double a9, float a10, JSC::Wasm::Type *a11)
{
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  double v61;
  float v62;
  float v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  double v75;
  float v76;
  WTF *v77;
  WTF::PrintStream *v78;
  float v79;
  double v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  const WTF::String *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  float v95;
  const WTF::String *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  float v103;
  const WTF::String *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  float v111;
  const WTF::String *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  float v119;
  const WTF::String *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  float v127;
  const WTF::String *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  double v134;
  float v135;
  WTF::AtomStringImpl *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF *v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  int v215;
  char v216;
  void (**v217)(WTF::StringPrintStream *__hidden);
  WTF *v218;
  __int128 v219;
  _BYTE v220[128];
  void (**v221)(WTF::StringPrintStream *__hidden);
  unint64_t v222;
  __int128 v223;
  _BYTE v224[128];
  uint64_t v225;

  v225 = *MEMORY[0x1E0C80C00];
  v217 = off_1E3572250;
  v218 = (WTF *)v220;
  v219 = xmmword_199122F80;
  v220[0] = 0;
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a3)
  {
    v17 = *(_QWORD *)(a3 + 8);
    v18 = v17 != 0;
    v19 = v17 - 1;
    if (!v18)
      v19 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v19, (uint64_t)&v214, a10);
  }
  else
  {
    v20 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = 0;
    *(_BYTE *)(v20 + 16) = 0;
    v214 = (WTF::StringImpl *)v20;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v213, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v28 = v222;
  if (!v222)
  {
    v213 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v213);
  v28 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_12:
    WTF::fastFree(v28, v21, v22, v23, v24, v25, v26, v27);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v221, "%u", *a4);
  v221[5]((WTF::StringPrintStream *)&v221);
  v36 = v222;
  if (!v222)
  {
    v212 = 0;
    goto LABEL_17;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v212);
  v36 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_17:
    WTF::fastFree(v36, v29, v30, v31, v32, v33, v34, v35);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a5)
  {
    v38 = *(_QWORD *)(a5 + 8);
    v18 = v38 != 0;
    v39 = v38 - 1;
    if (!v18)
      v39 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v39, (uint64_t)&v214, v37);
  }
  else
  {
    v40 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v40 = 1;
    *(_QWORD *)(v40 + 8) = 0;
    *(_BYTE *)(v40 + 16) = 0;
    v214 = (WTF::StringImpl *)v40;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v211, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v48 = v222;
  if (!v222)
  {
    v211 = 0;
    goto LABEL_29;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v211);
  v48 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_29:
    WTF::fastFree(v48, v41, v42, v43, v44, v45, v46, v47);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a6)
  {
    v50 = *(_QWORD *)(a6 + 8);
    v18 = v50 != 0;
    v51 = v50 - 1;
    if (!v18)
      v51 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v51, (uint64_t)&v214, v49);
  }
  else
  {
    v52 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v52 = 1;
    *(_QWORD *)(v52 + 8) = 0;
    *(_BYTE *)(v52 + 16) = 0;
    v214 = (WTF::StringImpl *)v52;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v210, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v60 = v222;
  if (!v222)
  {
    v210 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v210);
  v60 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_41:
    WTF::fastFree(v60, v53, v54, v55, v56, v57, v58, v59);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v209, a2, a7, v61, v62);
  v221 = off_1E3572250;
  v222 = (unint64_t)v224;
  v223 = xmmword_199122F80;
  v224[0] = 0;
  if (*(_QWORD *)a8)
  {
    v64 = *(_QWORD *)(a8 + 8);
    v18 = v64 != 0;
    v65 = v64 - 1;
    if (!v18)
      v65 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a8, v65, (uint64_t)&v214, v63);
  }
  else
  {
    v66 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v66 = 1;
    *(_QWORD *)(v66 + 8) = 0;
    *(_BYTE *)(v66 + 16) = 0;
    v214 = (WTF::StringImpl *)v66;
    v215 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v221, "StringView", &v214);
  if (v215 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v215])(&v208, &v214);
  v221[5]((WTF::StringPrintStream *)&v221);
  v221[5]((WTF::StringPrintStream *)&v221);
  v74 = v222;
  if (!v222)
  {
    v214 = 0;
    goto LABEL_53;
  }
  WTF::fromUTF8Impl<false>(v222, v223, (uint64_t *)&v214);
  v74 = v222;
  if ((_BYTE *)v222 != v224)
LABEL_53:
    WTF::fastFree(v74, v67, v68, v69, v70, v71, v72, v73);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v208, a2, a11, v75, v76);
  v77 = (WTF *)((uint64_t (*)(_QWORD))v217[4])(&v217);
  v78 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v77 + 32))(v77);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v221, v79);
  WTF::printExpectedCStringHelper(v78, "StringView", &v221);
  if ((_DWORD)v222 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v222])(&v216, &v221);
  v80 = (*(double (**)(WTF *))(*(_QWORD *)v77 + 40))(v77);
  WTF::printInternal(v77, (WTF::PrintStream *)&v213, v81, v82, v83, v84, v85, v86, v80, v87);
  WTF::printInternal(v77, (WTF::PrintStream *)&v212, v88, v89, v90, v91, v92, v93, v94, v95);
  WTF::printInternal(v77, (WTF::PrintStream *)&v211, v96, v97, v98, v99, v100, v101, v102, v103);
  WTF::printInternal(v77, (WTF::PrintStream *)&v210, v104, v105, v106, v107, v108, v109, v110, v111);
  WTF::printInternal(v77, (WTF::PrintStream *)&v209, v112, v113, v114, v115, v116, v117, v118, v119);
  WTF::printInternal(v77, (WTF::PrintStream *)&v214, v120, v121, v122, v123, v124, v125, v126, v127);
  WTF::printInternal(v77, (WTF::PrintStream *)&v208, v128, v129, v130, v131, v132, v133, v134, v135);
  v217[5]((WTF::StringPrintStream *)&v217);
  v143 = v208;
  v208 = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
  v144 = v214;
  v214 = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
    {
      WTF::StringImpl::~StringImpl(v144, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
    }
    else
    {
      *(_DWORD *)v144 -= 2;
    }
  }
  v145 = v209;
  v209 = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
    {
      WTF::StringImpl::~StringImpl(v145, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
    }
    else
    {
      *(_DWORD *)v145 -= 2;
    }
  }
  v146 = v210;
  v210 = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
    {
      WTF::StringImpl::~StringImpl(v146, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
    }
    else
    {
      *(_DWORD *)v146 -= 2;
    }
  }
  v147 = v211;
  v211 = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
    {
      WTF::StringImpl::~StringImpl(v147, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v183, v184, v185, v186, v187, v188, v189, v190);
    }
    else
    {
      *(_DWORD *)v147 -= 2;
    }
  }
  v148 = v212;
  v212 = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
    {
      WTF::StringImpl::~StringImpl(v148, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
    }
    else
    {
      *(_DWORD *)v148 -= 2;
    }
  }
  v149 = v213;
  v213 = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
    {
      WTF::StringImpl::~StringImpl(v149, v136, v137, v138, v139, v140, v141, v142);
      WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
    }
    else
    {
      *(_DWORD *)v149 -= 2;
    }
  }
  v150 = v218;
  if (v218)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v218, v219, (uint64_t *)&v221);
    v150 = v218;
    *a1 = v221;
    if (v150 == (WTF *)v220)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v150, v136, v137, v138, v139, v140, v141, v142);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<WTF::ASCIILiteral,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, uint64_t a4, JSC::Wasm::Type *a5, uint64_t a6, JSC::Wasm::Type *a7, double a8, float a9)
{
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  float v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  double v38;
  float v39;
  float v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  double v52;
  float v53;
  WTF *v54;
  WTF::PrintStream *v55;
  float v56;
  double v57;
  const WTF::String *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF *v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  int v156;
  char v157;
  void (**v158)(WTF::StringPrintStream *__hidden);
  WTF *v159;
  __int128 v160;
  _BYTE v161[128];
  void (**v162)(WTF::StringPrintStream *__hidden);
  WTF *v163;
  __int128 v164;
  _BYTE v165[128];
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v158 = off_1E3572250;
  v159 = (WTF *)v161;
  v160 = xmmword_199122F80;
  v161[0] = 0;
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a3)
  {
    v14 = *(_QWORD *)(a3 + 8);
    v15 = v14 != 0;
    v16 = v14 - 1;
    if (!v15)
      v16 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v16, (uint64_t)&v155, a9);
  }
  else
  {
    v17 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = 0;
    *(_BYTE *)(v17 + 16) = 0;
    v155 = (WTF::StringImpl *)v17;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v154, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v25 = v163;
  if (!v163)
  {
    v154 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v154);
  v25 = v163;
  if (v163 != (WTF *)v165)
LABEL_12:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a4)
  {
    v27 = *(_QWORD *)(a4 + 8);
    v15 = v27 != 0;
    v28 = v27 - 1;
    if (!v15)
      v28 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a4, v28, (uint64_t)&v155, v26);
  }
  else
  {
    v29 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v29 = 1;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    v155 = (WTF::StringImpl *)v29;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v153, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v37 = v163;
  if (!v163)
  {
    v153 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v153);
  v37 = v163;
  if (v163 != (WTF *)v165)
LABEL_24:
    WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v152, a2, a5, v38, v39);
  v162 = off_1E3572250;
  v163 = (WTF *)v165;
  v164 = xmmword_199122F80;
  v165[0] = 0;
  if (*(_QWORD *)a6)
  {
    v41 = *(_QWORD *)(a6 + 8);
    v15 = v41 != 0;
    v42 = v41 - 1;
    if (!v15)
      v42 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a6, v42, (uint64_t)&v155, v40);
  }
  else
  {
    v43 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v43 = 1;
    *(_QWORD *)(v43 + 8) = 0;
    *(_BYTE *)(v43 + 16) = 0;
    v155 = (WTF::StringImpl *)v43;
    v156 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v162, "StringView", &v155);
  if (v156 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v156])(&v151, &v155);
  v162[5]((WTF::StringPrintStream *)&v162);
  v162[5]((WTF::StringPrintStream *)&v162);
  v51 = v163;
  if (!v163)
  {
    v155 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v163, v164, (uint64_t *)&v155);
  v51 = v163;
  if (v163 != (WTF *)v165)
LABEL_36:
    WTF::fastFree((unint64_t)v51, v44, v45, v46, v47, v48, v49, v50);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v151, a2, a7, v52, v53);
  v54 = (WTF *)((uint64_t (*)(_QWORD))v158[4])(&v158);
  v55 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v54 + 32))(v54);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v162, v56);
  WTF::printExpectedCStringHelper(v55, "StringView", &v162);
  if ((_DWORD)v163 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v163])(&v157, &v162);
  v57 = (*(double (**)(WTF *))(*(_QWORD *)v54 + 40))(v54);
  WTF::printInternal(v54, (WTF::PrintStream *)&v154, v58, v59, v60, v61, v62, v63, v57, v64);
  WTF::printInternal(v54, (WTF::PrintStream *)&v153, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v54, (WTF::PrintStream *)&v152, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v54, (WTF::PrintStream *)&v155, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v54, (WTF::PrintStream *)&v151, v89, v90, v91, v92, v93, v94, v95, v96);
  v158[5]((WTF::StringPrintStream *)&v158);
  v104 = v151;
  v151 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v155;
  v155 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v152;
  v152 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v126, v127, v128, v129, v130, v131, v132, v133);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v153;
  v153 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v154;
  v154 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v142, v143, v144, v145, v146, v147, v148, v149);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v159;
  if (v159)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v159, v160, (uint64_t *)&v162);
    v109 = v159;
    *a1 = v162;
    if (v109 == (WTF *)v161)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v109, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [43],JSC::Wasm::Type,char [6],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "invalid type for call_ref value, expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", " got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [41],JSC::Wasm::Type,char [12],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3, JSC::Wasm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  double v16;
  float v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  double v26;
  float v27;
  WTF *v28;
  WTF::PrintStream *v29;
  float v30;
  double v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  const WTF::String *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  float v46;
  const WTF::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  float v54;
  const WTF::String *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  float v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  char v111;
  void (**v112)(WTF::StringPrintStream *__hidden);
  WTF *v113;
  __int128 v114;
  _BYTE v115[128];
  void (**v116)(WTF::StringPrintStream *__hidden);
  WTF *v117;
  __int128 v118;
  _BYTE v119[128];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v112 = off_1E3572250;
  v113 = (WTF *)v115;
  v114 = xmmword_199122F80;
  v115[0] = 0;
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", "argument type mismatch in call_ref, got ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v15 = v117;
  if (!v117)
  {
    v110 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v110);
  v15 = v117;
  if (v117 != (WTF *)v119)
LABEL_5:
    WTF::fastFree((unint64_t)v15, v8, v9, v10, v11, v12, v13, v14);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v109, a2, a3, v16, v17);
  v116 = off_1E3572250;
  v117 = (WTF *)v119;
  v118 = xmmword_199122F80;
  v119[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v116, "%s", ", expected ");
  v116[5]((WTF::StringPrintStream *)&v116);
  v25 = v117;
  if (!v117)
  {
    v108 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v117, v118, (uint64_t *)&v108);
  v25 = v117;
  if (v117 != (WTF *)v119)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v107, a2, a4, v26, v27);
  v28 = (WTF *)((uint64_t (*)(_QWORD))v112[4])(&v112);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v28 + 32))(v28);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v116, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v116);
  if ((_DWORD)v117 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v117])(&v111, &v116);
  v31 = (*(double (**)(WTF *))(*(_QWORD *)v28 + 40))(v28);
  WTF::printInternal(v28, (WTF::PrintStream *)&v110, v32, v33, v34, v35, v36, v37, v31, v38);
  WTF::printInternal(v28, (WTF::PrintStream *)&v109, v39, v40, v41, v42, v43, v44, v45, v46);
  WTF::printInternal(v28, (WTF::PrintStream *)&v108, v47, v48, v49, v50, v51, v52, v53, v54);
  WTF::printInternal(v28, (WTF::PrintStream *)&v107, v55, v56, v57, v58, v59, v60, v61, v62);
  v112[5]((WTF::StringPrintStream *)&v112);
  v70 = v107;
  v107 = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  v71 = v108;
  v108 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
    {
      WTF::StringImpl::~StringImpl(v71, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v71 -= 2;
    }
  }
  v72 = v109;
  v109 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
    {
      WTF::StringImpl::~StringImpl(v72, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v72 -= 2;
    }
  }
  v73 = v110;
  v110 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
    {
      WTF::StringImpl::~StringImpl(v73, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v73 -= 2;
    }
  }
  v74 = v113;
  if (v113)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v113, v114, (uint64_t *)&v116);
    v74 = v113;
    *a1 = v116;
    if (v74 == (WTF *)v115)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v74, v63, v64, v65, v66, v67, v68, v69);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [36],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Block expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [35],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Loop expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [31],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "if condition must be i32, got ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [34],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "Try expects the argument at index");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [58],unsigned int,char [8],JSC::Wasm::Type,char [24],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, _DWORD *a3, JSC::Wasm::Type *a4, JSC::Wasm::Type *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  double v34;
  float v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  double v44;
  float v45;
  WTF *v46;
  WTF::PrintStream *v47;
  float v48;
  double v49;
  const WTF::String *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  const WTF::String *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  const WTF::String *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  float v72;
  const WTF::String *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  float v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const WTF::String *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  float v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  char v165;
  void (**v166)(WTF::StringPrintStream *__hidden);
  WTF *v167;
  __int128 v168;
  _BYTE v169[128];
  void (**v170)(WTF::StringPrintStream *__hidden);
  WTF *v171;
  __int128 v172;
  _BYTE v173[128];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v166 = off_1E3572250;
  v167 = (WTF *)v169;
  v168 = xmmword_199122F80;
  v169[0] = 0;
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", "The exception being thrown expects the argument at index ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v17 = v171;
  if (!v171)
  {
    v164 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v164);
  v17 = v171;
  if (v171 != (WTF *)v173)
LABEL_5:
    WTF::fastFree((unint64_t)v17, v10, v11, v12, v13, v14, v15, v16);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%u", *a3);
  v170[5]((WTF::StringPrintStream *)&v170);
  v25 = v171;
  if (!v171)
  {
    v163 = 0;
    goto LABEL_10;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v163);
  v25 = v171;
  if (v171 != (WTF *)v173)
LABEL_10:
    WTF::fastFree((unint64_t)v25, v18, v19, v20, v21, v22, v23, v24);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " to be ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v33 = v171;
  if (!v171)
  {
    v162 = 0;
    goto LABEL_15;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v162);
  v33 = v171;
  if (v171 != (WTF *)v173)
LABEL_15:
    WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v161, a2, a4, v34, v35);
  v170 = off_1E3572250;
  v171 = (WTF *)v173;
  v172 = xmmword_199122F80;
  v173[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v170, "%s", " but argument has type ");
  v170[5]((WTF::StringPrintStream *)&v170);
  v43 = v171;
  if (!v171)
  {
    v160 = 0;
    goto LABEL_20;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v171, v172, (uint64_t *)&v160);
  v43 = v171;
  if (v171 != (WTF *)v173)
LABEL_20:
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v159, a2, a5, v44, v45);
  v46 = (WTF *)((uint64_t (*)(_QWORD))v166[4])(&v166);
  v47 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v46 + 32))(v46);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v170, v48);
  WTF::printExpectedCStringHelper(v47, "StringView", &v170);
  if ((_DWORD)v171 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v171])(&v165, &v170);
  v49 = (*(double (**)(WTF *))(*(_QWORD *)v46 + 40))(v46);
  WTF::printInternal(v46, (WTF::PrintStream *)&v164, v50, v51, v52, v53, v54, v55, v49, v56);
  WTF::printInternal(v46, (WTF::PrintStream *)&v163, v57, v58, v59, v60, v61, v62, v63, v64);
  WTF::printInternal(v46, (WTF::PrintStream *)&v162, v65, v66, v67, v68, v69, v70, v71, v72);
  WTF::printInternal(v46, (WTF::PrintStream *)&v161, v73, v74, v75, v76, v77, v78, v79, v80);
  WTF::printInternal(v46, (WTF::PrintStream *)&v160, v81, v82, v83, v84, v85, v86, v87, v88);
  WTF::printInternal(v46, (WTF::PrintStream *)&v159, v89, v90, v91, v92, v93, v94, v95, v96);
  v166[5]((WTF::StringPrintStream *)&v166);
  v104 = v159;
  v159 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  v105 = v160;
  v160 = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
  }
  v106 = v161;
  v161 = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
    {
      WTF::StringImpl::~StringImpl(v106, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v106 -= 2;
    }
  }
  v107 = v162;
  v162 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v163;
  v163 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v143, v144, v145, v146, v147, v148, v149, v150);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v164;
  v164 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
  v110 = v167;
  if (v167)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v167, v168, (uint64_t *)&v170);
    v110 = v167;
    *a1 = v170;
    if (v110 == (WTF *)v169)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v110, v97, v98, v99, v100, v101, v102, v103);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [43],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "conditional branch with non-i32 condition ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendUsingFunctor<JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::parseExpression(void)::{lambda(unsigned long)#1},void>(uint64_t a1, uint64_t a2, WTF::StringImpl ***a3)
{
  unint64_t i;
  WTF::StringImpl **v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;

  WTF::Vector<JSC::Wasm::OMGIRGenerator::ControlData *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + a2);
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v7 = *a3;
      v8 = (unint64_t)(*a3)[2];
      v9 = (unint64_t)**a3;
      v10 = v8 > v9;
      v11 = v8 - v9;
      if (!v10)
        goto LABEL_33;
      v12 = 0;
      v13 = 0;
      LODWORD(v14) = 0;
      v15 = v7[1];
      *v7 = (WTF::StringImpl *)(v9 + 1);
      v16 = (uint64_t)v15 + v9;
      v17 = v9 + 2;
      while (1)
      {
        v18 = *(char *)(v16 + v12);
        v14 = ((v18 & 0x7F) << v13) | v14;
        if ((v18 & 0x80000000) == 0)
          break;
        if (v11 >= 5)
          v24 = 5;
        else
          v24 = v11;
        if (v24 - 1 == v12)
          goto LABEL_33;
        *v7 = (WTF::StringImpl *)(v17 + v12);
        v13 += 7;
        if (v11 == ++v12)
        {
          __break(1u);
          return;
        }
      }
      if ((_DWORD)v12 != 4 || *(unsigned __int8 *)(v16 + v12) < 0x10u)
      {
        v19 = *((unsigned int *)v7 + 149);
        if (v19 > v14)
        {
          v20 = __CFADD__(v19, ~v14);
          v21 = v19 + ~v14;
          if (!v20)
          {
            __break(0xC471u);
            return;
          }
          v22 = (uint64_t)v7[73] + 1232 * v21 + 1064;
          goto LABEL_12;
        }
        if (!*a3[1])
        {
          WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned long>((uint64_t)"br_table's ", 12, i, (uint64_t)"th target ", 11, v14, (uint64_t)" exceeds control stack size ", 29, (int **)&v52, v19);
LABEL_24:
          v32 = a3[1];
          v33 = v52;
          v52 = 0;
          v34 = *v32;
          *v32 = v33;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
            {
              WTF::StringImpl::~StringImpl(v34, v25, v26, v27, v28, v29, v30, v31);
              WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
            }
            else
            {
              *(_DWORD *)v34 -= 2;
            }
          }
          v35 = v52;
          v52 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::~StringImpl(v35, v25, v26, v27, v28, v29, v30, v31);
              WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
            }
            else
            {
              *(_DWORD *)v35 -= 2;
            }
          }
        }
      }
      else
      {
LABEL_33:
        if (!*a3[1])
        {
          WTF::makeString<WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral>((uint64_t)"can't get ", 11, i, (uint64_t)"th target for br_table", 23, (int **)&v52);
          goto LABEL_24;
        }
      }
      v22 = 0;
LABEL_12:
      v23 = *(unsigned int *)(a1 + 12);
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v22;
      *(_DWORD *)(a1 + 12) = v23 + 1;
    }
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [33],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "br_table with non-i32 condition ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<char [51],JSC::Wasm::Type>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, JSC::Wasm::Type *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  double v14;
  float v15;
  WTF *v16;
  WTF::PrintStream *v17;
  float v18;
  double v19;
  const WTF::String *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  const WTF::String *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  float v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  char v63;
  void (**v64)(WTF::StringPrintStream *__hidden);
  WTF *v65;
  __int128 v66;
  _BYTE v67[128];
  void (**v68)(WTF::StringPrintStream *__hidden);
  WTF *v69;
  __int128 v70;
  _BYTE v71[128];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v64 = off_1E3572250;
  v65 = (WTF *)v67;
  v66 = xmmword_199122F80;
  v67[0] = 0;
  v68 = off_1E3572250;
  v69 = (WTF *)v71;
  v70 = xmmword_199122F80;
  v71[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v68, "%s", "grow_memory with non-i32 delta argument has type: ");
  v68[5]((WTF::StringPrintStream *)&v68);
  v13 = v69;
  if (!v69)
  {
    v62 = 0;
    goto LABEL_5;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v69, v70, (uint64_t *)&v62);
  v13 = v69;
  if (v69 != (WTF *)v71)
LABEL_5:
    WTF::fastFree((unint64_t)v13, v6, v7, v8, v9, v10, v11, v12);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v61, a2, a3, v14, v15);
  v16 = (WTF *)((uint64_t (*)(_QWORD))v64[4])(&v64);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v16 + 32))(v16);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v68, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v68);
  if ((_DWORD)v69 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v69])(&v63, &v68);
  v19 = (*(double (**)(WTF *))(*(_QWORD *)v16 + 40))(v16);
  WTF::printInternal(v16, (WTF::PrintStream *)&v62, v20, v21, v22, v23, v24, v25, v19, v26);
  WTF::printInternal(v16, (WTF::PrintStream *)&v61, v27, v28, v29, v30, v31, v32, v33, v34);
  v64[5]((WTF::StringPrintStream *)&v64);
  v42 = v61;
  v61 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = v62;
  v62 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v65;
  if (v65)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v65, v66, (uint64_t *)&v68);
    v44 = v65;
    *a1 = v68;
    if (v44 == (WTF *)v67)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v44, v35, v36, v37, v38, v39, v40, v41);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<true,void>(_BYTE *a1, uint64_t a2, JSC::ARM64LogicalImmediate *a3, JSC::ARM64LogicalImmediate *a4, uint64_t a5, _OWORD *a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t v12;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  float v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  WTF::StringImpl *v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  __int128 *v84;
  _OWORD *v85;
  __int128 v86;
  __int128 *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  WTF::AtomStringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  WTF::AtomStringImpl *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  uint64_t v125;
  __int128 v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  WTF::AtomStringImpl *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  WTF::AtomStringImpl *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  WTF::StringImpl *v179;
  uint64_t v180;
  unint64_t *v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  WTF::AtomStringImpl *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  WTF::StringImpl *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  WTF::AtomStringImpl *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  WTF::StringImpl *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  WTF::AtomStringImpl *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  WTF::StringImpl *v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  WTF::AtomStringImpl *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  WTF::StringImpl *v240;
  uint64_t v241;
  BOOL v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  WTF::AtomStringImpl *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  WTF::StringImpl *v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  WTF::AtomStringImpl *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  WTF::StringImpl *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  WTF::AtomStringImpl *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  WTF::StringImpl *v282;
  char v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  WTF::AtomStringImpl *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  WTF::StringImpl *v299;
  uint64_t v300;
  __int128 v301;
  uint64_t v302;
  _OWORD *v303;
  _OWORD *v304;
  __int128 v305;
  __int128 v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  JSC::ARM64LogicalImmediate *v311;
  unint64_t v312;
  WTF::AtomStringImpl *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  WTF::StringImpl *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  JSC::ARM64LogicalImmediate *v326;
  unint64_t v327;
  WTF::AtomStringImpl *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  WTF::StringImpl *v335;
  unint64_t v336;
  char *v337;
  unint64_t *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unint64_t v346;
  WTF::AtomStringImpl *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  WTF::StringImpl *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  WTF::AtomStringImpl *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  float v367;
  WTF::StringImpl *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  WTF::AtomStringImpl *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  double v383;
  float v384;
  WTF::StringImpl *v385;
  uint64_t v386;
  void (**v387)(WTF::StringPrintStream *__hidden);
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  WTF::AtomStringImpl *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  double v400;
  float v401;
  WTF::StringImpl *v402;
  float v403;
  unsigned int v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  WTF::AtomStringImpl *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  WTF::StringImpl *v419;
  unsigned int v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  void *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v448;
  void *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t *v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  _OWORD *v472;
  __int128 v473;
  unint64_t v474;
  void *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  void *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  void *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unint64_t v498;
  void *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t v506;
  void *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  void *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  void *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  void *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  void *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  void *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  unsigned int v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  WTF::AtomStringImpl *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  WTF::StringImpl *v569;
  uint64_t v570;
  uint64_t v571;
  char v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  WTF::AtomStringImpl *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  WTF::StringImpl *v585;
  _OWORD *v586;
  __int128 v587;
  unint64_t v588;
  unsigned int v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  unint64_t v595;
  WTF::AtomStringImpl *v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  WTF::StringImpl *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  const char *v612;
  unint64_t v613;
  void *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  unint64_t v621;
  void *v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  void *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  void *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  unint64_t v645;
  void *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  void *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  unint64_t v661;
  void *v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  unint64_t v669;
  void *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  WTF::AtomStringImpl *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  WTF::StringImpl *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  unint64_t v694;
  WTF::AtomStringImpl *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  WTF::StringImpl *v702;
  uint64_t v703;
  unint64_t v704;
  void *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  void *v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  char *v720;
  uint64_t v721;
  char *v722;
  uint64_t v723;
  const char *v724;
  uint64_t v725;
  const char *v726;
  uint64_t v727;
  uint64_t v728;
  const char *v729;
  unint64_t v730;
  uint64_t v731;
  unint64_t v732;
  uint64_t v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  unint64_t v737;
  uint64_t v738;
  unint64_t v739;
  unsigned __int8 v740;
  unint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  unint64_t v746;
  int v747;
  uint64_t v748;
  int v749;
  uint64_t v750;
  int v751;
  uint64_t v752;
  unint64_t v753;
  unsigned __int8 v754;
  _BYTE *v755;
  uint64_t v756;
  WTF::StringImpl *v757;
  WTF::StringImpl *v758;
  WTF::StringImpl *v759;
  WTF::StringImpl *v760;
  WTF::StringImpl *v761;
  _OWORD v762[2];
  WTF::StringImpl *v763;
  WTF::StringImpl *v764;
  _OWORD v765[2];
  WTF::StringImpl *v766;
  WTF::StringImpl *v767;
  WTF::StringImpl *v768;
  WTF::StringImpl *v769;
  WTF::StringImpl *v770;
  WTF::StringImpl *v771;
  WTF::StringImpl *v772;
  WTF::StringImpl *v773;
  WTF::StringImpl *v774;
  WTF::StringImpl *v775;
  WTF::StringImpl *v776;
  WTF::StringImpl *v777;
  WTF::StringImpl *v778;
  WTF::StringImpl *v779;
  WTF::StringImpl *v780;
  void (**v781)(WTF::StringPrintStream *__hidden);
  char v782;
  __int128 v783;
  JSC::ARM64LogicalImmediate *v784;
  unint64_t v785;
  unsigned int v786;
  WTF::StringImpl *v787;
  WTF::StringImpl *v788;
  WTF::StringImpl *v789;
  WTF::StringImpl *v790;
  WTF::StringImpl *v791;
  _OWORD v792[2];

  v12 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(v12 + 1292) = 1;
  if (((_BYTE)a3 - 77) <= 3u && word_1ECF4C7B4 == 0)
  {
    JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("relaxed simd instructions not supported", (unint64_t *)a2, 40, &v783, a10);
    *(_QWORD *)a1 = v783;
    a1[8] = 1;
    return;
  }
  v16 = a3;
  v18 = a5;
  switch((int)a3)
  {
    case 0:
    case 5:
    case 10:
    case 20:
    case 21:
    case 23:
    case 28:
    case 38:
    case 45:
    case 49:
    case 54:
    case 55:
    case 58:
    case 62:
    case 63:
    case 67:
    case 75:
    case 78:
      v60 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v60)
        goto LABEL_389;
      v61 = *(_QWORD *)(a2 + 56) + 32 * v60;
      v62 = *(unsigned __int8 *)(v61 - 32);
      v63 = *(_QWORD *)(v61 - 24);
      v64 = *(_QWORD *)(v61 - 16);
      v65 = *(_QWORD *)(v61 - 8);
      *(_DWORD *)(a2 + 68) = v60 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1205;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v771);
      v74 = v771;
      if (!v771)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D6B8);
      }
      v771 = 0;
      if (*(_DWORD *)v74 == 2)
      {
        WTF::StringImpl::~StringImpl(v74, v66, v67, v68, v69, v70, v71, v72);
        WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
      }
      else
      {
        *(_DWORD *)v74 -= 2;
      }
      if (v62 != 251 || v63 != 0)
        goto LABEL_399;
      BYTE8(v783) = 0;
      JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDV_V(*(_QWORD *)(a2 + 48), (int)a3, a4 & 0x3F | (v18 << 6), v64, v65, (uint64_t *)&v783, v71, v72, v792);
LABEL_31:
      if (BYTE8(v792[0]))
        goto LABEL_401;
      v81 = *(unsigned int *)(a2 + 68);
      if ((_DWORD)v81 == *(_DWORD *)(a2 + 64))
        goto LABEL_33;
      v87 = (__int128 *)(*(_QWORD *)(a2 + 56) + 32 * v81);
      v88 = v783;
      goto LABEL_232;
    case 1:
    case 3:
    case 6:
    case 9:
    case 18:
    case 24:
    case 26:
    case 31:
    case 32:
    case 39:
    case 42:
    case 43:
    case 47:
    case 52:
    case 53:
    case 60:
    case 69:
    case 73:
    case 76:
    case 77:
      v19 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v19)
        goto LABEL_389;
      v755 = a1;
      v20 = *(_QWORD *)(a2 + 56) + 32 * v19;
      v21 = *(unsigned __int8 *)(v20 - 32);
      v22 = *(_QWORD *)(v20 - 24);
      v23 = *(_QWORD *)(v20 - 16);
      v24 = *(_QWORD *)(v20 - 8);
      *(_DWORD *)(a2 + 68) = v19 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1305;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v761);
      v32 = v761;
      if (!v761)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D6A8);
      }
      v747 = (int)a3;
      v761 = 0;
      v33 = a2;
      if (*(_DWORD *)v32 == 2)
      {
        WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
        WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
      }
      else
      {
        *(_DWORD *)v32 -= 2;
      }
      v735 = v23;
      v741 = v24;
      v34 = a2;
      v35 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v35)
        goto LABEL_392;
      v36 = v18;
      v37 = *(_QWORD *)(v33 + 56) + 32 * v35;
      v38 = *(unsigned __int8 *)(v37 - 32);
      v40 = *(_QWORD *)(v37 - 24);
      v39 = *(_QWORD *)(v37 - 16);
      v41 = *(_QWORD *)(v37 - 8);
      *(_DWORD *)(v33 + 68) = v35 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1306;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v760);
      v51 = v760;
      if (!v760)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D6B0);
      }
      v760 = 0;
      if (*(_DWORD *)v51 == 2)
      {
        WTF::StringImpl::~StringImpl(v51, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
      }
      else
      {
        *(_DWORD *)v51 -= 2;
      }
      if (v38 != 251 || v40)
        goto LABEL_394;
      if (v21 != 251 || v22)
        goto LABEL_395;
      BYTE8(v783) = 0;
      JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDV_VV(*(_QWORD *)(v33 + 48), v747, a4 & 0x3F | (v36 << 6), v39, v41, v735, v741, (uint64_t *)&v783, v792);
      if (BYTE8(v792[0]))
        goto LABEL_397;
      v57 = *(unsigned int *)(v33 + 68);
      v58 = v755;
      if ((_DWORD)v57 == *(_DWORD *)(v33 + 64))
      {
        v59 = v33 + 56;
        goto LABEL_294;
      }
      v85 = (_OWORD *)(*(_QWORD *)(v33 + 56) + 32 * v57);
      v86 = v783;
      *v85 = xmmword_19915A170;
      v85[1] = v86;
      ++*(_DWORD *)(v33 + 68);
      goto LABEL_295;
    case 2:
    case 16:
    case 46:
    case 71:
      v786 = 0;
      v783 = JSC::Wasm::Types::Void;
      LOBYTE(v785) = 0;
      if ((int)a3 > 45)
      {
        if ((_DWORD)a3 == 46)
        {
          v94 = 4;
        }
        else
        {
          if ((_DWORD)a3 != 71)
          {
LABEL_442:
            __break(0xC471u);
            JUMPOUT(0x198F6D540);
          }
          v94 = 2;
        }
      }
      else if ((_DWORD)a3 == 2)
      {
        v94 = 8;
      }
      else
      {
        v94 = a3;
        if ((_DWORD)a3 != 16)
          goto LABEL_442;
      }
      v407 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v407)
        goto LABEL_402;
      v408 = *(_QWORD *)(a2 + 56) + 32 * v407;
      v409 = *(unsigned __int8 *)(v408 - 32);
      v410 = *(_QWORD *)(v408 - 16);
      v411 = *(_QWORD *)(v408 - 8);
      *(_DWORD *)(a2 + 68) = v407 - 1;
      *(_QWORD *)&v792[0] = "WasmFunctionParser.h:";
      DWORD2(v792[0]) = 21;
      LODWORD(v781) = 1001;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)v792, (unsigned int *)&v781, (int **)&v779);
      v419 = v779;
      if (!v779)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D6D8);
      }
      v779 = 0;
      if (*(_DWORD *)v419 == 2)
      {
        WTF::StringImpl::~StringImpl(v419, v412, v413, v414, v415, v416, v417, v418);
        WTF::fastFree(v440, v441, v442, v443, v444, v445, v446, v447);
      }
      else
      {
        *(_DWORD *)v419 -= 2;
      }
      if (v409 != 251)
      {
        v726 = "load_lane input must be a vector";
        v727 = 33;
        goto LABEL_407;
      }
      JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(v792, a3, a2, &v786, &v783, v400, v401);
      if (BYTE8(v792[0]))
        goto LABEL_401;
      v420 = (v94 - 2) >> 1;
      if (v420 > 7 || ((1 << v420) & 0x8B) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D580);
      }
      v421 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
        goto LABEL_439;
      *(_QWORD *)a2 = v421 + 1;
      v422 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v421);
      if (v422 >= v94)
        goto LABEL_403;
      BYTE8(v792[0]) = 0;
      JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadLane(*(int8x16_t **)(a2 + 48), (int)a3, v784, v785, v410, v411, v786, v422, &v781, (uint64_t *)v792);
LABEL_227:
      if (v782)
        goto LABEL_408;
      v423 = *(unsigned int *)(a2 + 68);
      if ((_DWORD)v423 == *(_DWORD *)(a2 + 64))
      {
        v82 = a2 + 56;
        v83 = &JSC::Wasm::Types::V128;
        v84 = v792;
LABEL_230:
        WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(v82, v83, v84, v76, v77, v78, v79, v80);
      }
      else
      {
        v87 = (__int128 *)(*(_QWORD *)(a2 + 56) + 32 * v423);
        v88 = v792[0];
LABEL_232:
        v306 = xmmword_19915A170;
LABEL_233:
        *v87 = v306;
        v87[1] = v88;
LABEL_234:
        ++*(_DWORD *)(a2 + 68);
      }
      goto LABEL_235;
    case 4:
    case 15:
    case 30:
    case 59:
      v95 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v95)
        goto LABEL_389;
      v96 = *(_QWORD *)(a2 + 56) + 32 * v95;
      v748 = *(unsigned __int8 *)(v96 - 32);
      v97 = *(_QWORD *)(v96 - 16);
      v742 = *(_QWORD *)(v96 - 24);
      v98 = *(_QWORD *)(v96 - 8);
      *(_DWORD *)(a2 + 68) = v95 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1247;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v767);
      v106 = v767;
      if (!v767)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D6C0);
      }
      v107 = (char)a3;
      v767 = 0;
      v108 = a2;
      if (*(_DWORD *)v106 == 2)
      {
        WTF::StringImpl::~StringImpl(v106, v99, v100, v101, v102, v103, v104, v105);
        WTF::fastFree(v424, v425, v426, v427, v428, v429, v430, v431);
      }
      else
      {
        *(_DWORD *)v106 -= 2;
      }
      v732 = v98;
      v736 = v97;
      v755 = a1;
      v34 = a2;
      v109 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v109)
        goto LABEL_392;
      v110 = v18;
      v111 = *(_QWORD *)(v108 + 56) + 32 * v109;
      v112 = *(unsigned __int8 *)(v111 - 32);
      v114 = *(_QWORD *)(v111 - 24);
      v113 = *(_QWORD *)(v111 - 16);
      v115 = *(_QWORD *)(v111 - 8);
      v116 = v34;
      *(_DWORD *)(v34 + 68) = v109 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1248;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v766);
      v124 = v766;
      if (!v766)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D6C8);
      }
      v766 = 0;
      if (*(_DWORD *)v124 == 2)
      {
        WTF::StringImpl::~StringImpl(v124, v117, v118, v119, v120, v121, v122, v123);
        WTF::fastFree(v448, v449, v450, v451, v452, v453, v454, v455);
      }
      else
      {
        *(_DWORD *)v124 -= 2;
      }
      if (v112 != 251 || v114)
        goto LABEL_394;
      if (v748 != 251 || v742)
        goto LABEL_395;
      BYTE8(v783) = 0;
      v125 = *(_QWORD *)(v116 + 48);
      v126 = a6[1];
      v765[0] = *a6;
      v765[1] = v126;
      JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDRelOp(v125, v107, a4 & 0x3F | (v110 << 6), v113, v115, v736, v732, (unsigned int *)v765, v792, (uint64_t *)&v783);
      goto LABEL_140;
    case 7:
      v308 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v308)
      {
        v720 = "val";
        goto LABEL_422;
      }
      v309 = *(_QWORD *)(a2 + 56) + 32 * v308;
      v310 = *(unsigned __int8 *)(v309 - 32);
      v311 = *(JSC::ARM64LogicalImmediate **)(v309 - 16);
      v312 = *(_QWORD *)(v309 - 8);
      *(_DWORD *)(a2 + 68) = v308 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 960;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v780);
      v320 = v780;
      if (!v780)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D730);
      }
      v780 = 0;
      if (*(_DWORD *)v320 == 2)
      {
        WTF::StringImpl::~StringImpl(v320, v313, v314, v315, v316, v317, v318, v319);
        WTF::fastFree(v613, v614, v615, v616, v617, v618, v619, v620);
      }
      else
      {
        *(_DWORD *)v320 -= 2;
      }
      if (v310 != 251)
      {
        v612 = "store vector must be v128";
        goto LABEL_426;
      }
      LODWORD(v781) = 0;
      v783 = JSC::Wasm::Types::Void;
      LOBYTE(v785) = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(v792, 7u, a2, &v781, &v783, *(double *)&JSC::Wasm::Types::Void, a10);
      if (BYTE8(v792[0]))
        goto LABEL_401;
      JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDStore(*(_QWORD *)(a2 + 48), v311, v312, v784, v785, v781, v321, v322, v792);
      goto LABEL_212;
    case 8:
    case 25:
    case 29:
    case 48:
      v786 = 0;
      v783 = JSC::Wasm::Types::Void;
      LOBYTE(v785) = 0;
      if ((int)a3 > 28)
      {
        if ((_DWORD)a3 == 29)
        {
          v94 = 2;
        }
        else
        {
          if ((_DWORD)a3 != 48)
            goto LABEL_441;
          v94 = 8;
        }
      }
      else
      {
        if ((_DWORD)a3 != 8)
        {
          if ((_DWORD)a3 == 25)
          {
            v94 = 4;
            goto LABEL_201;
          }
LABEL_441:
          __break(0xC471u);
          JUMPOUT(0x198F6D520);
        }
        v94 = 16;
      }
LABEL_201:
      v388 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v388)
      {
LABEL_402:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "vector", 7, v792, a10);
        goto LABEL_401;
      }
      v389 = *(_QWORD *)(a2 + 56) + 32 * v388;
      v390 = *(unsigned __int8 *)(v389 - 32);
      v391 = *(_QWORD *)(v389 - 16);
      v392 = *(_QWORD *)(v389 - 8);
      *(_DWORD *)(a2 + 68) = v388 - 1;
      *(_QWORD *)&v792[0] = "WasmFunctionParser.h:";
      DWORD2(v792[0]) = 21;
      LODWORD(v781) = 1043;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)v792, (unsigned int *)&v781, (int **)&v778);
      v402 = v778;
      if (!v778)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D6D0);
      }
      v778 = 0;
      if (*(_DWORD *)v402 == 2)
      {
        WTF::StringImpl::~StringImpl(v402, v393, v394, v395, v396, v397, v398, v399);
        WTF::fastFree(v432, v433, v434, v435, v436, v437, v438, v439);
      }
      else
      {
        *(_DWORD *)v402 -= 2;
      }
      if (v390 != 251)
      {
        v726 = "store_lane input must be a vector";
        v727 = 34;
LABEL_407:
        *(_QWORD *)&v792[0] = v726;
        *((_QWORD *)&v792[0] + 1) = v727;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(&v781, (uint64_t)v792, v400, v401);
LABEL_408:
        v387 = v781;
        goto LABEL_198;
      }
      JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(v792, a3, a2, &v786, &v783, v400, v401);
      if (BYTE8(v792[0]))
      {
LABEL_401:
        v387 = *(void (***)(WTF::StringPrintStream *__hidden))&v792[0];
LABEL_198:
        *(_QWORD *)a1 = v387;
        a1[8] = 1;
        return;
      }
      v404 = (v94 - 2) >> 1;
      if (v404 > 7 || ((1 << v404) & 0x8B) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D560);
      }
      v405 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
      {
LABEL_439:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>("Could not parse the lane index immediate byte.", (unint64_t *)a2, 47, v792, v403);
        goto LABEL_401;
      }
      *(_QWORD *)a2 = v405 + 1;
      v406 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v405);
      if (v406 >= v94)
      {
LABEL_403:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", (unint64_t *)a2, 40, v94, ", expected an ImmLaneIdx", 25, v94, v792, v403);
        goto LABEL_401;
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDStoreLane(*(int8x16_t **)(a2 + 48), (int)a3, v784, v785, v391, v392, v786, v406, v792);
LABEL_212:
      if (BYTE8(v792[0]))
        goto LABEL_401;
LABEL_235:
      *a1 = 0;
      a1[8] = 0;
      return;
    case 11:
    case 51:
      v243 = *(unsigned int *)(a2 + 68);
      if ((_DWORD)v243)
      {
        v244 = *(_QWORD *)(a2 + 56) + 32 * v243;
        v245 = *(unsigned __int8 *)(v244 - 32);
        v247 = *(_QWORD *)(v244 - 16);
        v246 = *(_QWORD *)(v244 - 8);
        *(_DWORD *)(a2 + 68) = v243 - 1;
        *(_QWORD *)&v783 = "WasmFunctionParser.h:";
        DWORD2(v783) = 21;
        LODWORD(v792[0]) = 920;
        WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v788);
        v255 = v788;
        if (!v788)
        {
          __break(0xC471u);
          JUMPOUT(0x198F6D710);
        }
        v751 = (int)a3;
        v788 = 0;
        v180 = a2;
        if (*(_DWORD *)v255 == 2)
        {
          WTF::StringImpl::~StringImpl(v255, v248, v249, v250, v251, v252, v253, v254);
          WTF::fastFree(v498, v499, v500, v501, v502, v503, v504, v505);
        }
        else
        {
          *(_DWORD *)v255 -= 2;
        }
        v181 = (unint64_t *)a2;
        v256 = *(unsigned int *)(a2 + 68);
        if ((_DWORD)v256)
        {
          v257 = v18;
          v258 = *(_QWORD *)(v180 + 56) + 32 * v256;
          v259 = *(unsigned __int8 *)(v258 - 32);
          v261 = *(_QWORD *)(v258 - 16);
          v260 = *(_QWORD *)(v258 - 8);
          *(_DWORD *)(v180 + 68) = v256 - 1;
          *(_QWORD *)&v783 = "WasmFunctionParser.h:";
          DWORD2(v783) = 21;
          LODWORD(v792[0]) = 921;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v787);
          v269 = v787;
          if (!v787)
          {
            __break(0xC471u);
            JUMPOUT(0x198F6D718);
          }
          v787 = 0;
          if (*(_DWORD *)v269 == 2)
          {
            WTF::StringImpl::~StringImpl(v269, v262, v263, v264, v265, v266, v267, v268);
            WTF::fastFree(v530, v531, v532, v533, v534, v535, v536, v537);
          }
          else
          {
            *(_DWORD *)v269 -= 2;
          }
          if (v259 == 251)
          {
            if (v245 == 251)
            {
              BYTE8(v783) = 0;
              JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDExtmul(*(_QWORD *)(v180 + 48), v751, a4 & 0x3F | (v257 << 6), v261, v260, v247, v246, (uint64_t *)&v783, v792);
              goto LABEL_124;
            }
            v612 = "extmul rhs vector must be v128";
          }
          else
          {
            v612 = "extmul lhs vector must be v128";
          }
LABEL_437:
          v725 = 31;
LABEL_400:
          *(_QWORD *)&v783 = v612;
          *((_QWORD *)&v783 + 1) = v725;
          JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))v792, (uint64_t)&v783, v73, a10);
          goto LABEL_401;
        }
        v720 = "lhs";
      }
      else
      {
        v720 = "rhs";
LABEL_422:
        v181 = (unint64_t *)a2;
      }
      v721 = 4;
      goto LABEL_390;
    case 12:
      v323 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v323)
      {
        v720 = "select condition";
        v181 = (unint64_t *)a2;
        v721 = 17;
        goto LABEL_390;
      }
      v324 = *(_QWORD *)(a2 + 56) + 32 * v323;
      v325 = *(unsigned __int8 *)(v324 - 32);
      v326 = *(JSC::ARM64LogicalImmediate **)(v324 - 16);
      v327 = *(_QWORD *)(v324 - 8);
      *(_DWORD *)(a2 + 68) = v323 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 862;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v791);
      v335 = v791;
      if (!v791)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D738);
      }
      v791 = 0;
      if (*(_DWORD *)v335 == 2)
      {
        WTF::StringImpl::~StringImpl(v335, v328, v329, v330, v331, v332, v333, v334);
        WTF::fastFree(v621, v622, v623, v624, v625, v626, v627, v628);
      }
      else
      {
        *(_DWORD *)v335 -= 2;
      }
      switch((int)a4)
      {
        case 1:
        case 2:
        case 3:
          if (v325 == 255)
            goto LABEL_167;
          goto LABEL_329;
        case 4:
          if (v325 != 254)
            goto LABEL_329;
          goto LABEL_167;
        case 5:
          if (v325 != 253)
            goto LABEL_329;
          goto LABEL_167;
        case 6:
          if (v325 == 252)
          {
LABEL_167:
            BYTE8(v783) = 0;
            JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDSplat(*(int8x16_t **)(a2 + 48), a4, v326, v327, (uint64_t)&v783, v332, v333, v334, v792);
            goto LABEL_31;
          }
LABEL_329:
          v612 = "Wrong type to SIMD splat";
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F6D620);
      }
      goto LABEL_418;
    case 13:
    case 14:
    case 27:
    case 37:
    case 50:
    case 61:
      v786 = 0;
      v783 = JSC::Wasm::Types::Void;
      LOBYTE(v785) = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(v792, a3, a2, &v786, &v783, *(double *)&JSC::Wasm::Types::Void, a10);
      if (BYTE8(v792[0]))
        goto LABEL_401;
      BYTE8(v792[0]) = 0;
      JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadExtend(*(int8x16_t **)(a2 + 48), a3, v784, v785, v786, (uint64_t)v792, v89, v90, &v781);
      goto LABEL_227;
    case 17:
    case 68:
      v167 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v167)
      {
        v720 = "shift i32";
        v181 = (unint64_t *)a2;
        v721 = 10;
        goto LABEL_390;
      }
      v168 = *(_QWORD *)(a2 + 56) + 32 * v167;
      v169 = *(unsigned __int8 *)(v168 - 32);
      v171 = *(_QWORD *)(v168 - 16);
      v170 = *(_QWORD *)(v168 - 8);
      *(_DWORD *)(a2 + 68) = v167 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 899;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v790);
      v179 = v790;
      if (!v790)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D6E8);
      }
      v749 = (int)a3;
      v790 = 0;
      v180 = a2;
      if (*(_DWORD *)v179 == 2)
      {
        WTF::StringImpl::~StringImpl(v179, v172, v173, v174, v175, v176, v177, v178);
        WTF::fastFree(v482, v483, v484, v485, v486, v487, v488, v489);
      }
      else
      {
        *(_DWORD *)v179 -= 2;
      }
      v181 = (unint64_t *)a2;
      v182 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v182)
      {
        v720 = "shift vector";
        v721 = 13;
        goto LABEL_390;
      }
      v183 = v18;
      v184 = *(_QWORD *)(v180 + 56) + 32 * v182;
      v185 = *(unsigned __int8 *)(v184 - 32);
      v187 = *(_QWORD *)(v184 - 16);
      v186 = *(_QWORD *)(v184 - 8);
      *(_DWORD *)(v180 + 68) = v182 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 900;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v789);
      v195 = v789;
      if (!v789)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D6F0);
      }
      v789 = 0;
      if (*(_DWORD *)v195 == 2)
      {
        WTF::StringImpl::~StringImpl(v195, v188, v189, v190, v191, v192, v193, v194);
        WTF::fastFree(v514, v515, v516, v517, v518, v519, v520, v521);
      }
      else
      {
        *(_DWORD *)v195 -= 2;
      }
      if (v185 != 251)
      {
        v612 = "Shift vector must be v128";
LABEL_426:
        v725 = 26;
        goto LABEL_400;
      }
      if (v169 != 255)
      {
        v612 = "Shift amount must be i32";
LABEL_418:
        v725 = 25;
        goto LABEL_400;
      }
      BYTE8(v783) = 0;
      JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDShift(*(_QWORD *)(v180 + 48), v749, a4 & 0x3F | (v183 << 6), v187, v186, v171, v170, (uint64_t *)&v783, v792);
LABEL_124:
      if (BYTE8(v792[0]))
        goto LABEL_401;
      v270 = *(unsigned int *)(v180 + 68);
      if ((_DWORD)v270 == *(_DWORD *)(v180 + 64))
      {
        v82 = v180 + 56;
        goto LABEL_34;
      }
      v304 = (_OWORD *)(*(_QWORD *)(v180 + 56) + 32 * v270);
      v305 = v783;
      *v304 = xmmword_19915A170;
      v304[1] = v305;
      ++*(_DWORD *)(v180 + 68);
      goto LABEL_235;
    case 19:
      v336 = *(_QWORD *)a2 + 16;
      if (*(_QWORD *)(a2 + 16) < v336)
      {
        v337 = "can't parse 128-bit vector constant";
        v338 = (unint64_t *)a2;
        v339 = 36;
        goto LABEL_174;
      }
      v456 = (uint64_t *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      v457 = *v456;
      v458 = v456[1];
      *(_QWORD *)a2 = v336;
      v459 = JSC::Wasm::BBQJITImpl::BBQJIT::addConstant(v12, v457, v458, v16, a5, (uint64_t)a6, a7, a8);
      *(_QWORD *)&v783 = v459;
      *((_QWORD *)&v783 + 1) = v460;
      v466 = *(unsigned int *)(a2 + 68);
      if ((_DWORD)v466 != *(_DWORD *)(a2 + 64))
      {
        v467 = *(_QWORD *)(a2 + 56) + 32 * v466;
        *(_OWORD *)v467 = xmmword_19915A170;
        *(_QWORD *)(v467 + 16) = v459;
        *(_QWORD *)(v467 + 24) = v460;
        goto LABEL_234;
      }
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a2 + 56, &JSC::Wasm::Types::V128, &v783, v461, v462, v463, v464, v465);
      goto LABEL_235;
    case 22:
    case 33:
      v271 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v271)
        goto LABEL_389;
      v272 = *(_QWORD *)(a2 + 56) + 32 * v271;
      v752 = *(unsigned __int8 *)(v272 - 32);
      v273 = *(_QWORD *)(v272 - 16);
      v744 = *(_QWORD *)(v272 - 24);
      v274 = *(_QWORD *)(v272 - 8);
      *(_DWORD *)(a2 + 68) = v271 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1267;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v764);
      v282 = v764;
      if (!v764)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D720);
      }
      v283 = (char)a3;
      v764 = 0;
      v284 = a2;
      if (*(_DWORD *)v282 == 2)
      {
        WTF::StringImpl::~StringImpl(v282, v275, v276, v277, v278, v279, v280, v281);
        WTF::fastFree(v506, v507, v508, v509, v510, v511, v512, v513);
      }
      else
      {
        *(_DWORD *)v282 -= 2;
      }
      v734 = v274;
      v738 = v273;
      v755 = a1;
      v34 = a2;
      v285 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v285)
        goto LABEL_392;
      v286 = v18;
      v287 = *(_QWORD *)(v284 + 56) + 32 * v285;
      v288 = *(unsigned __int8 *)(v287 - 32);
      v290 = *(_QWORD *)(v287 - 24);
      v289 = *(_QWORD *)(v287 - 16);
      v291 = *(_QWORD *)(v287 - 8);
      v116 = v34;
      *(_DWORD *)(v34 + 68) = v285 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1268;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v763);
      v299 = v763;
      if (!v763)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D728);
      }
      v763 = 0;
      if (*(_DWORD *)v299 == 2)
      {
        WTF::StringImpl::~StringImpl(v299, v292, v293, v294, v295, v296, v297, v298);
        WTF::fastFree(v538, v539, v540, v541, v542, v543, v544, v545);
      }
      else
      {
        *(_DWORD *)v299 -= 2;
      }
      if (v288 != 251 || v290)
        goto LABEL_394;
      if (v752 != 251 || v744)
        goto LABEL_395;
      BYTE8(v783) = 0;
      v300 = *(_QWORD *)(v116 + 48);
      v301 = a6[1];
      v762[0] = *a6;
      v762[1] = v301;
      JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDRelOp(v300, v283, a4 & 0x3F | (v286 << 6), v289, v291, v738, v734, (unsigned int *)v762, v792, (uint64_t *)&v783);
LABEL_140:
      if (BYTE8(v792[0]))
        goto LABEL_397;
      v302 = *(unsigned int *)(v116 + 68);
      v58 = v755;
      if ((_DWORD)v302 == *(_DWORD *)(v116 + 64))
      {
        v59 = v116 + 56;
        goto LABEL_294;
      }
      v303 = (_OWORD *)(*(_QWORD *)(v116 + 56) + 32 * v302);
      *v303 = xmmword_19915A170;
      v303[1] = v783;
      ++*(_DWORD *)(v116 + 68);
      goto LABEL_295;
    case 34:
    case 35:
    case 40:
    case 56:
    case 70:
      v786 = 0;
      v783 = JSC::Wasm::Types::Void;
      LOBYTE(v785) = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(v792, a3, a2, &v786, &v783, *(double *)&JSC::Wasm::Types::Void, a10);
      if (BYTE8(v792[0]))
        goto LABEL_401;
      BYTE8(v792[0]) = 0;
      if ((_DWORD)a3 == 40)
        JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoad(*(_QWORD *)(a2 + 48), v784, v785, v786, (uint64_t)v792, v91, v92, v93, &v781);
      else
        JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadSplat(*(int8x16_t **)(a2 + 48), (int)a3, v784, v785, v786, (uint64_t *)v792, v92, v93, &v781);
      goto LABEL_227;
    case 36:
    case 64:
      v786 = 0;
      v783 = JSC::Wasm::Types::Void;
      LOBYTE(v785) = 0;
      JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(v792, a3, a2, &v786, &v783, *(double *)&JSC::Wasm::Types::Void, a10);
      if (BYTE8(v792[0]))
        goto LABEL_401;
      BYTE8(v792[0]) = 0;
      JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadPad(*(int8x16_t **)(a2 + 48), a3, v784, v785, v786, (uint64_t)v792, v196, v197, &v781);
      goto LABEL_227;
    case 41:
      v340 = *(_QWORD *)a2 + 16;
      if (*(_QWORD *)(a2 + 16) < v340)
      {
        v337 = "can't parse 128-bit shuffle immediate";
        v338 = (unint64_t *)a2;
        v339 = 38;
        goto LABEL_174;
      }
      v468 = (unint64_t *)(*(_QWORD *)(a2 + 8) + *(_QWORD *)a2);
      v469 = *v468;
      v470 = v468[1];
      *(_QWORD *)a2 = v340;
      v471 = HIBYTE(v469);
      switch((int)a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198F6D680);
        case 1:
          if (v469 <= 0x1Fu
            && BYTE1(v469) <= 0x1Fu
            && BYTE2(v469) <= 0x1Fu
            && BYTE3(v469) <= 0x1Fu
            && BYTE4(v469) <= 0x1Fu
            && BYTE5(v469) <= 0x1Fu
            && BYTE6(v469) <= 0x1Fu
            && v471 <= 0x1F
            && (v470 & 0xE0) == 0
            && (v470 & 0xE000) == 0
            && (v470 & 0xE00000) == 0
            && (v470 & 0xE0000000) == 0
            && (v470 & 0xE000000000) == 0
            && (v470 & 0xE00000000000) == 0
            && (v470 & 0xE0000000000000) == 0
            && !(v470 >> 61))
          {
            goto LABEL_373;
          }
          goto LABEL_404;
        case 2:
          if (v469 > 0xFu
            || BYTE1(v469) > 0xFu
            || BYTE2(v469) > 0xFu
            || BYTE3(v469) > 0xFu
            || BYTE4(v469) > 0xFu
            || BYTE5(v469) > 0xFu
            || BYTE6(v469) > 0xFu
            || v471 > 0xF
            || (v470 & 0xF0) != 0
            || (v470 & 0xF000) != 0
            || (v470 & 0xF00000) != 0
            || (v470 & 0xF0000000) != 0
            || (v470 & 0xF000000000) != 0
            || (v470 & 0xF00000000000) != 0
            || (v470 & 0xF0000000000000) != 0
            || v470 >> 60)
          {
            goto LABEL_404;
          }
          goto LABEL_373;
        case 3:
        case 5:
          if (v469 > 7u
            || BYTE1(v469) > 7u
            || BYTE2(v469) > 7u
            || BYTE3(v469) > 7u
            || BYTE4(v469) > 7u
            || BYTE5(v469) > 7u
            || BYTE6(v469) > 7u
            || v471 > 7
            || (v470 & 0xF8) != 0
            || (v470 & 0xF800) != 0
            || (v470 & 0xF80000) != 0
            || (v470 & 0xF8000000) != 0
            || (v470 & 0xF800000000) != 0
            || (v470 & 0xF80000000000) != 0
            || (v470 & 0xF8000000000000) != 0
            || v470 >> 59)
          {
            goto LABEL_404;
          }
          goto LABEL_373;
        case 4:
        case 6:
          if (v469 > 3u
            || BYTE1(v469) > 3u
            || BYTE2(v469) > 3u
            || BYTE3(v469) > 3u
            || BYTE4(v469) > 3u
            || BYTE5(v469) > 3u
            || BYTE6(v469) > 3u
            || v471 > 3
            || (v470 & 0xFC) != 0
            || (v470 & 0xFC00) != 0
            || (v470 & 0xFC0000) != 0
            || (v470 & 0xFC000000) != 0
            || (v470 & 0xFC00000000) != 0
            || (v470 & 0xFC0000000000) != 0
            || (v470 & 0xFC000000000000) != 0
            || v470 >> 58)
          {
LABEL_404:
            JSC::Wasm::ParserBase::fail<>((unint64_t *)a2, &v783);
            goto LABEL_197;
          }
LABEL_373:
          v677 = *(unsigned int *)(a2 + 68);
          if (!(_DWORD)v677)
            goto LABEL_389;
          v678 = *(_QWORD *)(a2 + 56) + 32 * v677;
          v679 = *(unsigned __int8 *)(v678 - 32);
          v680 = *(_QWORD *)(v678 - 16);
          v681 = *(_QWORD *)(v678 - 8);
          *(_DWORD *)(a2 + 68) = v677 - 1;
          *(_QWORD *)&v783 = "WasmFunctionParser.h:";
          DWORD2(v783) = 21;
          LODWORD(v792[0]) = 1111;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v777);
          v689 = v777;
          if (!v777)
          {
            __break(0xC471u);
            JUMPOUT(0x198F6D770);
          }
          v777 = 0;
          if (*(_DWORD *)v689 == 2)
          {
            WTF::StringImpl::~StringImpl(v689, v682, v683, v684, v685, v686, v687, v688);
            WTF::fastFree(v704, v705, v706, v707, v708, v709, v710, v711);
          }
          else
          {
            *(_DWORD *)v689 -= 2;
          }
          if (v679 != 251)
            goto LABEL_436;
          v690 = *(unsigned int *)(a2 + 68);
          if (!(_DWORD)v690)
            goto LABEL_389;
          v691 = *(_QWORD *)(a2 + 56) + 32 * v690;
          v692 = *(unsigned __int8 *)(v691 - 32);
          v693 = *(_QWORD *)(v691 - 16);
          v694 = *(_QWORD *)(v691 - 8);
          *(_DWORD *)(a2 + 68) = v690 - 1;
          *(_QWORD *)&v783 = "WasmFunctionParser.h:";
          DWORD2(v783) = 21;
          LODWORD(v792[0]) = 1113;
          WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v776);
          v702 = v776;
          if (!v776)
          {
            __break(0xC471u);
            JUMPOUT(0x198F6D778);
          }
          v776 = 0;
          if (*(_DWORD *)v702 == 2)
          {
            WTF::StringImpl::~StringImpl(v702, v695, v696, v697, v698, v699, v700, v701);
            WTF::fastFree(v712, v713, v714, v715, v716, v717, v718, v719);
          }
          else
          {
            *(_DWORD *)v702 -= 2;
          }
          if (v692 != 251)
          {
LABEL_436:
            v612 = "shuffle input must be a vector";
            goto LABEL_437;
          }
          BYTE8(v783) = 0;
          JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDShuffle(*(int8x16_t **)(a2 + 48), v469, v470, v693, v694, v680, v681, (uint64_t *)&v783, v792);
          if (BYTE8(v792[0]))
            goto LABEL_401;
          v703 = *(unsigned int *)(a2 + 68);
          if ((_DWORD)v703 != *(_DWORD *)(a2 + 64))
          {
            v87 = (__int128 *)(*(_QWORD *)(a2 + 56) + 32 * v703);
            v88 = v783;
            goto LABEL_232;
          }
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F6D6A0);
      }
LABEL_33:
      v82 = a2 + 56;
LABEL_34:
      v83 = &JSC::Wasm::Types::V128;
      goto LABEL_35;
    case 44:
    case 57:
    case 74:
      v143 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v143)
        goto LABEL_389;
      v144 = *(_QWORD *)(a2 + 56) + 32 * v143;
      v145 = *(unsigned __int8 *)(v144 - 32);
      v146 = *(_QWORD *)(v144 - 24);
      v147 = *(_QWORD *)(v144 - 16);
      v148 = *(_QWORD *)(v144 - 8);
      *(_DWORD *)(a2 + 68) = v143 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1172;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v772);
      v156 = v772;
      if (!v772)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D6E0);
      }
      v772 = 0;
      if (*(_DWORD *)v156 == 2)
      {
        WTF::StringImpl::~StringImpl(v156, v149, v150, v151, v152, v153, v154, v155);
        WTF::fastFree(v474, v475, v476, v477, v478, v479, v480, v481);
      }
      else
      {
        *(_DWORD *)v156 -= 2;
      }
      if (v145 != 251 || v146 != 0)
        goto LABEL_399;
      BYTE8(v783) = 0;
      JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDI_V(*(_QWORD *)(a2 + 48), (int)a3, a4 & 0x3F | (v18 << 6), v147, v148, (uint64_t *)&v783, v154, v155, v792);
      if (BYTE8(v792[0]))
        goto LABEL_401;
      v158 = *(unsigned int *)(a2 + 68);
      if ((_DWORD)v158 != *(_DWORD *)(a2 + 64))
      {
        v87 = (__int128 *)(*(_QWORD *)(a2 + 56) + 32 * v158);
        v88 = v783;
        v306 = xmmword_19915A130;
        goto LABEL_233;
      }
      v82 = a2 + 56;
      v83 = &JSC::Wasm::Types::I32;
LABEL_35:
      v84 = &v783;
      goto LABEL_230;
    case 65:
      v307 = 16;
      switch((int)a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198F6D600);
        case 1:
          break;
        case 2:
          v307 = 8;
          break;
        case 3:
        case 5:
          v307 = 4;
          break;
        case 4:
        case 6:
          v307 = 2;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F6D660);
      }
      v588 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
        goto LABEL_440;
      *(_QWORD *)a2 = v588 + 1;
      v589 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v588);
      if (v589 >= v307)
        goto LABEL_411;
      v590 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v590)
      {
LABEL_389:
        v720 = "vector argument";
        v181 = (unint64_t *)a2;
        v721 = 16;
LABEL_390:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", v181, 26, v720, v721, &v783, a10);
        goto LABEL_197;
      }
      v591 = *(_QWORD *)(a2 + 56) + 32 * v590;
      v592 = *(unsigned __int8 *)(v591 - 32);
      v593 = *(_QWORD *)(v591 - 24);
      v594 = *(_QWORD *)(v591 - 16);
      v595 = *(_QWORD *)(v591 - 8);
      *(_DWORD *)(a2 + 68) = v590 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1132;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v775);
      v603 = v775;
      if (!v775)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D768);
      }
      v775 = 0;
      if (*(_DWORD *)v603 == 2)
      {
        WTF::StringImpl::~StringImpl(v603, v596, v597, v598, v599, v600, v601, v602);
        WTF::fastFree(v653, v654, v655, v656, v657, v658, v659, v660);
      }
      else
      {
        *(_DWORD *)v603 -= 2;
      }
      if (v592 != 251 || v593)
      {
LABEL_399:
        v612 = "type mismatch for argument 0";
        v725 = 29;
        goto LABEL_400;
      }
      BYTE8(v783) = 0;
      JSC::Wasm::BBQJITImpl::BBQJIT::addExtractLane(*(_QWORD *)(a2 + 48), a4 | (v18 << 6), v589, v594, v595, (uint64_t *)&v783, v601, v602, v792);
      if (BYTE8(v792[0]))
        goto LABEL_401;
      if (((_DWORD)a4 - 1) >= 6)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D5C0);
      }
      v609 = qword_19919F680[(char)((_BYTE)a4 - 1)];
      v792[0] = v609;
      v610 = *(unsigned int *)(a2 + 68);
      if ((_DWORD)v610 != *(_DWORD *)(a2 + 64))
      {
        v611 = *(_QWORD *)(a2 + 56) + 32 * v610;
        *(_QWORD *)v611 = v609;
        *(_QWORD *)(v611 + 8) = 0;
        *(_OWORD *)(v611 + 16) = v783;
        goto LABEL_234;
      }
      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a2 + 56, v792, &v783, v604, v605, v606, v607, v608);
      goto LABEL_235;
    case 66:
      v307 = 16;
      switch((int)a4)
      {
        case 0:
          __break(0xC471u);
          JUMPOUT(0x198F6D5E0);
        case 1:
          break;
        case 2:
          v307 = 8;
          break;
        case 3:
        case 5:
          v307 = 4;
          break;
        case 4:
        case 6:
          v307 = 2;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F6D640);
      }
      v554 = *(_QWORD *)a2;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 16))
      {
LABEL_440:
        v337 = "Could not parse the lane index immediate byte.";
        v338 = (unint64_t *)a2;
        v339 = 47;
LABEL_174:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v337, v338, v339, &v783, a10);
      }
      else
      {
        *(_QWORD *)a2 = v554 + 1;
        v555 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v554);
        if (v555 < v307)
        {
          v755 = a1;
          v556 = *(unsigned int *)(a2 + 68);
          if ((_DWORD)v556)
          {
            v557 = *(_QWORD *)(a2 + 56) + 32 * v556;
            v559 = *(_QWORD *)(v557 - 32);
            v558 = *(_QWORD *)(v557 - 24);
            v560 = *(_QWORD *)(v557 - 16);
            v561 = *(_QWORD *)(v557 - 8);
            *(_DWORD *)(a2 + 68) = v556 - 1;
            *(_QWORD *)&v783 = "WasmFunctionParser.h:";
            DWORD2(v783) = 21;
            LODWORD(v792[0]) = 1152;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v774);
            v569 = v774;
            if (!v774)
            {
              __break(0xC471u);
              JUMPOUT(0x198F6D758);
            }
            v754 = v559;
            v774 = 0;
            v570 = a2;
            if (*(_DWORD *)v569 == 2)
            {
              WTF::StringImpl::~StringImpl(v569, v562, v563, v564, v565, v566, v567, v568);
              WTF::fastFree(v645, v646, v647, v648, v649, v650, v651, v652);
            }
            else
            {
              *(_DWORD *)v569 -= 2;
            }
            v740 = v555;
            v746 = v561;
            v34 = a2;
            v571 = *(unsigned int *)(a2 + 68);
            if ((_DWORD)v571)
            {
              v572 = v18;
              v573 = *(_QWORD *)(v570 + 56) + 32 * v571;
              v574 = *(unsigned __int8 *)(v573 - 32);
              v575 = *(_QWORD *)(v573 - 24);
              v576 = *(_QWORD *)(v573 - 16);
              v577 = *(_QWORD *)(v573 - 8);
              v232 = v34;
              *(_DWORD *)(v34 + 68) = v571 - 1;
              *(_QWORD *)&v783 = "WasmFunctionParser.h:";
              DWORD2(v783) = 21;
              LODWORD(v792[0]) = 1153;
              WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v773);
              v585 = v773;
              if (!v773)
              {
                __break(0xC471u);
                JUMPOUT(0x198F6D760);
              }
              v773 = 0;
              if (*(_DWORD *)v585 == 2)
              {
                WTF::StringImpl::~StringImpl(v585, v578, v579, v580, v581, v582, v583, v584);
                WTF::fastFree(v669, v670, v671, v672, v673, v674, v675, v676);
              }
              else
              {
                *(_DWORD *)v585 -= 2;
              }
              if (v574 != 251 || v575)
              {
LABEL_394:
                v724 = "type mismatch for argument 1";
              }
              else
              {
                if (((_DWORD)a4 - 1) >= 6)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198F6D5A0);
                }
                if ((0xFCFDFEFFFFFFuLL >> (8 * (a4 - 1))) == v754 && !v558)
                {
                  BYTE8(v783) = 0;
                  JSC::Wasm::BBQJITImpl::BBQJIT::addReplaceLane(*(_QWORD *)(v232 + 48), a4 | (v572 << 6), v740, v576, v577, v560, v746, (uint64_t *)&v783, v792);
                  if (!BYTE8(v792[0]))
                  {
                    v241 = *(unsigned int *)(v232 + 68);
                    v242 = (_DWORD)v241 == *(_DWORD *)(v232 + 64);
                    v58 = v755;
LABEL_291:
                    if (v242)
                    {
                      v59 = v232 + 56;
LABEL_294:
                      WTF::Vector<JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression,16ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Type &,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(v59, &JSC::Wasm::Types::V128, &v783, v52, v53, v54, v55, v56);
                    }
                    else
                    {
                      v586 = (_OWORD *)(*(_QWORD *)(v232 + 56) + 32 * v241);
                      v587 = v783;
                      *v586 = xmmword_19915A170;
                      v586[1] = v587;
                      ++*(_DWORD *)(v232 + 68);
                    }
                    goto LABEL_295;
                  }
                  goto LABEL_397;
                }
LABEL_395:
                v724 = "type mismatch for argument 0";
              }
LABEL_396:
              *(_QWORD *)&v783 = v724;
              *((_QWORD *)&v783 + 1) = 29;
              JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))v792, (uint64_t)&v783, v49, v50);
LABEL_397:
              v723 = *(_QWORD *)&v792[0];
              goto LABEL_398;
            }
LABEL_392:
            v722 = "vector argument";
          }
          else
          {
            v722 = "scalar argument";
LABEL_428:
            v34 = a2;
          }
          JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)v34, 26, v722, 16, &v783, a10);
          v723 = v783;
LABEL_398:
          *(_QWORD *)v755 = v723;
          v755[8] = 1;
          return;
        }
LABEL_411:
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,unsigned char,WTF::ASCIILiteral,unsigned char>("Lane index immediate is too large, saw ", (unint64_t *)a2, 40, v307, ", expected an ImmLaneIdx", 25, v307, &v783, a10);
      }
LABEL_197:
      v387 = (void (**)(WTF::StringPrintStream *__hidden))v783;
      goto LABEL_198;
    case 72:
      v341 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v341)
        goto LABEL_389;
      v342 = *(_QWORD *)(a2 + 56) + 32 * v341;
      v343 = *(unsigned __int8 *)(v342 - 32);
      v345 = *(_QWORD *)(v342 - 24);
      v344 = *(_QWORD *)(v342 - 16);
      v346 = *(_QWORD *)(v342 - 8);
      *(_DWORD *)(a2 + 68) = v341 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1223;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v770);
      v354 = v770;
      if (!v770)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D740);
      }
      v770 = 0;
      if (*(_DWORD *)v354 == 2)
      {
        WTF::StringImpl::~StringImpl(v354, v347, v348, v349, v350, v351, v352, v353);
        WTF::fastFree(v629, v630, v631, v632, v633, v634, v635, v636);
      }
      else
      {
        *(_DWORD *)v354 -= 2;
      }
      v355 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v355)
        goto LABEL_389;
      v356 = *(_QWORD *)(a2 + 56) + 32 * v355;
      v756 = *(unsigned __int8 *)(v356 - 32);
      v357 = *(_QWORD *)(v356 - 24);
      v358 = *(_QWORD *)(v356 - 16);
      v359 = *(_QWORD *)(v356 - 8);
      *(_DWORD *)(a2 + 68) = v355 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1224;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v769);
      v368 = v769;
      if (!v769)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D748);
      }
      v769 = 0;
      v745 = v344;
      v753 = v346;
      if (*(_DWORD *)v368 == 2)
      {
        WTF::StringImpl::~StringImpl(v368, v360, v361, v362, v363, v364, v365, v366);
        WTF::fastFree(v637, v638, v639, v640, v641, v642, v643, v644);
      }
      else
      {
        *(_DWORD *)v368 -= 2;
      }
      v739 = v359;
      v58 = a1;
      v369 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v369)
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a2, 26, "vector argument", 16, &v783, v367);
        v728 = v783;
        goto LABEL_435;
      }
      v370 = v357;
      v371 = *(_QWORD *)(a2 + 56) + 32 * v369;
      v372 = *(unsigned __int8 *)(v371 - 32);
      v374 = *(_QWORD *)(v371 - 24);
      v373 = *(_QWORD *)(v371 - 16);
      v375 = *(_QWORD *)(v371 - 8);
      *(_DWORD *)(a2 + 68) = v369 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1225;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v768);
      v385 = v768;
      if (!v768)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D750);
      }
      v768 = 0;
      if (*(_DWORD *)v385 == 2)
      {
        WTF::StringImpl::~StringImpl(v385, v376, v377, v378, v379, v380, v381, v382);
        WTF::fastFree(v661, v662, v663, v664, v665, v666, v667, v668);
      }
      else
      {
        *(_DWORD *)v385 -= 2;
      }
      if (v372 != 251 || v374)
      {
        v729 = "type mismatch for argument 2";
      }
      else if (v756 != 251 || v370)
      {
        v729 = "type mismatch for argument 1";
      }
      else
      {
        if (v343 == 251 && !v345)
        {
          BYTE8(v783) = 0;
          JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDBitwiseSelect(*(_QWORD *)(a2 + 48), v373, v375, v358, v739, v745, v753, (uint64_t *)&v783, v792);
          if (BYTE8(v792[0]))
            goto LABEL_434;
          v386 = *(unsigned int *)(a2 + 68);
          if ((_DWORD)v386 == *(_DWORD *)(a2 + 64))
          {
            v59 = a2 + 56;
            goto LABEL_294;
          }
          v472 = (_OWORD *)(*(_QWORD *)(a2 + 56) + 32 * v386);
          v473 = v783;
          *v472 = xmmword_19915A170;
          v472[1] = v473;
          ++*(_DWORD *)(a2 + 68);
LABEL_295:
          *v58 = 0;
          v58[8] = 0;
          return;
        }
        v729 = "type mismatch for argument 0";
      }
      *(_QWORD *)&v783 = v729;
      *((_QWORD *)&v783 + 1) = 29;
      JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>((void (***)(WTF::StringPrintStream *__hidden))v792, (uint64_t)&v783, v383, v384);
      goto LABEL_434;
    case 79:
    case 80:
      v198 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v198)
        goto LABEL_389;
      v199 = *(_QWORD *)(a2 + 56) + 32 * v198;
      v200 = *(unsigned __int8 *)(v199 - 32);
      v202 = *(_QWORD *)(v199 - 24);
      v201 = *(_QWORD *)(v199 - 16);
      v203 = *(_QWORD *)(v199 - 8);
      *(_DWORD *)(a2 + 68) = v198 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1325;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v759);
      v211 = v759;
      if (!v759)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D6F8);
      }
      v759 = 0;
      if (*(_DWORD *)v211 == 2)
      {
        WTF::StringImpl::~StringImpl(v211, v204, v205, v206, v207, v208, v209, v210);
        WTF::fastFree(v490, v491, v492, v493, v494, v495, v496, v497);
      }
      else
      {
        *(_DWORD *)v211 -= 2;
      }
      v755 = a1;
      v212 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v212)
      {
        v722 = "vector argument";
        goto LABEL_428;
      }
      v213 = *(_QWORD *)(a2 + 56) + 32 * v212;
      v750 = *(unsigned __int8 *)(v213 - 32);
      v214 = *(_QWORD *)(v213 - 16);
      v743 = *(_QWORD *)(v213 - 24);
      v730 = *(_QWORD *)(v213 - 8);
      *(_DWORD *)(a2 + 68) = v212 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1326;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v758);
      v222 = v758;
      if (!v758)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D700);
      }
      v223 = (int)a3;
      v758 = 0;
      v737 = v203;
      v224 = a2;
      if (*(_DWORD *)v222 == 2)
      {
        WTF::StringImpl::~StringImpl(v222, v215, v216, v217, v218, v219, v220, v221);
        WTF::fastFree(v522, v523, v524, v525, v526, v527, v528, v529);
      }
      else
      {
        *(_DWORD *)v222 -= 2;
      }
      v731 = v214;
      v733 = v201;
      v34 = a2;
      v225 = *(unsigned int *)(a2 + 68);
      if (!(_DWORD)v225)
        goto LABEL_392;
      v226 = v18;
      v227 = *(_QWORD *)(v224 + 56) + 32 * v225;
      v228 = *(unsigned __int8 *)(v227 - 32);
      v229 = *(_QWORD *)(v227 - 24);
      v230 = *(_QWORD *)(v227 - 16);
      v231 = *(_QWORD *)(v227 - 8);
      v232 = v34;
      *(_DWORD *)(v34 + 68) = v225 - 1;
      *(_QWORD *)&v783 = "WasmFunctionParser.h:";
      DWORD2(v783) = 21;
      LODWORD(v792[0]) = 1327;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v783, (unsigned int *)v792, (int **)&v757);
      v240 = v757;
      if (!v757)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6D708);
      }
      v757 = 0;
      if (*(_DWORD *)v240 == 2)
      {
        WTF::StringImpl::~StringImpl(v240, v233, v234, v235, v236, v237, v238, v239);
        WTF::fastFree(v546, v547, v548, v549, v550, v551, v552, v553);
      }
      else
      {
        *(_DWORD *)v240 -= 2;
      }
      if (v228 != 251 || v229)
        goto LABEL_395;
      if (v750 != 251 || v743)
        goto LABEL_394;
      if (v200 != 251 || v202)
      {
        v724 = "type mismatch for argument 2";
        goto LABEL_396;
      }
      BYTE8(v783) = 0;
      JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDRelaxedFMA(*(_QWORD *)(v232 + 48), v223, a4 & 0x3F | (v226 << 6), v230, v231, v731, v730, v239, v792, v733, v737, (uint64_t *)&v783);
      v58 = v755;
      if (!BYTE8(v792[0]))
      {
        v241 = *(unsigned int *)(v232 + 68);
        v242 = (_DWORD)v241 == *(_DWORD *)(v232 + 64);
        goto LABEL_291;
      }
LABEL_434:
      v728 = *(_QWORD *)&v792[0];
LABEL_435:
      *(_QWORD *)v58 = v728;
      v58[8] = 1;
      return;
    default:
      JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,JSC::SIMDLaneOperationDump>("invalid simd op ", (unint64_t *)a2, 17, (char)a3, &v783, a10);
      goto LABEL_197;
  }
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::validationFail<WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,JSC::Wasm::Type,WTF::ASCIILiteral,unsigned int>(void (***a1)(WTF::StringPrintStream *__hidden this), uint64_t a2, uint64_t a3, JSC::Wasm::Type *a4, uint64_t a5, JSC::Wasm::Type *a6, uint64_t a7, _DWORD *a8, double a9, float a10)
{
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  double v28;
  float v29;
  float v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  double v42;
  float v43;
  float v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WTF *v64;
  WTF::PrintStream *v65;
  float v66;
  double v67;
  const WTF::String *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  const WTF::String *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  float v82;
  const WTF::String *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  float v90;
  const WTF::String *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  float v98;
  const WTF::String *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  float v106;
  const WTF::String *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  float v114;
  WTF::AtomStringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  int v184;
  char v185;
  void (**v186)(WTF::StringPrintStream *__hidden);
  WTF *v187;
  __int128 v188;
  _BYTE v189[128];
  void (**v190)(WTF::StringPrintStream *__hidden);
  WTF *v191;
  __int128 v192;
  _BYTE v193[128];
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  v186 = off_1E3572250;
  v187 = (WTF *)v189;
  v188 = xmmword_199122F80;
  v189[0] = 0;
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (*(_QWORD *)a3)
  {
    v16 = *(_QWORD *)(a3 + 8);
    v17 = v16 != 0;
    v18 = v16 - 1;
    if (!v17)
      v18 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a3, v18, (uint64_t)&v183, a10);
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    *(_BYTE *)(v19 + 16) = 0;
    v183 = (WTF::StringImpl *)v19;
    v184 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v183);
  if (v184 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v184])(&v182, &v183);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v27 = v191;
  if (!v191)
  {
    v182 = 0;
    goto LABEL_12;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v182);
  v27 = v191;
  if (v191 != (WTF *)v193)
LABEL_12:
    WTF::fastFree((unint64_t)v27, v20, v21, v22, v23, v24, v25, v26);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v181, a2, a4, v28, v29);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (*(_QWORD *)a5)
  {
    v31 = *(_QWORD *)(a5 + 8);
    v17 = v31 != 0;
    v32 = v31 - 1;
    if (!v17)
      v32 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a5, v32, (uint64_t)&v183, v30);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    v183 = (WTF::StringImpl *)v33;
    v184 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v183);
  if (v184 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v184])(&v180, &v183);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v41 = v191;
  if (!v191)
  {
    v180 = 0;
    goto LABEL_24;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v180);
  v41 = v191;
  if (v191 != (WTF *)v193)
LABEL_24:
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::typeToStringModuleRelative((uint64_t *)&v179, a2, a6, v42, v43);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  if (*(_QWORD *)a7)
  {
    v45 = *(_QWORD *)(a7 + 8);
    v17 = v45 != 0;
    v46 = v45 - 1;
    if (!v17)
      v46 = 0;
    WTF::StringImpl::utf8ForCharacters(*(char **)a7, v46, (uint64_t)&v183, v44);
  }
  else
  {
    v47 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v47 = 1;
    *(_QWORD *)(v47 + 8) = 0;
    *(_BYTE *)(v47 + 16) = 0;
    v183 = (WTF::StringImpl *)v47;
    v184 = 0;
  }
  WTF::printExpectedCStringHelper((WTF::PrintStream *)&v190, "StringView", &v183);
  if (v184 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v184])(&v178, &v183);
  v190[5]((WTF::StringPrintStream *)&v190);
  v190[5]((WTF::StringPrintStream *)&v190);
  v55 = v191;
  if (!v191)
  {
    v183 = 0;
    goto LABEL_36;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v183);
  v55 = v191;
  if (v191 != (WTF *)v193)
LABEL_36:
    WTF::fastFree((unint64_t)v55, v48, v49, v50, v51, v52, v53, v54);
  v190 = off_1E3572250;
  v191 = (WTF *)v193;
  v192 = xmmword_199122F80;
  v193[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v190, "%u", *a8);
  v190[5]((WTF::StringPrintStream *)&v190);
  v63 = v191;
  if (!v191)
  {
    v178 = 0;
    goto LABEL_41;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v191, v192, (uint64_t *)&v178);
  v63 = v191;
  if (v191 != (WTF *)v193)
LABEL_41:
    WTF::fastFree((unint64_t)v63, v56, v57, v58, v59, v60, v61, v62);
  v64 = (WTF *)((uint64_t (*)(_QWORD))v186[4])(&v186);
  v65 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v64 + 32))(v64);
  WTF::StringImpl::utf8ForCharacters("WebAssembly.Module doesn't validate: ", 0x25uLL, (uint64_t)&v190, v66);
  WTF::printExpectedCStringHelper(v65, "StringView", &v190);
  if ((_DWORD)v191 != -1)
    ((void (*)(char *, void (***)(WTF::StringPrintStream *__hidden)))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v191])(&v185, &v190);
  v67 = (*(double (**)(WTF *))(*(_QWORD *)v64 + 40))(v64);
  WTF::printInternal(v64, (WTF::PrintStream *)&v182, v68, v69, v70, v71, v72, v73, v67, v74);
  WTF::printInternal(v64, (WTF::PrintStream *)&v181, v75, v76, v77, v78, v79, v80, v81, v82);
  WTF::printInternal(v64, (WTF::PrintStream *)&v180, v83, v84, v85, v86, v87, v88, v89, v90);
  WTF::printInternal(v64, (WTF::PrintStream *)&v179, v91, v92, v93, v94, v95, v96, v97, v98);
  WTF::printInternal(v64, (WTF::PrintStream *)&v183, v99, v100, v101, v102, v103, v104, v105, v106);
  WTF::printInternal(v64, (WTF::PrintStream *)&v178, v107, v108, v109, v110, v111, v112, v113, v114);
  v186[5]((WTF::StringPrintStream *)&v186);
  v122 = v178;
  v178 = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
    {
      WTF::StringImpl::~StringImpl(v122, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
    }
    else
    {
      *(_DWORD *)v122 -= 2;
    }
  }
  v123 = v183;
  v183 = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
    {
      WTF::StringImpl::~StringImpl(v123, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
    }
    else
    {
      *(_DWORD *)v123 -= 2;
    }
  }
  v124 = v179;
  v179 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v145, v146, v147, v148, v149, v150, v151, v152);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  v125 = v180;
  v180 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
    {
      WTF::StringImpl::~StringImpl(v125, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
    }
    else
    {
      *(_DWORD *)v125 -= 2;
    }
  }
  v126 = v181;
  v181 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  v127 = v182;
  v182 = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
    {
      WTF::StringImpl::~StringImpl(v127, v115, v116, v117, v118, v119, v120, v121);
      WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
    }
    else
    {
      *(_DWORD *)v127 -= 2;
    }
  }
  v128 = v187;
  if (v187)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v187, v188, (uint64_t *)&v190);
    v128 = v187;
    *a1 = v190;
    if (v128 == (WTF *)v189)
      return;
  }
  else
  {
    *a1 = 0;
  }
  WTF::fastFree((unint64_t)v128, v115, v116, v117, v118, v119, v120, v121);
}

void JSC::Wasm::FunctionParser<JSC::Wasm::BBQJITImpl::BBQJIT>::simd<true,void>(JSC::SIMDLaneOperation,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Air::Arg)::{lambda(unsigned int &,JSC::Wasm::FunctionParserTypes<JSC::Wasm::BBQJITImpl::BBQJIT::ControlData,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::CallLinkInfoBase::CallType>::TypedExpression &)#1}::operator()(_BYTE *a1, unsigned __int8 a2, uint64_t a3, _DWORD *a4, _OWORD *a5, double a6, float a7)
{
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void (**v55)(WTF::StringPrintStream *__hidden);
  char *v56;
  unint64_t *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  void (**v60[2])(WTF::StringPrintStream *__hidden);
  void (**v61)(WTF::StringPrintStream *__hidden);
  unsigned int v62;
  unsigned int v63;
  const char *v64;
  uint64_t v65;

  if (a2 <= 0x37u)
  {
    switch(a2)
    {
      case 0x19u:
      case 0x23u:
      case 0x2Eu:
        goto LABEL_10;
      case 0x1Au:
      case 0x1Cu:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x26u:
      case 0x27u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Fu:
      case 0x31u:
        goto LABEL_8;
      case 0x1Bu:
      case 0x1Du:
      case 0x24u:
      case 0x25u:
      case 0x32u:
        goto LABEL_13;
      case 0x22u:
LABEL_12:
        v9 = 0;
        v63 = 0;
        goto LABEL_16;
      case 0x28u:
LABEL_43:
        v9 = 4;
        goto LABEL_15;
      case 0x30u:
        goto LABEL_14;
      default:
        switch(a2)
        {
          case 2u:
            goto LABEL_14;
          case 7u:
            goto LABEL_43;
          case 8u:
          case 0x10u:
            goto LABEL_12;
          case 0xDu:
          case 0xEu:
            goto LABEL_13;
          default:
            goto LABEL_8;
        }
    }
  }
  if (a2 > 0x45u)
  {
    if (a2 - 70 >= 2)
    {
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x198F6DF60);
    }
LABEL_13:
    v9 = 3;
    goto LABEL_15;
  }
  if (a2 == 56)
  {
LABEL_14:
    v9 = 1;
    goto LABEL_15;
  }
  if (a2 == 61)
    goto LABEL_13;
  if (a2 != 64)
    goto LABEL_8;
LABEL_10:
  v9 = 2;
LABEL_15:
  v63 = v9;
LABEL_16:
  if (*(_DWORD *)(*(_QWORD *)(a3 + 20592) + 104) == -1)
  {
    v53 = "simd memory instructions need a memory defined in the module";
    v54 = 61;
LABEL_49:
    v64 = v53;
    v65 = v54;
    JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral>(v60, (uint64_t)&v64, a6, a7);
    v55 = v60[0];
    goto LABEL_50;
  }
  v10 = *(_QWORD *)(a3 + 16);
  v11 = *(_QWORD *)a3;
  v12 = v10 - *(_QWORD *)a3;
  if (v10 > *(_QWORD *)a3)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = *(_QWORD *)(a3 + 8);
    v17 = 5;
    if (v12 < 5)
      v17 = v10 - *(_QWORD *)a3;
    v18 = v17 - 1;
    *(_QWORD *)a3 = v11 + 1;
    v19 = v16 + v11;
    while (1)
    {
      v20 = *(char *)(v19 + v13);
      v15 |= (v20 & 0x7F) << v14;
      if ((v20 & 0x80000000) == 0)
        break;
      if (v18 == v13)
        goto LABEL_52;
      v21 = v11 + v13 + 2;
      *(_QWORD *)a3 = v21;
      ++v13;
      v14 += 7;
      if (v12 == v13)
      {
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    v62 = v15;
    if ((_DWORD)v13 != 4 || v20 < 0x10u)
    {
      if (v10 <= v11 + v13 + 1)
        goto LABEL_54;
      v19 = 0;
      v22 = 0;
      v23 = 0;
      *a4 = 0;
      v24 = ~v13 + v12;
      v25 = 5;
      if (v24 < 5)
        v25 = v24;
      v26 = v11 + v13;
      *(_QWORD *)a3 = v11 + v13 + 2;
      v27 = v11 - v10;
      v28 = v16 + v11;
      v29 = v25 - 1;
      v30 = v27 + v13;
      while (1)
      {
        LODWORD(v21) = *(char *)(v28 + v19 + v13 + 1);
        v23 |= (v21 & 0x7F) << v22;
        *a4 = v23;
        if ((v21 & 0x80000000) == 0)
          break;
        if (v29 == v19)
          goto LABEL_54;
        v31 = v26 + v19;
        v32 = v30 + v19++;
        v21 = v31 + 3;
        *(_QWORD *)a3 = v21;
        v22 += 7;
        if (v32 == -2)
          goto LABEL_33;
      }
LABEL_34:
      if ((_DWORD)v19 == 4 && v21 >= 0x10u)
      {
LABEL_54:
        v56 = "can't get simd memory op offset";
        v57 = (unint64_t *)a3;
        v58 = 32;
        goto LABEL_55;
      }
      if (v15 > v9)
      {
        v64 = "alignment: ";
        v65 = 12;
        v60[0] = (void (**)(WTF::StringPrintStream *__hidden))" can't be larger than max alignment for simd operation: ";
        v60[1] = (void (**)(WTF::StringPrintStream *__hidden))57;
        JSC::Wasm::FunctionParser<JSC::Wasm::ConstExprGenerator>::validationFail<WTF::ASCIILiteral,unsigned int,WTF::ASCIILiteral,unsigned int>(&v61, (uint64_t)&v64, &v62, (uint64_t)v60, &v63, a6, a7);
        v55 = v61;
        goto LABEL_50;
      }
      v33 = *(unsigned int *)(a3 + 68);
      if (!(_DWORD)v33)
      {
        JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral,WTF::ASCIILiteral>("can't pop empty stack in ", (unint64_t *)a3, 26, "simd memory op pointer", 23, &v64, a7);
        goto LABEL_47;
      }
      v34 = *(_QWORD *)(a3 + 56) + 32 * v33;
      v36 = *(_OWORD *)(v34 - 32);
      v35 = *(_OWORD *)(v34 - 16);
      *(_DWORD *)(a3 + 68) = v33 - 1;
      *a5 = v36;
      a5[1] = v35;
      v64 = "WasmFunctionParser.h:";
      LODWORD(v65) = 21;
      LODWORD(v60[0]) = 830;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v64, (unsigned int *)v60, (int **)&v59);
      v44 = v59;
      if (!v59)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6E2B0);
      }
      v59 = 0;
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
      if (*(_BYTE *)a5 == 0xFF)
      {
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      v53 = "pointer must be i32";
      v54 = 20;
      goto LABEL_49;
    }
  }
LABEL_52:
  v56 = "can't get simd memory op alignment";
  v57 = (unint64_t *)a3;
  v58 = 35;
LABEL_55:
  JSC::Wasm::ParserBase::fail<WTF::ASCIILiteral>(v56, v57, v58, &v64, a7);
LABEL_47:
  v55 = (void (**)(WTF::StringPrintStream *__hidden))v64;
LABEL_50:
  *(_QWORD *)a1 = v55;
  a1[8] = 1;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI32(_BYTE *a1, uint64_t a2, uint64_t *a3, unsigned int *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int IfNecessary;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  _DWORD *v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  __int128 v69;
  const char *v70;
  unsigned int v71;

  if (*((_BYTE *)a3 + 8) == 1)
  {
    v13 = (unsigned __int8 *)(a4 + 2);
    if (*((_BYTE *)a4 + 8) == 1)
    {
      *a5 = *(_DWORD *)a3 <= *a4;
      *((_WORD *)a5 + 4) = -255;
      if (HIBYTE(word_1ECF4C700))
      {
        v69 = *(_OWORD *)a5;
        v70 = "I32LeU";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a2)
        {
          v14 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v14;
          }
          while (v14 < *(_DWORD *)a2);
        }
        WTF::dataLog<char const*,char [2]>(&v70, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
        v20 = *((unsigned __int8 *)a3 + 8);
        if (v20 != 1 && v20 != 4)
        {
          v71 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v15, v16, v17, v18, v19);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v71);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v69);
      }
      goto LABEL_53;
    }
    v67 = a6;
    IfNecessary = 0;
    v71 = 0;
  }
  else
  {
    v67 = a6;
    v68 = 0;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    v23 = 0;
    v71 = IfNecessary;
    v13 = (unsigned __int8 *)(a4 + 2);
    if (*((_BYTE *)a4 + 8) == 1)
      goto LABEL_17;
  }
  v23 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *((_QWORD *)a4 + 1), (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  v68 = v23;
LABEL_17:
  v24 = *a3;
  v25 = a3[1];
  v26 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v25, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if (v25 == 2)
  {
    v32 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v24 + 16;
    if (*(_DWORD *)(a2 + 1280) < v32)
      *(_DWORD *)(a2 + 1280) = v32;
    if ((v26 & 7) != 1 || ((-8 * v32) ^ v26) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v24, v25, v26);
  }
  v33 = *(_QWORD *)a4;
  v34 = *((_QWORD *)a4 + 1);
  v35 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v34, v27, v28, v29, v30, v31);
  if (v34 == 2)
  {
    v40 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v33 + 16;
    if (*(_DWORD *)(a2 + 1280) < v40)
      *(_DWORD *)(a2 + 1280) = v40;
    if ((v35 & 7) != 1 || ((-8 * v40) ^ v35) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v33, v34, v35);
  }
  v41 = *(_QWORD *)(a2 + 88);
  v42 = *(_DWORD *)(v41 + 596);
  if (!v42)
  {
    __break(0xC471u);
    JUMPOUT(0x198F6E810);
  }
  if (*((_BYTE *)a3 + 8) == 1)
    v43 = v23;
  else
    v43 = IfNecessary;
  v44 = *(_QWORD *)(v41 + 584) + 1232 * v42;
  v45 = *(_DWORD *)(v41 + 68) + *(_DWORD *)(v44 - 32);
  if (*(_DWORD *)(v44 - 160) == 5)
    v46 = v45 + 1;
  else
    v46 = v45;
  *a5 = v46;
  *((_WORD *)a5 + 4) = -254;
  v54 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v46, a5[1], v43, v36, v37, v38, v39);
  if (HIBYTE(word_1ECF4C700))
  {
    v69 = *(_OWORD *)a5;
    v70 = "I32LeU";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a2)
    {
      v66 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v66;
      }
      while (v66 < *(_DWORD *)a2);
    }
    WTF::dataLog<char const*,char [2]>(&v70, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
    if ((IfNecessary & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v71);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t)a4, (int *)&v68, (uint64_t *)&v69);
  }
  v55 = *v13;
  if (*((_BYTE *)a3 + 8) == 1 || v55 == 1)
  {
    v61 = v67;
    if (v55 == 1)
    {
      v62 = *a4;
      v63 = SBYTE1(v71);
      v64 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v62 = *(unsigned int *)a3;
      v64 = *(_QWORD *)(a2 + 8);
      v65 = v67 - 2;
      if (v67 - 2 <= 0xB && ((0xFC3u >> v65) & 1) != 0)
        v61 = dword_19919F6B0[v65];
      v63 = ((__int16)v68 >> 8);
    }
    JSC::MacroAssemblerARM64::compare32(v64, v61, v63, v62, ((__int16)v54 >> 8), v51, v52, v53);
  }
  else
  {
    v56 = *(_DWORD **)(a2 + 8);
    v57 = (v68 << 8) & 0x1F0000;
    if ((v71 & 0xFF00) == 0x1F00)
      v58 = v57 | 0x6B2063FF;
    else
      v58 = (v71 >> 3) & 0x3E0 | v57 | 0x6B00001F;
    v59 = v56[50];
    if (v59 + 4 > v56[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v56 + 14), v47, v48, v49, v50, v51, v52, v53);
      v59 = v56[50];
    }
    *(_DWORD *)(*((_QWORD *)v56 + 7) + v59) = v58;
    v60 = v56[50] + 4;
    v56[50] = v60;
    if (v60 + 4 > v56[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v56 + 14), v47, v48, v49, v50, v51, v52, v53);
      v60 = v56[50];
    }
    *(_DWORD *)(*((_QWORD *)v56 + 7) + v60) = (((v67 & 0xF) << 12) | (v54 >> 8) & 0x1F) ^ 0x1A9F17E0;
    v56[50] += 4;
  }
LABEL_53:
  *a1 = 0;
  a1[8] = 0;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::Location::fromArgumentLocation(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t result;

  v1 = a1[8];
  if (!a1[8])
  {
    v2 = *a1;
    v3 = 2;
    return v3 | (v2 << 8);
  }
  switch(v1)
  {
    case 3:
      return JSC::Wasm::BBQJITImpl::BBQJIT::Location::fromStackArgument((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)*(unsigned int *)a1);
    case 1:
      v2 = *a1;
      v3 = 3;
      return v3 | (v2 << 8);
    case 2:
      return JSC::Wasm::BBQJITImpl::BBQJIT::Location::fromStack((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)*(unsigned int *)a1);
  }
  result = 87;
  __break(0xC471u);
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::sizeOfType(int a1)
{
  uint64_t result;

  result = 4;
  if (a1 != -1)
  {
    switch(a1)
    {
      case -50:
      case -49:
      case -48:
      case -34:
      case -33:
      case -32:
      case -29:
      case -28:
      case -22:
      case -21:
      case -19:
      case -18:
      case -17:
      case -16:
      case -15:
      case -14:
      case -13:
      case -4:
      case -2:
        result = 8;
        break;
      case -20:
      case -3:
        return result;
      case -5:
        result = 16;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ControlData::allocateArgumentOrResult(uint64_t a1, uint64_t a2, int a3, int a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  __int16 v11;
  uint64_t v12;

  if ((a3 + 5) <= 2)
  {
    v10 = *a6;
    if (*a6)
    {
      v11 = __clz(__rbit64(v10));
      v12 = a6[1] & ~(1 << v11);
      *a6 = v10 & ~(1 << v11);
      a6[1] = v12;
      return ((v11 << 8) - 0x2000) & 0xFF00 | 3u;
    }
    return JSC::Wasm::BBQJITImpl::BBQJIT::canonicalSlot(a2, *(_DWORD *)(a1 + 136) + a4, 2);
  }
  v6 = *a5;
  if (*a5)
  {
    v7 = __clz(__rbit64(v6));
    v8 = a5[1] & ~(1 << v7);
    *a5 = v6 & ~(1 << v7);
    a5[1] = v8;
    return (v7 << 8) | 2u;
  }
  if ((a3 + 64) > 0x33 || ((1 << (a3 + 64)) & 0xFFC19C001C000) != 0 || a3 != -64)
    return JSC::Wasm::BBQJITImpl::BBQJIT::canonicalSlot(a2, *(_DWORD *)(a1 + 136) + a4, 2);
  result = 341;
  __break(0xC471u);
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addTableGet(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const JSC::Wasm::Type *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t *v30;
  unsigned __int8 *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  unsigned __int8 **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  unsigned int v69;
  uint64_t v70;
  _DWORD **v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  unint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  int8x8_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  _DWORD *v104;
  _QWORD *v105;
  _DWORD *v106;
  WTF *v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  uint64_t v111;
  WTF *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int16 v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD v122[4];
  unint64_t v123;
  int v124;
  uint64_t *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t *v131[2];
  char v132;
  __int128 v133;
  _QWORD v134[33];

  v134[32] = *MEMORY[0x1E0C80C00];
  v120 = a3;
  v121 = a4;
  v119 = a2;
  v7 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)(v7 + 204) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198F6F0B4);
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 192) + 48 * a2 + 16);
  v118 = v121;
  v112 = (WTF *)&v114;
  v114 = xmmword_19919F700;
  v115 = a2;
  v116 = 65281;
  v117 = v120;
  v113 = 0x300000008;
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_DWORD *)(v10 + 596);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198F6F0BCLL);
  }
  v13 = *(_QWORD *)(v10 + 584) + 1232 * v11;
  v14 = *(_DWORD *)(v13 - 32);
  v15 = *(_DWORD *)(v13 - 160);
  v16 = *(_DWORD *)(v10 + 68);
  if (v9 - 192 <= 0x33)
  {
    if (((1 << (v9 + 64)) & 0xFFC19C001C000) != 0)
    {
      LOWORD(v9) = 254;
    }
    else if (v9 == 192)
    {
      __break(0xC471u);
      JUMPOUT(0x198F6F0A8);
    }
  }
  LODWORD(v17) = v16 + v14;
  if (v15 == 5)
    v17 = (v17 + 1);
  else
    v17 = v17;
  *(_QWORD *)a5 = v17;
  *((_WORD *)a5 + 4) = ((_WORD)v9 << 8) | 2;
  LOBYTE(v133) = v9;
  *((_QWORD *)&v133 + 1) = 0;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v129, &v133, 1uLL);
  *(_QWORD *)&v133 = v134;
  *((_QWORD *)&v133 + 1) = 16;
  v23 = HIDWORD(v113);
  if (HIDWORD(v113) >= 0x11)
  {
    if (HIDWORD(v113) >> 28)
    {
      __break(0xC471u);
      goto LABEL_89;
    }
    v108 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v113)));
    DWORD2(v133) = HIDWORD(v113);
    *(_QWORD *)&v133 = v108;
    v23 = HIDWORD(v113);
  }
  else if (!HIDWORD(v113))
  {
    goto LABEL_13;
  }
  v24 = HIDWORD(v133);
  v25 = 16 * v23;
  v26 = (unsigned __int8 *)v112 + 9;
  do
  {
    v27 = *v26;
    v26 += 16;
    v28 = (_QWORD *)(v133 + 16 * v24);
    *v28 = v27;
    v28[1] = 0;
    v24 = ++HIDWORD(v133);
    v25 -= 16;
  }
  while (v25);
LABEL_13:
  v29 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v29 != -1)
  {
    v122[0] = &v132;
    v131[0] = v122;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v131, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v30 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v31 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v31))
  {
    goto LABEL_19;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v31);
LABEL_19:
  v131[0] = (uint64_t *)&v129;
  v131[1] = (uint64_t *)&v133;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v30, v131, (uint64_t)v131, v18, v19, v20, v21, v22, (uint64_t)v122);
  v39 = *(unsigned int **)v122[0];
  if (*(_QWORD *)v122[0])
  {
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 + 1, v39));
  }
  v41 = __ldxr(v31);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, v31))
LABEL_25:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v31, 0, v33, v34, v35, v36, v37, v38);
  v42 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v42 != -1)
  {
    v122[0] = &v132;
    v131[0] = v122;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v131, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (v39[8])
    v43 = 0;
  else
    v43 = (unsigned __int8 **)(v39 + 2);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v43, 0, (char *)v122);
  if ((unint64_t)(v128 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F6F0C4);
  }
  v51 = (v128 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a1 + 1284) > v51)
    v51 = *(_DWORD *)(a1 + 1284);
  *(_DWORD *)(a1 + 1284) = v51;
  JSC::Wasm::BBQJITImpl::BBQJIT::prepareForExceptions(a1, v44, v45, v46, v47, v48, v49, v50);
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(a1, (uint64_t)&v112, (uint64_t)v122, (uint64_t)v39, v52, v53, v54, v55);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), (uint64_t)operationGetWasmTableElement, 8, v56, v57, v58, v59, v60);
  v68 = *(_DWORD **)(a1 + 8);
  v68[52] = 0;
  v69 = v68[50];
  if (v69 + 4 > v68[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v68 + 14), v61, v62, v63, v64, v65, v66, v67);
    v69 = v68[50];
  }
  v70 = 0;
  *(_DWORD *)(*((_QWORD *)v68 + 7) + v69) = -700514048;
  v68[50] += 4;
  if (*((unsigned __int8 *)a5 + 9) - 192 <= 0x3F)
  {
    if (((1 << (*((_BYTE *)a5 + 9) + 64)) & 0xC00FFC19C001C000) != 0)
    {
      if (!*(_DWORD *)(a1 + 340))
      {
        __break(0xC471u);
        JUMPOUT(0x198F6F0CCLL);
      }
      v71 = (_DWORD **)(a1 + 328);
      v70 = 2;
LABEL_40:
      if ((**v71 & 0x700) == 0x300)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6EFC8);
      }
      goto LABEL_41;
    }
    if (((1 << (*((_BYTE *)a5 + 9) + 64)) & 0x3800000000000000) != 0)
    {
      if (!*(_DWORD *)(a1 + 484))
      {
        __break(0xC471u);
        JUMPOUT(0x198F6F0D4);
      }
      v71 = (_DWORD **)(a1 + 472);
      v70 = 3;
      goto LABEL_40;
    }
    if (*((unsigned __int8 *)a5 + 9) != 192)
      goto LABEL_41;
    __break(0xC471u);
LABEL_89:
    JUMPOUT(0x198F6EF78);
  }
LABEL_41:
  JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, *(_QWORD *)a5, *((_QWORD *)a5 + 1), v70, v64, v65, v66, v67);
  v79 = (unint64_t)v125;
  if (&v127 != v125 && v125)
  {
    v125 = 0;
    v126 = 0;
    WTF::fastFree(v79, v72, v73, v74, v75, v76, v77, v78);
  }
  v80 = v123;
  if (v123)
  {
    v123 = 0;
    v124 = 0;
    WTF::fastFree(v80, v72, v73, v74, v75, v76, v77, v78);
  }
  do
  {
    v81 = __ldaxr(v39);
    v82 = v81 - 1;
  }
  while (__stlxr(v82, v39));
  if (!v82)
  {
    atomic_store(1u, v39);
    WTF::fastFree((unint64_t)v39, v72, v73, v74, v75, v76, v77, v78);
  }
  v83 = v133;
  if (v134 != (_QWORD *)v133 && (_QWORD)v133 != 0)
  {
    *(_QWORD *)&v133 = 0;
    DWORD2(v133) = 0;
    WTF::fastFree(v83, v72, v73, v74, v75, v76, v77, v78);
  }
  v85 = v129;
  if (&v130 != (uint64_t *)v129 && (_QWORD)v129 != 0)
  {
    *(_QWORD *)&v129 = 0;
    DWORD2(v129) = 0;
    WTF::fastFree(v85, v72, v73, v74, v75, v76, v77, v78);
  }
  v91 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, *(_QWORD *)a5, *((_QWORD *)a5 + 1), 0, v75, v76, v77, v78);
  if (HIBYTE(word_1ECF4C700))
  {
    v129 = *a5;
    *(_QWORD *)&v133 = "TableGet";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v109 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v109;
      }
      while (v109 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)&v133, " ");
    WTF::dataLog<unsigned int>(&v119);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v120, (uint64_t *)&v129);
  }
  JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 0, (v91 >> 8), 0xFFFFFFFFLL, v87, v88, v89, v90, (uint64_t)&v110, v92);
  LODWORD(v129) = v110;
  v100 = v111;
  *(_QWORD *)((char *)&v129 + 4) = v111;
  if (v110 != -1)
  {
    v101 = (_QWORD *)(a1 + 1400);
    v102 = *(unsigned int *)(a1 + 1412);
    if ((_DWORD)v102 == *(_DWORD *)(a1 + 1408))
    {
      v103 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v101, (void *)(v102 + 1), (unint64_t)&v129, v95, v96, v97, v98, v99);
      v104 = (_DWORD *)(*(_QWORD *)(a1 + 1400) + 12 * *(unsigned int *)(a1 + 1412));
      *v104 = *(_DWORD *)v103;
      v105 = v104 + 1;
      v100 = *(_QWORD *)(v103 + 4);
    }
    else
    {
      v106 = (_DWORD *)(*v101 + 12 * v102);
      *v106 = v110;
      v105 = v106 + 1;
    }
    *v105 = v100;
    ++*(_DWORD *)(a1 + 1412);
  }
  *a6 = 0;
  a6[8] = 0;
  v107 = v112;
  if (&v114 != (__int128 *)v112)
  {
    if (v112)
    {
      v112 = 0;
      LODWORD(v113) = 0;
      WTF::fastFree((unint64_t)v107, v93, v94, v95, v96, v97, v98, v99);
    }
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::getGlobal(JSC::Wasm::BBQJITImpl::BBQJIT *this@<X0>, JSC::Wasm::BBQJITImpl::BBQJIT::Value *a2@<X2>, unsigned int a3@<W1>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v10;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int IfNecessary;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  __int128 v48;
  unsigned int v49;
  const char *v50;

  v49 = a3;
  v10 = *((_QWORD *)this + 6);
  if (*(_DWORD *)(v10 + 220) <= a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198F6F404);
  }
  v13 = *(_QWORD *)(v10 + 208);
  v14 = *(unsigned __int8 *)(v13 + 48 * a3 + 8);
  v15 = *(_DWORD *)(v10 + 36);
  v16 = *(_DWORD *)(v10 + 204);
  v17 = v14;
  if (v14 - 192 <= 0x33)
  {
    if (((1 << (v14 + 64)) & 0xFFC19C001C000) != 0)
    {
      v17 = 254;
    }
    else
    {
      v17 = *(unsigned __int8 *)(v13 + 48 * a3 + 8);
      if (v14 == 192)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6F3DCLL);
      }
    }
  }
  v18 = ((120 * v15 + 8 * v16 + 167) & 0xFFFFFFF0) + 16 * a3;
  v19 = *(unsigned __int8 *)(v13 + 48 * a3 + 25);
  if (v19)
  {
    if (v19 == 1)
    {
      JSC::MacroAssemblerARM64::load64(*((_QWORD *)this + 1), (v18 << 32) | 0x13, 8, a4, a5, a6, a7, a8);
      v35 = JSC::Wasm::BBQJITImpl::BBQJIT::topValue((uint64_t)this, (char)v14);
      *(_QWORD *)a2 = v35;
      *((_WORD *)a2 + 4) = v36;
      v41 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint((uint64_t)this, v35, *((_QWORD *)a2 + 1), 0, v37, v38, v39, v40);
      switch(v14)
      {
        case 0xCEu:
        case 0xCFu:
        case 0xD0u:
        case 0xDEu:
        case 0xDFu:
        case 0xE0u:
        case 0xE3u:
        case 0xE4u:
        case 0xEAu:
        case 0xEBu:
        case 0xECu:
        case 0xEDu:
        case 0xEEu:
        case 0xEFu:
        case 0xF0u:
        case 0xF1u:
        case 0xF2u:
        case 0xF3u:
        case 0xFEu:
          JSC::MacroAssemblerARM64::load64(*((_QWORD *)this + 1), 8, (v41 >> 8), v42, v43, v44, v45, v46);
          break;
        case 0xFBu:
          JSC::MacroAssemblerARM64::loadVector(*((_QWORD *)this + 1), 8, (v41 >> 8), v42, v43, v44, v45, v46);
          break;
        case 0xFCu:
          JSC::MacroAssemblerARM64::loadDouble(*((_QWORD *)this + 1), 8, (v41 >> 8), v42, v43, v44, v45, v46);
          break;
        case 0xFDu:
          JSC::MacroAssemblerARM64::loadFloat(*((_QWORD *)this + 1), 8, (v41 >> 8), v42, v43, v44, v45, v46);
          break;
        case 0xFFu:
          JSC::MacroAssemblerARM64::load32(*((_QWORD *)this + 1), 8, (v41 >> 8), v42, v43, v44, v45, v46);
          break;
        default:
          break;
      }
    }
  }
  else
  {
    v20 = *((_QWORD *)this + 11);
    v21 = *(_DWORD *)(v20 + 596);
    if (!v21)
    {
      __break(0xC471u);
      JUMPOUT(0x198F6F40CLL);
    }
    v22 = *(_QWORD *)(v20 + 584) + 1232 * v21;
    v23 = *(_DWORD *)(v22 - 32);
    v24 = *(_DWORD *)(v22 - 160);
    v25 = *(_DWORD *)(v20 + 68);
    if (v14 - 192 <= 0x33)
    {
      if (((1 << (v14 + 64)) & 0xFFC19C001C000) != 0)
      {
        LOWORD(v14) = 254;
      }
      else if (v14 == 192)
      {
        __break(0xC471u);
        JUMPOUT(0x198F6F3FCLL);
      }
    }
    v26 = (8 * (_DWORD)v18) | 4u;
    v27 = ((unint64_t)v17 << 8) | 4;
    v28 = v25 + v23;
    if (v24 == 5)
      v29 = v28 + 1;
    else
      v29 = v28;
    *(_QWORD *)a2 = v29;
    *((_WORD *)a2 + 4) = ((_WORD)v14 << 8) | 2;
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary((uint64_t)this, v29, *((_QWORD *)a2 + 1), a4, a5, a6, a7, a8);
    JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad((unsigned int *)this, v26, v27, IfNecessary, v31, v32, v33, v34);
  }
  if (HIBYTE(word_1ECF4C700))
  {
    v48 = *(_OWORD *)a2;
    v50 = "GetGlobal";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)this)
    {
      v47 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v47;
      }
      while (v47 < *(_DWORD *)this);
    }
    WTF::dataLog<char const*,char [2]>(&v50, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)this, 1, &v49, (uint64_t *)&v48);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::setGlobal(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v10;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  unsigned __int8 v66;
  int v67;
  unsigned int v68;
  _QWORD v69[2];

  v69[0] = a3;
  v69[1] = a4;
  v68 = a2;
  v10 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)(v10 + 220) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198F6F854);
  }
  v14 = *(_QWORD *)(v10 + 208) + 48 * a2;
  v15 = *(_BYTE *)(v14 + 8);
  v16 = ((120 * *(_DWORD *)(v10 + 36) + 8 * *(_DWORD *)(v10 + 204) + 167) & 0xFFFFFFF0) + 16 * a2;
  v67 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a3, a4, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(v14 + 25))
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMove(a1, (JSC::ARM64LogicalImmediate *)a3, a4, (8 * (_DWORD)v16) | 4u, v18, v19, v20, v21);
    v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a3, a4, v22, v23, v24, v25, v26);
    if (a4 == 2)
    {
      v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a3 + 16;
      if (*(_DWORD *)(a1 + 1280) < v33)
        *(_DWORD *)(a1 + 1280) = v33;
      if ((v27 & 7) != 1 || ((-8 * v33) ^ v27) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a3, a4, v27);
    }
    if (BYTE1(dword_1ECF4C7B0))
      v34 = 29;
    else
      v34 = 17;
    if ((v34 + v15) > 1u)
      goto LABEL_13;
    v51 = *(_QWORD *)(a1 + 8);
    v52 = 0x1800000013;
LABEL_20:
    JSC::MacroAssemblerARM64::load64(v51, v52, 8, v28, v29, v30, v31, v32);
    JSC::Wasm::BBQJITImpl::BBQJIT::emitWriteBarrier((uint64_t *)a1, (JSC::ARM64LogicalImmediate *)8, v53, v54, v55, v56, v57, v58);
    goto LABEL_13;
  }
  if (*(_BYTE *)(v14 + 25) == 1)
  {
    JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), (v16 << 32) | 0x13, 8, v17, v18, v19, v20, v21);
    if (a4 == 1)
    {
      if ((BYTE1(a4) + 5) > 2u)
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<>((uint64_t)&v65, (JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v35, v36, v37, v38, v39, v40);
        LOBYTE(v41) = v66;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)a3, a4, ((unint64_t)v66 << 8) | 2, v61, v62, v63, v64);
        JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::~ScratchScope((unsigned __int8 *)&v65);
      }
      else
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::ScratchScope<>((uint64_t)&v65, (JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v35, v36, v37, v38, v39, v40);
        LOBYTE(v41) = v66;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)a3, a4, ((unint64_t)v66 << 8) | 3, v42, v43, v44, v45);
        JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::~ScratchScope((uint64_t)&v65);
      }
    }
    else
    {
      v41 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a3, a4, v36, v37, v38, v39, v40) >> 8;
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::consume(a1, a3, a4, v46, v47, v48, v49, v50);
    switch(v15)
    {
      case -50:
      case -49:
      case -48:
      case -34:
      case -33:
      case -32:
      case -29:
      case -28:
      case -22:
      case -21:
      case -20:
      case -19:
      case -18:
      case -17:
      case -16:
      case -15:
      case -14:
      case -13:
      case -2:
        JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), (char)v41, 8, v28, v29, v30, v31, v32);
        break;
      case -5:
        JSC::MacroAssemblerARM64::storeVector(*(_QWORD *)(a1 + 8), (char)v41, 8, v28, v29, v30, v31, v32);
        break;
      case -4:
        JSC::MacroAssemblerARM64::storeDouble(*(_QWORD *)(a1 + 8), (char)v41, 8, v28, v29, v30, v31, v32);
        break;
      case -3:
        JSC::MacroAssemblerARM64::storeFloat(*(_QWORD *)(a1 + 8), (char)v41, 8, v28, v29, v30, v31, v32);
        break;
      case -1:
        JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), (char)v41, 8, v28, v29, v30, v31, v32);
        break;
      default:
        break;
    }
    v59 = BYTE1(dword_1ECF4C7B0) ? 29 : 17;
    if ((v59 + v15) <= 1u)
    {
      v51 = *(_QWORD *)(a1 + 8);
      v52 = 0xFFFFFFF800000008;
      goto LABEL_20;
    }
  }
LABEL_13:
  if (HIBYTE(word_1ECF4C700))
  {
    v65 = "SetGlobal";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v60 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v60;
      }
      while (v60 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v65, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(&v68, (uint64_t)v69, &v67);
  }
  *a9 = 0;
  a9[8] = 0;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::ScratchScope<>(uint64_t a1, JSC::Wasm::BBQJITImpl::BBQJIT *this, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char v10;

  *(_QWORD *)a1 = this;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  v9 = *((_QWORD *)this + 79);
  if (v9)
    v10 = __clz(__rbit64(v9)) - 32;
  else
    v10 = JSC::Wasm::BBQJITImpl::BBQJIT::evictFPR(this, this, a3, a4, a5, a6, a7, a8);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindFPRToScratch((_QWORD *)a1, v10);
  *(_BYTE *)(a1 + 8) = v10;
  return a1;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(uint64_t a1, JSC::ARM64LogicalImmediate *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  JSC::ARM64LogicalImmediate *v16;
  unint64_t v17;
  const char *v18;

  v16 = a2;
  v17 = a3;
  v9 = a4 & 7;
  if (v9 <= 5 && ((1 << v9) & 0x32) != 0)
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitStoreConst(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v10 = a4 >> 8;
    v11 = a3 >> 8;
    v12 = BYTE1(a4) == 16;
    if (v9 != 3)
      v12 = 0;
    if (v9 == 2)
      v13 = BYTE1(a4) == 8;
    else
      v13 = v12;
    if (!v13 && HIBYTE(word_1ECF4C700))
    {
      v15 = a4 & 0xFFFF00FF | (BYTE1(a4) << 8);
      v18 = "Move";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v18, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Location>>(a1, 1, (uint64_t *)&v16, &v15);
      LOBYTE(v11) = BYTE1(v17);
    }
    if (v11 == 255)
    {
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(*(unsigned int **)(a1 + 8), (JSC::ARM64LogicalImmediate *)v16, (char)v10, a4, a5, a6, a7, a8);
    }
    else
    {
      switch((char)v11)
      {
        case -29:
        case -28:
        case -22:
        case -21:
        case -19:
        case -18:
        case -17:
        case -16:
        case -15:
        case -14:
        case -13:
        case -2:
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), (uint64_t)v16, (char)v10, a4, a5, a6, a7, a8);
          break;
        case -4:
          JSC::MacroAssembler::moveDouble(*(_QWORD *)(a1 + 8), (uint64_t)v16, (char)v10, a4, a5, a6, a7, a8);
          break;
        case -3:
          JSC::MacroAssembler::moveFloat(*(_QWORD *)(a1 + 8), v16, (char)v10, a4, a5, a6, a7, a8);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F6FB40);
      }
    }
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::~ScratchScope(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int8x16_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;

  v1 = result;
  if (!*(_BYTE *)(result + 32))
  {
    *(_BYTE *)(result + 32) = 1;
    result = (uint64_t)JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::unbindFPRFromScratch((_QWORD *)result, *(char *)(result + 8));
  }
  if (*(_BYTE *)(v1 + 33))
    return v1;
  *(_BYTE *)(v1 + 33) = 1;
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return v1;
  v3 = __clz(__rbit64(v2));
  while (1)
  {
    if (v3 > 0x1Fu)
    {
      result = (uint64_t)JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::unbindFPRFromScratch((_QWORD *)v1, (char)(v3 - 32));
      goto LABEL_16;
    }
    v4 = *(int8x16_t **)v1;
    v5 = 1 << v3;
    if ((*(_QWORD *)(*(_QWORD *)v1 + 648) & (1 << v3)) != 0)
      break;
LABEL_16:
    if (v3 <= 0x3E)
    {
      v8 = *(_QWORD *)(v1 + 16);
      if (v8)
      {
        v9 = __clz(__rbit64(v8 >> ((v3 + 1) & 0x3F))) + (((_BYTE)v3 + 1) & 0x3F);
        v3 = v9 >= 0x40 ? 64 : v9;
        if (v9 < 0x40)
          continue;
      }
    }
    return v1;
  }
  if (v4[21].i32[1] > v3)
  {
    v6 = v4[20].i64[1];
    v4[62] = vandq_s8(v4[62], (int8x16_t)vdupq_n_s64(~v5));
    if ((_BYTE)word_1ECF4C700)
    {
      v10 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v3];
      result = WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v10, "\n");
    }
    v7 = v6 + 4 * v3;
    if ((*(_QWORD *)(v1 + 16) & v5) == 0 || (*(_WORD *)(v7 + 1) & 7) == 3)
    {
      *(_DWORD *)v7 = 0;
      *(_QWORD *)(*(_QWORD *)v1 + 616) |= v5;
    }
    goto LABEL_16;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<>(uint64_t a1, JSC::Wasm::BBQJITImpl::BBQJIT *this, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;

  *(_QWORD *)a1 = this;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  v9 = *((_QWORD *)this + 77);
  if (v9)
    v10 = __clz(__rbit64(v9));
  else
    v10 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(this, this, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 8) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch((_QWORD *)a1, v10);
  return a1;
}

unsigned __int8 *JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::~ScratchScope(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  int8x16_t *v6;
  unint64_t v7;
  unint64_t v9;
  int8x16_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;

  if (a1[32])
    goto LABEL_9;
  a1[32] = 1;
  v4 = a1[8];
  v5 = v4 & 0x7F;
  if ((v4 & 0x7Fu) >= 0x40)
  {
    __break(1u);
  }
  else
  {
    v6 = *(int8x16_t **)a1;
    v1 = 1 << v5;
    if ((*(_QWORD *)(*(_QWORD *)a1 + 648) & (1 << v5)) == 0)
      goto LABEL_9;
    v4 = (char)v4;
    if (v6[21].u32[1] <= (unint64_t)(char)v4)
    {
      __break(0xC471u);
      goto LABEL_33;
    }
    v2 = v6[20].i64[1] + 4 * (char)v4;
    v6[62] = vandq_s8(v6[62], (int8x16_t)vdupq_n_s64(~v1));
    if (!(_BYTE)word_1ECF4C700)
      goto LABEL_6;
  }
  v16 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v4];
  WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v16, "\n");
LABEL_6:
  if ((*((_QWORD *)a1 + 2) & v1) == 0 || (*(_WORD *)(v2 + 1) & 7) == 3)
  {
    *(_DWORD *)v2 = 0;
    *(_QWORD *)(*(_QWORD *)a1 + 616) |= 1 << v5;
  }
LABEL_9:
  if (!a1[33])
  {
    a1[33] = 1;
    v7 = *((_QWORD *)a1 + 2);
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      while (1)
      {
        if (v9 > 0x1Fu)
        {
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(a1, (char)(v9 - 32));
        }
        else
        {
          v10 = *(int8x16_t **)a1;
          v11 = 1 << v9;
          if ((*(_QWORD *)(*(_QWORD *)a1 + 648) & (1 << v9)) != 0)
          {
            if (v9 >= v10[21].u32[1])
            {
              __break(0xC471u);
LABEL_33:
              JUMPOUT(0x198F6FFF8);
            }
            v12 = v10[20].i64[1];
            v10[62] = vandq_s8(v10[62], (int8x16_t)vdupq_n_s64(~v11));
            if ((_BYTE)word_1ECF4C700)
            {
              v16 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v9];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v16, "\n");
            }
            v13 = v12 + 4 * v9;
            if ((*((_QWORD *)a1 + 2) & v11) == 0 || (*(_WORD *)(v13 + 1) & 7) == 3)
            {
              *(_DWORD *)v13 = 0;
              *(_QWORD *)(*(_QWORD *)a1 + 616) |= v11;
            }
          }
        }
        if (v9 <= 0x3E)
        {
          v14 = *((_QWORD *)a1 + 2);
          if (v14)
          {
            v15 = __clz(__rbit64(v14 >> ((v9 + 1) & 0x3F))) + (((_BYTE)v9 + 1) & 0x3F);
            v9 = v15 >= 0x40 ? 64 : v15;
            if (v15 < 0x40)
              continue;
          }
        }
        return a1;
      }
    }
  }
  return a1;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::load(JSC::Wasm::BBQJITImpl::BBQJIT *this@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, JSC::ARM64LogicalImmediate *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v9;
  unsigned int v10;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int16 v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  const char *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  BOOL v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  const char *v132[3];
  int v133;
  unsigned __int8 v134;
  JSC::ARM64LogicalImmediate *v135;
  uint64_t v136;
  int v137[2];
  char v138;
  __int16 v139;
  char v140;
  __int128 v141;
  unint64_t v142;
  uint64_t v143;
  __int16 v144;
  __int128 v145;

  v135 = a3;
  v136 = a4;
  v134 = a2;
  v133 = a6;
  v9 = (_DWORD)a2 - 40;
  if (((_DWORD)a2 - 40) >= 0xE)
  {
    __break(0xC471u);
    JUMPOUT(0x198F70928);
  }
  v10 = a6;
  if (!__CFADD__((_DWORD)a6, dword_19919F7BC[(char)v9]))
  {
    if (v9 >= 0xE)
    {
      __break(0xC471u);
      JUMPOUT(0x198F70948);
    }
    v16 = qword_19919F7F8[(char)v9];
    v132[0] = (const char *)this;
    v132[1] = (const char *)&v135;
    v132[2] = (const char *)&v134;
    v17 = a6;
    v18 = v16 + a6;
    v142 = 0;
    v143 = 0;
    *(_QWORD *)&v141 = this;
    v144 = 0;
    v19 = *((_QWORD *)this + 77);
    if (v19)
      v20 = __clz(__rbit64(v19));
    else
      v20 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(this, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
    v21 = v18 - 1;
    v22 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v141, v20);
    BYTE8(v141) = v22;
    if (a4 != 1)
    {
      v36 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary((uint64_t)this, (uint64_t)a3, a4, v25, v26, v27, v28, v29) >> 8;
      goto LABEL_8;
    }
    LOBYTE(v36) = v22;
    v58 = v10 + (unint64_t)a3;
    if (v58 >> 31 || v58 >= 0x100 && (v58 > 0xFFF0 || (v58 & 0xF) != 0))
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst((uint64_t)this, a3, a4, ((unint64_t)v22 << 8) | 2, v26, v27, v28, v29);
LABEL_8:
      if (*((_BYTE *)this + 56) == 1)
      {
        if (v10 < (unint64_t)dword_1ECF4C6F4 << 16)
          goto LABEL_10;
        v114 = *(unsigned int *)(*((_QWORD *)this + 6) + 108);
        if ((_DWORD)v114 == -1)
          v115 = 0xFFFFFFFFLL;
        else
          v115 = v114 << 16;
        JSC::MacroAssemblerARM64::and64(*((_QWORD *)this + 1), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v36, 8);
        if (v21)
          JSC::MacroAssemblerARM64::add64(*((_QWORD *)this + 1), v21, 8, 8, v116, v117, v118, v119);
        JSC::MacroAssemblerARM64::branch64(*((_QWORD *)this + 1), 2, 8, v115, v116, v117, v118, v119, (uint64_t)v137);
      }
      else
      {
        if (*((_BYTE *)this + 56))
          goto LABEL_10;
        JSC::MacroAssemblerARM64::and64(*((_QWORD *)this + 1), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v36, 8);
        if (v21)
          JSC::MacroAssemblerARM64::add64(*((_QWORD *)this + 1), v21, 8, 8, v96, v97, v98, v99);
        JSC::MacroAssemblerARM64::branch64(*((_QWORD *)this + 1), 2, 8, 23, v96, v97, v98, v99, (uint64_t)v137);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf((unint64_t)this, 0, v137, v100, v101, v102, v103, v104);
LABEL_10:
      if ((v10 & 0x80000000) != 0)
      {
        v79 = v10 & 0xF;
      }
      else if (v10 < 0x100 || (v79 = v10 & 0xF, v10 <= 0xFFF0) && (v10 & 0xF) == 0)
      {
        v37 = (uint64_t)v135;
        v38 = v136;
        v39 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)this, (uint64_t)v135, v136, v31, v32, v33, v34, v35);
        if (v38 == 2)
        {
          v44 = ((*((_DWORD *)this + 322) + 15) & 0xFFFFFFF0) + 16 * v37 + 16;
          if (*((_DWORD *)this + 320) < v44)
            *((_DWORD *)this + 320) = v44;
          if ((v39 & 7) != 1 || ((-8 * v44) ^ v39) >= 8)
            JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)this, v37, v38, v39);
        }
        v45 = v134 - 40;
        if (v45 >= 0xE)
        {
          __break(0xC471u);
          JUMPOUT(0x198F70968);
        }
        v46 = *((_QWORD *)this + 11);
        v47 = *(_DWORD *)(v46 + 596);
        if (!v47)
        {
          __break(0xC471u);
          goto LABEL_122;
        }
        v48 = qword_19919FB78[(char)v45];
        v49 = *(_QWORD *)(v46 + 584) + 1232 * v47;
        v50 = *(_DWORD *)(v46 + 68) + *(_DWORD *)(v49 - 32);
        if (*(_DWORD *)(v49 - 160) == 5)
          v51 = v50 + 1;
        else
          v51 = v50;
        v56 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint((uint64_t)this, v51, v48, 0, v40, v41, v42, v43);
        v57 = ((unint64_t)v36 << 8) | 0x16;
        switch(v134)
        {
          case '(':
          case '5':
            JSC::MacroAssemblerARM64::load32(*((_QWORD *)this + 1), v57, v17, ((__int16)v56 >> 8), v52, v53, v54, v55);
            break;
          case ')':
            JSC::MacroAssemblerARM64::load64(*((_QWORD *)this + 1), v57, v17, ((__int16)v56 >> 8), v52, v53, v54, v55);
            break;
          case '*':
            JSC::MacroAssemblerARM64::loadFloat(*((_QWORD *)this + 1), v57, v17, ((__int16)v56 >> 8), v52, v53, v54, v55);
            break;
          case '+':
            JSC::MacroAssemblerARM64::loadDouble(*((_QWORD *)this + 1), v57, v17, ((__int16)v56 >> 8), v52, v53, v54, v55);
            break;
          case ',':
            JSC::MacroAssemblerARM64::load8SignedExtendTo32(*((_QWORD *)this + 1), v57, v17, ((__int16)v56 >> 8), v52, v53, v54, v55);
            break;
          case '-':
          case '1':
            JSC::MacroAssemblerARM64::load8(*((_QWORD *)this + 1), v57, v17, ((__int16)v56 >> 8), v52, v53, v54, v55);
            break;
          case '.':
            JSC::MacroAssemblerARM64::load16SignedExtendTo32(*((_QWORD *)this + 1), v57, v17, ((__int16)v56 >> 8), v52, v53, v54, v55);
            break;
          case '/':
          case '3':
            JSC::MacroAssemblerARM64::load16(*((_QWORD *)this + 1), v57, v17, ((__int16)v56 >> 8), v52, v53, v54, v55);
            break;
          case '0':
            JSC::MacroAssemblerARM64::load8SignedExtendTo32(*((_QWORD *)this + 1), v57, v17, ((__int16)v56 >> 8), v52, v53, v54, v55);
            goto LABEL_40;
          case '2':
            JSC::MacroAssemblerARM64::load16SignedExtendTo32(*((_QWORD *)this + 1), v57, v17, ((__int16)v56 >> 8), v52, v53, v54, v55);
            goto LABEL_40;
          case '4':
            JSC::MacroAssemblerARM64::load32(*((_QWORD *)this + 1), v57, v17, ((__int16)v56 >> 8), v52, v53, v54, v55);
LABEL_40:
            v66 = (_DWORD *)*((_QWORD *)this + 1);
            v67 = v66[50];
            if (v67 + 4 > v66[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v66 + 14), v59, v60, v61, v62, v63, v64, v65);
              v67 = v66[50];
            }
            *(_DWORD *)(*((_QWORD *)v66 + 7) + v67) = (32 * ((v56 >> 8) & 0x1F)) | (v56 >> 8) & 0x1F | 0x93407C00;
            v66[50] += 4;
            break;
          default:
            break;
        }
LABEL_43:
        if ((_BYTE)v144)
          goto LABEL_52;
        LOBYTE(v144) = 1;
        v68 = BYTE8(v141) & 0x7F;
        if (v68 < 0x40)
        {
          v69 = 1 << v68;
          if ((*(_QWORD *)(v141 + 648) & (1 << v68)) != 0)
          {
            v70 = SBYTE8(v141);
            if (*(unsigned int *)(v141 + 340) > (unint64_t)SBYTE8(v141))
            {
              v71 = *(_QWORD *)(v141 + 328) + 4 * SBYTE8(v141);
              *(int8x16_t *)(v141 + 992) = vandq_s8(*(int8x16_t *)(v141 + 992), (int8x16_t)vdupq_n_s64(~v69));
              if ((_BYTE)word_1ECF4C700)
              {
                v145 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v70];
                WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v145, "\n");
              }
              if ((v142 & v69) == 0 || (*(_WORD *)(v71 + 1) & 7) == 3)
              {
                *(_DWORD *)v71 = 0;
                *(_QWORD *)(v141 + 616) |= 1 << v68;
              }
              goto LABEL_52;
            }
LABEL_123:
            __break(0xC471u);
            JUMPOUT(0x198F70978);
          }
LABEL_52:
          if (!HIBYTE(v144))
          {
            HIBYTE(v144) = 1;
            v72 = v142;
            if (v142)
            {
              v73 = __clz(__rbit64(v142));
              do
              {
                if (v73 > 0x1Fu)
                {
                  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v141, (char)(v73 - 32));
                }
                else
                {
                  v74 = 1 << v73;
                  if ((*(_QWORD *)(v141 + 648) & (1 << v73)) != 0)
                  {
                    if (v73 >= *(unsigned int *)(v141 + 340))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198F70980);
                    }
                    v75 = *(_QWORD *)(v141 + 328);
                    *(int8x16_t *)(v141 + 992) = vandq_s8(*(int8x16_t *)(v141 + 992), (int8x16_t)vdupq_n_s64(~v74));
                    if ((_BYTE)word_1ECF4C700)
                    {
                      v145 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v73];
                      WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v145, "\n");
                      v72 = v142;
                    }
                    v76 = v75 + 4 * v73;
                    if ((v72 & v74) == 0 || (*(_WORD *)(v76 + 1) & 7) == 3)
                    {
                      *(_DWORD *)v76 = 0;
                      *(_QWORD *)(v141 + 616) |= v74;
                    }
                  }
                }
                if (v73 > 0x3E)
                  break;
                v72 = v142;
                if (!v142)
                  break;
                v77 = __clz(__rbit64(v142 >> ((v73 + 1) & 0x3F))) + (((_BYTE)v73 + 1) & 0x3F);
                v73 = v77 >= 0x40 ? 64 : v77;
              }
              while (v77 < 0x40);
            }
          }
          *(_QWORD *)a5 = v51;
          *(_WORD *)(a5 + 8) = v48;
          goto LABEL_55;
        }
LABEL_122:
        __break(1u);
        goto LABEL_123;
      }
      JSC::MacroAssemblerARM64::addZeroExtend64(*((_DWORD **)this + 1), (char)v36, v30, v31, v32, v33, v34, v35);
      if (v10 > 0xFFF0 || v79)
      {
        JSC::MacroAssemblerARM64::add64(*((_QWORD *)this + 1), v10, 8, 8, v82, v83, v84, v85);
        v86 = 8;
      }
      else
      {
        v86 = ((unint64_t)v10 << 32) | 8;
      }
      v51 = JSC::Wasm::BBQJITImpl::BBQJIT::load(JSC::Wasm::LoadOpType,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&,unsigned int)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>((uint64_t)v132, v86, v80, v81, v82, v83, v84, v85);
      LOWORD(v48) = v87;
      goto LABEL_43;
    }
    if (*((_BYTE *)this + 56) == 1)
    {
      if (v10 < (unint64_t)dword_1ECF4C6F4 << 16)
        goto LABEL_75;
      v120 = *(unsigned int *)(*((_QWORD *)this + 6) + 108);
      v121 = v120 << 16;
      v122 = (_DWORD)v120 == -1;
      v123 = 0xFFFFFFFFLL;
      if (!v122)
        v123 = v121;
      if (v21 + (unint64_t)a3 < v123)
        goto LABEL_75;
      v124 = *((_QWORD *)this + 1);
      JSC::ARM64Assembler::label((_DWORD *)(v124 + 32), v23, v24, v25, v26, v27, v28, v29, (int *)&v145);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v124 + 56), 335544320, v125, v126, v127, v128, v129, v130);
      if (*(_BYTE *)(v124 + 328))
        v131 = 69;
      else
        v131 = 65;
      v137[0] = v145;
      v137[1] = 0;
      v138 = v131;
      v139 = 15;
      v140 = -1;
    }
    else
    {
      if (*((_BYTE *)this + 56))
      {
LABEL_75:
        v51 = JSC::Wasm::BBQJITImpl::BBQJIT::load(JSC::Wasm::LoadOpType,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&,unsigned int)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>((uint64_t)v132, (v58 << 32) | 0x16, v24, v25, v26, v27, v28, v29);
        LOWORD(v48) = v78;
        goto LABEL_43;
      }
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*((_DWORD **)this + 1), v21 + a3, 8, v25, v26, v27, v28, v29);
      JSC::MacroAssemblerARM64::branch64(*((_QWORD *)this + 1), 2, 8, 23, v105, v106, v107, v108, (uint64_t)v137);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf((unint64_t)this, 0, v137, v109, v110, v111, v112, v113);
    goto LABEL_75;
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException((uint64_t)this, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  JSC::Wasm::BBQJITImpl::BBQJIT::consume((uint64_t)this, (uint64_t)a3, a4, v88, v89, v90, v91, v92);
  switch(v9)
  {
    case 0u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
      *(_QWORD *)a5 = 0;
      v93 = -255;
      goto LABEL_83;
    case 1u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
      *(_QWORD *)a5 = 0;
      v93 = -511;
      goto LABEL_83;
    case 2u:
      *(_QWORD *)a5 = 0;
      v93 = -767;
      goto LABEL_83;
    case 3u:
      *(_QWORD *)a5 = 0;
      v93 = -1023;
LABEL_83:
      *(_WORD *)(a5 + 8) = v93;
      break;
    default:
      break;
  }
LABEL_55:
  if (HIBYTE(word_1ECF4C700))
  {
    v94 = JSC::Wasm::BBQJITImpl::BBQJIT::LOAD_OP_NAMES[v134 - 40];
    v141 = *(_OWORD *)a5;
    v132[0] = v94;
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)this)
    {
      v95 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v95;
      }
      while (v95 < *(_DWORD *)this);
    }
    WTF::dataLog<char const*,char [2]>(v132, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)this, (uint64_t *)&v135, &v133, (uint64_t *)&v141);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::store(uint64_t a1@<X0>, int a2@<W1>, JSC::ARM64LogicalImmediate *a3@<X2>, uint64_t a4@<X3>, JSC::ARM64LogicalImmediate *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  JSC::ARM64LogicalImmediate *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  unsigned int v34;
  JSC::ARM64LogicalImmediate *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  _DWORD *v65;
  _QWORD *v66;
  _DWORD *v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  BOOL v102;
  unint64_t v103;
  int v104;
  unsigned int v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  _DWORD *v110;
  unint64_t *v111;
  _DWORD *v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unsigned int v135;
  uint64_t v136[4];
  int v137;
  int v138;
  unsigned __int8 v139;
  JSC::ARM64LogicalImmediate *v140;
  unint64_t v141;
  JSC::ARM64LogicalImmediate *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int8x16_t *v146;
  signed __int8 v147;
  unint64_t v148;
  uint64_t v149;
  __int16 v150;
  __int128 v151;
  unint64_t v152;
  uint64_t v153;
  __int16 v154;
  _OWORD v155[2];

  v10 = a7;
  v11 = a6;
  v12 = (uint64_t)a5;
  v13 = a4;
  v142 = a3;
  v143 = a4;
  v140 = a5;
  v141 = a6;
  v139 = a2;
  v138 = a7;
  v137 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)a5, a6, a4, (uint64_t)a5, a6, a7, a8);
  v25 = a2 - 54;
  if ((a2 - 54) >= 9)
  {
    __break(0xC471u);
    JUMPOUT(0x198F716DCLL);
  }
  if (__CFADD__(v10, dword_19919F868[(char)v25]))
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, 0, v19, v20, v21, v22, v23, v24);
    JSC::Wasm::BBQJITImpl::BBQJIT::consume(a1, (uint64_t)a3, v13, v114, v115, v116, v117, v118);
    JSC::Wasm::BBQJITImpl::BBQJIT::consume(a1, v12, v11, v119, v120, v121, v122, v123);
    goto LABEL_132;
  }
  if (v25 >= 9)
  {
    v31 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/wasm/WasmBBQJIT.h";
    v32 = "uint32_t JSC::Wasm::BBQJITImpl::BBQJIT::sizeOfStoreOp(StoreOpType)";
    v33 = 321;
    __break(0xC471u);
    goto LABEL_164;
  }
  v26 = qword_19919F890[(char)v25];
  v136[0] = (uint64_t)&v140;
  v136[1] = a1;
  v136[2] = (uint64_t)&v142;
  v136[3] = (uint64_t)&v139;
  v11 = v10;
  v27 = v26 + v10;
  v148 = 0;
  v149 = 0;
  v146 = (int8x16_t *)a1;
  v150 = 0;
  v28 = *(_QWORD *)(a1 + 616);
  if (v28)
    v29 = __clz(__rbit64(v28));
  else
    v29 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v18, v19, v20, v21, v22, v23, v24);
  v12 = v27 - 1;
  v9 = (unint64_t)&v151;
  v30 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v146, v29);
  v147 = v30;
  if (v13 != 1)
  {
    v34 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, (uint64_t)a3, v13, v33, v21, v22, v23, v24) >> 8;
LABEL_10:
    if (*(_BYTE *)(a1 + 56) == 1)
    {
      if (v10 < (unint64_t)dword_1ECF4C6F4 << 16)
        goto LABEL_35;
      v52 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 108);
      if ((_DWORD)v52 == -1)
        v13 = 0xFFFFFFFFLL;
      else
        v13 = v52 << 16;
      JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v34, 8);
      if (v12)
        JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v12, 8, 8, v53, v54, v55, v56);
      JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 2, 8, v13, v53, v54, v55, v56, (uint64_t)&v144);
    }
    else
    {
      if (*(_BYTE *)(a1 + 56))
        goto LABEL_35;
      JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v34, 8);
      if (v12)
        JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v12, 8, 8, v42, v43, v44, v45);
      JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 2, 8, 23, v42, v43, v44, v45, (uint64_t)&v144);
    }
    LODWORD(v151) = v144;
    v46 = v145;
    *(_QWORD *)((char *)&v151 + 4) = v145;
    if (v144 != -1)
    {
      v47 = (_QWORD *)(a1 + 1360);
      v48 = *(unsigned int *)(a1 + 1372);
      if ((_DWORD)v48 == *(_DWORD *)(a1 + 1368))
      {
        v49 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v47, (void *)(v48 + 1), (unint64_t)&v151, v37, v38, v39, v40, v41);
        v50 = (_DWORD *)(*(_QWORD *)(a1 + 1360) + 12 * *(unsigned int *)(a1 + 1372));
        *v50 = *(_DWORD *)v49;
        v51 = v50 + 1;
        v46 = *(_QWORD *)(v49 + 4);
      }
      else
      {
        v67 = (_DWORD *)(*v47 + 12 * v48);
        *v67 = v144;
        v51 = v67 + 1;
      }
      *v51 = v46;
      ++*(_DWORD *)(a1 + 1372);
    }
LABEL_35:
    if ((v10 & 0x80000000) != 0 || v10 >= 0x100 && (v10 > 0xFFF0 || (v10 & 0xF) != 0))
    {
      v12 = *(_QWORD *)(a1 + 8);
      v124 = *(_DWORD *)(v12 + 200);
      if (v124 + 4 > *(_DWORD *)(v12 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), (uint64_t)v35, v36, v37, v38, v39, v40, v41);
        v124 = *(_DWORD *)(v12 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v12 + 56) + v124) = ((v34 & 0x1F) << 16) | 0x8B2042C8;
      *(_DWORD *)(v12 + 200) += 4;
      if ((v10 & 0x80000000) != 0 || v10 > 0xFFF0 || (v10 & 0xF) != 0)
      {
        JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v10, 8, 8, v38, v39, v40, v41);
        v125 = 8;
      }
      else
      {
        v125 = ((unint64_t)v10 << 32) | 8;
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::store(JSC::Wasm::StoreOpType,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>(v136, (JSC::ARM64LogicalImmediate *)v125, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      if (v141 == 1)
      {
        if ((BYTE1(v141) + 5) > 2u)
        {
          v152 = 0;
          v153 = 0;
          *(_QWORD *)&v151 = a1;
          v154 = 0;
          v85 = *(_QWORD *)(a1 + 616);
          if (v85)
            v86 = __clz(__rbit64(v85));
          else
            v86 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v35, v36, v37, v38, v39, v40, v41);
          LOBYTE(v69) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v151, v86);
          BYTE8(v151) = v69;
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v140, v141, ((unint64_t)v69 << 8) | 2, v87, v88, v89, v90);
          if (!(_BYTE)v154)
          {
            LOBYTE(v154) = 1;
            v12 = BYTE8(v151) & 0x7F;
            if (v12 >= 0x40)
              goto LABEL_164;
            v91 = 1 << v12;
            if ((*(_QWORD *)(v151 + 648) & (1 << v12)) != 0)
            {
              v92 = SBYTE8(v151);
              if (*(unsigned int *)(v151 + 340) <= (unint64_t)SBYTE8(v151))
              {
                __break(0xC471u);
                JUMPOUT(0x198F71724);
              }
              v93 = *(_QWORD *)(v151 + 328) + 4 * SBYTE8(v151);
              *(int8x16_t *)(v151 + 992) = vandq_s8(*(int8x16_t *)(v151 + 992), (int8x16_t)vdupq_n_s64(~v91));
              if ((_BYTE)word_1ECF4C700)
              {
                v155[0] = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v92];
                WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v155, "\n");
              }
              if ((v152 & v91) == 0 || (*(_WORD *)(v93 + 1) & 7) == 3)
              {
                *(_DWORD *)v93 = 0;
                *(_QWORD *)(v151 + 616) |= 1 << v12;
              }
            }
          }
          if (!HIBYTE(v154))
          {
            HIBYTE(v154) = 1;
            v94 = v152;
            if (v152)
            {
              v95 = __clz(__rbit64(v152));
              do
              {
                if (v95 > 0x1Fu)
                {
                  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v151, (char)(v95 - 32));
                }
                else
                {
                  v96 = 1 << v95;
                  if ((*(_QWORD *)(v151 + 648) & (1 << v95)) != 0)
                  {
                    if (v95 >= *(unsigned int *)(v151 + 340))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198F7172CLL);
                    }
                    v97 = *(_QWORD *)(v151 + 328);
                    *(int8x16_t *)(v151 + 992) = vandq_s8(*(int8x16_t *)(v151 + 992), (int8x16_t)vdupq_n_s64(~v96));
                    if ((_BYTE)word_1ECF4C700)
                    {
                      v155[0] = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v95];
                      WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v155, "\n");
                      v94 = v152;
                    }
                    v98 = v97 + 4 * v95;
                    if ((v94 & v96) == 0 || (*(_WORD *)(v98 + 1) & 7) == 3)
                    {
                      *(_DWORD *)v98 = 0;
                      *(_QWORD *)(v151 + 616) |= v96;
                    }
                  }
                }
                v9 = (unint64_t)&v151;
                if (v95 > 0x3E)
                  break;
                v94 = v152;
                if (!v152)
                  break;
                v99 = __clz(__rbit64(v152 >> ((v95 + 1) & 0x3F))) + (((_BYTE)v95 + 1) & 0x3F);
                v95 = v99 >= 0x40 ? 64 : v99;
              }
              while (v99 < 0x40);
            }
          }
        }
        else
        {
          v152 = 0;
          v153 = 0;
          *(_QWORD *)&v151 = a1;
          v154 = 0;
          v68 = *(_QWORD *)(a1 + 632);
          if (v68)
            LOBYTE(v69) = __clz(__rbit64(v68)) - 32;
          else
            LOBYTE(v69) = JSC::Wasm::BBQJITImpl::BBQJIT::evictFPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v35, v36, v37, v38, v39, v40, v41);
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindFPRToScratch(&v151, (char)v69);
          BYTE8(v151) = v69;
          JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v140, v141, ((unint64_t)v69 << 8) | 3, v70, v71, v72, v73);
          LOBYTE(v154) = 1;
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::unbindFPRFromScratch(&v151, (char)v69);
        }
      }
      else
      {
        v69 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, (uint64_t)v140, v141, v37, v38, v39, v40, v41) >> 8;
      }
      v74 = (uint64_t)v140;
      v75 = v141;
      v76 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v140, v141, v33, v21, v22, v23, v24);
      if (v75 == 2)
      {
        v82 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v74 + 16;
        if (*(_DWORD *)(a1 + 1280) < v82)
          *(_DWORD *)(a1 + 1280) = v82;
        if ((v76 & 7) != 1 || ((-8 * v82) ^ v76) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v74, v75, v76);
      }
      v12 = (uint64_t)v142;
      v13 = v143;
      v83 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v142, v143, v77, v78, v79, v80, v81);
      if (v13 == 2)
      {
        v84 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v12 + 16;
        if (*(_DWORD *)(a1 + 1280) < v84)
          *(_DWORD *)(a1 + 1280) = v84;
        if ((v83 & 7) != 1 || ((-8 * v84) ^ v83) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v12, v13, v83);
      }
      v32 = (const char *)(((unint64_t)v34 << 8) | 0x16);
      switch(v139)
      {
        case '6':
        case '>':
          JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), v69, (unint64_t)v32, v11, v21, v22, v23, v24);
          break;
        case '7':
          JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v69, (unint64_t)v32, v11, v21, v22, v23, v24);
          break;
        case '8':
          JSC::MacroAssemblerARM64::storeFloat(*(_QWORD *)(a1 + 8), (char)v69, (unint64_t)v32, v11, v21, v22, v23, v24);
          break;
        case '9':
          JSC::MacroAssemblerARM64::storeDouble(*(_QWORD *)(a1 + 8), (char)v69, (unint64_t)v32, v11, v21, v22, v23, v24);
          break;
        case ':':
        case '<':
          JSC::MacroAssemblerARM64::store8(*(_QWORD *)(a1 + 8), v69, (unint64_t)v32, v11, v21, v22, v23, v24);
          break;
        case ';':
        case '=':
          JSC::MacroAssemblerARM64::store16(*(_QWORD *)(a1 + 8), v69, (unint64_t)v32, v11, v21, v22, v23, v24);
          break;
        default:
          goto LABEL_121;
      }
    }
    goto LABEL_121;
  }
  LOBYTE(v34) = v30;
  v9 = v10 + (unint64_t)a3;
  if (v9 >> 31 || v9 >= 0x100 && (v9 > 0xFFF0 || (v9 & 0xF) != 0))
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, a3, v13, ((unint64_t)v30 << 8) | 2, v21, v22, v23, v24);
    v9 = (unint64_t)&v151;
    goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 56) == 1)
  {
    if (v10 >= (unint64_t)dword_1ECF4C6F4 << 16)
    {
      v100 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 108);
      v101 = v100 << 16;
      v102 = (_DWORD)v100 == -1;
      v103 = 0xFFFFFFFFLL;
      if (!v102)
        v103 = v101;
      if (v12 + (unint64_t)a3 >= v103)
      {
        v12 = *(_QWORD *)(a1 + 8);
        v11 = v12 + 56;
        v104 = *(_DWORD *)(v12 + 200);
        if (v104 < *(_DWORD *)(v12 + 52))
        {
          LODWORD(v13) = -721215457;
          goto LABEL_157;
        }
        goto LABEL_96;
      }
    }
    goto LABEL_106;
  }
  if (!*(_BYTE *)(a1 + 56))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), v12 + a3, 8, v33, v21, v22, v23, v24);
    JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 2, 8, 23, v57, v58, v59, v60, (uint64_t)v155);
    LODWORD(v151) = v155[0];
    v61 = *(_QWORD *)((char *)v155 + 4);
    *(_QWORD *)((char *)&v151 + 4) = *(_QWORD *)((char *)v155 + 4);
    if (LODWORD(v155[0]) != -1)
    {
      v62 = (_QWORD *)(a1 + 1360);
      v63 = *(unsigned int *)(a1 + 1372);
      if ((_DWORD)v63 == *(_DWORD *)(a1 + 1368))
      {
        v64 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v62, (void *)(v63 + 1), (unint64_t)&v151, v33, v21, v22, v23, v24);
        v65 = (_DWORD *)(*(_QWORD *)(a1 + 1360) + 12 * *(unsigned int *)(a1 + 1372));
        *v65 = *(_DWORD *)v64;
        v66 = v65 + 1;
        v61 = *(_QWORD *)(v64 + 4);
      }
      else
      {
        v112 = (_DWORD *)(*v62 + 12 * v63);
        *v112 = v155[0];
        v66 = v112 + 1;
      }
      *v66 = v61;
      goto LABEL_105;
    }
  }
  while (1)
  {
LABEL_106:
    JSC::Wasm::BBQJITImpl::BBQJIT::store(JSC::Wasm::StoreOpType,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>(v136, (JSC::ARM64LogicalImmediate *)((v9 << 32) | 0x16), (unint64_t)v32, v33, v21, v22, v23, v24);
    v9 = (unint64_t)&v151;
LABEL_121:
    if ((_BYTE)v150)
      goto LABEL_130;
    LOBYTE(v150) = 1;
    v11 = v147 & 0x7F;
    if (v11 < 0x40)
      break;
LABEL_164:
    __break(1u);
LABEL_165:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v11, (uint64_t)v31, (uint64_t)v32, v33, v21, v22, v23, v24);
    v104 = *(_DWORD *)(v12 + 200);
    while (1)
    {
      *(_DWORD *)(*(_QWORD *)(v12 + 56) + v104) = v13;
      v104 = *(_DWORD *)(v12 + 200) + 4;
      *(_DWORD *)(v12 + 200) = v104;
      if (v104 >= *(_DWORD *)(v12 + 52))
        break;
LABEL_157:
      if ((v104 + 4) > *(_DWORD *)(v12 + 192))
        goto LABEL_165;
    }
LABEL_96:
    v105 = v104;
    if ((v104 + 4) > *(_DWORD *)(v12 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v11, (uint64_t)v31, (uint64_t)v32, v33, v21, v22, v23, v24);
      v105 = *(_DWORD *)(v12 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v12 + 56) + v105) = 335544320;
    *(_DWORD *)(v12 + 200) += 4;
    v106 = 0xFF000F4500000000;
    if (!*(_BYTE *)(v12 + 328))
      v106 = 0xFF000F4100000000;
    LODWORD(v151) = v104;
    *(_QWORD *)((char *)&v151 + 4) = v106;
    if (v104 != -1)
    {
      v107 = (_QWORD *)(a1 + 1360);
      v108 = *(unsigned int *)(a1 + 1372);
      if ((_DWORD)v108 == *(_DWORD *)(a1 + 1368))
      {
        v109 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v107, (void *)(v108 + 1), (unint64_t)&v151, v33, v21, v22, v23, v24);
        v110 = (_DWORD *)(*(_QWORD *)(a1 + 1360) + 12 * *(unsigned int *)(a1 + 1372));
        *v110 = *(_DWORD *)v109;
        v111 = (unint64_t *)(v110 + 1);
        v106 = *(_QWORD *)(v109 + 4);
      }
      else
      {
        v113 = (int *)(*v107 + 12 * v108);
        *v113 = v104;
        v111 = (unint64_t *)(v113 + 1);
      }
      *v111 = v106;
LABEL_105:
      ++*(_DWORD *)(a1 + 1372);
      continue;
    }
  }
  v126 = 1 << v11;
  if ((v146[40].i64[1] & (1 << v11)) != 0)
  {
    v127 = v147;
    if (v146[21].u32[1] <= (unint64_t)v147)
    {
      __break(0xC471u);
      JUMPOUT(0x198F71714);
    }
    v128 = v146[20].i64[1] + 4 * v147;
    v146[62] = vandq_s8(v146[62], (int8x16_t)vdupq_n_s64(~v126));
    if ((_BYTE)word_1ECF4C700)
    {
      v151 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v127];
      WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v151, "\n");
    }
    if ((v148 & v126) == 0 || (*(_WORD *)(v128 + 1) & 7) == 3)
    {
      *(_DWORD *)v128 = 0;
      v146[38].i64[1] |= 1 << v11;
    }
  }
LABEL_130:
  if (!HIBYTE(v150))
  {
    HIBYTE(v150) = 1;
    v129 = v148;
    if (v148)
    {
      v130 = __clz(__rbit64(v148));
      do
      {
        if (v130 > 0x1Fu)
        {
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v146, (char)(v130 - 32));
        }
        else
        {
          v131 = 1 << v130;
          if ((v146[40].i64[1] & (1 << v130)) != 0)
          {
            if (v130 >= v146[21].u32[1])
            {
              __break(0xC471u);
              JUMPOUT(0x198F7171CLL);
            }
            v132 = v146[20].i64[1];
            v146[62] = vandq_s8(v146[62], (int8x16_t)vdupq_n_s64(~v131));
            if ((_BYTE)word_1ECF4C700)
            {
              v151 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v130];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v151, "\n");
              v129 = v148;
            }
            v133 = v132 + 4 * v130;
            if ((v129 & v131) == 0 || (*(_WORD *)(v133 + 1) & 7) == 3)
            {
              *(_DWORD *)v133 = 0;
              v146[38].i64[1] |= v131;
            }
          }
        }
        if (v130 > 0x3E)
          break;
        v129 = v148;
        if (!v148)
          break;
        v134 = __clz(__rbit64(v148 >> ((v130 + 1) & 0x3F))) + (((_BYTE)v130 + 1) & 0x3F);
        v130 = v134 >= 0x40 ? 64 : v134;
      }
      while (v134 < 0x40);
    }
  }
LABEL_132:
  if (HIBYTE(word_1ECF4C700))
  {
    *(_QWORD *)&v151 = JSC::Wasm::BBQJITImpl::BBQJIT::STORE_OP_NAMES[v139 - 54];
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v135 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v135;
      }
      while (v135 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)&v151, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(a1, 1, (uint64_t *)&v142, &v138, (uint64_t)&v140, &v137);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitSanitizeAtomicResult(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;

  if (a3 != -1)
  {
    if (a3 == -2)
    {
      switch(JSC::Wasm::memoryLog2Alignment())
      {
        case 0u:
          goto LABEL_11;
        case 1u:
          goto LABEL_12;
        case 2u:
          JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a4, a5);
          return;
        case 3u:
          goto LABEL_6;
        case 4u:
          __break(0xC471u);
          JUMPOUT(0x198F7190CLL);
        default:
          return;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x198F718ECLL);
  }
  switch(JSC::Wasm::memoryLog2Alignment())
  {
    case 0u:
LABEL_11:
      v18 = *(_QWORD *)(a1 + 8);
      v19 = 255;
      goto LABEL_13;
    case 1u:
LABEL_12:
      v18 = *(_QWORD *)(a1 + 8);
      v19 = 0xFFFFLL;
LABEL_13:
      JSC::MacroAssemblerARM64::and32(v18, (JSC::ARM64LogicalImmediate *)v19, a4, a5);
      return;
    case 2u:
    case 3u:
LABEL_6:
      if (a4 == a5)
        return;
      v15 = *(_QWORD *)(a1 + 8);
      if (a4 == 63)
      {
        if (a5 != 31)
        {
          v20 = a5 & 0x1F | 0xD2800000;
          goto LABEL_18;
        }
      }
      else if (a4 != 31 && a5 != 31)
      {
        v16 = a5 & 0x1F | ((a4 & 0x1F) << 16);
        v17 = -1442839584;
        goto LABEL_17;
      }
      v16 = a5 | (32 * a4);
      v17 = -1862270976;
LABEL_17:
      v20 = v16 | v17;
LABEL_18:
      v23 = *(_DWORD *)(v15 + 200);
      v22 = (unsigned int *)(v15 + 200);
      v21 = v23;
      if (v23 + 4 > *(v22 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v22 - 36), v8, v9, v10, v11, v12, v13, v14);
        v21 = *v22;
      }
      *(_DWORD *)(*((_QWORD *)v22 - 18) + v21) = v20;
      *v22 += 4;
      return;
    case 4u:
      __break(0xC471u);
      JUMPOUT(0x198F7192CLL);
    default:
      return;
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::emitAtomicLoadOp(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _QWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unsigned __int8 v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  JSC::ARM64LogicalImmediate *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int8x8_t v74;
  _DWORD *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char **v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char **v114;
  JSC::AssemblerBuffer *v116;
  JSC::AssemblerBuffer *v117;
  uint64_t v118;
  _BYTE v119[12];
  unint64_t v120;
  uint64_t v121;
  __int16 v122;
  int v123;
  uint64_t v124;
  int v125;
  __int128 v126;

  v8 = BYTE1(a5);
  v12 = SBYTE1(a5);
  if ((_DWORD)a6)
    JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), a6, SBYTE1(a5), SBYTE1(a5), a5, a6, a7, a8);
  if (JSC::Wasm::memoryLog2Alignment())
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = JSC::Wasm::memoryLog2Alignment();
    if (v18 >= 5u)
    {
      __break(0xC471u);
      JUMPOUT(0x198F72170);
    }
    JSC::MacroAssemblerARM64::branchTest64(*((JSC::ARM64LogicalImmediate **)&unk_19919F8D8 + (char)v18), v17, 1, v12, v19, v20, v21, v22, (uint64_t)&v123);
    *(_DWORD *)v119 = v123;
    v24 = v124;
    *(_QWORD *)&v119[4] = v124;
    if (v123 != -1)
    {
      v25 = (_QWORD *)(a1 + 1360);
      v26 = *(unsigned int *)(a1 + 1372);
      if ((_DWORD)v26 == *(_DWORD *)(a1 + 1368))
      {
        v27 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, (void *)(v26 + 1), (unint64_t)v119, v23, v13, v14, v15, v16);
        v28 = (_DWORD *)(*(_QWORD *)(a1 + 1360) + 12 * *(unsigned int *)(a1 + 1372));
        *v28 = *(_DWORD *)v27;
        v29 = v28 + 1;
        v24 = *(_QWORD *)(v27 + 4);
      }
      else
      {
        v30 = (_DWORD *)(*v25 + 12 * v26);
        *v30 = v123;
        v29 = v30 + 1;
      }
      *v29 = v24;
      ++*(_DWORD *)(a1 + 1372);
    }
  }
  v31 = *(_QWORD *)(a1 + 88);
  v32 = *(_DWORD *)(v31 + 596);
  if (!v32)
  {
    __break(0xC471u);
    goto LABEL_105;
  }
  v33 = *(_QWORD *)(v31 + 584) + 1232 * v32;
  v34 = *(_DWORD *)(v33 - 32);
  v35 = *(_DWORD *)(v33 - 160);
  v36 = *(_DWORD *)(v31 + 68);
  if (a3 - 192 > 0x33)
  {
    v37 = a3;
  }
  else if (((1 << (a3 + 64)) & 0xFFC19C001C000) != 0)
  {
    v37 = -2;
  }
  else
  {
    v37 = a3;
    if (a3 == 192)
    {
      __break(0xC471u);
      JUMPOUT(0x198F71AE0);
    }
  }
  v38 = v36 + v34;
  if (v35 == 5)
    v39 = v38 + 1;
  else
    v39 = v38;
  v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v39, ((unint64_t)v37 << 8) | 2, 0, v13, v14, v15, v16);
  v48 = v40;
  if (JSC::MacroAssemblerARM64::s_lseCheckState != 2)
  {
    if (!JSC::MacroAssemblerARM64::s_lseCheckState)
    {
      JSC::MacroAssemblerARM64::s_lseCheckState = 1;
      if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
        JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
    }
    v120 = 0;
    v121 = 0;
    *(_QWORD *)v119 = a1;
    v122 = 0;
    v49 = *(_QWORD *)(a1 + 616);
    if (v49)
      v50 = __clz(__rbit64(v49));
    else
      v50 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v41, v42, v43, v44, v45, v46, v47);
    v51 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(v119, v50);
    v119[8] = (_BYTE)v51;
    v52 = JSC::Wasm::memoryLog2Alignment();
    v60 = *(_DWORD **)(a1 + 8);
    v61 = v60[50];
    if (v61 < v60[13])
    {
      v116 = (JSC::AssemblerBuffer *)(v60 + 14);
      do
      {
        if ((v61 + 4) > v60[48])
        {
          v118 = v52;
          v117 = v116;
          JSC::AssemblerBuffer::outOfLineGrow(v116, v53, v54, v55, v56, v57, v58, v59);
          v116 = v117;
          v52 = v118;
          v61 = v60[50];
        }
        *(_DWORD *)(*((_QWORD *)v60 + 7) + v61) = -721215457;
        v61 = v60[50] + 4;
        v60[50] = v61;
      }
      while (v61 < v60[13]);
    }
    v60[52] = 0;
    v62 = (v48 >> 8);
    v63 = v8;
    switch((char)v52)
    {
      case 0:
        JSC::MacroAssemblerARM64::loadLinkAcq8(*(_QWORD *)(a1 + 8), v63, v62, v55, v56, v57, v58, v59);
        v64 = JSC::Wasm::memoryLog2Alignment();
        if (v64 <= 2)
          v64 = 2;
        if (v64 == 3)
          v65 = -2;
        else
          v65 = -1;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitSanitizeAtomicResult(a1, a2, v65, v62, (int)v51);
        JSC::MacroAssemblerARM64::storeCondRel8(*(_QWORD *)(a1 + 8), (uint64_t)v51, v63, (uint64_t)v51, v66, v67, v68, v69);
        break;
      case 1:
        JSC::MacroAssemblerARM64::loadLinkAcq16(*(_QWORD *)(a1 + 8), v63, v62, v55, v56, v57, v58, v59);
        v90 = JSC::Wasm::memoryLog2Alignment();
        if (v90 <= 2)
          v90 = 2;
        if (v90 == 3)
          v91 = -2;
        else
          v91 = -1;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitSanitizeAtomicResult(a1, a2, v91, v62, (int)v51);
        JSC::MacroAssemblerARM64::storeCondRel16(*(_QWORD *)(a1 + 8), (uint64_t)v51, v63, (uint64_t)v51, v92, v93, v94, v95);
        break;
      case 2:
        JSC::MacroAssemblerARM64::loadLinkAcq32(*(_QWORD *)(a1 + 8), v63, v62, v55, v56, v57, v58, v59);
        v78 = JSC::Wasm::memoryLog2Alignment();
        if (v78 <= 2)
          v78 = 2;
        if (v78 == 3)
          v79 = -2;
        else
          v79 = -1;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitSanitizeAtomicResult(a1, a2, v79, v62, (int)v51);
        JSC::MacroAssemblerARM64::storeCondRel32(*(_QWORD *)(a1 + 8), (uint64_t)v51, v63, (uint64_t)v51, v80, v81, v82, v83);
        break;
      case 3:
        JSC::MacroAssemblerARM64::loadLinkAcq64(*(_QWORD *)(a1 + 8), v63, v62, v55, v56, v57, v58, v59);
        v84 = JSC::Wasm::memoryLog2Alignment();
        if (v84 <= 2)
          v84 = 2;
        if (v84 == 3)
          v85 = -2;
        else
          v85 = -1;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitSanitizeAtomicResult(a1, a2, v85, v62, (int)v51);
        JSC::MacroAssemblerARM64::storeCondRel64(*(_QWORD *)(a1 + 8), (uint64_t)v51, v63, (uint64_t)v51, v86, v87, v88, v89);
        break;
      case 4:
        __break(0xC471u);
        JUMPOUT(0x198F72190);
      default:
        v96 = JSC::Wasm::memoryLog2Alignment();
        if (v96 <= 2)
          v96 = 2;
        if (v96 == 3)
          v97 = -2;
        else
          v97 = -1;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitSanitizeAtomicResult(a1, a2, v97, v62, (int)v51);
        break;
    }
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 1, (uint64_t)v51, v70, v71, v72, v73, (uint64_t)&v126, v74);
    v125 = v61;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v126, (unsigned int *)&v125, *(_QWORD *)(a1 + 8), v98, v99, v100, v101, v102);
    JSC::Wasm::BBQJITImpl::BBQJIT::emitSanitizeAtomicResult(a1, a2, (char)a3, v62, v62);
    if ((_BYTE)v122)
      goto LABEL_70;
    LOBYTE(v122) = 1;
    v103 = v119[8] & 0x7F;
    if (v103 < 0x40)
    {
      v104 = 1 << v103;
      if ((*(_QWORD *)(*(_QWORD *)v119 + 648) & (1 << v103)) == 0)
      {
LABEL_70:
        if (!HIBYTE(v122))
        {
          HIBYTE(v122) = 1;
          v107 = v120;
          if (v120)
          {
            v108 = __clz(__rbit64(v120));
            v109 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
            do
            {
              if (v108 > 0x1Fu)
              {
                v114 = v109;
                JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(v119, (char)(v108 - 32));
                v109 = v114;
              }
              else
              {
                v110 = 1 << v108;
                if ((*(_QWORD *)(*(_QWORD *)v119 + 648) & (1 << v108)) != 0)
                {
                  if (v108 >= *(unsigned int *)(*(_QWORD *)v119 + 340))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198F721C8);
                  }
                  v111 = *(_QWORD *)(*(_QWORD *)v119 + 328);
                  *(int8x16_t *)(*(_QWORD *)v119 + 992) = vandq_s8(*(int8x16_t *)(*(_QWORD *)v119 + 992), (int8x16_t)vdupq_n_s64(~v110));
                  if ((_BYTE)word_1ECF4C700)
                  {
                    v126 = *(_OWORD *)&v109[2 * v108];
                    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v126, "\n");
                    v109 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
                    v107 = v120;
                  }
                  v112 = v111 + 4 * v108;
                  if ((v107 & v110) == 0 || (*(_WORD *)(v112 + 1) & 7) == 3)
                  {
                    *(_DWORD *)v112 = 0;
                    *(_QWORD *)(*(_QWORD *)v119 + 616) |= v110;
                  }
                }
              }
              if (v108 > 0x3E)
                break;
              v107 = v120;
              if (!v120)
                break;
              v113 = __clz(__rbit64(v120 >> ((v108 + 1) & 0x3F))) + (((_BYTE)v108 + 1) & 0x3F);
              v108 = v113 >= 0x40 ? 64 : v113;
            }
            while (v113 < 0x40);
          }
        }
        return v39;
      }
      v105 = v119[8];
      if (*(unsigned int *)(*(_QWORD *)v119 + 340) > (unint64_t)v119[8])
      {
        v106 = *(_QWORD *)(*(_QWORD *)v119 + 328) + 4 * v119[8];
        *(int8x16_t *)(*(_QWORD *)v119 + 992) = vandq_s8(*(int8x16_t *)(*(_QWORD *)v119 + 992), (int8x16_t)vdupq_n_s64(~v104));
        if ((_BYTE)word_1ECF4C700)
        {
          v126 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v105];
          WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v126, "\n");
        }
        if ((v120 & v104) == 0 || (*(_WORD *)(v106 + 1) & 7) == 3)
        {
          *(_DWORD *)v106 = 0;
          *(_QWORD *)(*(_QWORD *)v119 + 616) |= 1 << v103;
        }
        goto LABEL_70;
      }
LABEL_106:
      __break(0xC471u);
      JUMPOUT(0x198F721C0);
    }
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  v75 = *(_DWORD **)(a1 + 8);
  v76 = (v40 >> 8) & 0x1F | 0x52800000;
  v77 = v75[50];
  if (v77 + 4 > v75[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v75 + 14), (uint64_t)v41, v42, v43, v44, v45, v46, v47);
    v77 = v75[50];
  }
  *(_DWORD *)(*((_QWORD *)v75 + 7) + v77) = v76;
  v75[50] += 4;
  switch((int)a2)
  {
    case 16:
    case 22:
      JSC::MacroAssemblerARM64::atomicXchgAdd32(*(_QWORD *)(a1 + 8), (v48 >> 8), v8, (v48 >> 8), v44, v45, v46, v47);
      break;
    case 17:
      JSC::MacroAssemblerARM64::atomicXchgAdd64(*(_QWORD *)(a1 + 8), (v48 >> 8), v8, (v48 >> 8), v44, v45, v46, v47);
      break;
    case 18:
    case 20:
      JSC::MacroAssemblerARM64::atomicXchgAdd8(*(_QWORD *)(a1 + 8), (v48 >> 8), v8, (v48 >> 8), v44, v45, v46, v47);
      break;
    case 19:
    case 21:
      JSC::MacroAssemblerARM64::atomicXchgAdd16(*(_QWORD *)(a1 + 8), (v48 >> 8), v8, (v48 >> 8), v44, v45, v46, v47);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198F721B0);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::emitSanitizeAtomicResult(a1, a2, (char)a3, v48 >> 8, v48 >> 8);
  return v39;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitAtomicStoreOp(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unsigned __int8 v10;
  uint64_t v13;
  JSC::ARM64LogicalImmediate *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  _QWORD *v32;
  _DWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  JSC::ARM64LogicalImmediate *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  int8x8_t v82;
  _DWORD *v83;
  int i;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[12];
  uint64_t v97;
  uint64_t v98;
  __int16 v99;
  int v100;
  uint64_t v101;
  int v102;

  v10 = BYTE1(a5);
  v13 = SBYTE1(a5);
  if ((_DWORD)a8)
    JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), a8, SBYTE1(a5), SBYTE1(a5), a5, a6, a7, a8);
  if (JSC::Wasm::memoryLog2Alignment())
  {
    v21 = *(_QWORD *)(a1 + 8);
    v22 = JSC::Wasm::memoryLog2Alignment();
    if (v22 >= 5u)
    {
      __break(0xC471u);
      JUMPOUT(0x198F727A8);
    }
    JSC::MacroAssemblerARM64::branchTest64(*((JSC::ARM64LogicalImmediate **)&unk_19919F8D8 + (char)v22), v21, 1, v13, v23, v24, v25, v26, (uint64_t)&v100);
    *(_DWORD *)v96 = v100;
    v27 = v101;
    *(_QWORD *)&v96[4] = v101;
    if (v100 != -1)
    {
      v28 = (_QWORD *)(a1 + 1360);
      v29 = *(unsigned int *)(a1 + 1372);
      if ((_DWORD)v29 == *(_DWORD *)(a1 + 1368))
      {
        v30 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v28, (void *)(v29 + 1), (unint64_t)v96, v16, v17, v18, v19, v20);
        v31 = (_DWORD *)(*(_QWORD *)(a1 + 1360) + 12 * *(unsigned int *)(a1 + 1372));
        *v31 = *(_DWORD *)v30;
        v32 = v31 + 1;
        v27 = *(_QWORD *)(v30 + 4);
      }
      else
      {
        v33 = (_DWORD *)(*v28 + 12 * v29);
        *v33 = v100;
        v32 = v33 + 1;
      }
      *v32 = v27;
      ++*(_DWORD *)(a1 + 1372);
    }
  }
  if (a7 == 1)
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::ScratchScope<>((uint64_t)v96, (JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v15, v16, v17, v18, v19, v20);
    LOBYTE(v34) = v96[8];
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)a6, a7, ((unint64_t)v96[8] << 8) | 2, v35, v36, v37, v38);
    v39 = v96[9];
    v40 = v96[10];
    JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::unbindScratches(v96);
    JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<3,0>::unbindPreserved((uint64_t)v96);
    JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a6, a7, v41, v42, v43, v44, v45);
  }
  else
  {
    v97 = 0;
    v98 = 0;
    *(_QWORD *)v96 = a1;
    v99 = 0;
    v50 = *(_QWORD *)(a1 + 616);
    if (v50)
      v51 = __clz(__rbit64(v50));
    else
      v51 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v14, v15, v16, v17, v18, v19, v20);
    v96[8] = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(v96, v51);
    v59 = *(_QWORD *)(*(_QWORD *)v96 + 616);
    if (v59)
      v60 = __clz(__rbit64(v59));
    else
      v60 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(*(JSC::Wasm::BBQJITImpl::BBQJIT **)v96, v52, v53, v54, v55, v56, v57, v58);
    v96[9] = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(v96, v60);
    v34 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a6, a7, v61, v62, v63, v64, v65) >> 8;
    v39 = v96[8];
    v40 = v96[9];
    JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::unbindEarly(v96);
    v71 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a6, a7, v66, v67, v68, v69, v70);
    if (a7 == 2)
    {
      v72 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a6 + 16;
      if (*(_DWORD *)(a1 + 1280) < v72)
        *(_DWORD *)(a1 + 1280) = v72;
      if ((v71 & 7) != 1 || ((-8 * v72) ^ v71) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a6, a7, v71);
    }
  }
  if (JSC::MacroAssemblerARM64::s_lseCheckState != 2)
  {
    if (!JSC::MacroAssemblerARM64::s_lseCheckState)
    {
      JSC::MacroAssemblerARM64::s_lseCheckState = 1;
      if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
        JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
    }
    v73 = v10;
    v81 = JSC::Wasm::memoryLog2Alignment();
    v83 = *(_DWORD **)(a1 + 8);
    for (i = v83[50]; i < v83[13]; v83[50] = i)
    {
      if ((i + 4) > v83[48])
      {
        v82 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v83 + 14), v74, v75, v76, v77, v78, v79, v80).n128_u64[0];
        i = v83[50];
      }
      *(_DWORD *)(*((_QWORD *)v83 + 7) + i) = -721215457;
      i = v83[50] + 4;
    }
    v83[52] = 0;
    switch(v81)
    {
      case 0:
        JSC::MacroAssemblerARM64::loadLinkAcq8(*(_QWORD *)(a1 + 8), v73, v39, v76, v77, v78, v79, v80);
        break;
      case 1:
        JSC::MacroAssemblerARM64::loadLinkAcq16(*(_QWORD *)(a1 + 8), v73, v39, v76, v77, v78, v79, v80);
        break;
      case 2:
        JSC::MacroAssemblerARM64::loadLinkAcq32(*(_QWORD *)(a1 + 8), v73, v39, v76, v77, v78, v79, v80);
        break;
      case 3:
        JSC::MacroAssemblerARM64::loadLinkAcq64(*(_QWORD *)(a1 + 8), v73, v39, v76, v77, v78, v79, v80);
        break;
      case 4:
        __break(0xC471u);
        JUMPOUT(0x198F727C8);
      default:
        break;
    }
    v85 = (char)v40;
    if (v40 == v34)
      goto LABEL_48;
    v86 = *(_QWORD *)(a1 + 8);
    if (v34 == 63)
    {
      if (v40 != 31)
      {
        v87 = v40 & 0x1F | 0xD2800000;
        goto LABEL_45;
      }
    }
    else if (v40 != 31 && v34 != 31)
    {
      v87 = v40 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_45:
      v90 = *(_DWORD *)(v86 + 200);
      v89 = (unsigned int *)(v86 + 200);
      v88 = v90;
      if (v90 + 4 > *(v89 - 2))
      {
        v82 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v89 - 36), v74, v75, v76, v77, v78, v79, v80).n128_u64[0];
        v88 = *v89;
      }
      *(_DWORD *)(*((_QWORD *)v89 - 18) + v88) = v87;
      *v89 += 4;
LABEL_48:
      switch(v81)
      {
        case 0:
          JSC::MacroAssemblerARM64::storeCondRel8(*(_QWORD *)(a1 + 8), v85, v73, v85, v77, v78, v79, v80);
          break;
        case 1:
          JSC::MacroAssemblerARM64::storeCondRel16(*(_QWORD *)(a1 + 8), v85, v73, v85, v77, v78, v79, v80);
          break;
        case 2:
          JSC::MacroAssemblerARM64::storeCondRel32(*(_QWORD *)(a1 + 8), v85, v73, v85, v77, v78, v79, v80);
          break;
        case 3:
          JSC::MacroAssemblerARM64::storeCondRel64(*(_QWORD *)(a1 + 8), v85, v73, v85, v77, v78, v79, v80);
          break;
        default:
          break;
      }
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 1, v85, v77, v78, v79, v80, (uint64_t)v96, v82);
      v102 = i;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v96, (unsigned int *)&v102, *(_QWORD *)(a1 + 8), v91, v92, v93, v94, v95);
      return;
    }
    v87 = v85 | (32 * (char)v34) | 0x91000000;
    goto LABEL_45;
  }
  switch(a2)
  {
    case 23:
    case 29:
      JSC::MacroAssemblerARM64::atomicXchg32(*(_QWORD *)(a1 + 8), (char)v34, v10, v39, v46, v47, v48, v49);
      break;
    case 24:
      JSC::MacroAssemblerARM64::atomicXchg64(*(_QWORD *)(a1 + 8), (char)v34, v10, v39, v46, v47, v48, v49);
      break;
    case 25:
    case 27:
      JSC::MacroAssemblerARM64::atomicXchg8(*(_QWORD *)(a1 + 8), (char)v34, v10, v39, v46, v47, v48, v49);
      break;
    case 26:
    case 28:
      JSC::MacroAssemblerARM64::atomicXchg16(*(_QWORD *)(a1 + 8), (char)v34, v10, v39, v46, v47, v48, v49);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198F727E8);
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::emitAtomicBinaryRMWOp(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unsigned __int8 v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  _QWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned __int8 v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  JSC::ARM64LogicalImmediate *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  unint64_t v51;
  unint64_t v52;
  JSC::ARM64LogicalImmediate *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned __int8 v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int IfNecessary;
  char v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char **v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char **v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  int8x8_t v137;
  _DWORD *v138;
  int i;
  __int16 v140;
  unsigned int v141;
  int v142;
  signed __int8 v143;
  char v144;
  _DWORD *v145;
  unsigned int v146;
  int v147;
  int v148;
  _DWORD *v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  int v154;
  int v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  unsigned int v165;
  int v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v190;
  unsigned int v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int *v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  int v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  signed __int8 v207;
  unsigned int v208;
  unsigned int v209;
  int v210;
  _BYTE v211[12];
  unint64_t v212;
  uint64_t v213;
  __int16 v214;
  int v215;
  uint64_t v216;
  __int128 v217;

  v10 = BYTE1(a5);
  v14 = SBYTE1(a5);
  if ((_DWORD)a8)
    JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), a8, SBYTE1(a5), SBYTE1(a5), a5, a6, a7, a8);
  if (JSC::Wasm::memoryLog2Alignment())
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = JSC::Wasm::memoryLog2Alignment();
    if (v20 >= 5u)
    {
      __break(0xC471u);
      JUMPOUT(0x198F73A94);
    }
    JSC::MacroAssemblerARM64::branchTest64(*((JSC::ARM64LogicalImmediate **)&unk_19919F8D8 + (char)v20), v19, 1, v14, v21, v22, v23, v24, (uint64_t)&v215);
    *(_DWORD *)v211 = v215;
    v26 = v216;
    *(_QWORD *)&v211[4] = v216;
    if (v215 != -1)
    {
      v27 = (_QWORD *)(a1 + 1360);
      v28 = *(unsigned int *)(a1 + 1372);
      if ((_DWORD)v28 == *(_DWORD *)(a1 + 1368))
      {
        v29 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, (void *)(v28 + 1), (unint64_t)v211, v25, v15, v16, v17, v18);
        v30 = (_DWORD *)(*(_QWORD *)(a1 + 1360) + 12 * *(unsigned int *)(a1 + 1372));
        *v30 = *(_DWORD *)v29;
        v31 = v30 + 1;
        v26 = *(_QWORD *)(v29 + 4);
      }
      else
      {
        v32 = (_DWORD *)(*v27 + 12 * v28);
        *v32 = v215;
        v31 = v32 + 1;
      }
      *v31 = v26;
      ++*(_DWORD *)(a1 + 1372);
    }
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (!v34)
  {
    __break(0xC471u);
    goto LABEL_229;
  }
  v35 = *(_QWORD *)(v33 + 584) + 1232 * v34;
  v36 = *(_DWORD *)(v35 - 32);
  v37 = *(_DWORD *)(v35 - 160);
  v38 = *(_DWORD *)(v33 + 68);
  if (a3 - 192 > 0x33)
  {
    v39 = a3;
  }
  else if (((1 << (a3 + 64)) & 0xFFC19C001C000) != 0)
  {
    v39 = -2;
  }
  else
  {
    v39 = a3;
    if (a3 == 192)
    {
      __break(0xC471u);
      JUMPOUT(0x198F729BCLL);
    }
  }
  v40 = v38 + v36;
  if (v37 == 5)
    v41 = v40 + 1;
  else
    v41 = v40;
  v42 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v41, ((unint64_t)v39 << 8) | 2, 0, v15, v16, v17, v18);
  v207 = a3;
  v208 = a2;
  v209 = v42;
  if (a7 == 1)
  {
    v50 = v42;
    v212 = 0;
    v213 = 0;
    *(_QWORD *)v211 = a1;
    v214 = 0;
    v51 = *(_QWORD *)(a1 + 616);
    if (v51)
      v52 = __clz(__rbit64(v51));
    else
      v52 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v43, v44, v45, v46, v47, v48, v49);
    v211[8] = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(v211, v52);
    v60 = *(_QWORD *)(*(_QWORD *)v211 + 616);
    if (v60)
      v61 = __clz(__rbit64(v60));
    else
      v61 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(*(JSC::Wasm::BBQJITImpl::BBQJIT **)v211, v53, v54, v55, v56, v57, v58, v59);
    v211[9] = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(v211, v61);
    LOBYTE(v62) = v211[8];
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)a6, a7, ((unint64_t)v211[8] << 8) | 2, v63, v64, v65, v66);
    v210 = v211[9];
    JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::unbindEarly(v211);
    JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a6, a7, v67, v68, v69, v70, v71);
    goto LABEL_44;
  }
  v206 = v41;
  v212 = 0;
  v213 = 0;
  *(_QWORD *)v211 = a1;
  v214 = 0;
  v79 = *(_QWORD *)(a1 + 616);
  v80 = v10;
  if (v79)
    v81 = __clz(__rbit64(v79));
  else
    v81 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v43, v44, v45, v46, v47, v48, v49);
  v211[8] = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(v211, v81);
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a6, a7, v82, v83, v84, v85, v86);
  v210 = v211[8];
  if ((_BYTE)v214)
    goto LABEL_36;
  LOBYTE(v214) = 1;
  v93 = v211[8] & 0x7F;
  if ((v211[8] & 0x7Fu) >= 0x40)
  {
LABEL_229:
    __break(1u);
    goto LABEL_230;
  }
  v94 = 1 << v93;
  if ((*(_QWORD *)(*(_QWORD *)v211 + 648) & (1 << v93)) != 0)
  {
    if (*(unsigned int *)(*(_QWORD *)v211 + 340) > (unint64_t)v211[8])
    {
      v95 = *(_QWORD *)(*(_QWORD *)v211 + 328) + 4 * v211[8];
      *(int8x16_t *)(*(_QWORD *)v211 + 992) = vandq_s8(*(int8x16_t *)(*(_QWORD *)v211 + 992), (int8x16_t)vdupq_n_s64(~v94));
      if ((_BYTE)word_1ECF4C700)
      {
        v217 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * (char)v210];
        WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v217, "\n");
      }
      if ((v212 & v94) == 0 || (*(_WORD *)(v95 + 1) & 7) == 3)
      {
        *(_DWORD *)v95 = 0;
        *(_QWORD *)(*(_QWORD *)v211 + 616) |= 1 << v93;
      }
      goto LABEL_36;
    }
LABEL_230:
    __break(0xC471u);
    JUMPOUT(0x198F73BFCLL);
  }
LABEL_36:
  if (!HIBYTE(v214))
  {
    HIBYTE(v214) = 1;
    v96 = v212;
    if (v212)
    {
      v105 = __clz(__rbit64(v212));
      v106 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
      v107 = "\n";
      do
      {
        if (v105 > 0x1Fu)
        {
          v112 = v106;
          v113 = v107;
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(v211, (char)(v105 - 32));
          v107 = v113;
          v106 = v112;
        }
        else
        {
          v108 = 1 << v105;
          if ((*(_QWORD *)(*(_QWORD *)v211 + 648) & (1 << v105)) != 0)
          {
            if (v105 >= *(unsigned int *)(*(_QWORD *)v211 + 340))
            {
              __break(0xC471u);
              JUMPOUT(0x198F73C10);
            }
            v109 = *(_QWORD *)(*(_QWORD *)v211 + 328);
            *(int8x16_t *)(*(_QWORD *)v211 + 992) = vandq_s8(*(int8x16_t *)(*(_QWORD *)v211 + 992), (int8x16_t)vdupq_n_s64(~v108));
            if ((_BYTE)word_1ECF4C700)
            {
              v217 = *(_OWORD *)&v106[2 * v105];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v217, "\n");
              v107 = "\n";
              v106 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
              v96 = v212;
            }
            v110 = v109 + 4 * v105;
            if ((v96 & v108) == 0 || (*(_WORD *)(v110 + 1) & 7) == 3)
            {
              *(_DWORD *)v110 = 0;
              *(_QWORD *)(*(_QWORD *)v211 + 616) |= v108;
            }
          }
        }
        if (v105 > 0x3E)
          break;
        v96 = v212;
        if (!v212)
          break;
        v111 = __clz(__rbit64(v212 >> ((v105 + 1) & 0x3F))) + (((_BYTE)v105 + 1) & 0x3F);
        v105 = v111 >= 0x40 ? 64 : v111;
      }
      while (v111 < 0x40);
    }
  }
  v62 = IfNecessary >> 8;
  v97 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a6, a7, v87, v88, v89, v90, v91);
  v10 = v80;
  if (a7 == 2)
  {
    v98 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a6 + 16;
    a2 = v208;
    if (*(_DWORD *)(a1 + 1280) < v98)
      *(_DWORD *)(a1 + 1280) = v98;
    v41 = v206;
    v50 = v209;
    if ((v97 & 7) != 1 || ((-8 * v98) ^ v97) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a6, a7, v97);
  }
  else
  {
    a2 = v208;
    v50 = v209;
    v41 = v206;
  }
LABEL_44:
  v99 = a2 - 30;
  switch((int)a2)
  {
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      v100 = JSC::MacroAssemblerARM64::s_lseCheckState;
      if (JSC::MacroAssemblerARM64::s_lseCheckState != 2)
        goto LABEL_84;
      switch(JSC::Wasm::memoryLog2Alignment())
      {
        case 0u:
          JSC::MacroAssemblerARM64::atomicXchgAdd8(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v101, v102, v103, v104);
          break;
        case 1u:
          JSC::MacroAssemblerARM64::atomicXchgAdd16(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v101, v102, v103, v104);
          break;
        case 2u:
          JSC::MacroAssemblerARM64::atomicXchgAdd32(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v101, v102, v103, v104);
          break;
        case 3u:
          JSC::MacroAssemblerARM64::atomicXchgAdd64(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v101, v102, v103, v104);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F73B3CLL);
      }
      goto LABEL_155;
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
      v100 = JSC::MacroAssemblerARM64::s_lseCheckState;
      if (JSC::MacroAssemblerARM64::s_lseCheckState != 2)
        goto LABEL_84;
      v125 = *(_QWORD *)(a1 + 8);
      if (v210 == v62)
        goto LABEL_193;
      if (v62 == 63)
      {
        if (v210 != 31)
        {
          v190 = v210 & 0x1F | 0xD2800000;
          goto LABEL_190;
        }
      }
      else if (v210 != 31 && v62 != 31)
      {
        v126 = v210 & 0xFFE0FFFF | ((v62 & 0x1F) << 16);
        v127 = -1442839584;
        goto LABEL_189;
      }
      v126 = (char)v210 | (32 * (char)v62);
      v127 = -1862270976;
LABEL_189:
      v190 = v126 | v127;
LABEL_190:
      v193 = *(_DWORD *)(v125 + 200);
      v192 = (unsigned int *)(v125 + 200);
      v191 = v193;
      if (v193 + 4 > *(v192 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v192 - 36), v72, v73, v74, v75, v76, v77, v78);
        v191 = *v192;
      }
      *(_DWORD *)(*((_QWORD *)v192 - 18) + v191) = v190;
      *v192 += 4;
      v125 = *(_QWORD *)(a1 + 8);
LABEL_193:
      if (v207 == 254)
      {
        if (v210 == 31)
          v194 = -885037057;
        else
          v194 = (v210 & 0x1F | ((v210 & 0x1F) << 16) | 0xCB000000) + 992;
      }
      else if (v210 == 31)
      {
        v194 = 1262446591;
      }
      else
      {
        v194 = v210 & 0xFFE0FFFF | ((v210 & 0x1F) << 16) | 0x4B0003E0;
      }
      v197 = *(_DWORD *)(v125 + 200);
      v196 = (unsigned int *)(v125 + 200);
      v195 = v197;
      if (v197 + 4 > *(v196 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v196 - 36), v72, v73, v74, v75, v76, v77, v78);
        v195 = *v196;
      }
      *(_DWORD *)(*((_QWORD *)v196 - 18) + v195) = v194;
      *v196 += 4;
      switch(JSC::Wasm::memoryLog2Alignment())
      {
        case 0u:
          JSC::MacroAssemblerARM64::atomicXchgAdd8(*(_QWORD *)(a1 + 8), (char)v210, v10, (v50 >> 8), v198, v199, v200, v201);
          break;
        case 1u:
          JSC::MacroAssemblerARM64::atomicXchgAdd16(*(_QWORD *)(a1 + 8), (char)v210, v10, (v50 >> 8), v198, v199, v200, v201);
          break;
        case 2u:
          JSC::MacroAssemblerARM64::atomicXchgAdd32(*(_QWORD *)(a1 + 8), (char)v210, v10, (v50 >> 8), v198, v199, v200, v201);
          break;
        case 3u:
          JSC::MacroAssemblerARM64::atomicXchgAdd64(*(_QWORD *)(a1 + 8), (char)v210, v10, (v50 >> 8), v198, v199, v200, v201);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F73BDCLL);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::emitSanitizeAtomicResult(a1, a2, v207, v50 >> 8, v50 >> 8);
      return v41;
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      v100 = JSC::MacroAssemblerARM64::s_lseCheckState;
      if (JSC::MacroAssemblerARM64::s_lseCheckState != 2)
        goto LABEL_84;
      v118 = *(_DWORD **)(a1 + 8);
      if (v210 == v62)
        goto LABEL_171;
      if (v62 == 63)
      {
        if (v210 != 31)
        {
          v179 = v210 & 0x1F | 0xD2800000;
          goto LABEL_168;
        }
      }
      else if (v210 != 31 && v62 != 31)
      {
        v119 = v210 & 0xFFE0FFFF | ((v62 & 0x1F) << 16);
        v120 = -1442839584;
        goto LABEL_167;
      }
      v119 = (char)v210 | (32 * (char)v62);
      v120 = -1862270976;
LABEL_167:
      v179 = v119 | v120;
LABEL_168:
      v182 = v118[50];
      v181 = v118 + 50;
      v180 = v182;
      if (v182 + 4 > *(v181 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v181 - 36), v72, v73, v74, v75, v76, v77, v78);
        v180 = *v181;
      }
      *(_DWORD *)(*((_QWORD *)v181 - 18) + v180) = v179;
      *v181 += 4;
      v118 = *(_DWORD **)(a1 + 8);
LABEL_171:
      v183 = v118[50];
      if (v207 == 254)
        v184 = -1440742432;
      else
        v184 = 706741216;
      if (v183 + 4 > v118[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v118 + 14), v72, v73, v74, v75, v76, v77, v78);
        v183 = v118[50];
      }
      *(_DWORD *)(*((_QWORD *)v118 + 7) + v183) = (v210 & 0x1F | ((v210 & 0x1F) << 16)) + v184;
      v118[50] += 4;
      switch(JSC::Wasm::memoryLog2Alignment())
      {
        case 0u:
          JSC::MacroAssemblerARM64::atomicXchgClear8(*(_QWORD *)(a1 + 8), (char)v210, v10, (v50 >> 8), v185, v186, v187, v188);
          break;
        case 1u:
          JSC::MacroAssemblerARM64::atomicXchgClear16(*(_QWORD *)(a1 + 8), (char)v210, v10, (v50 >> 8), v185, v186, v187, v188);
          break;
        case 2u:
          JSC::MacroAssemblerARM64::atomicXchgClear32(*(_QWORD *)(a1 + 8), (char)v210, v10, (v50 >> 8), v185, v186, v187, v188);
          break;
        case 3u:
          JSC::MacroAssemblerARM64::atomicXchgClear64(*(_QWORD *)(a1 + 8), (char)v210, v10, (v50 >> 8), v185, v186, v187, v188);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F73BBCLL);
      }
      v174 = v207;
LABEL_182:
      v175 = v50 >> 8;
      v176 = a1;
      v177 = a2;
      goto LABEL_183;
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      v100 = JSC::MacroAssemblerARM64::s_lseCheckState;
      if (JSC::MacroAssemblerARM64::s_lseCheckState != 2)
        goto LABEL_84;
      switch(JSC::Wasm::memoryLog2Alignment())
      {
        case 0u:
          JSC::MacroAssemblerARM64::atomicXchgOr8(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v121, v122, v123, v124);
          break;
        case 1u:
          JSC::MacroAssemblerARM64::atomicXchgOr16(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v121, v122, v123, v124);
          break;
        case 2u:
          JSC::MacroAssemblerARM64::atomicXchgOr32(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v121, v122, v123, v124);
          break;
        case 3u:
          JSC::MacroAssemblerARM64::atomicXchgOr64(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v121, v122, v123, v124);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F73B7CLL);
      }
      goto LABEL_155;
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
      v100 = JSC::MacroAssemblerARM64::s_lseCheckState;
      if (JSC::MacroAssemblerARM64::s_lseCheckState != 2)
        goto LABEL_84;
      switch(JSC::Wasm::memoryLog2Alignment())
      {
        case 0u:
          JSC::MacroAssemblerARM64::atomicXchgXor8(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v114, v115, v116, v117);
          break;
        case 1u:
          JSC::MacroAssemblerARM64::atomicXchgXor16(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v114, v115, v116, v117);
          break;
        case 2u:
          JSC::MacroAssemblerARM64::atomicXchgXor32(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v114, v115, v116, v117);
          break;
        case 3u:
          JSC::MacroAssemblerARM64::atomicXchgXor64(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v114, v115, v116, v117);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F73B5CLL);
      }
LABEL_155:
      v174 = v207;
      goto LABEL_182;
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
      v100 = JSC::MacroAssemblerARM64::s_lseCheckState;
      if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
      {
        switch(JSC::Wasm::memoryLog2Alignment())
        {
          case 0u:
            JSC::MacroAssemblerARM64::atomicXchg8(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v160, v161, v162, v163);
            break;
          case 1u:
            JSC::MacroAssemblerARM64::atomicXchg16(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v160, v161, v162, v163);
            break;
          case 2u:
            JSC::MacroAssemblerARM64::atomicXchg32(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v160, v161, v162, v163);
            break;
          case 3u:
            JSC::MacroAssemblerARM64::atomicXchg64(*(_QWORD *)(a1 + 8), (char)v62, v10, (v50 >> 8), v160, v161, v162, v163);
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198F73B9CLL);
        }
        v174 = v207;
        v176 = a1;
        v177 = a2;
        v175 = v50 >> 8;
        v178 = v175;
      }
      else
      {
LABEL_84:
        if (!v100)
        {
          JSC::MacroAssemblerARM64::s_lseCheckState = 1;
          if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
            JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
        }
        v128 = v10;
        v136 = JSC::Wasm::memoryLog2Alignment();
        v138 = *(_DWORD **)(a1 + 8);
        for (i = v138[50]; i < v138[13]; v138[50] = i)
        {
          if ((i + 4) > v138[48])
          {
            v137 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v138 + 14), v129, v130, v131, v132, v133, v134, v135).n128_u64[0];
            i = v138[50];
          }
          *(_DWORD *)(*((_QWORD *)v138 + 7) + i) = -721215457;
          i = v138[50] + 4;
        }
        v138[52] = 0;
        v140 = v209;
        switch(v136)
        {
          case 0:
            JSC::MacroAssemblerARM64::loadLinkAcq8(*(_QWORD *)(a1 + 8), v128, ((__int16)v209 >> 8), v131, v132, v133, v134, v135);
            break;
          case 1:
            JSC::MacroAssemblerARM64::loadLinkAcq16(*(_QWORD *)(a1 + 8), v128, ((__int16)v209 >> 8), v131, v132, v133, v134, v135);
            break;
          case 2:
            JSC::MacroAssemblerARM64::loadLinkAcq32(*(_QWORD *)(a1 + 8), v128, ((__int16)v209 >> 8), v131, v132, v133, v134, v135);
            break;
          case 3:
            JSC::MacroAssemblerARM64::loadLinkAcq64(*(_QWORD *)(a1 + 8), v128, ((__int16)v209 >> 8), v131, v132, v133, v134, v135);
            break;
          case 4:
            __break(0xC471u);
            JUMPOUT(0x198F73ADCLL);
          default:
            break;
        }
        v141 = v209 >> 8;
        switch(v99)
        {
          case 0:
          case 2:
          case 3:
            v149 = *(_DWORD **)(a1 + 8);
            if (v62 == 31)
            {
              LOBYTE(v62) = BYTE1(v209);
              LOBYTE(v141) = 31;
            }
            else
            {
              v144 = v210;
              if (BYTE1(v209) != 31 && v210 != 31)
              {
                v150 = (unsigned __int16)(32 * (BYTE1(v209) & 0x1F)) | ((v62 & 0x1F) << 16) | v210 & 0x1F;
                v151 = 184549376;
                goto LABEL_123;
              }
            }
            v202 = (char)v210 | (32 * (char)v141) | ((v62 & 0x1F) << 16);
            v203 = 186671104;
            goto LABEL_212;
          case 1:
          case 4:
          case 5:
          case 6:
            v152 = -1962934272;
            v153 = *(_QWORD *)(a1 + 8);
            if (v62 == 31)
            {
              v62 = v209 >> 8;
              LOBYTE(v141) = 31;
            }
            else if (BYTE1(v209) != 31 && v210 != 31)
            {
              v154 = (unsigned __int16)(32 * (BYTE1(v209) & 0x1F)) | ((v62 & 0x1F) << 16) | v210 & 0x1F;
              goto LABEL_104;
            }
            v154 = (char)v210 | (32 * (char)v141) | ((v62 & 0x1F) << 16);
            v152 = -1960812544;
LABEL_104:
            v155 = v154 | v152;
            v158 = *(_DWORD *)(v153 + 200);
            v157 = (unsigned int *)(v153 + 200);
            v156 = v158;
            if (v158 + 4 > *(v157 - 2))
            {
              v137 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v157 - 36), v129, v130, v131, v132, v133, v134, v135).n128_u64[0];
              v156 = *v157;
            }
            *(_DWORD *)(*((_QWORD *)v157 - 18) + v156) = v155;
            *v157 += 4;
            goto LABEL_107;
          case 7:
          case 9:
          case 10:
            v149 = *(_DWORD **)(a1 + 8);
            v166 = (v62 & 0x1F) << 16;
            v144 = v210;
            if (BYTE1(v209) != 31 && v210 != 31)
            {
              v202 = v210 & 0x1F | (32 * (BYTE1(v209) & 0x1F)) | v166;
              v203 = 1258291200;
              goto LABEL_212;
            }
            v167 = (char)v210 | (32 * SBYTE1(v209)) | v166 | 0x4B206000;
            v168 = v149[50];
            v143 = v207;
            if (v168 + 4 > v149[48])
            {
              v137 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v149 + 14), v129, v130, v131, v132, v133, v134, v135).n128_u64[0];
              v168 = v149[50];
            }
            *(_DWORD *)(*((_QWORD *)v149 + 7) + v168) = v167;
            v149[50] += 4;
            goto LABEL_134;
          case 8:
          case 11:
          case 12:
          case 13:
            v149 = *(_DWORD **)(a1 + 8);
            v144 = v210;
            if (v210 == 31 || BYTE1(v209) == 31)
            {
              v150 = (char)v210 | (32 * SBYTE1(v209)) | ((v62 & 0x1F) << 16);
              v151 = -887070720;
LABEL_123:
              v164 = v150 | v151;
              v165 = v149[50];
              if (v165 + 4 > v149[48])
              {
                v137 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v149 + 14), v129, v130, v131, v132, v133, v134, v135).n128_u64[0];
                v165 = v149[50];
              }
              *(_DWORD *)(*((_QWORD *)v149 + 7) + v165) = v164;
              v149[50] += 4;
              v143 = v207;
LABEL_134:
              v140 = v209;
            }
            else
            {
              v202 = (unsigned __int16)(32 * (BYTE1(v209) & 0x1F)) | ((v62 & 0x1F) << 16) | v210 & 0x1F;
              v203 = -889192448;
LABEL_212:
              v204 = v202 | v203;
              v205 = v149[50];
              if (v205 + 4 > v149[48])
              {
                v137 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v149 + 14), v129, v130, v131, v132, v133, v134, v135).n128_u64[0];
                v205 = v149[50];
              }
              *(_DWORD *)(*((_QWORD *)v149 + 7) + v205) = v204;
              v149[50] += 4;
LABEL_107:
              v143 = v207;
              v140 = v209;
              v144 = v210;
            }
LABEL_140:
            switch(v136)
            {
              case 0:
                JSC::MacroAssemblerARM64::storeCondRel8(*(_QWORD *)(a1 + 8), v144, v128, v144, v132, v133, v134, v135);
                break;
              case 1:
                JSC::MacroAssemblerARM64::storeCondRel16(*(_QWORD *)(a1 + 8), v144, v128, v144, v132, v133, v134, v135);
                break;
              case 2:
                JSC::MacroAssemblerARM64::storeCondRel32(*(_QWORD *)(a1 + 8), v144, v128, v144, v132, v133, v134, v135);
                break;
              case 3:
                JSC::MacroAssemblerARM64::storeCondRel64(*(_QWORD *)(a1 + 8), v144, v128, v144, v132, v133, v134, v135);
                break;
              default:
                break;
            }
            JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 1, v144, v132, v133, v134, v135, (uint64_t)v211, v137);
            LODWORD(v217) = i;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v211, (unsigned int *)&v217, *(_QWORD *)(a1 + 8), v169, v170, v171, v172, v173);
            v174 = v143;
            v175 = v140 >> 8;
            v176 = a1;
            v177 = v208;
            break;
          case 14:
          case 16:
          case 17:
            v145 = *(_DWORD **)(a1 + 8);
            v146 = v145[50];
            if (v146 + 4 > v145[48])
            {
              v137 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v145 + 14), v129, v130, v131, v132, v133, v134, v135).n128_u64[0];
              v146 = v145[50];
            }
            v144 = v210;
            v147 = (unsigned __int16)(32 * (BYTE1(v209) & 0x1F)) | ((v62 & 0x1F) << 16) | v210 & 0x1F;
            v148 = 167772160;
            goto LABEL_138;
          case 15:
          case 18:
          case 19:
          case 20:
            v145 = *(_DWORD **)(a1 + 8);
            v146 = v145[50];
            if (v146 + 4 > v145[48])
            {
              v137 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v145 + 14), v129, v130, v131, v132, v133, v134, v135).n128_u64[0];
              v146 = v145[50];
            }
            v144 = v210;
            v147 = (unsigned __int16)(32 * (BYTE1(v209) & 0x1F)) | ((v62 & 0x1F) << 16) | v210 & 0x1F;
            v148 = -1979711488;
            goto LABEL_138;
          case 21:
          case 23:
          case 24:
            v145 = *(_DWORD **)(a1 + 8);
            v146 = v145[50];
            if (v146 + 4 > v145[48])
            {
              v137 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v145 + 14), v129, v130, v131, v132, v133, v134, v135).n128_u64[0];
              v146 = v145[50];
            }
            v144 = v210;
            v147 = (unsigned __int16)(32 * (BYTE1(v209) & 0x1F)) | ((v62 & 0x1F) << 16) | v210 & 0x1F;
            v148 = 704643072;
            goto LABEL_138;
          case 22:
          case 25:
          case 26:
          case 27:
            v145 = *(_DWORD **)(a1 + 8);
            v146 = v145[50];
            if (v146 + 4 > v145[48])
            {
              v137 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v145 + 14), v129, v130, v131, v132, v133, v134, v135).n128_u64[0];
              v146 = v145[50];
            }
            v144 = v210;
            v159 = ((unsigned __int16)(32 * (BYTE1(v209) & 0x1F)) | ((v62 & 0x1F) << 16) | v210 & 0x1F) - 1442840576;
            goto LABEL_139;
          case 28:
          case 30:
          case 31:
            v145 = *(_DWORD **)(a1 + 8);
            v146 = v145[50];
            if (v146 + 4 > v145[48])
            {
              v137 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v145 + 14), v129, v130, v131, v132, v133, v134, v135).n128_u64[0];
              v146 = v145[50];
            }
            v144 = v210;
            v147 = (unsigned __int16)(32 * (BYTE1(v209) & 0x1F)) | ((v62 & 0x1F) << 16) | v210 & 0x1F;
            v148 = 1241513984;
            goto LABEL_138;
          case 29:
          case 32:
          case 33:
          case 34:
            v145 = *(_DWORD **)(a1 + 8);
            v146 = v145[50];
            if (v146 + 4 > v145[48])
            {
              v137 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v145 + 14), v129, v130, v131, v132, v133, v134, v135).n128_u64[0];
              v146 = v145[50];
            }
            v144 = v210;
            v147 = (unsigned __int16)(32 * (BYTE1(v209) & 0x1F)) | ((v62 & 0x1F) << 16) | v210 & 0x1F;
            v148 = -905969664;
LABEL_138:
            v159 = v147 | v148;
LABEL_139:
            *(_DWORD *)(*((_QWORD *)v145 + 7) + v146) = v159;
            v145[50] += 4;
            v143 = v207;
            goto LABEL_140;
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
            v142 = (char)v62;
            v143 = v207;
            v144 = v210;
            JSC::Wasm::BBQJITImpl::BBQJIT::emitSanitizeAtomicResult(a1, v208, v207, v142, (char)v210);
            goto LABEL_140;
          default:
            __break(0xC471u);
            JUMPOUT(0x198F73B1CLL);
        }
LABEL_183:
        v178 = v175;
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::emitSanitizeAtomicResult(v176, v177, v174, v175, v178);
      return v41;
    default:
      __break(0xC471u);
      JUMPOUT(0x198F73AFCLL);
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::emitAtomicCompareExchange(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, unsigned int a11)
{
  unsigned __int8 v13;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  _QWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  JSC::ARM64LogicalImmediate *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  JSC::ARM64LogicalImmediate *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  JSC::ARM64LogicalImmediate *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unsigned __int8 v94;
  unsigned int v95;
  JSC::ARM64LogicalImmediate *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int IfNecessary;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  const char *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  const char *v143;
  const char *v144;
  const char *v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  unint64_t v165;
  char **v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char **v172;
  const char *v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int i;
  unsigned int v188;
  int v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int8x8_t v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int8x8_t v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  unsigned int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int8x8_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int8x8_t v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  unsigned int v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int8x8_t v278;
  int v279;
  int v280;
  unsigned int v281;
  uint64_t v282;
  unsigned int v283;
  unsigned int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  char v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int *v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned __int8 v318;
  char v319;
  uint64_t v320;
  unsigned int v321;
  unsigned int v322;
  char v323;
  unsigned int v324;
  unsigned __int8 v325;
  JSC::AssemblerBuffer *v326;
  unsigned int v327;
  unsigned int v328;
  JSC::Wasm::BBQJITImpl::BBQJIT *v329[2];
  unint64_t v330;
  uint64_t v331;
  __int16 v332;
  _BYTE v333[12];
  unint64_t v334;
  uint64_t v335;
  __int16 v336;
  int v337;
  uint64_t v338;
  __int128 v339;
  int v340;
  unsigned int v341[3];
  unsigned int v342[3];

  v13 = BYTE1(a5);
  v16 = a5 >> 8;
  v17 = SBYTE1(a5);
  if (a11)
    JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), a11, SBYTE1(a5), SBYTE1(a5), a5, a6, a7, a8);
  v22 = JSC::Wasm::memoryLog2Alignment();
  if (v22)
  {
    v23 = *(_QWORD *)(a1 + 8);
    v24 = JSC::Wasm::memoryLog2Alignment();
    if (v24 >= 5u)
    {
      __break(0xC471u);
      JUMPOUT(0x198F757BCLL);
    }
    JSC::MacroAssemblerARM64::branchTest64(*((JSC::ARM64LogicalImmediate **)&unk_19919F8D8 + (char)v24), v23, 1, v17, v25, v26, v27, v28, (uint64_t)&v337);
    *(_DWORD *)v333 = v337;
    v30 = v338;
    *(_QWORD *)&v333[4] = v338;
    if (v337 != -1)
    {
      v31 = (_QWORD *)(a1 + 1360);
      v32 = *(unsigned int *)(a1 + 1372);
      if ((_DWORD)v32 == *(_DWORD *)(a1 + 1368))
      {
        v33 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, (void *)(v32 + 1), (unint64_t)v333, v29, v18, v19, v20, v21);
        v34 = (_DWORD *)(*(_QWORD *)(a1 + 1360) + 12 * *(unsigned int *)(a1 + 1372));
        *v34 = *(_DWORD *)v33;
        v35 = v34 + 1;
        v30 = *(_QWORD *)(v33 + 4);
      }
      else
      {
        v36 = (_DWORD *)(*v31 + 12 * v32);
        *v36 = v337;
        v35 = v36 + 1;
      }
      *v35 = v30;
      ++*(_DWORD *)(a1 + 1372);
    }
  }
  v325 = v22;
  v37 = *(_QWORD *)(a1 + 88);
  v38 = *(_DWORD *)(v37 + 596);
  if (!v38)
  {
    __break(0xC471u);
    goto LABEL_274;
  }
  v39 = a7 >> 8;
  v40 = *(_QWORD *)(v37 + 584) + 1232 * v38;
  v41 = *(_DWORD *)(v40 - 32);
  v42 = *(_DWORD *)(v40 - 160);
  v43 = *(_DWORD *)(v37 + 68);
  v318 = v13;
  if (BYTE1(a7) - 192 <= 0x33)
  {
    if (((1 << (BYTE1(a7) + 64)) & 0xFFC19C001C000) != 0)
    {
      LOBYTE(v39) = -2;
    }
    else if (BYTE1(a7) == 192)
    {
      __break(0xC471u);
      JUMPOUT(0x198F75760);
    }
  }
  v44 = v43 + v41;
  if (v42 == 5)
    v45 = v44 + 1;
  else
    v45 = v44;
  v328 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v45, ((unint64_t)v39 << 8) | 2, 0, v18, v19, v20, v21);
  v334 = 0;
  v335 = 0;
  *(_QWORD *)v333 = a1;
  v336 = 0;
  v53 = *(_QWORD *)(a1 + 616);
  v320 = v45;
  if (v53)
    v54 = __clz(__rbit64(v53));
  else
    v54 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v46, v47, v48, v49, v50, v51, v52);
  v327 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(v333, v54);
  v333[8] = v327;
  v323 = BYTE1(a7);
  v324 = a2;
  v319 = v16;
  if (a10 == 1)
  {
    if (a7 == 1)
    {
      v330 = 0;
      v331 = 0;
      v329[0] = (JSC::Wasm::BBQJITImpl::BBQJIT *)a1;
      v332 = 0;
      v62 = *(_QWORD *)(a1 + 616);
      if (v62)
        v63 = __clz(__rbit64(v62));
      else
        v63 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v55, v56, v57, v58, v59, v60, v61);
      LOBYTE(v329[1]) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(v329, v63);
      v71 = *((_QWORD *)v329[0] + 77);
      if (v71)
        v72 = __clz(__rbit64(v71));
      else
        v72 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(v329[0], v64, v65, v66, v67, v68, v69, v70);
      LOBYTE(v73) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(v329, v72);
      BYTE1(v329[1]) = v73;
      v74 = (char)v329[1];
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)a9, a10, ((unint64_t)LOBYTE(v329[1]) << 8) | 2, v75, v76, v77, v78);
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)a6, a7, ((unint64_t)v73 << 8) | 2, v79, v80, v81, v82);
      JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::unbindEarly((unsigned __int8 *)v329);
      JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a9, a10, v83, v84, v85, v86, v87);
      LOBYTE(v321) = v74;
      v93 = v328;
      v94 = v325;
      goto LABEL_79;
    }
    v330 = 0;
    v331 = 0;
    v329[0] = (JSC::Wasm::BBQJITImpl::BBQJIT *)a1;
    v332 = 0;
    v119 = *(_QWORD *)(a1 + 616);
    if (v119)
      v120 = __clz(__rbit64(v119));
    else
      v120 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v55, v56, v57, v58, v59, v60, v61);
    LOBYTE(v329[1]) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(v329, v120);
    LOBYTE(v321) = v329[1];
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)a9, a10, ((unint64_t)LOBYTE(v329[1]) << 8) | 2, v121, v122, v123, v124);
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a6, a7, v125, v126, v127, v128, v129);
    if ((_BYTE)v332)
      goto LABEL_52;
    LOBYTE(v332) = 1;
    v131 = (uint64_t)v329[1] & 0x7F;
    if (v131 < 0x40)
    {
      v132 = 1 << v131;
      if ((*((_QWORD *)v329[0] + 81) & (1 << v131)) != 0)
      {
        v133 = SLOBYTE(v329[1]);
        if (*((unsigned int *)v329[0] + 85) <= (unint64_t)SLOBYTE(v329[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x198F75824);
        }
        v134 = *((_QWORD *)v329[0] + 41) + 4 * SLOBYTE(v329[1]);
        *((int8x16_t *)v329[0] + 62) = vandq_s8(*((int8x16_t *)v329[0] + 62), (int8x16_t)vdupq_n_s64(~v132));
        if ((_BYTE)word_1ECF4C700)
        {
          v339 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v133];
          v315 = IfNecessary;
          WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v339, "\n");
          IfNecessary = v315;
        }
        if ((v330 & v132) == 0 || (*(_WORD *)(v134 + 1) & 7) == 3)
        {
          *(_DWORD *)v134 = 0;
          *((_QWORD *)v329[0] + 77) |= 1 << v131;
        }
      }
LABEL_52:
      if (!HIBYTE(v332))
      {
        HIBYTE(v332) = 1;
        v135 = v330;
        if (v330)
        {
          v136 = __clz(__rbit64(v330));
          v137 = "BBQ\tReleasing GPR ";
          v138 = "\n";
          do
          {
            if (v136 > 0x1Fu)
            {
              v317 = IfNecessary;
              v144 = v137;
              v145 = v138;
              JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(v329, (char)(v136 - 32));
              v138 = v145;
              v137 = v144;
              IfNecessary = v317;
            }
            else
            {
              v139 = 1 << v136;
              if ((*((_QWORD *)v329[0] + 81) & (1 << v136)) != 0)
              {
                if (v136 >= *((unsigned int *)v329[0] + 85))
                {
                  __break(0xC471u);
                  JUMPOUT(0x198F7582CLL);
                }
                v140 = *((_QWORD *)v329[0] + 41);
                *((int8x16_t *)v329[0] + 62) = vandq_s8(*((int8x16_t *)v329[0] + 62), (int8x16_t)vdupq_n_s64(~v139));
                if ((_BYTE)word_1ECF4C700)
                {
                  v339 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v136];
                  v316 = IfNecessary;
                  v143 = v138;
                  WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>(v137, (uint64_t)&v339, v138);
                  v138 = v143;
                  v137 = "BBQ\tReleasing GPR ";
                  IfNecessary = v316;
                  v135 = v330;
                }
                v141 = v140 + 4 * v136;
                if ((v135 & v139) == 0 || (*(_WORD *)(v141 + 1) & 7) == 3)
                {
                  *(_DWORD *)v141 = 0;
                  *((_QWORD *)v329[0] + 77) |= v139;
                }
              }
            }
            if (v136 > 0x3E)
              break;
            v135 = v330;
            if (!v330)
              break;
            v142 = __clz(__rbit64(v330 >> ((v136 + 1) & 0x3F))) + (((_BYTE)v136 + 1) & 0x3F);
            v136 = v142 >= 0x40 ? 64 : v142;
          }
          while (v142 < 0x40);
        }
      }
      goto LABEL_72;
    }
LABEL_274:
    __break(1u);
    goto LABEL_275;
  }
  v95 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a9, a10, v57, v58, v59, v60, v61);
  if (a7 == 1)
  {
    v330 = 0;
    v331 = 0;
    v329[0] = (JSC::Wasm::BBQJITImpl::BBQJIT *)a1;
    v332 = 0;
    v103 = *(_QWORD *)(a1 + 616);
    v322 = v95;
    if (v103)
      v104 = __clz(__rbit64(v103));
    else
      v104 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v96, v97, v98, v99, v100, v101, v102);
    LOBYTE(v73) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(v329, v104);
    LOBYTE(v329[1]) = v73;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)a6, a7, ((unint64_t)v73 << 8) | 2, v105, v106, v107, v108);
    if (!(_BYTE)v332)
    {
      LOBYTE(v332) = 1;
      v114 = (uint64_t)v329[1] & 0x7F;
      if (v114 >= 0x40)
        goto LABEL_274;
      v115 = 1 << v114;
      if ((*((_QWORD *)v329[0] + 81) & (1 << v114)) != 0)
      {
        v116 = SLOBYTE(v329[1]);
        if (*((unsigned int *)v329[0] + 85) <= (unint64_t)SLOBYTE(v329[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x198F7581CLL);
        }
        v117 = *((_QWORD *)v329[0] + 41) + 4 * SLOBYTE(v329[1]);
        *((int8x16_t *)v329[0] + 62) = vandq_s8(*((int8x16_t *)v329[0] + 62), (int8x16_t)vdupq_n_s64(~v115));
        if ((_BYTE)word_1ECF4C700)
        {
          v339 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v116];
          WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v339, "\n");
        }
        if ((v330 & v115) == 0 || (*(_WORD *)(v117 + 1) & 7) == 3)
        {
          *(_DWORD *)v117 = 0;
          *((_QWORD *)v329[0] + 77) |= 1 << v114;
        }
      }
    }
    if (!HIBYTE(v332))
    {
      HIBYTE(v332) = 1;
      v118 = v330;
      if (v330)
      {
        v165 = __clz(__rbit64(v330));
        v166 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
        v167 = "\n";
        do
        {
          if (v165 > 0x1Fu)
          {
            v172 = v166;
            v173 = v167;
            JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(v329, (char)(v165 - 32));
            v167 = v173;
            v166 = v172;
          }
          else
          {
            v168 = 1 << v165;
            if ((*((_QWORD *)v329[0] + 81) & (1 << v165)) != 0)
            {
              if (v165 >= *((unsigned int *)v329[0] + 85))
              {
                __break(0xC471u);
                JUMPOUT(0x198F75834);
              }
              v169 = *((_QWORD *)v329[0] + 41);
              *((int8x16_t *)v329[0] + 62) = vandq_s8(*((int8x16_t *)v329[0] + 62), (int8x16_t)vdupq_n_s64(~v168));
              if ((_BYTE)word_1ECF4C700)
              {
                v339 = *(_OWORD *)&v166[2 * v165];
                WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v339, "\n");
                v167 = "\n";
                v166 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
                v118 = v330;
              }
              v170 = v169 + 4 * v165;
              if ((v118 & v168) == 0 || (*(_WORD *)(v170 + 1) & 7) == 3)
              {
                *(_DWORD *)v170 = 0;
                *((_QWORD *)v329[0] + 77) |= v168;
              }
            }
          }
          if (v165 > 0x3E)
            break;
          v118 = v330;
          if (!v330)
            break;
          v171 = __clz(__rbit64(v330 >> ((v165 + 1) & 0x3F))) + (((_BYTE)v165 + 1) & 0x3F);
          v165 = v171 >= 0x40 ? 64 : v171;
        }
        while (v171 < 0x40);
      }
    }
    v321 = v322 >> 8;
    goto LABEL_73;
  }
  v321 = v95 >> 8;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a6, a7, v98, v99, v100, v101, v102);
LABEL_72:
  v73 = IfNecessary >> 8;
LABEL_73:
  v93 = v328;
  v94 = v325;
  v146 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a9, a10, v109, v110, v111, v112, v113);
  if (a10 == 2)
  {
    v147 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a9 + 16;
    if (*(_DWORD *)(a1 + 1280) < v147)
      *(_DWORD *)(a1 + 1280) = v147;
    if ((v146 & 7) != 1 || ((-8 * v147) ^ v146) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a9, a10, v146);
  }
LABEL_79:
  v148 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a6, a7, v88, v89, v90, v91, v92);
  if (a7 == 2)
  {
    v156 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a6 + 16;
    if (*(_DWORD *)(a1 + 1280) < v156)
      *(_DWORD *)(a1 + 1280) = v156;
    if ((v148 & 7) != 1 || ((-8 * v156) ^ v148) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a6, a7, v148);
  }
  if (v94 <= 2u)
    JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a1 + 8), *((JSC::ARM64LogicalImmediate **)&unk_19919F900 + (char)v94), (char)v73);
  v157 = v93 >> 8;
  v158 = ((__int16)v93 >> 8);
  if (JSC::MacroAssemblerARM64::s_lseCheckState)
  {
    v159 = (uint64_t *)(a1 + 8);
    v160 = *(_QWORD *)(a1 + 8);
    if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
    {
      if (v73 == BYTE1(v93))
      {
LABEL_234:
        v299 = v323;
        v298 = v324;
        switch(v94)
        {
          case 0u:
            JSC::MacroAssemblerARM64::atomicStrongCAS8(*v159, ((__int16)v93 >> 8), (char)v321, v318, v152, v153, v154, v155);
            break;
          case 1u:
            JSC::MacroAssemblerARM64::atomicStrongCAS16(*v159, ((__int16)v93 >> 8), (char)v321, v318, v152, v153, v154, v155);
            break;
          case 2u:
            JSC::MacroAssemblerARM64::atomicStrongCAS32(*v159, ((__int16)v93 >> 8), (char)v321, v318, v152, v153, v154, v155);
            break;
          case 3u:
            JSC::MacroAssemblerARM64::atomicStrongCAS64(*v159, ((__int16)v93 >> 8), (char)v321, v318, v152, v153, v154, v155);
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198F757FCLL);
        }
        goto LABEL_198;
      }
      if (v73 == 63)
      {
        if (BYTE1(v93) != 31)
        {
          v311 = (v93 >> 8) & 0x1F | 0xD2800000;
LABEL_231:
          v314 = *(_DWORD *)(v160 + 200);
          v313 = (unsigned int *)(v160 + 200);
          v312 = v314;
          if (v314 + 4 > *(v313 - 2))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v313 - 36), v149, v150, v151, v152, v153, v154, v155);
            v312 = *v313;
          }
          *(_DWORD *)(*((_QWORD *)v313 - 18) + v312) = v311;
          *v313 += 4;
          goto LABEL_234;
        }
      }
      else if (BYTE1(v93) != 31 && v73 != 31)
      {
        v161 = (v93 >> 8) & 0x1F | ((v73 & 0x1F) << 16);
        v162 = -1442839584;
LABEL_230:
        v311 = v161 | v162;
        goto LABEL_231;
      }
      v161 = SBYTE1(v93) | (32 * (char)v73);
      v162 = -1862270976;
      goto LABEL_230;
    }
  }
  else
  {
    JSC::MacroAssemblerARM64::s_lseCheckState = 1;
    if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
      JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
    v159 = (uint64_t *)(a1 + 8);
    v160 = *(_QWORD *)(a1 + 8);
  }
  if (v73 != BYTE1(v93))
  {
    if (v73 == 63)
    {
      if (BYTE1(v93) != 31)
      {
        v174 = (v93 >> 8) & 0x1F | 0xD2800000;
LABEL_123:
        v177 = *(_DWORD *)(v160 + 200);
        v176 = (unsigned int *)(v160 + 200);
        v175 = v177;
        if (v177 + 4 > *(v176 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v176 - 36), v149, v150, v151, v152, v153, v154, v155);
          v175 = *v176;
        }
        *(_DWORD *)(*((_QWORD *)v176 - 18) + v175) = v174;
        *v176 += 4;
        goto LABEL_126;
      }
    }
    else if (BYTE1(v93) != 31 && v73 != 31)
    {
      v163 = (v93 >> 8) & 0x1F | ((v73 & 0x1F) << 16);
      v164 = -1442839584;
LABEL_122:
      v174 = v163 | v164;
      goto LABEL_123;
    }
    v163 = SBYTE1(v93) | (32 * (char)v73);
    v164 = -1862270976;
    goto LABEL_122;
  }
LABEL_126:
  switch(v94)
  {
    case 0u:
      v178 = *v159;
      JSC::MacroAssemblerARM64::and32(*v159, (JSC::ARM64LogicalImmediate *)0xFF, SBYTE1(v93), (__int16)v93 >> 8);
      if (!*(_BYTE *)(v178 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198F75494);
      }
      *(_DWORD *)(*(_QWORD *)(v178 + 264) + 208) &= ~*(_DWORD *)(v178 + 288);
      v186 = *(char *)(v178 + 272);
      v326 = (JSC::AssemblerBuffer *)(v178 + 56);
      for (i = *(_DWORD *)(v178 + 200); i < *(_DWORD *)(v178 + 52); *(_DWORD *)(v178 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v178 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v326, v179, v180, v181, v182, v183, v184, v185);
          i = *(_DWORD *)(v178 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v178 + 56) + i) = -721215457;
        i = *(_DWORD *)(v178 + 200) + 4;
      }
      *(_DWORD *)(v178 + 208) = 0;
      v188 = i;
      if ((i + 4) > *(_DWORD *)(v178 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v326, v179, v180, v181, v182, v183, v184, v185);
        v188 = *(_DWORD *)(v178 + 200);
      }
      v189 = 134282240;
      v190 = v186 | (32 * v319);
      *(_DWORD *)(*(_QWORD *)(v178 + 56) + v188) = v190 | 0x85FFC00;
      *(_DWORD *)(v178 + 200) += 4;
      JSC::MacroAssemblerARM64::branch32(v178, 1, v158, v186, v182, v183, v184, v185, (uint64_t)v329);
      v199 = *(_DWORD *)(v178 + 200);
      if (v199 + 4 > *(_DWORD *)(v178 + 192))
      {
        v198 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v326, v191, v192, v193, v194, v195, v196, v197).n128_u64[0];
        v199 = *(_DWORD *)(v178 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v178 + 56) + v199) = (char)v321 | (v327 << 16) | (32 * v319) | 0x800FC00;
      *(_DWORD *)(v178 + 200) += 4;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v178, 1, v327, v194, v195, v196, v197, (uint64_t)&v339, v198);
      v342[0] = i;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v339, v342, v178, v200, v201, v202, v203, v204);
      v212 = *(_DWORD *)(v178 + 200);
      if (v212 + 4 > *(_DWORD *)(v178 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v326, v205, v206, v207, v208, v209, v210, v211);
        v212 = *(_DWORD *)(v178 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v178 + 56) + v212) = v327 | 0x320003E0;
      v213 = *(_DWORD *)(v178 + 200) + 4;
      for (*(_DWORD *)(v178 + 200) = v213; (signed int)v213 < *(_DWORD *)(v178 + 52); *(_DWORD *)(v178 + 200) = v213)
      {
        if (v213 + 4 > *(_DWORD *)(v178 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v326, v205, v206, v207, v208, v209, v210, v211);
          v213 = *(_DWORD *)(v178 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v178 + 56) + v213) = -721215457;
        v213 = *(_DWORD *)(v178 + 200) + 4;
      }
      break;
    case 1u:
      v178 = *v159;
      JSC::MacroAssemblerARM64::and32(*v159, (JSC::ARM64LogicalImmediate *)0xFFFF, SBYTE1(v93), (__int16)v93 >> 8);
      if (!*(_BYTE *)(v178 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198F754F4);
      }
      *(_DWORD *)(*(_QWORD *)(v178 + 264) + 208) &= ~*(_DWORD *)(v178 + 288);
      v186 = *(char *)(v178 + 272);
      v326 = (JSC::AssemblerBuffer *)(v178 + 56);
      for (i = *(_DWORD *)(v178 + 200); i < *(_DWORD *)(v178 + 52); *(_DWORD *)(v178 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v178 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v326, v246, v247, v248, v249, v250, v251, v252);
          i = *(_DWORD *)(v178 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v178 + 56) + i) = -721215457;
        i = *(_DWORD *)(v178 + 200) + 4;
      }
      *(_DWORD *)(v178 + 208) = 0;
      v253 = i;
      if ((i + 4) > *(_DWORD *)(v178 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v326, v246, v247, v248, v249, v250, v251, v252);
        v253 = *(_DWORD *)(v178 + 200);
      }
      v189 = 1208024064;
      v190 = v186 | (32 * v319);
      *(_DWORD *)(*(_QWORD *)(v178 + 56) + v253) = v190 | 0x485FFC00;
      *(_DWORD *)(v178 + 200) += 4;
      JSC::MacroAssemblerARM64::branch32(v178, 1, v158, v186, v249, v250, v251, v252, (uint64_t)v329);
      v262 = *(_DWORD *)(v178 + 200);
      if (v262 + 4 > *(_DWORD *)(v178 + 192))
      {
        v261 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v326, v254, v255, v256, v257, v258, v259, v260).n128_u64[0];
        v262 = *(_DWORD *)(v178 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v178 + 56) + v262) = (char)v321 | (v327 << 16) | (32 * v319) | 0x4800FC00;
      *(_DWORD *)(v178 + 200) += 4;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v178, 1, v327, v257, v258, v259, v260, (uint64_t)&v339, v261);
      v342[0] = i;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v339, v342, v178, v263, v264, v265, v266, v267);
      v268 = *(_DWORD *)(v178 + 200);
      if (v268 + 4 > *(_DWORD *)(v178 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v326, v205, v206, v207, v208, v209, v210, v211);
        v268 = *(_DWORD *)(v178 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v178 + 56) + v268) = v327 | 0x320003E0;
      v213 = *(_DWORD *)(v178 + 200) + 4;
      for (*(_DWORD *)(v178 + 200) = v213; (signed int)v213 < *(_DWORD *)(v178 + 52); *(_DWORD *)(v178 + 200) = v213)
      {
        if (v213 + 4 > *(_DWORD *)(v178 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v326, v205, v206, v207, v208, v209, v210, v211);
          v213 = *(_DWORD *)(v178 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v178 + 56) + v213) = -721215457;
        v213 = *(_DWORD *)(v178 + 200) + 4;
      }
      break;
    case 2u:
      v178 = *v159;
      if (!*(_BYTE *)(*v159 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198F754B4);
      }
      *(_DWORD *)(*(_QWORD *)(v178 + 264) + 208) &= ~*(_DWORD *)(v178 + 288);
      v186 = *(char *)(v178 + 272);
      v326 = (JSC::AssemblerBuffer *)(v178 + 56);
      for (i = *(_DWORD *)(v178 + 200); i < *(_DWORD *)(v178 + 52); *(_DWORD *)(v178 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v178 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v326, v149, v150, v151, v152, v153, v154, v155);
          i = *(_DWORD *)(v178 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v178 + 56) + i) = -721215457;
        i = *(_DWORD *)(v178 + 200) + 4;
      }
      *(_DWORD *)(v178 + 208) = 0;
      v214 = i;
      if ((i + 4) > *(_DWORD *)(v178 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v326, v149, v150, v151, v152, v153, v154, v155);
        v214 = *(_DWORD *)(v178 + 200);
      }
      v189 = -2013201408;
      v190 = v186 | (32 * v319);
      *(_DWORD *)(*(_QWORD *)(v178 + 56) + v214) = v190 | 0x885FFC00;
      *(_DWORD *)(v178 + 200) += 4;
      JSC::MacroAssemblerARM64::branch32(v178, 1, v158, v186, v152, v153, v154, v155, (uint64_t)v329);
      v223 = *(_DWORD *)(v178 + 200);
      if (v223 + 4 > *(_DWORD *)(v178 + 192))
      {
        v222 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v326, v215, v216, v217, v218, v219, v220, v221).n128_u64[0];
        v223 = *(_DWORD *)(v178 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v178 + 56) + v223) = (char)v321 | (v327 << 16) | (32 * v319) | 0x8800FC00;
      *(_DWORD *)(v178 + 200) += 4;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v178, 1, v327, v218, v219, v220, v221, (uint64_t)&v339, v222);
      v342[0] = i;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v339, v342, v178, v224, v225, v226, v227, v228);
      v229 = *(_DWORD *)(v178 + 200);
      if (v229 + 4 > *(_DWORD *)(v178 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v326, v205, v206, v207, v208, v209, v210, v211);
        v229 = *(_DWORD *)(v178 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v178 + 56) + v229) = v327 | 0x320003E0;
      v213 = *(_DWORD *)(v178 + 200) + 4;
      for (*(_DWORD *)(v178 + 200) = v213; (signed int)v213 < *(_DWORD *)(v178 + 52); *(_DWORD *)(v178 + 200) = v213)
      {
        if (v213 + 4 > *(_DWORD *)(v178 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v326, v205, v206, v207, v208, v209, v210, v211);
          v213 = *(_DWORD *)(v178 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v178 + 56) + v213) = -721215457;
        v213 = *(_DWORD *)(v178 + 200) + 4;
      }
      break;
    case 3u:
      v178 = *v159;
      if (!*(_BYTE *)(*v159 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198F754D4);
      }
      *(_DWORD *)(*(_QWORD *)(v178 + 264) + 208) &= ~*(_DWORD *)(v178 + 288);
      v186 = *(char *)(v178 + 272);
      v326 = (JSC::AssemblerBuffer *)(v178 + 56);
      for (i = *(_DWORD *)(v178 + 200); i < *(_DWORD *)(v178 + 52); *(_DWORD *)(v178 + 200) = i)
      {
        if ((i + 4) > *(_DWORD *)(v178 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v326, v149, v150, v151, v152, v153, v154, v155);
          i = *(_DWORD *)(v178 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v178 + 56) + i) = -721215457;
        i = *(_DWORD *)(v178 + 200) + 4;
      }
      *(_DWORD *)(v178 + 208) = 0;
      v230 = i;
      if ((i + 4) > *(_DWORD *)(v178 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v326, v149, v150, v151, v152, v153, v154, v155);
        v230 = *(_DWORD *)(v178 + 200);
      }
      v189 = -939459584;
      v190 = v186 | (32 * v319);
      *(_DWORD *)(*(_QWORD *)(v178 + 56) + v230) = v190 | 0xC85FFC00;
      *(_DWORD *)(v178 + 200) += 4;
      JSC::MacroAssemblerARM64::branch64(v178, 1, v158, v186, v152, v153, v154, v155, (uint64_t)v329);
      v239 = *(_DWORD *)(v178 + 200);
      if (v239 + 4 > *(_DWORD *)(v178 + 192))
      {
        v238 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v326, v231, v232, v233, v234, v235, v236, v237).n128_u64[0];
        v239 = *(_DWORD *)(v178 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v178 + 56) + v239) = (char)v321 | (v327 << 16) | (32 * v319) | 0xC800FC00;
      *(_DWORD *)(v178 + 200) += 4;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v178, 1, v327, v234, v235, v236, v237, (uint64_t)&v339, v238);
      v342[0] = i;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v339, v342, v178, v240, v241, v242, v243, v244);
      v245 = *(_DWORD *)(v178 + 200);
      if (v245 + 4 > *(_DWORD *)(v178 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v326, v205, v206, v207, v208, v209, v210, v211);
        v245 = *(_DWORD *)(v178 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v178 + 56) + v245) = v327 | 0x320003E0;
      v213 = *(_DWORD *)(v178 + 200) + 4;
      for (*(_DWORD *)(v178 + 200) = v213; (signed int)v213 < *(_DWORD *)(v178 + 52); *(_DWORD *)(v178 + 200) = v213)
      {
        if (v213 + 4 > *(_DWORD *)(v178 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v326, v205, v206, v207, v208, v209, v210, v211);
          v213 = *(_DWORD *)(v178 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v178 + 56) + v213) = -721215457;
        v213 = *(_DWORD *)(v178 + 200) + 4;
      }
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198F757DCLL);
  }
  v269 = v213;
  if (v213 + 4 > *(_DWORD *)(v178 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v326, v205, v206, v207, v208, v209, v210, v211);
    v269 = *(_DWORD *)(v178 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v178 + 56) + v269) = 335544320;
  *(_DWORD *)(v178 + 200) += 4;
  if (*(_BYTE *)(v178 + 328))
    v270 = 69;
  else
    v270 = 65;
  *(_QWORD *)&v339 = v213;
  BYTE8(v339) = v270;
  *(_WORD *)((char *)&v339 + 9) = 15;
  BYTE11(v339) = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v329, v178, v206, v207, v208, v209, v210, v211);
  if (v186 != v157)
  {
    if ((_DWORD)v186 == 63)
    {
      if (BYTE1(v328) != 31)
      {
        v283 = (v328 >> 8) & 0x1F | 0xD2800000;
LABEL_190:
        v284 = *(_DWORD *)(v178 + 200);
        v282 = v327;
        if (v284 + 4 > *(_DWORD *)(v178 + 192))
        {
          v278 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v326, v271, v272, v273, v274, v275, v276, v277).n128_u64[0];
          v284 = *(_DWORD *)(v178 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v178 + 56) + v284) = v283;
        v281 = *(_DWORD *)(v178 + 200) + 4;
        *(_DWORD *)(v178 + 200) = v281;
        goto LABEL_193;
      }
    }
    else if (BYTE1(v328) != 31 && (_DWORD)v186 != 31)
    {
      v279 = (v328 >> 8) & 0x1F | ((v186 & 0x1F) << 16);
      v280 = -1442839584;
LABEL_189:
      v283 = v279 | v280;
      goto LABEL_190;
    }
    v279 = (char)v157 | (32 * v186);
    v280 = -1862270976;
    goto LABEL_189;
  }
  v281 = *(_DWORD *)(v178 + 200);
  v282 = v327;
LABEL_193:
  if (v281 + 4 > *(_DWORD *)(v178 + 192))
  {
    v278 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v326, v271, v272, v273, v274, v275, v276, v277).n128_u64[0];
    v281 = *(_DWORD *)(v178 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v178 + 56) + v281) = ((_DWORD)v282 << 16) | v190 | v189;
  *(_DWORD *)(v178 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v178, 1, v282, v274, v275, v276, v277, (uint64_t)v341, v278);
  v340 = i;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v341, (unsigned int *)&v340, v178, v285, v286, v287, v288, v289);
  v297 = *(_DWORD *)(v178 + 200);
  if (v297 + 4 > *(_DWORD *)(v178 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v326, v290, v291, v292, v293, v294, v295, v296);
    v297 = *(_DWORD *)(v178 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v178 + 56) + v297) = v282 & 0x1F | 0x52800000;
  *(_DWORD *)(v178 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v339, v178, v291, v292, v293, v294, v295, v296);
  v299 = v323;
  v298 = v324;
LABEL_198:
  JSC::Wasm::BBQJITImpl::BBQJIT::emitSanitizeAtomicResult(a1, v298, v299, v158, v158);
  if ((_BYTE)v336)
    goto LABEL_207;
  LOBYTE(v336) = 1;
  v300 = v333[8] & 0x7F;
  if (v300 >= 0x40)
    goto LABEL_274;
  v301 = 1 << v300;
  if ((*(_QWORD *)(*(_QWORD *)v333 + 648) & (1 << v300)) == 0)
    goto LABEL_207;
  v302 = v333[8];
  if (*(unsigned int *)(*(_QWORD *)v333 + 340) <= (unint64_t)v333[8])
  {
LABEL_275:
    __break(0xC471u);
    JUMPOUT(0x198F7580CLL);
  }
  v303 = *(_QWORD *)(*(_QWORD *)v333 + 328) + 4 * v333[8];
  *(int8x16_t *)(*(_QWORD *)v333 + 992) = vandq_s8(*(int8x16_t *)(*(_QWORD *)v333 + 992), (int8x16_t)vdupq_n_s64(~v301));
  if ((_BYTE)word_1ECF4C700)
  {
    *(_OWORD *)v329 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v302];
    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v329, "\n");
  }
  if ((v334 & v301) == 0 || (*(_WORD *)(v303 + 1) & 7) == 3)
  {
    *(_DWORD *)v303 = 0;
    *(_QWORD *)(*(_QWORD *)v333 + 616) |= 1 << v300;
  }
LABEL_207:
  if (!HIBYTE(v336))
  {
    HIBYTE(v336) = 1;
    v304 = v334;
    if (v334)
    {
      v306 = __clz(__rbit64(v334));
      do
      {
        if (v306 > 0x1Fu)
        {
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(v333, (char)(v306 - 32));
        }
        else
        {
          v307 = 1 << v306;
          if ((*(_QWORD *)(*(_QWORD *)v333 + 648) & (1 << v306)) != 0)
          {
            if (v306 >= *(unsigned int *)(*(_QWORD *)v333 + 340))
            {
              __break(0xC471u);
              JUMPOUT(0x198F75814);
            }
            v308 = *(_QWORD *)(*(_QWORD *)v333 + 328);
            *(int8x16_t *)(*(_QWORD *)v333 + 992) = vandq_s8(*(int8x16_t *)(*(_QWORD *)v333 + 992), (int8x16_t)vdupq_n_s64(~v307));
            if ((_BYTE)word_1ECF4C700)
            {
              *(_OWORD *)v329 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v306];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v329, "\n");
              v304 = v334;
            }
            v309 = v308 + 4 * v306;
            if ((v304 & v307) == 0 || (*(_WORD *)(v309 + 1) & 7) == 3)
            {
              *(_DWORD *)v309 = 0;
              *(_QWORD *)(*(_QWORD *)v333 + 616) |= v307;
            }
          }
        }
        if (v306 > 0x3E)
          break;
        v304 = v334;
        if (!v334)
          break;
        v310 = __clz(__rbit64(v334 >> ((v306 + 1) & 0x3F))) + (((_BYTE)v306 + 1) & 0x3F);
        v306 = v310 >= 0x40 ? 64 : v310;
      }
      while (v310 < 0x40);
    }
  }
  return v320;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::truncInBounds(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a2)
  {
    case 0:
      JSC::MacroAssemblerARM64::truncateFloatToInt32(*(_DWORD **)(a1 + 8), SBYTE1(a3), SBYTE1(a4), a4, a5, a6, a7, a8);
      break;
    case 1:
      JSC::MacroAssemblerARM64::truncateFloatToUint32(*(_DWORD **)(a1 + 8), SBYTE1(a3), SBYTE1(a4), a4, a5, a6, a7, a8);
      break;
    case 2:
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(*(_QWORD *)(a1 + 8) + 56), (a4 >> 8) & 0x1F | (32 * SBYTE1(a3)) | 0x9E380000, a3, a4, a5, a6, a7, a8);
      break;
    case 3:
      JSC::MacroAssemblerARM64::truncateFloatToUint64(*(_DWORD **)(a1 + 8), SBYTE1(a3), SBYTE1(a4), a4, a5, a6, a7, a8);
      break;
    case 4:
      JSC::MacroAssemblerARM64::truncateDoubleToInt32(*(_DWORD **)(a1 + 8), SBYTE1(a3), SBYTE1(a4), a4, a5, a6, a7, a8);
      break;
    case 5:
      JSC::MacroAssemblerARM64::truncateDoubleToUint32(*(_DWORD **)(a1 + 8), SBYTE1(a3), SBYTE1(a4), a4, a5, a6, a7, a8);
      break;
    case 6:
      JSC::MacroAssemblerARM64::truncateDoubleToInt64(*(_DWORD **)(a1 + 8), SBYTE1(a3), SBYTE1(a4), a4, a5, a6, a7, a8);
      break;
    case 7:
      JSC::MacroAssemblerARM64::truncateDoubleToUint64(*(_DWORD **)(a1 + 8), SBYTE1(a3), SBYTE1(a4), a4, a5, a6, a7, a8);
      break;
    default:
      return;
  }
}

void JSC::MacroAssemblerARM64::truncateFloatToInt32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * v9) | 0x1E380000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::truncateFloatToUint32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * v9) | 0x1E390000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::truncateDoubleToUint32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * v9) | 0x1E790000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::truncateDoubleToInt64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * v9) | 0x9E780000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::truncateFloatToUint64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * v9) | 0x9E390000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::truncateDoubleToUint64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v8 & 0x1F | (32 * v9) | 0x9E790000;
  a1[50] += 4;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::truncTrapping@<X0>(JSC::Wasm::BBQJITImpl::BBQJIT *a1@<X0>, char a2@<W1>, JSC::ARM64LogicalImmediate *a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, unsigned __int8 a10, uint64_t a11)
{
  JSC::ARM64LogicalImmediate *v11;
  char v12;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  signed int v35;
  JSC::ARM64LogicalImmediate *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  BOOL v55;
  int v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v82;
  char v83;
  unsigned int v84;
  unsigned int v85;
  int v87;
  uint64_t v88;
  _BYTE v89[12];
  int v90;
  uint64_t v91;
  __int128 v92;
  unsigned int IfNecessary;
  _BYTE v94[8];
  unsigned __int8 v95;
  unsigned __int8 v96;
  _QWORD v97[2];

  v12 = a6;
  v97[0] = a3;
  v97[1] = a4;
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::ScratchScope<>((uint64_t)v94, a1, (unint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
  if (a4 == 1)
  {
    IfNecessary = 4099;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst((uint64_t)a1, a3, a4, 0x1003uLL, v19, v20, v21, v22);
    LOBYTE(v28) = 16;
  }
  else
  {
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary((uint64_t)a1, (uint64_t)a3, a4, v18, v19, v20, v21, v22);
    v28 = IfNecessary >> 8;
  }
  v83 = v28;
  JSC::Wasm::BBQJITImpl::BBQJIT::consume((uint64_t)a1, (uint64_t)a3, a4, v23, v24, v25, v26, v27);
  v29 = JSC::Wasm::BBQJITImpl::BBQJIT::topValue((uint64_t)a1, v12);
  *a5 = v29;
  *((_WORD *)a5 + 4) = v30;
  v85 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint((uint64_t)a1, v29, a5[1], 0, v31, v32, v33, v34);
  v35 = JSC::Wasm::BBQJITImpl::BBQJIT::truncationKind((uint64_t)a1, a2);
  v41 = v35;
  if (v35 > 7)
  {
    v42 = 0;
    v84 = 13;
  }
  else
  {
    v42 = qword_19919F918[v35];
    v36 = (JSC::ARM64LogicalImmediate *)qword_19919F958[v35];
    v11 = (JSC::ARM64LogicalImmediate *)qword_19919F998[v35];
    v84 = dword_19919F9D8[v35];
  }
  v43 = v95;
  v44 = v96;
  v45 = ((unint64_t)v96 << 8) | 3;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst((uint64_t)a1, v36, v42, ((unint64_t)v95 << 8) | 3, v37, v38, v39, v40);
  JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst((uint64_t)a1, v11, v42, v45, v46, v47, v48, v49);
  v54 = v83;
  if (HIBYTE(word_1ECF4C700))
  {
    v92 = *(_OWORD *)a5;
    *(_QWORD *)v89 = "TruncSaturated";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v82 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v82;
      }
      while (v82 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)v89, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)a1, 1, (uint64_t)v97, (int *)&IfNecessary, (uint64_t *)&v92);
    v54 = BYTE1(IfNecessary);
  }
  v55 = a10 == 253 && a11 == 0;
  v56 = v55;
  v57 = (_DWORD *)*((_QWORD *)a1 + 1);
  v58 = v54;
  v59 = (char)v43;
  if (v55)
    JSC::MacroAssemblerARM64::branchFloat(v57, v84, v58, v59, v50, v51, v52, v53, (uint64_t)&v92);
  else
    JSC::MacroAssemblerARM64::branchDouble(v57, v84, v58, v59, v50, v51, v52, v53, (uint64_t)&v92);
  v90 = v92;
  v91 = *(_QWORD *)((char *)&v92 + 4);
  JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf((unint64_t)a1, 7u, &v90, v60, v61, v62, v63, v64);
  v69 = (_DWORD *)*((_QWORD *)a1 + 1);
  v70 = SBYTE1(IfNecessary);
  v71 = (char)v44;
  if (v56)
    JSC::MacroAssemblerARM64::branchFloat(v69, 2, v70, v71, v65, v66, v67, v68, (uint64_t)v89);
  else
    JSC::MacroAssemblerARM64::branchDouble(v69, 2, v70, v71, v65, v66, v67, v68, (uint64_t)v89);
  v87 = *(_DWORD *)v89;
  v88 = *(_QWORD *)&v89[4];
  JSC::Wasm::BBQJITImpl::BBQJIT::throwExceptionIf((unint64_t)a1, 7u, &v87, v72, v73, v74, v75, v76);
  JSC::Wasm::BBQJITImpl::BBQJIT::truncInBounds((uint64_t)a1, v41, IfNecessary, v85, v77, v78, v79, v80);
  *a9 = 0;
  a9[8] = 0;
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::unbindScratches((uint64_t)v94);
  return JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::unbindPreserved((uint64_t)v94);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::truncSaturated(JSC::Wasm::BBQJITImpl::BBQJIT *a1, signed int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  JSC::ARM64LogicalImmediate *v16;
  JSC::ARM64LogicalImmediate *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _BYTE v24[40];
  unint64_t v25;
  uint64_t v26;

  v25 = a3;
  v26 = a4;
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::ScratchScope<>((uint64_t)v24, a1, a3, a4, a5, a6, a7, a8);
  if (a2 < 8)
  {
    v14 = dword_19919F9F8[a2];
    v15 = qword_19919FA18[a2];
    v16 = (JSC::ARM64LogicalImmediate *)qword_19919FA58[a2];
    v17 = (JSC::ARM64LogicalImmediate *)qword_19919FA98[a2];
    v18 = ((unint64_t)v24[9] << 8) | 3;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst((uint64_t)a1, v16, v15, ((unint64_t)v24[8] << 8) | 3, v10, v11, v12, v13);
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst((uint64_t)a1, v17, v15, v18, v19, v20, v21, v22);
    __asm { BR              X9 }
  }
  result = 1316;
  __break(0xC471u);
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addRefI31(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  _DWORD *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50[3];
  uint64_t v51[2];
  const char *v52;

  v51[0] = a2;
  v51[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = (a2 << 33 >> 33) | 0xFFFE000000000000;
    *((_WORD *)a4 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v50 = *(_OWORD *)a4;
      v52 = "RefI31";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v52, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v51, v50);
    }
LABEL_23:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -510;
    v33 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v50 = *(_OWORD *)a4;
      v52 = "RefI31";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v49 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v49;
        }
        while (v49 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v52, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v51, v50);
    }
    v34 = (__int16)IfNecessary >> 8;
    v35 = (__int16)v33 >> 8;
    JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0x7FFFFFFF, v34, v35);
    v43 = *(_DWORD **)(a1 + 8);
    v44 = v43[50];
    if (v44 + 4 > v43[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v43 + 14), v36, v37, v38, v39, v40, v41, v42);
      v44 = v43[50];
    }
    v45 = v33 >> 8;
    v46 = (v33 >> 8) & 0x1F;
    *(_DWORD *)(*((_QWORD *)v43 + 7) + v44) = v46 | (32 * v46) | 0x531F7800;
    v43[50] += 4;
    v47 = *(_DWORD **)(a1 + 8);
    v48 = v47[50];
    if (v48 + 4 > v47[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v47 + 14), v36, v37, v38, v39, v40, v41, v42);
      v48 = v47[50];
    }
    *(_DWORD *)(*((_QWORD *)v47 + 7) + v48) = v46 & 0xFFFFFC1F | (32 * (v45 & 0x1F)) | 0x13017C00;
    v47[50] += 4;
    JSC::MacroAssemblerARM64::or64(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFE000000000000, v35);
    goto LABEL_23;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI31GetS(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  _DWORD *v56;
  _QWORD *v57;
  _DWORD *v58;
  unsigned int v59;
  __int128 v60;
  uint64_t v61[2];
  _BYTE v62[12];

  v61[0] = a2;
  v61[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    if (a2 >> 49)
    {
      v14 = ((2 * (int)a2) >> 1);
    }
    else
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)5, a3, (uint64_t)a4, a5, a6, a7, a8);
      v14 = 0;
    }
    *a4 = v14;
    *((_WORD *)a4 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      v60 = *(_OWORD *)a4;
      *(_QWORD *)v62 = "I31GetS";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>((const char **)v62, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v61, (uint64_t *)&v60);
    }
LABEL_37:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -510;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      v60 = *(_OWORD *)a4;
      *(_QWORD *)v62 = "I31GetS";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v59 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v59;
        }
        while (v59 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>((const char **)v62, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v61, (uint64_t *)&v60);
    }
    v41 = *(_QWORD *)(a1 + 8);
    if (BYTE1(IfNecessary) == BYTE1(v40))
      goto LABEL_32;
    if (BYTE1(IfNecessary) == 63)
    {
      if (BYTE1(v40) != 31)
      {
        v42 = (v40 >> 8) & 0x1F | 0xD2800000;
        goto LABEL_29;
      }
    }
    else if (BYTE1(IfNecessary) != 31 && BYTE1(v40) != 31)
    {
      v42 = (v40 >> 8) & 0x1F | (((IfNecessary >> 8) & 0x1F) << 16) | 0xAA0003E0;
LABEL_29:
      v46 = *(_DWORD *)(v41 + 200);
      v45 = (unsigned int *)(v41 + 200);
      v44 = v46;
      if (v46 + 4 > *(v45 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v45 - 36), v33, v34, v35, v36, v37, v38, v39);
        v44 = *v45;
      }
      *(_DWORD *)(*((_QWORD *)v45 - 18) + v44) = v42;
      *v45 += 4;
      v41 = *(_QWORD *)(a1 + 8);
LABEL_32:
      JSC::MacroAssemblerARM64::branch64(v41, 0, ((__int16)v40 >> 8), 2, v36, v37, v38, v39, (uint64_t)v62);
      LODWORD(v60) = *(_DWORD *)v62;
      v52 = *(_QWORD *)&v62[4];
      *(_QWORD *)((char *)&v60 + 4) = *(_QWORD *)&v62[4];
      if (*(_DWORD *)v62 != -1)
      {
        v53 = (_QWORD *)(a1 + 1560);
        v54 = *(unsigned int *)(a1 + 1572);
        if ((_DWORD)v54 == *(_DWORD *)(a1 + 1568))
        {
          v55 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v53, (void *)(v54 + 1), (unint64_t)&v60, v47, v48, v49, v50, v51);
          v56 = (_DWORD *)(*(_QWORD *)(a1 + 1560) + 12 * *(unsigned int *)(a1 + 1572));
          *v56 = *(_DWORD *)v55;
          v57 = v56 + 1;
          v52 = *(_QWORD *)(v55 + 4);
        }
        else
        {
          v58 = (_DWORD *)(*v53 + 12 * v54);
          *v58 = *(_DWORD *)v62;
          v57 = v58 + 1;
        }
        *v57 = v52;
        ++*(_DWORD *)(a1 + 1572);
      }
      goto LABEL_37;
    }
    v42 = SBYTE1(v40) | (32 * SBYTE1(IfNecessary)) | 0x91000000;
    goto LABEL_29;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI31GetU(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unint64_t v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  _QWORD *v58;
  _DWORD *v59;
  unsigned int v60;
  __int128 v61;
  uint64_t v62[2];
  _BYTE v63[12];

  v62[0] = a2;
  v62[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    if (a2 >> 49)
    {
      v14 = a2 & 0x7FFFFFFF;
    }
    else
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)5, a3, (uint64_t)a4, a5, a6, a7, a8);
      v14 = 0;
    }
    *a4 = v14;
    *((_WORD *)a4 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      v61 = *(_OWORD *)a4;
      *(_QWORD *)v63 = "I31GetU";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>((const char **)v63, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v62, (uint64_t *)&v61);
    }
LABEL_38:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -510;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      v61 = *(_OWORD *)a4;
      *(_QWORD *)v63 = "I31GetU";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v60 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v60;
        }
        while (v60 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>((const char **)v63, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v62, (uint64_t *)&v61);
    }
    v41 = *(_QWORD *)(a1 + 8);
    if (BYTE1(IfNecessary) == BYTE1(v40))
      goto LABEL_32;
    if (BYTE1(IfNecessary) == 63)
    {
      if (BYTE1(v40) != 31)
      {
        v42 = (v40 >> 8) & 0x1F | 0xD2800000;
        goto LABEL_29;
      }
    }
    else if (BYTE1(IfNecessary) != 31 && BYTE1(v40) != 31)
    {
      v42 = (v40 >> 8) & 0x1F | (((IfNecessary >> 8) & 0x1F) << 16) | 0xAA0003E0;
LABEL_29:
      v46 = *(_DWORD *)(v41 + 200);
      v45 = (unsigned int *)(v41 + 200);
      v44 = v46;
      if (v46 + 4 > *(v45 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v45 - 36), v33, v34, v35, v36, v37, v38, v39);
        v44 = *v45;
      }
      *(_DWORD *)(*((_QWORD *)v45 - 18) + v44) = v42;
      *v45 += 4;
      v41 = *(_QWORD *)(a1 + 8);
LABEL_32:
      v47 = ((__int16)v40 >> 8);
      JSC::MacroAssemblerARM64::branch64(v41, 0, v47, 2, v36, v37, v38, v39, (uint64_t)v63);
      LODWORD(v61) = *(_DWORD *)v63;
      v53 = *(_QWORD *)&v63[4];
      *(_QWORD *)((char *)&v61 + 4) = *(_QWORD *)&v63[4];
      if (*(_DWORD *)v63 != -1)
      {
        v54 = (_QWORD *)(a1 + 1560);
        v55 = *(unsigned int *)(a1 + 1572);
        if ((_DWORD)v55 == *(_DWORD *)(a1 + 1568))
        {
          v56 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v54, (void *)(v55 + 1), (unint64_t)&v61, v48, v49, v50, v51, v52);
          v57 = (_DWORD *)(*(_QWORD *)(a1 + 1560) + 12 * *(unsigned int *)(a1 + 1572));
          *v57 = *(_DWORD *)v56;
          v58 = v57 + 1;
          v53 = *(_QWORD *)(v56 + 4);
        }
        else
        {
          v59 = (_DWORD *)(*v54 + 12 * v55);
          *v59 = *(_DWORD *)v63;
          v58 = v59 + 1;
        }
        *v58 = v53;
        ++*(_DWORD *)(a1 + 1572);
      }
      JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0x7FFFFFFF, v47, v47);
      goto LABEL_38;
    }
    v42 = SBYTE1(v40) | (32 * SBYTE1(IfNecessary)) | 0x91000000;
    goto LABEL_29;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addArrayNew(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, JSC::ARM64LogicalImmediate *a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v16;
  JSC::ARM64LogicalImmediate *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 IfNecessary;
  unint64_t v25;
  unint64_t v26;
  JSC::ARM64LogicalImmediate *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  int v45;
  _DWORD *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  _DWORD *v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  const JSC::Wasm::Type *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t *v64;
  unsigned __int8 *v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  int v75;
  unint64_t v76;
  unsigned __int8 **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD *v102;
  unsigned int v103;
  uint64_t v104;
  _DWORD **v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  WTF *v114;
  unsigned int v115;
  unsigned int v116;
  unint64_t v117;
  BOOL v118;
  char v119;
  uint64_t v120;
  const JSC::Wasm::Type *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  unsigned __int8 *v127;
  unsigned int v128;
  _QWORD *v129;
  unint64_t v130;
  uint64_t *v131;
  unsigned __int8 *v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  int v142;
  unint64_t v143;
  unsigned __int8 **v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _DWORD *v169;
  unsigned int v170;
  uint64_t v171;
  _DWORD **v172;
  WTF *v173;
  WTF *v174;
  unsigned int v175;
  unsigned int v176;
  unint64_t v178;
  WTF *v180;
  __int16 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  unint64_t v194;
  _DWORD *v195;
  _QWORD *v196;
  _DWORD *v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  WTF *v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int16 v211;
  uint64_t v212;
  __int16 v213;
  unint64_t v214;
  __int16 v215;
  unsigned int v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221[32];
  WTF *v222;
  int v223;
  WTF *v224;
  int v225;
  _BYTE v226[24];
  uint64_t v227;
  __int128 v228;
  _QWORD v229[2];
  __int16 v230;
  char *v231;
  __int128 *v232;
  char v233;
  __int128 v234;
  _QWORD v235[35];

  v235[32] = *MEMORY[0x1E0C80C00];
  v219 = a3;
  v220 = a4;
  v217 = (uint64_t)a5;
  v218 = a6;
  v216 = a2;
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_DWORD *)(v10 + 596);
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198F77EFCLL);
  }
  v13 = (uint64_t)a5;
  v16 = *(_QWORD *)(v10 + 584) + 1232 * v11;
  LODWORD(v10) = *(_DWORD *)(v10 + 68) + *(_DWORD *)(v16 - 32);
  if (*(_DWORD *)(v16 - 160) == 5)
    v10 = (v10 + 1);
  else
    v10 = v10;
  *(_QWORD *)a7 = v10;
  *(_WORD *)(a7 + 8) = -510;
  if (BYTE1(a6) == 251)
  {
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, (uint64_t)a5, a6, a4, (uint64_t)a5, a6, a7, a8);
    v229[0] = 0;
    v229[1] = 0;
    *(_QWORD *)&v228 = a1;
    v230 = 0;
    v25 = *(_QWORD *)(a1 + 616);
    if (v25)
      v26 = __clz(__rbit64(v25));
    else
      v26 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v17, v18, v19, v20, v21, v22, v23);
    BYTE8(v228) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(&v228, v26);
    v34 = *(_QWORD *)(v228 + 616);
    v204 = a9;
    if (v34)
      v35 = __clz(__rbit64(v34));
    else
      v35 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)v228, v27, v28, v29, v30, v31, v32, v33);
    v43 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(&v228, v35);
    BYTE9(v228) = v43;
    v44 = BYTE8(v228);
    v45 = SBYTE8(v228);
    v46 = *(_DWORD **)(a1 + 8);
    v47 = v46[50];
    if (v47 + 4 > v46[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v46 + 14), v36, v37, v38, v39, v40, v41, v42);
      v47 = v46[50];
    }
    v48 = (v44 << 8) | 2;
    v49 = (IfNecessary >> 3) & 0xFFFFFFE0;
    *(_DWORD *)(*((_QWORD *)v46 + 7) + v47) = v49 | 0x4E083C00 | v45;
    v46[50] += 4;
    v50 = *(_DWORD **)(a1 + 8);
    v51 = SBYTE9(v228);
    v52 = v50[50];
    if (v52 + 4 > v50[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v50 + 14), v36, v37, v38, v39, v40, v41, v42);
      v52 = v50[50];
    }
    *(_DWORD *)(*((_QWORD *)v50 + 7) + v52) = v49 | v51 | 0x4E183C00;
    v50[50] += 4;
    JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::unbindEarly((unsigned __int8 *)&v228);
    v211 = v220;
    v205 = (WTF *)&v207;
    v207 = xmmword_19919F700;
    v208 = a2;
    v209 = 65281;
    v210 = v219;
    v212 = v48;
    v213 = -508;
    v214 = ((unint64_t)v43 << 8) | 2;
    v215 = -508;
    v206 = 0x500000008;
    LOBYTE(v234) = *(_BYTE *)(a7 + 9);
    *((_QWORD *)&v234 + 1) = 0;
    WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v228, &v234, 1uLL);
    *(_QWORD *)&v234 = v235;
    *((_QWORD *)&v234 + 1) = 16;
    a9 = v204;
    v58 = 0;
    v59 = 80;
    v60 = (unsigned __int8 *)&v207 + 9;
    do
    {
      v61 = *v60;
      v60 += 16;
      v62 = (_QWORD *)(v234 + 16 * v58);
      *v62 = v61;
      v62[1] = 0;
      v58 = ++HIDWORD(v234);
      v59 -= 16;
    }
    while (v59);
    v63 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
    if (v63 != -1)
    {
      *(_QWORD *)v221 = &v233;
      v231 = v221;
      std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v231, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
    }
    v64 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
    v65 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
    if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
    {
      __clrex();
    }
    else if (!__stxr(1u, v65))
    {
      goto LABEL_26;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v65);
LABEL_26:
    v231 = (char *)&v228;
    v232 = &v234;
    WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v64, (uint64_t **)&v231, (uint64_t)&v231, v53, v54, v55, v56, v57, (uint64_t)v221);
    v73 = **(unsigned int ***)v221;
    if (**(_QWORD **)v221)
    {
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 + 1, v73));
    }
    v75 = __ldxr(v65);
    if (v75 == 1)
    {
      if (!__stlxr(0, v65))
      {
LABEL_33:
        v76 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
        if (v76 != -1)
        {
          *(_QWORD *)v221 = &v233;
          v231 = v221;
          std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v231, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
        }
        if (v73[8])
          v77 = 0;
        else
          v77 = (unsigned __int8 **)(v73 + 2);
        JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v77, 0, v221);
        if ((unint64_t)(v227 + 15) >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198F77F04);
        }
        v85 = (v227 + 15) & 0xFFFFFFF0;
        if (*(_DWORD *)(a1 + 1284) > v85)
          v85 = *(_DWORD *)(a1 + 1284);
        *(_DWORD *)(a1 + 1284) = v85;
        JSC::Wasm::BBQJITImpl::BBQJIT::prepareForExceptions(a1, v78, v79, v80, v81, v82, v83, v84);
        JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(a1, (uint64_t)&v205, (uint64_t)v221, (uint64_t)v73, v86, v87, v88, v89);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), (uint64_t)operationWasmArrayNewVector, 8, v90, v91, v92, v93, v94);
        v102 = *(_DWORD **)(a1 + 8);
        v102[52] = 0;
        v103 = v102[50];
        if (v103 + 4 > v102[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v102 + 14), v95, v96, v97, v98, v99, v100, v101);
          v103 = v102[50];
        }
        v104 = 0;
        *(_DWORD *)(*((_QWORD *)v102 + 7) + v103) = -700514048;
        v102[50] += 4;
        if (*(unsigned __int8 *)(a7 + 9) - 192 > 0x3F)
          goto LABEL_48;
        if (((1 << (*(_BYTE *)(a7 + 9) + 64)) & 0xC00FFC19C001C000) != 0)
        {
          if (!*(_DWORD *)(a1 + 340))
          {
            __break(0xC471u);
            JUMPOUT(0x198F77F14);
          }
          v105 = (_DWORD **)(a1 + 328);
          v104 = 2;
        }
        else
        {
          if (((1 << (*(_BYTE *)(a7 + 9) + 64)) & 0x3800000000000000) == 0)
          {
            if (*(unsigned __int8 *)(a7 + 9) == 192)
            {
              __break(0xC471u);
              JUMPOUT(0x198F77CE8);
            }
            goto LABEL_48;
          }
          if (!*(_DWORD *)(a1 + 484))
          {
            __break(0xC471u);
            JUMPOUT(0x198F77F24);
          }
          v105 = (_DWORD **)(a1 + 472);
          v104 = 3;
        }
        if ((**v105 & 0x700) == 0x300)
        {
          __break(0xC471u);
          JUMPOUT(0x198F77E50);
        }
LABEL_48:
        JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, *(_QWORD *)a7, *(_QWORD *)(a7 + 8), v104, v98, v99, v100, v101);
        v113 = v224;
        if (v226 != (_BYTE *)v224 && v224)
        {
          v224 = 0;
          v225 = 0;
          WTF::fastFree((unint64_t)v113, v106, v107, v108, v109, v110, v111, v112);
        }
        v114 = v222;
        if (v222)
        {
          v222 = 0;
          v223 = 0;
          WTF::fastFree((unint64_t)v114, v106, v107, v108, v109, v110, v111, v112);
        }
        do
        {
          v115 = __ldaxr(v73);
          v116 = v115 - 1;
        }
        while (__stlxr(v116, v73));
        if (!v116)
        {
          atomic_store(1u, v73);
          WTF::fastFree((unint64_t)v73, v106, v107, v108, v109, v110, v111, v112);
        }
        v117 = v234;
        v118 = v235 == (_QWORD *)v234;
        goto LABEL_96;
      }
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v65, 0, v67, v68, v69, v70, v71, v72);
    goto LABEL_33;
  }
  if (BYTE1(a6) == 252)
  {
    if (a6 == 1)
      goto LABEL_56;
LABEL_57:
    JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(a1, a5, a6, a4, (uint64_t)a5, a6, a7, a8);
    v13 = v13;
    v119 = *(_BYTE *)(a7 + 9);
    LOWORD(a6) = -510;
    goto LABEL_59;
  }
  if (BYTE1(a6) != 253)
  {
    v119 = -2;
    goto LABEL_59;
  }
  if (a6 != 1)
    goto LABEL_57;
  v13 = a5;
LABEL_56:
  v119 = -2;
  LOWORD(a6) = -511;
LABEL_59:
  v217 = v13;
  LOWORD(v218) = a6;
  v211 = v220;
  v212 = v13;
  v213 = a6;
  v205 = (WTF *)&v207;
  v207 = xmmword_19919F700;
  v208 = a2;
  v209 = 65281;
  v210 = v219;
  v206 = 0x400000008;
  LOBYTE(v234) = v119;
  *((_QWORD *)&v234 + 1) = 0;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v228, &v234, 1uLL);
  *(_QWORD *)&v234 = v235;
  *((_QWORD *)&v234 + 1) = 16;
  v125 = 0;
  v126 = 64;
  v127 = (unsigned __int8 *)&v207 + 9;
  do
  {
    v128 = *v127;
    v127 += 16;
    v129 = (_QWORD *)(v234 + 16 * v125);
    *v129 = v128;
    v129[1] = 0;
    v125 = ++HIDWORD(v234);
    v126 -= 16;
  }
  while (v126);
  v130 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v130 != -1)
  {
    *(_QWORD *)v221 = &v233;
    v231 = v221;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v231, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v131 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v132 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v132))
  {
    goto LABEL_67;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v132);
LABEL_67:
  v231 = (char *)&v228;
  v232 = &v234;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v131, (uint64_t **)&v231, (uint64_t)&v231, v120, v121, v122, v123, v124, (uint64_t)v221);
  v140 = **(unsigned int ***)v221;
  if (**(_QWORD **)v221)
  {
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 + 1, v140));
  }
  v142 = __ldxr(v132);
  if (v142 != 1)
  {
    __clrex();
    goto LABEL_73;
  }
  if (__stlxr(0, v132))
LABEL_73:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v132, 0, v134, v135, v136, v137, v138, v139);
  v143 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v143 != -1)
  {
    *(_QWORD *)v221 = &v233;
    v231 = v221;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v231, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (v140[8])
    v144 = 0;
  else
    v144 = (unsigned __int8 **)(v140 + 2);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v144, 0, v221);
  if ((unint64_t)(v227 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F77F0CLL);
  }
  v152 = (v227 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a1 + 1284) > v152)
    v152 = *(_DWORD *)(a1 + 1284);
  *(_DWORD *)(a1 + 1284) = v152;
  JSC::Wasm::BBQJITImpl::BBQJIT::prepareForExceptions(a1, v145, v146, v147, v148, v149, v150, v151);
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(a1, (uint64_t)&v205, (uint64_t)v221, (uint64_t)v140, v153, v154, v155, v156);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), (uint64_t)operationWasmArrayNew, 8, v157, v158, v159, v160, v161);
  v169 = *(_DWORD **)(a1 + 8);
  v169[52] = 0;
  v170 = v169[50];
  if (v170 + 4 > v169[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v169 + 14), v162, v163, v164, v165, v166, v167, v168);
    v170 = v169[50];
  }
  v171 = 0;
  *(_DWORD *)(*((_QWORD *)v169 + 7) + v170) = -700514048;
  v169[50] += 4;
  if (*(unsigned __int8 *)(a7 + 9) - 192 > 0x3F)
    goto LABEL_89;
  if (((1 << (*(_BYTE *)(a7 + 9) + 64)) & 0xC00FFC19C001C000) != 0)
  {
    if (!*(_DWORD *)(a1 + 340))
    {
      __break(0xC471u);
      JUMPOUT(0x198F77F1CLL);
    }
    v172 = (_DWORD **)(a1 + 328);
    v171 = 2;
  }
  else
  {
    if (((1 << (*(_BYTE *)(a7 + 9) + 64)) & 0x3800000000000000) == 0)
    {
      if (*(unsigned __int8 *)(a7 + 9) == 192)
      {
        __break(0xC471u);
        JUMPOUT(0x198F77D0CLL);
      }
      goto LABEL_89;
    }
    if (!*(_DWORD *)(a1 + 484))
    {
      __break(0xC471u);
      JUMPOUT(0x198F77F2CLL);
    }
    v172 = (_DWORD **)(a1 + 472);
    v171 = 3;
  }
  if ((**v172 & 0x700) == 0x300)
  {
    __break(0xC471u);
    JUMPOUT(0x198F77E70);
  }
LABEL_89:
  JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, *(_QWORD *)a7, *(_QWORD *)(a7 + 8), v171, v165, v166, v167, v168);
  v173 = v224;
  if (v226 != (_BYTE *)v224 && v224)
  {
    v224 = 0;
    v225 = 0;
    WTF::fastFree((unint64_t)v173, v106, v107, v108, v109, v110, v111, v112);
  }
  v174 = v222;
  if (v222)
  {
    v222 = 0;
    v223 = 0;
    WTF::fastFree((unint64_t)v174, v106, v107, v108, v109, v110, v111, v112);
  }
  do
  {
    v175 = __ldaxr(v140);
    v176 = v175 - 1;
  }
  while (__stlxr(v176, v140));
  if (!v176)
  {
    atomic_store(1u, v140);
    WTF::fastFree((unint64_t)v140, v106, v107, v108, v109, v110, v111, v112);
  }
  v117 = v234;
  v118 = v235 == (_QWORD *)v234;
LABEL_96:
  if (!v118 && v117 != 0)
  {
    *(_QWORD *)&v234 = 0;
    DWORD2(v234) = 0;
    WTF::fastFree(v117, v106, v107, v108, v109, v110, v111, v112);
  }
  v178 = v228;
  if (v229 != (_QWORD *)v228 && (_QWORD)v228 != 0)
  {
    *(_QWORD *)&v228 = 0;
    DWORD2(v228) = 0;
    WTF::fastFree(v178, v106, v107, v108, v109, v110, v111, v112);
  }
  v180 = v205;
  if (&v207 != (__int128 *)v205 && v205)
  {
    v205 = 0;
    LODWORD(v206) = 0;
    WTF::fastFree((unint64_t)v180, v106, v107, v108, v109, v110, v111, v112);
  }
  v181 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, *(_QWORD *)a7, *(_QWORD *)(a7 + 8), v108, v109, v110, v111, v112);
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, (v181 >> 8), 2, v182, v183, v184, v185, (uint64_t)&v234);
  LODWORD(v228) = v234;
  v191 = *(_QWORD *)((char *)&v234 + 4);
  *(_QWORD *)((char *)&v228 + 4) = *(_QWORD *)((char *)&v234 + 4);
  if ((_DWORD)v234 != -1)
  {
    v192 = (_QWORD *)(a1 + 2200);
    v193 = *(unsigned int *)(a1 + 2212);
    if ((_DWORD)v193 == *(_DWORD *)(a1 + 2208))
    {
      v194 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v192, (void *)(v193 + 1), (unint64_t)&v228, v186, v187, v188, v189, v190);
      v195 = (_DWORD *)(*(_QWORD *)(a1 + 2200) + 12 * *(unsigned int *)(a1 + 2212));
      *v195 = *(_DWORD *)v194;
      v196 = v195 + 1;
      v191 = *(_QWORD *)(v194 + 4);
    }
    else
    {
      v197 = (_DWORD *)(*v192 + 12 * v193);
      *v197 = v234;
      v196 = v197 + 1;
    }
    *v196 = v191;
    ++*(_DWORD *)(a1 + 2212);
  }
  if (HIBYTE(word_1ECF4C700))
  {
    v228 = *(_OWORD *)a7;
    *(_QWORD *)&v234 = "ArrayNew";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v198 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v198;
      }
      while (v198 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)&v234, " ");
    WTF::dataLog<unsigned int>(&v216);
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v219);
    if (v220 != 1 && v220 != 4)
    {
      LODWORD(v205) = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v219, v220, v199, v200, v201, v202, v203);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v205);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v217, (uint64_t *)&v228);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addArrayNewFixed(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _BYTE *a5@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  _QWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int IfNecessary;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  const JSC::Wasm::Type *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char v75;
  char v76;
  WTF *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  uint64_t v87;
  unint64_t v88;
  WTF *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  _BYTE v97[12];
  int v98[3];

  v96 = (int)a2;
  v8 = *(unsigned int *)(a3 + 12);
  v89 = (WTF *)&v91;
  v91 = xmmword_19919F700;
  v92 = a2;
  v93 = 65281;
  v94 = v8;
  v95 = 65281;
  v90 = 0x300000008;
  v9 = *(_QWORD *)(a1 + 88);
  v10 = *(_DWORD *)(v9 + 596);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198F783A4);
  }
  v15 = *(_QWORD *)(v9 + 584) + 1232 * v10;
  v16 = *(_DWORD *)(v9 + 68);
  v17 = *(_DWORD *)(v15 - 32) + v8;
  if (*(_DWORD *)(v15 - 160) == 5)
    ++v17;
  v87 = (v17 + v16);
  v88 = 65026;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCCall<long long (*)(JSC::Wasm::Instance *,unsigned int,unsigned int),8ul>(a1, (uint64_t)operationWasmArrayNewEmpty, (uint64_t)&v89, (uint64_t)&v87);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v87, v88, 0, v18, v19, v20, v21);
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, (v22 >> 8), 2, v23, v24, v25, v26, (uint64_t)v97);
  LODWORD(v85) = *(_DWORD *)v97;
  v32 = *(_QWORD *)&v97[4];
  *(_QWORD *)((char *)&v85 + 4) = *(_QWORD *)&v97[4];
  if (*(_DWORD *)v97 != -1)
  {
    v33 = (_QWORD *)(a1 + 2200);
    v34 = *(unsigned int *)(a1 + 2212);
    if ((_DWORD)v34 == *(_DWORD *)(a1 + 2208))
    {
      v35 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, (void *)(v34 + 1), (unint64_t)&v85, v27, v28, v29, v30, v31);
      v36 = (_DWORD *)(*(_QWORD *)(a1 + 2200) + 12 * *(unsigned int *)(a1 + 2212));
      *v36 = *(_DWORD *)v35;
      v37 = v36 + 1;
      v32 = *(_QWORD *)(v35 + 4);
    }
    else
    {
      v38 = (_DWORD *)(*v33 + 12 * v34);
      *v38 = *(_DWORD *)v97;
      v37 = v38 + 1;
    }
    *v37 = v32;
    ++*(_DWORD *)(a1 + 2212);
  }
  if (*(_DWORD *)(a3 + 12))
  {
    v39 = 0;
    v40 = 0;
    while (1)
    {
      IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, v87, v88, v27, v28, v29, v30, v31);
      if (v40 >= *(unsigned int *)(a3 + 12))
        break;
      v5 = v5 & 0xFFFFFFFF00000000 | v40;
      v6 = v6 & 0xFFFFFFFF00000000 | IfNecessary;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitArraySetUnchecked(a1, a2, v6, 0xFE04uLL, (const JSC::Wasm::Type *)v5, 65281, *(_QWORD *)(*(_QWORD *)a3 + v39), *(_QWORD *)(*(_QWORD *)a3 + v39 + 8));
      JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v6, 65028, v42, v43, v44, v45, v46);
      ++v40;
      v39 += 16;
      if (v40 >= *(unsigned int *)(a3 + 12))
        goto LABEL_13;
    }
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x198F7839CLL);
  }
LABEL_13:
  v47 = *(_QWORD *)(a1 + 88);
  v48 = *(_DWORD *)(v47 + 596);
  if (!v48)
    goto LABEL_46;
  v49 = *(_QWORD *)(v47 + 584) + 1232 * v48;
  v50 = *(_DWORD *)(v47 + 68) + *(_DWORD *)(v49 - 32);
  if (*(_DWORD *)(v49 - 160) == 5)
    v51 = v50 + 1;
  else
    v51 = v50;
  *a4 = v51;
  *((_WORD *)a4 + 4) = -510;
  v52 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v51, a4[1], 0, v28, v29, v30, v31);
  v53 = v52;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitMove(a1, (JSC::ARM64LogicalImmediate *)v87, v88, v52, v54, v55, v56, v57);
  if (*(_DWORD *)(a3 + 12))
  {
    v65 = v87;
    v66 = v88;
    v67 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v87, v88, v60, v61, v62, v63, v64);
    if (v66 == 2)
    {
      v74 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v65 + 16;
      if (*(_DWORD *)(a1 + 1280) < v74)
        *(_DWORD *)(a1 + 1280) = v74;
      if ((v67 & 7) != 1 || ((-8 * v74) ^ v67) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v65, v66, v67);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::getArrayElementType((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, a2, v68, v69, v70, v71, v72, v73, (uint64_t)&v85);
    if (v86)
      v75 = -1;
    else
      v75 = v85;
    if (BYTE1(dword_1ECF4C7B0))
      v76 = 29;
    else
      v76 = 17;
    if ((v76 + v75) <= 1u)
      JSC::Wasm::BBQJITImpl::BBQJIT::emitWriteBarrier((uint64_t *)a1, (JSC::ARM64LogicalImmediate *)(v53 >> 8), v59, v60, v61, v62, v63, v64);
  }
  if (HIBYTE(word_1ECF4C700))
  {
    v84 = *(unsigned int *)(a3 + 12);
    v85 = *(_OWORD *)a4;
    *(_QWORD *)v97 = "ArrayNewFixed";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v78 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v78;
      }
      while (v78 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)v97, " ");
    WTF::dataLog<unsigned int>(&v96);
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<unsigned long>(&v84);
    WTF::dataLog<char [16]>(" ");
    WTF::dataLog<char [16]>("=> ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v85);
    if (BYTE8(v85) != 1 && BYTE8(v85) != 4)
    {
      v98[0] = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v85, *((uint64_t *)&v85 + 1), v79, v80, v81, v82, v83);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", v98);
    }
    WTF::dataLog<char [16]>("\n");
  }
  *a5 = 0;
  a5[8] = 0;
  v77 = v89;
  if (&v91 != (__int128 *)v89)
  {
    if (v89)
    {
      v89 = 0;
      LODWORD(v90) = 0;
      WTF::fastFree((unint64_t)v77, v58, v59, v60, v61, v62, v63, v64);
    }
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::emitArraySetUnchecked(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t IfNecessary;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::ARM64LogicalImmediate *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  JSC::ARM64LogicalImmediate *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  unsigned int v44;
  unsigned int v45;
  JSC::ARM64LogicalImmediate *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  unsigned int v89;
  unint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  const char *v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t result;
  int v122;
  unint64_t v123;
  char **v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  char **v130;
  const char *v131;
  unint64_t v132;
  char **v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char **v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  unint64_t v150;
  __int128 v151;
  unint64_t v152;
  uint64_t v153;
  __int16 v154;
  int8x16_t *v155;
  signed __int8 v156;
  unint64_t v157;
  uint64_t v158;
  __int16 v159;
  char v160[16];
  unsigned int v161;
  _OWORD v162[2];

  v9 = a7;
  v10 = a6;
  v11 = (uint64_t)a5;
  v15 = a8 >> 8;
  JSC::Wasm::BBQJITImpl::BBQJIT::getArrayElementType((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v160);
  if (a4 == 4)
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a3, a4, v16, v17, v18, v19, v20);
  else
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a3, a4, v16, v17, v18, v19, v20);
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), BYTE1(IfNecessary) | 0x4000000000, 8, v22, v23, v24, v25, v26);
  v149 = v10;
  v150 = v10;
  v148 = v15;
  if (v10 == 1)
  {
    v157 = 0;
    v158 = 0;
    v155 = (int8x16_t *)a1;
    v159 = 0;
    v34 = *(_QWORD *)(a1 + 616);
    if (v34)
      v35 = __clz(__rbit64(v34));
    else
      v35 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v27, v28, v29, v30, v31, v32, v33);
    v156 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v155, v35);
    v43 = v160[0];
    v44 = v161;
    if (v161 == 1 && (v160[0] + 9) < 2u)
    {
      v10 = 4;
LABEL_16:
      if (v160[0] == 248)
      {
        v54 = 1;
      }
      else
      {
        if (v160[0] != 247)
        {
          __break(0xC471u);
          JUMPOUT(0x198F792C4);
        }
        v54 = 2;
      }
    }
    else
    {
      v10 = 4;
      switch(v160[0])
      {
        case 0xFB:
        case 0xFC:
        case 0xFE:
          goto LABEL_23;
        case 0xFD:
        case 0xFF:
          if (v161)
            goto LABEL_16;
          goto LABEL_24;
        default:
          if (v160[0] - 227 >= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x198F79344);
          }
LABEL_23:
          v10 = 8;
          if (v161)
            goto LABEL_16;
LABEL_24:
          v54 = 4;
          switch(v160[0])
          {
            case 0xFB:
              v54 = 16;
              break;
            case 0xFC:
            case 0xFE:
              goto LABEL_83;
            case 0xFD:
            case 0xFF:
              goto LABEL_84;
            default:
              if (v160[0] - 227 >= 2)
              {
                __break(0xC471u);
                JUMPOUT(0x198F793A4);
              }
LABEL_83:
              v54 = 8;
              break;
          }
          break;
      }
    }
LABEL_84:
    if (a8 == 1)
    {
      if ((BYTE1(a8) + 5) > 2u)
      {
        v152 = 0;
        v153 = 0;
        *(_QWORD *)&v151 = a1;
        v154 = 0;
        v103 = *(_QWORD *)(a1 + 616);
        v143 = v54;
        v146 = v10;
        if (v103)
          v104 = __clz(__rbit64(v103));
        else
          v104 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v36, v37, v38, v39, v40, v41, v42);
        LOBYTE(v53) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v151, v104);
        BYTE8(v151) = v53;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)v9, a8, ((unint64_t)v53 << 8) | 2, v105, v106, v107, v108);
        if (!(_BYTE)v154)
        {
          LOBYTE(v154) = 1;
          v79 = BYTE8(v151);
          v54 = BYTE8(v151) & 0x7F;
          if (v54 >= 0x40)
            goto LABEL_175;
          v109 = 1 << v54;
          if ((*(_QWORD *)(v151 + 648) & (1 << v54)) != 0)
          {
            if (*(unsigned int *)(v151 + 340) <= (unint64_t)SBYTE8(v151))
            {
              __break(0xC471u);
              JUMPOUT(0x198F793C4);
            }
            v110 = *(_QWORD *)(v151 + 328) + 4 * SBYTE8(v151);
            *(int8x16_t *)(v151 + 992) = vandq_s8(*(int8x16_t *)(v151 + 992), (int8x16_t)vdupq_n_s64(~v109));
            if ((_BYTE)word_1ECF4C700)
            {
              v162[0] = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * (char)v79];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v162, "\n");
            }
            if ((v152 & v109) == 0 || (*(_WORD *)(v110 + 1) & 7) == 3)
            {
              *(_DWORD *)v110 = 0;
              *(_QWORD *)(v151 + 616) |= 1 << v54;
            }
          }
        }
        v10 = v146;
        if (!HIBYTE(v154))
        {
          HIBYTE(v154) = 1;
          v111 = v152;
          if (v152)
          {
            v132 = __clz(__rbit64(v152));
            v133 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
            do
            {
              if (v132 > 0x1Fu)
              {
                v138 = v133;
                JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v151, (char)(v132 - 32));
                v133 = v138;
              }
              else
              {
                v134 = 1 << v132;
                if ((*(_QWORD *)(v151 + 648) & (1 << v132)) != 0)
                {
                  if (v132 >= *(unsigned int *)(v151 + 340))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198F793D4);
                  }
                  v135 = *(_QWORD *)(v151 + 328);
                  *(int8x16_t *)(v151 + 992) = vandq_s8(*(int8x16_t *)(v151 + 992), (int8x16_t)vdupq_n_s64(~v134));
                  if ((_BYTE)word_1ECF4C700)
                  {
                    v162[0] = *(_OWORD *)&v133[2 * v132];
                    v140 = v135;
                    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v162, "\n");
                    v135 = v140;
                    v133 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
                    v111 = v152;
                  }
                  v136 = v135 + 4 * v132;
                  if ((v111 & v134) == 0 || (*(_WORD *)(v136 + 1) & 7) == 3)
                  {
                    *(_DWORD *)v136 = 0;
                    *(_QWORD *)(v151 + 616) |= v134;
                  }
                }
              }
              if (v132 > 0x3E)
                break;
              v111 = v152;
              if (!v152)
                break;
              v137 = __clz(__rbit64(v152 >> ((v132 + 1) & 0x3F))) + (((_BYTE)v132 + 1) & 0x3F);
              v132 = v137 >= 0x40 ? 64 : v137;
            }
            while (v137 < 0x40);
          }
        }
        v54 = v143;
      }
      else
      {
        v152 = 0;
        v153 = 0;
        *(_QWORD *)&v151 = a1;
        v154 = 0;
        v98 = *(_QWORD *)(a1 + 632);
        if (v98)
          LOBYTE(v53) = __clz(__rbit64(v98)) - 32;
        else
          LOBYTE(v53) = JSC::Wasm::BBQJITImpl::BBQJIT::evictFPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v36, v37, v38, v39, v40, v41, v42);
        JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindFPRToScratch(&v151, (char)v53);
        BYTE8(v151) = v53;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)v9, a8, ((unint64_t)v53 << 8) | 3, v99, v100, v101, v102);
        LOBYTE(v154) = 1;
        JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::unbindFPRFromScratch(&v151, (char)v53);
      }
    }
    else
    {
      v53 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, v9, a8, v38, v39, v40, v41, v42) >> 8;
    }
    v112 = v10 + v54 * v11;
    if (v44 == 1)
    {
      if (v43 == 247)
      {
        JSC::MacroAssemblerARM64::store16(*(_QWORD *)(a1 + 8), (char)v53, (v112 << 32) | 8, v64, v65, v66, v67, v68);
      }
      else if (v43 == 248)
      {
        JSC::MacroAssemblerARM64::store8(*(_QWORD *)(a1 + 8), (char)v53, (v112 << 32) | 8, v64, v65, v66, v67, v68);
      }
    }
    else
    {
      switch(v148)
      {
        case -5:
          JSC::MacroAssemblerARM64::storeVector(*(_QWORD *)(a1 + 8), (char)v53, (v112 << 32) | 8, v64, v65, v66, v67, v68);
          break;
        case -4:
          JSC::MacroAssemblerARM64::storeDouble(*(_QWORD *)(a1 + 8), (char)v53, (v112 << 32) | 8, v64, v65, v66, v67, v68);
          break;
        case -3:
          JSC::MacroAssemblerARM64::storeFloat(*(_QWORD *)(a1 + 8), (char)v53, (v112 << 32) | 8, v64, v65, v66, v67, v68);
          break;
        case -2:
          JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), (char)v53, (v112 << 32) | 8, v64, v65, v66, v67, v68);
          break;
        case -1:
          JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), (char)v53, (v112 << 32) | 8, v64, v65, v66, v67, v68);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F79324);
      }
    }
    if ((_BYTE)v159)
      goto LABEL_123;
    LOBYTE(v159) = 1;
    v79 = v156;
    v53 = v156 & 0x7F;
    if (v53 < 0x40)
    {
      v54 = 1 << v53;
      if ((v155[40].i64[1] & (1 << v53)) == 0)
      {
LABEL_123:
        if (!HIBYTE(v159))
        {
          HIBYTE(v159) = 1;
          v113 = v157;
          if (v157)
          {
            v123 = __clz(__rbit64(v157));
            v124 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
            v125 = "\n";
            do
            {
              if (v123 > 0x1Fu)
              {
                v130 = v124;
                v131 = v125;
                JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v155, (char)(v123 - 32));
                v125 = v131;
                v124 = v130;
              }
              else
              {
                v126 = 1 << v123;
                if ((v155[40].i64[1] & (1 << v123)) != 0)
                {
                  if (v123 >= v155[21].u32[1])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198F793B4);
                  }
                  v127 = v155[20].i64[1];
                  v155[62] = vandq_s8(v155[62], (int8x16_t)vdupq_n_s64(~v126));
                  if ((_BYTE)word_1ECF4C700)
                  {
                    v151 = *(_OWORD *)&v124[2 * v123];
                    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v151, "\n");
                    v125 = "\n";
                    v124 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
                    v113 = v157;
                  }
                  v128 = v127 + 4 * v123;
                  if ((v113 & v126) == 0 || (*(_WORD *)(v128 + 1) & 7) == 3)
                  {
                    *(_DWORD *)v128 = 0;
                    v155[38].i64[1] |= v126;
                  }
                }
              }
              if (v123 > 0x3E)
                break;
              v113 = v157;
              if (!v157)
                break;
              v129 = __clz(__rbit64(v157 >> ((v123 + 1) & 0x3F))) + (((_BYTE)v123 + 1) & 0x3F);
              v123 = v129 >= 0x40 ? 64 : v129;
            }
            while (v129 < 0x40);
          }
        }
LABEL_125:
        v87 = v149;
        v86 = v150;
        goto LABEL_126;
      }
      v79 = v156;
      if (v155[21].u32[1] <= (unint64_t)v156)
      {
        __break(0xC471u);
        JUMPOUT(0x198F793ACLL);
      }
      v10 = v155[20].i64[1] + 4 * v156;
      v155[62] = vandq_s8(v155[62], (int8x16_t)vdupq_n_s64(~v54));
      if (!(_BYTE)word_1ECF4C700)
      {
LABEL_120:
        if ((v157 & v54) == 0 || (*(_WORD *)(v10 + 1) & 7) == 3)
        {
          *(_DWORD *)v10 = 0;
          v155[38].i64[1] |= 1 << v53;
        }
        goto LABEL_123;
      }
LABEL_176:
      v151 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v79];
      WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v151, "\n");
      goto LABEL_120;
    }
LABEL_175:
    __break(1u);
    goto LABEL_176;
  }
  v45 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, v11, v10, v29, v30, v31, v32, v33);
  v53 = v161;
  v147 = v11;
  if (v161)
  {
    if (v160[0] == 248)
    {
      v11 = v9;
      v9 = 1;
    }
    else
    {
      if (v160[0] != 247)
      {
        __break(0xC471u);
        JUMPOUT(0x198F792E4);
      }
      v11 = v9;
      v9 = 2;
    }
  }
  else
  {
    v11 = v9;
    v9 = 4;
    switch(v160[0])
    {
      case 0xFB:
      case 0xFC:
      case 0xFE:
        goto LABEL_27;
      case 0xFD:
      case 0xFF:
        break;
      default:
        if (v160[0] - 227 >= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198F79384);
        }
LABEL_27:
        v9 = 8;
        break;
    }
  }
  v54 = v160[0];
  if (v161 == 1 && (v160[0] + 9) < 2u)
  {
    v55 = 0x200000004;
  }
  else
  {
    v55 = 0x200000004;
    switch(v160[0])
    {
      case 0xFB:
      case 0xFC:
      case 0xFE:
        v55 = 0x200000008;
        break;
      case 0xFD:
      case 0xFF:
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F79364);
    }
  }
  v145 = v55;
  if (a8 == 1)
  {
    if ((BYTE1(a8) + 5) > 2u)
    {
      v157 = 0;
      v158 = 0;
      v155 = (int8x16_t *)a1;
      v159 = 0;
      v71 = *(_QWORD *)(a1 + 616);
      v72 = v45;
      if (v71)
        v73 = __clz(__rbit64(v71));
      else
        v73 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v46, v47, v48, v49, v50, v51, v52);
      LOBYTE(v58) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v155, v73);
      v156 = v58;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)v11, a8, ((unint64_t)v58 << 8) | 2, v74, v75, v76, v77);
      v78 = g_config;
      v69 = v72;
      if (!(_BYTE)v159)
      {
        LOBYTE(v159) = 1;
        v79 = v156;
        v80 = v156 & 0x7F;
        if (v80 >= 0x40)
          goto LABEL_175;
        v81 = 1 << v80;
        if ((v155[40].i64[1] & (1 << v80)) != 0)
        {
          if (v155[21].u32[1] <= (unint64_t)v156)
          {
            __break(0xC471u);
            JUMPOUT(0x198F793BCLL);
          }
          v82 = v155[20].i64[1] + 4 * v156;
          v155[62] = vandq_s8(v155[62], (int8x16_t)vdupq_n_s64(~v81));
          if ((_BYTE)word_1ECF4C700)
          {
            v151 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * (char)v79];
            v144 = v69;
            WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v151, "\n");
            v78 = g_config;
            v69 = v144;
          }
          if ((v157 & v81) == 0 || (*(_WORD *)(v82 + 1) & 7) == 3)
          {
            *(_DWORD *)v82 = 0;
            v155[38].i64[1] |= 1 << v80;
          }
        }
      }
      if (!HIBYTE(v159))
      {
        HIBYTE(v159) = 1;
        v83 = v157;
        if (v157)
        {
          v90 = __clz(__rbit64(v157));
          v91 = "\n";
          do
          {
            if (v90 > 0x1Fu)
            {
              v142 = v69;
              v96 = v91;
              v97 = v78;
              JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v155, (char)(v90 - 32));
              v78 = v97;
              v69 = v142;
              v91 = v96;
            }
            else
            {
              v92 = 1 << v90;
              if ((v155[40].i64[1] & (1 << v90)) != 0)
              {
                if (v90 >= v155[21].u32[1])
                {
                  __break(0xC471u);
                  JUMPOUT(0x198F793CCLL);
                }
                v93 = v155[20].i64[1];
                v155[62] = vandq_s8(v155[62], (int8x16_t)vdupq_n_s64(~v92));
                if (*((_BYTE *)v78 + 1792))
                {
                  v151 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v90];
                  v141 = v69;
                  WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v151, "\n");
                  v78 = g_config;
                  v69 = v141;
                  v91 = "\n";
                  v83 = v157;
                }
                v94 = v93 + 4 * v90;
                if ((v83 & v92) == 0 || (*(_WORD *)(v94 + 1) & 7) == 3)
                {
                  *(_DWORD *)v94 = 0;
                  v155[38].i64[1] |= v92;
                }
              }
            }
            if (v90 > 0x3E)
              break;
            v83 = v157;
            if (!v157)
              break;
            v95 = __clz(__rbit64(v157 >> ((v90 + 1) & 0x3F))) + (((_BYTE)v90 + 1) & 0x3F);
            v90 = v95 >= 0x40 ? 64 : v95;
          }
          while (v95 < 0x40);
        }
      }
    }
    else
    {
      v56 = v45;
      v157 = 0;
      v158 = 0;
      v155 = (int8x16_t *)a1;
      v159 = 0;
      v57 = *(_QWORD *)(a1 + 632);
      if (v57)
        LOBYTE(v58) = __clz(__rbit64(v57)) - 32;
      else
        LOBYTE(v58) = JSC::Wasm::BBQJITImpl::BBQJIT::evictFPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v46, v47, v48, v49, v50, v51, v52);
      JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindFPRToScratch(&v155, (char)v58);
      v156 = v58;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)v11, a8, ((unint64_t)v58 << 8) | 3, v59, v60, v61, v62);
      LOBYTE(v159) = 1;
      JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::unbindFPRFromScratch(&v155, (char)v58);
      v69 = v56;
    }
  }
  else
  {
    v70 = v45;
    v58 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, v11, a8, v48, v49, v50, v51, v52) >> 8;
    v69 = v70;
  }
  v84 = (unsigned __int16)v69 & 0xFF00;
  v85 = v84 | (__clz(__rbit64(v9)) << 32) | 8;
  if (v53 != 1)
  {
    v9 = v11;
    v11 = v147;
    switch(v148)
    {
      case -5:
        v88 = *(_DWORD **)(a1 + 8);
        v89 = v88[50];
        if (v89 + 4 > v88[48])
        {
          v139 = v69;
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v88 + 14), v63, v85, v64, v65, v66, v67, v68);
          v69 = v139;
          v89 = v88[50];
        }
        *(_DWORD *)(*((_QWORD *)v88 + 7) + v89) = (v69 >> 8) & 0x1F | (32 * ((v69 >> 8) & 0x1F)) | 0x531E7400;
        v88[50] += 4;
        JSC::MacroAssemblerARM64::storeVector(*(_QWORD *)(a1 + 8), (char)v58, v84 | 0x200000008, v145, v65, v66, v67, v68);
        break;
      case -4:
        JSC::MacroAssemblerARM64::storeDouble(*(_QWORD *)(a1 + 8), (char)v58, v85, v145, v65, v66, v67, v68);
        break;
      case -3:
        JSC::MacroAssemblerARM64::storeFloat(*(_QWORD *)(a1 + 8), (char)v58, v85, v145, v65, v66, v67, v68);
        break;
      case -2:
        JSC::MacroAssemblerARM64::store64(*(_QWORD *)(a1 + 8), v58, v85, v145, v65, v66, v67, v68);
        break;
      case -1:
        JSC::MacroAssemblerARM64::store32(*(_QWORD *)(a1 + 8), v58, v85, v145, v65, v66, v67, v68);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F79304);
    }
    goto LABEL_125;
  }
  v9 = v11;
  if (v54 == 247)
  {
    JSC::MacroAssemblerARM64::store16(*(_QWORD *)(a1 + 8), v58, v85, v145, v65, v66, v67, v68);
    v87 = v149;
    v86 = v150;
    v11 = v147;
  }
  else
  {
    v87 = v149;
    v86 = v150;
    v11 = v147;
    if (v54 == 248)
      JSC::MacroAssemblerARM64::store8(*(_QWORD *)(a1 + 8), v58, v85, v145, v65, v66, v67, v68);
  }
LABEL_126:
  v114 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v11, v86, v64, v65, v66, v67, v68);
  if (v87 == 2)
  {
    v120 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v11 + 16;
    if (*(_DWORD *)(a1 + 1280) < v120)
      *(_DWORD *)(a1 + 1280) = v120;
    if ((v114 & 7) != 1 || ((-8 * v120) ^ v114) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v11, v86, v114);
  }
  result = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v9, a8, v115, v116, v117, v118, v119);
  if (a8 == 2)
  {
    v122 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v9 + 16;
    if (*(_DWORD *)(a1 + 1280) < v122)
      *(_DWORD *)(a1 + 1280) = v122;
    if ((result & 7) != 1 || ((-8 * v122) ^ result) >= 8)
      return JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v9, a8, result);
  }
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addArrayGet(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, const JSC::Wasm::Type *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 v22;
  __int16 v23;
  __int16 IfNecessary;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  _DWORD *v39;
  _QWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  _DWORD *v72;
  uint64_t *v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  unint64_t v105;
  unsigned int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  _BOOL4 v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _DWORD *v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  _DWORD *v131;
  unsigned int v132;
  int v133;
  _DWORD *v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  uint64_t v145[3];
  _BYTE v146[12];
  _BYTE v147[12];
  _BYTE v148[16];
  int v149;
  int v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  const JSC::Wasm::Type *v154;
  _BYTE v155[12];
  int v156;

  v153 = a4;
  v154 = a5;
  v151 = a6;
  v152 = a7;
  v150 = (int)a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::getArrayElementType((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)v148);
  v21 = v149;
  v22 = v148[0];
  if (v149)
    v23 = -1;
  else
    v23 = v148[0];
  if (a5 == 1)
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)0x18, v15, v16, v17, v18, v19, v20);
    if (v23 - 192 <= 0x33)
    {
      if (((1 << (v23 + 64)) & 0xFFC19C001C000) != 0)
      {
        v23 = 254;
      }
      else if (v23 == 192)
      {
        __break(0xC471u);
        JUMPOUT(0x198F79F84);
      }
    }
    *(_QWORD *)a8 = 0;
    *(_WORD *)(a8 + 8) = (v23 << 8) | 1;
    goto LABEL_100;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, (unint64_t)a5, v16, v17, v18, v19, v20);
  v25 = HIBYTE(IfNecessary);
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, (IfNecessary >> 8), 2, v26, v27, v28, v29, (uint64_t)v155);
  LODWORD(v145[0]) = *(_DWORD *)v155;
  v35 = *(_QWORD *)&v155[4];
  *(uint64_t *)((char *)v145 + 4) = *(_QWORD *)&v155[4];
  if (*(_DWORD *)v155 != -1)
  {
    v36 = (_QWORD *)(a1 + 2320);
    v37 = *(unsigned int *)(a1 + 2332);
    if ((_DWORD)v37 == *(_DWORD *)(a1 + 2328))
    {
      v38 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, (void *)(v37 + 1), (unint64_t)v145, v30, v31, v32, v33, v34);
      v39 = (_DWORD *)(*(_QWORD *)(a1 + 2320) + 12 * *(unsigned int *)(a1 + 2332));
      *v39 = *(_DWORD *)v38;
      v40 = v39 + 1;
      v35 = *(_QWORD *)(v38 + 4);
    }
    else
    {
      v41 = (_DWORD *)(*v36 + 12 * v37);
      *v41 = *(_DWORD *)v155;
      v40 = v41 + 1;
    }
    *v40 = v35;
    ++*(_DWORD *)(a1 + 2332);
  }
  v42 = v25;
  v144 = a2;
  if (v152 == 1)
  {
    JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), v25 | 0x3800000000, 8, v30, v31, v32, v33, v34);
    v43 = v147;
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 9, 8, v151, v44, v45, v46, v47, (uint64_t)v147);
    LOBYTE(v53) = 0;
  }
  else
  {
    v54 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, v151, v152, v30, v31, v32, v33, v34);
    v60 = *(_QWORD *)(a1 + 8);
    if (!*(_BYTE *)(v60 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198F79F1CLL);
    }
    v61 = v54;
    v53 = v54 >> 8;
    *(_DWORD *)(*(_QWORD *)(v60 + 296) + 208) &= ~*(_DWORD *)(v60 + 320);
    JSC::MacroAssemblerARM64::load32(v60, v42 | 0x3800000000, *(char *)(v60 + 304), v55, v56, v57, v58, v59);
    v62 = (v61 >> 8);
    v43 = v146;
    JSC::MacroAssemblerARM64::branch32(v60, 2, v62, 17, v63, v64, v65, v66, (uint64_t)v146);
  }
  v67 = *(_DWORD *)v43;
  LODWORD(v145[0]) = v67;
  v68 = *(_QWORD *)(v43 + 4);
  *(uint64_t *)((char *)v145 + 4) = v68;
  if (v67 != -1)
  {
    v69 = (_QWORD *)(a1 + 1920);
    v70 = *(unsigned int *)(a1 + 1932);
    if ((_DWORD)v70 == *(_DWORD *)(a1 + 1928))
    {
      v71 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, (void *)(v70 + 1), (unint64_t)v145, v48, v49, v50, v51, v52);
      v72 = (_DWORD *)(*(_QWORD *)(a1 + 1920) + 12 * *(unsigned int *)(a1 + 1932));
      *v72 = *(_DWORD *)v71;
      v73 = (uint64_t *)(v72 + 1);
      v68 = *(_QWORD *)(v71 + 4);
    }
    else
    {
      v74 = (_DWORD *)(*v69 + 12 * v70);
      *v74 = v67;
      v73 = (uint64_t *)(v74 + 1);
    }
    *v73 = v68;
    ++*(_DWORD *)(a1 + 1932);
  }
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v42 | 0x4000000000, 8, v48, v49, v50, v51, v52);
  v75 = v153;
  v76 = (uint64_t)v154;
  v82 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v153, (uint64_t)v154, v77, v78, v79, v80, v81);
  if (v76 == 2)
  {
    v87 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v75 + 16;
    if (*(_DWORD *)(a1 + 1280) < v87)
      *(_DWORD *)(a1 + 1280) = v87;
    if ((v82 & 7) != 1 || ((-8 * v87) ^ v82) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v75, v76, v82);
  }
  v88 = *(_QWORD *)(a1 + 88);
  v89 = *(_DWORD *)(v88 + 596);
  if (!v89)
  {
    __break(0xC471u);
    JUMPOUT(0x198F7A10CLL);
  }
  v90 = *(_QWORD *)(v88 + 584) + 1232 * v89;
  v91 = *(_DWORD *)(v90 - 32);
  v92 = *(_DWORD *)(v90 - 160);
  v93 = *(_DWORD *)(v88 + 68);
  if (v23 - 192 <= 0x33)
  {
    if (((1 << (v23 + 64)) & 0xFFC19C001C000) != 0)
    {
      v23 = 254;
    }
    else if (v23 == 192)
    {
      __break(0xC471u);
      JUMPOUT(0x198F79FA4);
    }
  }
  v94 = v93 + v91;
  if (v92 == 5)
    v95 = v94 + 1;
  else
    v95 = v94;
  *(_QWORD *)a8 = v95;
  *(_WORD *)(a8 + 8) = (v23 << 8) | 2;
  v101 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v95, *(_QWORD *)(a8 + 8), 0, v83, v84, v85, v86);
  if (v152 != 1)
  {
    v103 = 0x200000004;
    if (v21)
    {
      if (v22 == 248)
      {
        v105 = 0;
        v104 = 1;
      }
      else
      {
        if (v22 != 247)
        {
          __break(0xC471u);
          JUMPOUT(0x198F79FE4);
        }
        v104 = 0;
        v105 = 1;
      }
      v109 = __clz(v105);
      v110 = v21 == 1;
      if (v21 == 1)
      {
        v110 = 1;
LABEL_68:
        v112 = 0x4000000000 - (v109 << 32);
        if (v104)
          v113 = 0;
        else
          v113 = v112;
        v114 = v113 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v53 << 8) | 8;
        if (v110)
        {
          if (v22 == 247)
          {
            JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), v114, v103, ((__int16)v101 >> 8), v97, v98, v99, v100);
          }
          else if (v22 == 248)
          {
            JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), v114, v103, ((__int16)v101 >> 8), v97, v98, v99, v100);
          }
        }
        else
        {
          switch(*(_BYTE *)(a8 + 9))
          {
            case 0xFB:
              v115 = *(_DWORD **)(a1 + 8);
              v116 = v115[50];
              if (v116 + 4 > v115[48])
              {
                v143 = v103;
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v115 + 14), v114, v103, v96, v97, v98, v99, v100);
                v103 = v143;
                v116 = v115[50];
              }
              *(_DWORD *)(*((_QWORD *)v115 + 7) + v116) = v53 & 0x1F | (32 * (v53 & 0x1F)) | 0x531E7400;
              v115[50] += 4;
              JSC::MacroAssemblerARM64::loadVector(*(_QWORD *)(a1 + 8), ((unint64_t)v53 << 8) | 0x200000008, v103, ((__int16)v101 >> 8), v97, v98, v99, v100);
              break;
            case 0xFC:
              JSC::MacroAssemblerARM64::loadDouble(*(_QWORD *)(a1 + 8), v114, v103, ((__int16)v101 >> 8), v97, v98, v99, v100);
              break;
            case 0xFD:
              JSC::MacroAssemblerARM64::loadFloat(*(_QWORD *)(a1 + 8), v114, v103, ((__int16)v101 >> 8), v97, v98, v99, v100);
              break;
            case 0xFE:
              JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v114, v103, ((__int16)v101 >> 8), v97, v98, v99, v100);
              break;
            case 0xFF:
              JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), v114, v103, ((__int16)v101 >> 8), v97, v98, v99, v100);
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198F7A044);
          }
        }
        goto LABEL_92;
      }
    }
    else
    {
      v108 = 3;
      switch(v22)
      {
        case 0xFBu:
        case 0xFCu:
        case 0xFEu:
          goto LABEL_63;
        case 0xFDu:
        case 0xFFu:
          break;
        default:
          if (v22 - 227 >= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x198F7A0C4);
          }
LABEL_63:
          v108 = 7;
          break;
      }
      v110 = 0;
      v104 = 0;
      v109 = __clz(v108);
    }
    switch(v22)
    {
      case 0xFBu:
      case 0xFCu:
      case 0xFEu:
        goto LABEL_67;
      case 0xFDu:
      case 0xFFu:
        goto LABEL_68;
      default:
        if (v22 - 227 >= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198F7A064);
        }
LABEL_67:
        v103 = 0x200000008;
        break;
    }
    goto LABEL_68;
  }
  if (v21 == 1 && (v22 + 9) < 2u)
  {
    v102 = 4;
LABEL_46:
    if (v22 == 248)
    {
      v106 = 1;
    }
    else
    {
      if (v22 != 247)
      {
        __break(0xC471u);
        JUMPOUT(0x198F79FC4);
      }
      v106 = 2;
    }
    v107 = v102 + v106 * (unint64_t)v151;
    if (v21 == 1)
    {
      if (v22 == 247)
      {
        JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), (v107 << 32) | 8, ((__int16)v101 >> 8), v96, v97, v98, v99, v100);
      }
      else if (v22 == 248)
      {
        JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), (v107 << 32) | 8, ((__int16)v101 >> 8), v96, v97, v98, v99, v100);
      }
      goto LABEL_92;
    }
  }
  else
  {
    v102 = 4;
    switch(v22)
    {
      case 0xFBu:
      case 0xFCu:
      case 0xFEu:
        v102 = 8;
        if (!v21)
          goto LABEL_59;
        goto LABEL_46;
      case 0xFDu:
      case 0xFFu:
        if (v21)
          goto LABEL_46;
LABEL_59:
        v111 = 4;
        switch(v22)
        {
          case 0xFBu:
            v111 = 16;
            break;
          case 0xFCu:
          case 0xFEu:
            v111 = 8;
            break;
          case 0xFDu:
          case 0xFFu:
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198F7A0E4);
        }
        v107 = v102 + v111 * (unint64_t)v151;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F7A0A4);
    }
  }
  switch(*(_BYTE *)(a8 + 9))
  {
    case 0xFB:
      JSC::MacroAssemblerARM64::loadVector(*(_QWORD *)(a1 + 8), (v107 << 32) | 8, ((__int16)v101 >> 8), v96, v97, v98, v99, v100);
      break;
    case 0xFC:
      JSC::MacroAssemblerARM64::loadDouble(*(_QWORD *)(a1 + 8), (v107 << 32) | 8, ((__int16)v101 >> 8), v96, v97, v98, v99, v100);
      break;
    case 0xFD:
      JSC::MacroAssemblerARM64::loadFloat(*(_QWORD *)(a1 + 8), (v107 << 32) | 8, ((__int16)v101 >> 8), v96, v97, v98, v99, v100);
      break;
    case 0xFE:
      JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), (v107 << 32) | 8, ((__int16)v101 >> 8), v96, v97, v98, v99, v100);
      break;
    case 0xFF:
      JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), (v107 << 32) | 8, ((__int16)v101 >> 8), v96, v97, v98, v99, v100);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198F7A024);
  }
LABEL_92:
  v117 = v151;
  v118 = v152;
  v119 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v151, v152, v96, v97, v98, v99, v100);
  if (v118 == 2)
  {
    v127 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v117 + 16;
    if (*(_DWORD *)(a1 + 1280) < v127)
      *(_DWORD *)(a1 + 1280) = v127;
    if ((v119 & 7) != 1 || ((-8 * v127) ^ v119) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v117, v118, v119);
  }
  if (*(unsigned __int8 *)(a8 + 9) != 255 || v144 == 11)
  {
    if (!HIBYTE(word_1ECF4C700))
      goto LABEL_100;
    *(_OWORD *)v145 = *(_OWORD *)a8;
    *(_QWORD *)v155 = "ArrayGet";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v137 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v137;
      }
      while (v137 < *(_DWORD *)a1);
    }
    goto LABEL_130;
  }
  if (v144 == 12)
  {
    if (v21)
    {
      if (v22 == 248)
      {
        v129 = 24;
      }
      else
      {
        if (v22 != 247)
        {
          __break(0xC471u);
          JUMPOUT(0x198F7A084);
        }
        v129 = 16;
      }
    }
    else
    {
      v129 = 0;
      switch(v22)
      {
        case 0xFBu:
          v129 = 160;
          break;
        case 0xFCu:
        case 0xFEu:
          goto LABEL_117;
        case 0xFDu:
        case 0xFFu:
          break;
        default:
          if (v22 - 227 >= 2)
          {
            __break(0xC471u);
            JUMPOUT(0x198F7A104);
          }
LABEL_117:
          v129 = 224;
          break;
      }
    }
    v130 = v101 >> 8;
    v131 = *(_DWORD **)(a1 + 8);
    v132 = v131[50];
    if (v132 + 4 > v131[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v131 + 14), v120, v121, v122, v123, v124, v125, v126);
      v132 = v131[50];
    }
    v133 = (v101 >> 8) & 0x1F;
    *(_DWORD *)(*((_QWORD *)v131 + 7) + v132) = ((-65536 * v129) & 0x180000 | (32 * (BYTE1(v101) & 0x1F)) & 0x9FE0 | (((v129 >> 3) & 3) << 13) | v133) ^ 0x53007C00;
    v131[50] += 4;
    v134 = *(_DWORD **)(a1 + 8);
    v135 = v134[50];
    if (v135 + 4 > v134[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v134 + 14), v120, v121, v122, v123, v124, v125, v126);
      v135 = v134[50];
    }
    *(_DWORD *)(*((_QWORD *)v134 + 7) + v135) = (v129 << 16) & 0x180000 | (32 * (v130 & 0x1F)) | v133 | 0x13007C00;
    v134[50] += 4;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v145 = *(_OWORD *)a8;
      *(_QWORD *)v155 = "ArrayGetS";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v136 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v136;
        }
        while (v136 < *(_DWORD *)a1);
      }
      goto LABEL_130;
    }
  }
  else
  {
    if (v144 != 13)
    {
      __break(0xC471u);
      JUMPOUT(0x198F7A004);
    }
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v145 = *(_OWORD *)a8;
      *(_QWORD *)v155 = "ArrayGetU";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v128 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v128;
        }
        while (v128 < *(_DWORD *)a1);
      }
LABEL_130:
      WTF::dataLog<char const*,char [2]>((const char **)v155, " ");
      WTF::dataLog<unsigned int>(&v150);
      WTF::dataLog<char [16]>(", ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v153);
      if (v154 != 1 && v154 != 4)
      {
        v156 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v153, (uint64_t)v154, v138, v139, v140, v141, v142);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v156);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v151, v145);
    }
  }
LABEL_100:
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addArraySet(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const JSC::Wasm::Type *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unint64_t v11;
  __int16 IfNecessary;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  _QWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  _DWORD *v62;
  _QWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  const JSC::Wasm::Type *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  int v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  unsigned int v89;
  uint64_t v90;
  _BYTE v91[12];
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98[2];
  uint64_t v99[2];
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;

  v100 = a3;
  v101 = a4;
  v99[0] = (uint64_t)a5;
  v99[1] = a6;
  v98[0] = a7;
  v98[1] = a8;
  v97 = (int)a2;
  if (a4 == 1)
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)0x19, a3, a4, (uint64_t)a5, a6, a7, a8);
LABEL_32:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  v11 = a8;
  v90 = a4;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a3, a4, a4, (uint64_t)a5, a6, a7, a8);
  v19 = HIBYTE(IfNecessary);
  v89 = IfNecessary >> 8;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, v89, 2, v20, v21, v22, v23, (uint64_t)&v102);
  *(_DWORD *)v91 = v102;
  v29 = v103;
  *(_QWORD *)&v91[4] = v103;
  if (v102 != -1)
  {
    v30 = (_QWORD *)(a1 + 2360);
    v31 = *(unsigned int *)(a1 + 2372);
    if ((_DWORD)v31 == *(_DWORD *)(a1 + 2368))
    {
      v32 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v30, (void *)(v31 + 1), (unint64_t)v91, v24, v25, v26, v27, v28);
      v33 = (_DWORD *)(*(_QWORD *)(a1 + 2360) + 12 * *(unsigned int *)(a1 + 2372));
      *v33 = *(_DWORD *)v32;
      v34 = v33 + 1;
      v29 = *(_QWORD *)(v32 + 4);
    }
    else
    {
      v35 = (_DWORD *)(*v30 + 12 * v31);
      *v35 = v102;
      v34 = v35 + 1;
    }
    *v34 = v29;
    ++*(_DWORD *)(a1 + 2372);
  }
  if (a6 == 1)
  {
    JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), v19 | 0x3800000000, 8, v24, v25, v26, v27, v28);
    JSC::MacroAssemblerARM64::branch32(*(_QWORD *)(a1 + 8), 9, 8, a5, v36, v37, v38, v39, (uint64_t)&v95);
    v45 = v95;
    *(_DWORD *)v91 = v95;
    v46 = v96;
    *(_QWORD *)&v91[4] = v96;
    if (v95 == -1)
      goto LABEL_17;
    goto LABEL_13;
  }
  v87 = v11;
  v88 = a9;
  v47 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, (uint64_t)a5, a6, v24, v25, v26, v27, v28);
  v53 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v53 + 212))
  {
    v54 = v47;
    *(_DWORD *)(*(_QWORD *)(v53 + 296) + 208) &= ~*(_DWORD *)(v53 + 320);
    JSC::MacroAssemblerARM64::load32(v53, v19 | 0x3800000000, *(char *)(v53 + 304), v48, v49, v50, v51, v52);
    JSC::MacroAssemblerARM64::branch32(v53, 2, (v54 >> 8), 17, v55, v56, v57, v58, (uint64_t)&v93);
    v45 = v93;
    *(_DWORD *)v91 = v93;
    v46 = v94;
    *(_QWORD *)&v91[4] = v94;
    v11 = v87;
    a9 = v88;
    if (v93 == -1)
    {
LABEL_17:
      JSC::Wasm::BBQJITImpl::BBQJIT::emitArraySetUnchecked(a1, a2, a3, a4, a5, a6, a7, v11);
      JSC::Wasm::BBQJITImpl::BBQJIT::getArrayElementType((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, a2, v65, v66, v67, v68, v69, v70, (uint64_t)v91);
      if (v92)
        v77 = -1;
      else
        v77 = v91[0];
      if (BYTE1(dword_1ECF4C7B0))
        v78 = 29;
      else
        v78 = 17;
      if ((v78 + v77) <= 1u)
        JSC::Wasm::BBQJITImpl::BBQJIT::emitWriteBarrier((uint64_t *)a1, (JSC::ARM64LogicalImmediate *)v89, v71, v72, v73, v74, v75, v76);
      v79 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a3, a4, v72, v73, v74, v75, v76);
      if (v90 == 2)
      {
        v80 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a3 + 16;
        if (*(_DWORD *)(a1 + 1280) < v80)
          *(_DWORD *)(a1 + 1280) = v80;
        if ((v79 & 7) != 1 || ((-8 * v80) ^ v79) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a3, a4, v79);
      }
      if (HIBYTE(word_1ECF4C700))
      {
        *(_QWORD *)v91 = "ArraySet";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v81 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v81;
          }
          while (v81 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>((const char **)v91, " ");
        WTF::dataLog<unsigned int>(&v97);
        WTF::dataLog<char [16]>(", ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v100);
        if (v101 != 1 && v101 != 4)
        {
          v102 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v100, v101, v82, v83, v84, v85, v86);
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v102);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a1, 0, v99, v98);
      }
      goto LABEL_32;
    }
LABEL_13:
    v59 = (_QWORD *)(a1 + 1960);
    v60 = *(unsigned int *)(a1 + 1972);
    if ((_DWORD)v60 == *(_DWORD *)(a1 + 1968))
    {
      v61 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v59, (void *)(v60 + 1), (unint64_t)v91, v40, v41, v42, v43, v44);
      v62 = (_DWORD *)(*(_QWORD *)(a1 + 1960) + 12 * *(unsigned int *)(a1 + 1972));
      *v62 = *(_DWORD *)v61;
      v63 = v62 + 1;
      v46 = *(_QWORD *)(v61 + 4);
    }
    else
    {
      v64 = (_DWORD *)(*v59 + 12 * v60);
      *v64 = v45;
      v63 = v64 + 1;
    }
    *v63 = v46;
    ++*(_DWORD *)(a1 + 1972);
    goto LABEL_17;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addArrayLen(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int IfNecessary;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  _QWORD *v49;
  _DWORD *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63[3];
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  _BYTE v67[12];

  v64 = a2;
  v65 = a3;
  v12 = a3;
  if (a3 == 1)
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)0x1A, a3, (uint64_t)a4, a5, a6, a7, a8);
    *a4 = 0;
    *((_WORD *)a4 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v63 = *(_OWORD *)a4;
      v66 = "ArrayLen";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v13 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v13;
        }
        while (v13 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v66, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v64);
      if (v65 != 1 && v65 != 4)
      {
        *(_DWORD *)v67 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v64, v65, v14, v15, v16, v17, v18);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)v67);
      }
      WTF::dataLog<char [16]>(" ");
      WTF::dataLog<char [16]>("=> ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v63);
      if (LOBYTE(v63[1]) != 1 && LOBYTE(v63[1]) != 4)
      {
        *(_DWORD *)v67 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v63[0], v63[1], v20, v21, v22, v23, v24);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)v67);
      }
      *(_QWORD *)v67 = "Exception";
      WTF::dataLog<char [16]>(" ");
      WTF::dataLog<char const*>((const char **)v67);
      WTF::dataLog<char [16]>("\n");
    }
LABEL_31:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v33 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v28, v29, v30, v31, v32);
  if (v12 == 2)
  {
    v38 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v38)
      *(_DWORD *)(a1 + 1280) = v38;
    if ((v33 & 7) != 1 || ((-8 * v38) ^ v33) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v33);
  }
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, ((__int16)IfNecessary >> 8), 2, v34, v35, v36, v37, (uint64_t)v67);
  LODWORD(v63[0]) = *(_DWORD *)v67;
  v44 = *(_QWORD *)&v67[4];
  *(uint64_t *)((char *)v63 + 4) = *(_QWORD *)&v67[4];
  if (*(_DWORD *)v67 != -1)
  {
    v45 = (_QWORD *)(a1 + 2400);
    v46 = *(unsigned int *)(a1 + 2412);
    if ((_DWORD)v46 == *(_DWORD *)(a1 + 2408))
    {
      v47 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v45, (void *)(v46 + 1), (unint64_t)v63, v39, v40, v41, v42, v43);
      v48 = (_DWORD *)(*(_QWORD *)(a1 + 2400) + 12 * *(unsigned int *)(a1 + 2412));
      *v48 = *(_DWORD *)v47;
      v49 = v48 + 1;
      v44 = *(_QWORD *)(v47 + 4);
    }
    else
    {
      v50 = (_DWORD *)(*v45 + 12 * v46);
      *v50 = *(_DWORD *)v67;
      v49 = v50 + 1;
    }
    *v49 = v44;
    ++*(_DWORD *)(a1 + 2412);
  }
  v51 = *(_QWORD *)(a1 + 88);
  v52 = *(_DWORD *)(v51 + 596);
  if (v52)
  {
    v53 = *(_QWORD *)(v51 + 584) + 1232 * v52;
    v54 = *(_DWORD *)(v51 + 68) + *(_DWORD *)(v53 - 32);
    if (*(_DWORD *)(v53 - 160) == 5)
      v55 = v54 + 1;
    else
      v55 = v54;
    *a4 = v55;
    *((_WORD *)a4 + 4) = -254;
    v56 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v55, a4[1], IfNecessary, v40, v41, v42, v43);
    JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), BYTE1(IfNecessary) | 0x3800000000, (v56 >> 8), v57, v58, v59, v60, v61);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v63 = *(_OWORD *)a4;
      *(_QWORD *)v67 = "ArrayLen";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v62 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v62;
        }
        while (v62 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>((const char **)v67, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, &v64, v63);
    }
    goto LABEL_31;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addArrayFill(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, uint64_t a11)
{
  unint64_t v13;
  uint64_t v14;
  __int16 IfNecessary;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  _QWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  JSC::ARM64LogicalImmediate *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  unint64_t v45;
  unint64_t v46;
  JSC::ARM64LogicalImmediate *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  int v65;
  _DWORD *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  _DWORD *v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  const JSC::Wasm::Type *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t *v84;
  unsigned __int8 *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  int v95;
  unint64_t v96;
  unsigned __int8 **v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  unsigned int v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  const JSC::Wasm::Type *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  unsigned __int8 *v142;
  unsigned int v143;
  _QWORD *v144;
  unint64_t v145;
  uint64_t *v146;
  unsigned __int8 *v147;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  int v156;
  unint64_t v157;
  unsigned __int8 **v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _DWORD *v183;
  unsigned int v184;
  unint64_t v185;
  unint64_t v186;
  unsigned int v187;
  unint64_t v188;
  unint64_t v190;
  WTF *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int16 v197;
  int8x8_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  _DWORD *v208;
  _QWORD *v209;
  _DWORD *v210;
  int v211;
  int v212;
  _BYTE *v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  WTF *v227;
  uint64_t v228;
  __int128 v229;
  uint64_t v230;
  __int16 v231;
  uint64_t v232;
  __int16 v233;
  uint64_t v234;
  __int16 v235;
  unint64_t v236;
  __int16 v237;
  __int128 v238;
  int v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD v248[4];
  unint64_t v249;
  int v250;
  _BYTE *v251;
  int v252;
  _BYTE v253[24];
  uint64_t v254;
  uint64_t *v255;
  __int128 *v256;
  char v257;
  __int128 v258;
  _BYTE v259[256];
  _BYTE v260[24];
  uint64_t v261;
  __int16 v262;
  uint64_t v263;

  v263 = *MEMORY[0x1E0C80C00];
  v246 = a3;
  v247 = a4;
  v244 = a5;
  v245 = a6;
  v242 = a7;
  v243 = a8;
  v240 = a10;
  v241 = a11;
  v239 = a2;
  if (a4 == 1)
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)0x1B, a3, a4, a5, a6, a7, a8);
    goto LABEL_115;
  }
  v13 = a8;
  v14 = a7;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a3, a4, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, (IfNecessary >> 8), 2, v16, v17, v18, v19, (uint64_t)&v258);
  *(_DWORD *)v260 = v258;
  v25 = *(_QWORD *)((char *)&v258 + 4);
  *(_QWORD *)&v260[4] = *(_QWORD *)((char *)&v258 + 4);
  if ((_DWORD)v258 != -1)
  {
    v26 = (_QWORD *)(a1 + 2440);
    v27 = *(unsigned int *)(a1 + 2452);
    if ((_DWORD)v27 == *(_DWORD *)(a1 + 2448))
    {
      v28 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, (void *)(v27 + 1), (unint64_t)v260, v20, v21, v22, v23, v24);
      v29 = (_DWORD *)(*(_QWORD *)(a1 + 2440) + 12 * *(unsigned int *)(a1 + 2452));
      *v29 = *(_DWORD *)v28;
      v30 = v29 + 1;
      v25 = *(_QWORD *)(v28 + 4);
    }
    else
    {
      v31 = (_DWORD *)(*v26 + 12 * v27);
      *v31 = v258;
      v30 = v31 + 1;
    }
    *v30 = v25;
    ++*(_DWORD *)(a1 + 2452);
  }
  v32 = *(_QWORD *)(a1 + 88);
  v33 = *(_DWORD *)(v32 + 596);
  if (!v33)
  {
    __break(0xC471u);
    JUMPOUT(0x198F7B650);
  }
  v34 = *(_QWORD *)(v32 + 584) + 1232 * v33;
  v35 = *(_DWORD *)(v32 + 68) + *(_DWORD *)(v34 - 32);
  if (*(_DWORD *)(v34 - 160) == 5)
    v36 = v35 + 1;
  else
    v36 = v35;
  if (BYTE1(v13) != 251)
  {
    if (BYTE1(v13) == 252)
    {
      if (v13 == 1)
        goto LABEL_58;
    }
    else
    {
      if (BYTE1(v13) != 253)
      {
LABEL_60:
        v242 = v14;
        LOWORD(v243) = v13;
        v230 = v246;
        v231 = v247;
        v232 = v244;
        v233 = v245;
        v234 = v14;
        v235 = v13;
        v237 = v241;
        v236 = v240;
        v227 = (WTF *)&v229;
        v229 = xmmword_19919F700;
        v228 = 0x500000008;
        LOBYTE(v258) = -1;
        *((_QWORD *)&v258 + 1) = 0;
        WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v260, &v258, 1uLL);
        *(_QWORD *)&v258 = v259;
        *((_QWORD *)&v258 + 1) = 16;
        v140 = 0;
        v141 = 80;
        v142 = (unsigned __int8 *)&v229 + 9;
        do
        {
          v143 = *v142;
          v142 += 16;
          v144 = (_QWORD *)(v258 + 16 * v140);
          *v144 = v143;
          v144[1] = 0;
          v140 = ++HIDWORD(v258);
          v141 -= 16;
        }
        while (v141);
        v145 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
        if (v145 != -1)
        {
          v248[0] = &v257;
          v255 = v248;
          std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v255, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
        }
        v146 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
        v147 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
        if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
        {
          __clrex();
        }
        else if (!__stxr(1u, v147))
        {
          goto LABEL_68;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v147);
LABEL_68:
        v255 = (uint64_t *)v260;
        v256 = &v258;
        WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v146, &v255, (uint64_t)&v255, v135, v136, v137, v138, v139, (uint64_t)v248);
        v93 = *(unsigned int **)v248[0];
        if (*(_QWORD *)v248[0])
        {
          do
            v155 = __ldaxr(v93);
          while (__stlxr(v155 + 1, v93));
        }
        v156 = __ldxr(v147);
        if (v156 == 1)
        {
          if (!__stlxr(0, v147))
            goto LABEL_75;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v147, 0, v149, v150, v151, v152, v153, v154);
LABEL_75:
        v157 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
        if (v157 != -1)
        {
          v248[0] = &v257;
          v255 = v248;
          std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v255, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
        }
        if (v93[8])
          v158 = 0;
        else
          v158 = (unsigned __int8 **)(v93 + 2);
        JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v158, 0, (char *)v248);
        if ((unint64_t)(v254 + 15) >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198F7B668);
        }
        v166 = (v254 + 15) & 0xFFFFFFF0;
        if (*(_DWORD *)(a1 + 1284) > v166)
          v166 = *(_DWORD *)(a1 + 1284);
        *(_DWORD *)(a1 + 1284) = v166;
        JSC::Wasm::BBQJITImpl::BBQJIT::prepareForExceptions(a1, v159, v160, v161, v162, v163, v164, v165);
        JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(a1, (uint64_t)&v227, (uint64_t)v248, (uint64_t)v93, v167, v168, v169, v170);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), (uint64_t)operationWasmArrayFill, 8, v171, v172, v173, v174, v175);
        v183 = *(_DWORD **)(a1 + 8);
        v183[52] = 0;
        v184 = v183[50];
        if (v184 + 4 > v183[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v183 + 14), v176, v177, v178, v179, v180, v181, v182);
          v184 = v183[50];
        }
        *(_DWORD *)(*((_QWORD *)v183 + 7) + v184) = -700514048;
        v183[50] += 4;
        if (!*(_DWORD *)(a1 + 340))
        {
          __break(0xC471u);
          JUMPOUT(0x198F7B670);
        }
        if ((**(_DWORD **)(a1 + 328) & 0x700) == 0x300)
        {
          __break(0xC471u);
          JUMPOUT(0x198F7B5ACLL);
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, v36, 65282, 2, v179, v180, v181, v182);
        v185 = (unint64_t)v251;
        if (v253 != v251 && v251)
        {
          v251 = 0;
          v252 = 0;
          WTF::fastFree(v185, v124, v125, v126, v127, v128, v129, v130);
        }
        v186 = v249;
        if (v249)
        {
          v249 = 0;
          v250 = 0;
          WTF::fastFree(v186, v124, v125, v126, v127, v128, v129, v130);
        }
        do
        {
          v187 = __ldaxr(v93);
          v134 = --v187 == 0;
        }
        while (__stlxr(v187, v93));
        goto LABEL_91;
      }
      if (v13 == 1)
      {
        v14 = v14;
LABEL_58:
        LOWORD(v13) = -511;
        goto LABEL_60;
      }
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::flushValue(a1, (JSC::ARM64LogicalImmediate *)v14, v13, v20, v21, v22, v23, v24);
    v14 = v14;
    LOWORD(v13) = -510;
    goto LABEL_60;
  }
  v44 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, v14, v13, v20, v21, v22, v23, v24);
  *(_QWORD *)v260 = a1;
  *(_QWORD *)&v260[16] = 0;
  v261 = 0;
  v262 = 0;
  v45 = *(_QWORD *)(a1 + 616);
  if (v45)
    v46 = __clz(__rbit64(v45));
  else
    v46 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v37, v38, v39, v40, v41, v42, v43);
  v260[8] = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(v260, v46);
  v54 = *(_QWORD *)(*(_QWORD *)v260 + 616);
  if (v54)
    v55 = __clz(__rbit64(v54));
  else
    v55 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(*(JSC::Wasm::BBQJITImpl::BBQJIT **)v260, v47, v48, v49, v50, v51, v52, v53);
  v63 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(v260, v55);
  v260[9] = v63;
  v64 = v260[8];
  v65 = v260[8];
  v66 = *(_DWORD **)(a1 + 8);
  v67 = v66[50];
  if (v67 + 4 > v66[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v66 + 14), v56, v57, v58, v59, v60, v61, v62);
    v67 = v66[50];
  }
  v68 = (v64 << 8) | 2;
  v69 = (v44 >> 3) & 0xFFFFFFE0;
  *(_DWORD *)(*((_QWORD *)v66 + 7) + v67) = v69 | 0x4E083C00 | v65;
  v66[50] += 4;
  v70 = *(_DWORD **)(a1 + 8);
  v71 = v260[9];
  v72 = v70[50];
  if (v72 + 4 > v70[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v70 + 14), v56, v57, v58, v59, v60, v61, v62);
    v72 = v70[50];
  }
  *(_DWORD *)(*((_QWORD *)v70 + 7) + v72) = v69 | v71 | 0x4E183C00;
  v70[50] += 4;
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::unbindEarly(v260);
  v230 = v246;
  v231 = v247;
  v232 = v244;
  v233 = v245;
  *(_QWORD *)&v260[6] = v240;
  *(_WORD *)&v260[14] = v241;
  v227 = (WTF *)&v229;
  v229 = xmmword_19919F700;
  v234 = v68;
  v235 = -508;
  v236 = ((unint64_t)v63 << 8) | 2;
  v237 = -508;
  v238 = *(_OWORD *)&v260[6];
  v228 = 0x600000008;
  LOBYTE(v258) = -1;
  *((_QWORD *)&v258 + 1) = 0;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v260, &v258, 1uLL);
  *(_QWORD *)&v258 = v259;
  *((_QWORD *)&v258 + 1) = 16;
  v78 = 0;
  v79 = 96;
  v80 = (unsigned __int8 *)&v229 + 9;
  do
  {
    v81 = *v80;
    v80 += 16;
    v82 = (_QWORD *)(v258 + 16 * v78);
    *v82 = v81;
    v82[1] = 0;
    v78 = ++HIDWORD(v258);
    v79 -= 16;
  }
  while (v79);
  v83 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v83 != -1)
  {
    v248[0] = &v257;
    v255 = v248;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, &v255, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v84 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v85 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v85))
  {
    goto LABEL_33;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v85);
LABEL_33:
  v255 = (uint64_t *)v260;
  v256 = &v258;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v84, &v255, (uint64_t)&v255, v73, v74, v75, v76, v77, (uint64_t)v248);
  v93 = *(unsigned int **)v248[0];
  if (*(_QWORD *)v248[0])
  {
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 + 1, v93));
  }
  v95 = __ldxr(v85);
  if (v95 == 1)
  {
    if (!__stlxr(0, v85))
      goto LABEL_40;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v85, 0, v87, v88, v89, v90, v91, v92);
LABEL_40:
  v96 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v96 != -1)
  {
    v248[0] = &v257;
    v255 = v248;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v255, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (v93[8])
    v97 = 0;
  else
    v97 = (unsigned __int8 **)(v93 + 2);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v97, 0, (char *)v248);
  if ((unint64_t)(v254 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F7B658);
  }
  v105 = (v254 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a1 + 1284) > v105)
    v105 = *(_DWORD *)(a1 + 1284);
  *(_DWORD *)(a1 + 1284) = v105;
  JSC::Wasm::BBQJITImpl::BBQJIT::prepareForExceptions(a1, v98, v99, v100, v101, v102, v103, v104);
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(a1, (uint64_t)&v227, (uint64_t)v248, (uint64_t)v93, v106, v107, v108, v109);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), (uint64_t)operationWasmArrayFillVector, 8, v110, v111, v112, v113, v114);
  v122 = *(_DWORD **)(a1 + 8);
  v122[52] = 0;
  v123 = v122[50];
  if (v123 + 4 > v122[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v122 + 14), v115, v116, v117, v118, v119, v120, v121);
    v123 = v122[50];
  }
  *(_DWORD *)(*((_QWORD *)v122 + 7) + v123) = -700514048;
  v122[50] += 4;
  if (!*(_DWORD *)(a1 + 340))
  {
    __break(0xC471u);
    JUMPOUT(0x198F7B660);
  }
  if ((**(_DWORD **)(a1 + 328) & 0x700) == 0x300)
  {
    __break(0xC471u);
    JUMPOUT(0x198F7B58CLL);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, v36, 65282, 2, v118, v119, v120, v121);
  v131 = (unint64_t)v251;
  if (v253 != v251 && v251)
  {
    v251 = 0;
    v252 = 0;
    WTF::fastFree(v131, v124, v125, v126, v127, v128, v129, v130);
  }
  v132 = v249;
  if (v249)
  {
    v249 = 0;
    v250 = 0;
    WTF::fastFree(v132, v124, v125, v126, v127, v128, v129, v130);
  }
  do
  {
    v133 = __ldaxr(v93);
    v134 = --v133 == 0;
  }
  while (__stlxr(v133, v93));
LABEL_91:
  if (v134)
  {
    atomic_store(1u, v93);
    WTF::fastFree((unint64_t)v93, v124, v125, v126, v127, v128, v129, v130);
  }
  v188 = v258;
  if (v259 != (_BYTE *)v258 && (_QWORD)v258 != 0)
  {
    *(_QWORD *)&v258 = 0;
    DWORD2(v258) = 0;
    WTF::fastFree(v188, v124, v125, v126, v127, v128, v129, v130);
  }
  v190 = *(_QWORD *)v260;
  if (&v260[16] != *(_BYTE **)v260 && *(_QWORD *)v260 != 0)
  {
    *(_QWORD *)v260 = 0;
    *(_DWORD *)&v260[8] = 0;
    WTF::fastFree(v190, v124, v125, v126, v127, v128, v129, v130);
  }
  v192 = v227;
  if (&v229 != (__int128 *)v227 && v227)
  {
    v227 = 0;
    LODWORD(v228) = 0;
    WTF::fastFree((unint64_t)v192, v124, v125, v126, v127, v128, v129, v130);
  }
  v197 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v36, 0xFF02uLL, 0, v127, v128, v129, v130);
  if (HIBYTE(word_1ECF4C700))
  {
    v213 = a9;
    *(_QWORD *)v260 = "ArrayFill";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v214 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v214;
      }
      while (v214 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)v260, " ");
    WTF::dataLog<unsigned int>(&v239);
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v246);
    if (v247 != 1 && v247 != 4)
    {
      LODWORD(v258) = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v246, v247, v215, v216, v217, v218, v219);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v258);
    }
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v244);
    a9 = v213;
    if (v245 != 1 && v245 != 4)
    {
      LODWORD(v258) = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v244, v245, v220, v221, v222, v223, v224);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v258);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a1, 0, &v242, (uint64_t *)&v240);
  }
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(_QWORD *)(a1 + 8), 0, (v197 >> 8), v193, v194, v195, v196, (uint64_t)&v225, v198);
  *(_DWORD *)v260 = v225;
  v204 = v226;
  *(_QWORD *)&v260[4] = v226;
  if (v225 != -1)
  {
    v205 = (_QWORD *)(a1 + 2000);
    v206 = *(unsigned int *)(a1 + 2012);
    if ((_DWORD)v206 == *(_DWORD *)(a1 + 2008))
    {
      v207 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v205, (void *)(v206 + 1), (unint64_t)v260, v199, v200, v201, v202, v203);
      v208 = (_DWORD *)(*(_QWORD *)(a1 + 2000) + 12 * *(unsigned int *)(a1 + 2012));
      *v208 = *(_DWORD *)v207;
      v209 = v208 + 1;
      v204 = *(_QWORD *)(v207 + 4);
    }
    else
    {
      v210 = (_DWORD *)(*v205 + 12 * v206);
      *v210 = v225;
      v209 = v210 + 1;
    }
    *v209 = v204;
    ++*(_DWORD *)(a1 + 2012);
  }
  v211 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v36, 65282, v199, v200, v201, v202, v203);
  v212 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v36 + 16;
  if (*(_DWORD *)(a1 + 1280) < v212)
    *(_DWORD *)(a1 + 1280) = v212;
  if ((v211 & 7) != 1 || ((-8 * v212) ^ v211) >= 8)
    JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v36, 65282, v211);
LABEL_115:
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitStructPayloadSet(JSC::Wasm::BBQJITImpl::BBQJIT *this, JSC::ARM64LogicalImmediate *a2, const char *a3, uint64_t a4, JSC::ARM64LogicalImmediate *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ARM64LogicalImmediate *v8;
  JSC::Wasm::BBQJITImpl::BBQJIT *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 IfNecessary;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  JSC::ARM64LogicalImmediate *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  signed int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int8x16_t *v53;
  signed __int8 v54;
  unint64_t v55;
  uint64_t v56;
  __int16 v57;
  __int128 v58;

  v14 = *(_QWORD *)a3;
  v15 = *(unsigned int *)(*(_QWORD *)a3 + 32 * *((unsigned int *)a3 + 2) + 4 * a4);
  if ((v15 & 0x80000000) != 0)
  {
    a2 = (JSC::ARM64LogicalImmediate *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/wasm/WasmBBQJIT64.cpp";
    a3 = "void JSC::Wasm::BBQJITImpl::BBQJIT::emitStructPayloadSet(GPRReg, const StructType &, uint32_t, Value)";
    a4 = 454;
    __break(0xC471u);
    goto LABEL_80;
  }
  v10 = (uint64_t *)a6;
  v8 = a5;
  v12 = a3;
  v11 = a2;
  v9 = this;
  v13 = a4;
  v14 += 32 * a4;
  v16 = *(_BYTE *)v14;
  LODWORD(v14) = *(_DWORD *)(v14 + 16);
  if ((_DWORD)v14)
    v17 = -1;
  else
    v17 = v16;
  if (v17 - 192 <= 0x33)
  {
    if (((1 << (v17 + 64)) & 0xFFC19C001C000) != 0)
      goto LABEL_81;
    if (v17 == 192)
    {
      __break(0xC471u);
      JUMPOUT(0x198F7BD38);
    }
  }
  while (2)
  {
    if (v10 == 4)
    {
      IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v9, (uint64_t)v8, (uint64_t)v10, a4, (uint64_t)a5, a6, a7, a8);
LABEL_16:
      switch(v17)
      {
        case 0xFBu:
          JSC::MacroAssemblerARM64::storeVector(*((_QWORD *)v9 + 1), (IfNecessary >> 8), v11 | (unint64_t)(v15 << 32), v22, v23, v24, v25, v26);
          break;
        case 0xFCu:
          JSC::MacroAssemblerARM64::storeDouble(*((_QWORD *)v9 + 1), (IfNecessary >> 8), v11 | (unint64_t)(v15 << 32), v22, v23, v24, v25, v26);
          break;
        case 0xFDu:
          JSC::MacroAssemblerARM64::storeFloat(*((_QWORD *)v9 + 1), (IfNecessary >> 8), v11 | (unint64_t)(v15 << 32), v22, v23, v24, v25, v26);
          break;
        case 0xFEu:
          JSC::MacroAssemblerARM64::store64(*((_QWORD *)v9 + 1), (IfNecessary >> 8), v11 | (unint64_t)(v15 << 32), v22, v23, v24, v25, v26);
          break;
        case 0xFFu:
          v27 = (unsigned __int8 *)(*(_QWORD *)v12 + 32 * v13);
          if (*((_DWORD *)v27 + 4) == 1)
          {
            v28 = *v27;
            if (v28 == 247)
            {
              JSC::MacroAssemblerARM64::store16(*((_QWORD *)v9 + 1), (IfNecessary >> 8), v11 | (unint64_t)(v15 << 32), v22, v23, v24, v25, v26);
            }
            else if (v28 == 248)
            {
              JSC::MacroAssemblerARM64::store8(*((_QWORD *)v9 + 1), (IfNecessary >> 8), v11 | (unint64_t)(v15 << 32), v22, v23, v24, v25, v26);
            }
          }
          else
          {
            JSC::MacroAssemblerARM64::store32(*((_QWORD *)v9 + 1), (IfNecessary >> 8), v11 | (unint64_t)(v15 << 32), v22, v23, v24, v25, v26);
          }
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F7BD68);
      }
      v41 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)v9, (uint64_t)v8, (uint64_t)v10, v22, v23, v24, v25, v26);
      if (v10 == 2)
      {
        v42 = ((*((_DWORD *)v9 + 322) + 15) & 0xFFFFFFF0) + 16 * (_DWORD)v8 + 16;
        if (*((_DWORD *)v9 + 320) < v42)
          *((_DWORD *)v9 + 320) = v42;
        if ((v41 & 7) != 1 || ((-8 * v42) ^ v41) >= 8)
          JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)v9, (uint64_t)v8, (uint64_t)v10, v41);
      }
      return;
    }
    if (v10 != 1)
    {
      IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary((uint64_t)v9, (uint64_t)v8, (unint64_t)v10, a4, (uint64_t)a5, a6, a7, a8);
      goto LABEL_16;
    }
    switch(v17)
    {
      case 0xFCu:
      case 0xFEu:
        v18 = *((_QWORD *)v9 + 1);
        if (v8)
        {
          if (!*(_BYTE *)(v18 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x198F7BCCCLL);
          }
          JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)v18, (uint64_t)v8, v18 + 264, a4, (uint64_t)a5, a6, a7, a8);
          v19 = v18;
          v20 = 16;
        }
        else
        {
          v19 = v18;
          v20 = 63;
        }
        JSC::MacroAssemblerARM64::store64(v19, v20, v11 | (unint64_t)(v15 << 32), a4, (uint64_t)a5, a6, a7, a8);
        return;
      case 0xFDu:
        v29 = *((_QWORD *)v9 + 1);
        v30 = v11 | (unint64_t)(v15 << 32);
        v31 = (JSC::ARM64LogicalImmediate *)v8;
        if (!(_DWORD)v8)
          goto LABEL_40;
        if (!*(_BYTE *)(v29 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x198F7B8B8);
        }
        goto LABEL_39;
      case 0xFFu:
        if ((_DWORD)v14 != 1)
        {
          v29 = *((_QWORD *)v9 + 1);
          v30 = v11 | (unint64_t)(v15 << 32);
          v31 = (JSC::ARM64LogicalImmediate *)v8;
          if ((_DWORD)v8)
          {
            if (!*(_BYTE *)(v29 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x198F7BD18);
            }
LABEL_39:
            JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v29, v31, v29 + 264, a4, (uint64_t)a5, a6, a7, a8);
            v39 = v29;
            v40 = 16;
          }
          else
          {
LABEL_40:
            v39 = v29;
            v40 = 63;
          }
          JSC::MacroAssemblerARM64::store32(v39, v40, v30, a4, (uint64_t)a5, a6, a7, a8);
          return;
        }
        v55 = 0;
        v56 = 0;
        v53 = (int8x16_t *)v9;
        v57 = 0;
        v32 = *((_QWORD *)v9 + 77);
        if (v32)
          v33 = __clz(__rbit64(v32));
        else
          v33 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(v9, a2, (unint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
        v54 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v53, v33);
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst((uint64_t)v9, v8, (unint64_t)v10, ((unint64_t)v54 << 8) | 2, v34, v35, v36, v37);
        v38 = *(unsigned __int8 *)(*(_QWORD *)v12 + 32 * v13);
        if (v38 == 247)
        {
          JSC::MacroAssemblerARM64::store16(*((_QWORD *)v9 + 1), v54, v11 | (unint64_t)(v15 << 32), a4, (uint64_t)a5, a6, a7, a8);
        }
        else if (v38 == 248)
        {
          JSC::MacroAssemblerARM64::store8(*((_QWORD *)v9 + 1), v54, v11 | (unint64_t)(v15 << 32), a4, (uint64_t)a5, a6, a7, a8);
        }
        v10 = g_config;
        if ((_BYTE)v57)
          goto LABEL_59;
        LODWORD(v14) = 1;
        LOBYTE(v57) = 1;
        v8 = (JSC::ARM64LogicalImmediate *)(v54 & 0x7F);
        if (v8 >= 0x40)
        {
LABEL_80:
          __break(1u);
LABEL_81:
          v17 = -2;
          continue;
        }
        v43 = 1 << (char)v8;
        if ((v53[40].i64[1] & (1 << (char)v8)) != 0)
        {
          v44 = v54;
          if (v53[21].u32[1] <= (unint64_t)v54)
          {
            __break(0xC471u);
            JUMPOUT(0x198F7BD90);
          }
          v45 = v53[20].i64[1] + 4 * v54;
          v53[62] = vandq_s8(v53[62], (int8x16_t)vdupq_n_s64(~v43));
          if ((_BYTE)word_1ECF4C700)
          {
            v58 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v44];
            WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v58, "\n");
          }
          if ((v55 & v43) == 0 || (*(_WORD *)(v45 + 1) & 7) == 3)
          {
            *(_DWORD *)v45 = 0;
            v53[38].i64[1] |= 1 << (char)v8;
          }
        }
LABEL_59:
        if (!HIBYTE(v57))
        {
          HIBYTE(v57) = 1;
          v46 = v55;
          if (v55)
          {
            v47 = __clz(__rbit64(v55));
            do
            {
              if (v47 > 0x1Fu)
              {
                JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v53, (char)(v47 - 32));
              }
              else
              {
                v48 = 1 << v47;
                if ((v53[40].i64[1] & (1 << v47)) != 0)
                {
                  if (v47 >= v53[21].u32[1])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198F7BD98);
                  }
                  v49 = v53[20].i64[1];
                  v53[62] = vandq_s8(v53[62], (int8x16_t)vdupq_n_s64(~v48));
                  if ((_BYTE)word_1ECF4C700)
                  {
                    v58 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v47];
                    v52 = v49;
                    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v58, "\n");
                    v49 = v52;
                    v46 = v55;
                  }
                  v50 = v49 + 4 * v47;
                  if ((v46 & v48) == 0 || (*(_WORD *)(v50 + 1) & 7) == 3)
                  {
                    *(_DWORD *)v50 = 0;
                    v53[38].i64[1] |= v48;
                  }
                }
              }
              if (v47 > 0x3E)
                break;
              v46 = v55;
              if (!v55)
                break;
              v51 = __clz(__rbit64(v55 >> ((v47 + 1) & 0x3F))) + (((_BYTE)v47 + 1) & 0x3F);
              v47 = v51 >= 0x40 ? 64 : v51;
            }
            while (v51 < 0x40);
          }
        }
        return;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F7BD88);
    }
  }
}

void JSC::MacroAssembler::store64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  v9 = a1;
  if (!a2)
  {
    v10 = 63;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 212))
  {
    JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, a2, a1 + 264, a4, a5, a6, a7, a8);
    a1 = v9;
    v10 = 16;
LABEL_5:
    JSC::MacroAssemblerARM64::store64(a1, v10, a3, a4, a5, a6, a7, a8);
    return;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addStructNewDefault(JSC::Wasm::BBQJITImpl::BBQJIT *this@<X0>, JSC::Wasm::BBQJITImpl::BBQJIT::Value *a2@<X2>, unsigned int a3@<W1>, unint64_t a4@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v13;
  const JSC::Wasm::Type *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::Wasm::TypeDefinition *v20;
  int v21;
  const char *v22;
  __int16 v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  _QWORD *v39;
  _DWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t i;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  WTF *v55;
  unsigned int v57;
  unsigned int *v58;
  WTF *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t CachedUnrolling;
  uint64_t v64;
  uint64_t v65;
  char v66;
  const JSC::Wasm::TypeDefinition *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  __int128 v74;
  WTF *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  _BYTE v81[24];

  v80 = a3;
  v7 = a3;
  v75 = (WTF *)&v77;
  v77 = xmmword_19919F700;
  v78 = a3;
  v79 = 65281;
  v76 = 0x200000008;
  v8 = *((_QWORD *)this + 11);
  v9 = *(_DWORD *)(v8 + 596);
  if (!v9)
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  v13 = *(_QWORD *)(v8 + 584) + 1232 * v9;
  LODWORD(v8) = *(_DWORD *)(v8 + 68) + *(_DWORD *)(v13 - 32);
  if (*(_DWORD *)(v13 - 160) == 5)
    v8 = (v8 + 1);
  else
    v8 = v8;
  *(_QWORD *)a2 = v8;
  *((_WORD *)a2 + 4) = -510;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCCall<long long (*)(JSC::Wasm::Instance *,unsigned int),8ul>((uint64_t)this, (uint64_t)operationWasmStructNewEmpty, (uint64_t)&v75, (uint64_t)a2);
  v18 = *((_QWORD *)this + 6);
  if (*(_DWORD *)(v18 + 100) <= a3)
  {
    __break(0xC471u);
LABEL_47:
    JUMPOUT(0x198F7C1ECLL);
  }
  v73 = (_BYTE *)a4;
  v19 = *(_QWORD *)(*(_QWORD *)(v18 + 88) + 8 * v7);
  if (*(_DWORD *)(v19 + 32) == 4)
  {
    v58 = *(unsigned int **)(v19 + 8);
    v59 = *(WTF **)v58;
    v20 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v58 + 8) + 8 * v58[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v20))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v19, v60, v61, v62, (uint64_t)v14, v15, v16, v17);
      if (v66)
      {
        v20 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v20 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v20, v59, v64, v65, v14, v15, v16, v17);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v19, v20, v67, v68, v69, v70, v71, v72);
      }
    }
  }
  else
  {
    v20 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v18 + 88) + 8 * v7);
  }
  v21 = *((_DWORD *)v20 + 8);
  if (v21 == 5)
  {
    v20 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v20 + 1);
    v21 = *((_DWORD *)v20 + 8);
  }
  if (v21 == 1)
    v22 = (char *)v20 + 8;
  else
    v22 = 0;
  v23 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint((uint64_t)this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0, (uint64_t)v14, v15, v16, v17);
  v24 = HIBYTE(v23);
  JSC::MacroAssemblerARM64::branch64(*((_QWORD *)this + 1), 0, (v23 >> 8), 2, v25, v26, v27, v28, (uint64_t)v81);
  LODWORD(v74) = *(_DWORD *)v81;
  v34 = *(_QWORD *)&v81[4];
  *(_QWORD *)((char *)&v74 + 4) = *(_QWORD *)&v81[4];
  if (*(_DWORD *)v81 != -1)
  {
    v35 = (_QWORD *)((char *)this + 2160);
    v36 = *((unsigned int *)this + 543);
    if ((_DWORD)v36 == *((_DWORD *)this + 542))
    {
      v37 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, (void *)(v36 + 1), (unint64_t)&v74, v29, v30, v31, v32, v33);
      v38 = (_DWORD *)(*((_QWORD *)this + 270) + 12 * *((unsigned int *)this + 543));
      *v38 = *(_DWORD *)v37;
      v39 = v38 + 1;
      v34 = *(_QWORD *)(v37 + 4);
    }
    else
    {
      v40 = (_DWORD *)(*v35 + 12 * v36);
      *v40 = *(_DWORD *)v81;
      v39 = v40 + 1;
    }
    *v39 = v34;
    ++*((_DWORD *)this + 543);
  }
  JSC::MacroAssemblerARM64::load64(*((_QWORD *)this + 1), v24 | 0x2000000000, 8, v29, v30, v31, v32, v33);
  if (*((_DWORD *)v22 + 2))
  {
    v48 = 0;
    for (i = 0; i < *((unsigned int *)v22 + 2); ++i)
    {
      v50 = (unsigned __int8 *)(*(_QWORD *)v22 + v48);
      if (!*((_DWORD *)v50 + 4))
      {
        v53 = *v50;
        if (BYTE1(dword_1ECF4C7B0))
          v54 = 29;
        else
          v54 = 17;
        if ((v54 + v53) <= 1u)
        {
          v7 = v7 & 0xFFFFFFFFFFFF0000 | 0xFE01;
          v51 = 2;
          v52 = v7;
          goto LABEL_29;
        }
        if (v53 == 251)
        {
          JSC::Wasm::BBQJITImpl::BBQJIT::materializeVectorConstant((uint64_t)this, 0, 0, 0x1003uLL, v44, v45, v46, v47);
          v4 = v4 & 0xFFFFFFFFFFFF0000 | 0xFB04;
          v5 = v5 & 0xFFFFFFFF00000000 | 0x1003;
          v51 = v5;
          v52 = v4;
          goto LABEL_29;
        }
      }
      v51 = 0;
      a4 = a4 & 0xFFFFFFFFFFFF0000 | 0xFE01;
      v52 = a4;
LABEL_29:
      JSC::Wasm::BBQJITImpl::BBQJIT::emitStructPayloadSet(this, (JSC::ARM64LogicalImmediate *)8, v22, i, (JSC::ARM64LogicalImmediate *)v51, v52, v46, v47);
      v48 += 32;
    }
  }
  if (HIBYTE(word_1ECF4C700))
  {
    v74 = *(_OWORD *)a2;
    *(_QWORD *)v81 = "StructNewDefault";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)this)
    {
      v57 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v57;
      }
      while (v57 < *(_DWORD *)this);
    }
    WTF::dataLog<char const*,char [2]>((const char **)v81, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)this, 1, &v80, (uint64_t *)&v74);
  }
  *v73 = 0;
  v73[8] = 0;
  v55 = v75;
  if (&v77 != (__int128 *)v75 && v75 != 0)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    WTF::fastFree((unint64_t)v55, v41, v42, v43, v44, v45, v46, v47);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::materializeVectorConstant(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  JSC::AssemblerBuffer *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;

  v8 = a4 >> 8;
  if (!(a2 | a3))
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = *(_DWORD *)(v17 + 200);
    v16 = (unsigned int *)(v17 + 200);
    v11 = v18;
    v15 = (JSC::AssemblerBuffer *)(v16 - 36);
    v19 = v18 + 4;
    v20 = *(v16 - 2);
    goto LABEL_7;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (a2 != -1 || a3 != -1)
  {
    if (a2 | a3)
    {
      if (!*(_BYTE *)(v10 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198F7C410);
      }
      *(_DWORD *)(*(_QWORD *)(v10 + 264) + 208) &= ~*(_DWORD *)(v10 + 288);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, a2, *(char *)(v10 + 272), a4, a5, a6, a7, a8);
      if (!*(_BYTE *)(v10 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198F7C430);
      }
      v16 = (unsigned int *)(v10 + 200);
      v32 = *(_DWORD *)(v10 + 200);
      *(_DWORD *)(*(_QWORD *)(v10 + 264) + 208) &= ~*(_DWORD *)(v10 + 288);
      v33 = *(char *)(v10 + 272);
      v15 = (JSC::AssemblerBuffer *)(v10 + 56);
      if (v32 + 4 > *(_DWORD *)(v10 + 192))
      {
        v42 = *(char *)(v10 + 272);
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), v25, v26, v27, v28, v29, v30, v31);
        v33 = v42;
        v32 = *v16;
      }
      *(_DWORD *)(*(_QWORD *)(v10 + 56) + v32) = (char)v8 | (32 * v33) | 0x4E080C00;
      *(_DWORD *)(v10 + 200) += 4;
      if (!*(_BYTE *)(v10 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198F7C468);
      }
      *(_DWORD *)(*(_QWORD *)(v10 + 264) + 208) &= ~*(_DWORD *)(v10 + 288);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, a3, *(char *)(v10 + 272), v27, v28, v29, v30, v31);
      if (!*(_BYTE *)(v10 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x198F7C488);
      }
      *(_DWORD *)(*(_QWORD *)(v10 + 264) + 208) &= ~*(_DWORD *)(v10 + 288);
      v41 = *(char *)(v10 + 272);
      v11 = *(_DWORD *)(v10 + 200);
      if (v11 + 4 > *(_DWORD *)(v10 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), v34, v35, v36, v37, v38, v39, v40);
        v11 = *v16;
      }
      v21 = (char)v8 | (32 * v41);
      v22 = 1310202880;
      goto LABEL_10;
    }
    v24 = *(_DWORD *)(v10 + 200);
    v23 = (unsigned int *)(v10 + 200);
    v11 = v24;
    v15 = (JSC::AssemblerBuffer *)(v23 - 36);
    v16 = v23;
    v19 = v24 + 4;
    v20 = *(v23 - 2);
LABEL_7:
    if (v19 > v20)
    {
      JSC::AssemblerBuffer::outOfLineGrow(v15, a2, a3, a4, a5, a6, a7, a8);
      v11 = *v16;
    }
    v21 = (char)v8;
    v22 = 1862329344;
LABEL_10:
    v14 = v21 | v22;
    goto LABEL_11;
  }
  v13 = *(_DWORD *)(v10 + 200);
  v12 = (unsigned int *)(v10 + 200);
  v11 = v13;
  v14 = (SBYTE1(a4) << 16) | (32 * SBYTE1(a4)) | SBYTE1(a4) | 0x6EA08C00;
  v15 = (JSC::AssemblerBuffer *)(v12 - 36);
  v16 = v12;
  if (v13 + 4 > *(v12 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 - 36), -1, -1, a4, a5, a6, a7, a8);
    v11 = *v12;
  }
LABEL_11:
  *(_DWORD *)(*(_QWORD *)v15 + v11) = v14;
  *v16 += 4;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addStructNew(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v13;
  int v14;
  const JSC::Wasm::Type *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::Wasm::TypeDefinition *v21;
  int v22;
  const char *v23;
  __int16 v24;
  unsigned __int8 v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  _QWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char *v51;
  BOOL v52;
  char v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  WTF *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int *v103;
  WTF *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t CachedUnrolling;
  uint64_t v109;
  uint64_t v110;
  char v111;
  const JSC::Wasm::TypeDefinition *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t *v119;
  __int128 v120;
  uint64_t v121;
  unint64_t v122;
  WTF *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  _BYTE v129[12];
  int v130[3];

  v128 = a2;
  v6 = a2;
  v123 = (WTF *)&v125;
  v125 = xmmword_19919F700;
  v126 = a2;
  v127 = 65281;
  v124 = 0x200000008;
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_DWORD *)(v7 + 596);
  if (!v8)
  {
    __break(0xC471u);
    goto LABEL_73;
  }
  v13 = *(_QWORD *)(v7 + 584) + 1232 * v8;
  if (*(_DWORD *)(v13 - 160) == 5)
    v14 = *(_DWORD *)(v13 - 32) + 1;
  else
    v14 = *(_DWORD *)(v13 - 32);
  v121 = (v14 + *(_DWORD *)(v7 + 68) + *(_DWORD *)(a3 + 12));
  v122 = 65026;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCCall<long long (*)(JSC::Wasm::Instance *,unsigned int),8ul>(a1, (uint64_t)operationWasmStructNewEmpty, (uint64_t)&v123, (uint64_t)&v121);
  v19 = *(_QWORD *)(a1 + 48);
  if (*(_DWORD *)(v19 + 100) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198F7CA40);
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v19 + 88) + 8 * v6);
  if (*(_DWORD *)(v20 + 32) == 4)
  {
    v103 = *(unsigned int **)(v20 + 8);
    v104 = *(WTF **)v103;
    v21 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v103 + 8) + 8 * v103[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v21))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v20, v105, v106, v107, (uint64_t)v15, v16, v17, v18);
      if (v111)
      {
        v21 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v21 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v21, v104, v109, v110, v15, v16, v17, v18);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v20, v21, v112, v113, v114, v115, v116, v117);
      }
    }
  }
  else
  {
    v21 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v19 + 88) + 8 * v6);
  }
  v22 = *((_DWORD *)v21 + 8);
  if (v22 == 5)
  {
    v21 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v21 + 1);
    v22 = *((_DWORD *)v21 + 8);
  }
  if (v22 == 1)
    v23 = (char *)v21 + 8;
  else
    v23 = 0;
  v24 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v121, v122, 0, (uint64_t)v15, v16, v17, v18);
  v25 = HIBYTE(v24);
  v26 = v24 >> 8;
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, v26, 2, v27, v28, v29, v30, (uint64_t)v129);
  LODWORD(v120) = *(_DWORD *)v129;
  v36 = *(_QWORD *)&v129[4];
  *(_QWORD *)((char *)&v120 + 4) = *(_QWORD *)&v129[4];
  if (*(_DWORD *)v129 != -1)
  {
    v37 = (_QWORD *)(a1 + 2160);
    v38 = *(unsigned int *)(a1 + 2172);
    if ((_DWORD)v38 == *(_DWORD *)(a1 + 2168))
    {
      v39 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, (void *)(v38 + 1), (unint64_t)&v120, v31, v32, v33, v34, v35);
      v40 = (_DWORD *)(*(_QWORD *)(a1 + 2160) + 12 * *(unsigned int *)(a1 + 2172));
      *v40 = *(_DWORD *)v39;
      v41 = v40 + 1;
      v36 = *(_QWORD *)(v39 + 4);
    }
    else
    {
      v42 = (_DWORD *)(*v37 + 12 * v38);
      *v42 = *(_DWORD *)v129;
      v41 = v42 + 1;
    }
    *v41 = v36;
    ++*(_DWORD *)(a1 + 2172);
  }
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v25 | 0x2000000000, 8, v31, v32, v33, v34, v35);
  if (*(_DWORD *)(a3 + 12))
  {
    v118 = v26;
    v119 = a4;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    do
    {
      v51 = (char *)(*(_QWORD *)v23 + v48);
      if (*((_DWORD *)v51 + 4))
      {
        v52 = 0;
      }
      else
      {
        v53 = *v51;
        if (BYTE1(dword_1ECF4C7B0))
          v54 = 29;
        else
          v54 = 17;
        v52 = (v54 + v53) < 2u;
      }
      v50 |= v52;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitStructPayloadSet((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, (JSC::ARM64LogicalImmediate *)8, v23, v49++, *(JSC::ARM64LogicalImmediate **)(*(_QWORD *)a3 + v47), *(_QWORD *)(*(_QWORD *)a3 + v47 + 8), v45, v46);
      v48 += 32;
      v47 += 16;
    }
    while (v49 < *(unsigned int *)(a3 + 12));
    a4 = v119;
    if ((v50 & 1) != 0)
      JSC::Wasm::BBQJITImpl::BBQJIT::emitWriteBarrier((uint64_t *)a1, (JSC::ARM64LogicalImmediate *)v118, v55, v56, v43, v44, v45, v46);
  }
  v57 = *(_QWORD *)(a1 + 88);
  v58 = *(_DWORD *)(v57 + 596);
  if (!v58)
  {
    __break(0xC471u);
LABEL_73:
    JUMPOUT(0x198F7CA38);
  }
  v59 = *(_QWORD *)(v57 + 584) + 1232 * v58;
  v60 = *(_DWORD *)(v57 + 68) + *(_DWORD *)(v59 - 32);
  if (*(_DWORD *)(v59 - 160) == 5)
    v61 = v60 + 1;
  else
    v61 = v60;
  *a4 = v61;
  *((_WORD *)a4 + 4) = -510;
  v62 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v61, a4[1], 0, v43, v44, v45, v46);
  JSC::Wasm::BBQJITImpl::BBQJIT::emitMove(a1, (JSC::ARM64LogicalImmediate *)v121, v122, v62, v63, v64, v65, v66);
  if (*(_DWORD *)(a3 + 12))
  {
    v74 = v121;
    v75 = v122;
    v76 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v121, v122, v69, v70, v71, v72, v73);
    if (v75 == 2)
    {
      v77 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v74 + 16;
      if (*(_DWORD *)(a1 + 1280) < v77)
        *(_DWORD *)(a1 + 1280) = v77;
      if ((v76 & 7) != 1 || ((-8 * v77) ^ v76) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v74, v75, v76);
    }
  }
  if (HIBYTE(word_1ECF4C700))
  {
    v120 = *(_OWORD *)a4;
    *(_QWORD *)v129 = "StructNew";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v79 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v79;
      }
      while (v79 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)v129, " ");
    WTF::dataLog<unsigned int>(&v128);
    v80 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v80)
    {
      v81 = *(uint64_t **)a3;
      WTF::dataLog<char [16]>(", ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v81);
      v87 = *((unsigned __int8 *)v81 + 8);
      if (v87 != 1 && v87 != 4)
      {
        v130[0] = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *v81, v81[1], v82, v83, v84, v85, v86);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", v130);
      }
      if ((_DWORD)v80 != 1)
      {
        v89 = v81 + 2;
        v90 = 16 * v80 - 16;
        do
        {
          WTF::dataLog<char [16]>(", ");
          WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v89);
          v96 = *((unsigned __int8 *)v89 + 8);
          if (v96 != 1 && v96 != 4)
          {
            v130[0] = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *v89, v89[1], v91, v92, v93, v94, v95);
            WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", v130);
          }
          v89 += 2;
          v90 -= 16;
        }
        while (v90);
      }
    }
    WTF::dataLog<char [16]>(" ");
    WTF::dataLog<char [16]>("=> ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v120);
    if (BYTE8(v120) != 1 && BYTE8(v120) != 4)
    {
      v130[0] = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v120, *((uint64_t *)&v120 + 1), v98, v99, v100, v101, v102);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", v130);
    }
    WTF::dataLog<char [16]>("\n");
  }
  *a5 = 0;
  a5[8] = 0;
  v78 = v123;
  if (&v125 != (__int128 *)v123)
  {
    if (v123)
    {
      v123 = 0;
      LODWORD(v124) = 0;
      WTF::fastFree((unint64_t)v78, v67, v68, v69, v70, v71, v72, v73);
    }
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addStructGet(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned __int8 *v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 IfNecessary;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  _QWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned __int8 *v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unsigned __int8 v76;
  unsigned int v77;
  unsigned int v78;
  _DWORD *v79;
  unsigned int v80;
  int v81;
  _DWORD *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[12];
  int v97;

  v94 = a3;
  v95 = a4;
  v93 = a6;
  v12 = (unsigned __int8 *)(*(_QWORD *)a5 + 32 * a6);
  if (*((_DWORD *)v12 + 4))
    v13 = -1;
  else
    v13 = *v12;
  if (a4 == 1)
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)0x1F, a3, a4, a5, a6, a7, a8);
    if (v13 - 192 <= 0x33)
    {
      if (((1 << (v13 + 64)) & 0xFFC19C001C000) != 0)
      {
        v13 = 254;
      }
      else if (v13 == 192)
      {
        __break(0xC471u);
        JUMPOUT(0x198F7D1DCLL);
      }
    }
    *(_QWORD *)a7 = 0;
    *(_WORD *)(a7 + 8) = (v13 << 8) | 1;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_QWORD *)v96 = "StructGet";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>((const char **)v96, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v94);
      if (v95 != 1 && v95 != 4)
      {
        LODWORD(v92) = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v94, v95, v15, v16, v17, v18, v19);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v92);
      }
      WTF::dataLog<char [16]>(", ");
      WTF::dataLog<unsigned int>(&v93);
      *(_QWORD *)&v92 = "Exception";
      WTF::dataLog<char [16]>(" ");
      WTF::dataLog<char const*>((const char **)&v92);
      WTF::dataLog<char [16]>("\n");
    }
    goto LABEL_48;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a3, a4, a4, a5, a6, a7, a8);
  v24 = HIBYTE(IfNecessary);
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, (IfNecessary >> 8), 2, v25, v26, v27, v28, (uint64_t)v96);
  LODWORD(v92) = *(_DWORD *)v96;
  v34 = *(_QWORD *)&v96[4];
  *(_QWORD *)((char *)&v92 + 4) = *(_QWORD *)&v96[4];
  if (*(_DWORD *)v96 != -1)
  {
    v35 = (_QWORD *)(a1 + 2600);
    v36 = *(unsigned int *)(a1 + 2612);
    if ((_DWORD)v36 == *(_DWORD *)(a1 + 2608))
    {
      v37 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, (void *)(v36 + 1), (unint64_t)&v92, v29, v30, v31, v32, v33);
      v38 = (_DWORD *)(*(_QWORD *)(a1 + 2600) + 12 * *(unsigned int *)(a1 + 2612));
      *v38 = *(_DWORD *)v37;
      v39 = v38 + 1;
      v34 = *(_QWORD *)(v37 + 4);
    }
    else
    {
      v40 = (_DWORD *)(*v35 + 12 * v36);
      *v40 = *(_DWORD *)v96;
      v39 = v40 + 1;
    }
    *v39 = v34;
    ++*(_DWORD *)(a1 + 2612);
  }
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v24 | 0x2000000000, 8, v29, v30, v31, v32, v33);
  v46 = *(unsigned int *)(*(_QWORD *)a5 + 32 * *(unsigned int *)(a5 + 8) + 4 * v93);
  if ((v46 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198F7D0E0);
  }
  v47 = v94;
  v48 = v95;
  v49 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v94, v95, v41, v42, v43, v44, v45);
  if (v48 == 2)
  {
    v54 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v47 + 16;
    if (*(_DWORD *)(a1 + 1280) < v54)
      *(_DWORD *)(a1 + 1280) = v54;
    if ((v49 & 7) != 1 || ((-8 * v54) ^ v49) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v47, v48, v49);
  }
  v55 = *(_QWORD *)(a1 + 88);
  v56 = *(_DWORD *)(v55 + 596);
  if (!v56)
  {
    __break(0xC471u);
    JUMPOUT(0x198F7D284);
  }
  v57 = *(_QWORD *)(v55 + 584) + 1232 * v56;
  v58 = *(_DWORD *)(v57 - 32);
  v59 = *(_DWORD *)(v57 - 160);
  v60 = *(_DWORD *)(v55 + 68);
  if (v13 - 192 <= 0x33)
  {
    if (((1 << (v13 + 64)) & 0xFFC19C001C000) != 0)
    {
      v13 = 254;
    }
    else if (v13 == 192)
    {
      __break(0xC471u);
      JUMPOUT(0x198F7D1FCLL);
    }
  }
  v61 = v60 + v58;
  if (v59 == 5)
    v62 = v61 + 1;
  else
    v62 = v61;
  *(_QWORD *)a7 = v62;
  *(_WORD *)(a7 + 8) = (v13 << 8) | 2;
  v70 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v62, *(_QWORD *)(a7 + 8), 0, v50, v51, v52, v53);
  switch(*(_BYTE *)(a7 + 9))
  {
    case 0xFB:
      JSC::MacroAssemblerARM64::loadVector(*(_QWORD *)(a1 + 8), (v46 << 32) | 8, ((__int16)v70 >> 8), v65, v66, v67, v68, v69);
      goto LABEL_47;
    case 0xFC:
      JSC::MacroAssemblerARM64::loadDouble(*(_QWORD *)(a1 + 8), (v46 << 32) | 8, ((__int16)v70 >> 8), v65, v66, v67, v68, v69);
      goto LABEL_47;
    case 0xFD:
      JSC::MacroAssemblerARM64::loadFloat(*(_QWORD *)(a1 + 8), (v46 << 32) | 8, ((__int16)v70 >> 8), v65, v66, v67, v68, v69);
      goto LABEL_47;
    case 0xFE:
      JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), (v46 << 32) | 8, ((__int16)v70 >> 8), v65, v66, v67, v68, v69);
      goto LABEL_47;
    case 0xFF:
      v71 = (unsigned __int8 *)(*(_QWORD *)a5 + 32 * v93);
      if (*((_DWORD *)v71 + 4) == 1)
      {
        v72 = *v71;
        if (v72 == 247)
        {
          JSC::MacroAssemblerARM64::load16(*(_QWORD *)(a1 + 8), (v46 << 32) | 8, ((__int16)v70 >> 8), v65, v66, v67, v68, v69);
        }
        else if (v72 == 248)
        {
          JSC::MacroAssemblerARM64::load8(*(_QWORD *)(a1 + 8), (v46 << 32) | 8, ((__int16)v70 >> 8), v65, v66, v67, v68, v69);
        }
        if (a2 == 3)
        {
          v74 = *(_QWORD *)a5 + 32 * v93;
          v75 = *(_DWORD *)(v74 + 16);
          v76 = *(_BYTE *)v74;
          if (v75)
          {
            if (v76 == 248)
            {
              v77 = 24;
            }
            else
            {
              if (v76 != 247)
              {
                __break(0xC471u);
                JUMPOUT(0x198F7D25CLL);
              }
              v77 = 16;
            }
          }
          else
          {
            v77 = 0;
            switch(v76)
            {
              case 0xFBu:
                v77 = 160;
                break;
              case 0xFCu:
              case 0xFEu:
                goto LABEL_65;
              case 0xFDu:
              case 0xFFu:
                break;
              default:
                if (v76 - 227 >= 2)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198F7D27CLL);
                }
LABEL_65:
                v77 = 224;
                break;
            }
          }
          v78 = v70 >> 8;
          v79 = *(_DWORD **)(a1 + 8);
          v80 = v79[50];
          if (v80 + 4 > v79[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v79 + 14), v63, v64, v65, v66, v67, v68, v69);
            v80 = v79[50];
          }
          v81 = (v70 >> 8) & 0x1F;
          *(_DWORD *)(*((_QWORD *)v79 + 7) + v80) = ((-65536 * v77) & 0x180000 | (32 * (BYTE1(v70) & 0x1F)) & 0x9FE0 | (((v77 >> 3) & 3) << 13) | v81) ^ 0x53007C00;
          v79[50] += 4;
          v82 = *(_DWORD **)(a1 + 8);
          v83 = v82[50];
          if (v83 + 4 > v82[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v82 + 14), v63, v64, v65, v66, v67, v68, v69);
            v83 = v82[50];
          }
          *(_DWORD *)(*((_QWORD *)v82 + 7) + v83) = (v77 << 16) & 0x180000 | (32 * (v78 & 0x1F)) | v81 | 0x13007C00;
          v82[50] += 4;
          if (HIBYTE(word_1ECF4C700))
          {
            v92 = *(_OWORD *)a7;
            *(_QWORD *)v96 = "StructGetS";
            WTF::dataLog<char [16]>("BBQ\t");
            if (*(_DWORD *)a1)
            {
              v84 = 0;
              do
              {
                WTF::dataLog<char [16]>(" ");
                ++v84;
              }
              while (v84 < *(_DWORD *)a1);
            }
            goto LABEL_79;
          }
        }
        else
        {
          if (a2 != 4)
          {
            __break(0xC471u);
            JUMPOUT(0x198F7D23CLL);
          }
          if (HIBYTE(word_1ECF4C700))
          {
            v92 = *(_OWORD *)a7;
            *(_QWORD *)v96 = "StructGetU";
            WTF::dataLog<char [16]>("BBQ\t");
            if (*(_DWORD *)a1)
            {
              v73 = 0;
              do
              {
                WTF::dataLog<char [16]>(" ");
                ++v73;
              }
              while (v73 < *(_DWORD *)a1);
            }
            goto LABEL_79;
          }
        }
      }
      else
      {
        JSC::MacroAssemblerARM64::load32(*(_QWORD *)(a1 + 8), (v46 << 32) | 8, ((__int16)v70 >> 8), v65, v66, v67, v68, v69);
LABEL_47:
        if (HIBYTE(word_1ECF4C700))
        {
          v92 = *(_OWORD *)a7;
          *(_QWORD *)v96 = "StructGet";
          WTF::dataLog<char [16]>("BBQ\t");
          if (*(_DWORD *)a1)
          {
            v85 = 0;
            do
            {
              WTF::dataLog<char [16]>(" ");
              ++v85;
            }
            while (v85 < *(_DWORD *)a1);
          }
LABEL_79:
          WTF::dataLog<char const*,char [2]>((const char **)v96, " ");
          WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v94);
          if (v95 != 1 && v95 != 4)
          {
            v97 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v94, v95, v86, v87, v88, v89, v90);
            WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v97);
          }
          JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v93, (uint64_t *)&v92);
        }
      }
LABEL_48:
      *a9 = 0;
      a9[8] = 0;
      return;
    default:
      __break(0xC471u);
      JUMPOUT(0x198F7D21CLL);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addStructSet(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, uint64_t a5@<X4>, JSC::ARM64LogicalImmediate *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 IfNecessary;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  _QWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v63;
  JSC::ARM64LogicalImmediate *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[12];
  _BYTE v69[12];

  v66 = a2;
  v67 = a3;
  v64 = a6;
  v65 = a7;
  v63 = a5;
  if (a3 == 1)
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::emitThrowException(a1, (JSC::ARM64LogicalImmediate *)0x20, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_QWORD *)v68 = "StructSet";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v11 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v11;
        }
        while (v11 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>((const char **)v68, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v66);
      if (v67 != 1 && v67 != 4)
      {
        *(_DWORD *)v69 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v66, v67, v12, v13, v14, v15, v16);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)v69);
      }
      WTF::dataLog<char [16]>(", ");
      WTF::dataLog<unsigned int>(&v63);
      WTF::dataLog<char [16]>(", ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v64);
      if (v65 != 1 && v65 != 4)
      {
        *(_DWORD *)v69 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v64, v65, v18, v19, v20, v21, v22);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)v69);
      }
      *(_QWORD *)v69 = "Exception";
      WTF::dataLog<char [16]>(" ");
      WTF::dataLog<char const*>((const char **)v69);
      WTF::dataLog<char [16]>("\n");
    }
  }
  else
  {
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, (IfNecessary >> 8), 2, v25, v26, v27, v28, (uint64_t)v68);
    *(_DWORD *)v69 = *(_DWORD *)v68;
    v34 = *(_QWORD *)&v68[4];
    *(_QWORD *)&v69[4] = *(_QWORD *)&v68[4];
    if (*(_DWORD *)v68 != -1)
    {
      v35 = (_QWORD *)(a1 + 2640);
      v36 = *(unsigned int *)(a1 + 2652);
      if ((_DWORD)v36 == *(_DWORD *)(a1 + 2648))
      {
        v37 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, (void *)(v36 + 1), (unint64_t)v69, v29, v30, v31, v32, v33);
        v38 = (_DWORD *)(*(_QWORD *)(a1 + 2640) + 12 * *(unsigned int *)(a1 + 2652));
        *v38 = *(_DWORD *)v37;
        v39 = v38 + 1;
        v34 = *(_QWORD *)(v37 + 4);
      }
      else
      {
        v40 = (_DWORD *)(*v35 + 12 * v36);
        *v40 = *(_DWORD *)v68;
        v39 = v40 + 1;
      }
      *v39 = v34;
      ++*(_DWORD *)(a1 + 2652);
    }
    JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), HIBYTE(IfNecessary) | 0x2000000000, 8, v29, v30, v31, v32, v33);
    JSC::Wasm::BBQJITImpl::BBQJIT::emitStructPayloadSet((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, (JSC::ARM64LogicalImmediate *)8, a4, v63, v64, v65, v41, v42);
    v49 = *(_QWORD *)a4 + 32 * v63;
    if (!*(_DWORD *)(v49 + 16))
    {
      v50 = *(_BYTE *)v49;
      v51 = BYTE1(dword_1ECF4C7B0) ? 29 : 17;
      if ((v51 + v50) <= 1u)
        JSC::Wasm::BBQJITImpl::BBQJIT::emitWriteBarrier((uint64_t *)a1, (JSC::ARM64LogicalImmediate *)(IfNecessary >> 8), v43, v44, v45, v46, v47, v48);
    }
    if (HIBYTE(word_1ECF4C700))
    {
      *(_QWORD *)v69 = "StructSet";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v56 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v56;
        }
        while (v56 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>((const char **)v69, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v66);
      if (v67 != 1 && v67 != 4)
      {
        *(_DWORD *)v68 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v66, v67, v57, v58, v59, v60, v61);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)v68);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a1, 0, &v63, (uint64_t *)&v64);
    }
    v52 = v66;
    v53 = v67;
    v54 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v66, v67, v44, v45, v46, v47, v48);
    if (v53 == 2)
    {
      v55 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v52 + 16;
      if (*(_DWORD *)(a1 + 1280) < v55)
        *(_DWORD *)(a1 + 1280) = v55;
      if ((v54 & 7) != 1 || ((-8 * v55) ^ v54) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v52, v53, v54);
    }
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addRefCast(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, __int128 *a6@<X5>, _BYTE *a7@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v12;
  uint64_t v13;
  const JSC::Wasm::Type *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t *v25;
  unsigned __int8 *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unsigned __int8 **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  unsigned int v64;
  uint64_t v65;
  _DWORD **v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v80;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int8x8_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  _DWORD *v99;
  _QWORD *v100;
  _DWORD *v101;
  WTF *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  WTF *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD v131[4];
  unint64_t v132;
  int v133;
  uint64_t *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t *v140[2];
  char v141;
  __int128 v142;
  _QWORD v143[33];

  v143[32] = *MEMORY[0x1E0C80C00];
  v129 = a2;
  v130 = a3;
  v128 = a4;
  v127 = a5;
  v121 = a2;
  v122 = a3;
  v118 = (WTF *)&v120;
  v120 = xmmword_19919F700;
  v123 = a4;
  v124 = 65281;
  v125 = a5;
  v126 = 65281;
  v119 = 0x400000008;
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_DWORD *)(v8 + 596);
  if (!v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198F7DD74);
  }
  v12 = *(_QWORD *)(v8 + 584) + 1232 * v9;
  LODWORD(v8) = *(_DWORD *)(v8 + 68) + *(_DWORD *)(v12 - 32);
  if (*(_DWORD *)(v12 - 160) == 5)
    v8 = (v8 + 1);
  else
    v8 = v8;
  *(_QWORD *)a6 = v8;
  *((_WORD *)a6 + 4) = -510;
  LOBYTE(v142) = -2;
  *((_QWORD *)&v142 + 1) = 0;
  WTF::Vector<JSC::Wasm::Type,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v138, &v142, 1uLL);
  *(_QWORD *)&v142 = v143;
  *((_QWORD *)&v142 + 1) = 16;
  v18 = HIDWORD(v119);
  if (HIDWORD(v119) >= 0x11)
  {
    if (HIDWORD(v119) >> 28)
    {
      __break(0xC471u);
      goto LABEL_90;
    }
    v103 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v119)));
    DWORD2(v142) = HIDWORD(v119);
    *(_QWORD *)&v142 = v103;
    v18 = HIDWORD(v119);
  }
  else if (!HIDWORD(v119))
  {
    goto LABEL_9;
  }
  v19 = HIDWORD(v142);
  v20 = 16 * v18;
  v21 = (unsigned __int8 *)v118 + 9;
  do
  {
    v22 = *v21;
    v21 += 16;
    v23 = (_QWORD *)(v142 + 16 * v19);
    *v23 = v22;
    v23[1] = 0;
    v19 = ++HIDWORD(v142);
    v20 -= 16;
  }
  while (v20);
LABEL_9:
  v24 = atomic_load(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag);
  if (v24 != -1)
  {
    v131[0] = &v141;
    v140[0] = v131;
    std::__call_once(&JSC::Wasm::TypeInformation::singleton(void)::typeInformationFlag, v140, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::TypeInformation::singleton(void)::{lambda(void)#1} &&>>);
  }
  v25 = (uint64_t *)JSC::Wasm::TypeInformation::singleton(void)::theOne;
  v26 = (unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328;
  if (__ldaxr((unsigned __int8 *)JSC::Wasm::TypeInformation::singleton(void)::theOne + 328))
  {
    __clrex();
  }
  else if (!__stxr(1u, v26))
  {
    goto LABEL_15;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v26);
LABEL_15:
  v140[0] = (uint64_t *)&v138;
  v140[1] = (uint64_t *)&v142;
  WTF::HashTable<JSC::Wasm::TypeHash,JSC::Wasm::TypeHash,WTF::IdentityExtractor,WTF::DefaultHash<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>,WTF::HashTraits<JSC::Wasm::TypeHash>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<JSC::Wasm::FunctionParameterTypes>,JSC::Wasm::FunctionParameterTypes const&,JSC::Wasm::FunctionParameterTypes const&>(v25, v140, (uint64_t)v140, v13, v14, v15, v16, v17, (uint64_t)v131);
  v34 = *(unsigned int **)v131[0];
  if (*(_QWORD *)v131[0])
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
  }
  v36 = __ldxr(v26);
  if (v36 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, v26))
LABEL_21:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v26, 0, v28, v29, v30, v31, v32, v33);
  v37 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v37 != -1)
  {
    v131[0] = &v141;
    v140[0] = v131;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, v140, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (v34[8])
    v38 = 0;
  else
    v38 = (unsigned __int8 **)(v34 + 2);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v38, 0, (char *)v131);
  if ((unint64_t)(v137 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F7DD7CLL);
  }
  v46 = (v137 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a1 + 1284) > v46)
    v46 = *(_DWORD *)(a1 + 1284);
  *(_DWORD *)(a1 + 1284) = v46;
  JSC::Wasm::BBQJITImpl::BBQJIT::prepareForExceptions(a1, v39, v40, v41, v42, v43, v44, v45);
  JSC::Wasm::BBQJITImpl::BBQJIT::saveValuesAcrossCallAndPassArguments<8ul>(a1, (uint64_t)&v118, (uint64_t)v131, (uint64_t)v34, v47, v48, v49, v50);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), (uint64_t)operationWasmRefCast, 8, v51, v52, v53, v54, v55);
  v63 = *(_DWORD **)(a1 + 8);
  v63[52] = 0;
  v64 = v63[50];
  if (v64 + 4 > v63[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v63 + 14), v56, v57, v58, v59, v60, v61, v62);
    v64 = v63[50];
  }
  v65 = 0;
  *(_DWORD *)(*((_QWORD *)v63 + 7) + v64) = -700514048;
  v63[50] += 4;
  if (*((unsigned __int8 *)a6 + 9) - 192 <= 0x3F)
  {
    if (((1 << (*((_BYTE *)a6 + 9) + 64)) & 0xC00FFC19C001C000) != 0)
    {
      if (!*(_DWORD *)(a1 + 340))
      {
        __break(0xC471u);
        JUMPOUT(0x198F7DD84);
      }
      v66 = (_DWORD **)(a1 + 328);
      v65 = 2;
LABEL_36:
      if ((**v66 & 0x700) == 0x300)
      {
        __break(0xC471u);
        JUMPOUT(0x198F7DC0CLL);
      }
      goto LABEL_37;
    }
    if (((1 << (*((_BYTE *)a6 + 9) + 64)) & 0x3800000000000000) != 0)
    {
      if (!*(_DWORD *)(a1 + 484))
      {
        __break(0xC471u);
        JUMPOUT(0x198F7DD8CLL);
      }
      v66 = (_DWORD **)(a1 + 472);
      v65 = 3;
      goto LABEL_36;
    }
    if (*((unsigned __int8 *)a6 + 9) != 192)
      goto LABEL_37;
    __break(0xC471u);
LABEL_90:
    JUMPOUT(0x198F7DBBCLL);
  }
LABEL_37:
  JSC::Wasm::BBQJITImpl::BBQJIT::bind(a1, *(_QWORD *)a6, *((_QWORD *)a6 + 1), v65, v59, v60, v61, v62);
  v74 = (unint64_t)v134;
  if (&v136 != v134 && v134)
  {
    v134 = 0;
    v135 = 0;
    WTF::fastFree(v74, v67, v68, v69, v70, v71, v72, v73);
  }
  v75 = v132;
  if (v132)
  {
    v132 = 0;
    v133 = 0;
    WTF::fastFree(v75, v67, v68, v69, v70, v71, v72, v73);
  }
  do
  {
    v76 = __ldaxr(v34);
    v77 = v76 - 1;
  }
  while (__stlxr(v77, v34));
  if (!v77)
  {
    atomic_store(1u, v34);
    WTF::fastFree((unint64_t)v34, v67, v68, v69, v70, v71, v72, v73);
  }
  v78 = v142;
  if (v143 != (_QWORD *)v142 && (_QWORD)v142 != 0)
  {
    *(_QWORD *)&v142 = 0;
    DWORD2(v142) = 0;
    WTF::fastFree(v78, v67, v68, v69, v70, v71, v72, v73);
  }
  v80 = v138;
  if (&v139 != (uint64_t *)v138 && (_QWORD)v138 != 0)
  {
    *(_QWORD *)&v138 = 0;
    DWORD2(v138) = 0;
    WTF::fastFree(v80, v67, v68, v69, v70, v71, v72, v73);
  }
  v82 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, *(_QWORD *)a6, *((_QWORD *)a6 + 1), 0, v70, v71, v72, v73);
  JSC::MacroAssemblerARM64::branchTest64(*(_QWORD *)(a1 + 8), 0, (v82 >> 8), 0xFFFFFFFFLL, v83, v84, v85, v86, (uint64_t)&v116, v87);
  LODWORD(v138) = v116;
  v95 = v117;
  *(_QWORD *)((char *)&v138 + 4) = v117;
  if (v116 != -1)
  {
    v96 = (_QWORD *)(a1 + 2800);
    v97 = *(unsigned int *)(a1 + 2812);
    if ((_DWORD)v97 == *(_DWORD *)(a1 + 2808))
    {
      v98 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v96, (void *)(v97 + 1), (unint64_t)&v138, v90, v91, v92, v93, v94);
      v99 = (_DWORD *)(*(_QWORD *)(a1 + 2800) + 12 * *(unsigned int *)(a1 + 2812));
      *v99 = *(_DWORD *)v98;
      v100 = v99 + 1;
      v95 = *(_QWORD *)(v98 + 4);
    }
    else
    {
      v101 = (_DWORD *)(*v96 + 12 * v97);
      *v101 = v116;
      v100 = v101 + 1;
    }
    *v100 = v95;
    ++*(_DWORD *)(a1 + 2812);
  }
  if (HIBYTE(word_1ECF4C700))
  {
    v138 = *a6;
    *(_QWORD *)&v142 = "RefCast";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v104 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v104;
      }
      while (v104 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)&v142, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v129);
    if (v130 != 1 && v130 != 4)
    {
      LODWORD(v131[0]) = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v129, v130, v105, v106, v107, v108, v109);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)v131);
    }
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<BOOL>(&v128);
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<int>(&v127);
    WTF::dataLog<char [16]>(" ");
    WTF::dataLog<char [16]>("=> ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v138);
    if (BYTE8(v138) != 1 && BYTE8(v138) != 4)
    {
      LODWORD(v131[0]) = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v138, *((uint64_t *)&v138 + 1), v111, v112, v113, v114, v115);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)v131);
    }
    WTF::dataLog<char [16]>("\n");
  }
  *a7 = 0;
  a7[8] = 0;
  v102 = v118;
  if (&v120 != (__int128 *)v118)
  {
    if (v118)
    {
      v118 = 0;
      LODWORD(v119) = 0;
      WTF::fastFree((unint64_t)v102, v88, v89, v90, v91, v92, v93, v94);
    }
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Add(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64Add(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64Add(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64Add(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(a8, a1, v9, (uint64_t)v8, a6, a1, a1, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64Add(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64Add(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64Add(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  int v14;
  unsigned int IfNecessary;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v82;
  unsigned int v83;
  __int128 v84;
  const char *v85;
  unsigned int v86;

  v13 = *((unsigned __int8 *)a3 + 8);
  v14 = *(unsigned __int8 *)(a4 + 8);
  if (v13 == 1 && v14 == 1)
  {
    *a5 = *(_QWORD *)a4 + *a3;
    *((_WORD *)a5 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      v84 = *(_OWORD *)a5;
      v85 = "I64Add";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v18 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v18;
        }
        while (v18 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v85, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      v24 = *((unsigned __int8 *)a3 + 8);
      if (v24 != 1 && v24 != 4)
      {
        v86 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v19, v20, v21, v22, v23);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v86);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v84);
    }
    goto LABEL_57;
  }
  v86 = 0;
  v83 = 0;
  if (v13 == 1)
  {
    IfNecessary = 0;
  }
  else
  {
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], a4, (uint64_t)a5, a6, a7, a8);
    v86 = IfNecessary;
    v14 = *(unsigned __int8 *)(a4 + 8);
  }
  if (v14 == 1)
  {
    LOBYTE(v82) = 0;
    v26 = 0;
  }
  else
  {
    v26 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), a4, (uint64_t)a5, a6, a7, a8);
    v82 = v26 >> 8;
    v83 = v26;
  }
  v28 = *a3;
  v27 = a3[1];
  v29 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v27, a4, (uint64_t)a5, a6, a7, a8);
  if (v27 == 2)
  {
    v35 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v28 + 16;
    if (*(_DWORD *)(a2 + 1280) < v35)
      *(_DWORD *)(a2 + 1280) = v35;
    if ((v29 & 7) != 1 || ((-8 * v35) ^ v29) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v28, v27, v29);
  }
  v36 = *(_QWORD *)a4;
  v37 = *(_QWORD *)(a4 + 8);
  v38 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v37, v30, v31, v32, v33, v34);
  if (v37 == 2)
  {
    v43 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v36 + 16;
    if (*(_DWORD *)(a2 + 1280) < v43)
      *(_DWORD *)(a2 + 1280) = v43;
    if ((v38 & 7) != 1 || ((-8 * v43) ^ v38) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v36, v37, v38);
  }
  v44 = *(_QWORD *)(a2 + 88);
  v45 = *(_DWORD *)(v44 + 596);
  if (v45)
  {
    if (*((_BYTE *)a3 + 8) == 1)
      v46 = v26;
    else
      v46 = IfNecessary;
    v47 = *(_QWORD *)(v44 + 584) + 1232 * v45;
    v48 = *(_DWORD *)(v44 + 68) + *(_DWORD *)(v47 - 32);
    if (*(_DWORD *)(v47 - 160) == 5)
      v49 = v48 + 1;
    else
      v49 = v48;
    *a5 = v49;
    *((_WORD *)a5 + 4) = -510;
    v57 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v49, a5[1], v46, v39, v40, v41, v42);
    if (HIBYTE(word_1ECF4C700))
    {
      v84 = *(_OWORD *)a5;
      v85 = "I64Add";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v73 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v73;
        }
        while (v73 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v85, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v86);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, a4, (int *)&v83, (uint64_t *)&v84);
      IfNecessary = v86;
      LOBYTE(v82) = BYTE1(v83);
    }
    v58 = *((unsigned __int8 *)a3 + 8);
    if (v58 != 1 && *(_BYTE *)(a4 + 8) != 1)
    {
      v59 = *(_QWORD *)(a6 + 8);
      v60 = IfNecessary >> 8;
      if ((v83 & 0xFF00) == 0x1F00)
      {
        v61 = IfNecessary >> 8;
        LOBYTE(v60) = 31;
      }
      else
      {
        v61 = v83 >> 8;
        if ((v57 & 0xFF00) != 0x1F00 && (IfNecessary & 0xFF00) != 0x1F00)
        {
          v62 = (unsigned __int16)(32 * (BYTE1(IfNecessary) & 0x1F)) | (v57 >> 8) & 0x1F | ((BYTE1(v83) & 0x1F) << 16);
          v63 = -1962934272;
LABEL_47:
          v64 = v62 | v63;
          v67 = *(_DWORD *)(v59 + 200);
          v66 = (unsigned int *)(v59 + 200);
          v65 = v67;
          if (v67 + 4 > *(v66 - 2))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v66 - 36), v50, v51, v52, v53, v54, v55, v56);
            v65 = *v66;
          }
          *(_DWORD *)(*((_QWORD *)v66 - 18) + v65) = v64;
          *v66 += 4;
          goto LABEL_57;
        }
      }
      v62 = SBYTE1(v57) | ((v61 & 0x1F) << 16) | (32 * (char)v60);
      v63 = -1960812544;
      goto LABEL_47;
    }
    v68 = IfNecessary >> 8;
    v69 = *a3;
    v70 = *(_QWORD *)a4;
    if (v58 == 1)
      v71 = *a3;
    else
      v71 = *(_QWORD *)a4;
    v72 = *(_QWORD *)(a7 + 8);
    if ((IfNecessary & 6) != 2)
      LOBYTE(v68) = v82;
    if (v71 == (int)v71)
    {
      JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a7 + 8), v71, (char)v68, ((__int16)v57 >> 8), v53, v54, v55, v56);
LABEL_57:
      *a1 = 0;
      a1[8] = 0;
      return;
    }
    if (v68 == BYTE1(v57))
    {
LABEL_78:
      if (v58 == 1)
        v80 = v69;
      else
        v80 = v70;
      JSC::MacroAssemblerARM64::add64(v72, v80, ((__int16)v57 >> 8), ((__int16)v57 >> 8), v53, v54, v55, v56);
      goto LABEL_57;
    }
    if (v68 == 63)
    {
      if (BYTE1(v57) != 31)
      {
        v76 = (v57 >> 8) & 0x1F | 0xD2800000;
LABEL_75:
        v79 = *(_DWORD *)(v72 + 200);
        v78 = (unsigned int *)(v72 + 200);
        v77 = v79;
        if (v79 + 4 > *(v78 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v78 - 36), v50, v51, v52, v53, v54, v55, v56);
          v77 = *v78;
        }
        *(_DWORD *)(*((_QWORD *)v78 - 18) + v77) = v76;
        *v78 += 4;
        v72 = *(_QWORD *)(a7 + 8);
        v58 = *((unsigned __int8 *)a3 + 8);
        v69 = *a3;
        v70 = *(_QWORD *)a4;
        goto LABEL_78;
      }
    }
    else if (BYTE1(v57) != 31 && v68 != 31)
    {
      v74 = (v57 >> 8) & 0x1F | ((v68 & 0x1F) << 16);
      v75 = -1442839584;
LABEL_74:
      v76 = v74 | v75;
      goto LABEL_75;
    }
    v74 = SBYTE1(v57) | (32 * (char)v68);
    v75 = -1862270976;
    goto LABEL_74;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Sub(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64Sub(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64Sub(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64Sub(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(a8, a1, v9, (uint64_t)v8, a6, a1, a1, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64Sub(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64Sub(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64Sub(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  int v14;
  unsigned int IfNecessary;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v82;
  unsigned int v83;
  __int128 v84;
  const char *v85;
  unsigned int v86;

  v13 = *((unsigned __int8 *)a3 + 8);
  v14 = *(unsigned __int8 *)(a4 + 8);
  if (v13 == 1 && v14 == 1)
  {
    *a5 = *a3 - *(_QWORD *)a4;
    *((_WORD *)a5 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      v84 = *(_OWORD *)a5;
      v85 = "I64Sub";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v18 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v18;
        }
        while (v18 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v85, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      v24 = *((unsigned __int8 *)a3 + 8);
      if (v24 != 1 && v24 != 4)
      {
        v86 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v19, v20, v21, v22, v23);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v86);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v84);
    }
  }
  else
  {
    v86 = 0;
    v83 = 0;
    if (v13 == 1)
    {
      IfNecessary = 0;
    }
    else
    {
      IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], a4, (uint64_t)a5, a6, a7, a8);
      v86 = IfNecessary;
      v14 = *(unsigned __int8 *)(a4 + 8);
    }
    if (v14 == 1)
    {
      LOBYTE(v82) = 0;
      v26 = 0;
    }
    else
    {
      v26 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), a4, (uint64_t)a5, a6, a7, a8);
      v82 = v26 >> 8;
      v83 = v26;
    }
    v28 = *a3;
    v27 = a3[1];
    v29 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v27, a4, (uint64_t)a5, a6, a7, a8);
    if (v27 == 2)
    {
      v35 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v28 + 16;
      if (*(_DWORD *)(a2 + 1280) < v35)
        *(_DWORD *)(a2 + 1280) = v35;
      if ((v29 & 7) != 1 || ((-8 * v35) ^ v29) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v28, v27, v29);
    }
    v36 = *(_QWORD *)a4;
    v37 = *(_QWORD *)(a4 + 8);
    v38 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v37, v30, v31, v32, v33, v34);
    if (v37 == 2)
    {
      v43 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v36 + 16;
      if (*(_DWORD *)(a2 + 1280) < v43)
        *(_DWORD *)(a2 + 1280) = v43;
      if ((v38 & 7) != 1 || ((-8 * v43) ^ v38) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v36, v37, v38);
    }
    v44 = *(_QWORD *)(a2 + 88);
    v45 = *(_DWORD *)(v44 + 596);
    if (!v45)
    {
      __break(0xC471u);
      JUMPOUT(0x198F7E8BCLL);
    }
    if (*((_BYTE *)a3 + 8) == 1)
      v46 = v26;
    else
      v46 = IfNecessary;
    v47 = *(_QWORD *)(v44 + 584) + 1232 * v45;
    v48 = *(_DWORD *)(v44 + 68) + *(_DWORD *)(v47 - 32);
    if (*(_DWORD *)(v47 - 160) == 5)
      v49 = v48 + 1;
    else
      v49 = v48;
    *a5 = v49;
    *((_WORD *)a5 + 4) = -510;
    v57 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v49, a5[1], v46, v39, v40, v41, v42);
    if (HIBYTE(word_1ECF4C700))
    {
      v84 = *(_OWORD *)a5;
      v85 = "I64Sub";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v80 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v80;
        }
        while (v80 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v85, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v86);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, a4, (int *)&v83, (uint64_t *)&v84);
      IfNecessary = v86;
      LOBYTE(v82) = BYTE1(v83);
    }
    v58 = *((unsigned __int8 *)a3 + 8);
    v59 = *(unsigned __int8 *)(a4 + 8);
    if (v58 == 1 || v59 == 1)
    {
      if (v59 == 1)
      {
        v67 = IfNecessary >> 8;
        if ((IfNecessary & 6) != 2)
          LOBYTE(v67) = v82;
        if (v58 == 1)
          v68 = a3;
        else
          v68 = (uint64_t *)a4;
        JSC::MacroAssemblerARM64::sub64(*(_QWORD *)(a7 + 8), (char)v67, *v68, ((__int16)v57 >> 8), v53, v54, v55, v56);
      }
      else
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a7, (JSC::ARM64LogicalImmediate *)*a3, a3[1], 0x802uLL, v53, v54, v55, v56);
        v76 = *(_DWORD **)(a7 + 8);
        v77 = (v82 & 0x1F) << 16;
        if (BYTE1(v57) == 31)
          v78 = v77 | 0xCB20611F;
        else
          v78 = (v57 >> 8) & 0x1F | 0xCB000000 | v77 | 0x100;
        v79 = v76[50];
        if (v79 + 4 > v76[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v69, v70, v71, v72, v73, v74, v75);
          v79 = v76[50];
        }
        *(_DWORD *)(*((_QWORD *)v76 + 7) + v79) = v78;
        v76[50] += 4;
      }
    }
    else
    {
      v60 = *(_QWORD *)(a6 + 8);
      if ((v57 & 0xFF00) == 0x1F00 || (IfNecessary & 0xFF00) == 0x1F00)
      {
        v61 = SBYTE1(v57) | (32 * SBYTE1(IfNecessary));
        v62 = ((BYTE1(v83) & 0x1F) << 16) | 0xCB206000;
      }
      else
      {
        v61 = (32 * ((IfNecessary >> 8) & 0x1F)) & 0xFFE0FFFF | (v57 >> 8) & 0x1F | ((BYTE1(v83) & 0x1F) << 16);
        v62 = -889192448;
      }
      v63 = v61 | v62;
      v66 = *(_DWORD *)(v60 + 200);
      v65 = (unsigned int *)(v60 + 200);
      v64 = v66;
      if (v66 + 4 > *(v65 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v65 - 36), v50, v51, v52, v53, v54, v55, v56);
        v64 = *v65;
      }
      *(_DWORD *)(*((_QWORD *)v65 - 18) + v64) = v63;
      *v65 += 4;
    }
  }
  *a1 = 0;
  a1[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Mul(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(a8, a1, v9, (uint64_t)v8, a6, a1, a1, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64Mul(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  int v14;
  unsigned int IfNecessary;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  _DWORD *v59;
  unsigned int v60;
  unsigned int v61;
  const char **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  unsigned int v73;
  unsigned int v75;
  __int128 v76;
  const char *v77;
  unsigned int v78;

  v13 = *((unsigned __int8 *)a3 + 8);
  v14 = *(unsigned __int8 *)(a4 + 8);
  if (v13 == 1 && v14 == 1)
  {
    *a5 = *(_QWORD *)a4 * *a3;
    *((_WORD *)a5 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      v76 = *(_OWORD *)a5;
      v77 = "I64Mul";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v18 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v18;
        }
        while (v18 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v77, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      v24 = *((unsigned __int8 *)a3 + 8);
      if (v24 != 1 && v24 != 4)
      {
        v78 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v19, v20, v21, v22, v23);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v78);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v76);
    }
    goto LABEL_55;
  }
  v78 = 0;
  v75 = 0;
  if (v13 == 1)
  {
    IfNecessary = 0;
  }
  else
  {
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], a4, (uint64_t)a5, a6, a7, a8);
    v78 = IfNecessary;
    v14 = *(unsigned __int8 *)(a4 + 8);
  }
  if (v14 == 1)
  {
    v26 = 0;
  }
  else
  {
    v26 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), a4, (uint64_t)a5, a6, a7, a8);
    v75 = v26;
  }
  v28 = *a3;
  v27 = a3[1];
  v29 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v27, a4, (uint64_t)a5, a6, a7, a8);
  if (v27 == 2)
  {
    v35 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v28 + 16;
    if (*(_DWORD *)(a2 + 1280) < v35)
      *(_DWORD *)(a2 + 1280) = v35;
    if ((v29 & 7) != 1 || ((-8 * v35) ^ v29) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v28, v27, v29);
  }
  v36 = *(_QWORD *)a4;
  v37 = *(_QWORD *)(a4 + 8);
  v38 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v37, v30, v31, v32, v33, v34);
  if (v37 == 2)
  {
    v43 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v36 + 16;
    if (*(_DWORD *)(a2 + 1280) < v43)
      *(_DWORD *)(a2 + 1280) = v43;
    if ((v38 & 7) != 1 || ((-8 * v43) ^ v38) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v36, v37, v38);
  }
  v44 = *(_QWORD *)(a2 + 88);
  v45 = *(_DWORD *)(v44 + 596);
  if (v45)
  {
    if (*((_BYTE *)a3 + 8) == 1)
      v46 = v26;
    else
      v46 = IfNecessary;
    v47 = *(_QWORD *)(v44 + 584) + 1232 * v45;
    v48 = *(_DWORD *)(v44 + 68) + *(_DWORD *)(v47 - 32);
    if (*(_DWORD *)(v47 - 160) == 5)
      v49 = v48 + 1;
    else
      v49 = v48;
    *a5 = v49;
    *((_WORD *)a5 + 4) = -510;
    v57 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v49, a5[1], v46, v39, v40, v41, v42);
    if (HIBYTE(word_1ECF4C700))
    {
      v76 = *(_OWORD *)a5;
      v77 = "I64Mul";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v73 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v73;
        }
        while (v73 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v77, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v78);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, a4, (int *)&v75, (uint64_t *)&v76);
      IfNecessary = v78;
      v26 = v75;
    }
    v58 = *((unsigned __int8 *)a3 + 8);
    if (v58 == 1 || *(_BYTE *)(a4 + 8) == 1)
    {
      LODWORD(v76) = IfNecessary;
      LODWORD(v77) = v26;
      v62 = (const char **)&v76;
      if ((IfNecessary & 6) == 2)
        v62 = &v77;
      *(_DWORD *)v62 = 2050;
      if (v58 == 1)
        v63 = (uint64_t)a3;
      else
        v63 = a4;
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a7, *(JSC::ARM64LogicalImmediate **)v63, *(_QWORD *)(v63 + 8), 0x802uLL, v53, v54, v55, v56);
      v59 = *(_DWORD **)(a7 + 8);
      v71 = BYTE1(v76);
      v72 = BYTE1(v77);
      v60 = v59[50];
      if (v60 + 4 > v59[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 14), v64, v65, v66, v67, v68, v69, v70);
        v60 = v59[50];
      }
      v61 = (32 * v71) & 0xFFE0FFE0 | ((v72 & 0x1F) << 16) | (v57 >> 8) & 0x1F | 0x9B007C00;
    }
    else
    {
      v59 = *(_DWORD **)(a6 + 8);
      v60 = v59[50];
      if (v60 + 4 > v59[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 14), v50, v51, v52, v53, v54, v55, v56);
        v60 = v59[50];
      }
      v61 = (IfNecessary >> 3) & 0x3E0 | (v57 >> 8) & 0x1F | (((v26 >> 8) & 0x1F) << 16) | 0x9B007C00;
    }
    *(_DWORD *)(*((_QWORD *)v59 + 7) + v60) = v61;
    v59[50] += 4;
LABEL_55:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64And(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64And(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64And(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64And(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(a8, a1, v9, (uint64_t)v8, a6, a1, a1, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64And(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64And(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64And(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  int v14;
  unsigned int IfNecessary;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  _DWORD *v60;
  unsigned int v61;
  char v62;
  JSC::ARM64LogicalImmediate **v63;
  unsigned int v64;
  unsigned int v66;
  __int128 v67;
  const char *v68;
  unsigned int v69;

  v13 = *((unsigned __int8 *)a3 + 8);
  v14 = *(unsigned __int8 *)(a4 + 8);
  if (v13 == 1 && v14 == 1)
  {
    *a5 = *(_QWORD *)a4 & *a3;
    *((_WORD *)a5 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      v67 = *(_OWORD *)a5;
      v68 = "I64And";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v18 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v18;
        }
        while (v18 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v68, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      v24 = *((unsigned __int8 *)a3 + 8);
      if (v24 != 1 && v24 != 4)
      {
        v69 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v19, v20, v21, v22, v23);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v69);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v67);
    }
    goto LABEL_52;
  }
  v69 = 0;
  v66 = 0;
  if (v13 == 1)
  {
    IfNecessary = 0;
  }
  else
  {
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], a4, (uint64_t)a5, a6, a7, a8);
    v69 = IfNecessary;
    v14 = *(unsigned __int8 *)(a4 + 8);
  }
  if (v14 == 1)
  {
    v26 = 0;
  }
  else
  {
    v26 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), a4, (uint64_t)a5, a6, a7, a8);
    v66 = v26;
  }
  v28 = *a3;
  v27 = a3[1];
  v29 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v27, a4, (uint64_t)a5, a6, a7, a8);
  if (v27 == 2)
  {
    v35 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v28 + 16;
    if (*(_DWORD *)(a2 + 1280) < v35)
      *(_DWORD *)(a2 + 1280) = v35;
    if ((v29 & 7) != 1 || ((-8 * v35) ^ v29) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v28, v27, v29);
  }
  v36 = *(_QWORD *)a4;
  v37 = *(_QWORD *)(a4 + 8);
  v38 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v37, v30, v31, v32, v33, v34);
  if (v37 == 2)
  {
    v43 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v36 + 16;
    if (*(_DWORD *)(a2 + 1280) < v43)
      *(_DWORD *)(a2 + 1280) = v43;
    if ((v38 & 7) != 1 || ((-8 * v43) ^ v38) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v36, v37, v38);
  }
  v44 = *(_QWORD *)(a2 + 88);
  v45 = *(_DWORD *)(v44 + 596);
  if (v45)
  {
    if (*((_BYTE *)a3 + 8) == 1)
      v46 = v26;
    else
      v46 = IfNecessary;
    v47 = *(_QWORD *)(v44 + 584) + 1232 * v45;
    v48 = *(_DWORD *)(v44 + 68) + *(_DWORD *)(v47 - 32);
    if (*(_DWORD *)(v47 - 160) == 5)
      v49 = v48 + 1;
    else
      v49 = v48;
    *a5 = v49;
    *((_WORD *)a5 + 4) = -510;
    v57 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v49, a5[1], v46, v39, v40, v41, v42);
    if (HIBYTE(word_1ECF4C700))
    {
      v67 = *(_OWORD *)a5;
      v68 = "I64And";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v64 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v64;
        }
        while (v64 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v68, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v69);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, a4, (int *)&v66, (uint64_t *)&v67);
      IfNecessary = v69;
    }
    v58 = *((unsigned __int8 *)a3 + 8);
    if (v58 == 1 || *(_BYTE *)(a4 + 8) == 1)
    {
      v62 = BYTE1(v66);
      if ((IfNecessary & 6) == 2)
        v62 = BYTE1(IfNecessary);
      if (v58 == 1)
        v63 = (JSC::ARM64LogicalImmediate **)a3;
      else
        v63 = (JSC::ARM64LogicalImmediate **)a4;
      JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a7 + 8), *v63, v62, (__int16)v57 >> 8);
    }
    else
    {
      v59 = v66;
      v60 = *(_DWORD **)(a6 + 8);
      v61 = v60[50];
      if (v61 + 4 > v60[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v60 + 14), v50, v51, v52, v53, v54, v55, v56);
        v61 = v60[50];
      }
      *(_DWORD *)(*((_QWORD *)v60 + 7) + v61) = (IfNecessary >> 3) & 0x3E0 | (v57 >> 8) & 0x1F | (((v59 >> 8) & 0x1F) << 16) | 0x8A000000;
      v60[50] += 4;
    }
LABEL_52:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Xor(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  _DWORD *v45;
  __int16 v46;
  uint64_t *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v55;
  _BYTE *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  __int128 v62;
  const char *v63;
  int v64;

  v59 = a2;
  v60 = a3;
  v57 = a4;
  v58 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1 && a5 == 1)
  {
    *a6 = a4 ^ a2;
    *((_WORD *)a6 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      v62 = *(_OWORD *)a6;
      v63 = "I64Xor";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v48 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v48;
        }
        while (v48 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v63, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v59);
      if (v60 != 1 && v60 != 4)
      {
        v64 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v59, v60, v49, v50, v51, v52, v53);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v64);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v57, (uint64_t *)&v62);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  else
  {
    IfNecessary = 0;
    v64 = 0;
    v61 = 0;
    if (a3 != 1)
    {
      IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
      v64 = IfNecessary;
    }
    v56 = a9;
    if (v17 == 1)
    {
      v20 = 0;
    }
    else
    {
      v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
      v61 = v20;
    }
    v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    if (a3 == 2)
    {
      v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
      if (*(_DWORD *)(a1 + 1280) < v27)
        *(_DWORD *)(a1 + 1280) = v27;
      if ((v21 & 7) != 1 || ((-8 * v27) ^ v21) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v21);
    }
    v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v22, v23, v24, v25, v26);
    if (a5 == 2)
    {
      v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
      if (*(_DWORD *)(a1 + 1280) < v33)
        *(_DWORD *)(a1 + 1280) = v33;
      if ((v28 & 7) != 1 || ((-8 * v33) ^ v28) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v28);
    }
    v34 = *(_QWORD *)(a1 + 88);
    v35 = *(_DWORD *)(v34 + 596);
    if (v35)
    {
      if (v16 == 1)
        v36 = v20;
      else
        v36 = IfNecessary;
      v37 = *(_QWORD *)(v34 + 584) + 1232 * v35;
      v38 = *(_DWORD *)(v34 + 68) + *(_DWORD *)(v37 - 32);
      if (*(_DWORD *)(v37 - 160) == 5)
        v39 = v38 + 1;
      else
        v39 = v38;
      *a6 = v39;
      *((_WORD *)a6 + 4) = -510;
      v44 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v39, a6[1], v36, v29, v30, v31, v32);
      if (HIBYTE(word_1ECF4C700))
      {
        v62 = *(_OWORD *)a6;
        v63 = "I64Xor";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v55 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v55;
          }
          while (v55 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v63, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v59);
        if ((IfNecessary & 7) != 0)
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v64);
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v57, (int *)&v61, (uint64_t *)&v62);
        v16 = v60;
        v17 = v58;
        LOWORD(IfNecessary) = v64;
        LOWORD(v20) = v61;
      }
      v45 = *(_DWORD **)(a1 + 8);
      if (v16 == 1 || v17 == 1)
      {
        if ((IfNecessary & 6) == 2)
          v46 = IfNecessary;
        else
          v46 = v20;
        v47 = &v57;
        if (v16 == 1)
          v47 = &v59;
        JSC::MacroAssemblerARM64::xor64((uint64_t)v45, (JSC::ARM64LogicalImmediate *)*v47, (v46 >> 8), (v44 >> 8), v40, v41, v42, v43);
      }
      else
      {
        JSC::MacroAssemblerARM64::xor64(v45, ((__int16)IfNecessary >> 8), ((__int16)v20 >> 8), (v44 >> 8), v40, v41, v42, v43);
      }
      *v56 = 0;
      v56[8] = 0;
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Or(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  char v43;
  uint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v52;
  _BYTE *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  __int128 v59;
  const char *v60;
  unsigned int v61;

  v56 = a2;
  v57 = a3;
  v54 = a4;
  v55 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1 && a5 == 1)
  {
    *a6 = a4 | a2;
    *((_WORD *)a6 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      v59 = *(_OWORD *)a6;
      v60 = "I64Or";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v45 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v45;
        }
        while (v45 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v60, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v56);
      if (v57 != 1 && v57 != 4)
      {
        v61 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v56, v57, v46, v47, v48, v49, v50);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v61);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v54, (uint64_t *)&v59);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  else
  {
    IfNecessary = 0;
    v61 = 0;
    v58 = 0;
    if (a3 != 1)
    {
      IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
      v61 = IfNecessary;
    }
    v53 = a9;
    if (v17 == 1)
    {
      v20 = 0;
    }
    else
    {
      v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
      v58 = v20;
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::consume(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    JSC::Wasm::BBQJITImpl::BBQJIT::consume(a1, a4, a5, v21, v22, v23, v24, v25);
    if (v16 == 1)
      v26 = v20;
    else
      v26 = IfNecessary;
    v27 = JSC::Wasm::BBQJITImpl::BBQJIT::topValue(a1, -2);
    *a6 = v27;
    *((_WORD *)a6 + 4) = v28;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v27, a6[1], v26, v29, v30, v31, v32);
    if (HIBYTE(word_1ECF4C700))
    {
      v59 = *(_OWORD *)a6;
      v60 = "I64Or";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v52 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v52;
        }
        while (v52 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v60, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v56);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v61);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v54, (int *)&v58, (uint64_t *)&v59);
      v16 = v57;
      v17 = v55;
      IfNecessary = v61;
      v20 = v58;
    }
    v41 = *(_DWORD **)(a1 + 8);
    if (v16 == 1 || v17 == 1)
    {
      if ((IfNecessary & 6) == 2)
        v43 = BYTE1(IfNecessary);
      else
        v43 = BYTE1(v20);
      v44 = &v54;
      if (v16 == 1)
        v44 = &v56;
      JSC::MacroAssemblerARM64::or64((uint64_t)v41, (JSC::ARM64LogicalImmediate *)*v44, v43, (__int16)v40 >> 8);
    }
    else
    {
      v42 = v41[50];
      if (v42 + 4 > v41[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
        v42 = v41[50];
      }
      *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = (v20 << 8) & 0x1F0000 | (v40 >> 8) & 0x1F | (IfNecessary >> 3) & 0x3E0 | 0xAA000000;
      v41[50] += 4;
    }
    *v53 = 0;
    v53[8] = 0;
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Shl(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v58;
  _BYTE *v59;
  uint64_t v60;
  unint64_t v61;
  JSC::ARM64LogicalImmediate *v62;
  unint64_t v63;
  unsigned int v64;
  __int128 v65;
  const char *v66;
  unsigned int v67;

  v62 = (JSC::ARM64LogicalImmediate *)a2;
  v63 = a3;
  v60 = a4;
  v61 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 != 1 || a5 != 1)
  {
    IfNecessary = 0;
    v67 = 0;
    v64 = 0;
    if (a3 != 1)
    {
      IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
      v67 = IfNecessary;
    }
    v59 = a9;
    if (v17 == 1)
    {
      v20 = 0;
    }
    else
    {
      v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
      v64 = v20;
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::consume(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    JSC::Wasm::BBQJITImpl::BBQJIT::consume(a1, a4, a5, v21, v22, v23, v24, v25);
    if (v16 == 1)
      v26 = v20;
    else
      v26 = IfNecessary;
    v27 = JSC::Wasm::BBQJITImpl::BBQJIT::topValue(a1, -2);
    *a6 = v27;
    *((_WORD *)a6 + 4) = v28;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v27, a6[1], v26, v29, v30, v31, v32);
    if (HIBYTE(word_1ECF4C700))
    {
      v65 = *(_OWORD *)a6;
      v66 = "I64Shl";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v58 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v58;
        }
        while (v58 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v66, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v62);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v67);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v60, (int *)&v64, (uint64_t *)&v65);
      v16 = v63;
      v17 = v61;
      IfNecessary = v67;
      v20 = v64;
    }
    if (v16 == 1 || v17 == 1)
    {
      if (v17 == 1)
      {
        JSC::MacroAssemblerARM64::lshift64(*(_DWORD **)(a1 + 8), ((__int16)IfNecessary >> 8), v60, ((__int16)v40 >> 8), v36, v37, v38, v39);
        goto LABEL_22;
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v62, v63, 0x802uLL, v36, v37, v38, v39);
      v41 = *(_DWORD **)(a1 + 8);
      v42 = v41[50];
      if (v42 + 4 > v41[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v44, v45, v46, v47, v48, v49, v50);
        v42 = v41[50];
      }
      v43 = (v20 << 8) & 0x1F0000 | (v40 >> 8) & 0x1F | 0x9AC02100;
    }
    else
    {
      v41 = *(_DWORD **)(a1 + 8);
      v42 = v41[50];
      if (v42 + 4 > v41[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
        v42 = v41[50];
      }
      v43 = (v20 << 8) & 0x1F0000 | (v40 >> 8) & 0x1F | (IfNecessary >> 3) & 0x3E0 | 0x9AC02000;
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = v43;
    v41[50] += 4;
LABEL_22:
    *v59 = 0;
    v59[8] = 0;
    return;
  }
  *a6 = a2 << a4;
  *((_WORD *)a6 + 4) = -511;
  if (HIBYTE(word_1ECF4C700))
  {
    v65 = *(_OWORD *)a6;
    v66 = "I64Shl";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v51 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v51;
      }
      while (v51 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v66, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v62);
    if (v63 != 1 && v63 != 4)
    {
      v67 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v62, v63, v52, v53, v54, v55, v56);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v67);
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v60, (uint64_t *)&v65);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrS(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(a8, a1, v9, (unsigned int *)v8, a6, a1, a1, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrS(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(_BYTE *a1, uint64_t a2, uint64_t *a3, unsigned int *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  int v14;
  unsigned int IfNecessary;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  _DWORD *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v71;
  __int128 v72;
  const char *v73;
  unsigned int v74;

  v13 = *((unsigned __int8 *)a3 + 8);
  v14 = *((unsigned __int8 *)a4 + 8);
  if (v13 == 1 && v14 == 1)
  {
    *a5 = *a3 >> *(_QWORD *)a4;
    *((_WORD *)a5 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      v72 = *(_OWORD *)a5;
      v73 = "I64ShrS";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v18 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v18;
        }
        while (v18 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v73, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      v24 = *((unsigned __int8 *)a3 + 8);
      if (v24 != 1 && v24 != 4)
      {
        v74 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v19, v20, v21, v22, v23);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v74);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v72);
    }
    goto LABEL_52;
  }
  v74 = 0;
  v71 = 0;
  if (v13 == 1)
  {
    IfNecessary = 0;
  }
  else
  {
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    v74 = IfNecessary;
    v14 = *((unsigned __int8 *)a4 + 8);
  }
  if (v14 == 1)
  {
    v26 = 0;
  }
  else
  {
    v26 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *((_QWORD *)a4 + 1), (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    v71 = v26;
  }
  v28 = *a3;
  v27 = a3[1];
  v29 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v27, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if (v27 == 2)
  {
    v35 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v28 + 16;
    if (*(_DWORD *)(a2 + 1280) < v35)
      *(_DWORD *)(a2 + 1280) = v35;
    if ((v29 & 7) != 1 || ((-8 * v35) ^ v29) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v28, v27, v29);
  }
  v36 = *(_QWORD *)a4;
  v37 = *((_QWORD *)a4 + 1);
  v38 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v37, v30, v31, v32, v33, v34);
  if (v37 == 2)
  {
    v43 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v36 + 16;
    if (*(_DWORD *)(a2 + 1280) < v43)
      *(_DWORD *)(a2 + 1280) = v43;
    if ((v38 & 7) != 1 || ((-8 * v43) ^ v38) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v36, v37, v38);
  }
  v44 = *(_QWORD *)(a2 + 88);
  v45 = *(_DWORD *)(v44 + 596);
  if (v45)
  {
    if (*((_BYTE *)a3 + 8) == 1)
      v46 = v26;
    else
      v46 = IfNecessary;
    v47 = *(_QWORD *)(v44 + 584) + 1232 * v45;
    v48 = *(_DWORD *)(v44 + 68) + *(_DWORD *)(v47 - 32);
    if (*(_DWORD *)(v47 - 160) == 5)
      v49 = v48 + 1;
    else
      v49 = v48;
    *a5 = v49;
    *((_WORD *)a5 + 4) = -510;
    v57 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v49, a5[1], v46, v39, v40, v41, v42);
    if (HIBYTE(word_1ECF4C700))
    {
      v72 = *(_OWORD *)a5;
      v73 = "I64ShrS";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v69 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v69;
        }
        while (v69 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v73, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v74);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t)a4, (int *)&v71, (uint64_t *)&v72);
      IfNecessary = v74;
      v26 = v71;
    }
    v58 = *((unsigned __int8 *)a4 + 8);
    if (*((_BYTE *)a3 + 8) == 1 || v58 == 1)
    {
      if (v58 == 1)
      {
        JSC::MacroAssemblerARM64::rshift64(*(_DWORD **)(a7 + 8), ((__int16)IfNecessary >> 8), *a4, ((__int16)v57 >> 8), v53, v54, v55, v56);
LABEL_52:
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a7, (JSC::ARM64LogicalImmediate *)*a3, a3[1], 0x802uLL, v53, v54, v55, v56);
      v59 = *(_DWORD **)(a7 + 8);
      v60 = v59[50];
      if (v60 + 4 > v59[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 14), v62, v63, v64, v65, v66, v67, v68);
        v60 = v59[50];
      }
      v61 = (v26 << 8) & 0x1F0000 | (v57 >> 8) & 0x1F | 0x9AC02900;
    }
    else
    {
      v59 = *(_DWORD **)(a6 + 8);
      v60 = v59[50];
      if (v60 + 4 > v59[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 14), v50, v51, v52, v53, v54, v55, v56);
        v60 = v59[50];
      }
      v61 = (IfNecessary >> 3) & 0x3E0 | (v57 >> 8) & 0x1F | (((v26 >> 8) & 0x1F) << 16) | 0x9AC02800;
    }
    *(_DWORD *)(*((_QWORD *)v59 + 7) + v60) = v61;
    v59[50] += 4;
    goto LABEL_52;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrU(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];
  uint64_t v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(a8, a1, v9, (unsigned int *)v8, a6, a1, a1, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::addI64ShrU(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_2>(_BYTE *a1, uint64_t a2, uint64_t *a3, unsigned int *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  int v14;
  unsigned int IfNecessary;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  _DWORD *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v71;
  __int128 v72;
  const char *v73;
  unsigned int v74;

  v13 = *((unsigned __int8 *)a3 + 8);
  v14 = *((unsigned __int8 *)a4 + 8);
  if (v13 == 1 && v14 == 1)
  {
    *a5 = (unint64_t)*a3 >> *(_QWORD *)a4;
    *((_WORD *)a5 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      v72 = *(_OWORD *)a5;
      v73 = "I64ShrU";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v18 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v18;
        }
        while (v18 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v73, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      v24 = *((unsigned __int8 *)a3 + 8);
      if (v24 != 1 && v24 != 4)
      {
        v74 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, a3[1], v19, v20, v21, v22, v23);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v74);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a4, (uint64_t *)&v72);
    }
    goto LABEL_52;
  }
  v74 = 0;
  v71 = 0;
  if (v13 == 1)
  {
    IfNecessary = 0;
  }
  else
  {
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a3, a3[1], (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    v74 = IfNecessary;
    v14 = *((unsigned __int8 *)a4 + 8);
  }
  if (v14 == 1)
  {
    v26 = 0;
  }
  else
  {
    v26 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a4, *((_QWORD *)a4 + 1), (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    v71 = v26;
  }
  v28 = *a3;
  v27 = a3[1];
  v29 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a3, v27, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if (v27 == 2)
  {
    v35 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v28 + 16;
    if (*(_DWORD *)(a2 + 1280) < v35)
      *(_DWORD *)(a2 + 1280) = v35;
    if ((v29 & 7) != 1 || ((-8 * v35) ^ v29) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v28, v27, v29);
  }
  v36 = *(_QWORD *)a4;
  v37 = *((_QWORD *)a4 + 1);
  v38 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a4, v37, v30, v31, v32, v33, v34);
  if (v37 == 2)
  {
    v43 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v36 + 16;
    if (*(_DWORD *)(a2 + 1280) < v43)
      *(_DWORD *)(a2 + 1280) = v43;
    if ((v38 & 7) != 1 || ((-8 * v43) ^ v38) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v36, v37, v38);
  }
  v44 = *(_QWORD *)(a2 + 88);
  v45 = *(_DWORD *)(v44 + 596);
  if (v45)
  {
    if (*((_BYTE *)a3 + 8) == 1)
      v46 = v26;
    else
      v46 = IfNecessary;
    v47 = *(_QWORD *)(v44 + 584) + 1232 * v45;
    v48 = *(_DWORD *)(v44 + 68) + *(_DWORD *)(v47 - 32);
    if (*(_DWORD *)(v47 - 160) == 5)
      v49 = v48 + 1;
    else
      v49 = v48;
    *a5 = v49;
    *((_WORD *)a5 + 4) = -510;
    v57 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v49, a5[1], v46, v39, v40, v41, v42);
    if (HIBYTE(word_1ECF4C700))
    {
      v72 = *(_OWORD *)a5;
      v73 = "I64ShrU";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v69 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v69;
        }
        while (v69 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v73, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a3);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v74);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t)a4, (int *)&v71, (uint64_t *)&v72);
      IfNecessary = v74;
      v26 = v71;
    }
    v58 = *((unsigned __int8 *)a4 + 8);
    if (*((_BYTE *)a3 + 8) == 1 || v58 == 1)
    {
      if (v58 == 1)
      {
        JSC::MacroAssemblerARM64::urshift64(*(_DWORD **)(a7 + 8), ((__int16)IfNecessary >> 8), *a4, ((__int16)v57 >> 8), v53, v54, v55, v56);
LABEL_52:
        *a1 = 0;
        a1[8] = 0;
        return;
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a7, (JSC::ARM64LogicalImmediate *)*a3, a3[1], 0x802uLL, v53, v54, v55, v56);
      v59 = *(_DWORD **)(a7 + 8);
      v60 = v59[50];
      if (v60 + 4 > v59[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 14), v62, v63, v64, v65, v66, v67, v68);
        v60 = v59[50];
      }
      v61 = (v26 << 8) & 0x1F0000 | (v57 >> 8) & 0x1F | 0x9AC02500;
    }
    else
    {
      v59 = *(_DWORD **)(a6 + 8);
      v60 = v59[50];
      if (v60 + 4 > v59[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 14), v50, v51, v52, v53, v54, v55, v56);
        v60 = v59[50];
      }
      v61 = (IfNecessary >> 3) & 0x3E0 | (v57 >> 8) & 0x1F | (((v26 >> 8) & 0x1F) << 16) | 0x9AC02400;
    }
    *(_DWORD *)(*((_QWORD *)v59 + 7) + v60) = v61;
    v59[50] += 4;
    goto LABEL_52;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Rotl(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _DWORD *v48;
  unsigned int v49;
  _DWORD *v50;
  unsigned int v51;
  _BYTE *v52;
  int v53;
  _DWORD *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v70;
  _BYTE *v71;
  uint64_t v72;
  unint64_t v73;
  JSC::ARM64LogicalImmediate *v74;
  unint64_t v75;
  unsigned int v76;
  __int128 v77;
  const char *v78;
  unsigned int v79;

  v74 = (JSC::ARM64LogicalImmediate *)a2;
  v75 = a3;
  v72 = a4;
  v73 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1 && a5 == 1)
  {
    *a6 = __ROR8__(a2, -(char)a4);
    *((_WORD *)a6 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      v77 = *(_OWORD *)a6;
      v78 = "I64Rotl";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v63 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v63;
        }
        while (v63 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v78, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v74);
      if (v75 != 1 && v75 != 4)
      {
        v79 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v74, v75, v64, v65, v66, v67, v68);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v79);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v72, (uint64_t *)&v77);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  else
  {
    IfNecessary = 0;
    v79 = 0;
    v76 = 0;
    if (a3 != 1)
    {
      IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
      v79 = IfNecessary;
    }
    v71 = a9;
    if (v17 == 1)
    {
      v20 = 0;
    }
    else
    {
      v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
      v76 = v20;
    }
    v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    if (a3 == 2)
    {
      v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
      if (*(_DWORD *)(a1 + 1280) < v27)
        *(_DWORD *)(a1 + 1280) = v27;
      if ((v21 & 7) != 1 || ((-8 * v27) ^ v21) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v21);
    }
    v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v22, v23, v24, v25, v26);
    if (a5 == 2)
    {
      v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
      if (*(_DWORD *)(a1 + 1280) < v33)
        *(_DWORD *)(a1 + 1280) = v33;
      if ((v28 & 7) != 1 || ((-8 * v33) ^ v28) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v28);
    }
    v34 = *(_QWORD *)(a1 + 88);
    v35 = *(_DWORD *)(v34 + 596);
    if (v35)
    {
      if (v16 == 1)
        v36 = v20;
      else
        v36 = IfNecessary;
      v37 = *(_QWORD *)(v34 + 584) + 1232 * v35;
      v38 = *(_DWORD *)(v34 + 68) + *(_DWORD *)(v37 - 32);
      if (*(_DWORD *)(v37 - 160) == 5)
        v39 = v38 + 1;
      else
        v39 = v38;
      *a6 = v39;
      *((_WORD *)a6 + 4) = -510;
      v47 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v39, a6[1], v36, v29, v30, v31, v32);
      if (HIBYTE(word_1ECF4C700))
      {
        v77 = *(_OWORD *)a6;
        v78 = "I64Rotl";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v70 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v70;
          }
          while (v70 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v78, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v74);
        if ((IfNecessary & 7) != 0)
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v79);
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v72, (int *)&v76, (uint64_t *)&v77);
        v16 = v75;
        v17 = v73;
        IfNecessary = v79;
        v20 = v76;
      }
      if (v16 == 1 || v17 == 1)
      {
        if (v17 == 1)
        {
          JSC::MacroAssemblerARM64::rotateRight64(*(_DWORD **)(a1 + 8), ((__int16)IfNecessary >> 8), -(int)v72, ((__int16)v47 >> 8), v43, v44, v45, v46);
          v52 = v71;
LABEL_47:
          *v52 = 0;
          v52[8] = 0;
          return;
        }
        v54 = *(_DWORD **)(a1 + 8);
        v55 = v54[50];
        if (v55 + 4 > v54[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v54 + 14), v40, v41, v42, v43, v44, v45, v46);
          v55 = v54[50];
        }
        *(_DWORD *)(*((_QWORD *)v54 + 7) + v55) = (((v20 >> 8) & 0x1F) << 16) | 0xCB0003E8;
        v54[50] += 4;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v74, v75, v47, v43, v44, v45, v46);
        v50 = *(_DWORD **)(a1 + 8);
        v51 = v50[50];
        v52 = v71;
        if (v51 + 4 > v50[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v50 + 14), v56, v57, v58, v59, v60, v61, v62);
          v51 = v50[50];
        }
        v53 = (v47 >> 8) & 0x1F | (32 * ((v47 >> 8) & 0x1F));
      }
      else
      {
        v48 = *(_DWORD **)(a1 + 8);
        v49 = v48[50];
        if (v49 + 4 > v48[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v40, v41, v42, v43, v44, v45, v46);
          v49 = v48[50];
        }
        *(_DWORD *)(*((_QWORD *)v48 + 7) + v49) = (((v20 >> 8) & 0x1F) << 16) | 0xCB0003E8;
        v48[50] += 4;
        v50 = *(_DWORD **)(a1 + 8);
        v51 = v50[50];
        v52 = v71;
        if (v51 + 4 > v50[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v50 + 14), v40, v41, v42, v43, v44, v45, v46);
          v51 = v50[50];
        }
        v53 = (IfNecessary >> 3) & 0x3E0 | (v47 >> 8) & 0x1F;
      }
      *(_DWORD *)(*((_QWORD *)v50 + 7) + v51) = v53 | 0x9AC82C00;
      v50[50] += 4;
      goto LABEL_47;
    }
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Rotr(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v16;
  int v17;
  unsigned int IfNecessary;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _DWORD *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  JSC::ARM64LogicalImmediate *v69;
  unint64_t v70;
  unsigned int v71;
  __int128 v72;
  const char *v73;
  unsigned int v74;

  v69 = (JSC::ARM64LogicalImmediate *)a2;
  v70 = a3;
  v67 = a4;
  v68 = a5;
  v16 = a3;
  v17 = a5;
  if (a3 == 1 && a5 == 1)
  {
    *a6 = __ROR8__(a2, a4);
    *((_WORD *)a6 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      v72 = *(_OWORD *)a6;
      v73 = "I64Rotr";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v58 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v58;
        }
        while (v58 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v73, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v69);
      if (v70 != 1 && v70 != 4)
      {
        v74 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v69, v70, v59, v60, v61, v62, v63);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v74);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v67, (uint64_t *)&v72);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  else
  {
    IfNecessary = 0;
    v74 = 0;
    v71 = 0;
    if (a3 != 1)
    {
      IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
      v74 = IfNecessary;
    }
    v66 = a9;
    if (v17 == 1)
    {
      v20 = 0;
    }
    else
    {
      v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
      v71 = v20;
    }
    v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    if (a3 == 2)
    {
      v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
      if (*(_DWORD *)(a1 + 1280) < v27)
        *(_DWORD *)(a1 + 1280) = v27;
      if ((v21 & 7) != 1 || ((-8 * v27) ^ v21) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v21);
    }
    v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v22, v23, v24, v25, v26);
    if (a5 == 2)
    {
      v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
      if (*(_DWORD *)(a1 + 1280) < v33)
        *(_DWORD *)(a1 + 1280) = v33;
      if ((v28 & 7) != 1 || ((-8 * v33) ^ v28) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v28);
    }
    v34 = *(_QWORD *)(a1 + 88);
    v35 = *(_DWORD *)(v34 + 596);
    if (v35)
    {
      if (v16 == 1)
        v36 = v20;
      else
        v36 = IfNecessary;
      v37 = *(_QWORD *)(v34 + 584) + 1232 * v35;
      v38 = *(_DWORD *)(v34 + 68) + *(_DWORD *)(v37 - 32);
      if (*(_DWORD *)(v37 - 160) == 5)
        v39 = v38 + 1;
      else
        v39 = v38;
      *a6 = v39;
      *((_WORD *)a6 + 4) = -510;
      v47 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v39, a6[1], v36, v29, v30, v31, v32);
      if (HIBYTE(word_1ECF4C700))
      {
        v72 = *(_OWORD *)a6;
        v73 = "I64Rotr";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v65 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v65;
          }
          while (v65 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v73, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v69);
        if ((IfNecessary & 7) != 0)
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v74);
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v67, (int *)&v71, (uint64_t *)&v72);
        v16 = v70;
        v17 = v68;
        IfNecessary = v74;
        v20 = v71;
      }
      if (v16 == 1 || v17 == 1)
      {
        if (v17 == 1)
        {
          JSC::MacroAssemblerARM64::rotateRight64(*(_DWORD **)(a1 + 8), ((__int16)IfNecessary >> 8), v67, ((__int16)v47 >> 8), v43, v44, v45, v46);
LABEL_43:
          *v66 = 0;
          v66[8] = 0;
          return;
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v69, v70, 0x802uLL, v43, v44, v45, v46);
        v48 = *(_DWORD **)(a1 + 8);
        v49 = v48[50];
        if (v49 + 4 > v48[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v51, v52, v53, v54, v55, v56, v57);
          v49 = v48[50];
        }
        v50 = (v20 << 8) & 0x1F0000 | (v47 >> 8) & 0x1F | 0x9AC02D00;
      }
      else
      {
        v48 = *(_DWORD **)(a1 + 8);
        v49 = v48[50];
        if (v49 + 4 > v48[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 + 14), v40, v41, v42, v43, v44, v45, v46);
          v49 = v48[50];
        }
        v50 = (v20 << 8) & 0x1F0000 | (v47 >> 8) & 0x1F | (IfNecessary >> 3) & 0x3E0 | 0x9AC02C00;
      }
      *(_DWORD *)(*((_QWORD *)v48 + 7) + v49) = v50;
      v48[50] += 4;
      goto LABEL_43;
    }
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Clz(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = __clz(a2);
    *((_WORD *)a4 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I64Clz";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -510;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I64Clz";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      IfNecessary = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = (IfNecessary >> 3) & 0x3E0 | (v40 >> 8) & 0x1F | 0xDAC01000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Ctz(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46[2];
  unsigned int v47;
  uint64_t v48[3];
  const char *v49;

  v46[0] = a2;
  v46[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = __clz(__rbit64(a2));
    *((_WORD *)a4 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v48 = *(_OWORD *)a4;
      v49 = "I64Ctz";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v49, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v46, v48);
    }
LABEL_23:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v47 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -510;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v48 = *(_OWORD *)a4;
      v49 = "I64Ctz";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v45 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v45;
        }
        while (v45 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v49, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v46, (int *)&v47, v48);
      IfNecessary = v47;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = (IfNecessary >> 3) & 0x3E0 | (v40 >> 8) & 0x1F | 0xDAC00000;
    v43 = v41[50];
    v44 = v43 + 4;
    v41[50] = v43 + 4;
    if ((v43 + 8) > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v44 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v44) = (v40 >> 8) & 0x1F | (32 * ((v40 >> 8) & 0x1F)) | 0xDAC01000;
    v41[50] += 4;
    goto LABEL_23;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::binary<JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_1,JSC::Wasm::BBQJITImpl::BBQJIT::emitCompareI64(char const*,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::Wasm::BBQJITImpl::BBQJIT::Value &,JSC::MacroAssemblerARM64::RelationalCondition,BOOL (*)(long long,long long))::$_2>(_BYTE *a1, uint64_t a2, const char *a3, uint64_t *a4, uint64_t a5, uint64_t *a6, unsigned int (**a7)(uint64_t, _QWORD), uint64_t a8, uint64_t a9, int *a10, uint64_t a11, unsigned int *a12)
{
  int v18;
  int v19;
  unsigned int IfNecessary;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  _DWORD *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  __int128 v76;
  const char *v77;
  unsigned int v78;

  v18 = *((unsigned __int8 *)a4 + 8);
  v19 = *(unsigned __int8 *)(a5 + 8);
  if (v18 == 1 && v19 == 1)
  {
    *a6 = (*a7)(*a4, *(_QWORD *)a5);
    *((_WORD *)a6 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      v76 = *(_OWORD *)a6;
      v77 = a3;
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v22 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v22;
        }
        while (v22 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v77, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
      v28 = *((unsigned __int8 *)a4 + 8);
      if (v28 != 1 && v28 != 4)
      {
        v78 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a4, a4[1], v23, v24, v25, v26, v27);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v78);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, (uint64_t *)a5, (uint64_t *)&v76);
    }
    goto LABEL_57;
  }
  v78 = 0;
  v75 = 0;
  if (v18 == 1)
  {
    IfNecessary = 0;
  }
  else
  {
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *a4, a4[1], (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)a7, a8);
    v78 = IfNecessary;
    v19 = *(unsigned __int8 *)(a5 + 8);
  }
  if (v19 == 1)
  {
    v30 = 0;
  }
  else
  {
    v30 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a5, *(_QWORD *)(a5 + 8), (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)a7, a8);
    v75 = v30;
  }
  v31 = *a4;
  v32 = a4[1];
  v33 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *a4, v32, (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)a7, a8);
  if (v32 == 2)
  {
    v39 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v31 + 16;
    if (*(_DWORD *)(a2 + 1280) < v39)
      *(_DWORD *)(a2 + 1280) = v39;
    if ((v33 & 7) != 1 || ((-8 * v39) ^ v33) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v31, v32, v33);
  }
  v40 = *(_QWORD *)a5;
  v41 = *(_QWORD *)(a5 + 8);
  v42 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a5, v41, v34, v35, v36, v37, v38);
  if (v41 == 2)
  {
    v47 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v40 + 16;
    if (*(_DWORD *)(a2 + 1280) < v47)
      *(_DWORD *)(a2 + 1280) = v47;
    if ((v42 & 7) != 1 || ((-8 * v47) ^ v42) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v40, v41, v42);
  }
  v48 = *(_QWORD *)(a2 + 88);
  v49 = *(_DWORD *)(v48 + 596);
  if (v49)
  {
    if (*((_BYTE *)a4 + 8) == 1)
      v50 = v30;
    else
      v50 = IfNecessary;
    v51 = *(_QWORD *)(v48 + 584) + 1232 * v49;
    v52 = *(_DWORD *)(v48 + 68) + *(_DWORD *)(v51 - 32);
    if (*(_DWORD *)(v51 - 160) == 5)
      v53 = v52 + 1;
    else
      v53 = v52;
    *a6 = v53;
    *((_WORD *)a6 + 4) = -254;
    v61 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v53, a6[1], v50, v43, v44, v45, v46);
    if (HIBYTE(word_1ECF4C700))
    {
      v76 = *(_OWORD *)a6;
      v77 = a3;
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v74 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v74;
        }
        while (v74 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v77, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v78);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 0, a5, (int *)&v75, (uint64_t *)&v76);
      IfNecessary = v78;
      v30 = v75;
    }
    v62 = *((unsigned __int8 *)a4 + 8);
    if (v62 == 1 || *(_BYTE *)(a5 + 8) == 1)
    {
      v70 = *a12;
      if (v62 == 1)
      {
        v71 = *a4;
        v72 = v70 - 2;
        if ((v70 - 2) <= 0xB && ((0xFC3u >> v72) & 1) != 0)
          v70 = dword_19919FAD8[v72];
        v73 = ((__int16)v30 >> 8);
      }
      else
      {
        v71 = *(_QWORD *)a5;
        v73 = ((__int16)IfNecessary >> 8);
      }
      JSC::MacroAssemblerARM64::compare64(*(_QWORD *)(a11 + 8), v70, v73, v71, ((__int16)v61 >> 8), v58, v59, v60);
    }
    else
    {
      v63 = *(_DWORD **)(a9 + 8);
      v64 = *a10;
      v65 = (v30 << 8) & 0x1F0000;
      if ((IfNecessary & 0xFF00) == 0x1F00)
      {
        v66 = -350198785;
      }
      else
      {
        v65 |= (IfNecessary >> 3) & 0x3E0;
        v66 = -352321505;
      }
      v67 = v65 | v66;
      v68 = v63[50];
      if (v68 + 4 > v63[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v63 + 14), v54, v55, v56, v57, v58, v59, v60);
        v68 = v63[50];
      }
      *(_DWORD *)(*((_QWORD *)v63 + 7) + v68) = v67;
      v69 = v63[50] + 4;
      v63[50] = v69;
      if (v69 + 4 > v63[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v63 + 14), v54, v55, v56, v57, v58, v59, v60);
        v69 = v63[50];
      }
      *(_DWORD *)(*((_QWORD *)v63 + 7) + v69) = ((v61 >> 8) & 0x1F | ((v64 & 0xF) << 12)) ^ 0x1A9F17E0;
      v63[50] += 4;
    }
LABEL_57:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI32WrapI64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addI32WrapI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI32WrapI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(a8, a1, (unsigned int *)v8, a4, a1, a5, a6, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addI32WrapI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI32WrapI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(_BYTE *a1, uint64_t a2, unsigned int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned int IfNecessary;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52[3];
  const char *v53;

  if (*((_BYTE *)a3 + 8) == 1)
  {
    *a4 = *a3;
    *((_WORD *)a4 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v52 = *(_OWORD *)a4;
      v53 = "I32WrapI64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v12 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v12;
        }
        while (v12 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v53, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t *)a3, v52);
    }
LABEL_33:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a3, *((_QWORD *)a3 + 1), (uint64_t)a4, a5, a6, a7, a8);
  v51 = IfNecessary;
  v15 = *(_QWORD *)a3;
  v16 = *((_QWORD *)a3 + 1);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a3, v16, v17, v18, v19, v20, v21);
  if (v16 == 2)
  {
    v27 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v15 + 16;
    if (*(_DWORD *)(a2 + 1280) < v27)
      *(_DWORD *)(a2 + 1280) = v27;
    v28 = (-8 * v27) ^ v22;
    if ((v22 & 7) != 1 || v28 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v15, v16, v22);
  }
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_DWORD *)(v30 + 596);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 584) + 1232 * v31;
    v33 = *(_DWORD *)(v30 + 68) + *(_DWORD *)(v32 - 32);
    if (*(_DWORD *)(v32 - 160) == 5)
      v34 = v33 + 1;
    else
      v34 = v33;
    *a4 = v34;
    *((_WORD *)a4 + 4) = -254;
    v42 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v34, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v52 = *(_OWORD *)a4;
      v53 = "I32WrapI64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v50 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v50;
        }
        while (v50 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v53, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t)a3, (int *)&v51, v52);
      IfNecessary = v51;
    }
    if (BYTE1(IfNecessary) == BYTE1(v42))
      goto LABEL_33;
    v43 = *(_QWORD *)(a5 + 8);
    if (BYTE1(IfNecessary) == 63)
    {
      if (BYTE1(v42) != 31)
      {
        v46 = (v42 >> 8) & 0x1F | 0xD2800000;
LABEL_30:
        v49 = *(_DWORD *)(v43 + 200);
        v48 = (unsigned int *)(v43 + 200);
        v47 = v49;
        if (v49 + 4 > *(v48 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v48 - 36), v35, v36, v37, v38, v39, v40, v41);
          v47 = *v48;
        }
        *(_DWORD *)(*((_QWORD *)v48 - 18) + v47) = v46;
        *v48 += 4;
        goto LABEL_33;
      }
    }
    else if (BYTE1(v42) != 31 && BYTE1(IfNecessary) != 31)
    {
      v44 = (((IfNecessary >> 8) & 0x1F) << 16) | (v42 >> 8) & 0x1F;
      v45 = -1442839584;
LABEL_29:
      v46 = v44 | v45;
      goto LABEL_30;
    }
    v44 = SBYTE1(v42) | (32 * SBYTE1(IfNecessary));
    v45 = -1862270976;
    goto LABEL_29;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Extend8S(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = (char)a2;
    *((_WORD *)a4 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I64Extend8S";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -510;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I64Extend8S";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      IfNecessary = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = (IfNecessary >> 3) & 0x3E0 | (v40 >> 8) & 0x1F | 0x93401C00;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Extend16S(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = (__int16)a2;
    *((_WORD *)a4 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I64Extend16S";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -510;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I64Extend16S";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      IfNecessary = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = (IfNecessary >> 3) & 0x3E0 | (v40 >> 8) & 0x1F | 0x93403C00;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Extend32S(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = (int)a2;
    *((_WORD *)a4 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I64Extend32S";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -510;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I64Extend32S";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      IfNecessary = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = (IfNecessary >> 3) & 0x3E0 | (v40 >> 8) & 0x1F | 0x93407C00;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64ExtendSI32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64ExtendSI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64ExtendSI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(a8, a1, (int *)v8, a4, a1, a5, a6, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addI64ExtendSI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addI64ExtendSI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(_BYTE *a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned int IfNecessary;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47[3];
  const char *v48;

  if (*((_BYTE *)a3 + 8) == 1)
  {
    *a4 = *a3;
    *((_WORD *)a4 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "I64ExtendSI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v12 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v12;
        }
        while (v12 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t *)a3, v47);
    }
LABEL_24:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a3, *((_QWORD *)a3 + 1), (uint64_t)a4, a5, a6, a7, a8);
  v46 = IfNecessary;
  v15 = *(_QWORD *)a3;
  v16 = *((_QWORD *)a3 + 1);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a3, v16, v17, v18, v19, v20, v21);
  if (v16 == 2)
  {
    v27 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v15 + 16;
    if (*(_DWORD *)(a2 + 1280) < v27)
      *(_DWORD *)(a2 + 1280) = v27;
    v28 = (-8 * v27) ^ v22;
    if ((v22 & 7) != 1 || v28 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v15, v16, v22);
  }
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_DWORD *)(v30 + 596);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 584) + 1232 * v31;
    v33 = *(_DWORD *)(v30 + 68) + *(_DWORD *)(v32 - 32);
    if (*(_DWORD *)(v32 - 160) == 5)
      v34 = v33 + 1;
    else
      v34 = v33;
    *a4 = v34;
    *((_WORD *)a4 + 4) = -510;
    v42 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v34, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "I64ExtendSI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v45 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v45;
        }
        while (v45 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t)a3, (int *)&v46, v47);
      IfNecessary = v46;
    }
    v43 = *(_DWORD **)(a5 + 8);
    v44 = v43[50];
    if (v44 + 4 > v43[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v43 + 14), v35, v36, v37, v38, v39, v40, v41);
      v44 = v43[50];
    }
    *(_DWORD *)(*((_QWORD *)v43 + 7) + v44) = (IfNecessary >> 3) & 0x3E0 | (v42 >> 8) & 0x1F | 0x93407C00;
    v43[50] += 4;
    goto LABEL_24;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64ExtendUI32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  __int16 v33;
  unsigned int v34;
  uint64_t v35[2];
  unsigned int v36;
  uint64_t v37[3];
  const char *v38;

  v35[0] = a2;
  v35[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = a2;
    *((_WORD *)a4 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v37 = *(_OWORD *)a4;
      v38 = "I64ExtendUI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v38, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v35, v37);
    }
LABEL_19:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v36 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -510;
    v33 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v37 = *(_OWORD *)a4;
      v38 = "I64ExtendUI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v34 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v34;
        }
        while (v34 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v38, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v35, (int *)&v36, v37);
      BYTE1(IfNecessary) = BYTE1(v36);
    }
    JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, SBYTE1(IfNecessary), v33 >> 8);
    goto LABEL_19;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64Eqz(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47[2];
  unsigned int v48;
  uint64_t v49[3];
  const char *v50;

  v47[0] = a2;
  v47[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = a2 == 0;
    *((_WORD *)a4 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v49 = *(_OWORD *)a4;
      v50 = "I64Eqz";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v50, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v47, v49);
    }
LABEL_23:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v48 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -254;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v49 = *(_OWORD *)a4;
      v50 = "I64Eqz";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v46 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v46;
        }
        while (v46 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v50, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v47, (int *)&v48, v49);
      IfNecessary = v48;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = (32 * ((IfNecessary >> 8) & 0x1F)) & 0xFFE0FFFF | (((IfNecessary >> 8) & 0x1F) << 16) | 0xEA00001F;
    v43 = v41[50];
    if (v43 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v43 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v43) = v42;
    v44 = v41[50];
    v45 = v44 + 4;
    v41[50] = v44 + 4;
    if ((v44 + 8) > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v45 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v45) = (v40 >> 8) & 0x1F | 0x1A9F17E0;
    v41[50] += 4;
    goto LABEL_23;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addI64ReinterpretF64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = a2;
    *((_WORD *)a4 + 4) = -511;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I64ReinterpretF64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -510;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "I64ReinterpretF64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = (v40 >> 8) & 0x1F | 0x9E660000 | ((__int16)IfNecessary >> 3) & 0xFFFFFFE0;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64ReinterpretI64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = a2;
    *((_WORD *)a4 + 4) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64ReinterpretI64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -1022;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64ReinterpretI64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      IfNecessary = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = (IfNecessary >> 3) & 0x3E0 | (v40 >> 8) | 0x9E670000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertUI32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertUI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertUI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(a8, a1, (uint64_t)v8, a4, a1, a5, a6, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertUI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertUI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned int IfNecessary;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47[3];
  const char *v48;

  if (*(_BYTE *)(a3 + 8) == 1)
  {
    *a4 = COERCE_UNSIGNED_INT((float)*(unsigned int *)a3);
    *((_WORD *)a4 + 4) = -767;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F32ConvertUI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v12 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v12;
        }
        while (v12 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t *)a3, v47);
    }
LABEL_24:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), (uint64_t)a4, a5, a6, a7, a8);
  v46 = IfNecessary;
  v15 = *(_QWORD *)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a3, v16, v17, v18, v19, v20, v21);
  if (v16 == 2)
  {
    v27 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v15 + 16;
    if (*(_DWORD *)(a2 + 1280) < v27)
      *(_DWORD *)(a2 + 1280) = v27;
    v28 = (-8 * v27) ^ v22;
    if ((v22 & 7) != 1 || v28 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v15, v16, v22);
  }
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_DWORD *)(v30 + 596);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 584) + 1232 * v31;
    v33 = *(_DWORD *)(v30 + 68) + *(_DWORD *)(v32 - 32);
    if (*(_DWORD *)(v32 - 160) == 5)
      v34 = v33 + 1;
    else
      v34 = v33;
    *a4 = v34;
    *((_WORD *)a4 + 4) = -766;
    v35 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v34, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F32ConvertUI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v45 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v45;
        }
        while (v45 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, a3, (int *)&v46, v47);
      BYTE1(IfNecessary) = BYTE1(v46);
    }
    JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a5 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, SBYTE1(IfNecessary), 8);
    v43 = *(_DWORD **)(a5 + 8);
    v44 = v43[50];
    if (v44 + 4 > v43[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v43 + 14), v36, v37, v38, v39, v40, v41, v42);
      v44 = v43[50];
    }
    *(_DWORD *)(*((_QWORD *)v43 + 7) + v44) = (v35 >> 8) | 0x9E230100;
    v43[50] += 4;
    goto LABEL_24;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertSI64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertSI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertSI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(a8, a1, (uint64_t)v8, a4, a1, a5, a6, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertSI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertSI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned int IfNecessary;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47[3];
  const char *v48;

  if (*(_BYTE *)(a3 + 8) == 1)
  {
    *a4 = COERCE_UNSIGNED_INT((float)*(uint64_t *)a3);
    *((_WORD *)a4 + 4) = -767;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F32ConvertSI64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v12 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v12;
        }
        while (v12 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t *)a3, v47);
    }
LABEL_24:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), (uint64_t)a4, a5, a6, a7, a8);
  v46 = IfNecessary;
  v15 = *(_QWORD *)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a3, v16, v17, v18, v19, v20, v21);
  if (v16 == 2)
  {
    v27 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v15 + 16;
    if (*(_DWORD *)(a2 + 1280) < v27)
      *(_DWORD *)(a2 + 1280) = v27;
    v28 = (-8 * v27) ^ v22;
    if ((v22 & 7) != 1 || v28 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v15, v16, v22);
  }
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_DWORD *)(v30 + 596);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 584) + 1232 * v31;
    v33 = *(_DWORD *)(v30 + 68) + *(_DWORD *)(v32 - 32);
    if (*(_DWORD *)(v32 - 160) == 5)
      v34 = v33 + 1;
    else
      v34 = v33;
    *a4 = v34;
    *((_WORD *)a4 + 4) = -766;
    v42 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v34, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F32ConvertSI64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v45 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v45;
        }
        while (v45 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, a3, (int *)&v46, v47);
      IfNecessary = v46;
    }
    v43 = *(_DWORD **)(a5 + 8);
    v44 = v43[50];
    if (v44 + 4 > v43[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v43 + 14), v35, v36, v37, v38, v39, v40, v41);
      v44 = v43[50];
    }
    *(_DWORD *)(*((_QWORD *)v43 + 7) + v44) = (IfNecessary >> 3) & 0x3E0 | (v42 >> 8) | 0x9E220000;
    v43[50] += 4;
    goto LABEL_24;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertUI64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertUI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertUI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(a8, a1, (uint64_t)v8, a4, a1, a5, a6, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertUI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF32ConvertUI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned int IfNecessary;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47[3];
  const char *v48;

  if (*(_BYTE *)(a3 + 8) == 1)
  {
    *a4 = COERCE_UNSIGNED_INT((float)*(unint64_t *)a3);
    *((_WORD *)a4 + 4) = -767;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F32ConvertUI64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v12 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v12;
        }
        while (v12 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t *)a3, v47);
    }
LABEL_24:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), (uint64_t)a4, a5, a6, a7, a8);
  v46 = IfNecessary;
  v15 = *(_QWORD *)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a3, v16, v17, v18, v19, v20, v21);
  if (v16 == 2)
  {
    v27 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v15 + 16;
    if (*(_DWORD *)(a2 + 1280) < v27)
      *(_DWORD *)(a2 + 1280) = v27;
    v28 = (-8 * v27) ^ v22;
    if ((v22 & 7) != 1 || v28 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v15, v16, v22);
  }
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_DWORD *)(v30 + 596);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 584) + 1232 * v31;
    v33 = *(_DWORD *)(v30 + 68) + *(_DWORD *)(v32 - 32);
    if (*(_DWORD *)(v32 - 160) == 5)
      v34 = v33 + 1;
    else
      v34 = v33;
    *a4 = v34;
    *((_WORD *)a4 + 4) = -766;
    v42 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v34, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F32ConvertUI64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v45 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v45;
        }
        while (v45 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, a3, (int *)&v46, v47);
      IfNecessary = v46;
    }
    v43 = *(_DWORD **)(a5 + 8);
    v44 = v43[50];
    if (v44 + 4 > v43[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v43 + 14), v35, v36, v37, v38, v39, v40, v41);
      v44 = v43[50];
    }
    *(_DWORD *)(*((_QWORD *)v43 + 7) + v44) = (IfNecessary >> 3) & 0x3E0 | (v42 >> 8) | 0x9E230000;
    v43[50] += 4;
    goto LABEL_24;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertUI32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>, double a9@<D0>)
{
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertUI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertUI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(a8, a1, (uint64_t)v9, a4, a1, a5, a6, a7, a9);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertUI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertUI32(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v13;
  unsigned int IfNecessary;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48[3];
  const char *v49;

  if (*(_BYTE *)(a3 + 8) == 1)
  {
    LODWORD(a9) = *(_DWORD *)a3;
    *(double *)a4 = (double)*(unint64_t *)&a9;
    *(_WORD *)(a4 + 8) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v48 = *(_OWORD *)a4;
      v49 = "F64ConvertUI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v13 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v13;
        }
        while (v13 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v49, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t *)a3, v48);
    }
LABEL_24:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), a4, a5, a6, a7, a8);
  v47 = IfNecessary;
  v16 = *(_QWORD *)a3;
  v17 = *(_QWORD *)(a3 + 8);
  v23 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a3, v17, v18, v19, v20, v21, v22);
  if (v17 == 2)
  {
    v28 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v16 + 16;
    if (*(_DWORD *)(a2 + 1280) < v28)
      *(_DWORD *)(a2 + 1280) = v28;
    v29 = (-8 * v28) ^ v23;
    if ((v23 & 7) != 1 || v29 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v16, v17, v23);
  }
  v31 = *(_QWORD *)(a2 + 88);
  v32 = *(_DWORD *)(v31 + 596);
  if (v32)
  {
    v33 = *(_QWORD *)(v31 + 584) + 1232 * v32;
    v34 = *(_DWORD *)(v31 + 68) + *(_DWORD *)(v33 - 32);
    if (*(_DWORD *)(v33 - 160) == 5)
      v35 = v34 + 1;
    else
      v35 = v34;
    *(_QWORD *)a4 = v35;
    *(_WORD *)(a4 + 8) = -1022;
    v36 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v35, *(_QWORD *)(a4 + 8), IfNecessary, v24, v25, v26, v27);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v48 = *(_OWORD *)a4;
      v49 = "F64ConvertUI32";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v46 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v46;
        }
        while (v46 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v49, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, a3, (int *)&v47, v48);
      BYTE1(IfNecessary) = BYTE1(v47);
    }
    JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a5 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, SBYTE1(IfNecessary), 8);
    v44 = *(_DWORD **)(a5 + 8);
    v45 = v44[50];
    if (v45 + 4 > v44[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v44 + 14), v37, v38, v39, v40, v41, v42, v43);
      v45 = v44[50];
    }
    *(_DWORD *)(*((_QWORD *)v44 + 7) + v45) = (v36 >> 8) | 0x9E630100;
    v44[50] += 4;
    goto LABEL_24;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertSI64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertSI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertSI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(a8, a1, (uint64_t)v8, a4, a1, a5, a6, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertSI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertSI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned int IfNecessary;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47[3];
  const char *v48;

  if (*(_BYTE *)(a3 + 8) == 1)
  {
    *(double *)a4 = (double)*(uint64_t *)a3;
    *(_WORD *)(a4 + 8) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F64ConvertSI64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v12 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v12;
        }
        while (v12 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t *)a3, v47);
    }
LABEL_24:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), a4, a5, a6, a7, a8);
  v46 = IfNecessary;
  v15 = *(_QWORD *)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a3, v16, v17, v18, v19, v20, v21);
  if (v16 == 2)
  {
    v27 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v15 + 16;
    if (*(_DWORD *)(a2 + 1280) < v27)
      *(_DWORD *)(a2 + 1280) = v27;
    v28 = (-8 * v27) ^ v22;
    if ((v22 & 7) != 1 || v28 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v15, v16, v22);
  }
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_DWORD *)(v30 + 596);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 584) + 1232 * v31;
    v33 = *(_DWORD *)(v30 + 68) + *(_DWORD *)(v32 - 32);
    if (*(_DWORD *)(v32 - 160) == 5)
      v34 = v33 + 1;
    else
      v34 = v33;
    *(_QWORD *)a4 = v34;
    *(_WORD *)(a4 + 8) = -1022;
    v42 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v34, *(_QWORD *)(a4 + 8), IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F64ConvertSI64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v45 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v45;
        }
        while (v45 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, a3, (int *)&v46, v47);
      IfNecessary = v46;
    }
    v43 = *(_DWORD **)(a5 + 8);
    v44 = v43[50];
    if (v44 + 4 > v43[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v43 + 14), v35, v36, v37, v38, v39, v40, v41);
      v44 = v43[50];
    }
    *(_DWORD *)(*((_QWORD *)v43 + 7) + v44) = (IfNecessary >> 3) & 0x3E0 | (v42 >> 8) | 0x9E620000;
    v43[50] += 4;
    goto LABEL_24;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertUI64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertUI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertUI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(a8, a1, (uint64_t)v8, a4, a1, a5, a6, a7);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::unary<JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertUI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0,JSC::Wasm::BBQJITImpl::BBQJIT::addF64ConvertUI64(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1>(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v12;
  unsigned int IfNecessary;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  _DWORD *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47[3];
  const char *v48;

  if (*(_BYTE *)(a3 + 8) == 1)
  {
    *(double *)a4 = (double)*(unint64_t *)a3;
    *(_WORD *)(a4 + 8) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F64ConvertUI64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v12 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v12;
        }
        while (v12 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, (uint64_t *)a3, v47);
    }
LABEL_24:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), a4, a5, a6, a7, a8);
  v46 = IfNecessary;
  v15 = *(_QWORD *)a3;
  v16 = *(_QWORD *)(a3 + 8);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a2, *(_QWORD *)a3, v16, v17, v18, v19, v20, v21);
  if (v16 == 2)
  {
    v27 = ((*(_DWORD *)(a2 + 1288) + 15) & 0xFFFFFFF0) + 16 * v15 + 16;
    if (*(_DWORD *)(a2 + 1280) < v27)
      *(_DWORD *)(a2 + 1280) = v27;
    v28 = (-8 * v27) ^ v22;
    if ((v22 & 7) != 1 || v28 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a2, v15, v16, v22);
  }
  v30 = *(_QWORD *)(a2 + 88);
  v31 = *(_DWORD *)(v30 + 596);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 584) + 1232 * v31;
    v33 = *(_DWORD *)(v30 + 68) + *(_DWORD *)(v32 - 32);
    if (*(_DWORD *)(v32 - 160) == 5)
      v34 = v33 + 1;
    else
      v34 = v33;
    *(_QWORD *)a4 = v34;
    *(_WORD *)(a4 + 8) = -1022;
    v42 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a2, v34, *(_QWORD *)(a4 + 8), IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v47 = *(_OWORD *)a4;
      v48 = "F64ConvertUI64";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a2)
      {
        v45 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v45;
        }
        while (v45 < *(_DWORD *)a2);
      }
      WTF::dataLog<char const*,char [2]>(&v48, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a2, 1, a3, (int *)&v46, v47);
      IfNecessary = v46;
    }
    v43 = *(_DWORD **)(a5 + 8);
    v44 = v43[50];
    if (v44 + 4 > v43[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v43 + 14), v35, v36, v37, v38, v39, v40, v41);
      v44 = v43[50];
    }
    *(_DWORD *)(*((_QWORD *)v43 + 7) + v44) = (IfNecessary >> 3) & 0x3E0 | (v42 >> 8) | 0x9E630000;
    v43[50] += 4;
    goto LABEL_24;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Copysign(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _QWORD *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v15;
  uint64_t v16;
  unsigned int IfNecessary;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  __int16 v48;
  _DWORD *v49;
  unsigned int v50;
  _DWORD *v51;
  unsigned int v52;
  _DWORD *v53;
  unsigned int v54;
  unsigned int v55;
  _DWORD *v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  JSC::AssemblerBuffer *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  _DWORD *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  __int16 v73;
  _DWORD *v74;
  unsigned int v75;
  _DWORD *v76;
  unsigned int v77;
  _DWORD *v78;
  unsigned int v79;
  _DWORD *v80;
  unsigned int v81;
  _DWORD *v82;
  unsigned int v83;
  int v84;
  int v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v95;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  __int128 v102;
  const char *v103;
  int v104;

  v99 = a2;
  v100 = a3;
  v97 = a4;
  v98 = a5;
  v15 = a3;
  v16 = a5;
  if (a3 == 1 && a5 == 1)
  {
    *a6 = a4 & 0x8000000000000000 | a2 & 0x7FFFFFFFFFFFFFFFLL;
    *((_WORD *)a6 + 4) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      v102 = *(_OWORD *)a6;
      v103 = "F64Copysign";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v88 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v88;
        }
        while (v88 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v103, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v99);
      if (v100 != 1 && v100 != 4)
      {
        v104 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v99, v100, v89, v90, v91, v92, v93);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v104);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v97, (uint64_t *)&v102);
    }
    *a9 = 0;
    a9[8] = 0;
  }
  else
  {
    IfNecessary = 0;
    v104 = 0;
    v101 = 0;
    if (a3 != 1)
    {
      IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
      v104 = IfNecessary;
    }
    if (v16 == 1)
    {
      v20 = 0;
    }
    else
    {
      v20 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
      v101 = v20;
    }
    v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
    if (a3 == 2)
    {
      v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
      if (*(_DWORD *)(a1 + 1280) < v27)
        *(_DWORD *)(a1 + 1280) = v27;
      if ((v21 & 7) != 1 || ((-8 * v27) ^ v21) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v21);
    }
    v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v22, v23, v24, v25, v26);
    if (v16 == 2)
    {
      v33 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
      if (*(_DWORD *)(a1 + 1280) < v33)
        *(_DWORD *)(a1 + 1280) = v33;
      if ((v28 & 7) != 1 || ((-8 * v33) ^ v28) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v28);
    }
    v34 = *(_QWORD *)(a1 + 88);
    v35 = *(_DWORD *)(v34 + 596);
    if (v35)
    {
      if (v15 == 1)
        v36 = v20;
      else
        v36 = IfNecessary;
      v37 = *(_QWORD *)(v34 + 584) + 1232 * v35;
      v38 = *(_DWORD *)(v34 + 68) + *(_DWORD *)(v37 - 32);
      if (*(_DWORD *)(v37 - 160) == 5)
        v39 = v38 + 1;
      else
        v39 = v38;
      *a6 = v39;
      *((_WORD *)a6 + 4) = -1022;
      v47 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v39, a6[1], v36, v29, v30, v31, v32);
      if (HIBYTE(word_1ECF4C700))
      {
        v102 = *(_OWORD *)a6;
        v103 = "F64Copysign";
        WTF::dataLog<char [16]>("BBQ\t");
        if (*(_DWORD *)a1)
        {
          v95 = 0;
          do
          {
            WTF::dataLog<char [16]>(" ");
            ++v95;
          }
          while (v95 < *(_DWORD *)a1);
        }
        WTF::dataLog<char const*,char [2]>(&v103, " ");
        WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v99);
        if ((v104 & 7) != 0)
          WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v104);
        JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)&v97, (int *)&v101, (uint64_t *)&v102);
        v15 = v100;
      }
      if (v15 == 1)
      {
        v48 = v101;
        v49 = *(_DWORD **)(a1 + 8);
        v50 = v49[50];
        if (v50 + 4 > v49[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v49 + 14), v40, v41, v42, v43, v44, v45, v46);
          v50 = v49[50];
        }
        *(_DWORD *)(*((_QWORD *)v49 + 7) + v50) = (v48 >> 3) & 0x6199FFE0 | 0x9E660008;
        v49[50] += 4;
        v51 = *(_DWORD **)(a1 + 8);
        v52 = v51[50];
        if (v52 + 4 > v51[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v51 + 14), v40, v41, v42, v43, v44, v45, v46);
          v52 = v51[50];
        }
        *(_DWORD *)(*((_QWORD *)v51 + 7) + v52) = -746586872;
        v51[50] += 4;
        v53 = *(_DWORD **)(a1 + 8);
        v54 = v53[50];
        if (v54 + 4 > v53[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v53 + 14), v40, v41, v42, v43, v44, v45, v46);
          v54 = v53[50];
        }
        v55 = v47 >> 8;
        *(_DWORD *)(*((_QWORD *)v53 + 7) + v54) = -750714616;
        v53[50] += 4;
        v56 = *(_DWORD **)(a1 + 8);
        v57 = v56[50];
        if (v57 + 4 > v56[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v56 + 14), v40, v41, v42, v43, v44, v45, v46);
          v57 = v56[50];
        }
        v58 = 246422528;
        *(_DWORD *)(*((_QWORD *)v56 + 7) + v57) = -1637416688;
        v56[50] += 4;
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)(v99 & 0x7FFFFFFFFFFFFFFFLL), 0xFC01uLL, v47, v43, v44, v45, v46);
        v59 = *(_QWORD *)(a1 + 8);
        v62 = *(_DWORD *)(v59 + 200);
        v61 = (unsigned int *)(v59 + 200);
        v60 = v62;
        v63 = (JSC::AssemblerBuffer *)(v61 - 36);
        v64 = v62 + 4;
        v65 = *(v61 - 2);
      }
      else
      {
        v67 = v104;
        if (v98 != 1)
        {
          v73 = v101;
          v74 = *(_DWORD **)(a1 + 8);
          v75 = v74[50];
          if (v75 + 4 > v74[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v74 + 14), v40, v41, v42, v43, v44, v45, v46);
            v75 = v74[50];
          }
          *(_DWORD *)(*((_QWORD *)v74 + 7) + v75) = (v73 >> 3) & 0x6199FFE0 | 0x9E660008;
          v74[50] += 4;
          v76 = *(_DWORD **)(a1 + 8);
          v77 = v76[50];
          if (v77 + 4 > v76[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v40, v41, v42, v43, v44, v45, v46);
            v77 = v76[50];
          }
          *(_DWORD *)(*((_QWORD *)v76 + 7) + v77) = -746586872;
          v76[50] += 4;
          v78 = *(_DWORD **)(a1 + 8);
          v79 = v78[50];
          if (v79 + 4 > v78[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v78 + 14), v40, v41, v42, v43, v44, v45, v46);
            v79 = v78[50];
          }
          *(_DWORD *)(*((_QWORD *)v78 + 7) + v79) = -750714616;
          v78[50] += 4;
          v80 = *(_DWORD **)(a1 + 8);
          v81 = v80[50];
          if (v81 + 4 > v80[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v80 + 14), v40, v41, v42, v43, v44, v45, v46);
            v81 = v80[50];
          }
          *(_DWORD *)(*((_QWORD *)v80 + 7) + v81) = -1637416688;
          v80[50] += 4;
          v82 = *(_DWORD **)(a1 + 8);
          v83 = v82[50];
          if (v83 + 4 > v82[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v82 + 14), v40, v41, v42, v43, v44, v45, v46);
            v83 = v82[50];
          }
          v84 = v67 >> 8;
          v85 = 32 * v84;
          *(_DWORD *)(*((_QWORD *)v82 + 7) + v83) = v84 | (32 * v84) | 0x1E60C000;
          v82[50] += 4;
          v86 = *(_QWORD *)(a1 + 8);
          v87 = *(_DWORD *)(v86 + 200);
          v61 = (unsigned int *)(v86 + 200);
          v60 = v87;
          v63 = (JSC::AssemblerBuffer *)(v61 - 36);
          if (v87 + 4 > *(v61 - 2))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v61 - 36), v40, v41, v42, v43, v44, v45, v46);
            v60 = *v61;
          }
          v66 = v85 | ((__int16)v47 >> 8) | 0xEB01C00;
          goto LABEL_63;
        }
        v68 = v97;
        v55 = v47 >> 8;
        v69 = *(_DWORD **)(a1 + 8);
        v70 = v69[50];
        if (v70 + 4 > v69[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v69 + 14), v40, v41, v42, v43, v44, v45, v46);
          v70 = v69[50];
        }
        *(_DWORD *)(*((_QWORD *)v69 + 7) + v70) = (char)v55 | 0x1E60C000 | (v67 >> 3) & 0xE19F3FE0;
        v69[50] += 4;
        if ((v68 & 0x8000000000000000) == 0)
          goto LABEL_64;
        v71 = *(_QWORD *)(a1 + 8);
        v72 = *(_DWORD *)(v71 + 200);
        v61 = (unsigned int *)(v71 + 200);
        v60 = v72;
        v63 = (JSC::AssemblerBuffer *)(v61 - 36);
        v64 = v72 + 4;
        v65 = *(v61 - 2);
        v58 = 509689856;
      }
      if (v64 > v65)
      {
        JSC::AssemblerBuffer::outOfLineGrow(v63, v40, v41, v42, v43, v44, v45, v46);
        v60 = *v61;
      }
      v66 = v58 | (char)v55 | (32 * (char)v55);
LABEL_63:
      *(_DWORD *)(*(_QWORD *)v63 + v60) = v66;
      *v61 += 4;
LABEL_64:
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Floor(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = COERCE_UNSIGNED_INT(floorf(*(float *)&a2));
    *((_WORD *)a4 + 4) = -767;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Floor";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -766;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Floor";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E254000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Floor(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *(double *)a4 = floor(*(double *)&a2);
    *(_WORD *)(a4 + 8) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Floor";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *(_QWORD *)a4 = v32;
    *(_WORD *)(a4 + 8) = -1022;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, *(_QWORD *)(a4 + 8), IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Floor";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E654000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Ceil(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = COERCE_UNSIGNED_INT(ceilf(*(float *)&a2));
    *((_WORD *)a4 + 4) = -767;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Ceil";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -766;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Ceil";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E24C000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Ceil(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *(double *)a4 = ceil(*(double *)&a2);
    *(_WORD *)(a4 + 8) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Ceil";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *(_QWORD *)a4 = v32;
    *(_WORD *)(a4 + 8) = -1022;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, *(_QWORD *)(a4 + 8), IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Ceil";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E64C000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Nearest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = COERCE_UNSIGNED_INT(nearbyintf(*(float *)&a2));
    *((_WORD *)a4 + 4) = -767;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Nearest";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -766;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Nearest";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E244000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Nearest(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *(double *)a4 = nearbyint(*(double *)&a2);
    *(_WORD *)(a4 + 8) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Nearest";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *(_QWORD *)a4 = v32;
    *(_WORD *)(a4 + 8) = -1022;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, *(_QWORD *)(a4 + 8), IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Nearest";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E644000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF32Trunc(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = COERCE_UNSIGNED_INT(truncf(*(float *)&a2));
    *((_WORD *)a4 + 4) = -767;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Trunc";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -766;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F32Trunc";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E25C000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addF64Trunc(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44[2];
  unsigned int v45;
  uint64_t v46[3];
  const char *v47;

  v44[0] = a2;
  v44[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *(double *)a4 = trunc(*(double *)&a2);
    *(_WORD *)(a4 + 8) = -1023;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Trunc";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v44, v46);
    }
LABEL_21:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, a6, a7, a8);
  v45 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *(_QWORD *)a4 = v32;
    *(_WORD *)(a4 + 8) = -1022;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, *(_QWORD *)(a4 + 8), IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v46 = *(_OWORD *)a4;
      v47 = "F64Trunc";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v43 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v43;
        }
        while (v43 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v47, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v44, (int *)&v45, v46);
      LOWORD(IfNecessary) = v45;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = ((__int16)IfNecessary >> 3) & 0xFFFFFFE0 | (v40 >> 8) | 0x1E65C000;
    v41[50] += 4;
    goto LABEL_21;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addRefIsNull(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  unsigned int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47[2];
  unsigned int v48;
  uint64_t v49[3];
  const char *v50;

  v47[0] = a2;
  v47[1] = a3;
  v13 = a3;
  if (a3 == 1)
  {
    *a4 = a2 == 2;
    *((_WORD *)a4 + 4) = -255;
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v49 = *(_OWORD *)a4;
      v50 = "RefIsNull";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v14 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v14;
        }
        while (v14 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v50, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, v47, v49);
    }
LABEL_23:
    *a9 = 0;
    a9[8] = 0;
    return;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v48 = IfNecessary;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v17, v18, v19, v20, v21);
  if (v13 == 2)
  {
    v27 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v27)
      *(_DWORD *)(a1 + 1280) = v27;
    if ((v22 & 7) != 1 || ((-8 * v27) ^ v22) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v22);
  }
  v28 = *(_QWORD *)(a1 + 88);
  v29 = *(_DWORD *)(v28 + 596);
  if (v29)
  {
    v30 = *(_QWORD *)(v28 + 584) + 1232 * v29;
    v31 = *(_DWORD *)(v28 + 68) + *(_DWORD *)(v30 - 32);
    if (*(_DWORD *)(v30 - 160) == 5)
      v32 = v31 + 1;
    else
      v32 = v31;
    *a4 = v32;
    *((_WORD *)a4 + 4) = -254;
    v40 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v32, a4[1], IfNecessary, v23, v24, v25, v26);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v49 = *(_OWORD *)a4;
      v50 = "RefIsNull";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v46 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v46;
        }
        while (v46 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v50, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v47, (int *)&v48, v49);
      LOWORD(IfNecessary) = v48;
    }
    v41 = *(_DWORD **)(a1 + 8);
    v42 = v41[50];
    v43 = ((__int16)IfNecessary >> 3) | 0xF100081F;
    if (v42 + 4 > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v42 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v42) = v43;
    v44 = v41[50];
    v45 = v44 + 4;
    v41[50] = v44 + 4;
    if ((v44 + 8) > v41[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v33, v34, v35, v36, v37, v38, v39);
      v45 = v41[50];
    }
    *(_DWORD *)(*((_QWORD *)v41 + 7) + v45) = (v40 >> 8) & 0x1F | 0x1A9F17E0;
    v41[50] += 4;
    goto LABEL_23;
  }
  __break(0xC471u);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addRefAsNonNull(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v14;
  unsigned int IfNecessary;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  _DWORD *v52;
  _QWORD *v53;
  unsigned int *v54;
  unsigned int v55;
  BOOL v56;
  int v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;

  v14 = a3;
  if (a3 == 1)
  {
    IfNecessary = 2050;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)a2, a3, 0x802uLL, a5, a6, a7, a8);
    JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v16, v17, v18, v19, v20);
    LOBYTE(v25) = 8;
  }
  else
  {
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    v25 = IfNecessary >> 8;
    v31 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v26, v27, v28, v29, v30);
    if (v14 == 2)
    {
      v32 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
      if (*(_DWORD *)(a1 + 1280) < v32)
        *(_DWORD *)(a1 + 1280) = v32;
      if ((v31 & 7) != 1 || ((-8 * v32) ^ v31) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v31);
    }
  }
  v33 = *(_QWORD *)(a1 + 88);
  v34 = *(_DWORD *)(v33 + 596);
  if (v34)
  {
    v35 = *(_QWORD *)(v33 + 584) + 1232 * v34;
    v36 = *(_DWORD *)(v33 + 68) + *(_DWORD *)(v35 - 32);
    if (*(_DWORD *)(v35 - 160) == 5)
      v37 = v36 + 1;
    else
      v37 = v36;
    *a4 = v37;
    *((_WORD *)a4 + 4) = -510;
    v38 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v37, a4[1], 0, v21, v22, v23, v24);
    JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, (char)v25, 2, v39, v40, v41, v42, (uint64_t)&v75);
    v77 = v75;
    v48 = v76;
    v78 = v76;
    if (v75 != -1)
    {
      v49 = (_QWORD *)(a1 + 2760);
      v50 = *(unsigned int *)(a1 + 2772);
      if ((_DWORD)v50 == *(_DWORD *)(a1 + 2768))
      {
        v51 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, (void *)(v50 + 1), (unint64_t)&v77, v43, v44, v45, v46, v47);
        v52 = (_DWORD *)(*(_QWORD *)(a1 + 2760) + 12 * *(unsigned int *)(a1 + 2772));
        *v52 = *(_DWORD *)v51;
        v53 = v52 + 1;
        v48 = *(_QWORD *)(v51 + 4);
      }
      else
      {
        v54 = (unsigned int *)(*v49 + 12 * v50);
        *v54 = v75;
        v53 = v54 + 1;
      }
      *v53 = v48;
      ++*(_DWORD *)(a1 + 2772);
    }
    v55 = v38 & 7;
    if ((IfNecessary & 6) == 2)
    {
      v56 = v55 > 5;
      v57 = (1 << v55) & 0x32;
      if (v56 || v57 == 0)
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveRegister(a1, 0xFFFFFFE4, IfNecessary, v38);
      }
      else
      {
        v77 = v38;
        v59 = *(_QWORD *)(a1 + 8);
        v60 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v77);
        JSC::MacroAssemblerARM64::store64(v59, (char)v25, v60, v61, v62, v63, v64, v65);
      }
    }
    else
    {
      v56 = v55 > 5;
      v66 = (1 << v55) & 0x32;
      if (v56 || v66 == 0)
      {
        v77 = IfNecessary;
        v68 = *(_QWORD *)(a1 + 8);
        v69 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v77);
        JSC::MacroAssemblerARM64::load64(v68, v69, ((__int16)v38 >> 8), v70, v71, v72, v73, v74);
      }
      else
      {
        JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveMemory(a1, -28, IfNecessary, v38);
      }
    }
    *a9 = 0;
    a9[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitCatchPrologue(JSC::Wasm::BBQJITImpl::BBQJIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unsigned int v20;
  int v21;

  v9 = (_DWORD *)*((_QWORD *)this + 1);
  v10 = v9[50];
  v21 = v10;
  if (v10 < v9[13])
  {
    do
    {
      if ((v10 + 4) > v9[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), a2, a3, a4, a5, a6, a7, a8);
        v10 = v9[50];
      }
      *(_DWORD *)(*((_QWORD *)v9 + 7) + v10) = -721215457;
      v10 = v9[50] + 4;
      v9[50] = v10;
    }
    while (v10 < v9[13]);
    v21 = v10;
  }
  v11 = v10;
  if ((v10 + 4) > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v11) = -763363320;
  v12 = v9[50];
  v13 = v12 + 4;
  v9[50] = v12 + 4;
  if ((v12 + 8) > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v13) = -224395256;
  v14 = v9[50];
  v15 = v14 + 4;
  v9[50] = v14 + 4;
  if ((v14 + 8) > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), a2, a3, a4, a5, a6, a7, a8);
    v15 = v9[50];
  }
  v16 = (_QWORD *)((char *)this + 1256);
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v15) = -222298104;
  v9[50] += 4;
  v17 = *((unsigned int *)this + 317);
  if ((_DWORD)v17 == *((_DWORD *)this + 316))
  {
    v18 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::DataLabelPtr,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, (void *)(v17 + 1), (unint64_t)&v21, a4, a5, a6, a7, a8);
    v17 = *((unsigned int *)this + 317);
    *(_DWORD *)(*((_QWORD *)this + 157) + 4 * v17) = *v18;
  }
  else
  {
    *(_DWORD *)(*v16 + 4 * v17) = v10;
  }
  *((_DWORD *)this + 317) = v17 + 1;
  v19 = (_DWORD *)*((_QWORD *)this + 1);
  v20 = v19[50];
  if (v20 + 4 > v19[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v19 + 14), a2, a3, a4, a5, a6, a7, a8);
    v20 = v19[50];
  }
  *(_DWORD *)(*((_QWORD *)v19 + 7) + v20) = -886545473;
  v19[50] += 4;
  if (*(_DWORD *)(*((_QWORD *)this + 6) + 104) != -1)
    JSC::Wasm::BBQJITImpl::BBQJIT::loadWebAssemblyGlobalState((uint64_t)this, 22, 23, a4, a5, a6, a7, a8);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitCatchAllImpl(JSC::Wasm::BBQJITImpl::BBQJIT *this, JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::AssemblerBuffer *v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  JSC::AssemblerBuffer *v32;
  WTF *v33;
  uint64_t v34;
  _BYTE v35[512];

  v10 = (_DWORD *)*((_QWORD *)this + 1);
  v11 = v10[50];
  LODWORD(v33) = v11;
  if (v11 < v10[13])
  {
    v23 = (JSC::AssemblerBuffer *)(v10 + 14);
    do
    {
      if ((v11 + 4) > v10[48])
      {
        v32 = v23;
        v24 = v10;
        JSC::AssemblerBuffer::outOfLineGrow(v23, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v10 = v24;
        v23 = v32;
        v11 = v24[50];
      }
      *(_DWORD *)(*((_QWORD *)v10 + 7) + v11) = -721215457;
      v11 = v10[50] + 4;
      v10[50] = v11;
    }
    while (v11 < v10[13]);
    LODWORD(v33) = v11;
  }
  v12 = (_QWORD *)((char *)this + 2976);
  v10[52] = 0;
  v13 = *((unsigned int *)this + 747);
  if ((_DWORD)v13 == *((_DWORD *)this + 746))
  {
    v14 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v13 + 1, (unint64_t)&v33);
    v13 = *((unsigned int *)this + 747);
    *(_DWORD *)(*((_QWORD *)this + 372) + 4 * v13) = *v14;
  }
  else
  {
    *(_DWORD *)(*v12 + 4 * v13) = v11;
  }
  *((_DWORD *)this + 747) = v13 + 1;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCatchPrologue(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  JSC::Wasm::BBQJITImpl::BBQJIT::bind((uint64_t)this, *((unsigned int *)a2 + 34), 65026, 2, v15, v16, v17, v18);
  v33 = (WTF *)v35;
  v34 = 16;
  if (*((_DWORD *)a2 + 7))
  {
    v25 = 0;
    v26 = 0;
    do
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::bind((uint64_t)this, *(_QWORD *)((char *)v33 + v25 + 16), *(_QWORD *)((char *)v33 + v25 + 24), *(unsigned int *)(*((_QWORD *)a2 + 2) + 4 * v26++), v19, v20, v21, v22);
      v25 += 32;
    }
    while (v26 < *((unsigned int *)a2 + 7));
    v30 = v33;
    if (v35 != (_BYTE *)v33 && v33 != 0)
    {
      v33 = 0;
      LODWORD(v34) = 0;
      WTF::fastFree((unint64_t)v30, v27, v28, v29, v19, v20, v21, v22);
    }
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitCatchImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::ARM64LogicalImmediate *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  WTF *v102;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v114;
  int8x16_t *v115;
  unsigned __int8 v116;
  unint64_t v117;
  uint64_t v118;
  __int16 v119;
  WTF *v120;
  uint64_t v121;
  _BYTE v122[512];
  uint64_t v123[4];

  v9 = a3;
  v10 = a1;
  v11 = *(_DWORD **)(a1 + 8);
  v12 = v11[50];
  LODWORD(v120) = v12;
  if (v12 < v11[13])
  {
    do
    {
      if ((v12 + 4) > v11[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 14), a2, a3, a4, a5, a6, a7, a8);
        v12 = v11[50];
      }
      *(_DWORD *)(*((_QWORD *)v11 + 7) + v12) = -721215457;
      v12 = v11[50] + 4;
      v11[50] = v12;
    }
    while (v12 < v11[13]);
    LODWORD(v120) = v12;
  }
  v13 = (_QWORD *)(v10 + 2976);
  v11[52] = 0;
  v14 = *(unsigned int *)(v10 + 2988);
  if ((_DWORD)v14 == *(_DWORD *)(v10 + 2984))
  {
    v15 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)&v120);
    v14 = *(unsigned int *)(v10 + 2988);
    *(_DWORD *)(*(_QWORD *)(v10 + 2976) + 4 * v14) = *v15;
  }
  else
  {
    *(_DWORD *)(*v13 + 4 * v14) = v12;
  }
  *(_DWORD *)(v10 + 2988) = v14 + 1;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitCatchPrologue((JSC::Wasm::BBQJITImpl::BBQJIT *)v10, a2, a3, a4, a5, a6, a7, a8);
  JSC::Wasm::BBQJITImpl::BBQJIT::bind(v10, *(unsigned int *)(a2 + 136), 65026, 2, v16, v17, v18, v19);
  v120 = (WTF *)v122;
  v121 = 16;
  if (*(_DWORD *)(a2 + 28))
  {
    v109 = 0;
    v110 = 0;
    do
    {
      JSC::Wasm::BBQJITImpl::BBQJIT::bind(v10, *(_QWORD *)((char *)v120 + v109 + 16), *(_QWORD *)((char *)v120 + v109 + 24), *(unsigned int *)(*(_QWORD *)(a2 + 16) + 4 * v110++), v23, v24, v25, v26);
      v109 += 32;
    }
    while (v110 < *(unsigned int *)(a2 + 28));
  }
  if (*(_DWORD *)(v9 + 32))
    v27 = 0;
  else
    v27 = v9 + 8;
  if (*(_DWORD *)(v27 + 8))
  {
    v117 = 0;
    v118 = 0;
    v115 = (int8x16_t *)v10;
    v119 = 0;
    v28 = *(_QWORD *)(v10 + 616);
    if (v28)
      v29 = __clz(__rbit64(v28));
    else
      v29 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)v10, v20, v21, v22, v23, v24, v25, v26);
    v30 = (unint64_t)JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v115, v29);
    v116 = v30;
    v31 = *(_DWORD **)(v10 + 8);
    v32 = v31[50];
    if (v32 + 4 > v31[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v31 + 14), (uint64_t)v20, v21, v22, v23, v24, v25, v26);
      v32 = v31[50];
    }
    *(_DWORD *)(*((_QWORD *)v31 + 7) + v32) = v30 & 0x1F | 0xF8418000;
    v31[50] += 4;
    v33 = v9 + 8;
    if (*(_DWORD *)(v9 + 32))
      v33 = 0;
    if (*(_DWORD *)(v33 + 8))
    {
      v34 = 0;
      v35 = 0;
      v112 = v30;
      do
      {
        v36 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 16 * (v35 + *(_DWORD *)(v9 + 20)));
        v37 = v36;
        v38 = *(_DWORD *)(a2 + 136);
        if (*(_DWORD *)(a2 + 8) == 5)
          ++v38;
        if (v36 - 192 <= 0x33)
        {
          if (((1 << (v36 + 64)) & 0xFFC19C001C000) != 0)
          {
            LOBYTE(v36) = -2;
          }
          else if (v36 == 192)
          {
            __break(0xC471u);
            JUMPOUT(0x198F8756CLL);
          }
        }
        v30 = v30 & 0xFFFFFFFF00000000 | (v35 + v38);
        v123[0] = v30;
        v123[1] = ((unint64_t)v36 << 8) | 2;
        v43 = JSC::Wasm::BBQJITImpl::BBQJIT::canonicalSlot(v10, v30, 2);
        v114 = v43;
        switch(v37)
        {
          case 206:
          case 207:
          case 208:
          case 222:
          case 223:
          case 224:
          case 227:
          case 228:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 254:
            v44 = *(_QWORD *)(v10 + 8);
            v45 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v114);
            if (!*(_BYTE *)(v44 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x198F87384);
            }
            v51 = v45;
            *(_DWORD *)(*(_QWORD *)(v44 + 264) + 208) &= ~*(_DWORD *)(v44 + 288);
            JSC::MacroAssemblerARM64::load64(v44, v112 & 0x7FFFFFFFFLL | ((unint64_t)((8 * v34 + 8) >> 3) << 35), *(char *)(v44 + 272), v46, v47, v48, v49, v50);
            if (!*(_BYTE *)(v44 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x198F873A4);
            }
            goto LABEL_26;
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 225:
          case 226:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
            break;
          case 251:
            v81 = *(_QWORD *)(v10 + 8);
            v111 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v114);
            JSC::MacroAssemblerARM64::loadVector(v81, v112 & 0x7FFFFFFFFLL | ((unint64_t)((8 * v34 + 8) >> 3) << 35), 31, v82, v83, v84, v85, v86);
            JSC::MacroAssemblerARM64::storeVector(v81, 31, v111, v87, v88, v89, v90, v91);
            break;
          case 252:
            v44 = *(_QWORD *)(v10 + 8);
            v92 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v114);
            if (!*(_BYTE *)(v44 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x198F874ACLL);
            }
            v51 = v92;
            *(_DWORD *)(*(_QWORD *)(v44 + 264) + 208) &= ~*(_DWORD *)(v44 + 288);
            JSC::MacroAssemblerARM64::load64(v44, v112 & 0x7FFFFFFFFLL | ((unint64_t)((8 * v34 + 8) >> 3) << 35), *(char *)(v44 + 272), v93, v94, v95, v96, v97);
            if (!*(_BYTE *)(v44 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x198F874CCLL);
            }
LABEL_26:
            *(_DWORD *)(*(_QWORD *)(v44 + 264) + 208) &= ~*(_DWORD *)(v44 + 288);
            JSC::MacroAssemblerARM64::store64(v44, *(char *)(v44 + 272), v51, v52, v53, v54, v55, v56);
            break;
          case 253:
            v62 = *(_QWORD *)(v10 + 8);
            v63 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v114);
            if (!*(_BYTE *)(v62 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x198F8748CLL);
            }
            v69 = v63;
            *(_DWORD *)(*(_QWORD *)(v62 + 264) + 208) &= ~*(_DWORD *)(v62 + 288);
            JSC::MacroAssemblerARM64::load32(v62, v112 & 0x7FFFFFFFFLL | ((unint64_t)((8 * v34 + 8) >> 3) << 35), *(char *)(v62 + 272), v64, v65, v66, v67, v68);
            if (!*(_BYTE *)(v62 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x198F8750CLL);
            }
            goto LABEL_41;
          case 255:
            v62 = *(_QWORD *)(v10 + 8);
            v75 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v114);
            if (!*(_BYTE *)(v62 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x198F8746CLL);
            }
            v69 = v75;
            *(_DWORD *)(*(_QWORD *)(v62 + 264) + 208) &= ~*(_DWORD *)(v62 + 288);
            JSC::MacroAssemblerARM64::load32(v62, v112 & 0x7FFFFFFFFLL | ((unint64_t)((8 * v34 + 8) >> 3) << 35), *(char *)(v62 + 272), v76, v77, v78, v79, v80);
            if (!*(_BYTE *)(v62 + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x198F874ECLL);
            }
LABEL_41:
            *(_DWORD *)(*(_QWORD *)(v62 + 264) + 208) &= ~*(_DWORD *)(v62 + 288);
            JSC::MacroAssemblerARM64::store32(v62, *(char *)(v62 + 272), v69, v70, v71, v72, v73, v74);
            break;
          default:
            if (v37 == 192)
            {
              __break(0xC471u);
              JUMPOUT(0x198F8759CLL);
            }
            return;
        }
        JSC::Wasm::BBQJITImpl::BBQJIT::bind(v10, v123[0], v123[1], v43, v39, v40, v41, v42);
        v57 = *(unsigned int *)(a4 + 12);
        if ((_DWORD)v57 == *(_DWORD *)(a4 + 8))
        {
          v98 = (__int128 *)WTF::Vector<JSC::Wasm::BBQJITImpl::BBQJIT::Value,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v57 + 1), (unint64_t)v123, v22, v23, v24, v25, v26);
          v57 = *(unsigned int *)(a4 + 12);
          v58 = *(_QWORD *)a4;
          v59 = *v98;
        }
        else
        {
          v58 = *(_QWORD *)a4;
          v59 = *(_OWORD *)v123;
        }
        *(_OWORD *)(v58 + 16 * v57) = v59;
        ++*(_DWORD *)(a4 + 12);
        if (v37 == 251)
          v60 = 2;
        else
          v60 = 1;
        v34 += v60;
        ++v35;
        v61 = v9 + 8;
        if (*(_DWORD *)(v9 + 32))
          v61 = 0;
      }
      while (v35 < *(_DWORD *)(v61 + 8));
    }
    if ((_BYTE)v119)
      goto LABEL_58;
    LOBYTE(v119) = 1;
    v99 = v116;
    v100 = v116 & 0x7F;
    if (v100 >= 0x40)
    {
      __break(1u);
    }
    else
    {
      v9 = 1 << v100;
      if ((v115[40].i64[1] & (1 << v100)) == 0)
      {
LABEL_58:
        if (!HIBYTE(v119))
        {
          HIBYTE(v119) = 1;
          v101 = v117;
          if (v117)
          {
            v104 = __clz(__rbit64(v117));
            do
            {
              if (v104 > 0x1Fu)
              {
                JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v115, (char)(v104 - 32));
              }
              else
              {
                v105 = 1 << v104;
                if ((v115[40].i64[1] & (1 << v104)) != 0)
                {
                  if (v104 >= v115[21].u32[1])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198F875ACLL);
                  }
                  v106 = v115[20].i64[1];
                  v115[62] = vandq_s8(v115[62], (int8x16_t)vdupq_n_s64(~v105));
                  if ((_BYTE)word_1ECF4C700)
                  {
                    *(_OWORD *)v123 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v104];
                    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v123, "\n");
                    v101 = v117;
                  }
                  v107 = v106 + 4 * v104;
                  if ((v101 & v105) == 0 || (*(_WORD *)(v107 + 1) & 7) == 3)
                  {
                    *(_DWORD *)v107 = 0;
                    v115[38].i64[1] |= v105;
                  }
                }
              }
              if (v104 > 0x3E)
                break;
              v101 = v117;
              if (!v117)
                break;
              v108 = __clz(__rbit64(v117 >> ((v104 + 1) & 0x3F))) + (((_BYTE)v104 + 1) & 0x3F);
              v104 = v108 >= 0x40 ? 64 : v108;
            }
            while (v108 < 0x40);
          }
        }
        goto LABEL_60;
      }
      v99 = (char)v116;
      if (v115[21].u32[1] <= (unint64_t)(char)v116)
      {
        __break(0xC471u);
        JUMPOUT(0x198F875A4);
      }
      v10 = v115[20].i64[1] + 4 * (char)v116;
      v115[62] = vandq_s8(v115[62], (int8x16_t)vdupq_n_s64(~v9));
      if (!(_BYTE)word_1ECF4C700)
      {
LABEL_55:
        if ((v117 & v9) == 0 || (*(_WORD *)(v10 + 1) & 7) == 3)
        {
          *(_DWORD *)v10 = 0;
          v115[38].i64[1] |= 1 << v100;
        }
        goto LABEL_58;
      }
    }
    *(_OWORD *)v123 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v99];
    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v123, "\n");
    goto LABEL_55;
  }
LABEL_60:
  v102 = v120;
  if (v122 != (_BYTE *)v120 && v120 != 0)
  {
    v120 = 0;
    LODWORD(v121) = 0;
    WTF::fastFree((unint64_t)v102, v20, v21, v22, v23, v24, v25, v26);
  }
}

void JSC::MacroAssemblerARM64::transfer64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!*(_BYTE *)(a1 + 212)
    || (*(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288),
        JSC::MacroAssemblerARM64::load64(a1, a2, *(char *)(a1 + 272), a4, a5, a6, a7, a8),
        !*(_BYTE *)(a1 + 212)))
  {
    __break(0xC471u);
    JUMPOUT(0x198F87700);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::store64(a1, *(char *)(a1 + 272), a3, v10, v11, v12, v13, v14);
}

void JSC::MacroAssemblerARM64::transferVector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  JSC::MacroAssemblerARM64::loadVector(a1, a2, 31, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::storeVector(a1, 31, a3, v10, v11, v12, v13, v14);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addRethrow(JSC::Wasm::BBQJITImpl::BBQJIT *this@<X0>, JSC::Wasm::BBQJITImpl::BBQJIT::ControlData *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _BYTE *a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  int v59;

  if (HIBYTE(word_1ECF4C700))
  {
    v56 = *((unsigned int *)a2 + 34);
    v57 = 65026;
    v58 = "Rethrow";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)this)
    {
      v49 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v49;
      }
      while (v49 < *(_DWORD *)this);
    }
    WTF::dataLog<char const*,char [2]>(&v58, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v56);
    if (v57 != 1 && v57 != 4)
    {
      v59 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)this, v56, v57, v50, v51, v52, v53, v54);
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v59);
    }
    WTF::dataLog<char [16]>("\n");
  }
  v11 = *((unsigned int *)this + 325);
  if ((_DWORD)v11 == -1)
    goto LABEL_30;
  *((_DWORD *)this + 325) = v11 + 1;
  if (!*((_BYTE *)this + 73) || *((_BYTE *)this + 72))
  {
    v12 = *((_QWORD *)this + 1);
    if (!*(_BYTE *)(v12 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198F87A64);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(*((unsigned int **)this + 1), (JSC::ARM64LogicalImmediate *)(v11 + 1), v12 + 264, a3, a4, a5, a6, a7);
    v20 = *(_DWORD *)(v12 + 200);
    if (v20 + 4 > *(_DWORD *)(v12 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v13, v14, v15, v16, v17, v18, v19);
      v20 = *(_DWORD *)(v12 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v12 + 56) + v20) = -1207811152;
    *(_DWORD *)(v12 + 200) += 4;
    JSC::Wasm::BBQJITImpl::BBQJIT::flushRegisters((uint64_t)this, v13, v14, v15, v16, v17, v18, v19);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::emitMove((uint64_t)this, (JSC::ARM64LogicalImmediate *)*((unsigned int *)a2 + 34), 0xFE02uLL, 258, a4, a5, a6, a7);
  v28 = (_DWORD *)*((_QWORD *)this + 1);
  v29 = v28[50];
  if (v29 + 4 > v28[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v28 + 14), v21, v22, v23, v24, v25, v26, v27);
    v29 = v28[50];
  }
  *(_DWORD *)(*((_QWORD *)v28 + 7) + v29) = -1441594400;
  v28[50] += 4;
  v30 = *((_QWORD *)this + 1);
  v31 = *(_DWORD *)(v30 + 200);
  if (v31 + 4 > *(_DWORD *)(v30 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v30 + 56), v21, v22, v23, v24, v25, v26, v27);
    v31 = *(_DWORD *)(v30 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v30 + 56) + v31) = -129990648;
  *(_DWORD *)(v30 + 200) += 4;
  JSC::AssemblyHelpers::copyCalleeSavesToVMEntryFrameCalleeSavesBuffer((char *)v30, 8, v22, v23, v24, v25, v26, v27);
  if (!*(_BYTE *)(v30 + 212))
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x198F87A24);
  }
  *(_DWORD *)(*(_QWORD *)(v30 + 264) + 208) &= ~*(_DWORD *)(v30 + 288);
  v37 = *(_BYTE *)(v30 + 272);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v30, (uint64_t)operationWasmRethrow, v37, v32, v33, v34, v35, v36);
  *(_DWORD *)(v30 + 208) = 0;
  v45 = (32 * (v37 & 0x1F)) | 0xD63F0000;
  v46 = *(_DWORD *)(v30 + 200);
  if (v46 + 4 > *(_DWORD *)(v30 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v30 + 56), v38, v39, v40, v41, v42, v43, v44);
    v46 = *(_DWORD *)(v30 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v30 + 56) + v46) = v45;
  v47 = *(_DWORD *)(v30 + 200);
  v48 = v47 + 4;
  *(_DWORD *)(v30 + 200) = v47 + 4;
  if ((v47 + 8) > *(_DWORD *)(v30 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v30 + 56), v38, v39, v40, v41, v42, v43, v44);
    v48 = *(_DWORD *)(v30 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v30 + 56) + v48) = -702611456;
  *(_DWORD *)(v30 + 200) += 4;
  *a8 = 0;
  a8[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addBranchNull(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  int v10;
  uint64_t v15;
  unint64_t v16;
  __int16 IfNecessary;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _DWORD *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  v10 = a6;
  v43 = a3;
  v44 = a4;
  if (a4 == 1)
  {
    v15 = a3 == 2;
    v16 = 65281;
  }
  else
  {
    IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a3, a4, a4, a5, a6, a7, a8);
    v27 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, 2050, 65284, v18, v19, v20, v21, v22);
    v28 = *(_DWORD **)(a1 + 8);
    v29 = v28[50];
    if (v29 + 4 > v28[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v28 + 14), v23, v24, v25, v26, a6, a7, a8);
      v29 = v28[50];
    }
    *(_DWORD *)(*((_QWORD *)v28 + 7) + v29) = (IfNecessary >> 3) | 0xF100081F;
    v30 = v28[50];
    v31 = v30 + 4;
    v28[50] = v30 + 4;
    if (v10)
      v32 = 4096;
    else
      v32 = 0;
    v33 = v32 & 0xFFFFFFE0 | (v27 >> 8) & 0x1F;
    if ((v30 + 8) > v28[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v28 + 14), v23, v24, v25, v26, a6, a7, a8);
      v31 = v28[50];
    }
    *(_DWORD *)(*((_QWORD *)v28 + 7) + v31) = v33 ^ 0x1A9F17E0;
    v28[50] += 4;
    v15 = 2050;
    v16 = 65284;
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::addBranch(a1, a2, v15, v16, a5, a6, a7, a8, &v41);
  if (!v42)
  {
    if (HIBYTE(word_1ECF4C700))
    {
      v41 = "BrOnNull/NonNull";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v34 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v34;
        }
        while (v34 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v41, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v43);
      if (v44 != 1 && v44 != 4)
      {
        v45 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, v43, v44, v35, v36, v37, v38, v39);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v45);
      }
      WTF::dataLog<char [16]>("\n");
      if ((v10 & 1) != 0)
        goto LABEL_15;
    }
    else if ((v10 & 1) != 0)
    {
LABEL_15:
      *a9 = 0;
      a9[8] = 0;
      return;
    }
    *(_QWORD *)a7 = v43;
    *(_WORD *)(a7 + 8) = v44;
    goto LABEL_15;
  }
  *(_QWORD *)a9 = v41;
  a9[8] = 1;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addBranchCast(uint64_t a1@<X0>, uint64_t a2@<X1>, JSC::ARM64LogicalImmediate *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v17;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v40;
  WTF *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  JSC::ARM64LogicalImmediate *v54;
  uint64_t v55;
  int v56[3];

  v9 = a8;
  v10 = a7;
  v11 = a6;
  v54 = a3;
  v55 = a4;
  if (a4 == 1)
  {
    if (a3 == (JSC::ARM64LogicalImmediate *)2)
    {
      v17 = a6 ^ a8;
    }
    else
    {
      v40 = BYTE1(dword_1ECF4C7B0)
         && (BYTE2(dword_1ECF4C7B0) ? (v32 = (unint64_t)((int)a7 + 19) >= 2) : (v32 = 1), !v32)
         || a7 == -20;
      v17 = v40 ^ a8;
    }
    v52 = v17;
    LOWORD(v53) = -255;
  }
  else
  {
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, 2050, 65028, a4, a5, a6, a7, a8);
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMove(a1, a3, a4, v19, v20, v21, v22, v23);
    v41 = (WTF *)&v43;
    v43 = xmmword_19919F700;
    v44 = 2050;
    v45 = -508;
    v46 = v11;
    v47 = 65281;
    v48 = v10;
    v49 = 65281;
    v50 = v9;
    v51 = 65281;
    v42 = 0x500000008;
    v24 = *(_QWORD *)(a1 + 88);
    v25 = *(_DWORD *)(v24 + 596);
    if (!v25)
    {
      __break(0xC471u);
      JUMPOUT(0x198F87F64);
    }
    v26 = *(_QWORD *)(v24 + 584) + 1232 * v25;
    LODWORD(v24) = *(_DWORD *)(v24 + 68) + *(_DWORD *)(v26 - 32);
    if (*(_DWORD *)(v26 - 160) == 5)
      v24 = (v24 + 1);
    else
      v24 = v24;
    v52 = v24;
    LOWORD(v53) = -254;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitCCall<int (*)(JSC::Wasm::Instance *,long long,unsigned int,int,BOOL),8ul>(a1, (uint64_t)operationWasmRefTest, (uint64_t)&v41, (uint64_t)&v52);
    v31 = v41;
    if (&v43 != (__int128 *)v41 && v41)
    {
      v41 = 0;
      LODWORD(v42) = 0;
      WTF::fastFree((unint64_t)v31, v27, v28, v29, v30, a6, a7, a8);
    }
    v17 = v52;
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::addBranch(a1, a2, v17, v53, a5, a6, a7, a8, &v41);
  if ((_BYTE)v42)
  {
    *(_QWORD *)a9 = v41;
    *(_BYTE *)(a9 + 8) = 1;
  }
  else
  {
    if (HIBYTE(word_1ECF4C700))
    {
      v41 = (WTF *)"BrOnCast/CastFail";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v33 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v33;
        }
        while (v33 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>((const char **)&v41, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v54);
      if (v55 != 1 && v55 != 4)
      {
        v56[0] = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v54, v55, v34, v35, v36, v37, v38);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", v56);
      }
      WTF::dataLog<char [16]>("\n");
    }
    *(_BYTE *)a9 = 0;
    *(_BYTE *)(a9 + 8) = 0;
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::restoreWebAssemblyGlobalState(JSC::Wasm::BBQJITImpl::BBQJIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unsigned int v10;

  v9 = (_DWORD *)*((_QWORD *)this + 1);
  v10 = v9[50];
  if (v10 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v10) = -129956941;
  v9[50] += 4;
  if (*(_DWORD *)(*((_QWORD *)this + 6) + 104) != -1)
    JSC::Wasm::BBQJITImpl::BBQJIT::loadWebAssemblyGlobalState((uint64_t)this, 22, 23, a4, a5, a6, a7, a8);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::restoreWebAssemblyGlobalStateAfterWasmCall(JSC::Wasm::BBQJITImpl::BBQJIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  _DWORD *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29[3];

  v9 = *((_QWORD *)this + 6);
  if (*(_DWORD *)(v9 + 104) != -1 && (*((_BYTE *)this + 56) == 1 || *(_BYTE *)(v9 + 112)))
  {
    v10 = (_DWORD *)*((_QWORD *)this + 1);
    v11 = v10[50];
    if (v11 + 4 > v10[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 14), a2, a3, a4, a5, a6, a7, a8);
      v11 = v10[50];
    }
    *(_DWORD *)(*((_QWORD *)v10 + 7) + v11) = -129956952;
    v10[50] += 4;
    JSC::MacroAssemblerARM64::branch64(*((_QWORD *)this + 1), 0, 8, 19, a5, a6, a7, a8, (uint64_t)v29);
    v19 = (_DWORD *)*((_QWORD *)this + 1);
    v20 = v19[50];
    if (v20 + 4 > v19[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v19 + 14), v12, v13, v14, v15, v16, v17, v18);
      v20 = v19[50];
    }
    *(_DWORD *)(*((_QWORD *)v19 + 7) + v20) = -1442315277;
    v19[50] += 4;
    v21 = (_DWORD *)*((_QWORD *)this + 1);
    v22 = v21[50];
    if (v22 + 4 > v21[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v21 + 14), v12, v13, v14, v15, v16, v17, v18);
      v22 = v21[50];
    }
    *(_DWORD *)(*((_QWORD *)v21 + 7) + v22) = -1455235466;
    v21[50] += 4;
    JSC::AssemblyHelpers::cageConditionally(*((_DWORD **)this + 1), 0, 22, 23, 8, v16, v17, v18);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v29, *((_QWORD *)this + 1), v23, v24, v25, v26, v27, v28);
  }
  else
  {
    JSC::Wasm::BBQJITImpl::BBQJIT::restoreWebAssemblyGlobalState(this, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoad(uint64_t a1@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  _DWORD *v68;
  _QWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  __int16 v85;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  int i;
  unsigned int v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  _DWORD *v108;
  unint64_t *v109;
  _DWORD *v110;
  int *v111;
  __int16 v112;
  _DWORD *v113;
  unsigned int v114;
  uint64_t v115;
  __int16 v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char **v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char **v129;
  const char *v130;
  uint64_t v131[3];
  int v132;
  JSC::ARM64LogicalImmediate *v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  int8x16_t *v137;
  signed __int8 v138;
  unint64_t v139;
  uint64_t v140;
  __int16 v141;
  const char *v142;
  int v143;
  __int128 v144;

  v10 = a4;
  v133 = a2;
  v134 = a3;
  v132 = a4;
  v131[0] = a1;
  v131[1] = (uint64_t)&v133;
  v131[2] = (uint64_t)&v132;
  v15 = a4;
  v139 = 0;
  v140 = 0;
  v137 = (int8x16_t *)a1;
  v141 = 0;
  v16 = *(_QWORD *)(a1 + 616);
  if (v16)
    v17 = __clz(__rbit64(v16));
  else
    v17 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
  v18 = v15 + 15;
  v19 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v137, v17);
  v138 = v19;
  if (a3 == 1)
  {
    LOBYTE(v27) = v19;
    v28 = v15 + a2;
    if (!(v28 >> 31) && (v28 < 0x100 || v28 <= 0xFFF0 && (v28 & 0xF) == 0))
    {
      if (*(_BYTE *)(a1 + 56) == 1)
      {
        if (v15 < (unint64_t)dword_1ECF4C6F4 << 16)
          goto LABEL_67;
        v98 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 108);
        v99 = v98 << 16;
        v97 = (_DWORD)v98 == -1;
        v100 = 0xFFFFFFFFLL;
        if (!v97)
          v100 = v99;
        if (v18 + a2 < v100)
          goto LABEL_67;
        v101 = *(_QWORD *)(a1 + 8);
        for (i = *(_DWORD *)(v101 + 200); i < *(_DWORD *)(v101 + 52); *(_DWORD *)(v101 + 200) = i)
        {
          if ((i + 4) > *(_DWORD *)(v101 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v101 + 56), v20, v21, v22, v23, v24, v25, v26);
            i = *(_DWORD *)(v101 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v101 + 56) + i) = -721215457;
          i = *(_DWORD *)(v101 + 200) + 4;
        }
        v103 = i;
        if ((i + 4) > *(_DWORD *)(v101 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v101 + 56), v20, v21, v22, v23, v24, v25, v26);
          v103 = *(_DWORD *)(v101 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v101 + 56) + v103) = 335544320;
        *(_DWORD *)(v101 + 200) += 4;
        v104 = 0xFF000F4500000000;
        if (!*(_BYTE *)(v101 + 328))
          v104 = 0xFF000F4100000000;
        LODWORD(v144) = i;
        *(_QWORD *)((char *)&v144 + 4) = v104;
        if (i == -1)
          goto LABEL_67;
        v105 = (_QWORD *)(a1 + 1360);
        v106 = *(unsigned int *)(a1 + 1372);
        if ((_DWORD)v106 == *(_DWORD *)(a1 + 1368))
        {
          v107 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v105, (void *)(v106 + 1), (unint64_t)&v144, v22, v23, v24, v25, v26);
          v108 = (_DWORD *)(*(_QWORD *)(a1 + 1360) + 12 * *(unsigned int *)(a1 + 1372));
          *v108 = *(_DWORD *)v107;
          v109 = (unint64_t *)(v108 + 1);
          v104 = *(_QWORD *)(v107 + 4);
        }
        else
        {
          v111 = (int *)(*v105 + 12 * v106);
          *v111 = i;
          v109 = (unint64_t *)(v111 + 1);
        }
        *v109 = v104;
      }
      else
      {
        if (*(_BYTE *)(a1 + 56))
          goto LABEL_67;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), v18 + a2, 8, v22, v23, v24, v25, v26);
        JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 2, 8, 23, v29, v30, v31, v32, (uint64_t)&v135);
        LODWORD(v144) = v135;
        v33 = v136;
        *(_QWORD *)((char *)&v144 + 4) = v136;
        if (v135 == -1)
          goto LABEL_67;
        v34 = (_QWORD *)(a1 + 1360);
        v35 = *(unsigned int *)(a1 + 1372);
        if ((_DWORD)v35 == *(_DWORD *)(a1 + 1368))
        {
          v36 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, (void *)(v35 + 1), (unint64_t)&v144, v22, v23, v24, v25, v26);
          v37 = (_DWORD *)(*(_QWORD *)(a1 + 1360) + 12 * *(unsigned int *)(a1 + 1372));
          *v37 = *(_DWORD *)v36;
          v38 = v37 + 1;
          v33 = *(_QWORD *)(v36 + 4);
        }
        else
        {
          v110 = (_DWORD *)(*v34 + 12 * v35);
          *v110 = v135;
          v38 = v110 + 1;
        }
        *v38 = v33;
      }
      ++*(_DWORD *)(a1 + 1372);
LABEL_67:
      v84 = JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoad(JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>(v131, (v28 << 32) | 0x16, v21, v22, v23, v24, v25, v26);
      v85 = v112;
      goto LABEL_78;
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, a2, a3, ((unint64_t)v19 << 8) | 2, v23, v24, v25, v26);
  }
  else
  {
    v27 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, (uint64_t)a2, a3, v22, v23, v24, v25, v26) >> 8;
  }
  if (*(_BYTE *)(a1 + 56) == 1)
  {
    if (v15 < (unint64_t)dword_1ECF4C6F4 << 16)
      goto LABEL_28;
    v54 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 108);
    if ((_DWORD)v54 == -1)
      v55 = 0xFFFFFFFFLL;
    else
      v55 = v54 << 16;
    JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v27, 8);
    JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v15 + 15, 8, 8, v56, v57, v58, v59);
    JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 2, 8, v55, v60, v61, v62, v63, (uint64_t)&v135);
  }
  else
  {
    if (*(_BYTE *)(a1 + 56))
      goto LABEL_28;
    JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v27, 8);
    JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v15 + 15, 8, 8, v46, v47, v48, v49);
    JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 2, 8, 23, v50, v51, v52, v53, (uint64_t)&v135);
  }
  LODWORD(v144) = v135;
  v64 = v136;
  *(_QWORD *)((char *)&v144 + 4) = v136;
  if (v135 != -1)
  {
    v65 = (_QWORD *)(a1 + 1360);
    v66 = *(unsigned int *)(a1 + 1372);
    if ((_DWORD)v66 == *(_DWORD *)(a1 + 1368))
    {
      v67 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v65, (void *)(v66 + 1), (unint64_t)&v144, v41, v42, v43, v44, v45);
      v68 = (_DWORD *)(*(_QWORD *)(a1 + 1360) + 12 * *(unsigned int *)(a1 + 1372));
      *v68 = *(_DWORD *)v67;
      v69 = v68 + 1;
      v64 = *(_QWORD *)(v67 + 4);
    }
    else
    {
      v70 = (_DWORD *)(*v65 + 12 * v66);
      *v70 = v135;
      v69 = v70 + 1;
    }
    *v69 = v64;
    ++*(_DWORD *)(a1 + 1372);
  }
LABEL_28:
  if ((v10 & 0x80000000) != 0 || v10 >= 0x100 && (v10 > 0xFFF0 || (v10 & 0xF) != 0))
  {
    v113 = *(_DWORD **)(a1 + 8);
    v114 = v113[50];
    if (v114 + 4 > v113[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v113 + 14), v39, v40, v41, v42, v43, v44, v45);
      v114 = v113[50];
    }
    *(_DWORD *)(*((_QWORD *)v113 + 7) + v114) = ((v27 & 0x1F) << 16) | 0x8B2042C8;
    v113[50] += 4;
    if ((v10 & 0x80000000) != 0 || v10 > 0xFFF0 || (v10 & 0xF) != 0)
    {
      JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v15, 8, 8, v42, v43, v44, v45);
      v115 = 8;
    }
    else
    {
      v115 = (v15 << 32) | 8;
    }
    v84 = JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoad(JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>(v131, v115, v40, v41, v42, v43, v44, v45);
    v85 = v116;
  }
  else
  {
    v71 = (uint64_t)v133;
    v72 = v134;
    v73 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v133, v134, v41, v42, v43, v44, v45);
    if (v72 == 2)
    {
      v78 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v71 + 16;
      if (*(_DWORD *)(a1 + 1280) < v78)
        *(_DWORD *)(a1 + 1280) = v78;
      if ((v73 & 7) != 1 || ((-8 * v78) ^ v73) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v71, v72, v73);
    }
    v79 = *(_QWORD *)(a1 + 88);
    v80 = *(_DWORD *)(v79 + 596);
    if (!v80)
    {
      __break(0xC471u);
LABEL_115:
      __break(1u);
LABEL_116:
      JUMPOUT(0x198F88A6CLL);
    }
    v81 = ((unint64_t)v27 << 8) | 0x16;
    v82 = *(_QWORD *)(v79 + 584) + 1232 * v80;
    v83 = *(_DWORD *)(v79 + 68) + *(_DWORD *)(v82 - 32);
    if (*(_DWORD *)(v82 - 160) == 5)
      v84 = v83 + 1;
    else
      v84 = v83;
    v85 = -1278;
    v86 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v84, 0xFB02uLL, 0, v74, v75, v76, v77);
    JSC::MacroAssemblerARM64::loadVector(*(_QWORD *)(a1 + 8), v81, v15, (v86 >> 8), v87, v88, v89, v90);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_QWORD *)&v144 = v84;
      *((_QWORD *)&v144 + 1) = 64258;
      v142 = "V128Load";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v91 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v91;
        }
        while (v91 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v142, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v133);
      v97 = v134 == 1 || v134 == 4;
      if (!v97)
      {
        v143 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v133, v134, v92, v93, v94, v95, v96);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v143);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, &v132, (uint64_t *)&v144);
    }
  }
LABEL_78:
  if ((_BYTE)v141)
    goto LABEL_87;
  LOBYTE(v141) = 1;
  v117 = v138 & 0x7F;
  if (v117 >= 0x40)
    goto LABEL_115;
  v118 = 1 << v117;
  if ((v137[40].i64[1] & (1 << v117)) == 0)
    goto LABEL_87;
  v119 = v138;
  if (v137[21].u32[1] <= (unint64_t)v138)
  {
    __break(0xC471u);
    goto LABEL_116;
  }
  v120 = v137[20].i64[1] + 4 * v138;
  v137[62] = vandq_s8(v137[62], (int8x16_t)vdupq_n_s64(~v118));
  if ((_BYTE)word_1ECF4C700)
  {
    v144 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v119];
    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v144, "\n");
  }
  if ((v139 & v118) == 0 || (*(_WORD *)(v120 + 1) & 7) == 3)
  {
    *(_DWORD *)v120 = 0;
    v137[38].i64[1] |= 1 << v117;
  }
LABEL_87:
  if (!HIBYTE(v141))
  {
    HIBYTE(v141) = 1;
    v121 = v139;
    if (v139)
    {
      v122 = __clz(__rbit64(v139));
      v123 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
      v124 = "\n";
      do
      {
        if (v122 > 0x1Fu)
        {
          v129 = v123;
          v130 = v124;
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v137, (char)(v122 - 32));
          v124 = v130;
          v123 = v129;
        }
        else
        {
          v125 = 1 << v122;
          if ((v137[40].i64[1] & (1 << v122)) != 0)
          {
            if (v122 >= v137[21].u32[1])
            {
              __break(0xC471u);
              JUMPOUT(0x198F88A74);
            }
            v126 = v137[20].i64[1];
            v137[62] = vandq_s8(v137[62], (int8x16_t)vdupq_n_s64(~v125));
            if ((_BYTE)word_1ECF4C700)
            {
              v144 = *(_OWORD *)&v123[2 * v122];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v144, "\n");
              v124 = "\n";
              v123 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
              v121 = v139;
            }
            v127 = v126 + 4 * v122;
            if ((v121 & v125) == 0 || (*(_WORD *)(v127 + 1) & 7) == 3)
            {
              *(_DWORD *)v127 = 0;
              v137[38].i64[1] |= v125;
            }
          }
        }
        if (v122 > 0x3E)
          break;
        v121 = v139;
        if (!v139)
          break;
        v128 = __clz(__rbit64(v139 >> ((v122 + 1) & 0x3F))) + (((_BYTE)v122 + 1) & 0x3F);
        v122 = v128 >= 0x40 ? 64 : v128;
      }
      while (v128 < 0x40);
    }
  }
  *(_QWORD *)a5 = v84;
  *(_WORD *)(a5 + 8) = v85;
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDStore(uint64_t a1@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, unint64_t a3@<X2>, JSC::ARM64LogicalImmediate *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t i;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  _QWORD *v62;
  _DWORD *v63;
  int IfNecessary;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  BOOL v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  _DWORD *v98;
  unint64_t *v99;
  _DWORD *v100;
  _DWORD *v101;
  uint64_t v102;
  _DWORD *v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD v113[4];
  int v114;
  JSC::ARM64LogicalImmediate *v115;
  uint64_t v116;
  JSC::ARM64LogicalImmediate *v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  int8x16_t *v121;
  signed __int8 v122;
  unint64_t v123;
  uint64_t v124;
  __int16 v125;
  int v126;
  _OWORD v127[2];

  i = a6;
  v117 = a2;
  v118 = a3;
  v115 = a4;
  v116 = a5;
  v114 = a6;
  v113[0] = a1;
  v113[1] = &v117;
  v113[2] = &v115;
  v113[3] = &v114;
  v14 = a6;
  v123 = 0;
  v124 = 0;
  v121 = (int8x16_t *)a1;
  v125 = 0;
  v15 = *(_QWORD *)(a1 + 616);
  if (v15)
    v16 = __clz(__rbit64(v15));
  else
    v16 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v17 = v14 + 15;
  v18 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v121, v16);
  v122 = v18;
  if (a5 == 1)
  {
    LOBYTE(v26) = v18;
    v27 = v14 + a4;
    if (!(v27 >> 31) && (v27 < 0x100 || v27 <= 0xFFF0 && (v27 & 0xF) == 0))
    {
      if (*(_BYTE *)(a1 + 56) == 1)
      {
        if (v14 < (unint64_t)dword_1ECF4C6F4 << 16)
          goto LABEL_64;
        v88 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 108);
        v89 = v88 << 16;
        v90 = (_DWORD)v88 == -1;
        v91 = 0xFFFFFFFFLL;
        if (!v90)
          v91 = v89;
        if (v17 + a4 < v91)
          goto LABEL_64;
        v92 = *(_QWORD *)(a1 + 8);
        v14 = v92 + 56;
        for (i = *(unsigned int *)(v92 + 200); (int)i < *(_DWORD *)(v92 + 52); *(_DWORD *)(v92 + 200) = i)
        {
          if ((i + 4) > *(_DWORD *)(v92 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v92 + 56), v19, v20, v21, v22, v23, v24, v25);
            LODWORD(i) = *(_DWORD *)(v92 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v92 + 56) + i) = -721215457;
          i = (*(_DWORD *)(v92 + 200) + 4);
        }
        v93 = i;
        if ((i + 4) > *(_DWORD *)(v92 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v92 + 56), v19, v20, v21, v22, v23, v24, v25);
          v93 = *(_DWORD *)(v92 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v92 + 56) + v93) = 335544320;
        *(_DWORD *)(v92 + 200) += 4;
        v94 = 0xFF000F4500000000;
        if (!*(_BYTE *)(v92 + 328))
          v94 = 0xFF000F4100000000;
        LODWORD(v127[0]) = i;
        *(_QWORD *)((char *)v127 + 4) = v94;
        if ((_DWORD)i == -1)
          goto LABEL_64;
        v95 = (_QWORD *)(a1 + 1360);
        v96 = *(unsigned int *)(a1 + 1372);
        if ((_DWORD)v96 == *(_DWORD *)(a1 + 1368))
        {
          v97 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v95, (void *)(v96 + 1), (unint64_t)v127, v21, v22, v23, v24, v25);
          v98 = (_DWORD *)(*(_QWORD *)(a1 + 1360) + 12 * *(unsigned int *)(a1 + 1372));
          *v98 = *(_DWORD *)v97;
          v99 = (unint64_t *)(v98 + 1);
          v94 = *(_QWORD *)(v97 + 4);
        }
        else
        {
          v101 = (_DWORD *)(*v95 + 12 * v96);
          *v101 = i;
          v99 = (unint64_t *)(v101 + 1);
        }
        *v99 = v94;
      }
      else
      {
        if (*(_BYTE *)(a1 + 56))
          goto LABEL_64;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)(a1 + 8), v17 + a4, 8, v21, v22, v23, v24, v25);
        JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 2, 8, 23, v28, v29, v30, v31, (uint64_t)&v119);
        LODWORD(v127[0]) = v119;
        v32 = v120;
        *(_QWORD *)((char *)v127 + 4) = v120;
        if (v119 == -1)
          goto LABEL_64;
        v33 = (_QWORD *)(a1 + 1360);
        v34 = *(unsigned int *)(a1 + 1372);
        if ((_DWORD)v34 == *(_DWORD *)(a1 + 1368))
        {
          v35 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, (void *)(v34 + 1), (unint64_t)v127, v21, v22, v23, v24, v25);
          v36 = (_DWORD *)(*(_QWORD *)(a1 + 1360) + 12 * *(unsigned int *)(a1 + 1372));
          *v36 = *(_DWORD *)v35;
          v37 = v36 + 1;
          v32 = *(_QWORD *)(v35 + 4);
        }
        else
        {
          v100 = (_DWORD *)(*v33 + 12 * v34);
          *v100 = v119;
          v37 = v100 + 1;
        }
        *v37 = v32;
      }
      ++*(_DWORD *)(a1 + 1372);
LABEL_64:
      v102 = (v27 << 32) | 0x16;
LABEL_74:
      JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDStore(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>((uint64_t)v113, v102, v20, v21, v22, v23, v24, v25);
      goto LABEL_75;
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, a4, a5, ((unint64_t)v18 << 8) | 2, v22, v23, v24, v25);
  }
  else
  {
    v26 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, (uint64_t)a4, a5, v21, v22, v23, v24, v25) >> 8;
  }
  if (*(_BYTE *)(a1 + 56) == 1)
  {
    if (v14 < (unint64_t)dword_1ECF4C6F4 << 16)
      goto LABEL_28;
    v47 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 108);
    if ((_DWORD)v47 == -1)
      v48 = 0xFFFFFFFFLL;
    else
      v48 = v47 << 16;
    JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v26, 8);
    JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v14 + 15, 8, 8, v49, v50, v51, v52);
    JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 2, 8, v48, v53, v54, v55, v56, (uint64_t)&v119);
  }
  else
  {
    if (*(_BYTE *)(a1 + 56))
      goto LABEL_28;
    JSC::MacroAssemblerARM64::and64(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v26, 8);
    JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v14 + 15, 8, 8, v39, v40, v41, v42);
    JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 2, 8, 23, v43, v44, v45, v46, (uint64_t)&v119);
  }
  LODWORD(v127[0]) = v119;
  v57 = v120;
  *(_QWORD *)((char *)v127 + 4) = v120;
  if (v119 != -1)
  {
    v58 = (_QWORD *)(a1 + 1360);
    v59 = *(unsigned int *)(a1 + 1372);
    if ((_DWORD)v59 == *(_DWORD *)(a1 + 1368))
    {
      v60 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v58, (void *)(v59 + 1), (unint64_t)v127, v21, v22, v23, v24, v25);
      v61 = (_DWORD *)(*(_QWORD *)(a1 + 1360) + 12 * *(unsigned int *)(a1 + 1372));
      *v61 = *(_DWORD *)v60;
      v62 = v61 + 1;
      v57 = *(_QWORD *)(v60 + 4);
    }
    else
    {
      v63 = (_DWORD *)(*v58 + 12 * v59);
      *v63 = v119;
      v62 = v63 + 1;
    }
    *v62 = v57;
    ++*(_DWORD *)(a1 + 1372);
  }
LABEL_28:
  if ((i & 0x80000000) != 0 || i >= 0x100 && (i > 0xFFF0 || (i & 0xF) != 0))
  {
    v103 = *(_DWORD **)(a1 + 8);
    v104 = v103[50];
    if (v104 + 4 > v103[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v103 + 14), v38, v20, v21, v22, v23, v24, v25);
      v104 = v103[50];
    }
    *(_DWORD *)(*((_QWORD *)v103 + 7) + v104) = ((v26 & 0x1F) << 16) | 0x8B2042C8;
    v103[50] += 4;
    if ((i & 0x80000000) != 0 || i > 0xFFF0 || (i & 0xF) != 0)
    {
      JSC::MacroAssemblerARM64::add64(*(_QWORD *)(a1 + 8), v14, 8, 8, v22, v23, v24, v25);
      v102 = 8;
    }
    else
    {
      v102 = (v14 << 32) | 8;
    }
    goto LABEL_74;
  }
  i = ((unint64_t)v26 << 8) | 0x16;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, (uint64_t)v117, v118, v21, v22, v23, v24, v25);
  v65 = IfNecessary;
  v126 = IfNecessary;
  v66 = (uint64_t)v115;
  v67 = v116;
  v73 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v115, v116, v68, v69, v70, v71, v72);
  if (v67 == 2)
  {
    v79 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v66 + 16;
    if (*(_DWORD *)(a1 + 1280) < v79)
      *(_DWORD *)(a1 + 1280) = v79;
    if ((v73 & 7) != 1 || ((-8 * v79) ^ v73) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v66, v67, v73);
  }
  v80 = (uint64_t)v117;
  v81 = v118;
  v82 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, (uint64_t)v117, v118, v74, v75, v76, v77, v78);
  if (v81 == 2)
  {
    v87 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * v80 + 16;
    if (*(_DWORD *)(a1 + 1280) < v87)
      *(_DWORD *)(a1 + 1280) = v87;
    if ((v82 & 7) != 1 || ((-8 * v87) ^ v82) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, v80, v81, v82);
  }
  JSC::MacroAssemblerARM64::storeVector(*(_QWORD *)(a1 + 8), v65 >> 8, i, v14, v83, v84, v85, v86);
  if (HIBYTE(word_1ECF4C700))
  {
    *(_QWORD *)&v127[0] = "V128Store";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      LODWORD(i) = 0;
      v14 = (unint64_t)" ";
      do
      {
        WTF::dataLog<char [16]>(" ");
        i = (i + 1);
      }
      while (i < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>((const char **)v127, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(a1, 1, (uint64_t *)&v115, &v114, (uint64_t)&v117, &v126);
  }
LABEL_75:
  if ((_BYTE)v125)
    goto LABEL_83;
  LOBYTE(v125) = 1;
  v105 = v122;
  v106 = v122 & 0x7F;
  if (v106 >= 0x40)
  {
    __break(1u);
  }
  else
  {
    v14 = 1 << v106;
    if ((v121[40].i64[1] & (1 << v106)) == 0)
      goto LABEL_83;
    v105 = v122;
    if (v121[21].u32[1] <= (unint64_t)v122)
    {
LABEL_110:
      __break(0xC471u);
      JUMPOUT(0x198F89358);
    }
    i = v121[20].i64[1] + 4 * v122;
    v121[62] = vandq_s8(v121[62], (int8x16_t)vdupq_n_s64(~v14));
    if (!(_BYTE)word_1ECF4C700)
      goto LABEL_80;
  }
  v127[0] = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v105];
  WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v127, "\n");
LABEL_80:
  if ((v123 & v14) == 0 || (*(_WORD *)(i + 1) & 7) == 3)
  {
    *(_DWORD *)i = 0;
    v121[38].i64[1] |= 1 << v106;
  }
LABEL_83:
  if (!HIBYTE(v125))
  {
    HIBYTE(v125) = 1;
    v107 = v123;
    if (v123)
    {
      v108 = __clz(__rbit64(v123));
      do
      {
        if (v108 > 0x1Fu)
        {
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v121, (char)(v108 - 32));
        }
        else
        {
          v109 = 1 << v108;
          if ((v121[40].i64[1] & (1 << v108)) != 0)
          {
            if (v108 >= v121[21].u32[1])
              goto LABEL_110;
            v110 = v121[20].i64[1];
            v121[62] = vandq_s8(v121[62], (int8x16_t)vdupq_n_s64(~v109));
            if ((_BYTE)word_1ECF4C700)
            {
              v127[0] = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v108];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v127, "\n");
              v107 = v123;
            }
            v111 = v110 + 4 * v108;
            if ((v107 & v109) == 0 || (*(_WORD *)(v111 + 1) & 7) == 3)
            {
              *(_DWORD *)v111 = 0;
              v121[38].i64[1] |= v109;
            }
          }
        }
        if (v108 > 0x3E)
          break;
        v107 = v123;
        if (!v123)
          break;
        v112 = __clz(__rbit64(v123 >> ((v108 + 1) & 0x3F))) + (((_BYTE)v108 + 1) & 0x3F);
        v108 = v112 >= 0x40 ? 64 : v112;
      }
      while (v112 < 0x40);
    }
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDSplat(int8x16_t *this@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, JSC::ARM64LogicalImmediate *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  signed int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int32 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned __int32 v61;
  uint64_t v62;
  unint64_t v63;
  int8x16_t *v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  __int16 v68;
  uint64_t *v69[5];
  __int128 v70;
  char *v71;
  JSC::ARM64LogicalImmediate **v72;
  unsigned int *v73;
  unsigned int IfNecessary;
  char v75;
  JSC::ARM64LogicalImmediate *v76;
  unint64_t v77;
  __int128 v78;

  v11 = a4;
  v12 = (uint64_t)a3;
  v76 = a3;
  v77 = a4;
  v75 = (char)a2;
  IfNecessary = 0;
  if (a4 == 1)
  {
    *(_QWORD *)&v70 = a5;
    *((_QWORD *)&v70 + 1) = this;
    v71 = &v75;
    v72 = &v76;
    v73 = &IfNecessary;
    v69[0] = (uint64_t *)a5;
    v69[1] = (uint64_t *)this;
    v69[2] = (uint64_t *)&v75;
    v69[3] = (uint64_t *)&v76;
    v69[4] = (uint64_t *)&IfNecessary;
    if (a2 <= 6)
    {
      if (((1 << (char)a2) & 0x2E) != 0)
      {
        if ((_DWORD)a3 != -1)
        {
          if (!(_DWORD)a3)
          {
LABEL_6:
            JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDSplat(JSC::SIMDLane,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::operator()(a9, (uint64_t **)&v70, (uint64_t)a3, a4, a5, a6, a7, a8);
            return;
          }
LABEL_11:
          if ((BYTE1(a4) + 5) <= 2u)
          {
            v66 = 0;
            v67 = 0;
            v64 = this;
            v68 = 0;
            v20 = this[39].u64[1];
            if (v20)
              v21 = __clz(__rbit64(v20)) - 32;
            else
              v21 = JSC::Wasm::BBQJITImpl::BBQJIT::evictFPR((JSC::Wasm::BBQJITImpl::BBQJIT *)this, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
            JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindFPRToScratch(&v64, (char)v21);
            v65 = v21;
            IfNecessary = (v21 << 8) | 3;
            LOBYTE(v68) = 1;
            JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::unbindFPRFromScratch(&v64, (char)v21);
LABEL_28:
            JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst((uint64_t)this, v76, v77, IfNecessary, v22, v23, v24, v25);
            v12 = (uint64_t)v76;
            v11 = v77;
            goto LABEL_29;
          }
          v66 = 0;
          v67 = 0;
          v64 = this;
          v68 = 0;
          v26 = this[38].u64[1];
          if (v26)
            v27 = __clz(__rbit64(v26));
          else
            v27 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)this, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
          v28 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v64, v27);
          v65 = v28;
          IfNecessary = (v28 << 8) | 2;
          if (!(_BYTE)v68)
          {
            LOBYTE(v68) = 1;
            if ((v28 & 0x7Fu) >= 0x40)
            {
              __break(1u);
LABEL_72:
              v78 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v29];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v78, "\n");
LABEL_23:
              if ((v66 & v12) == 0 || (*(_WORD *)(v9 + 1) & 7) == 3)
              {
                *(_DWORD *)v9 = 0;
                v64[38].i64[1] |= 1 << v11;
              }
              goto LABEL_26;
            }
            LOBYTE(v11) = v28 & 0x7F;
            v12 = 1 << (v28 & 0x7F);
            if ((v64[40].i64[1] & v12) != 0)
            {
              if (v64[21].u32[1] <= (unint64_t)v28)
              {
                __break(0xC471u);
                JUMPOUT(0x198F89A78);
              }
              v29 = v28;
              v9 = v64[20].i64[1] + 4 * v28;
              v64[62] = vandq_s8(v64[62], (int8x16_t)vdupq_n_s64(~v12));
              if (!(_BYTE)word_1ECF4C700)
                goto LABEL_23;
              goto LABEL_72;
            }
          }
LABEL_26:
          if (!HIBYTE(v68))
          {
            HIBYTE(v68) = 1;
            v30 = v66;
            if (v66)
            {
              v56 = __clz(__rbit64(v66));
              do
              {
                if (v56 > 0x1Fu)
                {
                  v60 = v56;
                  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v64, (char)(v56 - 32));
                  v56 = v60;
                }
                else
                {
                  v57 = 1 << v56;
                  if ((v64[40].i64[1] & (1 << v56)) != 0)
                  {
                    if (v56 >= v64[21].u32[1])
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198F89A80);
                    }
                    v58 = v64[20].i64[1];
                    v64[62] = vandq_s8(v64[62], (int8x16_t)vdupq_n_s64(~v57));
                    if ((_BYTE)word_1ECF4C700)
                    {
                      v78 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v56];
                      v62 = v58;
                      v63 = v56;
                      WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v78, "\n");
                      v58 = v62;
                      v56 = v63;
                      v30 = v66;
                    }
                    v59 = v58 + 4 * v56;
                    if ((v30 & v57) == 0 || (*(_WORD *)(v59 + 1) & 7) == 3)
                    {
                      *(_DWORD *)v59 = 0;
                      v64[38].i64[1] |= v57;
                    }
                  }
                }
                if (v56 > 0x3E)
                  break;
                v30 = v66;
                if (!v66)
                  break;
                v56 = __clz(__rbit64(v66 >> ((v56 + 1) & 0x3F))) + (((_BYTE)v56 + 1) & 0x3F);
              }
              while (v56 < 0x40);
            }
          }
          goto LABEL_28;
        }
        goto LABEL_15;
      }
      if (((1 << (char)a2) & 0x50) != 0)
      {
        if (a3 != (JSC::ARM64LogicalImmediate *)-1)
        {
          if (!a3)
            goto LABEL_6;
          goto LABEL_11;
        }
LABEL_15:
        JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDSplat(JSC::SIMDLane,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1::operator()(a9, v69, (uint64_t)a3, a4, a5, a6, a7, a8);
        return;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x198F899E8);
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary((uint64_t)this, (uint64_t)a3, a4, a4, a5, a6, a7, a8);
LABEL_29:
  v31 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)this, v12, v11, v15, v16, v17, v18, v19);
  if (v11 == 2)
  {
    v36 = ((this[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * v12 + 16;
    if (this[80].i32[0] < v36)
      this[80].i32[0] = v36;
    if ((v31 & 7) != 1 || ((-8 * v36) ^ v31) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)this, v12, v11, v31);
  }
  v37 = this[5].i64[1];
  v38 = *(_DWORD *)(v37 + 596);
  if (!v38)
  {
    __break(0xC471u);
    JUMPOUT(0x198F89A70);
  }
  v39 = *(_QWORD *)(v37 + 584) + 1232 * v38;
  v40 = *(_DWORD *)(v37 + 68) + *(_DWORD *)(v39 - 32);
  if (*(_DWORD *)(v39 - 160) == 5)
    v41 = v40 + 1;
  else
    v41 = v40;
  *(_QWORD *)a5 = v41;
  *(_WORD *)(a5 + 8) = -1278;
  v49 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint((uint64_t)this, v41, *(_QWORD *)(a5 + 8), 0, v32, v33, v34, v35);
  v50 = IfNecessary;
  v51 = this->i64[1];
  if ((IfNecessary & 7) == 2)
  {
    v52 = 1308691456;
    switch(v75)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x198F89A08);
      case 1:
        break;
      case 2:
        v52 = 1308756992;
        break;
      case 3:
      case 5:
        v52 = 1308888064;
        break;
      case 4:
      case 6:
        v52 = 1309150208;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F89A48);
    }
  }
  else
  {
    v52 = 1308689408;
    switch(v75)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x198F89A28);
      case 1:
        break;
      case 2:
        v52 = 1308754944;
        break;
      case 3:
      case 5:
        v52 = 1308886016;
        break;
      case 4:
      case 6:
        v52 = 1309148160;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F89A68);
    }
  }
  v55 = *(_DWORD *)(v51 + 200);
  v54 = (unsigned int *)(v51 + 200);
  v53 = v55;
  if (v55 + 4 > *(v54 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v54 - 36), v42, v43, v44, v45, v46, v47, v48);
    v53 = *v54;
  }
  *(_DWORD *)(*((_QWORD *)v54 - 18) + v53) = v52 | (v49 >> 8) | (32 * (v50 >> 8));
  *v54 += 4;
  if (HIBYTE(word_1ECF4C700))
  {
    v70 = *(_OWORD *)a5;
    v69[0] = (uint64_t *)"VectorSplat";
    WTF::dataLog<char [16]>("BBQ\t");
    if (this->i32[0])
    {
      v61 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v61;
      }
      while (v61 < this->i32[0]);
    }
    WTF::dataLog<char const*,char [2]>((const char **)v69, " ");
    WTF::dataLog<JSC::SIMDLane>(&v75);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)this, 0, (uint64_t)&v76, (int *)&IfNecessary, (uint64_t *)&v70);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDSplat(JSC::SIMDLane,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::operator()(_BYTE *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  _DWORD *v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  int *v27;
  unsigned int v28;
  uint64_t v29[3];
  const char *v30;

  v8 = (uint64_t)a2[1];
  v9 = *(_QWORD *)(v8 + 88);
  v10 = *(_DWORD *)(v9 + 596);
  if (v10)
  {
    v13 = *(_QWORD *)(v9 + 584) + 1232 * v10;
    LODWORD(v9) = *(_DWORD *)(v9 + 68) + *(_DWORD *)(v13 - 32);
    if (*(_DWORD *)(v13 - 160) == 5)
      v9 = (v9 + 1);
    else
      v9 = v9;
    v14 = *a2;
    *v14 = v9;
    *((_WORD *)v14 + 4) = -1278;
    v22 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(v8, **a2, (*a2)[1], 0, a5, a6, a7, a8);
    v23 = *(_DWORD **)(v8 + 8);
    v24 = v23[50];
    if (v24 + 4 > v23[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v23 + 14), v15, v16, v17, v18, v19, v20, v21);
      v24 = v23[50];
    }
    *(_DWORD *)(*((_QWORD *)v23 + 7) + v24) = (v22 >> 8) | 0x6F00E400;
    v23[50] += 4;
    if (HIBYTE(word_1ECF4C700))
    {
      v26 = (char *)a2[2];
      v25 = (uint64_t)a2[3];
      v27 = (int *)a2[4];
      *(_OWORD *)v29 = *(_OWORD *)*a2;
      v30 = "VectorSplat";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)v8)
      {
        v28 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v28;
        }
        while (v28 < *(_DWORD *)v8);
      }
      WTF::dataLog<char const*,char [2]>(&v30, " ");
      WTF::dataLog<JSC::SIMDLane>(v26);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(v8, 0, v25, v27, v29);
    }
    *a1 = 0;
    a1[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDSplat(JSC::SIMDLane,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_1::operator()(_BYTE *a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  int *v28;
  unsigned int v29;
  uint64_t v30[3];
  const char *v31;

  v8 = (uint64_t)a2[1];
  v9 = *(_QWORD *)(v8 + 88);
  v10 = *(_DWORD *)(v9 + 596);
  if (v10)
  {
    v13 = *(_QWORD *)(v9 + 584) + 1232 * v10;
    LODWORD(v9) = *(_DWORD *)(v9 + 68) + *(_DWORD *)(v13 - 32);
    if (*(_DWORD *)(v13 - 160) == 5)
      v9 = (v9 + 1);
    else
      v9 = v9;
    v14 = *a2;
    *v14 = v9;
    *((_WORD *)v14 + 4) = -1278;
    v15 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(v8, **a2, (*a2)[1], 0, a5, a6, a7, a8);
    v23 = *(_DWORD **)(v8 + 8);
    v24 = (v15 >> 8 << 16) | (32 * (v15 >> 8)) | (v15 >> 8) | 0x6EA08C00;
    v25 = v23[50];
    if (v25 + 4 > v23[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v23 + 14), v16, v17, v18, v19, v20, v21, v22);
      v25 = v23[50];
    }
    *(_DWORD *)(*((_QWORD *)v23 + 7) + v25) = v24;
    v23[50] += 4;
    if (HIBYTE(word_1ECF4C700))
    {
      v27 = (char *)a2[2];
      v26 = (uint64_t)a2[3];
      v28 = (int *)a2[4];
      *(_OWORD *)v30 = *(_OWORD *)*a2;
      v31 = "VectorSplat";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)v8)
      {
        v29 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v29;
        }
        while (v29 < *(_DWORD *)v8);
      }
      WTF::dataLog<char const*,char [2]>(&v31, " ");
      WTF::dataLog<JSC::SIMDLane>(v27);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(v8, 0, v26, v28, v30);
    }
    *a1 = 0;
    a1[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

int8x16_t JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDShuffle@<Q0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t *a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int32 v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int32 v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int8x16_t result;
  int v64;
  _DWORD *v65;
  unsigned int v66;
  _DWORD *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int32 v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  int8x16_t *v78;
  int v79;
  int IfNecessary;
  _QWORD v81[2];
  _QWORD v82[2];
  const char *v83;
  __int128 v84;

  v82[0] = a4;
  v82[1] = a5;
  v81[0] = a6;
  v81[1] = a7;
  JSC::Wasm::BBQJITImpl::BBQJIT::clobber((uint64_t)a1, 28);
  JSC::Wasm::BBQJITImpl::BBQJIT::clobber((uint64_t)a1, 29);
  v78 = (int8x16_t *)((char *)a1 + 632);
  if ((a1[41].i8[15] & 0x10) != 0 && (a1[42].i8[7] & 0x10) != 0)
  {
    if (a1[30].i32[1] <= 0x1Cu)
      goto LABEL_66;
    v74 = a1[29].i64[1];
    v76 = (_DWORD *)(v74 + 112);
    JSC::Wasm::BBQJITImpl::BBQJIT::LRU<JSC::ARM64Registers::FPRegisterID>::lock((uint64_t)a1[63].i64, 28);
    if ((*(_WORD *)(v74 + 113) & 7) != 0)
    {
      v18 = v74 + 112;
      if ((_BYTE)word_1ECF4C700)
      {
        *(_QWORD *)&v84 = "q28";
        *((_QWORD *)&v84 + 1) = 4;
        WTF::dataLog<char [20],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>("BBQ\tPreserving FPR ", (uint64_t)&v84, " currently bound to ", (uint64_t)v76, "\n");
      }
    }
    else
    {
      *v76 = 768;
      *v78 = vandq_s8(*v78, (int8x16_t)vdupq_n_s64(0xEFFFFFFFFFFFFFFFLL));
      if ((_BYTE)word_1ECF4C700)
      {
        *(_QWORD *)&v84 = "q28";
        *((_QWORD *)&v84 + 1) = 4;
        WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReserving scratch FPR ", (uint64_t)&v84, "\n");
      }
    }
  }
  if ((a1[41].i8[15] & 0x20) == 0 || (a1[42].i8[7] & 0x20) == 0)
    goto LABEL_3;
  if (a1[30].i32[1] < 0x1Eu)
  {
LABEL_66:
    __break(0xC471u);
    JUMPOUT(0x198F8A4F8);
  }
  v75 = a1[29].i64[1];
  v77 = (_DWORD *)(v75 + 116);
  JSC::Wasm::BBQJITImpl::BBQJIT::LRU<JSC::ARM64Registers::FPRegisterID>::lock((uint64_t)a1[63].i64, 29);
  if ((*(_WORD *)(v75 + 117) & 7) != 0)
  {
    v18 = v75 + 116;
    if ((_BYTE)word_1ECF4C700)
    {
      *(_QWORD *)&v84 = "q29";
      *((_QWORD *)&v84 + 1) = 4;
      WTF::dataLog<char [20],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>("BBQ\tPreserving FPR ", (uint64_t)&v84, " currently bound to ", (uint64_t)v77, "\n");
    }
  }
  else
  {
    *v77 = 768;
    *v78 = vandq_s8(*v78, (int8x16_t)vdupq_n_s64(0xDFFFFFFFFFFFFFFFLL));
    if ((_BYTE)word_1ECF4C700)
    {
      *(_QWORD *)&v84 = "q29";
      *((_QWORD *)&v84 + 1) = 4;
      WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReserving scratch FPR ", (uint64_t)&v84, "\n");
    }
  }
LABEL_3:
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary((uint64_t)a1, a4, a5, v18, v19, v20, v21, v22);
  v79 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary((uint64_t)a1, a6, a7, v23, v24, v25, v26, v27);
  v33 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)a1, a4, a5, v28, v29, v30, v31, v32);
  if (a5 == 2)
  {
    v39 = ((a1[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (a1[80].i32[0] < v39)
      a1[80].i32[0] = v39;
    if ((v33 & 7) != 1 || ((-8 * v39) ^ v33) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)a1, a4, a5, v33);
  }
  v40 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)a1, a6, a7, v34, v35, v36, v37, v38);
  if (a7 == 2)
  {
    v45 = ((a1[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * a6 + 16;
    if (a1[80].i32[0] < v45)
      a1[80].i32[0] = v45;
    if ((v40 & 7) != 1 || ((-8 * v45) ^ v40) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)a1, a6, a7, v40);
  }
  v46 = a1[5].i64[1];
  v47 = *(_DWORD *)(v46 + 596);
  if (!v47)
  {
    __break(0xC471u);
    JUMPOUT(0x198F8A4F0);
  }
  v48 = *(_QWORD *)(v46 + 584) + 1232 * v47;
  v49 = *(_DWORD *)(v46 + 68) + *(_DWORD *)(v48 - 32);
  if (*(_DWORD *)(v48 - 160) == 5)
    v50 = v49 + 1;
  else
    v50 = v49;
  *a8 = v50;
  *((_WORD *)a8 + 4) = -1278;
  v55 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint((uint64_t)a1, v50, a8[1], 0, v41, v42, v43, v44);
  if (HIBYTE(word_1ECF4C700))
  {
    v84 = *(_OWORD *)a8;
    v83 = "VectorShuffle";
    WTF::dataLog<char [16]>("BBQ\t");
    if (a1->i32[0])
    {
      v73 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v73;
      }
      while (v73 < a1->i32[0]);
    }
    WTF::dataLog<char const*,char [2]>(&v83, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v82);
    if ((IfNecessary & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &IfNecessary);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)a1, 0, (uint64_t)v81, &v79, (uint64_t *)&v84);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::materializeVectorConstant((uint64_t)a1, a2, a3, 0x1003uLL, v51, v52, v53, v54);
  v64 = SBYTE1(IfNecessary);
  v65 = (_DWORD *)a1->i64[1];
  if (SBYTE1(IfNecessary) + 1 == SBYTE1(v79))
  {
    if (!BYTE1(v79))
      goto LABEL_67;
  }
  else
  {
    v66 = v65[50];
    if (v66 + 4 > v65[48])
    {
      result.i64[0] = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v65 + 14), v56, v57, v58, v59, v60, v61, v62).n128_u64[0];
      v66 = v65[50];
    }
    *(_DWORD *)(*((_QWORD *)v65 + 7) + v66) = (32 * v64) | (v64 << 16) | 0x4EA01C1C;
    v65[50] += 4;
    v67 = (_DWORD *)a1->i64[1];
    v68 = SBYTE1(v79);
    v69 = v67[50];
    if (v69 + 4 > v67[48])
    {
      result.i64[0] = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v67 + 14), v56, v57, v58, v59, v60, v61, v62).n128_u64[0];
      v69 = v67[50];
    }
    *(_DWORD *)(*((_QWORD *)v67 + 7) + v69) = (32 * v68) | (v68 << 16) | 0x4EA01C1D;
    v67[50] += 4;
    v79 = 7427;
    IfNecessary = 7171;
    v65 = (_DWORD *)a1->i64[1];
    v64 = 28;
  }
  v70 = v65[50];
  if (v70 + 4 > v65[48])
  {
    result.i64[0] = JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v65 + 14), v56, v57, v58, v59, v60, v61, v62).n128_u64[0];
    v70 = v65[50];
  }
  *(_DWORD *)(*((_QWORD *)v65 + 7) + v70) = (v55 >> 8) | (32 * v64) | 0x4E102000;
  v65[50] += 4;
  *a9 = 0;
  a9[8] = 0;
  if ((a1[41].i8[15] & 0x10) != 0 && (a1[42].i8[7] & 0x10) != 0)
  {
    if (a1[30].i32[1] <= 0x1Cu)
      goto LABEL_67;
    v71 = a1[29].i64[1];
    result = vandq_s8(a1[72], (int8x16_t)vdupq_n_s64(0xEFFFFFFFFFFFFFFFLL));
    a1[72] = result;
    if ((_BYTE)word_1ECF4C700)
    {
      *(_QWORD *)&v84 = "q28";
      *((_QWORD *)&v84 + 1) = 4;
      WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing FPR ", (uint64_t)&v84, "\n");
    }
    if ((*(_WORD *)(v71 + 113) & 7) == 3)
    {
      *(_DWORD *)(v71 + 112) = 0;
      result = vorrq_s8(*v78, (int8x16_t)vdupq_n_s64(0x1000000000000000uLL));
      *v78 = result;
    }
  }
  if ((a1[41].i8[15] & 0x20) == 0 || (a1[42].i8[7] & 0x20) == 0)
    return result;
  if (a1[30].i32[1] < 0x1Eu)
  {
LABEL_67:
    __break(0xC471u);
    JUMPOUT(0x198F8A008);
  }
  v72 = a1[29].i64[1];
  result = vandq_s8(a1[72], (int8x16_t)vdupq_n_s64(0xDFFFFFFFFFFFFFFFLL));
  a1[72] = result;
  if ((_BYTE)word_1ECF4C700)
  {
    *(_QWORD *)&v84 = "q29";
    *((_QWORD *)&v84 + 1) = 4;
    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing FPR ", (uint64_t)&v84, "\n");
  }
  if ((*(_WORD *)(v72 + 117) & 7) == 3)
  {
    *(_DWORD *)(v72 + 116) = 0;
    result = vorrq_s8(*v78, (int8x16_t)vdupq_n_s64(0x2000000000000000uLL));
    *v78 = result;
  }
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDShift(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t *a8@<X7>, _BYTE *a9@<X8>)
{
  int IfNecessary;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  __int16 v47;
  __int16 v48;
  JSC::ARM64LogicalImmediate *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unsigned int v60;
  _DWORD *v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v73[3];
  unsigned int v74;
  int v75;
  _QWORD v76[2];
  _QWORD v77[2];
  char v78;
  const char *v79;

  v77[0] = a4;
  v77[1] = a5;
  v76[0] = a6;
  v76[1] = a7;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, a6, a7, (uint64_t)a8);
  v22 = IfNecessary;
  v75 = IfNecessary;
  if (a7 == 1)
  {
    v23 = 2050;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)a6, a7, 0x802uLL, v18, v19, v20, v21);
  }
  else
  {
    v23 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a6, a7, v17, v18, v19, v20, v21);
  }
  v74 = v23;
  v29 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v24, v25, v26, v27, v28);
  if (a5 == 2)
  {
    v35 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v35)
      *(_DWORD *)(a1 + 1280) = v35;
    if ((v29 & 7) != 1 || ((-8 * v35) ^ v29) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v29);
  }
  v36 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a6, a7, v30, v31, v32, v33, v34);
  if (a7 == 2)
  {
    v41 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a6 + 16;
    if (*(_DWORD *)(a1 + 1280) < v41)
      *(_DWORD *)(a1 + 1280) = v41;
    if ((v36 & 7) != 1 || ((-8 * v41) ^ v36) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a6, a7, v36);
  }
  v42 = *(_QWORD *)(a1 + 88);
  v43 = *(_DWORD *)(v42 + 596);
  if (!v43)
  {
    __break(0xC471u);
    JUMPOUT(0x198F8AA14);
  }
  v44 = *(_QWORD *)(v42 + 584) + 1232 * v43;
  v45 = *(_DWORD *)(v42 + 68) + *(_DWORD *)(v44 - 32);
  if (*(_DWORD *)(v44 - 160) == 5)
    v46 = v45 + 1;
  else
    v46 = v45;
  *a8 = v46;
  *((_WORD *)a8 + 4) = -1278;
  v47 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v46, a8[1], 0, v37, v38, v39, v40);
  if ((a3 & 0x3Fu) >= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x198F8A98CLL);
  }
  v48 = v47;
  v49 = (JSC::ARM64LogicalImmediate *)qword_19919FB08[a3 & 0x3F];
  if (HIBYTE(word_1ECF4C700))
  {
    *(_OWORD *)v73 = *(_OWORD *)a8;
    v79 = "Vector";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v70 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v70;
      }
      while (v70 < *(_DWORD *)a1);
    }
    v51 = a2;
    v78 = a2;
    WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>(&v79, &v78, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v77);
    if ((v22 & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v75);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)v76, (int *)&v74, v73);
    LOBYTE(v50) = BYTE1(v74);
  }
  else
  {
    v50 = v23 >> 8;
    v51 = a2;
  }
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), v49, v50, 8);
  if (v51 == 68)
  {
    v59 = *(_DWORD **)(a1 + 8);
    v60 = v59[50];
    if (v60 + 4 > v59[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 14), v52, v53, v54, v55, v56, v57, v58);
      v60 = v59[50];
    }
    *(_DWORD *)(*((_QWORD *)v59 + 7) + v60) = 1258816488;
    v59[50] += 4;
  }
  v61 = *(_DWORD **)(a1 + 8);
  v62 = v61[50];
  if (v62 + 4 > v61[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v61 + 14), v52, v53, v54, v55, v56, v57, v58);
    v62 = v61[50];
  }
  *(_DWORD *)(*((_QWORD *)v61 + 7) + v62) = 1308691728;
  v61[50] += 4;
  v63 = *(_QWORD *)(a1 + 8);
  v64 = SBYTE1(v75);
  if ((a3 & 0xC0) == 0x40)
  {
    v65 = 0x400000;
    switch(a3 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x198F8A9ACLL);
      case 1:
        v65 = 0;
        break;
      case 2:
        break;
      case 3:
      case 5:
        v65 = 0x800000;
        break;
      case 4:
      case 6:
        v65 = 12582912;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F8A9ECLL);
    }
    v66 = 1311785984;
  }
  else
  {
    v65 = 0x400000;
    switch(a3 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x198F8A9CCLL);
      case 1:
        v65 = 0;
        break;
      case 2:
        break;
      case 3:
      case 5:
        v65 = 0x800000;
        break;
      case 4:
      case 6:
        v65 = 12582912;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F8AA0CLL);
    }
    v66 = 1848656896;
  }
  v69 = *(_DWORD *)(v63 + 200);
  v68 = (unsigned int *)(v63 + 200);
  v67 = v69;
  if (v69 + 4 > *(v68 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v68 - 36), v52, v53, v54, v55, v56, v57, v58);
    v67 = *v68;
  }
  *(_DWORD *)(*((_QWORD *)v68 - 18) + v67) = (32 * v64) | (v48 >> 8) | v65 | v66;
  *v68 += 4;
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDExtmul(uint64_t a1@<X0>, int a2@<W1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t *a8@<X7>, _BYTE *a9@<X8>)
{
  int IfNecessary;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t *v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  JSC::ARM64LogicalImmediate *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int8x16_t *v64;
  unint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  JSC::Wasm::BBQJITImpl::BBQJIT *v93[2];
  unint64_t v94;
  uint64_t v95;
  __int16 v96;
  unsigned int v97;
  int v98;
  _QWORD v99[2];
  _QWORD v100[2];
  char v101;
  __int128 v102;

  v100[0] = a4;
  v100[1] = a5;
  v99[0] = a6;
  v99[1] = a7;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, a6, a7, (uint64_t)a8);
  v98 = IfNecessary;
  v23 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a6, a7, v18, v19, v20, v21, v22);
  v97 = v23;
  v29 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v24, v25, v26, v27, v28);
  if (a5 == 2)
  {
    v35 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v35)
      *(_DWORD *)(a1 + 1280) = v35;
    if ((v29 & 7) != 1 || ((-8 * v35) ^ v29) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v29);
  }
  v36 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a6, a7, v30, v31, v32, v33, v34);
  if (a7 == 2)
  {
    v41 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a6 + 16;
    if (*(_DWORD *)(a1 + 1280) < v41)
      *(_DWORD *)(a1 + 1280) = v41;
    if ((v36 & 7) != 1 || ((-8 * v41) ^ v36) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a6, a7, v36);
  }
  v42 = *(_QWORD *)(a1 + 88);
  v43 = *(_DWORD *)(v42 + 596);
  if (!v43)
  {
    __break(0xC471u);
    goto LABEL_74;
  }
  v44 = *(_QWORD *)(v42 + 584) + 1232 * v43;
  v45 = *(_DWORD *)(v42 + 68) + *(_DWORD *)(v44 - 32);
  if (*(_DWORD *)(v44 - 160) == 5)
    v46 = v45 + 1;
  else
    v46 = v45;
  *a8 = v46;
  *((_WORD *)a8 + 4) = -1278;
  v47 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v46, a8[1], 0, v37, v38, v39, v40);
  if (HIBYTE(word_1ECF4C700))
  {
    *(_OWORD *)v93 = *(_OWORD *)a8;
    *(_QWORD *)&v102 = "Vector";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v91 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v91;
      }
      while (v91 < *(_DWORD *)a1);
    }
    v101 = a2;
    WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>((const char **)&v102, &v101, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v100);
    if ((v98 & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v98);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)v99, (int *)&v97, (uint64_t *)v93);
    v23 = v97;
    IfNecessary = v98;
  }
  v48 = &v94;
  v94 = 0;
  v95 = 0;
  v93[0] = (JSC::Wasm::BBQJITImpl::BBQJIT *)a1;
  v96 = 0;
  v49 = IfNecessary & 7;
  if (v49 == 6)
  {
    if ((IfNecessary & 0x400000) == 0)
    {
      v50 = 1 << SBYTE2(IfNecessary);
      v94 = 1 << SBYTE2(IfNecessary);
      if ((IfNecessary & 0x4000) == 0)
        goto LABEL_28;
    }
    goto LABEL_74;
  }
  if (v49 != 3)
  {
    if (v49 != 2)
      goto LABEL_30;
    if ((IfNecessary & 0x4000) == 0)
    {
      v50 = 0;
LABEL_28:
      v52 = 1 << SBYTE1(IfNecessary);
      goto LABEL_29;
    }
LABEL_74:
    __break(1u);
LABEL_75:
    __break(0xC471u);
    return;
  }
  v51 = (BYTE1(IfNecessary) + 32) & 0x7F;
  if (v51 >= 0x40)
    goto LABEL_74;
  v52 = 1 << v51;
  v94 = 1 << v51;
  if (((BYTE1(IfNecessary) + 32) & 0x60) != 0x20)
    goto LABEL_30;
  v50 = 0;
  v48 = (unint64_t *)&v95;
LABEL_29:
  *v48 = v52 | v50;
LABEL_30:
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::initializedPreservedSet<JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)v93, v23, v47);
  v60 = v94;
  if (v94)
  {
    v61 = __clz(__rbit64(v94));
    do
    {
      if (v61 > 0x1Fu)
        JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindFPRToScratch(v93, (char)(v61 - 32));
      else
        JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindGPRToScratch(v93, (char)v61);
      if (v61 > 0x3E)
        break;
      v62 = __clz(__rbit64(v60 >> (v61 + 1)));
      v63 = v62 + v61 + 1;
      if (v63 >= 0x40)
        v61 = 64;
      else
        v61 += v62 + 1;
    }
    while (v63 <= 0x3F);
  }
  v64 = (int8x16_t *)v93[0];
  v65 = *((_QWORD *)v93[0] + 79);
  if (v65)
    v66 = __clz(__rbit64(v65)) - 32;
  else
    v66 = JSC::Wasm::BBQJITImpl::BBQJIT::evictFPR(v93[0], v53, v54, v55, v56, v57, v58, v59);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindFPRToScratch(v93, (char)v66);
  LOBYTE(v93[1]) = v66;
  v71 = *(_DWORD **)(a1 + 8);
  v72 = SBYTE1(v98);
  v73 = (char)v66;
  if (a2 == 51)
  {
    JSC::MacroAssemblerARM64::vectorExtendLow(v71, a3, v72, v73, v67, v68, v69, v70);
    JSC::MacroAssemblerARM64::vectorExtendLow(*(_DWORD **)(a1 + 8), a3, SBYTE1(v97), ((__int16)v47 >> 8), v74, v75, v76, v77);
  }
  else
  {
    JSC::MacroAssemblerARM64::vectorExtendHigh(v71, a3, v72, v73, v67, v68, v69, v70);
    JSC::MacroAssemblerARM64::vectorExtendHigh(*(_DWORD **)(a1 + 8), a3, SBYTE1(v97), ((__int16)v47 >> 8), v81, v82, v83, v84);
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::emitVectorMul((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, (JSC::ARM64LogicalImmediate *)a3, ((unint64_t)v66 << 8) | 3, v47, v47, v78, v79, v80);
  *a9 = 0;
  a9[8] = 0;
  if (!(_BYTE)v96)
  {
    LOBYTE(v96) = 1;
    JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::unbindFPRFromScratch(v93, (char)v66);
  }
  if (!HIBYTE(v96))
  {
    HIBYTE(v96) = 1;
    if (v60)
    {
      v85 = __clz(__rbit64(v60));
      do
      {
        if (v85 > 0x1Fu)
        {
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::unbindFPRFromScratch(v93, (char)(v85 - 32));
        }
        else
        {
          v86 = 1 << v85;
          if ((v64[40].i64[1] & (1 << v85)) != 0)
          {
            if (v64[21].i32[1] <= v85)
              goto LABEL_75;
            v87 = v64[20].i64[1];
            v64[62] = vandq_s8(v64[62], (int8x16_t)vdupq_n_s64(~v86));
            if ((_BYTE)word_1ECF4C700)
            {
              v102 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v85];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v102, "\n");
            }
            v88 = v87 + 4 * v85;
            if ((v86 & v60) == 0 || (*(_WORD *)(v88 + 1) & 7) == 3)
            {
              *(_DWORD *)v88 = 0;
              v64[38].i64[1] |= v86;
            }
          }
        }
        if (v85 > 0x3E)
          break;
        v89 = __clz(__rbit64(v60 >> (v85 + 1)));
        v90 = v89 + v85 + 1;
        if (v90 >= 0x40)
          v85 = 64;
        else
          v85 += v89 + 1;
      }
      while (v90 < 0x40);
    }
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitVectorMul(JSC::Wasm::BBQJITImpl::BBQJIT *this, JSC::ARM64LogicalImmediate *a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  unsigned int v24;
  _DWORD *v25;
  unsigned int v26;
  int v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  int v33;
  _DWORD *v34;
  unsigned int v35;
  _DWORD *v36;
  unsigned int v37;
  _DWORD *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  _DWORD *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int8x16_t *v52;
  unsigned __int8 v53;
  unint64_t v54;
  uint64_t v55;
  __int16 v56;
  __int128 v57;

  v9 = a3 >> 8;
  v10 = a5 >> 8;
  v11 = SBYTE1(a3);
  v12 = SBYTE1(a4);
  if ((a2 & 0x3F) != 4)
  {
    JSC::MacroAssemblerARM64::vectorMul(*((_DWORD **)this + 1), a2, SBYTE1(a3), SBYTE1(a4), SBYTE1(a5), a6, a7, a8);
    return;
  }
  v54 = 0;
  v55 = 0;
  v52 = (int8x16_t *)this;
  v56 = 0;
  v13 = *((_QWORD *)this + 77);
  if (v13)
    v14 = __clz(__rbit64(v13));
  else
    v14 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(this, a2, a3, a4, a5, a6, a7, a8);
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v52, v14);
  v53 = v22;
  v23 = (_DWORD *)*((_QWORD *)this + 1);
  v24 = v23[50];
  if (v24 + 4 > v23[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v23 + 14), v15, v16, v17, v18, v19, v20, v21);
    v24 = v23[50];
  }
  *(_DWORD *)(*((_QWORD *)v23 + 7) + v24) = (32 * v11) | 0x4E083C08;
  v23[50] += 4;
  v25 = (_DWORD *)*((_QWORD *)this + 1);
  v26 = v25[50];
  if (v26 + 4 > v25[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v25 + 14), v15, v16, v17, v18, v19, v20, v21);
    v26 = v25[50];
  }
  v27 = v22 | (32 * v12);
  *(_DWORD *)(*((_QWORD *)v25 + 7) + v26) = v27 | 0x4E083C00;
  v25[50] += 4;
  v28 = (_DWORD *)*((_QWORD *)this + 1);
  v29 = v28[50];
  if (v29 + 4 > v28[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v28 + 14), v15, v16, v17, v18, v19, v20, v21);
    v29 = v28[50];
  }
  v30 = ((v22 & 0x1F) << 16) | 0x9B007D08;
  *(_DWORD *)(*((_QWORD *)v28 + 7) + v29) = v30;
  v28[50] += 4;
  v31 = (_DWORD *)*((_QWORD *)this + 1);
  v32 = v31[50];
  if (v32 + 4 > v31[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v31 + 14), v15, v16, v17, v18, v19, v20, v21);
    v32 = v31[50];
  }
  v33 = 32 * (char)v9;
  *(_DWORD *)(*((_QWORD *)v31 + 7) + v32) = 1309150480;
  v31[50] += 4;
  v34 = (_DWORD *)*((_QWORD *)this + 1);
  v35 = v34[50];
  if (v35 + 4 > v34[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v34 + 14), v15, v16, v17, v18, v19, v20, v21);
    v35 = v34[50];
  }
  *(_DWORD *)(*((_QWORD *)v34 + 7) + v35) = v33 | 0x4E183C08;
  v34[50] += 4;
  v36 = (_DWORD *)*((_QWORD *)this + 1);
  v37 = v36[50];
  if (v37 + 4 > v36[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v36 + 14), v15, v16, v17, v18, v19, v20, v21);
    v37 = v36[50];
  }
  *(_DWORD *)(*((_QWORD *)v36 + 7) + v37) = v27 | 0x4E183C00;
  v36[50] += 4;
  v38 = (_DWORD *)*((_QWORD *)this + 1);
  v39 = v38[50];
  if (v39 + 4 > v38[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v38 + 14), v15, v16, v17, v18, v19, v20, v21);
    v39 = v38[50];
  }
  *(_DWORD *)(*((_QWORD *)v38 + 7) + v39) = v30;
  v38[50] += 4;
  v40 = *((_QWORD *)this + 1);
  v41 = *(_DWORD *)(v40 + 200);
  if (v41 + 4 > *(_DWORD *)(v40 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v40 + 56), v15, v16, v17, v18, v19, v20, v21);
    v41 = *(_DWORD *)(v40 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v40 + 56) + v41) = 1310203152;
  *(_DWORD *)(v40 + 200) += 4;
  v42 = (_DWORD *)*((_QWORD *)this + 1);
  v43 = v42[50];
  if (v43 + 4 > v42[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v42 + 14), v15, v16, v17, v18, v19, v20, v21);
    v43 = v42[50];
  }
  *(_DWORD *)(*((_QWORD *)v42 + 7) + v43) = (char)v10 | 0x4EB01E00;
  v42[50] += 4;
  if (!(_BYTE)v56)
  {
    LOBYTE(v56) = 1;
    v44 = v53;
    v45 = v53 & 0x7F;
    if (v45 >= 0x40)
    {
      __break(1u);
    }
    else
    {
      v40 = 1 << v45;
      if ((v52[40].i64[1] & (1 << v45)) == 0)
        goto LABEL_30;
      v44 = (char)v53;
      if (v52[21].u32[1] <= (unint64_t)(char)v53)
      {
LABEL_54:
        __break(0xC471u);
        JUMPOUT(0x198F8B544);
      }
      v30 = v52[20].i64[1] + 4 * (char)v53;
      v52[62] = vandq_s8(v52[62], (int8x16_t)vdupq_n_s64(~v40));
      if (!(_BYTE)word_1ECF4C700)
        goto LABEL_27;
    }
    v57 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v44];
    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v57, "\n");
LABEL_27:
    if ((v54 & v40) == 0 || (*(_WORD *)(v30 + 1) & 7) == 3)
    {
      *(_DWORD *)v30 = 0;
      v52[38].i64[1] |= 1 << v45;
    }
  }
LABEL_30:
  if (!HIBYTE(v56))
  {
    HIBYTE(v56) = 1;
    v46 = v54;
    if (v54)
    {
      v47 = __clz(__rbit64(v54));
      do
      {
        if (v47 > 0x1Fu)
        {
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v52, (char)(v47 - 32));
        }
        else
        {
          v48 = 1 << v47;
          if ((v52[40].i64[1] & (1 << v47)) != 0)
          {
            if (v47 >= v52[21].u32[1])
              goto LABEL_54;
            v49 = v52[20].i64[1];
            v52[62] = vandq_s8(v52[62], (int8x16_t)vdupq_n_s64(~v48));
            if ((_BYTE)word_1ECF4C700)
            {
              v57 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v47];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v57, "\n");
              v48 = 1 << v47;
              v46 = v54;
            }
            v50 = v49 + 4 * v47;
            if ((v46 & v48) == 0 || (*(_WORD *)(v50 + 1) & 7) == 3)
            {
              *(_DWORD *)v50 = 0;
              v52[38].i64[1] |= v48;
            }
          }
        }
        if (v47 > 0x3E)
          break;
        v46 = v54;
        if (!v54)
          break;
        v51 = __clz(__rbit64(v54 >> ((v47 + 1) & 0x3F))) + (((_BYTE)v47 + 1) & 0x3F);
        v47 = v51 >= 0x40 ? 64 : v51;
      }
      while (v51 < 0x40);
    }
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadSplat(int8x16_t *a1@<X0>, int a2@<W1>, JSC::ARM64LogicalImmediate *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v10;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  unsigned __int32 v33;
  uint64_t v34[3];
  int v35;
  int v36;
  _QWORD v37[2];
  char v38;
  const char *v39;

  v10 = a5;
  v37[0] = a3;
  v37[1] = a4;
  v36 = a5;
  if (a2 > 55)
  {
    if (a2 == 56)
    {
      v14 = 2;
    }
    else
    {
      if (a2 != 70)
        goto LABEL_34;
      v14 = 8;
    }
  }
  else if (a2 == 34)
  {
    v14 = 1;
  }
  else
  {
    if (a2 != 35)
      goto LABEL_34;
    v14 = 4;
  }
  v15 = JSC::Wasm::BBQJITImpl::BBQJIT::emitCheckAndPreparePointer(a1, a3, a4, v10, v14, (uint64_t)a6, a7, a8);
  v20 = v15;
  v35 = v15;
  if ((v10 & 0x80000000) != 0 || v10 >= 0x100 && (v10 > 0xFFF0 || (v10 & 0xF) != 0))
  {
    JSC::MacroAssemblerARM64::add64(a1->i64[1], v10, ((__int16)v15 >> 8), ((__int16)v15 >> 8), v16, v17, v18, v19);
    v10 = 0;
  }
  v21 = a1[5].i64[1];
  v22 = *(_DWORD *)(v21 + 596);
  if (!v22)
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x198F8B7D8);
  }
  v23 = HIBYTE(v20) | (unint64_t)(v10 << 32);
  v24 = *(_QWORD *)(v21 + 584) + 1232 * v22;
  v25 = *(_DWORD *)(v21 + 68) + *(_DWORD *)(v24 - 32);
  if (*(_DWORD *)(v24 - 160) == 5)
    v26 = v25 + 1;
  else
    v26 = v25;
  *a6 = v26;
  *((_WORD *)a6 + 4) = -1278;
  v32 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint((uint64_t)a1, v26, a6[1], 0, v16, v17, v18, v19);
  if (HIBYTE(word_1ECF4C700))
  {
    *(_OWORD *)v34 = *(_OWORD *)a6;
    v39 = "Vector";
    WTF::dataLog<char [16]>("BBQ\t");
    if (a1->i32[0])
    {
      v33 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v33;
      }
      while (v33 < a1->i32[0]);
    }
    v38 = a2;
    WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>(&v39, &v38, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v37);
    if ((v20 & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v35);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)a1, 0, &v36, v34);
  }
  if (a2 > 55)
  {
    if (a2 == 56)
      JSC::MacroAssemblerARM64::vectorLoad16Splat(a1->i64[1], v23, (v32 >> 8), v27, v28, v29, v30, v31);
    else
      JSC::MacroAssemblerARM64::vectorLoad64Splat(a1->i64[1], v23, (v32 >> 8), v27, v28, v29, v30, v31);
  }
  else if (a2 == 34)
  {
    JSC::MacroAssemblerARM64::vectorLoad8Splat(a1->i64[1], v23, (v32 >> 8), v27, v28, v29, v30, v31);
  }
  else
  {
    JSC::MacroAssemblerARM64::vectorLoad32Splat(a1->i64[1], v23, (v32 >> 8), v27, v28, v29, v30, v31);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadLane(int8x16_t *a1@<X0>, int a2@<W1>, JSC::ARM64LogicalImmediate *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t *a10)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  __int16 IfNecessary;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int32 v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned int v52;
  unsigned __int32 v53;
  uint64_t v54[3];
  int v55;
  int v56;
  _QWORD v57[2];
  char v58;
  const char *v59;

  v10 = a8;
  v11 = a7;
  v57[0] = a3;
  v57[1] = a4;
  v56 = a7;
  if (a2 > 45)
  {
    if (a2 == 46)
    {
      v17 = 4;
    }
    else
    {
      if (a2 != 71)
        goto LABEL_42;
      v17 = 8;
    }
  }
  else if (a2 == 2)
  {
    v17 = 2;
  }
  else
  {
    if (a2 != 16)
      goto LABEL_42;
    v17 = 1;
  }
  v18 = JSC::Wasm::BBQJITImpl::BBQJIT::emitCheckAndPreparePointer(a1, a3, a4, a7, v17, a6, a7, a8);
  v24 = v18;
  v55 = v18;
  if ((v11 & 0x80000000) != 0 || v11 >= 0x100 && (v11 > 0xFFF0 || (v11 & 0xF) != 0))
  {
    JSC::MacroAssemblerARM64::add64(a1->i64[1], v11, ((__int16)v18 >> 8), ((__int16)v18 >> 8), v20, v21, v22, v23);
    v11 = 0;
  }
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary((uint64_t)a1, a5, a6, v19, v20, v21, v22, v23);
  v31 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)a1, a5, a6, v26, v27, v28, v29, v30);
  if (a6 == 2)
  {
    v36 = ((a1[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * a5 + 16;
    if (a1[80].i32[0] < v36)
      a1[80].i32[0] = v36;
    if ((v31 & 7) != 1 || ((-8 * v36) ^ v31) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)a1, a5, a6, v31);
  }
  v37 = a1[5].i64[1];
  v38 = *(_DWORD *)(v37 + 596);
  if (!v38)
  {
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x198F8BB94);
  }
  v39 = *(_QWORD *)(v37 + 584) + 1232 * v38;
  v40 = *(_DWORD *)(v37 + 68) + *(_DWORD *)(v39 - 32);
  if (*(_DWORD *)(v39 - 160) == 5)
    v41 = v40 + 1;
  else
    v41 = v40;
  *a10 = v41;
  *((_WORD *)a10 + 4) = -1278;
  v49 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint((uint64_t)a1, v41, a10[1], 0, v32, v33, v34, v35);
  if (HIBYTE(word_1ECF4C700))
  {
    *(_OWORD *)v54 = *(_OWORD *)a10;
    v59 = "Vector";
    WTF::dataLog<char [16]>("BBQ\t");
    if (a1->i32[0])
    {
      v53 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v53;
      }
      while (v53 < a1->i32[0]);
    }
    v58 = a2;
    WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>(&v59, &v58, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v57);
    if ((v24 & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v55);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)a1, 0, &v56, v54);
  }
  v50 = HIBYTE(v24) | (unint64_t)(v11 << 32);
  v51 = (_DWORD *)a1->i64[1];
  v52 = v51[50];
  if (v52 + 4 > v51[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v51 + 14), v42, v43, v44, v45, v46, v47, v48);
    v52 = v51[50];
  }
  *(_DWORD *)(*((_QWORD *)v51 + 7) + v52) = (32 * (IfNecessary >> 8)) | (IfNecessary >> 8 << 16) | SHIBYTE(v49) | 0x4EA01C00;
  v51[50] += 4;
  if (a2 > 45)
  {
    if (a2 == 46)
      JSC::MacroAssemblerARM64::vectorLoad32Lane(a1->i64[1], v50, v10, (v49 >> 8), v45, v46, v47, v48);
    else
      JSC::MacroAssemblerARM64::vectorLoad64Lane(a1->i64[1], v50, v10, (v49 >> 8), v45, v46, v47, v48);
  }
  else if (a2 == 2)
  {
    JSC::MacroAssemblerARM64::vectorLoad16Lane(a1->i64[1], v50, v10, (v49 >> 8), v45, v46, v47, v48);
  }
  else
  {
    JSC::MacroAssemblerARM64::vectorLoad8Lane(a1->i64[1], v50, v10, (v49 >> 8), v45, v46, v47, v48);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDStoreLane(int8x16_t *a1@<X0>, int a2@<W1>, JSC::ARM64LogicalImmediate *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int32 v35;
  uint64_t v36;
  unsigned __int32 v37;
  int IfNecessary;
  int v39;
  int v40;
  _QWORD v41[2];
  _QWORD v42[2];
  char v43;
  const char *v44;

  v9 = a8;
  v10 = a7;
  v42[0] = a3;
  v42[1] = a4;
  v41[0] = a5;
  v41[1] = a6;
  v40 = a7;
  if (a2 > 28)
  {
    if (a2 == 29)
    {
      v16 = 8;
      goto LABEL_10;
    }
    if (a2 == 48)
    {
      v16 = 2;
      goto LABEL_10;
    }
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x198F8BE80);
  }
  if (a2 == 8)
  {
    v16 = 1;
    goto LABEL_10;
  }
  if (a2 != 25)
    goto LABEL_34;
  v16 = 4;
LABEL_10:
  v17 = JSC::Wasm::BBQJITImpl::BBQJIT::emitCheckAndPreparePointer(a1, a3, a4, a7, v16, a6, a7, a8);
  v23 = BYTE1(v17);
  v39 = v17;
  if ((v10 & 0x80000000) != 0 || v10 >= 0x100 && (v10 > 0xFFF0 || (v10 & 0xF) != 0))
  {
    JSC::MacroAssemblerARM64::add64(a1->i64[1], v10, ((__int16)v17 >> 8), ((__int16)v17 >> 8), v19, v20, v21, v22);
    v10 = 0;
  }
  v24 = v23;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary((uint64_t)a1, a5, a6, v18, v19, v20, v21, v22);
  v30 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)a1, a5, a6, v25, v26, v27, v28, v29);
  if (a6 == 2)
  {
    v35 = ((a1[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * a5 + 16;
    if (a1[80].i32[0] < v35)
      a1[80].i32[0] = v35;
    if ((v30 & 7) != 1 || ((-8 * v35) ^ v30) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)a1, a5, a6, v30);
  }
  v36 = v24 | (v10 << 32);
  if (HIBYTE(word_1ECF4C700))
  {
    v44 = "Vector";
    WTF::dataLog<char [16]>("BBQ\t");
    if (a1->i32[0])
    {
      v37 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v37;
      }
      while (v37 < a1->i32[0]);
    }
    v43 = a2;
    WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>(&v44, &v43, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Location,unsigned int>((uint64_t)a1, 1, (uint64_t)v41, &IfNecessary, (uint64_t)v42, &v39, &v40);
  }
  if (a2 > 28)
  {
    if (a2 == 29)
      JSC::MacroAssemblerARM64::vectorStore64Lane(a1->i64[1], SBYTE1(IfNecessary), v36, v9, v31, v32, v33, v34);
    else
      JSC::MacroAssemblerARM64::vectorStore16Lane(a1->i64[1], SBYTE1(IfNecessary), v36, v9, v31, v32, v33, v34);
  }
  else if (a2 == 8)
  {
    JSC::MacroAssemblerARM64::vectorStore8Lane(a1->i64[1], SBYTE1(IfNecessary), v36, v9, v31, v32, v33, v34);
  }
  else
  {
    JSC::MacroAssemblerARM64::vectorStore32Lane(a1->i64[1], SBYTE1(IfNecessary), v36, v9, v31, v32, v33, v34);
  }
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadExtend(int8x16_t *this@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, JSC::ARM64LogicalImmediate *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  char v15;
  char v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int8x16_t *v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int8x16_t *v68;
  uint64_t v69;
  unint64_t v70;
  _DWORD *v71;
  _QWORD *v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int32 v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int i;
  unsigned int v104;
  unint64_t v105;
  int8x16_t *v106;
  uint64_t v107;
  unint64_t v108;
  _DWORD *v109;
  unint64_t *v110;
  _DWORD *v111;
  int *v112;
  __int16 v113;
  unsigned __int32 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  _DWORD *v121;
  unsigned int v122;
  unint64_t v123;
  __int16 v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char **v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char **v137;
  const char *v138;
  char v139;
  _QWORD v140[6];
  char v141;
  char v142;
  int v143;
  char v144;
  JSC::ARM64LogicalImmediate *v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int8x16_t *v149;
  signed __int8 v150;
  unint64_t v151;
  uint64_t v152;
  __int16 v153;
  const char *v154;
  int v155;
  _OWORD v156[2];

  v10 = a5;
  v145 = a3;
  v146 = a4;
  v144 = (char)a2;
  v143 = a5;
  if ((int)a2 <= 36)
  {
    switch((_DWORD)a2)
    {
      case 0xD:
        v15 = 3;
        goto LABEL_13;
      case 0xE:
        v17 = 2;
        v142 = 2;
        goto LABEL_16;
      case 0x1B:
        v15 = 4;
LABEL_13:
        v142 = v15;
        v17 = 1;
        goto LABEL_16;
    }
    goto LABEL_128;
  }
  switch((_DWORD)a2)
  {
    case '%':
      v16 = 4;
      break;
    case '2':
      v15 = 2;
      goto LABEL_13;
    case '=':
      v16 = 3;
      break;
    default:
LABEL_128:
      __break(0xC471u);
      goto LABEL_133;
  }
  v142 = v16;
  v17 = 2;
LABEL_16:
  v141 = v17;
  v140[0] = this;
  v140[1] = &v145;
  v140[2] = &v144;
  v140[3] = &v143;
  v140[4] = &v142;
  v140[5] = &v141;
  v18 = a5;
  v151 = 0;
  v152 = 0;
  v149 = this;
  v153 = 0;
  v19 = this[38].u64[1];
  if (v19)
    v20 = __clz(__rbit64(v19));
  else
    v20 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)this, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
  v21 = v10 + 7;
  v22 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v149, v20);
  v150 = v22;
  if (a4 == 1)
  {
    LOBYTE(v30) = v22;
    v31 = v10 + (unint64_t)a3;
    if (!(v31 >> 31) && (v31 < 0x100 || v31 <= 0xFFF0 && (v31 & 0xF) == 0))
    {
      if (this[3].i8[8] == 1)
      {
        if (v10 < (unint64_t)dword_1ECF4C6F4 << 16)
          goto LABEL_74;
        v99 = *(unsigned int *)(this[3].i64[0] + 108);
        v100 = v99 << 16;
        v120 = (_DWORD)v99 == -1;
        v101 = 0xFFFFFFFFLL;
        if (!v120)
          v101 = v100;
        if (v21 + (unint64_t)a3 < v101)
          goto LABEL_74;
        v102 = this->i64[1];
        for (i = *(_DWORD *)(v102 + 200); i < *(_DWORD *)(v102 + 52); *(_DWORD *)(v102 + 200) = i)
        {
          if ((i + 4) > *(_DWORD *)(v102 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v102 + 56), v23, v24, v25, v26, v27, v28, v29);
            i = *(_DWORD *)(v102 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v102 + 56) + i) = -721215457;
          i = *(_DWORD *)(v102 + 200) + 4;
        }
        v104 = i;
        if ((i + 4) > *(_DWORD *)(v102 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v102 + 56), v23, v24, v25, v26, v27, v28, v29);
          v104 = *(_DWORD *)(v102 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v102 + 56) + v104) = 335544320;
        *(_DWORD *)(v102 + 200) += 4;
        v105 = 0xFF000F4500000000;
        if (!*(_BYTE *)(v102 + 328))
          v105 = 0xFF000F4100000000;
        LODWORD(v156[0]) = i;
        *(_QWORD *)((char *)v156 + 4) = v105;
        if (i == -1)
          goto LABEL_74;
        v106 = this + 85;
        v107 = this[85].u32[3];
        if ((_DWORD)v107 == this[85].i32[2])
        {
          v108 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, (void *)(v107 + 1), (unint64_t)v156, v25, v26, v27, v28, v29);
          v109 = (_DWORD *)(this[85].i64[0] + 12 * this[85].u32[3]);
          *v109 = *(_DWORD *)v108;
          v110 = (unint64_t *)(v109 + 1);
          v105 = *(_QWORD *)(v108 + 4);
        }
        else
        {
          v112 = (int *)(v106->i64[0] + 12 * v107);
          *v112 = i;
          v110 = (unint64_t *)(v112 + 1);
        }
        *v110 = v105;
      }
      else
      {
        if (this[3].i8[8])
          goto LABEL_74;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)this->i64[1], v21 + a3, 8, v25, v26, v27, v28, v29);
        JSC::MacroAssemblerARM64::branch64(this->i64[1], 2, 8, 23, v32, v33, v34, v35, (uint64_t)&v147);
        LODWORD(v156[0]) = v147;
        v36 = v148;
        *(_QWORD *)((char *)v156 + 4) = v148;
        if (v147 == -1)
          goto LABEL_74;
        v37 = this + 85;
        v38 = this[85].u32[3];
        if ((_DWORD)v38 == this[85].i32[2])
        {
          v39 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, (void *)(v38 + 1), (unint64_t)v156, v25, v26, v27, v28, v29);
          v40 = (_DWORD *)(this[85].i64[0] + 12 * this[85].u32[3]);
          *v40 = *(_DWORD *)v39;
          v41 = v40 + 1;
          v36 = *(_QWORD *)(v39 + 4);
        }
        else
        {
          v111 = (_DWORD *)(v37->i64[0] + 12 * v38);
          *v111 = v147;
          v41 = v111 + 1;
        }
        *v41 = v36;
      }
      ++this[85].i32[3];
LABEL_74:
      v87 = JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadExtend(JSC::SIMDLaneOperation,JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>((uint64_t)v140, (v31 << 32) | 0x16, v24, v25, v26, v27, v28, v29);
      v88 = v113;
      goto LABEL_94;
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst((uint64_t)this, a3, a4, ((unint64_t)v22 << 8) | 2, v26, v27, v28, v29);
  }
  else
  {
    v30 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary((uint64_t)this, (uint64_t)a3, a4, v25, v26, v27, v28, v29) >> 8;
  }
  if (this[3].i8[8] == 1)
  {
    if (v10 < (unint64_t)dword_1ECF4C6F4 << 16)
      goto LABEL_43;
    v57 = *(unsigned int *)(this[3].i64[0] + 108);
    if ((_DWORD)v57 == -1)
      v58 = 0xFFFFFFFFLL;
    else
      v58 = v57 << 16;
    JSC::MacroAssemblerARM64::and64(this->i64[1], (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v30, 8);
    JSC::MacroAssemblerARM64::add64(this->i64[1], v18 + 7, 8, 8, v59, v60, v61, v62);
    JSC::MacroAssemblerARM64::branch64(this->i64[1], 2, 8, v58, v63, v64, v65, v66, (uint64_t)&v147);
  }
  else
  {
    if (this[3].i8[8])
      goto LABEL_43;
    JSC::MacroAssemblerARM64::and64(this->i64[1], (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v30, 8);
    JSC::MacroAssemblerARM64::add64(this->i64[1], v18 + 7, 8, 8, v49, v50, v51, v52);
    JSC::MacroAssemblerARM64::branch64(this->i64[1], 2, 8, 23, v53, v54, v55, v56, (uint64_t)&v147);
  }
  LODWORD(v156[0]) = v147;
  v67 = v148;
  *(_QWORD *)((char *)v156 + 4) = v148;
  if (v147 != -1)
  {
    v68 = this + 85;
    v69 = this[85].u32[3];
    if ((_DWORD)v69 == this[85].i32[2])
    {
      v70 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, (void *)(v69 + 1), (unint64_t)v156, v44, v45, v46, v47, v48);
      v71 = (_DWORD *)(this[85].i64[0] + 12 * this[85].u32[3]);
      *v71 = *(_DWORD *)v70;
      v72 = v71 + 1;
      v67 = *(_QWORD *)(v70 + 4);
    }
    else
    {
      v73 = (_DWORD *)(v68->i64[0] + 12 * v69);
      *v73 = v147;
      v72 = v73 + 1;
    }
    *v72 = v67;
    ++this[85].i32[3];
  }
LABEL_43:
  if ((v10 & 0x80000000) != 0 || v10 >= 0x100 && (v10 > 0xFFF0 || (v10 & 0xF) != 0))
  {
    v121 = (_DWORD *)this->i64[1];
    v122 = v121[50];
    if (v122 + 4 > v121[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v121 + 14), v42, v43, v44, v45, v46, v47, v48);
      v122 = v121[50];
    }
    *(_DWORD *)(*((_QWORD *)v121 + 7) + v122) = ((v30 & 0x1F) << 16) | 0x8B2042C8;
    v121[50] += 4;
    if ((v10 & 0x80000000) != 0 || v10 > 0xFFF0 || (v10 & 0xF) != 0)
    {
      JSC::MacroAssemblerARM64::add64(this->i64[1], v10, 8, 8, v45, v46, v47, v48);
      v123 = 8;
    }
    else
    {
      v123 = ((unint64_t)v10 << 32) | 8;
    }
    v87 = JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadExtend(JSC::SIMDLaneOperation,JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>((uint64_t)v140, v123, v43, v44, v45, v46, v47, v48);
    v88 = v124;
  }
  else
  {
    v74 = (uint64_t)v145;
    v75 = v146;
    v76 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)this, (uint64_t)v145, v146, v44, v45, v46, v47, v48);
    if (v75 == 2)
    {
      v81 = ((this[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * v74 + 16;
      if (this[80].i32[0] < v81)
        this[80].i32[0] = v81;
      if ((v76 & 7) != 1 || ((-8 * v81) ^ v76) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)this, v74, v75, v76);
    }
    v82 = this[5].i64[1];
    v83 = *(_DWORD *)(v82 + 596);
    if (!v83)
    {
      __break(0xC471u);
LABEL_132:
      __break(1u);
LABEL_133:
      JUMPOUT(0x198F8C8B4);
    }
    v84 = ((unint64_t)v30 << 8) | 0x16;
    v85 = *(_QWORD *)(v82 + 584) + 1232 * v83;
    v86 = *(_DWORD *)(v82 + 68) + *(_DWORD *)(v85 - 32);
    if (*(_DWORD *)(v85 - 160) == 5)
      v87 = v86 + 1;
    else
      v87 = v86;
    v88 = -1278;
    v93 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint((uint64_t)this, v87, 0xFB02uLL, 0, v77, v78, v79, v80);
    if (HIBYTE(word_1ECF4C700))
    {
      v139 = v144;
      *(_QWORD *)&v156[0] = v87;
      *((_QWORD *)&v156[0] + 1) = 64258;
      v154 = "Vector";
      WTF::dataLog<char [16]>("BBQ\t");
      if (this->i32[0])
      {
        v114 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v114;
        }
        while (v114 < this->i32[0]);
      }
      LOBYTE(v155) = v139;
      WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>(&v154, (char *)&v155, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v145);
      v120 = v146 == 1 || v146 == 4;
      if (!v120)
      {
        v155 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)this, (uint64_t)v145, v146, v115, v116, v117, v118, v119);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v155);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)this, 0, &v143, (uint64_t *)v156);
    }
    v94 = (v93 >> 8);
    JSC::MacroAssemblerARM64::loadDouble(this->i64[1], v84, v18, v94, v89, v90, v91, v92);
    JSC::MacroAssemblerARM64::vectorExtendLow((_DWORD *)this->i64[1], v142 & 0x3F | ((unint64_t)(v141 & 3) << 6), v94, v94, v95, v96, v97, v98);
  }
LABEL_94:
  if ((_BYTE)v153)
    goto LABEL_103;
  LOBYTE(v153) = 1;
  v125 = v150 & 0x7F;
  if (v125 >= 0x40)
    goto LABEL_132;
  v126 = 1 << v125;
  if ((v149[40].i64[1] & (1 << v125)) != 0)
  {
    v127 = v150;
    if (v149[21].u32[1] <= (unint64_t)v150)
    {
      __break(0xC471u);
      JUMPOUT(0x198F8C8BCLL);
    }
    v128 = v149[20].i64[1] + 4 * v150;
    v149[62] = vandq_s8(v149[62], (int8x16_t)vdupq_n_s64(~v126));
    if ((_BYTE)word_1ECF4C700)
    {
      v156[0] = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v127];
      WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v156, "\n");
    }
    if ((v151 & v126) == 0 || (*(_WORD *)(v128 + 1) & 7) == 3)
    {
      *(_DWORD *)v128 = 0;
      v149[38].i64[1] |= 1 << v125;
    }
  }
LABEL_103:
  if (!HIBYTE(v153))
  {
    HIBYTE(v153) = 1;
    v129 = v151;
    if (v151)
    {
      v130 = __clz(__rbit64(v151));
      v131 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
      v132 = "\n";
      do
      {
        if (v130 > 0x1Fu)
        {
          v137 = v131;
          v138 = v132;
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v149, (char)(v130 - 32));
          v132 = v138;
          v131 = v137;
        }
        else
        {
          v133 = 1 << v130;
          if ((v149[40].i64[1] & (1 << v130)) != 0)
          {
            if (v130 >= v149[21].u32[1])
            {
              __break(0xC471u);
              JUMPOUT(0x198F8C8C4);
            }
            v134 = v149[20].i64[1];
            v149[62] = vandq_s8(v149[62], (int8x16_t)vdupq_n_s64(~v133));
            if ((_BYTE)word_1ECF4C700)
            {
              v156[0] = *(_OWORD *)&v131[2 * v130];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v156, "\n");
              v132 = "\n";
              v131 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
              v129 = v151;
            }
            v135 = v134 + 4 * v130;
            if ((v129 & v133) == 0 || (*(_WORD *)(v135 + 1) & 7) == 3)
            {
              *(_DWORD *)v135 = 0;
              v149[38].i64[1] |= v133;
            }
          }
        }
        if (v130 > 0x3E)
          break;
        v129 = v151;
        if (!v151)
          break;
        v136 = __clz(__rbit64(v151 >> ((v130 + 1) & 0x3F))) + (((_BYTE)v130 + 1) & 0x3F);
        v130 = v136 >= 0x40 ? 64 : v136;
      }
      while (v136 < 0x40);
    }
  }
  *(_QWORD *)a6 = v87;
  *(_WORD *)(a6 + 8) = v88;
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadPad(int8x16_t *this@<X0>, JSC::ARM64LogicalImmediate *a2@<X1>, JSC::ARM64LogicalImmediate *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  unsigned int v10;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t *v35;
  uint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x16_t *v66;
  uint64_t v67;
  unint64_t v68;
  _DWORD *v69;
  _QWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int32 v79;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int i;
  unsigned int v99;
  unint64_t v100;
  int8x16_t *v101;
  uint64_t v102;
  unint64_t v103;
  _DWORD *v104;
  unint64_t *v105;
  _DWORD *v106;
  int *v107;
  __int16 v108;
  unsigned __int32 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  _DWORD *v116;
  unsigned int v117;
  uint64_t v118;
  __int16 v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char **v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char **v132;
  const char *v133;
  char v134;
  _QWORD v135[4];
  int v136;
  char v137;
  JSC::ARM64LogicalImmediate *v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int8x16_t *v142;
  signed __int8 v143;
  unint64_t v144;
  uint64_t v145;
  __int16 v146;
  const char *v147;
  int v148;
  uint64_t v149[4];

  v10 = a5;
  v138 = a3;
  v139 = a4;
  v137 = (char)a2;
  v136 = a5;
  v135[0] = this;
  v135[1] = &v138;
  v135[2] = &v137;
  v135[3] = &v136;
  if ((_DWORD)a2 == 64)
    v15 = 3;
  else
    v15 = 7;
  v16 = a5;
  v144 = 0;
  v145 = 0;
  v142 = this;
  v146 = 0;
  v17 = this[38].u64[1];
  if (v17)
    v18 = __clz(__rbit64(v17));
  else
    v18 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)this, a2, (unint64_t)a3, a4, a5, a6, a7, a8);
  v19 = v15 + v10;
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v142, v18);
  v143 = v20;
  if (a4 == 1)
  {
    LOBYTE(v28) = v20;
    v29 = v16 + a3;
    if (!(v29 >> 31) && (v29 < 0x100 || v29 <= 0xFFF0 && (v29 & 0xF) == 0))
    {
      if (this[3].i8[8] == 1)
      {
        if (v16 < (unint64_t)dword_1ECF4C6F4 << 16)
          goto LABEL_64;
        v94 = *(unsigned int *)(this[3].i64[0] + 108);
        v95 = v94 << 16;
        v115 = (_DWORD)v94 == -1;
        v96 = 0xFFFFFFFFLL;
        if (!v115)
          v96 = v95;
        if (v19 + (unint64_t)a3 < v96)
          goto LABEL_64;
        v97 = this->i64[1];
        for (i = *(_DWORD *)(v97 + 200); i < *(_DWORD *)(v97 + 52); *(_DWORD *)(v97 + 200) = i)
        {
          if ((i + 4) > *(_DWORD *)(v97 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v97 + 56), v21, v22, v23, v24, v25, v26, v27);
            i = *(_DWORD *)(v97 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v97 + 56) + i) = -721215457;
          i = *(_DWORD *)(v97 + 200) + 4;
        }
        v99 = i;
        if ((i + 4) > *(_DWORD *)(v97 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v97 + 56), v21, v22, v23, v24, v25, v26, v27);
          v99 = *(_DWORD *)(v97 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v97 + 56) + v99) = 335544320;
        *(_DWORD *)(v97 + 200) += 4;
        v100 = 0xFF000F4500000000;
        if (!*(_BYTE *)(v97 + 328))
          v100 = 0xFF000F4100000000;
        LODWORD(v149[0]) = i;
        *(uint64_t *)((char *)v149 + 4) = v100;
        if (i == -1)
          goto LABEL_64;
        v101 = this + 85;
        v102 = this[85].u32[3];
        if ((_DWORD)v102 == this[85].i32[2])
        {
          v103 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v101, (void *)(v102 + 1), (unint64_t)v149, v23, v24, v25, v26, v27);
          v104 = (_DWORD *)(this[85].i64[0] + 12 * this[85].u32[3]);
          *v104 = *(_DWORD *)v103;
          v105 = (unint64_t *)(v104 + 1);
          v100 = *(_QWORD *)(v103 + 4);
        }
        else
        {
          v107 = (int *)(v101->i64[0] + 12 * v102);
          *v107 = i;
          v105 = (unint64_t *)(v107 + 1);
        }
        *v105 = v100;
      }
      else
      {
        if (this[3].i8[8])
          goto LABEL_64;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)this->i64[1], v19 + a3, 8, v23, v24, v25, v26, v27);
        JSC::MacroAssemblerARM64::branch64(this->i64[1], 2, 8, 23, v30, v31, v32, v33, (uint64_t)&v140);
        LODWORD(v149[0]) = v140;
        v34 = v141;
        *(uint64_t *)((char *)v149 + 4) = v141;
        if (v140 == -1)
          goto LABEL_64;
        v35 = this + 85;
        v36 = this[85].u32[3];
        if ((_DWORD)v36 == this[85].i32[2])
        {
          v37 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, (void *)(v36 + 1), (unint64_t)v149, v23, v24, v25, v26, v27);
          v38 = (_DWORD *)(this[85].i64[0] + 12 * this[85].u32[3]);
          *v38 = *(_DWORD *)v37;
          v39 = v38 + 1;
          v34 = *(_QWORD *)(v37 + 4);
        }
        else
        {
          v106 = (_DWORD *)(v35->i64[0] + 12 * v36);
          *v106 = v140;
          v39 = v106 + 1;
        }
        *v39 = v34;
      }
      ++this[85].i32[3];
LABEL_64:
      v85 = JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadPad(JSC::SIMDLaneOperation,JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>((uint64_t)v135, (v29 << 32) | 0x16, v22, v23, v24, v25, v26, v27);
      v86 = v108;
      goto LABEL_84;
    }
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst((uint64_t)this, a3, a4, ((unint64_t)v20 << 8) | 2, v24, v25, v26, v27);
  }
  else
  {
    v28 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary((uint64_t)this, (uint64_t)a3, a4, v23, v24, v25, v26, v27) >> 8;
  }
  if (this[3].i8[8] == 1)
  {
    if (v16 < (unint64_t)dword_1ECF4C6F4 << 16)
      goto LABEL_31;
    v55 = *(unsigned int *)(this[3].i64[0] + 108);
    if ((_DWORD)v55 == -1)
      v56 = 0xFFFFFFFFLL;
    else
      v56 = v55 << 16;
    JSC::MacroAssemblerARM64::and64(this->i64[1], (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v28, 8);
    JSC::MacroAssemblerARM64::add64(this->i64[1], v19, 8, 8, v57, v58, v59, v60);
    JSC::MacroAssemblerARM64::branch64(this->i64[1], 2, 8, v56, v61, v62, v63, v64, (uint64_t)&v140);
  }
  else
  {
    if (this[3].i8[8])
      goto LABEL_31;
    JSC::MacroAssemblerARM64::and64(this->i64[1], (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v28, 8);
    JSC::MacroAssemblerARM64::add64(this->i64[1], v19, 8, 8, v47, v48, v49, v50);
    JSC::MacroAssemblerARM64::branch64(this->i64[1], 2, 8, 23, v51, v52, v53, v54, (uint64_t)&v140);
  }
  LODWORD(v149[0]) = v140;
  v65 = v141;
  *(uint64_t *)((char *)v149 + 4) = v141;
  if (v140 != -1)
  {
    v66 = this + 85;
    v67 = this[85].u32[3];
    if ((_DWORD)v67 == this[85].i32[2])
    {
      v68 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, (void *)(v67 + 1), (unint64_t)v149, v42, v43, v44, v45, v46);
      v69 = (_DWORD *)(this[85].i64[0] + 12 * this[85].u32[3]);
      *v69 = *(_DWORD *)v68;
      v70 = v69 + 1;
      v65 = *(_QWORD *)(v68 + 4);
    }
    else
    {
      v71 = (_DWORD *)(v66->i64[0] + 12 * v67);
      *v71 = v140;
      v70 = v71 + 1;
    }
    *v70 = v65;
    ++this[85].i32[3];
  }
LABEL_31:
  if ((v10 & 0x80000000) != 0 || v10 >= 0x100 && (v10 > 0xFFF0 || (v10 & 0xF) != 0))
  {
    v116 = (_DWORD *)this->i64[1];
    v117 = v116[50];
    if (v117 + 4 > v116[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v116 + 14), v40, v41, v42, v43, v44, v45, v46);
      v117 = v116[50];
    }
    *(_DWORD *)(*((_QWORD *)v116 + 7) + v117) = ((v28 & 0x1F) << 16) | 0x8B2042C8;
    v116[50] += 4;
    if ((v10 & 0x80000000) != 0 || v10 > 0xFFF0 || (v10 & 0xF) != 0)
    {
      JSC::MacroAssemblerARM64::add64(this->i64[1], v16, 8, 8, v43, v44, v45, v46);
      v118 = 8;
    }
    else
    {
      v118 = (v16 << 32) | 8;
    }
    v85 = JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadPad(JSC::SIMDLaneOperation,JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>((uint64_t)v135, v118, v41, v42, v43, v44, v45, v46);
    v86 = v119;
  }
  else
  {
    v72 = (uint64_t)v138;
    v73 = v139;
    v74 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)this, (uint64_t)v138, v139, v42, v43, v44, v45, v46);
    if (v73 == 2)
    {
      v79 = ((this[80].i32[2] + 15) & 0xFFFFFFF0) + 16 * v72 + 16;
      if (this[80].i32[0] < v79)
        this[80].i32[0] = v79;
      if ((v74 & 7) != 1 || ((-8 * v79) ^ v74) >= 8)
        JSC::Wasm::BBQJITImpl::BBQJIT::unbind((uint64_t)this, v72, v73, v74);
    }
    v80 = this[5].i64[1];
    v81 = *(_DWORD *)(v80 + 596);
    if (!v81)
    {
      __break(0xC471u);
LABEL_121:
      __break(1u);
LABEL_122:
      JUMPOUT(0x198F8D238);
    }
    v82 = ((unint64_t)v28 << 8) | 0x16;
    v83 = *(_QWORD *)(v80 + 584) + 1232 * v81;
    v84 = *(_DWORD *)(v80 + 68) + *(_DWORD *)(v83 - 32);
    if (*(_DWORD *)(v83 - 160) == 5)
      v85 = v84 + 1;
    else
      v85 = v84;
    v86 = -1278;
    v91 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint((uint64_t)this, v85, 0xFB02uLL, 0, v75, v76, v77, v78);
    if (HIBYTE(word_1ECF4C700))
    {
      v134 = v137;
      v149[0] = v85;
      v149[1] = 64258;
      v147 = "Vector";
      WTF::dataLog<char [16]>("BBQ\t");
      if (this->i32[0])
      {
        v109 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v109;
        }
        while (v109 < this->i32[0]);
      }
      LOBYTE(v148) = v134;
      WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>(&v147, (char *)&v148, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)&v138);
      v115 = v139 == 1 || v139 == 4;
      if (!v115)
      {
        v148 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf((uint64_t)this, (uint64_t)v138, v139, v110, v111, v112, v113, v114);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v148);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)this, 0, &v136, v149);
    }
    v92 = this->i64[1];
    v93 = (v91 >> 8);
    if (v137 == 64)
      JSC::MacroAssemblerARM64::loadFloat(v92, v82, v16, v93, v87, v88, v89, v90);
    else
      JSC::MacroAssemblerARM64::loadDouble(v92, v82, v16, v93, v87, v88, v89, v90);
  }
LABEL_84:
  if ((_BYTE)v146)
    goto LABEL_93;
  LOBYTE(v146) = 1;
  v120 = v143 & 0x7F;
  if (v120 >= 0x40)
    goto LABEL_121;
  v121 = 1 << v120;
  if ((v142[40].i64[1] & (1 << v120)) == 0)
    goto LABEL_93;
  v122 = v143;
  if (v142[21].u32[1] <= (unint64_t)v143)
  {
    __break(0xC471u);
    goto LABEL_122;
  }
  v123 = v142[20].i64[1] + 4 * v143;
  v142[62] = vandq_s8(v142[62], (int8x16_t)vdupq_n_s64(~v121));
  if ((_BYTE)word_1ECF4C700)
  {
    *(_OWORD *)v149 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v122];
    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v149, "\n");
  }
  if ((v144 & v121) == 0 || (*(_WORD *)(v123 + 1) & 7) == 3)
  {
    *(_DWORD *)v123 = 0;
    v142[38].i64[1] |= 1 << v120;
  }
LABEL_93:
  if (!HIBYTE(v146))
  {
    HIBYTE(v146) = 1;
    v124 = v144;
    if (v144)
    {
      v125 = __clz(__rbit64(v144));
      v126 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
      v127 = "\n";
      do
      {
        if (v125 > 0x1Fu)
        {
          v132 = v126;
          v133 = v127;
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v142, (char)(v125 - 32));
          v127 = v133;
          v126 = v132;
        }
        else
        {
          v128 = 1 << v125;
          if ((v142[40].i64[1] & (1 << v125)) != 0)
          {
            if (v125 >= v142[21].u32[1])
            {
              __break(0xC471u);
              JUMPOUT(0x198F8D240);
            }
            v129 = v142[20].i64[1];
            v142[62] = vandq_s8(v142[62], (int8x16_t)vdupq_n_s64(~v128));
            if ((_BYTE)word_1ECF4C700)
            {
              *(_OWORD *)v149 = *(_OWORD *)&v126[2 * v125];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v149, "\n");
              v127 = "\n";
              v126 = &JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister;
              v124 = v144;
            }
            v130 = v129 + 4 * v125;
            if ((v124 & v128) == 0 || (*(_WORD *)(v130 + 1) & 7) == 3)
            {
              *(_DWORD *)v130 = 0;
              v142[38].i64[1] |= v128;
            }
          }
        }
        if (v125 > 0x3E)
          break;
        v124 = v144;
        if (!v144)
          break;
        v131 = __clz(__rbit64(v144 >> ((v125 + 1) & 0x3F))) + (((_BYTE)v125 + 1) & 0x3F);
        v125 = v131 >= 0x40 ? 64 : v131;
      }
      while (v131 < 0x40);
    }
  }
  *(_QWORD *)a6 = v85;
  *(_WORD *)(a6 + 8) = v86;
  *a9 = 0;
  a9[8] = 0;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addConstant(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22[2];
  unint64_t v23[2];
  const char *v24;

  v23[0] = a2;
  v23[1] = a3;
  v8 = *(_QWORD *)(result + 88);
  v9 = *(_DWORD *)(v8 + 596);
  if (v9)
  {
    v12 = (unsigned int *)result;
    v13 = *(_QWORD *)(v8 + 584) + 1232 * v9;
    v14 = *(_DWORD *)(v8 + 68) + *(_DWORD *)(v13 - 32);
    if (*(_DWORD *)(v13 - 160) == 5)
      v15 = v14 + 1;
    else
      v15 = v14;
    v16 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(result, v15, 0xFB02uLL, 0, a5, a6, a7, a8);
    JSC::Wasm::BBQJITImpl::BBQJIT::materializeVectorConstant((uint64_t)v12, a2, a3, v16, v17, v18, v19, v20);
    if (HIBYTE(word_1ECF4C700))
    {
      v22[0] = v15;
      v22[1] = 64258;
      v24 = "V128Const";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*v12)
      {
        v21 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v21;
        }
        while (v21 < *v12);
      }
      WTF::dataLog<char const*,char [2]>(&v24, " ");
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::v128_u,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>((uint64_t)v12, 1, v23, v22);
    }
    return v15;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addExtractLane(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  _DWORD *v36;
  unsigned int v37;
  uint64_t v38[3];
  char v39;
  int IfNecessary;
  unsigned __int8 v41;
  _QWORD v42[2];
  const char *v43;

  v42[0] = a4;
  v42[1] = a5;
  v41 = a3;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v20 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v15, v16, v17, v18, v19);
  if (a5 == 2)
  {
    v25 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v25)
      *(_DWORD *)(a1 + 1280) = v25;
    if ((v20 & 7) != 1 || ((-8 * v25) ^ v20) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v20);
  }
  v26 = -510;
  switch(a2 & 0x3F)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x198F8D5E0);
    case 1:
    case 2:
    case 3:
      v26 = -254;
      break;
    case 4:
      break;
    case 5:
      v26 = -766;
      break;
    case 6:
      v26 = -1022;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198F8D600);
  }
  v27 = *(_QWORD *)(a1 + 88);
  v28 = *(_DWORD *)(v27 + 596);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x198F8D608);
  }
  v29 = *(_QWORD *)(v27 + 584) + 1232 * v28;
  v30 = *(_DWORD *)(v27 + 68) + *(_DWORD *)(v29 - 32);
  if (*(_DWORD *)(v29 - 160) == 5)
    v31 = v30 + 1;
  else
    v31 = v30;
  *a6 = v31;
  *((_WORD *)a6 + 4) = v26;
  v35 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v31, a6[1], 0, v21, v22, v23, v24);
  if (HIBYTE(word_1ECF4C700))
  {
    v39 = a2 & 0x3F;
    *(_OWORD *)v38 = *(_OWORD *)a6;
    v43 = "VectorExtractLane";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v37 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v37;
      }
      while (v37 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v43, " ");
    WTF::dataLog<JSC::SIMDLane>(&v39);
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<unsigned char>(&v41);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)v42, &IfNecessary, v38);
  }
  v36 = *(_DWORD **)(a1 + 8);
  if ((a2 & 0x3Fu) - 5 > 1)
    JSC::MacroAssemblerARM64::vectorExtractLane(v36, a2 & 0x3F, a2 >> 6, v41, SBYTE1(IfNecessary), (v35 >> 8), v33, v34);
  else
    JSC::MacroAssemblerARM64::vectorExtractLane(v36, a2 & 0x3F, v41, SBYTE1(IfNecessary), (v35 >> 8), v32, v33, v34);
  *a9 = 0;
  a9[8] = 0;
}

void JSC::MacroAssemblerARM64::vectorExtractLane(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  unsigned int *v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;

  if ((_DWORD)a3)
  {
    v8 = a2;
    switch((int)a2)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x198F8D788);
      case 1:
        break;
      case 2:
        a2 = 2;
        v8 = 2;
        break;
      case 3:
      case 5:
        v8 = 4;
        a2 = 3;
        break;
      case 4:
      case 6:
        v8 = 8;
        a2 = 4;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F8D768);
    }
    v12 = a5 | (32 * a4) | ((((_DWORD)a3 << a2) | v8) << 16) | 0x4E000400;
    v10 = a1 + 50;
    v9 = a1[50];
    v11 = a1 + 14;
    if (v9 + 4 > a1[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      v9 = *v10;
    }
  }
  else
  {
    if ((_DWORD)a4 == (_DWORD)a5)
      return;
    v10 = a1 + 50;
    v9 = a1[50];
    v11 = a1 + 14;
    if (v9 + 4 > a1[48])
    {
      v14 = a5;
      v13 = a4;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
      LODWORD(a4) = v13;
      LODWORD(a5) = v14;
      v9 = *v10;
    }
    v12 = a5 | (32 * a4) | 0x1E604000;
  }
  *(_DWORD *)(*v11 + v9) = v12;
  *v10 += 4;
}

{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  _QWORD *v15;

  if ((_DWORD)a3 == 1)
  {
    if (a2 >= 7)
    {
      __break(0xC471u);
      JUMPOUT(0x198F8D928);
    }
    v8 = dword_19919FB40[(char)a2];
    v9 = a2;
    switch((int)a2)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x198F8D988);
      case 1:
        break;
      case 2:
        a2 = 2;
        v9 = 2;
        break;
      case 3:
      case 5:
        v9 = 4;
        a2 = 3;
        break;
      case 4:
      case 6:
        v9 = 8;
        a2 = 4;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F8D968);
    }
    v12 = a6 | (32 * a5) | v8 | ((((_DWORD)a4 << a2) | v9) << 16) | 0x2800;
  }
  else
  {
    if (a2 >= 7)
    {
      __break(0xC471u);
      JUMPOUT(0x198F8D948);
    }
    v10 = dword_19919FB40[(char)a2];
    v11 = a2;
    switch((int)a2)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x198F8D9C8);
      case 1:
        break;
      case 2:
        a2 = 2;
        v11 = 2;
        break;
      case 3:
      case 5:
        v11 = 4;
        a2 = 3;
        break;
      case 4:
      case 6:
        v11 = 8;
        a2 = 4;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F8D9A8);
    }
    v12 = a6 | (32 * a5) | v10 | ((((_DWORD)a4 << a2) | v11) << 16) | 0x3800;
  }
  v14 = a1 + 50;
  v13 = a1[50];
  v15 = a1 + 14;
  if (v13 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v13 = *v14;
  }
  *(_DWORD *)(*v15 + v13) = v12;
  *v14 += 4;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addReplaceLane(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t *a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int IfNecessary;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  unsigned int v55;
  unsigned int v56;
  _DWORD *v57;
  unsigned int v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  char v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v70[3];
  char v71;
  int v72;
  unsigned int v73;
  unsigned __int8 v74;
  _QWORD v75[2];
  _QWORD v76[2];
  const char *v77;

  v76[0] = a4;
  v76[1] = a5;
  v75[0] = a6;
  v75[1] = a7;
  v74 = a3;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, a6, a7, (uint64_t)a8);
  v73 = IfNecessary;
  if (a7 == 1)
  {
    if ((BYTE1(a7) + 5) >= 3u)
      v22 = 2050;
    else
      v22 = 4099;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, (JSC::ARM64LogicalImmediate *)a6, a7, v22, v17, v18, v19, v20);
  }
  else
  {
    LODWORD(v22) = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a6, a7, v16, v17, v18, v19, v20);
  }
  v72 = v22;
  v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v23, v24, v25, v26, v27);
  if (a5 == 2)
  {
    v34 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v34)
      *(_DWORD *)(a1 + 1280) = v34;
    if ((v28 & 7) != 1 || ((-8 * v34) ^ v28) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v28);
  }
  v35 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a6, a7, v29, v30, v31, v32, v33);
  if (a7 == 2)
  {
    v40 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a6 + 16;
    if (*(_DWORD *)(a1 + 1280) < v40)
      *(_DWORD *)(a1 + 1280) = v40;
    if ((v35 & 7) != 1 || ((-8 * v40) ^ v35) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a6, a7, v35);
  }
  v41 = *(_QWORD *)(a1 + 88);
  v42 = *(_DWORD *)(v41 + 596);
  if (!v42)
  {
    __break(0xC471u);
    JUMPOUT(0x198F8DF5CLL);
  }
  v43 = *(_QWORD *)(v41 + 584) + 1232 * v42;
  v44 = *(_DWORD *)(v41 + 68) + *(_DWORD *)(v43 - 32);
  if (*(_DWORD *)(v43 - 160) == 5)
    v45 = v44 + 1;
  else
    v45 = v44;
  *a8 = v45;
  *((_WORD *)a8 + 4) = -1278;
  v46 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v45, a8[1], 0, v36, v37, v38, v39);
  if (JSC::Wasm::BBQJITImpl::BBQJIT::Location::operator==(&v72, v46))
  {
    v54 = *(_DWORD **)(a1 + 8);
    v55 = v54[50];
    if (v55 + 4 > v54[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v54 + 14), v47, v48, v49, v50, v51, v52, v53);
      v55 = v54[50];
    }
    *(_DWORD *)(*((_QWORD *)v54 + 7) + v55) = (32 * ((__int16)v22 >> 8)) | ((__int16)v22 >> 8 << 16) | 0x4EA01C10;
    v54[50] += 4;
    v72 = 4099;
  }
  if (HIBYTE(word_1ECF4C700))
  {
    v71 = a2 & 0x3F;
    *(_OWORD *)v70 = *(_OWORD *)a8;
    v77 = "VectorReplaceLane";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v68 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v68;
      }
      while (v68 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v77, " ");
    WTF::dataLog<JSC::SIMDLane>(&v71);
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<unsigned char>(&v74);
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v76);
    if ((IfNecessary & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v73);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)v75, &v72, v70);
    LOBYTE(v56) = BYTE1(v73);
  }
  else
  {
    v56 = IfNecessary >> 8;
  }
  v57 = *(_DWORD **)(a1 + 8);
  v58 = v57[50];
  if (v58 + 4 > v57[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v57 + 14), v47, v48, v49, v50, v51, v52, v53);
    v58 = v57[50];
  }
  v59 = 1308630016;
  *(_DWORD *)(*((_QWORD *)v57 + 7) + v58) = (32 * (char)v56) | ((char)v56 << 16) | ((__int16)v46 >> 8) | 0x4EA01C00;
  v57[50] += 4;
  v60 = v72;
  v61 = *(_QWORD *)(a1 + 8);
  v62 = a2 & 0x3F;
  v63 = v74;
  if ((v72 & 7) == 3)
  {
    v64 = a2 & 0x3F;
    switch(a2 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x198F8DEF4);
      case 1:
        break;
      case 2:
        v62 = 2;
        v64 = 2;
        break;
      case 3:
      case 5:
        v64 = 4;
        v62 = 3;
        break;
      case 4:
      case 6:
        v64 = 8;
        v62 = 4;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F8DF34);
    }
    v59 = 1845494784;
  }
  else
  {
    v64 = a2 & 0x3F;
    switch(a2 & 0x3F)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x198F8DF14);
      case 1:
        break;
      case 2:
        v62 = 2;
        v64 = 2;
        break;
      case 3:
      case 5:
        v64 = 4;
        v62 = 3;
        break;
      case 4:
      case 6:
        v64 = 8;
        v62 = 4;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F8DF54);
    }
  }
  v67 = *(_DWORD *)(v61 + 200);
  v66 = (unsigned int *)(v61 + 200);
  v65 = v67;
  if (v67 + 4 > *(v66 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v66 - 36), v47, v48, v49, v50, v51, v52, v53);
    v65 = *v66;
  }
  *(_DWORD *)(*((_QWORD *)v66 - 18) + v65) = (v60 >> 3) & 0xFFFFFFE0 | (((v63 << v62) | v64) << 16) | v59 | ((__int16)v46 >> 8);
  *v66 += 4;
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDI_V(uint64_t a1@<X0>, int a2@<W1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  _DWORD *v52;
  int v53;
  unsigned int v54;
  _DWORD *v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  _DWORD *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  JSC::ARM64LogicalImmediate *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  unsigned int v89;
  int v90;
  int v91;
  _DWORD *v92;
  unsigned int v93;
  _DWORD *v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  _DWORD *v98;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  int8x16_t *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _DWORD *v108;
  int v109;
  unsigned int v110;
  _DWORD *v111;
  unsigned int v112;
  _DWORD *v113;
  unsigned int v114;
  _DWORD *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  _DWORD *v120;
  unsigned int v121;
  _DWORD *v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  JSC::Wasm::BBQJITImpl::BBQJIT *v127[2];
  unint64_t v128;
  uint64_t v129;
  __int16 v130;
  unsigned int IfNecessary;
  _QWORD v132[2];
  char v133;
  __int128 v134;

  v132[0] = a4;
  v132[1] = a5;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v16, v17, v18, v19, v20);
  if (a5 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v21 & 7) != 1 || ((-8 * v26) ^ v21) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v21);
  }
  v27 = *(_QWORD *)(a1 + 88);
  v28 = *(_DWORD *)(v27 + 596);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x198F8EAD4);
  }
  v29 = *(_QWORD *)(v27 + 584) + 1232 * v28;
  v30 = *(_DWORD *)(v27 + 68) + *(_DWORD *)(v29 - 32);
  if (*(_DWORD *)(v29 - 160) == 5)
    v31 = v30 + 1;
  else
    v31 = v30;
  *a6 = v31;
  *((_WORD *)a6 + 4) = -254;
  v39 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v31, a6[1], 0, v22, v23, v24, v25);
  if (HIBYTE(word_1ECF4C700))
  {
    *(_OWORD *)v127 = *(_OWORD *)a6;
    *(_QWORD *)&v134 = "Vector";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v126 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v126;
      }
      while (v126 < *(_DWORD *)a1);
    }
    v133 = a2;
    WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>((const char **)&v134, &v133, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v132, (int *)&IfNecessary, (uint64_t *)v127);
  }
  switch(a2)
  {
    case ',':
      v52 = *(_DWORD **)(a1 + 8);
      v53 = (32 * SBYTE1(IfNecessary)) | 0x6EB0A810;
      v54 = v52[50];
      if (v54 + 4 > v52[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v52 + 14), v32, v33, v34, v35, v36, v37, v38);
        v54 = v52[50];
      }
      *(_DWORD *)(*((_QWORD *)v52 + 7) + v54) = v53;
      v52[50] += 4;
      v55 = *(_DWORD **)(a1 + 8);
      v56 = v55[50];
      if (v56 + 4 > v55[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v55 + 14), v32, v33, v34, v35, v36, v37, v38);
        v56 = v55[50];
      }
      v57 = v39 >> 8;
      v58 = (v39 >> 8) & 0x1F;
      *(_DWORD *)(*((_QWORD *)v55 + 7) + v56) = v58 | 0x1E260200;
      v55[50] += 4;
      v59 = *(_DWORD **)(a1 + 8);
      v60 = (32 * v58) & 0xFFE0FFFF | ((v57 & 0x1F) << 16) | 0x6A00001F;
      v61 = v59[50];
      if (v61 + 4 > v59[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 14), v32, v33, v34, v35, v36, v37, v38);
        v61 = v59[50];
      }
      *(_DWORD *)(*((_QWORD *)v59 + 7) + v61) = v60;
      v62 = v59[50];
      v63 = v62 + 4;
      v59[50] = v62 + 4;
      if ((v62 + 8) > v59[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v59 + 14), v32, v33, v34, v35, v36, v37, v38);
        v63 = v59[50];
      }
      *(_DWORD *)(*((_QWORD *)v59 + 7) + v63) = v58 | 0x1A9F07E0;
      v59[50] += 4;
      break;
    case '9':
      v49 = a3 & 0x3F;
      if ((v49 - 1) >= 3)
      {
        if (v49 != 4)
        {
          __break(0xC471u);
          JUMPOUT(0x198F8EACCLL);
        }
        v51 = 1857137168;
        JSC::MacroAssemblerARM64::compareIntegerVectorWithZero(*(_DWORD **)(a1 + 8), 1, a3, SBYTE1(IfNecessary), 16, v36, v37, v38);
        v50 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        v50 = *(_QWORD *)(a1 + 8);
        switch(v49)
        {
          case 1:
            v51 = (32 * SBYTE1(IfNecessary)) | 0x6E31A810;
            break;
          case 2:
            v51 = (32 * SBYTE1(IfNecessary)) | 0x6E71A810;
            break;
          case 3:
            v51 = (32 * SBYTE1(IfNecessary)) | 0x6EB1A810;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198F8EA8CLL);
        }
      }
      v119 = *(_DWORD *)(v50 + 200);
      v118 = (unsigned int *)(v50 + 200);
      v117 = v119;
      if (v119 + 4 > *(v118 - 2))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v118 - 36), v32, v33, v34, v35, v36, v37, v38);
        v117 = *v118;
      }
      *(_DWORD *)(*((_QWORD *)v118 - 18) + v117) = v51;
      *v118 += 4;
      v120 = *(_DWORD **)(a1 + 8);
      v121 = v120[50];
      if (v121 + 4 > v120[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v120 + 14), v32, v33, v34, v35, v36, v37, v38);
        v121 = v120[50];
      }
      *(_DWORD *)(*((_QWORD *)v120 + 7) + v121) = 505807368;
      v120[50] += 4;
      v122 = *(_DWORD **)(a1 + 8);
      v123 = v122[50];
      if (v123 + 4 > v122[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v122 + 14), v32, v33, v34, v35, v36, v37, v38);
        v123 = v122[50];
      }
      *(_DWORD *)(*((_QWORD *)v122 + 7) + v123) = 1778909471;
      v124 = v122[50];
      v125 = v124 + 4;
      v122[50] = v124 + 4;
      if ((v124 + 8) > v122[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v122 + 14), v32, v33, v34, v35, v36, v37, v38);
        v125 = v122[50];
      }
      *(_DWORD *)(*((_QWORD *)v122 + 7) + v125) = (v39 >> 8) & 0x1F | 0x1A9F07E0;
      v122[50] += 4;
      break;
    case 'J':
      v40 = a3 & 0x3F;
      v41 = 0x8040201008040201;
      v42 = 0x8000000000000000;
      v43 = 0x40000000000000;
      v44 = 0x200000000000;
      v45 = 0x1000000000;
      v46 = 0x8000000;
      v47 = 0x40000;
      v48 = 513;
      switch(a3 & 0x3F)
      {
        case 1:
          goto LABEL_35;
        case 2:
          v46 = 0;
          v44 = 0;
          v42 = 0;
          v41 = 0x80004000200010;
          v43 = 0x8000000000000;
          v45 = 0x400000000;
          v47 = 0x20000;
          goto LABEL_34;
        case 3:
          v47 = 0;
          v46 = 0;
          v44 = 0;
          v43 = 0;
          v42 = 0;
          v41 = 0x800000004;
          v45 = 0x200000000;
LABEL_34:
          v48 = 1;
LABEL_35:
          JSC::Wasm::BBQJITImpl::BBQJIT::materializeVectorConstant(a1, v47 | v45 | v48 | v46 | v44 | v43 | v42, v41, 0x1003uLL, v35, v36, v37, v38);
          v128 = 0;
          v129 = 0;
          v127[0] = (JSC::Wasm::BBQJITImpl::BBQJIT *)a1;
          v130 = 0;
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::initializedPreservedSet<JSC::Wasm::BBQJITImpl::BBQJIT::Location>((uint64_t)v127, IfNecessary, v39);
          v71 = v128;
          if (v128)
          {
            v72 = __clz(__rbit64(v128));
            do
            {
              if (v72 > 0x1Fu)
                JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindFPRToScratch(v127, (char)(v72 - 32));
              else
                JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindGPRToScratch(v127, (char)v72);
              if (v72 > 0x3E)
                break;
              v73 = __clz(__rbit64(v71 >> (v72 + 1)));
              v74 = v73 + v72 + 1;
              if (v74 >= 0x40)
                v72 = 64;
              else
                v72 += v73 + 1;
            }
            while (v74 <= 0x3F);
          }
          v75 = *((_QWORD *)v127[0] + 79);
          if (v75)
            v76 = __clz(__rbit64(v75)) - 32;
          else
            v76 = JSC::Wasm::BBQJITImpl::BBQJIT::evictFPR(v127[0], v64, v65, v66, v67, v68, v69, v70);
          v77 = v76;
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindFPRToScratch(v127, v76);
          LOBYTE(v127[1]) = v76;
          if ((v40 - 1) >= 3)
          {
            __break(0xC471u);
            JUMPOUT(0x198F8EA6CLL);
          }
          JSC::MacroAssemblerARM64::vectorSshr8(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), qword_19919FB60[v40 - 1], v76, v78, v79, v80);
          v88 = *(_DWORD **)(a1 + 8);
          v89 = v88[50];
          if (v89 + 4 > v88[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v88 + 14), v81, v82, v83, v84, v85, v86, v87);
            v89 = v88[50];
          }
          v90 = v76 | (32 * v76);
          *(_DWORD *)(*((_QWORD *)v88 + 7) + v89) = v90 | 0x4E301C00;
          v91 = 32 * v76;
          v88[50] += 4;
          v92 = *(_DWORD **)(a1 + 8);
          if ((_DWORD)v40 == 1)
          {
            v93 = v92[50];
            if (v93 + 4 > v92[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v92 + 14), v81, v82, v83, v84, v85, v86, v87);
              v93 = v92[50];
            }
            *(_DWORD *)(*((_QWORD *)v92 + 7) + v93) = v91 | (v76 << 16) | 0x6E004010;
            v92[50] += 4;
            v94 = *(_DWORD **)(a1 + 8);
            v95 = v94[50];
            if (v95 + 4 > v94[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v94 + 14), v81, v82, v83, v84, v85, v86, v87);
              v95 = v94[50];
            }
            *(_DWORD *)(*((_QWORD *)v94 + 7) + v95) = v90 | 0x4E103800;
            v94[50] += 4;
            v92 = *(_DWORD **)(a1 + 8);
LABEL_56:
            v96 = 0x400000;
            goto LABEL_59;
          }
          if ((_DWORD)v40 != 3)
          {
            if ((_DWORD)v40 != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x198F8E884);
            }
            goto LABEL_56;
          }
          v96 = 0x800000;
LABEL_59:
          v97 = v92[50];
          if (v97 + 4 > v92[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v92 + 14), v81, v82, v83, v84, v85, v86, v87);
            v97 = v92[50];
            v76 = (char)v127[1];
          }
          *(_DWORD *)(*((_QWORD *)v92 + 7) + v97) = v96 | v77 | v91 | 0x4E31B800;
          v92[50] += 4;
          v98 = *(_DWORD **)(a1 + 8);
          v99 = v98[50];
          if (v99 + 4 > v98[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v98 + 14), v81, v82, v83, v84, v85, v86, v87);
            v99 = v98[50];
          }
          *(_DWORD *)(*((_QWORD *)v98 + 7) + v99) = (v39 >> 8) & 0x1F | (32 * v76) | 0x1E260000;
          v98[50] += 4;
          if (!(_BYTE)v130)
          {
            LOBYTE(v130) = 1;
            JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::unbindFPRFromScratch(v127, v76);
          }
          if (!HIBYTE(v130))
          {
            HIBYTE(v130) = 1;
            v100 = v128;
            if (v128)
            {
              v101 = __clz(__rbit64(v128));
              v102 = (int8x16_t *)v127[0];
              do
              {
                if (v101 > 0x1Fu)
                {
                  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::unbindFPRFromScratch(v127, (char)(v101 - 32));
                }
                else
                {
                  v103 = 1 << v101;
                  if ((v102[40].i64[1] & (1 << v101)) != 0)
                  {
                    if (v102[21].i32[1] <= v101)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198F8EADCLL);
                    }
                    v104 = v102[20].i64[1];
                    v102[62] = vandq_s8(v102[62], (int8x16_t)vdupq_n_s64(~v103));
                    if ((_BYTE)word_1ECF4C700)
                    {
                      v134 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v101];
                      WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v134, "\n");
                    }
                    v105 = v104 + 4 * v101;
                    if ((v103 & v100) == 0 || (*(_WORD *)(v105 + 1) & 7) == 3)
                    {
                      *(_DWORD *)v105 = 0;
                      v102[38].i64[1] |= v103;
                    }
                  }
                }
                if (v101 > 0x3E)
                  break;
                v106 = __clz(__rbit64(v100 >> (v101 + 1)));
                v107 = v106 + v101 + 1;
                if (v107 >= 0x40)
                  v101 = 64;
                else
                  v101 += v106 + 1;
              }
              while (v107 < 0x40);
            }
          }
          break;
        case 4:
          v108 = *(_DWORD **)(a1 + 8);
          v109 = SBYTE1(IfNecessary);
          v110 = v108[50];
          if (v110 + 4 > v108[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v108 + 14), v32, 0x8040201008040201, v34, v35, v36, v37, v38);
            v110 = v108[50];
          }
          *(_DWORD *)(*((_QWORD *)v108 + 7) + v110) = (32 * v109) | 0x4F410410;
          v108[50] += 4;
          v111 = *(_DWORD **)(a1 + 8);
          v112 = v111[50];
          if (v112 + 4 > v111[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v111 + 14), v32, v41, v34, v35, v36, v37, v38);
            v112 = v111[50];
          }
          *(_DWORD *)(*((_QWORD *)v111 + 7) + v112) = 1309678096;
          v111[50] += 4;
          v113 = *(_DWORD **)(a1 + 8);
          v114 = v113[50];
          if (v114 + 4 > v113[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v113 + 14), v32, v41, v34, v35, v36, v37, v38);
            v114 = v113[50];
          }
          *(_DWORD *)(*((_QWORD *)v113 + 7) + v114) = -1637481976;
          v113[50] += 4;
          v115 = *(_DWORD **)(a1 + 8);
          v116 = v115[50];
          if (v116 + 4 > v115[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v115 + 14), v32, v41, v34, v35, v36, v37, v38);
            v116 = v115[50];
          }
          *(_DWORD *)(*((_QWORD *)v115 + 7) + v116) = -1822425848;
          v115[50] += 4;
          JSC::MacroAssemblerARM64::and32(*(_QWORD *)(a1 + 8), (JSC::ARM64LogicalImmediate *)3, 8, (__int16)v39 >> 8);
          goto LABEL_103;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F8EAACLL);
      }
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198F8EA4CLL);
  }
LABEL_103:
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDV_V(uint64_t a1@<X0>, int a2@<W1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD *v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  char v56;
  int v57;
  int v58;
  int v59;
  char v60;
  int v61;
  char v62;
  int v63;
  int v64;
  int v65;
  char v66;
  int v67;
  int v68;
  char v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  uint64_t v77[3];
  int IfNecessary;
  _QWORD v79[2];
  char v80;
  const char *v81;

  v79[0] = a4;
  v79[1] = a5;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, (uint64_t)a6, a7, a8);
  v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v16, v17, v18, v19, v20);
  if (a5 == 2)
  {
    v26 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v26)
      *(_DWORD *)(a1 + 1280) = v26;
    if ((v21 & 7) != 1 || ((-8 * v26) ^ v21) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v21);
  }
  v27 = *(_QWORD *)(a1 + 88);
  v28 = *(_DWORD *)(v27 + 596);
  if (!v28)
  {
    __break(0xC471u);
    JUMPOUT(0x198F8F35CLL);
  }
  v29 = *(_QWORD *)(v27 + 584) + 1232 * v28;
  v30 = *(_DWORD *)(v27 + 68) + *(_DWORD *)(v29 - 32);
  if (*(_DWORD *)(v29 - 160) == 5)
    v31 = v30 + 1;
  else
    v31 = v30;
  *a6 = v31;
  *((_WORD *)a6 + 4) = -1278;
  v39 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v31, a6[1], 0, v22, v23, v24, v25);
  if (HIBYTE(word_1ECF4C700))
  {
    *(_OWORD *)v77 = *(_OWORD *)a6;
    v81 = "Vector";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v76 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v76;
      }
      while (v76 < *(_DWORD *)a1);
    }
    v80 = a2;
    WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>(&v81, &v80, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 1, (uint64_t)v79, &IfNecessary, v77);
  }
  v40 = v39 >> 8;
  if (a2 > 48)
  {
    if (a2 <= 74)
    {
      switch(a2)
      {
        case '6':
          v41 = *(_DWORD **)(a1 + 8);
          v46 = a3 & 0xC0;
          JSC::MacroAssemblerARM64::vectorExtendLow(v41, v46 | 4, SBYTE1(IfNecessary), ((__int16)v39 >> 8), v35, v36, v37, v38);
          v54 = v41[50];
          if (v46 == 64)
            v55 = 1315035136;
          else
            v55 = 1851906048;
          v75 = SBYTE1(v39) | (32 * SBYTE1(v39)) | v55;
          if (v54 + 4 > v41[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v47, v48, v49, v50, v51, v52, v53);
            v54 = v41[50];
          }
          *(_DWORD *)(*((_QWORD *)v41 + 7) + v54) = v75;
          goto LABEL_85;
        case '7':
          v69 = a3 & 0x3F;
          if ((a3 & 0x3Fu) > 6)
          {
            __break(0xC471u);
            JUMPOUT(0x198F8F314);
          }
          v41 = *(_DWORD **)(a1 + 8);
          v57 = SBYTE1(IfNecessary);
          v70 = 1 << v69;
          if ((v70 & 0x28) != 0)
          {
            v59 = 1310824448;
          }
          else
          {
            if ((v70 & 0x50) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198F8F274);
            }
            v59 = 1315018752;
          }
          goto LABEL_75;
        case '8':
        case '9':
        case ';':
        case '<':
        case '=':
        case '@':
        case 'A':
        case 'B':
          goto LABEL_91;
        case ':':
          v41 = *(_DWORD **)(a1 + 8);
          v71 = SBYTE1(IfNecessary);
          v72 = 0x400000;
          switch(a3 & 0x3F)
          {
            case 0:
              __break(0xC471u);
              JUMPOUT(0x198F8F334);
            case 1:
              v72 = 0;
              break;
            case 2:
              break;
            case 3:
            case 5:
              v72 = 0x800000;
              break;
            case 4:
            case 6:
              v72 = 12582912;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198F8F354);
          }
          v43 = v41[50];
          if (v43 + 4 > v41[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v32, v33, v34, v35, v36, v37, v38);
            v43 = v41[50];
          }
          v44 = (char)v40 | (32 * v71);
          v45 = v72 | 0x4E205800;
          goto LABEL_83;
        case '>':
          JSC::MacroAssemblerARM64::vectorExtaddPairwise(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), ((__int16)v39 >> 8), v35, v36, v37, v38);
          goto LABEL_86;
        case '?':
          goto LABEL_31;
        case 'C':
          JSC::MacroAssemblerARM64::vectorExtendLow(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), ((__int16)v39 >> 8), v35, v36, v37, v38);
          goto LABEL_86;
        default:
          if (a2 != 49)
            goto LABEL_91;
          v62 = a3 & 0x3F;
          if ((a3 & 0x3Fu) > 6)
          {
            __break(0xC471u);
            JUMPOUT(0x198F8F2D4);
          }
          v63 = 1310820352;
          v41 = *(_DWORD **)(a1 + 8);
          v64 = SBYTE1(IfNecessary);
          v65 = 1 << v62;
          if ((v65 & 0x28) == 0)
          {
            if ((v65 & 0x50) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198F8EE24);
            }
LABEL_47:
            v63 += 0x400000;
          }
LABEL_48:
          v43 = v41[50];
          if (v43 + 4 > v41[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v32, v33, v34, v35, v36, v37, v38);
            v43 = v41[50];
          }
          v68 = SBYTE1(v39) | (32 * v64) | v63;
          break;
      }
      goto LABEL_84;
    }
    if (a2 == 75)
    {
      JSC::MacroAssemblerARM64::vectorNeg(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), ((__int16)v39 >> 8), v35, v36, v37, v38);
      goto LABEL_86;
    }
    if (a2 == 78)
    {
LABEL_31:
      JSC::MacroAssemblerARM64::vectorTruncSat(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), ((__int16)v39 >> 8), v35, v36, v37, v38);
      goto LABEL_86;
    }
    goto LABEL_91;
  }
  if (a2 <= 19)
  {
    switch(a2)
    {
      case 0:
        v41 = *(_DWORD **)(a1 + 8);
        v73 = SBYTE1(IfNecessary);
        v43 = v41[50];
        if (v43 + 4 > v41[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v32, v33, v34, v35, v36, v37, v38);
          v43 = v41[50];
        }
        v44 = SBYTE1(v39) | (32 * v73);
        v45 = 1847613440;
LABEL_83:
        v68 = v44 | v45;
        goto LABEL_84;
      case 5:
        JSC::MacroAssemblerARM64::vectorAbs(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), ((__int16)v39 >> 8), v35, v36, v37, v38);
        goto LABEL_86;
      case 10:
        v56 = a3 & 0x3F;
        if ((a3 & 0x3Fu) > 6)
        {
          __break(0xC471u);
          JUMPOUT(0x198F8F294);
        }
        v41 = *(_DWORD **)(a1 + 8);
        v57 = SBYTE1(IfNecessary);
        v58 = 1 << v56;
        if ((v58 & 0x28) != 0)
        {
          v59 = 1319213056;
        }
        else
        {
          if ((v58 & 0x50) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198F8F214);
          }
          v59 = 1323407360;
        }
        goto LABEL_75;
    }
LABEL_91:
    __break(0xC471u);
    JUMPOUT(0x198F8F1F4);
  }
  switch(a2)
  {
    case 20:
      v41 = *(_DWORD **)(a1 + 8);
      v42 = SBYTE1(IfNecessary);
      v43 = v41[50];
      if (v43 + 4 > v41[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v32, v33, v34, v35, v36, v37, v38);
        v43 = v41[50];
      }
      v44 = SBYTE1(v39) | (32 * v42);
      v45 = 241264640;
      goto LABEL_83;
    case 21:
      JSC::MacroAssemblerARM64::vectorConvert(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), ((__int16)v39 >> 8), v35, v36, v37, v38);
      goto LABEL_86;
    case 22:
    case 24:
    case 25:
    case 26:
    case 27:
      goto LABEL_91;
    case 23:
      v66 = a3 & 0x3F;
      if ((a3 & 0x3Fu) > 6)
      {
        __break(0xC471u);
        JUMPOUT(0x198F8F2F4);
      }
      v63 = 1856108544;
      v41 = *(_DWORD **)(a1 + 8);
      v64 = SBYTE1(IfNecessary);
      v67 = 1 << v66;
      if ((v67 & 0x28) != 0)
        goto LABEL_48;
      if ((v67 & 0x50) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198F8F254);
      }
      goto LABEL_47;
    case 28:
      JSC::MacroAssemblerARM64::vectorExtendHigh(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), ((__int16)v39 >> 8), v35, v36, v37, v38);
      goto LABEL_86;
    default:
      if (a2 != 38)
      {
        if (a2 == 45)
        {
          v60 = a3 & 0x3F;
          if ((a3 & 0x3Fu) > 6)
          {
            __break(0xC471u);
            JUMPOUT(0x198F8F2B4);
          }
          v41 = *(_DWORD **)(a1 + 8);
          v57 = SBYTE1(IfNecessary);
          v61 = 1 << v60;
          if ((v61 & 0x28) != 0)
          {
            v59 = 1319208960;
          }
          else
          {
            if ((v61 & 0x50) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198F8F234);
            }
            v59 = 1323403264;
          }
LABEL_75:
          v43 = v41[50];
          if (v43 + 4 > v41[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v32, v33, v34, v35, v36, v37, v38);
            v43 = v41[50];
          }
          v68 = SBYTE1(v39) | (32 * v57) | v59;
          goto LABEL_84;
        }
        goto LABEL_91;
      }
      v41 = *(_DWORD **)(a1 + 8);
      v74 = SBYTE1(IfNecessary);
      v43 = v41[50];
      if (v43 + 4 > v41[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 14), v32, v33, v34, v35, v36, v37, v38);
        v43 = v41[50];
      }
      v68 = SBYTE1(v39) | (32 * v74) | 0xE617800;
LABEL_84:
      *(_DWORD *)(*((_QWORD *)v41 + 7) + v43) = v68;
LABEL_85:
      v41[50] += 4;
LABEL_86:
      *a9 = 0;
      a9[8] = 0;
      return;
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDBitwiseSelect(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t *a8@<X7>, _BYTE *a9@<X8>)
{
  int IfNecessary;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  unsigned int v68;
  _BYTE *v69;
  _DWORD *v70;
  unsigned int v71;
  _DWORD *v72;
  int v73;
  int v74;
  unsigned int v75;
  _DWORD *v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  uint64_t v81[3];
  unsigned int v82;
  int v83;
  int v84;
  _QWORD v85[2];
  _QWORD v86[2];
  _QWORD v87[2];
  const char *v88;

  v87[0] = a2;
  v87[1] = a3;
  v86[0] = a4;
  v86[1] = a5;
  v85[0] = a6;
  v85[1] = a7;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8);
  v18 = IfNecessary;
  v84 = IfNecessary;
  v79 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, v19, v20, v21, v22, v23);
  v83 = v79;
  v29 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a6, a7, v24, v25, v26, v27, v28);
  v82 = v29;
  v35 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a2, a3, v30, v31, v32, v33, v34);
  if (a3 == 2)
  {
    v41 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a2 + 16;
    if (*(_DWORD *)(a1 + 1280) < v41)
      *(_DWORD *)(a1 + 1280) = v41;
    if ((v35 & 7) != 1 || ((-8 * v41) ^ v35) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a2, a3, v35);
  }
  v42 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v36, v37, v38, v39, v40);
  if (a5 == 2)
  {
    v48 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v48)
      *(_DWORD *)(a1 + 1280) = v48;
    if ((v42 & 7) != 1 || ((-8 * v48) ^ v42) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v42);
  }
  v49 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a6, a7, v43, v44, v45, v46, v47);
  if (a7 == 2)
  {
    v54 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a6 + 16;
    if (*(_DWORD *)(a1 + 1280) < v54)
      *(_DWORD *)(a1 + 1280) = v54;
    if ((v49 & 7) != 1 || ((-8 * v54) ^ v49) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a6, a7, v49);
  }
  v55 = *(_QWORD *)(a1 + 88);
  v56 = *(_DWORD *)(v55 + 596);
  if (v56)
  {
    v57 = *(_QWORD *)(v55 + 584) + 1232 * v56;
    v58 = *(_DWORD *)(v55 + 68) + *(_DWORD *)(v57 - 32);
    if (*(_DWORD *)(v57 - 160) == 5)
      v59 = v58 + 1;
    else
      v59 = v58;
    *a8 = v59;
    *((_WORD *)a8 + 4) = -1278;
    v67 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v59, a8[1], 0, v50, v51, v52, v53);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v81 = *(_OWORD *)a8;
      v88 = "VectorBitwiseSelect";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v78 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v78;
        }
        while (v78 < *(_DWORD *)a1);
      }
      WTF::dataLog<char const*,char [2]>(&v88, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v87);
      if ((v18 & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v84);
      WTF::dataLog<char [16]>(", ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v86);
      v69 = a9;
      if ((v79 & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v83);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)v85, (int *)&v82, v81);
      LOBYTE(v68) = BYTE1(v82);
    }
    else
    {
      v68 = v29 >> 8;
      v69 = a9;
    }
    v70 = *(_DWORD **)(a1 + 8);
    v71 = v70[50];
    if (v71 + 4 > v70[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v70 + 14), v60, v61, v62, v63, v64, v65, v66);
      v71 = v70[50];
    }
    *(_DWORD *)(*((_QWORD *)v70 + 7) + v71) = (32 * (char)v68) | ((char)v68 << 16) | 0x4EA01C10;
    v70[50] += 4;
    v72 = *(_DWORD **)(a1 + 8);
    v73 = SBYTE1(v84);
    v74 = SBYTE1(v83);
    v75 = v72[50];
    if (v75 + 4 > v72[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v72 + 14), v60, v61, v62, v63, v64, v65, v66);
      v75 = v72[50];
    }
    *(_DWORD *)(*((_QWORD *)v72 + 7) + v75) = (32 * v73) | (v74 << 16) | 0x6E601C10;
    v72[50] += 4;
    v76 = *(_DWORD **)(a1 + 8);
    v77 = v76[50];
    if (v77 + 4 > v76[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v76 + 14), v60, v61, v62, v63, v64, v65, v66);
      v77 = v76[50];
    }
    *(_DWORD *)(*((_QWORD *)v76 + 7) + v77) = (v67 >> 8) | 0x4EB01E00;
    v76[50] += 4;
    *v69 = 0;
    v69[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDRelOp(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, unsigned int *a8@<X7>, _BYTE *a9@<X8>, uint64_t *a10)
{
  unsigned int IfNecessary;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  unsigned int v51;
  unsigned int v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v60[3];
  unsigned int v61;
  unsigned int v62;
  _QWORD v63[2];
  _QWORD v64[2];
  char v65;
  const char *v66;

  v64[0] = a4;
  v64[1] = a5;
  v63[0] = a6;
  v63[1] = a7;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, a6, a7, (uint64_t)a8);
  v62 = IfNecessary;
  v24 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a6, a7, v19, v20, v21, v22, v23);
  v61 = v24;
  v30 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v25, v26, v27, v28, v29);
  if (a5 == 2)
  {
    v36 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v36)
      *(_DWORD *)(a1 + 1280) = v36;
    if ((v30 & 7) != 1 || ((-8 * v36) ^ v30) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v30);
  }
  v37 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a6, a7, v31, v32, v33, v34, v35);
  if (a7 == 2)
  {
    v42 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a6 + 16;
    if (*(_DWORD *)(a1 + 1280) < v42)
      *(_DWORD *)(a1 + 1280) = v42;
    if ((v37 & 7) != 1 || ((-8 * v42) ^ v37) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a6, a7, v37);
  }
  v43 = *(_QWORD *)(a1 + 88);
  v44 = *(_DWORD *)(v43 + 596);
  if (v44)
  {
    v45 = *(_QWORD *)(v43 + 584) + 1232 * v44;
    v46 = *(_DWORD *)(v43 + 68) + *(_DWORD *)(v45 - 32);
    if (*(_DWORD *)(v45 - 160) == 5)
      v47 = v46 + 1;
    else
      v47 = v46;
    *a10 = v47;
    *((_WORD *)a10 + 4) = -1278;
    v50 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v47, a10[1], 0, v38, v39, v40, v41);
    if (HIBYTE(word_1ECF4C700))
    {
      *(_OWORD *)v60 = *(_OWORD *)a10;
      v66 = "Vector";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)a1)
      {
        v58 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v58;
        }
        while (v58 < *(_DWORD *)a1);
      }
      v65 = a2;
      WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>(&v66, &v65, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v64);
      if ((IfNecessary & 7) != 0)
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&v62);
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)v63, (int *)&v61, v60);
      LOBYTE(v52) = BYTE1(v62);
      LOBYTE(v51) = BYTE1(v61);
    }
    else
    {
      v51 = v24 >> 8;
      v52 = IfNecessary >> 8;
    }
    v53 = *(_DWORD **)(a1 + 8);
    v54 = *a8;
    v55 = (char)v52;
    v56 = (char)v51;
    v57 = (v50 >> 8);
    if ((a3 & 0x3Fu) - 5 > 1)
      JSC::MacroAssemblerARM64::compareIntegerVector(v53, v54, a3, v55, v56, v57, v48, v49);
    else
      JSC::MacroAssemblerARM64::compareFloatingPointVector(v53, v54, a3, v55, v56, v57, v48, v49);
    *a9 = 0;
    a9[8] = 0;
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDV_VV(uint64_t a1@<X0>, int a2@<W1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t *a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  char v70;
  int v71;
  int v72;
  int v73;
  int v74;
  _DWORD *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83[3];
  unsigned int v84;
  unsigned int IfNecessary;
  _QWORD v86[2];
  _QWORD v87[2];
  char v88;
  const char *v89;

  v87[0] = a4;
  v87[1] = a5;
  v86[0] = a6;
  v86[1] = a7;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, a6, a7, (uint64_t)a8);
  v84 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a6, a7, v18, v19, v20, v21, v22);
  v28 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v23, v24, v25, v26, v27);
  if (a5 == 2)
  {
    v34 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v34)
      *(_DWORD *)(a1 + 1280) = v34;
    if ((v28 & 7) != 1 || ((-8 * v34) ^ v28) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v28);
  }
  v35 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a6, a7, v29, v30, v31, v32, v33);
  if (a7 == 2)
  {
    v40 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a6 + 16;
    if (*(_DWORD *)(a1 + 1280) < v40)
      *(_DWORD *)(a1 + 1280) = v40;
    if ((v35 & 7) != 1 || ((-8 * v40) ^ v35) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a6, a7, v35);
  }
  v41 = *(_QWORD *)(a1 + 88);
  v42 = *(_DWORD *)(v41 + 596);
  if (!v42)
  {
    __break(0xC471u);
    JUMPOUT(0x198F90310);
  }
  v43 = *(_QWORD *)(v41 + 584) + 1232 * v42;
  v44 = *(_DWORD *)(v41 + 68) + *(_DWORD *)(v43 - 32);
  if (*(_DWORD *)(v43 - 160) == 5)
    v45 = v44 + 1;
  else
    v45 = v44;
  *a8 = v45;
  *((_WORD *)a8 + 4) = -1278;
  v53 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v45, a8[1], 0, v36, v37, v38, v39);
  if (HIBYTE(word_1ECF4C700))
  {
    *(_OWORD *)v83 = *(_OWORD *)a8;
    v89 = "Vector";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v82 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v82;
      }
      while (v82 < *(_DWORD *)a1);
    }
    v88 = a2;
    WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>(&v89, &v88, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v87);
    if ((IfNecessary & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", (int *)&IfNecessary);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)v86, (int *)&v84, v83);
  }
  v54 = v53 >> 8;
  if (a2 > 38)
  {
    switch(a2)
    {
      case '\'':
        JSC::MacroAssemblerARM64::vectorNarrow(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), SBYTE1(v84), ((__int16)v53 >> 8), 16, v51, v52);
        goto LABEL_63;
      case '(':
      case ')':
      case ',':
      case '-':
      case '.':
      case '0':
      case '1':
      case '2':
      case '3':
        goto LABEL_79;
      case '*':
        JSC::MacroAssemblerARM64::vectorSubSat(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), SBYTE1(v84), ((__int16)v53 >> 8), v50, v51, v52);
        goto LABEL_63;
      case '+':
        JSC::MacroAssemblerARM64::vectorMax(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), SBYTE1(v84), ((__int16)v53 >> 8), v50, v51, v52);
        goto LABEL_63;
      case '/':
        JSC::Wasm::BBQJITImpl::BBQJIT::emitVectorMul((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, (JSC::ARM64LogicalImmediate *)a3, IfNecessary, v84, v53, v50, v51, v52);
        goto LABEL_63;
      case '4':
LABEL_28:
        v55 = *(_DWORD **)(a1 + 8);
        v56 = SBYTE1(IfNecessary);
        v57 = SBYTE1(v84);
        v58 = v55[50];
        if (v58 + 4 > v55[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v55 + 14), v46, v47, v48, v49, v50, v51, v52);
          v58 = v55[50];
        }
        v59 = SBYTE1(v53) | (32 * v56) | (v57 << 16);
        v60 = 1308622848;
        goto LABEL_61;
      case '5':
        v70 = a3 & 0x3F;
        if ((a3 & 0x3Fu) > 6)
        {
          __break(0xC471u);
          JUMPOUT(0x198F902C8);
        }
        v55 = *(_DWORD **)(a1 + 8);
        v71 = SBYTE1(IfNecessary);
        v72 = SBYTE1(v84);
        v73 = 1 << v70;
        if ((v73 & 0x28) != 0)
        {
          v74 = 1847655424;
        }
        else
        {
          if ((v73 & 0x50) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x198F902A8);
          }
          v74 = 1851849728;
        }
        v58 = v55[50];
        if (v58 + 4 > v55[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v55 + 14), v46, v47, v48, v49, v50, v51, v52);
          v58 = v55[50];
        }
        v63 = (char)v54 | (32 * v71) | (v72 << 16) | v74;
        goto LABEL_62;
      default:
        switch(a2)
        {
          case 'E':
            JSC::MacroAssemblerARM64::vectorAdd(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), SBYTE1(v84), ((__int16)v53 >> 8), v50, v51, v52);
            goto LABEL_63;
          case 'F':
          case 'G':
          case 'H':
          case 'J':
          case 'K':
            goto LABEL_79;
          case 'I':
            JSC::MacroAssemblerARM64::vectorSub(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), SBYTE1(v84), ((__int16)v53 >> 8), v50, v51, v52);
            goto LABEL_63;
          case 'L':
            v55 = *(_DWORD **)(a1 + 8);
            v79 = SBYTE1(IfNecessary);
            v80 = SBYTE1(v84);
            v58 = v55[50];
            if (v58 + 4 > v55[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v55 + 14), v46, v47, v48, v49, v50, v51, v52);
              v58 = v55[50];
            }
            v59 = SBYTE1(v53) | (32 * v79) | (v80 << 16);
            v60 = 1851831296;
            goto LABEL_61;
          case 'M':
            goto LABEL_28;
          default:
            if (a2 != 60)
              goto LABEL_79;
            v55 = *(_DWORD **)(a1 + 8);
            v61 = SBYTE1(IfNecessary);
            v62 = SBYTE1(v84);
            v58 = v55[50];
            if (v58 + 4 > v55[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v55 + 14), v46, v47, v48, v49, v50, v51, v52);
              v58 = v55[50];
            }
            v63 = SBYTE1(v53) | (32 * v61) | (v62 << 16) | 0x4EA01C00;
            break;
        }
        goto LABEL_62;
    }
  }
  switch(a2)
  {
    case 1:
      JSC::MacroAssemblerARM64::vectorAddSat(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), SBYTE1(v84), ((__int16)v53 >> 8), v50, v51, v52);
      break;
    case 2:
    case 4:
    case 5:
    case 7:
    case 8:
LABEL_79:
      __break(0xC471u);
      JUMPOUT(0x198F90288);
    case 3:
      v55 = *(_DWORD **)(a1 + 8);
      v68 = SBYTE1(IfNecessary);
      v69 = SBYTE1(v84);
      v58 = v55[50];
      if (v58 + 4 > v55[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v55 + 14), v46, v47, v48, v49, v50, v51, v52);
        v58 = v55[50];
      }
      v63 = SBYTE1(v53) | (32 * v68) | (v69 << 16) | 0x4E601C00;
      goto LABEL_62;
    case 6:
      v55 = *(_DWORD **)(a1 + 8);
      v64 = SBYTE1(IfNecessary);
      v65 = SBYTE1(v84);
      v58 = v55[50];
      if (v58 + 4 > v55[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v55 + 14), v46, v47, v48, v49, v50, v51, v52);
        v58 = v55[50];
      }
      v59 = SBYTE1(v53) | (32 * v64) | (v65 << 16);
      v60 = 1310727168;
LABEL_61:
      v63 = v59 | v60;
      goto LABEL_62;
    case 9:
      v55 = *(_DWORD **)(a1 + 8);
      v66 = SBYTE1(IfNecessary);
      v67 = SBYTE1(v84);
      v58 = v55[50];
      if (v58 + 4 > v55[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v55 + 14), v46, v47, v48, v49, v50, v51, v52);
        v58 = v55[50];
      }
      v63 = SBYTE1(v53) | (32 * v66) | (v67 << 16) | 0x6E201C00;
LABEL_62:
      *(_DWORD *)(*((_QWORD *)v55 + 7) + v58) = v63;
      v55[50] += 4;
      break;
    default:
      switch(a2)
      {
        case 24:
          JSC::MacroAssemblerARM64::vectorPmin(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), SBYTE1(v84), ((__int16)v53 >> 8), 16, v51, v52);
          goto LABEL_63;
        case 25:
        case 27:
        case 28:
        case 29:
        case 30:
          goto LABEL_79;
        case 26:
          JSC::MacroAssemblerARM64::vectorPmax(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), SBYTE1(v84), ((__int16)v53 >> 8), 16, v51, v52);
          goto LABEL_63;
        case 31:
          v75 = *(_DWORD **)(a1 + 8);
          v76 = SBYTE1(IfNecessary);
          v77 = SBYTE1(v84);
          v78 = 0x400000;
          switch(a3 & 0x3F)
          {
            case 0:
              __break(0xC471u);
              JUMPOUT(0x198F902E8);
            case 1:
              v78 = 0;
              break;
            case 2:
              break;
            case 3:
            case 5:
              v78 = 0x800000;
              break;
            case 4:
            case 6:
              v78 = 12582912;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x198F90308);
          }
          v81 = v75[50];
          if (v81 + 4 > v75[48])
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v75 + 14), v46, v47, v48, v49, v50, v51, v52);
            v81 = v75[50];
          }
          *(_DWORD *)(*((_QWORD *)v75 + 7) + v81) = (char)v54 | (32 * v76) | (v77 << 16) | v78 | 0x6E201400;
          v75[50] += 4;
          goto LABEL_63;
        case 32:
          JSC::MacroAssemblerARM64::vectorMin(*(_DWORD **)(a1 + 8), a3, SBYTE1(IfNecessary), SBYTE1(v84), ((__int16)v53 >> 8), v50, v51, v52);
          goto LABEL_63;
        default:
          if (a2 != 18)
            goto LABEL_79;
          JSC::MacroAssemblerARM64::vectorDotProduct(*(_DWORD **)(a1 + 8), SBYTE1(IfNecessary), SBYTE1(v84), ((__int16)v53 >> 8), 16, v50, v51, v52);
          break;
      }
      break;
  }
LABEL_63:
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDRelaxedFMA(uint64_t a1@<X0>, int a2@<W1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, unint64_t a11, uint64_t *a12)
{
  int IfNecessary;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  unsigned int v63;
  int v64;
  uint64_t v66[3];
  int v67;
  int v68;
  int v69;
  _QWORD v70[2];
  _QWORD v71[2];
  _QWORD v72[2];
  const char *v73;

  v72[0] = a4;
  v72[1] = a5;
  v71[0] = a6;
  v71[1] = a7;
  v70[0] = a10;
  v70[1] = a11;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a4, a5, a4, a5, a6, a7, a8);
  v20 = IfNecessary;
  v69 = IfNecessary;
  v64 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a6, a7, v21, v22, v23, v24, v25);
  v68 = v64;
  v67 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, a10, a11, v26, v27, v28, v29, v30);
  v36 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a4, a5, v31, v32, v33, v34, v35);
  if (a5 == 2)
  {
    v42 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a4 + 16;
    if (*(_DWORD *)(a1 + 1280) < v42)
      *(_DWORD *)(a1 + 1280) = v42;
    if ((v36 & 7) != 1 || ((-8 * v42) ^ v36) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a4, a5, v36);
  }
  v43 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a6, a7, v37, v38, v39, v40, v41);
  if (a7 == 2)
  {
    v49 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a6 + 16;
    if (*(_DWORD *)(a1 + 1280) < v49)
      *(_DWORD *)(a1 + 1280) = v49;
    if ((v43 & 7) != 1 || ((-8 * v49) ^ v43) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a6, a7, v43);
  }
  v50 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, a10, a11, v44, v45, v46, v47, v48);
  if (a11 == 2)
  {
    v55 = ((*(_DWORD *)(a1 + 1288) + 15) & 0xFFFFFFF0) + 16 * a10 + 16;
    if (*(_DWORD *)(a1 + 1280) < v55)
      *(_DWORD *)(a1 + 1280) = v55;
    if ((v50 & 7) != 1 || ((-8 * v55) ^ v50) >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(a1, a10, a11, v50);
  }
  v56 = *(_QWORD *)(a1 + 88);
  v57 = *(_DWORD *)(v56 + 596);
  if (!v57)
  {
    __break(0xC471u);
LABEL_39:
    JUMPOUT(0x198F90790);
  }
  v58 = *(_QWORD *)(v56 + 584) + 1232 * v57;
  v59 = *(_DWORD *)(v56 + 68) + *(_DWORD *)(v58 - 32);
  if (*(_DWORD *)(v58 - 160) == 5)
    v60 = v59 + 1;
  else
    v60 = v59;
  *a12 = v60;
  *((_WORD *)a12 + 4) = -1278;
  v62 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(a1, v60, a12[1], 0, v51, v52, v53, v54);
  if (HIBYTE(word_1ECF4C700))
  {
    *(_OWORD *)v66 = *(_OWORD *)a12;
    v73 = "VectorRelaxedMAdd";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v63 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v63;
      }
      while (v63 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v73, " ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v72);
    if ((v20 & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v69);
    WTF::dataLog<char [16]>(", ");
    WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v71);
    if ((v64 & 7) != 0)
      WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v68);
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, (uint64_t)v70, &v67, v66);
  }
  if (a2 == 80)
  {
    JSC::MacroAssemblerARM64::vectorFusedNegMulAdd(*(_DWORD **)(a1 + 8), a3, SBYTE1(v69), SBYTE1(v68), SBYTE1(v67), (v62 >> 8), 16, v61);
    goto LABEL_28;
  }
  if (a2 != 79)
  {
    __break(0xC471u);
    goto LABEL_39;
  }
  JSC::MacroAssemblerARM64::vectorFusedMulAdd(*(_DWORD **)(a1 + 8), a3, SBYTE1(v69), SBYTE1(v68), SBYTE1(v67), (v62 >> 8), 16, v61);
LABEL_28:
  *a9 = 0;
  a9[8] = 0;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitStoreConst(uint64_t a1, JSC::ARM64LogicalImmediate *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  JSC::ARM64LogicalImmediate *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  JSC::ARM64LogicalImmediate *v29;
  unint64_t v30;
  const char *v31;

  v8 = a4;
  v29 = a2;
  v30 = a3;
  v28 = a4;
  if (HIBYTE(word_1ECF4C700))
  {
    v27 = a4;
    v31 = "Store";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)a1)
    {
      v26 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v26;
      }
      while (v26 < *(_DWORD *)a1);
    }
    WTF::dataLog<char const*,char [2]>(&v31, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Location>>(a1, 1, (uint64_t *)&v29, &v27);
    LOBYTE(v10) = BYTE1(v30);
  }
  else
  {
    v10 = a3 >> 8;
  }
  if (v10 != 255)
  {
    v17 = v10 - 227;
    if (v17 > 0x1B)
      goto LABEL_27;
    if (((1 << v17) & 0x1FD83) == 0)
    {
      if (v17 == 26)
        goto LABEL_4;
      if (((1 << v17) & 0xA000000) == 0)
        goto LABEL_27;
    }
    v18 = *(_QWORD *)(a1 + 8);
    v19 = v29;
    v20 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v28);
    JSC::MacroAssembler::store64(v18, (uint64_t)v19, v20, v21, v22, v23, v24, v25);
    return;
  }
LABEL_4:
  v11 = *(_QWORD *)(a1 + 8);
  v12 = v8 & 7;
  if (v12 != 1)
  {
    if (v12 == 4)
    {
      v13 = 19;
      goto LABEL_6;
    }
    if (v12 == 5)
    {
      v13 = 31;
      goto LABEL_6;
    }
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x198F9090CLL);
  }
  v13 = 29;
LABEL_6:
  v14 = v13 | ((unint64_t)(v8 >> 3) << 32);
  if ((_DWORD)v29)
  {
    if (!*(_BYTE *)(v11 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x198F909A0);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v11, (JSC::ARM64LogicalImmediate *)v29, v11 + 264, a4, a5, a6, a7, a8);
    v15 = v11;
    v16 = 16;
  }
  else
  {
    v15 = v11;
    v16 = 63;
  }
  JSC::MacroAssemblerARM64::store32(v15, v16, v14, a4, a5, a6, a7, a8);
}

void JSC::MacroAssembler::moveFloat(uint64_t a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198F90A88);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a2, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198F90AA8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  v17 = *(_BYTE *)(a1 + 304);
  v18 = *(_DWORD *)(a1 + 200);
  if (v18 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v10, v11, v12, v13, v14, v15, v16);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = a3 | (32 * (v17 & 0x1F)) | 0x1E270000;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitStore(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  v8 = a3 >> 8;
  v40 = a4;
  if (a2 != -1)
  {
    switch(a2)
    {
      case -29:
      case -28:
      case -22:
      case -21:
      case -19:
      case -18:
      case -17:
      case -16:
      case -15:
      case -14:
      case -13:
      case -2:
        v12 = *(_QWORD *)(a1 + 8);
        v13 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v40);
        JSC::MacroAssemblerARM64::store64(v12, (char)v8, v13, v14, v15, v16, v17, v18);
        return;
      case -20:
        break;
      case -5:
        v33 = *(_QWORD *)(a1 + 8);
        v34 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v40);
        JSC::MacroAssemblerARM64::storeVector(v33, (char)v8, v34, v35, v36, v37, v38, v39);
        return;
      case -4:
        v26 = *(_QWORD *)(a1 + 8);
        v27 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v40);
        JSC::MacroAssemblerARM64::storeDouble(v26, (char)v8, v27, v28, v29, v30, v31, v32);
        return;
      case -3:
        v19 = *(_QWORD *)(a1 + 8);
        v20 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v40);
        JSC::MacroAssemblerARM64::storeFloat(v19, (char)v8, v20, v21, v22, v23, v24, v25);
        return;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F90C0CLL);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  v10 = a4 & 7;
  switch(v10)
  {
    case 1:
      v11 = 29;
      break;
    case 4:
      v11 = 19;
      break;
    case 5:
      v11 = 31;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198F90C2CLL);
  }
  JSC::MacroAssemblerARM64::store32(v9, SBYTE1(a3), v11 | ((unint64_t)((int)a4 >> 3) << 32), a4, a5, a6, a7, a8);
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveMemory(uint64_t a1, int a2, int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;

  v30 = a4;
  v31 = a3;
  if ((JSC::Wasm::BBQJITImpl::BBQJIT::Location::operator==(&v31, a4) & 1) == 0)
  {
    switch(a2)
    {
      case -29:
      case -28:
      case -22:
      case -21:
      case -19:
      case -18:
      case -17:
      case -16:
      case -15:
      case -14:
      case -13:
      case -4:
      case -2:
        v6 = *(_QWORD *)(a1 + 8);
        v7 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v31);
        v8 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v30);
        JSC::MacroAssemblerARM64::transfer64(v6, v7, v8, v9, v10, v11, v12, v13);
        break;
      case -20:
      case -3:
      case -1:
        v14 = *(_QWORD *)(a1 + 8);
        v15 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v31);
        v16 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v30);
        JSC::MacroAssemblerARM64::transfer32(v14, v15, v16, v17, v18, v19, v20, v21);
        break;
      case -5:
        v22 = *(_QWORD *)(a1 + 8);
        v23 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v31);
        v24 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v30);
        JSC::MacroAssemblerARM64::transferVector(v22, v23, v24, v25, v26, v27, v28, v29);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F90DB8);
    }
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveRegister(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  char v20;
  unsigned int v21;

  v21 = a3;
  if ((JSC::Wasm::BBQJITImpl::BBQJIT::Location::operator==((int *)&v21, a4) & 1) != 0)
    return;
  if (a2 < 0xFFFFFFFE)
  {
    v20 = a2 + 29;
    if (a2 + 29 <= 0x1A)
    {
      if (((1 << v20) & 0x1FF83) != 0)
        goto LABEL_3;
      if (((1 << v20) & 0x6000000) != 0)
      {
        JSC::MacroAssemblerARM64::moveDouble(*(_DWORD **)(a1 + 8), SBYTE1(a3), SBYTE1(a4), v10, v11, v12, v13, v14);
        return;
      }
      if (a2 == -5)
      {
        JSC::MacroAssemblerARM64::moveVector(*(_DWORD **)(a1 + 8), SBYTE1(a3), SBYTE1(a4), v10, v11, v12, v13, v14);
        return;
      }
    }
    __break(0xC471u);
    return;
  }
LABEL_3:
  if (BYTE1(a3) == BYTE1(a4))
    return;
  v15 = *(_QWORD *)(a1 + 8);
  if (BYTE1(a3) == 63)
  {
    if (BYTE1(a4) != 31)
    {
      v16 = (a4 >> 8) & 0x1F | 0xD2800000;
      goto LABEL_8;
    }
LABEL_18:
    v16 = SBYTE1(a4) | (32 * SBYTE1(a3)) | 0x91000000;
    goto LABEL_8;
  }
  if (BYTE1(a4) == 31 || BYTE1(a3) == 31)
    goto LABEL_18;
  v16 = (a4 >> 8) & 0x1F | (((a3 >> 8) & 0x1F) << 16) | 0xAA0003E0;
LABEL_8:
  v19 = *(_DWORD *)(v15 + 200);
  v18 = (unsigned int *)(v15 + 200);
  v17 = v19;
  if (v19 + 4 > *(v18 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 - 36), v8, v9, v10, v11, v12, v13, v14);
    v17 = *v18;
  }
  *(_DWORD *)(*((_QWORD *)v18 - 18) + v17) = v16;
  *v18 += 4;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::emitLoad(uint64_t a1, int a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  v39 = a3;
  v8 = a4 >> 8;
  if (a2 == -1)
  {
LABEL_2:
    v9 = *(_QWORD *)(a1 + 8);
    v10 = a3 & 7;
    switch(v10)
    {
      case 1:
        v11 = 29;
        break;
      case 4:
        v11 = 19;
        break;
      case 5:
        v11 = 31;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F91184);
    }
    JSC::MacroAssemblerARM64::load32(v9, v11 | ((unint64_t)(a3 >> 3) << 32), SBYTE1(a4), a4, a5, a6, a7, a8);
  }
  else
  {
    switch(a2)
    {
      case -29:
      case -28:
      case -22:
      case -21:
      case -19:
      case -18:
      case -17:
      case -16:
      case -15:
      case -14:
      case -13:
        v24 = *(_QWORD *)(a1 + 8);
        v15 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v39);
        v16 = (char)v8;
        v12 = v24;
        goto LABEL_11;
      case -20:
        goto LABEL_2;
      case -5:
        v32 = *(_QWORD *)(a1 + 8);
        v33 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v39);
        JSC::MacroAssemblerARM64::loadVector(v32, v33, (char)v8, v34, v35, v36, v37, v38);
        return;
      case -4:
        v25 = *(_QWORD *)(a1 + 8);
        v26 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v39);
        JSC::MacroAssemblerARM64::loadDouble(v25, v26, (char)v8, v27, v28, v29, v30, v31);
        return;
      case -3:
        v17 = *(_QWORD *)(a1 + 8);
        v18 = JSC::Wasm::BBQJITImpl::BBQJIT::Location::asAddress((JSC::Wasm::BBQJITImpl::BBQJIT::Location *)&v39);
        JSC::MacroAssemblerARM64::loadFloat(v17, v18, (char)v8, v19, v20, v21, v22, v23);
        return;
      case -2:
        v12 = *(_QWORD *)(a1 + 8);
        v13 = a3 & 7;
        switch(v13)
        {
          case 1:
            v14 = 29;
            break;
          case 4:
            v14 = 19;
            break;
          case 5:
            v14 = 31;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198F911B4);
        }
        v15 = v14 | ((unint64_t)(a3 >> 3) << 32);
        v16 = SBYTE1(a4);
LABEL_11:
        JSC::MacroAssemblerARM64::load64(v12, v15, v16, a4, a5, a6, a7, a8);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F91164);
    }
  }
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addCallRef(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  JSC::ARM64LogicalImmediate *v10;
  JSC::Wasm::TypeDefinition *v11;
  unint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  JSC::ARM64LogicalImmediate *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  JSC::ARM64LogicalImmediate *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  _DWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  const char *v68;
  _DWORD *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WTF *v111;
  WTF *v112;
  unint64_t v113;
  const char *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  const char *v120;
  const char *v121;
  unsigned int *v122;
  WTF *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t CachedUnrolling;
  uint64_t v132;
  uint64_t v133;
  const JSC::Wasm::Type *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  const JSC::Wasm::TypeDefinition *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  JSC::Wasm::BBQJITImpl::BBQJIT *v148[2];
  uint64_t v149;
  uint64_t v150;
  __int16 v151;
  int8x16_t *v152;
  char v153;
  unint64_t v154;
  char v155;
  char v156;
  char v157[32];
  WTF *v158;
  int v159;
  WTF *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164[2];
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;

  v5 = a3[3];
  if (!(_DWORD)v5)
  {
    __break(0xC471u);
    goto LABEL_95;
  }
  v8 = *(_QWORD *)a3 + 16 * v5;
  v10 = *(JSC::ARM64LogicalImmediate **)(v8 - 16);
  v9 = *(_QWORD *)(v8 - 8);
  a3[3] = v5 - 1;
  v164[0] = (uint64_t)v10;
  v164[1] = v9;
  if (*(_DWORD *)(a2 + 32) == 4)
  {
    v122 = *(unsigned int **)(a2 + 8);
    v123 = *(WTF **)v122;
    v11 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v122 + 8) + 8 * v122[2]);
    if (JSC::Wasm::TypeDefinition::hasRecursiveReference(v11))
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)a2, v124, v125, v126, v127, v128, v129, v130);
      if (v138)
      {
        v11 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v11 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v11, v123, v132, v133, v134, v135, v136, v137);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)a2, v11, v139, v140, v141, v142, v143, v144);
      }
    }
  }
  else
  {
    v11 = (JSC::Wasm::TypeDefinition *)a2;
  }
  if (*((_DWORD *)v11 + 8) == 5)
    v11 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v11 + 1);
  v12 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v12 != -1)
  {
    *(_QWORD *)v157 = v148;
    v152 = (int8x16_t *)v157;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v152, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  if (*((_DWORD *)v11 + 8))
    v13 = 0;
  else
    v13 = (unsigned __int8 **)((char *)v11 + 8);
  JSC::Wasm::WasmCallingConvention::callInformationFor((uint64_t)&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConvention, v13, 0, v157);
  if ((unint64_t)(v163 + 15) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x198F919ECLL);
  }
  v18 = (v163 + 15) & 0xFFFFFFF0;
  if (*(_DWORD *)(a1 + 1284) > v18)
    v18 = *(_DWORD *)(a1 + 1284);
  *(_DWORD *)(a1 + 1284) = v18;
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::ScratchScope<JSC::RegisterSet>((uint64_t)&v152, (JSC::Wasm::BBQJITImpl::BBQJIT *)a1, 0xFFuLL, 0, v14, v15, v16, v17);
  v26 = v153;
  if (!v156)
  {
    v156 = 1;
    v27 = v154;
    if (v154)
    {
      v60 = __clz(__rbit64(v154));
      v61 = "BBQ\tReleasing GPR ";
      v62 = "\n";
      while (1)
      {
        if (v60 > 0x1Fu)
        {
          v67 = v61;
          v68 = v62;
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v152, (char)(v60 - 32));
          v62 = v68;
          v61 = v67;
        }
        else
        {
          v63 = 1 << v60;
          if ((v152[40].i64[1] & (1 << v60)) != 0)
          {
            if (v60 >= v152[21].u32[1])
            {
              __break(0xC471u);
              goto LABEL_93;
            }
            v64 = v152[20].i64[1];
            v152[62] = vandq_s8(v152[62], (int8x16_t)vdupq_n_s64(~v63));
            if ((_BYTE)word_1ECF4C700)
            {
              *(_OWORD *)v148 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v60];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v148, "\n");
              v62 = "\n";
              v61 = "BBQ\tReleasing GPR ";
              v27 = v154;
            }
            v65 = v64 + 4 * v60;
            if ((v27 & v63) == 0 || (*(_WORD *)(v65 + 1) & 7) == 3)
            {
              *(_DWORD *)v65 = 0;
              v152[38].i64[1] |= v63;
            }
          }
        }
        if (v60 <= 0x3E)
        {
          v27 = v154;
          if (v154)
          {
            v66 = __clz(__rbit64(v154 >> ((v60 + 1) & 0x3F))) + (((_BYTE)v60 + 1) & 0x3F);
            v60 = v66 >= 0x40 ? 64 : v66;
            if (v66 < 0x40)
              continue;
          }
        }
        break;
      }
    }
  }
  v149 = 0;
  v150 = 0;
  v148[0] = (JSC::Wasm::BBQJITImpl::BBQJIT *)a1;
  v151 = 0;
  v28 = *(_QWORD *)(a1 + 616);
  if (v28)
    v29 = __clz(__rbit64(v28));
  else
    v29 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)a1, v19, v20, v21, v22, v23, v24, v25);
  LOBYTE(v148[1]) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(v148, v29);
  v37 = *((_QWORD *)v148[0] + 77);
  if (v37)
    v38 = __clz(__rbit64(v37));
  else
    v38 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR(v148[0], v30, v31, v32, v33, v34, v35, v36);
  BYTE1(v148[1]) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::bindGPRToScratch(v148, v38);
  if (v9 == 1)
  {
    LOBYTE(v44) = v148[1];
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(a1, v10, v9, ((unint64_t)LOBYTE(v148[1]) << 8) | 2, v40, v41, v42, v43);
  }
  else
  {
    v44 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1, (uint64_t)v10, v9, v39, v40, v41, v42, v43) >> 8;
  }
  JSC::MacroAssemblerARM64::branch64(*(_QWORD *)(a1 + 8), 0, (char)v44, 2, v45, v46, v47, v48, (uint64_t)&v165);
  v167 = v165;
  v54 = v166;
  v168 = v166;
  if (v165 != -1)
  {
    v55 = (_QWORD *)(a1 + 1520);
    v56 = *(unsigned int *)(a1 + 1532);
    if ((_DWORD)v56 == *(_DWORD *)(a1 + 1528))
    {
      v57 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v55, (void *)(v56 + 1), (unint64_t)&v167, v49, v50, v51, v52, v53);
      v58 = (_DWORD *)(*(_QWORD *)(a1 + 1520) + 12 * *(unsigned int *)(a1 + 1532));
      *v58 = *(_DWORD *)v57;
      v59 = v58 + 1;
      v54 = *(_QWORD *)(v57 + 4);
    }
    else
    {
      v69 = (_DWORD *)(*v55 + 12 * v56);
      *v69 = v165;
      v59 = v69 + 1;
    }
    *v59 = v54;
    ++*(_DWORD *)(a1 + 1532);
  }
  v70 = (char)v148[1];
  v71 = BYTE1(v148[1]);
  v72 = SBYTE1(v148[1]);
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v44 | 0x3800000000, v72, v49, v50, v51, v52, v53);
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v71, v72, v73, v74, v75, v76, v77);
  v85 = *(_DWORD **)(a1 + 8);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(*(_QWORD *)(a1 + 8), "< Store Callee's wasm callee");
  v86 = v85[50];
  if (v86 + 4 > v85[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 14), v78, v79, v80, v81, v82, v83, v84);
    v86 = v85[50];
  }
  *(_DWORD *)(*((_QWORD *)v85 + 7) + v86) = v71 | 0xF80083E0;
  v85[50] += 4;
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v44 | 0x2000000000, v72, v80, v81, v82, v83, v84);
  v87 = v26;
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v44 | 0x3000000000, v87, v88, v89, v90, v91, v92);
  v93 = v70;
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)(a1 + 8), v71 | 0x1000000000, v93, v94, v95, v96, v97, v98);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::unbindEarly((unsigned __int8 *)v148);
  if (!v155)
  {
    v155 = 1;
    v99 = v153 & 0x7F;
    if (v99 < 0x40)
    {
      v100 = 1 << v99;
      if ((v152[40].i64[1] & (1 << v99)) != 0)
      {
        v101 = v153;
        if (v152[21].u32[1] <= (unint64_t)v153)
        {
          __break(0xC471u);
          JUMPOUT(0x198F919F4);
        }
        v102 = v152[20].i64[1] + 4 * v153;
        v152[62] = vandq_s8(v152[62], (int8x16_t)vdupq_n_s64(~v100));
        if ((_BYTE)word_1ECF4C700)
        {
          *(_OWORD *)v148 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v101];
          WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v148, "\n");
        }
        if ((v154 & v100) == 0 || (*(_WORD *)(v102 + 1) & 7) == 3)
        {
          *(_DWORD *)v102 = 0;
          v152[38].i64[1] |= 1 << v99;
        }
      }
      goto LABEL_58;
    }
LABEL_93:
    __break(1u);
LABEL_94:
    __break(0xC471u);
LABEL_95:
    JUMPOUT(0x198F919E4);
  }
LABEL_58:
  if (!v156)
  {
    v156 = 1;
    v103 = v154;
    if (v154)
    {
      v113 = __clz(__rbit64(v154));
      v114 = "BBQ\tReleasing GPR ";
      v115 = "\n";
      do
      {
        if (v113 > 0x1Fu)
        {
          v120 = v114;
          v121 = v115;
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v152, (char)(v113 - 32));
          v115 = v121;
          v114 = v120;
        }
        else
        {
          v116 = 1 << v113;
          if ((v152[40].i64[1] & (1 << v113)) != 0)
          {
            if (v113 >= v152[21].u32[1])
              goto LABEL_94;
            v117 = v152[20].i64[1];
            v152[62] = vandq_s8(v152[62], (int8x16_t)vdupq_n_s64(~v116));
            if ((_BYTE)word_1ECF4C700)
            {
              *(_OWORD *)v148 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v113];
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)v148, "\n");
              v115 = "\n";
              v114 = "BBQ\tReleasing GPR ";
              v103 = v154;
            }
            v118 = v117 + 4 * v113;
            if ((v103 & v116) == 0 || (*(_WORD *)(v118 + 1) & 7) == 3)
            {
              *(_DWORD *)v118 = 0;
              v152[38].i64[1] |= v116;
            }
          }
        }
        if (v113 > 0x3E)
          break;
        v103 = v154;
        if (!v154)
          break;
        v119 = __clz(__rbit64(v154 >> ((v113 + 1) & 0x3F))) + (((_BYTE)v113 + 1) & 0x3F);
        v113 = v119 >= 0x40 ? 64 : v119;
      }
      while (v119 < 0x40);
    }
  }
  JSC::Wasm::BBQJITImpl::BBQJIT::emitIndirectCall(a1, "CallRef", v164, v93, v87, (char)v71, (uint64_t)v11, a3, a4, 1);
  *a5 = 0;
  a5[8] = 0;
  v111 = v160;
  if (&v162 != (uint64_t *)v160 && v160)
  {
    v160 = 0;
    v161 = 0;
    WTF::fastFree((unint64_t)v111, v104, v105, v106, v107, v108, v109, v110);
  }
  v112 = v158;
  if (v158)
  {
    v158 = 0;
    v159 = 0;
    WTF::fastFree((unint64_t)v112, v104, v105, v106, v107, v108, v109, v110);
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::load(JSC::Wasm::LoadOpType,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value&,unsigned int)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int v45;

  v11 = *(_QWORD *)a1;
  v10 = *(uint64_t **)(a1 + 8);
  v12 = *v10;
  v13 = v10[1];
  v14 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(*(_QWORD *)a1, *v10, v13, a4, a5, a6, a7, a8);
  if (v13 == 2)
  {
    v19 = ((*(_DWORD *)(v11 + 1288) + 15) & 0xFFFFFFF0) + 16 * v12 + 16;
    if (*(_DWORD *)(v11 + 1280) < v19)
      *(_DWORD *)(v11 + 1280) = v19;
    v20 = (-8 * v19) ^ v14;
    if ((v14 & 7) != 1 || v20 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(v11, v12, v13, v14);
  }
  v22 = **(unsigned __int8 **)(a1 + 16) - 40;
  if (v22 >= 0xE)
  {
    __break(0xC471u);
    JUMPOUT(0x198F91C98);
  }
  v23 = *(_QWORD *)(v11 + 88);
  v24 = *(_DWORD *)(v23 + 596);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x198F91CA0);
  }
  v25 = *(_QWORD *)(v23 + 584) + 1232 * v24;
  v26 = *(_DWORD *)(v23 + 68) + *(_DWORD *)(v25 - 32);
  if (*(_DWORD *)(v25 - 160) == 5)
    v27 = v26 + 1;
  else
    v27 = v26;
  v28 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(v11, v27, qword_19919FB78[(char)v22], 0, v15, v16, v17, v18);
  v34 = **(unsigned __int8 **)(a1 + 16) - 40;
  v35 = v28;
  v36 = v28 >> 8;
  switch(v34)
  {
    case 0:
    case 13:
      JSC::MacroAssemblerARM64::load32(*(_QWORD *)(v11 + 8), a2, ((__int16)v28 >> 8), v29, v30, v31, v32, v33);
      return v27;
    case 1:
      JSC::MacroAssemblerARM64::load64(*(_QWORD *)(v11 + 8), a2, ((__int16)v28 >> 8), v29, v30, v31, v32, v33);
      return v27;
    case 2:
      JSC::MacroAssemblerARM64::loadFloat(*(_QWORD *)(v11 + 8), a2, ((__int16)v28 >> 8), v29, v30, v31, v32, v33);
      return v27;
    case 3:
      JSC::MacroAssemblerARM64::loadDouble(*(_QWORD *)(v11 + 8), a2, ((__int16)v28 >> 8), v29, v30, v31, v32, v33);
      return v27;
    case 4:
      JSC::MacroAssemblerARM64::load8SignedExtendTo32(*(_QWORD *)(v11 + 8), a2, ((__int16)v28 >> 8), v29, v30, v31, v32, v33);
      return v27;
    case 5:
    case 9:
      JSC::MacroAssemblerARM64::load8(*(_QWORD *)(v11 + 8), a2, ((__int16)v28 >> 8), v29, v30, v31, v32, v33);
      return v27;
    case 6:
      JSC::MacroAssemblerARM64::load16SignedExtendTo32(*(_QWORD *)(v11 + 8), a2, ((__int16)v28 >> 8), v29, v30, v31, v32, v33);
      return v27;
    case 7:
    case 11:
      JSC::MacroAssemblerARM64::load16(*(_QWORD *)(v11 + 8), a2, ((__int16)v28 >> 8), v29, v30, v31, v32, v33);
      return v27;
    case 8:
      JSC::MacroAssemblerARM64::load8SignedExtendTo32(*(_QWORD *)(v11 + 8), a2, ((__int16)v28 >> 8), v29, v30, v31, v32, v33);
      goto LABEL_27;
    case 10:
      JSC::MacroAssemblerARM64::load16SignedExtendTo32(*(_QWORD *)(v11 + 8), a2, ((__int16)v28 >> 8), v29, v30, v31, v32, v33);
      goto LABEL_27;
    case 12:
      JSC::MacroAssemblerARM64::load32(*(_QWORD *)(v11 + 8), a2, ((__int16)v28 >> 8), v29, v30, v31, v32, v33);
LABEL_27:
      v44 = *(_DWORD **)(v11 + 8);
      v45 = v44[50];
      if (v45 + 4 > v44[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v44 + 14), v37, v38, v39, v40, v41, v42, v43);
        v45 = v44[50];
      }
      *(_DWORD *)(*((_QWORD *)v44 + 7) + v45) = (32 * (v36 & 0x1F)) | (v35 >> 8) & 0x1F | 0x93407C00;
      v44[50] += 4;
      break;
    default:
      return v27;
  }
  return v27;
}

void JSC::MacroAssemblerARM64::addZeroExtend64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;

  v8 = a2;
  v10 = a1[50];
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v10) = ((v8 & 0x1F) << 16) | 0x8B2042C8;
  a1[50] += 4;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::store(JSC::Wasm::StoreOpType,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>(uint64_t *a1, JSC::ARM64LogicalImmediate *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  unint64_t v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  int8x16_t *v70;
  unsigned __int8 v71;
  unint64_t v72;
  uint64_t v73;
  __int16 v74;
  __int128 v75;

  v11 = *a1;
  v12 = a1[1];
  if (*(_BYTE *)(*a1 + 8) != 1)
  {
    v14 = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(a1[1], *(_QWORD *)v11, *(_QWORD *)(v11 + 8), a4, a5, a6, a7, a8) >> 8;
    goto LABEL_19;
  }
  if ((*(_BYTE *)(v11 + 9) + 5) <= 2u)
  {
    v72 = 0;
    v73 = 0;
    v70 = (int8x16_t *)v12;
    v74 = 0;
    v13 = *(_QWORD *)(v12 + 632);
    if (v13)
      LOBYTE(v14) = __clz(__rbit64(v13)) - 32;
    else
      LOBYTE(v14) = JSC::Wasm::BBQJITImpl::BBQJIT::evictFPR((JSC::Wasm::BBQJITImpl::BBQJIT *)v12, a2, a3, a4, a5, a6, a7, a8);
    JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindFPRToScratch(&v70, (char)v14);
    v71 = v14;
    JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(v12, *(JSC::ARM64LogicalImmediate **)*a1, *(_QWORD *)(*a1 + 8), ((unint64_t)v14 << 8) | 3, v15, v16, v17, v18);
    LOBYTE(v74) = 1;
    JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::unbindFPRFromScratch(&v70, (char)v14);
    goto LABEL_19;
  }
  v72 = 0;
  v73 = 0;
  v70 = (int8x16_t *)v12;
  v74 = 0;
  v24 = *(_QWORD *)(v12 + 616);
  if (v24)
    v25 = __clz(__rbit64(v24));
  else
    v25 = JSC::Wasm::BBQJITImpl::BBQJIT::evictGPR((JSC::Wasm::BBQJITImpl::BBQJIT *)v12, a2, a3, a4, a5, a6, a7, a8);
  LOBYTE(v14) = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::bindGPRToScratch(&v70, v25);
  v71 = v14;
  JSC::Wasm::BBQJITImpl::BBQJIT::emitMoveConst(v12, *(JSC::ARM64LogicalImmediate **)*a1, *(_QWORD *)(*a1 + 8), ((unint64_t)v14 << 8) | 2, v26, v27, v28, v29);
  if (!(_BYTE)v74)
  {
    LOBYTE(v74) = 1;
    v31 = v71;
    v32 = v71 & 0x7F;
    if (v32 >= 0x40)
    {
      __break(1u);
LABEL_61:
      v75 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v30];
      v69 = v31;
      WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v75, "\n");
      v31 = v69;
LABEL_14:
      if ((v72 & v8) == 0 || (*(_WORD *)(v31 + 1) & 7) == 3)
      {
        *(_DWORD *)v31 = 0;
        v70[38].i64[1] |= 1 << v32;
      }
      goto LABEL_17;
    }
    v8 = 1 << v32;
    if ((v70[40].i64[1] & (1 << v32)) != 0)
    {
      v30 = (char)v71;
      if (v70[21].u32[1] <= (unint64_t)(char)v71)
      {
        __break(0xC471u);
        JUMPOUT(0x198F92274);
      }
      v31 = v70[20].i64[1] + 4 * (char)v71;
      v70[62] = vandq_s8(v70[62], (int8x16_t)vdupq_n_s64(~v8));
      if (!(_BYTE)word_1ECF4C700)
        goto LABEL_14;
      goto LABEL_61;
    }
  }
LABEL_17:
  if (!HIBYTE(v74))
  {
    HIBYTE(v74) = 1;
    v33 = v72;
    if (v72)
    {
      v57 = __clz(__rbit64(v72));
      v58 = "BBQ\tReleasing GPR ";
      v59 = "\n";
      do
      {
        if (v57 > 0x1Fu)
        {
          v68 = v57;
          JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(&v70, (char)(v57 - 32));
          v57 = v68;
          v59 = "\n";
          v58 = "BBQ\tReleasing GPR ";
        }
        else
        {
          v60 = 1 << v57;
          if ((v70[40].i64[1] & (1 << v57)) != 0)
          {
            if (v57 >= v70[21].u32[1])
            {
              __break(0xC471u);
              JUMPOUT(0x198F9227CLL);
            }
            v61 = v70[20].i64[1];
            v70[62] = vandq_s8(v70[62], (int8x16_t)vdupq_n_s64(~v60));
            if ((_BYTE)word_1ECF4C700)
            {
              v75 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v57];
              v63 = v58;
              v64 = v59;
              v66 = v61;
              v67 = v57;
              v65 = 1 << v57;
              WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>(v58, (uint64_t)&v75, v59);
              v61 = v66;
              v57 = v67;
              v60 = v65;
              v59 = v64;
              v58 = v63;
              v33 = v72;
            }
            v62 = v61 + 4 * v57;
            if ((v33 & v60) == 0 || (*(_WORD *)(v62 + 1) & 7) == 3)
            {
              *(_DWORD *)v62 = 0;
              v70[38].i64[1] |= v60;
            }
          }
        }
        if (v57 > 0x3E)
          break;
        v33 = v72;
        if (!v72)
          break;
        v57 = __clz(__rbit64(v72 >> ((v57 + 1) & 0x3F))) + (((_BYTE)v57 + 1) & 0x3F);
      }
      while (v57 < 0x40);
    }
  }
LABEL_19:
  v34 = *(_QWORD *)*a1;
  v35 = *(_QWORD *)(*a1 + 8);
  v36 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(v12, v34, v35, v19, v20, v21, v22, v23);
  if (v35 == 2)
  {
    v42 = ((*(_DWORD *)(v12 + 1288) + 15) & 0xFFFFFFF0) + 16 * v34 + 16;
    if (*(_DWORD *)(v12 + 1280) < v42)
      *(_DWORD *)(v12 + 1280) = v42;
    v43 = (-8 * v42) ^ v36;
    if ((v36 & 7) != 1 || v43 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(v12, v34, v35, v36);
  }
  v45 = (uint64_t *)a1[2];
  v46 = *v45;
  v47 = v45[1];
  v48 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(v12, *v45, v47, v37, v38, v39, v40, v41);
  if (v47 == 2)
  {
    v54 = ((*(_DWORD *)(v12 + 1288) + 15) & 0xFFFFFFF0) + 16 * v46 + 16;
    if (*(_DWORD *)(v12 + 1280) < v54)
      *(_DWORD *)(v12 + 1280) = v54;
    v55 = (-8 * v54) ^ v48;
    if ((v48 & 7) != 1 || v55 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(v12, v46, v47, v48);
  }
  switch(*(_BYTE *)a1[3])
  {
    case '6':
    case '>':
      JSC::MacroAssemblerARM64::store32(*(_QWORD *)(v12 + 8), (char)v14, (uint64_t)a2, v49, v50, v51, v52, v53);
      break;
    case '7':
      JSC::MacroAssemblerARM64::store64(*(_QWORD *)(v12 + 8), (char)v14, (uint64_t)a2, v49, v50, v51, v52, v53);
      break;
    case '8':
      JSC::MacroAssemblerARM64::storeFloat(*(_QWORD *)(v12 + 8), (char)v14, (uint64_t)a2, v49, v50, v51, v52, v53);
      break;
    case '9':
      JSC::MacroAssemblerARM64::storeDouble(*(_QWORD *)(v12 + 8), (char)v14, (uint64_t)a2, v49, v50, v51, v52, v53);
      break;
    case ':':
    case '<':
      JSC::MacroAssemblerARM64::store8(*(_QWORD *)(v12 + 8), (char)v14, (uint64_t)a2, v49, v50, v51, v52, v53);
      break;
    case ';':
    case '=':
      JSC::MacroAssemblerARM64::store16(*(_QWORD *)(v12 + 8), (char)v14, (uint64_t)a2, v49, v50, v51, v52, v53);
      break;
    default:
      return;
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoad(JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v43[2];
  const char *v44;
  int v45;

  v11 = *a1;
  v10 = (uint64_t *)a1[1];
  v12 = *v10;
  v13 = v10[1];
  result = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(*a1, *v10, v13, a4, a5, a6, a7, a8);
  if (v13 == 2)
  {
    v19 = ((*(_DWORD *)(v11 + 1288) + 15) & 0xFFFFFFF0) + 16 * v12 + 16;
    if (*(_DWORD *)(v11 + 1280) < v19)
      *(_DWORD *)(v11 + 1280) = v19;
    v20 = (-8 * v19) ^ result;
    if ((result & 7) != 1 || v20 >= 8)
      result = JSC::Wasm::BBQJITImpl::BBQJIT::unbind(v11, v12, v13, result);
  }
  v22 = *(_QWORD *)(v11 + 88);
  v23 = *(_DWORD *)(v22 + 596);
  if (v23)
  {
    v24 = *(_QWORD *)(v22 + 584) + 1232 * v23;
    v25 = *(_DWORD *)(v22 + 68) + *(_DWORD *)(v24 - 32);
    if (*(_DWORD *)(v24 - 160) == 5)
      v26 = v25 + 1;
    else
      v26 = v25;
    v27 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(v11, v26, 0xFB02uLL, 0, v15, v16, v17, v18);
    JSC::MacroAssemblerARM64::loadVector(*(_QWORD *)(v11 + 8), a2, (v27 >> 8), v28, v29, v30, v31, v32);
    if (HIBYTE(word_1ECF4C700))
    {
      v34 = (uint64_t *)a1[1];
      v33 = (_DWORD *)a1[2];
      v43[0] = v26;
      v43[1] = 64258;
      v44 = "V128Load";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)v11)
      {
        v35 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v35;
        }
        while (v35 < *(_DWORD *)v11);
      }
      WTF::dataLog<char const*,char [2]>(&v44, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v34);
      v41 = *((unsigned __int8 *)v34 + 8);
      if (v41 != 1 && v41 != 4)
      {
        v45 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(v11, *v34, v34[1], v36, v37, v38, v39, v40);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v45);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(v11, 0, v33, v43);
    }
    return v26;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDStore(JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int IfNecessary;
  __int16 v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  _DWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  const char *v47;

  v10 = *(_QWORD *)a1;
  IfNecessary = JSC::Wasm::BBQJITImpl::BBQJIT::loadIfNecessary(*(_QWORD *)a1, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a4, a5, a6, a7, a8);
  v12 = IfNecessary;
  v46 = IfNecessary;
  v13 = *(uint64_t **)(a1 + 16);
  v14 = *v13;
  v15 = v13[1];
  v21 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(v10, *v13, v15, v16, v17, v18, v19, v20);
  if (v15 == 2)
  {
    v27 = ((*(_DWORD *)(v10 + 1288) + 15) & 0xFFFFFFF0) + 16 * v14 + 16;
    if (*(_DWORD *)(v10 + 1280) < v27)
      *(_DWORD *)(v10 + 1280) = v27;
    v28 = (-8 * v27) ^ v21;
    if ((v21 & 7) != 1 || v28 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(v10, v14, v15, v21);
  }
  v30 = *(uint64_t **)(a1 + 8);
  v31 = *v30;
  v32 = v30[1];
  v33 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(v10, *v30, v32, v22, v23, v24, v25, v26);
  if (v32 == 2)
  {
    v39 = ((*(_DWORD *)(v10 + 1288) + 15) & 0xFFFFFFF0) + 16 * v31 + 16;
    if (*(_DWORD *)(v10 + 1280) < v39)
      *(_DWORD *)(v10 + 1280) = v39;
    v40 = (-8 * v39) ^ v33;
    if ((v33 & 7) != 1 || v40 >= 8)
      JSC::Wasm::BBQJITImpl::BBQJIT::unbind(v10, v31, v32, v33);
  }
  JSC::MacroAssemblerARM64::storeVector(*(_QWORD *)(v10 + 8), (v12 >> 8), a2, v34, v35, v36, v37, v38);
  if (HIBYTE(word_1ECF4C700))
  {
    v43 = *(uint64_t **)(a1 + 16);
    v42 = *(_DWORD **)(a1 + 24);
    v44 = *(_QWORD *)(a1 + 8);
    v47 = "V128Store";
    WTF::dataLog<char [16]>("BBQ\t");
    if (*(_DWORD *)v10)
    {
      v45 = 0;
      do
      {
        WTF::dataLog<char [16]>(" ");
        ++v45;
      }
      while (v45 < *(_DWORD *)v10);
    }
    WTF::dataLog<char const*,char [2]>(&v47, " ");
    JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(v10, 1, v43, v42, v44, &v46);
  }
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadExtend(JSC::SIMDLaneOperation,JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  _DWORD *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v49[2];
  const char *v50;
  int v51;

  v11 = *(_QWORD *)a1;
  v10 = *(uint64_t **)(a1 + 8);
  v12 = *v10;
  v13 = v10[1];
  result = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(*(_QWORD *)a1, *v10, v13, a4, a5, a6, a7, a8);
  if (v13 == 2)
  {
    v19 = ((*(_DWORD *)(v11 + 1288) + 15) & 0xFFFFFFF0) + 16 * v12 + 16;
    if (*(_DWORD *)(v11 + 1280) < v19)
      *(_DWORD *)(v11 + 1280) = v19;
    v20 = (-8 * v19) ^ result;
    if ((result & 7) != 1 || v20 >= 8)
      result = JSC::Wasm::BBQJITImpl::BBQJIT::unbind(v11, v12, v13, result);
  }
  v22 = *(_QWORD *)(v11 + 88);
  v23 = *(_DWORD *)(v22 + 596);
  if (v23)
  {
    v24 = *(_QWORD *)(v22 + 584) + 1232 * v23;
    v25 = *(_DWORD *)(v22 + 68) + *(_DWORD *)(v24 - 32);
    if (*(_DWORD *)(v24 - 160) == 5)
      v26 = v25 + 1;
    else
      v26 = v25;
    v32 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(v11, v26, 0xFB02uLL, 0, v15, v16, v17, v18);
    if (HIBYTE(word_1ECF4C700))
    {
      v38 = *(uint64_t **)(a1 + 8);
      v39 = **(_BYTE **)(a1 + 16);
      v40 = *(_DWORD **)(a1 + 24);
      v49[0] = v26;
      v49[1] = 64258;
      v50 = "Vector";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)v11)
      {
        v41 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v41;
        }
        while (v41 < *(_DWORD *)v11);
      }
      LOBYTE(v51) = v39;
      WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>(&v50, (char *)&v51, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v38);
      v47 = *((unsigned __int8 *)v38 + 8);
      if (v47 != 1 && v47 != 4)
      {
        v51 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(v11, *v38, v38[1], v42, v43, v44, v45, v46);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v51);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(v11, 0, v40, v49);
    }
    v33 = (v32 >> 8);
    JSC::MacroAssemblerARM64::loadDouble(*(_QWORD *)(v11 + 8), a2, v33, v27, v28, v29, v30, v31);
    JSC::MacroAssemblerARM64::vectorExtendLow(*(_DWORD **)(v11 + 8), **(_BYTE **)(a1 + 32) & 0x3F | ((unint64_t)(**(_BYTE **)(a1 + 40) & 3) << 6), v33, v33, v34, v35, v36, v37);
    return v26;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>(const char **a1, char *a2, const char *a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v8, "%s", *a1);
  JSC::SIMDLaneOperationDump::dump(a2, v8);
  WTF::PrintStream::printf(v8, "%s", a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v16;

  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a2);
  v13 = *((unsigned __int8 *)a2 + 8);
  if (v13 != 1 && v13 != 4)
  {
    v16 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a2, a2[1], v8, v9, v10, v11, v12);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v16);
  }
  return JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(a1, 0, a3, a4);
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::addSIMDLoadPad(JSC::SIMDLaneOperation,JSC::Wasm::BBQJITImpl::BBQJIT::Value,unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value&)::$_0::operator()<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  _DWORD *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v46[2];
  const char *v47;
  int v48;

  v11 = *(_QWORD *)a1;
  v10 = *(uint64_t **)(a1 + 8);
  v12 = *v10;
  v13 = v10[1];
  result = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(*(_QWORD *)a1, *v10, v13, a4, a5, a6, a7, a8);
  if (v13 == 2)
  {
    v19 = ((*(_DWORD *)(v11 + 1288) + 15) & 0xFFFFFFF0) + 16 * v12 + 16;
    if (*(_DWORD *)(v11 + 1280) < v19)
      *(_DWORD *)(v11 + 1280) = v19;
    v20 = (-8 * v19) ^ result;
    if ((result & 7) != 1 || v20 >= 8)
      result = JSC::Wasm::BBQJITImpl::BBQJIT::unbind(v11, v12, v13, result);
  }
  v22 = *(_QWORD *)(v11 + 88);
  v23 = *(_DWORD *)(v22 + 596);
  if (v23)
  {
    v24 = *(_QWORD *)(v22 + 584) + 1232 * v23;
    v25 = *(_DWORD *)(v22 + 68) + *(_DWORD *)(v24 - 32);
    if (*(_DWORD *)(v24 - 160) == 5)
      v26 = v25 + 1;
    else
      v26 = v25;
    v32 = JSC::Wasm::BBQJITImpl::BBQJIT::allocateWithHint(v11, v26, 0xFB02uLL, 0, v15, v16, v17, v18);
    if (HIBYTE(word_1ECF4C700))
    {
      v35 = *(uint64_t **)(a1 + 8);
      v36 = **(_BYTE **)(a1 + 16);
      v37 = *(_DWORD **)(a1 + 24);
      v46[0] = v26;
      v46[1] = 64258;
      v47 = "Vector";
      WTF::dataLog<char [16]>("BBQ\t");
      if (*(_DWORD *)v11)
      {
        v38 = 0;
        do
        {
          WTF::dataLog<char [16]>(" ");
          ++v38;
        }
        while (v38 < *(_DWORD *)v11);
      }
      LOBYTE(v48) = v36;
      WTF::dataLog<char const*,JSC::SIMDLaneOperationDump,char [2]>(&v47, (char *)&v48, " ");
      WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)v35);
      v44 = *((unsigned __int8 *)v35 + 8);
      if (v44 != 1 && v44 != 4)
      {
        v48 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(v11, *v35, v35[1], v39, v40, v41, v42, v43);
        WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v48);
      }
      JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(v11, 0, v37, v46);
    }
    v33 = *(_QWORD *)(v11 + 8);
    v34 = (v32 >> 8);
    if (**(_BYTE **)(a1 + 16) == 64)
      JSC::MacroAssemblerARM64::loadFloat(v33, a2, v34, v27, v28, v29, v30, v31);
    else
      JSC::MacroAssemblerARM64::loadDouble(v33, a2, v34, v27, v28, v29, v30, v31);
    return v26;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_QWORD *JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindGPRToScratch(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *result;
  v4 = 1 << a2;
  if ((*(_QWORD *)(*result + 648) & (1 << a2)) == 0)
    return (_QWORD *)a2;
  if (*(_DWORD *)(v3 + 340) > a2)
  {
    v5 = *(_QWORD *)(v3 + 328) + 4 * a2;
    *(_QWORD *)(v3 + 992) |= 1 << (a2 & 0x7F);
    if ((result[2] & v4) != 0 && (*(_WORD *)(v5 + 1) & 7) != 0)
    {
      if ((_BYTE)word_1ECF4C700)
      {
        v6 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * a2];
        WTF::dataLog<char [20],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>("BBQ\tPreserving GPR ", (uint64_t)&v6, " currently bound to ", v5, "\n");
      }
    }
    else
    {
      *(_DWORD *)v5 = 768;
      *(int8x16_t *)(*result + 616) = vandq_s8(*(int8x16_t *)(*result + 616), (int8x16_t)vdupq_n_s64(~v4));
      if ((_BYTE)word_1ECF4C700)
      {
        v6 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * a2];
        WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReserving scratch GPR ", (uint64_t)&v6, "\n");
      }
    }
    return (_QWORD *)a2;
  }
  __break(0xC471u);
  return result;
}

_QWORD *JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::bindFPRToScratch(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;

  v5 = result;
  v6 = *result;
  v7 = (a2 + 32);
  v8 = ((_BYTE)a2 + 32) & 0x7F;
  v9 = ((_BYTE)a2 + 32) & 0x60;
  if (v9 == 32)
  {
    if (v8 < 0x40)
    {
      if ((*(_QWORD *)(v6 + 664) & (1 << v8)) == 0 || (*(_QWORD *)(v6 + 672) & (1 << v8)) == 0)
        return (_QWORD *)a2;
      goto LABEL_4;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v8 >= 0x40)
    goto LABEL_14;
  if (((*(_QWORD *)(v6 + 664) >> v8) & 1) == 0)
    return (_QWORD *)a2;
LABEL_4:
  if (*(unsigned int *)(v6 + 484) > (unint64_t)(int)a2)
  {
    v3 = (int)a2;
    v2 = *(_QWORD *)(v6 + 472) + 4 * (int)a2;
    JSC::Wasm::BBQJITImpl::BBQJIT::LRU<JSC::ARM64Registers::FPRegisterID>::lock(v6 + 1008, a2);
    v6 = 1 << v8;
    v7 = v5[2] & (1 << v8);
    if (v9 != 32)
    {
      if (!v7)
        goto LABEL_16;
LABEL_7:
      if ((*(_WORD *)(v2 + 1) & 7) != 0)
      {
        if ((_BYTE)word_1ECF4C700)
        {
          v10 = *(_OWORD *)&(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * v3];
          WTF::dataLog<char [20],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>("BBQ\tPreserving FPR ", (uint64_t)&v10, " currently bound to ", v2, "\n");
        }
        return (_QWORD *)a2;
      }
LABEL_16:
      *(_DWORD *)v2 = 768;
      *(int8x16_t *)(*v5 + 632) = vandq_s8(*(int8x16_t *)(*v5 + 632), (int8x16_t)vdupq_n_s64(~v6));
      if ((_BYTE)word_1ECF4C700)
      {
        v10 = *(_OWORD *)&(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * v3];
        WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReserving scratch FPR ", (uint64_t)&v10, "\n");
      }
      return (_QWORD *)a2;
    }
LABEL_15:
    if (!v7 || (v5[3] & v6) == 0)
      goto LABEL_16;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

_QWORD *JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::unbindFPRFromScratch(_QWORD *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int8x16_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = result;
  v5 = (int8x16_t *)*result;
  v6 = (a2 + 32) & 0x7F;
  v7 = ((_BYTE)a2 + 32) & 0x60;
  if (v7 != 32)
  {
    if (v6 < 0x40)
    {
      if ((((unint64_t)v5[41].i64[1] >> v6) & 1) == 0)
        return result;
LABEL_4:
      if (v5[30].u32[1] <= (unint64_t)a2)
      {
        __break(0xC471u);
        return result;
      }
      v2 = v5[29].i64[1] + 4 * a2;
      v3 = 1 << v6;
      v5[72] = vandq_s8(v5[72], (int8x16_t)vdupq_n_s64(~(1 << v6)));
      if ((_BYTE)word_1ECF4C700)
      {
        v9 = *(_OWORD *)&(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * a2];
        result = (_QWORD *)WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing FPR ", (uint64_t)&v9, "\n");
      }
      v5 = (int8x16_t *)(v4[2] & v3);
      if (v7 != 32)
      {
        if (v5)
          goto LABEL_9;
        goto LABEL_10;
      }
LABEL_18:
      if (v5 && (v4[3] & v3) != 0)
      {
LABEL_9:
        if ((*(_WORD *)(v2 + 1) & 7) != 3)
          return result;
      }
LABEL_10:
      *(_DWORD *)v2 = 0;
      v8 = *v4;
      *(_QWORD *)(*v4 + 632) |= 1 << v6;
      if (v7 == 32)
        *(_QWORD *)(v8 + 640) |= 1 << v6;
      return result;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 >= 0x40)
    goto LABEL_17;
  if ((v5[41].i64[1] & (1 << v6)) != 0 && (v5[42].i64[0] & (1 << v6)) != 0)
    goto LABEL_4;
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<unsigned int,JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Location>(_DWORD *a1, uint64_t a2, int *a3)
{
  WTF::dataLog<unsigned int>(a1);
  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a2);
  if ((*(_BYTE *)a3 & 7) != 0)
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", a3);
  return WTF::dataLog<char [16]>("\n");
}

unsigned __int8 *JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<2,0>::unbindEarly(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  char v5;
  int8x16_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int8x16_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;

  v3 = result;
  if (!result[32])
  {
    result[32] = 1;
    v4 = result[8];
    v5 = v4 & 0x7F;
    if ((v4 & 0x7Fu) >= 0x40)
      goto LABEL_38;
    v6 = *(int8x16_t **)result;
    v1 = 1 << v5;
    if ((*(_QWORD *)(*(_QWORD *)result + 648) & (1 << v5)) == 0)
      goto LABEL_10;
    v4 = (char)v4;
    if (v6[21].u32[1] <= (unint64_t)(char)v4)
    {
      __break(0xC471u);
      JUMPOUT(0x198F933B8);
    }
    v2 = v6[20].i64[1] + 4 * (char)v4;
    v6[62] = vandq_s8(v6[62], (int8x16_t)vdupq_n_s64(~v1));
    if ((_BYTE)word_1ECF4C700)
      goto LABEL_39;
    while (1)
    {
      if ((*((_QWORD *)v3 + 2) & v1) != 0 && (*(_WORD *)(v2 + 1) & 7) != 3)
      {
        v6 = *(int8x16_t **)v3;
      }
      else
      {
        *(_DWORD *)v2 = 0;
        v6 = *(int8x16_t **)v3;
        *(_QWORD *)(*(_QWORD *)v3 + 616) |= 1 << v5;
      }
LABEL_10:
      v4 = v3[9];
      v5 = v4 & 0x7F;
      if ((v4 & 0x7Fu) < 0x40)
        break;
LABEL_38:
      __break(1u);
LABEL_39:
      v17 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v4];
      result = (unsigned __int8 *)WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v17, "\n");
    }
    v7 = 1 << v5;
    if ((v6[40].i64[1] & (1 << v5)) != 0)
    {
      if (v6[21].u32[1] <= (unint64_t)(char)v4)
      {
LABEL_42:
        __break(0xC471u);
        JUMPOUT(0x198F933B0);
      }
      v8 = v6[20].i64[1] + 4 * (char)v4;
      v6[62] = vandq_s8(v6[62], (int8x16_t)vdupq_n_s64(~v7));
      if ((_BYTE)word_1ECF4C700)
      {
        v17 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * (char)v4];
        result = (unsigned __int8 *)WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v17, "\n");
      }
      if ((*((_QWORD *)v3 + 2) & v7) == 0 || (*(_WORD *)(v8 + 1) & 7) == 3)
      {
        *(_DWORD *)v8 = 0;
        *(_QWORD *)(*(_QWORD *)v3 + 616) |= 1 << v5;
      }
    }
  }
  if (!v3[33])
  {
    v3[33] = 1;
    v9 = *((_QWORD *)v3 + 2);
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      do
      {
        if (v10 > 0x1Fu)
        {
          result = (unsigned __int8 *)JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<1,0>::unbindFPRFromScratch(v3, (char)(v10 - 32));
        }
        else
        {
          v11 = *(int8x16_t **)v3;
          v12 = 1 << v10;
          if ((*(_QWORD *)(*(_QWORD *)v3 + 648) & (1 << v10)) != 0)
          {
            if (v10 >= v11[21].u32[1])
              goto LABEL_42;
            v13 = v11[20].i64[1];
            v11[62] = vandq_s8(v11[62], (int8x16_t)vdupq_n_s64(~v12));
            if ((_BYTE)word_1ECF4C700)
            {
              v17 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * v10];
              result = (unsigned __int8 *)WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v17, "\n");
            }
            v14 = v13 + 4 * v10;
            if ((*((_QWORD *)v3 + 2) & v12) == 0 || (*(_WORD *)(v14 + 1) & 7) == 3)
            {
              *(_DWORD *)v14 = 0;
              *(_QWORD *)(*(_QWORD *)v3 + 616) |= v12;
            }
          }
        }
        if (v10 > 0x3E)
          break;
        v15 = *((_QWORD *)v3 + 2);
        if (!v15)
          break;
        v16 = __clz(__rbit64(v15 >> ((v10 + 1) & 0x3F))) + (((_BYTE)v10 + 1) & 0x3F);
        v10 = v16 >= 0x40 ? 64 : v16;
      }
      while (v16 < 0x40);
    }
  }
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::ScratchScope<>(uint64_t a1, JSC::Wasm::BBQJITImpl::BBQJIT *this, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char v10;
  JSC::ARM64LogicalImmediate *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  *(_QWORD *)a1 = this;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  v9 = *((_QWORD *)this + 79);
  if (v9)
    v10 = __clz(__rbit64(v9)) - 32;
  else
    v10 = JSC::Wasm::BBQJITImpl::BBQJIT::evictFPR(this, this, a3, a4, a5, a6, a7, a8);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::bindFPRToScratch((_QWORD *)a1, v10);
  *(_BYTE *)(a1 + 8) = v10;
  v18 = *(_QWORD *)(*(_QWORD *)a1 + 632);
  if (v18)
    v19 = __clz(__rbit64(v18)) - 32;
  else
    v19 = JSC::Wasm::BBQJITImpl::BBQJIT::evictFPR(*(JSC::Wasm::BBQJITImpl::BBQJIT **)a1, v11, v12, v13, v14, v15, v16, v17);
  JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::bindFPRToScratch((_QWORD *)a1, v19);
  *(_BYTE *)(a1 + 9) = v19;
  return a1;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::bindFPRToScratch(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = ((_BYTE)a2 + 32) & 0x7F;
  result = JSC::RegisterSet::contains((_QWORD *)(*a1 + 664), (a2 + 32) & 0x7F, 4u);
  if (!(_DWORD)result)
    return a2;
  v6 = *a1;
  if (*(unsigned int *)(*a1 + 484) <= (unint64_t)(int)a2)
  {
    __break(0xC471u);
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 472) + 4 * (int)a2;
    JSC::Wasm::BBQJITImpl::BBQJIT::LRU<JSC::ARM64Registers::FPRegisterID>::lock(v6 + 1008, a2);
    result = JSC::RegisterSet::contains(a1 + 2, v4, 4u);
    if ((_DWORD)result && (*(_WORD *)(v7 + 1) & 7) != 0)
    {
      if ((_BYTE)word_1ECF4C700)
      {
        v8 = *(_OWORD *)&(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * (int)a2];
        WTF::dataLog<char [20],WTF::ASCIILiteral,char [21],JSC::Wasm::BBQJITImpl::BBQJIT::RegisterBinding,char [2]>("BBQ\tPreserving FPR ", (uint64_t)&v8, " currently bound to ", v7, "\n");
      }
      return a2;
    }
    *(_DWORD *)v7 = 768;
    if (v4 < 0x40)
    {
      *(int8x16_t *)(*a1 + 632) = vandq_s8(*(int8x16_t *)(*a1 + 632), (int8x16_t)vdupq_n_s64(~(1 << v4)));
      if ((_BYTE)word_1ECF4C700)
      {
        v8 = *(_OWORD *)&(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * (int)a2];
        WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReserving scratch FPR ", (uint64_t)&v8, "\n");
      }
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::unbindScratches(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(result + 32))
  {
    v1 = result;
    *(_BYTE *)(result + 32) = 1;
    JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::unbindFPRFromScratch((int8x16_t **)result, *(char *)(result + 8));
    return JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::unbindFPRFromScratch((int8x16_t **)v1, *(char *)(v1 + 9));
  }
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::unbindPreserved(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (!*(_BYTE *)(result + 33))
  {
    v1 = result;
    *(_BYTE *)(result + 33) = 1;
    v2 = *(_QWORD *)(result + 16);
    if (v2)
    {
      v3 = __clz(__rbit64(v2));
      do
      {
        if (v3 > 0x1Fu)
          result = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::unbindFPRFromScratch((int8x16_t **)v1, (char)(v3 - 32));
        else
          result = JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::unbindGPRFromScratch(v1, v3);
        if (v3 > 0x3E)
          break;
        v4 = *(_QWORD *)(v1 + 16);
        if (!v4)
          break;
        v5 = __clz(__rbit64(v4 >> ((v3 + 1) & 0x3F))) + (((_BYTE)v3 + 1) & 0x3F);
        v3 = v5 >= 0x40 ? 64 : v5;
      }
      while (v5 < 0x40);
    }
  }
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::unbindGPRFromScratch(uint64_t result, unsigned __int8 a2)
{
  int8x16_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;

  v3 = *(int8x16_t **)result;
  v4 = 1 << a2;
  if ((*(_QWORD *)(*(_QWORD *)result + 648) & (1 << a2)) != 0)
  {
    if (v3[21].i32[1] <= a2)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = (_QWORD *)result;
      v6 = v3[20].i64[1] + 4 * a2;
      v3[62] = vandq_s8(v3[62], (int8x16_t)vdupq_n_s64(~v4));
      if ((_BYTE)word_1ECF4C700)
      {
        v7 = *(_OWORD *)&(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * a2];
        result = WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing GPR ", (uint64_t)&v7, "\n");
      }
      if ((v5[2] & v4) == 0 || (*(_WORD *)(v6 + 1) & 7) == 3)
      {
        *(_DWORD *)v6 = 0;
        *(_QWORD *)(*v5 + 616) |= 1 << (a2 & 0x7F);
      }
    }
  }
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,2>::unbindFPRFromScratch(int8x16_t **a1, int a2)
{
  unsigned int v4;
  uint64_t result;
  int8x16_t *v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  __int128 v10;

  v4 = ((_BYTE)a2 + 32) & 0x7F;
  result = JSC::RegisterSet::contains(&(*a1)[41].i64[1], (a2 + 32) & 0x7F, 4u);
  if (!(_DWORD)result)
    return result;
  v6 = *a1;
  if ((*a1)[30].u32[1] <= (unint64_t)a2)
  {
    __break(0xC471u);
    goto LABEL_13;
  }
  if (v4 >= 0x40)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v7 = a2;
  v8 = v6[29].i64[1] + 4 * a2;
  v6[72] = vandq_s8(v6[72], (int8x16_t)vdupq_n_s64(~(1 << v4)));
  if ((_BYTE)word_1ECF4C700)
  {
    v10 = *(_OWORD *)&(&JSC::ARM64Assembler::fprName(JSC::ARM64Registers::FPRegisterID)::nameForRegister)[2 * v7];
    WTF::dataLog<char [27],WTF::ASCIILiteral,char [2]>("BBQ\tReleasing FPR ", (uint64_t)&v10, "\n");
  }
  result = JSC::RegisterSet::contains(a1 + 2, v4, 4u);
  if (!(_DWORD)result || (*(_WORD *)(v8 + 1) & 7) == 3)
  {
    *(_DWORD *)v8 = 0;
    v9 = *a1;
    (*a1)[39].i64[1] |= 1 << v4;
    if ((v4 & 0x60) == 0x20)
      v9[40].i64[0] |= 1 << v4;
  }
  return result;
}

uint64_t WTF::dataLog<unsigned long>(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%lu", *a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<JSC::SIMDLane>(char *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const char *v7;
  WTF::PrintStream *v8;
  uint64_t result;
  char v10;
  char **v11;
  char *v12;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  v5 = *a1;
  if (v5 >= 7)
  {
    result = 58;
    __break(0xC471u);
  }
  else
  {
    v6 = v4;
    v7 = off_1E35BE3B0[v5];
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v8, "%s", v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::ScratchScope<0,1>::initializedPreservedSet<JSC::Wasm::BBQJITImpl::BBQJIT::Location>(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;

  v4 = a2 & 7;
  switch(v4)
  {
    case 6:
      if ((a2 & 0x400000) != 0)
        goto LABEL_26;
      v6 = (uint64_t *)(result + 16);
      v3 = *(_QWORD *)(result + 16) | (1 << SBYTE2(a2));
      *(_QWORD *)(result + 16) = v3;
      if ((a2 & 0x4000) != 0)
        goto LABEL_26;
      v5 = a2 >> 8;
      break;
    case 3:
      v7 = (BYTE1(a2) + 32) & 0x7F;
      if (v7 >= 0x40)
        goto LABEL_26;
      v3 = 1 << v7;
      *(_QWORD *)(result + 16) |= 1 << v7;
      if (((BYTE1(a2) + 32) & 0x60) == 0x20)
        goto LABEL_27;
      goto LABEL_13;
    case 2:
      if ((a2 & 0x4000) != 0)
        goto LABEL_26;
      v5 = a2 >> 8;
      v6 = (uint64_t *)(result + 16);
      break;
    default:
      goto LABEL_13;
  }
  v3 = 1 << v5;
  while (1)
  {
    v3 |= *v6;
    *v6 = v3;
LABEL_13:
    v8 = a3 & 7;
    if (v8 != 6)
      break;
    if ((a3 & 0x400000) == 0)
    {
      v10 = (_QWORD *)(result + 16);
      v3 = *(_QWORD *)(result + 16) | (1 << SBYTE2(a3));
      *(_QWORD *)(result + 16) = v3;
      if ((a3 & 0x4000) == 0)
      {
        v9 = a3 >> 8;
LABEL_21:
        v11 = 1 << v9;
LABEL_22:
        *v10 |= v11;
        return result;
      }
    }
LABEL_26:
    __break(1u);
LABEL_27:
    v6 = (uint64_t *)(result + 24);
  }
  if (v8 != 3)
  {
    if (v8 != 2)
      return result;
    if ((a3 & 0x4000) == 0)
    {
      v9 = a3 >> 8;
      v10 = (_QWORD *)(result + 16);
      goto LABEL_21;
    }
    goto LABEL_26;
  }
  v12 = (BYTE1(a3) + 32) & 0x7F;
  if (v12 >= 0x40)
    goto LABEL_26;
  v11 = 1 << v12;
  *(_QWORD *)(result + 16) |= 1 << v12;
  if (((BYTE1(a3) + 32) & 0x60) == 0x20)
  {
    v10 = (_QWORD *)(result + 24);
    goto LABEL_22;
  }
  return result;
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::Wasm::BBQJITImpl::BBQJIT::Value,JSC::Wasm::BBQJITImpl::BBQJIT::Location,unsigned int>(uint64_t a1, char a2, uint64_t a3, int *a4, uint64_t a5, int *a6, _DWORD *a7)
{
  if ((a2 & 1) == 0)
    WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a3);
  if ((*(_BYTE *)a4 & 7) != 0)
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", a4);
  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>(a5);
  if ((*(_BYTE *)a6 & 7) != 0)
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", a6);
  WTF::dataLog<char [16]>(", ");
  WTF::dataLog<unsigned int>(a7);
  return WTF::dataLog<char [16]>("\n");
}

uint64_t JSC::Wasm::BBQJITImpl::BBQJIT::logInstructionData<JSC::v128_u,JSC::Wasm::BBQJITImpl::BBQJIT::Result<JSC::Wasm::BBQJITImpl::BBQJIT::Value>>(uint64_t a1, char a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v15;

  if ((a2 & 1) == 0)
    WTF::dataLog<char [16]>(", ");
  WTF::dataLog<JSC::v128_u>(a3);
  WTF::dataLog<char [16]>(" ");
  WTF::dataLog<char [16]>("=> ");
  WTF::dataLog<JSC::Wasm::BBQJITImpl::BBQJIT::Value>((uint64_t)a4);
  v12 = *((unsigned __int8 *)a4 + 8);
  if (v12 != 1 && v12 != 4)
  {
    v15 = JSC::Wasm::BBQJITImpl::BBQJIT::locationOf(a1, *a4, a4[1], v7, v8, v9, v10, v11);
    WTF::dataLog<char [2],JSC::Wasm::BBQJITImpl::BBQJIT::Location>(":", &v15);
  }
  return WTF::dataLog<char [16]>("\n");
}

uint64_t WTF::dataLog<JSC::v128_u>(unint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::printInternal(v4, *a1, a1[1]);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<unsigned char>(unsigned __int8 *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%u", *a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

WTF::StringImpl *ipint_extern_prologue_osr(JSC::Wasm::IPIntCallee *a1, uint64_t a2, JSC::Wasm::Instance *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WTF::StringImpl *result;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  const WTF::StringImpl *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;

  v4 = (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080;
  if (HIBYTE(dword_1ECF4C799))
  {
    if (!BYTE1(dword_1ECF4C702))
      goto LABEL_26;
    v5 = atomic_load(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag);
    if (v5 != -1)
    {
      v46 = (WTF::StringImpl *)&v44;
      v45 = &v46;
      std::__call_once(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag, &v45, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::$_0 &&>>);
    }
    if (byte_1EE343088)
    {
      if (!JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist
        || !*(_DWORD *)(JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist - 12))
      {
        goto LABEL_26;
      }
      WTF::String::number(*(unsigned int *)(v4 + 32), (uint64_t *)&v46);
      v16 = WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist, &v46, v9);
      v17 = v46;
      v46 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, v10, (uint64_t)a3, v11, v12, v13, v14, v15);
          WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
          if (!v16)
            goto LABEL_26;
          goto LABEL_6;
        }
        *(_DWORD *)v17 -= 2;
      }
      if (!v16)
        goto LABEL_26;
    }
  }
LABEL_6:
  if (!byte_1ECF4C79D)
  {
    if (!BYTE2(dword_1ECF4C702))
      goto LABEL_26;
    v6 = atomic_load(&JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::initializeAllowlistFlag);
    if (v6 != -1)
    {
      v46 = (WTF::StringImpl *)&v44;
      v45 = &v46;
      std::__call_once(&JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::initializeAllowlistFlag, &v45, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::$_0 &&>>);
    }
    if (byte_1EE343120)
    {
      if (!JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::omgAllowlist
        || !*(_DWORD *)(JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::omgAllowlist - 12))
      {
        goto LABEL_26;
      }
      WTF::String::number(*(unsigned int *)(v4 + 32), (uint64_t *)&v46);
      v25 = WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains(&JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::omgAllowlist, &v46, v18);
      v26 = v46;
      v46 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::~StringImpl(v26, v19, (uint64_t)a3, v20, v21, v22, v23, v24);
          WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
          if (!v25)
            goto LABEL_26;
          goto LABEL_11;
        }
        *(_DWORD *)v26 -= 2;
      }
      if (!v25)
        goto LABEL_26;
    }
  }
LABEL_11:
  if (dword_1ECF4C708 >= 2)
  {
    v27 = *(_DWORD *)(v4 + 32);
    if (qword_1ECF4C718 > v27 || HIDWORD(qword_1ECF4C718) < v27)
    {
      if (dword_1ECF4C708 != 2)
        goto LABEL_12;
    }
    else if (dword_1ECF4C708 == 2)
    {
      goto LABEL_12;
    }
LABEL_26:
    result = 0;
    *(_DWORD *)(v4 + 184) = 0x7FFFFFFF;
    *(_QWORD *)(v4 + 176) = 0x80000000;
    return result;
  }
  if (!(_BYTE)dword_1ECF4C799)
    return 0;
LABEL_12:
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::Wasm::IPIntCallee,char [45],JSC::Wasm::IPIntTierUpCounter,char [2]>((JSC::Wasm::Callee *)v4, ": Entered prologue_osr with tierUpCounter = ", v4 + 176);
  if (!JSC::IPInt::jitCompileAndSetHeuristics((JSC::IPInt *)v4, a1, a3))
    return 0;
  v7 = *(_QWORD *)(v4 + 8 * *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a1 + 8) + 8) + 6) + 40);
  v45 = &v46;
  v46 = 0;
  JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v7, (uint64_t **)&v45);
  return v46;
}

BOOL JSC::IPInt::jitCompileAndSetHeuristics(JSC::IPInt *this, JSC::Wasm::IPIntCallee *a2, JSC::Wasm::Instance *a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t *v5;
  uint64_t (**v6)();
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  int v21;
  double v22;
  float v23;
  char *v25;
  uint64_t v27;
  int v28;
  __int128 *v29;
  int v30;
  double v31;
  float v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  _DWORD *v44;
  __int16 v45;
  WTF::StringImpl *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  int *v59;
  int v60;
  double v61;
  int v62;
  float v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned __int8 *v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  const WTF::StringImpl *v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  char v97;
  WTF::StringImpl **v98;
  WTF::StringImpl *v99;
  int v100;

  if ((JSC::ExecutionCounter<(JSC::CountingVariant)0>::checkIfThresholdCrossedAndSet((int *)this + 44, 0) & 1) != 0)
  {
    v16 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 8) + 8) + 6);
    v17 = (char *)this + 8 * v16;
    v19 = *((_QWORD *)v17 + 5);
    v18 = v17 + 40;
    if (v19)
    {
      if (BYTE1(qword_1ECF4C332))
        WTF::dataLog<char [88],char [2]>("    Code was already compiled.", "\n");
      if ((_BYTE)word_1ECF4C720)
        v20 = (char *)&xmmword_1ECF4C6D8 + 4;
      else
        v20 = (char *)&xmmword_1ECF4C6D8 + 12;
      v21 = *(_DWORD *)v20;
      *((_QWORD *)this + 22) = 0;
      *((_DWORD *)this + 46) = v21;
      if (v21 == 0x7FFFFFFF)
      {
        *((_DWORD *)this + 46) = 0x7FFFFFFF;
        *((_DWORD *)this + 44) = 0x80000000;
      }
      else if (v21 <= 0)
      {
        *((_DWORD *)this + 45) = 0;
      }
      else
      {
        v22 = (double)v21;
        if ((double)v21 > (double)SHIDWORD(xmmword_1ECF4C514))
          v22 = (double)SHIDWORD(xmmword_1ECF4C514);
        *((_DWORD *)this + 44) = (int)-v22;
        v23 = v22;
        *((float *)this + 45) = v23;
      }
      return 1;
    }
    v25 = (char *)this + 188;
    if (__ldaxr((unsigned __int8 *)this + 188))
    {
      __clrex();
    }
    else
    {
      v27 = 1;
      if (!__stxr(1u, (unsigned __int8 *)v25))
        goto LABEL_21;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 188);
LABEL_21:
    if (v16 >= 2)
    {
      __break(1u);
      goto LABEL_60;
    }
    if (*((_BYTE *)this + v16 + 189) == 1)
    {
      if ((_BYTE)word_1ECF4C720)
        v29 = &xmmword_1ECF4C6D8;
      else
        v29 = (__int128 *)((char *)&xmmword_1ECF4C6D8 + 8);
      v30 = *(_DWORD *)v29;
      *((_QWORD *)this + 22) = 0;
      *((_DWORD *)this + 46) = v30;
      if (v30 == 0x7FFFFFFF)
      {
        *((_DWORD *)this + 46) = 0x7FFFFFFF;
        *((_DWORD *)this + 44) = 0x80000000;
      }
      else if (v30 <= 0)
      {
        *((_DWORD *)this + 45) = 0;
      }
      else
      {
        v31 = (double)v30;
        if ((double)v30 > (double)SHIDWORD(xmmword_1ECF4C514))
          v31 = (double)SHIDWORD(xmmword_1ECF4C514);
        *((_DWORD *)this + 44) = (int)-v31;
        v32 = v31;
        *((float *)this + 45) = v32;
      }
    }
    else if (!*((_BYTE *)this + v16 + 189))
    {
      *((_BYTE *)this + v16 + 189) = 1;
      v28 = __ldxr((unsigned __int8 *)v25);
      if (v28 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v25))
          goto LABEL_42;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 188, 0, v10, v11, v12, v13, v14, v15);
LABEL_42:
      v3 = *((unsigned int *)this + 8);
      v5 = g_config;
      v6 = off_1E35B5C50;
      if (HIBYTE(dword_1ECF4C799))
      {
        v34 = atomic_load(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag);
        if (v34 != -1)
        {
          v99 = (WTF::StringImpl *)&v97;
          v98 = &v99;
          std::__call_once(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag, &v98, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::$_0 &&>>);
        }
        if (!byte_1EE343088)
        {
LABEL_46:
          v25 = (char *)WTF::fastMalloc((WTF *)0x1E8);
          v7 = *((_QWORD *)a2 + 1);
          v4 = *(unsigned int **)(*((_QWORD *)a2 + 7) + 8);
          do
            v35 = __ldaxr(v4);
          while (__stlxr(v35 + 1, v4));
          v27 = *((_QWORD *)this + 3);
          if (!v27)
          {
            v36 = 256;
            goto LABEL_50;
          }
LABEL_60:
          v36 = (*(_DWORD *)v27 != 0) | 0x100;
LABEL_50:
          v37 = *(_QWORD *)(*((_QWORD *)a2 + 7)
                          + 8 * *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 8) + 8) + 6)
                          + 16);
          v38 = WTF::fastMalloc((WTF *)0x10);
          *(_DWORD *)(v38 + 8) = 1;
          *(_QWORD *)v38 = v6;
          *((_DWORD *)v25 + 2) = 1;
          *((_WORD *)v25 + 6) = 0;
          v25[14] = 0;
          *((_QWORD *)v25 + 5) = v7;
          *((_QWORD *)v25 + 2) = v4;
          *((_QWORD *)v25 + 3) = v25 + 40;
          v25[64] = 0;
          *((_QWORD *)v25 + 6) = v38;
          *((_QWORD *)v25 + 7) = 0;
          *((_QWORD *)v25 + 4) = 0x100000001;
          *((_QWORD *)v25 + 9) = &unk_1E35B56A0;
          *(_QWORD *)v25 = off_1E35B5640;
          *((_QWORD *)v25 + 18) = 0;
          *((_OWORD *)v25 + 7) = 0u;
          *((_OWORD *)v25 + 8) = 0u;
          *((_OWORD *)v25 + 5) = 0u;
          *((_OWORD *)v25 + 6) = 0u;
          do
            v39 = __ldaxr(v4);
          while (__stlxr(v39 + 1, v4));
          *((_QWORD *)v25 + 19) = v4;
          *((_QWORD *)v25 + 20) = v25 + 72;
          *((_QWORD *)v25 + 22) = 0;
          *((_QWORD *)v25 + 23) = 0;
          *((_QWORD *)v25 + 21) = 0;
          v25[192] = 0;
          *(_OWORD *)(v25 + 200) = 0u;
          *(_OWORD *)(v25 + 216) = 0u;
          CC_SHA1_Init((CC_SHA1_CTX *)(v25 + 232));
          *((_QWORD *)v25 + 41) = 0;
          *((_QWORD *)v25 + 42) = 0;
          *((_DWORD *)v25 + 86) = 0;
          if (v5[82])
            WTF::dataLog<char [88],char [2]>("Wasm streaming parser created, but we can only dump source in debug builds.", "\n");
          v25[352] = 1;
          *((_QWORD *)v25 + 45) = 0;
          *(_DWORD *)(v25 + 353) = 0;
          *(_QWORD *)v25 = off_1E35B5410;
          *((_QWORD *)v25 + 9) = &unk_1E35B5478;
          *((_OWORD *)v25 + 23) = 0u;
          *((_OWORD *)v25 + 24) = 0u;
          *((_OWORD *)v25 + 25) = 0u;
          *((_OWORD *)v25 + 26) = 0u;
          *((_OWORD *)v25 + 27) = 0u;
          *((_OWORD *)v25 + 28) = 0u;
          *((_QWORD *)v25 + 58) = 0;
          if (v37)
          {
            do
              v40 = __ldaxr((unsigned int *)v37);
            while (__stlxr(v40 + 1, (unsigned int *)v37));
          }
          *((_QWORD *)v25 + 59) = v37;
          *((_DWORD *)v25 + 120) = v3;
          *((_WORD *)v25 + 242) = v36;
          v25[12] = *(_BYTE *)(v37 + 8);
          *(_WORD *)(v25 + 353) = 257;
          goto LABEL_75;
        }
        if (JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist
          && *(_DWORD *)(JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist - 12))
        {
          WTF::String::number(v3, (uint64_t *)&v99);
          v86 = WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist, &v99, v78);
          v87 = v99;
          v99 = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
            {
              WTF::StringImpl::~StringImpl(v87, v79, v80, v81, v82, v83, v84, v85);
              WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
              if (v86)
                goto LABEL_46;
              goto LABEL_62;
            }
            *(_DWORD *)v87 -= 2;
          }
          if (v86)
            goto LABEL_46;
        }
      }
LABEL_62:
      v25 = (char *)WTF::fastMalloc((WTF *)0x60);
      v41 = *((_QWORD *)a2 + 1);
      v42 = (unsigned int *)*((_QWORD *)a2 + 7);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 + 1, v42));
      v98 = (WTF::StringImpl **)v42;
      v44 = (_DWORD *)*((_QWORD *)this + 3);
      if (v44)
        v45 = (*v44 != 0) | 0x100;
      else
        v45 = 256;
      v46 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *((_DWORD *)v46 + 2) = 1;
      *(_QWORD *)v46 = off_1E35B5C50;
      v99 = v46;
      JSC::Wasm::OMGPlan::OMGPlan((uint64_t)v25, v41, (uint64_t *)&v98, v3, v45, v16, (uint64_t *)&v99);
      v47 = (unsigned int *)v99;
      v99 = 0;
      if (v47)
      {
        v48 = v47 + 2;
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          atomic_store(1u, v47 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
        }
      }
      v51 = (unsigned int *)v98;
      v98 = 0;
      if (v51)
      {
        do
        {
          v52 = __ldaxr(v51);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, v51));
        if (!v53)
        {
          atomic_store(1u, v51);
          v99 = (WTF::StringImpl *)v51;
          WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v99);
        }
      }
LABEL_75:
      v54 = atomic_load(&JSC::Wasm::ensureWorklist(void)::initializeWorklist);
      if (v54 != -1)
      {
        v99 = (WTF::StringImpl *)&v97;
        v98 = &v99;
        std::__call_once(&JSC::Wasm::ensureWorklist(void)::initializeWorklist, &v98, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::ensureWorklist(void)::$_0 &&>>);
      }
      v55 = JSC::Wasm::globalWorklist;
      v56 = (unsigned int *)(v25 + 8);
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 + 1, v56));
      v96 = (unsigned int *)v25;
      JSC::Wasm::Worklist::enqueue(v55, &v96);
      v58 = v96;
      v96 = 0;
      if (v58)
      {
        v66 = v58 + 2;
        do
        {
          v67 = __ldaxr(v66);
          v68 = v67 - 1;
        }
        while (__stlxr(v68, v66));
        if (!v68)
        {
          atomic_store(1u, v58 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
        }
      }
      if (*((_BYTE *)v5 + 1124))
      {
        if (*((_BYTE *)v5 + 1824))
          v59 = (int *)(v5 + 219);
        else
          v59 = (int *)(v5 + 220);
        v60 = *v59;
        *((_QWORD *)this + 22) = 0;
        *((_DWORD *)this + 46) = v60;
        if (v60 == 0x7FFFFFFF)
        {
          *((_DWORD *)this + 46) = 0x7FFFFFFF;
          *((_DWORD *)this + 44) = 0x80000000;
        }
        else if (v60 <= 0)
        {
          *((_DWORD *)this + 45) = 0;
        }
        else
        {
          v61 = (double)v60;
          v62 = *((_DWORD *)v5 + 328);
          if (v61 > (double)v62)
            v61 = (double)v62;
          *((_DWORD *)this + 44) = (int)-v61;
          v63 = v61;
          *((float *)this + 45) = v63;
        }
        goto LABEL_89;
      }
      v69 = (unsigned __int8 *)(v25 + 13);
      if (__ldaxr((unsigned __int8 *)v25 + 13))
      {
        __clrex();
      }
      else if (!__stxr(1u, v69))
      {
        goto LABEL_103;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v25 + 13));
LABEL_103:
      if (((*(uint64_t (**)(char *))(*(_QWORD *)v25 + 40))(v25) & 1) == 0)
      {
        v99 = (WTF::StringImpl *)0x7FF0000000000000;
        v100 = 0;
        WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)(v25 + 14), (unsigned __int8 *)v25 + 13, (WTF::TimeWithDynamicClockType *)&v99);
      }
      v77 = __ldxr(v69);
      if (v77 == 1)
      {
        if (!__stlxr(0, v69))
        {
          do
          {
LABEL_89:
            v64 = __ldaxr(v56);
            v65 = v64 - 1;
          }
          while (__stlxr(v65, v56));
          if (!v65)
          {
            atomic_store(1u, (unsigned int *)v25 + 2);
            (*(void (**)(char *))(*(_QWORD *)v25 + 8))(v25);
          }
          return *v18 != 0;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v25 + 13, 0, v71, v72, v73, v74, v75, v76);
      goto LABEL_89;
    }
    v33 = __ldxr((unsigned __int8 *)v25);
    if (v33 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v25))
        return *v18 != 0;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 188, 0, v10, v11, v12, v13, v14, v15);
    return *v18 != 0;
  }
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<char [88],char [2]>("    JIT threshold should be lifted.", "\n");
  return 0;
}

_QWORD *ipint_extern_loop_osr(_QWORD *a1, uint64_t a2, JSC::Wasm::Instance *a3, uint64_t *a4)
{
  unint64_t v6;
  BOOL v7;
  int v9;
  unint64_t v10;
  unint64_t v11;
  JSC::Wasm::Instance *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _QWORD *result;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  int v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  __int128 *v55;
  int v56;
  double v57;
  float v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  __int16 v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  JSC::Wasm::Module *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int *v94;
  __int128 *v95;
  int v96;
  double v97;
  float v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  const WTF::StringImpl *v104;
  WTF::AtomStringImpl *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  WTF::StringImpl *v112;
  unsigned __int8 *v113;
  JSC::Wasm::Callee *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int *v131;
  unsigned int *v132;
  WTF::StringImpl *v133[4];
  unint64_t v134;
  uint64_t *v135;
  _QWORD *v136;
  uint64_t *v137;
  uint64_t v138;
  int v139;

  v135 = a4;
  v136 = a1;
  v6 = (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080;
  v134 = v6;
  if (HIBYTE(word_1ECF4C6D4))
    v7 = BYTE1(dword_1ECF4C799) == 0;
  else
    v7 = 1;
  if (v7 || BYTE2(dword_1ECF4C702) == 0)
    goto LABEL_9;
  v9 = (int)a3;
  v10 = atomic_load(&JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::initializeAllowlistFlag);
  if (v10 != -1)
  {
    v133[0] = (WTF::StringImpl *)&v137;
    v138 = (uint64_t)v133;
    std::__call_once(&JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::initializeAllowlistFlag, &v138, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::$_0 &&>>);
  }
  v11 = *(unsigned int *)(v6 + 32);
  if (byte_1EE343120)
  {
    if (!JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::omgAllowlist
      || !*(_DWORD *)(JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::omgAllowlist - 12))
    {
      goto LABEL_9;
    }
    WTF::String::number(v11, (uint64_t *)v133);
    v111 = WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains(&JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::omgAllowlist, v133, v104);
    v112 = v133[0];
    v133[0] = 0;
    if (v112)
    {
      if (*(_DWORD *)v112 == 2)
      {
        WTF::StringImpl::~StringImpl(v112, v105, (uint64_t)a3, v106, v107, v108, v109, v110);
        WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
        if (!v111)
          goto LABEL_9;
LABEL_146:
        LODWORD(v11) = *(_DWORD *)(v6 + 32);
        goto LABEL_13;
      }
      *(_DWORD *)v112 -= 2;
    }
    if (!v111)
      goto LABEL_9;
    goto LABEL_146;
  }
LABEL_13:
  if (dword_1ECF4C708 < 2)
    goto LABEL_14;
  if (qword_1ECF4C718 > v11 || HIDWORD(qword_1ECF4C718) < v11)
  {
    if (dword_1ECF4C708 != 2)
      goto LABEL_14;
LABEL_9:
    ipint_extern_prologue_osr((JSC::Wasm::IPIntCallee *)a1, a2, a3);
    return 0;
  }
  if (dword_1ECF4C708 != 2)
    goto LABEL_9;
LABEL_14:
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::Wasm::IPIntCallee,char [41],JSC::Wasm::IPIntTierUpCounter,char [2]>((JSC::Wasm::Callee *)v6, v6 + 176);
  if ((JSC::ExecutionCounter<(JSC::CountingVariant)0>::checkIfThresholdCrossedAndSet((int *)(v6 + 176), 0) & 1) == 0)
  {
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [88],char [2]>("    JIT threshold should be lifted.", "\n");
    return 0;
  }
  v18 = *(unsigned int **)(v6 + 200);
  if (!v18)
    goto LABEL_166;
  v19 = *(v18 - 2);
  v20 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
  v22 = v19 & (v21 ^ HIWORD(v21));
  v23 = v18[4 * v22];
  if (v23 != v9)
  {
    v24 = 1;
    while (v23)
    {
      v22 = ((_DWORD)v22 + v24) & v19;
      v23 = v18[4 * v22];
      ++v24;
      if (v23 == v9)
        goto LABEL_26;
    }
    v22 = *(v18 - 1);
  }
LABEL_26:
  if (v22 == *(v18 - 1))
  {
LABEL_166:
    __break(0xC471u);
    JUMPOUT(0x198F9519CLL);
  }
  v25 = (int *)&v18[4 * v22 + 1];
  if (HIBYTE(dword_1ECF4C799))
    v26 = BYTE1(dword_1ECF4C702) == 0;
  else
    v26 = 1;
  if (v26)
  {
    v133[0] = (WTF::StringImpl *)&v18[4 * v22 + 1];
    v133[1] = (WTF::StringImpl *)&v134;
    v133[2] = (WTF::StringImpl *)&v136;
    v133[3] = (WTF::StringImpl *)&v135;
    v27 = *(unsigned __int8 *)(*(_QWORD *)(a1[8] + 8) + 6);
    v28 = *(_QWORD *)(v6 + 8 * v27 + 56);
    if (v28)
      return (_QWORD *)ipint_extern_loop_osr::$_0::operator()((_QWORD **)v133, v28, (uint64_t)v12, v13, v14, v15, v16, v17);
    v29 = v6 + 188;
    if (__ldaxr((unsigned __int8 *)(v6 + 188)))
    {
      __clrex();
    }
    else
    {
      v53 = 1;
      if (!__stxr(1u, (unsigned __int8 *)v29))
        goto LABEL_60;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v6 + 188);
LABEL_60:
    if (v27 >= 2)
    {
LABEL_151:
      __break(1u);
      goto LABEL_152;
    }
    if (*(_BYTE *)(v6 + 191 + v27) == 1)
    {
      if ((_BYTE)word_1ECF4C720)
        v55 = &xmmword_1ECF4C6D8;
      else
        v55 = (__int128 *)((char *)&xmmword_1ECF4C6D8 + 8);
      v56 = *(_DWORD *)v55;
      *(_QWORD *)(v6 + 176) = 0;
      *(_DWORD *)(v6 + 184) = v56;
      if (v56 == 0x7FFFFFFF)
      {
        *(_DWORD *)(v6 + 184) = 0x7FFFFFFF;
        *(_DWORD *)(v6 + 176) = 0x80000000;
      }
      else if (v56 <= 0)
      {
        *(_DWORD *)(v6 + 180) = 0;
      }
      else
      {
        v57 = (double)v56;
        if ((double)v56 > (double)SHIDWORD(xmmword_1ECF4C514))
          v57 = (double)SHIDWORD(xmmword_1ECF4C514);
        *(_DWORD *)(v6 + 176) = (int)-v57;
        v58 = v57;
        *(float *)(v6 + 180) = v58;
      }
    }
    else if (!*(_BYTE *)(v6 + 191 + v27))
    {
      *(_BYTE *)(v6 + 191 + v27) = 1;
      v54 = __ldxr((unsigned __int8 *)v29);
      if (v54 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v29))
          goto LABEL_95;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v6 + 188), 0, (uint64_t)v12, v13, v14, v15, v16, v17);
LABEL_95:
      v29 = WTF::fastMalloc((WTF *)0x70);
      v18 = (unsigned int *)v136[1];
      v67 = (unsigned int *)v136[7];
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 + 1, v67));
      v137 = (uint64_t *)v67;
      v69 = (unsigned int *)v134;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 + 1, v69));
      v138 = (uint64_t)v69;
      LODWORD(v22) = *(_DWORD *)(v134 + 32);
      v53 = *(_QWORD *)(v134 + 24);
      if (!v53)
      {
        v71 = 256;
LABEL_101:
        v72 = *v25;
        v73 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)(v73 + 8) = 1;
        *(_QWORD *)v73 = off_1E35B5C50;
        v132 = (unsigned int *)v73;
        JSC::Wasm::OSREntryPlan::OSREntryPlan(v29, (uint64_t)v18, (uint64_t *)&v137, &v138, v22, v71, v72, v27, (uint64_t *)&v132);
        v80 = v132;
        v132 = 0;
        if (v80)
        {
          v81 = v80 + 2;
          do
          {
            v82 = __ldaxr(v81);
            v83 = v82 - 1;
          }
          while (__stlxr(v83, v81));
          if (!v83)
          {
            atomic_store(1u, v80 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
          }
        }
        v84 = (JSC::Wasm::Module *)v138;
        v138 = 0;
        if (v84)
        {
          do
          {
            v85 = __ldaxr((unsigned int *)v84);
            v86 = v85 - 1;
          }
          while (__stlxr(v86, (unsigned int *)v84));
          if (!v86)
          {
            atomic_store(1u, (unsigned int *)v84);
            JSC::NativeCalleeRegistry::unregisterCallee((uint64_t)&JSC::calleeRegistry, (uint64_t)v84, v74, v75, v76, v77, v78, v79);
            if (*((_BYTE *)v84 + 4) == 1)
              JSC::Wasm::Callee::destroy(v84, v115, v116, v117, v118, v119, v120, v121);
          }
        }
        v87 = (unsigned int *)v137;
        v137 = 0;
        if (v87)
        {
          do
          {
            v88 = __ldaxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (!v89)
          {
            atomic_store(1u, v87);
            v138 = (uint64_t)v87;
            WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::Module **)&v138);
          }
        }
        v90 = atomic_load(&JSC::Wasm::ensureWorklist(void)::initializeWorklist);
        if (v90 != -1)
        {
          v138 = (uint64_t)&v132;
          v137 = &v138;
          std::__call_once(&JSC::Wasm::ensureWorklist(void)::initializeWorklist, &v137, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::ensureWorklist(void)::$_0 &&>>);
        }
        v91 = JSC::Wasm::globalWorklist;
        v92 = (unsigned int *)(v29 + 8);
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 + 1, v92));
        v131 = (unsigned int *)v29;
        JSC::Wasm::Worklist::enqueue(v91, &v131);
        v94 = v131;
        v131 = 0;
        if (v94)
        {
          v101 = v94 + 2;
          do
          {
            v102 = __ldaxr(v101);
            v103 = v102 - 1;
          }
          while (__stlxr(v103, v101));
          if (!v103)
          {
            atomic_store(1u, v94 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v94 + 8))(v94);
          }
        }
        if (byte_1ECF4C464)
        {
          if ((_BYTE)word_1ECF4C720)
            v95 = &xmmword_1ECF4C6D8;
          else
            v95 = (__int128 *)((char *)&xmmword_1ECF4C6D8 + 8);
          v96 = *(_DWORD *)v95;
          *(_QWORD *)(v6 + 176) = 0;
          *(_DWORD *)(v6 + 184) = v96;
          if (v96 == 0x7FFFFFFF)
          {
            *(_DWORD *)(v6 + 184) = 0x7FFFFFFF;
            *(_DWORD *)(v6 + 176) = 0x80000000;
          }
          else if (v96 <= 0)
          {
            *(_DWORD *)(v6 + 180) = 0;
          }
          else
          {
            v97 = (double)v96;
            if ((double)v96 > (double)SHIDWORD(xmmword_1ECF4C514))
              v97 = (double)SHIDWORD(xmmword_1ECF4C514);
            *(_DWORD *)(v6 + 176) = (int)-v97;
            v98 = v97;
            *(float *)(v6 + 180) = v98;
          }
          goto LABEL_127;
        }
        v113 = (unsigned __int8 *)(v29 + 13);
        if (__ldaxr((unsigned __int8 *)(v29 + 13)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v113))
        {
          goto LABEL_159;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v29 + 13);
LABEL_159:
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29) & 1) == 0)
        {
          v138 = 0x7FF0000000000000;
          v139 = 0;
          WTF::Condition::waitUntilUnchecked<WTF::Lock>(v29 + 14, (unsigned __int8 *)(v29 + 13), (WTF::TimeWithDynamicClockType *)&v138);
        }
        v122 = __ldxr(v113);
        if (v122 == 1)
        {
          if (!__stlxr(0, v113))
            goto LABEL_127;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v29 + 13), 0, (uint64_t)v12, v13, v14, v15, v16, v17);
        do
        {
LABEL_127:
          v99 = __ldaxr(v92);
          v100 = v99 - 1;
        }
        while (__stlxr(v100, v92));
        if (!v100)
        {
          atomic_store(1u, (unsigned int *)(v29 + 8));
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        }
LABEL_130:
        v28 = *(_QWORD *)(v134 + 8 * v27 + 56);
        if (!v28)
          return 0;
        return (_QWORD *)ipint_extern_loop_osr::$_0::operator()((_QWORD **)v133, v28, (uint64_t)v12, v13, v14, v15, v16, v17);
      }
LABEL_152:
      v71 = (*(_DWORD *)v53 != 0) | 0x100;
      goto LABEL_101;
    }
    v59 = __ldxr((unsigned __int8 *)v29);
    if (v59 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v29))
        goto LABEL_130;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v6 + 188), 0, (uint64_t)v12, v13, v14, v15, v16, v17);
    goto LABEL_130;
  }
  if (!JSC::IPInt::jitCompileAndSetHeuristics((JSC::IPInt *)v6, (JSC::Wasm::IPIntCallee *)a1, v12))
    return 0;
  v38 = (unsigned __int8 *)(*(_QWORD *)(a1[7] + 8 * *(unsigned __int8 *)(*(_QWORD *)(a1[8] + 8) + 6) + 16) + 128);
  if (__ldaxr(v38))
  {
    __clrex();
LABEL_41:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v38);
    goto LABEL_42;
  }
  if (__stxr(1u, v38))
    goto LABEL_41;
LABEL_42:
  v41 = *(_DWORD **)(*(_QWORD *)(v136[7] + 8 * *(unsigned __int8 *)(*(_QWORD *)(v136[8] + 8) + 6) + 16) + 24);
  if (v41 && *v41)
  {
    v42 = *(unsigned int *)(v134 + 32);
    if (*v41 <= v42)
    {
      __break(0xC471u);
      JUMPOUT(0x198F95040);
    }
    v27 = *(_QWORD *)&v41[2 * v42 + 2];
  }
  else
  {
    v27 = 0;
  }
  v43 = __ldxr(v38);
  if (v43 != 1)
  {
    __clrex();
    goto LABEL_50;
  }
  if (__stlxr(0, v38))
LABEL_50:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v38, 0, v32, v33, v34, v35, v36, v37);
  if (!v27)
  {
    __break(0xC471u);
    JUMPOUT(0x198F95000);
  }
  v44 = *(unsigned int *)(v27 + 160);
  v29 = v134;
  v45 = &v18[4 * v22];
  v46 = v45[3];
  v18 = v45 + 3;
  v6 = (unint64_t)(v18 - 1);
  if (v44 < *(v18 - 1) + *(_DWORD *)(v134 + 164) + v46)
  {
    __break(0xC471u);
    JUMPOUT(0x198F95020);
  }
  result = (_QWORD *)JSC::Wasm::Context::scratchBufferForSize((JSC::Wasm::Context *)(v136[1] + 41464), v44, v32, v33, v34, v35, v36, v37);
  if (result)
  {
    *result = *v25;
    v47 = *(_DWORD *)(v29 + 164);
    if (v47)
    {
      v48 = v135;
      v49 = result + 1;
      v50 = *(unsigned int *)(v29 + 164);
      do
      {
        v51 = *v48++;
        *v49++ = v51;
        --v50;
      }
      while (v50);
      v52 = v47 + 1;
    }
    else
    {
      v52 = 1;
    }
    v60 = *v18;
    if ((_DWORD)v60)
    {
      if (*(_DWORD *)(v29 + 160))
      {
        v61 = v135;
        v62 = *(_DWORD *)(v29 + 156);
        do
        {
          v63 = v52 + 1;
          result[v52++] = v61[v62++];
          --v60;
        }
        while (v60);
      }
      else
      {
        do
        {
          v63 = v52 + 1;
          result[v52++] = 0;
          LODWORD(v60) = v60 - 1;
        }
        while ((_DWORD)v60);
      }
    }
    else
    {
      v63 = v52;
    }
    v64 = *(_DWORD *)v6;
    if (*(_DWORD *)v6)
    {
      v65 = v135 - 2;
      do
      {
        v66 = *v65;
        v65 -= 2;
        result[v63++] = v66;
        --v64;
      }
      while (v64);
    }
    v53 = *(unsigned __int8 *)(v27 + 136);
    if (!*(_BYTE *)(v27 + 136))
    {
      __break(0xC471u);
      goto LABEL_151;
    }
  }
  return result;
}

uint64_t ipint_extern_loop_osr::$_0::operator()(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD **v25;
  _QWORD *v26;
  uint64_t result;
  uint64_t *v28;
  uint64_t v29;

  if (*(_DWORD *)(a2 + 108) != *(_DWORD *)*a1)
    return 0;
  v10 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v10 == *((_DWORD *)*a1 + 1) + *((_DWORD *)*a1 + 2) + *(_DWORD *)(*a1[1] + 164))
  {
    v11 = JSC::Wasm::Context::scratchBufferForSize((JSC::Wasm::Context *)(*(_QWORD *)(*a1[2] + 8) + 41464), v10, a3, a4, a5, a6, a7, a8);
    v12 = v11;
    if (v11)
    {
      v13 = (_DWORD *)*a1[1];
      v14 = v13[41];
      if (v14)
      {
        v15 = (uint64_t *)*a1[3];
        v16 = v13[41];
        v17 = (_QWORD *)v11;
        do
        {
          v18 = *v15++;
          *v17++ = v18;
          --v16;
        }
        while (v16);
      }
      v19 = *a1;
      v20 = *((unsigned int *)*a1 + 2);
      if ((_DWORD)v20)
      {
        if (v13[40])
        {
          v21 = *a1[3];
          v22 = v13[39];
          do
          {
            v23 = v14 + 1;
            *(_QWORD *)(v11 + 8 * v14++) = *(_QWORD *)(v21 + 8 * v22++);
            --v20;
          }
          while (v20);
        }
        else
        {
          v23 = v20 + v14;
          do
          {
            *(_QWORD *)(v11 + 8 * v14++) = 0;
            LODWORD(v20) = v20 - 1;
          }
          while ((_DWORD)v20);
        }
      }
      else
      {
        v23 = v14;
      }
      if (v19[1])
      {
        v24 = 0;
        v25 = (_QWORD **)a1[3];
        v26 = *v25;
        do
        {
          *v25 = v26 - 2;
          v25 = (_QWORD **)a1[3];
          v26 = *v25;
          *(_QWORD *)(v11 + 8 * (v23 + v24++)) = **v25;
        }
        while (v24 < *((_DWORD *)*a1 + 1));
      }
      v28 = &v29;
      v29 = 0;
      JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(a2, &v28);
    }
    return v12;
  }
  result = 227;
  __break(0xC471u);
  return result;
}

uint64_t ipint_extern_epilogue_osr(JSC::Wasm::IPIntCallee *a1, uint64_t a2, JSC::Wasm::Instance *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const WTF::StringImpl *v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;

  v4 = (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080;
  if (HIBYTE(dword_1ECF4C799))
  {
    if (!BYTE1(dword_1ECF4C702))
      goto LABEL_24;
    v5 = atomic_load(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag);
    if (v5 != -1)
    {
      v45 = (WTF::StringImpl *)&v43;
      v44 = &v45;
      std::__call_once(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag, &v44, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::$_0 &&>>);
    }
    if (byte_1EE343088)
    {
      if (!JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist
        || !*(_DWORD *)(JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist - 12))
      {
        goto LABEL_24;
      }
      WTF::String::number(*(unsigned int *)(v4 + 32), (uint64_t *)&v45);
      v14 = WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist, &v45, v7);
      v15 = v45;
      v45 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::~StringImpl(v15, v8, (uint64_t)a3, v9, v10, v11, v12, v13);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
          if (!v14)
            goto LABEL_24;
          goto LABEL_6;
        }
        *(_DWORD *)v15 -= 2;
      }
      if (!v14)
        goto LABEL_24;
    }
  }
LABEL_6:
  if (!byte_1ECF4C79D)
  {
    if (!BYTE2(dword_1ECF4C702))
      goto LABEL_24;
    v6 = atomic_load(&JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::initializeAllowlistFlag);
    if (v6 != -1)
    {
      v45 = (WTF::StringImpl *)&v43;
      v44 = &v45;
      std::__call_once(&JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::initializeAllowlistFlag, &v44, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::$_0 &&>>);
    }
    if (byte_1EE343120)
    {
      if (!JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::omgAllowlist
        || !*(_DWORD *)(JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::omgAllowlist - 12))
      {
        goto LABEL_24;
      }
      WTF::String::number(*(unsigned int *)(v4 + 32), (uint64_t *)&v45);
      v24 = WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains(&JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(void)::omgAllowlist, &v45, v17);
      v25 = v45;
      v45 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::~StringImpl(v25, v18, (uint64_t)a3, v19, v20, v21, v22, v23);
          WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
          if (!v24)
            goto LABEL_24;
          goto LABEL_11;
        }
        *(_DWORD *)v25 -= 2;
      }
      if (!v24)
        goto LABEL_24;
    }
  }
LABEL_11:
  if (dword_1ECF4C708 < 2)
    goto LABEL_12;
  v26 = *(_DWORD *)(v4 + 32);
  if (qword_1ECF4C718 > v26 || HIDWORD(qword_1ECF4C718) < v26)
  {
    if (dword_1ECF4C708 != 2)
      goto LABEL_12;
LABEL_24:
    *(_DWORD *)(v4 + 184) = 0x7FFFFFFF;
    *(_QWORD *)(v4 + 176) = 0x80000000;
    return 0;
  }
  if (dword_1ECF4C708 != 2)
    goto LABEL_24;
LABEL_12:
  if (BYTE2(dword_1ECF4C799))
  {
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<JSC::Wasm::IPIntCallee,char [45],JSC::Wasm::IPIntTierUpCounter,char [2]>((JSC::Wasm::Callee *)v4, ": Entered epilogue_osr with tierUpCounter = ", v4 + 176);
    JSC::IPInt::jitCompileAndSetHeuristics((JSC::IPInt *)v4, a1, a3);
  }
  return 0;
}

uint64_t ipint_extern_retrieve_and_clear_exception(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x198F95748);
  }
  v6 = (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080;
  v7 = *(_DWORD *)(v6 + 160);
  if (v7)
  {
    v8 = *(_DWORD *)(v4 + 90528);
    if (v8 > v7)
      goto LABEL_19;
    *(_QWORD *)(a4 + 8 * (v8 + *(_DWORD *)(v6 + 156) - 1)) = *(_QWORD *)(v5 + 8);
  }
  if (a3)
  {
    v9 = *(_QWORD *)(v5 + 8);
    if ((v9 & 0xFFFE000000000002) != 0
      || &JSC::JSWebAssemblyException::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
    {
      __break(0xC471u);
      JUMPOUT(0x198F95728);
    }
    v10 = *(unsigned int **)(v9 + 24);
    if (v10)
    {
      v11 = *v10;
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = (_QWORD *)(a3 + 16 * v11 - 8);
        while (1)
        {
          v14 = *(unsigned int **)(v9 + 24);
          if (v12 >= *v14)
            break;
          v15 = *(_QWORD *)&v14[2 * v12 + 2];
          *(v13 - 1) = 0;
          *v13 = v15;
          ++v12;
          v13 -= 2;
          if (v11 == v12)
            goto LABEL_13;
        }
LABEL_19:
        __break(0xC471u);
        JUMPOUT(0x198F95708);
      }
    }
  }
LABEL_13:
  *(_QWORD *)(v4 + 16) = 0;
  v16 = (unsigned int *)(v4 + 80);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 & 0xFFFFFFEF, v16));
  return 0;
}

uint64_t ipint_extern_throw_exception(_QWORD *a1, JSC::VM *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  unsigned int *v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  WTF *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  const WTF::String *v28;
  unint64_t TypeError;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  JSC::Exception *v36;
  WTF::AtomStringImpl *v37;
  JSC::CallFrame *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  JSC::Exception *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(WTF::StringImpl **);
  WTF::StringImpl **v73;
  WTF *v74;
  WTF::StringImpl *v75[3];

  v8 = (JSC::VM *)a1[1];
  *((_QWORD *)v8 + 5) = a2;
  if (*((_QWORD *)v8 + 2))
  {
    __break(0xC471u);
    JUMPOUT(0x198F959C4);
  }
  v9 = (unsigned int *)a1[18];
  if (*v9 <= a4)
  {
    __break(0xC471u);
    JUMPOUT(0x198F959E4);
  }
  v11 = a1[4];
  v12 = *(_QWORD *)&v9[2 * a4 + 2];
  v13 = *(_QWORD *)(v12 + 8);
  v14 = v13 + 8;
  v15 = *(_DWORD *)(v13 + 32);
  if (v15)
    v14 = 0;
  v16 = *(unsigned int *)(v14 + 8);
  if ((_DWORD)v16)
  {
    v18 = (WTF *)WTF::fastMalloc((WTF *)(8 * v16 + 8));
    *(_DWORD *)v18 = v16;
    v19 = (_QWORD *)((char *)v18 + 8);
    v74 = v18;
    v20 = 16 * v16;
    do
    {
      *v19++ = *(_QWORD *)(a3 - 8 + v20);
      v20 -= 16;
    }
    while (v20);
    v13 = *(_QWORD *)(v12 + 8);
    v15 = *(_DWORD *)(v13 + 32);
  }
  else
  {
    v74 = 0;
  }
  v21 = (uint64_t *)(v13 + 8);
  if (v15)
    v22 = 0;
  else
    v22 = v21;
  v23 = *((unsigned int *)v22 + 2);
  if (!(_DWORD)v23)
    goto LABEL_24;
  v24 = 0;
  v25 = *((_DWORD *)v22 + 3);
  v26 = *v22;
  do
  {
    if (*(unsigned __int8 *)(v26 + 16 * v25) == 251)
      ++v24;
    ++v25;
    --v23;
  }
  while (v23);
  if (v24)
  {
    v27 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v27 = 0x4900000002;
    *(_QWORD *)(v27 + 8) = "an exported wasm function cannot contain a v128 parameter or return value";
    *(_DWORD *)(v27 + 16) = 4;
    v75[0] = (WTF::StringImpl *)v27;
    TypeError = JSC::createTypeError(v11, v75, v28);
    v36 = (JSC::Exception *)TypeError;
    if ((TypeError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)TypeError & 0xFFFFFFFE) + 0x4C)))
    {
      v36 = (JSC::Exception *)JSC::Exception::create((uint64_t)v8, (JSC::VM *)TypeError, 0, v30, v31, v32, v33, v34);
    }
    JSC::VM::throwException(v8, (JSC::JSGlobalObject *)v11, v36, v35, v30, v31, v32, v33, v34);
    v44 = v75[0];
    v75[0] = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v37, (uint64_t)v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
  }
  else
  {
LABEL_24:
    v45 = *(_QWORD *)(v11 + 1312);
    if ((v45 & 1) != 0)
    {
      v72 = *(uint64_t (**)(WTF::StringImpl **))(v45 & 0xFFFFFFFFFFFFFFFCLL);
      v73 = (WTF::StringImpl **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v11 & 8) != 0)
        v73 = (WTF::StringImpl **)(v11 - 16);
      v75[0] = *v73;
      v75[1] = (WTF::StringImpl *)v11;
      v75[2] = (WTF::StringImpl *)(v11 + 1312);
      v45 = v72(v75);
    }
    v46 = JSC::JSWebAssemblyException::create(v8, (JSC::VM *)v45, (unsigned int *)v12, (uint64_t *)&v74, a5, a6, a7, a8);
    v53 = (JSC::Exception *)v46;
    if ((v46 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C)))
    {
      v53 = (JSC::Exception *)JSC::Exception::create((uint64_t)v8, (JSC::VM *)v46, 0, v47, v48, v49, v50, v51);
    }
    JSC::VM::throwException(v8, (JSC::JSGlobalObject *)v11, v53, v52, v47, v48, v49, v50, v51);
  }
  JSC::genericUnwind(v8, a2, v38, v39, v40, v41, v42, v43);
  v61 = *((_QWORD *)v8 + 11311);
  v62 = v74;
  v74 = 0;
  if (v62)
    WTF::fastFree((unint64_t)v62, v54, v55, v56, v57, v58, v59, v60);
  return v61;
}

uint64_t ipint_extern_rethrow_exception(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t *v12;
  JSC::VM *v13;
  JSC::CallFrame *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) = a2;
  v9 = (*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080;
  if (*(_DWORD *)(v9 + 160) < a4
    || (v10 = *(_QWORD *)(a3 + 8 * (a4 + *(_DWORD *)(v9 + 156) - 1))) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198F95B34);
  }
  v12 = *(uint64_t **)(a1 + 32);
  v13 = (JSC::VM *)v12[7];
  if ((v10 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    v10 = JSC::Exception::create(v12[7], (JSC::VM *)v10, 0, a4, a5, a6, a7, a8);
  }
  JSC::VM::throwException(v13, (JSC::JSGlobalObject *)v12, (JSC::Exception *)v10, a9, a4, a5, a6, a7, a8);
  JSC::genericUnwind(v13, a2, v14, v15, v16, v17, v18, v19);
  return *((_QWORD *)v13 + 11311);
}

uint64_t ipint_extern_table_get(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;

  if ((a3 & 0x80000000) != 0)
    return 1;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204) <= a2)
    goto LABEL_14;
  v3 = *(_QWORD *)(120 * *(unsigned int *)(a1 + 112) + 8 * a2 + a1 + 152);
  result = 1;
  if (*(_DWORD *)(v3 + 4) <= a3)
    return result;
  if (!*(_QWORD *)(v3 + 40))
  {
    __break(0xC471u);
    JUMPOUT(0x198F95C28);
  }
  if (*(_BYTE *)(v3 + 13) != 1)
  {
    if (!*(_BYTE *)(v3 + 13))
    {
      v5 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 8 * a3);
      goto LABEL_9;
    }
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x198F95C08);
  }
  v5 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 48 * a3 + 40);
LABEL_9:
  result = *v5;
  if (!*v5)
    return 1;
  return result;
}

BOOL ipint_extern_table_set(JSC::Wasm *a1, JSC::Wasm::Instance *a2, unsigned int a3, uint64_t a4)
{
  return !JSC::Wasm::tableSet(a1, a2, a3, a4);
}

uint64_t ipint_extern_table_init(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;

  v8 = 1;
  if (!__CFADD__(HIDWORD(a4), (_DWORD)a4))
  {
    v8 = 1;
    if (!__CFADD__(a3, (_DWORD)a4))
    {
      v9 = a2[1];
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      if (*(_DWORD *)(v10 + 204) <= v9)
        goto LABEL_20;
      v8 = 1;
      if ((a4 + a3) > *(_DWORD *)(*(_QWORD *)(8 * v9 + 120 * *(unsigned int *)(a1 + 112) + a1 + 152)
                                               + 4))
        return v8;
      v11 = *a2;
      if (*(_DWORD *)(v10 + 188) <= v11)
      {
LABEL_20:
        __break(0xC471u);
        JUMPOUT(0x198F95D8CLL);
      }
      v12 = a1 + 128;
      v13 = *(_QWORD *)(a1 + 128);
      if (v13 >= 0)
        v12 = 2 * v13 + 8;
      if (((*(_QWORD *)(v12 + ((v11 >> 3) & 0x1FFFFFF8)) >> v11) & 1) != 0)
      {
        v14 = *(_QWORD *)(v10 + 176);
        if (v14)
        {
          v15 = *(_DWORD *)(v14 + 80 * v11 + 60);
          v16 = HIDWORD(a4) + a4;
          if (v15)
            v17 = v16 > v15;
          else
            v17 = 1;
          if (v17)
          {
            v8 = 1;
            if (v16 > v15)
              return v8;
          }
          else
          {
            JSC::Wasm::Instance::tableInit((JSC::Wasm::Instance *)a1, a3, HIDWORD(a4), a4, v11, v9, a7, a8);
          }
          return 0;
        }
      }
      v8 = 1;
      if (!((_DWORD)a4 + HIDWORD(a4)))
        return 0;
    }
  }
  return v8;
}

uint64_t ipint_extern_table_fill(JSC::Wasm *this, JSC::Wasm::Instance *a2, uint64_t a3, unint64_t a4)
{
  int v4;
  unint64_t v6;
  uint64_t result;

  v4 = a4;
  v6 = HIDWORD(a4);
  result = 1;
  if (!__CFADD__(HIDWORD(a4), (_DWORD)a4))
  {
    if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8) + 204) <= a2)
    {
      result = 139;
      __break(0xC471u);
    }
    else
    {
      result = 1;
      if ((HIDWORD(a4) + a4) <= *(_DWORD *)(*((_QWORD *)this
                                                           + 15 * *((unsigned int *)this + 28)
                                                           + a2
                                                           + 19)
                                                         + 4))
      {
        if ((_DWORD)a4)
        {
          do
          {
            JSC::Wasm::tableSet(this, a2, v6, a3);
            LODWORD(v6) = v6 + 1;
            --v4;
          }
          while (v4);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t ipint_extern_table_grow(uint64_t a1, JSC::Wasm::Instance *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204) <= a2)
    goto LABEL_10;
  v11 = 8 * a2 + 152;
  v12 = *(_QWORD *)(a1 + v11 + 120 * *(unsigned int *)(a1 + 112));
  v13 = *(unsigned int *)(v12 + 4);
  if ((JSC::Wasm::Table::grow(v12, a4, 2, a4, a5, a6, a7, a8) & 0xFF00000000) == 0)
    return -1;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204) <= a2)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198F95F68);
  }
  v14 = v13;
  while (v14 < *(_DWORD *)(*(_QWORD *)(a1 + v11 + 120 * *(unsigned int *)(a1 + 112)) + 4))
  {
    JSC::Wasm::tableSet((JSC::Wasm *)a1, a2, v14++, a3);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204) <= a2)
      goto LABEL_10;
  }
  return v13;
}

unint64_t ipint_extern_current_memory(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (*(_BYTE *)(v1 + 5))
    v2 = atomic_load((unint64_t *)(v1 + 16));
  else
    v2 = *(_QWORD *)(v1 + 16);
  return v2 >> 16;
}

uint64_t ipint_extern_memory_grow(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v10;
  int v11;

  if ((a2 & 0x80000000) != 0)
    return -1;
  JSC::Wasm::Memory::grow(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 8), a2, a4, a5, a6, a7, a8, (uint64_t)&v10);
  if (!v11)
    return v10;
  if (v11 == 1)
  {
    if (v10 < 5u)
      return -1;
  }
  else
  {
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  result = 687;
  __break(0xC471u);
  return result;
}

BOOL ipint_extern_memory_init(JSC::Wasm::Instance *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  return !JSC::Wasm::Instance::memoryInit(a1, a3, HIDWORD(a4), a4, a2);
}

uint64_t ipint_extern_data_drop(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 136);
  v2 = a1 + 136;
  v4 = 2 * v3 + 8;
  if (v3 >= 0)
    v5 = v4;
  else
    v5 = v2;
  *(_QWORD *)(v5 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) &= ~(1 << a2);
  return 0;
}

uint64_t ipint_extern_memory_copy(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (__CFADD__(a2, a4))
    return 1;
  if (__CFADD__(a3, a4))
    return 1;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_BYTE *)(v9 + 5) ? atomic_load((unint64_t *)(v9 + 16)) : *(_QWORD *)(v9 + 16);
  if (v10 < a4 + a2)
    return 1;
  v11 = *(_QWORD *)(v8 + 8);
  v12 = *(_BYTE *)(v11 + 5) ? atomic_load((unint64_t *)(v11 + 16)) : *(_QWORD *)(v11 + 16);
  if (v12 < a4 + a3)
    return 1;
  if (a4)
  {
    v13 = JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(v8 + 8));
    memmove((void *)(v13 + a2), (const void *)(v13 + a3), a4);
  }
  return 0;
}

uint64_t ipint_extern_memory_fill(uint64_t a1, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (__CFADD__(a2, a4))
    return 1;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(v8 + 8);
  if (*(_BYTE *)(v9 + 5))
    v10 = atomic_load((unint64_t *)(v9 + 16));
  else
    v10 = *(_QWORD *)(v9 + 16);
  if (v10 < a4 + a2)
    return 1;
  v11 = JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(v8 + 8));
  memset((void *)(v11 + a2), a3, a4);
  return 0;
}

uint64_t ipint_extern_elem_drop(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 128);
  v2 = a1 + 128;
  v4 = 2 * v3 + 8;
  if (v3 >= 0)
    v5 = v4;
  else
    v5 = v2;
  *(_QWORD *)(v5 + (((unint64_t)a2 >> 3) & 0x1FFFFFF8)) &= ~(1 << a2);
  return 0;
}

uint64_t ipint_extern_table_copy(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204);
  if (v5 <= v4 || (v6 = a2[1], v5 <= v6))
  {
    __break(0xC471u);
    JUMPOUT(0x198F9634CLL);
  }
  if (((a4 | a3 | HIDWORD(a4)) & 0x80000000) != 0 || __CFADD__(a3, (_DWORD)a4))
    return 1;
  v7 = 120 * *(unsigned int *)(a1 + 112);
  v8 = 1;
  if (a3 + a4 > *(_DWORD *)(*(_QWORD *)(v7 + 8 * v4 + a1 + 152) + 4))
    return v8;
  if (__CFADD__(HIDWORD(a4), (_DWORD)a4))
    return 1;
  v8 = 1;
  if ((HIDWORD(a4) + a4) <= *(_DWORD *)(*(_QWORD *)(v7 + 8 * v6 + a1 + 152) + 4))
  {
    JSC::Wasm::Instance::tableCopy(a1, a3, HIDWORD(a4), a4, v4, v6);
    return 0;
  }
  return v8;
}

uint64_t ipint_extern_table_size(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204) > a2)
    return *(int *)(*(_QWORD *)(120 * *(unsigned int *)(a1 + 112) + 8 * a2 + a1 + 152) + 4);
  result = 139;
  __break(0xC471u);
  return result;
}

uint64_t ipint_extern_call(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int *v7;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_DWORD *)(*(_QWORD *)(v2 + 8) + 36) <= a2)
  {
    v4 = *(_QWORD *)(v2 + 8 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 6) + 16);
    v5 = *(_DWORD **)(v4 + 72);
    if (v5)
    {
      LODWORD(v5) = *v5;
      if (v5 > a2)
      {
        __break(0xC471u);
        JUMPOUT(0x198F96488);
      }
    }
    v6 = a2 - (_DWORD)v5;
    v7 = *(unsigned int **)(v4 + 56);
    if (*v7 > v6)
    {
      v3 = (uint64_t)&v7[2 * v6 + 2];
      return *(_QWORD *)v3;
    }
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x198F96468);
  }
  if (*(_DWORD *)(a1 + 112) <= a2)
    goto LABEL_11;
  v3 = a1 + 120 * a2 + 168;
  return *(_QWORD *)v3;
}

__int128 *ipint_extern_call_indirect(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v10;

  v4 = *a4;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 204) <= v4)
  {
LABEL_13:
    __break(0xC471u);
    JUMPOUT(0x198F965BCLL);
  }
  v5 = *(_QWORD *)(8 * v4 + 120 * *(unsigned int *)(a1 + 112) + a1 + 152);
  if (*(_BYTE *)(v5 + 13) != 1)
    v5 = 0;
  if (*(_DWORD *)(v5 + 4) <= a3)
  {
    v10 = 2;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v10;
    return &xmmword_1ECF4C7EB;
  }
  v6 = *(_QWORD *)(v5 + 48) + 48 * a3;
  if (!*(_QWORD *)v6)
  {
    v10 = 3;
    goto LABEL_11;
  }
  v7 = a4[1];
  v8 = *(_DWORD **)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 80);
  if (*v8 <= v7)
    goto LABEL_13;
  if (*(_QWORD *)v6 == *(_QWORD *)&v8[2 * v7 + 2])
    return **(__int128 ***)(v6 + 8);
  *(_DWORD *)(a2 + 32) = 6;
  return &xmmword_1ECF4C7EB;
}

uint64_t ipint_extern_set_global_ref(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  JSC::Wasm::Instance::setGlobal(a1, a2, a3);
  return 0;
}

uint64_t ipint_extern_set_global_64(JSC::Wasm::Instance *a1, unsigned int a2, uint64_t a3)
{
  JSC::Wasm::Instance::setGlobal(a1, a2, a3);
  return 0;
}

uint64_t ipint_extern_get_global_64(JSC::Wasm::Instance *a1, unsigned int a2)
{
  return JSC::Wasm::Instance::loadI64Global(a1, a2);
}

uint64_t ipint_extern_memory_atomic_wait32(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  double v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD v26[11];

  if ((a2 & 3) != 0)
    return -1;
  v26[1] = v7;
  v26[2] = v6;
  v26[9] = v4;
  v26[10] = v5;
  v10 = *(_QWORD *)(a1 + 64);
  if (!v10)
    return -1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(v10 + 8);
  v16 = *(_BYTE *)(v15 + 5) ? atomic_load((unint64_t *)(v15 + 16)) : *(_QWORD *)(v15 + 16);
  if (v16 <= a2
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 5) != 1
    || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 93024) + 32))(*(_QWORD *)(v14 + 93024)))
  {
    return -1;
  }
  v21 = (unsigned int *)(JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(*(_QWORD *)(a1 + 64) + 8)) + a2);
  if (a4 < 0)
    v22 = INFINITY;
  else
    v22 = (double)a4 / 1000.0 / 1000.0 / 1000.0;
  v23 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
  if (v23 != -1)
  {
    v26[0] = &v24;
    v25 = v26;
    std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
  }
  return (int)JSC::WaiterListManager::waitSyncImpl<int>((char *)&JSC::WaiterListManager::singleton(void)::manager, v14, v21, a3, v17, v18, v19, v20, v22);
}

uint64_t ipint_extern_memory_atomic_wait64(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  double v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD v26[11];

  if ((a2 & 7) != 0)
    return -1;
  v26[1] = v7;
  v26[2] = v6;
  v26[9] = v4;
  v26[10] = v5;
  v10 = *(_QWORD *)(a1 + 64);
  if (!v10)
    return -1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(v10 + 8);
  v16 = *(_BYTE *)(v15 + 5) ? atomic_load((unint64_t *)(v15 + 16)) : *(_QWORD *)(v15 + 16);
  if (v16 <= a2
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 5) != 1
    || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 93024) + 32))(*(_QWORD *)(v14 + 93024)))
  {
    return -1;
  }
  v21 = (unint64_t *)(JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(*(_QWORD *)(a1 + 64) + 8))
                           + a2);
  if (a4 < 0)
    v22 = INFINITY;
  else
    v22 = (double)a4 / 1000.0 / 1000.0 / 1000.0;
  v23 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
  if (v23 != -1)
  {
    v26[0] = &v24;
    v25 = v26;
    std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
  }
  return (int)JSC::WaiterListManager::waitSyncImpl<long long>((char *)&JSC::WaiterListManager::singleton(void)::manager, v14, v21, a3, v17, v18, v19, v20, v22);
}

uint64_t ipint_extern_memory_atomic_notify(uint64_t a1, unsigned int a2, unsigned int a3, int a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  JSC::BufferMemoryHandle *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  char v18;
  char **v19;
  char *v20;

  v4 = a3 + (unint64_t)a2;
  if ((v4 & 3) != 0)
    return -1;
  v6 = *(_QWORD *)(a1 + 64);
  if (!v6)
    return -1;
  LODWORD(v7) = a4;
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(_BYTE *)(v8 + 5) ? atomic_load((unint64_t *)(v8 + 16)) : *(_QWORD *)(v8 + 16);
  if (v4 >= v9)
    return -1;
  v10 = *(JSC::BufferMemoryHandle **)(*(_QWORD *)(a1 + 64) + 8);
  if (*((_BYTE *)v10 + 5) != 1)
    return 0;
  v16 = (void *)(JSC::BufferMemoryHandle::memory(v10) + v4);
  if ((int)v7 < 0)
    v7 = 0xFFFFFFFFLL;
  else
    v7 = v7;
  v17 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
  if (v17 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
  }
  return (int)JSC::WaiterListManager::notifyWaiter((JSC::WaiterListManager *)&JSC::WaiterListManager::singleton(void)::manager, v16, v7, v11, v12, v13, v14, v15);
}

uint64_t ipint_extern_ref_func(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 88);
  if (!v2)
    return 2;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  v6 = v3 & (v5 ^ HIWORD(v5));
  v7 = *(_DWORD *)(v2 + 16 * v6);
  if (v7 == a2)
  {
LABEL_6:
    v10 = *(_QWORD *)(v2 + 16 * v6 + 8);
    if (v10)
      return v10;
    else
      return 2;
  }
  else
  {
    v8 = 1;
    result = 2;
    while (v7 != -1)
    {
      v6 = ((_DWORD)v6 + v8) & v3;
      v7 = *(_DWORD *)(v2 + 16 * v6);
      ++v8;
      if (v7 == a2)
        goto LABEL_6;
    }
  }
  return result;
}

uint64_t WTF::dataLog<JSC::Wasm::IPIntCallee,char [45],JSC::Wasm::IPIntTierUpCounter,char [2]>(JSC::Wasm::Callee *a1, const char *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  char v10;
  char **v11;
  char *v12;

  v6 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v6 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v7 = WTF::s_file;
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::Wasm::Callee::dump(a1, v8);
  WTF::PrintStream::printf(v8, "%s", a2);
  WTF::PrintStream::printf(v8, "%lf/%lf, %d", *(float *)(a3 + 4) + (double)*(int *)a3, (double)*(int *)(a3 + 8), *(_DWORD *)a3);
  WTF::PrintStream::printf(v8, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
}

uint64_t WTF::dataLog<JSC::Wasm::IPIntCallee,char [41],JSC::Wasm::IPIntTierUpCounter,char [2]>(JSC::Wasm::Callee *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::Wasm::Callee::dump(a1, v6);
  WTF::PrintStream::printf(v6, "%s", ": Entered loop_osr with tierUpCounter = ");
  WTF::PrintStream::printf(v6, "%lf/%lf, %d", *(float *)(a2 + 4) + (double)*(int *)a2, (double)*(int *)(a2 + 8), *(_DWORD *)a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void wasm_log_crash(uint64_t a1, uint64_t a2)
{
  int v3;

  WTF::dataLogLn<char [57]>();
  v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8) + 52);
  WTF::dataLogLn<char [33],unsigned int>(&v3);
  __break(0xC471u);
}

uint64_t WTF::dataLogLn<char [57]>()
{
  return WTF::dataLog<char [88],char [2]>("Reached LLInt code that should never have been executed.", "\n");
}

WTF::StringImpl *slow_path_wasm_prologue_osr(WTF::StringImpl *a1, uint64_t a2, JSC::Wasm::LLIntCallee *a3)
{
  unsigned int *v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;

  v4 = (unsigned int *)((*((_QWORD *)a1 + 3) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080);
  if (!(_BYTE)word_1ECF4C720)
    goto LABEL_34;
  if (!BYTE1(dword_1ECF4C702))
    goto LABEL_18;
  v5 = atomic_load(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag);
  if (v5 != -1)
  {
    v28 = (WTF::StringImpl *)&v26;
    v27 = &v28;
    std::__call_once(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::$_0 &&>>);
  }
  if (byte_1EE343088)
  {
    if (!JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist
      || !*(_DWORD *)(JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist - 12))
    {
      goto LABEL_18;
    }
    WTF::String::number(v4[8], (uint64_t *)&v28);
    v16 = WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist, &v28, v9);
    a1 = v28;
    v28 = 0;
    if (a1)
    {
      if (*(_DWORD *)a1 == 2)
      {
        WTF::StringImpl::~StringImpl(a1, v10, (uint64_t)a3, v11, v12, v13, v14, v15);
        WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
      }
      else
      {
        *(_DWORD *)a1 -= 2;
      }
    }
    if (!v16)
      goto LABEL_18;
  }
  if (!(_BYTE)word_1ECF4C720)
  {
LABEL_34:
    if (!BYTE2(dword_1ECF4C702)
      || (v8 = JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(a1),
          !JSC::FunctionAllowlist::containsWasmFunction((JSC::FunctionAllowlist *)v8, (WTF::String *)v4[8])))
    {
LABEL_18:
      JSC::ExecutionCounter<(JSC::CountingVariant)0>::deferIndefinitely((uint64_t)(v4 + 26));
      return 0;
    }
  }
  if (dword_1ECF4C708 >= 2)
  {
    v25 = v4[8];
    if (qword_1ECF4C718 > v25 || HIDWORD(qword_1ECF4C718) < v25)
    {
      if (dword_1ECF4C708 != 2)
        goto LABEL_8;
    }
    else if (dword_1ECF4C708 == 2)
    {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_8:
  if (!HIBYTE(dword_1ECF4C702))
    return 0;
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::Wasm::IPIntCallee,char [45],JSC::Wasm::IPIntTierUpCounter,char [2]>((JSC::Wasm::Callee *)v4, ": Entered prologue_osr with tierUpCounter = ", (uint64_t)(v4 + 26));
  if (!JSC::LLInt::jitCompileAndSetHeuristics((JSC::LLInt *)v4, a3, a3))
    return 0;
  v7 = *(_QWORD *)&v4[2 * *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a3 + 8) + 8) + 6) + 36];
  v27 = &v28;
  v28 = 0;
  JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v7, (uint64_t **)&v27);
  return v28;
}

uint64_t JSC::LLInt::shouldJIT(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  unsigned int v4;

  v1 = result;
  if (!(_BYTE)word_1ECF4C720)
    goto LABEL_8;
  if (!BYTE1(dword_1ECF4C702))
    return 0;
  v2 = JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist((JSC::Wasm::BBQPlan *)result);
  result = JSC::FunctionAllowlist::containsWasmFunction((JSC::FunctionAllowlist *)v2, (WTF::String *)*(unsigned int *)(v1 + 32));
  if (!(_DWORD)result)
    return result;
  if (!(_BYTE)word_1ECF4C720)
  {
LABEL_8:
    if (BYTE2(dword_1ECF4C702))
    {
      v3 = JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist((JSC::Wasm::OMGPlan *)result);
      result = JSC::FunctionAllowlist::containsWasmFunction((JSC::FunctionAllowlist *)v3, (WTF::String *)*(unsigned int *)(v1 + 32));
      if (!(_DWORD)result)
        return result;
      goto LABEL_5;
    }
    return 0;
  }
LABEL_5:
  if (dword_1ECF4C708 < 2)
    return 1;
  v4 = *(_DWORD *)(v1 + 32);
  if (qword_1ECF4C718 > v4 || HIDWORD(qword_1ECF4C718) < v4)
    return dword_1ECF4C708 != 2;
  else
    return dword_1ECF4C708 == 2;
}

BOOL JSC::LLInt::jitCompileAndSetHeuristics(JSC::LLInt *this, JSC::Wasm::LLIntCallee *a2, JSC::Wasm::Instance *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  __int128 *v18;
  int v19;
  double v20;
  float v21;
  int v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  _DWORD *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  __int128 *v42;
  int v43;
  double v44;
  float v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  int *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  _DWORD *v55;
  __int16 v56;
  WTF::StringImpl *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  const WTF::StringImpl *v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  WTF::StringImpl *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  char v84;
  WTF::StringImpl **v85;
  WTF::StringImpl *v86;

  v5 = (char *)this + 104;
  if ((JSC::ExecutionCounter<(JSC::CountingVariant)0>::checkIfThresholdCrossedAndSet((int *)this + 26, 0) & 1) == 0)
  {
LABEL_75:
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [88],char [2]>("    JIT threshold should be lifted.", "\n");
    return 0;
  }
  v12 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 8) + 8) + 6);
  v13 = (char *)this + 8 * v12;
  v15 = *((_QWORD *)v13 + 18);
  v14 = v13 + 144;
  if (!v15)
  {
    v16 = (unsigned __int8 *)this + 116;
    if (__ldaxr((unsigned __int8 *)this + 116))
    {
      __clrex();
    }
    else if (!__stxr(1u, v16))
    {
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 116);
LABEL_6:
    if (v12 < 2)
    {
      if (*((_BYTE *)this + v12 + 117) == 1)
      {
        if ((_BYTE)word_1ECF4C720)
          v18 = &xmmword_1ECF4C6D8;
        else
          v18 = (__int128 *)((char *)&xmmword_1ECF4C6D8 + 8);
        v19 = *(_DWORD *)v18;
        *((_QWORD *)this + 13) = 0;
        *((_DWORD *)this + 28) = v19;
        if (v19 == 0x7FFFFFFF)
        {
          *((_DWORD *)this + 28) = 0x7FFFFFFF;
          *((_DWORD *)this + 26) = 0x80000000;
        }
        else if (v19 <= 0)
        {
          *((_DWORD *)this + 27) = 0;
        }
        else
        {
          v20 = (double)v19;
          if ((double)v19 > (double)SHIDWORD(xmmword_1ECF4C514))
            v20 = (double)SHIDWORD(xmmword_1ECF4C514);
          *((_DWORD *)this + 26) = (int)-v20;
          v21 = v20;
          *((float *)this + 27) = v21;
        }
LABEL_16:
        v22 = __ldxr(v16);
        if (v22 == 1)
        {
          if (!__stlxr(0, v16))
            return *v14 != 0;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 116, 0, v6, v7, v8, v9, v10, v11);
        return *v14 != 0;
      }
      if (*((_BYTE *)this + v12 + 117))
        goto LABEL_16;
      *((_BYTE *)this + v12 + 117) = 1;
      v24 = __ldxr(v16);
      if (v24 == 1)
      {
        if (!__stlxr(0, v16))
        {
LABEL_31:
          v25 = *((unsigned int *)this + 8);
          if (!(_BYTE)word_1ECF4C720)
            goto LABEL_81;
          v26 = atomic_load(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag);
          if (v26 != -1)
          {
            v86 = (WTF::StringImpl *)&v84;
            v85 = &v86;
            std::__call_once(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag, &v85, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::$_0 &&>>);
          }
          if (!byte_1EE343088)
            goto LABEL_35;
          if (!JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist
            || !*(_DWORD *)(JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist - 12))
          {
            goto LABEL_81;
          }
          WTF::String::number(v25, (uint64_t *)&v86);
          v73 = WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist, &v86, v65);
          v74 = v86;
          v86 = 0;
          if (v74)
          {
            if (*(_DWORD *)v74 == 2)
            {
              WTF::StringImpl::~StringImpl(v74, v66, v67, v68, v69, v70, v71, v72);
              WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
            }
            else
            {
              *(_DWORD *)v74 -= 2;
            }
          }
          if (v73)
          {
LABEL_35:
            v27 = WTF::fastMalloc((WTF *)0x1E8);
            v28 = *((_QWORD *)a2 + 1);
            v29 = *(unsigned int **)(*((_QWORD *)a2 + 7) + 8);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 + 1, v29));
            v31 = (_DWORD *)*((_QWORD *)this + 3);
            if (v31)
              v32 = (*v31 != 0) | 0x100;
            else
              v32 = 256;
            v33 = *(_QWORD *)(*((_QWORD *)a2 + 7)
                            + 8 * *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 8) + 8) + 6)
                            + 16);
            v34 = WTF::fastMalloc((WTF *)0x10);
            *(_DWORD *)(v34 + 8) = 1;
            *(_QWORD *)v34 = off_1E35B5C50;
            *(_DWORD *)(v27 + 8) = 1;
            *(_WORD *)(v27 + 12) = 0;
            *(_BYTE *)(v27 + 14) = 0;
            *(_QWORD *)(v27 + 40) = v28;
            *(_QWORD *)(v27 + 16) = v29;
            *(_QWORD *)(v27 + 24) = v27 + 40;
            *(_BYTE *)(v27 + 64) = 0;
            *(_QWORD *)(v27 + 48) = v34;
            *(_QWORD *)(v27 + 56) = 0;
            *(_QWORD *)(v27 + 32) = 0x100000001;
            *(_QWORD *)(v27 + 72) = &unk_1E35B56A0;
            *(_QWORD *)v27 = off_1E35B5640;
            *(_QWORD *)(v27 + 144) = 0;
            *(_OWORD *)(v27 + 112) = 0u;
            *(_OWORD *)(v27 + 128) = 0u;
            *(_OWORD *)(v27 + 80) = 0u;
            *(_OWORD *)(v27 + 96) = 0u;
            do
              v35 = __ldaxr(v29);
            while (__stlxr(v35 + 1, v29));
            *(_QWORD *)(v27 + 152) = v29;
            *(_QWORD *)(v27 + 160) = v27 + 72;
            *(_QWORD *)(v27 + 176) = 0;
            *(_QWORD *)(v27 + 184) = 0;
            *(_QWORD *)(v27 + 168) = 0;
            *(_BYTE *)(v27 + 192) = 0;
            *(_OWORD *)(v27 + 200) = 0u;
            *(_OWORD *)(v27 + 216) = 0u;
            CC_SHA1_Init((CC_SHA1_CTX *)(v27 + 232));
            *(_QWORD *)(v27 + 328) = 0;
            *(_QWORD *)(v27 + 336) = 0;
            *(_DWORD *)(v27 + 344) = 0;
            if ((_QWORD)xmmword_1ECF4C290)
              WTF::dataLog<char [88],char [2]>("Wasm streaming parser created, but we can only dump source in debug builds.", "\n");
            *(_BYTE *)(v27 + 352) = 1;
            *(_QWORD *)(v27 + 360) = 0;
            *(_DWORD *)(v27 + 353) = 0;
            *(_QWORD *)v27 = off_1E35B5410;
            *(_QWORD *)(v27 + 72) = &unk_1E35B5478;
            *(_OWORD *)(v27 + 368) = 0u;
            *(_OWORD *)(v27 + 384) = 0u;
            *(_OWORD *)(v27 + 400) = 0u;
            *(_OWORD *)(v27 + 416) = 0u;
            *(_OWORD *)(v27 + 432) = 0u;
            *(_OWORD *)(v27 + 448) = 0u;
            *(_QWORD *)(v27 + 464) = 0;
            if (v33)
            {
              do
                v36 = __ldaxr((unsigned int *)v33);
              while (__stlxr(v36 + 1, (unsigned int *)v33));
            }
            *(_QWORD *)(v27 + 472) = v33;
            *(_DWORD *)(v27 + 480) = v25;
            *(_WORD *)(v27 + 484) = v32;
            *(_BYTE *)(v27 + 12) = *(_BYTE *)(v33 + 8);
            *(_WORD *)(v27 + 353) = 257;
          }
          else
          {
LABEL_81:
            v27 = WTF::fastMalloc((WTF *)0x60);
            v52 = *((_QWORD *)a2 + 1);
            v53 = (unsigned int *)*((_QWORD *)a2 + 7);
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 + 1, v53));
            v85 = (WTF::StringImpl **)v53;
            v55 = (_DWORD *)*((_QWORD *)this + 3);
            if (v55)
              v56 = (*v55 != 0) | 0x100;
            else
              v56 = 256;
            v57 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *((_DWORD *)v57 + 2) = 1;
            *(_QWORD *)v57 = off_1E35B5C50;
            v86 = v57;
            JSC::Wasm::OMGPlan::OMGPlan(v27, v52, (uint64_t *)&v85, v25, v56, v12, (uint64_t *)&v86);
            v58 = (unsigned int *)v86;
            v86 = 0;
            if (v58)
            {
              v59 = v58 + 2;
              do
              {
                v60 = __ldaxr(v59);
                v61 = v60 - 1;
              }
              while (__stlxr(v61, v59));
              if (!v61)
              {
                atomic_store(1u, v58 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
              }
            }
            v62 = (unsigned int *)v85;
            v85 = 0;
            if (v62)
            {
              do
              {
                v63 = __ldaxr(v62);
                v64 = v63 - 1;
              }
              while (__stlxr(v64, v62));
              if (!v64)
              {
                atomic_store(1u, v62);
                v86 = (WTF::StringImpl *)v62;
                WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v86);
              }
            }
          }
          v37 = atomic_load(&JSC::Wasm::ensureWorklist(void)::initializeWorklist);
          if (v37 != -1)
          {
            v86 = (WTF::StringImpl *)&v84;
            v85 = &v86;
            std::__call_once(&JSC::Wasm::ensureWorklist(void)::initializeWorklist, &v85, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::ensureWorklist(void)::$_0 &&>>);
          }
          v38 = JSC::Wasm::globalWorklist;
          v39 = (unsigned int *)(v27 + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 + 1, v39));
          v83 = (unsigned int *)v27;
          JSC::Wasm::Worklist::enqueue(v38, &v83);
          v41 = v83;
          v83 = 0;
          if (v41)
          {
            v48 = v41 + 2;
            do
            {
              v49 = __ldaxr(v48);
              v50 = v49 - 1;
            }
            while (__stlxr(v50, v48));
            if (!v50)
            {
              atomic_store(1u, v41 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
            }
          }
          if (byte_1ECF4C464)
          {
            if ((_BYTE)word_1ECF4C720)
              v42 = &xmmword_1ECF4C6D8;
            else
              v42 = (__int128 *)((char *)&xmmword_1ECF4C6D8 + 8);
            v43 = *(_DWORD *)v42;
            *((_QWORD *)this + 13) = 0;
            *((_DWORD *)this + 28) = v43;
            if (v43 == 0x7FFFFFFF)
            {
              *((_DWORD *)this + 28) = 0x7FFFFFFF;
              *((_DWORD *)this + 26) = 0x80000000;
            }
            else if (v43 <= 0)
            {
              *((_DWORD *)this + 27) = 0;
            }
            else
            {
              v44 = (double)v43;
              if ((double)v43 > (double)SHIDWORD(xmmword_1ECF4C514))
                v44 = (double)SHIDWORD(xmmword_1ECF4C514);
              *((_DWORD *)this + 26) = (int)-v44;
              v45 = v44;
              *((float *)this + 27) = v45;
            }
          }
          else
          {
            JSC::Wasm::Plan::waitForCompletion((JSC::Wasm::Plan *)v27);
          }
          do
          {
            v46 = __ldaxr(v39);
            v47 = v46 - 1;
          }
          while (__stlxr(v47, v39));
          if (!v47)
          {
            atomic_store(1u, (unsigned int *)(v27 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          }
          return *v14 != 0;
        }
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 116, 0, v6, v7, v8, v9, v10, v11);
      goto LABEL_31;
    }
    __break(1u);
    goto LABEL_75;
  }
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<char [88],char [2]>("    Code was already compiled.", "\n");
  if ((_BYTE)word_1ECF4C720)
    v51 = (int *)&xmmword_1ECF4C6D8 + 1;
  else
    v51 = (int *)&xmmword_1ECF4C6D8 + 3;
  JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold((uint64_t)v5, *v51, 0);
  return 1;
}

_QWORD *slow_path_wasm_loop_osr(uint64_t a1, WTF::AtomStringImpl *a2, JSC::Wasm::LLIntCallee *a3)
{
  unsigned int v3;
  JSC::Wasm::LLIntCallee *v4;
  WTF::StringImpl *v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  JSC::Wasm::Instance *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *result;
  int v36;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  JSC::Wasm *v42;
  JSC::Wasm *v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unint64_t v52;
  WTF::AtomStringImpl **v53;
  WTF::AtomStringImpl *v54;
  unsigned int v55;
  unsigned int *v56;
  int v58;
  uint64_t *v59;
  int *v60;
  int v61;
  unsigned int *v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  _DWORD *v68;
  __int16 v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int *v90;
  int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  const WTF::StringImpl *v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int *v110;
  unsigned int *v111;
  WTF::StringImpl *v112[3];
  unsigned int *v113;
  JSC::Wasm::LLIntCallee *v114;
  uint64_t v115;
  JSC::Wasm *v116;

  v4 = a3;
  v5 = (WTF::StringImpl *)a1;
  v114 = a3;
  v115 = a1;
  if (HIBYTE(word_1ECF4C6D4))
    v6 = word_1ECF4C706 == 0;
  else
    v6 = 1;
  if (v6)
    goto LABEL_83;
  v7 = (unint64_t)a2;
  v8 = (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080;
  if (!(_BYTE)word_1ECF4C720)
    goto LABEL_77;
  if (!BYTE1(dword_1ECF4C702))
    goto LABEL_83;
  v9 = atomic_load(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag);
  if (v9 != -1)
  {
    v112[0] = (WTF::StringImpl *)&v113;
    v116 = (JSC::Wasm *)v112;
    std::__call_once(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag, &v116, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::$_0 &&>>);
  }
  if (byte_1EE343088)
  {
    if (JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist
      && *(_DWORD *)(JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist - 12))
    {
      WTF::String::number(*(unsigned int *)(v8 + 32), (uint64_t *)v112);
      v3 = WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist, v112, v99);
      a1 = (uint64_t)v112[0];
      v112[0] = 0;
      if (a1)
      {
        if (*(_DWORD *)a1 == 2)
          goto LABEL_145;
        *(_DWORD *)a1 -= 2;
      }
      goto LABEL_141;
    }
LABEL_83:
    slow_path_wasm_prologue_osr(v5, (uint64_t)a2, v4);
    return 0;
  }
  while (1)
  {
    if (!(_BYTE)word_1ECF4C720)
    {
LABEL_77:
      if (!BYTE2(dword_1ECF4C702))
        goto LABEL_83;
      v59 = JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist((JSC::Wasm::OMGPlan *)a1);
      if (!JSC::FunctionAllowlist::containsWasmFunction((JSC::FunctionAllowlist *)v59, (WTF::String *)*(unsigned int *)(v8 + 32)))goto LABEL_83;
    }
    if (dword_1ECF4C708 >= 2)
    {
      v108 = *(_DWORD *)(v8 + 32);
      if (qword_1ECF4C718 > v108 || HIDWORD(qword_1ECF4C718) < v108)
      {
        if (dword_1ECF4C708 == 2)
          goto LABEL_83;
      }
      else if (dword_1ECF4C708 != 2)
      {
        goto LABEL_83;
      }
    }
    v5 = (WTF::StringImpl *)(v8 + 104);
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<JSC::Wasm::IPIntCallee,char [41],JSC::Wasm::IPIntTierUpCounter,char [2]>((JSC::Wasm::Callee *)v8, v8 + 104);
    a1 = JSC::ExecutionCounter<(JSC::CountingVariant)0>::checkIfThresholdCrossedAndSet((int *)(v8 + 104), 0);
    if ((a1 & 1) == 0)
    {
      if (BYTE1(qword_1ECF4C332))
        WTF::dataLog<char [88],char [2]>("    JIT threshold should be lifted.", "\n");
      return 0;
    }
    v16 = *(_QWORD *)(v8 + 64);
    v17 = *(_QWORD *)v16;
    v18 = *(unsigned int *)(v16 + 12) + *(_QWORD *)v16;
    if (v17 > v7 || v18 <= v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198F97A8CLL);
    }
    v20 = *(_QWORD *)(v8 + 128);
    if (!v20)
      goto LABEL_64;
    v21 = v7 - v17;
    v22 = *(_DWORD *)(v20 - 8);
    v23 = 9 * ((~(v21 << 15) + v21) ^ ((~(v21 << 15) + v21) >> 10));
    v24 = (v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11);
    v25 = v22 & (v24 ^ HIWORD(v24));
    v26 = *(_DWORD *)(v20 + 32 * v25);
    if (v26 != v21)
    {
      v36 = 1;
      while (v26)
      {
        v25 = ((_DWORD)v25 + v36) & v22;
        v26 = *(_DWORD *)(v20 + 32 * v25);
        ++v36;
        if (v26 == v21)
          goto LABEL_22;
      }
      v25 = *(unsigned int *)(v20 - 4);
    }
LABEL_22:
    if (v25 == *(_DWORD *)(v20 - 4))
    {
LABEL_64:
      __break(0xC471u);
      JUMPOUT(0x198F979D4);
    }
    v27 = (unsigned int *)(v20 + 32 * v25 + 8);
    if (!(_BYTE)word_1ECF4C720 || BYTE1(dword_1ECF4C702) == 0)
      break;
    if (!JSC::LLInt::jitCompileAndSetHeuristics((JSC::LLInt *)v8, v4, v10))
      return 0;
    v5 = (WTF::StringImpl *)(*(_QWORD *)(*((_QWORD *)v4 + 7)
                                       + 8 * *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v4 + 8) + 8) + 6)
                                       + 16)
                           + 128);
    if (__ldaxr((unsigned __int8 *)v5))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v5))
    {
      goto LABEL_37;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v5);
LABEL_37:
    v38 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)v114 + 7)
                                 + 8 * *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v114 + 8) + 8) + 6)
                                 + 16)
                     + 24);
    if (v38 && *v38)
    {
      v39 = *(unsigned int *)(v8 + 32);
      if (*v38 <= v39)
      {
        __break(0xC471u);
        JUMPOUT(0x198F97DD0);
      }
      v8 = *(_QWORD *)&v38[2 * v39 + 2];
    }
    else
    {
      v8 = 0;
    }
    v40 = __ldxr((unsigned __int8 *)v5);
    if (v40 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
        goto LABEL_46;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v5, 0, v29, v30, v31, v32, v33, v34);
LABEL_46:
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198F97D48);
    }
    v41 = *(unsigned int *)(v8 + 160);
    if (v27[5] > v41)
    {
      __break(0xC471u);
      JUMPOUT(0x198F97D68);
    }
    v42 = (JSC::Wasm *)((char *)&v109 - *(int *)(v8 + 164));
    v43 = (JSC::Wasm *)*((_QWORD *)v114 + 2);
    if (v42 >= (JSC::Wasm *)&v109 || v42 <= v43)
    {
      if (BYTE1(qword_1ECF4C332))
      {
        v112[0] = (WTF::StringImpl *)&v109;
        v116 = v42;
        v113 = (unsigned int *)v43;
        WTF::dataLog<char [47],WTF::RawHex,char [5],WTF::RawHex,char [21],WTF::RawHex,char [2]>("Skipping BBQ loop tier up due to stack check; ",
          (const void **)v112,
          " -> ",
          (const void **)&v116,
          " is past soft limit ",
          (const void **)&v113,
          "\n");
      }
      return 0;
    }
    result = (_QWORD *)JSC::Wasm::Context::scratchBufferForSize((JSC::Wasm::Context *)(*((_QWORD *)v114 + 1) + 41464), v41, v29, v30, v31, v32, v33, v34);
    if (!result)
      return result;
    *result = *v27;
    v44 = v27[5];
    if ((_DWORD)v44)
    {
      v45 = (int *)*((_QWORD *)v27 + 1);
      v46 = v115;
      v47 = result + 1;
      v48 = 4 * v44;
      v49 = qword_1ECF4C080;
      do
      {
        v50 = *v45;
        if ((int)v50 >= 0x40000000)
        {
          v55 = v50 - 0x40000000;
          v56 = *(unsigned int **)((*(_QWORD *)(v46 + 24) & 0xFFFFFFFFFFFFFFFCLL) + v49 + 56);
          if (*v56 <= v55)
          {
            __break(0xC471u);
            JUMPOUT(0x198F97E68);
          }
          v51 = &v56[2 * v55 + 2];
        }
        else
        {
          v51 = (unsigned int *)(v46 + 8 * v50);
        }
        *v47++ = *(_QWORD *)v51;
        ++v45;
        v48 -= 4;
      }
      while (v48);
    }
    if (*(_BYTE *)(v8 + 136))
      return result;
    a2 = (WTF::AtomStringImpl *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/wasm/WasmSlowPaths.cpp";
    v10 = (JSC::Wasm::Instance *)"UGPRPair JSC::LLInt::slow_path_wasm_loop_osr(CallFrame *, const WasmInstruction *, Wasm::Instance *)";
    a1 = 301;
    v11 = 415;
    __break(0xC471u);
LABEL_144:
    __break(1u);
LABEL_145:
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)a1, a2, (uint64_t)v10, v11, v12, v13, v14, v15);
    WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
LABEL_141:
    if (!v3)
      goto LABEL_83;
  }
  v112[0] = (WTF::StringImpl *)(v20 + 32 * v25 + 8);
  v112[1] = (WTF::StringImpl *)&v114;
  v112[2] = (WTF::StringImpl *)&v115;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v4 + 8) + 8) + 6);
  v52 = v8 + 8 * v7;
  v54 = *(WTF::AtomStringImpl **)(v52 + 160);
  v53 = (WTF::AtomStringImpl **)(v52 + 160);
  a2 = v54;
  if (v54)
    return (_QWORD *)slow_path_wasm_loop_osr::$_0::operator()((_QWORD **)v112, a2, (uint64_t)v10, v11, v12, v13, v14, v15);
  v4 = (JSC::Wasm::LLIntCallee *)(v8 + 116);
  if (__ldaxr((unsigned __int8 *)(v8 + 116)))
  {
    __clrex();
    goto LABEL_70;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
LABEL_70:
    a1 = WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 116);
  if (v7 >= 2)
    goto LABEL_144;
  if (*(_BYTE *)(v8 + 119 + v7) == 1)
  {
    if ((_BYTE)word_1ECF4C720)
      v60 = (int *)&xmmword_1ECF4C6D8;
    else
      v60 = (int *)&xmmword_1ECF4C6D8 + 2;
    JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold(v8 + 104, *v60, 0);
LABEL_88:
    v61 = __ldxr((unsigned __int8 *)v4);
    if (v61 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
        goto LABEL_93;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 116), 0, (uint64_t)v10, v11, v12, v13, v14, v15);
    goto LABEL_93;
  }
  if (*(_BYTE *)(v8 + 119 + v7))
    goto LABEL_88;
  *(_BYTE *)(v8 + 119 + v7) = 1;
  v58 = __ldxr((unsigned __int8 *)v4);
  if (v58 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_97;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 116), 0, (uint64_t)v10, v11, v12, v13, v14, v15);
LABEL_97:
  v62 = (unsigned int *)WTF::fastMalloc((WTF *)0x70);
  v63 = *((_QWORD *)v114 + 1);
  v64 = (unsigned int *)*((_QWORD *)v114 + 7);
  do
    v65 = __ldaxr(v64);
  while (__stlxr(v65 + 1, v64));
  v113 = v64;
  do
    v66 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v66 + 1, (unsigned int *)v8));
  v116 = (JSC::Wasm *)v8;
  v67 = *(_DWORD *)(v8 + 32);
  v68 = *(_DWORD **)(v8 + 24);
  if (v68)
    v69 = (*v68 != 0) | 0x100;
  else
    v69 = 256;
  v70 = *v27;
  v71 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v71 + 8) = 1;
  *(_QWORD *)v71 = off_1E35B5C50;
  v111 = (unsigned int *)v71;
  JSC::Wasm::OSREntryPlan::OSREntryPlan((uint64_t)v62, v63, (uint64_t *)&v113, (uint64_t *)&v116, v67, v69, v70, v7, (uint64_t *)&v111);
  v79 = v111;
  v111 = 0;
  if (v79)
  {
    v80 = v79 + 2;
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
    {
      atomic_store(1u, v79 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v79 + 8))(v79);
    }
  }
  v83 = (unsigned int *)v116;
  v116 = 0;
  if (v83)
  {
    do
    {
      v84 = __ldaxr(v83);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, v83));
    if (!v85)
    {
      atomic_store(1u, v83);
      JSC::NativeCallee::operator delete((JSC::Wasm::Callee *)v83, v72, v73, v74, v75, v76, v77, v78);
    }
  }
  v86 = v113;
  v113 = 0;
  if (v86)
  {
    do
    {
      v94 = __ldaxr(v86);
      v95 = v94 - 1;
    }
    while (__stlxr(v95, v86));
    if (!v95)
    {
      atomic_store(1u, v86);
      v116 = (JSC::Wasm *)v86;
      WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v116);
    }
  }
  v87 = JSC::Wasm::ensureWorklist((JSC::Wasm *)v83);
  v88 = v62 + 2;
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 + 1, v88));
  v110 = v62;
  JSC::Wasm::Worklist::enqueue(v87, &v110);
  v90 = v110;
  v110 = 0;
  if (v90)
  {
    v96 = v90 + 2;
    do
    {
      v97 = __ldaxr(v96);
      v98 = v97 - 1;
    }
    while (__stlxr(v98, v96));
    if (!v98)
    {
      atomic_store(1u, v90 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v90 + 8))(v90);
    }
  }
  if (byte_1ECF4C464)
  {
    if ((_BYTE)word_1ECF4C720)
      v91 = (int *)&xmmword_1ECF4C6D8;
    else
      v91 = (int *)&xmmword_1ECF4C6D8 + 2;
    JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold((uint64_t)v5, *v91, 0);
  }
  else
  {
    JSC::Wasm::Plan::waitForCompletion((JSC::Wasm::Plan *)v62);
  }
  do
  {
    v92 = __ldaxr(v88);
    v93 = v92 - 1;
  }
  while (__stlxr(v93, v88));
  if (!v93)
  {
    atomic_store(1u, v62 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v62 + 8))(v62);
  }
LABEL_93:
  a2 = *v53;
  if (*v53)
    return (_QWORD *)slow_path_wasm_loop_osr::$_0::operator()((_QWORD **)v112, a2, (uint64_t)v10, v11, v12, v13, v14, v15);
  return 0;
}

uint64_t slow_path_wasm_loop_osr::$_0::operator()(_QWORD **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v28;
  char *v29;
  const void **v30;
  uint64_t *v31;

  if (a2[27] != *(_DWORD *)*a1)
    return 0;
  v9 = a2[26];
  if (*((_DWORD *)*a1 + 5) != (_DWORD)v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9808CLL);
  }
  if (a2[28] == -1)
  {
    v12 = *a1[1];
  }
  else
  {
    v11 = (char *)&v28 - (int)a2[28];
    v12 = *a1[1];
    v13 = *(char **)(v12 + 16);
    if (v11 >= (char *)&v28 || v11 <= v13)
    {
      if (BYTE1(qword_1ECF4C332))
      {
        v30 = (const void **)((char *)&v28 - (int)a2[28]);
        v31 = &v28;
        v29 = v13;
        WTF::dataLog<char [47],WTF::RawHex,char [5],WTF::RawHex,char [21],WTF::RawHex,char [2]>("Skipping OMG loop tier up due to stack check; ",
          (const void **)&v31,
          " -> ",
          (const void **)&v30,
          " is past soft limit ",
          (const void **)&v29,
          "\n");
      }
      return 0;
    }
  }
  v16 = JSC::Wasm::Context::scratchBufferForSize((JSC::Wasm::Context *)(*(_QWORD *)(v12 + 8) + 41464), v9, a3, a4, a5, a6, a7, a8);
  v15 = v16;
  if (v16)
  {
    v17 = *((unsigned int *)*a1 + 5);
    if ((_DWORD)v17)
    {
      v18 = (int *)(*a1)[1];
      v19 = *a1[2];
      v20 = qword_1ECF4C080;
      v21 = 4 * v17;
      v22 = (_QWORD *)v16;
      do
      {
        v23 = *v18;
        if ((int)v23 < 0x40000000)
        {
          v26 = (unsigned int *)(v19 + 8 * v23);
        }
        else
        {
          v24 = v23 - 0x40000000;
          v25 = *(unsigned int **)((*(_QWORD *)(v19 + 24) & 0xFFFFFFFFFFFFFFFCLL) + v20 + 56);
          if (*v25 <= v24)
          {
            __break(0xC471u);
            JUMPOUT(0x198F9806CLL);
          }
          v26 = &v25[2 * v24 + 2];
        }
        *v22++ = *(_QWORD *)v26;
        ++v18;
        v21 -= 4;
      }
      while (v21);
    }
    v30 = (const void **)&v31;
    v31 = 0;
    JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>((uint64_t)a2, (uint64_t **)&v30);
  }
  return v15;
}

uint64_t slow_path_wasm_epilogue_osr(WTF::StringImpl *a1, uint64_t a2, JSC::Wasm::LLIntCallee *a3)
{
  unsigned int *v5;
  unint64_t v6;
  uint64_t *v8;
  const WTF::StringImpl *v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;

  v5 = (unsigned int *)((*((_QWORD *)a1 + 3) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080);
  if (!(_BYTE)word_1ECF4C720)
    goto LABEL_33;
  if (!BYTE1(dword_1ECF4C702))
    goto LABEL_17;
  v6 = atomic_load(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag);
  if (v6 != -1)
  {
    v28 = (WTF::StringImpl *)&v26;
    v27 = &v28;
    std::__call_once(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::initializeAllowlistFlag, &v27, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::$_0 &&>>);
  }
  if (byte_1EE343088)
  {
    if (!JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist
      || !*(_DWORD *)(JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist - 12))
    {
      goto LABEL_17;
    }
    WTF::String::number(v5[8], (uint64_t *)&v28);
    v16 = WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::contains(&JSC::Wasm::BBQPlan::ensureGlobalBBQAllowlist(void)::bbqAllowlist, &v28, v9);
    a1 = v28;
    v28 = 0;
    if (a1)
    {
      if (*(_DWORD *)a1 == 2)
      {
        WTF::StringImpl::~StringImpl(a1, v10, (uint64_t)a3, v11, v12, v13, v14, v15);
        WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
      }
      else
      {
        *(_DWORD *)a1 -= 2;
      }
    }
    if (!v16)
      goto LABEL_17;
  }
  if (!(_BYTE)word_1ECF4C720)
  {
LABEL_33:
    if (!BYTE2(dword_1ECF4C702)
      || (v8 = JSC::Wasm::OMGPlan::ensureGlobalOMGAllowlist(a1),
          !JSC::FunctionAllowlist::containsWasmFunction((JSC::FunctionAllowlist *)v8, (WTF::String *)v5[8])))
    {
LABEL_17:
      JSC::ExecutionCounter<(JSC::CountingVariant)0>::deferIndefinitely((uint64_t)(v5 + 26));
      return a2;
    }
  }
  if (dword_1ECF4C708 < 2)
    goto LABEL_8;
  v25 = v5[8];
  if (qword_1ECF4C718 > v25 || HIDWORD(qword_1ECF4C718) < v25)
  {
    if (dword_1ECF4C708 == 2)
      goto LABEL_17;
  }
  else if (dword_1ECF4C708 != 2)
  {
    goto LABEL_17;
  }
LABEL_8:
  if (HIBYTE(word_1ECF4C706))
  {
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<JSC::Wasm::IPIntCallee,char [45],JSC::Wasm::IPIntTierUpCounter,char [2]>((JSC::Wasm::Callee *)v5, ": Entered epilogue_osr with tierUpCounter = ", (uint64_t)(v5 + 26));
    JSC::LLInt::jitCompileAndSetHeuristics((JSC::LLInt *)v5, a3, a3);
  }
  return a2;
}

JSC::Wasm *slow_path_wasm_simd_go_straight_to_bbq_osr(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unsigned __int8 *v21;
  int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  int v38;
  _DWORD *v39;
  __int16 v40;
  JSC::Wasm *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned __int8 *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  __int16 v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unsigned int *v75;
  JSC::Wasm *v76;
  int v77;
  JSC::Wasm **v78;

  v5 = g_config;
  if (!HIBYTE(dword_1ECF4C7B0))
  {
    __break(0xC471u);
    JUMPOUT(0x198F98984);
  }
  v7 = a1;
  v8 = (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080;
  if ((JSC::LLInt::shouldJIT(v8) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9883CLL);
  }
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<JSC::Wasm::LLIntCallee,char [60],JSC::Wasm::LLIntTierUpCounter,char [2]>((JSC::Wasm::Callee *)v8, v8 + 104);
  v15 = v8 + 8 * *(unsigned __int8 *)(*(_QWORD *)(a3[8] + 8) + 6);
  v17 = *(_QWORD *)(v15 + 144);
  v16 = (_QWORD *)(v15 + 144);
  if (v17)
  {
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [88],char [2]>("    SIMD code was already compiled.", "\n");
    goto LABEL_8;
  }
  v20 = *(unsigned __int8 *)(*(_QWORD *)(a3[8] + 8) + 6);
  v21 = (unsigned __int8 *)(v8 + 116);
  if (*(unsigned __int8 *)(*(_QWORD *)(a3[8] + 8) + 6) > 1u)
  {
    if (__ldaxr(v21))
    {
      __clrex();
    }
    else
    {
      v29 = 1;
      if (!__stxr(1u, v21))
        goto LABEL_101;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 116);
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  v74 = v7;
  v7 = v8 + 117;
  do
  {
    if (__ldaxr(v21))
    {
      __clrex();
    }
    else if (!__stxr(1u, v21))
    {
      goto LABEL_15;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 116);
LABEL_15:
    v23 = *(unsigned __int8 *)(v7 + v20);
    if (*(_BYTE *)(v7 + v20))
    {
      if (v23 == 1)
      {
        MEMORY[0x19AEBBF94](0, 1, 1);
        v24 = 0;
        v25 = 4;
      }
      else if (v23 == 2)
      {
        if (!*v16)
        {
          __break(0xC471u);
          goto LABEL_108;
        }
        v24 = 0;
        v25 = 1;
      }
      else
      {
        v25 = 0;
        v24 = 0;
      }
    }
    else
    {
      v25 = 0;
      v24 = 1;
      *(_BYTE *)(v7 + v20) = 1;
    }
    v26 = __ldxr(v21);
    if (v26 != 1)
    {
      __clrex();
LABEL_27:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 116), 0, v9, v10, v11, v12, v13, v14);
      goto LABEL_28;
    }
    if (__stlxr(0, v21))
      goto LABEL_27;
LABEL_28:
    if ((v25 | 4) != 4)
      goto LABEL_8;
  }
  while ((v24 & 1) == 0);
  v27 = *(_DWORD *)(v8 + 32);
  if (!(_BYTE)word_1ECF4C720)
  {
    v3 = WTF::fastMalloc((WTF *)0x60);
    v72 = a3[1];
    v36 = (unsigned int *)a3[7];
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 + 1, v36));
    v38 = v27;
    v78 = (JSC::Wasm **)v36;
    v39 = *(_DWORD **)(v8 + 24);
    if (v39)
      v40 = (*v39 != 0) | 0x100;
    else
      v40 = 256;
    v41 = (JSC::Wasm *)WTF::fastMalloc((WTF *)0x10);
    *((_DWORD *)v41 + 2) = 1;
    *(_QWORD *)v41 = off_1E35B5C50;
    v76 = v41;
    JSC::Wasm::OMGPlan::OMGPlan(v3, v72, (uint64_t *)&v78, v38, v40, v20, (uint64_t *)&v76);
    v34 = (uint64_t)v76;
    v76 = 0;
    if (v34)
    {
      v42 = (unsigned int *)(v34 + 8);
      do
      {
        v43 = __ldaxr(v42);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v42));
      if (!v44)
      {
        atomic_store(1u, (unsigned int *)(v34 + 8));
        v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      }
    }
    v45 = (unsigned int *)v78;
    v78 = 0;
    if (v45)
    {
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v45);
        v76 = (JSC::Wasm *)v45;
        WTF::ThreadSafeRefCounted<JSC::Wasm::Module,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v76);
      }
    }
    goto LABEL_55;
  }
  v3 = WTF::fastMalloc((WTF *)0x1E8);
  v5 = (uint64_t *)a3[1];
  v4 = *(unsigned int **)(a3[7] + 8);
  do
    v28 = __ldaxr(v4);
  while (__stlxr(v28 + 1, v4));
  v29 = *(_QWORD *)(v8 + 24);
  v73 = v27;
  if (v29)
  {
LABEL_102:
    v30 = (*(_DWORD *)v29 != 0) | 0x100;
    goto LABEL_35;
  }
  v30 = 256;
LABEL_35:
  v71 = v30;
  v31 = *(_QWORD *)(a3[7] + 8 * *(unsigned __int8 *)(*(_QWORD *)(a3[8] + 8) + 6) + 16);
  v32 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v32 + 8) = 1;
  *(_QWORD *)v32 = off_1E35B5C50;
  *(_DWORD *)(v3 + 8) = 1;
  *(_WORD *)(v3 + 12) = 0;
  *(_BYTE *)(v3 + 14) = 0;
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 24) = v3 + 40;
  *(_BYTE *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 48) = v32;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 32) = 0x100000001;
  *(_QWORD *)(v3 + 72) = &unk_1E35B56A0;
  *(_QWORD *)v3 = off_1E35B5640;
  *(_QWORD *)(v3 + 144) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  do
    v33 = __ldaxr(v4);
  while (__stlxr(v33 + 1, v4));
  *(_QWORD *)(v3 + 152) = v4;
  *(_QWORD *)(v3 + 160) = v3 + 72;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_BYTE *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  v34 = CC_SHA1_Init((CC_SHA1_CTX *)(v3 + 232));
  *(_QWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 336) = 0;
  *(_DWORD *)(v3 + 344) = 0;
  if ((_QWORD)xmmword_1ECF4C290)
    v34 = WTF::dataLog<char [88],char [2]>("Wasm streaming parser created, but we can only dump source in debug builds.", "\n");
  *(_BYTE *)(v3 + 352) = 1;
  *(_QWORD *)(v3 + 360) = 0;
  *(_DWORD *)(v3 + 353) = 0;
  *(_QWORD *)v3 = off_1E35B5410;
  *(_QWORD *)(v3 + 72) = &unk_1E35B5478;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_OWORD *)(v3 + 432) = 0u;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_QWORD *)(v3 + 464) = 0;
  if (v31)
  {
    do
      v35 = __ldaxr((unsigned int *)v31);
    while (__stlxr(v35 + 1, (unsigned int *)v31));
  }
  *(_QWORD *)(v3 + 472) = v31;
  *(_DWORD *)(v3 + 480) = v73;
  *(_WORD *)(v3 + 484) = v71;
  *(_BYTE *)(v3 + 12) = *(_BYTE *)(v31 + 8);
  *(_WORD *)(v3 + 353) = 257;
LABEL_55:
  v48 = JSC::Wasm::ensureWorklist((JSC::Wasm *)v34);
  v49 = (unsigned int *)(v3 + 8);
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 + 1, v49));
  v75 = (unsigned int *)v3;
  JSC::Wasm::Worklist::enqueue(v48, &v75);
  v51 = v75;
  v75 = 0;
  if (v51)
  {
    v64 = v51 + 2;
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
    {
      atomic_store(1u, v51 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
    }
  }
  v52 = (unsigned __int8 *)(v3 + 13);
  if (__ldaxr((unsigned __int8 *)(v3 + 13)))
  {
    __clrex();
    goto LABEL_61;
  }
  if (__stxr(1u, v52))
LABEL_61:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v3 + 13);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) & 1) == 0)
  {
    v76 = (JSC::Wasm *)0x7FF0000000000000;
    v77 = 0;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v3 + 14, (unsigned __int8 *)(v3 + 13), (WTF::TimeWithDynamicClockType *)&v76);
  }
  v60 = __ldxr(v52);
  if (v60 != 1)
  {
    __clrex();
    goto LABEL_68;
  }
  if (__stlxr(0, v52))
LABEL_68:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v3 + 13), 0, v54, v55, v56, v57, v58, v59);
  v61 = *(_QWORD *)(v3 + 56);
  if (v61)
  {
    v62 = *(unsigned __int8 *)(v3 + 64);
    goto LABEL_87;
  }
  if (__ldaxr(v21))
  {
    __clrex();
    goto LABEL_78;
  }
  if (__stxr(1u, v21))
LABEL_78:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 116);
  if (*(_BYTE *)(v7 + v20) != 2)
  {
    __break(0xC471u);
    JUMPOUT(0x198F98910);
  }
  if (!*v16)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9894CLL);
  }
  v67 = __ldxr(v21);
  if (v67 == 1)
  {
    if (!__stlxr(0, v21))
      goto LABEL_86;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 116), 0, v54, v55, v56, v57, v58, v59);
LABEL_86:
  v62 = 0;
  do
  {
LABEL_87:
    v68 = __ldaxr(v49);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, v49));
  if (!v69)
  {
    atomic_store(1u, (unsigned int *)(v3 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (!v61)
      goto LABEL_8;
LABEL_90:
    if (v62 == 1)
    {
      *(_DWORD *)(v74 + 32) = 39;
      return (JSC::Wasm *)&xmmword_1ECF4C7EB;
    }
    __break(0xC471u);
LABEL_108:
    JUMPOUT(0x198F9881CLL);
  }
  if (v61)
    goto LABEL_90;
LABEL_8:
  v18 = *(_QWORD *)(v8 + 8 * *(unsigned __int8 *)(*(_QWORD *)(a3[8] + 8) + 6) + 144);
  v76 = 0;
  v78 = &v76;
  JSC::Wasm::Callee::runWithDowncast<JSC::Wasm::Callee::entrypoint(void)::$_0>(v18, (uint64_t **)&v78);
  return v76;
}

uint64_t slow_path_wasm_trace(_QWORD *a1, const char *a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  int v12;
  const char *v13;
  const char *v14;
  uint64_t result;

  if (byte_1ECF4C727)
  {
    v4 = *(unsigned __int8 *)a2;
    if ((v4 + 115) <= 1u)
      v4 = *((unsigned __int8 *)a2 + 1);
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5)
      v5 = WTF::Thread::initializeCurrentTLS(0);
    v6 = (a1[3] & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080;
    v7 = *(_QWORD *)(v6 + 64);
    v8 = *(_QWORD *)v7;
    v9 = *(unsigned int *)(v7 + 12) + *(_QWORD *)v7;
    if (v8 > (unint64_t)a2 || v9 <= (unint64_t)a2)
    {
      result = 785;
      __break(0xC471u);
      return result;
    }
    v11 = ((_DWORD)a2 - v8);
    v12 = *(unsigned __int8 *)a2;
    if ((v12 + 115) <= 1u)
      v12 = *((unsigned __int8 *)a2 + 1);
    WTF::dataLogF((WTF *)"<%p> %p / %p: executing bc#%zu, %s, pc = %p\n", a2, v5, v6, a1, v11, JSC::wasmOpcodeNames[v12], a2);
    if (v4 == 150)
    {
      WTF::dataLogF((WTF *)"Will be returning to %p\n", v13, a1[1]);
      WTF::dataLogF((WTF *)"The new cfr will be %p\n", v14, *a1);
    }
    else if (v4 == 143)
    {
      WTF::dataLogF((WTF *)"Frame will eventually return to %p\n", v13, a1[1]);
    }
  }
  return (uint64_t)a2;
}

unint64_t slow_path_wasm_out_of_line_jump_target(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v15;

  v2 = (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080;
  v3 = *(unint64_t **)(v2 + 64);
  v4 = *v3;
  v5 = *((unsigned int *)v3 + 3) + *v3;
  if (v4 > a2 || v5 <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198F98BDCLL);
  }
  v7 = a2 - v4;
  v8 = *(_QWORD *)(v2 + 96);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = 9 * ((~(v7 << 15) + v7) ^ ((~(v7 << 15) + v7) >> 10));
    v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
    v12 = v9 & (v11 ^ HIWORD(v11));
    v13 = *(_DWORD *)(v8 + 8 * v12);
    if (v13 == v7)
    {
LABEL_8:
      LODWORD(v8) = *(_DWORD *)(v8 + 8 * v12 + 4);
    }
    else
    {
      v15 = 1;
      while (v13)
      {
        v12 = ((_DWORD)v12 + v15) & v9;
        v13 = *(_DWORD *)(v8 + 8 * v12);
        ++v15;
        if (v13 == v7)
          goto LABEL_8;
      }
      LODWORD(v8) = 0;
    }
  }
  return v4 + (v8 + v7);
}

unsigned __int8 *slow_path_wasm_ref_func(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;

  v3 = *a2;
  if (v3 == 141)
  {
    v4 = *((__int16 *)a2 + 1);
    if (v4 > 63)
      v4 += 1073741760;
    v5 = *((unsigned __int16 *)a2 + 2);
  }
  else if (v3 == 142)
  {
    v4 = *(_DWORD *)(a2 + 2);
    v5 = *(_DWORD *)(a2 + 6);
  }
  else
  {
    v4 = (char)a2[1];
    if (v4 > 15)
      v4 += 1073741808;
    v5 = a2[2];
  }
  v6 = *(_QWORD *)(a3 + 88);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
    v9 = (v8 ^ (v8 >> 6)) + ~((v8 ^ (v8 >> 6)) << 11);
    v10 = v7 & (v9 ^ HIWORD(v9));
    v11 = *(_DWORD *)(v6 + 16 * v10);
    if (v11 == v5)
    {
LABEL_15:
      if (*(_QWORD *)(v6 + 16 * v10 + 8))
        v13 = *(_QWORD *)(v6 + 16 * v10 + 8);
      else
        v13 = 2;
    }
    else
    {
      v12 = 1;
      v13 = 2;
      while (v11 != -1)
      {
        v10 = ((_DWORD)v10 + v12) & v7;
        v11 = *(_DWORD *)(v6 + 16 * v10);
        ++v12;
        if (v11 == v5)
          goto LABEL_15;
      }
    }
  }
  else
  {
    v13 = 2;
  }
  *(_QWORD *)(a1 + 8 * v4) = v13;
  return a2;
}

__int128 *slow_path_wasm_array_new(uint64_t a1, unsigned __int8 *a2, JSC::Wasm *this, uint64_t a4, const JSC::Wasm::Type *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v10;
  int v11;
  int v12;
  int v13;
  JSC::Wasm::Instance *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::Wasm::TypeDefinition *v27;
  _DWORD *v28;
  uint64_t *v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::Wasm::TypeDefinition *v36;
  uint64_t *v37;
  JSC *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  JSC *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v61;
  unsigned int v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  BOOL v73;
  unsigned int v74;
  JSC *v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  BOOL v86;
  unsigned int v87;
  JSC *v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  BOOL v99;
  unsigned int v100;
  JSC *v101;
  uint64_t v102;
  JSC *v103;
  WTF *v104;
  uint64_t v105;
  uint64_t v106;
  _WORD *v107;
  uint64_t v108;
  unint64_t v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  BOOL v113;
  unint64_t v114;
  unsigned int v115;
  unsigned int v116;
  WTF *v117;
  unsigned int v118;
  BOOL v119;
  unint64_t v120;
  unsigned int v121;
  unsigned int v122;
  WTF *v123;
  unsigned int v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  WTF *v128;
  unsigned int v129;
  unint64_t v130;
  unsigned int v131;
  unsigned int v132;
  WTF *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v139;
  JSC::Wasm *v140;
  int v141;
  _BOOL4 hasRecursiveReference;
  unint64_t v143;
  uint64_t v144;
  unint64_t CachedUnrolling;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t (*v149)(__int128 *);
  _QWORD *v150;
  uint64_t (*v151)(__int128 *);
  _QWORD *v152;
  uint64_t (*v153)(__int128 *);
  _QWORD *v154;
  uint64_t (*v155)(__int128 *);
  _QWORD *v156;
  uint64_t (*v157)(__int128 *);
  _QWORD *v158;
  JSC *v159;
  uint64_t (*v160)(__int128 *);
  _QWORD *v161;
  JSC *v162;
  uint64_t (*v163)(__int128 *);
  _QWORD *v164;
  uint64_t (*v165)(__int128 *);
  _QWORD *v166;
  JSC *v167;
  unsigned int *v168;
  JSC::Wasm *v169;
  int v170;
  _BOOL4 v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  const JSC::Wasm::Type *v179;
  uint64_t v180;
  char v181;
  const JSC::Wasm::TypeDefinition *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  const JSC::Wasm::TypeDefinition *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  JSC *v194;
  JSC *v195;
  JSC *v196;
  WTF *v197;
  WTF *v198;
  int v199;
  WTF *v200;
  __int128 v201;
  _BYTE v202[12];
  int v203;
  WTF *v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t v209;

  v8 = a2;
  v209 = *MEMORY[0x1E0C80C00];
  v10 = *a2;
  if (v10 == 141)
  {
    v16 = *((__int16 *)a2 + 1);
    v17 = 1073741760;
    if (v16 <= 63)
      v11 = *((__int16 *)a2 + 1);
    else
      v11 = v16 + 1073741760;
    v12 = *((__int16 *)a2 + 2);
    v18 = *((__int16 *)a2 + 3);
    if (v18 <= 63)
      v13 = *((__int16 *)a2 + 3);
    else
      v13 = v18 + 1073741760;
    v14 = (JSC::Wasm::Instance *)*((unsigned __int16 *)a2 + 4);
    LOBYTE(v15) = a2[10];
    if (v12 <= 63)
      goto LABEL_23;
  }
  else
  {
    if (v10 == 142)
    {
      v11 = *(_DWORD *)(a2 + 2);
      v12 = *(_DWORD *)(a2 + 6);
      v13 = *(_DWORD *)(a2 + 10);
      v14 = (JSC::Wasm::Instance *)*(unsigned int *)(a2 + 14);
      v15 = *(_DWORD *)(a2 + 18);
      goto LABEL_20;
    }
    v19 = (char)a2[1];
    v17 = 1073741808;
    if (v19 <= 15)
      v11 = (char)a2[1];
    else
      v11 = v19 + 1073741808;
    v12 = (char)a2[2];
    v20 = (char)a2[3];
    if (v20 <= 15)
      v13 = (char)a2[3];
    else
      v13 = v20 + 1073741808;
    v14 = (JSC::Wasm::Instance *)a2[4];
    LOBYTE(v15) = a2[5];
    if (v12 < 16)
      goto LABEL_23;
  }
  v12 += v17;
LABEL_20:
  if (v12 < 0x40000000)
  {
LABEL_23:
    v23 = (uint64_t *)(a1 + 8 * v12);
    goto LABEL_24;
  }
  v21 = v12 - 0x40000000;
  v22 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v22 <= v21)
  {
    __break(0xC471u);
    JUMPOUT(0x198F997BCLL);
  }
  v23 = (uint64_t *)&v22[2 * v21 + 2];
LABEL_24:
  v24 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if (*(_DWORD *)(v24 + 100) <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198F99B88);
  }
  v25 = *v23;
  v26 = *(_QWORD *)(*(_QWORD *)(v24 + 88) + 8 * v14);
  if (*(_DWORD *)(v26 + 32) == 4)
  {
    v139 = *(unsigned int **)(v26 + 8);
    v197 = *(WTF **)v139;
    v27 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v139 + 8) + 8 * v139[2]);
    v140 = this;
    v141 = v11;
    hasRecursiveReference = JSC::Wasm::TypeDefinition::hasRecursiveReference(v27);
    v11 = v141;
    this = v140;
    if (hasRecursiveReference)
    {
      CachedUnrolling = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v26, v143, (uint64_t)v140, v144, (uint64_t)a5, a6, a7, a8);
      if (v148)
      {
        v27 = (JSC::Wasm::TypeDefinition *)CachedUnrolling;
      }
      else
      {
        v27 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v27, v197, v146, v147, a5, a6, a7, a8);
        JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v26, v27, v182, v183, v184, v185, v186, v187);
      }
      this = v140;
      v11 = v141;
    }
  }
  else
  {
    v27 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v24 + 88) + 8 * v14);
  }
  if (*((_DWORD *)v27 + 8) == 5)
    v27 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v27 + 1);
  if (v15 == 2)
  {
    if (v13 >= 0x40000000)
    {
      v47 = *(_QWORD *)(a1 + 16);
      if ((v13 - 0x40000000) >= *(_DWORD *)(v47 + 172))
      {
        __break(0xC471u);
        JUMPOUT(0x198F99BA0);
      }
      v33 = *(_QWORD *)(v47 + 160) + 8 * (v13 - 0x40000000);
    }
    else
    {
      v33 = a1 + 8 * v13;
    }
    v34 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
    if (*(_DWORD *)(v34 + 100) <= v14)
    {
      __break(0xC471u);
      JUMPOUT(0x198F99B90);
    }
    v35 = *(_QWORD *)(*(_QWORD *)(v34 + 88) + 8 * v14);
    if (*(_DWORD *)(v35 + 32) == 4)
    {
      v168 = *(unsigned int **)(v35 + 8);
      v198 = *(WTF **)v168;
      v36 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(*(_QWORD *)v168 + 8) + 8 * v168[2]);
      v169 = this;
      v170 = v11;
      v171 = JSC::Wasm::TypeDefinition::hasRecursiveReference(v36);
      v11 = v170;
      this = v169;
      if (v171)
      {
        v176 = JSC::Wasm::TypeInformation::tryGetCachedUnrolling((JSC::Wasm::TypeInformation *)v35, v172, (uint64_t)v169, v173, v174, v175, a7, a8);
        if (v181)
        {
          v36 = (JSC::Wasm::TypeDefinition *)v176;
        }
        else
        {
          v36 = JSC::Wasm::TypeDefinition::replacePlaceholders((JSC::Wasm::TypeDefinition ***)v36, v198, v177, v178, v179, v180, a7, a8);
          JSC::Wasm::TypeInformation::addCachedUnrolling((JSC::Wasm::TypeInformation *)v35, v36, v188, v189, v190, v191, v192, v193);
        }
        this = v169;
        v11 = v170;
      }
    }
    else
    {
      v36 = *(JSC::Wasm::TypeDefinition **)(*(_QWORD *)(v34 + 88) + 8 * v14);
    }
    if (*((_DWORD *)v36 + 8) == 5)
      v36 = (JSC::Wasm::TypeDefinition *)**((_QWORD **)v36 + 1);
    v37 = (uint64_t *)*((_QWORD *)v36 + 1);
    v39 = *v37;
    v38 = (JSC *)v37[1];
    v40 = *((_DWORD *)v37 + 4);
    v207 = *(uint64_t *)((char *)v37 + 20);
    v208 = *((_DWORD *)v37 + 7);
    if (v40)
    {
      if (v39 == 248)
      {
        v41 = 1;
      }
      else
      {
        if (v39 != 247)
        {
          __break(0xC471u);
          JUMPOUT(0x198F99B40);
        }
        v41 = 2;
      }
    }
    else
    {
      v41 = 4;
      switch((char)v39)
      {
        case -5:
          v41 = 16;
          break;
        case -4:
        case -2:
          v41 = 8;
          break;
        case -3:
        case -1:
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198F99B80);
      }
    }
    v48 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
    if (*(_DWORD *)(v48 + 284) <= v14)
    {
      __break(0xC471u);
      JUMPOUT(0x198F99B98);
    }
    v49 = *(unsigned int **)(*(_QWORD *)(v48 + 272) + 8 * v14);
    if (v49)
    {
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 + 1, v49));
    }
    v51 = v25;
    v199 = v11;
    switch(v41)
    {
      case 1:
        v194 = v38;
        v205 = v207;
        v206 = v208;
        if (v49)
        {
          do
            v52 = __ldaxr(v49);
          while (__stlxr(v52 + 1, v49));
        }
        v53 = (JSC *)*((_QWORD *)this + 1);
        v54 = *((_QWORD *)this + 4);
        if ((_DWORD)v25)
        {
          v55 = (WTF *)WTF::fastMalloc((WTF *)(v25 + 4));
          *(_DWORD *)v55 = v25;
          v204 = v55;
          v58 = (v25 - 1);
          if ((int)v25 - 1 >= 0)
          {
            v59 = 4;
            do
            {
              if (v59 - 4 >= (unint64_t)*(unsigned int *)v204)
              {
                __break(0xC471u);
                JUMPOUT(0x198F99774);
              }
              *((_BYTE *)v204 + v59++) = *(_QWORD *)(v33 + 8 * v58);
            }
            while (v58-- > 0);
          }
          v61 = *(_QWORD *)(v54 + 1280);
          if ((v61 & 1) != 0)
          {
            v155 = *(uint64_t (**)(__int128 *))(v61 & 0xFFFFFFFFFFFFFFFCLL);
            v156 = (_QWORD *)(v54 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v54 & 8) != 0)
              v156 = (_QWORD *)(v54 - 16);
            *(_QWORD *)&v201 = *v156;
            *((_QWORD *)&v201 + 1) = v54;
            *(_QWORD *)v202 = v54 + 1280;
            v61 = v155(&v201);
          }
          *(_QWORD *)&v201 = v39;
          *((_QWORD *)&v201 + 1) = v194;
          *(_DWORD *)v202 = v40;
          *(_QWORD *)&v202[4] = v205;
          v203 = v206;
          if (v49)
          {
            do
              v62 = __ldaxr(v49);
            while (__stlxr(v62 + 1, v49));
          }
          v200 = (WTF *)v49;
          v70 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v53, (JSC::VM *)v61, &v201, v25, (uint64_t *)&v204, (unsigned int **)&v200, v56, v57);
          v71 = (unsigned int *)v200;
          v200 = 0;
          if (v71)
          {
            do
            {
              v72 = __ldaxr(v71);
              v73 = --v72 == 0;
            }
            while (__stlxr(v72, v71));
            goto LABEL_150;
          }
        }
        else
        {
          v204 = 0;
          v125 = *(_QWORD *)(v54 + 1280);
          if ((v125 & 1) != 0)
          {
            v163 = *(uint64_t (**)(__int128 *))(v125 & 0xFFFFFFFFFFFFFFFCLL);
            v164 = (_QWORD *)(v54 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v54 & 8) != 0)
              v164 = (_QWORD *)(v54 - 16);
            *(_QWORD *)&v201 = *v164;
            *((_QWORD *)&v201 + 1) = v54;
            *(_QWORD *)v202 = v54 + 1280;
            v125 = v163(&v201);
          }
          *(_QWORD *)&v201 = v39;
          *((_QWORD *)&v201 + 1) = v194;
          *(_DWORD *)v202 = v40;
          *(_QWORD *)&v202[4] = v205;
          v203 = v206;
          if (v49)
          {
            do
              v126 = __ldaxr(v49);
            while (__stlxr(v126 + 1, v49));
          }
          v200 = (WTF *)v49;
          v70 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v53, (JSC::VM *)v125, &v201, 0, (uint64_t *)&v204, (unsigned int **)&v200, a7, a8);
          v71 = (unsigned int *)v200;
          v200 = 0;
          if (v71)
          {
            do
            {
              v127 = __ldaxr(v71);
              v73 = --v127 == 0;
            }
            while (__stlxr(v127, v71));
LABEL_150:
            if (v73)
            {
              atomic_store(1u, v71);
              WTF::fastFree((unint64_t)v71, v63, v64, v65, v66, v67, v68, v69);
            }
          }
        }
        v128 = v204;
        v204 = 0;
        if (v128)
          WTF::fastFree((unint64_t)v128, v63, v64, v65, v66, v67, v68, v69);
        if (!v49)
          goto LABEL_173;
        do
        {
          v129 = __ldaxr(v49);
          v119 = --v129 == 0;
        }
        while (__stlxr(v129, v49));
        goto LABEL_168;
      case 2:
        v205 = v207;
        v206 = v208;
        if (v49)
        {
          do
            v100 = __ldaxr(v49);
          while (__stlxr(v100 + 1, v49));
        }
        v101 = (JSC *)*((_QWORD *)this + 1);
        v102 = *((_QWORD *)this + 4);
        if ((_DWORD)v25)
        {
          v103 = (JSC *)*((_QWORD *)this + 1);
          v104 = (WTF *)WTF::fastMalloc((WTF *)(2 * v25 + 4));
          *(_DWORD *)v104 = v25;
          v204 = v104;
          if ((int)v25 - 1 >= 0)
          {
            v107 = (_WORD *)((char *)v104 + 4);
            v108 = 8 * (v25 - 1);
            do
            {
              *v107++ = *(_QWORD *)(v33 + v108);
              v108 -= 8;
            }
            while (v108 != -8);
          }
          v109 = *(_QWORD *)(v102 + 1280);
          if ((v109 & 1) != 0)
          {
            v153 = *(uint64_t (**)(__int128 *))(v109 & 0xFFFFFFFFFFFFFFFCLL);
            v154 = (_QWORD *)(v102 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v102 & 8) != 0)
              v154 = (_QWORD *)(v102 - 16);
            *(_QWORD *)&v201 = *v154;
            *((_QWORD *)&v201 + 1) = v102;
            *(_QWORD *)v202 = v102 + 1280;
            v109 = v153(&v201);
          }
          *(_QWORD *)&v201 = v39;
          *((_QWORD *)&v201 + 1) = v38;
          *(_DWORD *)v202 = v40;
          *(_QWORD *)&v202[4] = v205;
          v203 = v206;
          if (v49)
          {
            do
              v110 = __ldaxr(v49);
            while (__stlxr(v110 + 1, v49));
          }
          v200 = (WTF *)v49;
          v70 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v103, (JSC::VM *)v109, &v201, v25, (uint64_t *)&v204, (unsigned int **)&v200, v105, v106);
          v111 = (unsigned int *)v200;
          v200 = 0;
          if (v111)
          {
            do
            {
              v112 = __ldaxr(v111);
              v113 = --v112 == 0;
            }
            while (__stlxr(v112, v111));
            goto LABEL_162;
          }
        }
        else
        {
          v204 = 0;
          v130 = *(_QWORD *)(v102 + 1280);
          if ((v130 & 1) != 0)
          {
            v165 = *(uint64_t (**)(__int128 *))(v130 & 0xFFFFFFFFFFFFFFFCLL);
            v166 = (_QWORD *)(v102 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v102 & 8) != 0)
              v166 = (_QWORD *)(v102 - 16);
            *(_QWORD *)&v201 = *v166;
            *((_QWORD *)&v201 + 1) = v102;
            *(_QWORD *)v202 = v102 + 1280;
            v167 = v101;
            v130 = v165(&v201);
            v101 = v167;
            v51 = 0;
          }
          *(_QWORD *)&v201 = v39;
          *((_QWORD *)&v201 + 1) = v38;
          *(_DWORD *)v202 = v40;
          *(_QWORD *)&v202[4] = v205;
          v203 = v206;
          if (v49)
          {
            do
              v131 = __ldaxr(v49);
            while (__stlxr(v131 + 1, v49));
          }
          v200 = (WTF *)v49;
          v70 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v101, (JSC::VM *)v130, &v201, v51, (uint64_t *)&v204, (unsigned int **)&v200, a7, a8);
          v111 = (unsigned int *)v200;
          v200 = 0;
          if (v111)
          {
            do
            {
              v132 = __ldaxr(v111);
              v113 = --v132 == 0;
            }
            while (__stlxr(v132, v111));
LABEL_162:
            if (v113)
            {
              atomic_store(1u, v111);
              WTF::fastFree((unint64_t)v111, v63, v64, v65, v66, v67, v68, v69);
            }
          }
        }
        v133 = v204;
        v204 = 0;
        if (v133)
          WTF::fastFree((unint64_t)v133, v63, v64, v65, v66, v67, v68, v69);
        if (!v49)
          goto LABEL_173;
        do
        {
          v134 = __ldaxr(v49);
          v119 = --v134 == 0;
        }
        while (__stlxr(v134, v49));
        goto LABEL_168;
      case 4:
        v205 = v207;
        v206 = v208;
        if (v49)
        {
          do
            v74 = __ldaxr(v49);
          while (__stlxr(v74 + 1, v49));
        }
        v75 = (JSC *)*((_QWORD *)this + 1);
        v76 = *((_QWORD *)this + 4);
        if ((_DWORD)v25)
        {
          v195 = (JSC *)*((_QWORD *)this + 1);
          v77 = (WTF *)WTF::fastMalloc((WTF *)(4 * v25 + 4));
          *(_DWORD *)v77 = v25;
          v204 = v77;
          if ((int)v25 - 1 >= 0)
          {
            v80 = (_DWORD *)((char *)v77 + 4);
            v81 = 8 * (v25 - 1);
            do
            {
              *v80++ = *(_QWORD *)(v33 + v81);
              v81 -= 8;
            }
            while (v81 != -8);
          }
          v82 = *(_QWORD *)(v76 + 1280);
          if ((v82 & 1) != 0)
          {
            v149 = *(uint64_t (**)(__int128 *))(v82 & 0xFFFFFFFFFFFFFFFCLL);
            v150 = (_QWORD *)(v76 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v76 & 8) != 0)
              v150 = (_QWORD *)(v76 - 16);
            *(_QWORD *)&v201 = *v150;
            *((_QWORD *)&v201 + 1) = v76;
            *(_QWORD *)v202 = v76 + 1280;
            v82 = v149(&v201);
          }
          *(_QWORD *)&v201 = v39;
          *((_QWORD *)&v201 + 1) = v38;
          *(_DWORD *)v202 = v40;
          *(_QWORD *)&v202[4] = v205;
          v203 = v206;
          if (v49)
          {
            do
              v83 = __ldaxr(v49);
            while (__stlxr(v83 + 1, v49));
          }
          v200 = (WTF *)v49;
          v70 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v195, (JSC::VM *)v82, &v201, v25, (uint64_t *)&v204, (unsigned int **)&v200, v78, v79);
          v84 = (unsigned int *)v200;
          v200 = 0;
          if (v84)
          {
            do
            {
              v85 = __ldaxr(v84);
              v86 = --v85 == 0;
            }
            while (__stlxr(v85, v84));
            goto LABEL_126;
          }
        }
        else
        {
          v204 = 0;
          v114 = *(_QWORD *)(v76 + 1280);
          if ((v114 & 1) != 0)
          {
            v157 = *(uint64_t (**)(__int128 *))(v114 & 0xFFFFFFFFFFFFFFFCLL);
            v158 = (_QWORD *)(v76 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v76 & 8) != 0)
              v158 = (_QWORD *)(v76 - 16);
            *(_QWORD *)&v201 = *v158;
            *((_QWORD *)&v201 + 1) = v76;
            *(_QWORD *)v202 = v76 + 1280;
            v159 = v75;
            v114 = v157(&v201);
            v75 = v159;
          }
          *(_QWORD *)&v201 = v39;
          *((_QWORD *)&v201 + 1) = v38;
          *(_DWORD *)v202 = v40;
          *(_QWORD *)&v202[4] = v205;
          v203 = v206;
          if (v49)
          {
            do
              v115 = __ldaxr(v49);
            while (__stlxr(v115 + 1, v49));
          }
          v200 = (WTF *)v49;
          v70 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v75, (JSC::VM *)v114, &v201, v51, (uint64_t *)&v204, (unsigned int **)&v200, a7, a8);
          v84 = (unsigned int *)v200;
          v200 = 0;
          if (v84)
          {
            do
            {
              v116 = __ldaxr(v84);
              v86 = --v116 == 0;
            }
            while (__stlxr(v116, v84));
LABEL_126:
            if (v86)
            {
              atomic_store(1u, v84);
              WTF::fastFree((unint64_t)v84, v63, v64, v65, v66, v67, v68, v69);
            }
          }
        }
        v117 = v204;
        v204 = 0;
        if (v117)
          WTF::fastFree((unint64_t)v117, v63, v64, v65, v66, v67, v68, v69);
        if (!v49)
          goto LABEL_173;
        do
        {
          v118 = __ldaxr(v49);
          v119 = --v118 == 0;
        }
        while (__stlxr(v118, v49));
        goto LABEL_168;
      case 8:
        v205 = v207;
        v206 = v208;
        if (v49)
        {
          do
            v87 = __ldaxr(v49);
          while (__stlxr(v87 + 1, v49));
        }
        v88 = (JSC *)*((_QWORD *)this + 1);
        v89 = *((_QWORD *)this + 4);
        if ((_DWORD)v25)
        {
          v196 = (JSC *)*((_QWORD *)this + 1);
          v90 = (WTF *)WTF::fastMalloc((WTF *)(8 * v25 + 8));
          *(_DWORD *)v90 = v25;
          v204 = v90;
          if ((int)v25 - 1 >= 0)
          {
            v93 = (_QWORD *)((char *)v90 + 8);
            v94 = 8 * (v25 - 1);
            do
            {
              *v93++ = *(_QWORD *)(v33 + v94);
              v94 -= 8;
            }
            while (v94 != -8);
          }
          v95 = *(_QWORD *)(v89 + 1280);
          if ((v95 & 1) != 0)
          {
            v151 = *(uint64_t (**)(__int128 *))(v95 & 0xFFFFFFFFFFFFFFFCLL);
            v152 = (_QWORD *)(v89 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v89 & 8) != 0)
              v152 = (_QWORD *)(v89 - 16);
            *(_QWORD *)&v201 = *v152;
            *((_QWORD *)&v201 + 1) = v89;
            *(_QWORD *)v202 = v89 + 1280;
            v95 = v151(&v201);
          }
          *(_QWORD *)&v201 = v39;
          *((_QWORD *)&v201 + 1) = v38;
          *(_DWORD *)v202 = v40;
          *(_QWORD *)&v202[4] = v205;
          v203 = v206;
          if (v49)
          {
            do
              v96 = __ldaxr(v49);
            while (__stlxr(v96 + 1, v49));
          }
          v200 = (WTF *)v49;
          v70 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v196, (JSC::VM *)v95, &v201, v25, (uint64_t *)&v204, (unsigned int **)&v200, v91, v92);
          v97 = (unsigned int *)v200;
          v200 = 0;
          if (v97)
          {
            do
            {
              v98 = __ldaxr(v97);
              v99 = --v98 == 0;
            }
            while (__stlxr(v98, v97));
            goto LABEL_138;
          }
        }
        else
        {
          v204 = 0;
          v120 = *(_QWORD *)(v89 + 1280);
          if ((v120 & 1) != 0)
          {
            v160 = *(uint64_t (**)(__int128 *))(v120 & 0xFFFFFFFFFFFFFFFCLL);
            v161 = (_QWORD *)(v89 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v89 & 8) != 0)
              v161 = (_QWORD *)(v89 - 16);
            *(_QWORD *)&v201 = *v161;
            *((_QWORD *)&v201 + 1) = v89;
            *(_QWORD *)v202 = v89 + 1280;
            v162 = v88;
            v120 = v160(&v201);
            v88 = v162;
          }
          *(_QWORD *)&v201 = v39;
          *((_QWORD *)&v201 + 1) = v38;
          *(_DWORD *)v202 = v40;
          *(_QWORD *)&v202[4] = v205;
          v203 = v206;
          if (v49)
          {
            do
              v121 = __ldaxr(v49);
            while (__stlxr(v121 + 1, v49));
          }
          v200 = (WTF *)v49;
          v70 = JSC::JSWebAssemblyArray::tryCreate<JSC::v128_u>(v88, (JSC::VM *)v120, &v201, v51, (uint64_t *)&v204, (unsigned int **)&v200, a7, a8);
          v97 = (unsigned int *)v200;
          v200 = 0;
          if (v97)
          {
            do
            {
              v122 = __ldaxr(v97);
              v99 = --v122 == 0;
            }
            while (__stlxr(v122, v97));
LABEL_138:
            if (v99)
            {
              atomic_store(1u, v97);
              WTF::fastFree((unint64_t)v97, v63, v64, v65, v66, v67, v68, v69);
            }
          }
        }
        v123 = v204;
        v204 = 0;
        if (v123)
          WTF::fastFree((unint64_t)v123, v63, v64, v65, v66, v67, v68, v69);
        if (v49)
        {
          do
          {
            v124 = __ldaxr(v49);
            v119 = --v124 == 0;
          }
          while (__stlxr(v124, v49));
LABEL_168:
          if (v119)
          {
            atomic_store(1u, v49);
            WTF::fastFree((unint64_t)v49, v63, v64, v65, v66, v67, v68, v69);
          }
          do
          {
            v135 = __ldaxr(v49);
            v136 = v135 - 1;
          }
          while (__stlxr(v136, v49));
          if (!v136)
          {
            atomic_store(1u, v49);
            WTF::fastFree((unint64_t)v49, v63, v64, v65, v66, v67, v68, v69);
          }
        }
LABEL_173:
        v137 = 2;
        if (v70)
          v137 = v70;
        *(_QWORD *)(a1 + 8 * v199) = v137;
        return (__int128 *)v8;
      default:
        __break(0xC471u);
        JUMPOUT(0x198F99B60);
    }
  }
  if (v15 != 1)
  {
    if (!(_BYTE)v15)
    {
      if (v13 < 0x40000000)
      {
        v29 = (uint64_t *)(a1 + 8 * v13);
      }
      else
      {
        v28 = *(_DWORD **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
        if (*v28 <= (v13 - 0x40000000))
        {
          __break(0xC471u);
          JUMPOUT(0x198F997DCLL);
        }
        v29 = (uint64_t *)&v28[2 * (v13 - 0x40000000) + 2];
      }
      v31 = v11;
      v32 = *v29;
      goto LABEL_50;
    }
    goto LABEL_36;
  }
  v30 = (unsigned __int8 *)*((_QWORD *)v27 + 1);
  if (*((_DWORD *)v30 + 4))
    goto LABEL_36;
  v43 = *v30;
  if (BYTE1(dword_1ECF4C7B0))
    v44 = 29;
  else
    v44 = 17;
  if ((v44 + v43) < 2u)
  {
    v31 = v11;
    v32 = 2;
LABEL_50:
    v42 = JSC::Wasm::arrayNew(this, v14, v25, v32, a5, a6, a7, a8);
    if (v42 == 2)
    {
      *(_DWORD *)(a1 + 32) = 21;
      return &xmmword_1ECF4C7EB;
    }
    else
    {
      *(_QWORD *)(a1 + 8 * v31) = v42;
    }
    return (__int128 *)v8;
  }
  if (v43 != 251)
  {
LABEL_36:
    v31 = v11;
    v32 = 0;
    goto LABEL_50;
  }
  v45 = v11;
  v46 = JSC::Wasm::arrayNew(this, v14, v25, 0, 0, a6, a7, a8);
  if (v46 == 2)
  {
    *(_DWORD *)(a1 + 32) = 21;
    return &xmmword_1ECF4C7EB;
  }
  else
  {
    *(_QWORD *)(a1 + 8 * v45) = v46;
  }
  return (__int128 *)v8;
}

__int128 *slow_path_wasm_array_get(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  JSC::JSWebAssemblyArray *v27;
  int v28;
  char v29;
  JSC::JSWebAssemblyArray *v31;

  v3 = a2;
  *(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) = a1;
  v5 = *a2;
  if (v5 == 141)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 <= 63)
      v6 = *((__int16 *)a2 + 1);
    else
      v6 = v10 + 1073741760;
    v7 = *((__int16 *)a2 + 2);
    v12 = *((__int16 *)a2 + 3);
    v8 = v12 + 1073741760;
    if (v12 <= 63)
      v8 = *((__int16 *)a2 + 3);
    v9 = *((unsigned __int16 *)a2 + 5);
    if (v7 <= 63)
      goto LABEL_21;
  }
  else
  {
    if (v5 == 142)
    {
      v6 = *(_DWORD *)(a2 + 2);
      v7 = *(_DWORD *)(a2 + 6);
      v8 = *(_DWORD *)(a2 + 10);
      v9 = *(_DWORD *)(a2 + 18);
      goto LABEL_18;
    }
    v13 = (char)a2[1];
    v11 = 1073741808;
    if (v13 <= 15)
      v6 = (char)a2[1];
    else
      v6 = v13 + 1073741808;
    v7 = (char)a2[2];
    v14 = (char)a2[3];
    v8 = v14 + 1073741808;
    if (v14 <= 15)
      v8 = (char)a2[3];
    v9 = a2[5];
    if (v7 < 16)
      goto LABEL_21;
  }
  v7 += v11;
LABEL_18:
  if (v7 < 0x40000000)
  {
LABEL_21:
    v17 = (unsigned __int8 **)(a1 + 8 * v7);
    goto LABEL_22;
  }
  v15 = v7 - 0x40000000;
  v16 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v16 <= v15)
    goto LABEL_53;
  v17 = (unsigned __int8 **)&v16[2 * v15 + 2];
LABEL_22:
  v18 = *v17;
  if (v18 == (unsigned __int8 *)2)
  {
    v19 = 24;
LABEL_43:
    *(_DWORD *)(a1 + 32) = v19;
    return &xmmword_1ECF4C7EB;
  }
  if (v8 >= 0x40000000)
  {
    v20 = v8 - 0x40000000;
    v21 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v21 > v20)
    {
      v22 = &v21[2 * v20 + 2];
      goto LABEL_28;
    }
LABEL_53:
    __break(0xC471u);
    JUMPOUT(0x198F99E38);
  }
  v22 = (unsigned int *)(a1 + 8 * v8);
LABEL_28:
  v23 = *(_QWORD *)v22;
  v24 = *(_QWORD *)v22;
  v25 = (unint64_t)v18 & 0xFFFE000000000002;
  if (((unint64_t)v18 & 0xFFFE000000000002) != 0)
  {
    v26 = 0;
  }
  else if (v18[5] <= 0x16u)
  {
    v26 = 0;
  }
  else
  {
    v26 = v18;
  }
  if (*((_QWORD *)v26 + 7) <= v24)
  {
    v19 = 14;
    goto LABEL_43;
  }
  if (v9 == 12)
  {
    if (v25)
    {
      v27 = 0;
    }
    else if (v18[5] <= 0x16u)
    {
      v27 = 0;
    }
    else
    {
      v27 = (JSC::JSWebAssemblyArray *)v18;
    }
    v28 = JSC::JSWebAssemblyArray::get(v27, v23);
    if (v26[24] == 248)
      v29 = 24;
    else
      v29 = 16;
    *(_QWORD *)(a1 + 8 * v6) = v28 << v29 >> v29;
  }
  else
  {
    if (v25)
    {
      v31 = 0;
    }
    else if (v18[5] <= 0x16u)
    {
      v31 = 0;
    }
    else
    {
      v31 = (JSC::JSWebAssemblyArray *)v18;
    }
    *(_QWORD *)(a1 + 8 * v6) = JSC::JSWebAssemblyArray::get(v31, v23);
  }
  return (__int128 *)v3;
}

__int128 *slow_path_wasm_array_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;

  v3 = a2;
  *(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) = a1;
  v4 = *a2;
  if (v4 == 141)
  {
    v5 = *((__int16 *)a2 + 1);
    v8 = 1073741760;
    v9 = *((__int16 *)a2 + 2);
    v6 = v9 + 1073741760;
    if (v9 <= 63)
      v6 = *((__int16 *)a2 + 2);
    v7 = *((__int16 *)a2 + 3);
    if (v7 > 63)
      v7 += 1073741760;
    if (v5 <= 63)
      goto LABEL_19;
  }
  else
  {
    if (v4 == 142)
    {
      v5 = *(_DWORD *)(a2 + 2);
      v6 = *(_DWORD *)(a2 + 6);
      v7 = *(_DWORD *)(a2 + 10);
      goto LABEL_16;
    }
    v5 = (char)a2[1];
    v8 = 1073741808;
    v10 = (char)a2[2];
    v6 = v10 + 1073741808;
    if (v10 <= 15)
      v6 = (char)a2[2];
    v7 = (char)a2[3];
    if (v7 > 15)
      v7 += 1073741808;
    if (v5 < 16)
      goto LABEL_19;
  }
  v5 += v8;
LABEL_16:
  if (v5 < 0x40000000)
  {
LABEL_19:
    v13 = (unint64_t *)(a1 + 8 * v5);
    goto LABEL_20;
  }
  v11 = v5 - 0x40000000;
  v12 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v12 <= v11)
    goto LABEL_43;
  v13 = (unint64_t *)&v12[2 * v11 + 2];
LABEL_20:
  v14 = *v13;
  if (v14 == 2)
  {
    v15 = 25;
LABEL_39:
    *(_DWORD *)(a1 + 32) = v15;
    return &xmmword_1ECF4C7EB;
  }
  if (v6 >= 0x40000000)
  {
    v16 = v6 - 0x40000000;
    v17 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v17 > v16)
    {
      v18 = &v17[2 * v16 + 2];
      goto LABEL_26;
    }
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x198F9A09CLL);
  }
  v18 = (unsigned int *)(a1 + 8 * v6);
LABEL_26:
  v19 = *(_QWORD *)v18;
  if (v7 < 0x40000000)
  {
    v22 = (uint64_t *)(a1 + 8 * v7);
  }
  else
  {
    v20 = v7 - 0x40000000;
    v21 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v21 <= v20)
    {
      __break(0xC471u);
      JUMPOUT(0x198F9A0BCLL);
    }
    v22 = (uint64_t *)&v21[2 * v20 + 2];
  }
  v23 = *v22;
  if ((v14 & 0xFFFE000000000002) == 0)
  {
    if (*(unsigned __int8 *)(v14 + 5) <= 0x16u)
      v24 = 0;
    else
      v24 = v14;
    if (*(_QWORD *)(v24 + 56) > (unint64_t)v19)
      goto LABEL_35;
LABEL_38:
    v15 = 15;
    goto LABEL_39;
  }
  if (MEMORY[0x38] <= (unint64_t)v19)
    goto LABEL_38;
  v14 = 0;
LABEL_35:
  JSC::JSWebAssemblyArray::set(v14, v19, v23);
  return (__int128 *)v3;
}

__int128 *slow_path_wasm_array_fill(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  size_t v30;
  unint64_t v31;

  v3 = a2;
  *(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) = a1;
  v4 = *a2;
  if (v4 == 141)
  {
    v5 = *((__int16 *)a2 + 1);
    v9 = 1073741760;
    v10 = *((__int16 *)a2 + 2);
    if (v10 <= 63)
      v6 = *((__int16 *)a2 + 2);
    else
      v6 = v10 + 1073741760;
    v11 = *((__int16 *)a2 + 3);
    v7 = v11 + 1073741760;
    if (v11 <= 63)
      v7 = *((__int16 *)a2 + 3);
    v8 = *((__int16 *)a2 + 4);
    if (v8 > 63)
      v8 += 1073741760;
    if (v5 <= 63)
      goto LABEL_25;
  }
  else
  {
    if (v4 == 142)
    {
      v5 = *(_DWORD *)(a2 + 2);
      v6 = *(_DWORD *)(a2 + 6);
      v7 = *(_DWORD *)(a2 + 10);
      v8 = *(_DWORD *)(a2 + 14);
      goto LABEL_22;
    }
    v5 = (char)a2[1];
    v9 = 1073741808;
    v12 = (char)a2[2];
    if (v12 <= 15)
      v6 = (char)a2[2];
    else
      v6 = v12 + 1073741808;
    v13 = (char)a2[3];
    v7 = v13 + 1073741808;
    if (v13 <= 15)
      v7 = (char)a2[3];
    v8 = (char)a2[4];
    if (v8 > 15)
      v8 += 1073741808;
    if (v5 < 16)
      goto LABEL_25;
  }
  v5 += v9;
LABEL_22:
  if (v5 < 0x40000000)
  {
LABEL_25:
    v16 = (unint64_t *)(a1 + 8 * v5);
    goto LABEL_26;
  }
  v14 = v5 - 0x40000000;
  v15 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v15 <= v14)
    goto LABEL_54;
  v16 = (unint64_t *)&v15[2 * v14 + 2];
LABEL_26:
  v17 = *v16;
  if (v17 == 2)
  {
    v18 = 27;
    goto LABEL_47;
  }
  if (v6 < 0x40000000)
  {
    v21 = (unsigned int *)(a1 + 8 * v6);
    goto LABEL_32;
  }
  v19 = v6 - 0x40000000;
  v20 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v20 <= v19)
  {
LABEL_54:
    __break(0xC471u);
    JUMPOUT(0x198F9A388);
  }
  v21 = &v20[2 * v19 + 2];
LABEL_32:
  v22 = *v21;
  if (v7 < 0x40000000)
  {
    v25 = (uint64_t *)(a1 + 8 * v7);
  }
  else
  {
    v23 = v7 - 0x40000000;
    v24 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v24 <= v23)
    {
      __break(0xC471u);
      JUMPOUT(0x198F9A3A8);
    }
    v25 = (uint64_t *)&v24[2 * v23 + 2];
  }
  v26 = *v25;
  if (v8 < 0x40000000)
  {
    v29 = (unsigned int *)(a1 + 8 * v8);
  }
  else
  {
    v27 = v8 - 0x40000000;
    v28 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v28 <= v27)
    {
      __break(0xC471u);
      JUMPOUT(0x198F9A3C8);
    }
    v29 = &v28[2 * v27 + 2];
  }
  v30 = *v29;
  if ((v17 & 0xFFFE000000000002) != 0)
  {
    v31 = 0;
  }
  else if (*(unsigned __int8 *)(v17 + 5) <= 0x16u)
  {
    v31 = 0;
  }
  else
  {
    v31 = v17;
  }
  if (!__CFADD__(v22, (_DWORD)v30) && *(_QWORD *)(v31 + 56) >= (unint64_t)(v22 + v30))
  {
    JSC::JSWebAssemblyArray::fill(v31, v22, v26, v30);
    return (__int128 *)v3;
  }
  v18 = 16;
LABEL_47:
  *(_DWORD *)(a1 + 32) = v18;
  return &xmmword_1ECF4C7EB;
}

__int128 *slow_path_wasm_struct_new(__int128 *result, unsigned __int8 *a2, JSC::Wasm *this, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  __int128 *v10;
  int v11;
  int v12;
  int v13;
  JSC::Wasm::Instance *v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;

  v9 = a2;
  v10 = result;
  *(_QWORD *)(*((_QWORD *)this + 1) + 40) = result;
  v11 = *a2;
  if (v11 == 142)
  {
    v13 = *(_DWORD *)(a2 + 2);
    v14 = (JSC::Wasm::Instance *)*(unsigned int *)(a2 + 6);
    if (!v9[10])
    {
      v15 = *(_DWORD *)(v9 + 14);
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (v11 == 141)
  {
    v12 = *((__int16 *)a2 + 1);
    if (v12 <= 63)
      v13 = *((__int16 *)a2 + 1);
    else
      v13 = v12 + 1073741760;
    v14 = (JSC::Wasm::Instance *)*((unsigned __int16 *)a2 + 2);
    v15 = *((__int16 *)v9 + 4);
    if (v15 > 63)
      v15 += 1073741760;
    if (!v9[6])
      goto LABEL_18;
LABEL_20:
    v18 = 0;
    v17 = 1;
    goto LABEL_21;
  }
  v16 = (char)a2[1];
  if (v16 <= 15)
    v13 = (char)a2[1];
  else
    v13 = v16 + 1073741808;
  v14 = (JSC::Wasm::Instance *)a2[2];
  v15 = (char)v9[4];
  if (v15 > 15)
    v15 += 1073741808;
  if ((v9[3] & 1) != 0)
    goto LABEL_20;
LABEL_18:
  if (v15 >= 0x40000000)
  {
    v20 = *((_QWORD *)result + 2);
    v21 = v15 - 0x40000000;
    if (v21 >= *(_DWORD *)(v20 + 172))
    {
      __break(0xC471u);
      return result;
    }
    v17 = 0;
    v18 = *(_QWORD *)(v20 + 160) + 8 * v21;
  }
  else
  {
    v17 = 0;
    v18 = (uint64_t)result + 8 * v15;
  }
LABEL_21:
  v19 = JSC::Wasm::structNew(this, v14, v17, v18, a5, a6, a7, a8);
  if (v19 == 2)
  {
    *((_DWORD *)v10 + 8) = 20;
    return &xmmword_1ECF4C7EB;
  }
  else
  {
    *((_QWORD *)v10 + v13) = v19;
  }
  return (__int128 *)v9;
}

__int128 *slow_path_wasm_struct_get(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;

  v2 = *a2;
  if (v2 == 141)
  {
    v3 = *((__int16 *)a2 + 1);
    v7 = 1073741760;
    if (v3 > 63)
      v3 += 1073741760;
    v4 = *((__int16 *)a2 + 2);
    v5 = *((unsigned __int16 *)a2 + 3);
    v6 = *((unsigned __int16 *)a2 + 4);
    if (v4 <= 63)
      goto LABEL_15;
  }
  else
  {
    if (v2 == 142)
    {
      v3 = *(_DWORD *)(a2 + 2);
      v4 = *(_DWORD *)(a2 + 6);
      v5 = *(_DWORD *)(a2 + 10);
      v6 = *(_DWORD *)(a2 + 14);
      goto LABEL_12;
    }
    v3 = (char)a2[1];
    v7 = 1073741808;
    if (v3 > 15)
      v3 += 1073741808;
    v4 = (char)a2[2];
    v5 = a2[3];
    v6 = a2[4];
    if (v4 < 16)
      goto LABEL_15;
  }
  v4 += v7;
LABEL_12:
  if (v4 < 0x40000000)
  {
LABEL_15:
    v10 = (unsigned int *)(a1 + 8 * v4);
    goto LABEL_16;
  }
  v8 = v4 - 0x40000000;
  v9 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v9 <= v8)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9A760);
  }
  v10 = &v9[2 * v8 + 2];
LABEL_16:
  v11 = *(_QWORD *)v10;
  if (v11 == 2)
  {
    *(_DWORD *)(a1 + 32) = 31;
    return &xmmword_1ECF4C7EB;
  }
  else
  {
    v13 = *(_QWORD *)(v11 + 24);
    v12 = *(_QWORD *)(v11 + 32);
    v14 = v12 + 4;
    if (!v12)
      v14 = 0;
    v17 = *(_QWORD *)(v13 + 8);
    v15 = v13 + 8;
    v16 = v17;
    if (*(_DWORD *)(v15 + 24) == 1)
      v18 = v15;
    else
      v18 = 0;
    v19 = *(_QWORD *)v18 + 32 * *(unsigned int *)(v18 + 8);
    v20 = v5;
    v21 = (*(_DWORD *)(v19 + 4 * v5) - 4);
    v22 = (unsigned __int8 *)(v16 + 32 * v20);
    if (*((_DWORD *)v22 + 4) == 1)
    {
      if (*v22 == 248)
        v23 = *(unsigned __int8 *)(v14 + v21);
      else
        v23 = *(unsigned __int16 *)(v14 + v21);
    }
    else
    {
      v24 = *v22;
      switch(v24)
      {
        case 252:
        case 254:
          goto LABEL_32;
        case 253:
        case 255:
          v23 = *(unsigned int *)(v14 + v21);
          break;
        default:
          if ((v24 - 227) < 2 || (v24 - 239) < 2)
LABEL_32:
            v23 = *(_QWORD *)(v14 + v21);
          else
            v23 = 0;
          break;
      }
    }
    if (v6 == 3)
    {
      if (*(unsigned __int8 *)(v11 + 5) <= 0x16u)
        v25 = 0;
      else
        v25 = v11;
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v25 + 24) + 8) + 32 * v20) == 248)
        v26 = 24;
      else
        v26 = 16;
      *(_QWORD *)(a1 + 8 * v3) = (int)((_DWORD)v23 << v26) >> v26;
    }
    else
    {
      *(_QWORD *)(a1 + 8 * v3) = v23;
    }
  }
  return (__int128 *)a2;
}

__int128 *slow_path_wasm_struct_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int *v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 *v29;

  *(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) = a1;
  v3 = *a2;
  if (v3 == 141)
  {
    v4 = *((__int16 *)a2 + 1);
    v7 = 1073741760;
    v5 = *((unsigned __int16 *)a2 + 2);
    v6 = *((__int16 *)a2 + 3);
    if (v6 > 63)
      v6 += 1073741760;
    if (v4 <= 63)
      goto LABEL_15;
  }
  else
  {
    if (v3 == 142)
    {
      v4 = *(_DWORD *)(a2 + 2);
      v5 = *(_DWORD *)(a2 + 6);
      v6 = *(_DWORD *)(a2 + 10);
      goto LABEL_12;
    }
    v4 = (char)a2[1];
    v7 = 1073741808;
    v5 = a2[2];
    v6 = (char)a2[3];
    if (v6 > 15)
      v6 += 1073741808;
    if (v4 < 16)
      goto LABEL_15;
  }
  v4 += v7;
LABEL_12:
  if (v4 < 0x40000000)
  {
LABEL_15:
    v10 = (unint64_t *)(a1 + 8 * v4);
    goto LABEL_16;
  }
  v8 = v4 - 0x40000000;
  v9 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v9 <= v8)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9AA2CLL);
  }
  v10 = (unint64_t *)&v9[2 * v8 + 2];
LABEL_16:
  v11 = *v10;
  if (v11 == 2)
  {
    *(_DWORD *)(a1 + 32) = 32;
    return &xmmword_1ECF4C7EB;
  }
  else
  {
    if (v6 < 0x40000000)
    {
      v14 = (unsigned int *)(a1 + 8 * v6);
    }
    else
    {
      v12 = v6 - 0x40000000;
      v13 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
      if (*v13 <= v12)
      {
        __break(0xC471u);
        JUMPOUT(0x198F9AA0CLL);
      }
      v14 = &v13[2 * v12 + 2];
    }
    v15 = *(_QWORD *)v14;
    v17 = *(_QWORD *)(v11 + 24);
    v16 = *(_QWORD *)(v11 + 32);
    if (v16)
      v18 = v16 + 4;
    else
      v18 = 0;
    v21 = *(_QWORD *)(v17 + 8);
    v19 = v17 + 8;
    v20 = v21;
    if (*(_DWORD *)(v19 + 24) != 1)
      v19 = 0;
    v22 = v5;
    v23 = (*(_DWORD *)(*(_QWORD *)v19 + 32 * *(unsigned int *)(v19 + 8) + 4 * v5) - 4);
    v24 = (unsigned __int8 *)(v20 + 32 * v22);
    if (*((_DWORD *)v24 + 4) == 1)
    {
      if (*v24 == 248)
        *(_BYTE *)(v18 + v23) = v15;
      else
        *(_WORD *)(v18 + v23) = v15;
    }
    else
    {
      v25 = *v24;
      if (v25 > 251)
      {
        switch(v25)
        {
          case 252:
          case 254:
            *(_QWORD *)(v18 + v23) = v15;
            break;
          case 253:
          case 255:
            *(_DWORD *)(v18 + v23) = v15;
            break;
          default:
            return (__int128 *)a2;
        }
      }
      else if ((v25 - 227) < 2 || (v25 - 234) < 2 || (v25 - 239) < 2)
      {
        v26 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v11 & 8) != 0)
          v26 = (uint64_t *)(v11 - 16);
        v27 = *v26;
        *(_QWORD *)(v18 + v23) = v15;
        if (v15
          && (v15 & 0xFFFE000000000002) == 0
          && *(_DWORD *)(v27 + 760) >= *(unsigned __int8 *)(v11 + 7))
        {
          v29 = a2;
          JSC::Heap::writeBarrierSlowPath(v27 + 192, v11);
          return (__int128 *)v29;
        }
      }
    }
  }
  return (__int128 *)a2;
}

__int128 *slow_path_wasm_table_get(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v3 = *a2;
  if (v3 == 141)
  {
    v7 = *((__int16 *)a2 + 1);
    v8 = 1073741760;
    v4 = v7 + 1073741760;
    if (v7 <= 63)
      v4 = *((__int16 *)a2 + 1);
    v9 = *((__int16 *)a2 + 2);
    v6 = *((unsigned __int16 *)a2 + 3);
    if ((int)v9 <= 63)
      goto LABEL_14;
    goto LABEL_7;
  }
  if (v3 != 142)
  {
    v13 = (char)a2[1];
    v8 = 1073741808;
    v4 = v13 + 1073741808;
    if (v13 <= 15)
      v4 = (char)a2[1];
    v9 = (char)a2[2];
    v6 = a2[3];
    if ((int)v9 <= 15)
    {
LABEL_14:
      v14 = v9 << 32;
      goto LABEL_16;
    }
LABEL_7:
    v5 = (v9 + v8);
    goto LABEL_8;
  }
  v4 = *(_DWORD *)(a2 + 2);
  v5 = *(unsigned int *)(a2 + 6);
  v6 = *(_DWORD *)(a2 + 10);
LABEL_8:
  if ((int)v5 >= 0x40000000)
  {
    v10 = v5 - 0x40000000;
    v11 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v11 <= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x198F9AC20);
    }
    v12 = (uint64_t *)&v11[2 * v10 + 2];
    goto LABEL_17;
  }
  v14 = v5 << 32;
LABEL_16:
  v12 = (uint64_t *)(a1 + (v14 >> 29));
LABEL_17:
  v15 = *v12;
  if ((v15 & 0x80000000) != 0)
    goto LABEL_27;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8) + 204) <= v6)
    goto LABEL_32;
  v16 = *(_QWORD *)(120 * *(unsigned int *)(a3 + 112) + 8 * v6 + a3 + 152);
  if (*(_DWORD *)(v16 + 4) <= v15)
  {
LABEL_27:
    *(_DWORD *)(a1 + 32) = 1;
    return &xmmword_1ECF4C7EB;
  }
  if (!*(_QWORD *)(v16 + 40))
  {
    __break(0xC471u);
    JUMPOUT(0x198F9AC00);
  }
  if (*(_BYTE *)(v16 + 13) != 1)
  {
    if (!*(_BYTE *)(v16 + 13))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v16 + 48) + 8 * v15);
      goto LABEL_25;
    }
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x198F9ABE0);
  }
  v17 = (uint64_t *)(*(_QWORD *)(v16 + 48) + 48 * v15 + 40);
LABEL_25:
  v18 = *v17;
  if (!v18)
    goto LABEL_27;
  *(_QWORD *)(a1 + 8 * v4) = v18;
  return (__int128 *)a2;
}

__int128 *slow_path_wasm_table_set(uint64_t a1, unsigned __int8 *a2, JSC::Wasm *this)
{
  unsigned __int8 *v3;
  int v5;
  int v6;
  int v7;
  JSC::Wasm::Instance *v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t *v16;

  v3 = a2;
  v5 = *a2;
  if (v5 == 141)
  {
    v6 = *((__int16 *)a2 + 1);
    v9 = 1073741760;
    v7 = *((__int16 *)a2 + 2);
    if (v7 > 63)
      v7 += 1073741760;
    v8 = (JSC::Wasm::Instance *)*((unsigned __int16 *)a2 + 3);
    if (v6 <= 63)
      goto LABEL_15;
  }
  else
  {
    if (v5 == 142)
    {
      v6 = *(_DWORD *)(a2 + 2);
      v7 = *(_DWORD *)(a2 + 6);
      v8 = (JSC::Wasm::Instance *)*(unsigned int *)(a2 + 10);
      goto LABEL_12;
    }
    v6 = (char)a2[1];
    v9 = 1073741808;
    v7 = (char)a2[2];
    if (v7 > 15)
      v7 += 1073741808;
    v8 = (JSC::Wasm::Instance *)a2[3];
    if (v6 < 16)
      goto LABEL_15;
  }
  v6 += v9;
LABEL_12:
  if (v6 < 0x40000000)
  {
LABEL_15:
    v12 = (unsigned int *)(a1 + 8 * v6);
    goto LABEL_16;
  }
  v10 = v6 - 0x40000000;
  v11 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v11 <= v10)
    goto LABEL_23;
  v12 = &v11[2 * v10 + 2];
LABEL_16:
  v13 = *v12;
  if (v7 >= 0x40000000)
  {
    v14 = v7 - 0x40000000;
    v15 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v15 > v14)
    {
      v16 = (uint64_t *)&v15[2 * v14 + 2];
      goto LABEL_20;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x198F9ADC0);
  }
  v16 = (uint64_t *)(a1 + 8 * v7);
LABEL_20:
  if (!JSC::Wasm::tableSet(this, v8, v13, *v16))
  {
    *(_DWORD *)(a1 + 32) = 1;
    return &xmmword_1ECF4C7EB;
  }
  return (__int128 *)v3;
}

__int128 *slow_path_wasm_table_init(uint64_t a1, unsigned __int8 *a2, JSC::Wasm::Instance *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int *v17;
  int *v18;
  int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;

  v8 = a2;
  v9 = *a2;
  if (v9 == 141)
  {
    v10 = *((__int16 *)a2 + 1);
    v15 = 1073741760;
    v11 = *((__int16 *)a2 + 2);
    if (v11 > 63)
      v11 += 1073741760;
    v12 = *((__int16 *)a2 + 3);
    if (v12 > 63)
      v12 += 1073741760;
    v13 = *((unsigned __int16 *)a2 + 4);
    v14 = *((unsigned __int16 *)a2 + 5);
    if (v10 <= 63)
      goto LABEL_19;
  }
  else
  {
    if (v9 == 142)
    {
      v10 = *(_DWORD *)(a2 + 2);
      v11 = *(_DWORD *)(a2 + 6);
      v12 = *(_DWORD *)(a2 + 10);
      v13 = *(_DWORD *)(a2 + 14);
      v14 = *(_DWORD *)(a2 + 18);
      goto LABEL_16;
    }
    v10 = (char)a2[1];
    v15 = 1073741808;
    v11 = (char)a2[2];
    if (v11 > 15)
      v11 += 1073741808;
    v12 = (char)a2[3];
    if (v12 > 15)
      v12 += 1073741808;
    v13 = a2[4];
    v14 = a2[5];
    if (v10 < 16)
      goto LABEL_19;
  }
  v10 += v15;
LABEL_16:
  if (v10 < 0x40000000)
  {
LABEL_19:
    v18 = (int *)(a1 + 8 * v10);
    goto LABEL_20;
  }
  v16 = v10 - 0x40000000;
  v17 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v17 <= v16)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9B0E8);
  }
  v18 = (int *)&v17[2 * v16 + 2];
LABEL_20:
  v19 = *v18;
  if (v11 < 0x40000000)
  {
    v22 = (unsigned int *)(a1 + 8 * v11);
  }
  else
  {
    v20 = v11 - 0x40000000;
    v21 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v21 <= v20)
      goto LABEL_52;
    v22 = &v21[2 * v20 + 2];
  }
  v23 = *v22;
  if (v12 < 0x40000000)
  {
    v26 = (unsigned int *)(a1 + 8 * v12);
  }
  else
  {
    v24 = v12 - 0x40000000;
    v25 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v25 <= v24)
    {
      __break(0xC471u);
      JUMPOUT(0x198F9B0A8);
    }
    v26 = &v25[2 * v24 + 2];
  }
  v27 = *v26;
  if (__CFADD__(v23, (_DWORD)v27) || __CFADD__(v19, (_DWORD)v27))
    goto LABEL_45;
  v28 = *(_QWORD *)(*((_QWORD *)this + 7) + 8);
  if (*(_DWORD *)(v28 + 204) <= v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9B0C8);
  }
  if ((v27 + v19) > *(_DWORD *)(*((_QWORD *)this + 15 * *((unsigned int *)this + 28) + v14 + 19) + 4))
  {
LABEL_45:
    *(_DWORD *)(a1 + 32) = 1;
    return &xmmword_1ECF4C7EB;
  }
  if (*(_DWORD *)(v28 + 188) <= v13)
  {
LABEL_52:
    __break(0xC471u);
    JUMPOUT(0x198F9B088);
  }
  v29 = (char *)this + 128;
  v30 = *((_QWORD *)this + 16);
  if (v30 >= 0)
    v29 = (char *)(2 * v30 + 8);
  if (((*(_QWORD *)&v29[((unint64_t)v13 >> 3) & 0x1FFFFFF8] >> v13) & 1) == 0
    || (v31 = *(_QWORD *)(v28 + 176)) == 0)
  {
    if (!((_DWORD)v27 + v23))
      return (__int128 *)v8;
    goto LABEL_45;
  }
  v32 = *(_DWORD *)(v31 + 80 * v13 + 60);
  v33 = v27 + v23;
  if (v32)
    v34 = v33 > v32;
  else
    v34 = 1;
  if (v34)
  {
    if (v33 <= v32)
      return (__int128 *)v8;
    goto LABEL_45;
  }
  JSC::Wasm::Instance::tableInit(this, v19, v23, v27, v13, v14, a7, a8);
  return (__int128 *)v8;
}

__int128 *slow_path_wasm_table_fill(uint64_t a1, unsigned __int8 *a2, JSC::Wasm *this)
{
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  JSC::Wasm::Instance *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;

  v4 = a2;
  v5 = *a2;
  if (v5 == 141)
  {
    v6 = *((__int16 *)a2 + 1);
    v10 = 1073741760;
    v11 = *((__int16 *)a2 + 2);
    v7 = v11 + 1073741760;
    if (v11 <= 63)
      v7 = *((__int16 *)a2 + 2);
    v8 = *((__int16 *)a2 + 3);
    if (v8 > 63)
      v8 += 1073741760;
    v9 = (JSC::Wasm::Instance *)*((unsigned __int16 *)a2 + 4);
    if (v6 <= 63)
      goto LABEL_19;
  }
  else
  {
    if (v5 == 142)
    {
      v6 = *(_DWORD *)(a2 + 2);
      v7 = *(_DWORD *)(a2 + 6);
      v8 = *(_DWORD *)(a2 + 10);
      v9 = (JSC::Wasm::Instance *)*(unsigned int *)(a2 + 14);
      goto LABEL_16;
    }
    v6 = (char)a2[1];
    v10 = 1073741808;
    v12 = (char)a2[2];
    v7 = v12 + 1073741808;
    if (v12 <= 15)
      v7 = (char)a2[2];
    v8 = (char)a2[3];
    if (v8 > 15)
      v8 += 1073741808;
    v9 = (JSC::Wasm::Instance *)a2[4];
    if (v6 < 16)
      goto LABEL_19;
  }
  v6 += v10;
LABEL_16:
  if (v6 < 0x40000000)
  {
LABEL_19:
    v15 = (unsigned int *)(a1 + 8 * v6);
    goto LABEL_20;
  }
  v13 = v6 - 0x40000000;
  v14 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v14 <= v13)
    goto LABEL_38;
  v15 = &v14[2 * v13 + 2];
LABEL_20:
  v16 = *v15;
  if (v7 >= 0x40000000)
  {
    v17 = v7 - 0x40000000;
    v18 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v18 > v17)
    {
      v19 = (uint64_t *)&v18[2 * v17 + 2];
      goto LABEL_24;
    }
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x198F9B354);
  }
  v19 = (uint64_t *)(a1 + 8 * v7);
LABEL_24:
  v20 = *v19;
  if (v8 < 0x40000000)
  {
    v23 = (unsigned int *)(a1 + 8 * v8);
  }
  else
  {
    v21 = v8 - 0x40000000;
    v22 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v22 <= v21)
    {
      __break(0xC471u);
      JUMPOUT(0x198F9B374);
    }
    v23 = &v22[2 * v21 + 2];
  }
  v24 = *v23;
  if (__CFADD__(v16, *v23))
    goto LABEL_31;
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 8) + 204) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9B394);
  }
  if (v24 + v16 > *(_DWORD *)(*((_QWORD *)this + 15 * *((unsigned int *)this + 28) + v9 + 19) + 4))
  {
LABEL_31:
    *(_DWORD *)(a1 + 32) = 1;
    return &xmmword_1ECF4C7EB;
  }
  else
  {
    for (; v24; --v24)
      JSC::Wasm::tableSet(this, v9, v16++, v20);
  }
  return (__int128 *)v4;
}

unsigned __int8 *slow_path_wasm_table_grow(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v13;
  int v14;
  JSC::Wasm::Instance *v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;

  v11 = *a2;
  if (v11 == 141)
  {
    v16 = *((__int16 *)a2 + 1);
    v17 = 1073741760;
    if (v16 <= 63)
      v12 = *((__int16 *)a2 + 1);
    else
      v12 = v16 + 1073741760;
    v13 = *((__int16 *)a2 + 2);
    v14 = *((__int16 *)a2 + 3);
    if (v14 > 63)
      v14 += 1073741760;
    v15 = (JSC::Wasm::Instance *)*((unsigned __int16 *)a2 + 4);
    if (v13 <= 63)
      goto LABEL_21;
  }
  else
  {
    if (v11 == 142)
    {
      v12 = *(_DWORD *)(a2 + 2);
      v13 = *(_DWORD *)(a2 + 6);
      v14 = *(_DWORD *)(a2 + 10);
      v15 = (JSC::Wasm::Instance *)*(unsigned int *)(a2 + 14);
      goto LABEL_18;
    }
    v18 = (char)a2[1];
    v17 = 1073741808;
    if (v18 <= 15)
      v12 = (char)a2[1];
    else
      v12 = v18 + 1073741808;
    v13 = (char)a2[2];
    v14 = (char)a2[3];
    if (v14 > 15)
      v14 += 1073741808;
    v15 = (JSC::Wasm::Instance *)a2[4];
    if (v13 < 16)
      goto LABEL_21;
  }
  v13 += v17;
LABEL_18:
  if (v13 < 0x40000000)
  {
LABEL_21:
    v21 = (uint64_t *)(a1 + 8 * v13);
    goto LABEL_22;
  }
  v19 = v13 - 0x40000000;
  v20 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v20 <= v19)
    goto LABEL_37;
  v21 = (uint64_t *)&v20[2 * v19 + 2];
LABEL_22:
  v22 = *v21;
  if (v14 < 0x40000000)
  {
    v25 = (int *)(a1 + 8 * v14);
  }
  else
  {
    v23 = v14 - 0x40000000;
    v24 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v24 <= v23)
    {
      __break(0xC471u);
      JUMPOUT(0x198F9B640);
    }
    v25 = (int *)&v24[2 * v23 + 2];
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8) + 204) <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9B620);
  }
  v26 = 8 * v15 + 152;
  v27 = *(_QWORD *)(a3 + v26 + 120 * *(unsigned int *)(a3 + 112));
  v28 = *(unsigned int *)(v27 + 4);
  if ((JSC::Wasm::Table::grow(v27, *v25, 2, a4, a5, a6, a7, a8) & 0xFF00000000) == 0)
  {
    v28 = -1;
    goto LABEL_34;
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8) + 204) <= v15)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x198F9B5D4);
  }
  v29 = v28;
  while (v29 < *(_DWORD *)(*(_QWORD *)(a3 + v26 + 120 * *(unsigned int *)(a3 + 112)) + 4))
  {
    JSC::Wasm::tableSet((JSC::Wasm *)a3, v15, v29++, v22);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8) + 204) <= v15)
      goto LABEL_37;
  }
LABEL_34:
  *(_QWORD *)(a1 + 8 * v12) = v28;
  return a2;
}

unsigned __int8 *slow_path_wasm_grow_memory(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  int v21;
  int v23;
  int v24;

  v10 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(v10 + 40) = a1;
  v11 = *a2;
  if (v11 == 141)
  {
    v14 = *((__int16 *)a2 + 1);
    v15 = 1073741760;
    if (v14 <= 63)
      v12 = *((__int16 *)a2 + 1);
    else
      v12 = v14 + 1073741760;
    v13 = *((__int16 *)a2 + 2);
    if (v13 <= 63)
      goto LABEL_17;
  }
  else
  {
    if (v11 == 142)
    {
      v12 = *(_DWORD *)(a2 + 2);
      v13 = *(_DWORD *)(a2 + 6);
      goto LABEL_14;
    }
    v16 = (char)a2[1];
    v15 = 1073741808;
    if (v16 <= 15)
      v12 = (char)a2[1];
    else
      v12 = v16 + 1073741808;
    v13 = (char)a2[2];
    if (v13 < 16)
      goto LABEL_17;
  }
  v13 += v15;
LABEL_14:
  if (v13 < 0x40000000)
  {
LABEL_17:
    v19 = (unsigned int *)(a1 + 8 * v13);
    goto LABEL_18;
  }
  v17 = v13 - 0x40000000;
  v18 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v18 <= v17)
  {
    __break(0xC471u);
    goto LABEL_28;
  }
  v19 = &v18[2 * v17 + 2];
LABEL_18:
  v20 = *(_QWORD *)v19;
  if ((v20 & 0x80000000) == 0)
  {
    JSC::Wasm::Memory::grow(*(_QWORD *)(a3 + 64), v10, v20, a4, a5, a6, a7, a8, (uint64_t)&v23);
    if (!v24)
    {
      v21 = v23;
      goto LABEL_24;
    }
    if (v24 == 1)
    {
      if (v23 < 5u)
        goto LABEL_22;
    }
    else
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    __break(0xC471u);
LABEL_28:
    JUMPOUT(0x198F9B7C0);
  }
LABEL_22:
  v21 = -1;
LABEL_24:
  *(_QWORD *)(a1 + 8 * v12) = v21;
  return a2;
}

uint64_t slow_path_wasm_call(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  int *v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a2;
  if (v3 == 141)
  {
    v4 = *((unsigned __int16 *)a2 + 1);
    v5 = *((unsigned __int16 *)a2 + 2);
  }
  else if (v3 == 142)
  {
    v5 = *(_DWORD *)(a2 + 6);
    if (v5 < 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198F9B978);
    }
    v4 = *(_DWORD *)(a2 + 2);
  }
  else
  {
    v4 = a2[1];
    v5 = a2[2];
  }
  v6 = *(_QWORD *)(a3 + 56);
  if (*(_DWORD *)(*(_QWORD *)(v6 + 8) + 36) <= v4)
  {
    v7 = *(_QWORD **)(v6 + 8 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a3 + 64) + 8) + 6) + 16);
    v8 = (int *)v7[9];
    if (v8)
    {
      v9 = *v8;
      v10 = v4 - *v8;
      if (v4 < *v8)
      {
        __break(0xC471u);
        JUMPOUT(0x198F9B8ECLL);
      }
      v11 = (unsigned int *)v7[7];
      if (*v11 > v10)
        goto LABEL_8;
    }
    else
    {
      v11 = (unsigned int *)v7[7];
      if (*v11 > v4)
      {
        v9 = 0;
        v10 = v4;
LABEL_8:
        v12 = v4 - v9;
        v13 = (unsigned int *)v7[8];
        if (*v13 <= v12)
        {
          __break(0xC471u);
          JUMPOUT(0x198F9B92CLL);
        }
        v14 = *(_QWORD *)&v11[2 * v10 + 2];
        v15 = *(_QWORD *)&v13[2 * v12 + 2];
        if (v15)
          v15 = (v15 - qword_1ECF4C080) | 3;
        goto LABEL_11;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x198F9B90CLL);
  }
  if (*(_DWORD *)(a3 + 112) <= v4)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9B998);
  }
  v15 = 0;
  v14 = *(_QWORD *)(a3 + 120 * v4 + 168);
LABEL_11:
  *(_QWORD *)(a1 + 8 * -v5 + 24) = v15;
  return v14;
}

uint64_t JSC::LLInt::doWasmCall(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _QWORD *v4;
  int *v5;
  int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a2 + 56);
  if (*(_DWORD *)(*(_QWORD *)(v3 + 8) + 36) > a3)
  {
    if (*(_DWORD *)(a2 + 112) > a3)
    {
      v12 = 0;
      v11 = *(_QWORD *)(a2 + 120 * a3 + 168);
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  v4 = *(_QWORD **)(v3 + 8 * *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 8) + 6) + 16);
  v5 = (int *)v4[9];
  if (!v5)
  {
    v8 = (unsigned int *)v4[7];
    if (*v8 > a3)
    {
      v6 = 0;
      v7 = a3;
      goto LABEL_5;
    }
LABEL_12:
    __break(0xC471u);
    JUMPOUT(0x198F9BA90);
  }
  v6 = *v5;
  v7 = a3 - *v5;
  if (a3 < *v5)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x198F9BA70);
  }
  v8 = (unsigned int *)v4[7];
  if (*v8 <= v7)
    goto LABEL_12;
LABEL_5:
  v9 = a3 - v6;
  v10 = (unsigned int *)v4[8];
  if (*v10 <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9BAB0);
  }
  v11 = *(_QWORD *)&v8[2 * v7 + 2];
  v12 = *(_QWORD *)&v10[2 * v9 + 2];
  if (v12)
    v12 = (v12 - qword_1ECF4C080) | 3;
LABEL_8:
  *(_QWORD *)(a1 + 24) = v12;
  return v11;
}

__int128 *slow_path_wasm_call_indirect(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  _QWORD *v19;
  int v21;
  unsigned int v22;
  unsigned int *v23;
  int v24;

  v9 = *a2;
  if (v9 == 142)
  {
    v10 = *(_DWORD *)(a2 + 2);
    v11 = *(_DWORD *)(a2 + 6);
    v12 = *(_DWORD *)(a2 + 10);
    v13 = *(_DWORD *)(a2 + 18);
  }
  else
  {
    if (v9 == 141)
    {
      v10 = *((__int16 *)a2 + 1);
      v11 = *((unsigned __int16 *)a2 + 2);
      v12 = *((unsigned __int16 *)a2 + 3);
      v13 = *((unsigned __int16 *)a2 + 5);
      if (v10 <= 63)
        goto LABEL_4;
      v21 = 1073741760;
    }
    else
    {
      v10 = (char)a2[1];
      v11 = a2[2];
      v12 = a2[3];
      v13 = a2[5];
      if (v10 < 16)
      {
LABEL_4:
        v14 = (unsigned int *)(a1 + 8 * v10);
        goto LABEL_5;
      }
      v21 = 1073741808;
    }
    v10 += v21;
  }
  if (v10 < 0x40000000)
    goto LABEL_4;
  v22 = v10 - 0x40000000;
  v23 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v23 <= v22)
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x198F9BC84);
  }
  v14 = &v23[2 * v22 + 2];
LABEL_5:
  if (v12 < 0)
    goto LABEL_31;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8) + 204) <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9BCA4);
  }
  v15 = *(_QWORD *)v14;
  v16 = *(_QWORD *)(120 * *(unsigned int *)(a3 + 112) + 8 * v13 + a3 + 152);
  if (*(_BYTE *)(v16 + 13) != 1)
    v16 = 0;
  if (*(_DWORD *)(v16 + 4) <= v15)
  {
    v24 = 2;
LABEL_29:
    *(_DWORD *)(a1 + 32) = v24;
    return &xmmword_1ECF4C7EB;
  }
  v17 = *(_QWORD *)(v16 + 48) + 48 * v15;
  if (!*(_QWORD *)v17)
  {
    v24 = 3;
    goto LABEL_29;
  }
  v18 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 88);
  if (*v18 <= v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9BCC4);
  }
  if ((JSC::Wasm::isSubtypeIndex(*(JSC::Wasm **)v17, *(JSC::Wasm **)&v18[2 * v11 + 2], a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
    v19 = *(_QWORD **)(v17 + 16);
    if (v19)
      v19 = (_QWORD *)*v19;
    *(_QWORD *)(a1 + 8 * -v12 + 24) = v19;
    return **(__int128 ***)(v17 + 8);
  }
  else
  {
    *(_DWORD *)(a1 + 32) = 6;
    return &xmmword_1ECF4C7EB;
  }
}

__int128 *JSC::LLInt::doWasmCallIndirect(uint64_t a1, uint64_t a2, JSC::Wasm::Instance *this, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  _QWORD *v20;
  int v22;

  v10 = JSC::Wasm::Instance::table(this, a5);
  if (*(_BYTE *)(v10 + 13) == 1)
    v17 = v10;
  else
    v17 = 0;
  if (*(_DWORD *)(v17 + 4) <= a4)
  {
    v22 = 2;
LABEL_14:
    *(_DWORD *)(a2 + 32) = v22;
    return &xmmword_1ECF4C7EB;
  }
  v18 = *(_QWORD *)(v17 + 48) + 48 * a4;
  if (!*(_QWORD *)v18)
  {
    v22 = 3;
    goto LABEL_14;
  }
  v19 = *(unsigned int **)((*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 88);
  if (*v19 <= a6)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9BE4CLL);
  }
  if ((JSC::Wasm::isSubtypeIndex(*(JSC::Wasm **)v18, *(JSC::Wasm **)&v19[2 * a6 + 2], v11, v12, v13, v14, v15, v16) & 1) != 0)
  {
    v20 = *(_QWORD **)(v18 + 16);
    if (v20)
      v20 = (_QWORD *)*v20;
    *(_QWORD *)(a1 + 24) = v20;
    return **(__int128 ***)(v18 + 8);
  }
  else
  {
    *(_DWORD *)(a2 + 32) = 6;
    return &xmmword_1ECF4C7EB;
  }
}

__int128 *slow_path_wasm_call_ref(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v2 = *a2;
  if (v2 != 141)
  {
    if (v2 == 142)
    {
      v3 = *(_DWORD *)(a2 + 2);
      v4 = *(_DWORD *)(a2 + 10);
      goto LABEL_9;
    }
    v3 = (char)a2[1];
    v4 = a2[3];
    if (v3 >= 16)
    {
      v5 = 1073741808;
      goto LABEL_8;
    }
LABEL_12:
    v8 = (unsigned int *)(a1 + 8 * v3);
    goto LABEL_13;
  }
  v3 = *((__int16 *)a2 + 1);
  v4 = *((unsigned __int16 *)a2 + 3);
  if (v3 <= 63)
    goto LABEL_12;
  v5 = 1073741760;
LABEL_8:
  v3 += v5;
LABEL_9:
  if (v3 < 0x40000000)
    goto LABEL_12;
  v6 = v3 - 0x40000000;
  v7 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v7 <= v6)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x198F9BFA0);
  }
  v8 = &v7[2 * v6 + 2];
LABEL_13:
  if (v4 < 0)
    goto LABEL_20;
  v9 = *(_QWORD *)v8;
  if (*(_QWORD *)v8 == 2)
  {
    *(_DWORD *)(a1 + 32) = 4;
    return &xmmword_1ECF4C7EB;
  }
  else
  {
    v11 = a1 + 8 * -v4;
    v12 = *(_QWORD *)(v9 + 48);
    v13 = *(uint64_t **)(v9 + 56);
    if (v13)
      v14 = *v13;
    else
      v14 = 0;
    *(_QWORD *)(v11 + 24) = v14;
    return *(__int128 **)v12;
  }
}

uint64_t slow_path_wasm_tail_call(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  int v5;
  uint64_t result;

  v3 = *a2;
  if (v3 != 142)
  {
    if (v3 == 141)
    {
      v4 = *((unsigned __int16 *)a2 + 1);
      v5 = *((unsigned __int16 *)a2 + 2);
    }
    else
    {
      v4 = a2[1];
      v5 = a2[2];
    }
    return JSC::LLInt::doWasmCall(a1 + 8 * -v5, a3, v4);
  }
  v5 = *(_DWORD *)(a2 + 6);
  if ((v5 & 0x80000000) == 0)
  {
    v4 = *(_DWORD *)(a2 + 2);
    return JSC::LLInt::doWasmCall(a1 + 8 * -v5, a3, v4);
  }
  result = 163;
  __break(0xC471u);
  return result;
}

__int128 *slow_path_wasm_tail_call_indirect(uint64_t a1, unsigned __int8 *a2, JSC::Wasm::Instance *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;

  v3 = *a2;
  if (v3 != 141)
  {
    if (v3 == 142)
    {
      v4 = *(_DWORD *)(a2 + 2);
      v5 = *(_DWORD *)(a2 + 6);
      v6 = *(_DWORD *)(a2 + 10);
      v7 = *(_DWORD *)(a2 + 22);
      goto LABEL_9;
    }
    v4 = (char)a2[1];
    v5 = a2[2];
    v6 = a2[3];
    v7 = a2[6];
    if (v4 >= 16)
    {
      v8 = 1073741808;
      goto LABEL_8;
    }
LABEL_12:
    v11 = (unsigned int *)(a1 + 8 * v4);
    goto LABEL_13;
  }
  v4 = *((__int16 *)a2 + 1);
  v5 = *((unsigned __int16 *)a2 + 2);
  v6 = *((unsigned __int16 *)a2 + 3);
  v7 = *((unsigned __int16 *)a2 + 6);
  if (v4 <= 63)
    goto LABEL_12;
  v8 = 1073741760;
LABEL_8:
  v4 += v8;
LABEL_9:
  if (v4 < 0x40000000)
    goto LABEL_12;
  v9 = v4 - 0x40000000;
  v10 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v10 <= v9)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x198F9C11CLL);
  }
  v11 = &v10[2 * v9 + 2];
LABEL_13:
  if (v6 < 0)
    goto LABEL_15;
  return JSC::LLInt::doWasmCallIndirect(a1 + 8 * -v6, a1, a3, *v11, v7, v5);
}

__int128 *slow_path_wasm_call_builtin(uint64_t a1, unsigned __int8 *a2, JSC::Wasm::Instance *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  JSC::Wasm::Instance **v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  unsigned int *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  JSC::Wasm::Instance *v36;
  int v37;
  unsigned int *v38;
  int v39;
  _BOOL4 v40;
  unint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  BOOL v51;
  unsigned int *v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  BOOL v58;
  unsigned int *v59;
  int v60;
  unint64_t v61;
  unsigned int *v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  _BOOL4 v71;
  uint64_t v72;
  unsigned int *v73;
  unint64_t v74;
  uint64_t v75;
  _BOOL4 v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int *v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  double v96;
  BOOL v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unsigned int *v101;
  uint64_t v102;
  unsigned int v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  unsigned int *v107;
  uint64_t v108;
  unint64_t v109;
  unsigned int *v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int *v116;
  int v117;
  size_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _BOOL4 v126;
  uint64_t v127;
  unint64_t v128;
  BOOL v129;
  uint64_t v130;
  _BOOL4 v131;
  uint64_t v132;
  int v133;
  unint64_t v134;
  BOOL v135;
  unsigned int *v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  unint64_t v141;
  BOOL v142;
  unsigned int *v143;
  int v144;
  unint64_t v145;
  unsigned int *v146;
  int v147;
  uint64_t v148;
  int v149;
  unsigned int v150;
  unint64_t v151;
  unint64_t v152;
  _BOOL4 v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int v156;
  unint64_t v157;
  unsigned int *v158;
  _BOOL4 v159;
  uint64_t v160;
  int v161;
  int v162;
  unsigned int v163;
  unint64_t v164;
  BOOL v165;
  unsigned int *v166;
  int v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  unint64_t v171;
  unsigned int *v172;
  int v173;
  unint64_t v174;
  unsigned int *v175;
  unint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unsigned int v183;
  uint64_t v184;
  unsigned int *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  unsigned int v191;
  int v192;
  unint64_t v193;
  uint64_t v194;
  unsigned int v195;
  size_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  _BOOL4 v201;
  uint64_t v202;
  unint64_t v203;
  BOOL v204;
  uint64_t v205;
  _BOOL4 v206;
  uint64_t v207;
  int v208;
  unsigned __int8 *v209;
  unint64_t v210;
  unsigned int *v211;
  int v212;
  uint64_t v213;
  unint64_t v214;
  BOOL v215;
  int v216;
  unint64_t v217;
  BOOL v218;
  unsigned int *v219;
  int v220;
  int v221;
  unsigned __int8 *v222;
  unint64_t v223;
  BOOL v224;
  unsigned int *v225;
  int v226;
  uint64_t v227;
  unsigned int v228;
  unsigned int v229;
  unint64_t v230;
  unsigned int *v231;
  unsigned int v232;
  uint64_t v233;
  JSC::JSWebAssemblyArray *v234;
  unsigned int v235;
  JSC::JSWebAssemblyArray *v236;
  unint64_t v237;
  int v238;
  uint64_t v239;
  unsigned int *v240;
  unint64_t v241;
  unsigned int *v242;
  int v243;
  uint64_t v244;
  int v245;
  unsigned int v246;
  unint64_t v247;
  BOOL v248;
  unsigned int *v249;
  int v250;
  int v251;
  int v252;
  unint64_t v253;
  BOOL v254;
  unsigned int *v255;
  int v256;
  uint64_t v257;
  int v258;
  unsigned int v259;
  unint64_t v260;
  unsigned int *v261;
  int v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  _BOOL4 v267;
  uint64_t v268;
  unsigned int *v269;
  unint64_t v270;
  uint64_t v271;
  _BOOL4 v272;
  uint64_t v273;
  int v274;
  int v275;
  unsigned int v276;
  unint64_t v277;
  unsigned int *v278;
  int v279;
  uint64_t v280;
  int v281;
  unsigned int v282;
  unint64_t v283;
  unsigned int *v284;
  int v285;
  unint64_t v286;
  unsigned int *v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  unsigned int *v291;
  int v292;
  unsigned int *v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int v296;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  JSC::Wasm::Instance *v302;
  JSC::Wasm::Instance *v303;
  unsigned int v304;
  JSC::Wasm::Instance *v305;
  unsigned int v306;
  unsigned int v307;
  JSC::Wasm::Instance *v308;
  JSC::Wasm *v309;
  JSC::Wasm *v310;
  JSC::Wasm::Instance *v311;
  JSC::Wasm *v312;
  JSC::Wasm::Instance *v313;
  JSC::Wasm::Instance *v314;
  unsigned int v315;
  JSC::Wasm::Instance *v316;
  JSC::Wasm *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char v323;
  char **v324;
  char *v325;

  v9 = a2;
  *(_QWORD *)(*((_QWORD *)this + 1) + 40) = a1;
  v11 = *a2;
  if (v11 == 141)
  {
    LOWORD(v12) = *((_WORD *)a2 + 1);
    v13 = *((unsigned __int16 *)a2 + 2);
    v14 = *((unsigned __int16 *)a2 + 3);
  }
  else if (v11 == 142)
  {
    v12 = *(_DWORD *)(a2 + 2);
    v13 = *(_DWORD *)(a2 + 6);
    v14 = *(_DWORD *)(a2 + 10);
  }
  else
  {
    LOBYTE(v12) = a2[1];
    v13 = a2[2];
    v14 = a2[3];
  }
  v15 = atomic_load(&qword_1ECF59058);
  if (v15 != -1)
  {
    v325 = &v323;
    v324 = &v325;
    std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
  }
  v16 = v12;
  v17 = a1 - 8 * v13 + 48;
  v18 = (unsigned int *)(v17 + 8 * v14);
  switch((char)v12)
  {
    case 0:
      v180 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
      if (*(_BYTE *)(v180 + 5))
        v181 = atomic_load((unint64_t *)(v180 + 16));
      else
        v181 = *(_QWORD *)(v180 + 16);
      v95 = v181 >> 16;
      goto LABEL_652;
    case 1:
      v314 = this;
      v182 = atomic_load(&qword_1ECF59058);
      if (v182 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v183 = _MergedGlobals_54 == 0;
      v184 = _MergedGlobals_54 != 0;
      if (_MergedGlobals_54)
        v185 = v18;
      else
        v185 = (unsigned int *)(a1 - 8 * v13 + 48);
      v186 = *v185;
      v187 = atomic_load(&qword_1ECF59058);
      if (v187 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v184)
        v188 = a1 - 8 * v13 + 48;
      else
        v188 = (uint64_t)v18;
      if (_MergedGlobals_54 == v184)
        v189 = v183;
      else
        v189 = v184;
      if (_MergedGlobals_54 == v184)
        v190 = v184;
      else
        v190 = v189 + 1;
      if (_MergedGlobals_54 == v184)
        v191 = v184;
      else
        v191 = v189 + 1;
      if (_MergedGlobals_54 == v184)
        v183 = v189 + 1;
      v192 = *(_DWORD *)(v188 + 8 * v189);
      v193 = atomic_load(&qword_1ECF59058);
      if (v193 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v190)
        v194 = a1 - 8 * v13 + 48;
      else
        v194 = (uint64_t)v18;
      if (_MergedGlobals_54 == v190)
        v195 = v183;
      else
        v195 = v191;
      v196 = *(unsigned int *)(v194 + 8 * v195);
      if (__CFADD__((_DWORD)v186, (_DWORD)v196))
        goto LABEL_396;
      v197 = *((_QWORD *)v314 + 8);
      v198 = *(_QWORD *)(v197 + 8);
      v199 = *(_BYTE *)(v198 + 5) ? atomic_load((unint64_t *)(v198 + 16)) : *(_QWORD *)(v198 + 16);
      if (v199 < (v196 + v186))
        goto LABEL_396;
      v294 = JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(v197 + 8));
      memset((void *)(v294 + v186), v192, v196);
      return (__int128 *)v9;
    case 2:
      v311 = this;
      v104 = atomic_load(&qword_1ECF59058);
      if (v104 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v105 = _MergedGlobals_54 == 0;
      v106 = _MergedGlobals_54 != 0;
      if (_MergedGlobals_54)
        v107 = v18;
      else
        v107 = (unsigned int *)(a1 - 8 * v13 + 48);
      v108 = *v107;
      v109 = atomic_load(&qword_1ECF59058);
      if (v109 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v106)
        v110 = (unsigned int *)v17;
      else
        v110 = v18;
      if (_MergedGlobals_54 == v106)
        v111 = v105;
      else
        v111 = v106;
      if (_MergedGlobals_54 == v106)
        v112 = v106;
      else
        v112 = (v111 + 1);
      if (_MergedGlobals_54 == v106)
        v113 = v106;
      else
        v113 = v111 + 1;
      if (_MergedGlobals_54 == v106)
        v105 = v111 + 1;
      v114 = v110[2 * v111];
      v115 = atomic_load(&qword_1ECF59058);
      if (v115 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v112)
        v116 = (unsigned int *)v17;
      else
        v116 = v18;
      if (_MergedGlobals_54 == v112)
        v117 = v105;
      else
        v117 = v113;
      v118 = v116[2 * v117];
      if (__CFADD__((_DWORD)v108, (_DWORD)v118)
        || __CFADD__((_DWORD)v114, (_DWORD)v118)
        || ((v119 = *((_QWORD *)v311 + 8), v120 = *(_QWORD *)(v119 + 8), *(_BYTE *)(v120 + 5))
          ? (v121 = atomic_load((unint64_t *)(v120 + 16)))
          : (v121 = *(_QWORD *)(v120 + 16)),
            v121 < (v118 + v108)
         || ((v122 = *(_QWORD *)(v119 + 8), *(_BYTE *)(v122 + 5))
           ? (v123 = atomic_load((unint64_t *)(v122 + 16)))
           : (v123 = *(_QWORD *)(v122 + 16)),
             v123 < (v118 + v114))))
      {
LABEL_396:
        *(_DWORD *)(a1 + 32) = 0;
        return &xmmword_1ECF4C7EB;
      }
      if ((_DWORD)v118)
      {
        v124 = JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(v119 + 8));
        memmove((void *)(v124 + v108), (const void *)(v124 + v114), v118);
      }
      return (__int128 *)v9;
    case 3:
      v152 = atomic_load(&qword_1ECF59058);
      if (v152 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v313 = this;
      v320 = a1;
      v153 = _MergedGlobals_54 == 0;
      v154 = _MergedGlobals_54 != 0;
      if (_MergedGlobals_54)
        v155 = v18;
      else
        v155 = (unsigned int *)v17;
      v156 = *v155;
      v157 = atomic_load(&qword_1ECF59058);
      if (v157 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v154)
        v158 = (unsigned int *)v17;
      else
        v158 = v18;
      if (_MergedGlobals_54 == v154)
        v159 = v153;
      else
        v159 = v154;
      if (_MergedGlobals_54 == v154)
        v160 = v154;
      else
        v160 = (v159 + 1);
      if (_MergedGlobals_54 == v154)
        v161 = v154;
      else
        v161 = v159 + 1;
      if (_MergedGlobals_54 == v154)
        v162 = v159 + 1;
      else
        v162 = v153;
      v163 = v158[2 * v159];
      v164 = atomic_load(&qword_1ECF59058);
      if (v164 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v165 = _MergedGlobals_54 == v160;
      if (_MergedGlobals_54 == v160)
        v166 = (unsigned int *)v17;
      else
        v166 = v18;
      if (_MergedGlobals_54 == v160)
        v167 = v162;
      else
        v167 = v161;
      if (_MergedGlobals_54 == v160)
        v168 = v160;
      else
        v168 = (v167 + 1);
      if (_MergedGlobals_54 == v160)
        v169 = v161;
      else
        v169 = v167 + 1;
      if (v165)
        v162 = v167 + 1;
      v170 = v166[2 * v167];
      v171 = atomic_load(&qword_1ECF59058);
      if (v171 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v168)
        v172 = (unsigned int *)v17;
      else
        v172 = v18;
      if (_MergedGlobals_54 == v168)
        v173 = v162;
      else
        v173 = v169;
      if (JSC::Wasm::Instance::memoryInit(v313, v156, v163, v170, v172[2 * v173]))
        return (__int128 *)v9;
      *(_DWORD *)(v320 + 32) = 0;
      return &xmmword_1ECF4C7EB;
    case 4:
      v100 = atomic_load(&qword_1ECF59058);
      if (v100 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54)
        v101 = v18;
      else
        v101 = (unsigned int *)(a1 - 8 * v13 + 48);
      v95 = *(int *)(JSC::Wasm::Instance::table(this, *v101) + 4);
      goto LABEL_652;
    case 5:
      v316 = this;
      v237 = atomic_load(&qword_1ECF59058);
      if (v237 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v238 = _MergedGlobals_54 == 0;
      v239 = _MergedGlobals_54 != 0;
      if (_MergedGlobals_54)
        v240 = v18;
      else
        v240 = (unsigned int *)v17;
      v306 = *v240;
      v241 = atomic_load(&qword_1ECF59058);
      if (v241 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v239)
        v242 = (unsigned int *)v17;
      else
        v242 = v18;
      if (_MergedGlobals_54 == v239)
        v243 = v238;
      else
        v243 = v239;
      if (_MergedGlobals_54 == v239)
        v244 = v239;
      else
        v244 = (v243 + 1);
      if (_MergedGlobals_54 == v239)
        v245 = v239;
      else
        v245 = v243 + 1;
      if (_MergedGlobals_54 == v239)
        v238 = v243 + 1;
      v246 = v242[2 * v243];
      v247 = atomic_load(&qword_1ECF59058);
      if (v247 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v248 = _MergedGlobals_54 == v244;
      if (_MergedGlobals_54 == v244)
        v249 = (unsigned int *)v17;
      else
        v249 = v18;
      if (_MergedGlobals_54 == v244)
        v250 = v238;
      else
        v250 = v245;
      if (_MergedGlobals_54 == v244)
      {
        v251 = v245;
      }
      else
      {
        v244 = (v250 + 1);
        v251 = v250 + 1;
      }
      if (v248)
        v238 = v250 + 1;
      v252 = v249[2 * v250];
      v253 = atomic_load(&qword_1ECF59058);
      if (v253 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v254 = _MergedGlobals_54 == v244;
      if (_MergedGlobals_54 == v244)
        v255 = (unsigned int *)v17;
      else
        v255 = v18;
      if (_MergedGlobals_54 == v244)
        v256 = v238;
      else
        v256 = v251;
      if (_MergedGlobals_54 == v244)
        v257 = v244;
      else
        v257 = (v256 + 1);
      if (_MergedGlobals_54 == v244)
        v258 = v251;
      else
        v258 = v256 + 1;
      if (v254)
        v238 = v256 + 1;
      v259 = v255[2 * v256];
      v260 = atomic_load(&qword_1ECF59058);
      if (v260 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v257)
        v261 = (unsigned int *)v17;
      else
        v261 = v18;
      if (_MergedGlobals_54 == v257)
        v262 = v238;
      else
        v262 = v258;
      v263 = v261[2 * v262];
      v264 = JSC::Wasm::Instance::table(v316, v259);
      v265 = JSC::Wasm::Instance::table(v316, v263);
      if (((v246 | v306 | v252) & 0x80000000) != 0
        || __CFADD__(v306, v252)
        || v306 + v252 > *(_DWORD *)(v264 + 4)
        || __CFADD__(v246, v252)
        || v246 + v252 > *(_DWORD *)(v265 + 4))
      {
        *(_DWORD *)(a1 + 32) = 1;
        return &xmmword_1ECF4C7EB;
      }
      JSC::Wasm::Instance::tableCopy((uint64_t)v316, v306, v246, v252, v259, v263);
      return (__int128 *)v9;
    case 6:
      v286 = atomic_load(&qword_1ECF59058);
      if (v286 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54)
        v287 = v18;
      else
        v287 = (unsigned int *)(a1 - 8 * v13 + 48);
      v176 = *v287;
      v288 = *((_QWORD *)this + 17);
      v178 = (char *)this + 136;
      v177 = v288;
      goto LABEL_613;
    case 7:
      v174 = atomic_load(&qword_1ECF59058);
      if (v174 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54)
        v175 = v18;
      else
        v175 = (unsigned int *)(a1 - 8 * v13 + 48);
      v176 = *v175;
      v179 = *((_QWORD *)this + 16);
      v178 = (char *)this + 128;
      v177 = v179;
LABEL_613:
      if (v177 >= 0)
        v289 = 2 * v177 + 8;
      else
        v289 = (uint64_t)v178;
      *(_QWORD *)(v289 + ((v176 >> 3) & 0x1FFFFFF8)) &= ~(1 << v176);
      return (__int128 *)v9;
    case 8:
    case 9:
      v308 = this;
      v19 = atomic_load(&qword_1ECF59058);
      if (v19 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v318 = a1;
      v20 = _MergedGlobals_54 == 0;
      v21 = _MergedGlobals_54 != 0;
      if (_MergedGlobals_54)
        v22 = (JSC::Wasm::Instance **)v18;
      else
        v22 = (JSC::Wasm::Instance **)(a1 - 8 * v13 + 48);
      v302 = *v22;
      v23 = atomic_load(&qword_1ECF59058);
      if (v23 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v24 = _MergedGlobals_54 == v21;
      if (_MergedGlobals_54 == v21)
        v25 = a1 - 8 * v13 + 48;
      else
        v25 = (uint64_t)v18;
      if (_MergedGlobals_54 == v21)
        v26 = v20;
      else
        v26 = v21;
      if (_MergedGlobals_54 == v21)
        v27 = v21;
      else
        v27 = (v26 + 1);
      if (_MergedGlobals_54 != v21)
        LODWORD(v21) = v26 + 1;
      if (v24)
        v28 = v26 + 1;
      else
        v28 = v20;
      v29 = *(_DWORD *)(v25 + 8 * v26);
      v30 = atomic_load(&qword_1ECF59058);
      if (v30 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        v31 = v29;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
        v29 = v31;
      }
      if (_MergedGlobals_54 == v27)
        v32 = (unsigned int *)v17;
      else
        v32 = v18;
      if (_MergedGlobals_54 == v27)
        v33 = v28;
      else
        v33 = v21;
      if (_MergedGlobals_54 == v27)
        v21 = v21;
      else
        v21 = (v33 + 1);
      if (_MergedGlobals_54 == v27)
        v28 = v33 + 1;
      v34 = (int)v32[2 * v33];
      if (v16 == 8)
      {
        v35 = atomic_load(&qword_1ECF59058);
        v36 = v302;
        if (v35 != -1)
        {
          v325 = &v323;
          v324 = &v325;
          v37 = v29;
          std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
          v29 = v37;
        }
        if (_MergedGlobals_54 == v21)
          v38 = (unsigned int *)v17;
        else
          v38 = v18;
        if (_MergedGlobals_54 == v21)
          v39 = v28;
        else
          v39 = v21;
        v40 = v38[2 * v39] != 0;
      }
      else
      {
        v40 = 0;
        v36 = v302;
      }
      v68 = v318;
      if (v34 <= 0xFFFFFFC0)
      {
        v102 = *(_QWORD *)(*((_QWORD *)v308 + 7) + 8);
        if (*(unsigned int *)(v102 + 100) <= v34)
        {
          __break(0xC471u);
          JUMPOUT(0x198F9D8E0);
        }
        v34 = *(_QWORD *)(*(_QWORD *)(v102 + 88) + 8 * v34);
      }
      v103 = ((uint64_t (*)(JSC::Wasm::Instance *, BOOL, unint64_t))JSC::Wasm::TypeInformation::castReference)(v36, v29 != 0, v34);
      if (v16 == 8)
      {
        v36 = (JSC::Wasm::Instance *)(v40 ^ v103);
LABEL_197:
        *(_QWORD *)v18 = v36;
        return (__int128 *)v9;
      }
      if ((v103 & 1) != 0)
        goto LABEL_197;
      v69 = 36;
LABEL_634:
      *(_DWORD *)(v68 + 32) = v69;
      return &xmmword_1ECF4C7EB;
    case 10:
      v317 = this;
      v266 = atomic_load(&qword_1ECF59058);
      if (v266 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v322 = a1;
      v267 = _MergedGlobals_54 == 0;
      v268 = _MergedGlobals_54 != 0;
      if (_MergedGlobals_54)
        v269 = v18;
      else
        v269 = (unsigned int *)(a1 - 8 * v13 + 48);
      v307 = *v269;
      v270 = atomic_load(&qword_1ECF59058);
      if (v270 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v268)
        v271 = a1 - 8 * v13 + 48;
      else
        v271 = (uint64_t)v18;
      if (_MergedGlobals_54 == v268)
        v272 = v267;
      else
        v272 = v268;
      if (_MergedGlobals_54 == v268)
        v273 = v268;
      else
        v273 = (v272 + 1);
      if (_MergedGlobals_54 == v268)
        v274 = v268;
      else
        v274 = v272 + 1;
      if (_MergedGlobals_54 == v268)
        v275 = v272 + 1;
      else
        v275 = v267;
      v276 = *(_DWORD *)(v271 + 8 * v272);
      v277 = atomic_load(&qword_1ECF59058);
      if (v277 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v273)
        v278 = (unsigned int *)v17;
      else
        v278 = v18;
      if (_MergedGlobals_54 == v273)
        v279 = v275;
      else
        v279 = v274;
      if (_MergedGlobals_54 == v273)
        v280 = v273;
      else
        v280 = (v279 + 1);
      if (_MergedGlobals_54 == v273)
        v281 = v274;
      else
        v281 = v279 + 1;
      if (_MergedGlobals_54 == v273)
        v275 = v279 + 1;
      v282 = v278[2 * v279];
      v283 = atomic_load(&qword_1ECF59058);
      if (v283 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v280)
        v284 = (unsigned int *)v17;
      else
        v284 = v18;
      if (_MergedGlobals_54 == v280)
        v285 = v275;
      else
        v285 = v281;
      v90 = JSC::Wasm::arrayNewData(v317, (JSC::Wasm::Instance *)v307, v276, v282, v284[2 * v285], a6, a7, a8);
      v91 = v322;
      if (v90 != 2)
        goto LABEL_606;
      v92 = 23;
      goto LABEL_636;
    case 11:
      v310 = this;
      v70 = atomic_load(&qword_1ECF59058);
      if (v70 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v319 = a1;
      v71 = _MergedGlobals_54 == 0;
      v72 = _MergedGlobals_54 != 0;
      if (_MergedGlobals_54)
        v73 = v18;
      else
        v73 = (unsigned int *)(a1 - 8 * v13 + 48);
      v304 = *v73;
      v74 = atomic_load(&qword_1ECF59058);
      if (v74 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v72)
        v75 = a1 - 8 * v13 + 48;
      else
        v75 = (uint64_t)v18;
      if (_MergedGlobals_54 == v72)
        v76 = v71;
      else
        v76 = v72;
      if (_MergedGlobals_54 == v72)
        v77 = v72;
      else
        v77 = (v76 + 1);
      if (_MergedGlobals_54 == v72)
        v78 = v72;
      else
        v78 = v76 + 1;
      if (_MergedGlobals_54 == v72)
        v79 = v76 + 1;
      else
        v79 = v71;
      v80 = *(unsigned int *)(v75 + 8 * v76);
      v81 = atomic_load(&qword_1ECF59058);
      if (v81 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v77)
        v82 = (unsigned int *)v17;
      else
        v82 = v18;
      if (_MergedGlobals_54 == v77)
        v83 = v79;
      else
        v83 = v78;
      if (_MergedGlobals_54 == v77)
        v84 = v77;
      else
        v84 = (v83 + 1);
      if (_MergedGlobals_54 == v77)
        v85 = v78;
      else
        v85 = v83 + 1;
      if (_MergedGlobals_54 == v77)
        v79 = v83 + 1;
      v86 = v82[2 * v83];
      v87 = atomic_load(&qword_1ECF59058);
      if (v87 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v84)
        v88 = (unsigned int *)v17;
      else
        v88 = v18;
      if (_MergedGlobals_54 == v84)
        v89 = v79;
      else
        v89 = v85;
      v90 = JSC::Wasm::arrayNewElem(v310, (JSC::Wasm::Instance *)v304, v80, v86, v88[2 * v89], a6, a7, a8);
      v91 = v319;
      if (v90 == 2)
      {
        v92 = 22;
        goto LABEL_636;
      }
LABEL_606:
      *(_QWORD *)v18 = v90;
      return (__int128 *)v9;
    case 12:
      v93 = atomic_load(&qword_1ECF59058);
      if (v93 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54)
        v94 = (unint64_t *)v18;
      else
        v94 = (unint64_t *)(a1 - 8 * v13 + 48);
      v95 = *v94;
      *(_QWORD *)&v96 = v95 - 0x2000000000000;
      v97 = v95 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
         && ((v95 - 0x2000000000000) & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL;
      if (!v97 || (double)(int)v96 != v96 || (*(_QWORD *)&v96 & 0x8000000000000000) != 0 && !(int)v96)
        goto LABEL_652;
      v98 = (*(_QWORD *)&v96 >> 52) & 0x7FFLL;
      if ((v98 - 1023) > 0x53)
      {
        v99 = 0;
LABEL_651:
        v95 = v99 | 0xFFFE000000000000;
        goto LABEL_652;
      }
      v295 = *(_QWORD *)&v96 >> (51 - (*(_QWORD *)&v96 >> 52));
      if (v98 > 0x433)
        LODWORD(v295) = v95 << ((*(_QWORD *)&v96 >> 52) - 51);
      if (v98 >= 0x41F)
        v296 = v295;
      else
        v296 = (((1 << ((*(_QWORD *)&v96 >> 52) + 1)) - 1) & v295) + (1 << ((*(_QWORD *)&v96 >> 52) + 1));
      if (v96 >= 0.0)
        v99 = v296;
      else
        v99 = -v296;
      if ((int)(v99 + 0x40000000) >= 0)
        goto LABEL_651;
LABEL_652:
      *(_QWORD *)v18 = v95;
      return (__int128 *)v9;
    case 13:
      v200 = atomic_load(&qword_1ECF59058);
      if (v200 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v201 = _MergedGlobals_54 == 0;
      v202 = _MergedGlobals_54 != 0;
      v203 = atomic_load(&qword_1ECF59058);
      if (v203 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v204 = _MergedGlobals_54 == v202;
      if (_MergedGlobals_54 == v202)
        v205 = a1 - 8 * v13 + 48;
      else
        v205 = (uint64_t)v18;
      if (_MergedGlobals_54 == v202)
        v206 = v201;
      else
        v206 = v202;
      if (_MergedGlobals_54 == v202)
        v207 = v202;
      else
        v207 = (v206 + 1);
      if (_MergedGlobals_54 != v202)
        LODWORD(v202) = v206 + 1;
      if (v204)
        v208 = v206 + 1;
      else
        v208 = v201;
      v209 = *(unsigned __int8 **)(v205 + 8 * v206);
      v210 = atomic_load(&qword_1ECF59058);
      if (v210 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v207)
        v211 = (unsigned int *)v17;
      else
        v211 = v18;
      if (_MergedGlobals_54 == v207)
        v212 = v208;
      else
        v212 = v202;
      if (_MergedGlobals_54 == v207)
        v213 = v207;
      else
        v213 = (v212 + 1);
      if (_MergedGlobals_54 == v207)
        v208 = v212 + 1;
      else
        LODWORD(v202) = v212 + 1;
      v315 = v211[2 * v212];
      v214 = atomic_load(&qword_1ECF59058);
      if (v214 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v321 = a1;
      v215 = _MergedGlobals_54 == v213;
      if (_MergedGlobals_54 == v213)
        v216 = v208;
      else
        v216 = v202;
      if (_MergedGlobals_54 != v213)
      {
        v213 = (v216 + 1);
        LODWORD(v202) = v216 + 1;
      }
      if (v215)
        v208 = v216 + 1;
      v217 = atomic_load(&qword_1ECF59058);
      if (v217 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v218 = _MergedGlobals_54 == v213;
      if (_MergedGlobals_54 == v213)
        v219 = (unsigned int *)v17;
      else
        v219 = v18;
      if (_MergedGlobals_54 == v213)
        v220 = v208;
      else
        v220 = v202;
      if (_MergedGlobals_54 != v213)
      {
        v213 = (v220 + 1);
        LODWORD(v202) = v220 + 1;
      }
      if (v218)
        v221 = v220 + 1;
      else
        v221 = v208;
      v222 = *(unsigned __int8 **)&v219[2 * v220];
      v223 = atomic_load(&qword_1ECF59058);
      if (v223 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v224 = _MergedGlobals_54 == v213;
      if (_MergedGlobals_54 == v213)
        v225 = (unsigned int *)v17;
      else
        v225 = v18;
      if (_MergedGlobals_54 == v213)
        v226 = v221;
      else
        v226 = v202;
      if (_MergedGlobals_54 == v213)
        v227 = v213;
      else
        v227 = (v226 + 1);
      if (_MergedGlobals_54 == v213)
        v228 = v202;
      else
        v228 = v226 + 1;
      if (v224)
        v221 = v226 + 1;
      v229 = v225[2 * v226];
      v230 = atomic_load(&qword_1ECF59058);
      if (v230 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v227)
        v231 = (unsigned int *)v17;
      else
        v231 = v18;
      if (_MergedGlobals_54 == v227)
        v232 = v221;
      else
        v232 = v228;
      if (v209 == (unsigned __int8 *)2 || v222 == (unsigned __int8 *)2)
      {
        v92 = 28;
        v91 = v321;
LABEL_636:
        *(_DWORD *)(v91 + 32) = v92;
        return &xmmword_1ECF4C7EB;
      }
      v233 = 2 * v232;
      if (((unint64_t)v209 & 0xFFFE000000000002) != 0)
      {
        v234 = 0;
      }
      else if (v209[5] <= 0x16u)
      {
        v234 = 0;
      }
      else
      {
        v234 = (JSC::JSWebAssemblyArray *)v209;
      }
      v235 = v231[v233];
      if (((unint64_t)v222 & 0xFFFE000000000002) != 0)
      {
        v236 = 0;
      }
      else if (v222[5] <= 0x16u)
      {
        v236 = 0;
      }
      else
      {
        v236 = (JSC::JSWebAssemblyArray *)v222;
      }
      if (__CFADD__(v315, v235)
        || *((_QWORD *)v234 + 7) < (unint64_t)(v315 + v235)
        || __CFADD__(v229, v235)
        || *((_QWORD *)v236 + 7) < (unint64_t)(v229 + v235))
      {
        *(_DWORD *)(v321 + 32) = 17;
        return &xmmword_1ECF4C7EB;
      }
      JSC::JSWebAssemblyArray::copy(v236, v234, v315, v229, v235);
      return (__int128 *)v9;
    case 14:
      v309 = this;
      v41 = atomic_load(&qword_1ECF59058);
      if (v41 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v42 = _MergedGlobals_54 == 0;
      v43 = _MergedGlobals_54 != 0;
      v44 = atomic_load(&qword_1ECF59058);
      if (v44 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v45 = _MergedGlobals_54 == v43;
      if (_MergedGlobals_54 == v43)
        v46 = a1 - 8 * v13 + 48;
      else
        v46 = (uint64_t)v18;
      if (_MergedGlobals_54 == v43)
        v47 = v42;
      else
        v47 = v43;
      if (_MergedGlobals_54 == v43)
        v48 = v43;
      else
        v48 = (v47 + 1);
      if (_MergedGlobals_54 != v43)
        LODWORD(v43) = v47 + 1;
      if (v45)
        v49 = v47 + 1;
      else
        v49 = v42;
      v303 = *(JSC::Wasm::Instance **)(v46 + 8 * v47);
      v50 = atomic_load(&qword_1ECF59058);
      if (v50 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v51 = _MergedGlobals_54 == v48;
      if (_MergedGlobals_54 == v48)
        v52 = (unsigned int *)v17;
      else
        v52 = v18;
      if (_MergedGlobals_54 == v48)
        v53 = v49;
      else
        v53 = v43;
      if (_MergedGlobals_54 == v48)
        v54 = v48;
      else
        v54 = (v53 + 1);
      if (_MergedGlobals_54 == v48)
        v55 = v43;
      else
        v55 = v53 + 1;
      if (v51)
        v56 = v53 + 1;
      else
        v56 = v49;
      v300 = v52[2 * v53];
      v57 = atomic_load(&qword_1ECF59058);
      if (v57 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v58 = _MergedGlobals_54 == v54;
      if (_MergedGlobals_54 == v54)
        v59 = (unsigned int *)v17;
      else
        v59 = v18;
      if (_MergedGlobals_54 == v54)
        v60 = v56;
      else
        v60 = v55;
      if (_MergedGlobals_54 != v54)
      {
        v54 = (v60 + 1);
        v55 = v60 + 1;
      }
      if (v58)
        v56 = v60 + 1;
      v298 = v59[2 * v60];
      v61 = atomic_load(&qword_1ECF59058);
      if (v61 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v54)
        v62 = (unsigned int *)v17;
      else
        v62 = v18;
      if (_MergedGlobals_54 == v54)
        v63 = v56;
      else
        v63 = v55;
      if (_MergedGlobals_54 == v54)
        v64 = v54;
      else
        v64 = (v63 + 1);
      if (_MergedGlobals_54 == v54)
        v65 = v55;
      else
        v65 = v63 + 1;
      if (_MergedGlobals_54 == v54)
        v56 = v63 + 1;
      v66 = v62[2 * v63];
      v67 = atomic_load(&qword_1ECF59058);
      if (v67 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v68 = a1;
      if (v303 == (JSC::Wasm::Instance *)2)
      {
        v69 = 29;
        goto LABEL_634;
      }
      if (_MergedGlobals_54 == v64)
        v290 = v56;
      else
        v290 = v65;
      if (_MergedGlobals_54 == v64)
        v291 = (unsigned int *)v17;
      else
        v291 = v18;
      if (JSC::Wasm::arrayInitElem(v309, (unint64_t)v303, v300, v298, v66, v291[2 * v290], a7, a8))
        return (__int128 *)v9;
      v69 = 18;
      goto LABEL_634;
    case 15:
      v312 = this;
      v125 = atomic_load(&qword_1ECF59058);
      if (v125 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v126 = _MergedGlobals_54 == 0;
      v127 = _MergedGlobals_54 != 0;
      v128 = atomic_load(&qword_1ECF59058);
      if (v128 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v129 = _MergedGlobals_54 == v127;
      if (_MergedGlobals_54 == v127)
        v130 = a1 - 8 * v13 + 48;
      else
        v130 = (uint64_t)v18;
      if (_MergedGlobals_54 == v127)
        v131 = v126;
      else
        v131 = v127;
      if (_MergedGlobals_54 == v127)
        v132 = v127;
      else
        v132 = (v131 + 1);
      if (_MergedGlobals_54 != v127)
        LODWORD(v127) = v131 + 1;
      if (v129)
        v133 = v131 + 1;
      else
        v133 = v126;
      v305 = *(JSC::Wasm::Instance **)(v130 + 8 * v131);
      v134 = atomic_load(&qword_1ECF59058);
      if (v134 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v135 = _MergedGlobals_54 == v132;
      if (_MergedGlobals_54 == v132)
        v136 = (unsigned int *)v17;
      else
        v136 = v18;
      if (_MergedGlobals_54 == v132)
        v137 = v133;
      else
        v137 = v127;
      if (_MergedGlobals_54 == v132)
        v138 = v132;
      else
        v138 = (v137 + 1);
      if (_MergedGlobals_54 == v132)
        v139 = v127;
      else
        v139 = v137 + 1;
      if (v135)
        v140 = v137 + 1;
      else
        v140 = v133;
      v301 = v136[2 * v137];
      v141 = atomic_load(&qword_1ECF59058);
      if (v141 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v142 = _MergedGlobals_54 == v138;
      if (_MergedGlobals_54 == v138)
        v143 = (unsigned int *)v17;
      else
        v143 = v18;
      if (_MergedGlobals_54 == v138)
        v144 = v140;
      else
        v144 = v139;
      if (_MergedGlobals_54 != v138)
      {
        v138 = (v144 + 1);
        v139 = v144 + 1;
      }
      if (v142)
        v140 = v144 + 1;
      v299 = v143[2 * v144];
      v145 = atomic_load(&qword_1ECF59058);
      if (v145 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      if (_MergedGlobals_54 == v138)
        v146 = (unsigned int *)v17;
      else
        v146 = v18;
      if (_MergedGlobals_54 == v138)
        v147 = v140;
      else
        v147 = v139;
      if (_MergedGlobals_54 == v138)
        v148 = v138;
      else
        v148 = (v147 + 1);
      if (_MergedGlobals_54 == v138)
        v149 = v139;
      else
        v149 = v147 + 1;
      if (_MergedGlobals_54 == v138)
        v140 = v147 + 1;
      v150 = v146[2 * v147];
      v151 = atomic_load(&qword_1ECF59058);
      if (v151 != -1)
      {
        v325 = &v323;
        v324 = &v325;
        std::__call_once(&qword_1ECF59058, &v324, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>);
      }
      v68 = a1;
      if (v305 == (JSC::Wasm::Instance *)2)
      {
        v69 = 30;
        goto LABEL_634;
      }
      if (_MergedGlobals_54 == v148)
        v292 = v140;
      else
        v292 = v149;
      if (_MergedGlobals_54 == v148)
        v293 = (unsigned int *)v17;
      else
        v293 = v18;
      if (JSC::Wasm::arrayInitData(v312, (unint64_t)v305, v301, v299, v150, v293[2 * v292]))
        return (__int128 *)v9;
      v69 = 19;
      goto LABEL_634;
    default:
      __break(0xC471u);
      JUMPOUT(0x198F9D8D8);
  }
}

uint64_t slow_path_wasm_set_global_ref(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t *v10;
  uint64_t result;

  v4 = *a2;
  if (v4 != 141)
  {
    if (v4 == 142)
    {
      v5 = *(_DWORD *)(a2 + 2);
      v6 = *(_DWORD *)(a2 + 6);
      goto LABEL_9;
    }
    v5 = a2[1];
    v6 = (char)a2[2];
    if (v6 >= 16)
    {
      v7 = 1073741808;
      goto LABEL_8;
    }
LABEL_12:
    v10 = (uint64_t *)(a1 + 8 * v6);
    goto LABEL_13;
  }
  v5 = *((unsigned __int16 *)a2 + 1);
  v6 = *((__int16 *)a2 + 2);
  if (v6 <= 63)
    goto LABEL_12;
  v7 = 1073741760;
LABEL_8:
  v6 += v7;
LABEL_9:
  if (v6 < 0x40000000)
    goto LABEL_12;
  v8 = v6 - 0x40000000;
  v9 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v9 > v8)
  {
    v10 = (uint64_t *)&v9[2 * v8 + 2];
LABEL_13:
    JSC::Wasm::Instance::setGlobal(a3, v5, *v10);
    return (uint64_t)a2;
  }
  result = 146;
  __break(0xC471u);
  return result;
}

__int128 *slow_path_wasm_memory_atomic_wait32(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v4;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  double v40;
  unint64_t v41;
  unsigned int v42;
  char v43;
  char **v44;
  char *v45;

  v4 = a2;
  v6 = *a2;
  if (v6 == 141)
  {
    v12 = *((__int16 *)a2 + 1);
    v13 = 1073741760;
    if (v12 <= 63)
      v7 = *((__int16 *)a2 + 1);
    else
      v7 = v12 + 1073741760;
    v8 = *((__int16 *)a2 + 2);
    v9 = *((unsigned __int16 *)a2 + 3);
    v14 = *((__int16 *)a2 + 4);
    v10 = v14 + 1073741760;
    if (v14 <= 63)
      v10 = *((__int16 *)a2 + 4);
    v11 = *((__int16 *)a2 + 5);
    if (v11 > 63)
      v11 += 1073741760;
    if (v8 <= 63)
      goto LABEL_25;
  }
  else
  {
    if (v6 == 142)
    {
      v7 = *(_DWORD *)(a2 + 2);
      v8 = *(_DWORD *)(a2 + 6);
      v9 = *(_DWORD *)(a2 + 10);
      v10 = *(_DWORD *)(a2 + 14);
      v11 = *(_DWORD *)(a2 + 18);
      goto LABEL_22;
    }
    v15 = (char)a2[1];
    v13 = 1073741808;
    if (v15 <= 15)
      v7 = (char)a2[1];
    else
      v7 = v15 + 1073741808;
    v8 = (char)a2[2];
    v9 = a2[3];
    v16 = (char)a2[4];
    v10 = v16 + 1073741808;
    if (v16 <= 15)
      v10 = (char)a2[4];
    v11 = (char)a2[5];
    if (v11 > 15)
      v11 += 1073741808;
    if (v8 < 16)
      goto LABEL_25;
  }
  v8 += v13;
LABEL_22:
  if (v8 < 0x40000000)
  {
LABEL_25:
    v19 = (unsigned int *)(a1 + 8 * v8);
    goto LABEL_26;
  }
  v17 = v8 - 0x40000000;
  v18 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v18 <= v17)
    goto LABEL_53;
  v19 = &v18[2 * v17 + 2];
LABEL_26:
  v20 = *v19;
  if (v10 >= 0x40000000)
  {
    v21 = v10 - 0x40000000;
    v22 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v22 > v21)
    {
      v23 = &v22[2 * v21 + 2];
      goto LABEL_30;
    }
LABEL_53:
    __break(0xC471u);
    JUMPOUT(0x198F9DD40);
  }
  v23 = (unsigned int *)(a1 + 8 * v10);
LABEL_30:
  v24 = *v23;
  if (v11 < 0x40000000)
  {
    v27 = (uint64_t *)(a1 + 8 * v11);
  }
  else
  {
    v25 = v11 - 0x40000000;
    v26 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v26 <= v25)
    {
      __break(0xC471u);
      JUMPOUT(0x198F9DD60);
    }
    v27 = (uint64_t *)&v26[2 * v25 + 2];
  }
  v28 = v20 + v9;
  if ((v28 & 3) != 0)
    goto LABEL_35;
  v30 = *(_QWORD *)(a3 + 64);
  if (!v30)
    goto LABEL_35;
  v31 = *v27;
  v32 = *(_QWORD *)(a3 + 8);
  v33 = *(_QWORD *)(v30 + 8);
  v34 = *(_BYTE *)(v33 + 5) ? atomic_load((unint64_t *)(v33 + 16)) : *(_QWORD *)(v33 + 16);
  if (v34 <= v28
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 64) + 8) + 5) != 1
    || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v32 + 93024) + 32))(*(_QWORD *)(v32 + 93024)))
  {
    goto LABEL_35;
  }
  v39 = (unsigned int *)(JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(*(_QWORD *)(a3 + 64) + 8)) + v28);
  v40 = v31 < 0 ? INFINITY : (double)v31 / 1000.0 / 1000.0 / 1000.0;
  v41 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
  if (v41 != -1)
  {
    v45 = &v43;
    v44 = &v45;
    std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v44, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
  }
  v42 = JSC::WaiterListManager::waitSyncImpl<int>((char *)&JSC::WaiterListManager::singleton(void)::manager, v32, v39, v24, v35, v36, v37, v38, v40);
  if ((v42 & 0x80000000) == 0)
  {
    *(_QWORD *)(a1 + 8 * v7) = v42;
  }
  else
  {
LABEL_35:
    *(_DWORD *)(a1 + 32) = 0;
    return &xmmword_1ECF4C7EB;
  }
  return (__int128 *)v4;
}

__int128 *slow_path_wasm_memory_atomic_wait64(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v4;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  double v40;
  unint64_t v41;
  unsigned int v42;
  char v43;
  char **v44;
  char *v45;

  v4 = a2;
  v6 = *a2;
  if (v6 == 141)
  {
    v12 = *((__int16 *)a2 + 1);
    v13 = 1073741760;
    if (v12 <= 63)
      v7 = *((__int16 *)a2 + 1);
    else
      v7 = v12 + 1073741760;
    v8 = *((__int16 *)a2 + 2);
    v9 = *((unsigned __int16 *)a2 + 3);
    v14 = *((__int16 *)a2 + 4);
    v10 = v14 + 1073741760;
    if (v14 <= 63)
      v10 = *((__int16 *)a2 + 4);
    v11 = *((__int16 *)a2 + 5);
    if (v11 > 63)
      v11 += 1073741760;
    if (v8 <= 63)
      goto LABEL_25;
  }
  else
  {
    if (v6 == 142)
    {
      v7 = *(_DWORD *)(a2 + 2);
      v8 = *(_DWORD *)(a2 + 6);
      v9 = *(_DWORD *)(a2 + 10);
      v10 = *(_DWORD *)(a2 + 14);
      v11 = *(_DWORD *)(a2 + 18);
      goto LABEL_22;
    }
    v15 = (char)a2[1];
    v13 = 1073741808;
    if (v15 <= 15)
      v7 = (char)a2[1];
    else
      v7 = v15 + 1073741808;
    v8 = (char)a2[2];
    v9 = a2[3];
    v16 = (char)a2[4];
    v10 = v16 + 1073741808;
    if (v16 <= 15)
      v10 = (char)a2[4];
    v11 = (char)a2[5];
    if (v11 > 15)
      v11 += 1073741808;
    if (v8 < 16)
      goto LABEL_25;
  }
  v8 += v13;
LABEL_22:
  if (v8 < 0x40000000)
  {
LABEL_25:
    v19 = (unsigned int *)(a1 + 8 * v8);
    goto LABEL_26;
  }
  v17 = v8 - 0x40000000;
  v18 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v18 <= v17)
    goto LABEL_53;
  v19 = &v18[2 * v17 + 2];
LABEL_26:
  v20 = *v19;
  if (v10 >= 0x40000000)
  {
    v21 = v10 - 0x40000000;
    v22 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v22 > v21)
    {
      v23 = (uint64_t *)&v22[2 * v21 + 2];
      goto LABEL_30;
    }
LABEL_53:
    __break(0xC471u);
    JUMPOUT(0x198F9E0B0);
  }
  v23 = (uint64_t *)(a1 + 8 * v10);
LABEL_30:
  v24 = *v23;
  if (v11 < 0x40000000)
  {
    v27 = (uint64_t *)(a1 + 8 * v11);
  }
  else
  {
    v25 = v11 - 0x40000000;
    v26 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v26 <= v25)
    {
      __break(0xC471u);
      JUMPOUT(0x198F9E0D0);
    }
    v27 = (uint64_t *)&v26[2 * v25 + 2];
  }
  v28 = v20 + v9;
  if ((v28 & 7) != 0)
    goto LABEL_35;
  v30 = *(_QWORD *)(a3 + 64);
  if (!v30)
    goto LABEL_35;
  v31 = *v27;
  v32 = *(_QWORD *)(a3 + 8);
  v33 = *(_QWORD *)(v30 + 8);
  v34 = *(_BYTE *)(v33 + 5) ? atomic_load((unint64_t *)(v33 + 16)) : *(_QWORD *)(v33 + 16);
  if (v34 <= v28
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 64) + 8) + 5) != 1
    || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v32 + 93024) + 32))(*(_QWORD *)(v32 + 93024)))
  {
    goto LABEL_35;
  }
  v39 = (unint64_t *)(JSC::BufferMemoryHandle::memory(*(JSC::BufferMemoryHandle **)(*(_QWORD *)(a3 + 64) + 8))
                           + v28);
  v40 = v31 < 0 ? INFINITY : (double)v31 / 1000.0 / 1000.0 / 1000.0;
  v41 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
  if (v41 != -1)
  {
    v45 = &v43;
    v44 = &v45;
    std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v44, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
  }
  v42 = JSC::WaiterListManager::waitSyncImpl<long long>((char *)&JSC::WaiterListManager::singleton(void)::manager, v32, v39, v24, v35, v36, v37, v38, v40);
  if ((v42 & 0x80000000) == 0)
  {
    *(_QWORD *)(a1 + 8 * v7) = v42;
  }
  else
  {
LABEL_35:
    *(_DWORD *)(a1 + 32) = 0;
    return &xmmword_1ECF4C7EB;
  }
  return (__int128 *)v4;
}

__int128 *slow_path_wasm_memory_atomic_notify(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  JSC::BufferMemoryHandle *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  unsigned int v34;
  char v35;
  char **v36;
  char *v37;

  v3 = a2;
  v5 = *a2;
  if (v5 == 141)
  {
    v10 = *((__int16 *)a2 + 1);
    v11 = 1073741760;
    if (v10 <= 63)
      v6 = *((__int16 *)a2 + 1);
    else
      v6 = v10 + 1073741760;
    v7 = *((__int16 *)a2 + 2);
    v8 = *((unsigned __int16 *)a2 + 3);
    v9 = *((__int16 *)a2 + 4);
    if (v9 > 63)
      v9 += 1073741760;
    if (v7 <= 63)
      goto LABEL_21;
  }
  else
  {
    if (v5 == 142)
    {
      v6 = *(_DWORD *)(a2 + 2);
      v7 = *(_DWORD *)(a2 + 6);
      v8 = *(_DWORD *)(a2 + 10);
      v9 = *(_DWORD *)(a2 + 14);
      goto LABEL_18;
    }
    v12 = (char)a2[1];
    v11 = 1073741808;
    if (v12 <= 15)
      v6 = (char)a2[1];
    else
      v6 = v12 + 1073741808;
    v7 = (char)a2[2];
    v8 = a2[3];
    v9 = (char)a2[4];
    if (v9 > 15)
      v9 += 1073741808;
    if (v7 < 16)
      goto LABEL_21;
  }
  v7 += v11;
LABEL_18:
  if (v7 < 0x40000000)
  {
LABEL_21:
    v15 = (unsigned int *)(a1 + 8 * v7);
    goto LABEL_22;
  }
  v13 = v7 - 0x40000000;
  v14 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v14 <= v13)
    goto LABEL_44;
  v15 = &v14[2 * v13 + 2];
LABEL_22:
  v16 = *v15;
  if (v9 >= 0x40000000)
  {
    v17 = v9 - 0x40000000;
    v18 = *(unsigned int **)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
    if (*v18 > v17)
    {
      v19 = &v18[2 * v17 + 2];
      goto LABEL_26;
    }
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x198F9E350);
  }
  v19 = (unsigned int *)(a1 + 8 * v9);
LABEL_26:
  v20 = v16 + v8;
  if ((v20 & 3) != 0)
    goto LABEL_27;
  v22 = *(_QWORD *)(a3 + 64);
  if (!v22)
    goto LABEL_27;
  LODWORD(v23) = *v19;
  v24 = *(_QWORD *)(v22 + 8);
  v25 = *(_BYTE *)(v24 + 5) ? atomic_load((unint64_t *)(v24 + 16)) : *(_QWORD *)(v24 + 16);
  if (v20 >= v25)
    goto LABEL_27;
  v26 = *(JSC::BufferMemoryHandle **)(*(_QWORD *)(a3 + 64) + 8);
  if (*((_BYTE *)v26 + 5) != 1)
  {
    v34 = 0;
LABEL_42:
    *(_QWORD *)(a1 + 8 * v6) = v34;
    return (__int128 *)v3;
  }
  v32 = (void *)(JSC::BufferMemoryHandle::memory(v26) + v20);
  if ((int)v23 < 0)
    v23 = 0xFFFFFFFFLL;
  else
    v23 = v23;
  v33 = atomic_load(&JSC::WaiterListManager::singleton(void)::onceKey);
  if (v33 != -1)
  {
    v37 = &v35;
    v36 = &v37;
    std::__call_once(&JSC::WaiterListManager::singleton(void)::onceKey, &v36, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::WaiterListManager::singleton(void)::$_0 &&>>);
  }
  v34 = JSC::WaiterListManager::notifyWaiter((JSC::WaiterListManager *)&JSC::WaiterListManager::singleton(void)::manager, v32, v23, v27, v28, v29, v30, v31);
  if ((v34 & 0x80000000) == 0)
    goto LABEL_42;
LABEL_27:
  *(_DWORD *)(a1 + 32) = 0;
  return &xmmword_1ECF4C7EB;
}

uint64_t slow_path_wasm_throw(JSC::VM *a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  unsigned int *v15;
  unint64_t v16;
  JSC *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  JSC::Exception *v51;
  JSC::CallFrame *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF *v66;
  uint64_t (*v68)(_QWORD *);
  _QWORD *v69;
  WTF *v70;
  _QWORD v71[3];

  *(_QWORD *)(a3[1] + 40) = a1;
  v9 = *a2;
  if (v9 == 141)
  {
    v10 = *((unsigned __int16 *)a2 + 1);
    v12 = *((__int16 *)a2 + 2);
    v13 = v12 + 1073741760;
    v14 = v12 <= 63;
  }
  else
  {
    if (v9 == 142)
    {
      v10 = *(_DWORD *)(a2 + 2);
      v11 = *(_DWORD *)(a2 + 6);
      goto LABEL_9;
    }
    v10 = a2[1];
    v12 = (char)a2[2];
    v13 = v12 + 1073741808;
    v14 = v12 <= 15;
  }
  if (v14)
    v11 = v12;
  else
    v11 = v13;
LABEL_9:
  v15 = (unsigned int *)a3[18];
  if (*v15 <= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x198F9E658);
  }
  v16 = a3[4];
  v17 = *(JSC **)(v16 + 56);
  v18 = *(_QWORD *)&v15[2 * v10 + 2];
  v19 = *(_QWORD *)(v18 + 8);
  v20 = *(_DWORD *)(v19 + 32);
  if (v20)
    v21 = 0;
  else
    v21 = (uint64_t *)(v19 + 8);
  v22 = *((unsigned int *)v21 + 2);
  if (!(_DWORD)v22)
    goto LABEL_21;
  v23 = 0;
  v24 = *((_DWORD *)v21 + 3);
  v25 = *v21;
  do
  {
    if (*(unsigned __int8 *)(v25 + 16 * v24) == 251)
      v26 = 2;
    else
      v26 = 1;
    v23 += v26;
    ++v24;
    --v22;
  }
  while (v22);
  if (v23)
  {
    v27 = (WTF *)WTF::fastMalloc((WTF *)(8 * v23 + 8));
    *(_DWORD *)v27 = v23;
    v19 = *(_QWORD *)(v18 + 8);
    v20 = *(_DWORD *)(v19 + 32);
  }
  else
  {
LABEL_21:
    v27 = 0;
  }
  v70 = v27;
  v28 = (uint64_t *)(v19 + 8);
  if (v20)
    v29 = 0;
  else
    v29 = v28;
  v30 = *((unsigned int *)v29 + 2);
  if ((_DWORD)v30)
  {
    v31 = 0;
    v32 = *((_DWORD *)v29 + 3);
    v33 = *v29;
    v34 = qword_1ECF4C080;
    while (1)
    {
      v35 = 0;
      v36 = v32;
      v37 = v30;
      do
      {
        if (*(unsigned __int8 *)(v33 + 16 * v36) == 251)
          v38 = 2;
        else
          v38 = 1;
        v35 += v38;
        ++v36;
        --v37;
      }
      while (v37);
      if (v35 <= v31)
        break;
      v39 = v11 - v31;
      if (v11 - (int)v31 < 0x40000000)
      {
        v42 = (unsigned int *)((char *)a1 + 8 * v39);
      }
      else
      {
        v40 = v39 - 0x40000000;
        v41 = *(unsigned int **)((*((_QWORD *)a1 + 3) & 0xFFFFFFFFFFFFFFFCLL) + v34 + 56);
        if (*v41 <= v40)
        {
          __break(0xC471u);
          JUMPOUT(0x198F9E620);
        }
        v42 = &v41[2 * v40 + 2];
      }
      if (*(_DWORD *)v27 <= v31)
      {
        __break(0xC471u);
        JUMPOUT(0x198F9E600);
      }
      *((_QWORD *)v27 + v31 + 1) = *(_QWORD *)v42;
      v31 = (v31 + 1);
    }
  }
  v43 = *(_QWORD *)(v16 + 1312);
  if ((v43 & 1) != 0)
  {
    v68 = *(uint64_t (**)(_QWORD *))(v43 & 0xFFFFFFFFFFFFFFFCLL);
    v69 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v16 & 8) != 0)
      v69 = (_QWORD *)(v16 - 16);
    v71[0] = *v69;
    v71[1] = v16;
    v71[2] = v16 + 1312;
    v43 = v68(v71);
  }
  v44 = JSC::JSWebAssemblyException::create(v17, (JSC::VM *)v43, (unsigned int *)v18, (uint64_t *)&v70, a5, a6, a7, a8);
  v51 = (JSC::Exception *)v44;
  if ((v44 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x4C)))
  {
    v51 = (JSC::Exception *)JSC::Exception::create((uint64_t)v17, (JSC::VM *)v44, 0, v45, v46, v47, v48, v49);
  }
  JSC::VM::throwException(v17, (JSC::JSGlobalObject *)v16, v51, v50, v45, v46, v47, v48, v49);
  JSC::genericUnwind(v17, a1, v52, v53, v54, v55, v56, v57);
  v65 = *((_QWORD *)v17 + 11311);
  v66 = v70;
  v70 = 0;
  if (v66)
    WTF::fastFree((unint64_t)v66, v58, v59, v60, v61, v62, v63, v64);
  return v65;
}

uint64_t slow_path_wasm_rethrow(JSC::VM *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v10;
  JSC::VM *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int *v16;
  JSC::VM **v17;
  JSC::VM *v18;
  JSC::CallFrame *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  *(_QWORD *)(*(_QWORD *)(a3 + 8) + 40) = a1;
  v10 = *(uint64_t **)(a3 + 32);
  v11 = (JSC::VM *)v10[7];
  v12 = *a2;
  if (v12 != 141)
  {
    if (v12 == 142)
    {
      v13 = *(_DWORD *)(a2 + 2);
      goto LABEL_9;
    }
    v13 = (char)a2[1];
    if (v13 >= 16)
    {
      v14 = 1073741808;
      goto LABEL_8;
    }
LABEL_12:
    v17 = (JSC::VM **)((char *)a1 + 8 * v13);
    goto LABEL_13;
  }
  v13 = *((__int16 *)a2 + 1);
  if (v13 <= 63)
    goto LABEL_12;
  v14 = 1073741760;
LABEL_8:
  v13 += v14;
LABEL_9:
  if (v13 < 0x40000000)
    goto LABEL_12;
  v15 = v13 - 0x40000000;
  v16 = *(unsigned int **)((*((_QWORD *)a1 + 3) & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 56);
  if (*v16 <= v15)
  {
    result = 146;
    __break(0xC471u);
    return result;
  }
  v17 = (JSC::VM **)&v16[2 * v15 + 2];
LABEL_13:
  v18 = *v17;
  if (((unint64_t)*v17 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)))
  {
    v18 = (JSC::VM *)JSC::Exception::create(v10[7], v18, 0, a4, a5, a6, a7, a8);
  }
  JSC::VM::throwException(v11, (JSC::JSGlobalObject *)v10, v18, a9, a4, a5, a6, a7, a8);
  JSC::genericUnwind(v11, a1, v19, v20, v21, v22, v23, v24);
  return *((_QWORD *)v11 + 11311);
}

unsigned __int8 *slow_path_wasm_retrieve_and_clear_exception(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  unsigned int *v13;
  unsigned int v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 56);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    goto LABEL_30;
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *a2;
  if ((v6 + 115) <= 1u)
  {
    v7 = a2[1];
    if (v7 == 224)
    {
      if (v6 == 141)
      {
        v8 = *((__int16 *)a2 + 2);
        v9 = v8 + 1073741760;
        v10 = v8 <= 63;
LABEL_5:
        if (v10)
          v9 = v8;
        goto LABEL_8;
      }
      if (v6 == 142)
      {
        v9 = *(_DWORD *)(a2 + 6);
LABEL_8:
        if ((v5 & 0xFFFE000000000002) != 0
          || &JSC::JSWebAssemblyException::s_info != (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                               + 0x4C)))
        {
          __break(0xC471u);
          JUMPOUT(0x198F9E964);
        }
        goto LABEL_24;
      }
LABEL_4:
      v8 = (char)a2[2];
      v9 = v8 + 1073741808;
      v10 = v8 <= 15;
      goto LABEL_5;
    }
  }
  else
  {
    v7 = *a2;
    if (v6 == 224)
      goto LABEL_4;
  }
  if (v7 != 225)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x198F9E944);
  }
  if (v6 == 141)
  {
    v11 = *((__int16 *)a2 + 1);
    v9 = v11 + 1073741760;
    v12 = v11 <= 63;
  }
  else
  {
    if (v6 == 142)
    {
      v9 = *(_DWORD *)(a2 + 2);
      goto LABEL_24;
    }
    v11 = (char)a2[1];
    v9 = v11 + 1073741808;
    v12 = v11 <= 15;
  }
  if (v12)
    v9 = v11;
LABEL_24:
  *(_QWORD *)(a1 + 8 * v9) = v5;
  *(_QWORD *)(v3 + 16) = 0;
  v13 = (unsigned int *)(v3 + 80);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 & 0xFFFFFFEF, v13));
  return a2;
}

uint64_t slow_path_wasm_throw_exception(JSC::VM *a1, unint64_t *a2, JSC::JSGlobalObject *a3)
{
  *(_QWORD *)(a2[1] + 40) = a1;
  return JSC::Wasm::throwWasmToJSException(a1, a3, a2);
}

__int16 slow_path_wasm_popcount@<H0>(int8x8_t a1@<D0>, uint64_t a2@<X0>, __int32 a3@<W1>)
{
  a1.i32[0] = a3;
  a1.i16[0] = vaddlv_u8((uint8x8_t)vcnt_s8(a1));
  return a1.i16[0];
}

unsigned __int16 slow_path_wasm_popcountll@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  return vaddlv_u8((uint8x8_t)vcnt_s8((int8x8_t)a2));
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::LLInt::jsrSize(void)::$_0 &&>>()
{
  unint64_t v0;
  char v1;
  char **v2;
  char *v3;

  v0 = atomic_load(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag);
  if (v0 != -1)
  {
    v3 = &v1;
    v2 = &v3;
    std::__call_once(&JSC::Wasm::wasmCallingConvention(void)::staticWasmCallingConventionFlag, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::Wasm::wasmCallingConvention(void)::$_0 &&>>);
  }
  _MergedGlobals_54 = HIDWORD(qword_1EE3430D8);
}

uint64_t WTF::dataLog<char [33],unsigned int,char [2]>(_DWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Module internal function count: ");
  WTF::PrintStream::printf(v4, "%u", *a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<JSC::Wasm::LLIntCallee,char [60],JSC::Wasm::LLIntTierUpCounter,char [2]>(JSC::Wasm::Callee *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::Wasm::Callee::dump(a1, v6);
  WTF::PrintStream::printf(v6, "%s", ": Entered simd_go_straight_to_bbq_osr with tierUpCounter = ");
  WTF::PrintStream::printf(v6, "%lf/%lf, %d", *(float *)(a2 + 4) + (double)*(int *)a2, (double)*(int *)(a2 + 8), *(_DWORD *)a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void *bmalloc_try_iso_allocate_impl_casual_case(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char local_allocator_slow;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *result;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v10 = *(unsigned int *)*a1;
  v11 = *((unsigned int *)a1 + 4);
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v12)
  {
    if (!(_DWORD)v11)
      goto LABEL_8;
    if (*(_DWORD *)(v12 + 8052) > v11)
    {
      v13 = v12 + 8 * v11 + 8064;
      local_allocator_slow = 1;
      goto LABEL_9;
    }
    if ((_DWORD)v11 == -1)
    {
LABEL_8:
      local_allocator_slow = 0;
      v13 = 0;
    }
    else
    {
      local_allocator_slow = pas_thread_local_cache_get_local_allocator_slow(v12, v11, 0, a4, a5, a6, a7, a8);
      v13 = v16;
    }
  }
  else
  {
    local_allocator_slow = pas_thread_local_cache_get_local_allocator_if_can_set_cache_for_possibly_uninitialized_index_slow(v11, (uint64_t)&bmalloc_heap_config);
    v13 = v15;
  }
LABEL_9:
  if ((local_allocator_slow & 1) == 0)
    return bmalloc_try_iso_allocate_impl_impl_slow(a1, v10, a2);
  *(_BYTE *)v13 = 1;
  v17 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v17)
  {
    *(_DWORD *)(v13 + 16) = v17 - *(_DWORD *)(v13 + 20);
    result = (void *)(*(_QWORD *)(v13 + 8) - v17);
    *(_BYTE *)v13 = 0;
  }
  else
  {
    v19 = *(_QWORD *)(v13 + 40);
    v20 = *(_QWORD *)(v13 + 24);
    if (v19)
    {
LABEL_13:
      v21 = __clz(v19);
      *(_QWORD *)(v13 + 40) = v19 & ~(0x8000000000000000 >> v21);
      result = (void *)(v20 + 16 * v21);
      *(_BYTE *)v13 = 0;
    }
    else
    {
      if (*(_BYTE *)(v13 + 5) == 6)
      {
        v22 = *(unsigned int *)(v13 + 32);
        v23 = *(_DWORD *)(v13 + 36);
        if (v22 < v23)
        {
          v24 = v13 + 8 * v22;
          *(_QWORD *)(v24 + 56) = 0;
          v25 = (unint64_t *)(v24 + 64);
          v26 = v23 - 1 - v22;
          while (v26)
          {
            v20 += 1024;
            v28 = *v25++;
            v27 = v28;
            LODWORD(v22) = v22 + 1;
            --v26;
            if (v28)
            {
              v19 = __rbit64(v27);
              *(_DWORD *)(v13 + 32) = v22;
              *(_QWORD *)(v13 + 24) = v20;
              goto LABEL_13;
            }
          }
          *(_DWORD *)(v13 + 32) = v23;
        }
      }
      if (pas_debug_heap_is_enabled(2))
      {
        return pas_debug_heap_malloc(v10);
      }
      else if (*(_BYTE *)(v13 + 5) == 6)
      {
        return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v13, a2, (uint64_t)&bmalloc_allocator_counts, (uint64_t)pas_allocation_result_identity, v29, v30, v31, v32);
      }
      else
      {
        return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_slow(v13, v10, 1uLL, a2, (uint64_t)&bmalloc_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_identity);
      }
    }
  }
  return result;
}

void *bmalloc_iso_allocate_impl_casual_case(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char local_allocator_slow;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *result;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v10 = *(unsigned int *)*a1;
  v11 = *((unsigned int *)a1 + 4);
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v12)
  {
    if (!(_DWORD)v11)
      goto LABEL_8;
    if (*(_DWORD *)(v12 + 8052) > v11)
    {
      v13 = v12 + 8 * v11 + 8064;
      local_allocator_slow = 1;
      goto LABEL_9;
    }
    if ((_DWORD)v11 == -1)
    {
LABEL_8:
      local_allocator_slow = 0;
      v13 = 0;
    }
    else
    {
      local_allocator_slow = pas_thread_local_cache_get_local_allocator_slow(v12, v11, 0, a4, a5, a6, a7, a8);
      v13 = v16;
    }
  }
  else
  {
    local_allocator_slow = pas_thread_local_cache_get_local_allocator_if_can_set_cache_for_possibly_uninitialized_index_slow(v11, (uint64_t)&bmalloc_heap_config);
    v13 = v15;
  }
LABEL_9:
  if ((local_allocator_slow & 1) == 0)
    return bmalloc_iso_allocate_impl_impl_slow(a1, v10, a2);
  *(_BYTE *)v13 = 1;
  v17 = *(unsigned int *)(v13 + 16);
  if ((_DWORD)v17)
  {
    *(_DWORD *)(v13 + 16) = v17 - *(_DWORD *)(v13 + 20);
    result = (void *)(*(_QWORD *)(v13 + 8) - v17);
    *(_BYTE *)v13 = 0;
  }
  else
  {
    v19 = *(_QWORD *)(v13 + 40);
    v20 = *(_QWORD *)(v13 + 24);
    if (v19)
    {
LABEL_13:
      v21 = __clz(v19);
      *(_QWORD *)(v13 + 40) = v19 & ~(0x8000000000000000 >> v21);
      result = (void *)(v20 + 16 * v21);
      *(_BYTE *)v13 = 0;
    }
    else
    {
      if (*(_BYTE *)(v13 + 5) == 6)
      {
        v22 = *(unsigned int *)(v13 + 32);
        v23 = *(_DWORD *)(v13 + 36);
        if (v22 < v23)
        {
          v24 = v13 + 8 * v22;
          *(_QWORD *)(v24 + 56) = 0;
          v25 = (unint64_t *)(v24 + 64);
          v26 = v23 - 1 - v22;
          while (v26)
          {
            v20 += 1024;
            v28 = *v25++;
            v27 = v28;
            LODWORD(v22) = v22 + 1;
            --v26;
            if (v28)
            {
              v19 = __rbit64(v27);
              *(_DWORD *)(v13 + 32) = v22;
              *(_QWORD *)(v13 + 24) = v20;
              goto LABEL_13;
            }
          }
          *(_DWORD *)(v13 + 32) = v23;
        }
      }
      if (pas_debug_heap_is_enabled(2))
      {
        return pas_debug_heap_malloc(v10);
      }
      else if (*(_BYTE *)(v13 + 5) == 6)
      {
        return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v13, a2, (uint64_t)&bmalloc_allocator_counts, (uint64_t)pas_allocation_result_crash_on_error, v29, v30, v31, v32);
      }
      else
      {
        return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_slow(v13, v10, 1uLL, a2, (uint64_t)&bmalloc_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_crash_on_error);
      }
    }
  }
  return result;
}

void *bmalloc_try_allocate_auxiliary_impl_casual_case(uint64_t a1, size_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  void *result;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char can_set_cache_for_possibly_uninitialized_index_slow;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v9 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] != 1)
    return 0;
  v12 = (a2 + a3 - 1) & -(uint64_t)a3;
  if (a2 < a3)
    v12 = a3;
  if (a3 == 1)
    v13 = a2;
  else
    v13 = v12;
  v14 = (v13 + 15) >> 4;
  if (v14 == *(_DWORD *)(a1 + 24))
  {
    v15 = *(unsigned int *)(a1 + 16);
    goto LABEL_14;
  }
  v17 = *(_QWORD *)(a1 + 8);
  if (v17)
  {
    if (v14 < *(unsigned int *)(v17 + 36))
      goto LABEL_12;
LABEL_34:
    v25 = pas_segregated_heap_medium_directory_tuple_for_index(v17, v14, 0, 0);
    if (v25)
      v15 = *(unsigned int *)(v25 + 4);
    else
      v15 = 0;
    goto LABEL_14;
  }
  v17 = pas_ensure_heap_slow((uint64_t *)a1, 1, (uint64_t)&bmalloc_heap_config, (uint64_t)&bmalloc_primitive_runtime_config);
  v14 = (v13 + 15) >> 4;
  if (v14 >= *(unsigned int *)(v17 + 36))
    goto LABEL_34;
LABEL_12:
  v15 = *(_QWORD *)(v17 + 8);
  if (v15)
    v15 = *(unsigned int *)(v15 + 4 * v14);
LABEL_14:
  v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v18)
  {
    can_set_cache_for_possibly_uninitialized_index_slow = pas_thread_local_cache_get_local_allocator_if_can_set_cache_for_possibly_uninitialized_index_slow(v15, (uint64_t)&bmalloc_heap_config);
    goto LABEL_22;
  }
  if (!(_DWORD)v15)
  {
LABEL_21:
    can_set_cache_for_possibly_uninitialized_index_slow = 0;
    v19 = 0;
    goto LABEL_22;
  }
  if (*(_DWORD *)(v18 + 8052) <= v15)
  {
    if ((_DWORD)v15 != -1)
    {
      can_set_cache_for_possibly_uninitialized_index_slow = pas_thread_local_cache_get_local_allocator_slow(v18, v15, 0, a4, a5, a6, a7, a8);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  v19 = v18 + 8 * v15 + 8064;
  can_set_cache_for_possibly_uninitialized_index_slow = 1;
LABEL_22:
  if (a3 != 1 && (can_set_cache_for_possibly_uninitialized_index_slow & 1) != 0 && 1 << *(_BYTE *)(v19 + 4) < a3)
    can_set_cache_for_possibly_uninitialized_index_slow = 0;
  if ((can_set_cache_for_possibly_uninitialized_index_slow & 1) == 0)
    return bmalloc_try_allocate_auxiliary_impl_impl_slow((uint64_t *)a1, v13, a3, a4);
  *(_BYTE *)v19 = 1;
  v21 = *(unsigned int *)(v19 + 16);
  if ((_DWORD)v21)
  {
    *(_DWORD *)(v19 + 16) = v21 - *(_DWORD *)(v19 + 20);
    result = (void *)(*(_QWORD *)(v19 + 8) - v21);
LABEL_31:
    *(_BYTE *)v19 = 0;
    return result;
  }
  v22 = *(_QWORD *)(v19 + 40);
  v23 = *(_QWORD *)(v19 + 24);
  if (v22)
  {
LABEL_30:
    v24 = __clz(v22);
    *(_QWORD *)(v19 + 40) = v22 & ~(0x8000000000000000 >> v24);
    result = (void *)(v23 + 16 * v24);
    goto LABEL_31;
  }
  if (*(_BYTE *)(v19 + 5) == 6)
  {
    v26 = *(unsigned int *)(v19 + 32);
    v27 = *(_DWORD *)(v19 + 36);
    if (v26 < v27)
    {
      v28 = v19 + 8 * v26;
      *(_QWORD *)(v28 + 56) = 0;
      v29 = (unint64_t *)(v28 + 64);
      v30 = v27 - 1 - v26;
      while (v30)
      {
        v23 += 1024;
        v32 = *v29++;
        v31 = v32;
        LODWORD(v26) = v26 + 1;
        --v30;
        if (v32)
        {
          v22 = __rbit64(v31);
          *(_DWORD *)(v19 + 32) = v26;
          *(_QWORD *)(v19 + 24) = v23;
          goto LABEL_30;
        }
      }
      *(_DWORD *)(v19 + 32) = v27;
    }
  }
  v33 = v19;
  if (pas_debug_heap_is_enabled(2))
    return pas_debug_heap_allocate(v13, a3);
  if (*(_BYTE *)(v33 + 5) == 6)
    return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v33, a4, (uint64_t)&bmalloc_allocator_counts, (uint64_t)pas_allocation_result_identity, v34, v35, v36, v37);
  return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_slow(v33, v13, a3, a4, (uint64_t)&bmalloc_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_identity);
}

void *bmalloc_allocate_auxiliary_impl_casual_case(uint64_t a1, size_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9;
  uint64_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  void *result;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char can_set_cache_for_possibly_uninitialized_index_slow;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v9 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] != 1)
    return 0;
  v12 = (a2 + a3 - 1) & -(uint64_t)a3;
  if (a2 < a3)
    v12 = a3;
  if (a3 == 1)
    v13 = a2;
  else
    v13 = v12;
  v14 = (v13 + 15) >> 4;
  if (v14 == *(_DWORD *)(a1 + 24))
  {
    v15 = *(unsigned int *)(a1 + 16);
    goto LABEL_14;
  }
  v17 = *(_QWORD *)(a1 + 8);
  if (v17)
  {
    if (v14 < *(unsigned int *)(v17 + 36))
      goto LABEL_12;
LABEL_34:
    v25 = pas_segregated_heap_medium_directory_tuple_for_index(v17, v14, 0, 0);
    if (v25)
      v15 = *(unsigned int *)(v25 + 4);
    else
      v15 = 0;
    goto LABEL_14;
  }
  v17 = pas_ensure_heap_slow((uint64_t *)a1, 1, (uint64_t)&bmalloc_heap_config, (uint64_t)&bmalloc_primitive_runtime_config);
  v14 = (v13 + 15) >> 4;
  if (v14 >= *(unsigned int *)(v17 + 36))
    goto LABEL_34;
LABEL_12:
  v15 = *(_QWORD *)(v17 + 8);
  if (v15)
    v15 = *(unsigned int *)(v15 + 4 * v14);
LABEL_14:
  v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v18)
  {
    can_set_cache_for_possibly_uninitialized_index_slow = pas_thread_local_cache_get_local_allocator_if_can_set_cache_for_possibly_uninitialized_index_slow(v15, (uint64_t)&bmalloc_heap_config);
    goto LABEL_22;
  }
  if (!(_DWORD)v15)
  {
LABEL_21:
    can_set_cache_for_possibly_uninitialized_index_slow = 0;
    v19 = 0;
    goto LABEL_22;
  }
  if (*(_DWORD *)(v18 + 8052) <= v15)
  {
    if ((_DWORD)v15 != -1)
    {
      can_set_cache_for_possibly_uninitialized_index_slow = pas_thread_local_cache_get_local_allocator_slow(v18, v15, 0, a4, a5, a6, a7, a8);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  v19 = v18 + 8 * v15 + 8064;
  can_set_cache_for_possibly_uninitialized_index_slow = 1;
LABEL_22:
  if (a3 != 1 && (can_set_cache_for_possibly_uninitialized_index_slow & 1) != 0 && 1 << *(_BYTE *)(v19 + 4) < a3)
    can_set_cache_for_possibly_uninitialized_index_slow = 0;
  if ((can_set_cache_for_possibly_uninitialized_index_slow & 1) == 0)
    return bmalloc_allocate_auxiliary_impl_impl_slow((uint64_t *)a1, v13, a3, a4);
  *(_BYTE *)v19 = 1;
  v21 = *(unsigned int *)(v19 + 16);
  if ((_DWORD)v21)
  {
    *(_DWORD *)(v19 + 16) = v21 - *(_DWORD *)(v19 + 20);
    result = (void *)(*(_QWORD *)(v19 + 8) - v21);
LABEL_31:
    *(_BYTE *)v19 = 0;
    return result;
  }
  v22 = *(_QWORD *)(v19 + 40);
  v23 = *(_QWORD *)(v19 + 24);
  if (v22)
  {
LABEL_30:
    v24 = __clz(v22);
    *(_QWORD *)(v19 + 40) = v22 & ~(0x8000000000000000 >> v24);
    result = (void *)(v23 + 16 * v24);
    goto LABEL_31;
  }
  if (*(_BYTE *)(v19 + 5) == 6)
  {
    v26 = *(unsigned int *)(v19 + 32);
    v27 = *(_DWORD *)(v19 + 36);
    if (v26 < v27)
    {
      v28 = v19 + 8 * v26;
      *(_QWORD *)(v28 + 56) = 0;
      v29 = (unint64_t *)(v28 + 64);
      v30 = v27 - 1 - v26;
      while (v30)
      {
        v23 += 1024;
        v32 = *v29++;
        v31 = v32;
        LODWORD(v26) = v26 + 1;
        --v30;
        if (v32)
        {
          v22 = __rbit64(v31);
          *(_DWORD *)(v19 + 32) = v26;
          *(_QWORD *)(v19 + 24) = v23;
          goto LABEL_30;
        }
      }
      *(_DWORD *)(v19 + 32) = v27;
    }
  }
  v33 = v19;
  if (pas_debug_heap_is_enabled(2))
    return pas_debug_heap_allocate(v13, a3);
  if (*(_BYTE *)(v33 + 5) == 6)
    return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v33, a4, (uint64_t)&bmalloc_allocator_counts, (uint64_t)pas_allocation_result_crash_on_error, v34, v35, v36, v37);
  return (void *)bmalloc_heap_config_specialized_local_allocator_try_allocate_slow(v33, v13, a3, a4, (uint64_t)&bmalloc_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_crash_on_error);
}

unint64_t bmalloc_get_allocation_size(unint64_t a1)
{
  unint64_t v1;
  unint64_t result;
  int v3;
  int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t StatusReg;
  unsigned int v25;
  unint64_t v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32[3];

  v1 = a1;
  if (!(a1 >> 43)
    && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a1 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a1)) & 1) != 0)
  {
    return *(unsigned int *)((a1 & 0xFFFFFFFFFFFFC000) + 4);
  }
  if (a1 >> 24 < *off_1ECF425F8
    || off_1ECF425F8[1] <= a1 >> 24
    || (v3 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a1 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a1) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3) == 0)
  {
    if (off_1ECF42618)
    {
      v4 = (a1 >> 17) ^ ((a1 >> 17) >> 4);
      v5 = ((v4 ^ 0xDEADBEEF) + 32 * v4) ^ (((v4 ^ 0xDEADBEEF) + 32 * v4) >> 11);
      v6 = (char *)off_1ECF42618 + 32;
      v7 = *((_DWORD *)off_1ECF42618 + 3) & v5;
      v8 = *((_QWORD *)off_1ECF42618 + 2 * v7 + 4);
      if (v8 == (a1 & 0xFFFFFFFFFFFE0000))
      {
LABEL_15:
        v10 = *(_QWORD *)&v6[16 * v7 + 8];
        if (v10)
          goto LABEL_22;
      }
      else
      {
        v9 = v5 + 1;
        while (v8 != -1)
        {
          v7 = *((_DWORD *)off_1ECF42618 + 3) & v9;
          v8 = *(_QWORD *)&v6[16 * v7];
          ++v9;
          if (v8 == (a1 & 0xFFFFFFFFFFFE0000))
            goto LABEL_15;
        }
      }
    }
    if (!off_1ECF42608)
      goto LABEL_35;
    v11 = (v1 >> 22) ^ ((v1 >> 22) >> 4);
    v12 = ((v11 ^ 0xDEADBEEF) + 32 * v11) ^ (((v11 ^ 0xDEADBEEF) + 32 * v11) >> 11);
    v13 = (char *)off_1ECF42608 + 32;
    v14 = *((_DWORD *)off_1ECF42608 + 3) & v12;
    v15 = *((_QWORD *)off_1ECF42608 + 2 * v14 + 4);
    if (v15 != (v1 & 0xFFFFFFFFFFC00000))
    {
      v16 = v12 + 1;
      while (v15 != -1)
      {
        v14 = *((_DWORD *)off_1ECF42608 + 3) & v16;
        v15 = *(_QWORD *)&v13[16 * v14];
        ++v16;
        if (v15 == (v1 & 0xFFFFFFFFFFC00000))
          goto LABEL_21;
      }
      goto LABEL_35;
    }
LABEL_21:
    v10 = *(_QWORD *)&v13[16 * v14 + 8];
    if (!v10)
    {
LABEL_35:
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v25 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v25, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_41;
      }
      __clrex();
      v31 = v1;
      os_unfair_lock_lock(&pas_heap_lock);
      v1 = v31;
LABEL_41:
      v27 = v1;
      pas_large_map_find(v1, v32);
      if (v32[0])
        result = v32[1] - v27;
      else
        result = 0;
      v28 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v29 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v29 != v28)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          return result;
      }
      __clrex();
      v30 = result;
      os_unfair_lock_unlock(&pas_heap_lock);
      return v30;
    }
LABEL_22:
    switch(*(_BYTE *)v10)
    {
      case 1:
        goto LABEL_26;
      case 2:
      case 4:
        result = *(unsigned int *)(v10 + 4);
        break;
      case 3:
        v18 = *(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF8;
        v19 = (v1 >> 12) & 0x1F;
        goto LABEL_27;
      case 5:
        return bmalloc_small_bitfit_page_config_specialized_page_get_allocation_size_with_page(v10, v1);
      case 6:
        result = bmalloc_medium_bitfit_page_config_specialized_page_get_allocation_size_with_page(v10, v1);
        break;
      case 7:
        result = bmalloc_marge_bitfit_page_config_specialized_page_get_allocation_size_with_page(v10, v1);
        break;
      default:
        return 0;
    }
    return result;
  }
  if (v3 != 2)
  {
    if (v3 == 1)
      return *(unsigned int *)((a1 & 0xFFFFFFFFFFFFC000) + 4);
    return 0;
  }
  v10 = a1 & 0xFFFFFFFFFFFFC000;
  v17 = *(unsigned __int8 *)(v1 & 0xFFFFFFFFFFFFC000);
  if (v17 == 5)
    return bmalloc_small_bitfit_page_config_specialized_page_get_allocation_size_with_page(v10, v1);
  if (v17 != 1)
    return 0;
LABEL_26:
  v18 = *(_QWORD *)(v10 + 32) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v1 >> 8) & 0x3F;
LABEL_27:
  v20 = *(unsigned int *)(v18 + 4 * v19 + 20);
  if ((_DWORD)v20)
    v21 = pas_compact_heap_reservation_base + 8 * v20;
  else
    v21 = 0;
  v22 = *(unsigned __int16 *)(v21 + 7) | ((unint64_t)*(unsigned __int8 *)(v21 + 9) << 16);
  if ((_DWORD)v22)
    v23 = pas_compact_heap_reservation_base + 8 * v22;
  else
    v23 = 0;
  return *(_DWORD *)(v23 + 24) & 0x7FFFFFF;
}

void *bmalloc_try_iso_allocate_impl_impl_slow(uint64_t *a1, size_t a2, uint64_t a3)
{
  return bmalloc_heap_config_specialized_try_allocate_common_impl_slow(a1, 0, a2, 1uLL, a3, (uint64_t)&bmalloc_typed_runtime_config, (uint64_t)&bmalloc_allocator_counts, 0);
}

void *bmalloc_iso_allocate_impl_impl_slow(uint64_t *a1, size_t a2, uint64_t a3)
{
  void *result;
  uint64_t v4;

  result = bmalloc_heap_config_specialized_try_allocate_common_impl_slow(a1, 0, a2, 1uLL, a3, (uint64_t)&bmalloc_typed_runtime_config, (uint64_t)&bmalloc_allocator_counts, 0);
  if ((v4 & 1) == 0)
    pas_panic_on_out_of_memory_error(result, v4);
  return result;
}

void *bmalloc_try_allocate_auxiliary_impl_impl_slow(uint64_t *a1, size_t a2, unint64_t a3, uint64_t a4)
{
  return bmalloc_heap_config_specialized_try_allocate_common_impl_slow(a1, 1, a2, a3, a4, (uint64_t)&bmalloc_primitive_runtime_config, (uint64_t)&bmalloc_allocator_counts, 0);
}

void *bmalloc_allocate_auxiliary_impl_impl_slow(uint64_t *a1, size_t a2, unint64_t a3, uint64_t a4)
{
  void *result;
  uint64_t v5;

  result = bmalloc_heap_config_specialized_try_allocate_common_impl_slow(a1, 1, a2, a3, a4, (uint64_t)&bmalloc_primitive_runtime_config, (uint64_t)&bmalloc_allocator_counts, 0);
  if ((v5 & 1) == 0)
    pas_panic_on_out_of_memory_error(result, v5);
  return result;
}

void bmalloc_heap_config_activate()
{
  uint64_t SlowCase;
  unint64_t v1;

  pas_designated_intrinsic_heap_initialize((uint64_t)&bmalloc_common_primitive_heap, (uint64_t)&bmalloc_heap_config);
  if (bmalloc::debugHeapCache != 1)
  {
    if (bmalloc::debugHeapCache)
      return;
    if (bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
    {
      if (*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
      {
LABEL_5:
        SlowCase = bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
        if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
          SlowCase = bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
        bmalloc::debugHeapCache = SlowCase;
        if (!SlowCase)
          __break(0xC471u);
        return;
      }
    }
    else if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
    {
      goto LABEL_5;
    }
    bmalloc::debugHeapCache = 1;
  }
  os_unfair_lock_assert_owner(&pas_heap_lock);
  if (!pas_root_for_libmalloc_enumeration)
  {
    v1 = pas_immortal_heap_allocate(0x1B8uLL, (uint64_t)"pas_malloc_zone_and_root_for_libmalloc_introspection", 0);
    *(_OWORD *)v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 128) = 0u;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_QWORD *)(v1 + 192) = 0;
    *(_QWORD *)(v1 + 16) = malloc_introspect_size;
    *(_QWORD *)(v1 + 72) = "WebKit Malloc";
    *(_QWORD *)(v1 + 96) = malloc_introspect;
    *(_DWORD *)(v1 + 104) = 4;
    pas_root_construct(v1 + 200);
    malloc_zone_register((malloc_zone_t *)v1);
    pas_root_for_libmalloc_enumeration = v1 + 200;
  }
}

uint64_t bmalloc_type_as_heap_type_get_type_size(unsigned int *a1)
{
  return *a1;
}

uint64_t bmalloc_type_as_heap_type_get_type_alignment(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t bmalloc_small_segregated_page_header_for_boundary_remote(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t bmalloc_heap_config_allocate_small_segregated_page(int **a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  int v6;
  uint64_t *v7;
  int **v8;
  uint64_t v9;
  uint64_t v10;
  int *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(unint64_t, uint64_t);
  int **v19;
  uint64_t v20;
  int64x2_t v21;
  void (*v22)(uint64_t@<X0>, size_t@<X1>, uint64_t *@<X3>, uint64_t@<X8>);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  v3 = *((_QWORD *)*a1 + 4);
  v4 = (uint64_t *)(v3 + 112);
  v5 = **a1;
  v12 = &bmalloc_megapage_table;
  v13 = 0;
  if (a3)
    v6 = 0;
  else
    v6 = 2;
  if (a3)
    v4 = 0;
  if (a3 == 1)
    v6 = 1;
  LODWORD(v13) = v6;
  v7 = (uint64_t *)(v3 + 48);
  if (a3 != 1)
    v7 = v4;
  if ((v5 & 0x20000) != 0)
    v8 = a1;
  else
    v8 = 0;
  v14 = xmmword_19919FBF0;
  v15 = 0x4000;
  v16 = 0;
  v17 = 0;
  v18 = table_set_by_index;
  v19 = &v12;
  v20 = 0;
  v26[0] = v7;
  v26[1] = &v14;
  v26[2] = v8;
  v26[3] = a2;
  v21 = vdupq_n_s64(1uLL);
  v22 = megapage_cache_allocate_aligned;
  v23 = v26;
  v24 = 0;
  v25 = 0;
  v9 = pas_simple_large_free_heap_try_allocate(v7, 0x4000, 0x4000, 0, &v21);
  return (v10 << 63 >> 63) & v9;
}

uint64_t bmalloc_small_segregated_page_config_select_shared_page_directory(uint64_t a1, uint64_t a2)
{
  return pas_shared_page_directory_by_size_get((int *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 96), *(_DWORD *)(a2 + 24) & 0x7FFFFFF, (uint64_t)&unk_1E35BE430);
}

uint64_t bmalloc_small_segregated_page_config_specialized_local_allocator_try_allocate_in_primordial_partial_view(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  _BOOL4 v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  BOOL v46;
  int v47;
  int v49;
  int v51;
  int v53;
  int v55;
  int v57;
  int v59;
  int v61;
  int v63;
  int v65;
  int v67;
  int v69;
  int v71;
  int v73;
  int v75;
  int v77;
  int v79;
  int v81;
  int v83;
  int v85;
  int v87;
  int v89;
  int v91;
  int v93;
  int v95;
  int v97;
  int v99;
  unint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t StatusReg;
  unsigned int v108;
  size_t v110;
  void *v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  os_unfair_lock_s *v116;
  int v117;
  unsigned int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  unsigned int v126;
  os_unfair_lock_s *v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  os_unfair_lock_s *v133;
  unsigned int v134;
  int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  int v151;
  unsigned int v152;
  int v153;
  _BOOL4 v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  unint64_t v161;
  os_unfair_lock_t v162;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  v4 = ((8 * *(unsigned __int16 *)(v3 + 4)) | ((unint64_t)*(unsigned __int8 *)(v3 + 6) << 19))
     + pas_compact_heap_reservation_base;
  v5 = *(os_unfair_lock_s **)(v2 + 8);
  if (v5)
    v6 = pas_segregated_page_switch_lock_slow(*(_QWORD *)(a1 + 24), 0, v5);
  else
    v6 = 0;
  v7 = *(_DWORD *)(a1 + 20);
  v8 = (1 << *(_BYTE *)(a1 + 4));
  v9 = (*(unsigned int *)(v4 + 20) + v8 - 1) & -v8;
  v10 = (v7 + v9);
  if (v10 <= 0x4000)
  {
    v112 = v10 | 0x100000000;
    if ((v10 ^ v9) > 0xFF)
    {
      v115 = v7 + v9;
    }
    else
    {
      v113 = v9;
      while (1)
      {
        v114 = (2 * v7 + v113);
        if (v114 > 0x4000)
          break;
        v112 = (v112 & 0xFFFFFFFF00000000 | v114) + 0x100000000;
        v113 += v7;
        if ((v114 ^ v9) >= 0x100)
        {
          v115 = v7 + v113;
          if (!HIDWORD(v112))
            goto LABEL_4;
          goto LABEL_281;
        }
      }
      v115 = 0x4000;
      if (!HIDWORD(v112))
        goto LABEL_4;
    }
LABEL_281:
    v138 = v9;
    *(_DWORD *)(v4 + 20) = v115;
    v139 = *(_QWORD *)v4;
    v140 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = v140 + v112;
    *(_DWORD *)(a1 + 16) = v112 - v10;
    if (v9 < v112)
    {
      v141 = a1 + 56;
      v142 = v2 + 44;
      v143 = (v139 & 0xFFFFFFFFFFFFFFFELL) + 20;
      if (v3)
      {
        do
        {
          v144 = v9 >> 4;
          v145 = 4 * (v144 >> 5);
          *(_DWORD *)(v141 + v145) |= 1 << v144;
          v146 = *(_DWORD *)(v142 + v145);
          if (!v146)
            ++*(_QWORD *)(v2 + 24);
          *(_DWORD *)(v143 + ((v144 >> 2) & 0x3FFFFFC)) = (v3 - pas_compact_heap_reservation_base) >> 3;
          *(_DWORD *)(v142 + 4 * (v144 >> 5)) = v146 | (1 << v144);
          LODWORD(v9) = v9 + v7;
        }
        while (v9 < v112);
      }
      else
      {
        do
        {
          v147 = v9 >> 4;
          v148 = 4 * (v147 >> 5);
          *(_DWORD *)(v141 + v148) |= 1 << v147;
          v149 = *(_DWORD *)(v142 + v148);
          if (!v149)
            ++*(_QWORD *)(v2 + 24);
          *(_DWORD *)(v143 + ((v147 >> 2) & 0x3FFFFFC)) = 0;
          *(_DWORD *)(v142 + 4 * (v147 >> 5)) = v149 | (1 << v147);
          LODWORD(v9) = v9 + v7;
        }
        while (v9 < v112);
      }
    }
    v130 = v140 + v138;
    if (v6)
    {
      v151 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (1)
      {
        v152 = __ldxr(&v6->_os_unfair_lock_opaque);
        if (v152 != v151)
          break;
        if (!__stlxr(0, &v6->_os_unfair_lock_opaque))
          return v130;
      }
      __clrex();
      os_unfair_lock_unlock(v6);
    }
  }
  else
  {
LABEL_4:
    v11 = *(_DWORD *)(a1 + 56);
    v12 = *(_DWORD *)(a1 + 60);
    v13 = (_DWORD *)(a1 + 56);
    v161 = __PAIR64__(v11, v12);
    v14 = v11 != 0;
    if (v12)
      v14 = 2;
    if (v13[2])
      v14 = 3;
    v159 = v13[3];
    v160 = v13[2];
    v15 = v13[5];
    v158 = v13[4];
    if (v159)
      v14 = 4;
    if (v13[4])
      v14 = 5;
    v16 = v13[7];
    v157 = v13[6];
    if (v15)
      v14 = 6;
    if (v13[6])
      v14 = 7;
    v17 = v13[9];
    v156 = v13[8];
    if (v16)
      v14 = 8;
    if (v13[8])
      v14 = 9;
    v19 = v13[10];
    v18 = v13[11];
    if (v17)
      v14 = 10;
    if (v19)
      v14 = 11;
    v21 = v13[12];
    v20 = v13[13];
    if (v18)
      v14 = 12;
    if (v21)
      v14 = 13;
    v23 = v13[14];
    v22 = v13[15];
    if (v20)
      v14 = 14;
    if (v23)
      v14 = 15;
    v25 = v13[16];
    v24 = v13[17];
    if (v22)
      v14 = 16;
    if (v25)
      v14 = 17;
    v27 = v13[18];
    v26 = v13[19];
    if (v24)
      v14 = 18;
    if (v27)
      v14 = 19;
    v28 = v13[20];
    v29 = v13[21];
    if (v26)
      v14 = 20;
    if (v28)
      v14 = 21;
    v30 = v13[22];
    v31 = v13[23];
    if (v29)
      v14 = 22;
    if (v30)
      v14 = 23;
    v33 = v13[24];
    v32 = v13[25];
    if (v31)
      v14 = 24;
    if (v33)
      v14 = 25;
    v35 = v13[26];
    v34 = v13[27];
    if (v32)
      v14 = 26;
    if (v35)
      v14 = 27;
    v37 = v13[28];
    v36 = v13[29];
    if (v34)
      v14 = 28;
    if (v37)
      v14 = 29;
    if (v36)
      v14 = 30;
    v38 = v13[30];
    v39 = v13[31];
    v40 = v38 == 0;
    if (v38)
    {
      v14 = 31;
      v41 = 1;
    }
    else
    {
      v41 = v39 == 0;
    }
    v154 = v41;
    v42 = v40;
    v153 = v42;
    if (v39)
      v14 = 32;
    v155 = v14;
    if (HIDWORD(v161))
      v43 = 0;
    else
      v43 = -1;
    if (HIDWORD(v161))
      v44 = 1;
    else
      v44 = (_DWORD)v161 == 0;
    if (!v44)
      v43 = 1;
    v45 = v160 | v161 | HIDWORD(v161);
    if (v161)
      v46 = 1;
    else
      v46 = v160 == 0;
    if (!v46)
      v43 = 2;
    v40 = v45 == 0;
    v47 = v159 | v45;
    if (v40 && v159 != 0)
      v43 = 3;
    v40 = v47 == 0;
    v49 = v158 | v47;
    if (v40 && v158 != 0)
      v43 = 4;
    v40 = v49 == 0;
    v51 = v15 | v49;
    if (v40 && v15 != 0)
      v43 = 5;
    v40 = v51 == 0;
    v53 = v157 | v51;
    if (v40 && v157 != 0)
      v43 = 6;
    v40 = v53 == 0;
    v55 = v16 | v53;
    if (v40 && v16 != 0)
      v43 = 7;
    v40 = v55 == 0;
    v57 = v156 | v55;
    if (v40 && v156 != 0)
      v43 = 8;
    v40 = v57 == 0;
    v59 = v17 | v57;
    if (v40 && v17 != 0)
      v43 = 9;
    v40 = v59 == 0;
    v61 = v19 | v59;
    if (v40 && v19 != 0)
      v43 = 10;
    v40 = v61 == 0;
    v63 = v18 | v61;
    if (v40 && v18 != 0)
      v43 = 11;
    v40 = v63 == 0;
    v65 = v21 | v63;
    if (v40 && v21 != 0)
      v43 = 12;
    v40 = v65 == 0;
    v67 = v20 | v65;
    if (v40 && v20 != 0)
      v43 = 13;
    v40 = v67 == 0;
    v69 = v23 | v67;
    if (v40 && v23 != 0)
      v43 = 14;
    v40 = v69 == 0;
    v71 = v22 | v69;
    if (v40 && v22 != 0)
      v43 = 15;
    v40 = v71 == 0;
    v73 = v25 | v71;
    if (v40 && v25 != 0)
      v43 = 16;
    v40 = v73 == 0;
    v75 = v24 | v73;
    if (v40 && v24 != 0)
      v43 = 17;
    v40 = v75 == 0;
    v77 = v27 | v75;
    if (v40 && v27 != 0)
      v43 = 18;
    v40 = v77 == 0;
    v79 = v26 | v77;
    if (v40 && v26 != 0)
      v43 = 19;
    v40 = v79 == 0;
    v81 = v28 | v79;
    if (v40 && v28 != 0)
      v43 = 20;
    v40 = v81 == 0;
    v83 = v29 | v81;
    if (v40 && v29 != 0)
      v43 = 21;
    v40 = v83 == 0;
    v85 = v30 | v83;
    if (v40 && v30 != 0)
      v43 = 22;
    v40 = v85 == 0;
    v87 = v31 | v85;
    if (v40 && v31 != 0)
      v43 = 23;
    v40 = v87 == 0;
    v89 = v33 | v87;
    if (v40 && v33 != 0)
      v43 = 24;
    v40 = v89 == 0;
    v91 = v32 | v89;
    if (v40 && v32 != 0)
      v43 = 25;
    v40 = v91 == 0;
    v93 = v35 | v91;
    if (v40 && v35 != 0)
      v43 = 26;
    v40 = v93 == 0;
    v95 = v34 | v93;
    if (v40 && v34 != 0)
      v43 = 27;
    v40 = v95 == 0;
    v97 = v37 | v95;
    if (v40 && v37 != 0)
      v43 = 28;
    v40 = v97 == 0;
    v99 = v36 | v97;
    if (v40 && v36 != 0)
      v43 = 29;
    v40 = v99 == 0;
    v101 = *((_QWORD *)v13 - 1) & 0xFFFFFFFFFFFFFFF8;
    v102 = v153;
    v103 = v154;
    if (!v40)
    {
      v102 = 1;
      v103 = 1;
    }
    v40 = v102 == 0;
    v104 = 30;
    if (!v40)
      v104 = v43;
    if (v103)
      v105 = v104;
    else
      v105 = 31;
    v106 = v155 - v105;
    *(_BYTE *)(v101 + 17) = v155 - v105;
    *(_BYTE *)(v101 + 18) = v105;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v108 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v108, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_228;
    }
    __clrex();
    v116 = *(os_unfair_lock_s **)(v2 + 8);
    v117 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v118 = __ldxr(&v116->_os_unfair_lock_opaque);
      if (v118 != v117)
        break;
      if (!__stlxr(0, &v116->_os_unfair_lock_opaque))
        goto LABEL_264;
    }
    __clrex();
    os_unfair_lock_unlock(v116);
LABEL_264:
    v131 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v131, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_270;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_270:
    v133 = *(os_unfair_lock_s **)(v2 + 8);
    v162 = v133;
    v134 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v133->_os_unfair_lock_opaque))
    {
      if (!__stxr(v134, &v133->_os_unfair_lock_opaque))
      {
        if (*(os_unfair_lock_s **)(v2 + 8) == v133)
          goto LABEL_228;
LABEL_276:
        v136 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v137 = __ldxr(&v133->_os_unfair_lock_opaque);
          if (v137 != v136)
            break;
          if (!__stlxr(0, &v133->_os_unfair_lock_opaque))
            goto LABEL_270;
        }
        __clrex();
        os_unfair_lock_unlock(v133);
        goto LABEL_270;
      }
    }
    __clrex();
    if (!pas_segregated_page_lock_with_unbias_impl(v2, &v162, v133))
      goto LABEL_276;
LABEL_228:
    if (v106 == 1)
    {
      v110 = 4;
      v111 = (void *)v101;
    }
    else
    {
      v110 = 4 * v106;
      v111 = (void *)pas_immortal_heap_allocate_with_manual_alignment(4 * v106, 8, (uint64_t)"pas_segregated_partial_view/alloc_bits", 0);
    }
    v119 = (unint64_t)v111 - 4 * v105;
    memcpy(v111, &v13[v105], v110);
    __dmb(0xAu);
    v120 = *(unsigned int *)(v101 + 12);
    v121 = pas_compact_heap_reservation_base;
    if (v120 >= 8)
      v122 = pas_compact_heap_reservation_base;
    else
      v122 = 0;
    v123 = v122 + v120;
    if ((v123 & 1) != 0)
    {
      pas_utility_heap_deallocate(v123 & 0xFFFFFFFFFFFFFFFELL);
      v121 = pas_compact_heap_reservation_base;
    }
    if (v119 >= 8 && v119 - v121 >= pas_compact_heap_reservation_size)
    {
      v124 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
      *(_QWORD *)v124 = v119;
      v119 = v124 | 1;
      LODWORD(v121) = pas_compact_heap_reservation_base;
    }
    if (v119 < 8)
      LODWORD(v121) = 0;
    *(_DWORD *)(v101 + 12) = v119 - v121;
    v125 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v126 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v126 != v125)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_256;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
LABEL_256:
    v127 = *(os_unfair_lock_s **)(v2 + 8);
    v128 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v129 = __ldxr(&v127->_os_unfair_lock_opaque);
      if (v129 != v128)
        break;
      if (!__stlxr(0, &v127->_os_unfair_lock_opaque))
        return 0;
    }
    __clrex();
    os_unfair_lock_unlock(v127);
    return 0;
  }
  return v130;
}

uint64_t bmalloc_small_segregated_page_config_specialized_local_allocator_start_allocating_in_primordial_partial_view(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  unint64_t StatusReg;
  uint64_t v7;
  unsigned int *v8;
  unint64_t first_eligible;
  os_unfair_lock_s *v10;
  os_unfair_lock *v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t *v15;
  _BOOL8 v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  os_unfair_lock_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  os_unfair_lock_s *v41;
  os_unfair_lock_s *v42;
  unsigned int v43;
  unsigned int v45;
  os_unfair_lock_s *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_unfair_lock_s *v52;
  os_unfair_lock_s *v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v66;
  int v67;
  int v68;

  v4 = *(_DWORD *)(a1 + 20);
  v5 = 1 << *(_BYTE *)(a1 + 4);
  v67 = v5 - 1;
  v68 = v5;
  v66 = -v5;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
LABEL_3:
  v7 = *(_QWORD *)(a3 + 16);
  v8 = (unsigned int *)pas_shared_page_directory_by_size_get((int *)(*(_QWORD *)(*(_QWORD *)v7 + 32) + 96), *(_DWORD *)(a3 + 24) & 0x7FFFFFF, (uint64_t)&unk_1E35BE430);
  first_eligible = pas_segregated_shared_page_directory_find_first_eligible(v8, v4, v68, 0);
  v10 = (os_unfair_lock_s *)first_eligible;
  v11 = (os_unfair_lock *)(first_eligible + 8);
  v12 = *(_DWORD *)(StatusReg + 24);
  do
  {
    if (__ldaxr(&v11->_os_unfair_lock_opaque))
    {
      __clrex();
      os_unfair_lock_lock((os_unfair_lock_t)(first_eligible + 8));
      v14 = *(_QWORD *)&v10->_os_unfair_lock_opaque;
      if ((*(_QWORD *)&v10->_os_unfair_lock_opaque & 1) != 0)
        goto LABEL_10;
LABEL_7:
      v15 = (uint64_t *)pas_segregated_shared_view_commit_page(v10, v7, (uint64_t)v8, a2, (uint64_t)&unk_1E35BE430);
      v16 = v15 != 0;
      if (!v15)
        goto LABEL_32;
LABEL_11:
      v17 = *v15;
      v18 = *(os_unfair_lock_s **)(*v15 + 8);
      if (v18)
        v19 = pas_segregated_page_switch_lock_slow(*v15, 0, v18);
      else
        v19 = 0;
      v20 = (v67 + v10[5]._os_unfair_lock_opaque) & v66;
      v21 = v4 + v20;
      if (v21 > 0x4000)
        goto LABEL_21;
      v22 = v21 | 0x100000000;
      if ((v21 ^ v20) > 0xFF)
        goto LABEL_36;
      v23 = (v67 + v10[5]._os_unfair_lock_opaque) & v66;
      do
      {
        v24 = (2 * v4 + v23);
        if (v24 > 0x4000)
        {
          LODWORD(v21) = 0x4000;
          if (!HIDWORD(v22))
            goto LABEL_21;
LABEL_36:
          v10[5]._os_unfair_lock_opaque = v21;
          *(_BYTE *)(a2 + 19) |= 1u;
          ++v10[6]._os_unfair_lock_opaque;
          *(_BYTE *)(a2 + 19) &= ~4u;
          v31 = (unint64_t)v10 - pas_compact_heap_reservation_base;
          *(_BYTE *)(a2 + 4) = ((unint64_t)v10 - pas_compact_heap_reservation_base) >> 3;
          *(_BYTE *)(a2 + 5) = v31 >> 11;
          *(_BYTE *)(a2 + 6) = v31 >> 19;
          if (((*(_BYTE *)(a1 + 5) - 4) & 0xF8) != 0)
            v32 = 3;
          else
            v32 = 0xB0B090907070505uLL >> (8 * (*(_BYTE *)(a1 + 5) - 4));
          *(_BYTE *)(a1 + 5) = v32;
          *(_OWORD *)(a1 + 56) = 0u;
          v33 = a1 + 56;
          *(_QWORD *)(a1 + 24) = v17;
          *(_OWORD *)(a1 + 72) = 0u;
          *(_OWORD *)(a1 + 88) = 0u;
          *(_OWORD *)(a1 + 104) = 0u;
          *(_OWORD *)(a1 + 120) = 0u;
          *(_OWORD *)(a1 + 136) = 0u;
          *(_OWORD *)(a1 + 152) = 0u;
          *(_OWORD *)(a1 + 168) = 0u;
          v34 = *(_DWORD *)(a1 + 20);
          *(_QWORD *)(a1 + 8) = v17 + v22;
          *(_DWORD *)(a1 + 16) = v22 - v20;
          if (v22 > v20)
          {
            v35 = v17 + 44;
            do
            {
              v36 = v20 >> 4;
              v37 = 4 * (v36 >> 5);
              *(_DWORD *)(v33 + v37) |= 1 << v36;
              v38 = *(_DWORD *)(v35 + v37);
              if (!v38)
                ++*(_QWORD *)(v17 + 24);
              *(_DWORD *)((char *)v15 + ((v36 >> 2) & 0x3FFFFFC) + 20) = (unint64_t)(a2
                                                                                          - pas_compact_heap_reservation_base) >> 3;
              *(_DWORD *)(v35 + 4 * (v36 >> 5)) = v38 | (1 << v36);
              v20 += v34;
            }
            while (v20 < v22);
          }
          *(_QWORD *)(a1 + 48) = a2 | 4;
          *(_BYTE *)(a2 + 19) |= 0x10u;
          v39 = *(_DWORD *)(StatusReg + 24);
          while (1)
          {
            v40 = __ldxr(&v11->_os_unfair_lock_opaque);
            if (v40 != v39)
              break;
            if (!__stlxr(0, &v11->_os_unfair_lock_opaque))
              goto LABEL_49;
          }
          __clrex();
          v41 = v11;
          v42 = v19;
          os_unfair_lock_unlock(v41);
          v19 = v42;
LABEL_49:
          v43 = *(_DWORD *)(StatusReg + 24);
          v11 = &pas_heap_lock;
          while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
          {
            if (!__stxr(v43, &pas_heap_lock._os_unfair_lock_opaque))
              goto LABEL_61;
          }
          __clrex();
          if (v19)
          {
            v60 = *(_DWORD *)(StatusReg + 24);
            while (1)
            {
              v61 = __ldxr(&v19->_os_unfair_lock_opaque);
              if (v61 != v60)
                break;
              if (!__stlxr(0, &v19->_os_unfair_lock_opaque))
                goto LABEL_54;
            }
            __clrex();
            os_unfair_lock_unlock(v19);
          }
LABEL_54:
          v45 = *(_DWORD *)(StatusReg + 24);
          while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
          {
            if (!__stxr(v45, &pas_heap_lock._os_unfair_lock_opaque))
              goto LABEL_59;
          }
          __clrex();
          os_unfair_lock_lock(&pas_heap_lock);
LABEL_59:
          v47 = *(os_unfair_lock_s **)(v17 + 8);
          if (v47)
          {
            v19 = pas_segregated_page_switch_lock_slow(v17, 0, v47);
            v62 = *(unsigned int *)(a2 + 12);
            v49 = pas_compact_heap_reservation_base;
            if (v62 >= 8)
              v63 = pas_compact_heap_reservation_base;
            else
              v63 = 0;
            v51 = v63 + v62;
            if ((v51 & 1) != 0)
              goto LABEL_65;
          }
          else
          {
            v19 = 0;
LABEL_61:
            v48 = *(unsigned int *)(a2 + 12);
            v49 = pas_compact_heap_reservation_base;
            if (v48 >= 8)
              v50 = pas_compact_heap_reservation_base;
            else
              v50 = 0;
            v51 = v50 + v48;
            if ((v51 & 1) != 0)
            {
LABEL_65:
              v52 = v19;
              pas_utility_heap_deallocate(v51 & 0xFFFFFFFFFFFFFFFELL);
              v19 = v52;
              v49 = pas_compact_heap_reservation_base;
            }
          }
          if (v33 >= 8 && v33 - v49 >= pas_compact_heap_reservation_size)
          {
            v53 = v19;
            v54 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
            v19 = v53;
            *(_QWORD *)v54 = v33;
            v33 = v54 | 1;
            LODWORD(v49) = pas_compact_heap_reservation_base;
          }
          if (v33 < 8)
            LODWORD(v49) = 0;
          *(_DWORD *)(a2 + 12) = v33 - v49;
          *(_BYTE *)(a2 + 17) = 32;
          if (v19)
          {
            v58 = *(_DWORD *)(StatusReg + 24);
            while (1)
            {
              v59 = __ldxr(&v19->_os_unfair_lock_opaque);
              if (v59 != v58)
                break;
              if (!__stlxr(0, &v19->_os_unfair_lock_opaque))
                goto LABEL_72;
            }
            __clrex();
            os_unfair_lock_unlock(v19);
          }
LABEL_72:
          v55 = *(_DWORD *)(StatusReg + 24);
          while (1)
          {
            v56 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
            if (v56 != v55)
              break;
            if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
              return 1;
          }
          goto LABEL_76;
        }
        v22 = (v22 & 0xFFFFFFFF00000000 | v24) + 0x100000000;
        v23 += v4;
      }
      while ((v24 ^ v20) < 0x100);
      LODWORD(v21) = v4 + v23;
      if (HIDWORD(v22))
        goto LABEL_36;
LABEL_21:
      if (v19)
      {
        v27 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v28 = __ldxr(&v19->_os_unfair_lock_opaque);
          if (v28 != v27)
            break;
          if (!__stlxr(0, &v19->_os_unfair_lock_opaque))
            goto LABEL_22;
        }
        __clrex();
        os_unfair_lock_unlock(v19);
      }
LABEL_22:
      v25 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v26 = __ldxr(&v11->_os_unfair_lock_opaque);
        if (v26 != v25)
          break;
        if (!__stlxr(0, &v11->_os_unfair_lock_opaque))
          goto LABEL_3;
      }
      __clrex();
      os_unfair_lock_unlock(v11);
      goto LABEL_3;
    }
  }
  while (__stxr(v12, &v11->_os_unfair_lock_opaque));
  v14 = *(_QWORD *)first_eligible;
  if ((*(_QWORD *)first_eligible & 1) == 0)
    goto LABEL_7;
LABEL_10:
  v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFELL);
  v16 = (v14 & 0xFFFFFFFFFFFFFFFELL) != 0;
  if ((v14 & 0xFFFFFFFFFFFFFFFELL) != 0)
    goto LABEL_11;
LABEL_32:
  v29 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v30 = __ldxr(&v11->_os_unfair_lock_opaque);
    if (v30 != v29)
      break;
    if (!__stlxr(0, &v11->_os_unfair_lock_opaque))
      return 0;
  }
LABEL_76:
  __clrex();
  os_unfair_lock_unlock(v11);
  return v16;
}

uint64_t bmalloc_small_segregated_page_config_specialized_local_allocator_refill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t StatusReg;
  unint64_t v58;
  os_unfair_lock_s *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  _DWORD *v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int i;
  uint64_t v79;
  int v80;
  _BYTE *v81;
  int v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  os_unfair_lock_s *v87;
  unint64_t v88;
  char v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t eligible;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  os_unfair_lock_s *v110;
  uint64_t v111;
  os_unfair_lock_s *v112;
  unsigned int v113;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  os_unfair_lock_t v118;
  unsigned int v119;
  os_unfair_lock_s *v121;
  unsigned int v122;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  os_unfair_lock_t v131;
  int v132;
  unsigned int v133;
  os_unfair_lock_s *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned int j;
  unint64_t v141;
  unsigned int k;
  unint64_t v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v153;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  os_unfair_lock_s *v159;
  unsigned int v160;
  unint64_t v161;
  int v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char local_allocator_slow;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  const os_unfair_lock *v179;
  _BOOL4 v180;
  char v181;
  int v182;
  unint64_t v183;
  unsigned int v184;
  unint64_t v185;
  uint64_t v186;
  BOOL v187;
  uint64_t result;
  int v189;
  unsigned int v190;
  uint64_t v191;
  int v192;
  unint64_t v193;
  _OWORD *v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  os_unfair_lock_s *v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  int *v210;
  int *v211;
  int *v212;
  int v213;
  int v214;
  int v215;
  BOOL v216;
  os_unfair_lock_t v217;
  int v218;
  unsigned int v219;
  int v220;
  unsigned int v221;
  unint64_t v222;
  int64x2_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  os_unfair_lock_s *v227;
  os_unfair_lock_s *v228;
  os_unfair_lock_s *v229;
  unint64_t v230;
  uint64_t v231;
  os_unfair_lock_s *v232;
  unint64_t v233;
  os_unfair_lock_t v234;
  os_unfair_lock_t v235;
  os_unfair_lock_t lock;
  _QWORD v237[2];
  int64x2_t v238;
  void (*v239)(uint64_t@<X0>, size_t@<X1>, uint64_t *@<X3>, uint64_t@<X8>);
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  _QWORD v243[4];
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  void (*v248)(unint64_t, uint64_t);
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;

  v251 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 48);
  v10 = &unk_1ECF57000;
  if ((v9 & 7) == 5)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFF8;
    v234 = 0;
    v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 16);
    if ((*(_BYTE *)(*(_QWORD *)v12 + 2) & 1) != 0)
      goto LABEL_33;
    goto LABEL_12;
  }
  if (!v9)
    goto LABEL_11;
  if ((v9 & 7u) < 2)
  {
    v13 = v9 & 0xFFFFFFFFFFFFFFF8;
    v14 = *(unsigned __int8 *)(v13 + 10);
    v15 = *(unsigned __int16 *)(v13 + 8);
    goto LABEL_9;
  }
  if ((v9 & 7) != 4)
  {
LABEL_11:
    v11 = 0;
    v234 = 0;
    v12 = MEMORY[0x10];
    if ((*(_BYTE *)(*MEMORY[0x10] + 2) & 1) != 0)
      goto LABEL_33;
    goto LABEL_12;
  }
  v16 = (unsigned __int16 *)(v9 | 7);
  v14 = *((unsigned __int8 *)v16 + 2);
  v15 = *v16;
LABEL_9:
  v11 = ((8 * v15) | (v14 << 19)) + pas_compact_heap_reservation_base;
  v234 = 0;
  v12 = *(_QWORD *)(v11 + 16);
  if ((*(_BYTE *)(*(_QWORD *)v12 + 2) & 1) == 0)
  {
LABEL_12:
    v17 = *(unsigned int *)(v12 + 36);
    if (!(_DWORD)v17)
      goto LABEL_33;
    v18 = *(_QWORD *)(v12 + 8);
    if (v18)
    {
      v19 = v18 & 0xFFFFFFFFFE000000;
      v20 = *(_QWORD *)(v12 + 8) & 0x1FFFFFFLL;
      v21 = (unint64_t)(v20 - 16392) >> 14;
      v22 = (unint64_t)(v20 + 4 * v17 - 16385) >> 14;
      v23 = v19 | 0x10;
      v24 = (unint64_t *)(v23 + 8 * v21);
      while (1)
      {
        v25 = *v24;
        if ((*v24 & 7) < 3)
        {
LABEL_22:
          if (v21 == v22)
            goto LABEL_23;
          v90 = (unint64_t *)(v23 + 8 * v22);
          while (2)
          {
            v91 = *v90;
            if ((*v90 & 7) < 3)
              goto LABEL_23;
            v92 = __ldxr(v90);
            if (v92 == v91)
            {
              if (!__stlxr(v91 & 0xFFFFFFFFFFFFFFF8 | 2, v90))
              {
                v93 = 1;
                goto LABEL_117;
              }
            }
            else
            {
              __clrex();
            }
            v93 = 0;
LABEL_117:
            __dmb(0xBu);
            if (v93)
              goto LABEL_23;
            continue;
          }
        }
        v26 = __ldxr(v24);
        if (v26 != v25)
          break;
        if (__stlxr(v25 & 0xFFFFFFFFFFFFFFF8 | 2, v24))
          goto LABEL_20;
        v27 = 1;
LABEL_21:
        __dmb(0xBu);
        if (v27)
          goto LABEL_22;
      }
      __clrex();
LABEL_20:
      v27 = 0;
      goto LABEL_21;
    }
LABEL_23:
    v28 = *(_QWORD *)(v12 + 16);
    if (!v28)
      goto LABEL_33;
    v29 = v28 & 0xFFFFFFFFFE000000;
    v30 = *(_QWORD *)(v12 + 16) & 0x1FFFFFFLL;
    v31 = v30 + 4 * v17;
    v32 = (unint64_t)(v30 - 16392) >> 14;
    v33 = (unint64_t)(v31 - 16385) >> 14;
    v34 = v29 | 0x10;
    v35 = (unint64_t *)(v34 + 8 * v32);
    while (1)
    {
      v36 = *v35;
      if ((*v35 & 7) < 3)
      {
LABEL_32:
        if (v32 == v33)
          goto LABEL_33;
        v94 = (unint64_t *)(v34 + 8 * v33);
        while (2)
        {
          v95 = *v94;
          if ((*v94 & 7) < 3)
            goto LABEL_33;
          v96 = __ldxr(v94);
          if (v96 == v95)
          {
            if (!__stlxr(v95 & 0xFFFFFFFFFFFFFFF8 | 2, v94))
            {
              v97 = 1;
              goto LABEL_126;
            }
          }
          else
          {
            __clrex();
          }
          v97 = 0;
LABEL_126:
          __dmb(0xBu);
          if (v97)
            goto LABEL_33;
          continue;
        }
      }
      v37 = __ldxr(v35);
      if (v37 != v36)
        break;
      if (__stlxr(v36 & 0xFFFFFFFFFFFFFFF8 | 2, v35))
        goto LABEL_30;
      v38 = 1;
LABEL_31:
      __dmb(0xBu);
      if (v38)
        goto LABEL_32;
    }
    __clrex();
LABEL_30:
    v38 = 0;
    goto LABEL_31;
  }
LABEL_33:
  v39 = *(unsigned int *)(v12 + 28);
  v40 = pas_compact_heap_reservation_base + 8 * v39;
  if ((_DWORD)v39)
    v41 = v40 == 0;
  else
    v41 = 1;
  if (!v41)
  {
    v42 = *(unsigned int *)(v40 + 12);
    if ((_DWORD)v42)
    {
      v43 = *(unsigned int *)(v40 + 8);
      if ((_DWORD)v43)
        v44 = pas_compact_heap_reservation_base + 8 * v43;
      else
        v44 = 0;
      v45 = v44 - pas_compact_expendable_memory_payload;
      v46 = (unint64_t)(v44 - pas_compact_expendable_memory_payload - 8) >> 14;
      v47 = (unint64_t)(v45 + 16 * v42 - 1) >> 14;
      v48 = (unint64_t *)&pas_compact_expendable_memory_header[v46 + 1];
      while (1)
      {
        v49 = *v48;
        if ((*v48 & 7) < 3)
        {
LABEL_49:
          if (v46 == v47)
            goto LABEL_50;
          v83 = (unint64_t *)&pas_compact_expendable_memory_header[v47 + 1];
          while (2)
          {
            v84 = *v83;
            if ((*v83 & 7) < 3)
              goto LABEL_50;
            v85 = __ldxr(v83);
            if (v85 == v84)
            {
              if (!__stlxr(v84 & 0xFFFFFFFFFFFFFFF8 | 2, v83))
              {
                v86 = 1;
                goto LABEL_105;
              }
            }
            else
            {
              __clrex();
            }
            v86 = 0;
LABEL_105:
            __dmb(0xBu);
            if (v86)
              goto LABEL_50;
            continue;
          }
        }
        v50 = __ldxr(v48);
        if (v50 != v49)
          break;
        if (__stlxr(v49 & 0xFFFFFFFFFFFFFFF8 | 2, v48))
          goto LABEL_47;
        v51 = 1;
LABEL_48:
        __dmb(0xBu);
        if (v51)
          goto LABEL_49;
      }
      __clrex();
LABEL_47:
      v51 = 0;
      goto LABEL_48;
    }
  }
LABEL_50:
  *(_WORD *)(a1 + 1) = 256;
  if (pas_scavenger_current_state != 1 && pas_scavenger_eligibility_notification_has_been_deferred == 0)
  {
    __dmb(0xBu);
    pas_scavenger_eligibility_notification_has_been_deferred = 1;
  }
  else if (pas_scavenger_current_state == 1)
  {
    v53 = *(_QWORD *)(a1 + 24);
    if (v53)
      goto LABEL_56;
LABEL_60:
    v54 = 0;
    v55 = 0;
    goto LABEL_61;
  }
  pas_scavenger_notify_eligibility_if_needed();
  v53 = *(_QWORD *)(a1 + 24);
  if (!v53)
    goto LABEL_60;
LABEL_56:
  v54 = v53 & 0xFFFFFFFFFFFFC000;
  v55 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFC000) + 0x20);
  if ((v55 & 6) != 0)
    v55 = *(_QWORD *)(a1 + 48);
LABEL_61:
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v56 = v11 | 5;
  if (!v11)
    v56 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v56;
  *(_WORD *)(a1 + 5) = 6;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v58 = *(_QWORD *)(StatusReg + 752);
  if (v58)
  {
    v59 = *(os_unfair_lock_s **)(v58 + 8016);
    if (*(_BYTE *)(v58 + 8048))
    {
      v222 = v54;
      v227 = *(os_unfair_lock_s **)(v58 + 8016);
      v224 = v11;
      v60 = *(_DWORD *)(v58 + 8052) + 31;
      if (v60 >= 0x20)
      {
        v75 = 0;
        v76 = *(_QWORD *)(v58 + 8024);
        v77 = v60 >> 5;
        do
        {
          for (i = *(_DWORD *)(v76 + 4 * v75); i; i &= ~v80)
          {
            v79 = __clz(__rbit32(i));
            v80 = 1 << v79;
            *(_DWORD *)(v76 + 4 * v75) &= ~(1 << v79);
            v81 = (_BYTE *)(v58 + 8064 + 8 * ((32 * v75) | v79));
            if (v81 != (_BYTE *)a1 && v81[1])
            {
              v82 = v81[3];
              if (v82 == 4)
              {
                pas_local_view_cache_stop(v81, 1);
              }
              else if (v82 == 2)
              {
                pas_local_allocator_stop(v81, 1, 0);
              }
            }
          }
          ++v75;
        }
        while (v75 != v77);
      }
      v54 = v222;
      *(_BYTE *)(v58 + 8048) = 0;
      v10 = (_QWORD *)&unk_1ECF57000;
      v11 = v224;
      v59 = v227;
    }
    v234 = 0;
    if (!v55)
      goto LABEL_75;
  }
  else
  {
    v59 = 0;
    v234 = 0;
    if (!v55)
      goto LABEL_75;
  }
  if ((v55 & 7) == 4)
  {
    v68 = v55 & 0xFFFFFFFFFFFFFFF8;
    v69 = *(_BYTE *)((v55 & 0xFFFFFFFFFFFFFFF8) + 19);
    if ((v69 & 4) != 0)
    {
      v230 = StatusReg;
      v87 = *(os_unfair_lock_s **)(v54 + 8);
      if (v87)
      {
        v234 = pas_segregated_page_switch_lock_slow(v54, 0, v87);
        v69 = *(_BYTE *)(v68 + 19);
      }
      v88 = v54;
      v89 = v69 & 0xF9;
      goto LABEL_287;
    }
  }
  else if ((v55 & 7) == 0)
  {
    pas_segregated_page_switch_lock_and_rebias_while_ineligible_impl(v54, &v234, v59);
    *(_QWORD *)(v54 + 32) = v55 | 1;
    *(_BYTE *)(v54 + 2) = 0;
    if (!*(_QWORD *)(v54 + 24))
    {
LABEL_281:
      v191 = v10[317] + 8 * *(unsigned int *)(v11 + 40);
      v192 = *(_DWORD *)v191;
      v193 = *(unsigned int *)(v191 + 4) + v54;
      *(_QWORD *)(v54 + 24) = *(unsigned __int8 *)(v191 + 8);
      *(_QWORD *)(a1 + 8) = v193;
      *(_DWORD *)(a1 + 16) = v193 - (v192 + v54);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 24) = v54;
      v194 = (_OWORD *)(v10[317] + *(unsigned int *)(v191 + 9));
      v195 = v194[2];
      v196 = v194[3];
      v197 = v194[1];
      *(_OWORD *)(v54 + 44) = *v194;
      *(_OWORD *)(v54 + 92) = v196;
      *(_OWORD *)(v54 + 76) = v195;
      *(_OWORD *)(v54 + 60) = v197;
      v198 = v194[6];
      v199 = v194[7];
      v200 = v194[5];
      *(_OWORD *)(v54 + 108) = v194[4];
      *(_OWORD *)(v54 + 156) = v199;
      *(_OWORD *)(v54 + 140) = v198;
      *(_OWORD *)(v54 + 124) = v200;
      goto LABEL_297;
    }
LABEL_73:
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v61 = v10[317];
    v62 = (unsigned int *)(v61 + 8 * *(unsigned int *)(v11 + 40));
    v63 = *v62;
    v64 = v63 >> 10;
    v65 = (((v62[1] >> 4) - 1) >> 6) + 1;
    v66 = (_DWORD *)(v61 + *(unsigned int *)((char *)v62 + 9));
    *(_OWORD *)(a1 + 56) = 0u;
    v67 = a1 + 56;
    *(_DWORD *)(v67 - 24) = v63 >> 10;
    *(_DWORD *)(v67 - 20) = v65;
    *(_OWORD *)(v67 + 16) = 0u;
    *(_OWORD *)(v67 + 32) = 0u;
    *(_OWORD *)(v67 + 48) = 0u;
    *(_OWORD *)(v67 + 64) = 0u;
    *(_OWORD *)(v67 + 80) = 0u;
    *(_OWORD *)(v67 + 96) = 0u;
    *(_OWORD *)(v67 + 112) = 0u;
    *(_QWORD *)(v67 - 32) = (v63 & 0xFFFFFC00) + v54;
    LODWORD(v62) = *v66;
    LODWORD(v63) = *(_DWORD *)(v54 + 44);
    *(_DWORD *)v67 = *v66 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 44) = v63 | v62;
    LODWORD(v62) = v66[1];
    LODWORD(v63) = *(_DWORD *)(v54 + 48);
    *(_DWORD *)(v67 + 4) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 48) = v63 | v62;
    LODWORD(v62) = v66[2];
    LODWORD(v63) = *(_DWORD *)(v54 + 52);
    *(_DWORD *)(v67 + 8) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 52) = v63 | v62;
    LODWORD(v62) = v66[3];
    LODWORD(v63) = *(_DWORD *)(v54 + 56);
    *(_DWORD *)(v67 + 12) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 56) = v63 | v62;
    LODWORD(v62) = v66[4];
    LODWORD(v63) = *(_DWORD *)(v54 + 60);
    *(_DWORD *)(v67 + 16) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 60) = v63 | v62;
    LODWORD(v62) = v66[5];
    LODWORD(v63) = *(_DWORD *)(v54 + 64);
    *(_DWORD *)(v67 + 20) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 64) = v63 | v62;
    LODWORD(v62) = v66[6];
    LODWORD(v63) = *(_DWORD *)(v54 + 68);
    *(_DWORD *)(v67 + 24) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 68) = v63 | v62;
    LODWORD(v62) = v66[7];
    LODWORD(v63) = *(_DWORD *)(v54 + 72);
    *(_DWORD *)(v67 + 28) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 72) = v63 | v62;
    LODWORD(v62) = v66[8];
    LODWORD(v63) = *(_DWORD *)(v54 + 76);
    *(_DWORD *)(v67 + 32) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 76) = v63 | v62;
    LODWORD(v62) = v66[9];
    LODWORD(v63) = *(_DWORD *)(v54 + 80);
    *(_DWORD *)(v67 + 36) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 80) = v63 | v62;
    LODWORD(v62) = v66[10];
    LODWORD(v63) = *(_DWORD *)(v54 + 84);
    *(_DWORD *)(v67 + 40) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 84) = v63 | v62;
    LODWORD(v62) = v66[11];
    LODWORD(v63) = *(_DWORD *)(v54 + 88);
    *(_DWORD *)(v67 + 44) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 88) = v63 | v62;
    LODWORD(v62) = v66[12];
    LODWORD(v63) = *(_DWORD *)(v54 + 92);
    *(_DWORD *)(v67 + 48) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 92) = v63 | v62;
    LODWORD(v62) = v66[13];
    LODWORD(v63) = *(_DWORD *)(v54 + 96);
    *(_DWORD *)(v67 + 52) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 96) = v63 | v62;
    LODWORD(v62) = v66[14];
    LODWORD(v63) = *(_DWORD *)(v54 + 100);
    *(_DWORD *)(v67 + 56) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 100) = v63 | v62;
    LODWORD(v62) = v66[15];
    LODWORD(v63) = *(_DWORD *)(v54 + 104);
    *(_DWORD *)(v67 + 60) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 104) = v63 | v62;
    LODWORD(v62) = v66[16];
    LODWORD(v63) = *(_DWORD *)(v54 + 108);
    *(_DWORD *)(v67 + 64) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 108) = v63 | v62;
    LODWORD(v62) = v66[17];
    LODWORD(v63) = *(_DWORD *)(v54 + 112);
    *(_DWORD *)(v67 + 68) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 112) = v63 | v62;
    LODWORD(v62) = v66[18];
    LODWORD(v63) = *(_DWORD *)(v54 + 116);
    *(_DWORD *)(v67 + 72) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 116) = v63 | v62;
    LODWORD(v62) = v66[19];
    LODWORD(v63) = *(_DWORD *)(v54 + 120);
    *(_DWORD *)(v67 + 76) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 120) = v63 | v62;
    LODWORD(v62) = v66[20];
    LODWORD(v63) = *(_DWORD *)(v54 + 124);
    *(_DWORD *)(v67 + 80) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 124) = v63 | v62;
    LODWORD(v62) = v66[21];
    LODWORD(v63) = *(_DWORD *)(v54 + 128);
    *(_DWORD *)(v67 + 84) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 128) = v63 | v62;
    LODWORD(v62) = v66[22];
    LODWORD(v63) = *(_DWORD *)(v54 + 132);
    *(_DWORD *)(v67 + 88) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 132) = v63 | v62;
    LODWORD(v62) = v66[23];
    LODWORD(v63) = *(_DWORD *)(v54 + 136);
    *(_DWORD *)(v67 + 92) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 136) = v63 | v62;
    LODWORD(v62) = v66[24];
    LODWORD(v63) = *(_DWORD *)(v54 + 140);
    *(_DWORD *)(v67 + 96) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 140) = v63 | v62;
    LODWORD(v62) = v66[25];
    LODWORD(v63) = *(_DWORD *)(v54 + 144);
    *(_DWORD *)(v67 + 100) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 144) = v63 | v62;
    LODWORD(v62) = v66[26];
    LODWORD(v63) = *(_DWORD *)(v54 + 148);
    *(_DWORD *)(v67 + 104) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 148) = v63 | v62;
    LODWORD(v62) = v66[27];
    LODWORD(v63) = *(_DWORD *)(v54 + 152);
    *(_DWORD *)(v67 + 108) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 152) = v63 | v62;
    LODWORD(v62) = v66[28];
    LODWORD(v63) = *(_DWORD *)(v54 + 156);
    *(_DWORD *)(v67 + 112) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 156) = v63 | v62;
    LODWORD(v62) = v66[29];
    LODWORD(v63) = *(_DWORD *)(v54 + 160);
    *(_DWORD *)(v67 + 116) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 160) = v63 | v62;
    LODWORD(v62) = v66[30];
    LODWORD(v63) = *(_DWORD *)(v54 + 164);
    *(_DWORD *)(v67 + 120) = v62 & ~(_DWORD)v63;
    *(_DWORD *)(v54 + 164) = v63 | v62;
    LODWORD(v66) = v66[31];
    LODWORD(v62) = *(_DWORD *)(v54 + 168);
    *(_DWORD *)(v67 + 124) = v66 & ~(_DWORD)v62;
    *(_DWORD *)(v54 + 168) = v62 | v66;
    *(_QWORD *)(v67 - 16) = __rbit64(*(_QWORD *)(v67 + 8 * v64));
    *(_BYTE *)(v67 - 50) = 1;
    *(_QWORD *)(v54 + 24) = *(unsigned __int8 *)(v10[317] + 8 * *(unsigned int *)(v11 + 40) + 8);
LABEL_297:
    v217 = v234;
    if (v234)
    {
      v218 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v219 = __ldxr(&v217->_os_unfair_lock_opaque);
        if (v219 != v218)
          break;
        if (!__stlxr(0, &v217->_os_unfair_lock_opaque))
          goto LABEL_305;
      }
      __clrex();
      os_unfair_lock_unlock(v217);
LABEL_305:
      v234 = 0;
    }
    return 1;
  }
LABEL_75:
  if (!v58)
    goto LABEL_130;
  v70 = *(unsigned int *)(v11 + 32);
  if (*(_DWORD *)(v58 + 8052) <= v70)
  {
    if ((_DWORD)v70 == -1)
      goto LABEL_130;
    local_allocator_slow = pas_thread_local_cache_get_local_allocator_slow(v58, v70, 0, a4, a5, a6, a7, a8);
    v71 = v171;
    if ((local_allocator_slow & 1) == 0)
      goto LABEL_130;
  }
  else
  {
    v71 = v58 + 8 * v70 + 8064;
  }
  *(_BYTE *)v71 = 1;
  if (*(_BYTE *)(v71 + 3) != 4)
    goto LABEL_128;
  v72 = *(unsigned __int8 *)(v71 + 5);
  if (*(unsigned __int8 *)(v71 + 6) != (_DWORD)v72)
    goto LABEL_82;
  if (*(_BYTE *)(v71 + 7))
  {
    if (*(_BYTE *)(v71 + 7) == 2)
    {
LABEL_82:
      *(_WORD *)(v71 + 1) = 256;
      if (*(unsigned __int8 *)(v71 + 4) > (v72 + 1))
        v73 = v72 + 1;
      else
        v73 = 0;
      *(_BYTE *)(v71 + 5) = v73;
      v74 = ((8 * *(unsigned __int16 *)(v71 + 3 * v72 + 8)) | ((unint64_t)*(unsigned __int8 *)(v71 + 3 * v72 + 10) << 19))
          + v10[317];
      *(_BYTE *)(v71 + 7) = 1;
      *(_BYTE *)v71 = 0;
      if (!v55)
        goto LABEL_266;
      goto LABEL_237;
    }
  }
  else
  {
LABEL_128:
    pas_local_allocator_scavenger_data_commit_if_necessary_slow((BOOL *)v71, 0);
  }
  *(_WORD *)(v71 + 1) = 256;
  *(_BYTE *)v71 = 0;
LABEL_130:
  eligible = pas_segregated_size_directory_take_first_eligible((unsigned int *)v11);
  v74 = eligible;
  if (!eligible)
    goto LABEL_236;
  if ((eligible & 7) < 2)
  {
    v99 = eligible & 0xFFFFFFFFFFFFFFF8;
    if (*(_BYTE *)((eligible & 0xFFFFFFFFFFFFFFF8) + 11))
      goto LABEL_236;
    v100 = v10[317];
    v101 = ((8 * *(unsigned __int16 *)(v99 + 8)) | ((unint64_t)*(unsigned __int8 *)(v99 + 10) << 19)) + v100;
    if (*(_QWORD *)v99)
    {
      v231 = ((8 * *(unsigned __int16 *)(v99 + 8)) | ((unint64_t)*(unsigned __int8 *)(v99 + 10) << 19)) + v100;
      *(_QWORD *)&v244 = 0;
      v102 = (unsigned int *)(v99 + 16);
      v103 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(v102))
      {
        if (!__stxr(v103, v102))
          goto LABEL_195;
      }
      __clrex();
      os_unfair_lock_lock((os_unfair_lock_t)(v99 + 16));
LABEL_195:
      *(_QWORD *)&v244 = v99 + 16;
      if (*(unsigned __int8 *)(v231 + 13) << 8 == 512)
        pas_physical_page_sharing_pool_take_for_page_config(0x4000uLL, (uint64_t)&unk_1E35BE430, 0, (uint64_t)&v244, 1);
      v144 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v145 = __ldxr(v102);
        if (v145 != v144)
          break;
        if (!__stlxr(0, v102))
          goto LABEL_202;
      }
      __clrex();
      os_unfair_lock_unlock((os_unfair_lock_t)(v99 + 16));
LABEL_202:
      v117 = *(_QWORD *)v99;
LABEL_204:
      pas_segregated_page_construct(v117, v99 | 1, 0, (uint64_t)&unk_1E35BE430);
      v112 = (os_unfair_lock_s *)(v99 + 20);
      v146 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&v112->_os_unfair_lock_opaque))
      {
        if (!__stxr(v146, &v112->_os_unfair_lock_opaque))
          goto LABEL_211;
      }
      __clrex();
      os_unfair_lock_lock((os_unfair_lock_t)(v99 + 20));
LABEL_211:
      *(_BYTE *)(v99 + 11) = 1;
      v148 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v149 = __ldxr(&v112->_os_unfair_lock_opaque);
        if (v149 != v148)
          break;
        if (!__stlxr(0, &v112->_os_unfair_lock_opaque))
          goto LABEL_236;
      }
LABEL_235:
      __clrex();
      os_unfair_lock_unlock(v112);
LABEL_236:
      if (!v55)
        goto LABEL_266;
      goto LABEL_237;
    }
    if (*(unsigned __int8 *)(v101 + 13) << 8 == 512)
    {
      pas_physical_page_sharing_pool_take_for_page_config(0x4000uLL, (uint64_t)&unk_1E35BE430, 0, 0, 0);
      v117 = *(_QWORD *)v99;
      if (*(_QWORD *)v99)
        goto LABEL_204;
    }
    v118 = 0;
    v235 = 0;
    lock = 0;
    v223 = vdupq_n_s64(1uLL);
    do
    {
      if (v118)
      {
        v119 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(&v118->_os_unfair_lock_opaque))
        {
          if (!__stxr(v119, &v118->_os_unfair_lock_opaque))
            goto LABEL_160;
        }
        __clrex();
        os_unfair_lock_lock(v118);
LABEL_160:
        v121 = v235;
        v235 = 0;
        lock = v121;
      }
      v122 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v122, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_166;
      }
      __clrex();
      os_unfair_lock_lock(&pas_heap_lock);
LABEL_166:
      v124 = *(_QWORD *)(v101 + 16);
      v125 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v124 + 32) + 48);
      if ((**(_DWORD **)v124 & 0x20000) != 0)
        v126 = *(_QWORD *)(v101 + 16);
      else
        v126 = 0;
      v237[0] = &bmalloc_megapage_table;
      v237[1] = 1;
      v244 = xmmword_19919FBF0;
      v246 = 0;
      v247 = 0;
      v245 = 0x4000;
      v250 = 0;
      v248 = table_set_by_index;
      v249 = v237;
      v243[0] = v125;
      v243[1] = &v244;
      v243[2] = v126;
      v243[3] = &v235;
      v238 = v223;
      v239 = megapage_cache_allocate_aligned;
      v240 = v243;
      v241 = 0;
      v242 = 0;
      v127 = pas_simple_large_free_heap_try_allocate(v125, 0x4000, 0x4000, 0, &v238);
      *(_QWORD *)v99 = (v128 << 63 >> 63) & v127;
      v129 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v130 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v130 != v129)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        {
          v131 = lock;
          if (!lock)
            goto LABEL_153;
          goto LABEL_175;
        }
      }
      __clrex();
      os_unfair_lock_unlock(&pas_heap_lock);
      v131 = lock;
      if (!lock)
        goto LABEL_153;
LABEL_175:
      v132 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v133 = __ldxr(&v131->_os_unfair_lock_opaque);
        if (v133 != v132)
          break;
        if (!__stlxr(0, &v131->_os_unfair_lock_opaque))
          goto LABEL_152;
      }
      __clrex();
      os_unfair_lock_unlock(v131);
LABEL_152:
      lock = 0;
LABEL_153:
      v118 = v235;
    }
    while (v235);
    v117 = *(_QWORD *)v99;
    v10 = &unk_1ECF57000;
    if (*(_QWORD *)v99)
      goto LABEL_204;
LABEL_208:
    v74 = 0;
    if (!v55)
      goto LABEL_266;
    goto LABEL_237;
  }
  if ((eligible & 7) != 4)
    goto LABEL_208;
  v225 = v55;
  v228 = v59;
  v105 = eligible & 0xFFFFFFFFFFFFFFF8;
  v106 = ((8 * *(unsigned __int16 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 7)) | ((unint64_t)*(unsigned __int8 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 9) << 19))
       + v10[317];
  v107 = *(_QWORD *)(v106 + 16);
  v108 = pas_shared_page_directory_by_size_get((int *)(*(_QWORD *)(*(_QWORD *)v107 + 32) + 96), *(_DWORD *)(v106 + 24) & 0x7FFFFFF, (uint64_t)&unk_1E35BE430);
  v109 = *(unsigned __int16 *)(v105 + 4) | ((unint64_t)*(unsigned __int8 *)(v105 + 6) << 16);
  if (!v109 || (v110 = (os_unfair_lock_s *)(v10[317] + 8 * v109)) == 0)
  {
    v59 = v228;
    v55 = v225;
    if (!v225)
      goto LABEL_266;
    goto LABEL_237;
  }
  v111 = v108;
  v112 = v110 + 2;
  v113 = *(_DWORD *)(StatusReg + 24);
  do
  {
    if (__ldaxr(&v112->_os_unfair_lock_opaque))
    {
      __clrex();
      v134 = v110 + 2;
      v232 = v110;
      v135 = v111;
      os_unfair_lock_lock(v134);
      v111 = v135;
      v110 = v232;
      v115 = *(_QWORD *)&v232->_os_unfair_lock_opaque;
      if ((*(_QWORD *)&v232->_os_unfair_lock_opaque & 1) == 0)
        goto LABEL_145;
      goto LABEL_180;
    }
  }
  while (__stxr(v113, &v112->_os_unfair_lock_opaque));
  v115 = *(_QWORD *)&v110->_os_unfair_lock_opaque;
  if ((*(_QWORD *)&v110->_os_unfair_lock_opaque & 1) == 0)
  {
LABEL_145:
    v116 = pas_segregated_shared_view_commit_page(v110, v107, v111, v74 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&unk_1E35BE430);
    goto LABEL_181;
  }
LABEL_180:
  v116 = v115 & 0xFFFFFFFFFFFFFFFELL;
LABEL_181:
  v59 = v228;
  if (v116)
  {
    if ((*(_BYTE *)(v105 + 19) & 0x10) == 0)
    {
      if (*(_BYTE *)(v105 + 17))
      {
        v136 = v10[317] + *(unsigned int *)(v105 + 12);
        v137 = *(unsigned __int8 *)(v105 + 18);
        v138 = v137 + *(unsigned __int8 *)(v105 + 17);
        v139 = v116 + 20;
        if (v105)
        {
          do
          {
            for (j = *(_DWORD *)(v136 + 4 * v137); j; j &= ~(1 << v141))
            {
              v141 = __clz(__rbit32(j));
              *(_DWORD *)(v139 + ((((32 * v137) | v141) >> 2) & 0x3FFFFFFFFFFFFFFCLL)) = (v105 - v10[317]) >> 3;
            }
            ++v137;
          }
          while (v137 < v138);
        }
        else
        {
          do
          {
            for (k = *(_DWORD *)(v136 + 4 * v137); k; k &= ~(1 << v143))
            {
              v143 = __clz(__rbit32(k));
              *(_DWORD *)(v139 + ((((32 * v137) | v143) >> 2) & 0x3FFFFFFFFFFFFFFCLL)) = 0;
            }
            ++v137;
          }
          while (v137 < v138);
        }
      }
      p_os_unfair_lock_opaque = &v110[3]._os_unfair_lock_opaque;
      v153 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(p_os_unfair_lock_opaque))
      {
        if (!__stxr(v153, p_os_unfair_lock_opaque))
          goto LABEL_226;
      }
      __clrex();
      os_unfair_lock_lock(v110 + 3);
LABEL_226:
      *(_BYTE *)(v105 + 19) |= 0x10u;
      v155 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v156 = __ldxr(p_os_unfair_lock_opaque);
        if (v156 != v155)
          break;
        if (!__stlxr(0, p_os_unfair_lock_opaque))
          goto LABEL_231;
      }
      __clrex();
      os_unfair_lock_unlock(v110 + 3);
    }
LABEL_231:
    v157 = *(_DWORD *)(StatusReg + 24);
    v59 = v228;
    v55 = v225;
    while (1)
    {
      v158 = __ldxr(&v112->_os_unfair_lock_opaque);
      if (v158 != v157)
        goto LABEL_235;
      if (!__stlxr(0, &v112->_os_unfair_lock_opaque))
        goto LABEL_236;
    }
  }
  v150 = *(_DWORD *)(StatusReg + 24);
  v55 = v225;
  while (1)
  {
    v151 = __ldxr(&v112->_os_unfair_lock_opaque);
    if (v151 != v150)
      break;
    v74 = 0;
    if (!__stlxr(0, &v112->_os_unfair_lock_opaque))
      goto LABEL_236;
  }
  __clrex();
  os_unfair_lock_unlock(v112);
  v74 = 0;
  if (!v225)
    goto LABEL_266;
LABEL_237:
  v159 = *(os_unfair_lock_s **)(v54 + 8);
  if (v234 == v159)
  {
    v160 = v55 & 7;
    if (v160 < 2)
      goto LABEL_239;
LABEL_249:
    if (v160 != 4)
      goto LABEL_266;
    v229 = v59;
    v233 = StatusReg;
    v172 = v11;
    v173 = v55 & 0xFFFFFFFFFFFFFFF8;
    v174 = (8 * *(unsigned __int16 *)((v55 & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((v55 & 0xFFFFFFFFFFFFFFF8) + 6) << 19);
    v175 = v10[317];
    v176 = v174 + v175;
    v177 = *(unsigned __int8 *)(v173 + 9);
    v178 = *(unsigned __int16 *)(v173 + 7);
    v226 = *(_QWORD *)((*(_QWORD *)(v174 + v175) & 0xFFFFFFFFFFFFFFFELL) + 8);
    v179 = *(const os_unfair_lock **)(v54 + 8);
    if (v179)
      os_unfair_lock_assert_owner(v179);
    if (*(_DWORD *)(v176 + 24) == 1)
    {
      v180 = *(_QWORD *)(v54 + 24) == 0;
      v181 = *(_BYTE *)(v173 + 19);
      if ((v181 & 2) != 0)
        goto LABEL_254;
    }
    else
    {
      v180 = 0;
      v181 = *(_BYTE *)(v173 + 19);
      if ((v181 & 2) != 0)
      {
LABEL_254:
        *(_BYTE *)(v173 + 19) = v181 & 0xFC;
        --*(_DWORD *)(v176 + 24);
        pas_segregated_directory_view_did_become_eligible_at_index(((8 * v178) | (v177 << 19)) + v175, *(unsigned __int8 *)(v173 + 16));
        v11 = v172;
        v59 = v229;
        StatusReg = v233;
        if (!v180)
          goto LABEL_266;
LABEL_258:
        v182 = v175 & 5 | 2;
        if (v182 == 3)
        {
          v183 = ((8 * *(unsigned __int16 *)((v176 & 0xFFFFFFFFFFFFFFF8) + 16)) | ((unint64_t)*(unsigned __int8 *)((v176 & 0xFFFFFFFFFFFFFFF8) + 18) << 19))
               + v10[317];
        }
        else
        {
          if (v182 != 2)
          {
            v184 = 0;
            goto LABEL_264;
          }
          v183 = v176 & 0xFFFFFFFFFFFFFFF8;
        }
        v184 = *(_DWORD *)(v183 + 16) & 0x7FFFFFFF;
LABEL_264:
        v169 = v184;
        v168 = v226;
        goto LABEL_265;
      }
    }
    *(_BYTE *)(v173 + 19) = v181 & 0xFE;
    --*(_DWORD *)(v176 + 24);
    v11 = v172;
    v59 = v229;
    StatusReg = v233;
    if (!v180)
      goto LABEL_266;
    goto LABEL_258;
  }
  v234 = pas_segregated_page_switch_lock_slow(v54, v234, v159);
  v160 = v55 & 7;
  if (v160 >= 2)
    goto LABEL_249;
LABEL_239:
  v161 = v55 & 0xFFFFFFFFFFFFFFF8;
  v162 = *(unsigned __int8 *)(v54 + 2);
  if (*(_BYTE *)(v54 + 2))
    *(_BYTE *)(v54 + 2) = 0;
  v163 = (8 * *(unsigned __int16 *)(v161 + 8)) | ((unint64_t)*(unsigned __int8 *)(v161 + 10) << 19);
  v164 = v10[317];
  v165 = v163 + v164;
  v166 = *(unsigned int *)(v161 + 12);
  v167 = *(_QWORD *)(v54 + 24);
  *(_BYTE *)(v54 + 1) = 0;
  if (v162)
    pas_segregated_directory_view_did_become_eligible_at_index(v163 + v164, v166);
  if (!v167)
  {
    v168 = v165;
    v169 = v166;
LABEL_265:
    pas_segregated_directory_view_did_become_empty_at_index(v168, v169);
  }
LABEL_266:
  if (!v74)
  {
    result = (uint64_t)v234;
    if (v234)
    {
      v189 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v190 = __ldxr(&v234->_os_unfair_lock_opaque);
        if (v190 != v189)
          break;
        if (!__stlxr(0, &v234->_os_unfair_lock_opaque))
          goto LABEL_311;
      }
      __clrex();
      os_unfair_lock_unlock(v234);
LABEL_311:
      result = 0;
      v234 = 0;
    }
    return result;
  }
  v68 = v74 & 0xFFFFFFFFFFFFFFF8;
  if ((v74 & 6) == 0)
  {
    v54 = *(_QWORD *)v68;
    pas_segregated_page_switch_lock_and_rebias_while_ineligible_impl(*(_QWORD *)v68, &v234, v59);
    *(_BYTE *)(v54 + 1) = 1;
    *(_QWORD *)(v54 + 32) = v74 | 1;
    if (!*(_QWORD *)(v54 + 24))
      goto LABEL_281;
    goto LABEL_73;
  }
  v185 = *(unsigned __int16 *)(v68 + 4) | ((unint64_t)*(unsigned __int8 *)(v68 + 6) << 16);
  v186 = v10[317] + 8 * v185;
  if (v185)
    v187 = v186 == 0;
  else
    v187 = 1;
  if (!v187)
  {
    v201 = *(_QWORD *)v186;
    if ((*(_QWORD *)v186 & 1) != 0)
      v201 = *(_QWORD *)(v201 & 0xFFFFFFFFFFFFFFFELL);
    v230 = StatusReg;
    v202 = *(os_unfair_lock_s **)(v201 + 8);
    if (v234 != v202)
      v234 = pas_segregated_page_switch_lock_slow(v201, v234, v202);
    v88 = v201;
    *(_BYTE *)(v68 + 19) |= 1u;
    ++*(_DWORD *)(v186 + 24);
    v89 = *(_BYTE *)(v68 + 19) & 0xFB;
LABEL_287:
    *(_BYTE *)(v68 + 19) = v89;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v203 = *(unsigned int *)(v68 + 12);
    v204 = v10[317];
    v205 = *(unsigned __int8 *)(v68 + 18);
    v206 = *(unsigned __int8 *)(v68 + 17);
    v207 = (v206 + v205);
    *(_QWORD *)(a1 + 48) = v68 | 4;
    *(_DWORD *)(a1 + 32) = v205 >> 1;
    *(_DWORD *)(a1 + 36) = (v207 + 1) >> 1;
    bzero((void *)(a1 + 8 * (v205 >> 1) + 56), (4 * (v207 - (v205 & 0xFE)) + 4) & 0x3FFFFFFF8);
    v208 = 0;
    *(_QWORD *)(a1 + 24) = v88 + (v205 >> 1 << 10);
    v209 = v88;
    StatusReg = v230;
    if (v205 < v207)
    {
      LODWORD(v208) = 0;
      v210 = (int *)(4 * v205 + a1 + 56);
      v211 = (int *)(4 * v205 + v209 + 44);
      v212 = (int *)(v204 + v203 + 4 * v205);
      do
      {
        v214 = *v212++;
        v213 = v214;
        v215 = *v211;
        *v210++ = v214 & ~*v211;
        *v211++ = v215 | v214;
        if (v215)
          v216 = 1;
        else
          v216 = v213 == 0;
        if (v216)
          v208 = v208;
        else
          v208 = (v208 + 1);
        --v206;
      }
      while (v206);
    }
    *(_QWORD *)(a1 + 40) = __rbit64(*(_QWORD *)(a1 + 8 * (v205 >> 1) + 56));
    *(_BYTE *)(a1 + 6) = 1;
    *(_QWORD *)(v209 + 24) += v208;
    goto LABEL_297;
  }
  if (v234)
  {
    v220 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v221 = __ldxr(&v234->_os_unfair_lock_opaque);
      if (v221 != v220)
        break;
      if (!__stlxr(0, &v234->_os_unfair_lock_opaque))
        goto LABEL_313;
    }
    __clrex();
    os_unfair_lock_unlock(v234);
LABEL_313:
    v234 = 0;
  }
  return bmalloc_small_segregated_page_config_specialized_local_allocator_start_allocating_in_primordial_partial_view(a1, v74 & 0xFFFFFFFFFFFFFFF8, v11);
}

void bmalloc_small_segregated_page_config_specialized_local_allocator_return_memory_to_page(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  BOOL v46;
  int v47;
  int v49;
  int v51;
  int v53;
  int v55;
  int v57;
  int v59;
  int v61;
  int v63;
  int v65;
  int v67;
  int v69;
  int v71;
  int v73;
  int v75;
  int v77;
  int v79;
  int v81;
  int v83;
  int v85;
  int v87;
  int v89;
  int v91;
  int v93;
  int v95;
  int v97;
  int v99;
  _BOOL4 v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t StatusReg;
  unsigned int v108;
  size_t v110;
  void *v111;
  int v112;
  _DWORD *v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  _BOOL4 v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  int v146;
  BOOL v147;
  int v148;
  int v150;
  int v152;
  int v154;
  int v156;
  int v158;
  int v160;
  int v162;
  int v164;
  int v166;
  int v168;
  int v170;
  int v172;
  int v174;
  int v176;
  int v178;
  int v180;
  int v182;
  int v184;
  int v186;
  int v188;
  int v190;
  int v192;
  int v194;
  int v196;
  int v198;
  int v200;
  _BOOL4 v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unsigned int v209;
  size_t v211;
  void *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  unsigned int v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  unsigned int v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int128 *v246;
  char v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  const os_unfair_lock *v253;
  unint64_t v254;
  unsigned int *v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int128 *v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  unint64_t v265;
  unsigned int *v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unsigned __int128 *v271;
  unsigned int v272;
  char v273;
  unsigned int v274;
  unint64_t v275;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  char v281;
  const os_unfair_lock *v282;
  unint64_t v283;
  unsigned int *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unsigned __int128 *v289;
  int v290;
  _DWORD *v291;
  int v292;
  uint64_t v293;
  unint64_t v294;
  unsigned int *v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  os_unfair_lock_s *v300;
  int v301;
  unsigned int v302;
  os_unfair_lock_s *v303;
  int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v308;
  os_unfair_lock_s *v310;
  unsigned int v311;
  int v313;
  unsigned int v314;
  os_unfair_lock_s *v315;
  unsigned int v316;
  int v318;
  unsigned int v319;
  _BOOL4 v320;
  _BOOL4 v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  int v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v341;
  uint64_t v342;
  int v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  os_unfair_lock_t v347;

  v8 = a2 & 7;
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(a3 + 8));
  v9 = *(unsigned __int8 *)(a1 + 5);
  v337 = a1;
  if (v8 == 4)
  {
    v10 = v9 > 0xB;
    v11 = (1 << v9) & 0xAA8;
    v12 = v10 || v11 == 0;
    if (v12)
      goto LABEL_475;
    v343 = a5;
    v13 = (_DWORD *)(a1 + 56);
    LODWORD(v334) = *(_DWORD *)(a1 + 60);
    HIDWORD(v334) = *(_DWORD *)(a1 + 56);
    v14 = HIDWORD(v334) != 0;
    if ((_DWORD)v334)
      v14 = 2;
    if (*(_DWORD *)(a1 + 64))
      v14 = 3;
    v330 = *(_DWORD *)(a1 + 68);
    v332 = *(_DWORD *)(a1 + 64);
    v15 = *(_DWORD *)(a1 + 76);
    v328 = *(_DWORD *)(a1 + 72);
    if (v330)
      v14 = 4;
    if (*(_DWORD *)(a1 + 72))
      v14 = 5;
    v16 = *(_DWORD *)(a1 + 84);
    v326 = *(_DWORD *)(a1 + 80);
    if (v15)
      v14 = 6;
    if (*(_DWORD *)(a1 + 80))
      v14 = 7;
    v17 = *(_DWORD *)(a1 + 92);
    v324 = *(_DWORD *)(a1 + 88);
    if (v16)
      v14 = 8;
    if (*(_DWORD *)(a1 + 88))
      v14 = 9;
    v19 = *(_DWORD *)(a1 + 96);
    v18 = *(_DWORD *)(a1 + 100);
    if (v17)
      v14 = 10;
    if (v19)
      v14 = 11;
    v21 = *(_DWORD *)(a1 + 104);
    v20 = *(_DWORD *)(a1 + 108);
    if (v18)
      v14 = 12;
    if (v21)
      v14 = 13;
    v23 = *(_DWORD *)(a1 + 112);
    v22 = v13[15];
    if (v20)
      v14 = 14;
    if (v23)
      v14 = 15;
    v25 = v13[16];
    v24 = v13[17];
    if (v22)
      v14 = 16;
    if (v25)
      v14 = 17;
    v27 = v13[18];
    v26 = v13[19];
    if (v24)
      v14 = 18;
    if (v27)
      v14 = 19;
    v29 = v13[20];
    v28 = v13[21];
    if (v26)
      v14 = 20;
    if (v29)
      v14 = 21;
    v30 = v13[22];
    v31 = v13[23];
    if (v28)
      v14 = 22;
    if (v30)
      v14 = 23;
    v32 = v13[24];
    v33 = v13[25];
    if (v31)
      v14 = 24;
    if (v32)
      v14 = 25;
    v35 = v13[26];
    v34 = v13[27];
    if (v33)
      v14 = 26;
    if (v35)
      v14 = 27;
    v37 = v13[28];
    v36 = v13[29];
    if (v34)
      v14 = 28;
    if (v37)
      v14 = 29;
    if (v36)
      v38 = 30;
    else
      v38 = v14;
    v40 = v13[30];
    v39 = v13[31];
    v41 = v39 == 0;
    if (v40)
    {
      v38 = 31;
      v41 = 1;
    }
    v320 = v41;
    v12 = v39 == 0;
    v42 = 32;
    if (v12)
      v42 = v38;
    v322 = v42;
    if (HIDWORD(v334))
      v43 = 0;
    else
      v43 = -1;
    if (HIDWORD(v334))
      v44 = 1;
    else
      v44 = (_DWORD)v334 == 0;
    if (!v44)
      v43 = 1;
    v45 = v332 | v334 | HIDWORD(v334);
    if (v334)
      v46 = 1;
    else
      v46 = v332 == 0;
    if (!v46)
      v43 = 2;
    v12 = v45 == 0;
    v47 = v330 | v45;
    if (v12 && v330 != 0)
      v43 = 3;
    v12 = v47 == 0;
    v49 = v328 | v47;
    if (v12 && v328 != 0)
      v43 = 4;
    v12 = v49 == 0;
    v51 = v15 | v49;
    if (v12 && v15 != 0)
      v43 = 5;
    v12 = v51 == 0;
    v53 = v326 | v51;
    if (v12 && v326 != 0)
      v43 = 6;
    v12 = v53 == 0;
    v55 = v16 | v53;
    if (v12 && v16 != 0)
      v43 = 7;
    v12 = v55 == 0;
    v57 = v324 | v55;
    if (v12 && v324 != 0)
      v43 = 8;
    v12 = v57 == 0;
    v59 = v17 | v57;
    if (v12 && v17 != 0)
      v43 = 9;
    v12 = v59 == 0;
    v61 = v19 | v59;
    if (v12 && v19 != 0)
      v43 = 10;
    v12 = v61 == 0;
    v63 = v18 | v61;
    if (v12 && v18 != 0)
      v43 = 11;
    v12 = v63 == 0;
    v65 = v21 | v63;
    if (v12 && v21 != 0)
      v43 = 12;
    v12 = v65 == 0;
    v67 = v20 | v65;
    if (v12 && v20 != 0)
      v43 = 13;
    v12 = v67 == 0;
    v69 = v23 | v67;
    if (v12 && v23 != 0)
      v43 = 14;
    v12 = v69 == 0;
    v71 = v22 | v69;
    if (v12 && v22 != 0)
      v43 = 15;
    v12 = v71 == 0;
    v73 = v25 | v71;
    if (v12 && v25 != 0)
      v43 = 16;
    v12 = v73 == 0;
    v75 = v24 | v73;
    if (v12 && v24 != 0)
      v43 = 17;
    v12 = v75 == 0;
    v77 = v27 | v75;
    if (v12 && v27 != 0)
      v43 = 18;
    v12 = v77 == 0;
    v79 = v26 | v77;
    if (v12 && v26 != 0)
      v43 = 19;
    v12 = v79 == 0;
    v81 = v29 | v79;
    if (v12 && v29 != 0)
      v43 = 20;
    v12 = v81 == 0;
    v83 = v28 | v81;
    if (v12 && v28 != 0)
      v43 = 21;
    v12 = v83 == 0;
    v85 = v30 | v83;
    if (v12 && v30 != 0)
      v43 = 22;
    v12 = v85 == 0;
    v87 = v31 | v85;
    if (v12 && v31 != 0)
      v43 = 23;
    v12 = v87 == 0;
    v89 = v32 | v87;
    if (v12 && v32 != 0)
      v43 = 24;
    v12 = v89 == 0;
    v91 = v33 | v89;
    if (v12 && v33 != 0)
      v43 = 25;
    v12 = v91 == 0;
    v93 = v35 | v91;
    if (v12 && v35 != 0)
      v43 = 26;
    v12 = v93 == 0;
    v95 = v34 | v93;
    if (v12 && v34 != 0)
      v43 = 27;
    v12 = v95 == 0;
    v97 = v37 | v95;
    if (v12 && v37 != 0)
      v43 = 28;
    v12 = v97 == 0;
    v99 = v36 | v97;
    if (v12 && v36 != 0)
      v43 = 29;
    v12 = v99 == 0;
    v101 = v40 == 0;
    v102 = v320;
    if (!v12)
    {
      v101 = 1;
      v102 = 1;
    }
    v12 = !v101;
    v103 = 30;
    if (!v12)
      v103 = v43;
    v104 = v102 ? v103 : 31;
    v105 = *((_QWORD *)v13 - 1) & 0xFFFFFFFFFFFFFFF8;
    v106 = v322 - v104;
    *(_BYTE *)(v105 + 17) = v322 - v104;
    *(_BYTE *)(v105 + 18) = v104;
    if (v343)
    {
LABEL_228:
      a1 = v337;
    }
    else
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v108 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v108, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_228;
      }
      __clrex();
      v300 = *(os_unfair_lock_s **)(a3 + 8);
      v301 = *(_DWORD *)(StatusReg + 24);
      a1 = v337;
      while (1)
      {
        v302 = __ldxr(&v300->_os_unfair_lock_opaque);
        if (v302 != v301)
          break;
        if (!__stlxr(0, &v300->_os_unfair_lock_opaque))
          goto LABEL_622;
      }
      __clrex();
      os_unfair_lock_unlock(v300);
LABEL_622:
      v306 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v306, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_633;
      }
      __clrex();
      os_unfair_lock_lock(&pas_heap_lock);
LABEL_633:
      v310 = *(os_unfair_lock_s **)(a3 + 8);
      v347 = v310;
      v311 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&v310->_os_unfair_lock_opaque))
      {
        if (!__stxr(v311, &v310->_os_unfair_lock_opaque))
        {
          if (*(os_unfair_lock_s **)(a3 + 8) == v310)
            goto LABEL_229;
LABEL_639:
          v313 = *(_DWORD *)(StatusReg + 24);
          while (1)
          {
            v314 = __ldxr(&v310->_os_unfair_lock_opaque);
            if (v314 != v313)
              break;
            if (!__stlxr(0, &v310->_os_unfair_lock_opaque))
              goto LABEL_633;
          }
          __clrex();
          os_unfair_lock_unlock(v310);
          goto LABEL_633;
        }
      }
      __clrex();
      if (!pas_segregated_page_lock_with_unbias_impl(a3, &v347, v310))
        goto LABEL_639;
    }
LABEL_229:
    if (v106 == 1)
    {
      v110 = 4;
      v111 = (void *)v105;
    }
    else
    {
      v110 = 4 * v106;
      v111 = (void *)pas_immortal_heap_allocate_with_manual_alignment(4 * v106, 8, (uint64_t)"pas_segregated_partial_view/alloc_bits", 0);
    }
    v213 = (unint64_t)v111 - 4 * v104;
    memcpy(v111, &v13[v104], v110);
    __dmb(0xAu);
    v214 = *(unsigned int *)(v105 + 12);
    v215 = pas_compact_heap_reservation_base;
    if (v214 >= 8)
      v216 = pas_compact_heap_reservation_base;
    else
      v216 = 0;
    v217 = v216 + v214;
    if ((v217 & 1) != 0)
    {
      pas_utility_heap_deallocate(v217 & 0xFFFFFFFFFFFFFFFELL);
      v215 = pas_compact_heap_reservation_base;
    }
    if (v213 >= 8 && v213 - v215 >= pas_compact_heap_reservation_size)
    {
      v218 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
      *(_QWORD *)v218 = v213;
      v213 = v218 | 1;
      LODWORD(v215) = pas_compact_heap_reservation_base;
    }
    if (v213 < 8)
      LODWORD(v215) = 0;
    *(_DWORD *)(v105 + 12) = v213 - v215;
    if (v343)
    {
LABEL_475:
      v221 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v221)
      {
LABEL_477:
        v224 = *(unsigned int *)(v337 + 32);
        if ((_DWORD)v224 == *(_DWORD *)(v337 + 36))
          return;
        *(_QWORD *)(v337 + 8 * v224 + 56) = __rbit64(*(_QWORD *)(v337 + 40));
        if ((a2 & 6) != 0)
        {
          v225 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFF8) + 12);
          v226 = pas_compact_heap_reservation_base;
          if (v225 < 8)
            v226 = 0;
          v345 = v226 + v225;
          if ((((_DWORD)v226 + (_DWORD)v225) & 1) != 0)
            v345 = *(_QWORD *)(v345 & 0xFFFFFFFFFFFFFFFELL);
          v227 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18) | ((unint64_t)(*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 17)
                                                                                            + *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18)) << 32);
          v228 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18);
          v341 = HIDWORD(v227);
          if (v227 >= HIDWORD(v227))
            return;
        }
        else
        {
          v345 = pas_compact_heap_reservation_base
               + *(unsigned int *)(pas_compact_heap_reservation_base + 8 * *(unsigned int *)(a4 + 40) + 9);
          v228 = 0;
          v341 = 32;
        }
        v338 = v337 + 56;
        v271 = (unsigned __int128 *)(a3 + 16);
        while (1)
        {
          v272 = *(_DWORD *)(v338 + 4 * v228) & *(_DWORD *)(v345 + 4 * v228);
          if (v272)
            break;
LABEL_557:
          if (++v228 == v341)
            return;
        }
        while (1)
        {
          v274 = __clz(__rbit32(v272));
          v275 = v274 | (32 * (_DWORD)v228);
          v276 = a3 + 4 * ((v275 >> 5) & 0x1F);
          v277 = 1 << v274;
          v278 = *(_DWORD *)(v276 + 44) & ~(1 << v274);
          *(_DWORD *)(v276 + 44) = v278;
          v279 = *(unsigned int *)((*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * ((v275 >> 4) & 0x3F) + 20);
          if ((_DWORD)v279)
            v280 = pas_compact_heap_reservation_base + 8 * v279;
          else
            v280 = 0;
          v281 = *(_BYTE *)(v280 + 19);
          if ((v281 & 4) == 0)
          {
            v282 = *(const os_unfair_lock **)(a3 + 8);
            if (v282)
            {
              os_unfair_lock_assert_owner(v282);
              v281 = *(_BYTE *)(v280 + 19);
            }
            if ((v281 & 1) != 0)
            {
              v273 = v281 | 2;
            }
            else
            {
              if ((v280 & 3) != 0)
                v283 = 0;
              else
                v283 = *(unsigned __int8 *)((v280 & 0xFFFFFFFFFFFFFFF8) + 16);
              pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v280 + 7)) | ((unint64_t)*(unsigned __int8 *)(v280 + 9) << 19))+ pas_compact_heap_reservation_base, v283);
              v273 = *(_BYTE *)(v280 + 19);
            }
            *(_BYTE *)(v280 + 19) = v273 | 4;
          }
          if (v278)
            goto LABEL_563;
          if (*(_QWORD *)(a3 + 24) == 1)
            break;
          --*(_QWORD *)(a3 + 24);
LABEL_563:
          v272 &= ~v277;
          if (!v272)
            goto LABEL_557;
        }
        v284 = (unsigned int *)timebase_info_ptr;
        if (timebase_info_ptr)
        {
          v285 = mach_approximate_time();
          v286 = *v284;
          v287 = v284[1];
          if ((pas_get_epoch_first & 1) != 0)
            goto LABEL_578;
        }
        else
        {
          get_timebase_info_slow();
          v285 = mach_approximate_time();
          v286 = timebase_info;
          v287 = *(unsigned int *)algn_1ECF57B54;
          if ((pas_get_epoch_first & 1) != 0)
          {
LABEL_578:
            v288 = v285 * v286 / v287;
            do
              __ldxp(v271);
            while (__stxp(v288, v271));
            pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
            goto LABEL_563;
          }
        }
        pas_get_epoch_first = 1;
        goto LABEL_578;
      }
    }
    else
    {
      v219 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (1)
      {
        v220 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v220 != v219)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_475;
      }
      __clrex();
      os_unfair_lock_unlock(&pas_heap_lock);
      v221 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v221)
        goto LABEL_477;
    }
    v222 = *(_QWORD *)(v337 + 8);
    v223 = v222 - v221;
    if (v222 < v221)
      goto LABEL_477;
    v245 = *(unsigned int *)(v337 + 20);
    v246 = (unsigned __int128 *)(a3 + 16);
    while (1)
    {
      v248 = a3 + 4 * ((v223 >> 9) & 0x1F);
      v249 = *(_DWORD *)(v248 + 44) & ~(1 << (v223 >> 4));
      *(_DWORD *)(v248 + 44) = v249;
      v250 = *(unsigned int *)((*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * ((v223 >> 8) & 0x3F) + 20);
      if ((_DWORD)v250)
        v251 = pas_compact_heap_reservation_base + 8 * v250;
      else
        v251 = 0;
      v252 = *(_BYTE *)(v251 + 19);
      if ((v252 & 4) == 0)
      {
        v253 = *(const os_unfair_lock **)(a3 + 8);
        if (v253)
        {
          os_unfair_lock_assert_owner(v253);
          v252 = *(_BYTE *)(v251 + 19);
        }
        if ((v252 & 1) != 0)
        {
          v247 = v252 | 2;
        }
        else
        {
          if ((v251 & 3) != 0)
            v254 = 0;
          else
            v254 = *(unsigned __int8 *)((v251 & 0xFFFFFFFFFFFFFFF8) + 16);
          pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v251 + 7)) | ((unint64_t)*(unsigned __int8 *)(v251 + 9) << 19))+ pas_compact_heap_reservation_base, v254);
          v247 = *(_BYTE *)(v251 + 19);
        }
        *(_BYTE *)(v251 + 19) = v247 | 4;
      }
      if (v249)
        goto LABEL_514;
      if (*(_QWORD *)(a3 + 24) == 1)
        break;
      --*(_QWORD *)(a3 + 24);
LABEL_514:
      v223 += v245;
      if (v223 >= v222)
        goto LABEL_477;
    }
    v255 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v256 = mach_approximate_time();
      v257 = *v255;
      v258 = v255[1];
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_529;
    }
    else
    {
      get_timebase_info_slow();
      v256 = mach_approximate_time();
      v257 = timebase_info;
      v258 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_529:
        v259 = v256 * v257 / v258;
        do
          __ldxp(v246);
        while (__stxp(v259, v246));
        pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
        goto LABEL_514;
      }
    }
    pas_get_epoch_first = 1;
    goto LABEL_529;
  }
  v10 = v9 > 0xB;
  v112 = (1 << v9) & 0xAA8;
  if (v10 || v112 == 0)
    goto LABEL_500;
  v114 = (_DWORD *)(a1 + 56);
  LODWORD(v335) = *(_DWORD *)(a1 + 60);
  HIDWORD(v335) = *(_DWORD *)(a1 + 56);
  v115 = HIDWORD(v335) != 0;
  if ((_DWORD)v335)
    v115 = 2;
  if (*(_DWORD *)(a1 + 64))
    v115 = 3;
  v331 = *(_DWORD *)(a1 + 68);
  v333 = *(_DWORD *)(a1 + 64);
  v116 = *(_DWORD *)(a1 + 76);
  v329 = *(_DWORD *)(a1 + 72);
  if (v331)
    v115 = 4;
  if (*(_DWORD *)(a1 + 72))
    v115 = 5;
  v117 = *(_DWORD *)(a1 + 84);
  v327 = *(_DWORD *)(a1 + 80);
  if (v116)
    v115 = 6;
  if (*(_DWORD *)(a1 + 80))
    v115 = 7;
  v118 = *(_DWORD *)(a1 + 92);
  v325 = *(_DWORD *)(a1 + 88);
  if (v117)
    v115 = 8;
  if (*(_DWORD *)(a1 + 88))
    v115 = 9;
  v120 = *(_DWORD *)(a1 + 96);
  v119 = *(_DWORD *)(a1 + 100);
  if (v118)
    v115 = 10;
  if (v120)
    v115 = 11;
  v344 = a5;
  v122 = *(_DWORD *)(a1 + 104);
  v121 = *(_DWORD *)(a1 + 108);
  if (v119)
    v115 = 12;
  if (v122)
    v115 = 13;
  v124 = *(_DWORD *)(a1 + 112);
  v123 = v114[15];
  if (v121)
    v115 = 14;
  if (v124)
    v115 = 15;
  v126 = v114[16];
  v125 = v114[17];
  if (v123)
    v115 = 16;
  if (v126)
    v115 = 17;
  v128 = v114[18];
  v127 = v114[19];
  if (v125)
    v115 = 18;
  if (v128)
    v115 = 19;
  v130 = v114[20];
  v129 = v114[21];
  if (v127)
    v115 = 20;
  if (v130)
    v115 = 21;
  v131 = v114[22];
  v132 = v114[23];
  if (v129)
    v115 = 22;
  if (v131)
    v115 = 23;
  v133 = v114[24];
  v134 = v114[25];
  if (v132)
    v115 = 24;
  if (v133)
    v115 = 25;
  v136 = v114[26];
  v135 = v114[27];
  if (v134)
    v115 = 26;
  if (v136)
    v115 = 27;
  v138 = v114[28];
  v137 = v114[29];
  if (v135)
    v115 = 28;
  if (v138)
    v115 = 29;
  if (v137)
    v139 = 30;
  else
    v139 = v115;
  v141 = v114[30];
  v140 = v114[31];
  v142 = v140 == 0;
  if (v141)
  {
    v139 = 31;
    v142 = 1;
  }
  v321 = v142;
  v12 = v140 == 0;
  v143 = 32;
  if (v12)
    v143 = v139;
  v323 = v143;
  if (HIDWORD(v335))
    v144 = 0;
  else
    v144 = -1;
  if (HIDWORD(v335))
    v145 = 1;
  else
    v145 = (_DWORD)v335 == 0;
  if (!v145)
    v144 = 1;
  v146 = v333 | v335 | HIDWORD(v335);
  if (v335)
    v147 = 1;
  else
    v147 = v333 == 0;
  if (!v147)
    v144 = 2;
  v12 = v146 == 0;
  v148 = v331 | v146;
  if (v12 && v331 != 0)
    v144 = 3;
  v12 = v148 == 0;
  v150 = v329 | v148;
  if (v12 && v329 != 0)
    v144 = 4;
  v12 = v150 == 0;
  v152 = v116 | v150;
  if (v12 && v116 != 0)
    v144 = 5;
  v12 = v152 == 0;
  v154 = v327 | v152;
  if (v12 && v327 != 0)
    v144 = 6;
  v12 = v154 == 0;
  v156 = v117 | v154;
  if (v12 && v117 != 0)
    v144 = 7;
  v12 = v156 == 0;
  v158 = v325 | v156;
  if (v12 && v325 != 0)
    v144 = 8;
  v12 = v158 == 0;
  v160 = v118 | v158;
  if (v12 && v118 != 0)
    v144 = 9;
  v12 = v160 == 0;
  v162 = v120 | v160;
  if (v12 && v120 != 0)
    v144 = 10;
  v12 = v162 == 0;
  v164 = v119 | v162;
  if (v12 && v119 != 0)
    v144 = 11;
  v12 = v164 == 0;
  v166 = v122 | v164;
  if (v12 && v122 != 0)
    v144 = 12;
  v12 = v166 == 0;
  v168 = v121 | v166;
  if (v12 && v121 != 0)
    v144 = 13;
  v12 = v168 == 0;
  v170 = v124 | v168;
  if (v12 && v124 != 0)
    v144 = 14;
  v12 = v170 == 0;
  v172 = v123 | v170;
  if (v12 && v123 != 0)
    v144 = 15;
  v12 = v172 == 0;
  v174 = v126 | v172;
  if (v12 && v126 != 0)
    v144 = 16;
  v12 = v174 == 0;
  v176 = v125 | v174;
  if (v12 && v125 != 0)
    v144 = 17;
  v12 = v176 == 0;
  v178 = v128 | v176;
  if (v12 && v128 != 0)
    v144 = 18;
  v12 = v178 == 0;
  v180 = v127 | v178;
  if (v12 && v127 != 0)
    v144 = 19;
  v12 = v180 == 0;
  v182 = v130 | v180;
  if (v12 && v130 != 0)
    v144 = 20;
  v12 = v182 == 0;
  v184 = v129 | v182;
  if (v12 && v129 != 0)
    v144 = 21;
  v12 = v184 == 0;
  v186 = v131 | v184;
  if (v12 && v131 != 0)
    v144 = 22;
  v12 = v186 == 0;
  v188 = v132 | v186;
  if (v12 && v132 != 0)
    v144 = 23;
  v12 = v188 == 0;
  v190 = v133 | v188;
  if (v12 && v133 != 0)
    v144 = 24;
  v12 = v190 == 0;
  v192 = v134 | v190;
  if (v12 && v134 != 0)
    v144 = 25;
  v12 = v192 == 0;
  v194 = v136 | v192;
  if (v12 && v136 != 0)
    v144 = 26;
  v12 = v194 == 0;
  v196 = v135 | v194;
  if (v12 && v135 != 0)
    v144 = 27;
  v12 = v196 == 0;
  v198 = v138 | v196;
  if (v12 && v138 != 0)
    v144 = 28;
  v12 = v198 == 0;
  v200 = v137 | v198;
  if (v12 && v137 != 0)
    v144 = 29;
  v12 = v200 == 0;
  v202 = v141 == 0;
  v203 = v321;
  if (!v12)
  {
    v202 = 1;
    v203 = 1;
  }
  v12 = !v202;
  v204 = 30;
  if (!v12)
    v204 = v144;
  v205 = v203 ? v204 : 31;
  v206 = *((_QWORD *)v114 - 1) & 0xFFFFFFFFFFFFFFF8;
  v207 = v323 - v205;
  *(_BYTE *)(v206 + 17) = v323 - v205;
  *(_BYTE *)(v206 + 18) = v205;
  if (v344)
  {
LABEL_457:
    a1 = v337;
  }
  else
  {
    v208 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v209 = *(_DWORD *)(v208 + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v209, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_457;
    }
    __clrex();
    v303 = *(os_unfair_lock_s **)(a3 + 8);
    v304 = *(_DWORD *)(v208 + 24);
    a1 = v337;
    while (1)
    {
      v305 = __ldxr(&v303->_os_unfair_lock_opaque);
      if (v305 != v304)
        break;
      if (!__stlxr(0, &v303->_os_unfair_lock_opaque))
        goto LABEL_627;
    }
    __clrex();
    os_unfair_lock_unlock(v303);
LABEL_627:
    v308 = *(_DWORD *)(v208 + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v308, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_645;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_645:
    v315 = *(os_unfair_lock_s **)(a3 + 8);
    v347 = v315;
    v316 = *(_DWORD *)(v208 + 24);
    while (!__ldaxr(&v315->_os_unfair_lock_opaque))
    {
      if (!__stxr(v316, &v315->_os_unfair_lock_opaque))
      {
        if (*(os_unfair_lock_s **)(a3 + 8) == v315)
          goto LABEL_458;
LABEL_651:
        v318 = *(_DWORD *)(v208 + 24);
        while (1)
        {
          v319 = __ldxr(&v315->_os_unfair_lock_opaque);
          if (v319 != v318)
            break;
          if (!__stlxr(0, &v315->_os_unfair_lock_opaque))
            goto LABEL_645;
        }
        __clrex();
        os_unfair_lock_unlock(v315);
        goto LABEL_645;
      }
    }
    __clrex();
    if (!pas_segregated_page_lock_with_unbias_impl(a3, &v347, v315))
      goto LABEL_651;
  }
LABEL_458:
  if (v207 == 1)
  {
    v211 = 4;
    v212 = (void *)v206;
  }
  else
  {
    v211 = 4 * v207;
    v212 = (void *)pas_immortal_heap_allocate_with_manual_alignment(4 * v207, 8, (uint64_t)"pas_segregated_partial_view/alloc_bits", 0);
  }
  v229 = (unint64_t)v212 - 4 * v205;
  memcpy(v212, &v114[v205], v211);
  __dmb(0xAu);
  v230 = *(unsigned int *)(v206 + 12);
  v231 = pas_compact_heap_reservation_base;
  if (v230 >= 8)
    v232 = pas_compact_heap_reservation_base;
  else
    v232 = 0;
  v233 = v232 + v230;
  if ((v233 & 1) != 0)
  {
    pas_utility_heap_deallocate(v233 & 0xFFFFFFFFFFFFFFFELL);
    v231 = pas_compact_heap_reservation_base;
  }
  if (v229 >= 8 && v229 - v231 >= pas_compact_heap_reservation_size)
  {
    v234 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
    *(_QWORD *)v234 = v229;
    v229 = v234 | 1;
    LODWORD(v231) = pas_compact_heap_reservation_base;
  }
  if (v229 < 8)
    LODWORD(v231) = 0;
  *(_DWORD *)(v206 + 12) = v229 - v231;
  if (v344)
  {
LABEL_500:
    v237 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v237)
      goto LABEL_502;
    goto LABEL_501;
  }
  v235 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v236 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v236 != v235)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_500;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  v237 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v237)
  {
LABEL_501:
    v238 = *(_QWORD *)(v337 + 8);
    v239 = v238 - v237;
    if (v238 < v237)
      goto LABEL_502;
    v260 = *(unsigned int *)(v337 + 20);
    v261 = (unsigned __int128 *)(a3 + 16);
    do
    {
      v262 = a3 + 4 * ((v239 >> 9) & 0x1F);
      v263 = 1 << (v239 >> 4);
      v12 = (*(_DWORD *)(v262 + 44) & ~v263) == 0;
      *(_DWORD *)(v262 + 44) &= ~v263;
      if (v12)
      {
        v264 = *(_QWORD *)(a3 + 32);
        if ((v264 & 7) != 0)
        {
          v265 = v264 & 0xFFFFFFFFFFFFFFF8;
          if (*(_BYTE *)(a3 + 1))
            *(_BYTE *)(a3 + 2) = 1;
          else
            pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v265 + 8)) | ((unint64_t)*(unsigned __int8 *)(v265 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v265 + 12));
          *(_QWORD *)(a3 + 32) = v265;
        }
        if (*(_QWORD *)(a3 + 24) == 1)
        {
          v266 = (unsigned int *)timebase_info_ptr;
          if (timebase_info_ptr)
          {
            v267 = mach_approximate_time();
            v268 = *v266;
            v269 = v266[1];
            if ((pas_get_epoch_first & 1) == 0)
              goto LABEL_549;
          }
          else
          {
            get_timebase_info_slow();
            v267 = mach_approximate_time();
            v268 = timebase_info;
            v269 = *(unsigned int *)algn_1ECF57B54;
            if ((pas_get_epoch_first & 1) == 0)
LABEL_549:
              pas_get_epoch_first = 1;
          }
          v270 = v267 * v268 / v269;
          do
            __ldxp(v261);
          while (__stxp(v270, v261));
          pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
          goto LABEL_538;
        }
        --*(_QWORD *)(a3 + 24);
      }
LABEL_538:
      v239 += v260;
    }
    while (v239 < v238);
  }
LABEL_502:
  v240 = *(unsigned int *)(v337 + 32);
  if ((_DWORD)v240 == *(_DWORD *)(v337 + 36))
    return;
  *(_QWORD *)(v337 + 8 * v240 + 56) = __rbit64(*(_QWORD *)(v337 + 40));
  if ((a2 & 6) == 0)
  {
    v346 = pas_compact_heap_reservation_base
         + *(unsigned int *)(pas_compact_heap_reservation_base + 8 * *(unsigned int *)(a4 + 40) + 9);
    v244 = 0;
    v342 = 32;
    goto LABEL_586;
  }
  v241 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFF8) + 12);
  v242 = pas_compact_heap_reservation_base;
  if (v241 < 8)
    v242 = 0;
  v346 = v242 + v241;
  if ((((_DWORD)v242 + (_DWORD)v241) & 1) != 0)
    v346 = *(_QWORD *)(v346 & 0xFFFFFFFFFFFFFFFELL);
  v243 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18) | ((unint64_t)(*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 17)
                                                                                    + *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18)) << 32);
  v244 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18);
  v342 = HIDWORD(v243);
  if (v243 < HIDWORD(v243))
  {
LABEL_586:
    v339 = v337 + 56;
    v289 = (unsigned __int128 *)(a3 + 16);
    while (1)
    {
      v290 = *(_DWORD *)(v339 + 4 * v244) & *(_DWORD *)(v346 + 4 * v244);
      if (v290)
        break;
LABEL_587:
      if (++v244 == v342)
        return;
    }
    v291 = (_DWORD *)(a3 + 4 * (v244 & 0x1F) + 44);
    while (1)
    {
      v292 = v290 & -v290;
      v12 = (*v291 & ~v292) == 0;
      *v291 &= ~v292;
      if (v12)
      {
        v293 = *(_QWORD *)(a3 + 32);
        if ((v293 & 7) != 0)
        {
          v294 = v293 & 0xFFFFFFFFFFFFFFF8;
          if (*(_BYTE *)(a3 + 1))
            *(_BYTE *)(a3 + 2) = 1;
          else
            pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v294 + 8)) | ((unint64_t)*(unsigned __int8 *)(v294 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v294 + 12));
          *(_QWORD *)(a3 + 32) = v294;
        }
        if (*(_QWORD *)(a3 + 24) == 1)
        {
          v295 = (unsigned int *)timebase_info_ptr;
          if (timebase_info_ptr)
          {
            v296 = mach_approximate_time();
            v297 = *v295;
            v298 = v295[1];
            if ((pas_get_epoch_first & 1) == 0)
              goto LABEL_602;
          }
          else
          {
            get_timebase_info_slow();
            v296 = mach_approximate_time();
            v297 = timebase_info;
            v298 = *(unsigned int *)algn_1ECF57B54;
            if ((pas_get_epoch_first & 1) == 0)
LABEL_602:
              pas_get_epoch_first = 1;
          }
          v299 = v296 * v297 / v298;
          do
            __ldxp(v289);
          while (__stxp(v299, v289));
          pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
          goto LABEL_591;
        }
        --*(_QWORD *)(a3 + 24);
      }
LABEL_591:
      v290 ^= v292;
      if (!v290)
        goto LABEL_587;
    }
  }
}

uint64_t bmalloc_medium_segregated_page_header_for_boundary(unint64_t a1)
{
  int v1;
  unsigned int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if (off_1ECF42618)
  {
    v1 = (a1 >> 17) ^ ((a1 >> 17) >> 4);
    v2 = ((v1 ^ 0xDEADBEEF) + 32 * v1) ^ (((v1 ^ 0xDEADBEEF) + 32 * v1) >> 11);
    v3 = (char *)off_1ECF42618 + 32;
    v4 = *((_DWORD *)off_1ECF42618 + 3) & v2;
    v5 = *((_QWORD *)off_1ECF42618 + 2 * v4 + 4);
    if (v5 == a1)
      return *(_QWORD *)&v3[16 * v4 + 8];
    v6 = v2 + 1;
    while (v5 != -1)
    {
      v4 = *((_DWORD *)off_1ECF42618 + 3) & v6;
      v5 = *(_QWORD *)&v3[16 * v4];
      ++v6;
      if (v5 == a1)
        return *(_QWORD *)&v3[16 * v4 + 8];
    }
  }
  return 0;
}

uint64_t bmalloc_medium_segregated_boundary_for_page_header(uint64_t a1)
{
  return *(_QWORD *)(a1 - 16);
}

uint64_t bmalloc_medium_segregated_page_header_for_boundary_remote(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  _QWORD *v8;

  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 72) + 16);
  v3 = *v2;
  if (*v2)
  {
    v4 = (a2 ^ (a2 >> 4) ^ 0xDEADBEEF) + 32 * (a2 ^ (a2 >> 4));
    v5 = ((a2 >> 36) ^ HIDWORD(a2) ^ 0xDEADBEEF) + 32 * ((a2 >> 36) ^ HIDWORD(a2));
    v6 = v4 ^ ((v5 ^ v4) >> 11) ^ v5;
    v7 = *((_DWORD *)v2 + 3);
    while (1)
    {
      v8 = (_QWORD *)(v3 + 16 * (v6 & v7));
      if (*v8 == -1)
      {
        if (v8[1] != 1)
          return 0;
      }
      else if (*v8 == a2)
      {
        return v8[1];
      }
      ++v6;
    }
  }
  return 0;
}

_QWORD *bmalloc_medium_segregated_create_page_header(unint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;
  int v10;
  unsigned int v11;

  if (!a3)
  {
    v5 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v5, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  v7 = (_QWORD *)pas_utility_heap_try_allocate_with_alignment(100, 0x10uLL, (uint64_t)"pas_page_header_table/header");
  *v7 = a1;
  v8 = v7 + 2;
  pas_lock_free_read_ptr_ptr_hashtable_set(&off_1ECF42618, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x20000, a1, (unint64_t)(v7 + 2));
  if (a3)
    return v8;
  v10 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v11 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v11 != v10)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v8;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return v8;
}

void bmalloc_medium_segregated_destroy_page_header(uint64_t a1, int a2)
{
  unint64_t StatusReg;
  unsigned int v4;
  int v6;
  unsigned int v7;

  if (a2)
  {
    pas_lock_free_read_ptr_ptr_hashtable_set(&off_1ECF42618, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x20000, *(_QWORD *)(a1 - 16), 0);
    pas_utility_heap_deallocate(a1 - 16);
  }
  else
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v4 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v4, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_8;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_8:
    pas_lock_free_read_ptr_ptr_hashtable_set(&off_1ECF42618, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x20000, *(_QWORD *)(a1 - 16), 0);
    pas_utility_heap_deallocate(a1 - 16);
    v6 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v7 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v7 != v6)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
}

uint64_t bmalloc_heap_config_allocate_medium_segregated_page(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int64x2_t v12;
  void (*v13)(uint64_t@<X0>, size_t@<X1>, uint64_t *@<X3>, uint64_t@<X8>);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];

  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 160);
  if ((**(_DWORD **)a1 & 0x20000) != 0)
    v3 = a1;
  else
    v3 = 0;
  v11 = 0;
  v7 = xmmword_19919FC00;
  v8 = 0x20000;
  v9 = 0u;
  v10 = 0u;
  v17[0] = v2;
  v17[1] = &v7;
  v17[2] = v3;
  v17[3] = a2;
  v12 = vdupq_n_s64(1uLL);
  v13 = megapage_cache_allocate_aligned;
  v14 = v17;
  v15 = 0;
  v16 = 0;
  v4 = pas_simple_large_free_heap_try_allocate(v2, 0x20000, 0x20000, 0, &v12);
  return (v5 << 63 >> 63) & v4;
}

uint64_t bmalloc_medium_segregated_page_config_select_shared_page_directory(uint64_t a1, uint64_t a2)
{
  return pas_shared_page_directory_by_size_get((int *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 208), *(_DWORD *)(a2 + 24) & 0x7FFFFFF, (uint64_t)&unk_1E35BE510);
}

uint64_t bmalloc_medium_segregated_page_config_specialized_local_allocator_try_allocate_in_primordial_partial_view(uint64_t a1)
{
  unint64_t v2;
  int v3;
  unsigned int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  int v36;
  int v38;
  int v40;
  int v42;
  BOOL v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t StatusReg;
  unsigned int v51;
  size_t v53;
  void *v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  os_unfair_lock_s *v59;
  int v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  os_unfair_lock_s *v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  os_unfair_lock_s *v76;
  unsigned int v77;
  int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int8x16_t v89;
  unsigned int v90;
  unint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  int8x16_t *v102;
  int8x16_t v103;
  uint64_t v104;
  int8x8_t *v105;
  int v108;
  unsigned int v109;
  os_unfair_lock_t v110;

  if (!off_1ECF42618)
  {
LABEL_7:
    v9 = 0;
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(a1 + 24);
  v3 = (v2 >> 17) ^ ((v2 >> 17) >> 4);
  v4 = ((v3 ^ 0xDEADBEEF) + 32 * v3) ^ (((v3 ^ 0xDEADBEEF) + 32 * v3) >> 11);
  v5 = (char *)off_1ECF42618 + 32;
  v6 = *((_DWORD *)off_1ECF42618 + 3) & v4;
  v7 = *((_QWORD *)off_1ECF42618 + 2 * v6 + 4);
  if (v7 != v2)
  {
    v8 = v4 + 1;
    while (v7 != -1)
    {
      v6 = *((_DWORD *)off_1ECF42618 + 3) & v8;
      v7 = *(_QWORD *)&v5[16 * v6];
      ++v8;
      if (v7 == v2)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v9 = *(_QWORD *)&v5[16 * v6 + 8];
LABEL_8:
  v10 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  v11 = ((8 * *(unsigned __int16 *)(v10 + 4)) | ((unint64_t)*(unsigned __int8 *)(v10 + 6) << 19))
      + pas_compact_heap_reservation_base;
  v12 = *(os_unfair_lock_s **)(v9 + 8);
  if (v12)
    v13 = pas_segregated_page_switch_lock_slow(v9, 0, v12);
  else
    v13 = 0;
  v14 = *(_DWORD *)(a1 + 20);
  v15 = (1 << *(_BYTE *)(a1 + 4));
  v16 = (*(unsigned int *)(v11 + 20) + v15 - 1) & -v15;
  v17 = (v14 + v16);
  if (v17 > 0x20000)
    goto LABEL_11;
  v55 = v17 | 0x100000000;
  if ((v17 ^ v16) > 0xFFF)
  {
    v58 = v14 + v16;
    goto LABEL_122;
  }
  v56 = v16;
  do
  {
    v57 = (2 * v14 + v56);
    if (v57 > 0x20000)
    {
      v58 = 0x20000;
      if (HIDWORD(v55))
        goto LABEL_122;
      goto LABEL_11;
    }
    v55 = (v55 & 0xFFFFFFFF00000000 | v57) + 0x100000000;
    v56 += v14;
  }
  while ((v57 ^ v16) < 0x1000);
  v58 = v14 + v56;
  if (!HIDWORD(v55))
  {
LABEL_11:
    v18 = *(_DWORD *)(a1 + 56);
    v19 = *(_DWORD *)(a1 + 60);
    v20 = (_DWORD *)(a1 + 56);
    v21 = v18 != 0;
    v22 = v20[2];
    v23 = v20[3];
    if (v19)
      v21 = 2;
    if (v22)
      v21 = 3;
    v25 = v20[4];
    v24 = v20[5];
    if (v23)
      v21 = 4;
    if (v25)
      v21 = 5;
    v26 = v20[6];
    v27 = v20[7];
    if (v24)
      v21 = 6;
    v28 = v27 == 0;
    v30 = v26 == 0;
    v29 = v26 == 0;
    if (!v30)
    {
      v21 = 7;
      v28 = 1;
    }
    if (v27)
      v21 = 8;
    v30 = v18 == 0;
    v31 = *((_QWORD *)v20 - 1) & 0xFFFFFFFFFFFFFFF8;
    if (v18)
      v32 = 0;
    else
      v32 = -1;
    v33 = v19 | v18;
    if (!v30 || v19 == 0)
      v35 = v32;
    else
      v35 = 1;
    v30 = v33 == 0;
    v36 = v22 | v33;
    if (v30 && v22 != 0)
      v35 = 2;
    v30 = v36 == 0;
    v38 = v23 | v36;
    if (v30 && v23 != 0)
      v35 = 3;
    v30 = v38 == 0;
    v40 = v25 | v38;
    if (v30 && v25 != 0)
      v35 = 4;
    v30 = v40 == 0;
    v42 = v24 | v40;
    if (v30 && v24 != 0)
      v35 = 5;
    v44 = v42 == 0;
    if (v42)
      v45 = 1;
    else
      v45 = v29;
    v46 = !v44 || v28;
    if (v45)
      v47 = v35;
    else
      v47 = 6;
    if (v46)
      v48 = v47;
    else
      v48 = 7;
    v49 = v21 - v48;
    *(_BYTE *)(v31 + 17) = v21 - v48;
    *(_BYTE *)(v31 + 18) = v48;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v51 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v51, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_69;
    }
    __clrex();
    v59 = *(os_unfair_lock_s **)(v9 + 8);
    v60 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v61 = __ldxr(&v59->_os_unfair_lock_opaque);
      if (v61 != v60)
        break;
      if (!__stlxr(0, &v59->_os_unfair_lock_opaque))
        goto LABEL_105;
    }
    __clrex();
    os_unfair_lock_unlock(v59);
LABEL_105:
    v74 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v74, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_111;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_111:
    v76 = *(os_unfair_lock_s **)(v9 + 8);
    v110 = v76;
    v77 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v76->_os_unfair_lock_opaque))
    {
      if (!__stxr(v77, &v76->_os_unfair_lock_opaque))
      {
        if (*(os_unfair_lock_s **)(v9 + 8) == v76)
          goto LABEL_69;
LABEL_117:
        v79 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v80 = __ldxr(&v76->_os_unfair_lock_opaque);
          if (v80 != v79)
            break;
          if (!__stlxr(0, &v76->_os_unfair_lock_opaque))
            goto LABEL_111;
        }
        __clrex();
        os_unfair_lock_unlock(v76);
        goto LABEL_111;
      }
    }
    __clrex();
    if (!pas_segregated_page_lock_with_unbias_impl(v9, &v110, v76))
      goto LABEL_117;
LABEL_69:
    if (v49 == 1)
    {
      v53 = 4;
      v54 = (void *)v31;
    }
    else
    {
      v53 = 4 * v49;
      v54 = (void *)pas_immortal_heap_allocate_with_manual_alignment(4 * v49, 8, (uint64_t)"pas_segregated_partial_view/alloc_bits", 0);
    }
    v62 = (unint64_t)v54 - 4 * v48;
    memcpy(v54, &v20[v48], v53);
    __dmb(0xAu);
    v63 = *(unsigned int *)(v31 + 12);
    v64 = pas_compact_heap_reservation_base;
    if (v63 >= 8)
      v65 = pas_compact_heap_reservation_base;
    else
      v65 = 0;
    v66 = v65 + v63;
    if ((v66 & 1) != 0)
    {
      pas_utility_heap_deallocate(v66 & 0xFFFFFFFFFFFFFFFELL);
      v64 = pas_compact_heap_reservation_base;
    }
    if (v62 >= 8 && v62 - v64 >= pas_compact_heap_reservation_size)
    {
      v67 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
      *(_QWORD *)v67 = v62;
      v62 = v67 | 1;
      LODWORD(v64) = pas_compact_heap_reservation_base;
    }
    if (v62 < 8)
      LODWORD(v64) = 0;
    *(_DWORD *)(v31 + 12) = v62 - v64;
    v68 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v69 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v69 != v68)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_97;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
LABEL_97:
    v70 = *(os_unfair_lock_s **)(v9 + 8);
    v71 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v72 = __ldxr(&v70->_os_unfair_lock_opaque);
      if (v72 != v71)
        break;
      if (!__stlxr(0, &v70->_os_unfair_lock_opaque))
        return 0;
    }
    __clrex();
    os_unfair_lock_unlock(v70);
    return 0;
  }
LABEL_122:
  v81 = v16;
  *(_DWORD *)(v11 + 20) = v58;
  v82 = *(_QWORD *)v11;
  v83 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v83 + v55;
  *(_DWORD *)(a1 + 16) = v55 - v17;
  if (v16 < v55)
  {
    v84 = 0;
    v85 = a1 + 56;
    v86 = v9 + 44;
    v87 = v9 + 76;
    v88 = (v82 & 0xFFFFFFFFFFFFFFFELL) + 20;
    v89.i64[0] = 0x101010101010101;
    v89.i64[1] = 0x101010101010101;
    v90 = v14 + v16;
    do
    {
      v91 = (unint64_t)v16 >> 14;
      v92 = 1 << (v16 >> 9);
      *(_DWORD *)(v85 + 4 * v91) |= v92;
      v93 = *(_DWORD *)(v86 + 4 * v91);
      if (!v93)
        ++*(_QWORD *)(v9 + 24);
      v94 = (v10 - pas_compact_heap_reservation_base) >> 3;
      if (!v10)
        LODWORD(v94) = 0;
      *(_DWORD *)(v88 + (((unint64_t)v16 >> 10) & 0x3FFFFC)) = v94;
      *(_DWORD *)(v86 + 4 * v91) = v93 | v92;
      v95 = (v16 + v14);
      if (!v14)
        goto LABEL_124;
      v96 = v16 >> 14;
      v97 = (unint64_t)(v95 - 1) >> 14;
      if (v97 < v96)
        goto LABEL_124;
      v98 = (((unint64_t)(v17 + v14 * v84) - 1) >> 14) - (v16 >> 14) + 1;
      if (v98 >= 8)
      {
        v99 = (((unint64_t)v90 - 1) >> 14) - v91 + 1;
        if (v98 < 0x20)
        {
          v100 = 0;
LABEL_138:
          v96 += v98 & 0xFFFFFFFFFFFFFFF8;
          v104 = v100 - (v99 & 0xFFFFFFFFFFFFFFF8);
          v105 = (int8x8_t *)(v87 + v100 + v91);
          do
          {
            *v105 = vadd_s8(*v105, (int8x8_t)0x101010101010101);
            ++v105;
            v104 += 8;
          }
          while (v104);
          if (v98 == (v98 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_124;
          goto LABEL_143;
        }
        v101 = v99 & 0xFFFFFFFFFFFFFFE0;
        v102 = (int8x16_t *)(v9 + 92 + v91);
        v100 = v98 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v103 = vaddq_s8(*v102, v89);
          v102[-1] = vaddq_s8(v102[-1], v89);
          *v102 = v103;
          v102 += 2;
          v101 -= 32;
        }
        while (v101);
        if (v98 == v100)
          goto LABEL_124;
        if ((v98 & 0x18) != 0)
          goto LABEL_138;
        v96 += v100;
      }
      do
LABEL_143:
        ++*(_BYTE *)(v87 + v96);
      while (v96++ < v97);
LABEL_124:
      ++v84;
      v90 += v14;
      LODWORD(v16) = v95;
    }
    while (v95 < v55);
  }
  v73 = v83 + v81;
  if (v13)
  {
    v108 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v109 = __ldxr(&v13->_os_unfair_lock_opaque);
      if (v109 != v108)
        break;
      if (!__stlxr(0, &v13->_os_unfair_lock_opaque))
        return v73;
    }
    __clrex();
    os_unfair_lock_unlock(v13);
  }
  return v73;
}

BOOL bmalloc_medium_segregated_page_config_specialized_local_allocator_start_allocating_in_primordial_partial_view(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unint64_t StatusReg;
  uint64_t v8;
  unsigned int *v9;
  unint64_t first_eligible;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;
  unsigned int v13;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  os_unfair_lock_s *v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  _QWORD *v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  char *v45;
  int v46;
  int v47;
  unsigned int v48;
  int8x16_t v49;
  unint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int8x16_t *v60;
  int8x16_t v61;
  uint64_t v62;
  int8x8_t *v63;
  int v65;
  unsigned int v66;
  _QWORD *v67;
  unsigned int v68;
  os_unfair_lock_t v70;
  unsigned int v71;
  os_unfair_lock_s *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  os_unfair_lock_t v79;
  int v80;
  unsigned int v81;
  uint64_t v83;
  int i;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  os_unfair_lock_t lock;

  v5 = *(_DWORD *)(a1 + 20);
  v6 = 1 << *(_BYTE *)(a1 + 4);
  v95 = v6 - 1;
  v96 = v6;
  v94 = -v6;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v93 = StatusReg;
LABEL_3:
  lock = 0;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = (unsigned int *)pas_shared_page_directory_by_size_get((int *)(*(_QWORD *)(*(_QWORD *)v8 + 32) + 208), *(_DWORD *)(a3 + 24) & 0x7FFFFFF, (uint64_t)&unk_1E35BE510);
  first_eligible = pas_segregated_shared_page_directory_find_first_eligible(v9, v5, v96, 0);
  v11 = (os_unfair_lock_s *)first_eligible;
  v12 = (os_unfair_lock_s *)(first_eligible + 8);
  v13 = *(_DWORD *)(StatusReg + 24);
  do
  {
    if (__ldaxr(&v12->_os_unfair_lock_opaque))
    {
      __clrex();
      os_unfair_lock_lock((os_unfair_lock_t)(first_eligible + 8));
      v15 = *(_QWORD *)&v11->_os_unfair_lock_opaque;
      if ((*(_QWORD *)&v11->_os_unfair_lock_opaque & 1) != 0)
        goto LABEL_10;
LABEL_7:
      v16 = (_QWORD *)pas_segregated_shared_view_commit_page(v11, v8, (uint64_t)v9, a2, (uint64_t)&unk_1E35BE510);
      if (!v16)
        goto LABEL_38;
LABEL_11:
      if (off_1ECF42618)
      {
        v17 = (*v16 >> 17) ^ ((*v16 >> 17) >> 4);
        v18 = ((v17 ^ 0xDEADBEEF) + 32 * v17) ^ (((v17 ^ 0xDEADBEEF) + 32 * v17) >> 11);
        v19 = (char *)off_1ECF42618 + 32;
        v20 = v18 & *((_DWORD *)off_1ECF42618 + 3);
        v21 = *((_QWORD *)off_1ECF42618 + 2 * v20 + 4);
        if (v21 == *v16)
        {
LABEL_16:
          v23 = *(_QWORD *)&v19[16 * v20 + 8];
          v24 = 0;
          lock = 0;
          v25 = *(os_unfair_lock_s **)(v23 + 8);
          if (v25)
          {
LABEL_25:
            v31 = v16;
            v24 = pas_segregated_page_switch_lock_slow(v23, 0, v25);
            v16 = v31;
            lock = v24;
          }
LABEL_17:
          v26 = (v95 + v11[5]._os_unfair_lock_opaque) & v94;
          v27 = v5 + v26;
          if (v27 <= 0x20000)
          {
            v28 = v27 | 0x100000000;
            if ((v27 ^ v26) > 0xFFF)
              goto LABEL_42;
            v29 = (v95 + v11[5]._os_unfair_lock_opaque) & v94;
            do
            {
              v30 = (2 * v5 + v29);
              if (v30 > 0x20000)
              {
                LODWORD(v27) = 0x20000;
                if (HIDWORD(v28))
                  goto LABEL_42;
                goto LABEL_27;
              }
              v28 = (v28 & 0xFFFFFFFF00000000 | v30) + 0x100000000;
              v29 += v5;
            }
            while ((v30 ^ v26) < 0x1000);
            LODWORD(v27) = v5 + v29;
            if (HIDWORD(v28))
            {
LABEL_42:
              v38 = v16;
              v11[5]._os_unfair_lock_opaque = v27;
              *(_BYTE *)(a2 + 19) |= 1u;
              ++v11[6]._os_unfair_lock_opaque;
              *(_BYTE *)(a2 + 19) &= ~4u;
              pas_segregated_page_commit_fully(v23, &lock, 1);
              v39 = (unint64_t)v11 - pas_compact_heap_reservation_base;
              *(_BYTE *)(a2 + 4) = ((unint64_t)v11 - pas_compact_heap_reservation_base) >> 3;
              *(_BYTE *)(a2 + 5) = v39 >> 11;
              *(_BYTE *)(a2 + 6) = v39 >> 19;
              if (((*(_BYTE *)(a1 + 5) - 4) & 0xF8) != 0)
                v40 = 3;
              else
                v40 = 0xB0B090907070505uLL >> (8 * (*(_BYTE *)(a1 + 5) - 4));
              *(_BYTE *)(a1 + 5) = v40;
              v41 = *(_QWORD *)(v23 - 16);
              *(_OWORD *)(a1 + 56) = 0u;
              v42 = a1 + 56;
              *(_QWORD *)(a1 + 24) = v41;
              *(_OWORD *)(a1 + 72) = 0u;
              v43 = *(_DWORD *)(a1 + 20);
              *(_QWORD *)(a1 + 8) = v41 + v28;
              *(_DWORD *)(a1 + 16) = v28 - v26;
              if (v28 > v26)
              {
                v44 = v23 + 44;
                v45 = (char *)v38 + 20;
                if (!v43)
                {
                  v83 = v26 >> 14;
                  for (i = 1 << (v26 >> 9); ; *(_DWORD *)(v44 + 4 * v83) = v85 | i)
                  {
                    *(_DWORD *)(v42 + 4 * v83) |= i;
                    v85 = *(_DWORD *)(v44 + 4 * v83);
                    if (!v85)
                      ++*(_QWORD *)(v23 + 24);
                    *(_DWORD *)&v45[4 * (v26 >> 12)] = (unint64_t)(a2 - pas_compact_heap_reservation_base) >> 3;
                  }
                }
                v46 = 0;
                v47 = v43 + v26;
                v48 = v43 + v26;
                v49.i64[0] = 0x101010101010101;
                v49.i64[1] = 0x101010101010101;
                do
                {
                  v50 = (unint64_t)v26 >> 14;
                  v51 = 1 << (v26 >> 9);
                  *(_DWORD *)(v42 + 4 * v50) |= v51;
                  v52 = *(_DWORD *)(v44 + 4 * v50);
                  if (!v52)
                    ++*(_QWORD *)(v23 + 24);
                  *(_DWORD *)&v45[((unint64_t)v26 >> 10) & 0x3FFFFC] = (unint64_t)(a2
                                                                                               - pas_compact_heap_reservation_base) >> 3;
                  *(_DWORD *)(v44 + 4 * v50) = v52 | v51;
                  v53 = v26 + v43;
                  v54 = v26 >> 14;
                  v55 = (unint64_t)(v53 - 1) >> 14;
                  if (v55 < v54)
                    goto LABEL_48;
                  v56 = (((unint64_t)(v47 + v43 * v46) - 1) >> 14) - (v26 >> 14) + 1;
                  if (v56 >= 8)
                  {
                    v57 = (((unint64_t)v48 - 1) >> 14) - v50 + 1;
                    if (v56 < 0x20)
                    {
                      v58 = 0;
LABEL_59:
                      v54 += v56 & 0xFFFFFFFFFFFFFFF8;
                      v62 = v58 - (v57 & 0xFFFFFFFFFFFFFFF8);
                      v63 = (int8x8_t *)(v23 + 76 + v58 + v50);
                      do
                      {
                        *v63 = vadd_s8(*v63, (int8x8_t)0x101010101010101);
                        ++v63;
                        v62 += 8;
                      }
                      while (v62);
                      if (v56 == (v56 & 0xFFFFFFFFFFFFFFF8))
                        goto LABEL_48;
                      goto LABEL_64;
                    }
                    v59 = v57 & 0xFFFFFFFFFFFFFFE0;
                    v60 = (int8x16_t *)(v23 + 92 + v50);
                    v58 = v56 & 0xFFFFFFFFFFFFFFE0;
                    do
                    {
                      v61 = vaddq_s8(*v60, v49);
                      v60[-1] = vaddq_s8(v60[-1], v49);
                      *v60 = v61;
                      v60 += 2;
                      v59 -= 32;
                    }
                    while (v59);
                    if (v56 == v58)
                      goto LABEL_48;
                    if ((v56 & 0x18) != 0)
                      goto LABEL_59;
                    v54 += v58;
                  }
                  do
LABEL_64:
                    ++*(_BYTE *)(v23 + 76 + v54);
                  while (v54++ < v55);
LABEL_48:
                  ++v46;
                  v48 += v43;
                  v26 = v53;
                }
                while (v53 < v28);
              }
              *(_QWORD *)(a1 + 48) = a2 | 4;
              *(_BYTE *)(a2 + 19) |= 0x10u;
              v65 = *(_DWORD *)(v93 + 24);
              while (1)
              {
                v66 = __ldxr(&v12->_os_unfair_lock_opaque);
                if (v66 != v65)
                  break;
                if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
                  goto LABEL_73;
              }
              __clrex();
              os_unfair_lock_unlock(v12);
LABEL_73:
              v68 = *(_DWORD *)(v93 + 24);
              while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
              {
                if (!__stxr(v68, &pas_heap_lock._os_unfair_lock_opaque))
                  goto LABEL_84;
              }
              __clrex();
              v70 = lock;
              if (lock)
              {
                v88 = *(_DWORD *)(v93 + 24);
                while (1)
                {
                  v89 = __ldxr(&v70->_os_unfair_lock_opaque);
                  if (v89 != v88)
                    break;
                  if (!__stlxr(0, &v70->_os_unfair_lock_opaque))
                    goto LABEL_121;
                }
                __clrex();
                os_unfair_lock_unlock(v70);
LABEL_121:
                lock = 0;
              }
              v71 = *(_DWORD *)(v93 + 24);
              while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
              {
                if (!__stxr(v71, &pas_heap_lock._os_unfair_lock_opaque))
                  goto LABEL_83;
              }
              __clrex();
              os_unfair_lock_lock(&pas_heap_lock);
LABEL_83:
              v73 = *(os_unfair_lock_s **)(v23 + 8);
              if (lock == v73)
              {
LABEL_84:
                v74 = *(unsigned int *)(a2 + 12);
                v75 = pas_compact_heap_reservation_base;
                if (v74 >= 8)
                  v76 = pas_compact_heap_reservation_base;
                else
                  v76 = 0;
                v77 = v76 + v74;
                if ((v77 & 1) != 0)
                {
LABEL_88:
                  pas_utility_heap_deallocate(v77 & 0xFFFFFFFFFFFFFFFELL);
                  v75 = pas_compact_heap_reservation_base;
                }
              }
              else
              {
                lock = pas_segregated_page_switch_lock_slow(v23, lock, v73);
                v90 = *(unsigned int *)(a2 + 12);
                v75 = pas_compact_heap_reservation_base;
                if (v90 >= 8)
                  v91 = pas_compact_heap_reservation_base;
                else
                  v91 = 0;
                v77 = v91 + v90;
                if ((v77 & 1) != 0)
                  goto LABEL_88;
              }
              v16 = v38;
              if (v42 >= 8 && v42 - v75 >= pas_compact_heap_reservation_size)
              {
                v78 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
                v16 = v38;
                *(_QWORD *)v78 = v42;
                v42 = v78 | 1;
                LODWORD(v75) = pas_compact_heap_reservation_base;
              }
              if (v42 < 8)
                LODWORD(v75) = 0;
              *(_DWORD *)(a2 + 12) = v42 - v75;
              *(_BYTE *)(a2 + 17) = 8;
              v79 = lock;
              if (lock)
              {
                v86 = *(_DWORD *)(v93 + 24);
                while (1)
                {
                  v87 = __ldxr(&v79->_os_unfair_lock_opaque);
                  if (v87 != v86)
                    break;
                  if (!__stlxr(0, &v79->_os_unfair_lock_opaque))
                    goto LABEL_119;
                }
                __clrex();
                os_unfair_lock_unlock(v79);
                v16 = v38;
LABEL_119:
                lock = 0;
              }
              v80 = *(_DWORD *)(v93 + 24);
              while (1)
              {
                v81 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
                if (v81 != v80)
                  break;
                if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
                  return v16 != 0;
              }
              __clrex();
              os_unfair_lock_unlock(&pas_heap_lock);
              v16 = v38;
              return v16 != 0;
            }
          }
LABEL_27:
          StatusReg = v93;
          if (v24)
          {
            v34 = *(_DWORD *)(v93 + 24);
            while (1)
            {
              v35 = __ldxr(&v24->_os_unfair_lock_opaque);
              if (v35 != v34)
                break;
              if (!__stlxr(0, &v24->_os_unfair_lock_opaque))
                goto LABEL_37;
            }
            __clrex();
            os_unfair_lock_unlock(v24);
LABEL_37:
            lock = 0;
          }
          v32 = *(_DWORD *)(v93 + 24);
          while (1)
          {
            v33 = __ldxr(&v12->_os_unfair_lock_opaque);
            if (v33 != v32)
              break;
            if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
              goto LABEL_3;
          }
          __clrex();
          os_unfair_lock_unlock(v12);
          goto LABEL_3;
        }
        v22 = v18 + 1;
        while (v21 != -1)
        {
          v20 = *((_DWORD *)off_1ECF42618 + 3) & v22;
          v21 = *(_QWORD *)&v19[16 * v20];
          ++v22;
          if (v21 == *v16)
            goto LABEL_16;
        }
      }
      v23 = 0;
      v24 = 0;
      lock = 0;
      v25 = (os_unfair_lock_s *)MEMORY[8];
      if (MEMORY[8])
        goto LABEL_25;
      goto LABEL_17;
    }
  }
  while (__stxr(v13, &v12->_os_unfair_lock_opaque));
  v15 = *(_QWORD *)first_eligible;
  if ((*(_QWORD *)first_eligible & 1) == 0)
    goto LABEL_7;
LABEL_10:
  v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if ((v15 & 0xFFFFFFFFFFFFFFFELL) != 0)
    goto LABEL_11;
LABEL_38:
  v36 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v37 = __ldxr(&v12->_os_unfair_lock_opaque);
    if (v37 != v36)
      break;
    if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
      return v16 != 0;
  }
  __clrex();
  v67 = v16;
  os_unfair_lock_unlock(v12);
  v16 = v67;
  return v16 != 0;
}

uint64_t bmalloc_medium_segregated_page_config_specialized_local_allocator_refill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  char *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t StatusReg;
  unint64_t v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  int v81;
  int v82;
  unsigned int v83;
  _DWORD *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  os_unfair_lock_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int i;
  uint64_t v104;
  int v105;
  _BYTE *v106;
  int v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  os_unfair_lock_s *v112;
  char v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t eligible;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  os_unfair_lock_s *v129;
  uint64_t v130;
  os_unfair_lock_s *v131;
  unsigned int v132;
  uint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  unsigned int *v137;
  unsigned int v138;
  unint64_t v140;
  os_unfair_lock_t v141;
  unsigned int v142;
  os_unfair_lock_s *v144;
  unsigned int v145;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  int v154;
  unsigned int v155;
  os_unfair_lock_t v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  char *v163;
  unsigned int v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int v169;
  _QWORD *v171;
  int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  int v176;
  unsigned int v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int v183;
  int v185;
  unsigned int v186;
  int v187;
  unsigned int v188;
  os_unfair_lock_s *v189;
  unsigned int v190;
  int v192;
  unsigned int v193;
  int v194;
  unsigned int v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  os_unfair_lock_s *v200;
  unsigned int v201;
  os_unfair_lock_s *v202;
  int v203;
  unsigned int v204;
  os_unfair_lock_s *v205;
  unsigned int v206;
  unint64_t v207;
  int v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  _BOOL4 v213;
  uint64_t v214;
  uint64_t v215;
  char local_allocator_slow;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  const os_unfair_lock *v223;
  _BOOL4 v224;
  char v225;
  int v226;
  unint64_t v227;
  unsigned int v228;
  unint64_t v229;
  uint64_t v230;
  BOOL v231;
  uint64_t result;
  int v233;
  unsigned int v234;
  int v235;
  unsigned int v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  os_unfair_lock_s *v240;
  unsigned int v241;
  uint64_t v242;
  unint64_t v243;
  int v244;
  unsigned int v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  os_unfair_lock_s *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int8x16_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  int v271;
  unsigned int v272;
  BOOL v273;
  unint64_t v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  int8x16_t *v283;
  int8x16_t v284;
  unint64_t v285;
  int8x8_t *v286;
  unint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  _OWORD *v301;
  __int128 v302;
  int v303;
  unsigned int v304;
  int v305;
  unsigned int v306;
  int v307;
  unsigned int v308;
  int64x2_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  os_unfair_lock_s *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  os_unfair_lock_t v322;
  os_unfair_lock_t v323;
  os_unfair_lock_t lock;
  int64x2_t v325;
  void (*v326)(uint64_t@<X0>, size_t@<X1>, uint64_t *@<X3>, uint64_t@<X8>);
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD v330[4];
  __int128 v331;
  uint64_t v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;
  uint64_t v336;

  v336 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 48);
  v10 = &unk_1ECF57000;
  if ((v9 & 7) == 5)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFF8;
    v322 = 0;
    v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 16);
    if ((*(_BYTE *)(*(_QWORD *)v12 + 2) & 1) != 0)
      goto LABEL_33;
    goto LABEL_12;
  }
  if (!v9)
    goto LABEL_11;
  if ((v9 & 7u) < 2)
  {
    v13 = v9 & 0xFFFFFFFFFFFFFFF8;
    v14 = *(unsigned __int8 *)(v13 + 10);
    v15 = *(unsigned __int16 *)(v13 + 8);
    goto LABEL_9;
  }
  if ((v9 & 7) != 4)
  {
LABEL_11:
    v11 = 0;
    v322 = 0;
    v12 = MEMORY[0x10];
    if ((*(_BYTE *)(*MEMORY[0x10] + 2) & 1) != 0)
      goto LABEL_33;
    goto LABEL_12;
  }
  v16 = (unsigned __int16 *)(v9 | 7);
  v14 = *((unsigned __int8 *)v16 + 2);
  v15 = *v16;
LABEL_9:
  v11 = ((8 * v15) | (v14 << 19)) + pas_compact_heap_reservation_base;
  v322 = 0;
  v12 = *(_QWORD *)(v11 + 16);
  if ((*(_BYTE *)(*(_QWORD *)v12 + 2) & 1) == 0)
  {
LABEL_12:
    v17 = *(unsigned int *)(v12 + 36);
    if (!(_DWORD)v17)
      goto LABEL_33;
    v18 = *(_QWORD *)(v12 + 8);
    if (v18)
    {
      v19 = v18 & 0xFFFFFFFFFE000000;
      v20 = *(_QWORD *)(v12 + 8) & 0x1FFFFFFLL;
      v21 = (unint64_t)(v20 - 16392) >> 14;
      v22 = (unint64_t)(v20 + 4 * v17 - 16385) >> 14;
      v23 = v19 | 0x10;
      v24 = (unint64_t *)(v23 + 8 * v21);
      while (1)
      {
        v25 = *v24;
        if ((*v24 & 7) < 3)
        {
LABEL_22:
          if (v21 == v22)
            goto LABEL_23;
          v114 = (unint64_t *)(v23 + 8 * v22);
          while (2)
          {
            v115 = *v114;
            if ((*v114 & 7) < 3)
              goto LABEL_23;
            v116 = __ldxr(v114);
            if (v116 == v115)
            {
              if (!__stlxr(v115 & 0xFFFFFFFFFFFFFFF8 | 2, v114))
              {
                v117 = 1;
                goto LABEL_123;
              }
            }
            else
            {
              __clrex();
            }
            v117 = 0;
LABEL_123:
            __dmb(0xBu);
            if (v117)
              goto LABEL_23;
            continue;
          }
        }
        v26 = __ldxr(v24);
        if (v26 != v25)
          break;
        if (__stlxr(v25 & 0xFFFFFFFFFFFFFFF8 | 2, v24))
          goto LABEL_20;
        v27 = 1;
LABEL_21:
        __dmb(0xBu);
        if (v27)
          goto LABEL_22;
      }
      __clrex();
LABEL_20:
      v27 = 0;
      goto LABEL_21;
    }
LABEL_23:
    v28 = *(_QWORD *)(v12 + 16);
    if (!v28)
      goto LABEL_33;
    v29 = v28 & 0xFFFFFFFFFE000000;
    v30 = *(_QWORD *)(v12 + 16) & 0x1FFFFFFLL;
    v31 = v30 + 4 * v17;
    v32 = (unint64_t)(v30 - 16392) >> 14;
    v33 = (unint64_t)(v31 - 16385) >> 14;
    v34 = v29 | 0x10;
    v35 = (unint64_t *)(v34 + 8 * v32);
    while (1)
    {
      v36 = *v35;
      if ((*v35 & 7) < 3)
      {
LABEL_32:
        if (v32 == v33)
          goto LABEL_33;
        v118 = (unint64_t *)(v34 + 8 * v33);
        while (2)
        {
          v119 = *v118;
          if ((*v118 & 7) < 3)
            goto LABEL_33;
          v120 = __ldxr(v118);
          if (v120 == v119)
          {
            if (!__stlxr(v119 & 0xFFFFFFFFFFFFFFF8 | 2, v118))
            {
              v121 = 1;
              goto LABEL_132;
            }
          }
          else
          {
            __clrex();
          }
          v121 = 0;
LABEL_132:
          __dmb(0xBu);
          if (v121)
            goto LABEL_33;
          continue;
        }
      }
      v37 = __ldxr(v35);
      if (v37 != v36)
        break;
      if (__stlxr(v36 & 0xFFFFFFFFFFFFFFF8 | 2, v35))
        goto LABEL_30;
      v38 = 1;
LABEL_31:
      __dmb(0xBu);
      if (v38)
        goto LABEL_32;
    }
    __clrex();
LABEL_30:
    v38 = 0;
    goto LABEL_31;
  }
LABEL_33:
  v39 = *(unsigned int *)(v12 + 28);
  v40 = pas_compact_heap_reservation_base + 8 * v39;
  if ((_DWORD)v39)
    v41 = v40 == 0;
  else
    v41 = 1;
  if (!v41)
  {
    v42 = *(unsigned int *)(v40 + 12);
    if ((_DWORD)v42)
    {
      v43 = *(unsigned int *)(v40 + 8);
      if ((_DWORD)v43)
        v44 = pas_compact_heap_reservation_base + 8 * v43;
      else
        v44 = 0;
      v45 = v44 - pas_compact_expendable_memory_payload;
      v46 = (unint64_t)(v44 - pas_compact_expendable_memory_payload - 8) >> 14;
      v47 = (unint64_t)(v45 + 16 * v42 - 1) >> 14;
      v48 = (unint64_t *)&pas_compact_expendable_memory_header[v46 + 1];
      while (1)
      {
        v49 = *v48;
        if ((*v48 & 7) < 3)
        {
LABEL_49:
          if (v46 == v47)
            goto LABEL_50;
          v108 = (unint64_t *)&pas_compact_expendable_memory_header[v47 + 1];
          while (2)
          {
            v109 = *v108;
            if ((*v108 & 7) < 3)
              goto LABEL_50;
            v110 = __ldxr(v108);
            if (v110 == v109)
            {
              if (!__stlxr(v109 & 0xFFFFFFFFFFFFFFF8 | 2, v108))
              {
                v111 = 1;
                goto LABEL_111;
              }
            }
            else
            {
              __clrex();
            }
            v111 = 0;
LABEL_111:
            __dmb(0xBu);
            if (v111)
              goto LABEL_50;
            continue;
          }
        }
        v50 = __ldxr(v48);
        if (v50 != v49)
          break;
        if (__stlxr(v49 & 0xFFFFFFFFFFFFFFF8 | 2, v48))
          goto LABEL_47;
        v51 = 1;
LABEL_48:
        __dmb(0xBu);
        if (v51)
          goto LABEL_49;
      }
      __clrex();
LABEL_47:
      v51 = 0;
      goto LABEL_48;
    }
  }
LABEL_50:
  *(_WORD *)(a1 + 1) = 256;
  if (pas_scavenger_current_state != 1 && pas_scavenger_eligibility_notification_has_been_deferred == 0)
  {
    __dmb(0xBu);
    pas_scavenger_eligibility_notification_has_been_deferred = 1;
LABEL_62:
    pas_scavenger_notify_eligibility_if_needed();
    v53 = *(_QWORD *)(a1 + 24);
    if (v53)
      goto LABEL_56;
LABEL_63:
    v60 = 0;
    v61 = 0;
    goto LABEL_64;
  }
  if (pas_scavenger_current_state != 1)
    goto LABEL_62;
  v53 = *(_QWORD *)(a1 + 24);
  if (!v53)
    goto LABEL_63;
LABEL_56:
  v54 = v53 & 0xFFFFFFFFFFFE0000;
  v55 = (v53 >> 17) ^ ((v53 >> 17) >> 4);
  v56 = ((v55 ^ 0xDEADBEEF) + 32 * v55) ^ (((v55 ^ 0xDEADBEEF) + 32 * v55) >> 11);
  v57 = (char *)off_1ECF42618 + 32;
  v58 = *((_DWORD *)off_1ECF42618 + 3) & v56;
  if (*((_QWORD *)off_1ECF42618 + 2 * v58 + 4) != v54)
  {
    v59 = v56 + 1;
    do
      v58 = *((_DWORD *)off_1ECF42618 + 3) & v59++;
    while (*(_QWORD *)&v57[16 * v58] != v54);
  }
  v60 = *(_QWORD *)&v57[16 * v58 + 8];
  v61 = *(_QWORD *)(v60 + 32);
  if ((v61 & 6) != 0)
    v61 = *(_QWORD *)(a1 + 48);
LABEL_64:
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v62 = v11 | 5;
  if (!v11)
    v62 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v62;
  *(_WORD *)(a1 + 5) = 8;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v64 = *(_QWORD *)(StatusReg + 752);
  v321 = StatusReg;
  if (v64)
  {
    v318 = *(os_unfair_lock_s **)(v64 + 8016);
    if (*(_BYTE *)(v64 + 8048))
    {
      v310 = v61;
      v312 = v11;
      v65 = *(_DWORD *)(v64 + 8052) + 31;
      if (v65 >= 0x20)
      {
        v100 = 0;
        v101 = *(_QWORD *)(v64 + 8024);
        v102 = v65 >> 5;
        do
        {
          for (i = *(_DWORD *)(v101 + 4 * v100); i; i &= ~v105)
          {
            v104 = __clz(__rbit32(i));
            v105 = 1 << v104;
            *(_DWORD *)(v101 + 4 * v100) &= ~(1 << v104);
            v106 = (_BYTE *)(v64 + 8064 + 8 * ((32 * v100) | v104));
            if (v106 != (_BYTE *)a1 && v106[1])
            {
              v107 = v106[3];
              if (v107 == 4)
              {
                pas_local_view_cache_stop(v106, 1);
              }
              else if (v107 == 2)
              {
                pas_local_allocator_stop(v106, 1, 0);
              }
            }
          }
          ++v100;
        }
        while (v100 != v102);
      }
      *(_BYTE *)(v64 + 8048) = 0;
      v10 = (_QWORD *)&unk_1ECF57000;
      v11 = v312;
      v61 = v310;
    }
    v322 = 0;
    if (!v61)
      goto LABEL_82;
  }
  else
  {
    v318 = 0;
    v322 = 0;
    if (!v61)
      goto LABEL_82;
  }
  if ((v61 & 7) == 4)
  {
    v66 = v61 & 0xFFFFFFFFFFFFFFF8;
    v94 = *(_BYTE *)((v61 & 0xFFFFFFFFFFFFFFF8) + 19);
    if ((v94 & 4) != 0)
    {
      v112 = *(os_unfair_lock_s **)(v60 + 8);
      if (v112)
      {
        v322 = pas_segregated_page_switch_lock_slow(v60, 0, v112);
        v94 = *(_BYTE *)(v66 + 19);
      }
      v113 = v94 & 0xF9;
LABEL_352:
      *(_BYTE *)(v66 + 19) = v113;
      v251 = *(_QWORD *)(v60 - 16);
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      v252 = v66 | 4;
      v319 = *(unsigned int *)(v66 + 12);
      v253 = v10[317];
      v254 = *(unsigned __int8 *)(v66 + 18);
      v255 = *(unsigned __int8 *)(v66 + 17);
      v256 = (v255 + v254);
      *(_QWORD *)(a1 + 48) = v252;
      v257 = *(unsigned int *)(a1 + 20);
      *(_DWORD *)(a1 + 32) = v254 >> 1;
      *(_DWORD *)(a1 + 36) = (v256 + 1) >> 1;
      bzero((void *)(a1 + 56 + 8 * (v254 >> 1)), (4 * (v256 - (v254 & 0xFE)) + 4) & 0x3FFFFFFF8);
      v258 = 0;
      *(_QWORD *)(a1 + 24) = v251 + (v254 >> 1 << 15);
      if (v254 < v256)
      {
        v259 = 0;
        LODWORD(v258) = 0;
        v260 = v253 + v319;
        v261 = v60 + 44;
        v262 = v60 + 76;
        v263 = v255 + v254;
        v317 = v60;
        v320 = v60 + 92;
        v264.i64[0] = 0x101010101010101;
        v264.i64[1] = 0x101010101010101;
        v265 = v254;
        v266 = v254;
        v267 = v257 - 1 + (v254 << 14);
        do
        {
          v268 = v265 & 0x3FFFFFFFFFFFFLL;
          v269 = 4 * v266;
          v270 = *(_DWORD *)(v260 + 4 * v266);
          v271 = *(_DWORD *)(v261 + 4 * v266);
          v272 = v270 & ~v271;
          *(_DWORD *)(a1 + 56 + v269) = v272;
          *(_DWORD *)(v261 + v269) = v271 | v270;
          if (v271)
            v273 = 1;
          else
            v273 = v270 == 0;
          if (v273)
            v258 = v258;
          else
            v258 = (v258 + 1);
          if (v272)
          {
            if ((_DWORD)v257)
            {
              v274 = v266 & 0x3FFFFFFFFFFFFLL;
              v275 = 1 - v268;
              while (1)
              {
                v276 = __clz(__rbit32(v272));
                v277 = v276 << 9;
                v278 = (v257 - 1 + (v266 << 14) + v277) >> 14;
                if (v274 <= v278)
                  break;
LABEL_364:
                v272 &= ~(1 << v276);
                if (!v272)
                  goto LABEL_354;
              }
              v279 = v278 - ((v259 + v254) & 0x3FFFFFFFFFFFFLL) + 1;
              v280 = v266 & 0x3FFFFFFFFFFFFLL;
              if (v279 >= 8)
              {
                if (v279 >= 0x20)
                {
                  v281 = v279 & 0xFFFFFFFFFFFFFFE0;
                  v282 = (v275 + ((unint64_t)(v267 + v277) >> 14)) & 0xFFFFFFFFFFFFFFE0;
                  v283 = (int8x16_t *)(v320 + v268);
                  do
                  {
                    v284 = vaddq_s8(*v283, v264);
                    v283[-1] = vaddq_s8(v283[-1], v264);
                    *v283 = v284;
                    v283 += 2;
                    v282 -= 32;
                  }
                  while (v282);
                  if (v279 == v281)
                    goto LABEL_364;
                  if ((((_BYTE)v278 - ((_BYTE)v259 + (_BYTE)v254) + 1) & 0x18) != 0)
                    goto LABEL_373;
                  v280 = v274 + v281;
                }
                else
                {
                  v281 = 0;
LABEL_373:
                  v280 = v274 + (v279 & 0xFFFFFFFFFFFFFFF8);
                  v285 = v281 - ((v275 + ((unint64_t)(v267 + v277) >> 14)) & 0xFFFFFFFFFFFFFFF8);
                  v286 = (int8x8_t *)(v262 + v268 + v281);
                  do
                  {
                    *v286 = vadd_s8(*v286, (int8x8_t)0x101010101010101);
                    ++v286;
                    v285 += 8;
                  }
                  while (v285);
                  if (v279 == (v279 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_364;
                }
              }
              do
                ++*(_BYTE *)(v262 + v280);
              while (v280++ < v278);
              goto LABEL_364;
            }
            do
              v272 &= v272 - 1;
            while (v272);
          }
LABEL_354:
          ++v266;
          ++v259;
          v265 = v268 + 1;
          v267 += 0x4000;
        }
        while (v266 != v263);
        v60 = v317;
      }
      *(_QWORD *)(a1 + 40) = 0;
      *(_BYTE *)(a1 + 6) = 1;
      *(_QWORD *)(v60 + 24) += v258;
      v93 = v321;
      v92 = v322;
      if (!v322)
        return 1;
      goto LABEL_395;
    }
  }
  else if ((v61 & 7) == 0)
  {
    v66 = v61 & 0xFFFFFFFFFFFFFFF8;
    pas_segregated_page_switch_lock_and_rebias_while_ineligible_impl(v60, &v322, v318);
    *(_QWORD *)(v60 + 32) = v61 | 1;
    *(_BYTE *)(v60 + 2) = 0;
    v67 = *(_QWORD *)(v60 - 16);
    v68 = v60;
    if (!*(_QWORD *)(v60 + 24))
      goto LABEL_389;
    goto LABEL_76;
  }
LABEL_82:
  if (!v64)
    goto LABEL_136;
  v95 = *(unsigned int *)(v11 + 32);
  if (*(_DWORD *)(v64 + 8052) <= v95)
  {
    if ((_DWORD)v95 == -1)
      goto LABEL_136;
    local_allocator_slow = pas_thread_local_cache_get_local_allocator_slow(v64, v95, 0, a4, a5, a6, a7, a8);
    v96 = v217;
    if ((local_allocator_slow & 1) == 0)
      goto LABEL_136;
  }
  else
  {
    v96 = v64 + 8 * v95 + 8064;
  }
  *(_BYTE *)v96 = 1;
  if (*(_BYTE *)(v96 + 3) != 4)
    goto LABEL_134;
  v97 = *(unsigned __int8 *)(v96 + 5);
  if (*(unsigned __int8 *)(v96 + 6) != (_DWORD)v97)
  {
LABEL_89:
    *(_WORD *)(v96 + 1) = 256;
    if (*(unsigned __int8 *)(v96 + 4) > (v97 + 1))
      v98 = v97 + 1;
    else
      v98 = 0;
    *(_BYTE *)(v96 + 5) = v98;
    v99 = ((8 * *(unsigned __int16 *)(v96 + 3 * v97 + 8)) | ((unint64_t)*(unsigned __int8 *)(v96 + 3 * v97 + 10) << 19))
        + v10[317];
    *(_BYTE *)(v96 + 7) = 1;
    *(_BYTE *)v96 = 0;
    goto LABEL_267;
  }
  if (*(_BYTE *)(v96 + 7))
  {
    if (*(_BYTE *)(v96 + 7) == 2)
      goto LABEL_89;
  }
  else
  {
LABEL_134:
    pas_local_allocator_scavenger_data_commit_if_necessary_slow((BOOL *)v96, 0);
  }
  *(_WORD *)(v96 + 1) = 256;
  *(_BYTE *)v96 = 0;
LABEL_136:
  eligible = pas_segregated_size_directory_take_first_eligible((unsigned int *)v11);
  v99 = eligible;
  if (!eligible)
    goto LABEL_267;
  if ((eligible & 7) < 2)
  {
    v313 = v11;
    v315 = v60;
    v123 = eligible & 0xFFFFFFFFFFFFFFF8;
    if (*(_BYTE *)((eligible & 0xFFFFFFFFFFFFFFF8) + 11))
    {
LABEL_139:
      v11 = v313;
      v60 = v315;
      goto LABEL_267;
    }
    v136 = ((8 * *(unsigned __int16 *)(v123 + 8)) | ((unint64_t)*(unsigned __int8 *)(v123 + 10) << 19))
         + v10[317];
    if (*(_QWORD *)v123)
    {
      *(_QWORD *)&v331 = 0;
      v137 = (unsigned int *)(v123 + 16);
      v138 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(v137))
      {
        if (!__stxr(v138, v137))
          goto LABEL_202;
      }
      __clrex();
      os_unfair_lock_lock((os_unfair_lock_t)(v123 + 16));
LABEL_202:
      *(_QWORD *)&v331 = v123 + 16;
      if (*(unsigned __int8 *)(v136 + 13) << 8 == 512)
        pas_physical_page_sharing_pool_take_for_page_config(0x20000uLL, (uint64_t)&unk_1E35BE510, 0, (uint64_t)&v331, 1);
      v168 = *(_QWORD *)v123;
      v169 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v169, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_209;
      }
      __clrex();
      os_unfair_lock_lock(&pas_heap_lock);
LABEL_209:
      v171 = (_QWORD *)pas_utility_heap_try_allocate_with_alignment(100, 0x10uLL, (uint64_t)"pas_page_header_table/header");
      *v171 = v168;
      pas_lock_free_read_ptr_ptr_hashtable_set(&off_1ECF42618, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x20000, v168, (unint64_t)(v171 + 2));
      v172 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v173 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v173 != v172)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_214;
      }
      __clrex();
      os_unfair_lock_unlock(&pas_heap_lock);
LABEL_214:
      v174 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v175 = __ldxr(v137);
        if (v175 != v174)
          break;
        if (!__stlxr(0, v137))
          goto LABEL_219;
      }
      __clrex();
      os_unfair_lock_unlock((os_unfair_lock_t)(v123 + 16));
LABEL_219:
      v140 = *(_QWORD *)v123;
    }
    else if (*(unsigned __int8 *)(v136 + 13) << 8 != 512
           || (pas_physical_page_sharing_pool_take_for_page_config(0x20000uLL, (uint64_t)&unk_1E35BE510, 0, 0, 0),
               (v140 = *(_QWORD *)v123) == 0))
    {
      v141 = 0;
      v323 = 0;
      lock = 0;
      v309 = vdupq_n_s64(1uLL);
      do
      {
        if (v141)
        {
          v142 = *(_DWORD *)(StatusReg + 24);
          while (!__ldaxr(&v141->_os_unfair_lock_opaque))
          {
            if (!__stxr(v142, &v141->_os_unfair_lock_opaque))
              goto LABEL_166;
          }
          __clrex();
          os_unfair_lock_lock(v141);
LABEL_166:
          v144 = v323;
          v323 = 0;
          lock = v144;
        }
        v145 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
        {
          if (!__stxr(v145, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_172;
        }
        __clrex();
        os_unfair_lock_lock(&pas_heap_lock);
LABEL_172:
        v147 = *(_QWORD *)(v136 + 16);
        v148 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v147 + 32) + 160);
        if ((**(_DWORD **)v147 & 0x20000) != 0)
          v149 = *(_QWORD *)(v136 + 16);
        else
          v149 = 0;
        v331 = xmmword_19919FC00;
        v335 = 0;
        v332 = 0x20000;
        v333 = 0u;
        v334 = 0u;
        v330[0] = v148;
        v330[1] = &v331;
        v330[2] = v149;
        v330[3] = &v323;
        v325 = v309;
        v326 = megapage_cache_allocate_aligned;
        v327 = v330;
        v328 = 0;
        v329 = 0;
        v150 = pas_simple_large_free_heap_try_allocate(v148, 0x20000, 0x20000, 0, &v325);
        v152 = (v151 << 63 >> 63) & v150;
        *(_QWORD *)v123 = v152;
        if (v152)
        {
          v153 = (_QWORD *)pas_utility_heap_try_allocate_with_alignment(100, 0x10uLL, (uint64_t)"pas_page_header_table/header");
          *v153 = v152;
          pas_lock_free_read_ptr_ptr_hashtable_set(&off_1ECF42618, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x20000, v152, (unint64_t)(v153 + 2));
        }
        v154 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v155 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
          if (v155 != v154)
            break;
          if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          {
            v156 = lock;
            if (!lock)
              goto LABEL_159;
            goto LABEL_183;
          }
        }
        __clrex();
        os_unfair_lock_unlock(&pas_heap_lock);
        v156 = lock;
        if (!lock)
          goto LABEL_159;
LABEL_183:
        v157 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v158 = __ldxr(&v156->_os_unfair_lock_opaque);
          if (v158 != v157)
            break;
          if (!__stlxr(0, &v156->_os_unfair_lock_opaque))
            goto LABEL_158;
        }
        __clrex();
        os_unfair_lock_unlock(v156);
LABEL_158:
        lock = 0;
LABEL_159:
        v141 = v323;
      }
      while (v323);
      v140 = *(_QWORD *)v123;
      if (!*(_QWORD *)v123)
      {
        v99 = 0;
        goto LABEL_139;
      }
    }
    if (off_1ECF42618)
    {
      v176 = (v140 >> 17) ^ ((v140 >> 17) >> 4);
      v177 = ((v176 ^ 0xDEADBEEF) + 32 * v176) ^ (((v176 ^ 0xDEADBEEF) + 32 * v176) >> 11);
      v178 = (char *)off_1ECF42618 + 32;
      v179 = *((_DWORD *)off_1ECF42618 + 3) & v177;
      v180 = *((_QWORD *)off_1ECF42618 + 2 * v179 + 4);
      if (v180 == v140)
      {
LABEL_226:
        v182 = *(_QWORD *)&v178[16 * v179 + 8];
        goto LABEL_228;
      }
      v181 = v177 + 1;
      while (v180 != -1)
      {
        v179 = *((_DWORD *)off_1ECF42618 + 3) & v181;
        v180 = *(_QWORD *)&v178[16 * v179];
        ++v181;
        if (v180 == v140)
          goto LABEL_226;
      }
    }
    v182 = 0;
LABEL_228:
    pas_segregated_page_construct(v182, v123 | 1, 0, (uint64_t)&unk_1E35BE510);
    v131 = (os_unfair_lock_s *)(v123 + 20);
    v183 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v131->_os_unfair_lock_opaque))
    {
      if (!__stxr(v183, &v131->_os_unfair_lock_opaque))
        goto LABEL_233;
    }
    __clrex();
    os_unfair_lock_lock((os_unfair_lock_t)(v123 + 20));
LABEL_233:
    *(_BYTE *)(v123 + 11) = 1;
    v185 = *(_DWORD *)(StatusReg + 24);
    v11 = v313;
    v60 = v315;
    while (1)
    {
      v186 = __ldxr(&v131->_os_unfair_lock_opaque);
      if (v186 != v185)
        break;
      if (!__stlxr(0, &v131->_os_unfair_lock_opaque))
        goto LABEL_267;
    }
LABEL_266:
    __clrex();
    os_unfair_lock_unlock(v131);
    goto LABEL_267;
  }
  if ((eligible & 7) != 4)
  {
    v99 = 0;
    goto LABEL_267;
  }
  v124 = eligible & 0xFFFFFFFFFFFFFFF8;
  v125 = ((8 * *(unsigned __int16 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 7)) | ((unint64_t)*(unsigned __int8 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 9) << 19))
       + v10[317];
  v126 = *(_QWORD *)(v125 + 16);
  v127 = pas_shared_page_directory_by_size_get((int *)(*(_QWORD *)(*(_QWORD *)v126 + 32) + 208), *(_DWORD *)(v125 + 24) & 0x7FFFFFF, (uint64_t)&unk_1E35BE510);
  v128 = *(unsigned __int16 *)(v124 + 4) | ((unint64_t)*(unsigned __int8 *)(v124 + 6) << 16);
  if (!v128)
    goto LABEL_267;
  v311 = v61;
  v314 = v11;
  v129 = (os_unfair_lock_s *)(v10[317] + 8 * v128);
  if (!v129)
  {
    v11 = v314;
    goto LABEL_267;
  }
  v130 = v127;
  v131 = v129 + 2;
  v132 = *(_DWORD *)(StatusReg + 24);
  do
  {
    if (__ldaxr(&v131->_os_unfair_lock_opaque))
    {
      __clrex();
      v159 = v127;
      os_unfair_lock_lock(v129 + 2);
      v130 = v159;
      v134 = *(_QWORD *)&v129->_os_unfair_lock_opaque;
      if ((*(_QWORD *)&v129->_os_unfair_lock_opaque & 1) == 0)
        goto LABEL_147;
      goto LABEL_188;
    }
  }
  while (__stxr(v132, &v131->_os_unfair_lock_opaque));
  v134 = *(_QWORD *)&v129->_os_unfair_lock_opaque;
  if ((*(_QWORD *)&v129->_os_unfair_lock_opaque & 1) == 0)
  {
LABEL_147:
    v135 = (_QWORD *)pas_segregated_shared_view_commit_page(v129, v126, v130, v99 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&unk_1E35BE510);
    goto LABEL_189;
  }
LABEL_188:
  v135 = (_QWORD *)(v134 & 0xFFFFFFFFFFFFFFFELL);
LABEL_189:
  if (v135)
  {
    if ((*(_BYTE *)(v124 + 19) & 0x10) == 0)
    {
      if (*(_BYTE *)(v124 + 17))
      {
        v160 = v10[317] + *(unsigned int *)(v124 + 12);
        v161 = *(unsigned __int8 *)(v124 + 18);
        v162 = v161 + *(unsigned __int8 *)(v124 + 17);
        v163 = (char *)v135 + 20;
        do
        {
          v164 = *(_DWORD *)(v160 + 4 * v161);
          if (v164)
          {
            v165 = 32 * v161;
            if (v124)
            {
              do
              {
                v166 = __clz(__rbit32(v164));
                *(_DWORD *)&v163[((v165 | v166) >> 1) & 0x7FFFFFFFFFFFFFFCLL] = (v124 - v10[317]) >> 3;
                v164 &= ~(1 << v166);
              }
              while (v164);
            }
            else
            {
              do
              {
                v167 = __clz(__rbit32(v164));
                *(_DWORD *)&v163[((v165 | v167) >> 1) & 0x7FFFFFFFFFFFFFFCLL] = 0;
                v164 &= ~(1 << v167);
              }
              while (v164);
            }
          }
          ++v161;
        }
        while (v161 < v162);
      }
      v189 = v129 + 3;
      v190 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&v189->_os_unfair_lock_opaque))
      {
        if (!__stxr(v190, &v189->_os_unfair_lock_opaque))
          goto LABEL_247;
      }
      __clrex();
      os_unfair_lock_lock(v189);
LABEL_247:
      *(_BYTE *)(v124 + 19) |= 0x10u;
      v192 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v193 = __ldxr(&v189->_os_unfair_lock_opaque);
        if (v193 != v192)
          break;
        if (!__stlxr(0, &v189->_os_unfair_lock_opaque))
          goto LABEL_252;
      }
      __clrex();
      os_unfair_lock_unlock(v189);
    }
LABEL_252:
    *(_QWORD *)&v331 = 0;
    if (off_1ECF42618)
    {
      v194 = (*v135 >> 17) ^ ((*v135 >> 17) >> 4);
      v195 = ((v194 ^ 0xDEADBEEF) + 32 * v194) ^ (((v194 ^ 0xDEADBEEF) + 32 * v194) >> 11);
      v196 = (char *)off_1ECF42618 + 32;
      v197 = v195 & *((_DWORD *)off_1ECF42618 + 3);
      v198 = *((_QWORD *)off_1ECF42618 + 2 * v197 + 4);
      if (v198 == *v135)
      {
        v11 = v314;
LABEL_260:
        v199 = *(_QWORD *)&v196[16 * v197 + 8];
        *(_QWORD *)&v331 = 0;
        v200 = *(os_unfair_lock_s **)(v199 + 8);
        if (!v200)
          goto LABEL_261;
      }
      else
      {
        v201 = v195 + 1;
        v11 = v314;
        while (v198 != -1)
        {
          v197 = *((_DWORD *)off_1ECF42618 + 3) & v201;
          v198 = *(_QWORD *)&v196[16 * v197];
          ++v201;
          if (v198 == *v135)
            goto LABEL_260;
        }
        v199 = 0;
        *(_QWORD *)&v331 = 0;
        v200 = (os_unfair_lock_s *)MEMORY[8];
        if (!MEMORY[8])
          goto LABEL_261;
      }
    }
    else
    {
      v199 = 0;
      v11 = v314;
      *(_QWORD *)&v331 = 0;
      v200 = (os_unfair_lock_s *)MEMORY[8];
      if (!MEMORY[8])
      {
LABEL_261:
        pas_segregated_page_commit_fully(v199, (os_unfair_lock_t *)&v331, 1);
        v202 = (os_unfair_lock_s *)v331;
        if ((_QWORD)v331)
        {
          v307 = *(_DWORD *)(StatusReg + 24);
          while (1)
          {
            v308 = __ldxr(&v202->_os_unfair_lock_opaque);
            if (v308 != v307)
              break;
            if (!__stlxr(0, &v202->_os_unfair_lock_opaque))
              goto LABEL_414;
          }
          __clrex();
          os_unfair_lock_unlock(v202);
LABEL_414:
          *(_QWORD *)&v331 = 0;
          v11 = v314;
        }
        v203 = *(_DWORD *)(StatusReg + 24);
        v61 = v311;
        while (1)
        {
          v204 = __ldxr(&v131->_os_unfair_lock_opaque);
          if (v204 != v203)
            goto LABEL_266;
          if (!__stlxr(0, &v131->_os_unfair_lock_opaque))
            goto LABEL_267;
        }
      }
    }
    *(_QWORD *)&v331 = pas_segregated_page_switch_lock_slow(v199, 0, v200);
    goto LABEL_261;
  }
  v187 = *(_DWORD *)(StatusReg + 24);
  v11 = v314;
  v61 = v311;
  while (1)
  {
    v188 = __ldxr(&v131->_os_unfair_lock_opaque);
    if (v188 != v187)
      break;
    v99 = 0;
    if (!__stlxr(0, &v131->_os_unfair_lock_opaque))
      goto LABEL_267;
  }
  __clrex();
  os_unfair_lock_unlock(v131);
  v99 = 0;
LABEL_267:
  if (!v61)
    goto LABEL_320;
  v205 = *(os_unfair_lock_s **)(v60 + 8);
  if (v322 == v205)
  {
    v206 = v61 & 7;
    if (v206 < 2)
      goto LABEL_270;
LABEL_293:
    if (v206 != 4)
      goto LABEL_320;
    v218 = v61 & 0xFFFFFFFFFFFFFFF8;
    v219 = v10[317];
    v220 = ((8 * *(unsigned __int16 *)((v61 & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((v61 & 0xFFFFFFFFFFFFFFF8) + 6) << 19))
         + v219;
    v221 = *(unsigned __int8 *)(v218 + 9);
    v222 = *(unsigned __int16 *)(v218 + 7);
    v316 = *(_QWORD *)((*(_QWORD *)v220 & 0xFFFFFFFFFFFFFFFELL) + 8);
    v223 = *(const os_unfair_lock **)(v60 + 8);
    if (v223)
      os_unfair_lock_assert_owner(v223);
    if (*(_DWORD *)(v220 + 24) == 1)
    {
      if (*(_QWORD *)(v60 + 24)
        && *(_BYTE *)(v60 + 83)
        && *(_BYTE *)(v60 + 82)
        && *(_BYTE *)(v60 + 81)
        && *(_BYTE *)(v60 + 80)
        && *(_BYTE *)(v60 + 79)
        && *(_BYTE *)(v60 + 78)
        && *(_BYTE *)(v60 + 77))
      {
        v224 = *(_BYTE *)(v60 + 76) == 0;
        v225 = *(_BYTE *)(v218 + 19);
        if ((v225 & 2) == 0)
        {
LABEL_308:
          *(_BYTE *)(v218 + 19) = v225 & 0xFE;
          --*(_DWORD *)(v220 + 24);
          StatusReg = v321;
          if (!v224)
            goto LABEL_320;
LABEL_312:
          v226 = v219 & 5 | 2;
          if (v226 == 3)
          {
            v227 = ((8 * *(unsigned __int16 *)((v220 & 0xFFFFFFFFFFFFFFF8) + 16)) | ((unint64_t)*(unsigned __int8 *)((v220 & 0xFFFFFFFFFFFFFFF8) + 18) << 19))
                 + v10[317];
          }
          else
          {
            if (v226 != 2)
            {
              v228 = 0;
              goto LABEL_318;
            }
            v227 = v220 & 0xFFFFFFFFFFFFFFF8;
          }
          v228 = *(_DWORD *)(v227 + 16) & 0x7FFFFFFF;
LABEL_318:
          v215 = v228;
          v214 = v316;
          goto LABEL_319;
        }
      }
      else
      {
        v224 = 1;
        v225 = *(_BYTE *)(v218 + 19);
        if ((v225 & 2) == 0)
          goto LABEL_308;
      }
    }
    else
    {
      v224 = 0;
      v225 = *(_BYTE *)(v218 + 19);
      if ((v225 & 2) == 0)
        goto LABEL_308;
    }
    *(_BYTE *)(v218 + 19) = v225 & 0xFC;
    --*(_DWORD *)(v220 + 24);
    pas_segregated_directory_view_did_become_eligible_at_index(((8 * v222) | (v221 << 19)) + v219, *(unsigned __int8 *)(v218 + 16));
    StatusReg = v321;
    if (!v224)
      goto LABEL_320;
    goto LABEL_312;
  }
  v322 = pas_segregated_page_switch_lock_slow(v60, v322, v205);
  v206 = v61 & 7;
  if (v206 >= 2)
    goto LABEL_293;
LABEL_270:
  v207 = v61 & 0xFFFFFFFFFFFFFFF8;
  v208 = *(unsigned __int8 *)(v60 + 2);
  if (*(_BYTE *)(v60 + 2))
    *(_BYTE *)(v60 + 2) = 0;
  v209 = (8 * *(unsigned __int16 *)(v207 + 8)) | ((unint64_t)*(unsigned __int8 *)(v207 + 10) << 19);
  v210 = v10[317];
  v211 = v209 + v210;
  v212 = *(unsigned int *)(v207 + 12);
  v213 = !*(_QWORD *)(v60 + 24)
      || !*(_BYTE *)(v60 + 83)
      || !*(_BYTE *)(v60 + 82)
      || !*(_BYTE *)(v60 + 81)
      || !*(_BYTE *)(v60 + 80)
      || !*(_BYTE *)(v60 + 79)
      || !*(_BYTE *)(v60 + 78)
      || !*(_BYTE *)(v60 + 77)
      || *(_BYTE *)(v60 + 76) == 0;
  *(_BYTE *)(v60 + 1) = 0;
  if (v208)
    pas_segregated_directory_view_did_become_eligible_at_index(v209 + v210, v212);
  if (v213)
  {
    v214 = v211;
    v215 = v212;
LABEL_319:
    pas_segregated_directory_view_did_become_empty_at_index(v214, v215);
  }
LABEL_320:
  if (!v99)
  {
    result = (uint64_t)v322;
    if (v322)
    {
      v233 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v234 = __ldxr(&v322->_os_unfair_lock_opaque);
        if (v234 != v233)
          break;
        if (!__stlxr(0, &v322->_os_unfair_lock_opaque))
          goto LABEL_406;
      }
      __clrex();
      os_unfair_lock_unlock(v322);
LABEL_406:
      result = 0;
      v322 = 0;
    }
    return result;
  }
  v66 = v99 & 0xFFFFFFFFFFFFFFF8;
  if ((v99 & 6) == 0)
  {
    if (off_1ECF42618)
    {
      v235 = (*(_QWORD *)v66 >> 17) ^ ((*(_QWORD *)v66 >> 17) >> 4);
      v236 = ((v235 ^ 0xDEADBEEF) + 32 * v235) ^ (((v235 ^ 0xDEADBEEF) + 32 * v235) >> 11);
      v237 = (char *)off_1ECF42618 + 32;
      v238 = v236 & *((_DWORD *)off_1ECF42618 + 3);
      v239 = *((_QWORD *)off_1ECF42618 + 2 * v238 + 4);
      v240 = v318;
      if (v239 == *(_QWORD *)v66)
      {
LABEL_339:
        v242 = *(_QWORD *)&v237[16 * v238 + 8];
      }
      else
      {
        v241 = v236 + 1;
        while (v239 != -1)
        {
          v238 = *((_DWORD *)off_1ECF42618 + 3) & v241;
          v239 = *(_QWORD *)&v237[16 * v238];
          ++v241;
          if (v239 == *(_QWORD *)v66)
            goto LABEL_339;
        }
        v242 = 0;
      }
    }
    else
    {
      v242 = 0;
      v240 = v318;
    }
    pas_segregated_page_switch_lock_and_rebias_while_ineligible_impl(v242, &v322, v240);
    *(_BYTE *)(v242 + 1) = 1;
    pas_segregated_page_commit_fully(v242, &v322, 0);
    *(_QWORD *)(v242 + 32) = v99 | 1;
    v67 = *(_QWORD *)(v242 - 16);
    v68 = v242;
    if (!*(_QWORD *)(v242 + 24))
    {
LABEL_389:
      v288 = ((8 * *(unsigned __int16 *)(v66 + 8)) | ((unint64_t)*(unsigned __int8 *)(v66 + 10) << 19))
           + v10[317];
      v289 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v288 + 12));
      v290 = v10;
      v291 = *(_QWORD *)(v289 + 32);
      v292 = *(_QWORD *)(v289 + 40);
      v293 = *(_QWORD *)(v289 + 120);
      v294 = (void *)((*(uint64_t (**)(_QWORD))(v289 + 56))(*(_QWORD *)v66)
                    + 4 * ((unint64_t)(v293 + 31) >> 5)
                    + 44);
      v295 = *(unsigned int *)(v288 + 40);
      v296 = v290[317];
      if ((_DWORD)v295)
        v297 = v296 + 8 * v295;
      else
        v297 = 0;
      memcpy(v294, (const void *)(v296 + *(unsigned int *)(v297 + 16)), v291 / v292);
      v298 = v290[317] + 8 * *(unsigned int *)(v11 + 40);
      v299 = *(_DWORD *)v298;
      v300 = *(unsigned int *)(v298 + 4) + v67;
      *(_QWORD *)(v68 + 24) = *(unsigned __int8 *)(v298 + 8);
      *(_QWORD *)(a1 + 8) = v300;
      *(_DWORD *)(a1 + 16) = v300 - (v299 + v67);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 24) = v67;
      v301 = (_OWORD *)(v290[317] + *(unsigned int *)(v298 + 9));
      v302 = v301[1];
      *(_OWORD *)(v68 + 44) = *v301;
      *(_OWORD *)(v68 + 60) = v302;
      v93 = v321;
      v92 = v322;
      if (!v322)
        return 1;
LABEL_395:
      v303 = *(_DWORD *)(v93 + 24);
      while (1)
      {
        v304 = __ldxr(&v92->_os_unfair_lock_opaque);
        if (v304 != v303)
          break;
        if (!__stlxr(0, &v92->_os_unfair_lock_opaque))
          goto LABEL_400;
      }
      __clrex();
      os_unfair_lock_unlock(v92);
LABEL_400:
      v322 = 0;
      return 1;
    }
LABEL_76:
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v69 = ((8 * *(unsigned __int16 *)(v66 + 8)) | ((unint64_t)*(unsigned __int8 *)(v66 + 10) << 19)) + v10[317];
    v70 = (uint64_t)*(&pas_segregated_page_config_kind_for_config_table + *(unsigned __int8 *)(v69 + 12));
    v71 = v10;
    v72 = *(_QWORD *)(v70 + 32);
    v73 = *(_QWORD *)(v70 + 40);
    v74 = *(_QWORD *)(v70 + 120);
    v75 = (void *)((*(uint64_t (**)(_QWORD))(v70 + 56))(*(_QWORD *)v66)
                 + 4 * ((unint64_t)(v74 + 31) >> 5)
                 + 44);
    v76 = *(unsigned int *)(v69 + 40);
    v77 = v71[317];
    if ((_DWORD)v76)
      v78 = v77 + 8 * v76;
    else
      v78 = 0;
    memcpy(v75, (const void *)(v77 + *(unsigned int *)(v78 + 16)), v72 / v73);
    v79 = v71[317];
    v80 = (_DWORD *)(v79 + 8 * *(unsigned int *)(v11 + 40));
    v81 = *v80;
    v82 = *v80 >> 15;
    v83 = (((v80[1] >> 9) - 1) >> 6) + 1;
    v84 = (_DWORD *)(v79 + *(unsigned int *)((char *)v80 + 9));
    *(_DWORD *)(a1 + 32) = v82;
    *(_DWORD *)(a1 + 36) = v83;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)(a1 + 24) = (v81 & 0xFFFF8000) + v67;
    LODWORD(v79) = *v84;
    v85 = *(_DWORD *)(v68 + 44);
    *(_DWORD *)(a1 + 56) = *v84 & ~v85;
    *(_DWORD *)(v68 + 44) = v85 | v79;
    LODWORD(v79) = v84[1];
    v86 = *(_DWORD *)(v68 + 48);
    *(_DWORD *)(a1 + 60) = v79 & ~v86;
    *(_DWORD *)(v68 + 48) = v86 | v79;
    LODWORD(v79) = v84[2];
    v87 = *(_DWORD *)(v68 + 52);
    *(_DWORD *)(a1 + 64) = v79 & ~v87;
    *(_DWORD *)(v68 + 52) = v87 | v79;
    LODWORD(v79) = v84[3];
    v88 = *(_DWORD *)(v68 + 56);
    *(_DWORD *)(a1 + 68) = v79 & ~v88;
    *(_DWORD *)(v68 + 56) = v88 | v79;
    LODWORD(v79) = v84[4];
    v89 = *(_DWORD *)(v68 + 60);
    *(_DWORD *)(a1 + 72) = v79 & ~v89;
    *(_DWORD *)(v68 + 60) = v89 | v79;
    LODWORD(v79) = v84[5];
    v90 = *(_DWORD *)(v68 + 64);
    *(_DWORD *)(a1 + 76) = v79 & ~v90;
    *(_DWORD *)(v68 + 64) = v90 | v79;
    LODWORD(v79) = v84[6];
    v91 = *(_DWORD *)(v68 + 68);
    *(_DWORD *)(a1 + 80) = v79 & ~v91;
    *(_DWORD *)(v68 + 68) = v91 | v79;
    LODWORD(v84) = v84[7];
    LODWORD(v79) = *(_DWORD *)(v68 + 72);
    *(_DWORD *)(a1 + 84) = v84 & ~(_DWORD)v79;
    *(_DWORD *)(v68 + 72) = v79 | v84;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 6) = 1;
    *(_QWORD *)(v68 + 24) = *(unsigned __int8 *)(v71[317] + 8 * *(unsigned int *)(v11 + 40) + 8);
    v93 = v321;
    v92 = v322;
    if (!v322)
      return 1;
    goto LABEL_395;
  }
  v229 = *(unsigned __int16 *)(v66 + 4) | ((unint64_t)*(unsigned __int8 *)(v66 + 6) << 16);
  v230 = v10[317] + 8 * v229;
  if (v229)
    v231 = v230 == 0;
  else
    v231 = 1;
  if (!v231)
  {
    v243 = *(_QWORD *)v230;
    if ((*(_QWORD *)v230 & 1) != 0)
      v243 = *(_QWORD *)(v243 & 0xFFFFFFFFFFFFFFFELL);
    if (off_1ECF42618)
    {
      v244 = (v243 >> 17) ^ ((v243 >> 17) >> 4);
      v245 = ((v244 ^ 0xDEADBEEF) + 32 * v244) ^ (((v244 ^ 0xDEADBEEF) + 32 * v244) >> 11);
      v246 = (char *)off_1ECF42618 + 32;
      v247 = *((_DWORD *)off_1ECF42618 + 3) & v245;
      v248 = *((_QWORD *)off_1ECF42618 + 2 * v247 + 4);
      if (v248 == v243)
      {
LABEL_347:
        v60 = *(_QWORD *)&v246[16 * v247 + 8];
LABEL_349:
        v250 = *(os_unfair_lock_s **)(v60 + 8);
        if (v322 != v250)
          v322 = pas_segregated_page_switch_lock_slow(v60, v322, v250);
        *(_BYTE *)(v66 + 19) |= 1u;
        ++*(_DWORD *)(v230 + 24);
        v113 = *(_BYTE *)(v66 + 19) & 0xFB;
        goto LABEL_352;
      }
      v249 = v245 + 1;
      while (v248 != -1)
      {
        v247 = *((_DWORD *)off_1ECF42618 + 3) & v249;
        v248 = *(_QWORD *)&v246[16 * v247];
        ++v249;
        if (v248 == v243)
          goto LABEL_347;
      }
    }
    v60 = 0;
    goto LABEL_349;
  }
  if (v322)
  {
    v305 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v306 = __ldxr(&v322->_os_unfair_lock_opaque);
      if (v306 != v305)
        break;
      if (!__stlxr(0, &v322->_os_unfair_lock_opaque))
        goto LABEL_408;
    }
    __clrex();
    os_unfair_lock_unlock(v322);
LABEL_408:
    v322 = 0;
  }
  return bmalloc_medium_segregated_page_config_specialized_local_allocator_start_allocating_in_primordial_partial_view(a1, v99 & 0xFFFFFFFFFFFFFFF8, v11);
}

void bmalloc_medium_segregated_page_config_specialized_local_allocator_return_memory_to_page(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BOOL4 v22;
  _BOOL4 v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  int v30;
  int v32;
  int v34;
  int v36;
  BOOL v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t StatusReg;
  unsigned int v45;
  size_t v47;
  void *v48;
  int v49;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _BOOL4 v60;
  _BOOL4 v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v67;
  int v68;
  int v70;
  int v72;
  int v74;
  BOOL v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  size_t v85;
  void *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int128 *v120;
  int8x16_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  const os_unfair_lock *v129;
  unint64_t v130;
  char v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unsigned int v138;
  unint64_t v139;
  uint64_t v140;
  int8x16_t *v141;
  unint64_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x8_t v150;
  int8x8_t *v151;
  uint64_t v152;
  int8x8_t v153;
  int8x8_t v154;
  char v155;
  BOOL v156;
  unsigned int *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unsigned int *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int128 *v169;
  int8x16_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unsigned int v181;
  unint64_t v182;
  uint64_t v183;
  int8x16_t *v184;
  unint64_t v185;
  int8x16_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x8_t v193;
  int8x8_t *v194;
  uint64_t v195;
  int8x8_t v196;
  int8x8_t v197;
  char v198;
  unsigned int *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unsigned int *v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned __int128 *v209;
  int8x16_t v210;
  unsigned int v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  const os_unfair_lock *v220;
  unint64_t v221;
  char v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unsigned int v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  int8x16_t *v234;
  unint64_t v235;
  int8x16_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int8x8_t v243;
  unint64_t v244;
  uint64_t v245;
  int8x8_t *v246;
  uint64_t v247;
  int8x8_t v248;
  int8x8_t v249;
  char v250;
  unsigned int *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unsigned int *v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int128 *v261;
  int8x16_t v262;
  unsigned int v263;
  int v264;
  unsigned int v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unsigned int v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  int8x16_t *v280;
  unint64_t v281;
  int8x16_t v282;
  int8x16_t v283;
  int8x16_t v284;
  int8x16_t v285;
  int8x16_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int8x8_t v289;
  unint64_t v290;
  uint64_t v291;
  int8x8_t *v292;
  uint64_t v293;
  int8x8_t v294;
  int8x8_t v295;
  char v296;
  unsigned int *v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  unsigned int *v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  os_unfair_lock_s *v306;
  int v307;
  unsigned int v308;
  os_unfair_lock_s *v309;
  int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v314;
  os_unfair_lock_s *v316;
  unsigned int v317;
  int v319;
  unsigned int v320;
  os_unfair_lock_s *v321;
  unsigned int v322;
  int v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v331;
  uint64_t v332;
  int v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char v339;
  char v340;
  os_unfair_lock_t v341;

  v8 = a2 & 7;
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(a3 + 8));
  v9 = *(unsigned __int8 *)(a1 + 5);
  v338 = a1;
  if (v8 == 4)
  {
    v10 = v9 > 0xB;
    v11 = (1 << v9) & 0xAA8;
    v12 = v10 || v11 == 0;
    if (v12)
      goto LABEL_147;
    v13 = *(_DWORD *)(a1 + 56);
    v14 = *(_DWORD *)(a1 + 60);
    v15 = v13 != 0;
    v16 = *(_DWORD *)(a1 + 64);
    v17 = *(_DWORD *)(a1 + 68);
    if (v14)
      v15 = 2;
    if (v16)
      v15 = 3;
    v19 = *(_DWORD *)(a1 + 72);
    v18 = *(_DWORD *)(a1 + 76);
    if (v17)
      v15 = 4;
    if (v19)
      v15 = 5;
    v20 = *(_DWORD *)(a1 + 80);
    v21 = *(_DWORD *)(a1 + 84);
    if (v18)
      v15 = 6;
    v22 = v21 == 0;
    v12 = v20 == 0;
    v23 = v20 == 0;
    if (!v12)
    {
      v15 = 7;
      v22 = 1;
    }
    if (v21)
      v15 = 8;
    v24 = v13 == 0;
    v25 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
    if (v13)
      v26 = 0;
    else
      v26 = -1;
    v27 = v14 | v13;
    if (!v24 || v14 == 0)
      v29 = v26;
    else
      v29 = 1;
    v12 = v27 == 0;
    v30 = v16 | v27;
    if (v12 && v16 != 0)
      v29 = 2;
    v12 = v30 == 0;
    v32 = v17 | v30;
    if (v12 && v17 != 0)
      v29 = 3;
    v12 = v32 == 0;
    v34 = v19 | v32;
    if (v12 && v19 != 0)
      v29 = 4;
    v12 = v34 == 0;
    v36 = v18 | v34;
    if (v12 && v18 != 0)
      v29 = 5;
    v38 = v36 == 0;
    if (v36)
      v39 = 1;
    else
      v39 = v23;
    v40 = !v38 || v22;
    if (v39)
      v41 = v29;
    else
      v41 = 6;
    if (v40)
      v42 = v41;
    else
      v42 = 7;
    v43 = v15 - v42;
    *(_BYTE *)(v25 + 17) = v15 - v42;
    *(_BYTE *)(v25 + 18) = v42;
    if (!a5)
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v45 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v45, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_65;
      }
      __clrex();
      v306 = *(os_unfair_lock_s **)(a3 + 8);
      v307 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v308 = __ldxr(&v306->_os_unfair_lock_opaque);
        if (v308 != v307)
          break;
        if (!__stlxr(0, &v306->_os_unfair_lock_opaque))
          goto LABEL_432;
      }
      __clrex();
      os_unfair_lock_unlock(v306);
LABEL_432:
      v312 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v312, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_443;
      }
      __clrex();
      os_unfair_lock_lock(&pas_heap_lock);
LABEL_443:
      v316 = *(os_unfair_lock_s **)(a3 + 8);
      v341 = v316;
      v317 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&v316->_os_unfair_lock_opaque))
      {
        if (!__stxr(v317, &v316->_os_unfair_lock_opaque))
        {
          if (*(os_unfair_lock_s **)(a3 + 8) == v316)
            goto LABEL_65;
LABEL_449:
          v319 = *(_DWORD *)(StatusReg + 24);
          while (1)
          {
            v320 = __ldxr(&v316->_os_unfair_lock_opaque);
            if (v320 != v319)
              break;
            if (!__stlxr(0, &v316->_os_unfair_lock_opaque))
              goto LABEL_443;
          }
          __clrex();
          os_unfair_lock_unlock(v316);
          goto LABEL_443;
        }
      }
      __clrex();
      if (!pas_segregated_page_lock_with_unbias_impl(a3, &v341, v316))
        goto LABEL_449;
    }
LABEL_65:
    if (v43 == 1)
    {
      v47 = 4;
      v48 = (void *)v25;
    }
    else
    {
      v47 = 4 * v43;
      v48 = (void *)pas_immortal_heap_allocate_with_manual_alignment(4 * v43, 8, (uint64_t)"pas_segregated_partial_view/alloc_bits", 0);
    }
    v87 = (unint64_t)v48 - 4 * v42;
    memcpy(v48, (const void *)(a1 + 56 + 4 * v42), v47);
    __dmb(0xAu);
    v88 = *(unsigned int *)(v25 + 12);
    v89 = pas_compact_heap_reservation_base;
    if (v88 >= 8)
      v90 = pas_compact_heap_reservation_base;
    else
      v90 = 0;
    v91 = v90 + v88;
    if ((v91 & 1) != 0)
    {
      pas_utility_heap_deallocate(v91 & 0xFFFFFFFFFFFFFFFELL);
      v89 = pas_compact_heap_reservation_base;
    }
    if (v87 >= 8 && v87 - v89 >= pas_compact_heap_reservation_size)
    {
      v92 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
      *(_QWORD *)v92 = v87;
      v87 = v92 | 1;
      LODWORD(v89) = pas_compact_heap_reservation_base;
    }
    if (v87 < 8)
      LODWORD(v89) = 0;
    *(_DWORD *)(v25 + 12) = v87 - v89;
    if (a5)
    {
LABEL_147:
      v95 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v95)
      {
LABEL_149:
        if (*(_DWORD *)(v338 + 32) == *(_DWORD *)(v338 + 36))
          return;
        if ((a2 & 6) != 0)
        {
          v98 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFF8) + 12);
          v99 = pas_compact_heap_reservation_base;
          if (v98 < 8)
            v99 = 0;
          v331 = v99 + v98;
          if ((((_DWORD)v99 + (_DWORD)v98) & 1) != 0)
            v331 = *(_QWORD *)(v331 & 0xFFFFFFFFFFFFFFFELL);
          v100 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18) | ((unint64_t)(*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 17)
                                                                                            + *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18)) << 32);
          v101 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18);
          v328 = HIDWORD(v100);
          if (v100 >= HIDWORD(v100))
            return;
        }
        else
        {
          v331 = pas_compact_heap_reservation_base
               + *(unsigned int *)(pas_compact_heap_reservation_base + 8 * *(unsigned int *)(a4 + 40) + 9);
          LOBYTE(v100) = 0;
          v101 = 0;
          v328 = 8;
        }
        v326 = v338 + 56;
        v208 = a3 + 76;
        v209 = (unsigned __int128 *)(a3 + 16);
        v339 = 32 * v100;
        v210.i64[0] = -1;
        v210.i64[1] = -1;
        while (1)
        {
          v336 = v101;
          v211 = *(_DWORD *)(v326 + 4 * v101) & *(_DWORD *)(v331 + 4 * v101);
          if (v211)
            break;
LABEL_298:
          v101 = v336 + 1;
          v339 += 32;
          if (v336 + 1 == v328)
            return;
        }
        v212 = 32 * v101;
        while (1)
        {
          v213 = __clz(__rbit32(v211));
          v214 = a3 + 4 * ((v213 | v212) >> 5);
          v215 = *(_DWORD *)(v214 + 44) & ~(1 << (v213 | v212));
          *(_DWORD *)(v214 + 44) = v215;
          v216 = *(_QWORD *)(a3 + 32);
          v217 = *(unsigned int *)((v216 & 0xFFFFFFFFFFFFFFF8) + 4 * ((v213 | v212) >> 3) + 20);
          if ((_DWORD)v217)
            v218 = pas_compact_heap_reservation_base + 8 * v217;
          else
            v218 = 0;
          v219 = *(_BYTE *)(v218 + 19);
          if ((v219 & 4) == 0)
          {
            v220 = *(const os_unfair_lock **)(a3 + 8);
            if (v220)
            {
              os_unfair_lock_assert_owner(v220);
              v219 = *(_BYTE *)(v218 + 19);
            }
            if ((v219 & 1) != 0)
            {
              v222 = v219 | 2;
            }
            else
            {
              if ((v218 & 3) != 0)
                v221 = 0;
              else
                v221 = *(unsigned __int8 *)((v218 & 0xFFFFFFFFFFFFFFF8) + 16);
              pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v218 + 7)) | ((unint64_t)*(unsigned __int8 *)(v218 + 9) << 19))+ pas_compact_heap_reservation_base, v221);
              v222 = *(_BYTE *)(v218 + 19);
            }
            v210.i64[0] = -1;
            v210.i64[1] = -1;
            *(_BYTE *)(v218 + 19) = v222 | 4;
            v216 = *(_QWORD *)(a3 + 32);
          }
          v223 = ((v213 | v212) << 9) & 0x1FE00;
          if ((v216 & 6) != 0)
          {
            v224 = *(unsigned int *)((v216 & 0xFFFFFFFFFFFFFFF8) + ((v223 >> 10) & 0x7C) + 20);
            if ((_DWORD)v224)
              v225 = pas_compact_heap_reservation_base + 8 * v224;
            else
              v225 = 0;
            v226 = *(_DWORD *)(((8 * *(unsigned __int16 *)(v225 + 7)) | ((unint64_t)*(unsigned __int8 *)(v225 + 9) << 19))
                             + pas_compact_heap_reservation_base
                             + 24) & 0x7FFFFFF;
            if ((*(_DWORD *)(((8 * *(unsigned __int16 *)(v225 + 7)) | ((unint64_t)*(unsigned __int8 *)(v225 + 9) << 19))
                            + pas_compact_heap_reservation_base
                            + 24) & 0x7FFFFFF) == 0)
            {
LABEL_324:
              LOBYTE(v229) = 0;
              goto LABEL_342;
            }
          }
          else
          {
            v226 = *(unsigned int *)(a3 + 4);
            if (!*(_DWORD *)(a3 + 4))
              goto LABEL_324;
          }
          v227 = v223 >> 14;
          v228 = (v223 + v226 - 1) >> 14;
          if (v227 > v228)
            goto LABEL_324;
          v230 = v228 - v227 + 1;
          if (v230 >= 8)
          {
            if (v230 < 0x20)
            {
              v229 = 0;
              v231 = 0;
LABEL_333:
              v227 |= v230 & 0xFFFFFFFFFFFFFFF8;
              v243 = vdup_n_s8(v229);
              v244 = (v339 + v213);
              v245 = (v244 >> 5) & 0x3FFFFFFFFFFFFLL;
              v246 = (int8x8_t *)(v208 + v231 + v245);
              v247 = v231 - ((((v226 + (v244 << 9) - 1) >> 14) - v245 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v248 = vadd_s8(*v246, (int8x8_t)-1);
                *v246++ = v248;
                v249 = vceqz_s8(v248);
                v243 = vsub_s8(vbic_s8(v243, v249), v249);
                v247 += 8;
              }
              while (v247);
              LOBYTE(v229) = *(_QWORD *)&v243 != 0;
              if (v230 == (v230 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_342;
              goto LABEL_338;
            }
            v231 = v230 & 0xFFFFFFFFFFFFFFE0;
            v232 = (v339 + v213);
            v233 = (v232 >> 5) & 0x3FFFFFFFFFFFFLL;
            v234 = (int8x16_t *)(a3 + 92 + v233);
            v235 = (((v226 + (v232 << 9) - 1) >> 14) - v233 + 1) & 0xFFFFFFFFFFFFFFE0;
            v236 = 0uLL;
            v237 = 0uLL;
            do
            {
              v238 = vaddq_s8(v234[-1], v210);
              v239 = vaddq_s8(*v234, v210);
              v234[-1] = v238;
              *v234 = v239;
              v240 = vceqzq_s8(v238);
              v241 = vceqzq_s8(v239);
              v236 = vsubq_s8(vbicq_s8(v236, v240), v240);
              v237 = vsubq_s8(vbicq_s8(v237, v241), v241);
              v234 += 2;
              v235 -= 32;
            }
            while (v235);
            v242 = vorrq_s8(v236, v237);
            v229 = vmaxvq_u8((uint8x16_t)vtstq_s8(v242, v242)) & 1;
            if (v230 == v231)
              goto LABEL_342;
            if ((v230 & 0x18) != 0)
              goto LABEL_333;
            v227 |= v231;
          }
          else
          {
            LOBYTE(v229) = 0;
          }
          do
          {
LABEL_338:
            v250 = *(_BYTE *)(v208 + v227) - 1;
            *(_BYTE *)(v208 + v227) = v250;
            if (!v250)
              LOBYTE(v229) = 1;
            v156 = v227++ >= v228;
          }
          while (!v156);
LABEL_342:
          if (pas_segregated_page_deallocate_should_verify_granules)
            pas_segregated_page_verify_granules((unsigned __int8 *)a3);
          if ((_BYTE)v229)
          {
            v251 = (unsigned int *)timebase_info_ptr;
            if (timebase_info_ptr)
            {
              v252 = mach_approximate_time();
              v253 = *v251;
              v254 = v251[1];
              if ((pas_get_epoch_first & 1) == 0)
                goto LABEL_347;
            }
            else
            {
              get_timebase_info_slow();
              v252 = mach_approximate_time();
              v253 = timebase_info;
              v254 = *(unsigned int *)algn_1ECF57B54;
              if ((pas_get_epoch_first & 1) == 0)
LABEL_347:
                pas_get_epoch_first = 1;
            }
            *(_QWORD *)(a3 + 16) = v252 * v253 / v254;
            pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
          }
          v210.i64[0] = -1;
          v210.i64[1] = -1;
          if (!v215)
          {
            if (*(_QWORD *)(a3 + 24) == 1)
            {
              v255 = (unsigned int *)timebase_info_ptr;
              if (timebase_info_ptr)
              {
                v256 = mach_approximate_time();
                v257 = *v255;
                v258 = v255[1];
                if ((pas_get_epoch_first & 1) == 0)
                  goto LABEL_353;
              }
              else
              {
                get_timebase_info_slow();
                v256 = mach_approximate_time();
                v257 = timebase_info;
                v258 = *(unsigned int *)algn_1ECF57B54;
                if ((pas_get_epoch_first & 1) == 0)
LABEL_353:
                  pas_get_epoch_first = 1;
              }
              v259 = v256 * v257 / v258;
              do
                __ldxp(v209);
              while (__stxp(v259, v209));
              pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
              v210.i64[0] = -1;
              v210.i64[1] = -1;
              goto LABEL_302;
            }
            --*(_QWORD *)(a3 + 24);
          }
LABEL_302:
          v211 &= ~(1 << v213);
          if (!v211)
            goto LABEL_298;
        }
      }
    }
    else
    {
      v93 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (1)
      {
        v94 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v94 != v93)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_147;
      }
      __clrex();
      os_unfair_lock_unlock(&pas_heap_lock);
      v95 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v95)
        goto LABEL_149;
    }
    v96 = *(_QWORD *)(a1 + 8);
    v97 = v96 - v95;
    if (v96 < v95)
      goto LABEL_149;
    v117 = 0;
    v118 = a3 + 76;
    v119 = *(unsigned int *)(a1 + 20);
    v120 = (unsigned __int128 *)(a3 + 16);
    v334 = v96 - v95;
    v121.i64[0] = -1;
    v121.i64[1] = -1;
    while (1)
    {
      v122 = (v97 >> 14) & 7;
      v123 = a3 + 4 * v122;
      v124 = *(_DWORD *)(v123 + 44) & ~(1 << (v97 >> 9));
      *(_DWORD *)(v123 + 44) = v124;
      v125 = *(_QWORD *)(a3 + 32);
      v126 = *(unsigned int *)((v125 & 0xFFFFFFFFFFFFFFF8) + 4 * ((v97 >> 12) & 0x1F) + 20);
      if ((_DWORD)v126)
        v127 = pas_compact_heap_reservation_base + 8 * v126;
      else
        v127 = 0;
      v128 = *(_BYTE *)(v127 + 19);
      if ((v128 & 4) == 0)
      {
        v129 = *(const os_unfair_lock **)(a3 + 8);
        if (v129)
        {
          os_unfair_lock_assert_owner(v129);
          v128 = *(_BYTE *)(v127 + 19);
        }
        if ((v128 & 1) != 0)
        {
          v131 = v128 | 2;
        }
        else
        {
          if ((v127 & 3) != 0)
            v130 = 0;
          else
            v130 = *(unsigned __int8 *)((v127 & 0xFFFFFFFFFFFFFFF8) + 16);
          pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v127 + 7)) | ((unint64_t)*(unsigned __int8 *)(v127 + 9) << 19))+ pas_compact_heap_reservation_base, v130);
          v131 = *(_BYTE *)(v127 + 19);
        }
        v121.i64[0] = -1;
        v121.i64[1] = -1;
        *(_BYTE *)(v127 + 19) = v131 | 4;
        v125 = *(_QWORD *)(a3 + 32);
      }
      v132 = v97 & 0x1FFFF;
      if ((v125 & 6) != 0)
      {
        v133 = *(unsigned int *)((v125 & 0xFFFFFFFFFFFFFFF8) + ((v132 >> 10) & 0x7C) + 20);
        if ((_DWORD)v133)
          v134 = pas_compact_heap_reservation_base + 8 * v133;
        else
          v134 = 0;
        v135 = *(_DWORD *)(((8 * *(unsigned __int16 *)(v134 + 7)) | ((unint64_t)*(unsigned __int8 *)(v134 + 9) << 19))
                         + pas_compact_heap_reservation_base
                         + 24) & 0x7FFFFFF;
        if ((*(_DWORD *)(((8 * *(unsigned __int16 *)(v134 + 7)) | ((unint64_t)*(unsigned __int8 *)(v134 + 9) << 19))
                        + pas_compact_heap_reservation_base
                        + 24) & 0x7FFFFFF) == 0)
        {
LABEL_206:
          LOBYTE(v138) = 0;
          goto LABEL_224;
        }
      }
      else
      {
        v135 = *(unsigned int *)(a3 + 4);
        if (!*(_DWORD *)(a3 + 4))
          goto LABEL_206;
      }
      v136 = v132 >> 14;
      v137 = (v132 + v135 - 1) >> 14;
      if (v132 >> 14 > v137)
        goto LABEL_206;
      v139 = v137 - (((unint64_t)(v334 + v117 * v119) >> 14) & 7) + 1;
      if (v139 >= 8)
      {
        if (v139 < 0x20)
        {
          v138 = 0;
          v140 = 0;
LABEL_215:
          v136 |= v139 & 0xFFFFFFFFFFFFFFF8;
          v150 = vdup_n_s8(v138);
          v151 = (int8x8_t *)(v118 + v140 + v122);
          v152 = v140 - ((((v135 + v132 - 1) >> 14) - v122 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v153 = vadd_s8(*v151, (int8x8_t)-1);
            *v151++ = v153;
            v154 = vceqz_s8(v153);
            v150 = vsub_s8(vbic_s8(v150, v154), v154);
            v152 += 8;
          }
          while (v152);
          LOBYTE(v138) = *(_QWORD *)&v150 != 0;
          if (v139 == (v139 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_224;
          goto LABEL_220;
        }
        v141 = (int8x16_t *)(a3 + 92 + v122);
        v140 = v139 & 0xFFFFFFFFFFFFFFE0;
        v142 = (((v135 + v132 - 1) >> 14) - v122 + 1) & 0xFFFFFFFFFFFFFFE0;
        v143 = 0uLL;
        v144 = 0uLL;
        do
        {
          v145 = vaddq_s8(v141[-1], v121);
          v146 = vaddq_s8(*v141, v121);
          v141[-1] = v145;
          *v141 = v146;
          v147 = vceqzq_s8(v145);
          v148 = vceqzq_s8(v146);
          v143 = vsubq_s8(vbicq_s8(v143, v147), v147);
          v144 = vsubq_s8(vbicq_s8(v144, v148), v148);
          v141 += 2;
          v142 -= 32;
        }
        while (v142);
        v149 = vorrq_s8(v143, v144);
        v138 = vmaxvq_u8((uint8x16_t)vtstq_s8(v149, v149)) & 1;
        if (v139 == v140)
          goto LABEL_224;
        if ((v139 & 0x18) != 0)
          goto LABEL_215;
        v136 |= v140;
      }
      else
      {
        LOBYTE(v138) = 0;
      }
      do
      {
LABEL_220:
        v155 = *(_BYTE *)(v118 + v136) - 1;
        *(_BYTE *)(v118 + v136) = v155;
        if (!v155)
          LOBYTE(v138) = 1;
        v156 = v136++ >= v137;
      }
      while (!v156);
LABEL_224:
      if (pas_segregated_page_deallocate_should_verify_granules)
      {
        pas_segregated_page_verify_granules((unsigned __int8 *)a3);
        v121.i64[0] = -1;
        v121.i64[1] = -1;
      }
      if ((_BYTE)v138)
      {
        v157 = (unsigned int *)timebase_info_ptr;
        if (timebase_info_ptr)
        {
          v158 = mach_approximate_time();
          v159 = *v157;
          v160 = v157[1];
          if ((pas_get_epoch_first & 1) == 0)
            goto LABEL_229;
        }
        else
        {
          get_timebase_info_slow();
          v158 = mach_approximate_time();
          v159 = timebase_info;
          v160 = *(unsigned int *)algn_1ECF57B54;
          if ((pas_get_epoch_first & 1) == 0)
LABEL_229:
            pas_get_epoch_first = 1;
        }
        *(_QWORD *)(a3 + 16) = v158 * v159 / v160;
        pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
        v121.i64[0] = -1;
        v121.i64[1] = -1;
      }
      if (!v124)
      {
        if (*(_QWORD *)(a3 + 24) == 1)
        {
          v161 = (unsigned int *)timebase_info_ptr;
          if (timebase_info_ptr)
          {
            v162 = mach_approximate_time();
            v163 = *v161;
            v164 = v161[1];
            if ((pas_get_epoch_first & 1) == 0)
              goto LABEL_235;
          }
          else
          {
            get_timebase_info_slow();
            v162 = mach_approximate_time();
            v163 = timebase_info;
            v164 = *(unsigned int *)algn_1ECF57B54;
            if ((pas_get_epoch_first & 1) == 0)
LABEL_235:
              pas_get_epoch_first = 1;
          }
          v165 = v162 * v163 / v164;
          do
            __ldxp(v120);
          while (__stxp(v165, v120));
          pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
          v121.i64[0] = -1;
          v121.i64[1] = -1;
          goto LABEL_184;
        }
        --*(_QWORD *)(a3 + 24);
      }
LABEL_184:
      v97 += v119;
      ++v117;
      if (v97 >= v96)
        goto LABEL_149;
    }
  }
  v10 = v9 > 0xB;
  v49 = (1 << v9) & 0xAA8;
  if (v10 || v49 == 0)
    goto LABEL_172;
  v51 = *(_DWORD *)(a1 + 56);
  v52 = *(_DWORD *)(a1 + 60);
  v53 = v51 != 0;
  v54 = *(_DWORD *)(a1 + 64);
  v55 = *(_DWORD *)(a1 + 68);
  if (v52)
    v53 = 2;
  if (v54)
    v53 = 3;
  v57 = *(_DWORD *)(a1 + 72);
  v56 = *(_DWORD *)(a1 + 76);
  if (v55)
    v53 = 4;
  if (v57)
    v53 = 5;
  v58 = *(_DWORD *)(a1 + 80);
  v59 = *(_DWORD *)(a1 + 84);
  if (v56)
    v53 = 6;
  v60 = v59 == 0;
  v12 = v58 == 0;
  v61 = v58 == 0;
  if (!v12)
  {
    v53 = 7;
    v60 = 1;
  }
  if (v59)
    v53 = 8;
  v62 = v51 == 0;
  v63 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (v51)
    v64 = 0;
  else
    v64 = -1;
  v65 = v52 | v51;
  if (!v62 || v52 == 0)
    v67 = v64;
  else
    v67 = 1;
  v12 = v65 == 0;
  v68 = v54 | v65;
  if (v12 && v54 != 0)
    v67 = 2;
  v12 = v68 == 0;
  v70 = v55 | v68;
  if (v12 && v55 != 0)
    v67 = 3;
  v12 = v70 == 0;
  v72 = v57 | v70;
  if (v12 && v57 != 0)
    v67 = 4;
  v12 = v72 == 0;
  v74 = v56 | v72;
  if (v12 && v56 != 0)
    v67 = 5;
  v76 = v74 == 0;
  if (v74)
    v77 = 1;
  else
    v77 = v61;
  v78 = !v76 || v60;
  if (v77)
    v79 = v67;
  else
    v79 = 6;
  if (v78)
    v80 = v79;
  else
    v80 = 7;
  v81 = v53 - v80;
  *(_BYTE *)(v63 + 17) = v53 - v80;
  *(_BYTE *)(v63 + 18) = v80;
  if (!a5)
  {
    v82 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v83 = *(_DWORD *)(v82 + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v83, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_130;
    }
    __clrex();
    v309 = *(os_unfair_lock_s **)(a3 + 8);
    v310 = *(_DWORD *)(v82 + 24);
    while (1)
    {
      v311 = __ldxr(&v309->_os_unfair_lock_opaque);
      if (v311 != v310)
        break;
      if (!__stlxr(0, &v309->_os_unfair_lock_opaque))
        goto LABEL_437;
    }
    __clrex();
    os_unfair_lock_unlock(v309);
LABEL_437:
    v314 = *(_DWORD *)(v82 + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v314, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_455;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_455:
    v321 = *(os_unfair_lock_s **)(a3 + 8);
    v341 = v321;
    v322 = *(_DWORD *)(v82 + 24);
    while (!__ldaxr(&v321->_os_unfair_lock_opaque))
    {
      if (!__stxr(v322, &v321->_os_unfair_lock_opaque))
      {
        if (*(os_unfair_lock_s **)(a3 + 8) == v321)
          goto LABEL_130;
LABEL_461:
        v324 = *(_DWORD *)(v82 + 24);
        while (1)
        {
          v325 = __ldxr(&v321->_os_unfair_lock_opaque);
          if (v325 != v324)
            break;
          if (!__stlxr(0, &v321->_os_unfair_lock_opaque))
            goto LABEL_455;
        }
        __clrex();
        os_unfair_lock_unlock(v321);
        goto LABEL_455;
      }
    }
    __clrex();
    if (!pas_segregated_page_lock_with_unbias_impl(a3, &v341, v321))
      goto LABEL_461;
  }
LABEL_130:
  if (v81 == 1)
  {
    v85 = 4;
    v86 = (void *)v63;
  }
  else
  {
    v85 = 4 * v81;
    v86 = (void *)pas_immortal_heap_allocate_with_manual_alignment(4 * v81, 8, (uint64_t)"pas_segregated_partial_view/alloc_bits", 0);
  }
  v102 = (unint64_t)v86 - 4 * v80;
  memcpy(v86, (const void *)(a1 + 56 + 4 * v80), v85);
  __dmb(0xAu);
  v103 = *(unsigned int *)(v63 + 12);
  v104 = pas_compact_heap_reservation_base;
  if (v103 >= 8)
    v105 = pas_compact_heap_reservation_base;
  else
    v105 = 0;
  v106 = v105 + v103;
  if ((v106 & 1) != 0)
  {
    pas_utility_heap_deallocate(v106 & 0xFFFFFFFFFFFFFFFELL);
    v104 = pas_compact_heap_reservation_base;
  }
  if (v102 >= 8 && v102 - v104 >= pas_compact_heap_reservation_size)
  {
    v107 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
    *(_QWORD *)v107 = v102;
    v102 = v107 | 1;
    LODWORD(v104) = pas_compact_heap_reservation_base;
  }
  if (v102 < 8)
    LODWORD(v104) = 0;
  *(_DWORD *)(v63 + 12) = v102 - v104;
  if (a5)
  {
LABEL_172:
    v110 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v110)
      goto LABEL_174;
    goto LABEL_173;
  }
  v108 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v109 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v109 != v108)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_172;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  v110 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v110)
  {
LABEL_173:
    v111 = *(_QWORD *)(a1 + 8);
    v112 = v111 - v110;
    if (v111 < v110)
      goto LABEL_174;
    v166 = 0;
    v167 = a3 + 76;
    v168 = *(unsigned int *)(a1 + 20);
    v169 = (unsigned __int128 *)(a3 + 16);
    v335 = v111 - v110;
    v170.i64[0] = -1;
    v170.i64[1] = -1;
    do
    {
      v171 = (v112 >> 14) & 7;
      v172 = a3 + 4 * v171;
      v173 = *(_DWORD *)(v172 + 44) & ~(1 << (v112 >> 9));
      *(_DWORD *)(v172 + 44) = v173;
      v174 = *(_QWORD *)(a3 + 32);
      if ((v174 & 7) != 0)
      {
        v174 &= 0xFFFFFFFFFFFFFFF8;
        if (*(_BYTE *)(a3 + 1))
        {
          *(_BYTE *)(a3 + 2) = 1;
        }
        else
        {
          pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v174 + 8)) | ((unint64_t)*(unsigned __int8 *)(v174 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v174 + 12));
          v170.i64[0] = -1;
          v170.i64[1] = -1;
        }
        *(_QWORD *)(a3 + 32) = v174;
      }
      v175 = v112 & 0x1FFFF;
      if ((v174 & 6) != 0)
      {
        v176 = *(unsigned int *)((v174 & 0xFFFFFFFFFFFFFFF8) + ((v175 >> 10) & 0x7C) + 20);
        if ((_DWORD)v176)
          v177 = pas_compact_heap_reservation_base + 8 * v176;
        else
          v177 = 0;
        v178 = *(_DWORD *)(((8 * *(unsigned __int16 *)(v177 + 7)) | ((unint64_t)*(unsigned __int8 *)(v177 + 9) << 19))
                         + pas_compact_heap_reservation_base
                         + 24) & 0x7FFFFFF;
        if ((*(_DWORD *)(((8 * *(unsigned __int16 *)(v177 + 7)) | ((unint64_t)*(unsigned __int8 *)(v177 + 9) << 19))
                        + pas_compact_heap_reservation_base
                        + 24) & 0x7FFFFFF) == 0)
        {
LABEL_259:
          LOBYTE(v181) = 0;
          goto LABEL_277;
        }
      }
      else
      {
        v178 = *(unsigned int *)(a3 + 4);
        if (!*(_DWORD *)(a3 + 4))
          goto LABEL_259;
      }
      v179 = v175 >> 14;
      v180 = (v175 + v178 - 1) >> 14;
      if (v175 >> 14 > v180)
        goto LABEL_259;
      v182 = v180 - (((unint64_t)(v335 + v166 * v168) >> 14) & 7) + 1;
      if (v182 >= 8)
      {
        if (v182 < 0x20)
        {
          v181 = 0;
          v183 = 0;
LABEL_268:
          v179 |= v182 & 0xFFFFFFFFFFFFFFF8;
          v193 = vdup_n_s8(v181);
          v194 = (int8x8_t *)(v167 + v183 + v171);
          v195 = v183 - ((((v178 + v175 - 1) >> 14) - v171 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v196 = vadd_s8(*v194, (int8x8_t)-1);
            *v194++ = v196;
            v197 = vceqz_s8(v196);
            v193 = vsub_s8(vbic_s8(v193, v197), v197);
            v195 += 8;
          }
          while (v195);
          LOBYTE(v181) = *(_QWORD *)&v193 != 0;
          if (v182 == (v182 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_277;
          goto LABEL_273;
        }
        v184 = (int8x16_t *)(a3 + 92 + v171);
        v183 = v182 & 0xFFFFFFFFFFFFFFE0;
        v185 = (((v178 + v175 - 1) >> 14) - v171 + 1) & 0xFFFFFFFFFFFFFFE0;
        v186 = 0uLL;
        v187 = 0uLL;
        do
        {
          v188 = vaddq_s8(v184[-1], v170);
          v189 = vaddq_s8(*v184, v170);
          v184[-1] = v188;
          *v184 = v189;
          v190 = vceqzq_s8(v188);
          v191 = vceqzq_s8(v189);
          v186 = vsubq_s8(vbicq_s8(v186, v190), v190);
          v187 = vsubq_s8(vbicq_s8(v187, v191), v191);
          v184 += 2;
          v185 -= 32;
        }
        while (v185);
        v192 = vorrq_s8(v186, v187);
        v181 = vmaxvq_u8((uint8x16_t)vtstq_s8(v192, v192)) & 1;
        if (v182 == v183)
          goto LABEL_277;
        if ((v182 & 0x18) != 0)
          goto LABEL_268;
        v179 |= v183;
      }
      else
      {
        LOBYTE(v181) = 0;
      }
      do
      {
LABEL_273:
        v198 = *(_BYTE *)(v167 + v179) - 1;
        *(_BYTE *)(v167 + v179) = v198;
        if (!v198)
          LOBYTE(v181) = 1;
        v156 = v179++ >= v180;
      }
      while (!v156);
LABEL_277:
      if (pas_segregated_page_deallocate_should_verify_granules)
      {
        pas_segregated_page_verify_granules((unsigned __int8 *)a3);
        v170.i64[0] = -1;
        v170.i64[1] = -1;
      }
      if ((_BYTE)v181)
      {
        v199 = (unsigned int *)timebase_info_ptr;
        if (timebase_info_ptr)
        {
          v200 = mach_approximate_time();
          v201 = *v199;
          v202 = v199[1];
          if ((pas_get_epoch_first & 1) == 0)
            goto LABEL_282;
        }
        else
        {
          get_timebase_info_slow();
          v200 = mach_approximate_time();
          v201 = timebase_info;
          v202 = *(unsigned int *)algn_1ECF57B54;
          if ((pas_get_epoch_first & 1) == 0)
LABEL_282:
            pas_get_epoch_first = 1;
        }
        *(_QWORD *)(a3 + 16) = v200 * v201 / v202;
        pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
        v170.i64[0] = -1;
        v170.i64[1] = -1;
      }
      if (!v173)
      {
        if (*(_QWORD *)(a3 + 24) == 1)
        {
          v203 = (unsigned int *)timebase_info_ptr;
          if (timebase_info_ptr)
          {
            v204 = mach_approximate_time();
            v205 = *v203;
            v206 = v203[1];
            if ((pas_get_epoch_first & 1) == 0)
              goto LABEL_288;
          }
          else
          {
            get_timebase_info_slow();
            v204 = mach_approximate_time();
            v205 = timebase_info;
            v206 = *(unsigned int *)algn_1ECF57B54;
            if ((pas_get_epoch_first & 1) == 0)
LABEL_288:
              pas_get_epoch_first = 1;
          }
          v207 = v204 * v205 / v206;
          do
            __ldxp(v169);
          while (__stxp(v207, v169));
          pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
          v170.i64[0] = -1;
          v170.i64[1] = -1;
          goto LABEL_245;
        }
        --*(_QWORD *)(a3 + 24);
      }
LABEL_245:
      v112 += v168;
      ++v166;
    }
    while (v112 < v111);
  }
LABEL_174:
  if (*(_DWORD *)(v338 + 32) == *(_DWORD *)(v338 + 36))
    return;
  if ((a2 & 6) == 0)
  {
    v332 = pas_compact_heap_reservation_base
         + *(unsigned int *)(pas_compact_heap_reservation_base + 8 * *(unsigned int *)(a4 + 40) + 9);
    LOBYTE(v115) = 0;
    v116 = 0;
    v329 = 8;
    goto LABEL_362;
  }
  v113 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFF8) + 12);
  v114 = pas_compact_heap_reservation_base;
  if (v113 < 8)
    v114 = 0;
  v332 = v114 + v113;
  if ((((_DWORD)v114 + (_DWORD)v113) & 1) != 0)
    v332 = *(_QWORD *)(v332 & 0xFFFFFFFFFFFFFFFELL);
  v115 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18) | ((unint64_t)(*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 17)
                                                                                    + *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18)) << 32);
  v116 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18);
  v329 = HIDWORD(v115);
  if (v115 < HIDWORD(v115))
  {
LABEL_362:
    v327 = v338 + 56;
    v260 = a3 + 76;
    v261 = (unsigned __int128 *)(a3 + 16);
    v340 = 32 * v115;
    v262.i64[0] = -1;
    v262.i64[1] = -1;
    while (1)
    {
      v337 = v116;
      v263 = *(_DWORD *)(v327 + 4 * v116) & *(_DWORD *)(v332 + 4 * v116);
      if (v263)
        break;
LABEL_363:
      v116 = v337 + 1;
      v340 += 32;
      if (v337 + 1 == v329)
        return;
    }
    v264 = 32 * v116;
    while (1)
    {
      v265 = __clz(__rbit32(v263));
      v266 = a3 + 4 * ((v265 | v264) >> 5);
      v267 = *(_DWORD *)(v266 + 44) & ~(1 << (v265 | v264));
      *(_DWORD *)(v266 + 44) = v267;
      v268 = *(_QWORD *)(a3 + 32);
      if ((v268 & 7) != 0)
      {
        v268 &= 0xFFFFFFFFFFFFFFF8;
        if (*(_BYTE *)(a3 + 1))
        {
          *(_BYTE *)(a3 + 2) = 1;
        }
        else
        {
          pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v268 + 8)) | ((unint64_t)*(unsigned __int8 *)(v268 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v268 + 12));
          v262.i64[0] = -1;
          v262.i64[1] = -1;
        }
        *(_QWORD *)(a3 + 32) = v268;
      }
      v269 = ((v265 | v264) << 9) & 0x1FE00;
      if ((v268 & 6) != 0)
      {
        v270 = *(unsigned int *)((v268 & 0xFFFFFFFFFFFFFFF8) + ((v269 >> 10) & 0x7C) + 20);
        if ((_DWORD)v270)
          v271 = pas_compact_heap_reservation_base + 8 * v270;
        else
          v271 = 0;
        v272 = *(_DWORD *)(((8 * *(unsigned __int16 *)(v271 + 7)) | ((unint64_t)*(unsigned __int8 *)(v271 + 9) << 19))
                         + pas_compact_heap_reservation_base
                         + 24) & 0x7FFFFFF;
        if ((*(_DWORD *)(((8 * *(unsigned __int16 *)(v271 + 7)) | ((unint64_t)*(unsigned __int8 *)(v271 + 9) << 19))
                        + pas_compact_heap_reservation_base
                        + 24) & 0x7FFFFFF) == 0)
        {
LABEL_381:
          LOBYTE(v275) = 0;
          goto LABEL_399;
        }
      }
      else
      {
        v272 = *(unsigned int *)(a3 + 4);
        if (!*(_DWORD *)(a3 + 4))
          goto LABEL_381;
      }
      v273 = v269 >> 14;
      v274 = (v269 + v272 - 1) >> 14;
      if (v273 > v274)
        goto LABEL_381;
      v276 = v274 - v273 + 1;
      if (v276 >= 8)
      {
        if (v276 < 0x20)
        {
          v275 = 0;
          v277 = 0;
LABEL_390:
          v273 |= v276 & 0xFFFFFFFFFFFFFFF8;
          v289 = vdup_n_s8(v275);
          v290 = (v340 + v265);
          v291 = (v290 >> 5) & 0x3FFFFFFFFFFFFLL;
          v292 = (int8x8_t *)(v260 + v277 + v291);
          v293 = v277 - ((((v272 + (v290 << 9) - 1) >> 14) - v291 + 1) & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v294 = vadd_s8(*v292, (int8x8_t)-1);
            *v292++ = v294;
            v295 = vceqz_s8(v294);
            v289 = vsub_s8(vbic_s8(v289, v295), v295);
            v293 += 8;
          }
          while (v293);
          LOBYTE(v275) = *(_QWORD *)&v289 != 0;
          if (v276 == (v276 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_399;
          goto LABEL_395;
        }
        v277 = v276 & 0xFFFFFFFFFFFFFFE0;
        v278 = (v340 + v265);
        v279 = (v278 >> 5) & 0x3FFFFFFFFFFFFLL;
        v280 = (int8x16_t *)(a3 + 92 + v279);
        v281 = (((v272 + (v278 << 9) - 1) >> 14) - v279 + 1) & 0xFFFFFFFFFFFFFFE0;
        v282 = 0uLL;
        v283 = 0uLL;
        do
        {
          v284 = vaddq_s8(v280[-1], v262);
          v285 = vaddq_s8(*v280, v262);
          v280[-1] = v284;
          *v280 = v285;
          v286 = vceqzq_s8(v284);
          v287 = vceqzq_s8(v285);
          v282 = vsubq_s8(vbicq_s8(v282, v286), v286);
          v283 = vsubq_s8(vbicq_s8(v283, v287), v287);
          v280 += 2;
          v281 -= 32;
        }
        while (v281);
        v288 = vorrq_s8(v282, v283);
        v275 = vmaxvq_u8((uint8x16_t)vtstq_s8(v288, v288)) & 1;
        if (v276 == v277)
          goto LABEL_399;
        if ((v276 & 0x18) != 0)
          goto LABEL_390;
        v273 |= v277;
      }
      else
      {
        LOBYTE(v275) = 0;
      }
      do
      {
LABEL_395:
        v296 = *(_BYTE *)(v260 + v273) - 1;
        *(_BYTE *)(v260 + v273) = v296;
        if (!v296)
          LOBYTE(v275) = 1;
        v156 = v273++ >= v274;
      }
      while (!v156);
LABEL_399:
      if (pas_segregated_page_deallocate_should_verify_granules)
        pas_segregated_page_verify_granules((unsigned __int8 *)a3);
      if ((_BYTE)v275)
      {
        v297 = (unsigned int *)timebase_info_ptr;
        if (timebase_info_ptr)
        {
          v298 = mach_approximate_time();
          v299 = *v297;
          v300 = v297[1];
          if ((pas_get_epoch_first & 1) == 0)
            goto LABEL_404;
        }
        else
        {
          get_timebase_info_slow();
          v298 = mach_approximate_time();
          v299 = timebase_info;
          v300 = *(unsigned int *)algn_1ECF57B54;
          if ((pas_get_epoch_first & 1) == 0)
LABEL_404:
            pas_get_epoch_first = 1;
        }
        *(_QWORD *)(a3 + 16) = v298 * v299 / v300;
        pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
      }
      v262.i64[0] = -1;
      v262.i64[1] = -1;
      if (!v267)
      {
        if (*(_QWORD *)(a3 + 24) == 1)
        {
          v301 = (unsigned int *)timebase_info_ptr;
          if (timebase_info_ptr)
          {
            v302 = mach_approximate_time();
            v303 = *v301;
            v304 = v301[1];
            if ((pas_get_epoch_first & 1) == 0)
              goto LABEL_410;
          }
          else
          {
            get_timebase_info_slow();
            v302 = mach_approximate_time();
            v303 = timebase_info;
            v304 = *(unsigned int *)algn_1ECF57B54;
            if ((pas_get_epoch_first & 1) == 0)
LABEL_410:
              pas_get_epoch_first = 1;
          }
          v305 = v302 * v303 / v304;
          do
            __ldxp(v261);
          while (__stxp(v305, v261));
          pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
          v262.i64[0] = -1;
          v262.i64[1] = -1;
          goto LABEL_367;
        }
        --*(_QWORD *)(a3 + 24);
      }
LABEL_367:
      v263 &= ~(1 << v265);
      if (!v263)
        goto LABEL_363;
    }
  }
}

uint64_t bmalloc_small_bitfit_page_header_for_boundary_remote(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t bmalloc_heap_config_allocate_small_bitfit_page(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(unint64_t, uint64_t);
  _QWORD *v13;
  uint64_t v14;
  int64x2_t v15;
  void (*v16)(uint64_t@<X0>, size_t@<X1>, uint64_t *@<X3>, uint64_t@<X8>);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 112);
  if ((**(_DWORD **)a1 & 0x20000) != 0)
    v3 = a1;
  else
    v3 = 0;
  v7[0] = &bmalloc_megapage_table;
  v7[1] = 2;
  v8 = xmmword_19919FBF0;
  v9 = 0x4000;
  v10 = 0;
  v11 = 0;
  v12 = table_set_by_index;
  v13 = v7;
  v14 = 0;
  v20[0] = v2;
  v20[1] = &v8;
  v20[2] = v3;
  v20[3] = a2;
  v15 = vdupq_n_s64(1uLL);
  v16 = megapage_cache_allocate_aligned;
  v17 = v20;
  v18 = 0;
  v19 = 0;
  v4 = pas_simple_large_free_heap_try_allocate(v2, 0x4000, 0x4000, 0, &v15);
  return (v5 << 63 >> 63) & v4;
}

uint64_t bmalloc_small_bitfit_page_config_specialized_allocator_try_allocate(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t StatusReg;
  os_unfair_lock_s *v11;
  unsigned int v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t first_free_view;
  uint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  __int16 v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  unint64_t v65;
  unint64_t v66;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;

  v5 = a1;
  if (a3)
    v6 = (a3 + 15) & 0xFFFFFFFFFFFFFFF0;
  else
    v6 = 16;
  v7 = a1[1];
  v8 = v6 >> 4;
  v69 = -(uint64_t)a4;
  v70 = a4 - 1;
  v71 = (v6 >> 4) + 63;
  if (v6 == 1024)
    v9 = -1;
  else
    v9 = ~(-1 << (v6 >> 4));
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  if (!v7)
    goto LABEL_54;
  while (1)
  {
    v11 = (os_unfair_lock_s *)(v7 + 16);
    v12 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v11->_os_unfair_lock_opaque))
    {
      if (!__stxr(v12, &v11->_os_unfair_lock_opaque))
        goto LABEL_13;
    }
    __clrex();
    v14 = v9;
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 16));
    v9 = v14;
LABEL_13:
    if (!*(_BYTE *)(v7 + 11))
    {
      v41 = v9;
      v42 = pas_bitfit_allocator_commit_view((os_unfair_lock_s *)v7, (uint64_t)&unk_1E35BE5F0, 0);
      v9 = v41;
      if ((v42 & 1) == 0)
        break;
    }
    v15 = 0;
    v16 = 0;
    v17 = *(_QWORD *)v7;
    v18 = *(_QWORD *)v7 + 16;
    do
    {
      v19 = *(_QWORD *)(v18 + 8 * v16);
      if (v19)
      {
        v20 = 0;
        v21 = *(_QWORD *)(v18 + 8 * v16);
        while (1)
        {
          v22 = __clz(__rbit64(v21));
          v23 = v22 + v20;
          v24 = __clz(__rbit64(~(v21 >> v22)));
          v25 = v8 - v24;
          if (v8 <= v24)
          {
            if (a4 < 0x11)
              goto LABEL_65;
            v31 = v23 + (v16 << 6);
            v32 = 16 * (v31 + v24);
            v33 = (v70 + 16 * v31) & v69;
            if (v32 - v33 >= v6)
              break;
          }
          if (v24 + v23 < 0x40)
          {
            if (v15 <= v24)
              v15 = v24;
            v20 += v24 + v22;
            v21 >>= v24 + v22;
            v34 = v16;
            if (!v21)
              goto LABEL_48;
          }
          else
          {
            v26 = v16 + 1;
            v66 = StatusReg;
            if (v16 + 1 > 0xF)
              goto LABEL_50;
            v27 = (v70 + (v16 << 10) + 16 * v23) & v69;
            v65 = v6;
            v28 = ~v16;
            v29 = (uint64_t *)(*(_QWORD *)v7 + 24 + 8 * v16);
            if (a4 <= 0x10)
            {
              do
              {
                v30 = *v29;
                if (*v29 != -1)
                  goto LABEL_39;
                if (v25 < 0x41)
                  goto LABEL_63;
                v25 -= 64;
                --v28;
                ++v29;
              }
              while (v28 != -16);
              v26 = 16;
              v6 = v65;
LABEL_50:
              if (v15 <= ((v26 - v16) << 6) - v23)
                v15 = ((v26 - v16) << 6) - v23;
              StatusReg = v66;
              goto LABEL_53;
            }
            v35 = (v16 << 10) - v27 + 2048;
            while (1)
            {
              v30 = *v29;
              if (*v29 != -1)
                break;
              if (v25 > 0x40)
              {
                v25 -= 64;
                v6 = v65;
              }
              else
              {
                v6 = v65;
                if (v35 >= v65)
                {
                  v16 = v27 >> 10;
                  v23 = (v27 >> 4) & 0x3F;
LABEL_63:
                  v34 = -(uint64_t)v28;
                  v30 = -1;
LABEL_88:
                  v59 = ((_BYTE)v23 + (_BYTE)v71) & 0x3F;
                  v60 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v23) & v19;
                  if (!v23)
                    v60 = 0;
                  *(_QWORD *)(v18 + 8 * v16) = v60;
                  if (v16 + 1 < v34)
                    bzero((void *)(v17 + 8 * v16 + 24), 8 * (v34 + ~v16));
                  *(_QWORD *)(v17 + 144 + 8 * v34) |= 1 << v59;
                  v61 = (-2 << v59) & v30;
                  if (v59 == 63)
                    v61 = 0;
                  *v29 = v61;
                  v46 = *(_WORD *)(v17 + 2);
                  LODWORD(v6) = v65;
                  StatusReg = v66;
                  if (v46)
                    goto LABEL_95;
LABEL_66:
                  v47 = ((8 * *(unsigned __int16 *)(v7 + 8)) | ((unint64_t)*(unsigned __int8 *)(v7 + 10) << 19))
                      + pas_compact_heap_reservation_base;
                  v48 = *(unsigned int *)(v7 + 12);
                  v49 = *(unsigned int *)(v47 + 68);
                  if ((_DWORD)v49)
                    v50 = pas_compact_heap_reservation_base + 8 * v49;
                  else
                    v50 = 0;
                  v51 = *(unsigned int *)(v50 + ((v48 >> 5) & 0x7FFFFFC));
                  v52 = pas_compact_heap_reservation_base + 8 * v51;
                  if (!(_DWORD)v51)
                    v52 = 0;
                  *(_BYTE *)(v52 + (v48 & 0x7F)) = -2;
                  do
                  {
LABEL_79:
                    v56 = *(_QWORD *)(v47 + 8);
                    v57 = *(_QWORD *)v47;
                    if (*(_QWORD *)v47 >= v48)
                      v58 = v48;
                    else
                      v58 = *(_QWORD *)v47;
                  }
                  while (v56 == -1);
                  if ((v56 & 1) != 0)
                  {
                    v53 = v56 + 1;
                  }
                  else
                  {
                    v53 = *(_QWORD *)(v47 + 8);
                    if (v57 <= v48)
                    {
LABEL_85:
                      v46 = 0;
                      goto LABEL_95;
                    }
                  }
                  v54 = __ldxp((unsigned __int128 *)v47);
                  if ((unint64_t)v54 ^ v57 | *((_QWORD *)&v54 + 1) ^ v56)
                  {
                    __clrex();
                  }
                  else if (!__stlxp(__PAIR128__(v53, v58), (unsigned __int128 *)v47))
                  {
                    v55 = 1;
                    goto LABEL_78;
                  }
                  v55 = 0;
LABEL_78:
                  __dmb(0xBu);
                  if (v55)
                    goto LABEL_85;
                  goto LABEL_79;
                }
              }
              --v28;
              ++v29;
              v35 += 1024;
              v26 = 16;
              if (v28 == -16)
                goto LABEL_50;
            }
LABEL_39:
            v34 = -(uint64_t)v28;
            v20 = __clz(__rbit64(~v30));
            StatusReg = v66;
            if (v20 >= v25)
            {
              if (a4 < 0x11)
                goto LABEL_87;
              StatusReg = v66;
              if ((v34 << 10) - v27 + 16 * v20 >= v65)
              {
                v16 = v27 >> 10;
                v23 = (v27 >> 4) & 0x3F;
LABEL_87:
                v29 = (uint64_t *)(v18 + 8 * v34);
                goto LABEL_88;
              }
            }
            if (v15 <= v20 - v23 + ((v34 - v16) << 6))
              v15 = v20 - v23 + ((v34 - v16) << 6);
            v21 = v30 >> v20;
            v19 = v30;
            v16 = v34;
            v6 = v65;
            if (!v21)
              goto LABEL_48;
          }
        }
        v16 = v33 >> 10;
        v23 = (v33 >> 4) & 0x3F;
LABEL_65:
        *(_QWORD *)(v17 + 8 * v16 + 144) |= 1 << (v23 + v71);
        *(_QWORD *)(v18 + 8 * v16) = v19 & ~(v9 << v23);
        v46 = *(_WORD *)(v17 + 2);
        if (!v46)
          goto LABEL_66;
LABEL_95:
        *(_WORD *)(v17 + 2) = v46 + (v6 >> 4);
        v62 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v63 = __ldxr(&v11->_os_unfair_lock_opaque);
          if (v63 != v62)
            break;
          if (!__stlxr(0, &v11->_os_unfair_lock_opaque))
            return 0;
        }
        v44 = 0;
        goto LABEL_100;
      }
      v34 = v16;
LABEL_48:
      v16 = v34 + 1;
    }
    while (v34 + 1 < 0x10);
LABEL_53:
    v5 = a1;
    v36 = v9;
    v37 = pas_bitfit_allocator_finish_failing(a1, v7, v6, a4, 16 * v15, (uint64_t)&unk_1E35BE5F0);
    v9 = v36;
    v7 = v37;
    if (v37)
      continue;
LABEL_54:
    v38 = v9;
    v39 = *(_QWORD *)(StatusReg + 752);
    if (v39)
      pas_thread_local_cache_stop_local_allocators_if_necessary(v39, a2, 0);
    first_free_view = pas_bitfit_size_class_get_first_free_view((unint64_t *)*v5, (uint64_t)&unk_1E35BE5F0);
    if (!first_free_view)
      return 2;
    v7 = first_free_view;
    v5[1] = first_free_view;
    v9 = v38;
  }
  v43 = *(_DWORD *)(StatusReg + 24);
  v44 = 2;
  while (1)
  {
    v45 = __ldxr(&v11->_os_unfair_lock_opaque);
    if (v45 != v43)
      break;
    if (!__stlxr(0, &v11->_os_unfair_lock_opaque))
      return v44;
  }
LABEL_100:
  __clrex();
  os_unfair_lock_unlock(v11);
  return v44;
}

void bmalloc_small_bitfit_page_config_specialized_page_deallocate_with_page(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  unsigned int *p_os_unfair_lock_opaque;
  unint64_t StatusReg;
  unsigned int v16;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;

  v10 = a2 & 0x3FFF;
  v11 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v11)
    v12 = (os_unfair_lock_s *)(pas_compact_heap_reservation_base + 8 * v11);
  else
    v12 = 0;
  v13 = (a2 >> 4) & 0x3FF;
  p_os_unfair_lock_opaque = &v12[4]._os_unfair_lock_opaque;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v16 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(p_os_unfair_lock_opaque))
  {
    if (!__stxr(v16, p_os_unfair_lock_opaque))
      goto LABEL_9;
  }
  __clrex();
  os_unfair_lock_lock(v12 + 4);
LABEL_9:
  if (v10 <= 0x10F)
    pas_deallocation_did_fail((uint64_t)"attempt to free bitfit page header", a2, a3, a4, a5, a6, a7, a8);
  if (v10 != 272)
  {
    v18 = a1 + 4 * ((unint64_t)(v13 - 1) >> 5);
    v19 = 1 << (v13 - 1);
    if ((*(_DWORD *)(v18 + 16) & v19) == 0 && (*(_DWORD *)(v18 + 144) & v19) == 0)
      pas_bitfit_page_deallocation_did_fail((const void *)a1, 1u, a2, v10, (uint64_t)"previous bit is not free or end of object");
  }
  v20 = a1 + 16;
  if (((*(_DWORD *)(a1 + 16 + ((v10 >> 7) & 0x7C)) >> (v10 >> 4)) & 1) != 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 1u, a2, v10, (uint64_t)"free bit set");
  v21 = v10 >> 10;
  v22 = (v10 >> 4) & 0x3F;
  v23 = *(_QWORD *)(a1 + 144 + 8 * (v10 >> 10));
  if (v23 >> v22)
  {
    v24 = __clz(__rbit64(v23 >> v22));
    v25 = v24 + 1;
    if (v24 == 63)
      v26 = -1;
    else
      v26 = ~(-2 << v24);
    v27 = 8 * v21;
    *(_QWORD *)(v20 + v27) |= v26 << v22;
    *(_QWORD *)(a1 + 144 + v27) = v23 & ~(1 << (v24 + v13));
    if (!*(_BYTE *)(a1 + 1))
    {
LABEL_36:
      pas_bitfit_view_note_max_free((uint64_t)v12);
      *(_BYTE *)(a1 + 1) = 1;
      v39 = *(unsigned __int16 *)(a1 + 2);
      *(_WORD *)(a1 + 2) = v39 - v25;
      if (v39 != v25)
        goto LABEL_30;
      goto LABEL_29;
    }
  }
  else
  {
    v28 = 0;
    v29 = v22 - 1;
    v30 = v21 - 1;
    v31 = 8 * v21;
    do
    {
      if (v31 + v28 == 120)
        pas_bitfit_page_deallocation_did_fail((const void *)a1, 1u, a2, v10, (uint64_t)"object falls off end of page");
      v32 = *(_QWORD *)(8 * v21 + a1 + 144 + v28 + 8);
      v28 += 8;
      v29 -= 64;
      ++v30;
    }
    while (!v32);
    v33 = v31 + a1 + v28;
    v34 = __clz(__rbit64(v32));
    v25 = v34 - v29;
    if (v34 == 63)
      v35 = -1;
    else
      v35 = ~(-2 << v34);
    *(_QWORD *)(v33 + 16) |= v35;
    *(_QWORD *)(v33 + 144) = v32 & ~(1 << v34);
    *(_QWORD *)(v20 + 8 * v21) |= -1 << v22;
    if (v21 < v30)
    {
      memset((void *)(a1 + 8 * v21 + 24), 255, v28 - 8);
      if (!*(_BYTE *)(a1 + 1))
        goto LABEL_36;
    }
    else if (!*(_BYTE *)(a1 + 1))
    {
      goto LABEL_36;
    }
  }
  v36 = *(unsigned __int16 *)(a1 + 2);
  *(_WORD *)(a1 + 2) = v36 - v25;
  if (v36 == v25)
LABEL_29:
    pas_bitfit_view_note_full_emptiness((uint64_t)v12, a1);
LABEL_30:
  v37 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v38 = __ldxr(p_os_unfair_lock_opaque);
    if (v38 != v37)
      break;
    if (!__stlxr(0, p_os_unfair_lock_opaque))
      return;
  }
  __clrex();
  os_unfair_lock_unlock(v12 + 4);
}

unint64_t bmalloc_small_bitfit_page_config_specialized_page_get_allocation_size_with_page(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a1 + 8 * ((a2 >> 10) & 0xF);
  v3 = *(_QWORD *)(v2 + 144) >> (a2 >> 4);
  if (v3)
    return 16 * __clz(__rbit64(v3)) + 16;
  v5 = -(uint64_t)((a2 >> 4) & 0x3F);
  v6 = (unint64_t *)(v2 + 152);
  do
  {
    v8 = *v6++;
    v7 = v8;
    v5 += 64;
  }
  while (!v8);
  return 16 * (__clz(__rbit64(v7)) + v5) + 16;
}

void bmalloc_small_bitfit_page_config_specialized_page_shrink_with_page(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  unint64_t v13;
  __int16 v14;
  uint64_t v15;
  unsigned int *p_os_unfair_lock_opaque;
  unint64_t StatusReg;
  unsigned int v18;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;

  v10 = a2 & 0x3FFF;
  v11 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v11)
    v12 = (os_unfair_lock_s *)(pas_compact_heap_reservation_base + 8 * v11);
  else
    v12 = 0;
  if (a3)
    v13 = (unint64_t)(a3 + 15) >> 4;
  else
    v13 = 1;
  v14 = v13;
  v15 = (a2 >> 4) & 0x3FF;
  p_os_unfair_lock_opaque = &v12[4]._os_unfair_lock_opaque;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(p_os_unfair_lock_opaque))
  {
    if (!__stxr(v18, p_os_unfair_lock_opaque))
      goto LABEL_12;
  }
  __clrex();
  os_unfair_lock_lock(v12 + 4);
LABEL_12:
  if (v10 <= 0x10F)
    pas_deallocation_did_fail((uint64_t)"attempt to free bitfit page header", a2, a3, a4, a5, a6, a7, a8);
  if (v10 != 272)
  {
    v20 = a1 + 4 * ((unint64_t)(v15 - 1) >> 5);
    v21 = 1 << (v15 - 1);
    if ((*(_DWORD *)(v20 + 16) & v21) == 0 && (*(_DWORD *)(v20 + 144) & v21) == 0)
      pas_bitfit_page_deallocation_did_fail((const void *)a1, 1u, a2, v10, (uint64_t)"previous bit is not free or end of object");
  }
  v22 = a1 + 16;
  if (((*(_DWORD *)(a1 + 16 + ((v10 >> 7) & 0x7C)) >> (v10 >> 4)) & 1) != 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 1u, a2, v10, (uint64_t)"free bit set");
  v23 = v10 >> 10;
  v24 = (v10 >> 4) & 0x3F;
  v25 = a1 + 144;
  v26 = *(_QWORD *)(a1 + 144 + 8 * (v10 >> 10));
  v27 = v26 >> v24;
  if (!(v26 >> v24))
  {
    v33 = 8 * v23;
    v34 = (v23 << 6) - 960;
    do
    {
      if (!(v34 + v27))
        pas_bitfit_page_deallocation_did_fail((const void *)a1, 1u, a2, v10, (uint64_t)"object falls off end of page");
      ++v23;
      v35 = *(_QWORD *)(a1 + 152 + v33);
      v33 += 8;
      v27 += 64;
    }
    while (!v35);
    v36 = __clz(__rbit64(v35));
    v37 = v36 - v24 + v27 + 1;
    if (v13 <= v37)
    {
      if (v36 - (v13 + v24) + v27 == -1)
        goto LABEL_40;
      v38 = (v13 + v15) >> 6;
      v39 = (v13 + v15) & 0x3F;
      *(_DWORD *)(v25 + (((v13 + v15 - 1) >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << (v13 + v15 - 1);
      v40 = *(_QWORD *)(a1 + v33 + 144);
      if (v38 == v23)
      {
        v41 = v36 - (v13 + v24) + v27;
        if (v41 == 63)
          v42 = -1;
        else
          v42 = ~(-1 << (v41 + 1));
        *(_QWORD *)(a1 + v33 + 16) |= v42 << v39;
        *(_QWORD *)(a1 + v33 + 144) = v40 & ~(1 << v36);
      }
      else
      {
        v43 = v23 - 1;
        if (v36 == 63)
          v44 = -1;
        else
          v44 = ~(-2 << v36);
        *(_QWORD *)(a1 + v33 + 16) |= v44;
        *(_QWORD *)(a1 + v33 + 144) = v40 & ~(1 << v36);
        *(_QWORD *)(v22 + 8 * v38) |= -1 << v39;
        v14 = v37;
        if (v38 >= v43)
          goto LABEL_40;
        memset((void *)(8 * v38 + a1 + 24), 255, v33 - 8 * v38 - 8);
      }
      v14 = v37;
      goto LABEL_40;
    }
LABEL_53:
    pas_deallocation_did_fail((uint64_t)"attempt to shrink to a larger size", a2, a3, a4, a5, a6, a7, a8);
  }
  v28 = __clz(__rbit64(v27));
  v29 = v28 + 1 - v13;
  if (v28 + 1 < v13)
    goto LABEL_53;
  if (v28 + 1 != v13)
  {
    if (v29 == 64)
      v30 = -1;
    else
      v30 = ~(-1 << v29);
    v31 = v13 + v24;
    v32 = 8 * v23;
    *(_QWORD *)(v22 + v32) |= v30 << v31;
    *(_QWORD *)(v25 + v32) = v26 & ~(1 << (v28 + v15)) | (1 << (v31 - 1));
    v14 = v28 + 1;
  }
LABEL_40:
  v45 = v14 - v13;
  if (!*(_BYTE *)(a1 + 1))
  {
    pas_bitfit_view_note_max_free((uint64_t)v12);
    *(_BYTE *)(a1 + 1) = 1;
    v49 = *(unsigned __int16 *)(a1 + 2);
    *(_WORD *)(a1 + 2) = v49 - v45;
    if (v49 != v45)
      goto LABEL_43;
    goto LABEL_42;
  }
  v46 = *(unsigned __int16 *)(a1 + 2);
  *(_WORD *)(a1 + 2) = v46 - v45;
  if (v46 == v45)
LABEL_42:
    pas_bitfit_view_note_full_emptiness((uint64_t)v12, a1);
LABEL_43:
  v47 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v48 = __ldxr(p_os_unfair_lock_opaque);
    if (v48 != v47)
      break;
    if (!__stlxr(0, p_os_unfair_lock_opaque))
      return;
  }
  __clrex();
  os_unfair_lock_unlock(v12 + 4);
}

uint64_t bmalloc_medium_bitfit_page_header_for_boundary(unint64_t a1)
{
  int v1;
  unsigned int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if (off_1ECF42618)
  {
    v1 = (a1 >> 17) ^ ((a1 >> 17) >> 4);
    v2 = ((v1 ^ 0xDEADBEEF) + 32 * v1) ^ (((v1 ^ 0xDEADBEEF) + 32 * v1) >> 11);
    v3 = (char *)off_1ECF42618 + 32;
    v4 = *((_DWORD *)off_1ECF42618 + 3) & v2;
    v5 = *((_QWORD *)off_1ECF42618 + 2 * v4 + 4);
    if (v5 == a1)
      return *(_QWORD *)&v3[16 * v4 + 8];
    v6 = v2 + 1;
    while (v5 != -1)
    {
      v4 = *((_DWORD *)off_1ECF42618 + 3) & v6;
      v5 = *(_QWORD *)&v3[16 * v4];
      ++v6;
      if (v5 == a1)
        return *(_QWORD *)&v3[16 * v4 + 8];
    }
  }
  return 0;
}

uint64_t bmalloc_medium_bitfit_boundary_for_page_header(uint64_t a1)
{
  return *(_QWORD *)(a1 - 16);
}

uint64_t bmalloc_medium_bitfit_page_header_for_boundary_remote(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  _QWORD *v8;

  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 72) + 16);
  v3 = *v2;
  if (*v2)
  {
    v4 = (a2 ^ (a2 >> 4) ^ 0xDEADBEEF) + 32 * (a2 ^ (a2 >> 4));
    v5 = ((a2 >> 36) ^ HIDWORD(a2) ^ 0xDEADBEEF) + 32 * ((a2 >> 36) ^ HIDWORD(a2));
    v6 = v4 ^ ((v5 ^ v4) >> 11) ^ v5;
    v7 = *((_DWORD *)v2 + 3);
    while (1)
    {
      v8 = (_QWORD *)(v3 + 16 * (v6 & v7));
      if (*v8 == -1)
      {
        if (v8[1] != 1)
          return 0;
      }
      else if (*v8 == a2)
      {
        return v8[1];
      }
      ++v6;
    }
  }
  return 0;
}

_QWORD *bmalloc_medium_bitfit_create_page_header(unint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;
  int v10;
  unsigned int v11;

  if (!a3)
  {
    v5 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v5, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  v7 = (_QWORD *)pas_utility_heap_try_allocate_with_alignment(104, 0x10uLL, (uint64_t)"pas_page_header_table/header");
  *v7 = a1;
  v8 = v7 + 2;
  pas_lock_free_read_ptr_ptr_hashtable_set(&off_1ECF42618, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x20000, a1, (unint64_t)(v7 + 2));
  if (a3)
    return v8;
  v10 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v11 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v11 != v10)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v8;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return v8;
}

void bmalloc_medium_bitfit_destroy_page_header(uint64_t a1, int a2)
{
  unint64_t StatusReg;
  unsigned int v4;
  int v6;
  unsigned int v7;

  if (a2)
  {
    pas_lock_free_read_ptr_ptr_hashtable_set(&off_1ECF42618, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x20000, *(_QWORD *)(a1 - 16), 0);
    pas_utility_heap_deallocate(a1 - 16);
  }
  else
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v4 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v4, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_8;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_8:
    pas_lock_free_read_ptr_ptr_hashtable_set(&off_1ECF42618, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x20000, *(_QWORD *)(a1 - 16), 0);
    pas_utility_heap_deallocate(a1 - 16);
    v6 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v7 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v7 != v6)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
}

uint64_t bmalloc_heap_config_allocate_medium_bitfit_page(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int64x2_t v12;
  void (*v13)(uint64_t@<X0>, size_t@<X1>, uint64_t *@<X3>, uint64_t@<X8>);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];

  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 160);
  if ((**(_DWORD **)a1 & 0x20000) != 0)
    v3 = a1;
  else
    v3 = 0;
  v11 = 0;
  v7 = xmmword_19919FC00;
  v8 = 0x20000;
  v9 = 0u;
  v10 = 0u;
  v17[0] = v2;
  v17[1] = &v7;
  v17[2] = v3;
  v17[3] = a2;
  v12 = vdupq_n_s64(1uLL);
  v13 = megapage_cache_allocate_aligned;
  v14 = v17;
  v15 = 0;
  v16 = 0;
  v4 = pas_simple_large_free_heap_try_allocate(v2, 0x20000, 0x20000, 0, &v12);
  return (v5 << 63 >> 63) & v4;
}

uint64_t bmalloc_medium_bitfit_page_config_specialized_allocator_try_allocate(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t StatusReg;
  _QWORD *v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  unint64_t v13;
  os_unfair_lock *v14;
  os_unfair_lock_s *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  _BOOL4 v25;
  BOOL v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v35;
  int v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _BYTE *j;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int8x16_t *v88;
  unint64_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  uint8x16_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint8x16_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  int32x4_t v102;
  int32x4_t v103;
  unint64_t v104;
  int8x8_t *v105;
  int8x8_t v106;
  uint16x8_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  int8x16_t *v113;
  unint64_t v114;
  int8x16_t v115;
  unint64_t v116;
  int8x8_t *v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  __int16 v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unsigned __int128 v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _BYTE *i;
  int v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int8x16_t *v154;
  unint64_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  uint8x16_t v162;
  uint16x8_t v163;
  uint16x8_t v164;
  uint8x16_t v165;
  uint16x8_t v166;
  uint16x8_t v167;
  int32x4_t v168;
  int32x4_t v169;
  unint64_t v170;
  int8x8_t *v171;
  int8x8_t v172;
  uint16x8_t v173;
  uint64_t v174;
  unsigned __int8 *v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  int8x16_t *v179;
  unint64_t v180;
  int8x16_t v181;
  unint64_t v182;
  int8x8_t *v183;
  uint64_t v184;
  _BYTE *v185;
  unint64_t v186;
  void *v187;
  size_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __int16 v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unsigned __int128 v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t first_free_view;
  int v209;
  unsigned int v210;
  uint64_t v211;
  int v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v235;
  _QWORD v236[131];
  unint64_t v237;

  v4 = a1;
  v5 = 512;
  if (a3)
    v5 = (a3 + 511) & 0xFFFFFFFFFFFFFE00;
  v6 = a1[1];
  v235 = v5 >> 9;
  v222 = -(uint64_t)a4;
  v223 = a4 - 1;
  v226 = v5;
  v227 = v5 - 1;
  if (v5 == 0x8000)
    v7 = -1;
  else
    v7 = ~(-1 << (v5 >> 9));
  v224 = v7;
  v225 = (v5 >> 9) + 63;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = (_QWORD *)&unk_1ECF57000;
  v10.i64[0] = 0x101010101010101;
  v10.i64[1] = 0x101010101010101;
  v11.i64[0] = -1;
  v11.i64[1] = -1;
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v232 = StatusReg;
  if (!v6)
    goto LABEL_259;
LABEL_7:
  v13 = 0;
  v14 = (os_unfair_lock *)(v6 + 20);
  v15 = (os_unfair_lock_s *)(v6 + 16);
  v233 = v6;
LABEL_9:
  if (!v13)
    goto LABEL_51;
  if (!pas_physical_page_sharing_pool_balancing_enabled)
    goto LABEL_46;
  v16 = v13 << 14;
  do
  {
    while (1)
    {
      v19 = v9[367];
      if ((v19 & 0x8000000000000000) != 0 || v19 < v16)
        break;
      v20 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v20 != v19)
      {
        __clrex();
LABEL_24:
        v21 = 0;
        goto LABEL_25;
      }
      if (__stlxr(v19 - v16, (unint64_t *)&pas_physical_page_sharing_pool_balance))
        goto LABEL_24;
      v21 = 1;
LABEL_25:
      __dmb(0xBu);
      if (v21)
        goto LABEL_46;
    }
    v17 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
    if (v17 == v19)
    {
      if (!__stlxr(0, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        v18 = 1;
        goto LABEL_17;
      }
    }
    else
    {
      __clrex();
    }
    v18 = 0;
LABEL_17:
    __dmb(0xBu);
  }
  while (!v18);
  v22 = v16 - v19;
  if (v16 != v19)
  {
    bzero(v236, 0x440uLL);
    while (1)
    {
      v23 = v237;
      if (v237 >= v22)
        break;
      v24 = pas_page_sharing_pool_take_least_recently_used((uint64_t)pas_physical_page_sharing_pool, v236, 0, 0);
      if (v24 != 3)
      {
        v23 = v237;
        v25 = v24 != 2;
        goto LABEL_33;
      }
    }
    v25 = 1;
LABEL_33:
    v26 = v23 >= v22;
    v27 = v23 - v22;
    v28 = !v26;
    if ((v25 & v28) != 0)
      v29 = 0;
    else
      v29 = v27;
    decommit_all((uint64_t)v236, 1);
    pas_bootstrap_free_heap_hold_lock_and_deallocate_for_config(v236[129], 32 * v236[130], 0);
    v10.i64[0] = 0x101010101010101;
    v10.i64[1] = 0x101010101010101;
    v11.i64[0] = -1;
    v11.i64[1] = -1;
    v12.i64[0] = 0x100000001;
    v12.i64[1] = 0x100000001;
    while (2)
    {
      v30 = pas_physical_page_sharing_pool_balance;
      v31 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v31 == v30)
      {
        if (!__stlxr(pas_physical_page_sharing_pool_balance + v29, (unint64_t *)&pas_physical_page_sharing_pool_balance))
        {
          v32 = 1;
          goto LABEL_45;
        }
      }
      else
      {
        __clrex();
      }
      v32 = 0;
LABEL_45:
      __dmb(0xBu);
      if (v32)
        break;
      continue;
    }
  }
LABEL_46:
  v33 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v14->_os_unfair_lock_opaque))
  {
    if (!__stxr(v33, &v14->_os_unfair_lock_opaque))
      goto LABEL_51;
  }
  __clrex();
  os_unfair_lock_lock(v14);
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v11.i64[0] = -1;
  v11.i64[1] = -1;
  v10.i64[0] = 0x101010101010101;
  v10.i64[1] = 0x101010101010101;
LABEL_51:
  v35 = *(_DWORD *)(StatusReg + 24);
  while (2)
  {
    if (__ldaxr(&v15->_os_unfair_lock_opaque))
    {
      __clrex();
      os_unfair_lock_lock(v15);
      v12.i64[0] = 0x100000001;
      v12.i64[1] = 0x100000001;
      v11.i64[0] = -1;
      v11.i64[1] = -1;
      v10.i64[0] = 0x101010101010101;
      v10.i64[1] = 0x101010101010101;
      if (!*(_BYTE *)(v6 + 11))
        goto LABEL_104;
      goto LABEL_57;
    }
    if (__stxr(v35, &v15->_os_unfair_lock_opaque))
      continue;
    break;
  }
  if (*(_BYTE *)(v6 + 11))
  {
LABEL_57:
    if (off_1ECF42618)
    {
      v37 = (*(_QWORD *)v6 >> 17) ^ ((*(_QWORD *)v6 >> 17) >> 4);
      v38 = ((v37 ^ 0xDEADBEEF) + 32 * v37) ^ (((v37 ^ 0xDEADBEEF) + 32 * v37) >> 11);
      v39 = (char *)off_1ECF42618 + 32;
      v40 = v38 & *((_DWORD *)off_1ECF42618 + 3);
      v41 = *((_QWORD *)off_1ECF42618 + 2 * v40 + 4);
      if (v41 == *(_QWORD *)v6)
      {
LABEL_62:
        v43 = *(_QWORD *)&v39[16 * v40 + 8];
        goto LABEL_64;
      }
      v42 = v38 + 1;
      while (v41 != -1)
      {
        v40 = *((_DWORD *)off_1ECF42618 + 3) & v42;
        v41 = *(_QWORD *)&v39[16 * v40];
        ++v42;
        if (v41 == *(_QWORD *)v6)
          goto LABEL_62;
      }
    }
    v43 = 0;
LABEL_64:
    v44 = 0;
    v45 = 0;
    v46 = v43 + 16;
    v47 = v43 + 48;
    v48 = v43 + 24;
    while (1)
    {
      v49 = *(_QWORD *)(v46 + 8 * v45);
      if (v49)
        break;
      v64 = v45;
LABEL_99:
      v45 = v64 + 1;
      if (v64 + 1 >= 4)
      {
        v66 = 0;
        goto LABEL_103;
      }
    }
    v50 = 0;
    v51 = *(_QWORD *)(v46 + 8 * v45);
    while (1)
    {
      v52 = __clz(__rbit64(v51));
      v53 = v52 + v50;
      v54 = __clz(__rbit64(~(v51 >> v52)));
      v55 = v235 - v54;
      if (v235 <= v54)
      {
        if (a4 < 0x201)
          goto LABEL_107;
        v61 = v53 + (v45 << 6);
        v62 = (v61 + v54) << 9;
        v63 = (v223 + (v61 << 9)) & v222;
        if (v62 - v63 >= v226)
          break;
      }
      if (v54 + v53 < 0x40)
      {
        if (v44 <= v54)
          v44 = v54;
        v50 += v54 + v52;
        v51 >>= v54 + v52;
        v64 = v45;
        if (!v51)
          goto LABEL_99;
      }
      else
      {
        v56 = v45 + 1;
        if (v45 + 1 > 3)
          goto LABEL_101;
        v57 = (v223 + (v45 << 15) + (v53 << 9)) & v222;
        if (a4 <= 0x200)
        {
          v58 = ~v45;
          v59 = (uint64_t *)(v48 + 8 * v45);
          do
          {
            v60 = *v59;
            if (*v59 != -1)
              goto LABEL_90;
            if (v55 < 0x41)
              goto LABEL_106;
            v55 -= 64;
            --v58;
            ++v59;
          }
          while (v58 != -4);
          v56 = 4;
LABEL_101:
          v66 = 0;
          if (v44 <= ((v56 - v45) << 6) - v53)
            v44 = ((v56 - v45) << 6) - v53;
LABEL_103:
          v67 = v44 << 9;
          goto LABEL_136;
        }
        v58 = ~v45;
        v59 = (uint64_t *)(v48 + 8 * v45);
        v65 = (v45 << 15) - v57 + 0x10000;
        while (1)
        {
          v60 = *v59;
          if (*v59 != -1)
            break;
          if (v55 > 0x40)
          {
            v55 -= 64;
          }
          else if (v65 >= v226)
          {
            v45 = v57 >> 15;
            v53 = (v57 >> 9) & 0x3F;
LABEL_106:
            v64 = -(uint64_t)v58;
            v60 = -1;
LABEL_185:
            v138 = (v45 << 15) + (v53 << 9);
            v139 = v138 >> 14;
            v231 = v138;
            v140 = (v138 + v227) >> 14;
            if (v13)
            {
              v220 = v49;
              v221 = v53;
              v229 = v13;
              v141 = v43 + 16;
              v142 = v43;
              v143 = v64;
              v219 = (v138 + v227) >> 14;
              v144 = v138 >> 14;
              os_unfair_lock_assert_owner(v14);
              v64 = v143;
              v43 = v142;
              v49 = v220;
              v46 = v141;
              v145 = v219 - v144;
              if (v219 >= v144)
              {
                for (i = (_BYTE *)(v142 + v144 + 80); ; ++i)
                {
                  v147 = *i;
                  if (v147 == 255)
                  {
                    *i = 1;
                    if (!v145)
                      break;
                  }
                  else
                  {
                    *i = v147 + 1;
                    if (!v145)
                      break;
                  }
                  --v145;
                }
              }
              v10.i64[0] = 0x101010101010101;
              v10.i64[1] = 0x101010101010101;
              v11.i64[0] = -1;
              v11.i64[1] = -1;
              v12.i64[0] = 0x100000001;
              v12.i64[1] = 0x100000001;
              v13 = v229;
              v53 = v221;
LABEL_227:
              v186 = (0xFFFFFFFFFFFFFFFFLL >> (64 - v53)) & v49;
              if (!v53)
                v186 = 0;
              *(_QWORD *)(v46 + 8 * v45) = v186;
              if (v45 + 1 < v64)
              {
                v187 = (void *)(v43 + 8 * v45 + 24);
                v188 = 8 * (v64 + ~v45);
                v189 = v43;
                v190 = v64;
                bzero(v187, v188);
                v64 = v190;
                v43 = v189;
                v12.i64[0] = 0x100000001;
                v12.i64[1] = 0x100000001;
                v11.i64[0] = -1;
                v11.i64[1] = -1;
                v10.i64[0] = 0x101010101010101;
                v10.i64[1] = 0x101010101010101;
              }
              v191 = ((_BYTE)v53 + (_BYTE)v225) & 0x3F;
              *(_QWORD *)(v47 + 8 * v64) |= 1 << v191;
              if (v191 == 63)
                v192 = 0;
              else
                v192 = (-2 << v191) & v60;
              *v59 = v192;
              v193 = *(_WORD *)(v43 + 2);
              StatusReg = v232;
              v6 = v233;
              v9 = (_QWORD *)&unk_1ECF57000;
              if (v193)
              {
LABEL_235:
                *(_WORD *)(v43 + 2) = v193 + (v226 >> 9);
                v67 = v231 + *(_QWORD *)(v43 - 16);
                v66 = 1;
                if (!v13)
                  goto LABEL_159;
                goto LABEL_154;
              }
              v194 = ((8 * *(unsigned __int16 *)(v233 + 8)) | ((unint64_t)*(unsigned __int8 *)(v233 + 10) << 19))
                   + pas_compact_heap_reservation_base;
              v195 = *(unsigned int *)(v233 + 12);
              v196 = *(unsigned int *)(v194 + 68);
              if ((_DWORD)v196)
                v197 = pas_compact_heap_reservation_base + 8 * v196;
              else
                v197 = 0;
              v198 = *(unsigned int *)(v197 + ((v195 >> 5) & 0x7FFFFFC));
              v199 = pas_compact_heap_reservation_base + 8 * v198;
              if (!(_DWORD)v198)
                v199 = 0;
              *(_BYTE *)(v199 + (v195 & 0x7F)) = -2;
              do
              {
LABEL_250:
                v203 = *(_QWORD *)(v194 + 8);
                v204 = *(_QWORD *)v194;
                if (*(_QWORD *)v194 >= v195)
                  v205 = v195;
                else
                  v205 = *(_QWORD *)v194;
              }
              while (v203 == -1);
              if ((v203 & 1) != 0)
              {
                v200 = v203 + 1;
              }
              else
              {
                v200 = *(_QWORD *)(v194 + 8);
                if (v204 <= v195)
                  goto LABEL_235;
              }
              v201 = __ldxp((unsigned __int128 *)v194);
              if ((unint64_t)v201 ^ v204 | *((_QWORD *)&v201 + 1) ^ v203)
              {
                __clrex();
              }
              else if (!__stlxp(__PAIR128__(v200, v205), (unsigned __int128 *)v194))
              {
                v202 = 1;
                goto LABEL_249;
              }
              v202 = 0;
LABEL_249:
              __dmb(0xBu);
              if (v202)
                goto LABEL_235;
              goto LABEL_250;
            }
            v148 = v140 - v139;
            if (v140 < v139)
              goto LABEL_227;
            v149 = v148 + 1;
            if (v148 + 1 >= 8)
            {
              if (v149 >= 0x20)
              {
                v152 = 0uLL;
                v151 = v149 & 0xFFFFFFFFFFFFFFE0;
                v153 = 0uLL;
                v154 = (int8x16_t *)(v43 + v139 + 96);
                v155 = v149 & 0xFFFFFFFFFFFFFFE0;
                v156 = 0uLL;
                v157 = 0uLL;
                v158 = 0uLL;
                v159 = 0uLL;
                v160 = 0uLL;
                v161 = 0uLL;
                do
                {
                  v162 = (uint8x16_t)vceqq_s8(v154[-1], v11);
                  v163 = vmovl_u8(*(uint8x8_t *)v162.i8);
                  v164 = vmovl_high_u8(v162);
                  v165 = (uint8x16_t)vceqq_s8(*v154, v11);
                  v166 = vmovl_u8(*(uint8x8_t *)v165.i8);
                  v167 = vmovl_high_u8(v165);
                  v157 = vaddq_s32(v157, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v164), v12));
                  v156 = vaddq_s32(v156, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v164.i8), v12));
                  v153 = vaddq_s32(v153, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v163), v12));
                  v152 = vaddq_s32(v152, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v163.i8), v12));
                  v161 = vaddq_s32(v161, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v167), v12));
                  v160 = vaddq_s32(v160, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v167.i8), v12));
                  v159 = vaddq_s32(v159, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v166), v12));
                  v158 = vaddq_s32(v158, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v166.i8), v12));
                  v154 += 2;
                  v155 -= 32;
                }
                while (v155);
                v83 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v158, v152), vaddq_s32(v160, v156)), vaddq_s32(vaddq_s32(v159, v153), vaddq_s32(v161, v157))));
                if (v149 == v151)
                  goto LABEL_212;
                if ((v149 & 0x18) == 0)
                {
                  v150 = v139 + v151;
                  goto LABEL_207;
                }
              }
              else
              {
                LODWORD(v83) = 0;
                v151 = 0;
              }
              v150 = v139 + (v149 & 0xFFFFFFFFFFFFFFF8);
              v168 = 0uLL;
              v169 = (int32x4_t)v83;
              v170 = v151 - (v149 & 0xFFFFFFFFFFFFFFF8);
              v171 = (int8x8_t *)(v43 + v151 + v139 + 80);
              do
              {
                v172 = *v171++;
                v173 = vmovl_u8((uint8x8_t)vceq_s8(v172, (int8x8_t)-1));
                v168 = vaddq_s32(v168, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v173), v12));
                v169 = vaddq_s32(v169, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v173.i8), v12));
                v170 += 8;
              }
              while (v170);
              v83 = vaddvq_s32(vaddq_s32(v169, v168));
              if (v149 != (v149 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_207;
            }
            else
            {
              LODWORD(v83) = 0;
              v150 = v139;
LABEL_207:
              v174 = v140 - v150 + 1;
              v175 = (unsigned __int8 *)(v43 + v150 + 80);
              do
              {
                v176 = *v175++;
                if (v176 == 255)
                  v83 = (v83 + 1);
                else
                  v83 = v83;
                --v174;
              }
              while (v174);
            }
LABEL_212:
            if (!(_DWORD)v83)
            {
              v177 = v148 + 1;
              if (v177 >= 8)
              {
                if (v177 < 0x20)
                {
                  v178 = 0;
                  goto LABEL_220;
                }
                v178 = v177 & 0xFFFFFFFFFFFFFFE0;
                v179 = (int8x16_t *)(v43 + v139 + 96);
                v180 = v177 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v181 = vaddq_s8(*v179, v10);
                  v179[-1] = vaddq_s8(v179[-1], v10);
                  *v179 = v181;
                  v179 += 2;
                  v180 -= 32;
                }
                while (v180);
                if (v177 == v178)
                  goto LABEL_227;
                if ((v177 & 0x18) != 0)
                {
LABEL_220:
                  v182 = v178 - (v177 & 0xFFFFFFFFFFFFFFF8);
                  v183 = (int8x8_t *)(v43 + v178 + v139 + 80);
                  do
                  {
                    *v183 = vadd_s8(*v183, (int8x8_t)0x101010101010101);
                    ++v183;
                    v182 += 8;
                  }
                  while (v182);
                  v139 += v177 & 0xFFFFFFFFFFFFFFF8;
                  if (v177 == (v177 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_227;
                }
                else
                {
                  v139 += v178;
                }
              }
              v184 = v140 - v139 + 1;
              v185 = (_BYTE *)(v43 + v139 + 80);
              do
              {
                ++*v185++;
                --v184;
              }
              while (v184);
              goto LABEL_227;
            }
LABEL_135:
            v67 = 0;
            v66 = v83 << 32;
LABEL_136:
            StatusReg = v232;
            v6 = v233;
            v9 = (_QWORD *)&unk_1ECF57000;
            if (!v13)
              goto LABEL_159;
LABEL_154:
            v122 = *(_DWORD *)(StatusReg + 24);
            while (1)
            {
              v123 = __ldxr(&v14->_os_unfair_lock_opaque);
              if (v123 != v122)
                break;
              if (!__stlxr(0, &v14->_os_unfair_lock_opaque))
                goto LABEL_159;
            }
            __clrex();
            os_unfair_lock_unlock(v14);
            v12.i64[0] = 0x100000001;
            v12.i64[1] = 0x100000001;
            v11.i64[0] = -1;
            v11.i64[1] = -1;
            v10.i64[0] = 0x101010101010101;
            v10.i64[1] = 0x101010101010101;
LABEL_159:
            v13 = HIDWORD(v66);
            if (HIDWORD(v66))
            {
              v124 = *(_DWORD *)(StatusReg + 24);
              while (1)
              {
                v125 = __ldxr(&v15->_os_unfair_lock_opaque);
                if (v125 != v124)
                  break;
                if (!__stlxr(0, &v15->_os_unfair_lock_opaque))
                  goto LABEL_9;
              }
              __clrex();
              os_unfair_lock_unlock(v15);
              v12.i64[0] = 0x100000001;
              v12.i64[1] = 0x100000001;
              v11.i64[0] = -1;
              v11.i64[1] = -1;
              v10.i64[0] = 0x101010101010101;
              v10.i64[1] = 0x101010101010101;
              goto LABEL_9;
            }
            if ((v66 & 1) != 0)
            {
              v209 = *(_DWORD *)(StatusReg + 24);
              while (1)
              {
                v210 = __ldxr(&v15->_os_unfair_lock_opaque);
                if (v210 != v209)
                  break;
                if (!__stlxr(0, &v15->_os_unfair_lock_opaque))
                  return 0;
              }
              v211 = 0;
              v14 = v15;
LABEL_268:
              __clrex();
              os_unfair_lock_unlock(v14);
              return v211;
            }
            v4 = a1;
            v206 = pas_bitfit_allocator_finish_failing(a1, v6, v226, a4, v67, (uint64_t)&unk_1E35BE690);
            v12.i64[0] = 0x100000001;
            v12.i64[1] = 0x100000001;
            v11.i64[0] = -1;
            v11.i64[1] = -1;
            v10.i64[0] = 0x101010101010101;
            v10.i64[1] = 0x101010101010101;
            v6 = v206;
            if (!v206)
            {
LABEL_259:
              v207 = *(_QWORD *)(StatusReg + 752);
              if (v207)
                pas_thread_local_cache_stop_local_allocators_if_necessary(v207, a2, 0);
              first_free_view = pas_bitfit_size_class_get_first_free_view((unint64_t *)*v4, (uint64_t)&unk_1E35BE690);
              if (!first_free_view)
                return 2;
              v6 = first_free_view;
              v4[1] = first_free_view;
              v10.i64[0] = 0x101010101010101;
              v10.i64[1] = 0x101010101010101;
              v11.i64[0] = -1;
              v11.i64[1] = -1;
              v12.i64[0] = 0x100000001;
              v12.i64[1] = 0x100000001;
            }
            goto LABEL_7;
          }
          --v58;
          ++v59;
          v65 += 0x8000;
          v56 = 4;
          if (v58 == -4)
            goto LABEL_101;
        }
LABEL_90:
        v64 = -(uint64_t)v58;
        v50 = __clz(__rbit64(~v60));
        if (v50 >= v55)
        {
          if (a4 < 0x201)
            goto LABEL_184;
          if ((v64 << 15) - v57 + (v50 << 9) >= v226)
          {
            v45 = v57 >> 15;
            v53 = (v57 >> 9) & 0x3F;
LABEL_184:
            v59 = (uint64_t *)(v46 + 8 * v64);
            goto LABEL_185;
          }
        }
        if (v44 <= v50 - v53 + ((v64 - v45) << 6))
          v44 = v50 - v53 + ((v64 - v45) << 6);
        v51 = v60 >> v50;
        v49 = v60;
        v45 = v64;
        if (!(v60 >> v50))
          goto LABEL_99;
      }
    }
    v45 = v63 >> 15;
    v53 = (v63 >> 9) & 0x3F;
LABEL_107:
    v69 = (v45 << 15) + (v53 << 9);
    v70 = v69 >> 14;
    v71 = (v69 + v227) >> 14;
    if (v13)
    {
      v228 = (v45 << 15) + (v53 << 9);
      v230 = v45;
      v72 = v53;
      v73 = v13;
      v74 = v43 + 16;
      v75 = v49;
      v76 = v43;
      v77 = (v69 + v227) >> 14;
      os_unfair_lock_assert_owner(v14);
      v43 = v76;
      v49 = v75;
      v46 = v74;
      v78 = v77 - v70;
      if (v77 >= v70)
      {
        for (j = (_BYTE *)(v76 + v70 + 80); ; ++j)
        {
          v80 = *j;
          if (v80 == 255)
          {
            *j = 1;
            if (!v78)
              break;
          }
          else
          {
            *j = v80 + 1;
            if (!v78)
              break;
          }
          --v78;
        }
      }
      v10.i64[0] = 0x101010101010101;
      v10.i64[1] = 0x101010101010101;
      v11.i64[0] = -1;
      v11.i64[1] = -1;
      v12.i64[0] = 0x100000001;
      v12.i64[1] = 0x100000001;
      v13 = v73;
      LOBYTE(v53) = v72;
      v69 = v228;
      v45 = v230;
      goto LABEL_152;
    }
    v81 = v71 - v70;
    v10.i64[0] = 0x101010101010101;
    v10.i64[1] = 0x101010101010101;
    v11.i64[0] = -1;
    v11.i64[1] = -1;
    v12.i64[0] = 0x100000001;
    v12.i64[1] = 0x100000001;
    if (v71 < v70)
    {
LABEL_152:
      v120 = 8 * v45;
      *(_QWORD *)(v47 + v120) = *(_QWORD *)(v47 + 8 * v45) | (1 << (v53 + v225));
      *(_QWORD *)(v46 + v120) = v49 & ~(v224 << v53);
      v121 = *(_WORD *)(v43 + 2);
      StatusReg = v232;
      v6 = v233;
      v9 = &unk_1ECF57000;
      if (v121)
      {
LABEL_153:
        *(_WORD *)(v43 + 2) = v121 + (v226 >> 9);
        v67 = v69 + *(_QWORD *)(v43 - 16);
        v66 = 1;
        if (!v13)
          goto LABEL_159;
        goto LABEL_154;
      }
      v126 = ((8 * *(unsigned __int16 *)(v233 + 8)) | ((unint64_t)*(unsigned __int8 *)(v233 + 10) << 19))
           + pas_compact_heap_reservation_base;
      v127 = *(unsigned int *)(v233 + 12);
      v128 = *(unsigned int *)(v126 + 68);
      if ((_DWORD)v128)
        v129 = pas_compact_heap_reservation_base + 8 * v128;
      else
        v129 = 0;
      v130 = *(unsigned int *)(v129 + ((v127 >> 5) & 0x7FFFFFC));
      v131 = pas_compact_heap_reservation_base + 8 * v130;
      if (!(_DWORD)v130)
        v131 = 0;
      *(_BYTE *)(v131 + (v127 & 0x7F)) = -2;
      while (1)
      {
        do
        {
          v135 = *(_QWORD *)(v126 + 8);
          v136 = *(_QWORD *)v126;
          if (*(_QWORD *)v126 >= v127)
            v137 = v127;
          else
            v137 = *(_QWORD *)v126;
        }
        while (v135 == -1);
        if ((v135 & 1) != 0)
        {
          v132 = v135 + 1;
        }
        else
        {
          v132 = *(_QWORD *)(v126 + 8);
          if (v136 <= v127)
            goto LABEL_153;
        }
        v133 = __ldxp((unsigned __int128 *)v126);
        if ((unint64_t)v133 ^ v136 | *((_QWORD *)&v133 + 1) ^ v135)
          break;
        if (__stlxp(__PAIR128__(v132, v137), (unsigned __int128 *)v126))
          goto LABEL_175;
        v134 = 1;
LABEL_176:
        __dmb(0xBu);
        if (v134)
          goto LABEL_153;
      }
      __clrex();
LABEL_175:
      v134 = 0;
      goto LABEL_176;
    }
    v82 = v81 + 1;
    if (v81 + 1 < 8)
    {
      LODWORD(v83) = 0;
      v84 = v69 >> 14;
      goto LABEL_129;
    }
    if (v82 >= 0x20)
    {
      v86 = 0uLL;
      v85 = v82 & 0xFFFFFFFFFFFFFFE0;
      v87 = 0uLL;
      v88 = (int8x16_t *)(v43 + v70 + 96);
      v89 = v82 & 0xFFFFFFFFFFFFFFE0;
      v90 = 0uLL;
      v91 = 0uLL;
      v92 = 0uLL;
      v93 = 0uLL;
      v94 = 0uLL;
      v95 = 0uLL;
      do
      {
        v96 = (uint8x16_t)vceqq_s8(v88[-1], v11);
        v97 = vmovl_u8(*(uint8x8_t *)v96.i8);
        v98 = vmovl_high_u8(v96);
        v99 = (uint8x16_t)vceqq_s8(*v88, v11);
        v100 = vmovl_u8(*(uint8x8_t *)v99.i8);
        v101 = vmovl_high_u8(v99);
        v91 = vaddq_s32(v91, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v98), v12));
        v90 = vaddq_s32(v90, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v98.i8), v12));
        v87 = vaddq_s32(v87, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v97), v12));
        v86 = vaddq_s32(v86, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v97.i8), v12));
        v95 = vaddq_s32(v95, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v101), v12));
        v94 = vaddq_s32(v94, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v101.i8), v12));
        v93 = vaddq_s32(v93, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v100), v12));
        v92 = vaddq_s32(v92, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v100.i8), v12));
        v88 += 2;
        v89 -= 32;
      }
      while (v89);
      v83 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v92, v86), vaddq_s32(v94, v90)), vaddq_s32(vaddq_s32(v93, v87), vaddq_s32(v95, v91))));
      if (v82 == v85)
        goto LABEL_134;
      if ((v82 & 0x18) == 0)
      {
        v84 = v70 + v85;
LABEL_129:
        v108 = v71 - v84 + 1;
        v109 = (unsigned __int8 *)(v43 + v84 + 80);
        do
        {
          v110 = *v109++;
          if (v110 == 255)
            v83 = (v83 + 1);
          else
            v83 = v83;
          --v108;
        }
        while (v108);
LABEL_134:
        if ((_DWORD)v83)
          goto LABEL_135;
        v111 = v81 + 1;
        if (v111 >= 8)
        {
          if (v111 < 0x20)
          {
            v112 = 0;
            goto LABEL_145;
          }
          v112 = v111 & 0xFFFFFFFFFFFFFFE0;
          v113 = (int8x16_t *)(v43 + v70 + 96);
          v114 = v111 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v115 = vaddq_s8(*v113, v10);
            v113[-1] = vaddq_s8(v113[-1], v10);
            *v113 = v115;
            v113 += 2;
            v114 -= 32;
          }
          while (v114);
          if (v111 == v112)
            goto LABEL_152;
          if ((v111 & 0x18) != 0)
          {
LABEL_145:
            v116 = v112 - (v111 & 0xFFFFFFFFFFFFFFF8);
            v117 = (int8x8_t *)(v43 + v112 + v70 + 80);
            do
            {
              *v117 = vadd_s8(*v117, (int8x8_t)0x101010101010101);
              ++v117;
              v116 += 8;
            }
            while (v116);
            v70 += v111 & 0xFFFFFFFFFFFFFFF8;
            if (v111 == (v111 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_152;
            goto LABEL_150;
          }
          v70 += v112;
        }
LABEL_150:
        v118 = v71 - v70 + 1;
        v119 = (_BYTE *)(v43 + v70 + 80);
        do
        {
          ++*v119++;
          --v118;
        }
        while (v118);
        goto LABEL_152;
      }
    }
    else
    {
      LODWORD(v83) = 0;
      v85 = 0;
    }
    v84 = v70 + (v82 & 0xFFFFFFFFFFFFFFF8);
    v102 = 0uLL;
    v103 = (int32x4_t)v83;
    v104 = v85 - (v82 & 0xFFFFFFFFFFFFFFF8);
    v105 = (int8x8_t *)(v43 + v85 + v70 + 80);
    do
    {
      v106 = *v105++;
      v107 = vmovl_u8((uint8x8_t)vceq_s8(v106, (int8x8_t)-1));
      v102 = vaddq_s32(v102, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v107), v12));
      v103 = vaddq_s32(v103, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v107.i8), v12));
      v104 += 8;
    }
    while (v104);
    v83 = vaddvq_s32(vaddq_s32(v103, v102));
    if (v82 == (v82 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_134;
    goto LABEL_129;
  }
LABEL_104:
  v68 = pas_bitfit_allocator_commit_view((os_unfair_lock_s *)v6, (uint64_t)&unk_1E35BE690, v13 != 0);
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v11.i64[0] = -1;
  v11.i64[1] = -1;
  v10.i64[0] = 0x101010101010101;
  v10.i64[1] = 0x101010101010101;
  if ((v68 & 1) != 0)
    goto LABEL_57;
  v213 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v214 = __ldxr(&v15->_os_unfair_lock_opaque);
    if (v214 != v213)
      break;
    if (!__stlxr(0, &v15->_os_unfair_lock_opaque))
      goto LABEL_274;
  }
  __clrex();
  os_unfair_lock_unlock(v15);
LABEL_274:
  if (v13)
  {
    v215 = *(_DWORD *)(StatusReg + 24);
    v211 = 2;
    while (1)
    {
      v216 = __ldxr(&v14->_os_unfair_lock_opaque);
      if (v216 != v215)
        break;
      if (!__stlxr(0, &v14->_os_unfair_lock_opaque))
        return v211;
    }
    goto LABEL_268;
  }
  return 2;
}

void bmalloc_medium_bitfit_page_config_specialized_page_deallocate_with_page(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t StatusReg;
  unsigned int v10;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  int8x16_t *v38;
  int8x16_t v39;
  int8x16_t v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x8_t v48;
  int8x8_t *v49;
  uint64_t v50;
  int8x8_t v51;
  int8x8_t v52;
  uint64_t v53;
  _BYTE *v54;
  char v55;
  int v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  unsigned int v62;

  v4 = a2 & 0x1FFFF;
  v5 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v5)
    v6 = pas_compact_heap_reservation_base + 8 * v5;
  else
    v6 = 0;
  v7 = (a2 >> 9);
  v8 = (unsigned int *)(v6 + 16);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(v8))
  {
    if (!__stxr(v10, v8))
    {
      if (!v4)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 16));
  if (!v4)
    goto LABEL_12;
LABEL_10:
  v12 = a1 + 4 * ((unint64_t)(v7 - 1) >> 5);
  v13 = 1 << (v7 - 1);
  if ((*(_DWORD *)(v12 + 16) & v13) == 0 && (*(_DWORD *)(v12 + 48) & v13) == 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 2u, a2, v4, (uint64_t)"previous bit is not free or end of object");
LABEL_12:
  v14 = a1 + 16;
  v15 = v4 >> 14;
  if (((*(_DWORD *)(a1 + 16 + 4 * (v4 >> 14)) >> (v4 >> 9)) & 1) != 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 2u, a2, v4, (uint64_t)"free bit set");
  v16 = v4 >> 15;
  v17 = (v4 >> 9) & 0x3F;
  v18 = a1 + 48;
  v19 = *(_QWORD *)(a1 + 48 + 8 * (v4 >> 15));
  if (v19 >> v17)
  {
    v20 = __clz(__rbit64(v19 >> v17));
    v21 = v20 + 1;
    if (v20 == 63)
      v22 = -1;
    else
      v22 = ~(-2 << v20);
    v23 = 8 * v16;
    *(_QWORD *)(v14 + v23) |= v22 << v17;
    *(_QWORD *)(v18 + v23) = v19 & ~(1 << (v20 + v7));
    goto LABEL_34;
  }
  if (v16 == 3)
    goto LABEL_71;
  v24 = v16 + 1;
  v25 = (unint64_t *)(v18 + 8 * (v16 + 1));
  v26 = *v25;
  if (*v25)
  {
    v27 = 0;
    v28 = v16 + 1;
    v24 = v4 >> 15;
    goto LABEL_29;
  }
  if (v16 == 2)
    goto LABEL_71;
  v25 = (unint64_t *)(v18 + 8 * (v16 + 2));
  v26 = *v25;
  if (*v25)
  {
    v27 = 8;
    v28 = v16 + 2;
    goto LABEL_29;
  }
  if (v16 == 1)
    goto LABEL_71;
  v24 = v16 + 3;
  v25 = (unint64_t *)(v18 + 8 * (v16 + 3));
  v26 = *v25;
  if (*v25)
  {
    v27 = 16;
    v28 = v16 + 3;
    v24 = v16 + 2;
    goto LABEL_29;
  }
  if (v4 < 0x8000)
LABEL_71:
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 2u, a2, v4, (uint64_t)"object falls off end of page");
  v28 = v16 | 4;
  v25 = (unint64_t *)(v18 + 8 * (v16 | 4));
  v26 = *v25;
  v27 = 24;
LABEL_29:
  v29 = __clz(__rbit64(v26));
  if (v29 == 63)
    v30 = -1;
  else
    v30 = ~(-2 << v29);
  *(_QWORD *)(v14 + 8 * v28) |= v30;
  *v25 = v26 & ~(1 << v29);
  *(_QWORD *)(v14 + 8 * v16) |= -1 << v17;
  v21 = v29 - v17 + ((v24 - v16) << 6) + 65;
  if (v24 > v16)
    memset((void *)(a1 + 8 * v16 + 24), 255, v27);
LABEL_34:
  if (!(v21 << 9) || (v31 = (v4 + (v21 << 9) - 1) >> 14, v15 > v31))
  {
    v32 = 1;
    if (*(_BYTE *)(a1 + 1))
      goto LABEL_37;
LABEL_57:
    pas_bitfit_view_note_max_free(v6);
    *(_BYTE *)(a1 + 1) = 1;
    v56 = *(unsigned __int16 *)(a1 + 2);
    *(_WORD *)(a1 + 2) = v56 - v21;
    if (v56 == (unsigned __int16)v21)
      goto LABEL_38;
LABEL_58:
    if (v32)
      goto LABEL_63;
    v57 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v58 = mach_approximate_time();
      v59 = *v57;
      v60 = v57[1];
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_62:
        *(_QWORD *)(a1 + 8) = v58 * v59 / v60;
        pas_bitfit_directory_view_did_become_empty_at_index((unint64_t *)(((8 * *(unsigned __int16 *)(v6 + 8)) | ((unint64_t)*(unsigned __int8 *)(v6 + 10) << 19))+ pas_compact_heap_reservation_base), *(unsigned int *)(v6 + 12));
        goto LABEL_63;
      }
    }
    else
    {
      get_timebase_info_slow();
      v58 = mach_approximate_time();
      v59 = timebase_info;
      v60 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_62;
    }
    pas_get_epoch_first = 1;
    goto LABEL_62;
  }
  v34 = v31 - v15 + 1;
  if (v34 < 8)
  {
    LOBYTE(v35) = 0;
    v36 = v4 >> 14;
    goto LABEL_52;
  }
  if (v34 < 0x20)
  {
    v35 = 0;
    v37 = 0;
LABEL_47:
    v48 = vdup_n_s8(v35);
    v36 = v15 | v34 & 0xFFFFFFFFFFFFFFF8;
    v49 = (int8x8_t *)(v37 + v15 + a1 + 80);
    v50 = v37 - (v34 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v51 = vadd_s8(*v49, (int8x8_t)-1);
      *v49++ = v51;
      v52 = vceqz_s8(v51);
      v48 = vsub_s8(vbic_s8(v48, v52), v52);
      v50 += 8;
    }
    while (v50);
    LOBYTE(v35) = *(_QWORD *)&v48 != 0;
    if (v34 == (v34 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_56;
    goto LABEL_52;
  }
  v37 = v34 & 0xFFFFFFFFFFFFFFE0;
  v38 = (int8x16_t *)(v15 + a1 + 96);
  v39 = 0uLL;
  v40.i64[0] = -1;
  v40.i64[1] = -1;
  v41 = v34 & 0xFFFFFFFFFFFFFFE0;
  v42 = 0uLL;
  do
  {
    v43 = vaddq_s8(v38[-1], v40);
    v44 = vaddq_s8(*v38, v40);
    v38[-1] = v43;
    *v38 = v44;
    v45 = vceqzq_s8(v43);
    v46 = vceqzq_s8(v44);
    v39 = vsubq_s8(vbicq_s8(v39, v45), v45);
    v42 = vsubq_s8(vbicq_s8(v42, v46), v46);
    v38 += 2;
    v41 -= 32;
  }
  while (v41);
  v47 = vorrq_s8(v39, v42);
  v35 = vmaxvq_u8((uint8x16_t)vtstq_s8(v47, v47)) & 1;
  if (v34 == v37)
    goto LABEL_56;
  if ((v34 & 0x18) != 0)
    goto LABEL_47;
  v36 = v15 | v37;
LABEL_52:
  v53 = v31 - v36 + 1;
  v54 = (_BYTE *)(v36 + a1 + 80);
  do
  {
    v55 = *v54 - 1;
    *v54++ = v55;
    if (!v55)
      LOBYTE(v35) = 1;
    --v53;
  }
  while (v53);
LABEL_56:
  v32 = v35 == 0;
  if (!*(_BYTE *)(a1 + 1))
    goto LABEL_57;
LABEL_37:
  v33 = *(unsigned __int16 *)(a1 + 2);
  *(_WORD *)(a1 + 2) = v33 - v21;
  if (v33 != (unsigned __int16)v21)
    goto LABEL_58;
LABEL_38:
  pas_bitfit_view_note_full_emptiness(v6, a1);
LABEL_63:
  v61 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v62 = __ldxr(v8);
    if (v62 != v61)
      break;
    if (!__stlxr(0, v8))
      return;
  }
  __clrex();
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 16));
}

unint64_t bmalloc_medium_bitfit_page_config_specialized_page_get_allocation_size_with_page(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a1 + 8 * ((a2 >> 15) & 3);
  v3 = *(_QWORD *)(v2 + 48) >> (a2 >> 9);
  if (v3)
    return (__clz(__rbit64(v3)) << 9) + 512;
  v5 = -(uint64_t)((a2 >> 9) & 0x3F);
  v6 = (unint64_t *)(v2 + 56);
  do
  {
    v8 = *v6++;
    v7 = v8;
    v5 += 64;
  }
  while (!v8);
  return ((__clz(__rbit64(v7)) + v5) << 9) + 512;
}

void bmalloc_medium_bitfit_page_config_specialized_page_shrink_with_page(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t StatusReg;
  unsigned int v18;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  int v52;
  unint64_t v53;
  _BOOL8 v54;
  unint64_t v55;
  uint64_t v56;
  int8x16_t *v57;
  int8x16_t v58;
  int8x16_t v59;
  unint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x8_t v67;
  uint64_t v68;
  int8x8_t *v69;
  int8x8_t v70;
  int8x8_t v71;
  uint64_t v72;
  _BYTE *v73;
  char v74;
  int v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  unsigned int v81;

  v10 = a2 & 0x1FFFF;
  v11 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v11)
    v12 = pas_compact_heap_reservation_base + 8 * v11;
  else
    v12 = 0;
  if (a3)
    v13 = (unint64_t)(a3 + 511) >> 9;
  else
    v13 = 1;
  v14 = v13;
  v15 = (a2 >> 9);
  v16 = (unsigned int *)(v12 + 16);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(v16))
  {
    if (!__stxr(v18, v16))
    {
      if (!v10)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 16));
  if (!v10)
    goto LABEL_15;
LABEL_13:
  v20 = a1 + 4 * ((unint64_t)(v15 - 1) >> 5);
  v21 = 1 << (v15 - 1);
  if ((*(_DWORD *)(v20 + 16) & v21) == 0 && (*(_DWORD *)(v20 + 48) & v21) == 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 2u, a2, v10, (uint64_t)"previous bit is not free or end of object");
LABEL_15:
  v22 = a1 + 16;
  if (((*(_DWORD *)(a1 + 16 + ((v10 >> 12) & 0x1C)) >> (v10 >> 9)) & 1) != 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 2u, a2, v10, (uint64_t)"free bit set");
  v23 = v10 >> 15;
  v24 = (v10 >> 9) & 0x3F;
  v25 = a1 + 48;
  v26 = *(_QWORD *)(a1 + 48 + 8 * (v10 >> 15));
  if (v26 >> v24)
  {
    v27 = __clz(__rbit64(v26 >> v24));
    v28 = v27 + 1 - v13;
    if (v27 + 1 >= v13)
    {
      if (v27 + 1 != v13)
      {
        if (v28 == 64)
          v29 = -1;
        else
          v29 = ~(-1 << v28);
        v30 = v13 + v24;
        v31 = 8 * v23;
        *(_QWORD *)(v22 + v31) |= v29 << v30;
        *(_QWORD *)(v25 + v31) = v26 & ~(1 << (v27 + v15)) | (1 << (v30 - 1));
        v14 = v27 + 1;
      }
      goto LABEL_46;
    }
LABEL_85:
    pas_deallocation_did_fail((uint64_t)"attempt to shrink to a larger size", a2, a3, a4, a5, a6, a7, a8);
  }
  if (v23 == 3)
    goto LABEL_86;
  v32 = v23 + 1;
  v33 = (unint64_t *)(v25 + 8 * (v23 + 1));
  v34 = *v33;
  if (*v33)
  {
    v35 = 0;
    v36 = v23 + 1;
    v32 = v10 >> 15;
    goto LABEL_34;
  }
  if (v23 == 2)
    goto LABEL_86;
  v33 = (unint64_t *)(v25 + 8 * (v23 + 2));
  v34 = *v33;
  if (*v33)
  {
    v35 = 1;
    v36 = v23 + 2;
    goto LABEL_34;
  }
  if (v23 == 1)
    goto LABEL_86;
  v32 = v23 + 3;
  v33 = (unint64_t *)(v25 + 8 * (v23 + 3));
  v34 = *v33;
  if (*v33)
  {
    v35 = 2;
    v36 = v23 + 3;
    v32 = v23 + 2;
    goto LABEL_34;
  }
  if (v10 < 0x8000)
LABEL_86:
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 2u, a2, v10, (uint64_t)"object falls off end of page");
  v36 = v23 | 4;
  v33 = (unint64_t *)(v25 + 8 * (v23 | 4));
  v34 = *v33;
  v35 = 3;
LABEL_34:
  v37 = __clz(__rbit64(v34));
  v38 = v37 - v24 + ((v32 - v23) << 6) + 65;
  v39 = v38 - v13;
  if (v38 < v13)
    goto LABEL_85;
  if (v38 != v13)
  {
    v40 = (v13 + v15) >> 6;
    v41 = (v13 + v15) & 0x3F;
    *(_DWORD *)(v25 + (((v13 + v15 - 1) >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << (v13 + v15 - 1);
    v42 = *v33;
    if (v40 == v36)
    {
      v43 = -1;
      if (v39 != 64)
        v43 = ~(-1 << v39);
      *(_QWORD *)(v22 + 8 * v36) |= v43 << v41;
      *v33 = v42 & ~(1 << v37);
    }
    else
    {
      v44 = 8 * v36;
      if (v37 == 63)
        v45 = -1;
      else
        v45 = ~(-2 << v37);
      *(_QWORD *)(v22 + v44) |= v45;
      *v33 = v42 & ~(1 << v37);
      *(_QWORD *)(v22 + 8 * v40) |= -1 << v41;
      if (v40 < v32)
        memset((void *)(a1 + 8 * v40 + 24), 255, 8 * (v23 - v40 + v35));
    }
    v14 = v38;
  }
LABEL_46:
  v46 = v14 - v13;
  v47 = (v10 + (v13 << 9) + 0x3FFF) & 0xFFFFFFFFFFFFC000;
  v48 = v10 + (v14 << 9);
  if (v48 < v47)
  {
    v48 = 0;
    v47 = 0;
  }
  if (v47 == v48 || (v49 = v47 >> 14, v50 = (v48 - 1) >> 14, v47 >> 14 > v50))
  {
    v51 = 1;
    if (*(_BYTE *)(a1 + 1))
      goto LABEL_51;
LABEL_71:
    pas_bitfit_view_note_max_free(v12);
    *(_BYTE *)(a1 + 1) = 1;
    v75 = *(unsigned __int16 *)(a1 + 2);
    *(_WORD *)(a1 + 2) = v75 - v46;
    if (v75 == v46)
      goto LABEL_52;
LABEL_72:
    if (v51)
      goto LABEL_77;
    v76 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v77 = mach_approximate_time();
      v78 = *v76;
      v79 = v76[1];
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_76:
        *(_QWORD *)(a1 + 8) = v77 * v78 / v79;
        pas_bitfit_directory_view_did_become_empty_at_index((unint64_t *)(((8 * *(unsigned __int16 *)(v12 + 8)) | ((unint64_t)*(unsigned __int8 *)(v12 + 10) << 19))+ pas_compact_heap_reservation_base), *(unsigned int *)(v12 + 12));
        goto LABEL_77;
      }
    }
    else
    {
      get_timebase_info_slow();
      v77 = mach_approximate_time();
      v78 = timebase_info;
      v79 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_76;
    }
    pas_get_epoch_first = 1;
    goto LABEL_76;
  }
  v53 = v50 - v49 + 1;
  if (v53 < 8)
  {
    LOBYTE(v54) = 0;
    v55 = v49;
    goto LABEL_66;
  }
  if (v53 < 0x20)
  {
    LODWORD(v54) = 0;
    v56 = 0;
LABEL_61:
    v67 = vdup_n_s8(v54);
    v55 = v49 + (v53 & 0xFFFFFFFFFFFFFFF8);
    v68 = v56 - (v53 & 0xFFFFFFFFFFFFFFF8);
    v69 = (int8x8_t *)(v56 + v49 + a1 + 80);
    do
    {
      v70 = vadd_s8(*v69, (int8x8_t)-1);
      *v69++ = v70;
      v71 = vceqz_s8(v70);
      v67 = vsub_s8(vbic_s8(v67, v71), v71);
      v68 += 8;
    }
    while (v68);
    v54 = *(_QWORD *)&v67 != 0;
    if (v53 == (v53 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_70;
    goto LABEL_66;
  }
  v56 = v53 & 0xFFFFFFFFFFFFFFE0;
  v57 = (int8x16_t *)(v49 + a1 + 96);
  v58 = 0uLL;
  v59.i64[0] = -1;
  v59.i64[1] = -1;
  v60 = v53 & 0xFFFFFFFFFFFFFFE0;
  v61 = 0uLL;
  do
  {
    v62 = vaddq_s8(v57[-1], v59);
    v63 = vaddq_s8(*v57, v59);
    v57[-1] = v62;
    *v57 = v63;
    v64 = vceqzq_s8(v62);
    v65 = vceqzq_s8(v63);
    v58 = vsubq_s8(vbicq_s8(v58, v64), v64);
    v61 = vsubq_s8(vbicq_s8(v61, v65), v65);
    v57 += 2;
    v60 -= 32;
  }
  while (v60);
  v66 = vorrq_s8(v58, v61);
  LODWORD(v54) = vmaxvq_u8((uint8x16_t)vtstq_s8(v66, v66)) & 1;
  if (v53 == v56)
    goto LABEL_70;
  if ((v53 & 0x18) != 0)
    goto LABEL_61;
  v55 = v49 + v56;
LABEL_66:
  v72 = v50 - v55 + 1;
  v73 = (_BYTE *)(v55 + a1 + 80);
  do
  {
    v74 = *v73 - 1;
    *v73++ = v74;
    if (!v74)
      LOBYTE(v54) = 1;
    --v72;
  }
  while (v72);
LABEL_70:
  v51 = !v54;
  if (!*(_BYTE *)(a1 + 1))
    goto LABEL_71;
LABEL_51:
  v52 = *(unsigned __int16 *)(a1 + 2);
  *(_WORD *)(a1 + 2) = v52 - v46;
  if (v52 != v46)
    goto LABEL_72;
LABEL_52:
  pas_bitfit_view_note_full_emptiness(v12, a1);
LABEL_77:
  v80 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v81 = __ldxr(v16);
    if (v81 != v80)
      break;
    if (!__stlxr(0, v16))
      return;
  }
  __clrex();
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 16));
}

uint64_t bmalloc_marge_bitfit_page_header_for_boundary(unint64_t a1)
{
  int v1;
  unsigned int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if (off_1ECF42608)
  {
    v1 = (a1 >> 22) ^ ((a1 >> 22) >> 4);
    v2 = ((v1 ^ 0xDEADBEEF) + 32 * v1) ^ (((v1 ^ 0xDEADBEEF) + 32 * v1) >> 11);
    v3 = (char *)off_1ECF42608 + 32;
    v4 = *((_DWORD *)off_1ECF42608 + 3) & v2;
    v5 = *((_QWORD *)off_1ECF42608 + 2 * v4 + 4);
    if (v5 == a1)
      return *(_QWORD *)&v3[16 * v4 + 8];
    v6 = v2 + 1;
    while (v5 != -1)
    {
      v4 = *((_DWORD *)off_1ECF42608 + 3) & v6;
      v5 = *(_QWORD *)&v3[16 * v4];
      ++v6;
      if (v5 == a1)
        return *(_QWORD *)&v3[16 * v4 + 8];
    }
  }
  return 0;
}

uint64_t bmalloc_marge_bitfit_boundary_for_page_header(uint64_t a1)
{
  return *(_QWORD *)(a1 - 16);
}

uint64_t bmalloc_marge_bitfit_page_header_for_boundary_remote(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  _QWORD *v8;

  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 72) + 16);
  v3 = *v2;
  if (*v2)
  {
    v4 = (a2 ^ (a2 >> 4) ^ 0xDEADBEEF) + 32 * (a2 ^ (a2 >> 4));
    v5 = ((a2 >> 36) ^ HIDWORD(a2) ^ 0xDEADBEEF) + 32 * ((a2 >> 36) ^ HIDWORD(a2));
    v6 = v4 ^ ((v5 ^ v4) >> 11) ^ v5;
    v7 = *((_DWORD *)v2 + 3);
    while (1)
    {
      v8 = (_QWORD *)(v3 + 16 * (v6 & v7));
      if (*v8 == -1)
      {
        if (v8[1] != 1)
          return 0;
      }
      else if (*v8 == a2)
      {
        return v8[1];
      }
      ++v6;
    }
  }
  return 0;
}

_QWORD *bmalloc_marge_bitfit_create_page_header(unint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;
  int v10;
  unsigned int v11;

  if (!a3)
  {
    v5 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v5, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  v7 = (_QWORD *)pas_utility_heap_try_allocate_with_alignment(544, 0x10uLL, (uint64_t)"pas_page_header_table/header");
  *v7 = a1;
  v8 = v7 + 2;
  pas_lock_free_read_ptr_ptr_hashtable_set(&off_1ECF42608, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x400000, a1, (unint64_t)(v7 + 2));
  if (a3)
    return v8;
  v10 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v11 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v11 != v10)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v8;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return v8;
}

void bmalloc_marge_bitfit_destroy_page_header(uint64_t a1, int a2)
{
  unint64_t StatusReg;
  unsigned int v4;
  int v6;
  unsigned int v7;

  if (a2)
  {
    pas_lock_free_read_ptr_ptr_hashtable_set(&off_1ECF42608, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x400000, *(_QWORD *)(a1 - 16), 0);
    pas_utility_heap_deallocate(a1 - 16);
  }
  else
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v4 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v4, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_8;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_8:
    pas_lock_free_read_ptr_ptr_hashtable_set(&off_1ECF42608, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x400000, *(_QWORD *)(a1 - 16), 0);
    pas_utility_heap_deallocate(a1 - 16);
    v6 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v7 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v7 != v6)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
}

uint64_t bmalloc_heap_config_allocate_marge_bitfit_page(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int64x2_t v12;
  void (*v13)(uint64_t@<X0>, size_t@<X1>, uint64_t *@<X3>, uint64_t@<X8>);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];

  v2 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 160);
  if ((**(_DWORD **)a1 & 0x20000) != 0)
    v3 = a1;
  else
    v3 = 0;
  v11 = 0;
  v7 = xmmword_19919FC10;
  v8 = 0x400000;
  v9 = 0u;
  v10 = 0u;
  v17[0] = v2;
  v17[1] = &v7;
  v17[2] = v3;
  v17[3] = a2;
  v12 = vdupq_n_s64(1uLL);
  v13 = megapage_cache_allocate_aligned;
  v14 = v17;
  v15 = 0;
  v16 = 0;
  v4 = pas_simple_large_free_heap_try_allocate(v2, 0x400000, 0x400000, 0, &v12);
  return (v5 << 63 >> 63) & v4;
}

uint64_t bmalloc_marge_bitfit_page_config_specialized_allocator_try_allocate(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t StatusReg;
  _QWORD *v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  unint64_t v13;
  os_unfair_lock *v14;
  os_unfair_lock_s *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  _BOOL4 v25;
  BOOL v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v35;
  int v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _BYTE *j;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int8x16_t *v88;
  unint64_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  uint8x16_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint8x16_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  int32x4_t v102;
  int32x4_t v103;
  unint64_t v104;
  int8x8_t *v105;
  int8x8_t v106;
  uint16x8_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  int8x16_t *v113;
  unint64_t v114;
  int8x16_t v115;
  unint64_t v116;
  int8x8_t *v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  __int16 v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unsigned __int128 v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _BYTE *i;
  int v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int8x16_t *v154;
  unint64_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  uint8x16_t v162;
  uint16x8_t v163;
  uint16x8_t v164;
  uint8x16_t v165;
  uint16x8_t v166;
  uint16x8_t v167;
  int32x4_t v168;
  int32x4_t v169;
  unint64_t v170;
  int8x8_t *v171;
  int8x8_t v172;
  uint16x8_t v173;
  uint64_t v174;
  unsigned __int8 *v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  int8x16_t *v179;
  unint64_t v180;
  int8x16_t v181;
  unint64_t v182;
  int8x8_t *v183;
  uint64_t v184;
  _BYTE *v185;
  unint64_t v186;
  void *v187;
  size_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __int16 v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unsigned __int128 v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t first_free_view;
  int v209;
  unsigned int v210;
  uint64_t v211;
  int v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v235;
  _QWORD v236[131];
  unint64_t v237;

  v4 = a1;
  v5 = 4096;
  if (a3)
    v5 = (a3 + 4095) & 0xFFFFFFFFFFFFF000;
  v6 = a1[1];
  v235 = v5 >> 12;
  v222 = -(uint64_t)a4;
  v223 = a4 - 1;
  v226 = v5;
  v227 = v5 - 1;
  if (v5 == 0x40000)
    v7 = -1;
  else
    v7 = ~(-1 << (v5 >> 12));
  v224 = v7;
  v225 = (v5 >> 12) + 63;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = (_QWORD *)&unk_1ECF57000;
  v10.i64[0] = 0x101010101010101;
  v10.i64[1] = 0x101010101010101;
  v11.i64[0] = -1;
  v11.i64[1] = -1;
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v232 = StatusReg;
  if (!v6)
    goto LABEL_259;
LABEL_7:
  v13 = 0;
  v14 = (os_unfair_lock *)(v6 + 20);
  v15 = (os_unfair_lock_s *)(v6 + 16);
  v233 = v6;
LABEL_9:
  if (!v13)
    goto LABEL_51;
  if (!pas_physical_page_sharing_pool_balancing_enabled)
    goto LABEL_46;
  v16 = v13 << 14;
  do
  {
    while (1)
    {
      v19 = v9[367];
      if ((v19 & 0x8000000000000000) != 0 || v19 < v16)
        break;
      v20 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v20 != v19)
      {
        __clrex();
LABEL_24:
        v21 = 0;
        goto LABEL_25;
      }
      if (__stlxr(v19 - v16, (unint64_t *)&pas_physical_page_sharing_pool_balance))
        goto LABEL_24;
      v21 = 1;
LABEL_25:
      __dmb(0xBu);
      if (v21)
        goto LABEL_46;
    }
    v17 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
    if (v17 == v19)
    {
      if (!__stlxr(0, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        v18 = 1;
        goto LABEL_17;
      }
    }
    else
    {
      __clrex();
    }
    v18 = 0;
LABEL_17:
    __dmb(0xBu);
  }
  while (!v18);
  v22 = v16 - v19;
  if (v16 != v19)
  {
    bzero(v236, 0x440uLL);
    while (1)
    {
      v23 = v237;
      if (v237 >= v22)
        break;
      v24 = pas_page_sharing_pool_take_least_recently_used((uint64_t)pas_physical_page_sharing_pool, v236, 0, 0);
      if (v24 != 3)
      {
        v23 = v237;
        v25 = v24 != 2;
        goto LABEL_33;
      }
    }
    v25 = 1;
LABEL_33:
    v26 = v23 >= v22;
    v27 = v23 - v22;
    v28 = !v26;
    if ((v25 & v28) != 0)
      v29 = 0;
    else
      v29 = v27;
    decommit_all((uint64_t)v236, 1);
    pas_bootstrap_free_heap_hold_lock_and_deallocate_for_config(v236[129], 32 * v236[130], 0);
    v10.i64[0] = 0x101010101010101;
    v10.i64[1] = 0x101010101010101;
    v11.i64[0] = -1;
    v11.i64[1] = -1;
    v12.i64[0] = 0x100000001;
    v12.i64[1] = 0x100000001;
    while (2)
    {
      v30 = pas_physical_page_sharing_pool_balance;
      v31 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v31 == v30)
      {
        if (!__stlxr(pas_physical_page_sharing_pool_balance + v29, (unint64_t *)&pas_physical_page_sharing_pool_balance))
        {
          v32 = 1;
          goto LABEL_45;
        }
      }
      else
      {
        __clrex();
      }
      v32 = 0;
LABEL_45:
      __dmb(0xBu);
      if (v32)
        break;
      continue;
    }
  }
LABEL_46:
  v33 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v14->_os_unfair_lock_opaque))
  {
    if (!__stxr(v33, &v14->_os_unfair_lock_opaque))
      goto LABEL_51;
  }
  __clrex();
  os_unfair_lock_lock(v14);
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v11.i64[0] = -1;
  v11.i64[1] = -1;
  v10.i64[0] = 0x101010101010101;
  v10.i64[1] = 0x101010101010101;
LABEL_51:
  v35 = *(_DWORD *)(StatusReg + 24);
  while (2)
  {
    if (__ldaxr(&v15->_os_unfair_lock_opaque))
    {
      __clrex();
      os_unfair_lock_lock(v15);
      v12.i64[0] = 0x100000001;
      v12.i64[1] = 0x100000001;
      v11.i64[0] = -1;
      v11.i64[1] = -1;
      v10.i64[0] = 0x101010101010101;
      v10.i64[1] = 0x101010101010101;
      if (!*(_BYTE *)(v6 + 11))
        goto LABEL_104;
      goto LABEL_57;
    }
    if (__stxr(v35, &v15->_os_unfair_lock_opaque))
      continue;
    break;
  }
  if (*(_BYTE *)(v6 + 11))
  {
LABEL_57:
    if (off_1ECF42608)
    {
      v37 = (*(_QWORD *)v6 >> 22) ^ ((*(_QWORD *)v6 >> 22) >> 4);
      v38 = ((v37 ^ 0xDEADBEEF) + 32 * v37) ^ (((v37 ^ 0xDEADBEEF) + 32 * v37) >> 11);
      v39 = (char *)off_1ECF42608 + 32;
      v40 = v38 & *((_DWORD *)off_1ECF42608 + 3);
      v41 = *((_QWORD *)off_1ECF42608 + 2 * v40 + 4);
      if (v41 == *(_QWORD *)v6)
      {
LABEL_62:
        v43 = *(_QWORD *)&v39[16 * v40 + 8];
        goto LABEL_64;
      }
      v42 = v38 + 1;
      while (v41 != -1)
      {
        v40 = *((_DWORD *)off_1ECF42608 + 3) & v42;
        v41 = *(_QWORD *)&v39[16 * v40];
        ++v42;
        if (v41 == *(_QWORD *)v6)
          goto LABEL_62;
      }
    }
    v43 = 0;
LABEL_64:
    v44 = 0;
    v45 = 0;
    v46 = v43 + 16;
    v47 = v43 + 144;
    v48 = v43 + 24;
    while (1)
    {
      v49 = *(_QWORD *)(v46 + 8 * v45);
      if (v49)
        break;
      v64 = v45;
LABEL_99:
      v45 = v64 + 1;
      if (v64 + 1 >= 0x10)
      {
        v66 = 0;
        goto LABEL_103;
      }
    }
    v50 = 0;
    v51 = *(_QWORD *)(v46 + 8 * v45);
    while (1)
    {
      v52 = __clz(__rbit64(v51));
      v53 = v52 + v50;
      v54 = __clz(__rbit64(~(v51 >> v52)));
      v55 = v235 - v54;
      if (v235 <= v54)
      {
        if (a4 <= 0x1000)
          goto LABEL_107;
        v61 = v53 + (v45 << 6);
        v62 = (v61 + v54) << 12;
        v63 = (v223 + (v61 << 12)) & v222;
        if (v62 - v63 >= v226)
          break;
      }
      if (v54 + v53 < 0x40)
      {
        if (v44 <= v54)
          v44 = v54;
        v50 += v54 + v52;
        v51 >>= v54 + v52;
        v64 = v45;
        if (!v51)
          goto LABEL_99;
      }
      else
      {
        v56 = v45 + 1;
        if (v45 + 1 > 0xF)
          goto LABEL_101;
        v57 = (v223 + (v45 << 18) + (v53 << 12)) & v222;
        if (a4 <= 0x1000)
        {
          v58 = ~v45;
          v59 = (uint64_t *)(v48 + 8 * v45);
          do
          {
            v60 = *v59;
            if (*v59 != -1)
              goto LABEL_90;
            if (v55 < 0x41)
              goto LABEL_106;
            v55 -= 64;
            --v58;
            ++v59;
          }
          while (v58 != -16);
          v56 = 16;
LABEL_101:
          v66 = 0;
          if (v44 <= ((v56 - v45) << 6) - v53)
            v44 = ((v56 - v45) << 6) - v53;
LABEL_103:
          v67 = v44 << 12;
          goto LABEL_136;
        }
        v58 = ~v45;
        v59 = (uint64_t *)(v48 + 8 * v45);
        v65 = (v45 << 18) - v57 + 0x80000;
        while (1)
        {
          v60 = *v59;
          if (*v59 != -1)
            break;
          if (v55 > 0x40)
          {
            v55 -= 64;
          }
          else if (v65 >= v226)
          {
            v45 = v57 >> 18;
            v53 = (v57 >> 12) & 0x3F;
LABEL_106:
            v64 = -(uint64_t)v58;
            v60 = -1;
LABEL_185:
            v138 = (v45 << 18) + (v53 << 12);
            v139 = v138 >> 14;
            v231 = v138;
            v140 = (v138 + v227) >> 14;
            if (v13)
            {
              v220 = v49;
              v221 = v53;
              v229 = v13;
              v141 = v43 + 16;
              v142 = v43;
              v143 = v64;
              v219 = (v138 + v227) >> 14;
              v144 = v138 >> 14;
              os_unfair_lock_assert_owner(v14);
              v64 = v143;
              v43 = v142;
              v49 = v220;
              v46 = v141;
              v145 = v219 - v144;
              if (v219 >= v144)
              {
                for (i = (_BYTE *)(v142 + v144 + 272); ; ++i)
                {
                  v147 = *i;
                  if (v147 == 255)
                  {
                    *i = 1;
                    if (!v145)
                      break;
                  }
                  else
                  {
                    *i = v147 + 1;
                    if (!v145)
                      break;
                  }
                  --v145;
                }
              }
              v10.i64[0] = 0x101010101010101;
              v10.i64[1] = 0x101010101010101;
              v11.i64[0] = -1;
              v11.i64[1] = -1;
              v12.i64[0] = 0x100000001;
              v12.i64[1] = 0x100000001;
              v13 = v229;
              v53 = v221;
LABEL_227:
              v186 = (0xFFFFFFFFFFFFFFFFLL >> (64 - v53)) & v49;
              if (!v53)
                v186 = 0;
              *(_QWORD *)(v46 + 8 * v45) = v186;
              if (v45 + 1 < v64)
              {
                v187 = (void *)(v43 + 8 * v45 + 24);
                v188 = 8 * (v64 + ~v45);
                v189 = v43;
                v190 = v64;
                bzero(v187, v188);
                v64 = v190;
                v43 = v189;
                v12.i64[0] = 0x100000001;
                v12.i64[1] = 0x100000001;
                v11.i64[0] = -1;
                v11.i64[1] = -1;
                v10.i64[0] = 0x101010101010101;
                v10.i64[1] = 0x101010101010101;
              }
              v191 = ((_BYTE)v53 + (_BYTE)v225) & 0x3F;
              *(_QWORD *)(v47 + 8 * v64) |= 1 << v191;
              if (v191 == 63)
                v192 = 0;
              else
                v192 = (-2 << v191) & v60;
              *v59 = v192;
              v193 = *(_WORD *)(v43 + 2);
              StatusReg = v232;
              v6 = v233;
              v9 = (_QWORD *)&unk_1ECF57000;
              if (v193)
              {
LABEL_235:
                *(_WORD *)(v43 + 2) = v193 + (v226 >> 12);
                v67 = v231 + *(_QWORD *)(v43 - 16);
                v66 = 1;
                if (!v13)
                  goto LABEL_159;
                goto LABEL_154;
              }
              v194 = ((8 * *(unsigned __int16 *)(v233 + 8)) | ((unint64_t)*(unsigned __int8 *)(v233 + 10) << 19))
                   + pas_compact_heap_reservation_base;
              v195 = *(unsigned int *)(v233 + 12);
              v196 = *(unsigned int *)(v194 + 68);
              if ((_DWORD)v196)
                v197 = pas_compact_heap_reservation_base + 8 * v196;
              else
                v197 = 0;
              v198 = *(unsigned int *)(v197 + ((v195 >> 5) & 0x7FFFFFC));
              v199 = pas_compact_heap_reservation_base + 8 * v198;
              if (!(_DWORD)v198)
                v199 = 0;
              *(_BYTE *)(v199 + (v195 & 0x7F)) = -2;
              do
              {
LABEL_250:
                v203 = *(_QWORD *)(v194 + 8);
                v204 = *(_QWORD *)v194;
                if (*(_QWORD *)v194 >= v195)
                  v205 = v195;
                else
                  v205 = *(_QWORD *)v194;
              }
              while (v203 == -1);
              if ((v203 & 1) != 0)
              {
                v200 = v203 + 1;
              }
              else
              {
                v200 = *(_QWORD *)(v194 + 8);
                if (v204 <= v195)
                  goto LABEL_235;
              }
              v201 = __ldxp((unsigned __int128 *)v194);
              if ((unint64_t)v201 ^ v204 | *((_QWORD *)&v201 + 1) ^ v203)
              {
                __clrex();
              }
              else if (!__stlxp(__PAIR128__(v200, v205), (unsigned __int128 *)v194))
              {
                v202 = 1;
                goto LABEL_249;
              }
              v202 = 0;
LABEL_249:
              __dmb(0xBu);
              if (v202)
                goto LABEL_235;
              goto LABEL_250;
            }
            v148 = v140 - v139;
            if (v140 < v139)
              goto LABEL_227;
            v149 = v148 + 1;
            if (v148 + 1 >= 8)
            {
              if (v149 >= 0x20)
              {
                v152 = 0uLL;
                v151 = v149 & 0xFFFFFFFFFFFFFFE0;
                v153 = 0uLL;
                v154 = (int8x16_t *)(v43 + v139 + 288);
                v155 = v149 & 0xFFFFFFFFFFFFFFE0;
                v156 = 0uLL;
                v157 = 0uLL;
                v158 = 0uLL;
                v159 = 0uLL;
                v160 = 0uLL;
                v161 = 0uLL;
                do
                {
                  v162 = (uint8x16_t)vceqq_s8(v154[-1], v11);
                  v163 = vmovl_u8(*(uint8x8_t *)v162.i8);
                  v164 = vmovl_high_u8(v162);
                  v165 = (uint8x16_t)vceqq_s8(*v154, v11);
                  v166 = vmovl_u8(*(uint8x8_t *)v165.i8);
                  v167 = vmovl_high_u8(v165);
                  v157 = vaddq_s32(v157, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v164), v12));
                  v156 = vaddq_s32(v156, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v164.i8), v12));
                  v153 = vaddq_s32(v153, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v163), v12));
                  v152 = vaddq_s32(v152, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v163.i8), v12));
                  v161 = vaddq_s32(v161, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v167), v12));
                  v160 = vaddq_s32(v160, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v167.i8), v12));
                  v159 = vaddq_s32(v159, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v166), v12));
                  v158 = vaddq_s32(v158, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v166.i8), v12));
                  v154 += 2;
                  v155 -= 32;
                }
                while (v155);
                v83 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v158, v152), vaddq_s32(v160, v156)), vaddq_s32(vaddq_s32(v159, v153), vaddq_s32(v161, v157))));
                if (v149 == v151)
                  goto LABEL_212;
                if ((v149 & 0x18) == 0)
                {
                  v150 = v139 + v151;
                  goto LABEL_207;
                }
              }
              else
              {
                LODWORD(v83) = 0;
                v151 = 0;
              }
              v150 = v139 + (v149 & 0xFFFFFFFFFFFFFFF8);
              v168 = 0uLL;
              v169 = (int32x4_t)v83;
              v170 = v151 - (v149 & 0xFFFFFFFFFFFFFFF8);
              v171 = (int8x8_t *)(v43 + v151 + v139 + 272);
              do
              {
                v172 = *v171++;
                v173 = vmovl_u8((uint8x8_t)vceq_s8(v172, (int8x8_t)-1));
                v168 = vaddq_s32(v168, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v173), v12));
                v169 = vaddq_s32(v169, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v173.i8), v12));
                v170 += 8;
              }
              while (v170);
              v83 = vaddvq_s32(vaddq_s32(v169, v168));
              if (v149 != (v149 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_207;
            }
            else
            {
              LODWORD(v83) = 0;
              v150 = v139;
LABEL_207:
              v174 = v140 - v150 + 1;
              v175 = (unsigned __int8 *)(v43 + v150 + 272);
              do
              {
                v176 = *v175++;
                if (v176 == 255)
                  v83 = (v83 + 1);
                else
                  v83 = v83;
                --v174;
              }
              while (v174);
            }
LABEL_212:
            if (!(_DWORD)v83)
            {
              v177 = v148 + 1;
              if (v177 >= 8)
              {
                if (v177 < 0x20)
                {
                  v178 = 0;
                  goto LABEL_220;
                }
                v178 = v177 & 0xFFFFFFFFFFFFFFE0;
                v179 = (int8x16_t *)(v43 + v139 + 288);
                v180 = v177 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v181 = vaddq_s8(*v179, v10);
                  v179[-1] = vaddq_s8(v179[-1], v10);
                  *v179 = v181;
                  v179 += 2;
                  v180 -= 32;
                }
                while (v180);
                if (v177 == v178)
                  goto LABEL_227;
                if ((v177 & 0x18) != 0)
                {
LABEL_220:
                  v182 = v178 - (v177 & 0xFFFFFFFFFFFFFFF8);
                  v183 = (int8x8_t *)(v43 + v178 + v139 + 272);
                  do
                  {
                    *v183 = vadd_s8(*v183, (int8x8_t)0x101010101010101);
                    ++v183;
                    v182 += 8;
                  }
                  while (v182);
                  v139 += v177 & 0xFFFFFFFFFFFFFFF8;
                  if (v177 == (v177 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_227;
                }
                else
                {
                  v139 += v178;
                }
              }
              v184 = v140 - v139 + 1;
              v185 = (_BYTE *)(v43 + v139 + 272);
              do
              {
                ++*v185++;
                --v184;
              }
              while (v184);
              goto LABEL_227;
            }
LABEL_135:
            v67 = 0;
            v66 = v83 << 32;
LABEL_136:
            StatusReg = v232;
            v6 = v233;
            v9 = (_QWORD *)&unk_1ECF57000;
            if (!v13)
              goto LABEL_159;
LABEL_154:
            v122 = *(_DWORD *)(StatusReg + 24);
            while (1)
            {
              v123 = __ldxr(&v14->_os_unfair_lock_opaque);
              if (v123 != v122)
                break;
              if (!__stlxr(0, &v14->_os_unfair_lock_opaque))
                goto LABEL_159;
            }
            __clrex();
            os_unfair_lock_unlock(v14);
            v12.i64[0] = 0x100000001;
            v12.i64[1] = 0x100000001;
            v11.i64[0] = -1;
            v11.i64[1] = -1;
            v10.i64[0] = 0x101010101010101;
            v10.i64[1] = 0x101010101010101;
LABEL_159:
            v13 = HIDWORD(v66);
            if (HIDWORD(v66))
            {
              v124 = *(_DWORD *)(StatusReg + 24);
              while (1)
              {
                v125 = __ldxr(&v15->_os_unfair_lock_opaque);
                if (v125 != v124)
                  break;
                if (!__stlxr(0, &v15->_os_unfair_lock_opaque))
                  goto LABEL_9;
              }
              __clrex();
              os_unfair_lock_unlock(v15);
              v12.i64[0] = 0x100000001;
              v12.i64[1] = 0x100000001;
              v11.i64[0] = -1;
              v11.i64[1] = -1;
              v10.i64[0] = 0x101010101010101;
              v10.i64[1] = 0x101010101010101;
              goto LABEL_9;
            }
            if ((v66 & 1) != 0)
            {
              v209 = *(_DWORD *)(StatusReg + 24);
              while (1)
              {
                v210 = __ldxr(&v15->_os_unfair_lock_opaque);
                if (v210 != v209)
                  break;
                if (!__stlxr(0, &v15->_os_unfair_lock_opaque))
                  return 0;
              }
              v211 = 0;
              v14 = v15;
LABEL_268:
              __clrex();
              os_unfair_lock_unlock(v14);
              return v211;
            }
            v4 = a1;
            v206 = pas_bitfit_allocator_finish_failing(a1, v6, v226, a4, v67, (uint64_t)&unk_1E35BE730);
            v12.i64[0] = 0x100000001;
            v12.i64[1] = 0x100000001;
            v11.i64[0] = -1;
            v11.i64[1] = -1;
            v10.i64[0] = 0x101010101010101;
            v10.i64[1] = 0x101010101010101;
            v6 = v206;
            if (!v206)
            {
LABEL_259:
              v207 = *(_QWORD *)(StatusReg + 752);
              if (v207)
                pas_thread_local_cache_stop_local_allocators_if_necessary(v207, a2, 0);
              first_free_view = pas_bitfit_size_class_get_first_free_view((unint64_t *)*v4, (uint64_t)&unk_1E35BE730);
              if (!first_free_view)
                return 2;
              v6 = first_free_view;
              v4[1] = first_free_view;
              v10.i64[0] = 0x101010101010101;
              v10.i64[1] = 0x101010101010101;
              v11.i64[0] = -1;
              v11.i64[1] = -1;
              v12.i64[0] = 0x100000001;
              v12.i64[1] = 0x100000001;
            }
            goto LABEL_7;
          }
          --v58;
          ++v59;
          v65 += 0x40000;
          v56 = 16;
          if (v58 == -16)
            goto LABEL_101;
        }
LABEL_90:
        v64 = -(uint64_t)v58;
        v50 = __clz(__rbit64(~v60));
        if (v50 >= v55)
        {
          if (a4 <= 0x1000)
            goto LABEL_184;
          if ((v64 << 18) - v57 + (v50 << 12) >= v226)
          {
            v45 = v57 >> 18;
            v53 = (v57 >> 12) & 0x3F;
LABEL_184:
            v59 = (uint64_t *)(v46 + 8 * v64);
            goto LABEL_185;
          }
        }
        if (v44 <= v50 - v53 + ((v64 - v45) << 6))
          v44 = v50 - v53 + ((v64 - v45) << 6);
        v51 = v60 >> v50;
        v49 = v60;
        v45 = v64;
        if (!(v60 >> v50))
          goto LABEL_99;
      }
    }
    v45 = v63 >> 18;
    v53 = (v63 >> 12) & 0x3F;
LABEL_107:
    v69 = (v45 << 18) + (v53 << 12);
    v70 = v69 >> 14;
    v71 = (v69 + v227) >> 14;
    if (v13)
    {
      v228 = (v45 << 18) + (v53 << 12);
      v230 = v45;
      v72 = v53;
      v73 = v13;
      v74 = v43 + 16;
      v75 = v49;
      v76 = v43;
      v77 = (v69 + v227) >> 14;
      os_unfair_lock_assert_owner(v14);
      v43 = v76;
      v49 = v75;
      v46 = v74;
      v78 = v77 - v70;
      if (v77 >= v70)
      {
        for (j = (_BYTE *)(v76 + v70 + 272); ; ++j)
        {
          v80 = *j;
          if (v80 == 255)
          {
            *j = 1;
            if (!v78)
              break;
          }
          else
          {
            *j = v80 + 1;
            if (!v78)
              break;
          }
          --v78;
        }
      }
      v10.i64[0] = 0x101010101010101;
      v10.i64[1] = 0x101010101010101;
      v11.i64[0] = -1;
      v11.i64[1] = -1;
      v12.i64[0] = 0x100000001;
      v12.i64[1] = 0x100000001;
      v13 = v73;
      LOBYTE(v53) = v72;
      v69 = v228;
      v45 = v230;
      goto LABEL_152;
    }
    v81 = v71 - v70;
    v10.i64[0] = 0x101010101010101;
    v10.i64[1] = 0x101010101010101;
    v11.i64[0] = -1;
    v11.i64[1] = -1;
    v12.i64[0] = 0x100000001;
    v12.i64[1] = 0x100000001;
    if (v71 < v70)
    {
LABEL_152:
      v120 = 8 * v45;
      *(_QWORD *)(v47 + v120) = *(_QWORD *)(v47 + 8 * v45) | (1 << (v53 + v225));
      *(_QWORD *)(v46 + v120) = v49 & ~(v224 << v53);
      v121 = *(_WORD *)(v43 + 2);
      StatusReg = v232;
      v6 = v233;
      v9 = &unk_1ECF57000;
      if (v121)
      {
LABEL_153:
        *(_WORD *)(v43 + 2) = v121 + (v226 >> 12);
        v67 = v69 + *(_QWORD *)(v43 - 16);
        v66 = 1;
        if (!v13)
          goto LABEL_159;
        goto LABEL_154;
      }
      v126 = ((8 * *(unsigned __int16 *)(v233 + 8)) | ((unint64_t)*(unsigned __int8 *)(v233 + 10) << 19))
           + pas_compact_heap_reservation_base;
      v127 = *(unsigned int *)(v233 + 12);
      v128 = *(unsigned int *)(v126 + 68);
      if ((_DWORD)v128)
        v129 = pas_compact_heap_reservation_base + 8 * v128;
      else
        v129 = 0;
      v130 = *(unsigned int *)(v129 + ((v127 >> 5) & 0x7FFFFFC));
      v131 = pas_compact_heap_reservation_base + 8 * v130;
      if (!(_DWORD)v130)
        v131 = 0;
      *(_BYTE *)(v131 + (v127 & 0x7F)) = -2;
      while (1)
      {
        do
        {
          v135 = *(_QWORD *)(v126 + 8);
          v136 = *(_QWORD *)v126;
          if (*(_QWORD *)v126 >= v127)
            v137 = v127;
          else
            v137 = *(_QWORD *)v126;
        }
        while (v135 == -1);
        if ((v135 & 1) != 0)
        {
          v132 = v135 + 1;
        }
        else
        {
          v132 = *(_QWORD *)(v126 + 8);
          if (v136 <= v127)
            goto LABEL_153;
        }
        v133 = __ldxp((unsigned __int128 *)v126);
        if ((unint64_t)v133 ^ v136 | *((_QWORD *)&v133 + 1) ^ v135)
          break;
        if (__stlxp(__PAIR128__(v132, v137), (unsigned __int128 *)v126))
          goto LABEL_175;
        v134 = 1;
LABEL_176:
        __dmb(0xBu);
        if (v134)
          goto LABEL_153;
      }
      __clrex();
LABEL_175:
      v134 = 0;
      goto LABEL_176;
    }
    v82 = v81 + 1;
    if (v81 + 1 < 8)
    {
      LODWORD(v83) = 0;
      v84 = v69 >> 14;
      goto LABEL_129;
    }
    if (v82 >= 0x20)
    {
      v86 = 0uLL;
      v85 = v82 & 0xFFFFFFFFFFFFFFE0;
      v87 = 0uLL;
      v88 = (int8x16_t *)(v43 + v70 + 288);
      v89 = v82 & 0xFFFFFFFFFFFFFFE0;
      v90 = 0uLL;
      v91 = 0uLL;
      v92 = 0uLL;
      v93 = 0uLL;
      v94 = 0uLL;
      v95 = 0uLL;
      do
      {
        v96 = (uint8x16_t)vceqq_s8(v88[-1], v11);
        v97 = vmovl_u8(*(uint8x8_t *)v96.i8);
        v98 = vmovl_high_u8(v96);
        v99 = (uint8x16_t)vceqq_s8(*v88, v11);
        v100 = vmovl_u8(*(uint8x8_t *)v99.i8);
        v101 = vmovl_high_u8(v99);
        v91 = vaddq_s32(v91, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v98), v12));
        v90 = vaddq_s32(v90, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v98.i8), v12));
        v87 = vaddq_s32(v87, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v97), v12));
        v86 = vaddq_s32(v86, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v97.i8), v12));
        v95 = vaddq_s32(v95, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v101), v12));
        v94 = vaddq_s32(v94, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v101.i8), v12));
        v93 = vaddq_s32(v93, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v100), v12));
        v92 = vaddq_s32(v92, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v100.i8), v12));
        v88 += 2;
        v89 -= 32;
      }
      while (v89);
      v83 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v92, v86), vaddq_s32(v94, v90)), vaddq_s32(vaddq_s32(v93, v87), vaddq_s32(v95, v91))));
      if (v82 == v85)
        goto LABEL_134;
      if ((v82 & 0x18) == 0)
      {
        v84 = v70 + v85;
LABEL_129:
        v108 = v71 - v84 + 1;
        v109 = (unsigned __int8 *)(v43 + v84 + 272);
        do
        {
          v110 = *v109++;
          if (v110 == 255)
            v83 = (v83 + 1);
          else
            v83 = v83;
          --v108;
        }
        while (v108);
LABEL_134:
        if ((_DWORD)v83)
          goto LABEL_135;
        v111 = v81 + 1;
        if (v111 >= 8)
        {
          if (v111 < 0x20)
          {
            v112 = 0;
            goto LABEL_145;
          }
          v112 = v111 & 0xFFFFFFFFFFFFFFE0;
          v113 = (int8x16_t *)(v43 + v70 + 288);
          v114 = v111 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v115 = vaddq_s8(*v113, v10);
            v113[-1] = vaddq_s8(v113[-1], v10);
            *v113 = v115;
            v113 += 2;
            v114 -= 32;
          }
          while (v114);
          if (v111 == v112)
            goto LABEL_152;
          if ((v111 & 0x18) != 0)
          {
LABEL_145:
            v116 = v112 - (v111 & 0xFFFFFFFFFFFFFFF8);
            v117 = (int8x8_t *)(v43 + v112 + v70 + 272);
            do
            {
              *v117 = vadd_s8(*v117, (int8x8_t)0x101010101010101);
              ++v117;
              v116 += 8;
            }
            while (v116);
            v70 += v111 & 0xFFFFFFFFFFFFFFF8;
            if (v111 == (v111 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_152;
            goto LABEL_150;
          }
          v70 += v112;
        }
LABEL_150:
        v118 = v71 - v70 + 1;
        v119 = (_BYTE *)(v43 + v70 + 272);
        do
        {
          ++*v119++;
          --v118;
        }
        while (v118);
        goto LABEL_152;
      }
    }
    else
    {
      LODWORD(v83) = 0;
      v85 = 0;
    }
    v84 = v70 + (v82 & 0xFFFFFFFFFFFFFFF8);
    v102 = 0uLL;
    v103 = (int32x4_t)v83;
    v104 = v85 - (v82 & 0xFFFFFFFFFFFFFFF8);
    v105 = (int8x8_t *)(v43 + v85 + v70 + 272);
    do
    {
      v106 = *v105++;
      v107 = vmovl_u8((uint8x8_t)vceq_s8(v106, (int8x8_t)-1));
      v102 = vaddq_s32(v102, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v107), v12));
      v103 = vaddq_s32(v103, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v107.i8), v12));
      v104 += 8;
    }
    while (v104);
    v83 = vaddvq_s32(vaddq_s32(v103, v102));
    if (v82 == (v82 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_134;
    goto LABEL_129;
  }
LABEL_104:
  v68 = pas_bitfit_allocator_commit_view((os_unfair_lock_s *)v6, (uint64_t)&unk_1E35BE730, v13 != 0);
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v11.i64[0] = -1;
  v11.i64[1] = -1;
  v10.i64[0] = 0x101010101010101;
  v10.i64[1] = 0x101010101010101;
  if ((v68 & 1) != 0)
    goto LABEL_57;
  v213 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v214 = __ldxr(&v15->_os_unfair_lock_opaque);
    if (v214 != v213)
      break;
    if (!__stlxr(0, &v15->_os_unfair_lock_opaque))
      goto LABEL_274;
  }
  __clrex();
  os_unfair_lock_unlock(v15);
LABEL_274:
  if (v13)
  {
    v215 = *(_DWORD *)(StatusReg + 24);
    v211 = 2;
    while (1)
    {
      v216 = __ldxr(&v14->_os_unfair_lock_opaque);
      if (v216 != v215)
        break;
      if (!__stlxr(0, &v14->_os_unfair_lock_opaque))
        return v211;
    }
    goto LABEL_268;
  }
  return 2;
}

void bmalloc_marge_bitfit_page_config_specialized_page_deallocate_with_page(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t StatusReg;
  unsigned int v10;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  int v32;
  unint64_t v33;
  _BOOL8 v34;
  unint64_t v35;
  uint64_t v36;
  int8x16_t *v37;
  int8x16_t v38;
  int8x16_t v39;
  unint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x8_t v47;
  uint64_t v48;
  int8x8_t *v49;
  int8x8_t v50;
  int8x8_t v51;
  uint64_t v52;
  _BYTE *v53;
  char v54;
  int v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  unsigned int v61;

  v4 = a2 & 0x3FFFFF;
  v5 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v5)
    v6 = pas_compact_heap_reservation_base + 8 * v5;
  else
    v6 = 0;
  v7 = (a2 >> 12) & 0x3FF;
  v8 = (unsigned int *)(v6 + 16);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(v8))
  {
    if (!__stxr(v10, v8))
    {
      if (!v4)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 16));
  if (!v4)
    goto LABEL_12;
LABEL_10:
  v12 = a1 + 4 * ((unint64_t)(v7 - 1) >> 5);
  v13 = 1 << (v7 - 1);
  if ((*(_DWORD *)(v12 + 16) & v13) == 0 && (*(_DWORD *)(v12 + 144) & v13) == 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 3u, a2, v4, (uint64_t)"previous bit is not free or end of object");
LABEL_12:
  v14 = a1 + 16;
  if (((*(_DWORD *)(a1 + 16 + ((v4 >> 15) & 0x7C)) >> (v4 >> 12)) & 1) != 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 3u, a2, v4, (uint64_t)"free bit set");
  v15 = v4 >> 18;
  v16 = (v4 >> 12) & 0x3F;
  v17 = *(_QWORD *)(a1 + 144 + 8 * (v4 >> 18));
  v18 = 8 * (v4 >> 18);
  if (v17 >> v16)
  {
    v19 = __clz(__rbit64(v17 >> v16));
    v20 = v19 + 1;
    if (v19 == 63)
      v21 = -1;
    else
      v21 = ~(-2 << v19);
    *(_QWORD *)(v14 + v18) |= v21 << v16;
    *(_QWORD *)(a1 + 144 + v18) = v17 & ~(1 << (v19 + v7));
  }
  else
  {
    v22 = 0;
    v23 = v16 - 1;
    v24 = v15 - 1;
    do
    {
      if (v18 + v22 == 120)
        pas_bitfit_page_deallocation_did_fail((const void *)a1, 3u, a2, v4, (uint64_t)"object falls off end of page");
      v25 = *(_QWORD *)(v18 + a1 + 144 + v22 + 8);
      v22 += 8;
      v23 -= 64;
      ++v24;
    }
    while (!v25);
    v26 = v18 + a1 + v22;
    v27 = __clz(__rbit64(v25));
    v20 = v27 - v23;
    if (v27 == 63)
      v28 = -1;
    else
      v28 = ~(-2 << v27);
    *(_QWORD *)(v26 + 16) |= v28;
    *(_QWORD *)(v26 + 144) = v25 & ~(1 << v27);
    *(_QWORD *)(v14 + v18) |= -1 << v16;
    if (v15 < v24)
      memset((void *)(a1 + 8 * v15 + 24), 255, v22 - 8);
  }
  if (!(v20 << 12) || (v29 = v4 >> 14, v30 = (v4 + (v20 << 12) - 1) >> 14, v4 >> 14 > v30))
  {
    v31 = 1;
    if (*(_BYTE *)(a1 + 1))
      goto LABEL_29;
LABEL_49:
    pas_bitfit_view_note_max_free(v6);
    *(_BYTE *)(a1 + 1) = 1;
    v55 = *(unsigned __int16 *)(a1 + 2);
    *(_WORD *)(a1 + 2) = v55 - v20;
    if (v55 == (unsigned __int16)v20)
      goto LABEL_30;
LABEL_50:
    if (v31)
      goto LABEL_55;
    v56 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v57 = mach_approximate_time();
      v58 = *v56;
      v59 = v56[1];
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_54:
        *(_QWORD *)(a1 + 8) = v57 * v58 / v59;
        pas_bitfit_directory_view_did_become_empty_at_index((unint64_t *)(((8 * *(unsigned __int16 *)(v6 + 8)) | ((unint64_t)*(unsigned __int8 *)(v6 + 10) << 19))+ pas_compact_heap_reservation_base), *(unsigned int *)(v6 + 12));
        goto LABEL_55;
      }
    }
    else
    {
      get_timebase_info_slow();
      v57 = mach_approximate_time();
      v58 = timebase_info;
      v59 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_54;
    }
    pas_get_epoch_first = 1;
    goto LABEL_54;
  }
  v33 = v30 - v29 + 1;
  if (v33 < 8)
  {
    LOBYTE(v34) = 0;
    v35 = v4 >> 14;
    goto LABEL_44;
  }
  if (v33 < 0x20)
  {
    LODWORD(v34) = 0;
    v36 = 0;
LABEL_39:
    v47 = vdup_n_s8(v34);
    v35 = v29 + (v33 & 0xFFFFFFFFFFFFFFF8);
    v48 = v36 - (v33 & 0xFFFFFFFFFFFFFFF8);
    v49 = (int8x8_t *)(v36 + v29 + a1 + 272);
    do
    {
      v50 = vadd_s8(*v49, (int8x8_t)-1);
      *v49++ = v50;
      v51 = vceqz_s8(v50);
      v47 = vsub_s8(vbic_s8(v47, v51), v51);
      v48 += 8;
    }
    while (v48);
    v34 = *(_QWORD *)&v47 != 0;
    if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_48;
    goto LABEL_44;
  }
  v36 = v33 & 0xFFFFFFFFFFFFFFE0;
  v37 = (int8x16_t *)(v29 + a1 + 288);
  v38 = 0uLL;
  v39.i64[0] = -1;
  v39.i64[1] = -1;
  v40 = v33 & 0xFFFFFFFFFFFFFFE0;
  v41 = 0uLL;
  do
  {
    v42 = vaddq_s8(v37[-1], v39);
    v43 = vaddq_s8(*v37, v39);
    v37[-1] = v42;
    *v37 = v43;
    v44 = vceqzq_s8(v42);
    v45 = vceqzq_s8(v43);
    v38 = vsubq_s8(vbicq_s8(v38, v44), v44);
    v41 = vsubq_s8(vbicq_s8(v41, v45), v45);
    v37 += 2;
    v40 -= 32;
  }
  while (v40);
  v46 = vorrq_s8(v38, v41);
  LODWORD(v34) = vmaxvq_u8((uint8x16_t)vtstq_s8(v46, v46)) & 1;
  if (v33 == v36)
    goto LABEL_48;
  if ((v33 & 0x18) != 0)
    goto LABEL_39;
  v35 = v29 + v36;
LABEL_44:
  v52 = v30 - v35 + 1;
  v53 = (_BYTE *)(v35 + a1 + 272);
  do
  {
    v54 = *v53 - 1;
    *v53++ = v54;
    if (!v54)
      LOBYTE(v34) = 1;
    --v52;
  }
  while (v52);
LABEL_48:
  v31 = !v34;
  if (!*(_BYTE *)(a1 + 1))
    goto LABEL_49;
LABEL_29:
  v32 = *(unsigned __int16 *)(a1 + 2);
  *(_WORD *)(a1 + 2) = v32 - v20;
  if (v32 != (unsigned __int16)v20)
    goto LABEL_50;
LABEL_30:
  pas_bitfit_view_note_full_emptiness(v6, a1);
LABEL_55:
  v60 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v61 = __ldxr(v8);
    if (v61 != v60)
      break;
    if (!__stlxr(0, v8))
      return;
  }
  __clrex();
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 16));
}

unint64_t bmalloc_marge_bitfit_page_config_specialized_page_get_allocation_size_with_page(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a1 + 8 * ((a2 >> 18) & 0xF);
  v3 = *(_QWORD *)(v2 + 144) >> (a2 >> 12);
  if (v3)
    return (__clz(__rbit64(v3)) << 12) + 4096;
  v5 = -(uint64_t)((a2 >> 12) & 0x3F);
  v6 = (unint64_t *)(v2 + 152);
  do
  {
    v8 = *v6++;
    v7 = v8;
    v5 += 64;
  }
  while (!v8);
  return ((__clz(__rbit64(v7)) + v5) << 12) + 4096;
}

void bmalloc_marge_bitfit_page_config_specialized_page_shrink_with_page(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t StatusReg;
  unsigned int v18;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  int v51;
  unint64_t v52;
  _BOOL8 v53;
  unint64_t v54;
  uint64_t v55;
  int8x16_t *v56;
  int8x16_t v57;
  int8x16_t v58;
  unint64_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x8_t v66;
  uint64_t v67;
  int8x8_t *v68;
  int8x8_t v69;
  int8x8_t v70;
  uint64_t v71;
  _BYTE *v72;
  char v73;
  int v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  unsigned int v80;

  v10 = a2 & 0x3FFFFF;
  v11 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v11)
    v12 = pas_compact_heap_reservation_base + 8 * v11;
  else
    v12 = 0;
  if (a3)
    v13 = (unint64_t)(a3 + 4095) >> 12;
  else
    v13 = 1;
  v14 = v13;
  v15 = (a2 >> 12) & 0x3FF;
  v16 = (unsigned int *)(v12 + 16);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(v16))
  {
    if (!__stxr(v18, v16))
    {
      if (!v10)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 16));
  if (!v10)
    goto LABEL_15;
LABEL_13:
  v20 = a1 + 4 * ((unint64_t)(v15 - 1) >> 5);
  v21 = 1 << (v15 - 1);
  if ((*(_DWORD *)(v20 + 16) & v21) == 0 && (*(_DWORD *)(v20 + 144) & v21) == 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 3u, a2, v10, (uint64_t)"previous bit is not free or end of object");
LABEL_15:
  v22 = a1 + 16;
  if (((*(_DWORD *)(a1 + 16 + ((v10 >> 15) & 0x7C)) >> (v10 >> 12)) & 1) != 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 3u, a2, v10, (uint64_t)"free bit set");
  v23 = v10 >> 18;
  v24 = (v10 >> 12) & 0x3F;
  v25 = a1 + 144;
  v26 = *(_QWORD *)(a1 + 144 + 8 * (v10 >> 18));
  v27 = v26 >> v24;
  if (!(v26 >> v24))
  {
    v33 = 8 * v23;
    v34 = (v23 << 6) - 960;
    do
    {
      if (!(v34 + v27))
        pas_bitfit_page_deallocation_did_fail((const void *)a1, 3u, a2, v10, (uint64_t)"object falls off end of page");
      ++v23;
      v35 = *(_QWORD *)(a1 + 152 + v33);
      v33 += 8;
      v27 += 64;
    }
    while (!v35);
    v36 = __clz(__rbit64(v35));
    v37 = v36 - v24 + v27 + 1;
    if (v13 <= v37)
    {
      if (v36 - (v13 + v24) + v27 == -1)
        goto LABEL_39;
      v38 = (v13 + v15) >> 6;
      v39 = (v13 + v15) & 0x3F;
      *(_DWORD *)(v25 + (((v13 + v15 - 1) >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << (v13 + v15 - 1);
      v40 = *(_QWORD *)(a1 + v33 + 144);
      if (v38 == v23)
      {
        v41 = v36 - (v13 + v24) + v27;
        if (v41 == 63)
          v42 = -1;
        else
          v42 = ~(-1 << (v41 + 1));
        *(_QWORD *)(a1 + v33 + 16) |= v42 << v39;
        *(_QWORD *)(a1 + v33 + 144) = v40 & ~(1 << v36);
      }
      else
      {
        v43 = v23 - 1;
        if (v36 == 63)
          v44 = -1;
        else
          v44 = ~(-2 << v36);
        *(_QWORD *)(a1 + v33 + 16) |= v44;
        *(_QWORD *)(a1 + v33 + 144) = v40 & ~(1 << v36);
        *(_QWORD *)(v22 + 8 * v38) |= -1 << v39;
        v14 = v37;
        if (v38 >= v43)
          goto LABEL_39;
        memset((void *)(8 * v38 + a1 + 24), 255, v33 - 8 * v38 - 8);
      }
      v14 = v37;
      goto LABEL_39;
    }
LABEL_79:
    pas_deallocation_did_fail((uint64_t)"attempt to shrink to a larger size", a2, a3, a4, a5, a6, a7, a8);
  }
  v28 = __clz(__rbit64(v27));
  v29 = v28 + 1 - v13;
  if (v28 + 1 < v13)
    goto LABEL_79;
  if (v28 + 1 != v13)
  {
    if (v29 == 64)
      v30 = -1;
    else
      v30 = ~(-1 << v29);
    v31 = v13 + v24;
    v32 = 8 * v23;
    *(_QWORD *)(v22 + v32) |= v30 << v31;
    *(_QWORD *)(v25 + v32) = v26 & ~(1 << (v28 + v15)) | (1 << (v31 - 1));
    v14 = v28 + 1;
  }
LABEL_39:
  v45 = v14 - v13;
  v46 = (v10 + (v13 << 12) + 0x3FFF) & 0xFFFFFFFFFFFFC000;
  v47 = v10 + (v14 << 12);
  if (v47 < v46)
  {
    v47 = 0;
    v46 = 0;
  }
  if (v46 == v47 || (v48 = v46 >> 14, v49 = (v47 - 1) >> 14, v46 >> 14 > v49))
  {
    v50 = 1;
    if (*(_BYTE *)(a1 + 1))
      goto LABEL_44;
LABEL_64:
    pas_bitfit_view_note_max_free(v12);
    *(_BYTE *)(a1 + 1) = 1;
    v74 = *(unsigned __int16 *)(a1 + 2);
    *(_WORD *)(a1 + 2) = v74 - v45;
    if (v74 == v45)
      goto LABEL_45;
LABEL_65:
    if (v50)
      goto LABEL_70;
    v75 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v76 = mach_approximate_time();
      v77 = *v75;
      v78 = v75[1];
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_69:
        *(_QWORD *)(a1 + 8) = v76 * v77 / v78;
        pas_bitfit_directory_view_did_become_empty_at_index((unint64_t *)(((8 * *(unsigned __int16 *)(v12 + 8)) | ((unint64_t)*(unsigned __int8 *)(v12 + 10) << 19))+ pas_compact_heap_reservation_base), *(unsigned int *)(v12 + 12));
        goto LABEL_70;
      }
    }
    else
    {
      get_timebase_info_slow();
      v76 = mach_approximate_time();
      v77 = timebase_info;
      v78 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_69;
    }
    pas_get_epoch_first = 1;
    goto LABEL_69;
  }
  v52 = v49 - v48 + 1;
  if (v52 < 8)
  {
    LOBYTE(v53) = 0;
    v54 = v48;
    goto LABEL_59;
  }
  if (v52 < 0x20)
  {
    LODWORD(v53) = 0;
    v55 = 0;
LABEL_54:
    v66 = vdup_n_s8(v53);
    v54 = v48 + (v52 & 0xFFFFFFFFFFFFFFF8);
    v67 = v55 - (v52 & 0xFFFFFFFFFFFFFFF8);
    v68 = (int8x8_t *)(v55 + v48 + a1 + 272);
    do
    {
      v69 = vadd_s8(*v68, (int8x8_t)-1);
      *v68++ = v69;
      v70 = vceqz_s8(v69);
      v66 = vsub_s8(vbic_s8(v66, v70), v70);
      v67 += 8;
    }
    while (v67);
    v53 = *(_QWORD *)&v66 != 0;
    if (v52 == (v52 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_63;
    goto LABEL_59;
  }
  v55 = v52 & 0xFFFFFFFFFFFFFFE0;
  v56 = (int8x16_t *)(v48 + a1 + 288);
  v57 = 0uLL;
  v58.i64[0] = -1;
  v58.i64[1] = -1;
  v59 = v52 & 0xFFFFFFFFFFFFFFE0;
  v60 = 0uLL;
  do
  {
    v61 = vaddq_s8(v56[-1], v58);
    v62 = vaddq_s8(*v56, v58);
    v56[-1] = v61;
    *v56 = v62;
    v63 = vceqzq_s8(v61);
    v64 = vceqzq_s8(v62);
    v57 = vsubq_s8(vbicq_s8(v57, v63), v63);
    v60 = vsubq_s8(vbicq_s8(v60, v64), v64);
    v56 += 2;
    v59 -= 32;
  }
  while (v59);
  v65 = vorrq_s8(v57, v60);
  LODWORD(v53) = vmaxvq_u8((uint8x16_t)vtstq_s8(v65, v65)) & 1;
  if (v52 == v55)
    goto LABEL_63;
  if ((v52 & 0x18) != 0)
    goto LABEL_54;
  v54 = v48 + v55;
LABEL_59:
  v71 = v49 - v54 + 1;
  v72 = (_BYTE *)(v54 + a1 + 272);
  do
  {
    v73 = *v72 - 1;
    *v72++ = v73;
    if (!v73)
      LOBYTE(v53) = 1;
    --v71;
  }
  while (v71);
LABEL_63:
  v50 = !v53;
  if (!*(_BYTE *)(a1 + 1))
    goto LABEL_64;
LABEL_44:
  v51 = *(unsigned __int16 *)(a1 + 2);
  *(_WORD *)(a1 + 2) = v51 - v45;
  if (v51 != v45)
    goto LABEL_65;
LABEL_45:
  pas_bitfit_view_note_full_emptiness(v12, a1);
LABEL_70:
  v79 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v80 = __ldxr(v16);
    if (v80 != v79)
      break;
    if (!__stlxr(0, v16))
      return;
  }
  __clrex();
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 16));
}

uint64_t bmalloc_heap_config_fast_megapage_kind(unint64_t a1)
{
  if (!(a1 >> 43)
    && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a1 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a1)) & 1) != 0)
  {
    return 1;
  }
  if (a1 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a1 >> 24)
    return 0;
  return (*(_DWORD *)((char *)off_1ECF425F8 + ((((a1 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a1) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
}

uint64_t bmalloc_heap_config_page_header(unint64_t a1)
{
  int v1;
  unsigned int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  if (off_1ECF42618)
  {
    v1 = (a1 >> 17) ^ ((a1 >> 17) >> 4);
    v2 = ((v1 ^ 0xDEADBEEF) + 32 * v1) ^ (((v1 ^ 0xDEADBEEF) + 32 * v1) >> 11);
    v3 = (char *)off_1ECF42618 + 32;
    v4 = *((_DWORD *)off_1ECF42618 + 3) & v2;
    v5 = *((_QWORD *)off_1ECF42618 + 2 * v4 + 4);
    if (v5 == (a1 & 0xFFFFFFFFFFFE0000))
    {
LABEL_6:
      v7 = *(_QWORD *)&v3[16 * v4 + 8];
      if (v7)
        return v7;
    }
    else
    {
      v6 = v2 + 1;
      while (v5 != -1)
      {
        v4 = *((_DWORD *)off_1ECF42618 + 3) & v6;
        v5 = *(_QWORD *)&v3[16 * v4];
        ++v6;
        if (v5 == (a1 & 0xFFFFFFFFFFFE0000))
          goto LABEL_6;
      }
    }
  }
  if (off_1ECF42608)
  {
    v9 = (a1 >> 22) ^ ((a1 >> 22) >> 4);
    v10 = ((v9 ^ 0xDEADBEEF) + 32 * v9) ^ (((v9 ^ 0xDEADBEEF) + 32 * v9) >> 11);
    v11 = (char *)off_1ECF42608 + 32;
    v12 = *((_DWORD *)off_1ECF42608 + 3) & v10;
    v13 = *((_QWORD *)off_1ECF42608 + 2 * v12 + 4);
    if (v13 == (a1 & 0xFFFFFFFFFFC00000))
      return *(_QWORD *)&v11[16 * v12 + 8];
    v14 = v10 + 1;
    while (v13 != -1)
    {
      v12 = *((_DWORD *)off_1ECF42608 + 3) & v14;
      v13 = *(_QWORD *)&v11[16 * v12];
      ++v14;
      if (v13 == (a1 & 0xFFFFFFFFFFC00000))
        return *(_QWORD *)&v11[16 * v12 + 8];
    }
  }
  return 0;
}

uint64_t bmalloc_aligned_allocator@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  int v11;
  char v12;
  int64x2_t v13;
  uint64_t (*v14)@<X0>(uint64_t@<X0>, unint64_t@<X1>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>);
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];

  v8 = (a1 + a2 - 1) & -a2;
  *(_QWORD *)(a6 + 48) = 0;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)a6 = 0u;
  v9 = *(uint64_t **)(*(_QWORD *)(a4 - 40) + 32);
  v18[1] = a5;
  v18[2] = 0;
  v18[0] = v9;
  v13 = vdupq_n_s64(1uLL);
  v14 = large_aligned_allocator;
  v15 = v18;
  v16 = 0;
  v17 = 0;
  result = pas_simple_large_free_heap_try_allocate(v9, v8, a2, a3, &v13);
  if ((v12 & 1) != 0)
  {
    *(_QWORD *)a6 = result;
    *(_QWORD *)(a6 + 8) = a1;
    *(_QWORD *)(a6 + 16) = result;
    *(_QWORD *)(a6 + 24) = 0;
    *(_QWORD *)(a6 + 32) = result + a1;
    *(_QWORD *)(a6 + 40) = v8 - a1;
    *(_DWORD *)(a6 + 48) = v11;
  }
  return result;
}

unint64_t *bmalloc_prepare_to_enumerate(uint64_t a1)
{
  return pas_heap_config_utils_prepare_to_enumerate(a1, (uint64_t)&bmalloc_heap_config);
}

uint64_t bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(_QWORD, _QWORD);
  _QWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  _BYTE *v13;
  unint64_t StatusReg;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int i;
  uint64_t v86;
  int v87;
  _BYTE *v88;
  int v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  os_unfair_lock_s *v94;
  char v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t eligible;
  unint64_t v105;
  unint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  os_unfair_lock_s *v115;
  uint64_t v116;
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v118;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  os_unfair_lock_t v123;
  unsigned int v124;
  os_unfair_lock_s *v126;
  unsigned int v127;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  os_unfair_lock_t v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  int v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  int v152;
  unsigned int v153;
  os_unfair_lock_s *v154;
  int v155;
  unsigned int v156;
  unsigned int *v157;
  unsigned int v158;
  int v160;
  unsigned int v161;
  int v162;
  unsigned int v163;
  os_unfair_lock_s *v164;
  unsigned int v165;
  int v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char local_allocator_slow;
  uint64_t v175;
  uint64_t (*v176)(_QWORD, _QWORD);
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const os_unfair_lock *v182;
  _BOOL4 v183;
  char v184;
  int v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  BOOL v189;
  os_unfair_lock_t v190;
  uint64_t v191;
  unsigned int *v192;
  unint64_t v193;
  unint64_t v194;
  unsigned int v195;
  _DWORD *v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  uint64_t v228;
  os_unfair_lock_s *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unsigned int v235;
  int *v236;
  int *v237;
  int *v238;
  int v239;
  int v240;
  int v241;
  BOOL v242;
  os_unfair_lock_t v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  unint64_t *v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  int v253;
  unsigned int v254;
  int v255;
  unsigned int v256;
  uint64_t v257;
  os_unfair_lock_t v258;
  uint64_t v259;
  unint64_t v260;
  int v262;
  unsigned int v263;
  uint64_t (*v264)(_QWORD, _QWORD);
  uint64_t (*v265)(_QWORD, _QWORD);
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  os_unfair_lock_s *v269;
  int64x2_t v270;
  _OWORD *v271;
  unint64_t v272;
  unint64_t v273;
  unsigned int *v274;
  os_unfair_lock_t v275;
  os_unfair_lock_t v276;
  os_unfair_lock_t lock;
  _QWORD v278[2];
  int64x2_t v279;
  void (*v280)(uint64_t@<X0>, size_t@<X1>, uint64_t *@<X3>, uint64_t@<X8>);
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD v284[4];
  __int128 v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  void (*v289)(unint64_t, uint64_t);
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;

  v8 = (uint64_t (*)(_QWORD, _QWORD))a4;
  v292 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 3) != 2)
    pas_local_allocator_scavenger_data_commit_if_necessary_slow((BOOL *)a1, 0);
  v10 = (_QWORD *)(a1 + 32);
  v271 = (_OWORD *)(a1 + 56);
  v11 = &unk_1ECF57000;
  v12 = &unk_1ECF57000;
  v13 = &unk_1ECF57000;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v270 = vdupq_n_s64(1uLL);
  v272 = StatusReg;
  while (1)
  {
    v275 = 0;
    v15 = *(_QWORD *)(a1 + 48);
    if ((v15 & 7) == 5)
    {
      v16 = v15 & 0xFFFFFFFFFFFFFFF8;
      v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 16);
      if ((*(_BYTE *)(*(_QWORD *)v17 + 2) & 1) == 0)
        goto LABEL_15;
      goto LABEL_36;
    }
    if (!v15)
      goto LABEL_14;
    if ((v15 & 7u) < 2)
    {
      v18 = v15 & 0xFFFFFFFFFFFFFFF8;
      v19 = *(unsigned __int8 *)(v18 + 10);
      v20 = *(unsigned __int16 *)(v18 + 8);
      goto LABEL_12;
    }
    if ((v15 & 7) != 4)
    {
LABEL_14:
      v16 = 0;
      v17 = MEMORY[0x10];
      if ((*(_BYTE *)(*MEMORY[0x10] + 2) & 1) != 0)
        goto LABEL_36;
LABEL_15:
      v22 = *(unsigned int *)(v17 + 36);
      if (!(_DWORD)v22)
        goto LABEL_36;
      v23 = *(_QWORD *)(v17 + 8);
      if (v23)
      {
        v24 = v23 & 0xFFFFFFFFFE000000;
        v25 = *(_QWORD *)(v17 + 8) & 0x1FFFFFFLL;
        v26 = (unint64_t)(v25 - 16392) >> 14;
        v27 = (unint64_t)(v25 + 4 * v22 - 16385) >> 14;
        v28 = v24 | 0x10;
        v29 = (unint64_t *)(v28 + 8 * v26);
        while (1)
        {
          v30 = *v29;
          if ((*v29 & 7) < 3)
          {
LABEL_25:
            if (v26 == v27)
              goto LABEL_26;
            v96 = (unint64_t *)(v28 + 8 * v27);
            while (2)
            {
              v97 = *v96;
              if ((*v96 & 7) < 3)
                goto LABEL_26;
              v98 = __ldxr(v96);
              if (v98 == v97)
              {
                if (!__stlxr(v97 & 0xFFFFFFFFFFFFFFF8 | 2, v96))
                {
                  v99 = 1;
                  goto LABEL_120;
                }
              }
              else
              {
                __clrex();
              }
              v99 = 0;
LABEL_120:
              __dmb(0xBu);
              if (v99)
                goto LABEL_26;
              continue;
            }
          }
          v31 = __ldxr(v29);
          if (v31 != v30)
            break;
          if (__stlxr(v30 & 0xFFFFFFFFFFFFFFF8 | 2, v29))
            goto LABEL_23;
          v32 = 1;
LABEL_24:
          __dmb(0xBu);
          if (v32)
            goto LABEL_25;
        }
        __clrex();
LABEL_23:
        v32 = 0;
        goto LABEL_24;
      }
LABEL_26:
      v33 = *(_QWORD *)(v17 + 16);
      if (!v33)
        goto LABEL_36;
      v34 = v33 & 0xFFFFFFFFFE000000;
      v35 = *(_QWORD *)(v17 + 16) & 0x1FFFFFFLL;
      v36 = (unint64_t)(v35 - 16392) >> 14;
      v37 = (unint64_t)(v35 + 4 * v22 - 16385) >> 14;
      v38 = v34 | 0x10;
      v39 = (unint64_t *)((v34 | 0x10) + 8 * v36);
      while (1)
      {
        v40 = *v39;
        if ((*v39 & 7) < 3)
        {
LABEL_35:
          if (v36 == v37)
            goto LABEL_36;
          v100 = (unint64_t *)(v38 + 8 * v37);
          while (2)
          {
            v101 = *v100;
            if ((*v100 & 7) < 3)
              goto LABEL_36;
            v102 = __ldxr(v100);
            if (v102 == v101)
            {
              if (!__stlxr(v101 & 0xFFFFFFFFFFFFFFF8 | 2, v100))
              {
                v103 = 1;
                goto LABEL_129;
              }
            }
            else
            {
              __clrex();
            }
            v103 = 0;
LABEL_129:
            __dmb(0xBu);
            if (v103)
              goto LABEL_36;
            continue;
          }
        }
        v41 = __ldxr(v39);
        if (v41 != v40)
          break;
        if (__stlxr(v40 & 0xFFFFFFFFFFFFFFF8 | 2, v39))
          goto LABEL_33;
        v42 = 1;
LABEL_34:
        __dmb(0xBu);
        if (v42)
          goto LABEL_35;
      }
      __clrex();
LABEL_33:
      v42 = 0;
      goto LABEL_34;
    }
    v21 = (unsigned __int16 *)(v15 | 7);
    v19 = *((unsigned __int8 *)v21 + 2);
    v20 = *v21;
LABEL_12:
    v16 = ((8 * v20) | (v19 << 19)) + v11[317];
    v17 = *(_QWORD *)(v16 + 16);
    if ((*(_BYTE *)(*(_QWORD *)v17 + 2) & 1) == 0)
      goto LABEL_15;
LABEL_36:
    v43 = *(unsigned int *)(v17 + 28);
    v44 = v11[317] + 8 * v43;
    if ((_DWORD)v43)
      v45 = v44 == 0;
    else
      v45 = 1;
    if (!v45)
    {
      v46 = *(unsigned int *)(v44 + 12);
      if ((_DWORD)v46)
      {
        v47 = *(unsigned int *)(v44 + 8);
        if ((_DWORD)v47)
          v48 = v11[317] + 8 * v47;
        else
          v48 = 0;
        v49 = v48 - pas_compact_expendable_memory_payload;
        v50 = (unint64_t)(v48 - pas_compact_expendable_memory_payload - 8) >> 14;
        v51 = (unint64_t)(v49 + 16 * v46 - 1) >> 14;
        v52 = (unint64_t *)&pas_compact_expendable_memory_header[v50 + 1];
        while (1)
        {
          v53 = *v52;
          if ((*v52 & 7) < 3)
          {
LABEL_52:
            if (v50 == v51)
              goto LABEL_53;
            v90 = (unint64_t *)&pas_compact_expendable_memory_header[v51 + 1];
            while (2)
            {
              v91 = *v90;
              if ((*v90 & 7) < 3)
                goto LABEL_53;
              v92 = __ldxr(v90);
              if (v92 == v91)
              {
                if (!__stlxr(v91 & 0xFFFFFFFFFFFFFFF8 | 2, v90))
                {
                  v93 = 1;
                  goto LABEL_108;
                }
              }
              else
              {
                __clrex();
              }
              v93 = 0;
LABEL_108:
              __dmb(0xBu);
              if (v93)
                goto LABEL_53;
              continue;
            }
          }
          v54 = __ldxr(v52);
          if (v54 != v53)
            break;
          if (__stlxr(v53 & 0xFFFFFFFFFFFFFFF8 | 2, v52))
            goto LABEL_50;
          v55 = 1;
LABEL_51:
          __dmb(0xBu);
          if (v55)
            goto LABEL_52;
        }
        __clrex();
LABEL_50:
        v55 = 0;
        goto LABEL_51;
      }
    }
LABEL_53:
    *(_WORD *)(a1 + 1) = 256;
    v56 = v12[763];
    v57 = v56 != 1 && v13[3048] == 0;
    v274 = (unsigned int *)v16;
    if (v57)
    {
      __dmb(0xBu);
      v13[3048] = 1;
    }
    else if (v56 == 1)
    {
      v58 = *(_QWORD *)(a1 + 24);
      if (!v58)
        goto LABEL_63;
      goto LABEL_59;
    }
    pas_scavenger_notify_eligibility_if_needed();
    v16 = (unint64_t)v274;
    v58 = *(_QWORD *)(a1 + 24);
    if (!v58)
    {
LABEL_63:
      v273 = 0;
      v59 = 0;
      goto LABEL_64;
    }
LABEL_59:
    v273 = v58 & 0xFFFFFFFFFFFFC000;
    v59 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFC000) + 0x20);
    if ((v59 & 6) != 0)
      v59 = *(_QWORD *)(a1 + 48);
LABEL_64:
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v60 = v16 | 5;
    if (!v16)
      v60 = 0;
    *v10 = 0;
    v10[1] = 0;
    *(_QWORD *)(a1 + 48) = v60;
    *(_WORD *)(a1 + 5) = 6;
    v61 = *(_QWORD *)(StatusReg + 752);
    if (v61)
    {
      v269 = *(os_unfair_lock_s **)(v61 + 8016);
      if (*(_BYTE *)(v61 + 8048))
      {
        v264 = v8;
        v266 = v59;
        v62 = *(_DWORD *)(v61 + 8052) + 31;
        if (v62 >= 0x20)
        {
          v82 = 0;
          v83 = *(_QWORD *)(v61 + 8024);
          v84 = v62 >> 5;
          do
          {
            for (i = *(_DWORD *)(v83 + 4 * v82); i; i &= ~v87)
            {
              v86 = __clz(__rbit32(i));
              v87 = 1 << v86;
              *(_DWORD *)(v83 + 4 * v82) &= ~(1 << v86);
              v88 = (_BYTE *)(v61 + 8064 + 8 * ((32 * v82) | v86));
              if (v88 != (_BYTE *)a1 && v88[1])
              {
                v89 = v88[3];
                if (v89 == 4)
                {
                  pas_local_view_cache_stop(v88, 1);
                }
                else if (v89 == 2)
                {
                  pas_local_allocator_stop(v88, 1, 0);
                }
              }
            }
            ++v82;
          }
          while (v82 != v84);
        }
        v8 = v264;
        *(_BYTE *)(v61 + 8048) = 0;
        StatusReg = v272;
        v11 = (_QWORD *)&unk_1ECF57000;
        v59 = v266;
      }
      v275 = 0;
      if (!v59)
        goto LABEL_78;
    }
    else
    {
      v269 = 0;
      v275 = 0;
      if (!v59)
        goto LABEL_78;
    }
    if ((v59 & 7) != 4)
    {
      if ((v59 & 7) == 0)
      {
        v63 = v273;
        pas_segregated_page_switch_lock_and_rebias_while_ineligible_impl(v273, &v275, v269);
        *(_QWORD *)(v273 + 32) = v59 | 1;
        *(_BYTE *)(v273 + 2) = 0;
        v10 = (_QWORD *)(a1 + 32);
        v12 = (_DWORD *)&unk_1ECF57000;
        v13 = (_BYTE *)&unk_1ECF57000;
        v64 = v274;
        if (!*(_QWORD *)(v273 + 24))
          goto LABEL_76;
        goto LABEL_282;
      }
LABEL_78:
      if (!v61)
        goto LABEL_133;
      v77 = v274[8];
      if (*(_DWORD *)(v61 + 8052) > v77)
      {
        v78 = v61 + 8 * v77 + 8064;
        goto LABEL_81;
      }
      if ((_DWORD)v77 == -1
        || (local_allocator_slow = pas_thread_local_cache_get_local_allocator_slow(v61, v77, 0, a4, a5, a6, a7, a8),
            v78 = v175,
            (local_allocator_slow & 1) == 0))
      {
LABEL_133:
        eligible = pas_segregated_size_directory_take_first_eligible(v274);
        v81 = eligible;
        if (eligible)
        {
          if ((eligible & 7) >= 2)
          {
            if ((eligible & 7) != 4)
            {
              v81 = 0;
              if (!v59)
                goto LABEL_271;
              goto LABEL_240;
            }
            v267 = v59;
            v265 = v8;
            v110 = eligible & 0xFFFFFFFFFFFFFFF8;
            v111 = ((8 * *(unsigned __int16 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 7)) | ((unint64_t)*(unsigned __int8 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 9) << 19))
                 + v11[317];
            v112 = *(_QWORD *)(v111 + 16);
            v113 = pas_shared_page_directory_by_size_get((int *)(*(_QWORD *)(*(_QWORD *)v112 + 32) + 96), *(_DWORD *)(v111 + 24) & 0x7FFFFFF, (uint64_t)&unk_1E35BE430);
            v114 = *(unsigned __int16 *)(v110 + 4) | ((unint64_t)*(unsigned __int8 *)(v110 + 6) << 16);
            if (!v114 || (v115 = (os_unfair_lock_s *)(v11[317] + 8 * v114)) == 0)
            {
              v8 = v265;
              if (!v59)
                goto LABEL_271;
              goto LABEL_240;
            }
            v116 = v113;
            p_os_unfair_lock_opaque = &v115[2]._os_unfair_lock_opaque;
            v118 = *(_DWORD *)(StatusReg + 24);
            do
            {
              if (__ldaxr(p_os_unfair_lock_opaque))
              {
                __clrex();
                os_unfair_lock_lock(v115 + 2);
                v120 = *(_QWORD *)&v115->_os_unfair_lock_opaque;
                if ((*(_QWORD *)&v115->_os_unfair_lock_opaque & 1) == 0)
                  goto LABEL_148;
                goto LABEL_185;
              }
            }
            while (__stxr(v118, p_os_unfair_lock_opaque));
            v120 = *(_QWORD *)&v115->_os_unfair_lock_opaque;
            if ((*(_QWORD *)&v115->_os_unfair_lock_opaque & 1) == 0)
            {
LABEL_148:
              v121 = pas_segregated_shared_view_commit_page(v115, v112, v116, v81 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&unk_1E35BE430);
              goto LABEL_186;
            }
LABEL_185:
            v121 = v120 & 0xFFFFFFFFFFFFFFFELL;
LABEL_186:
            if (!v121)
            {
              v155 = *(_DWORD *)(StatusReg + 24);
              v8 = v265;
              v59 = v267;
              while (1)
              {
                v156 = __ldxr(p_os_unfair_lock_opaque);
                if (v156 != v155)
                  break;
                v81 = 0;
                if (!__stlxr(0, p_os_unfair_lock_opaque))
                  goto LABEL_239;
              }
              __clrex();
              os_unfair_lock_unlock(v115 + 2);
              v81 = 0;
              if (!v267)
                goto LABEL_271;
              goto LABEL_240;
            }
            if ((*(_BYTE *)(v110 + 19) & 0x10) == 0)
            {
              if (*(_BYTE *)(v110 + 17))
              {
                v139 = v11[317] + *(unsigned int *)(v110 + 12);
                v140 = *(unsigned __int8 *)(v110 + 18);
                v141 = v140 + *(unsigned __int8 *)(v110 + 17);
                v142 = v121 + 20;
                do
                {
                  v143 = *(_DWORD *)(v139 + 4 * v140);
                  if (v143)
                  {
                    v144 = 32 * v140;
                    if (v110)
                    {
                      do
                      {
                        v145 = __clz(__rbit32(v143));
                        *(_DWORD *)(v142 + (((v144 | v145) >> 2) & 0x3FFFFFFFFFFFFFFCLL)) = (v110 - v11[317]) >> 3;
                        v143 &= ~(1 << v145);
                      }
                      while (v143);
                    }
                    else
                    {
                      do
                      {
                        v146 = __clz(__rbit32(v143));
                        *(_DWORD *)(v142 + (((v144 | v146) >> 2) & 0x3FFFFFFFFFFFFFFCLL)) = 0;
                        v143 &= ~(1 << v146);
                      }
                      while (v143);
                    }
                  }
                  ++v140;
                }
                while (v140 < v141);
              }
              v157 = &v115[3]._os_unfair_lock_opaque;
              v158 = *(_DWORD *)(StatusReg + 24);
              while (!__ldaxr(v157))
              {
                if (!__stxr(v158, v157))
                  goto LABEL_228;
              }
              __clrex();
              os_unfair_lock_lock(v115 + 3);
LABEL_228:
              *(_BYTE *)(v110 + 19) |= 0x10u;
              v160 = *(_DWORD *)(StatusReg + 24);
              while (1)
              {
                v161 = __ldxr(v157);
                if (v161 != v160)
                  break;
                if (!__stlxr(0, v157))
                  goto LABEL_233;
              }
              __clrex();
              os_unfair_lock_unlock(v115 + 3);
            }
LABEL_233:
            v162 = *(_DWORD *)(StatusReg + 24);
            v8 = v265;
            v59 = v267;
            while (1)
            {
              v163 = __ldxr(p_os_unfair_lock_opaque);
              if (v163 != v162)
                break;
              if (!__stlxr(0, p_os_unfair_lock_opaque))
                goto LABEL_239;
            }
            __clrex();
            v154 = v115 + 2;
LABEL_238:
            os_unfair_lock_unlock(v154);
          }
          else
          {
            v105 = eligible & 0xFFFFFFFFFFFFFFF8;
            if (!*(_BYTE *)((eligible & 0xFFFFFFFFFFFFFFF8) + 11))
            {
              v106 = ((8 * *(unsigned __int16 *)(v105 + 8)) | ((unint64_t)*(unsigned __int8 *)(v105 + 10) << 19))
                   + v11[317];
              if (*(_QWORD *)v105)
              {
                *(_QWORD *)&v285 = 0;
                v107 = (unsigned int *)(v105 + 16);
                v108 = *(_DWORD *)(StatusReg + 24);
                while (!__ldaxr(v107))
                {
                  if (!__stxr(v108, v107))
                    goto LABEL_198;
                }
                __clrex();
                os_unfair_lock_lock((os_unfair_lock_t)(v105 + 16));
LABEL_198:
                *(_QWORD *)&v285 = v105 + 16;
                if (*(unsigned __int8 *)(v106 + 13) << 8 == 512)
                  pas_physical_page_sharing_pool_take_for_page_config(0x4000uLL, (uint64_t)&unk_1E35BE430, 0, (uint64_t)&v285, 1);
                v147 = *(_DWORD *)(StatusReg + 24);
                while (1)
                {
                  v148 = __ldxr(v107);
                  if (v148 != v147)
                    break;
                  if (!__stlxr(0, v107))
                    goto LABEL_205;
                }
                __clrex();
                os_unfair_lock_unlock((os_unfair_lock_t)(v105 + 16));
LABEL_205:
                v122 = *(_QWORD *)v105;
                goto LABEL_207;
              }
              if (*(unsigned __int8 *)(v106 + 13) << 8 == 512)
              {
                pas_physical_page_sharing_pool_take_for_page_config(0x4000uLL, (uint64_t)&unk_1E35BE430, 0, 0, 0);
                v122 = *(_QWORD *)v105;
                if (*(_QWORD *)v105)
                  goto LABEL_207;
              }
              v123 = 0;
              v276 = 0;
              lock = 0;
              do
              {
                if (v123)
                {
                  v124 = *(_DWORD *)(StatusReg + 24);
                  while (!__ldaxr(&v123->_os_unfair_lock_opaque))
                  {
                    if (!__stxr(v124, &v123->_os_unfair_lock_opaque))
                      goto LABEL_165;
                  }
                  __clrex();
                  os_unfair_lock_lock(v123);
LABEL_165:
                  v126 = v276;
                  v276 = 0;
                  lock = v126;
                }
                v127 = *(_DWORD *)(StatusReg + 24);
                while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
                {
                  if (!__stxr(v127, &pas_heap_lock._os_unfair_lock_opaque))
                    goto LABEL_171;
                }
                __clrex();
                os_unfair_lock_lock(&pas_heap_lock);
LABEL_171:
                v129 = *(_QWORD *)(v106 + 16);
                v130 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v129 + 32) + 48);
                if ((**(_DWORD **)v129 & 0x20000) != 0)
                  v131 = *(_QWORD *)(v106 + 16);
                else
                  v131 = 0;
                v278[0] = &bmalloc_megapage_table;
                v278[1] = 1;
                v285 = xmmword_19919FBF0;
                v287 = 0;
                v288 = 0;
                v286 = 0x4000;
                v291 = 0;
                v289 = table_set_by_index;
                v290 = v278;
                v284[0] = v130;
                v284[1] = &v285;
                v284[2] = v131;
                v284[3] = &v276;
                v279 = v270;
                v280 = megapage_cache_allocate_aligned;
                v281 = v284;
                v282 = 0;
                v283 = 0;
                v132 = pas_simple_large_free_heap_try_allocate(v130, 0x4000, 0x4000, 0, &v279);
                *(_QWORD *)v105 = (v133 << 63 >> 63) & v132;
                v134 = *(_DWORD *)(StatusReg + 24);
                while (1)
                {
                  v135 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
                  if (v135 != v134)
                    break;
                  if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
                  {
                    v136 = lock;
                    if (!lock)
                      goto LABEL_158;
                    goto LABEL_180;
                  }
                }
                __clrex();
                os_unfair_lock_unlock(&pas_heap_lock);
                v136 = lock;
                if (!lock)
                  goto LABEL_158;
LABEL_180:
                v137 = *(_DWORD *)(StatusReg + 24);
                while (1)
                {
                  v138 = __ldxr(&v136->_os_unfair_lock_opaque);
                  if (v138 != v137)
                    break;
                  if (!__stlxr(0, &v136->_os_unfair_lock_opaque))
                    goto LABEL_157;
                }
                __clrex();
                os_unfair_lock_unlock(v136);
LABEL_157:
                lock = 0;
LABEL_158:
                v123 = v276;
              }
              while (v276);
              v122 = *(_QWORD *)v105;
              if (*(_QWORD *)v105)
              {
LABEL_207:
                pas_segregated_page_construct(v122, v105 | 1, 0, (uint64_t)&unk_1E35BE430);
                v149 = (unsigned int *)(v105 + 20);
                v150 = *(_DWORD *)(StatusReg + 24);
                while (!__ldaxr(v149))
                {
                  if (!__stxr(v150, v149))
                    goto LABEL_212;
                }
                __clrex();
                os_unfair_lock_lock((os_unfair_lock_t)(v105 + 20));
LABEL_212:
                *(_BYTE *)(v105 + 11) = 1;
                v152 = *(_DWORD *)(StatusReg + 24);
                while (1)
                {
                  v153 = __ldxr(v149);
                  if (v153 != v152)
                    break;
                  if (!__stlxr(0, v149))
                    goto LABEL_239;
                }
                __clrex();
                v154 = (os_unfair_lock_s *)(v105 + 20);
                goto LABEL_238;
              }
              v81 = 0;
              if (!v59)
              {
LABEL_271:
                if (!v81)
                {
                  v258 = v275;
                  if (v275)
                  {
                    v262 = *(_DWORD *)(v272 + 24);
                    while (1)
                    {
                      v263 = __ldxr(&v258->_os_unfair_lock_opaque);
                      if (v263 != v262)
                        break;
                      if (!__stlxr(0, &v258->_os_unfair_lock_opaque))
                        goto LABEL_331;
                    }
                    __clrex();
                    os_unfair_lock_unlock(v258);
LABEL_331:
                    v275 = 0;
                  }
LABEL_322:
                  v257 = 0;
                  v259 = 0;
                  goto LABEL_325;
                }
                v75 = v81 & 0xFFFFFFFFFFFFFFF8;
                if ((v81 & 6) != 0)
                {
                  v187 = *(unsigned __int16 *)(v75 + 4) | ((unint64_t)*(unsigned __int8 *)(v75 + 6) << 16);
                  v11 = &unk_1ECF57000;
                  v188 = pas_compact_heap_reservation_base + 8 * v187;
                  if (v187)
                    v189 = v188 == 0;
                  else
                    v189 = 1;
                  if (v189)
                  {
                    v190 = v275;
                    StatusReg = v272;
                    v12 = (_DWORD *)&unk_1ECF57000;
                    v13 = (_BYTE *)&unk_1ECF57000;
                    if (v275)
                    {
                      v255 = *(_DWORD *)(v272 + 24);
                      while (1)
                      {
                        v256 = __ldxr(&v190->_os_unfair_lock_opaque);
                        if (v256 != v255)
                          break;
                        if (!__stlxr(0, &v190->_os_unfair_lock_opaque))
                          goto LABEL_319;
                      }
                      __clrex();
                      os_unfair_lock_unlock(v190);
LABEL_319:
                      v275 = 0;
                    }
                    v10 = (_QWORD *)(a1 + 32);
                    if (!bmalloc_small_segregated_page_config_specialized_local_allocator_start_allocating_in_primordial_partial_view(a1, v81 & 0xFFFFFFFFFFFFFFF8, (uint64_t)v274))goto LABEL_322;
LABEL_298:
                    v244 = *(unsigned int *)(a1 + 16);
                    if ((_DWORD)v244)
                      goto LABEL_320;
                    goto LABEL_299;
                  }
                  v228 = *(_QWORD *)v188;
                  if ((*(_QWORD *)v188 & 1) != 0)
                    v228 = *(_QWORD *)(v228 & 0xFFFFFFFFFFFFFFFELL);
                  v273 = v228;
                  v229 = *(os_unfair_lock_s **)(v228 + 8);
                  if (v275 != v229)
                    v275 = pas_segregated_page_switch_lock_slow(v228, v275, v229);
                  *(_BYTE *)(v75 + 19) |= 1u;
                  ++*(_DWORD *)(v188 + 24);
                  v95 = *(_BYTE *)(v75 + 19) & 0xFB;
                  goto LABEL_288;
                }
                v63 = *(_QWORD *)v75;
                pas_segregated_page_switch_lock_and_rebias_while_ineligible_impl(v63, &v275, v269);
                *(_BYTE *)(v63 + 1) = 1;
                *(_QWORD *)(v63 + 32) = v81 | 1;
                v10 = (_QWORD *)(a1 + 32);
                StatusReg = v272;
                v11 = &unk_1ECF57000;
                v12 = (_DWORD *)&unk_1ECF57000;
                v13 = (_BYTE *)&unk_1ECF57000;
                v64 = v274;
                if (!*(_QWORD *)(v63 + 24))
                {
LABEL_76:
                  v65 = v11[317] + 8 * v64[10];
                  v66 = *(_DWORD *)v65;
                  v67 = *(unsigned int *)(v65 + 4) + v63;
                  *(_QWORD *)(v63 + 24) = *(unsigned __int8 *)(v65 + 8);
                  *(_QWORD *)(a1 + 8) = v67;
                  *(_DWORD *)(a1 + 16) = v67 - (v66 + v63);
                  *v10 = 0;
                  v10[1] = 0;
                  *(_QWORD *)(a1 + 24) = v63;
                  v68 = (_OWORD *)(v11[317] + *(unsigned int *)(v65 + 9));
                  v69 = v68[2];
                  v70 = v68[3];
                  v71 = v68[1];
                  *(_OWORD *)(v63 + 44) = *v68;
                  *(_OWORD *)(v63 + 92) = v70;
                  *(_OWORD *)(v63 + 76) = v69;
                  *(_OWORD *)(v63 + 60) = v71;
                  v72 = v68[6];
                  v73 = v68[7];
                  v74 = v68[5];
                  *(_OWORD *)(v63 + 108) = v68[4];
                  *(_OWORD *)(v63 + 156) = v73;
                  *(_OWORD *)(v63 + 140) = v72;
                  *(_OWORD *)(v63 + 124) = v74;
                  goto LABEL_297;
                }
LABEL_282:
                *(_QWORD *)(a1 + 8) = 0;
                *(_DWORD *)(a1 + 16) = 0;
                v191 = v11[317];
                v192 = (unsigned int *)(v191 + 8 * v64[10]);
                v193 = *v192;
                v194 = v193 >> 10;
                v195 = (((v192[1] >> 4) - 1) >> 6) + 1;
                v196 = (_DWORD *)(v191 + *(unsigned int *)((char *)v192 + 9));
                *(_DWORD *)(a1 + 32) = *v192 >> 10;
                *(_DWORD *)(a1 + 36) = v195;
                *v271 = 0u;
                *(_OWORD *)(a1 + 72) = 0u;
                *(_OWORD *)(a1 + 88) = 0u;
                *(_OWORD *)(a1 + 104) = 0u;
                *(_OWORD *)(a1 + 120) = 0u;
                *(_OWORD *)(a1 + 136) = 0u;
                *(_OWORD *)(a1 + 152) = 0u;
                *(_OWORD *)(a1 + 168) = 0u;
                *(_QWORD *)(a1 + 24) = (v193 & 0xFFFFFC00) + v63;
                LODWORD(v193) = *v196;
                v197 = *(_DWORD *)(v63 + 44);
                *(_DWORD *)(a1 + 56) = *v196 & ~v197;
                *(_DWORD *)(v63 + 44) = v197 | v193;
                LODWORD(v193) = v196[1];
                v198 = *(_DWORD *)(v63 + 48);
                *(_DWORD *)(a1 + 60) = v193 & ~v198;
                *(_DWORD *)(v63 + 48) = v198 | v193;
                LODWORD(v193) = v196[2];
                v199 = *(_DWORD *)(v63 + 52);
                *(_DWORD *)(a1 + 64) = v193 & ~v199;
                *(_DWORD *)(v63 + 52) = v199 | v193;
                LODWORD(v193) = v196[3];
                v200 = *(_DWORD *)(v63 + 56);
                *(_DWORD *)(a1 + 68) = v193 & ~v200;
                *(_DWORD *)(v63 + 56) = v200 | v193;
                LODWORD(v193) = v196[4];
                v201 = *(_DWORD *)(v63 + 60);
                *(_DWORD *)(a1 + 72) = v193 & ~v201;
                *(_DWORD *)(v63 + 60) = v201 | v193;
                LODWORD(v193) = v196[5];
                v202 = *(_DWORD *)(v63 + 64);
                *(_DWORD *)(a1 + 76) = v193 & ~v202;
                *(_DWORD *)(v63 + 64) = v202 | v193;
                LODWORD(v193) = v196[6];
                v203 = *(_DWORD *)(v63 + 68);
                *(_DWORD *)(a1 + 80) = v193 & ~v203;
                *(_DWORD *)(v63 + 68) = v203 | v193;
                LODWORD(v193) = v196[7];
                v204 = *(_DWORD *)(v63 + 72);
                *(_DWORD *)(a1 + 84) = v193 & ~v204;
                *(_DWORD *)(v63 + 72) = v204 | v193;
                LODWORD(v193) = v196[8];
                v205 = *(_DWORD *)(v63 + 76);
                *(_DWORD *)(a1 + 88) = v193 & ~v205;
                *(_DWORD *)(v63 + 76) = v205 | v193;
                LODWORD(v193) = v196[9];
                v206 = *(_DWORD *)(v63 + 80);
                *(_DWORD *)(a1 + 92) = v193 & ~v206;
                *(_DWORD *)(v63 + 80) = v206 | v193;
                LODWORD(v193) = v196[10];
                v207 = *(_DWORD *)(v63 + 84);
                *(_DWORD *)(a1 + 96) = v193 & ~v207;
                *(_DWORD *)(v63 + 84) = v207 | v193;
                LODWORD(v193) = v196[11];
                v208 = *(_DWORD *)(v63 + 88);
                *(_DWORD *)(a1 + 100) = v193 & ~v208;
                *(_DWORD *)(v63 + 88) = v208 | v193;
                LODWORD(v193) = v196[12];
                v209 = *(_DWORD *)(v63 + 92);
                *(_DWORD *)(a1 + 104) = v193 & ~v209;
                *(_DWORD *)(v63 + 92) = v209 | v193;
                LODWORD(v193) = v196[13];
                v210 = *(_DWORD *)(v63 + 96);
                *(_DWORD *)(a1 + 108) = v193 & ~v210;
                *(_DWORD *)(v63 + 96) = v210 | v193;
                LODWORD(v193) = v196[14];
                v211 = *(_DWORD *)(v63 + 100);
                *(_DWORD *)(a1 + 112) = v193 & ~v211;
                *(_DWORD *)(v63 + 100) = v211 | v193;
                LODWORD(v193) = v196[15];
                v212 = *(_DWORD *)(v63 + 104);
                *(_DWORD *)(a1 + 116) = v193 & ~v212;
                *(_DWORD *)(v63 + 104) = v212 | v193;
                LODWORD(v193) = v196[16];
                v213 = *(_DWORD *)(v63 + 108);
                *(_DWORD *)(a1 + 120) = v193 & ~v213;
                *(_DWORD *)(v63 + 108) = v213 | v193;
                LODWORD(v193) = v196[17];
                v214 = *(_DWORD *)(v63 + 112);
                *(_DWORD *)(a1 + 124) = v193 & ~v214;
                *(_DWORD *)(v63 + 112) = v214 | v193;
                LODWORD(v193) = v196[18];
                v215 = *(_DWORD *)(v63 + 116);
                *(_DWORD *)(a1 + 128) = v193 & ~v215;
                *(_DWORD *)(v63 + 116) = v215 | v193;
                LODWORD(v193) = v196[19];
                v216 = *(_DWORD *)(v63 + 120);
                *(_DWORD *)(a1 + 132) = v193 & ~v216;
                *(_DWORD *)(v63 + 120) = v216 | v193;
                LODWORD(v193) = v196[20];
                v217 = *(_DWORD *)(v63 + 124);
                *(_DWORD *)(a1 + 136) = v193 & ~v217;
                *(_DWORD *)(v63 + 124) = v217 | v193;
                LODWORD(v193) = v196[21];
                v218 = *(_DWORD *)(v63 + 128);
                *(_DWORD *)(a1 + 140) = v193 & ~v218;
                *(_DWORD *)(v63 + 128) = v218 | v193;
                LODWORD(v193) = v196[22];
                v219 = *(_DWORD *)(v63 + 132);
                *(_DWORD *)(a1 + 144) = v193 & ~v219;
                *(_DWORD *)(v63 + 132) = v219 | v193;
                LODWORD(v193) = v196[23];
                v220 = *(_DWORD *)(v63 + 136);
                *(_DWORD *)(a1 + 148) = v193 & ~v220;
                *(_DWORD *)(v63 + 136) = v220 | v193;
                LODWORD(v193) = v196[24];
                v221 = *(_DWORD *)(v63 + 140);
                *(_DWORD *)(a1 + 152) = v193 & ~v221;
                *(_DWORD *)(v63 + 140) = v221 | v193;
                LODWORD(v193) = v196[25];
                v222 = *(_DWORD *)(v63 + 144);
                *(_DWORD *)(a1 + 156) = v193 & ~v222;
                *(_DWORD *)(v63 + 144) = v222 | v193;
                LODWORD(v193) = v196[26];
                v223 = *(_DWORD *)(v63 + 148);
                *(_DWORD *)(a1 + 160) = v193 & ~v223;
                *(_DWORD *)(v63 + 148) = v223 | v193;
                LODWORD(v193) = v196[27];
                v224 = *(_DWORD *)(v63 + 152);
                *(_DWORD *)(a1 + 164) = v193 & ~v224;
                *(_DWORD *)(v63 + 152) = v224 | v193;
                LODWORD(v193) = v196[28];
                v225 = *(_DWORD *)(v63 + 156);
                *(_DWORD *)(a1 + 168) = v193 & ~v225;
                *(_DWORD *)(v63 + 156) = v225 | v193;
                LODWORD(v193) = v196[29];
                v226 = *(_DWORD *)(v63 + 160);
                *(_DWORD *)(a1 + 172) = v193 & ~v226;
                *(_DWORD *)(v63 + 160) = v226 | v193;
                LODWORD(v193) = v196[30];
                v227 = *(_DWORD *)(v63 + 164);
                *(_DWORD *)(a1 + 176) = v193 & ~v227;
                *(_DWORD *)(v63 + 164) = v227 | v193;
                LODWORD(v196) = v196[31];
                LODWORD(v193) = *(_DWORD *)(v63 + 168);
                *(_DWORD *)(a1 + 180) = v196 & ~(_DWORD)v193;
                *(_DWORD *)(v63 + 168) = v193 | v196;
                *(_QWORD *)(a1 + 40) = __rbit64(*(_QWORD *)(a1 + 56 + 8 * v194));
                *(_BYTE *)(a1 + 6) = 1;
                *(_QWORD *)(v63 + 24) = *(unsigned __int8 *)(v11[317] + 8 * v64[10] + 8);
                goto LABEL_297;
              }
LABEL_240:
              v164 = *(os_unfair_lock_s **)(v273 + 8);
              if (v275 == v164)
              {
                v165 = v59 & 7;
                if (v165 < 2)
                  goto LABEL_242;
LABEL_254:
                if (v165 != 4)
                  goto LABEL_271;
                v176 = v8;
                v177 = v59 & 0xFFFFFFFFFFFFFFF8;
                v178 = pas_compact_heap_reservation_base;
                v179 = ((8 * *(unsigned __int16 *)((v59 & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((v59 & 0xFFFFFFFFFFFFFFF8) + 6) << 19))
                     + pas_compact_heap_reservation_base;
                v180 = *(unsigned __int8 *)((v59 & 0xFFFFFFFFFFFFFFF8) + 9);
                v181 = *(unsigned __int16 *)(v177 + 7);
                v268 = *(_QWORD *)((*(_QWORD *)v179 & 0xFFFFFFFFFFFFFFFELL) + 8);
                v182 = *(const os_unfair_lock **)(v273 + 8);
                if (v182)
                  os_unfair_lock_assert_owner(v182);
                if (*(_DWORD *)(v179 + 24) == 1)
                {
                  v183 = *(_QWORD *)(v273 + 24) == 0;
                  v184 = *(_BYTE *)(v177 + 19);
                  if ((v184 & 2) != 0)
                  {
LABEL_259:
                    *(_BYTE *)(v177 + 19) = v184 & 0xFC;
                    --*(_DWORD *)(v179 + 24);
                    pas_segregated_directory_view_did_become_eligible_at_index(((8 * v181) | (v180 << 19)) + v178, *(unsigned __int8 *)(v177 + 16));
                    v8 = v176;
                    if (!v183)
                      goto LABEL_271;
                    goto LABEL_263;
                  }
                }
                else
                {
                  v183 = 0;
                  v184 = *(_BYTE *)(v177 + 19);
                  if ((v184 & 2) != 0)
                    goto LABEL_259;
                }
                *(_BYTE *)(v177 + 19) = v184 & 0xFE;
                --*(_DWORD *)(v179 + 24);
                v8 = v176;
                if (!v183)
                  goto LABEL_271;
LABEL_263:
                v185 = v178 & 5 | 2;
                if (v185 == 3)
                {
                  v186 = ((8 * *(unsigned __int16 *)((v179 & 0xFFFFFFFFFFFFFFF8) + 16)) | ((unint64_t)*(unsigned __int8 *)((v179 & 0xFFFFFFFFFFFFFFF8) + 18) << 19))
                       + pas_compact_heap_reservation_base;
LABEL_267:
                  v173 = *(_DWORD *)(v186 + 16) & 0x7FFFFFFF;
                }
                else
                {
                  if (v185 == 2)
                  {
                    v186 = v179 & 0xFFFFFFFFFFFFFFF8;
                    goto LABEL_267;
                  }
                  v173 = 0;
                }
                v172 = v268;
              }
              else
              {
                v275 = pas_segregated_page_switch_lock_slow(v273, v275, v164);
                v165 = v59 & 7;
                if (v165 >= 2)
                  goto LABEL_254;
LABEL_242:
                v166 = *(unsigned __int8 *)(v273 + 2);
                if (*(_BYTE *)(v273 + 2))
                  *(_BYTE *)(v273 + 2) = 0;
                v167 = (8 * *(unsigned __int16 *)((v59 & 0xFFFFFFFFFFFFFFF8) + 8)) | ((unint64_t)*(unsigned __int8 *)((v59 & 0xFFFFFFFFFFFFFFF8) + 10) << 19);
                v168 = pas_compact_heap_reservation_base;
                v169 = v167 + pas_compact_heap_reservation_base;
                v170 = *(unsigned int *)((v59 & 0xFFFFFFFFFFFFFFF8) + 12);
                v171 = *(_QWORD *)(v273 + 24);
                *(_BYTE *)(v273 + 1) = 0;
                if (v166)
                  pas_segregated_directory_view_did_become_eligible_at_index(v167 + v168, v170);
                if (v171)
                  goto LABEL_271;
                v172 = v169;
                v173 = v170;
              }
              pas_segregated_directory_view_did_become_empty_at_index(v172, v173);
              goto LABEL_271;
            }
          }
        }
LABEL_239:
        if (!v59)
          goto LABEL_271;
        goto LABEL_240;
      }
LABEL_81:
      *(_BYTE *)v78 = 1;
      if (*(_BYTE *)(v78 + 3) != 4)
        goto LABEL_131;
      v79 = *(unsigned __int8 *)(v78 + 5);
      if (*(unsigned __int8 *)(v78 + 6) != (_DWORD)v79)
        goto LABEL_85;
      if (*(_BYTE *)(v78 + 7))
      {
        if (*(_BYTE *)(v78 + 7) == 2)
        {
LABEL_85:
          *(_WORD *)(v78 + 1) = 256;
          if (*(unsigned __int8 *)(v78 + 4) > (v79 + 1))
            v80 = v79 + 1;
          else
            v80 = 0;
          *(_BYTE *)(v78 + 5) = v80;
          v81 = ((8 * *(unsigned __int16 *)(v78 + 3 * v79 + 8)) | ((unint64_t)*(unsigned __int8 *)(v78 + 3 * v79 + 10) << 19))
              + v11[317];
          *(_BYTE *)(v78 + 7) = 1;
          *(_BYTE *)v78 = 0;
          if (!v59)
            goto LABEL_271;
          goto LABEL_240;
        }
      }
      else
      {
LABEL_131:
        pas_local_allocator_scavenger_data_commit_if_necessary_slow((BOOL *)v78, 0);
      }
      *(_WORD *)(v78 + 1) = 256;
      *(_BYTE *)v78 = 0;
      goto LABEL_133;
    }
    v75 = v59 & 0xFFFFFFFFFFFFFFF8;
    v76 = *(_BYTE *)((v59 & 0xFFFFFFFFFFFFFFF8) + 19);
    if ((v76 & 4) == 0)
      goto LABEL_78;
    v94 = *(os_unfair_lock_s **)(v273 + 8);
    if (v94)
    {
      v275 = pas_segregated_page_switch_lock_slow(v273, 0, v94);
      v76 = *(_BYTE *)(v75 + 19);
    }
    v95 = v76 & 0xF9;
LABEL_288:
    *(_BYTE *)(v75 + 19) = v95;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v230 = *(unsigned int *)(v75 + 12);
    v231 = v11[317];
    v232 = *(unsigned __int8 *)(v75 + 18);
    v233 = *(unsigned __int8 *)(v75 + 17);
    v234 = (v233 + v232);
    *(_QWORD *)(a1 + 48) = v75 | 4;
    *(_DWORD *)(a1 + 32) = v232 >> 1;
    *(_DWORD *)(a1 + 36) = (v234 + 1) >> 1;
    bzero((char *)v271 + 8 * (v232 >> 1), (4 * (v234 - (v232 & 0xFE)) + 4) & 0x3FFFFFFF8);
    v235 = 0;
    *(_QWORD *)(a1 + 24) = v273 + (v232 >> 1 << 10);
    if (v232 < v234)
    {
      v235 = 0;
      v236 = (int *)v271 + v232;
      v237 = (int *)(v273 + 4 * v232 + 44);
      v238 = (int *)(v231 + v230 + 4 * v232);
      do
      {
        v240 = *v238++;
        v239 = v240;
        v241 = *v237;
        *v236++ = v240 & ~*v237;
        *v237++ = v241 | v240;
        if (v241)
          v242 = 1;
        else
          v242 = v239 == 0;
        if (!v242)
          ++v235;
        --v233;
      }
      while (v233);
    }
    *(_QWORD *)(a1 + 40) = __rbit64(*(_QWORD *)(a1 + 8 * (v232 >> 1) + 56));
    *(_BYTE *)(a1 + 6) = 1;
    *(_QWORD *)(v273 + 24) += v235;
    v10 = (_QWORD *)(a1 + 32);
    StatusReg = v272;
    v11 = (_QWORD *)&unk_1ECF57000;
    v12 = (_DWORD *)&unk_1ECF57000;
    v13 = (_BYTE *)&unk_1ECF57000;
LABEL_297:
    v243 = v275;
    if (!v275)
      goto LABEL_298;
    v253 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v254 = __ldxr(&v243->_os_unfair_lock_opaque);
      if (v254 != v253)
        break;
      if (!__stlxr(0, &v243->_os_unfair_lock_opaque))
        goto LABEL_311;
    }
    __clrex();
    os_unfair_lock_unlock(v243);
LABEL_311:
    v275 = 0;
    v244 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v244)
    {
LABEL_320:
      *(_DWORD *)(a1 + 16) = v244 - *(_DWORD *)(a1 + 20);
      v257 = *(_QWORD *)(a1 + 8) - v244;
      goto LABEL_324;
    }
LABEL_299:
    v245 = *(_QWORD *)(a1 + 40);
    v246 = *(_QWORD *)(a1 + 24);
    if (v245)
      break;
    if (*(_BYTE *)(a1 + 5) == 6)
    {
      v247 = *(_DWORD *)(a1 + 36);
      v248 = *(unsigned int *)v10;
      if (v248 < v247)
      {
        *(_QWORD *)(a1 + 8 * v248 + 56) = 0;
        v249 = (unint64_t *)(a1 + 64 + 8 * v248);
        v250 = v247 - 1 - v248;
        while (v250)
        {
          v246 += 1024;
          v252 = *v249++;
          v251 = v252;
          LODWORD(v248) = v248 + 1;
          --v250;
          if (v252)
          {
            v245 = __rbit64(v251);
            *(_DWORD *)(a1 + 32) = v248;
            *(_QWORD *)(a1 + 24) = v246;
            goto LABEL_323;
          }
        }
        v10 = (_QWORD *)(a1 + 32);
        StatusReg = v272;
        *(_DWORD *)(a1 + 32) = v247;
        v11 = (_QWORD *)&unk_1ECF57000;
        v12 = (_DWORD *)&unk_1ECF57000;
        v13 = (_BYTE *)&unk_1ECF57000;
      }
    }
  }
LABEL_323:
  v260 = __clz(v245);
  *(_QWORD *)(a1 + 40) = v245 & ~(0x8000000000000000 >> v260);
  v257 = v246 + 16 * v260;
LABEL_324:
  v259 = 1;
LABEL_325:
  *(_BYTE *)a1 = 0;
  return v8(v257, v259);
}

uint64_t bmalloc_heap_config_specialized_local_allocator_try_allocate_medium_segregated_with_free_bits(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v7;

  v1 = *(unsigned int *)(a1 + 32);
  v2 = *(unsigned int *)(a1 + 36);
  if (v1 >= v2)
    return 0;
  v3 = *(_QWORD *)(a1 + 8 * v1 + 56);
  v4 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
LABEL_3:
    v5 = __clz(__rbit64(v3));
    *(_QWORD *)(a1 + 8 * v1 + 56) = v3 & ~(1 << v5);
    return v4 + (v5 << 9);
  }
  else
  {
    while (v2 - 1 != v1)
    {
      v7 = v1 + 1;
      v4 += 0x8000;
      v3 = *(_QWORD *)(a1 + 64 + 8 * v1++);
      if (v3)
      {
        *(_DWORD *)(a1 + 32) = v7;
        *(_QWORD *)(a1 + 24) = v4;
        v1 = v7;
        goto LABEL_3;
      }
    }
    *(_DWORD *)(a1 + 32) = v2;
    return 0;
  }
}

uint64_t bmalloc_heap_config_specialized_local_allocator_try_allocate_inline_cases(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    *(_DWORD *)(a1 + 16) = v1 - *(_DWORD *)(a1 + 20);
    return *(_QWORD *)(a1 + 8) - v1;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
LABEL_4:
      v5 = __clz(v3);
      *(_QWORD *)(a1 + 40) = v3 & ~(0x8000000000000000 >> v5);
      return v4 + 16 * v5;
    }
    else if (*(_BYTE *)(a1 + 5) == 6
           && (v6 = *(unsigned int *)(a1 + 32), v7 = *(_DWORD *)(a1 + 36), v6 < v7))
    {
      v8 = a1 + 8 * v6;
      *(_QWORD *)(v8 + 56) = 0;
      v9 = (unint64_t *)(v8 + 64);
      v10 = v7 - 1 - v6;
      while (v10)
      {
        v4 += 1024;
        v12 = *v9++;
        v11 = v12;
        LODWORD(v6) = v6 + 1;
        --v10;
        if (v12)
        {
          v3 = __rbit64(v11);
          *(_DWORD *)(a1 + 32) = v6;
          *(_QWORD *)(a1 + 24) = v4;
          goto LABEL_4;
        }
      }
      *(_DWORD *)(a1 + 32) = v7;
      return 0;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t bmalloc_heap_config_specialized_local_allocator_try_allocate_slow(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, _BOOL8))
{
  uint64_t medium_segregated_with_free_bits;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;

  if (*(_BYTE *)(a1 + 3) != 2)
    pas_local_allocator_scavenger_data_commit_if_necessary_slow((BOOL *)a1, 0);
  while (2)
  {
    medium_segregated_with_free_bits = 0;
    LODWORD(v11) = 1;
    switch(*(_BYTE *)(a1 + 5))
    {
      case 7:
        medium_segregated_with_free_bits = bmalloc_small_segregated_page_config_specialized_local_allocator_try_allocate_in_primordial_partial_view(a1);
        goto LABEL_7;
      case 8:
        medium_segregated_with_free_bits = bmalloc_heap_config_specialized_local_allocator_try_allocate_medium_segregated_with_free_bits(a1);
        goto LABEL_7;
      case 9:
        medium_segregated_with_free_bits = bmalloc_medium_segregated_page_config_specialized_local_allocator_try_allocate_in_primordial_partial_view(a1);
LABEL_7:
        LODWORD(v11) = (v12 & 1) == 0;
        goto LABEL_8;
      case 0xD:
        *(_WORD *)(a1 + 1) = 256;
        LODWORD(v11) = bmalloc_small_bitfit_page_config_specialized_allocator_try_allocate((uint64_t *)(a1 + 56), a1, a2, a3);
        medium_segregated_with_free_bits = v13;
        v11 = v11;
        if (v11 != 1)
          goto LABEL_21;
        goto LABEL_15;
      case 0xE:
        *(_WORD *)(a1 + 1) = 256;
        LODWORD(v11) = bmalloc_medium_bitfit_page_config_specialized_allocator_try_allocate((uint64_t *)(a1 + 56), a1, a2, a3);
        medium_segregated_with_free_bits = v14;
        v11 = v11;
        if (v11 != 1)
          goto LABEL_21;
        goto LABEL_15;
      case 0xF:
        *(_WORD *)(a1 + 1) = 256;
        LODWORD(v11) = bmalloc_marge_bitfit_page_config_specialized_allocator_try_allocate((uint64_t *)(a1 + 56), a1, a2, a3);
        medium_segregated_with_free_bits = v15;
        v11 = v11;
        if (v11 == 1)
          goto LABEL_15;
        goto LABEL_21;
      default:
LABEL_8:
        v11 = v11;
        if (v11 == 1)
        {
LABEL_15:
          if ((*(_BYTE *)(a1 + 5) - 4) > 7u)
            v16 = 0;
          else
            v16 = qword_19919FC20[(char)(*(_BYTE *)(a1 + 5) - 4)];
          (*((void (**)(uint64_t, uint64_t))*(&pas_segregated_page_config_kind_for_config_table + v16) + 26))(a1, a5);
          if (!*(_QWORD *)(a1 + 24))
          {
            medium_segregated_with_free_bits = 0;
            v17 = 0;
            goto LABEL_25;
          }
          medium_segregated_with_free_bits = bmalloc_heap_config_specialized_local_allocator_try_allocate_inline_cases(a1);
          if (v17)
            goto LABEL_25;
          continue;
        }
LABEL_21:
        v17 = v11 == 0;
        if (v11)
          medium_segregated_with_free_bits = 0;
LABEL_25:
        *(_BYTE *)a1 = 0;
        return a6(medium_segregated_with_free_bits, v17);
    }
  }
}

void *bmalloc_heap_config_specialized_try_allocate_common_impl_slow(uint64_t *a1, int a2, size_t size, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unint64_t v15;
  void *result;
  unint64_t v17;
  unsigned int *v18;
  int v19;
  __int16 v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  BOOL v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v29;
  int v30;
  unsigned int v31;
  os_unfair_lock_s *v32;
  os_unfair_lock_t v33;
  uint64_t os_unfair_lock_opaque;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t pgm;
  char v39;
  os_unfair_lock_t v40;
  unsigned int v41;
  os_unfair_lock_s *v43;
  unsigned int v44;
  os_unfair_lock_s *v46;
  char v47;
  char v48;
  int v49;
  unsigned int v50;
  os_unfair_lock_t v51;
  int v52;
  unsigned int v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  unint64_t v57;
  unsigned int v58;
  int v60;
  unsigned int v61;
  os_unfair_lock_t v62;
  unint64_t StatusReg;
  unint64_t v64;
  unsigned int v65;
  os_unfair_lock_s *v67;
  unsigned int v68;
  char v70;
  int v71;
  unsigned int v72;
  os_unfair_lock_t v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  os_unfair_lock_s *v78;
  unint64_t *p_os_unfair_lock_opaque;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  char v91;
  os_unfair_lock_t v92;
  os_unfair_lock_t lock;
  os_unfair_lock_t v94;
  os_unfair_lock_t v95;
  os_unfair_lock_s *v96;
  unint64_t v97;
  size_t v98;

  if (*(unsigned int *)(*a1 + 4) <= a4)
    v15 = a4;
  else
    v15 = *(unsigned int *)(*a1 + 4);
  if (bmalloc::debugHeapCache == 1)
  {
LABEL_14:
    v17 = a1[1];
    if (v17)
    {
      if (a2 == 1)
        v18 = (unsigned int *)(a1 + 3);
      else
        v18 = 0;
      if (!pas_probabilistic_guard_malloc_can_use)
        goto LABEL_23;
    }
    else
    {
      v17 = pas_ensure_heap_slow(a1, a2, (uint64_t)&bmalloc_heap_config, a6);
      if (a2 == 1)
        v18 = (unsigned int *)(a1 + 3);
      else
        v18 = 0;
      if (!pas_probabilistic_guard_malloc_can_use)
        goto LABEL_23;
    }
    v19 = (unsigned __int16)(pas_probabilistic_guard_malloc_counter + 1);
    if (v19 == (unsigned __int16)pas_probabilistic_guard_malloc_random)
      v20 = 0;
    else
      v20 = pas_probabilistic_guard_malloc_counter + 1;
    pas_probabilistic_guard_malloc_counter = v20;
    if (v19 == (unsigned __int16)pas_probabilistic_guard_malloc_random)
    {
      v62 = 0;
      v94 = 0;
      v95 = 0;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v64 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      do
      {
        if (v62)
        {
          v65 = *(_DWORD *)(v64 + 24);
          while (!__ldaxr(&v62->_os_unfair_lock_opaque))
          {
            if (!__stxr(v65, &v62->_os_unfair_lock_opaque))
              goto LABEL_120;
          }
          __clrex();
          os_unfair_lock_lock(v62);
LABEL_120:
          v67 = v94;
          v94 = 0;
          v95 = v67;
        }
        v68 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
        {
          if (!__stxr(v68, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_126;
        }
        __clrex();
        os_unfair_lock_lock(&pas_heap_lock);
LABEL_126:
        pgm = pas_large_heap_try_allocate_pgm(v17 + 40, size, v15, a5, (uint64_t)&bmalloc_heap_config, (uint64_t)&v94);
        v48 = v70;
        v71 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v72 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
          if (v72 != v71)
            break;
          if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_131;
        }
        __clrex();
        os_unfair_lock_unlock(&pas_heap_lock);
LABEL_131:
        v73 = v95;
        if (v95)
        {
          v74 = *(_DWORD *)(StatusReg + 24);
          while (1)
          {
            v75 = __ldxr(&v73->_os_unfair_lock_opaque);
            if (v75 != v74)
              break;
            if (!__stlxr(0, &v73->_os_unfair_lock_opaque))
              goto LABEL_112;
          }
          __clrex();
          os_unfair_lock_unlock(v73);
LABEL_112:
          v95 = 0;
        }
        v62 = v94;
      }
      while (v94);
      goto LABEL_136;
    }
LABEL_23:
    v21 = (size + 15) >> 4;
    if ((v21 >= *(unsigned int *)(v17 + 36)
       || (v22 = *(_QWORD *)(v17 + 16)) == 0
       || ((v23 = *(unsigned int *)(v22 + 4 * v21),
            v24 = (unsigned int *)(pas_compact_heap_reservation_base + 8 * v23),
            (_DWORD)v23)
         ? (v25 = v24 == 0)
         : (v25 = 1),
           v25))
      && (v24 = (unsigned int *)pas_segregated_heap_size_directory_for_index_slow(v17, v21, v18, &bmalloc_heap_config)) == 0
      || 1 << ((unint64_t)v24[6] >> 27) < v15)
    {
      v26 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v27 = *(_DWORD *)(v26 + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v27, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_37;
      }
      __clrex();
      os_unfair_lock_lock(&pas_heap_lock);
LABEL_37:
      v29 = pas_segregated_heap_ensure_size_directory_for_size(v17, size, v15, a8, (uint64_t)&bmalloc_heap_config, v18, 1);
      v24 = (unsigned int *)v29;
      v30 = *(_DWORD *)(v26 + 24);
      while (1)
      {
        v31 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v31 != v30)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        {
          if (v29)
            goto LABEL_41;
          goto LABEL_48;
        }
      }
      __clrex();
      os_unfair_lock_unlock(&pas_heap_lock);
      if (v24)
        goto LABEL_41;
LABEL_48:
      v40 = 0;
      v92 = 0;
      lock = 0;
      do
      {
        if (v40)
        {
          v41 = *(_DWORD *)(v26 + 24);
          while (!__ldaxr(&v40->_os_unfair_lock_opaque))
          {
            if (!__stxr(v41, &v40->_os_unfair_lock_opaque))
              goto LABEL_58;
          }
          __clrex();
          os_unfair_lock_lock(v40);
LABEL_58:
          v43 = v92;
          v92 = 0;
          lock = v43;
        }
        v44 = *(_DWORD *)(v26 + 24);
        while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
        {
          if (!__stxr(v44, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_64;
        }
        __clrex();
        os_unfair_lock_lock(&pas_heap_lock);
LABEL_64:
        v97 = v15;
        v98 = size;
        v46 = (os_unfair_lock_s *)allocate_impl(v17 + 40, &v98, &v97, (uint64_t)&bmalloc_heap_config, (uint64_t)&v92);
        pgm = (uint64_t)v46;
        v48 = v47;
        if ((v47 & 1) != 0)
        {
          v94 = v46;
          v95 = (os_unfair_lock_s *)((char *)v46 + v98);
          v96 = (os_unfair_lock_s *)(v17 + 40);
          pas_large_map_add(&v94);
        }
        v49 = *(_DWORD *)(v26 + 24);
        while (1)
        {
          v50 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
          if (v50 != v49)
            break;
          if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          {
            v51 = lock;
            if (!lock)
              goto LABEL_51;
            goto LABEL_72;
          }
        }
        __clrex();
        os_unfair_lock_unlock(&pas_heap_lock);
        v51 = lock;
        if (!lock)
          goto LABEL_51;
LABEL_72:
        v52 = *(_DWORD *)(v26 + 24);
        while (1)
        {
          v53 = __ldxr(&v51->_os_unfair_lock_opaque);
          if (v53 != v52)
            break;
          if (!__stlxr(0, &v51->_os_unfair_lock_opaque))
            goto LABEL_50;
        }
        __clrex();
        os_unfair_lock_unlock(v51);
LABEL_50:
        lock = 0;
LABEL_51:
        v40 = v92;
      }
      while (v92);
LABEL_136:
      pas_scavenger_notify_eligibility_if_needed();
      if (*MEMORY[0x1E0C83EB8])
        return (void *)pas_msl_malloc_logging_slow(size, pgm, v48);
      return (void *)pgm;
    }
LABEL_41:
    if (v24[9]
      && (*(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752)
       || !pthread_self_is_exiting_np()
       && pas_msl_is_enabled_flag_value
       && (pas_msl_is_enabled_flag_value != 2
        || (pthread_once(&pas_compute_msl_is_enabled_key, (void (*)(void))compute_msl_status),
            pas_msl_is_enabled_flag_value))))
    {
      pas_segregated_size_directory_get_allocator_from_tlc((uint64_t)v24, size, a8, (uint64_t)&bmalloc_heap_config, v18, &v94);
      v33 = v95;
      v32 = v96;
      LOBYTE(v95->_os_unfair_lock_opaque) = 1;
      os_unfair_lock_opaque = v33[4]._os_unfair_lock_opaque;
      if ((_DWORD)os_unfair_lock_opaque)
        goto LABEL_80;
    }
    else
    {
      v54 = v24[7] & 0x7FLL;
      if (v54 <= 0x1F)
      {
        v57 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
        do
        {
          v32 = (os_unfair_lock_s *)(pas_baseline_allocator_table + 320 * v54);
          v58 = *(_DWORD *)(v57 + 24);
          while (!__ldaxr(&v32->_os_unfair_lock_opaque))
          {
            if (!__stxr(v58, &v32->_os_unfair_lock_opaque))
            {
              if ((v24[7] & 0x7F) == v54)
                goto LABEL_79;
              goto LABEL_97;
            }
          }
          __clrex();
          os_unfair_lock_lock(v32);
          if ((v24[7] & 0x7F) == v54)
            goto LABEL_79;
LABEL_97:
          v60 = *(_DWORD *)(v57 + 24);
          while (1)
          {
            v61 = __ldxr(&v32->_os_unfair_lock_opaque);
            if (v61 != v60)
              break;
            if (!__stlxr(0, &v32->_os_unfair_lock_opaque))
              goto LABEL_90;
          }
          __clrex();
          os_unfair_lock_unlock(v32);
LABEL_90:
          v54 = v24[7] & 0x7FLL;
        }
        while (v54 <= 0x1F);
      }
      v32 = pas_segregated_size_directory_select_allocator_slow((uint64_t)v24);
LABEL_79:
      v33 = v32 + 2;
      LOBYTE(v32[2]._os_unfair_lock_opaque) = 1;
      os_unfair_lock_opaque = v32[6]._os_unfair_lock_opaque;
      if ((_DWORD)os_unfair_lock_opaque)
      {
LABEL_80:
        v33[4]._os_unfair_lock_opaque = os_unfair_lock_opaque - v33[5]._os_unfair_lock_opaque;
        pgm = *(_QWORD *)&v33[2]._os_unfair_lock_opaque - os_unfair_lock_opaque;
        LOBYTE(v33->_os_unfair_lock_opaque) = 0;
        v39 = 1;
        if (!v32)
          goto LABEL_86;
        goto LABEL_81;
      }
    }
    v35 = *(_QWORD *)&v33[10]._os_unfair_lock_opaque;
    v36 = *(_QWORD *)&v33[6]._os_unfair_lock_opaque;
    if (v35)
    {
LABEL_45:
      v37 = __clz(v35);
      *(_QWORD *)&v33[10]._os_unfair_lock_opaque = v35 & ~(0x8000000000000000 >> v37);
      pgm = v36 + 16 * v37;
      LOBYTE(v33->_os_unfair_lock_opaque) = 0;
      v39 = 1;
      if (!v32)
        goto LABEL_86;
    }
    else
    {
      if (BYTE1(v33[1]._os_unfair_lock_opaque) == 6)
      {
        v76 = v33[8]._os_unfair_lock_opaque;
        v77 = v33[9]._os_unfair_lock_opaque;
        if (v76 < v77)
        {
          v78 = &v33[2 * v76];
          *(_QWORD *)&v78[14]._os_unfair_lock_opaque = 0;
          p_os_unfair_lock_opaque = (unint64_t *)&v78[16]._os_unfair_lock_opaque;
          v80 = v77 - 1 - v76;
          while (v80)
          {
            v36 += 1024;
            v82 = *p_os_unfair_lock_opaque++;
            v81 = v82;
            LODWORD(v76) = v76 + 1;
            --v80;
            if (v82)
            {
              v35 = __rbit64(v81);
              v33[8]._os_unfair_lock_opaque = v76;
              *(_QWORD *)&v33[6]._os_unfair_lock_opaque = v36;
              goto LABEL_45;
            }
          }
          v33[8]._os_unfair_lock_opaque = v77;
        }
      }
      if (pas_debug_heap_is_enabled(2))
      {
        pgm = (uint64_t)pas_debug_heap_allocate(size, v15);
        v39 = v91;
        if (!v32)
          goto LABEL_86;
      }
      else if (BYTE1(v33[1]._os_unfair_lock_opaque) == 6)
      {
        pgm = bmalloc_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow((uint64_t)v33, v83, v84, (uint64_t)pas_allocation_result_identity_0, v85, v86, v87, v88);
        v39 = v89;
        if (!v32)
          goto LABEL_86;
      }
      else
      {
        pgm = bmalloc_heap_config_specialized_local_allocator_try_allocate_slow_187((uint64_t)v33, size, v15, a7);
        v39 = v90;
        if (!v32)
          goto LABEL_86;
      }
    }
LABEL_81:
    v55 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (1)
    {
      v56 = __ldxr(&v32->_os_unfair_lock_opaque);
      if (v56 != v55)
        break;
      if (!__stlxr(0, &v32->_os_unfair_lock_opaque))
        goto LABEL_86;
    }
    __clrex();
    os_unfair_lock_unlock(v32);
LABEL_86:
    if (*MEMORY[0x1E0C83EB8])
      return (void *)pas_msl_malloc_logging_slow(size, pgm, v39);
    return (void *)pgm;
  }
  if (bmalloc::debugHeapCache)
    return pas_debug_heap_allocate(size, v15);
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
    if (*(_BYTE *)bmalloc::StaticPerProcess<bmalloc::Environment>::getSlowCase(0))
      goto LABEL_8;
    goto LABEL_13;
  }
  if (!*(_BYTE *)bmalloc::StaticPerProcessStorageTraits<bmalloc::Environment>::Storage::s_object)
  {
LABEL_13:
    bmalloc::debugHeapCache = 1;
    goto LABEL_14;
  }
LABEL_8:
  result = (void *)bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object;
  if (!bmalloc::StaticPerProcessStorageTraits<bmalloc::DebugHeap>::Storage::s_object)
    result = (void *)bmalloc::StaticPerProcess<bmalloc::DebugHeap>::getSlowCase();
  bmalloc::debugHeapCache = (uint64_t)result;
  if (result)
    return pas_debug_heap_allocate(size, v15);
  __break(0xC471u);
  return result;
}

uint64_t bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  int v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  const os_unfair_lock *v18;
  uint64_t v19;
  _BYTE *v20;
  unsigned int *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int128 *v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  unint64_t v33;
  _DWORD *v34;
  int v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  os_unfair_lock_s *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  unsigned int v57;
  char *v58;
  uint64_t v59;
  os_unfair_lock_s *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  char *v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  BOOL v83;
  unint64_t v84;
  _BOOL8 v85;
  unint64_t v86;
  unint64_t v87;
  int8x16_t *v88;
  int8x16_t v89;
  int8x16_t v90;
  unint64_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x8_t v98;
  int8x8_t *v99;
  unint64_t v100;
  int8x8_t v101;
  int8x8_t v102;
  uint64_t v103;
  _BYTE *v104;
  char v105;
  int v106;
  unsigned int v107;

  if ((_DWORD)a4 != 2)
  {
    v31 = a3;
    if (pas_debug_heap_is_enabled(2))
    {
      pas_debug_heap_free((void *)a2);
      return 1;
    }
    if (*MEMORY[0x1E0C83EB8])
    {
      pas_msl_free_logging_slow(a2);
      v33 = a2 & 0xFFFFFFFFFFFE0000;
      v34 = off_1ECF42618;
      if (!off_1ECF42618)
        goto LABEL_46;
    }
    else
    {
      v33 = a2 & 0xFFFFFFFFFFFE0000;
      v34 = off_1ECF42618;
      if (!off_1ECF42618)
        goto LABEL_46;
    }
    v35 = (a2 >> 17) ^ ((a2 >> 17) >> 4);
    v36 = ((v35 ^ 0xDEADBEEF) + 32 * v35) ^ (((v35 ^ 0xDEADBEEF) + 32 * v35) >> 11);
    v37 = (char *)(v34 + 8);
    v38 = v34[3] & v36;
    v39 = *(_QWORD *)&v34[4 * v38 + 8];
    if (v39 == v33)
    {
LABEL_45:
      v20 = *(_BYTE **)&v37[16 * v38 + 8];
      if (v20)
      {
LABEL_52:
        switch(*v20)
        {
          case 1:
            v47 = *(os_unfair_lock_s **)((a2 & 0xFFFFFFFFFFFFC000) + 8);
            if (v47)
              v12 = pas_segregated_page_switch_lock_slow(a2 & 0xFFFFFFFFFFFFC000, 0, v47);
            else
              v12 = 0;
            v48 = *(_DWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 4 * ((a2 >> 9) & 0x1F) + 0x2C) & ~(1 << (a2 >> 4));
            *(_DWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 4 * ((a2 >> 9) & 0x1F) + 0x2C) = v48;
            v49 = *(unsigned int *)((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 0x20) & 0xFFFFFFFFFFFFFFF8)
                                  + 4 * ((a2 >> 8) & 0x3F)
                                  + 20);
            if ((_DWORD)v49)
              v50 = pas_compact_heap_reservation_base + 8 * v49;
            else
              v50 = 0;
            if ((*(_BYTE *)(v50 + 19) & 4) != 0)
            {
              if (!v48)
                goto LABEL_60;
            }
            else
            {
              pas_segregated_partial_view_note_eligibility(v50, a2 & 0xFFFFFFFFFFFFC000);
              if (!v48)
              {
LABEL_60:
                if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 0x18) == 1)
                {
                  pas_segregated_page_note_emptiness(a2 & 0xFFFFFFFFFFFFC000, 0);
                  if (!v12)
                    return 1;
                }
                else
                {
                  --*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 0x18);
                  if (!v12)
                    return 1;
                }
LABEL_97:
                v79 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
                do
                {
                  v80 = __ldxr(&v12->_os_unfair_lock_opaque);
                  if (v80 != v79)
                    goto LABEL_148;
                }
                while (__stlxr(0, &v12->_os_unfair_lock_opaque));
                return 1;
              }
            }
            if (!v12)
              return 1;
            goto LABEL_97;
          case 2:
            v51 = *(unsigned int *)(a1 + 8000);
            if (v51 < 0x3E7)
            {
              v52 = a2 | 0x5000000000000;
              goto LABEL_103;
            }
            v76 = a1;
            v77 = a2;
            v78 = 5;
            goto LABEL_92;
          case 3:
            v53 = (a2 >> 17) ^ ((a2 >> 17) >> 4);
            v54 = ((v53 ^ 0xDEADBEEF) + 32 * v53) ^ (((v53 ^ 0xDEADBEEF) + 32 * v53) >> 11);
            v55 = (char *)off_1ECF42618 + 32;
            v56 = *((_DWORD *)off_1ECF42618 + 3) & v54;
            if (*((_QWORD *)off_1ECF42618 + 2 * v56 + 4) != v33)
            {
              v57 = v54 + 1;
              do
                v56 = *((_DWORD *)off_1ECF42618 + 3) & v57++;
              while (*(_QWORD *)&v55[16 * v56] != v33);
            }
            v58 = &v55[16 * v56];
            v59 = *((_QWORD *)v58 + 1);
            v60 = *(os_unfair_lock_s **)(v59 + 8);
            if (v60)
              v12 = pas_segregated_page_switch_lock_slow(*((_QWORD *)v58 + 1), 0, v60);
            else
              v12 = 0;
            v61 = v59 + 4 * ((a2 >> 14) & 7);
            v62 = *(_DWORD *)(v61 + 44) & ~(1 << (a2 >> 9));
            *(_DWORD *)(v61 + 44) = v62;
            v63 = *(_QWORD *)(v59 + 32);
            v64 = *(unsigned int *)((v63 & 0xFFFFFFFFFFFFFFF8) + 4 * ((a2 >> 12) & 0x1F) + 20);
            if ((_DWORD)v64)
              v65 = pas_compact_heap_reservation_base + 8 * v64;
            else
              v65 = 0;
            if ((*(_BYTE *)(v65 + 19) & 4) == 0)
            {
              pas_segregated_partial_view_note_eligibility(v65, v59);
              v63 = *(_QWORD *)(v59 + 32);
            }
            v66 = a2 & 0x1FFFF;
            if ((v63 & 6) != 0)
            {
              v67 = *(unsigned int *)((v63 & 0xFFFFFFFFFFFFFFF8) + ((v66 >> 10) & 0x7C) + 20);
              if ((_DWORD)v67)
                v68 = pas_compact_heap_reservation_base + 8 * v67;
              else
                v68 = 0;
              v69 = *(_DWORD *)(((8 * *(unsigned __int16 *)(v68 + 7)) | ((unint64_t)*(unsigned __int8 *)(v68 + 9) << 19))
                              + pas_compact_heap_reservation_base
                              + 24) & 0x7FFFFFF;
            }
            else
            {
              v69 = *(_DWORD *)(v59 + 4);
            }
            if (!v69 || (v81 = v66 >> 14, v82 = (v66 + v69 - 1) >> 14, v81 > v82))
            {
              v83 = 1;
              goto LABEL_128;
            }
            v84 = v82 - v81 + 1;
            if (v84 < 8)
            {
              LOBYTE(v85) = 0;
              v86 = v81;
              goto LABEL_123;
            }
            if (v84 >= 0x20)
            {
              v87 = v84 & 0xFFFFFFFFFFFFFFE0;
              v88 = (int8x16_t *)(v81 + v59 + 92);
              v89 = 0uLL;
              v90.i64[0] = -1;
              v90.i64[1] = -1;
              v91 = v84 & 0xFFFFFFFFFFFFFFE0;
              v92 = 0uLL;
              do
              {
                v93 = vaddq_s8(v88[-1], v90);
                v94 = vaddq_s8(*v88, v90);
                v88[-1] = v93;
                *v88 = v94;
                v95 = vceqzq_s8(v93);
                v96 = vceqzq_s8(v94);
                v89 = vsubq_s8(vbicq_s8(v89, v95), v95);
                v92 = vsubq_s8(vbicq_s8(v92, v96), v96);
                v88 += 2;
                v91 -= 32;
              }
              while (v91);
              v97 = vorrq_s8(v89, v92);
              LODWORD(v85) = vmaxvq_u8((uint8x16_t)vtstq_s8(v97, v97)) & 1;
              if (v84 == v87)
                goto LABEL_127;
              if ((v84 & 0x18) == 0)
              {
                v86 = v81 | v87;
                goto LABEL_123;
              }
            }
            else
            {
              LODWORD(v85) = 0;
              v87 = 0;
            }
            v98 = vdup_n_s8(v85);
            v86 = v81 | v84 & 0xFFFFFFFFFFFFFFF8;
            v99 = (int8x8_t *)(v87 + v81 + v59 + 76);
            v100 = v87 - (v84 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v101 = vadd_s8(*v99, (int8x8_t)-1);
              *v99++ = v101;
              v102 = vceqz_s8(v101);
              v98 = vsub_s8(vbic_s8(v98, v102), v102);
              v100 += 8;
            }
            while (v100);
            v85 = *(_QWORD *)&v98 != 0;
            if (v84 == (v84 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_127;
LABEL_123:
            v103 = v82 - v86 + 1;
            v104 = (_BYTE *)(v86 + v59 + 76);
            do
            {
              v105 = *v104 - 1;
              *v104++ = v105;
              if (!v105)
                LOBYTE(v85) = 1;
              --v103;
            }
            while (v103);
LABEL_127:
            v83 = !v85;
LABEL_128:
            if (pas_segregated_page_deallocate_should_verify_granules)
              pas_segregated_page_verify_granules((unsigned __int8 *)v59);
            if (v83)
            {
              if (v62)
                goto LABEL_132;
            }
            else
            {
              pas_segregated_page_note_emptiness(v59, 1);
              if (v62)
              {
LABEL_132:
                if (!v12)
                  return 1;
                goto LABEL_133;
              }
            }
            if (*(_QWORD *)(v59 + 24) == 1)
            {
              pas_segregated_page_note_emptiness(v59, 0);
              if (!v12)
                return 1;
            }
            else
            {
              --*(_QWORD *)(v59 + 24);
              if (!v12)
                return 1;
            }
LABEL_133:
            v106 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
            do
            {
              v107 = __ldxr(&v12->_os_unfair_lock_opaque);
              if (v107 != v106)
                goto LABEL_148;
            }
            while (__stlxr(0, &v12->_os_unfair_lock_opaque));
            return 1;
          case 4:
            v70 = (a2 >> 17) ^ ((a2 >> 17) >> 4);
            v71 = ((v70 ^ 0xDEADBEEF) + 32 * v70) ^ (((v70 ^ 0xDEADBEEF) + 32 * v70) >> 11);
            v72 = (char *)off_1ECF42618 + 32;
            v73 = *((_DWORD *)off_1ECF42618 + 3) & v71;
            if (*((_QWORD *)off_1ECF42618 + 2 * v73 + 4) != v33)
            {
              v74 = v71 + 1;
              do
                v73 = *((_DWORD *)off_1ECF42618 + 3) & v74++;
              while (*(_QWORD *)&v72[16 * v73] != v33);
            }
            v75 = *(_QWORD *)(a1 + 8008) + *(unsigned int *)(*(_QWORD *)&v72[16 * v73 + 8] + 4);
            if (v75 > 0xC350
              || (*(_QWORD *)(a1 + 8008) = v75, v51 = *(unsigned int *)(a1 + 8000), v51 >= 0x3E7))
            {
              v76 = a1;
              v77 = a2;
              v78 = 7;
LABEL_92:
              pas_thread_local_cache_append_deallocation_slow(v76, v77, (os_unfair_lock_s *)v78, a4, a5, a6, a7, a8);
              return 1;
            }
            else
            {
              v52 = a2 | 0x7000000000000;
LABEL_103:
              *(_QWORD *)(a1 + 8 * v51) = v52;
              *(_DWORD *)(a1 + 8000) = v51 + 1;
              return 1;
            }
          case 5:
            goto LABEL_17;
          case 6:
            bmalloc_medium_bitfit_page_config_specialized_page_deallocate_with_page((uint64_t)v20, a2);
            return 1;
          case 7:
            bmalloc_marge_bitfit_page_config_specialized_page_deallocate_with_page((uint64_t)v20, a2);
            return 1;
          default:
            return 0;
        }
      }
    }
    else
    {
      v40 = v36 + 1;
      while (v39 != -1)
      {
        v38 = v34[3] & v40;
        v39 = *(_QWORD *)&v37[16 * v38];
        ++v40;
        if (v39 == v33)
          goto LABEL_45;
      }
    }
LABEL_46:
    if (!off_1ECF42608)
      goto LABEL_65;
    v41 = (a2 >> 22) ^ ((a2 >> 22) >> 4);
    v42 = ((v41 ^ 0xDEADBEEF) + 32 * v41) ^ (((v41 ^ 0xDEADBEEF) + 32 * v41) >> 11);
    v43 = (char *)off_1ECF42608 + 32;
    v44 = *((_DWORD *)off_1ECF42608 + 3) & v42;
    v45 = *((_QWORD *)off_1ECF42608 + 2 * v44 + 4);
    if (v45 != (a2 & 0xFFFFFFFFFFC00000))
    {
      v46 = v42 + 1;
      while (v45 != -1)
      {
        v44 = *((_DWORD *)off_1ECF42608 + 3) & v46;
        v45 = *(_QWORD *)&v43[16 * v44];
        ++v46;
        if (v45 == (a2 & 0xFFFFFFFFFFC00000))
          goto LABEL_51;
      }
LABEL_65:
      if (a2)
        return pas_try_deallocate_known_large(a2, (uint64_t)&bmalloc_heap_config, v31);
      return 1;
    }
LABEL_51:
    v20 = *(_BYTE **)&v43[16 * v44 + 8];
    if (!v20)
      goto LABEL_65;
    goto LABEL_52;
  }
  v9 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000);
  v10 = *(unsigned __int8 *)(a2 & 0xFFFFFFFFFFFFC000);
  if (v10 != 5)
  {
    if (v10 != 1)
      return 0;
    v11 = *(os_unfair_lock_s **)((a2 & 0xFFFFFFFFFFFFC000) + 8);
    if (v11)
      v12 = pas_segregated_page_switch_lock_slow(a2 & 0xFFFFFFFFFFFFC000, 0, v11);
    else
      v12 = 0;
    v13 = (char *)v9 + 4 * ((a2 >> 9) & 0x1F);
    v14 = *((_DWORD *)v13 + 11) & ~(1 << (a2 >> 4));
    *((_DWORD *)v13 + 11) = v14;
    v15 = *(unsigned int *)((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 0x20) & 0xFFFFFFFFFFFFFFF8)
                          + 4 * ((a2 >> 8) & 0x3F)
                          + 20);
    if ((_DWORD)v15)
      v16 = pas_compact_heap_reservation_base + 8 * v15;
    else
      v16 = 0;
    v17 = *(_BYTE *)(v16 + 19);
    if ((v17 & 4) != 0)
    {
      if (!v14)
        goto LABEL_22;
    }
    else
    {
      v18 = (const os_unfair_lock *)v9[1];
      if (v18)
      {
        os_unfair_lock_assert_owner(v18);
        v17 = *(_BYTE *)(v16 + 19);
      }
      if ((v17 & 1) != 0)
      {
        *(_BYTE *)(v16 + 19) = v17 | 6;
        if (!v14)
          goto LABEL_22;
      }
      else
      {
        v19 = ((8 * *(unsigned __int16 *)(v16 + 7)) | ((unint64_t)*(unsigned __int8 *)(v16 + 9) << 19))
            + pas_compact_heap_reservation_base;
        if ((v16 & 3) != 0)
        {
          pas_segregated_directory_view_did_become_eligible_at_index(v19, 0);
          *(_BYTE *)(v16 + 19) |= 4u;
          if (!v14)
            goto LABEL_22;
        }
        else
        {
          pas_segregated_directory_view_did_become_eligible_at_index(v19, *(unsigned __int8 *)((v16 & 0xFFFFFFFFFFFFFFF8) + 16));
          *(_BYTE *)(v16 + 19) |= 4u;
          if (!v14)
          {
LABEL_22:
            if (v9[3] != 1)
            {
              --v9[3];
              if (v12)
                goto LABEL_31;
              return 1;
            }
            v22 = (unsigned int *)timebase_info_ptr;
            if (timebase_info_ptr)
            {
              v23 = mach_approximate_time();
              v25 = *v22;
              v24 = v22[1];
              if ((pas_get_epoch_first & 1) != 0)
              {
LABEL_28:
                v26 = v23 * v25;
                v27 = (unsigned __int128 *)(v9 + 2);
                v28 = v26 / v24;
                do
                  __ldxp(v27);
                while (__stxp(v28, v27));
                pas_segregated_view_note_emptiness(v9[4], (uint64_t)v9);
                if (v12)
                {
LABEL_31:
                  v29 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
                  while (1)
                  {
                    v30 = __ldxr(&v12->_os_unfair_lock_opaque);
                    if (v30 != v29)
                      break;
                    if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
                      return 1;
                  }
LABEL_148:
                  __clrex();
                  os_unfair_lock_unlock(v12);
                }
                return 1;
              }
            }
            else
            {
              get_timebase_info_slow();
              v23 = mach_approximate_time();
              v25 = timebase_info;
              v24 = *(unsigned int *)algn_1ECF57B54;
              if ((pas_get_epoch_first & 1) != 0)
                goto LABEL_28;
            }
            pas_get_epoch_first = 1;
            goto LABEL_28;
          }
        }
      }
    }
    if (v12)
      goto LABEL_31;
    return 1;
  }
  v20 = (_BYTE *)(a2 & 0xFFFFFFFFFFFFC000);
LABEL_17:
  bmalloc_small_bitfit_page_config_specialized_page_deallocate_with_page((uint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
  return 1;
}

uint64_t bmalloc_heap_config_specialized_local_allocator_try_allocate_slow_187(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  if (*(_BYTE *)(a1 + 3) != 2)
    pas_local_allocator_scavenger_data_commit_if_necessary_slow((BOOL *)a1, 0);
  while (2)
  {
    result = 0;
    LODWORD(v9) = 1;
    switch(*(_BYTE *)(a1 + 5))
    {
      case 7:
        result = bmalloc_small_segregated_page_config_specialized_local_allocator_try_allocate_in_primordial_partial_view(a1);
        goto LABEL_7;
      case 8:
        result = bmalloc_heap_config_specialized_local_allocator_try_allocate_medium_segregated_with_free_bits(a1);
        goto LABEL_7;
      case 9:
        result = bmalloc_medium_segregated_page_config_specialized_local_allocator_try_allocate_in_primordial_partial_view(a1);
LABEL_7:
        LODWORD(v9) = (v10 & 1) == 0;
        goto LABEL_8;
      case 0xD:
        *(_WORD *)(a1 + 1) = 256;
        LODWORD(v9) = bmalloc_small_bitfit_page_config_specialized_allocator_try_allocate((uint64_t *)(a1 + 56), a1, a2, a3);
        result = v11;
        v9 = v9;
        if (v9 != 1)
          goto LABEL_21;
        goto LABEL_15;
      case 0xE:
        *(_WORD *)(a1 + 1) = 256;
        LODWORD(v9) = bmalloc_medium_bitfit_page_config_specialized_allocator_try_allocate((uint64_t *)(a1 + 56), a1, a2, a3);
        result = v12;
        v9 = v9;
        if (v9 != 1)
          goto LABEL_21;
        goto LABEL_15;
      case 0xF:
        *(_WORD *)(a1 + 1) = 256;
        LODWORD(v9) = bmalloc_marge_bitfit_page_config_specialized_allocator_try_allocate((uint64_t *)(a1 + 56), a1, a2, a3);
        result = v13;
        v9 = v9;
        if (v9 == 1)
          goto LABEL_15;
        goto LABEL_21;
      default:
LABEL_8:
        v9 = v9;
        if (v9 == 1)
        {
LABEL_15:
          if ((*(_BYTE *)(a1 + 5) - 4) > 7u)
            v14 = 0;
          else
            v14 = qword_19919FC20[(char)(*(_BYTE *)(a1 + 5) - 4)];
          (*((void (**)(uint64_t, uint64_t))*(&pas_segregated_page_config_kind_for_config_table + v14) + 26))(a1, a4);
          if (!*(_QWORD *)(a1 + 24))
          {
            result = 0;
            goto LABEL_25;
          }
          result = bmalloc_heap_config_specialized_local_allocator_try_allocate_inline_cases(a1);
          if ((v15 & 1) != 0)
            goto LABEL_25;
          continue;
        }
LABEL_21:
        if (v9)
          result = 0;
LABEL_25:
        *(_BYTE *)a1 = 0;
        return result;
    }
  }
}

uint64_t bmalloc_type_as_heap_type_dump(unsigned int *a1, uint64_t (***a2)(_QWORD, uint64_t, uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  pas_stream_printf(a2, (uint64_t)"Size = %zu, Alignment = %zu, Type = ", a3, a4, a5, a6, a7, a8, *a1);
  v10 = (char *)*((_QWORD *)a1 + 1);
  v11 = strstr(v10, "[LibPasBmallocHeapType = ");
  if (!v11)
    return pas_stream_printf(a2, (uint64_t)"%s", v12, v13, v14, v15, v16, v17, (uint64_t)v10);
  LOBYTE(v18) = v11[25];
  if (!(_BYTE)v18)
    return pas_stream_printf(a2, (uint64_t)"%s", v12, v13, v14, v15, v16, v17, (uint64_t)v10);
  v19 = 0;
  v20 = 0;
  v21 = v11 + 26;
  while (1)
  {
    while (v18 != 93)
    {
      if ((char)v18 == 91)
        ++v20;
      v18 = v21[v19++];
      if (!v18)
        return pas_stream_printf(a2, (uint64_t)"%s", v12, v13, v14, v15, v16, v17, (uint64_t)v10);
    }
    if (!v20)
      break;
    --v20;
    v18 = v21[v19++];
    if (!v18)
      return pas_stream_printf(a2, (uint64_t)"%s", v12, v13, v14, v15, v16, v17, (uint64_t)v10);
  }
  if (strstr(v10, "primitiveHeapRefForTypeWithFlexibleArrayMember"))
    pas_stream_printf(a2, (uint64_t)"ObjectWithFlexibleArrayMember, ", v23, v24, v25, v26, v27, v28, v29);
  return pas_stream_printf(a2, (uint64_t)"%.*s", v23, v24, v25, v26, v27, v28, v19);
}

void jit_heap_add_fresh_memory(uint64_t a1, uint64_t a2)
{
  unint64_t StatusReg;
  unsigned int v5;
  int v7;
  unsigned int v8;
  int64x2_t v9;
  double (*v10)@<D0>(uint64_t@<X8>);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v5 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v5, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_6;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_6:
  os_unfair_lock_assert_owner(&pas_heap_lock);
  pas_enumerable_range_list_append(pas_enumerable_page_malloc_page_list, a1, a2);
  v9 = vdupq_n_s64(1uLL);
  v10 = fresh_memory_aligned_allocator;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  os_unfair_lock_assert_owner(&pas_heap_lock);
  merge_physical(jit_fresh_memory_heap, a1, a2, 1u, &v9);
  v7 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v8 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v8 != v7)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
}

uint64_t jit_heap_try_allocate(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (a1 + 3 <= 0x9C7 && v8 != 0)
  {
    v10 = *(unsigned int *)((char *)&jit_common_primitive_heap_support + ((a1 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 2504);
    if (*(_DWORD *)(v8 + 8052) > v10)
    {
      v11 = v8 + 8 * v10;
      v12 = v11 + 8064;
      *(_BYTE *)(v11 + 8064) = 1;
      v13 = *(unsigned int *)(v11 + 8080);
      if ((_DWORD)v13)
      {
        *(_DWORD *)(v12 + 16) = v13 - *(_DWORD *)(v12 + 20);
        result = *(_QWORD *)(v12 + 8) - v13;
        *(_BYTE *)v12 = 0;
        return result;
      }
      v15 = *(_QWORD *)(v12 + 40);
      v16 = *(_QWORD *)(v12 + 24);
      if (v15)
      {
LABEL_9:
        v17 = __clz(v15);
        *(_QWORD *)(v12 + 40) = v15 & ~(0x8000000000000000 >> v17);
        result = v16 + 16 * v17;
        *(_BYTE *)v12 = 0;
        return result;
      }
      if (*(_BYTE *)(v12 + 5) == 10)
      {
        v18 = *(unsigned int *)(v12 + 32);
        v19 = *(_DWORD *)(v12 + 36);
        if (v18 < v19)
        {
          *(_QWORD *)(v12 + 8 * v18 + 56) = 0;
          v20 = (unint64_t *)(8 * v18 + 8 * v10 + v8 + 8128);
          v21 = v19 - 1 - v18;
          while (v21)
          {
            v16 += 1024;
            v23 = *v20++;
            v22 = v23;
            LODWORD(v18) = v18 + 1;
            --v21;
            if (v23)
            {
              v15 = __rbit64(v22);
              *(_DWORD *)(v12 + 32) = v18;
              *(_QWORD *)(v12 + 24) = v16;
              goto LABEL_9;
            }
          }
          *(_DWORD *)(v12 + 32) = v19;
        }
      }
      *(_BYTE *)v12 = 0;
    }
  }
  return jit_try_allocate_common_primitive_impl_casual_case(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t jit_heap_get_size(unint64_t a1)
{
  int v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t result;
  unint64_t StatusReg;
  unsigned int v17;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41[3];

  if (off_1EE342948)
  {
    v2 = (a1 >> 14) ^ ((a1 >> 14) >> 4);
    v3 = ((v2 ^ 0xDEADBEEF) + 32 * v2) ^ (((v2 ^ 0xDEADBEEF) + 32 * v2) >> 11);
    v4 = (char *)off_1EE342948 + 32;
    v5 = *((_DWORD *)off_1EE342948 + 3) & v3;
    v6 = *((_QWORD *)off_1EE342948 + 2 * v5 + 4);
    if (v6 == (a1 & 0xFFFFFFFFFFFFC000))
    {
LABEL_6:
      v8 = *(_QWORD *)&v4[16 * v5 + 8];
      if (v8)
        goto LABEL_13;
    }
    else
    {
      v7 = v3 + 1;
      while (v6 != -1)
      {
        v5 = *((_DWORD *)off_1EE342948 + 3) & v7;
        v6 = *(_QWORD *)&v4[16 * v5];
        ++v7;
        if (v6 == (a1 & 0xFFFFFFFFFFFFC000))
          goto LABEL_6;
      }
    }
  }
  if (off_1EE342918)
  {
    v9 = (a1 >> 17) ^ ((a1 >> 17) >> 4);
    v10 = ((v9 ^ 0xDEADBEEF) + 32 * v9) ^ (((v9 ^ 0xDEADBEEF) + 32 * v9) >> 11);
    v11 = (char *)off_1EE342918 + 32;
    v12 = *((_DWORD *)off_1EE342918 + 3) & v10;
    v13 = *((_QWORD *)off_1EE342918 + 2 * v12 + 4);
    if (v13 != (a1 & 0xFFFFFFFFFFFE0000))
    {
      v14 = v10 + 1;
      while (v13 != -1)
      {
        v12 = *((_DWORD *)off_1EE342918 + 3) & v14;
        v13 = *(_QWORD *)&v11[16 * v12];
        ++v14;
        if (v13 == (a1 & 0xFFFFFFFFFFFE0000))
          goto LABEL_12;
      }
      goto LABEL_15;
    }
LABEL_12:
    v8 = *(_QWORD *)&v11[16 * v12 + 8];
    if (v8)
    {
LABEL_13:
      switch(*(_BYTE *)v8)
      {
        case 1:
          v22 = (*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * ((a1 >> 9) & 0x1F);
          goto LABEL_31;
        case 2:
        case 4:
          result = *(unsigned int *)(v8 + 4);
          break;
        case 3:
          v22 = (*(_QWORD *)(v8 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * a1;
LABEL_31:
          v23 = *(unsigned int *)(v22 + 20);
          if ((_DWORD)v23)
            v24 = pas_compact_heap_reservation_base + 8 * v23;
          else
            v24 = 0;
          v25 = *(unsigned __int16 *)(v24 + 7) | ((unint64_t)*(unsigned __int8 *)(v24 + 9) << 16);
          if ((_DWORD)v25)
            v26 = pas_compact_heap_reservation_base + 8 * v25;
          else
            v26 = 0;
          result = *(_DWORD *)(v26 + 24) & 0x7FFFFFF;
          break;
        case 5:
          v27 = v8 + 8 * ((a1 >> 8) & 0x3F);
          v28 = *(_QWORD *)(v27 + 528) >> (a1 >> 2);
          if (v28)
          {
            v29 = __clz(__rbit64(v28));
          }
          else
          {
            v33 = -(uint64_t)(a1 >> 2);
            v34 = (unint64_t *)(v27 + 536);
            do
            {
              v36 = *v34++;
              v35 = v36;
              v33 += 64;
            }
            while (!v36);
            v29 = __clz(__rbit64(v35)) + v33;
          }
          result = 4 * v29 + 4;
          break;
        case 6:
          v30 = v8 + 8 * ((a1 >> 14) & 7);
          v31 = *(_QWORD *)(v30 + 80);
          if (v31 >> SBYTE1(a1))
          {
            v32 = __clz(__rbit64(v31 >> SBYTE1(a1)));
          }
          else
          {
            v37 = -(uint64_t)((a1 >> 8) & 0x3F);
            v38 = (unint64_t *)(v30 + 88);
            do
            {
              v40 = *v38++;
              v39 = v40;
              v37 += 64;
            }
            while (!v40);
            v32 = __clz(__rbit64(v39)) + v37;
          }
          result = (v32 << 8) + 256;
          break;
        default:
          result = 0;
          break;
      }
      return result;
    }
  }
LABEL_15:
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v17 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v17, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_20;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_20:
  pas_large_map_find(a1, v41);
  if (v41[0])
    v19 = v41[1] - a1;
  else
    v19 = 0;
  v20 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v21 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v21 != v20)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v19;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return v19;
}

uint64_t jit_try_allocate_common_primitive_impl_casual_case(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26[3];

  v26[2] = 0;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v9)
    goto LABEL_15;
  v10 = (a1 + 3) >> 2;
  if (a1 + 3 >= 0x9C8)
  {
    v18 = pas_segregated_heap_medium_directory_tuple_for_index((uint64_t)&jit_common_primitive_heap, v10, 0, 0);
    if (!v18)
      goto LABEL_15;
    v11 = *(unsigned int *)(v18 + 4);
    if (!(_DWORD)v11)
      goto LABEL_15;
  }
  else
  {
    v11 = *((unsigned int *)&jit_common_primitive_heap_support + v10 + 626);
    if (!(_DWORD)v11)
      goto LABEL_15;
  }
  if (*(_DWORD *)(v9 + 8052) > v11)
  {
    v12 = v9 + 8 * v11 + 8064;
    goto LABEL_6;
  }
  if ((_DWORD)v11 == -1 || (pas_thread_local_cache_get_local_allocator_slow(v9, v11, 0, a4, a5, a6, a7, a8) & 1) == 0)
  {
LABEL_15:
    v26[0] = qword_1EE3428B8;
    v26[1] = (uint64_t)&jit_common_primitive_heap;
    return jit_try_allocate_common_primitive_impl_impl_slow(v26, a1);
  }
LABEL_6:
  *(_BYTE *)v12 = 1;
  v13 = *(unsigned int *)(v12 + 16);
  if ((_DWORD)v13)
  {
    *(_DWORD *)(v12 + 16) = v13 - *(_DWORD *)(v12 + 20);
    result = *(_QWORD *)(v12 + 8) - v13;
    *(_BYTE *)v12 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(v12 + 40);
    v16 = *(_QWORD *)(v12 + 24);
    if (v15)
    {
LABEL_9:
      v17 = __clz(v15);
      *(_QWORD *)(v12 + 40) = v15 & ~(0x8000000000000000 >> v17);
      result = v16 + 16 * v17;
      *(_BYTE *)v12 = 0;
    }
    else if (*(_BYTE *)(v12 + 5) == 10)
    {
      v19 = *(unsigned int *)(v12 + 32);
      v20 = *(_DWORD *)(v12 + 36);
      if (v19 < v20)
      {
        v21 = v12 + 8 * v19;
        *(_QWORD *)(v21 + 56) = 0;
        v22 = (unint64_t *)(v21 + 64);
        v23 = v20 - 1 - v19;
        while (v23)
        {
          v16 += 1024;
          v25 = *v22++;
          v24 = v25;
          LODWORD(v19) = v19 + 1;
          --v23;
          if (v25)
          {
            v15 = __rbit64(v24);
            *(_DWORD *)(v12 + 32) = v19;
            *(_QWORD *)(v12 + 24) = v16;
            goto LABEL_9;
          }
        }
        *(_DWORD *)(v12 + 32) = v20;
      }
      return jit_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(v12, 0, (uint64_t)&jit_allocator_counts, (uint64_t)pas_allocation_result_identity_1, a5, a6, a7, a8);
    }
    else
    {
      return jit_heap_config_specialized_local_allocator_try_allocate_slow(v12, a1, 1uLL, 0, (uint64_t)&jit_allocator_counts, (uint64_t (*)(uint64_t, _BOOL8))pas_allocation_result_identity_1);
    }
  }
  return result;
}

uint64_t jit_try_allocate_common_primitive_impl_impl_slow(uint64_t *a1, unint64_t a2)
{
  return jit_heap_config_specialized_try_allocate_common_impl_slow(a1, 2, a2, 1uLL, 0, (uint64_t)&jit_heap_runtime_config, (uint64_t)&jit_allocator_counts, 1);
}

uint64_t jit_type_dump(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t, uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return pas_stream_printf(a2, (uint64_t)"JIT", a3, a4, a5, a6, a7, a8, a9);
}

void jit_heap_config_activate()
{
  os_unfair_lock_assert_owner(&pas_heap_lock);
  os_unfair_lock_assert_owner(&pas_heap_lock);
  if ((pas_heap_config_kind_is_active_bitvector[0] & 4) == 0)
  {
    pas_heap_config_kind_is_active_bitvector[0] |= 4u;
    bmalloc_heap_config_activate();
  }
}

uint64_t jit_type_size()
{
  return 1;
}

uint64_t jit_type_alignment()
{
  return 1;
}

uint64_t jit_small_page_header_for_boundary(unint64_t a1)
{
  int v1;
  unsigned int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if (off_1EE342948)
  {
    v1 = (a1 >> 14) ^ ((a1 >> 14) >> 4);
    v2 = ((v1 ^ 0xDEADBEEF) + 32 * v1) ^ (((v1 ^ 0xDEADBEEF) + 32 * v1) >> 11);
    v3 = (char *)off_1EE342948 + 32;
    v4 = *((_DWORD *)off_1EE342948 + 3) & v2;
    v5 = *((_QWORD *)off_1EE342948 + 2 * v4 + 4);
    if (v5 == a1)
      return *(_QWORD *)&v3[16 * v4 + 8];
    v6 = v2 + 1;
    while (v5 != -1)
    {
      v4 = *((_DWORD *)off_1EE342948 + 3) & v6;
      v5 = *(_QWORD *)&v3[16 * v4];
      ++v6;
      if (v5 == a1)
        return *(_QWORD *)&v3[16 * v4 + 8];
    }
  }
  return 0;
}

uint64_t jit_small_boundary_for_page_header(uint64_t a1)
{
  return *(_QWORD *)(a1 - 16);
}

uint64_t jit_page_header_for_boundary_remote(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  _QWORD *v8;

  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 72) + 24);
  v3 = *v2;
  if (*v2)
  {
    v4 = (a2 ^ (a2 >> 4) ^ 0xDEADBEEF) + 32 * (a2 ^ (a2 >> 4));
    v5 = ((a2 >> 36) ^ HIDWORD(a2) ^ 0xDEADBEEF) + 32 * ((a2 >> 36) ^ HIDWORD(a2));
    v6 = v4 ^ ((v5 ^ v4) >> 11) ^ v5;
    v7 = *((_DWORD *)v2 + 3);
    while (1)
    {
      v8 = (_QWORD *)(v3 + 16 * (v6 & v7));
      if (*v8 == -1)
      {
        if (v8[1] != 1)
          return 0;
      }
      else if (*v8 == a2)
      {
        return v8[1];
      }
      ++v6;
    }
  }
  return 0;
}

_QWORD *jit_small_segregated_create_page_header(unint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;
  int v10;
  unsigned int v11;

  if (!a3)
  {
    v5 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v5, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  v7 = (_QWORD *)pas_utility_heap_try_allocate_with_alignment(188, 0x10uLL, (uint64_t)"pas_page_header_table/header");
  *v7 = a1;
  v8 = v7 + 2;
  pas_lock_free_read_ptr_ptr_hashtable_set(&off_1EE342948, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x4000, a1, (unint64_t)(v7 + 2));
  if (a3)
    return v8;
  v10 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v11 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v11 != v10)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v8;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return v8;
}

void jit_small_destroy_page_header(uint64_t a1, int a2)
{
  unint64_t StatusReg;
  unsigned int v4;
  int v6;
  unsigned int v7;

  if (a2)
  {
    pas_lock_free_read_ptr_ptr_hashtable_set(&off_1EE342948, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x4000, *(_QWORD *)(a1 - 16), 0);
    pas_utility_heap_deallocate(a1 - 16);
  }
  else
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v4 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v4, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_8;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_8:
    pas_lock_free_read_ptr_ptr_hashtable_set(&off_1EE342948, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x4000, *(_QWORD *)(a1 - 16), 0);
    pas_utility_heap_deallocate(a1 - 16);
    v6 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v7 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v7 != v6)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
}

unint64_t jit_small_segregated_allocate_page()
{
  int64x2_t v1;
  double (*v2)@<D0>(uint64_t@<X8>);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v1 = vdupq_n_s64(1uLL);
  v2 = fresh_memory_aligned_allocator;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  return try_allocate_without_fixing(jit_fresh_memory_heap, 0x4000uLL, 0x4000uLL, 0, (unint64_t *)&v1);
}

uint64_t jit_small_segregated_shared_page_directory_selector()
{
  return 0;
}

uint64_t jit_small_segregated_page_config_specialized_local_allocator_try_allocate_in_primordial_partial_view(uint64_t a1)
{
  unint64_t v2;
  int v3;
  unsigned int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  _BOOL4 v47;
  int v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  BOOL v52;
  int v53;
  int v55;
  int v57;
  int v59;
  int v61;
  int v63;
  int v65;
  int v67;
  int v69;
  int v71;
  int v73;
  int v75;
  int v77;
  int v79;
  int v81;
  int v83;
  int v85;
  int v87;
  int v89;
  int v91;
  int v93;
  int v95;
  int v97;
  int v99;
  int v101;
  int v103;
  int v105;
  unint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t StatusReg;
  unsigned int v114;
  size_t v116;
  void *v117;
  os_unfair_lock_s *v118;
  int v119;
  unsigned int v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  os_unfair_lock_s *v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v136;
  os_unfair_lock_s *v138;
  unsigned int v139;
  int v141;
  unsigned int v142;
  int v143;
  unsigned int v144;
  int v145;
  _BOOL4 v146;
  uint64_t v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  unint64_t v153;
  os_unfair_lock_t v154;

  if (off_1EE342948)
  {
    v2 = *(_QWORD *)(a1 + 24);
    v3 = (v2 >> 14) ^ ((v2 >> 14) >> 4);
    v4 = ((v3 ^ 0xDEADBEEF) + 32 * v3) ^ (((v3 ^ 0xDEADBEEF) + 32 * v3) >> 11);
    v5 = (char *)off_1EE342948 + 32;
    v6 = *((_DWORD *)off_1EE342948 + 3) & v4;
    v7 = *((_QWORD *)off_1EE342948 + 2 * v6 + 4);
    if (v7 == v2)
    {
LABEL_6:
      v9 = *(_QWORD *)&v5[16 * v6 + 8];
      goto LABEL_8;
    }
    v8 = v4 + 1;
    while (v7 != -1)
    {
      v6 = *((_DWORD *)off_1EE342948 + 3) & v8;
      v7 = *(_QWORD *)&v5[16 * v6];
      ++v8;
      if (v7 == v2)
        goto LABEL_6;
    }
  }
  v9 = 0;
LABEL_8:
  v10 = ((8 * *(unsigned __int16 *)((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((*(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8) + 6) << 19))
      + pas_compact_heap_reservation_base;
  v11 = *(os_unfair_lock_s **)(v9 + 8);
  if (v11)
    v12 = pas_segregated_page_switch_lock_slow(v9, 0, v11);
  else
    v12 = 0;
  v13 = *(_DWORD *)(a1 + 20);
  v14 = (1 << *(_BYTE *)(a1 + 4));
  v15 = (*(unsigned int *)(v10 + 20) + v14 - 1) & -v14;
  v16 = (v13 + v15);
  if (v13 + (_DWORD)v15)
  {
    v17 = *(_DWORD *)(a1 + 56);
    v18 = *(_DWORD *)(a1 + 60);
    v19 = (_DWORD *)(a1 + 56);
    v153 = __PAIR64__(v17, v18);
    v20 = v17 != 0;
    if (v18)
      v20 = 2;
    if (v19[2])
      v20 = 3;
    v151 = v19[3];
    v152 = v19[2];
    v21 = v19[5];
    v150 = v19[4];
    if (v151)
      v20 = 4;
    if (v19[4])
      v20 = 5;
    v22 = v19[7];
    v149 = v19[6];
    if (v21)
      v20 = 6;
    if (v19[6])
      v20 = 7;
    v23 = v19[9];
    v148 = v19[8];
    if (v22)
      v20 = 8;
    if (v19[8])
      v20 = 9;
    v25 = v19[10];
    v24 = v19[11];
    if (v23)
      v20 = 10;
    if (v25)
      v20 = 11;
    v27 = v19[12];
    v26 = v19[13];
    if (v24)
      v20 = 12;
    if (v27)
      v20 = 13;
    v29 = v19[14];
    v28 = v19[15];
    if (v26)
      v20 = 14;
    if (v29)
      v20 = 15;
    v31 = v19[16];
    v30 = v19[17];
    if (v28)
      v20 = 16;
    if (v31)
      v20 = 17;
    v33 = v19[18];
    v32 = v19[19];
    if (v30)
      v20 = 18;
    if (v33)
      v20 = 19;
    v34 = v19[20];
    v35 = v19[21];
    if (v32)
      v20 = 20;
    if (v34)
      v20 = 21;
    v36 = v19[22];
    v37 = v19[23];
    if (v35)
      v20 = 22;
    if (v36)
      v20 = 23;
    v39 = v19[24];
    v38 = v19[25];
    if (v37)
      v20 = 24;
    if (v39)
      v20 = 25;
    v41 = v19[26];
    v40 = v19[27];
    if (v38)
      v20 = 26;
    if (v41)
      v20 = 27;
    v43 = v19[28];
    v42 = v19[29];
    if (v40)
      v20 = 28;
    if (v43)
      v20 = 29;
    if (v42)
      v20 = 30;
    v44 = v19[30];
    v45 = v19[31];
    v46 = v44 == 0;
    if (v44)
    {
      v20 = 31;
      v47 = 1;
    }
    else
    {
      v47 = v45 == 0;
    }
    v146 = v47;
    v48 = v46;
    v145 = v48;
    if (v45)
      v20 = 32;
    v147 = v20;
    if (HIDWORD(v153))
      v49 = 0;
    else
      v49 = -1;
    if (HIDWORD(v153))
      v50 = 1;
    else
      v50 = (_DWORD)v153 == 0;
    if (!v50)
      v49 = 1;
    v51 = v152 | v153 | HIDWORD(v153);
    if (v153)
      v52 = 1;
    else
      v52 = v152 == 0;
    if (!v52)
      v49 = 2;
    v46 = v51 == 0;
    v53 = v151 | v51;
    if (v46 && v151 != 0)
      v49 = 3;
    v46 = v53 == 0;
    v55 = v150 | v53;
    if (v46 && v150 != 0)
      v49 = 4;
    v46 = v55 == 0;
    v57 = v21 | v55;
    if (v46 && v21 != 0)
      v49 = 5;
    v46 = v57 == 0;
    v59 = v149 | v57;
    if (v46 && v149 != 0)
      v49 = 6;
    v46 = v59 == 0;
    v61 = v22 | v59;
    if (v46 && v22 != 0)
      v49 = 7;
    v46 = v61 == 0;
    v63 = v148 | v61;
    if (v46 && v148 != 0)
      v49 = 8;
    v46 = v63 == 0;
    v65 = v23 | v63;
    if (v46 && v23 != 0)
      v49 = 9;
    v46 = v65 == 0;
    v67 = v25 | v65;
    if (v46 && v25 != 0)
      v49 = 10;
    v46 = v67 == 0;
    v69 = v24 | v67;
    if (v46 && v24 != 0)
      v49 = 11;
    v46 = v69 == 0;
    v71 = v27 | v69;
    if (v46 && v27 != 0)
      v49 = 12;
    v46 = v71 == 0;
    v73 = v26 | v71;
    if (v46 && v26 != 0)
      v49 = 13;
    v46 = v73 == 0;
    v75 = v29 | v73;
    if (v46 && v29 != 0)
      v49 = 14;
    v46 = v75 == 0;
    v77 = v28 | v75;
    if (v46 && v28 != 0)
      v49 = 15;
    v46 = v77 == 0;
    v79 = v31 | v77;
    if (v46 && v31 != 0)
      v49 = 16;
    v46 = v79 == 0;
    v81 = v30 | v79;
    if (v46 && v30 != 0)
      v49 = 17;
    v46 = v81 == 0;
    v83 = v33 | v81;
    if (v46 && v33 != 0)
      v49 = 18;
    v46 = v83 == 0;
    v85 = v32 | v83;
    if (v46 && v32 != 0)
      v49 = 19;
    v46 = v85 == 0;
    v87 = v34 | v85;
    if (v46 && v34 != 0)
      v49 = 20;
    v46 = v87 == 0;
    v89 = v35 | v87;
    if (v46 && v35 != 0)
      v49 = 21;
    v46 = v89 == 0;
    v91 = v36 | v89;
    if (v46 && v36 != 0)
      v49 = 22;
    v46 = v91 == 0;
    v93 = v37 | v91;
    if (v46 && v37 != 0)
      v49 = 23;
    v46 = v93 == 0;
    v95 = v39 | v93;
    if (v46 && v39 != 0)
      v49 = 24;
    v46 = v95 == 0;
    v97 = v38 | v95;
    if (v46 && v38 != 0)
      v49 = 25;
    v46 = v97 == 0;
    v99 = v41 | v97;
    if (v46 && v41 != 0)
      v49 = 26;
    v46 = v99 == 0;
    v101 = v40 | v99;
    if (v46 && v40 != 0)
      v49 = 27;
    v46 = v101 == 0;
    v103 = v43 | v101;
    if (v46 && v43 != 0)
      v49 = 28;
    v46 = v103 == 0;
    v105 = v42 | v103;
    if (v46 && v42 != 0)
      v49 = 29;
    v46 = v105 == 0;
    v107 = *((_QWORD *)v19 - 1) & 0xFFFFFFFFFFFFFFF8;
    v108 = v145;
    v109 = v146;
    if (!v46)
    {
      v108 = 1;
      v109 = 1;
    }
    v46 = v108 == 0;
    v110 = 30;
    if (!v46)
      v110 = v49;
    if (v109)
      v111 = v110;
    else
      v111 = 31;
    v112 = v147 - v111;
    *(_BYTE *)(v107 + 17) = v147 - v111;
    *(_BYTE *)(v107 + 18) = v111;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v114 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v114, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_235;
    }
    __clrex();
    v118 = *(os_unfair_lock_s **)(v9 + 8);
    v119 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v120 = __ldxr(&v118->_os_unfair_lock_opaque);
      if (v120 != v119)
        break;
      if (!__stlxr(0, &v118->_os_unfair_lock_opaque))
        goto LABEL_269;
    }
    __clrex();
    os_unfair_lock_unlock(v118);
LABEL_269:
    v136 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v136, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_275;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_275:
    v138 = *(os_unfair_lock_s **)(v9 + 8);
    v154 = v138;
    v139 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v138->_os_unfair_lock_opaque))
    {
      if (!__stxr(v139, &v138->_os_unfair_lock_opaque))
      {
        if (*(os_unfair_lock_s **)(v9 + 8) == v138)
          goto LABEL_235;
LABEL_281:
        v141 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v142 = __ldxr(&v138->_os_unfair_lock_opaque);
          if (v142 != v141)
            break;
          if (!__stlxr(0, &v138->_os_unfair_lock_opaque))
            goto LABEL_275;
        }
        __clrex();
        os_unfair_lock_unlock(v138);
        goto LABEL_275;
      }
    }
    __clrex();
    if (!pas_segregated_page_lock_with_unbias_impl(v9, &v154, v138))
      goto LABEL_281;
LABEL_235:
    if (v112 == 1)
    {
      v116 = 4;
      v117 = (void *)v107;
    }
    else
    {
      v116 = 4 * v112;
      v117 = (void *)pas_immortal_heap_allocate_with_manual_alignment(4 * v112, 8, (uint64_t)"pas_segregated_partial_view/alloc_bits", 0);
    }
    v121 = (unint64_t)v117 - 4 * v111;
    memcpy(v117, &v19[v111], v116);
    __dmb(0xAu);
    v122 = *(unsigned int *)(v107 + 12);
    v123 = pas_compact_heap_reservation_base;
    if (v122 >= 8)
      v124 = pas_compact_heap_reservation_base;
    else
      v124 = 0;
    v125 = v124 + v122;
    if ((v125 & 1) != 0)
    {
      pas_utility_heap_deallocate(v125 & 0xFFFFFFFFFFFFFFFELL);
      v123 = pas_compact_heap_reservation_base;
    }
    if (v121 >= 8 && v121 - v123 >= pas_compact_heap_reservation_size)
    {
      v126 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
      *(_QWORD *)v126 = v121;
      v121 = v126 | 1;
      LODWORD(v123) = pas_compact_heap_reservation_base;
    }
    if (v121 < 8)
      LODWORD(v123) = 0;
    *(_DWORD *)(v107 + 12) = v121 - v123;
    v127 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v128 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v128 != v127)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_260;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
LABEL_260:
    v129 = *(os_unfair_lock_s **)(v9 + 8);
    v130 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v131 = __ldxr(&v129->_os_unfair_lock_opaque);
      if (v131 != v130)
        break;
      if (!__stlxr(0, &v129->_os_unfair_lock_opaque))
        return 0;
    }
    __clrex();
    os_unfair_lock_unlock(v129);
    return 0;
  }
  else
  {
    if (!v13 && (v15 & 0xFFFFFE00) == 0)
    {
      while (1)
        ;
    }
    v133 = v15;
    *(_DWORD *)(v10 + 20) = 0;
    v134 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 8) = v134 + v16;
    *(_DWORD *)(a1 + 16) = 0;
    v132 = v134 + v133;
    if (v12)
    {
      v143 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (1)
      {
        v144 = __ldxr(&v12->_os_unfair_lock_opaque);
        if (v144 != v143)
          break;
        if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
          return v132;
      }
      __clrex();
      os_unfair_lock_unlock(v12);
    }
  }
  return v132;
}

uint64_t jit_small_segregated_page_config_specialized_local_allocator_start_allocating_in_primordial_partial_view(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t StatusReg;
  uint64_t v9;
  unint64_t first_eligible;
  os_unfair_lock_s *v11;
  os_unfair_lock *v12;
  unsigned int v13;
  uint64_t v15;
  _QWORD *v16;
  _BOOL8 v17;
  int v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  os_unfair_lock_t v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v42;
  os_unfair_lock_s *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unint64_t v59;

  v4 = *(_DWORD *)(a1 + 20);
  v5 = 1 << *(_BYTE *)(a1 + 4);
  v6 = v5 - 1;
  v7 = -(uint64_t)v5;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v59 = StatusReg;
LABEL_3:
  while (1)
  {
    v9 = *(_QWORD *)(a3 + 16);
    first_eligible = pas_segregated_shared_page_directory_find_first_eligible(0, v4, v5, 0);
    v11 = (os_unfair_lock_s *)first_eligible;
    v12 = (os_unfair_lock *)(first_eligible + 8);
    v13 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v12->_os_unfair_lock_opaque))
    {
      if (!__stxr(v13, &v12->_os_unfair_lock_opaque))
      {
        v15 = *(_QWORD *)first_eligible;
        if ((*(_QWORD *)first_eligible & 1) == 0)
          goto LABEL_7;
LABEL_10:
        v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
        v17 = (v15 & 0xFFFFFFFFFFFFFFFELL) != 0;
        if ((v15 & 0xFFFFFFFFFFFFFFFELL) != 0)
          goto LABEL_11;
LABEL_31:
        v32 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v33 = __ldxr(&v12->_os_unfair_lock_opaque);
          if (v33 != v32)
            break;
          if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
            return 0;
        }
        goto LABEL_73;
      }
    }
    __clrex();
    os_unfair_lock_lock((os_unfair_lock_t)(first_eligible + 8));
    v15 = *(_QWORD *)&v11->_os_unfair_lock_opaque;
    if ((*(_QWORD *)&v11->_os_unfair_lock_opaque & 1) != 0)
      goto LABEL_10;
LABEL_7:
    v16 = (_QWORD *)pas_segregated_shared_view_commit_page(v11, v9, 0, a2, (uint64_t)&unk_1E35BE8A8);
    v17 = v16 != 0;
    if (!v16)
      goto LABEL_31;
LABEL_11:
    if (!off_1EE342948)
      break;
    v18 = (*v16 >> 14) ^ ((*v16 >> 14) >> 4);
    v19 = ((v18 ^ 0xDEADBEEF) + 32 * v18) ^ (((v18 ^ 0xDEADBEEF) + 32 * v18) >> 11);
    v20 = (char *)off_1EE342948 + 32;
    v21 = v19 & *((_DWORD *)off_1EE342948 + 3);
    v22 = *((_QWORD *)off_1EE342948 + 2 * v21 + 4);
    if (v22 != *v16)
    {
      v23 = v19 + 1;
      while (v22 != -1)
      {
        v21 = *((_DWORD *)off_1EE342948 + 3) & v23;
        v22 = *(_QWORD *)&v20[16 * v21];
        ++v23;
        if (v22 == *v16)
          goto LABEL_16;
      }
      break;
    }
LABEL_16:
    v24 = *(_QWORD *)&v20[16 * v21 + 8];
    v25 = *(os_unfair_lock_s **)(v24 + 8);
    if (v25)
      goto LABEL_24;
LABEL_17:
    v26 = 0;
    v27 = (v6 + v11[5]._os_unfair_lock_opaque) & v7;
    if (!(v4 + v27))
      goto LABEL_35;
LABEL_18:
    StatusReg = v59;
    if (v26)
    {
      v30 = *(_DWORD *)(v59 + 24);
      while (1)
      {
        v31 = __ldxr(&v26->_os_unfair_lock_opaque);
        if (v31 != v30)
          break;
        if (!__stlxr(0, &v26->_os_unfair_lock_opaque))
          goto LABEL_19;
      }
      __clrex();
      os_unfair_lock_unlock(v26);
    }
LABEL_19:
    v28 = *(_DWORD *)(v59 + 24);
    while (1)
    {
      v29 = __ldxr(&v12->_os_unfair_lock_opaque);
      if (v29 != v28)
        break;
      if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
        goto LABEL_3;
    }
    __clrex();
    os_unfair_lock_unlock(v12);
  }
  v24 = 0;
  v25 = (os_unfair_lock_s *)MEMORY[8];
  if (!MEMORY[8])
    goto LABEL_17;
LABEL_24:
  v26 = pas_segregated_page_switch_lock_slow(v24, 0, v25);
  v27 = (v6 + v11[5]._os_unfair_lock_opaque) & v7;
  if (v4 + v27)
    goto LABEL_18;
LABEL_35:
  if (!v4 && (v27 & 0xFFFFFE00) == 0)
  {
    while (1)
      ;
  }
  v11[5]._os_unfair_lock_opaque = 0;
  *(_BYTE *)(a2 + 19) |= 1u;
  ++v11[6]._os_unfair_lock_opaque;
  *(_BYTE *)(a2 + 19) &= ~4u;
  v34 = (unint64_t)v11 - pas_compact_heap_reservation_base;
  *(_BYTE *)(a2 + 4) = ((unint64_t)v11 - pas_compact_heap_reservation_base) >> 3;
  *(_BYTE *)(a2 + 5) = v34 >> 11;
  *(_BYTE *)(a2 + 6) = v34 >> 19;
  if (((*(_BYTE *)(a1 + 5) - 4) & 0xF8) != 0)
    v35 = 3;
  else
    v35 = 0xB0B090907070505uLL >> (8 * (*(_BYTE *)(a1 + 5) - 4));
  *(_BYTE *)(a1 + 5) = v35;
  v36 = *(_QWORD *)(v24 - 16);
  *(_OWORD *)(a1 + 56) = 0u;
  v37 = a1 + 56;
  *(_QWORD *)(a1 + 24) = v36;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 8) = v36;
  *(_DWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 48) = a2 | 4;
  *(_BYTE *)(a2 + 19) |= 0x10u;
  v38 = *(_DWORD *)(v59 + 24);
  while (1)
  {
    v39 = __ldxr(&v12->_os_unfair_lock_opaque);
    if (v39 != v38)
      break;
    if (!__stlxr(0, &v12->_os_unfair_lock_opaque))
      goto LABEL_46;
  }
  __clrex();
  os_unfair_lock_unlock(v12);
LABEL_46:
  v40 = *(_DWORD *)(v59 + 24);
  v12 = &pas_heap_lock;
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v40, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_58;
  }
  __clrex();
  if (v26)
  {
    v55 = *(_DWORD *)(v59 + 24);
    while (1)
    {
      v56 = __ldxr(&v26->_os_unfair_lock_opaque);
      if (v56 != v55)
        break;
      if (!__stlxr(0, &v26->_os_unfair_lock_opaque))
        goto LABEL_51;
    }
    __clrex();
    os_unfair_lock_unlock(v26);
  }
LABEL_51:
  v42 = *(_DWORD *)(v59 + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v42, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_56;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_56:
  v44 = *(os_unfair_lock_s **)(v24 + 8);
  if (v44)
    v26 = pas_segregated_page_switch_lock_slow(v24, 0, v44);
  else
    v26 = 0;
LABEL_58:
  v45 = *(unsigned int *)(a2 + 12);
  v46 = pas_compact_heap_reservation_base;
  if (v45 >= 8)
    v47 = pas_compact_heap_reservation_base;
  else
    v47 = 0;
  v48 = v47 + v45;
  if ((v48 & 1) != 0)
  {
    pas_utility_heap_deallocate(v48 & 0xFFFFFFFFFFFFFFFELL);
    v46 = pas_compact_heap_reservation_base;
  }
  if (v37 >= 8 && v37 - v46 >= pas_compact_heap_reservation_size)
  {
    v49 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
    *(_QWORD *)v49 = v37;
    v37 = v49 | 1;
    LODWORD(v46) = pas_compact_heap_reservation_base;
  }
  if (v37 < 8)
    LODWORD(v46) = 0;
  *(_DWORD *)(a2 + 12) = v37 - v46;
  *(_BYTE *)(a2 + 17) = 32;
  if (v26)
  {
    v53 = *(_DWORD *)(v59 + 24);
    while (1)
    {
      v54 = __ldxr(&v26->_os_unfair_lock_opaque);
      if (v54 != v53)
        break;
      if (!__stlxr(0, &v26->_os_unfair_lock_opaque))
        goto LABEL_69;
    }
    __clrex();
    os_unfair_lock_unlock(v26);
  }
LABEL_69:
  v50 = *(_DWORD *)(v59 + 24);
  while (1)
  {
    v51 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v51 != v50)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return 1;
  }
LABEL_73:
  __clrex();
  os_unfair_lock_unlock(v12);
  return v17;
}

uint64_t jit_small_segregated_page_config_specialized_local_allocator_refill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  char *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  unint64_t v69;
  unsigned int v70;
  int *v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  os_unfair_lock_t v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int i;
  uint64_t v117;
  int v118;
  _BYTE *v119;
  int v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  os_unfair_lock_s *v125;
  char v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t eligible;
  unint64_t v136;
  unint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  os_unfair_lock_s *v144;
  uint64_t v145;
  os_unfair_lock_s *v146;
  unsigned int v147;
  uint64_t v149;
  uint64_t v150;
  os_unfair_lock_s *v151;
  unint64_t v152;
  int v153;
  unint64_t v154;
  unsigned int v155;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  BOOL v164;
  BOOL v165;
  BOOL v166;
  unint64_t v167;
  _DWORD *v168;
  int32x2_t *v169;
  uint64_t v170;
  int32x2_t v171;
  int32x2_t v172;
  int32x2_t v173;
  unint64_t v174;
  unsigned int v175;
  _QWORD *v177;
  int v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  unint64_t v184;
  unint64_t v185;
  _QWORD *v186;
  int v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  unsigned int v196;
  int v198;
  unsigned int v199;
  os_unfair_lock_s *v200;
  unsigned int v201;
  unint64_t v203;
  int v204;
  unsigned int v205;
  int v206;
  unsigned int v207;
  os_unfair_lock_s *v208;
  unsigned int v209;
  unint64_t v210;
  int v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char local_allocator_slow;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  const os_unfair_lock *v228;
  _BOOL4 v229;
  char v230;
  int v231;
  unint64_t v232;
  unsigned int v233;
  unint64_t v234;
  uint64_t v235;
  BOOL v236;
  uint64_t result;
  int v238;
  unsigned int v239;
  int v240;
  unsigned int v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  os_unfair_lock_s *v245;
  unint64_t v246;
  int v247;
  unsigned int v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int v252;
  os_unfair_lock_s *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  int *v262;
  int *v263;
  int *v264;
  int v265;
  int v266;
  int v267;
  BOOL v268;
  unsigned int v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  _OWORD *v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  os_unfair_lock_s *v286;
  _QWORD *v287;
  os_unfair_lock_s *v288;
  unint64_t StatusReg;
  os_unfair_lock_t lock;
  int64x2_t v291;
  double (*v292)@<D0>(uint64_t@<X8>);
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;

  v296 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 48);
  v10 = &unk_1ECF57000;
  if ((v9 & 7) == 5)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFF8;
    lock = 0;
    v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 16);
    if ((*(_BYTE *)(*(_QWORD *)v12 + 2) & 1) != 0)
      goto LABEL_33;
    goto LABEL_12;
  }
  if (!v9)
    goto LABEL_11;
  if ((v9 & 7u) < 2)
  {
    v13 = v9 & 0xFFFFFFFFFFFFFFF8;
    v14 = *(unsigned __int8 *)(v13 + 10);
    v15 = *(unsigned __int16 *)(v13 + 8);
    goto LABEL_9;
  }
  if ((v9 & 7) != 4)
  {
LABEL_11:
    v11 = 0;
    lock = 0;
    v12 = MEMORY[0x10];
    if ((*(_BYTE *)(*MEMORY[0x10] + 2) & 1) != 0)
      goto LABEL_33;
    goto LABEL_12;
  }
  v16 = (unsigned __int16 *)(v9 | 7);
  v14 = *((unsigned __int8 *)v16 + 2);
  v15 = *v16;
LABEL_9:
  v11 = ((8 * v15) | (v14 << 19)) + pas_compact_heap_reservation_base;
  lock = 0;
  v12 = *(_QWORD *)(v11 + 16);
  if ((*(_BYTE *)(*(_QWORD *)v12 + 2) & 1) == 0)
  {
LABEL_12:
    v17 = *(unsigned int *)(v12 + 36);
    if (!(_DWORD)v17)
      goto LABEL_33;
    v18 = *(_QWORD *)(v12 + 8);
    if (v18)
    {
      v19 = v18 & 0xFFFFFFFFFE000000;
      v20 = *(_QWORD *)(v12 + 8) & 0x1FFFFFFLL;
      v21 = (unint64_t)(v20 - 16392) >> 14;
      v22 = (unint64_t)(v20 + 4 * v17 - 16385) >> 14;
      v23 = v19 | 0x10;
      v24 = (unint64_t *)(v23 + 8 * v21);
      while (1)
      {
        v25 = *v24;
        if ((*v24 & 7) < 3)
        {
LABEL_22:
          if (v21 == v22)
            goto LABEL_23;
          v127 = (unint64_t *)(v23 + 8 * v22);
          while (2)
          {
            v128 = *v127;
            if ((*v127 & 7) < 3)
              goto LABEL_23;
            v129 = __ldxr(v127);
            if (v129 == v128)
            {
              if (!__stlxr(v128 & 0xFFFFFFFFFFFFFFF8 | 2, v127))
              {
                v130 = 1;
                goto LABEL_120;
              }
            }
            else
            {
              __clrex();
            }
            v130 = 0;
LABEL_120:
            __dmb(0xBu);
            if (v130)
              goto LABEL_23;
            continue;
          }
        }
        v26 = __ldxr(v24);
        if (v26 != v25)
          break;
        if (__stlxr(v25 & 0xFFFFFFFFFFFFFFF8 | 2, v24))
          goto LABEL_20;
        v27 = 1;
LABEL_21:
        __dmb(0xBu);
        if (v27)
          goto LABEL_22;
      }
      __clrex();
LABEL_20:
      v27 = 0;
      goto LABEL_21;
    }
LABEL_23:
    v28 = *(_QWORD *)(v12 + 16);
    if (!v28)
      goto LABEL_33;
    v29 = v28 & 0xFFFFFFFFFE000000;
    v30 = *(_QWORD *)(v12 + 16) & 0x1FFFFFFLL;
    v31 = v30 + 4 * v17;
    v32 = (unint64_t)(v30 - 16392) >> 14;
    v33 = (unint64_t)(v31 - 16385) >> 14;
    v34 = v29 | 0x10;
    v35 = (unint64_t *)(v34 + 8 * v32);
    while (1)
    {
      v36 = *v35;
      if ((*v35 & 7) < 3)
      {
LABEL_32:
        if (v32 == v33)
          goto LABEL_33;
        v131 = (unint64_t *)(v34 + 8 * v33);
        while (2)
        {
          v132 = *v131;
          if ((*v131 & 7) < 3)
            goto LABEL_33;
          v133 = __ldxr(v131);
          if (v133 == v132)
          {
            if (!__stlxr(v132 & 0xFFFFFFFFFFFFFFF8 | 2, v131))
            {
              v134 = 1;
              goto LABEL_129;
            }
          }
          else
          {
            __clrex();
          }
          v134 = 0;
LABEL_129:
          __dmb(0xBu);
          if (v134)
            goto LABEL_33;
          continue;
        }
      }
      v37 = __ldxr(v35);
      if (v37 != v36)
        break;
      if (__stlxr(v36 & 0xFFFFFFFFFFFFFFF8 | 2, v35))
        goto LABEL_30;
      v38 = 1;
LABEL_31:
      __dmb(0xBu);
      if (v38)
        goto LABEL_32;
    }
    __clrex();
LABEL_30:
    v38 = 0;
    goto LABEL_31;
  }
LABEL_33:
  v39 = *(unsigned int *)(v12 + 28);
  v40 = pas_compact_heap_reservation_base + 8 * v39;
  if ((_DWORD)v39)
    v41 = v40 == 0;
  else
    v41 = 1;
  if (!v41)
  {
    v42 = *(unsigned int *)(v40 + 12);
    if ((_DWORD)v42)
    {
      v43 = *(unsigned int *)(v40 + 8);
      if ((_DWORD)v43)
        v44 = pas_compact_heap_reservation_base + 8 * v43;
      else
        v44 = 0;
      v45 = v44 - pas_compact_expendable_memory_payload;
      v46 = (unint64_t)(v44 - pas_compact_expendable_memory_payload - 8) >> 14;
      v47 = (unint64_t)(v45 + 16 * v42 - 1) >> 14;
      v48 = (unint64_t *)&pas_compact_expendable_memory_header[v46 + 1];
      while (1)
      {
        v49 = *v48;
        if ((*v48 & 7) < 3)
        {
LABEL_49:
          if (v46 == v47)
            goto LABEL_50;
          v121 = (unint64_t *)&pas_compact_expendable_memory_header[v47 + 1];
          while (2)
          {
            v122 = *v121;
            if ((*v121 & 7) < 3)
              goto LABEL_50;
            v123 = __ldxr(v121);
            if (v123 == v122)
            {
              if (!__stlxr(v122 & 0xFFFFFFFFFFFFFFF8 | 2, v121))
              {
                v124 = 1;
                goto LABEL_108;
              }
            }
            else
            {
              __clrex();
            }
            v124 = 0;
LABEL_108:
            __dmb(0xBu);
            if (v124)
              goto LABEL_50;
            continue;
          }
        }
        v50 = __ldxr(v48);
        if (v50 != v49)
          break;
        if (__stlxr(v49 & 0xFFFFFFFFFFFFFFF8 | 2, v48))
          goto LABEL_47;
        v51 = 1;
LABEL_48:
        __dmb(0xBu);
        if (v51)
          goto LABEL_49;
      }
      __clrex();
LABEL_47:
      v51 = 0;
      goto LABEL_48;
    }
  }
LABEL_50:
  *(_WORD *)(a1 + 1) = 256;
  if (pas_scavenger_current_state != 1 && pas_scavenger_eligibility_notification_has_been_deferred == 0)
  {
    __dmb(0xBu);
    pas_scavenger_eligibility_notification_has_been_deferred = 1;
LABEL_62:
    pas_scavenger_notify_eligibility_if_needed();
    v53 = *(_QWORD *)(a1 + 24);
    if (v53)
      goto LABEL_56;
LABEL_63:
    v60 = 0;
    v61 = 0;
    goto LABEL_64;
  }
  if (pas_scavenger_current_state != 1)
    goto LABEL_62;
  v53 = *(_QWORD *)(a1 + 24);
  if (!v53)
    goto LABEL_63;
LABEL_56:
  v54 = v53 & 0xFFFFFFFFFFFFC000;
  v55 = (v53 >> 14) ^ ((v53 >> 14) >> 4);
  v56 = ((v55 ^ 0xDEADBEEF) + 32 * v55) ^ (((v55 ^ 0xDEADBEEF) + 32 * v55) >> 11);
  v57 = (char *)off_1EE342948 + 32;
  v58 = *((_DWORD *)off_1EE342948 + 3) & v56;
  if (*((_QWORD *)off_1EE342948 + 2 * v58 + 4) != v54)
  {
    v59 = v56 + 1;
    do
      v58 = *((_DWORD *)off_1EE342948 + 3) & v59++;
    while (*(_QWORD *)&v57[16 * v58] != v54);
  }
  v60 = *(_QWORD *)&v57[16 * v58 + 8];
  v61 = *(_QWORD *)(v60 + 32);
  if ((v61 & 6) != 0)
    v61 = *(_QWORD *)(a1 + 48);
LABEL_64:
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v62 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  v63 = v11 | 5;
  if (!v11)
    v63 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = v63;
  *(_WORD *)(a1 + 5) = 10;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v64 = *(_QWORD *)(StatusReg + 752);
  if (v64)
  {
    v288 = *(os_unfair_lock_s **)(v64 + 8016);
    if (*(_BYTE *)(v64 + 8048))
    {
      v65 = *(_DWORD *)(v64 + 8052) + 31;
      if (v65 >= 0x20)
      {
        v113 = 0;
        v114 = *(_QWORD *)(v64 + 8024);
        v115 = v65 >> 5;
        do
        {
          for (i = *(_DWORD *)(v114 + 4 * v113); i; i &= ~v118)
          {
            v117 = __clz(__rbit32(i));
            v118 = 1 << v117;
            *(_DWORD *)(v114 + 4 * v113) &= ~(1 << v117);
            v119 = (_BYTE *)(v64 + 8064 + 8 * ((32 * v113) | v117));
            if (v119 != (_BYTE *)a1 && v119[1])
            {
              v120 = v119[3];
              if (v120 == 4)
              {
                pas_local_view_cache_stop(v119, 1);
              }
              else if (v120 == 2)
              {
                pas_local_allocator_stop(v119, 1, 0);
              }
            }
          }
          ++v113;
        }
        while (v113 != v115);
      }
      *(_BYTE *)(v64 + 8048) = 0;
      v10 = (_QWORD *)&unk_1ECF57000;
      v62 = (_QWORD *)(a1 + 32);
    }
    lock = 0;
    if (!v61)
      goto LABEL_79;
  }
  else
  {
    v288 = 0;
    lock = 0;
    if (!v61)
      goto LABEL_79;
  }
  if ((v61 & 7) == 4)
  {
    v106 = v61 & 0xFFFFFFFFFFFFFFF8;
    v107 = *(_BYTE *)((v61 & 0xFFFFFFFFFFFFFFF8) + 19);
    if ((v107 & 4) != 0)
    {
      v125 = *(os_unfair_lock_s **)(v60 + 8);
      if (v125)
      {
        lock = pas_segregated_page_switch_lock_slow(v60, 0, v125);
        v107 = *(_BYTE *)(v106 + 19);
      }
      v126 = v107 & 0xF9;
LABEL_317:
      *(_BYTE *)(v106 + 19) = v126;
      v254 = *(_QWORD *)(v60 - 16);
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      v255 = v106 | 4;
      v256 = *(unsigned int *)(v106 + 12);
      v257 = v10[317];
      v258 = *(unsigned __int8 *)(v106 + 18);
      v259 = *(unsigned __int8 *)(v106 + 17);
      v260 = (v259 + v258);
      *(_QWORD *)(a1 + 48) = v255;
      *(_DWORD *)(a1 + 32) = v258 >> 1;
      *(_DWORD *)(a1 + 36) = (v260 + 1) >> 1;
      bzero((void *)(a1 + 8 * (v258 >> 1) + 56), (4 * (v260 - (v258 & 0xFE)) + 4) & 0x3FFFFFFF8);
      v261 = 0;
      *(_QWORD *)(a1 + 24) = v254 + (v258 >> 1 << 10);
      if (v258 < v260)
      {
        LODWORD(v261) = 0;
        v262 = (int *)(4 * v258 + a1 + 56);
        v263 = (int *)(4 * v258 + v60 + 44);
        v264 = (int *)(v257 + v256 + 4 * v258);
        do
        {
          v266 = *v264++;
          v265 = v266;
          v267 = *v263;
          *v262++ = v266 & ~*v263;
          *v263++ = v267 | v266;
          if (v267)
            v268 = 1;
          else
            v268 = v265 == 0;
          if (v268)
            v261 = v261;
          else
            v261 = (v261 + 1);
          --v259;
        }
        while (v259);
      }
      *(_QWORD *)(a1 + 40) = __rbit64(*(_QWORD *)(a1 + 8 * (v258 >> 1) + 56));
      *(_BYTE *)(a1 + 6) = 1;
      *(_QWORD *)(v60 + 24) += v261;
      v105 = lock;
      if (lock)
      {
LABEL_338:
        v280 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v281 = __ldxr(&v105->_os_unfair_lock_opaque);
          if (v281 != v280)
            break;
          if (!__stlxr(0, &v105->_os_unfair_lock_opaque))
            goto LABEL_343;
        }
        __clrex();
        os_unfair_lock_unlock(v105);
LABEL_343:
        lock = 0;
      }
      return 1;
    }
  }
  else if ((v61 & 7) == 0)
  {
    pas_segregated_page_switch_lock_and_rebias_while_ineligible_impl(v60, &lock, v288);
    *(_QWORD *)(v60 + 32) = v61 | 1;
    *(_BYTE *)(v60 + 2) = 0;
    v66 = *(_QWORD *)(v60 - 16);
    if (!*(_QWORD *)(v60 + 24))
      goto LABEL_334;
    goto LABEL_76;
  }
LABEL_79:
  if (!v64)
    goto LABEL_133;
  v108 = *(unsigned int *)(v11 + 32);
  if (*(_DWORD *)(v64 + 8052) <= v108)
  {
    if ((_DWORD)v108 == -1
      || (local_allocator_slow = pas_thread_local_cache_get_local_allocator_slow(v64, v108, 0, a4, a5, a6, a7, a8),
          v109 = v220,
          (local_allocator_slow & 1) == 0))
    {
LABEL_133:
      eligible = pas_segregated_size_directory_take_first_eligible((unsigned int *)v11);
      v112 = eligible;
      if (!eligible)
        goto LABEL_258;
      if ((eligible & 7) < 2)
      {
        v136 = eligible & 0xFFFFFFFFFFFFFFF8;
        if (*(_BYTE *)((eligible & 0xFFFFFFFFFFFFFFF8) + 11))
          goto LABEL_258;
        v284 = v61;
        v137 = ((8 * *(unsigned __int16 *)(v136 + 8)) | ((unint64_t)*(unsigned __int8 *)(v136 + 10) << 19))
             + v10[317];
        if (*(_QWORD *)v136)
        {
          v291.i64[0] = 0;
          v138 = (unsigned int *)(v136 + 16);
          v139 = *(_DWORD *)(StatusReg + 24);
          while (!__ldaxr(v138))
          {
            if (!__stxr(v139, v138))
              goto LABEL_187;
          }
          __clrex();
          os_unfair_lock_lock((os_unfair_lock_t)(v136 + 16));
LABEL_187:
          v291.i64[0] = v136 + 16;
          if (*(unsigned __int8 *)(v137 + 13) << 8 == 512)
            pas_physical_page_sharing_pool_take_for_page_config(0x4000uLL, (uint64_t)&unk_1E35BE8A8, 0, (uint64_t)&v291, 1);
          v174 = *(_QWORD *)v136;
          v175 = *(_DWORD *)(StatusReg + 24);
          while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
          {
            if (!__stxr(v175, &pas_heap_lock._os_unfair_lock_opaque))
              goto LABEL_194;
          }
          __clrex();
          os_unfair_lock_lock(&pas_heap_lock);
LABEL_194:
          v177 = (_QWORD *)pas_utility_heap_try_allocate_with_alignment(188, 0x10uLL, (uint64_t)"pas_page_header_table/header");
          *v177 = v174;
          pas_lock_free_read_ptr_ptr_hashtable_set(&off_1EE342948, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x4000, v174, (unint64_t)(v177 + 2));
          v178 = *(_DWORD *)(StatusReg + 24);
          while (1)
          {
            v179 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
            if (v179 != v178)
              break;
            if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
              goto LABEL_199;
          }
          __clrex();
          os_unfair_lock_unlock(&pas_heap_lock);
LABEL_199:
          v180 = *(_DWORD *)(StatusReg + 24);
          v61 = v284;
          while (1)
          {
            v181 = __ldxr(v138);
            if (v181 != v180)
              break;
            if (!__stlxr(0, v138))
              goto LABEL_204;
          }
          __clrex();
          os_unfair_lock_unlock((os_unfair_lock_t)(v136 + 16));
LABEL_204:
          v154 = *(_QWORD *)v136;
          goto LABEL_218;
        }
        v153 = *(unsigned __int8 *)(v137 + 13) << 8;
        v61 = v284;
        if (v153 == 512)
        {
          pas_physical_page_sharing_pool_take_for_page_config(0x4000uLL, (uint64_t)&unk_1E35BE8A8, 0, 0, 0);
          v154 = *(_QWORD *)v136;
          if (*(_QWORD *)v136)
            goto LABEL_218;
        }
        v155 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
        {
          if (!__stxr(v155, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_210;
        }
        __clrex();
        os_unfair_lock_lock(&pas_heap_lock);
LABEL_210:
        os_unfair_lock_assert_owner(&pas_heap_lock);
        v291 = vdupq_n_s64(1uLL);
        v292 = fresh_memory_aligned_allocator;
        v294 = 0;
        v295 = 0;
        v293 = 0;
        v184 = try_allocate_without_fixing(jit_fresh_memory_heap, 0x4000uLL, 0x4000uLL, 0, (unint64_t *)&v291);
        *(_QWORD *)v136 = v184;
        if (v184)
        {
          v185 = v184;
          v186 = (_QWORD *)pas_utility_heap_try_allocate_with_alignment(188, 0x10uLL, (uint64_t)"pas_page_header_table/header");
          *v186 = v185;
          pas_lock_free_read_ptr_ptr_hashtable_set(&off_1EE342948, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x4000, v185, (unint64_t)(v186 + 2));
        }
        v187 = *(_DWORD *)(StatusReg + 24);
        v61 = v284;
        while (1)
        {
          v188 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
          if (v188 != v187)
            break;
          if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_217;
        }
        __clrex();
        os_unfair_lock_unlock(&pas_heap_lock);
LABEL_217:
        v154 = *(_QWORD *)v136;
        if (*(_QWORD *)v136)
        {
LABEL_218:
          if (off_1EE342948)
          {
            v189 = (v154 >> 14) ^ ((v154 >> 14) >> 4);
            v190 = ((v189 ^ 0xDEADBEEF) + 32 * v189) ^ (((v189 ^ 0xDEADBEEF) + 32 * v189) >> 11);
            v191 = (char *)off_1EE342948 + 32;
            v192 = *((_DWORD *)off_1EE342948 + 3) & v190;
            v193 = *((_QWORD *)off_1EE342948 + 2 * v192 + 4);
            if (v193 == v154)
            {
LABEL_223:
              v195 = *(_QWORD *)&v191[16 * v192 + 8];
              goto LABEL_225;
            }
            v194 = v190 + 1;
            while (v193 != -1)
            {
              v192 = *((_DWORD *)off_1EE342948 + 3) & v194;
              v193 = *(_QWORD *)&v191[16 * v192];
              ++v194;
              if (v193 == v154)
                goto LABEL_223;
            }
          }
          v195 = 0;
LABEL_225:
          pas_segregated_page_construct(v195, v136 | 1, 0, (uint64_t)&unk_1E35BE8A8);
          v146 = (os_unfair_lock_s *)(v136 + 20);
          v196 = *(_DWORD *)(StatusReg + 24);
          while (!__ldaxr(&v146->_os_unfair_lock_opaque))
          {
            if (!__stxr(v196, &v146->_os_unfair_lock_opaque))
              goto LABEL_230;
          }
          __clrex();
          os_unfair_lock_lock((os_unfair_lock_t)(v136 + 20));
LABEL_230:
          *(_BYTE *)(v136 + 11) = 1;
          v198 = *(_DWORD *)(StatusReg + 24);
          while (1)
          {
            v199 = __ldxr(&v146->_os_unfair_lock_opaque);
            if (v199 != v198)
              break;
            if (!__stlxr(0, &v146->_os_unfair_lock_opaque))
              goto LABEL_258;
          }
LABEL_257:
          __clrex();
          os_unfair_lock_unlock(v146);
          goto LABEL_258;
        }
LABEL_235:
        v112 = 0;
        goto LABEL_258;
      }
      if ((eligible & 7) != 4)
        goto LABEL_235;
      v141 = eligible & 0xFFFFFFFFFFFFFFF8;
      v142 = *(unsigned __int16 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 4) | ((unint64_t)*(unsigned __int8 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 6) << 16);
      if (!v142)
        goto LABEL_258;
      v143 = v10[317];
      v144 = (os_unfair_lock_s *)(v143 + 8 * v142);
      if (!v144)
        goto LABEL_258;
      v145 = *(_QWORD *)(((8 * *(unsigned __int16 *)(v141 + 7)) | ((unint64_t)*(unsigned __int8 *)(v141 + 9) << 19))
                       + v143
                       + 16);
      v146 = v144 + 2;
      v147 = *(_DWORD *)(StatusReg + 24);
      do
      {
        if (__ldaxr(&v146->_os_unfair_lock_opaque))
        {
          __clrex();
          v286 = v144;
          os_unfair_lock_lock(v144 + 2);
          v144 = v286;
          v149 = *(_QWORD *)&v286->_os_unfair_lock_opaque;
          if ((*(_QWORD *)&v286->_os_unfair_lock_opaque & 1) == 0)
            goto LABEL_148;
          goto LABEL_156;
        }
      }
      while (__stxr(v147, &v146->_os_unfair_lock_opaque));
      v149 = *(_QWORD *)&v144->_os_unfair_lock_opaque;
      if ((*(_QWORD *)&v144->_os_unfair_lock_opaque & 1) == 0)
      {
LABEL_148:
        v150 = v145;
        v151 = v144;
        v152 = pas_segregated_shared_view_commit_page(v144, v150, 0, v112 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&unk_1E35BE8A8);
        v144 = v151;
        goto LABEL_157;
      }
LABEL_156:
      v152 = v149 & 0xFFFFFFFFFFFFFFFELL;
LABEL_157:
      if (!v152)
      {
        v182 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v183 = __ldxr(&v146->_os_unfair_lock_opaque);
          if (v183 != v182)
            break;
          v112 = 0;
          if (!__stlxr(0, &v146->_os_unfair_lock_opaque))
            goto LABEL_258;
        }
        __clrex();
        os_unfair_lock_unlock(v146);
        goto LABEL_235;
      }
      if ((*(_BYTE *)(v141 + 19) & 0x10) == 0)
      {
        v157 = *(unsigned __int8 *)(v141 + 17);
        if (*(_BYTE *)(v141 + 17))
        {
          v158 = v10[317] + *(unsigned int *)(v141 + 12);
          v159 = *(unsigned __int8 *)(v141 + 18);
          v160 = v159 + v157;
          if (v157 < 0x1C)
            goto LABEL_243;
          v161 = 4 * v159;
          v162 = 4 * v159 + v152 + 20;
          v163 = 4 * v160 + v152 + 20;
          v164 = v162 < (unint64_t)&pas_compact_heap_reservation_available_size
              && v163 > (unint64_t)&pas_compact_heap_reservation_base;
          v165 = v164;
          v166 = v158 + 4 * v159 >= v163 || v162 >= v158 + 4 * v160;
          if (!v166 || v165)
            goto LABEL_243;
          v159 += v157 & 0xFC;
          v167 = (v141 - v10[317]) >> 3;
          if (!v141)
            LODWORD(v167) = 0;
          v168 = (_DWORD *)(v161 + v152 + 32);
          v169 = (int32x2_t *)(v161 + v158 + 8);
          v170 = v157 & 0xFC;
          while (1)
          {
            v171 = *v169;
            v172 = vtst_s32(v169[-1], v169[-1]);
            if ((v172.i8[0] & 1) != 0)
            {
              *(v168 - 3) = v167;
              if ((v172.i8[4] & 1) == 0)
                goto LABEL_179;
            }
            else if ((v172.i8[4] & 1) == 0)
            {
LABEL_179:
              v173 = vtst_s32(v171, v171);
              if ((v173.i8[0] & 1) != 0)
                goto LABEL_180;
              goto LABEL_184;
            }
            *(v168 - 2) = v167;
            v173 = vtst_s32(v171, v171);
            if ((v173.i8[0] & 1) != 0)
            {
LABEL_180:
              *(v168 - 1) = v167;
              if ((v173.i8[4] & 1) != 0)
                goto LABEL_185;
              goto LABEL_176;
            }
LABEL_184:
            if ((v173.i8[4] & 1) != 0)
LABEL_185:
              *v168 = v167;
LABEL_176:
            v168 += 4;
            v169 += 2;
            v170 -= 4;
            if (!v170)
            {
              if ((v157 & 0xFC) == v157)
                break;
              do
              {
LABEL_243:
                if (*(_DWORD *)(v158 + 4 * v159))
                {
                  v203 = (v141 - v10[317]) >> 3;
                  if (!v141)
                    LODWORD(v203) = 0;
                  *(_DWORD *)(v152 + 20 + 4 * v159) = v203;
                }
                ++v159;
              }
              while (v159 < v160);
              break;
            }
          }
        }
        v200 = v144 + 3;
        v201 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(&v200->_os_unfair_lock_opaque))
        {
          if (!__stxr(v201, &v200->_os_unfair_lock_opaque))
            goto LABEL_248;
        }
        __clrex();
        os_unfair_lock_lock(v144 + 3);
LABEL_248:
        *(_BYTE *)(v141 + 19) |= 0x10u;
        v204 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v205 = __ldxr(&v200->_os_unfair_lock_opaque);
          if (v205 != v204)
            break;
          if (!__stlxr(0, &v200->_os_unfair_lock_opaque))
            goto LABEL_253;
        }
        __clrex();
        os_unfair_lock_unlock(v200);
      }
LABEL_253:
      v206 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v207 = __ldxr(&v146->_os_unfair_lock_opaque);
        if (v207 != v206)
          goto LABEL_257;
        if (!__stlxr(0, &v146->_os_unfair_lock_opaque))
          goto LABEL_258;
      }
    }
  }
  else
  {
    v109 = v64 + 8 * v108 + 8064;
  }
  *(_BYTE *)v109 = 1;
  if (*(_BYTE *)(v109 + 3) != 4)
    goto LABEL_131;
  v110 = *(unsigned __int8 *)(v109 + 5);
  if (*(unsigned __int8 *)(v109 + 6) == (_DWORD)v110)
  {
    if (*(_BYTE *)(v109 + 7))
    {
      if (*(_BYTE *)(v109 + 7) == 2)
        goto LABEL_86;
      goto LABEL_132;
    }
LABEL_131:
    pas_local_allocator_scavenger_data_commit_if_necessary_slow((BOOL *)v109, 0);
LABEL_132:
    *(_WORD *)(v109 + 1) = 256;
    *(_BYTE *)v109 = 0;
    goto LABEL_133;
  }
LABEL_86:
  *(_WORD *)(v109 + 1) = 256;
  if (*(unsigned __int8 *)(v109 + 4) > (v110 + 1))
    v111 = v110 + 1;
  else
    v111 = 0;
  *(_BYTE *)(v109 + 5) = v111;
  v112 = ((8 * *(unsigned __int16 *)(v109 + 3 * v110 + 8)) | ((unint64_t)*(unsigned __int8 *)(v109 + 3 * v110 + 10) << 19))
       + v10[317];
  *(_BYTE *)(v109 + 7) = 1;
  *(_BYTE *)v109 = 0;
LABEL_258:
  if (!v61)
    goto LABEL_288;
  v208 = *(os_unfair_lock_s **)(v60 + 8);
  if (lock == v208)
  {
    v209 = v61 & 7;
    if (v209 < 2)
      goto LABEL_261;
LABEL_271:
    if (v209 != 4)
      goto LABEL_288;
    v287 = v62;
    v221 = v11;
    v222 = v61 & 0xFFFFFFFFFFFFFFF8;
    v223 = (8 * *(unsigned __int16 *)((v61 & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((v61 & 0xFFFFFFFFFFFFFFF8) + 6) << 19);
    v224 = v10[317];
    v225 = v223 + v224;
    v226 = *(unsigned __int8 *)(v222 + 9);
    v227 = *(unsigned __int16 *)(v222 + 7);
    v285 = *(_QWORD *)((*(_QWORD *)(v223 + v224) & 0xFFFFFFFFFFFFFFFELL) + 8);
    v228 = *(const os_unfair_lock **)(v60 + 8);
    if (v228)
      os_unfair_lock_assert_owner(v228);
    if (*(_DWORD *)(v225 + 24) == 1)
    {
      v229 = *(_QWORD *)(v60 + 24) == 0;
      v230 = *(_BYTE *)(v222 + 19);
      if ((v230 & 2) != 0)
        goto LABEL_276;
    }
    else
    {
      v229 = 0;
      v230 = *(_BYTE *)(v222 + 19);
      if ((v230 & 2) != 0)
      {
LABEL_276:
        *(_BYTE *)(v222 + 19) = v230 & 0xFC;
        --*(_DWORD *)(v225 + 24);
        pas_segregated_directory_view_did_become_eligible_at_index(((8 * v227) | (v226 << 19)) + v224, *(unsigned __int8 *)(v222 + 16));
        v11 = v221;
        v62 = v287;
        if (!v229)
          goto LABEL_288;
LABEL_280:
        v231 = v224 & 5 | 2;
        if (v231 == 3)
        {
          v232 = ((8 * *(unsigned __int16 *)((v225 & 0xFFFFFFFFFFFFFFF8) + 16)) | ((unint64_t)*(unsigned __int8 *)((v225 & 0xFFFFFFFFFFFFFFF8) + 18) << 19))
               + v10[317];
        }
        else
        {
          if (v231 != 2)
          {
            v233 = 0;
            goto LABEL_286;
          }
          v232 = v225 & 0xFFFFFFFFFFFFFFF8;
        }
        v233 = *(_DWORD *)(v232 + 16) & 0x7FFFFFFF;
LABEL_286:
        v218 = v233;
        v217 = v285;
        goto LABEL_287;
      }
    }
    *(_BYTE *)(v222 + 19) = v230 & 0xFE;
    --*(_DWORD *)(v225 + 24);
    v11 = v221;
    v62 = v287;
    if (!v229)
      goto LABEL_288;
    goto LABEL_280;
  }
  lock = pas_segregated_page_switch_lock_slow(v60, lock, v208);
  v209 = v61 & 7;
  if (v209 >= 2)
    goto LABEL_271;
LABEL_261:
  v210 = v61 & 0xFFFFFFFFFFFFFFF8;
  v211 = *(unsigned __int8 *)(v60 + 2);
  if (*(_BYTE *)(v60 + 2))
    *(_BYTE *)(v60 + 2) = 0;
  v212 = (8 * *(unsigned __int16 *)(v210 + 8)) | ((unint64_t)*(unsigned __int8 *)(v210 + 10) << 19);
  v213 = v10[317];
  v214 = v212 + v213;
  v215 = *(unsigned int *)(v210 + 12);
  v216 = *(_QWORD *)(v60 + 24);
  *(_BYTE *)(v60 + 1) = 0;
  if (v211)
    pas_segregated_directory_view_did_become_eligible_at_index(v212 + v213, v215);
  if (!v216)
  {
    v217 = v214;
    v218 = v215;
LABEL_287:
    pas_segregated_directory_view_did_become_empty_at_index(v217, v218);
  }
LABEL_288:
  if (!v112)
  {
    result = (uint64_t)lock;
    if (lock)
    {
      v238 = *(_DWORD *)(StatusReg + 24);
      while (1)
      {
        v239 = __ldxr(&lock->_os_unfair_lock_opaque);
        if (v239 != v238)
          break;
        if (!__stlxr(0, &lock->_os_unfair_lock_opaque))
          goto LABEL_349;
      }
      __clrex();
      os_unfair_lock_unlock(lock);
LABEL_349:
      result = 0;
      lock = 0;
    }
    return result;
  }
  v106 = v112 & 0xFFFFFFFFFFFFFFF8;
  if ((v112 & 6) == 0)
  {
    if (off_1EE342948)
    {
      v240 = (*(_QWORD *)v106 >> 14) ^ ((*(_QWORD *)v106 >> 14) >> 4);
      v241 = ((v240 ^ 0xDEADBEEF) + 32 * v240) ^ (((v240 ^ 0xDEADBEEF) + 32 * v240) >> 11);
      v242 = (char *)off_1EE342948 + 32;
      v243 = v241 & *((_DWORD *)off_1EE342948 + 3);
      v244 = *((_QWORD *)off_1EE342948 + 2 * v243 + 4);
      if (v244 == *(_QWORD *)v106)
      {
        v245 = v288;
LABEL_332:
        v60 = *(_QWORD *)&v242[16 * v243 + 8];
      }
      else
      {
        v269 = v241 + 1;
        v245 = v288;
        while (v244 != -1)
        {
          v243 = *((_DWORD *)off_1EE342948 + 3) & v269;
          v244 = *(_QWORD *)&v242[16 * v243];
          ++v269;
          if (v244 == *(_QWORD *)v106)
            goto LABEL_332;
        }
        v60 = 0;
      }
    }
    else
    {
      v60 = 0;
      v245 = v288;
    }
    pas_segregated_page_switch_lock_and_rebias_while_ineligible_impl(v60, &lock, v245);
    *(_BYTE *)(v60 + 1) = 1;
    *(_QWORD *)(v60 + 32) = v112 | 1;
    v66 = *(_QWORD *)(v60 - 16);
    if (!*(_QWORD *)(v60 + 24))
    {
LABEL_334:
      v270 = v10[317] + 8 * *(unsigned int *)(v11 + 40);
      v271 = *(_DWORD *)v270;
      v272 = *(unsigned int *)(v270 + 4) + v66;
      *(_QWORD *)(v60 + 24) = *(unsigned __int8 *)(v270 + 8);
      *(_QWORD *)(a1 + 8) = v272;
      *(_DWORD *)(a1 + 16) = v272 - (v271 + v66);
      *v62 = 0;
      v62[1] = 0;
      *(_QWORD *)(a1 + 24) = v66;
      v273 = (_OWORD *)(v10[317] + *(unsigned int *)(v270 + 9));
      v274 = v273[2];
      v275 = v273[3];
      v276 = v273[1];
      *(_OWORD *)(v60 + 44) = *v273;
      *(_OWORD *)(v60 + 92) = v275;
      *(_OWORD *)(v60 + 76) = v274;
      *(_OWORD *)(v60 + 60) = v276;
      v277 = v273[6];
      v278 = v273[7];
      v279 = v273[5];
      *(_OWORD *)(v60 + 108) = v273[4];
      *(_OWORD *)(v60 + 156) = v278;
      *(_OWORD *)(v60 + 140) = v277;
      *(_OWORD *)(v60 + 124) = v279;
      v105 = lock;
      if (lock)
        goto LABEL_338;
      return 1;
    }
LABEL_76:
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v67 = v10[317];
    v68 = (unsigned int *)(v67 + 8 * *(unsigned int *)(v11 + 40));
    v69 = *v68;
    v70 = (((v68[1] >> 4) - 1) >> 6) + 1;
    v71 = (int *)(v67 + *(unsigned int *)((char *)v68 + 9));
    *(_OWORD *)(a1 + 56) = 0u;
    v72 = a1 + 56;
    *(_DWORD *)(v72 - 24) = v69 >> 10;
    *(_DWORD *)(v72 - 20) = v70;
    *(_OWORD *)(v72 + 16) = 0u;
    *(_OWORD *)(v72 + 32) = 0u;
    *(_OWORD *)(v72 + 48) = 0u;
    *(_OWORD *)(v72 + 64) = 0u;
    *(_OWORD *)(v72 + 80) = 0u;
    *(_OWORD *)(v72 + 96) = 0u;
    *(_OWORD *)(v72 + 112) = 0u;
    *(_QWORD *)(v72 - 32) = (v69 & 0xFFFFFC00) + v66;
    v73 = *v71;
    LODWORD(v68) = *(_DWORD *)(v60 + 44);
    *(_DWORD *)v72 = *v71 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 44) = v68 | v73;
    v74 = v71[1];
    LODWORD(v68) = *(_DWORD *)(v60 + 48);
    *(_DWORD *)(v72 + 4) = v74 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 48) = v68 | v74;
    v75 = v71[2];
    LODWORD(v68) = *(_DWORD *)(v60 + 52);
    *(_DWORD *)(v72 + 8) = v75 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 52) = v68 | v75;
    v76 = v71[3];
    LODWORD(v68) = *(_DWORD *)(v60 + 56);
    *(_DWORD *)(v72 + 12) = v76 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 56) = v68 | v76;
    v77 = v71[4];
    LODWORD(v68) = *(_DWORD *)(v60 + 60);
    *(_DWORD *)(v72 + 16) = v77 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 60) = v68 | v77;
    v78 = v71[5];
    LODWORD(v68) = *(_DWORD *)(v60 + 64);
    *(_DWORD *)(v72 + 20) = v78 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 64) = v68 | v78;
    v79 = v71[6];
    LODWORD(v68) = *(_DWORD *)(v60 + 68);
    *(_DWORD *)(v72 + 24) = v79 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 68) = v68 | v79;
    v80 = v71[7];
    LODWORD(v68) = *(_DWORD *)(v60 + 72);
    *(_DWORD *)(v72 + 28) = v80 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 72) = v68 | v80;
    v81 = v71[8];
    LODWORD(v68) = *(_DWORD *)(v60 + 76);
    *(_DWORD *)(v72 + 32) = v81 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 76) = v68 | v81;
    v82 = v71[9];
    LODWORD(v68) = *(_DWORD *)(v60 + 80);
    *(_DWORD *)(v72 + 36) = v82 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 80) = v68 | v82;
    v83 = v71[10];
    LODWORD(v68) = *(_DWORD *)(v60 + 84);
    *(_DWORD *)(v72 + 40) = v83 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 84) = v68 | v83;
    v84 = v71[11];
    LODWORD(v68) = *(_DWORD *)(v60 + 88);
    *(_DWORD *)(v72 + 44) = v84 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 88) = v68 | v84;
    v85 = v71[12];
    LODWORD(v68) = *(_DWORD *)(v60 + 92);
    *(_DWORD *)(v72 + 48) = v85 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 92) = v68 | v85;
    v86 = v71[13];
    LODWORD(v68) = *(_DWORD *)(v60 + 96);
    *(_DWORD *)(v72 + 52) = v86 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 96) = v68 | v86;
    v87 = v71[14];
    LODWORD(v68) = *(_DWORD *)(v60 + 100);
    *(_DWORD *)(v72 + 56) = v87 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 100) = v68 | v87;
    v88 = v71[15];
    LODWORD(v68) = *(_DWORD *)(v60 + 104);
    *(_DWORD *)(v72 + 60) = v88 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 104) = v68 | v88;
    v89 = v71[16];
    LODWORD(v68) = *(_DWORD *)(v60 + 108);
    *(_DWORD *)(v72 + 64) = v89 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 108) = v68 | v89;
    v90 = v71[17];
    LODWORD(v68) = *(_DWORD *)(v60 + 112);
    *(_DWORD *)(v72 + 68) = v90 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 112) = v68 | v90;
    v91 = v71[18];
    LODWORD(v68) = *(_DWORD *)(v60 + 116);
    *(_DWORD *)(v72 + 72) = v91 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 116) = v68 | v91;
    v92 = v71[19];
    LODWORD(v68) = *(_DWORD *)(v60 + 120);
    *(_DWORD *)(v72 + 76) = v92 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 120) = v68 | v92;
    v93 = v71[20];
    LODWORD(v68) = *(_DWORD *)(v60 + 124);
    *(_DWORD *)(v72 + 80) = v93 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 124) = v68 | v93;
    v94 = v71[21];
    LODWORD(v68) = *(_DWORD *)(v60 + 128);
    *(_DWORD *)(v72 + 84) = v94 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 128) = v68 | v94;
    v95 = v71[22];
    LODWORD(v68) = *(_DWORD *)(v60 + 132);
    *(_DWORD *)(v72 + 88) = v95 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 132) = v68 | v95;
    v96 = v71[23];
    LODWORD(v68) = *(_DWORD *)(v60 + 136);
    *(_DWORD *)(v72 + 92) = v96 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 136) = v68 | v96;
    v97 = v71[24];
    LODWORD(v68) = *(_DWORD *)(v60 + 140);
    *(_DWORD *)(v72 + 96) = v97 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 140) = v68 | v97;
    v98 = v71[25];
    LODWORD(v68) = *(_DWORD *)(v60 + 144);
    *(_DWORD *)(v72 + 100) = v98 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 144) = v68 | v98;
    v99 = v71[26];
    LODWORD(v68) = *(_DWORD *)(v60 + 148);
    *(_DWORD *)(v72 + 104) = v99 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 148) = v68 | v99;
    v100 = v71[27];
    LODWORD(v68) = *(_DWORD *)(v60 + 152);
    *(_DWORD *)(v72 + 108) = v100 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 152) = v68 | v100;
    v101 = v71[28];
    LODWORD(v68) = *(_DWORD *)(v60 + 156);
    *(_DWORD *)(v72 + 112) = v101 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 156) = v68 | v101;
    v102 = v71[29];
    LODWORD(v68) = *(_DWORD *)(v60 + 160);
    *(_DWORD *)(v72 + 116) = v102 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 160) = v68 | v102;
    v103 = v71[30];
    LODWORD(v68) = *(_DWORD *)(v60 + 164);
    *(_DWORD *)(v72 + 120) = v103 & ~(_DWORD)v68;
    *(_DWORD *)(v60 + 164) = v68 | v103;
    LODWORD(v71) = v71[31];
    v104 = *(_DWORD *)(v60 + 168);
    *(_DWORD *)(v72 + 124) = v71 & ~v104;
    *(_DWORD *)(v60 + 168) = v104 | v71;
    *(_QWORD *)(v72 - 16) = __rbit64(*(_QWORD *)(v72 + 8 * (v69 >> 10)));
    *(_BYTE *)(v72 - 50) = 1;
    *(_QWORD *)(v60 + 24) = *(unsigned __int8 *)(v10[317] + 8 * *(unsigned int *)(v11 + 40) + 8);
    v105 = lock;
    if (lock)
      goto LABEL_338;
    return 1;
  }
  v234 = *(unsigned __int16 *)(v106 + 4) | ((unint64_t)*(unsigned __int8 *)(v106 + 6) << 16);
  v235 = v10[317] + 8 * v234;
  if (v234)
    v236 = v235 == 0;
  else
    v236 = 1;
  if (!v236)
  {
    v246 = *(_QWORD *)v235;
    if ((*(_QWORD *)v235 & 1) != 0)
      v246 = *(_QWORD *)(v246 & 0xFFFFFFFFFFFFFFFELL);
    if (off_1EE342948)
    {
      v247 = (v246 >> 14) ^ ((v246 >> 14) >> 4);
      v248 = ((v247 ^ 0xDEADBEEF) + 32 * v247) ^ (((v247 ^ 0xDEADBEEF) + 32 * v247) >> 11);
      v249 = (char *)off_1EE342948 + 32;
      v250 = *((_DWORD *)off_1EE342948 + 3) & v248;
      v251 = *((_QWORD *)off_1EE342948 + 2 * v250 + 4);
      if (v251 == v246)
      {
LABEL_312:
        v60 = *(_QWORD *)&v249[16 * v250 + 8];
LABEL_314:
        v253 = *(os_unfair_lock_s **)(v60 + 8);
        if (lock != v253)
          lock = pas_segregated_page_switch_lock_slow(v60, lock, v253);
        *(_BYTE *)(v106 + 19) |= 1u;
        ++*(_DWORD *)(v235 + 24);
        v126 = *(_BYTE *)(v106 + 19) & 0xFB;
        goto LABEL_317;
      }
      v252 = v248 + 1;
      while (v251 != -1)
      {
        v250 = *((_DWORD *)off_1EE342948 + 3) & v252;
        v251 = *(_QWORD *)&v249[16 * v250];
        ++v252;
        if (v251 == v246)
          goto LABEL_312;
      }
    }
    v60 = 0;
    goto LABEL_314;
  }
  if (lock)
  {
    v282 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v283 = __ldxr(&lock->_os_unfair_lock_opaque);
      if (v283 != v282)
        break;
      if (!__stlxr(0, &lock->_os_unfair_lock_opaque))
        goto LABEL_351;
    }
    __clrex();
    os_unfair_lock_unlock(lock);
LABEL_351:
    lock = 0;
  }
  return jit_small_segregated_page_config_specialized_local_allocator_start_allocating_in_primordial_partial_view(a1, v112 & 0xFFFFFFFFFFFFFFF8, v11);
}

void jit_small_segregated_page_config_specialized_local_allocator_return_memory_to_page(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  BOOL v46;
  int v47;
  int v49;
  int v51;
  int v53;
  int v55;
  int v57;
  int v59;
  int v61;
  int v63;
  int v65;
  int v67;
  int v69;
  int v71;
  int v73;
  int v75;
  int v77;
  int v79;
  int v81;
  int v83;
  int v85;
  int v87;
  int v89;
  int v91;
  int v93;
  int v95;
  int v97;
  int v99;
  _BOOL4 v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t StatusReg;
  unsigned int v108;
  size_t v110;
  void *v111;
  int v112;
  _DWORD *v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  _BOOL4 v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  int v146;
  BOOL v147;
  int v148;
  int v150;
  int v152;
  int v154;
  int v156;
  int v158;
  int v160;
  int v162;
  int v164;
  int v166;
  int v168;
  int v170;
  int v172;
  int v174;
  int v176;
  int v178;
  int v180;
  int v182;
  int v184;
  int v186;
  int v188;
  int v190;
  int v192;
  int v194;
  int v196;
  int v198;
  int v200;
  _BOOL4 v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unsigned int v209;
  size_t v211;
  void *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  unsigned int v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  unsigned int v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int128 *v246;
  char v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  char v252;
  const os_unfair_lock *v253;
  unint64_t v254;
  unsigned int *v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int128 *v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  unint64_t v265;
  unsigned int *v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  unsigned __int128 *v271;
  int v272;
  int *v273;
  char v274;
  int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  const os_unfair_lock *v280;
  unint64_t v281;
  unsigned int *v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unsigned __int128 *v287;
  int v288;
  _DWORD *v289;
  int v290;
  uint64_t v291;
  unint64_t v292;
  unsigned int *v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  os_unfair_lock_s *v298;
  int v299;
  unsigned int v300;
  os_unfair_lock_s *v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v306;
  os_unfair_lock_s *v308;
  unsigned int v309;
  int v311;
  unsigned int v312;
  os_unfair_lock_s *v313;
  unsigned int v314;
  int v316;
  unsigned int v317;
  _BOOL4 v318;
  _BOOL4 v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v339;
  uint64_t v340;
  int v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  os_unfair_lock_t v345;

  v8 = a2 & 7;
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(a3 + 8));
  v9 = *(unsigned __int8 *)(a1 + 5);
  v335 = a1;
  if (v8 == 4)
  {
    v10 = v9 > 0xB;
    v11 = (1 << v9) & 0xAA8;
    v12 = v10 || v11 == 0;
    if (v12)
      goto LABEL_475;
    v341 = a5;
    v13 = (_DWORD *)(a1 + 56);
    LODWORD(v332) = *(_DWORD *)(a1 + 60);
    HIDWORD(v332) = *(_DWORD *)(a1 + 56);
    v14 = HIDWORD(v332) != 0;
    if ((_DWORD)v332)
      v14 = 2;
    if (*(_DWORD *)(a1 + 64))
      v14 = 3;
    v328 = *(_DWORD *)(a1 + 68);
    v330 = *(_DWORD *)(a1 + 64);
    v15 = *(_DWORD *)(a1 + 76);
    v326 = *(_DWORD *)(a1 + 72);
    if (v328)
      v14 = 4;
    if (*(_DWORD *)(a1 + 72))
      v14 = 5;
    v16 = *(_DWORD *)(a1 + 84);
    v324 = *(_DWORD *)(a1 + 80);
    if (v15)
      v14 = 6;
    if (*(_DWORD *)(a1 + 80))
      v14 = 7;
    v17 = *(_DWORD *)(a1 + 92);
    v322 = *(_DWORD *)(a1 + 88);
    if (v16)
      v14 = 8;
    if (*(_DWORD *)(a1 + 88))
      v14 = 9;
    v19 = *(_DWORD *)(a1 + 96);
    v18 = *(_DWORD *)(a1 + 100);
    if (v17)
      v14 = 10;
    if (v19)
      v14 = 11;
    v21 = *(_DWORD *)(a1 + 104);
    v20 = *(_DWORD *)(a1 + 108);
    if (v18)
      v14 = 12;
    if (v21)
      v14 = 13;
    v23 = *(_DWORD *)(a1 + 112);
    v22 = v13[15];
    if (v20)
      v14 = 14;
    if (v23)
      v14 = 15;
    v25 = v13[16];
    v24 = v13[17];
    if (v22)
      v14 = 16;
    if (v25)
      v14 = 17;
    v27 = v13[18];
    v26 = v13[19];
    if (v24)
      v14 = 18;
    if (v27)
      v14 = 19;
    v29 = v13[20];
    v28 = v13[21];
    if (v26)
      v14 = 20;
    if (v29)
      v14 = 21;
    v30 = v13[22];
    v31 = v13[23];
    if (v28)
      v14 = 22;
    if (v30)
      v14 = 23;
    v32 = v13[24];
    v33 = v13[25];
    if (v31)
      v14 = 24;
    if (v32)
      v14 = 25;
    v35 = v13[26];
    v34 = v13[27];
    if (v33)
      v14 = 26;
    if (v35)
      v14 = 27;
    v37 = v13[28];
    v36 = v13[29];
    if (v34)
      v14 = 28;
    if (v37)
      v14 = 29;
    if (v36)
      v38 = 30;
    else
      v38 = v14;
    v40 = v13[30];
    v39 = v13[31];
    v41 = v39 == 0;
    if (v40)
    {
      v38 = 31;
      v41 = 1;
    }
    v318 = v41;
    v12 = v39 == 0;
    v42 = 32;
    if (v12)
      v42 = v38;
    v320 = v42;
    if (HIDWORD(v332))
      v43 = 0;
    else
      v43 = -1;
    if (HIDWORD(v332))
      v44 = 1;
    else
      v44 = (_DWORD)v332 == 0;
    if (!v44)
      v43 = 1;
    v45 = v330 | v332 | HIDWORD(v332);
    if (v332)
      v46 = 1;
    else
      v46 = v330 == 0;
    if (!v46)
      v43 = 2;
    v12 = v45 == 0;
    v47 = v328 | v45;
    if (v12 && v328 != 0)
      v43 = 3;
    v12 = v47 == 0;
    v49 = v326 | v47;
    if (v12 && v326 != 0)
      v43 = 4;
    v12 = v49 == 0;
    v51 = v15 | v49;
    if (v12 && v15 != 0)
      v43 = 5;
    v12 = v51 == 0;
    v53 = v324 | v51;
    if (v12 && v324 != 0)
      v43 = 6;
    v12 = v53 == 0;
    v55 = v16 | v53;
    if (v12 && v16 != 0)
      v43 = 7;
    v12 = v55 == 0;
    v57 = v322 | v55;
    if (v12 && v322 != 0)
      v43 = 8;
    v12 = v57 == 0;
    v59 = v17 | v57;
    if (v12 && v17 != 0)
      v43 = 9;
    v12 = v59 == 0;
    v61 = v19 | v59;
    if (v12 && v19 != 0)
      v43 = 10;
    v12 = v61 == 0;
    v63 = v18 | v61;
    if (v12 && v18 != 0)
      v43 = 11;
    v12 = v63 == 0;
    v65 = v21 | v63;
    if (v12 && v21 != 0)
      v43 = 12;
    v12 = v65 == 0;
    v67 = v20 | v65;
    if (v12 && v20 != 0)
      v43 = 13;
    v12 = v67 == 0;
    v69 = v23 | v67;
    if (v12 && v23 != 0)
      v43 = 14;
    v12 = v69 == 0;
    v71 = v22 | v69;
    if (v12 && v22 != 0)
      v43 = 15;
    v12 = v71 == 0;
    v73 = v25 | v71;
    if (v12 && v25 != 0)
      v43 = 16;
    v12 = v73 == 0;
    v75 = v24 | v73;
    if (v12 && v24 != 0)
      v43 = 17;
    v12 = v75 == 0;
    v77 = v27 | v75;
    if (v12 && v27 != 0)
      v43 = 18;
    v12 = v77 == 0;
    v79 = v26 | v77;
    if (v12 && v26 != 0)
      v43 = 19;
    v12 = v79 == 0;
    v81 = v29 | v79;
    if (v12 && v29 != 0)
      v43 = 20;
    v12 = v81 == 0;
    v83 = v28 | v81;
    if (v12 && v28 != 0)
      v43 = 21;
    v12 = v83 == 0;
    v85 = v30 | v83;
    if (v12 && v30 != 0)
      v43 = 22;
    v12 = v85 == 0;
    v87 = v31 | v85;
    if (v12 && v31 != 0)
      v43 = 23;
    v12 = v87 == 0;
    v89 = v32 | v87;
    if (v12 && v32 != 0)
      v43 = 24;
    v12 = v89 == 0;
    v91 = v33 | v89;
    if (v12 && v33 != 0)
      v43 = 25;
    v12 = v91 == 0;
    v93 = v35 | v91;
    if (v12 && v35 != 0)
      v43 = 26;
    v12 = v93 == 0;
    v95 = v34 | v93;
    if (v12 && v34 != 0)
      v43 = 27;
    v12 = v95 == 0;
    v97 = v37 | v95;
    if (v12 && v37 != 0)
      v43 = 28;
    v12 = v97 == 0;
    v99 = v36 | v97;
    if (v12 && v36 != 0)
      v43 = 29;
    v12 = v99 == 0;
    v101 = v40 == 0;
    v102 = v318;
    if (!v12)
    {
      v101 = 1;
      v102 = 1;
    }
    v12 = !v101;
    v103 = 30;
    if (!v12)
      v103 = v43;
    v104 = v102 ? v103 : 31;
    v105 = *((_QWORD *)v13 - 1) & 0xFFFFFFFFFFFFFFF8;
    v106 = v320 - v104;
    *(_BYTE *)(v105 + 17) = v320 - v104;
    *(_BYTE *)(v105 + 18) = v104;
    if (v341)
    {
LABEL_228:
      a1 = v335;
    }
    else
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v108 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v108, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_228;
      }
      __clrex();
      v298 = *(os_unfair_lock_s **)(a3 + 8);
      v299 = *(_DWORD *)(StatusReg + 24);
      a1 = v335;
      while (1)
      {
        v300 = __ldxr(&v298->_os_unfair_lock_opaque);
        if (v300 != v299)
          break;
        if (!__stlxr(0, &v298->_os_unfair_lock_opaque))
          goto LABEL_622;
      }
      __clrex();
      os_unfair_lock_unlock(v298);
LABEL_622:
      v304 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
      {
        if (!__stxr(v304, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_633;
      }
      __clrex();
      os_unfair_lock_lock(&pas_heap_lock);
LABEL_633:
      v308 = *(os_unfair_lock_s **)(a3 + 8);
      v345 = v308;
      v309 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(&v308->_os_unfair_lock_opaque))
      {
        if (!__stxr(v309, &v308->_os_unfair_lock_opaque))
        {
          if (*(os_unfair_lock_s **)(a3 + 8) == v308)
            goto LABEL_229;
LABEL_639:
          v311 = *(_DWORD *)(StatusReg + 24);
          while (1)
          {
            v312 = __ldxr(&v308->_os_unfair_lock_opaque);
            if (v312 != v311)
              break;
            if (!__stlxr(0, &v308->_os_unfair_lock_opaque))
              goto LABEL_633;
          }
          __clrex();
          os_unfair_lock_unlock(v308);
          goto LABEL_633;
        }
      }
      __clrex();
      if (!pas_segregated_page_lock_with_unbias_impl(a3, &v345, v308))
        goto LABEL_639;
    }
LABEL_229:
    if (v106 == 1)
    {
      v110 = 4;
      v111 = (void *)v105;
    }
    else
    {
      v110 = 4 * v106;
      v111 = (void *)pas_immortal_heap_allocate_with_manual_alignment(4 * v106, 8, (uint64_t)"pas_segregated_partial_view/alloc_bits", 0);
    }
    v213 = (unint64_t)v111 - 4 * v104;
    memcpy(v111, &v13[v104], v110);
    __dmb(0xAu);
    v214 = *(unsigned int *)(v105 + 12);
    v215 = pas_compact_heap_reservation_base;
    if (v214 >= 8)
      v216 = pas_compact_heap_reservation_base;
    else
      v216 = 0;
    v217 = v216 + v214;
    if ((v217 & 1) != 0)
    {
      pas_utility_heap_deallocate(v217 & 0xFFFFFFFFFFFFFFFELL);
      v215 = pas_compact_heap_reservation_base;
    }
    if (v213 >= 8 && v213 - v215 >= pas_compact_heap_reservation_size)
    {
      v218 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
      *(_QWORD *)v218 = v213;
      v213 = v218 | 1;
      LODWORD(v215) = pas_compact_heap_reservation_base;
    }
    if (v213 < 8)
      LODWORD(v215) = 0;
    *(_DWORD *)(v105 + 12) = v213 - v215;
    if (v341)
    {
LABEL_475:
      v221 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v221)
      {
LABEL_477:
        v224 = *(unsigned int *)(v335 + 32);
        if ((_DWORD)v224 == *(_DWORD *)(v335 + 36))
          return;
        *(_QWORD *)(v335 + 8 * v224 + 56) = __rbit64(*(_QWORD *)(v335 + 40));
        if ((a2 & 6) != 0)
        {
          v225 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFF8) + 12);
          v226 = pas_compact_heap_reservation_base;
          if (v225 < 8)
            v226 = 0;
          v343 = v226 + v225;
          if ((((_DWORD)v226 + (_DWORD)v225) & 1) != 0)
            v343 = *(_QWORD *)(v343 & 0xFFFFFFFFFFFFFFFELL);
          v227 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18) | ((unint64_t)(*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 17)
                                                                                            + *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18)) << 32);
          v228 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18);
          v339 = HIDWORD(v227);
          if (v227 >= HIDWORD(v227))
            return;
        }
        else
        {
          v343 = pas_compact_heap_reservation_base
               + *(unsigned int *)(pas_compact_heap_reservation_base + 8 * *(unsigned int *)(a4 + 40) + 9);
          v228 = 0;
          v339 = 32;
        }
        v336 = v335 + 56;
        v271 = (unsigned __int128 *)(a3 + 16);
        while (1)
        {
          v272 = *(_DWORD *)(v336 + 4 * v228) & *(_DWORD *)(v343 + 4 * v228);
          if (v272)
            break;
LABEL_557:
          if (++v228 == v339)
            return;
        }
        v273 = (int *)(a3 + 4 * (v228 & 0x1F) + 44);
        while (1)
        {
          v275 = v272 & -v272;
          v276 = *v273 & ~v275;
          *v273 = v276;
          v277 = *(unsigned int *)((*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * (v228 & 0x1F) + 20);
          if ((_DWORD)v277)
            v278 = pas_compact_heap_reservation_base + 8 * v277;
          else
            v278 = 0;
          v279 = *(_BYTE *)(v278 + 19);
          if ((v279 & 4) == 0)
          {
            v280 = *(const os_unfair_lock **)(a3 + 8);
            if (v280)
            {
              os_unfair_lock_assert_owner(v280);
              v279 = *(_BYTE *)(v278 + 19);
            }
            if ((v279 & 1) != 0)
            {
              v274 = v279 | 2;
            }
            else
            {
              if ((v278 & 3) != 0)
                v281 = 0;
              else
                v281 = *(unsigned __int8 *)((v278 & 0xFFFFFFFFFFFFFFF8) + 16);
              pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v278 + 7)) | ((unint64_t)*(unsigned __int8 *)(v278 + 9) << 19))+ pas_compact_heap_reservation_base, v281);
              v274 = *(_BYTE *)(v278 + 19);
            }
            *(_BYTE *)(v278 + 19) = v274 | 4;
          }
          if (v276)
            goto LABEL_563;
          if (*(_QWORD *)(a3 + 24) == 1)
            break;
          --*(_QWORD *)(a3 + 24);
LABEL_563:
          v272 ^= v275;
          if (!v272)
            goto LABEL_557;
        }
        v282 = (unsigned int *)timebase_info_ptr;
        if (timebase_info_ptr)
        {
          v283 = mach_approximate_time();
          v284 = *v282;
          v285 = v282[1];
          if ((pas_get_epoch_first & 1) != 0)
            goto LABEL_578;
        }
        else
        {
          get_timebase_info_slow();
          v283 = mach_approximate_time();
          v284 = timebase_info;
          v285 = *(unsigned int *)algn_1ECF57B54;
          if ((pas_get_epoch_first & 1) != 0)
          {
LABEL_578:
            v286 = v283 * v284 / v285;
            do
              __ldxp(v271);
            while (__stxp(v286, v271));
            pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
            goto LABEL_563;
          }
        }
        pas_get_epoch_first = 1;
        goto LABEL_578;
      }
    }
    else
    {
      v219 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
      while (1)
      {
        v220 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
        if (v220 != v219)
          break;
        if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
          goto LABEL_475;
      }
      __clrex();
      os_unfair_lock_unlock(&pas_heap_lock);
      v221 = *(unsigned int *)(a1 + 16);
      if (!(_DWORD)v221)
        goto LABEL_477;
    }
    v222 = *(_QWORD *)(v335 + 8);
    v223 = v222 - v221;
    if (v222 < v221)
      goto LABEL_477;
    v245 = *(unsigned int *)(v335 + 20);
    v246 = (unsigned __int128 *)(a3 + 16);
    while (1)
    {
      v248 = 4 * ((v223 >> 9) & 0x1F);
      v249 = *(_DWORD *)(a3 + v248 + 44) & ~(1 << (v223 >> 4));
      *(_DWORD *)(a3 + v248 + 44) = v249;
      v250 = *(unsigned int *)((*(_QWORD *)(a3 + 32) & 0xFFFFFFFFFFFFFFF8) + v248 + 20);
      if ((_DWORD)v250)
        v251 = pas_compact_heap_reservation_base + 8 * v250;
      else
        v251 = 0;
      v252 = *(_BYTE *)(v251 + 19);
      if ((v252 & 4) == 0)
      {
        v253 = *(const os_unfair_lock **)(a3 + 8);
        if (v253)
        {
          os_unfair_lock_assert_owner(v253);
          v252 = *(_BYTE *)(v251 + 19);
        }
        if ((v252 & 1) != 0)
        {
          v247 = v252 | 2;
        }
        else
        {
          if ((v251 & 3) != 0)
            v254 = 0;
          else
            v254 = *(unsigned __int8 *)((v251 & 0xFFFFFFFFFFFFFFF8) + 16);
          pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v251 + 7)) | ((unint64_t)*(unsigned __int8 *)(v251 + 9) << 19))+ pas_compact_heap_reservation_base, v254);
          v247 = *(_BYTE *)(v251 + 19);
        }
        *(_BYTE *)(v251 + 19) = v247 | 4;
      }
      if (v249)
        goto LABEL_514;
      if (*(_QWORD *)(a3 + 24) == 1)
        break;
      --*(_QWORD *)(a3 + 24);
LABEL_514:
      v223 += v245;
      if (v223 >= v222)
        goto LABEL_477;
    }
    v255 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v256 = mach_approximate_time();
      v257 = *v255;
      v258 = v255[1];
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_529;
    }
    else
    {
      get_timebase_info_slow();
      v256 = mach_approximate_time();
      v257 = timebase_info;
      v258 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_529:
        v259 = v256 * v257 / v258;
        do
          __ldxp(v246);
        while (__stxp(v259, v246));
        pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
        goto LABEL_514;
      }
    }
    pas_get_epoch_first = 1;
    goto LABEL_529;
  }
  v10 = v9 > 0xB;
  v112 = (1 << v9) & 0xAA8;
  if (v10 || v112 == 0)
    goto LABEL_500;
  v114 = (_DWORD *)(a1 + 56);
  LODWORD(v333) = *(_DWORD *)(a1 + 60);
  HIDWORD(v333) = *(_DWORD *)(a1 + 56);
  v115 = HIDWORD(v333) != 0;
  if ((_DWORD)v333)
    v115 = 2;
  if (*(_DWORD *)(a1 + 64))
    v115 = 3;
  v329 = *(_DWORD *)(a1 + 68);
  v331 = *(_DWORD *)(a1 + 64);
  v116 = *(_DWORD *)(a1 + 76);
  v327 = *(_DWORD *)(a1 + 72);
  if (v329)
    v115 = 4;
  if (*(_DWORD *)(a1 + 72))
    v115 = 5;
  v117 = *(_DWORD *)(a1 + 84);
  v325 = *(_DWORD *)(a1 + 80);
  if (v116)
    v115 = 6;
  if (*(_DWORD *)(a1 + 80))
    v115 = 7;
  v118 = *(_DWORD *)(a1 + 92);
  v323 = *(_DWORD *)(a1 + 88);
  if (v117)
    v115 = 8;
  if (*(_DWORD *)(a1 + 88))
    v115 = 9;
  v120 = *(_DWORD *)(a1 + 96);
  v119 = *(_DWORD *)(a1 + 100);
  if (v118)
    v115 = 10;
  if (v120)
    v115 = 11;
  v342 = a5;
  v122 = *(_DWORD *)(a1 + 104);
  v121 = *(_DWORD *)(a1 + 108);
  if (v119)
    v115 = 12;
  if (v122)
    v115 = 13;
  v124 = *(_DWORD *)(a1 + 112);
  v123 = v114[15];
  if (v121)
    v115 = 14;
  if (v124)
    v115 = 15;
  v126 = v114[16];
  v125 = v114[17];
  if (v123)
    v115 = 16;
  if (v126)
    v115 = 17;
  v128 = v114[18];
  v127 = v114[19];
  if (v125)
    v115 = 18;
  if (v128)
    v115 = 19;
  v130 = v114[20];
  v129 = v114[21];
  if (v127)
    v115 = 20;
  if (v130)
    v115 = 21;
  v131 = v114[22];
  v132 = v114[23];
  if (v129)
    v115 = 22;
  if (v131)
    v115 = 23;
  v133 = v114[24];
  v134 = v114[25];
  if (v132)
    v115 = 24;
  if (v133)
    v115 = 25;
  v136 = v114[26];
  v135 = v114[27];
  if (v134)
    v115 = 26;
  if (v136)
    v115 = 27;
  v138 = v114[28];
  v137 = v114[29];
  if (v135)
    v115 = 28;
  if (v138)
    v115 = 29;
  if (v137)
    v139 = 30;
  else
    v139 = v115;
  v141 = v114[30];
  v140 = v114[31];
  v142 = v140 == 0;
  if (v141)
  {
    v139 = 31;
    v142 = 1;
  }
  v319 = v142;
  v12 = v140 == 0;
  v143 = 32;
  if (v12)
    v143 = v139;
  v321 = v143;
  if (HIDWORD(v333))
    v144 = 0;
  else
    v144 = -1;
  if (HIDWORD(v333))
    v145 = 1;
  else
    v145 = (_DWORD)v333 == 0;
  if (!v145)
    v144 = 1;
  v146 = v331 | v333 | HIDWORD(v333);
  if (v333)
    v147 = 1;
  else
    v147 = v331 == 0;
  if (!v147)
    v144 = 2;
  v12 = v146 == 0;
  v148 = v329 | v146;
  if (v12 && v329 != 0)
    v144 = 3;
  v12 = v148 == 0;
  v150 = v327 | v148;
  if (v12 && v327 != 0)
    v144 = 4;
  v12 = v150 == 0;
  v152 = v116 | v150;
  if (v12 && v116 != 0)
    v144 = 5;
  v12 = v152 == 0;
  v154 = v325 | v152;
  if (v12 && v325 != 0)
    v144 = 6;
  v12 = v154 == 0;
  v156 = v117 | v154;
  if (v12 && v117 != 0)
    v144 = 7;
  v12 = v156 == 0;
  v158 = v323 | v156;
  if (v12 && v323 != 0)
    v144 = 8;
  v12 = v158 == 0;
  v160 = v118 | v158;
  if (v12 && v118 != 0)
    v144 = 9;
  v12 = v160 == 0;
  v162 = v120 | v160;
  if (v12 && v120 != 0)
    v144 = 10;
  v12 = v162 == 0;
  v164 = v119 | v162;
  if (v12 && v119 != 0)
    v144 = 11;
  v12 = v164 == 0;
  v166 = v122 | v164;
  if (v12 && v122 != 0)
    v144 = 12;
  v12 = v166 == 0;
  v168 = v121 | v166;
  if (v12 && v121 != 0)
    v144 = 13;
  v12 = v168 == 0;
  v170 = v124 | v168;
  if (v12 && v124 != 0)
    v144 = 14;
  v12 = v170 == 0;
  v172 = v123 | v170;
  if (v12 && v123 != 0)
    v144 = 15;
  v12 = v172 == 0;
  v174 = v126 | v172;
  if (v12 && v126 != 0)
    v144 = 16;
  v12 = v174 == 0;
  v176 = v125 | v174;
  if (v12 && v125 != 0)
    v144 = 17;
  v12 = v176 == 0;
  v178 = v128 | v176;
  if (v12 && v128 != 0)
    v144 = 18;
  v12 = v178 == 0;
  v180 = v127 | v178;
  if (v12 && v127 != 0)
    v144 = 19;
  v12 = v180 == 0;
  v182 = v130 | v180;
  if (v12 && v130 != 0)
    v144 = 20;
  v12 = v182 == 0;
  v184 = v129 | v182;
  if (v12 && v129 != 0)
    v144 = 21;
  v12 = v184 == 0;
  v186 = v131 | v184;
  if (v12 && v131 != 0)
    v144 = 22;
  v12 = v186 == 0;
  v188 = v132 | v186;
  if (v12 && v132 != 0)
    v144 = 23;
  v12 = v188 == 0;
  v190 = v133 | v188;
  if (v12 && v133 != 0)
    v144 = 24;
  v12 = v190 == 0;
  v192 = v134 | v190;
  if (v12 && v134 != 0)
    v144 = 25;
  v12 = v192 == 0;
  v194 = v136 | v192;
  if (v12 && v136 != 0)
    v144 = 26;
  v12 = v194 == 0;
  v196 = v135 | v194;
  if (v12 && v135 != 0)
    v144 = 27;
  v12 = v196 == 0;
  v198 = v138 | v196;
  if (v12 && v138 != 0)
    v144 = 28;
  v12 = v198 == 0;
  v200 = v137 | v198;
  if (v12 && v137 != 0)
    v144 = 29;
  v12 = v200 == 0;
  v202 = v141 == 0;
  v203 = v319;
  if (!v12)
  {
    v202 = 1;
    v203 = 1;
  }
  v12 = !v202;
  v204 = 30;
  if (!v12)
    v204 = v144;
  v205 = v203 ? v204 : 31;
  v206 = *((_QWORD *)v114 - 1) & 0xFFFFFFFFFFFFFFF8;
  v207 = v321 - v205;
  *(_BYTE *)(v206 + 17) = v321 - v205;
  *(_BYTE *)(v206 + 18) = v205;
  if (v342)
  {
LABEL_457:
    a1 = v335;
  }
  else
  {
    v208 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v209 = *(_DWORD *)(v208 + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v209, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_457;
    }
    __clrex();
    v301 = *(os_unfair_lock_s **)(a3 + 8);
    v302 = *(_DWORD *)(v208 + 24);
    a1 = v335;
    while (1)
    {
      v303 = __ldxr(&v301->_os_unfair_lock_opaque);
      if (v303 != v302)
        break;
      if (!__stlxr(0, &v301->_os_unfair_lock_opaque))
        goto LABEL_627;
    }
    __clrex();
    os_unfair_lock_unlock(v301);
LABEL_627:
    v306 = *(_DWORD *)(v208 + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v306, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_645;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_645:
    v313 = *(os_unfair_lock_s **)(a3 + 8);
    v345 = v313;
    v314 = *(_DWORD *)(v208 + 24);
    while (!__ldaxr(&v313->_os_unfair_lock_opaque))
    {
      if (!__stxr(v314, &v313->_os_unfair_lock_opaque))
      {
        if (*(os_unfair_lock_s **)(a3 + 8) == v313)
          goto LABEL_458;
LABEL_651:
        v316 = *(_DWORD *)(v208 + 24);
        while (1)
        {
          v317 = __ldxr(&v313->_os_unfair_lock_opaque);
          if (v317 != v316)
            break;
          if (!__stlxr(0, &v313->_os_unfair_lock_opaque))
            goto LABEL_645;
        }
        __clrex();
        os_unfair_lock_unlock(v313);
        goto LABEL_645;
      }
    }
    __clrex();
    if (!pas_segregated_page_lock_with_unbias_impl(a3, &v345, v313))
      goto LABEL_651;
  }
LABEL_458:
  if (v207 == 1)
  {
    v211 = 4;
    v212 = (void *)v206;
  }
  else
  {
    v211 = 4 * v207;
    v212 = (void *)pas_immortal_heap_allocate_with_manual_alignment(4 * v207, 8, (uint64_t)"pas_segregated_partial_view/alloc_bits", 0);
  }
  v229 = (unint64_t)v212 - 4 * v205;
  memcpy(v212, &v114[v205], v211);
  __dmb(0xAu);
  v230 = *(unsigned int *)(v206 + 12);
  v231 = pas_compact_heap_reservation_base;
  if (v230 >= 8)
    v232 = pas_compact_heap_reservation_base;
  else
    v232 = 0;
  v233 = v232 + v230;
  if ((v233 & 1) != 0)
  {
    pas_utility_heap_deallocate(v233 & 0xFFFFFFFFFFFFFFFELL);
    v231 = pas_compact_heap_reservation_base;
  }
  if (v229 >= 8 && v229 - v231 >= pas_compact_heap_reservation_size)
  {
    v234 = pas_utility_heap_try_allocate_with_alignment(8, 1uLL, (uint64_t)"pas_lenient_compact_unsigned_ptr/box");
    *(_QWORD *)v234 = v229;
    v229 = v234 | 1;
    LODWORD(v231) = pas_compact_heap_reservation_base;
  }
  if (v229 < 8)
    LODWORD(v231) = 0;
  *(_DWORD *)(v206 + 12) = v229 - v231;
  if (v342)
  {
LABEL_500:
    v237 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v237)
      goto LABEL_502;
    goto LABEL_501;
  }
  v235 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v236 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v236 != v235)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_500;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  v237 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v237)
  {
LABEL_501:
    v238 = *(_QWORD *)(v335 + 8);
    v239 = v238 - v237;
    if (v238 < v237)
      goto LABEL_502;
    v260 = *(unsigned int *)(v335 + 20);
    v261 = (unsigned __int128 *)(a3 + 16);
    do
    {
      v262 = a3 + 4 * ((v239 >> 9) & 0x1F);
      v263 = 1 << (v239 >> 4);
      v12 = (*(_DWORD *)(v262 + 44) & ~v263) == 0;
      *(_DWORD *)(v262 + 44) &= ~v263;
      if (v12)
      {
        v264 = *(_QWORD *)(a3 + 32);
        if ((v264 & 7) != 0)
        {
          v265 = v264 & 0xFFFFFFFFFFFFFFF8;
          if (*(_BYTE *)(a3 + 1))
            *(_BYTE *)(a3 + 2) = 1;
          else
            pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v265 + 8)) | ((unint64_t)*(unsigned __int8 *)(v265 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v265 + 12));
          *(_QWORD *)(a3 + 32) = v265;
        }
        if (*(_QWORD *)(a3 + 24) == 1)
        {
          v266 = (unsigned int *)timebase_info_ptr;
          if (timebase_info_ptr)
          {
            v267 = mach_approximate_time();
            v268 = *v266;
            v269 = v266[1];
            if ((pas_get_epoch_first & 1) == 0)
              goto LABEL_549;
          }
          else
          {
            get_timebase_info_slow();
            v267 = mach_approximate_time();
            v268 = timebase_info;
            v269 = *(unsigned int *)algn_1ECF57B54;
            if ((pas_get_epoch_first & 1) == 0)
LABEL_549:
              pas_get_epoch_first = 1;
          }
          v270 = v267 * v268 / v269;
          do
            __ldxp(v261);
          while (__stxp(v270, v261));
          pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
          goto LABEL_538;
        }
        --*(_QWORD *)(a3 + 24);
      }
LABEL_538:
      v239 += v260;
    }
    while (v239 < v238);
  }
LABEL_502:
  v240 = *(unsigned int *)(v335 + 32);
  if ((_DWORD)v240 == *(_DWORD *)(v335 + 36))
    return;
  *(_QWORD *)(v335 + 8 * v240 + 56) = __rbit64(*(_QWORD *)(v335 + 40));
  if ((a2 & 6) == 0)
  {
    v344 = pas_compact_heap_reservation_base
         + *(unsigned int *)(pas_compact_heap_reservation_base + 8 * *(unsigned int *)(a4 + 40) + 9);
    v244 = 0;
    v340 = 32;
    goto LABEL_586;
  }
  v241 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFF8) + 12);
  v242 = pas_compact_heap_reservation_base;
  if (v241 < 8)
    v242 = 0;
  v344 = v242 + v241;
  if ((((_DWORD)v242 + (_DWORD)v241) & 1) != 0)
    v344 = *(_QWORD *)(v344 & 0xFFFFFFFFFFFFFFFELL);
  v243 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18) | ((unint64_t)(*(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 17)
                                                                                    + *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18)) << 32);
  v244 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFF8) + 18);
  v340 = HIDWORD(v243);
  if (v243 < HIDWORD(v243))
  {
LABEL_586:
    v337 = v335 + 56;
    v287 = (unsigned __int128 *)(a3 + 16);
    while (1)
    {
      v288 = *(_DWORD *)(v337 + 4 * v244) & *(_DWORD *)(v344 + 4 * v244);
      if (v288)
        break;
LABEL_587:
      if (++v244 == v340)
        return;
    }
    v289 = (_DWORD *)(a3 + 4 * (v244 & 0x1F) + 44);
    while (1)
    {
      v290 = v288 & -v288;
      v12 = (*v289 & ~v290) == 0;
      *v289 &= ~v290;
      if (v12)
      {
        v291 = *(_QWORD *)(a3 + 32);
        if ((v291 & 7) != 0)
        {
          v292 = v291 & 0xFFFFFFFFFFFFFFF8;
          if (*(_BYTE *)(a3 + 1))
            *(_BYTE *)(a3 + 2) = 1;
          else
            pas_segregated_directory_view_did_become_eligible_at_index(((8 * *(unsigned __int16 *)(v292 + 8)) | ((unint64_t)*(unsigned __int8 *)(v292 + 10) << 19))+ pas_compact_heap_reservation_base, *(unsigned int *)(v292 + 12));
          *(_QWORD *)(a3 + 32) = v292;
        }
        if (*(_QWORD *)(a3 + 24) == 1)
        {
          v293 = (unsigned int *)timebase_info_ptr;
          if (timebase_info_ptr)
          {
            v294 = mach_approximate_time();
            v295 = *v293;
            v296 = v293[1];
            if ((pas_get_epoch_first & 1) == 0)
              goto LABEL_602;
          }
          else
          {
            get_timebase_info_slow();
            v294 = mach_approximate_time();
            v295 = timebase_info;
            v296 = *(unsigned int *)algn_1ECF57B54;
            if ((pas_get_epoch_first & 1) == 0)
LABEL_602:
              pas_get_epoch_first = 1;
          }
          v297 = v294 * v295 / v296;
          do
            __ldxp(v287);
          while (__stxp(v297, v287));
          pas_segregated_view_note_emptiness(*(_QWORD *)(a3 + 32), a3);
          goto LABEL_591;
        }
        --*(_QWORD *)(a3 + 24);
      }
LABEL_591:
      v288 ^= v290;
      if (!v288)
        goto LABEL_587;
    }
  }
}

_QWORD *jit_small_bitfit_create_page_header(unint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;
  int v10;
  unsigned int v11;

  if (!a3)
  {
    v5 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v5, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  v7 = (_QWORD *)pas_utility_heap_try_allocate_with_alignment(1056, 0x10uLL, (uint64_t)"pas_page_header_table/header");
  *v7 = a1;
  v8 = v7 + 2;
  pas_lock_free_read_ptr_ptr_hashtable_set(&off_1EE342948, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x4000, a1, (unint64_t)(v7 + 2));
  if (a3)
    return v8;
  v10 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v11 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v11 != v10)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v8;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return v8;
}

unint64_t jit_small_bitfit_allocate_page()
{
  int64x2_t v1;
  double (*v2)@<D0>(uint64_t@<X8>);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v1 = vdupq_n_s64(1uLL);
  v2 = fresh_memory_aligned_allocator;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  return try_allocate_without_fixing(jit_fresh_memory_heap, 0x4000uLL, 0x4000uLL, 0, (unint64_t *)&v1);
}

uint64_t jit_small_bitfit_page_config_specialized_allocator_try_allocate(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t StatusReg;
  unint64_t v12;
  os_unfair_lock_s *v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t first_free_view;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  __int16 v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int128 v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  unint64_t v84;
  unint64_t v85;
  uint64_t v87;
  unint64_t v88;

  v5 = (uint64_t *)a1;
  if (a3)
    v6 = (a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  else
    v6 = 4;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = v6 >> 2;
  v88 = a4 - 1;
  v87 = -(uint64_t)a4;
  v9 = (v6 >> 2) + 63;
  if (v6 == 256)
    v10 = -1;
  else
    v10 = ~(-1 << (v6 >> 2));
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v12 = 0x1EE342000uLL;
  if (!v7)
    goto LABEL_61;
  while (1)
  {
    v13 = (os_unfair_lock_s *)(v7 + 16);
    v14 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&v13->_os_unfair_lock_opaque))
    {
      if (!__stxr(v14, &v13->_os_unfair_lock_opaque))
        goto LABEL_13;
    }
    __clrex();
    v16 = v9;
    v17 = v10;
    v18 = v12;
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 16));
    v12 = v18;
    v10 = v17;
    v9 = v16;
LABEL_13:
    if (!*(_BYTE *)(v7 + 11))
    {
      v58 = v9;
      v59 = v10;
      v60 = v12;
      v61 = pas_bitfit_allocator_commit_view((os_unfair_lock_s *)v7, (uint64_t)&unk_1E35BEA68, 0);
      v12 = v60;
      v10 = v59;
      v9 = v58;
      if ((v61 & 1) == 0)
        break;
    }
    v19 = *(_QWORD *)(v12 + 2376);
    if (v19)
    {
      v20 = (*(_QWORD *)v7 >> 14) ^ ((*(_QWORD *)v7 >> 14) >> 4);
      v21 = ((v20 ^ 0xDEADBEEF) + 32 * v20) ^ (((v20 ^ 0xDEADBEEF) + 32 * v20) >> 11);
      v22 = v19 + 32;
      v23 = v21 & *(_DWORD *)(v19 + 12);
      v24 = *(_QWORD *)(v19 + 32 + 16 * v23);
      if (v24 == *(_QWORD *)v7)
      {
LABEL_19:
        v26 = v5;
        v27 = *(_QWORD *)(v22 + 16 * v23 + 8);
        goto LABEL_21;
      }
      v25 = v21 + 1;
      while (v24 != -1)
      {
        v23 = *(_DWORD *)(v19 + 12) & v25;
        v24 = *(_QWORD *)(v22 + 16 * v23);
        ++v25;
        if (v24 == *(_QWORD *)v7)
          goto LABEL_19;
      }
    }
    v26 = v5;
    v27 = 0;
LABEL_21:
    v28 = 0;
    v29 = 0;
    v30 = v27 + 16;
    do
    {
      v31 = *(_QWORD *)(v30 + 8 * v29);
      if (v31)
      {
        v32 = 0;
        v33 = *(_QWORD *)(v30 + 8 * v29);
        while (1)
        {
          v34 = __clz(__rbit64(v33));
          v35 = v34 + v32;
          v36 = __clz(__rbit64(~(v33 >> v34)));
          v37 = v8 - v36;
          if (v8 <= v36)
          {
            if (a4 < 5)
              goto LABEL_72;
            v43 = v35 + (v29 << 6);
            v44 = 4 * (v43 + v36);
            v45 = (v88 + 4 * v43) & v87;
            if (v44 - v45 >= v6)
              break;
          }
          if (v36 + v35 < 0x40)
          {
            if (v28 <= v36)
              v28 = v36;
            v32 += v36 + v34;
            v33 >>= v36 + v34;
            v46 = v29;
            if (!v33)
              goto LABEL_55;
          }
          else
          {
            v38 = v29 + 1;
            v85 = StatusReg;
            if (v29 + 1 > 0x3F)
              goto LABEL_57;
            v39 = (v88 + (v29 << 8) + 4 * v35) & v87;
            v84 = v6;
            v40 = ~v29;
            v41 = (uint64_t *)(v27 + 24 + 8 * v29);
            if (a4 <= 4)
            {
              do
              {
                v42 = *v41;
                if (*v41 != -1)
                  goto LABEL_46;
                if (v37 < 0x41)
                  goto LABEL_70;
                v37 -= 64;
                --v40;
                ++v41;
              }
              while (v40 != -64);
              v38 = 64;
              v6 = v84;
LABEL_57:
              if (v28 <= ((v38 - v29) << 6) - v35)
                v28 = ((v38 - v29) << 6) - v35;
              StatusReg = v85;
              goto LABEL_60;
            }
            v47 = (v29 << 8) - v39 + 512;
            while (1)
            {
              v42 = *v41;
              if (*v41 != -1)
                break;
              if (v37 > 0x40)
              {
                v37 -= 64;
                v6 = v84;
              }
              else
              {
                v6 = v84;
                if (v47 >= v84)
                {
                  v29 = v39 >> 8;
                  v35 = v39 >> 2;
LABEL_70:
                  v46 = -(uint64_t)v40;
                  v42 = -1;
LABEL_95:
                  v78 = ((_BYTE)v35 + (_BYTE)v9) & 0x3F;
                  v79 = (0xFFFFFFFFFFFFFFFFLL >> -(char)v35) & v31;
                  if (!v35)
                    v79 = 0;
                  *(_QWORD *)(v30 + 8 * v29) = v79;
                  if (v29 + 1 < v46)
                    bzero((void *)(v27 + 8 * v29 + 24), 8 * (v46 + ~v29));
                  *(_QWORD *)(v27 + 528 + 8 * v46) |= 1 << v78;
                  v80 = (-2 << v78) & v42;
                  if (v78 == 63)
                    v80 = 0;
                  *v41 = v80;
                  v65 = *(_WORD *)(v27 + 2);
                  LODWORD(v6) = v84;
                  StatusReg = v85;
                  if (v65)
                    goto LABEL_102;
LABEL_73:
                  v66 = ((8 * *(unsigned __int16 *)(v7 + 8)) | ((unint64_t)*(unsigned __int8 *)(v7 + 10) << 19))
                      + pas_compact_heap_reservation_base;
                  v67 = *(unsigned int *)(v7 + 12);
                  v68 = *(unsigned int *)(v66 + 68);
                  if ((_DWORD)v68)
                    v69 = pas_compact_heap_reservation_base + 8 * v68;
                  else
                    v69 = 0;
                  v70 = *(unsigned int *)(v69 + ((v67 >> 5) & 0x7FFFFFC));
                  v71 = pas_compact_heap_reservation_base + 8 * v70;
                  if (!(_DWORD)v70)
                    v71 = 0;
                  *(_BYTE *)(v71 + (v67 & 0x7F)) = -2;
                  do
                  {
LABEL_86:
                    v75 = *(_QWORD *)(v66 + 8);
                    v76 = *(_QWORD *)v66;
                    if (*(_QWORD *)v66 >= v67)
                      v77 = v67;
                    else
                      v77 = *(_QWORD *)v66;
                  }
                  while (v75 == -1);
                  if ((v75 & 1) != 0)
                  {
                    v72 = v75 + 1;
                  }
                  else
                  {
                    v72 = *(_QWORD *)(v66 + 8);
                    if (v76 <= v67)
                    {
LABEL_92:
                      v65 = 0;
                      goto LABEL_102;
                    }
                  }
                  v73 = __ldxp((unsigned __int128 *)v66);
                  if ((unint64_t)v73 ^ v76 | *((_QWORD *)&v73 + 1) ^ v75)
                  {
                    __clrex();
                  }
                  else if (!__stlxp(__PAIR128__(v72, v77), (unsigned __int128 *)v66))
                  {
                    v74 = 1;
                    goto LABEL_85;
                  }
                  v74 = 0;
LABEL_85:
                  __dmb(0xBu);
                  if (v74)
                    goto LABEL_92;
                  goto LABEL_86;
                }
              }
              --v40;
              ++v41;
              v47 += 256;
              v38 = 64;
              if (v40 == -64)
                goto LABEL_57;
            }
LABEL_46:
            v46 = -(uint64_t)v40;
            v32 = __clz(__rbit64(~v42));
            StatusReg = v85;
            if (v32 >= v37)
            {
              if (a4 < 5)
                goto LABEL_94;
              StatusReg = v85;
              if ((v46 << 8) - v39 + 4 * v32 >= v84)
              {
                v29 = v39 >> 8;
                v35 = v39 >> 2;
LABEL_94:
                v41 = (uint64_t *)(v30 + 8 * v46);
                goto LABEL_95;
              }
            }
            if (v28 <= v32 - v35 + ((v46 - v29) << 6))
              v28 = v32 - v35 + ((v46 - v29) << 6);
            v33 = v42 >> v32;
            v31 = v42;
            v29 = v46;
            v6 = v84;
            if (!v33)
              goto LABEL_55;
          }
        }
        v29 = v45 >> 8;
        LOBYTE(v35) = v45 >> 2;
LABEL_72:
        *(_QWORD *)(v27 + 8 * v29 + 528) |= 1 << (v35 + v9);
        *(_QWORD *)(v30 + 8 * v29) = v31 & ~(v10 << v35);
        v65 = *(_WORD *)(v27 + 2);
        if (!v65)
          goto LABEL_73;
LABEL_102:
        *(_WORD *)(v27 + 2) = v65 + (v6 >> 2);
        v81 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v82 = __ldxr(&v13->_os_unfair_lock_opaque);
          if (v82 != v81)
            break;
          if (!__stlxr(0, &v13->_os_unfair_lock_opaque))
            return 0;
        }
        v63 = 0;
        goto LABEL_107;
      }
      v46 = v29;
LABEL_55:
      v29 = v46 + 1;
    }
    while (v46 + 1 < 0x40);
LABEL_60:
    v5 = v26;
    v48 = v9;
    v49 = v7;
    v50 = v10;
    v51 = v12;
    v52 = pas_bitfit_allocator_finish_failing(v26, v49, v6, a4, 4 * v28, (uint64_t)&unk_1E35BEA68);
    v12 = v51;
    v10 = v50;
    v9 = v48;
    v7 = v52;
    if (v52)
      continue;
LABEL_61:
    v53 = v12;
    v54 = v10;
    v55 = v9;
    v56 = *(_QWORD *)(StatusReg + 752);
    if (v56)
      pas_thread_local_cache_stop_local_allocators_if_necessary(v56, a2, 0);
    first_free_view = pas_bitfit_size_class_get_first_free_view((unint64_t *)*v5, (uint64_t)&unk_1E35BEA68);
    if (!first_free_view)
      return 2;
    v7 = first_free_view;
    v5[1] = first_free_view;
    v9 = v55;
    v10 = v54;
    v12 = v53;
  }
  v62 = *(_DWORD *)(StatusReg + 24);
  v63 = 2;
  while (1)
  {
    v64 = __ldxr(&v13->_os_unfair_lock_opaque);
    if (v64 != v62)
      break;
    if (!__stlxr(0, &v13->_os_unfair_lock_opaque))
      return v63;
  }
LABEL_107:
  __clrex();
  os_unfair_lock_unlock(v13);
  return v63;
}

void jit_small_bitfit_page_config_specialized_page_deallocate_with_page(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  unsigned int *p_os_unfair_lock_opaque;
  unint64_t StatusReg;
  unsigned int v10;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  __int16 v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;

  v4 = a2 & 0x3FFF;
  v5 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v5)
    v6 = (os_unfair_lock_s *)(pas_compact_heap_reservation_base + 8 * v5);
  else
    v6 = 0;
  v7 = (a2 >> 2) & 0xFFF;
  p_os_unfair_lock_opaque = &v6[4]._os_unfair_lock_opaque;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(p_os_unfair_lock_opaque))
  {
    if (!__stxr(v10, p_os_unfair_lock_opaque))
    {
      if ((a2 & 0x3FFF) == 0)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
  __clrex();
  os_unfair_lock_lock(v6 + 4);
  if (!v4)
    goto LABEL_12;
LABEL_10:
  v12 = a1 + 4 * ((unint64_t)(v7 - 1) >> 5);
  v13 = 1 << (v7 - 1);
  if ((*(_DWORD *)(v12 + 16) & v13) == 0 && (*(_DWORD *)(v12 + 528) & v13) == 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 4u, a2, v4, (uint64_t)"previous bit is not free or end of object");
LABEL_12:
  v14 = a1 + 16;
  if (((*(_DWORD *)(a1 + 16 + ((v4 >> 5) & 0x1FC)) >> (v4 >> 2)) & 1) != 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 4u, a2, v4, (uint64_t)"free bit set");
  v15 = v4 >> 8;
  v16 = v4 >> 2;
  v17 = *(_QWORD *)(a1 + 528 + 8 * (v4 >> 8));
  if (v17 >> v16)
  {
    v18 = __clz(__rbit64(v17 >> v16));
    v19 = v18 + 1;
    if (v18 == 63)
      v20 = -1;
    else
      v20 = ~(-2 << v18);
    v21 = 8 * v15;
    *(_QWORD *)(v14 + v21) |= v20 << v16;
    *(_QWORD *)(a1 + 528 + v21) = v17 & ~(1 << (v18 + v7));
    if (!*(_BYTE *)(a1 + 1))
    {
LABEL_35:
      pas_bitfit_view_note_max_free((uint64_t)v6);
      *(_BYTE *)(a1 + 1) = 1;
      v33 = *(unsigned __int16 *)(a1 + 2);
      *(_WORD *)(a1 + 2) = v33 - v19;
      if (v33 != v19)
        goto LABEL_29;
      goto LABEL_28;
    }
  }
  else
  {
    v22 = 0;
    v23 = v16 - 1;
    v24 = v15 - 1;
    v25 = 8 * v15;
    do
    {
      if (v25 + v22 == 504)
        pas_bitfit_page_deallocation_did_fail((const void *)a1, 4u, a2, v4, (uint64_t)"object falls off end of page");
      v26 = *(_QWORD *)(a1 + 8 * v15 + v22 + 536);
      v22 += 8;
      v23 -= 64;
      ++v24;
    }
    while (!v26);
    v27 = a1 + v25 + v22;
    v28 = __clz(__rbit64(v26));
    v19 = v28 - v23;
    if (v28 == 63)
      v29 = -1;
    else
      v29 = ~(-2 << v28);
    *(_QWORD *)(v27 + 16) |= v29;
    *(_QWORD *)(v27 + 528) = v26 & ~(1 << v28);
    *(_QWORD *)(v14 + 8 * v15) |= -1 << v16;
    if (v15 < v24)
    {
      memset((void *)(a1 + 8 * v15 + 24), 255, v22 - 8);
      if (!*(_BYTE *)(a1 + 1))
        goto LABEL_35;
    }
    else if (!*(_BYTE *)(a1 + 1))
    {
      goto LABEL_35;
    }
  }
  v30 = *(unsigned __int16 *)(a1 + 2);
  *(_WORD *)(a1 + 2) = v30 - v19;
  if (v30 == v19)
LABEL_28:
    pas_bitfit_view_note_full_emptiness((uint64_t)v6, a1);
LABEL_29:
  v31 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v32 = __ldxr(p_os_unfair_lock_opaque);
    if (v32 != v31)
      break;
    if (!__stlxr(0, p_os_unfair_lock_opaque))
      return;
  }
  __clrex();
  os_unfair_lock_unlock(v6 + 4);
}

unint64_t jit_small_bitfit_page_config_specialized_page_get_allocation_size_with_page(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a1 + 8 * ((a2 >> 8) & 0x3F);
  v3 = *(_QWORD *)(v2 + 528) >> (a2 >> 2);
  if (v3)
    return 4 * __clz(__rbit64(v3)) + 4;
  v5 = -(uint64_t)(a2 >> 2);
  v6 = (unint64_t *)(v2 + 536);
  do
  {
    v8 = *v6++;
    v7 = v8;
    v5 += 64;
  }
  while (!v8);
  return 4 * (__clz(__rbit64(v7)) + v5) + 4;
}

void jit_small_bitfit_page_config_specialized_page_shrink_with_page(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  unint64_t v13;
  __int16 v14;
  uint64_t v15;
  unsigned int *p_os_unfair_lock_opaque;
  unint64_t StatusReg;
  unsigned int v18;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;

  v10 = a2 & 0x3FFF;
  v11 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v11)
    v12 = (os_unfair_lock_s *)(pas_compact_heap_reservation_base + 8 * v11);
  else
    v12 = 0;
  if (a3)
    v13 = (unint64_t)(a3 + 3) >> 2;
  else
    v13 = 1;
  v14 = v13;
  v15 = (a2 >> 2) & 0xFFF;
  p_os_unfair_lock_opaque = &v12[4]._os_unfair_lock_opaque;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(p_os_unfair_lock_opaque))
  {
    if (!__stxr(v18, p_os_unfair_lock_opaque))
    {
      if ((a2 & 0x3FFF) == 0)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  __clrex();
  os_unfair_lock_lock(v12 + 4);
  if (!v10)
    goto LABEL_15;
LABEL_13:
  v20 = a1 + 4 * ((unint64_t)(v15 - 1) >> 5);
  v21 = 1 << (v15 - 1);
  if ((*(_DWORD *)(v20 + 16) & v21) == 0 && (*(_DWORD *)(v20 + 528) & v21) == 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 4u, a2, v10, (uint64_t)"previous bit is not free or end of object");
LABEL_15:
  v22 = a1 + 16;
  if (((*(_DWORD *)(a1 + 16 + ((v10 >> 5) & 0x1FC)) >> (v10 >> 2)) & 1) != 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 4u, a2, v10, (uint64_t)"free bit set");
  v23 = v10 >> 8;
  v24 = v10 >> 2;
  v25 = a1 + 528;
  v26 = *(_QWORD *)(a1 + 528 + 8 * (v10 >> 8));
  v27 = v26 >> v24;
  if (!(v26 >> v24))
  {
    v33 = 8 * v23;
    v34 = -(uint64_t)v23;
    v35 = (v23 << 6) - 4032;
    do
    {
      if (!(v35 + v27))
        pas_bitfit_page_deallocation_did_fail((const void *)a1, 4u, a2, v10, (uint64_t)"object falls off end of page");
      v36 = *(_QWORD *)(a1 + v33 + 536);
      v33 += 8;
      v27 += 64;
      --v34;
    }
    while (!v36);
    v37 = __clz(__rbit64(v36));
    v38 = v37 - v24 + v27 + 1;
    if (v13 <= v38)
    {
      if (v37 - (v13 + v24) + v27 == -1)
        goto LABEL_39;
      v39 = a1 + v33;
      v40 = (v13 + v15) >> 6;
      v41 = (v13 + v15) & 0x3F;
      *(_DWORD *)(v25 + (((v13 + v15 - 1) >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << (v13 + v15 - 1);
      v42 = *(_QWORD *)(a1 + v33 + 528);
      if (v40 + v34)
      {
        if (v37 == 63)
          v45 = -1;
        else
          v45 = ~(-2 << v37);
        *(_QWORD *)(a1 + v33 + 16) |= v45;
        *(_QWORD *)(v39 + 528) = v42 & ~(1 << v37);
        *(_QWORD *)(v22 + 8 * v40) |= -1 << v41;
        v14 = v38;
        if (v40 >= ~v34)
          goto LABEL_39;
        memset((void *)(8 * v40 + a1 + 24), 255, v33 - 8 * v40 - 8);
      }
      else
      {
        v43 = v37 - (v13 + v24) + v27;
        if (v43 == 63)
          v44 = -1;
        else
          v44 = ~(-1 << (v43 + 1));
        *(_QWORD *)(a1 + v33 + 16) |= v44 << v41;
        *(_QWORD *)(v39 + 528) = v42 & ~(1 << v37);
      }
      v14 = v38;
      goto LABEL_39;
    }
LABEL_51:
    pas_deallocation_did_fail((uint64_t)"attempt to shrink to a larger size", a2, a3, a4, a5, a6, a7, a8);
  }
  v28 = __clz(__rbit64(v27));
  v29 = v28 + 1 - v13;
  if (v28 + 1 < v13)
    goto LABEL_51;
  if (v28 + 1 != v13)
  {
    if (v29 == 64)
      v30 = -1;
    else
      v30 = ~(-1 << v29);
    v31 = v13 + v24;
    v32 = 8 * v23;
    *(_QWORD *)(v22 + v32) |= v30 << v31;
    *(_QWORD *)(v25 + v32) = v26 & ~(1 << (v28 + v15)) | (1 << (v31 - 1));
    v14 = v28 + 1;
  }
LABEL_39:
  v46 = v14 - v13;
  if (!*(_BYTE *)(a1 + 1))
  {
    pas_bitfit_view_note_max_free((uint64_t)v12);
    *(_BYTE *)(a1 + 1) = 1;
    v50 = *(unsigned __int16 *)(a1 + 2);
    *(_WORD *)(a1 + 2) = v50 - v46;
    if (v50 != v46)
      goto LABEL_42;
    goto LABEL_41;
  }
  v47 = *(unsigned __int16 *)(a1 + 2);
  *(_WORD *)(a1 + 2) = v47 - v46;
  if (v47 == v46)
LABEL_41:
    pas_bitfit_view_note_full_emptiness((uint64_t)v12, a1);
LABEL_42:
  v48 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v49 = __ldxr(p_os_unfair_lock_opaque);
    if (v49 != v48)
      break;
    if (!__stlxr(0, p_os_unfair_lock_opaque))
      return;
  }
  __clrex();
  os_unfair_lock_unlock(v12 + 4);
}

uint64_t jit_medium_page_header_for_boundary(unint64_t a1)
{
  int v1;
  unsigned int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if (off_1EE342918)
  {
    v1 = (a1 >> 17) ^ ((a1 >> 17) >> 4);
    v2 = ((v1 ^ 0xDEADBEEF) + 32 * v1) ^ (((v1 ^ 0xDEADBEEF) + 32 * v1) >> 11);
    v3 = (char *)off_1EE342918 + 32;
    v4 = *((_DWORD *)off_1EE342918 + 3) & v2;
    v5 = *((_QWORD *)off_1EE342918 + 2 * v4 + 4);
    if (v5 == a1)
      return *(_QWORD *)&v3[16 * v4 + 8];
    v6 = v2 + 1;
    while (v5 != -1)
    {
      v4 = *((_DWORD *)off_1EE342918 + 3) & v6;
      v5 = *(_QWORD *)&v3[16 * v4];
      ++v6;
      if (v5 == a1)
        return *(_QWORD *)&v3[16 * v4 + 8];
    }
  }
  return 0;
}

uint64_t jit_medium_boundary_for_page_header(uint64_t a1)
{
  return *(_QWORD *)(a1 - 16);
}

_QWORD *jit_medium_bitfit_create_page_header(unint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;
  int v10;
  unsigned int v11;

  if (!a3)
  {
    v5 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v5, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_7;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
  }
LABEL_7:
  v7 = (_QWORD *)pas_utility_heap_try_allocate_with_alignment(168, 0x10uLL, (uint64_t)"pas_page_header_table/header");
  *v7 = a1;
  v8 = v7 + 2;
  pas_lock_free_read_ptr_ptr_hashtable_set(&off_1EE342918, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x20000, a1, (unint64_t)(v7 + 2));
  if (a3)
    return v8;
  v10 = *(_DWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 24);
  while (1)
  {
    v11 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v11 != v10)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      return v8;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
  return v8;
}

void jit_medium_destroy_page_header(uint64_t a1, int a2)
{
  unint64_t StatusReg;
  unsigned int v4;
  int v6;
  unsigned int v7;

  if (a2)
  {
    pas_lock_free_read_ptr_ptr_hashtable_set(&off_1EE342918, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x20000, *(_QWORD *)(a1 - 16), 0);
    pas_utility_heap_deallocate(a1 - 16);
  }
  else
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v4 = *(_DWORD *)(StatusReg + 24);
    while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
    {
      if (!__stxr(v4, &pas_heap_lock._os_unfair_lock_opaque))
        goto LABEL_8;
    }
    __clrex();
    os_unfair_lock_lock(&pas_heap_lock);
LABEL_8:
    pas_lock_free_read_ptr_ptr_hashtable_set(&off_1EE342918, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x20000, *(_QWORD *)(a1 - 16), 0);
    pas_utility_heap_deallocate(a1 - 16);
    v6 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v7 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
      if (v7 != v6)
        break;
      if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
        return;
    }
    __clrex();
    os_unfair_lock_unlock(&pas_heap_lock);
  }
}

unint64_t jit_medium_bitfit_allocate_page()
{
  int64x2_t v1;
  double (*v2)@<D0>(uint64_t@<X8>);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  os_unfair_lock_assert_owner(&pas_heap_lock);
  v1 = vdupq_n_s64(1uLL);
  v2 = fresh_memory_aligned_allocator;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  return try_allocate_without_fixing(jit_fresh_memory_heap, 0x20000uLL, 0x20000uLL, 0, (unint64_t *)&v1);
}

uint64_t jit_medium_bitfit_page_config_specialized_allocator_try_allocate(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t StatusReg;
  _QWORD *v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  unint64_t v13;
  os_unfair_lock *v14;
  os_unfair_lock_s *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  _BOOL4 v25;
  BOOL v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v35;
  int v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _BYTE *j;
  int v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int8x16_t *v88;
  unint64_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  uint8x16_t v96;
  uint16x8_t v97;
  uint16x8_t v98;
  uint8x16_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  int32x4_t v102;
  int32x4_t v103;
  unint64_t v104;
  int8x8_t *v105;
  int8x8_t v106;
  uint16x8_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  int8x16_t *v113;
  unint64_t v114;
  int8x16_t v115;
  unint64_t v116;
  int8x8_t *v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  __int16 v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unsigned __int128 v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  _BYTE *i;
  int v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int8x16_t *v154;
  unint64_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  uint8x16_t v162;
  uint16x8_t v163;
  uint16x8_t v164;
  uint8x16_t v165;
  uint16x8_t v166;
  uint16x8_t v167;
  int32x4_t v168;
  int32x4_t v169;
  unint64_t v170;
  int8x8_t *v171;
  int8x8_t v172;
  uint16x8_t v173;
  uint64_t v174;
  unsigned __int8 *v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  int8x16_t *v179;
  unint64_t v180;
  int8x16_t v181;
  unint64_t v182;
  int8x8_t *v183;
  uint64_t v184;
  _BYTE *v185;
  unint64_t v186;
  void *v187;
  size_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __int16 v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unsigned __int128 v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t first_free_view;
  int v209;
  unsigned int v210;
  uint64_t v211;
  int v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v235;
  _QWORD v236[131];
  unint64_t v237;

  v4 = a1;
  v5 = 256;
  if (a3)
    v5 = (a3 + 255) & 0xFFFFFFFFFFFFFF00;
  v6 = a1[1];
  v235 = v5 >> 8;
  v222 = -(uint64_t)a4;
  v223 = a4 - 1;
  v226 = v5;
  v227 = v5 - 1;
  if (v5 == 0x4000)
    v7 = -1;
  else
    v7 = ~(-1 << SBYTE1(v5));
  v224 = v7;
  v225 = (v5 >> 8) + 63;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v9 = (_QWORD *)&unk_1ECF57000;
  v10.i64[0] = 0x101010101010101;
  v10.i64[1] = 0x101010101010101;
  v11.i64[0] = -1;
  v11.i64[1] = -1;
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v232 = StatusReg;
  if (!v6)
    goto LABEL_259;
LABEL_7:
  v13 = 0;
  v14 = (os_unfair_lock *)(v6 + 20);
  v15 = (os_unfair_lock_s *)(v6 + 16);
  v233 = v6;
LABEL_9:
  if (!v13)
    goto LABEL_51;
  if (!pas_physical_page_sharing_pool_balancing_enabled)
    goto LABEL_46;
  v16 = v13 << 14;
  do
  {
    while (1)
    {
      v19 = v9[367];
      if ((v19 & 0x8000000000000000) != 0 || v19 < v16)
        break;
      v20 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v20 != v19)
      {
        __clrex();
LABEL_24:
        v21 = 0;
        goto LABEL_25;
      }
      if (__stlxr(v19 - v16, (unint64_t *)&pas_physical_page_sharing_pool_balance))
        goto LABEL_24;
      v21 = 1;
LABEL_25:
      __dmb(0xBu);
      if (v21)
        goto LABEL_46;
    }
    v17 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
    if (v17 == v19)
    {
      if (!__stlxr(0, (unint64_t *)&pas_physical_page_sharing_pool_balance))
      {
        v18 = 1;
        goto LABEL_17;
      }
    }
    else
    {
      __clrex();
    }
    v18 = 0;
LABEL_17:
    __dmb(0xBu);
  }
  while (!v18);
  v22 = v16 - v19;
  if (v16 != v19)
  {
    bzero(v236, 0x440uLL);
    while (1)
    {
      v23 = v237;
      if (v237 >= v22)
        break;
      v24 = pas_page_sharing_pool_take_least_recently_used((uint64_t)pas_physical_page_sharing_pool, v236, 0, 0);
      if (v24 != 3)
      {
        v23 = v237;
        v25 = v24 != 2;
        goto LABEL_33;
      }
    }
    v25 = 1;
LABEL_33:
    v26 = v23 >= v22;
    v27 = v23 - v22;
    v28 = !v26;
    if ((v25 & v28) != 0)
      v29 = 0;
    else
      v29 = v27;
    decommit_all((uint64_t)v236, 1);
    pas_bootstrap_free_heap_hold_lock_and_deallocate_for_config(v236[129], 32 * v236[130], 0);
    v10.i64[0] = 0x101010101010101;
    v10.i64[1] = 0x101010101010101;
    v11.i64[0] = -1;
    v11.i64[1] = -1;
    v12.i64[0] = 0x100000001;
    v12.i64[1] = 0x100000001;
    while (2)
    {
      v30 = pas_physical_page_sharing_pool_balance;
      v31 = __ldxr((unint64_t *)&pas_physical_page_sharing_pool_balance);
      if (v31 == v30)
      {
        if (!__stlxr(pas_physical_page_sharing_pool_balance + v29, (unint64_t *)&pas_physical_page_sharing_pool_balance))
        {
          v32 = 1;
          goto LABEL_45;
        }
      }
      else
      {
        __clrex();
      }
      v32 = 0;
LABEL_45:
      __dmb(0xBu);
      if (v32)
        break;
      continue;
    }
  }
LABEL_46:
  v33 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&v14->_os_unfair_lock_opaque))
  {
    if (!__stxr(v33, &v14->_os_unfair_lock_opaque))
      goto LABEL_51;
  }
  __clrex();
  os_unfair_lock_lock(v14);
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v11.i64[0] = -1;
  v11.i64[1] = -1;
  v10.i64[0] = 0x101010101010101;
  v10.i64[1] = 0x101010101010101;
LABEL_51:
  v35 = *(_DWORD *)(StatusReg + 24);
  while (2)
  {
    if (__ldaxr(&v15->_os_unfair_lock_opaque))
    {
      __clrex();
      os_unfair_lock_lock(v15);
      v12.i64[0] = 0x100000001;
      v12.i64[1] = 0x100000001;
      v11.i64[0] = -1;
      v11.i64[1] = -1;
      v10.i64[0] = 0x101010101010101;
      v10.i64[1] = 0x101010101010101;
      if (!*(_BYTE *)(v6 + 11))
        goto LABEL_104;
      goto LABEL_57;
    }
    if (__stxr(v35, &v15->_os_unfair_lock_opaque))
      continue;
    break;
  }
  if (*(_BYTE *)(v6 + 11))
  {
LABEL_57:
    if (off_1EE342918)
    {
      v37 = (*(_QWORD *)v6 >> 17) ^ ((*(_QWORD *)v6 >> 17) >> 4);
      v38 = ((v37 ^ 0xDEADBEEF) + 32 * v37) ^ (((v37 ^ 0xDEADBEEF) + 32 * v37) >> 11);
      v39 = (char *)off_1EE342918 + 32;
      v40 = v38 & *((_DWORD *)off_1EE342918 + 3);
      v41 = *((_QWORD *)off_1EE342918 + 2 * v40 + 4);
      if (v41 == *(_QWORD *)v6)
      {
LABEL_62:
        v43 = *(_QWORD *)&v39[16 * v40 + 8];
        goto LABEL_64;
      }
      v42 = v38 + 1;
      while (v41 != -1)
      {
        v40 = *((_DWORD *)off_1EE342918 + 3) & v42;
        v41 = *(_QWORD *)&v39[16 * v40];
        ++v42;
        if (v41 == *(_QWORD *)v6)
          goto LABEL_62;
      }
    }
    v43 = 0;
LABEL_64:
    v44 = 0;
    v45 = 0;
    v46 = v43 + 16;
    v47 = v43 + 80;
    v48 = v43 + 24;
    while (1)
    {
      v49 = *(_QWORD *)(v46 + 8 * v45);
      if (v49)
        break;
      v64 = v45;
LABEL_99:
      v45 = v64 + 1;
      if (v64 + 1 >= 8)
      {
        v66 = 0;
        goto LABEL_103;
      }
    }
    v50 = 0;
    v51 = *(_QWORD *)(v46 + 8 * v45);
    while (1)
    {
      v52 = __clz(__rbit64(v51));
      v53 = v52 + v50;
      v54 = __clz(__rbit64(~(v51 >> v52)));
      v55 = v235 - v54;
      if (v235 <= v54)
      {
        if (a4 < 0x101)
          goto LABEL_107;
        v61 = v53 + (v45 << 6);
        v62 = (v61 + v54) << 8;
        v63 = (v223 + (v61 << 8)) & v222;
        if (v62 - v63 >= v226)
          break;
      }
      if (v54 + v53 < 0x40)
      {
        if (v44 <= v54)
          v44 = v54;
        v50 += v54 + v52;
        v51 >>= v54 + v52;
        v64 = v45;
        if (!v51)
          goto LABEL_99;
      }
      else
      {
        v56 = v45 + 1;
        if (v45 + 1 > 7)
          goto LABEL_101;
        v57 = (v223 + (v45 << 14) + (v53 << 8)) & v222;
        if (a4 <= 0x100)
        {
          v58 = ~v45;
          v59 = (uint64_t *)(v48 + 8 * v45);
          do
          {
            v60 = *v59;
            if (*v59 != -1)
              goto LABEL_90;
            if (v55 < 0x41)
              goto LABEL_106;
            v55 -= 64;
            --v58;
            ++v59;
          }
          while (v58 != -8);
          v56 = 8;
LABEL_101:
          v66 = 0;
          if (v44 <= ((v56 - v45) << 6) - v53)
            v44 = ((v56 - v45) << 6) - v53;
LABEL_103:
          v67 = v44 << 8;
          goto LABEL_136;
        }
        v58 = ~v45;
        v59 = (uint64_t *)(v48 + 8 * v45);
        v65 = (v45 << 14) - v57 + 0x8000;
        while (1)
        {
          v60 = *v59;
          if (*v59 != -1)
            break;
          if (v55 > 0x40)
          {
            v55 -= 64;
          }
          else if (v65 >= v226)
          {
            v45 = v57 >> 14;
            v53 = (v57 >> 8) & 0x3F;
LABEL_106:
            v64 = -(uint64_t)v58;
            v60 = -1;
LABEL_185:
            v138 = (v45 << 14) + (v53 << 8);
            v139 = v138 >> 14;
            v231 = v138;
            v140 = (v138 + v227) >> 14;
            if (v13)
            {
              v220 = v49;
              v221 = v53;
              v229 = v13;
              v141 = v43 + 16;
              v142 = v43;
              v143 = v64;
              v219 = (v138 + v227) >> 14;
              v144 = v138 >> 14;
              os_unfair_lock_assert_owner(v14);
              v64 = v143;
              v43 = v142;
              v49 = v220;
              v46 = v141;
              v145 = v219 - v144;
              if (v219 >= v144)
              {
                for (i = (_BYTE *)(v142 + v144 + 144); ; ++i)
                {
                  v147 = *i;
                  if (v147 == 255)
                  {
                    *i = 1;
                    if (!v145)
                      break;
                  }
                  else
                  {
                    *i = v147 + 1;
                    if (!v145)
                      break;
                  }
                  --v145;
                }
              }
              v10.i64[0] = 0x101010101010101;
              v10.i64[1] = 0x101010101010101;
              v11.i64[0] = -1;
              v11.i64[1] = -1;
              v12.i64[0] = 0x100000001;
              v12.i64[1] = 0x100000001;
              v13 = v229;
              v53 = v221;
LABEL_227:
              v186 = (0xFFFFFFFFFFFFFFFFLL >> (64 - v53)) & v49;
              if (!v53)
                v186 = 0;
              *(_QWORD *)(v46 + 8 * v45) = v186;
              if (v45 + 1 < v64)
              {
                v187 = (void *)(v43 + 8 * v45 + 24);
                v188 = 8 * (v64 + ~v45);
                v189 = v43;
                v190 = v64;
                bzero(v187, v188);
                v64 = v190;
                v43 = v189;
                v12.i64[0] = 0x100000001;
                v12.i64[1] = 0x100000001;
                v11.i64[0] = -1;
                v11.i64[1] = -1;
                v10.i64[0] = 0x101010101010101;
                v10.i64[1] = 0x101010101010101;
              }
              v191 = ((_BYTE)v53 + (_BYTE)v225) & 0x3F;
              *(_QWORD *)(v47 + 8 * v64) |= 1 << v191;
              if (v191 == 63)
                v192 = 0;
              else
                v192 = (-2 << v191) & v60;
              *v59 = v192;
              v193 = *(_WORD *)(v43 + 2);
              StatusReg = v232;
              v6 = v233;
              v9 = (_QWORD *)&unk_1ECF57000;
              if (v193)
              {
LABEL_235:
                *(_WORD *)(v43 + 2) = v193 + (v226 >> 8);
                v67 = v231 + *(_QWORD *)(v43 - 16);
                v66 = 1;
                if (!v13)
                  goto LABEL_159;
                goto LABEL_154;
              }
              v194 = ((8 * *(unsigned __int16 *)(v233 + 8)) | ((unint64_t)*(unsigned __int8 *)(v233 + 10) << 19))
                   + pas_compact_heap_reservation_base;
              v195 = *(unsigned int *)(v233 + 12);
              v196 = *(unsigned int *)(v194 + 68);
              if ((_DWORD)v196)
                v197 = pas_compact_heap_reservation_base + 8 * v196;
              else
                v197 = 0;
              v198 = *(unsigned int *)(v197 + ((v195 >> 5) & 0x7FFFFFC));
              v199 = pas_compact_heap_reservation_base + 8 * v198;
              if (!(_DWORD)v198)
                v199 = 0;
              *(_BYTE *)(v199 + (v195 & 0x7F)) = -2;
              do
              {
LABEL_250:
                v203 = *(_QWORD *)(v194 + 8);
                v204 = *(_QWORD *)v194;
                if (*(_QWORD *)v194 >= v195)
                  v205 = v195;
                else
                  v205 = *(_QWORD *)v194;
              }
              while (v203 == -1);
              if ((v203 & 1) != 0)
              {
                v200 = v203 + 1;
              }
              else
              {
                v200 = *(_QWORD *)(v194 + 8);
                if (v204 <= v195)
                  goto LABEL_235;
              }
              v201 = __ldxp((unsigned __int128 *)v194);
              if ((unint64_t)v201 ^ v204 | *((_QWORD *)&v201 + 1) ^ v203)
              {
                __clrex();
              }
              else if (!__stlxp(__PAIR128__(v200, v205), (unsigned __int128 *)v194))
              {
                v202 = 1;
                goto LABEL_249;
              }
              v202 = 0;
LABEL_249:
              __dmb(0xBu);
              if (v202)
                goto LABEL_235;
              goto LABEL_250;
            }
            v148 = v140 - v139;
            if (v140 < v139)
              goto LABEL_227;
            v149 = v148 + 1;
            if (v148 + 1 >= 8)
            {
              if (v149 >= 0x20)
              {
                v152 = 0uLL;
                v151 = v149 & 0xFFFFFFFFFFFFFFE0;
                v153 = 0uLL;
                v154 = (int8x16_t *)(v43 + v139 + 160);
                v155 = v149 & 0xFFFFFFFFFFFFFFE0;
                v156 = 0uLL;
                v157 = 0uLL;
                v158 = 0uLL;
                v159 = 0uLL;
                v160 = 0uLL;
                v161 = 0uLL;
                do
                {
                  v162 = (uint8x16_t)vceqq_s8(v154[-1], v11);
                  v163 = vmovl_u8(*(uint8x8_t *)v162.i8);
                  v164 = vmovl_high_u8(v162);
                  v165 = (uint8x16_t)vceqq_s8(*v154, v11);
                  v166 = vmovl_u8(*(uint8x8_t *)v165.i8);
                  v167 = vmovl_high_u8(v165);
                  v157 = vaddq_s32(v157, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v164), v12));
                  v156 = vaddq_s32(v156, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v164.i8), v12));
                  v153 = vaddq_s32(v153, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v163), v12));
                  v152 = vaddq_s32(v152, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v163.i8), v12));
                  v161 = vaddq_s32(v161, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v167), v12));
                  v160 = vaddq_s32(v160, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v167.i8), v12));
                  v159 = vaddq_s32(v159, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v166), v12));
                  v158 = vaddq_s32(v158, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v166.i8), v12));
                  v154 += 2;
                  v155 -= 32;
                }
                while (v155);
                v83 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v158, v152), vaddq_s32(v160, v156)), vaddq_s32(vaddq_s32(v159, v153), vaddq_s32(v161, v157))));
                if (v149 == v151)
                  goto LABEL_212;
                if ((v149 & 0x18) == 0)
                {
                  v150 = v139 + v151;
                  goto LABEL_207;
                }
              }
              else
              {
                LODWORD(v83) = 0;
                v151 = 0;
              }
              v150 = v139 + (v149 & 0xFFFFFFFFFFFFFFF8);
              v168 = 0uLL;
              v169 = (int32x4_t)v83;
              v170 = v151 - (v149 & 0xFFFFFFFFFFFFFFF8);
              v171 = (int8x8_t *)(v43 + v151 + v139 + 144);
              do
              {
                v172 = *v171++;
                v173 = vmovl_u8((uint8x8_t)vceq_s8(v172, (int8x8_t)-1));
                v168 = vaddq_s32(v168, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v173), v12));
                v169 = vaddq_s32(v169, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v173.i8), v12));
                v170 += 8;
              }
              while (v170);
              v83 = vaddvq_s32(vaddq_s32(v169, v168));
              if (v149 != (v149 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_207;
            }
            else
            {
              LODWORD(v83) = 0;
              v150 = v139;
LABEL_207:
              v174 = v140 - v150 + 1;
              v175 = (unsigned __int8 *)(v43 + v150 + 144);
              do
              {
                v176 = *v175++;
                if (v176 == 255)
                  v83 = (v83 + 1);
                else
                  v83 = v83;
                --v174;
              }
              while (v174);
            }
LABEL_212:
            if (!(_DWORD)v83)
            {
              v177 = v148 + 1;
              if (v177 >= 8)
              {
                if (v177 < 0x20)
                {
                  v178 = 0;
                  goto LABEL_220;
                }
                v178 = v177 & 0xFFFFFFFFFFFFFFE0;
                v179 = (int8x16_t *)(v43 + v139 + 160);
                v180 = v177 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v181 = vaddq_s8(*v179, v10);
                  v179[-1] = vaddq_s8(v179[-1], v10);
                  *v179 = v181;
                  v179 += 2;
                  v180 -= 32;
                }
                while (v180);
                if (v177 == v178)
                  goto LABEL_227;
                if ((v177 & 0x18) != 0)
                {
LABEL_220:
                  v182 = v178 - (v177 & 0xFFFFFFFFFFFFFFF8);
                  v183 = (int8x8_t *)(v43 + v178 + v139 + 144);
                  do
                  {
                    *v183 = vadd_s8(*v183, (int8x8_t)0x101010101010101);
                    ++v183;
                    v182 += 8;
                  }
                  while (v182);
                  v139 += v177 & 0xFFFFFFFFFFFFFFF8;
                  if (v177 == (v177 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_227;
                }
                else
                {
                  v139 += v178;
                }
              }
              v184 = v140 - v139 + 1;
              v185 = (_BYTE *)(v43 + v139 + 144);
              do
              {
                ++*v185++;
                --v184;
              }
              while (v184);
              goto LABEL_227;
            }
LABEL_135:
            v67 = 0;
            v66 = v83 << 32;
LABEL_136:
            StatusReg = v232;
            v6 = v233;
            v9 = (_QWORD *)&unk_1ECF57000;
            if (!v13)
              goto LABEL_159;
LABEL_154:
            v122 = *(_DWORD *)(StatusReg + 24);
            while (1)
            {
              v123 = __ldxr(&v14->_os_unfair_lock_opaque);
              if (v123 != v122)
                break;
              if (!__stlxr(0, &v14->_os_unfair_lock_opaque))
                goto LABEL_159;
            }
            __clrex();
            os_unfair_lock_unlock(v14);
            v12.i64[0] = 0x100000001;
            v12.i64[1] = 0x100000001;
            v11.i64[0] = -1;
            v11.i64[1] = -1;
            v10.i64[0] = 0x101010101010101;
            v10.i64[1] = 0x101010101010101;
LABEL_159:
            v13 = HIDWORD(v66);
            if (HIDWORD(v66))
            {
              v124 = *(_DWORD *)(StatusReg + 24);
              while (1)
              {
                v125 = __ldxr(&v15->_os_unfair_lock_opaque);
                if (v125 != v124)
                  break;
                if (!__stlxr(0, &v15->_os_unfair_lock_opaque))
                  goto LABEL_9;
              }
              __clrex();
              os_unfair_lock_unlock(v15);
              v12.i64[0] = 0x100000001;
              v12.i64[1] = 0x100000001;
              v11.i64[0] = -1;
              v11.i64[1] = -1;
              v10.i64[0] = 0x101010101010101;
              v10.i64[1] = 0x101010101010101;
              goto LABEL_9;
            }
            if ((v66 & 1) != 0)
            {
              v209 = *(_DWORD *)(StatusReg + 24);
              while (1)
              {
                v210 = __ldxr(&v15->_os_unfair_lock_opaque);
                if (v210 != v209)
                  break;
                if (!__stlxr(0, &v15->_os_unfair_lock_opaque))
                  return 0;
              }
              v211 = 0;
              v14 = v15;
LABEL_268:
              __clrex();
              os_unfair_lock_unlock(v14);
              return v211;
            }
            v4 = a1;
            v206 = pas_bitfit_allocator_finish_failing(a1, v6, v226, a4, v67, (uint64_t)&unk_1E35BEB08);
            v12.i64[0] = 0x100000001;
            v12.i64[1] = 0x100000001;
            v11.i64[0] = -1;
            v11.i64[1] = -1;
            v10.i64[0] = 0x101010101010101;
            v10.i64[1] = 0x101010101010101;
            v6 = v206;
            if (!v206)
            {
LABEL_259:
              v207 = *(_QWORD *)(StatusReg + 752);
              if (v207)
                pas_thread_local_cache_stop_local_allocators_if_necessary(v207, a2, 0);
              first_free_view = pas_bitfit_size_class_get_first_free_view((unint64_t *)*v4, (uint64_t)&unk_1E35BEB08);
              if (!first_free_view)
                return 2;
              v6 = first_free_view;
              v4[1] = first_free_view;
              v10.i64[0] = 0x101010101010101;
              v10.i64[1] = 0x101010101010101;
              v11.i64[0] = -1;
              v11.i64[1] = -1;
              v12.i64[0] = 0x100000001;
              v12.i64[1] = 0x100000001;
            }
            goto LABEL_7;
          }
          --v58;
          ++v59;
          v65 += 0x4000;
          v56 = 8;
          if (v58 == -8)
            goto LABEL_101;
        }
LABEL_90:
        v64 = -(uint64_t)v58;
        v50 = __clz(__rbit64(~v60));
        if (v50 >= v55)
        {
          if (a4 < 0x101)
            goto LABEL_184;
          if ((v64 << 14) - v57 + (v50 << 8) >= v226)
          {
            v45 = v57 >> 14;
            v53 = (v57 >> 8) & 0x3F;
LABEL_184:
            v59 = (uint64_t *)(v46 + 8 * v64);
            goto LABEL_185;
          }
        }
        if (v44 <= v50 - v53 + ((v64 - v45) << 6))
          v44 = v50 - v53 + ((v64 - v45) << 6);
        v51 = v60 >> v50;
        v49 = v60;
        v45 = v64;
        if (!(v60 >> v50))
          goto LABEL_99;
      }
    }
    v45 = v63 >> 14;
    v53 = (v63 >> 8) & 0x3F;
LABEL_107:
    v69 = (v45 << 14) + (v53 << 8);
    v70 = v69 >> 14;
    v71 = (v69 + v227) >> 14;
    if (v13)
    {
      v228 = (v45 << 14) + (v53 << 8);
      v230 = v45;
      v72 = v53;
      v73 = v13;
      v74 = v43 + 16;
      v75 = v49;
      v76 = v43;
      v77 = (v69 + v227) >> 14;
      os_unfair_lock_assert_owner(v14);
      v43 = v76;
      v49 = v75;
      v46 = v74;
      v78 = v77 - v70;
      if (v77 >= v70)
      {
        for (j = (_BYTE *)(v76 + v70 + 144); ; ++j)
        {
          v80 = *j;
          if (v80 == 255)
          {
            *j = 1;
            if (!v78)
              break;
          }
          else
          {
            *j = v80 + 1;
            if (!v78)
              break;
          }
          --v78;
        }
      }
      v10.i64[0] = 0x101010101010101;
      v10.i64[1] = 0x101010101010101;
      v11.i64[0] = -1;
      v11.i64[1] = -1;
      v12.i64[0] = 0x100000001;
      v12.i64[1] = 0x100000001;
      v13 = v73;
      LOBYTE(v53) = v72;
      v69 = v228;
      v45 = v230;
      goto LABEL_152;
    }
    v81 = v71 - v70;
    v10.i64[0] = 0x101010101010101;
    v10.i64[1] = 0x101010101010101;
    v11.i64[0] = -1;
    v11.i64[1] = -1;
    v12.i64[0] = 0x100000001;
    v12.i64[1] = 0x100000001;
    if (v71 < v70)
    {
LABEL_152:
      v120 = 8 * v45;
      *(_QWORD *)(v47 + v120) = *(_QWORD *)(v47 + 8 * v45) | (1 << (v53 + v225));
      *(_QWORD *)(v46 + v120) = v49 & ~(v224 << v53);
      v121 = *(_WORD *)(v43 + 2);
      StatusReg = v232;
      v6 = v233;
      v9 = &unk_1ECF57000;
      if (v121)
      {
LABEL_153:
        *(_WORD *)(v43 + 2) = v121 + (v226 >> 8);
        v67 = v69 + *(_QWORD *)(v43 - 16);
        v66 = 1;
        if (!v13)
          goto LABEL_159;
        goto LABEL_154;
      }
      v126 = ((8 * *(unsigned __int16 *)(v233 + 8)) | ((unint64_t)*(unsigned __int8 *)(v233 + 10) << 19))
           + pas_compact_heap_reservation_base;
      v127 = *(unsigned int *)(v233 + 12);
      v128 = *(unsigned int *)(v126 + 68);
      if ((_DWORD)v128)
        v129 = pas_compact_heap_reservation_base + 8 * v128;
      else
        v129 = 0;
      v130 = *(unsigned int *)(v129 + ((v127 >> 5) & 0x7FFFFFC));
      v131 = pas_compact_heap_reservation_base + 8 * v130;
      if (!(_DWORD)v130)
        v131 = 0;
      *(_BYTE *)(v131 + (v127 & 0x7F)) = -2;
      while (1)
      {
        do
        {
          v135 = *(_QWORD *)(v126 + 8);
          v136 = *(_QWORD *)v126;
          if (*(_QWORD *)v126 >= v127)
            v137 = v127;
          else
            v137 = *(_QWORD *)v126;
        }
        while (v135 == -1);
        if ((v135 & 1) != 0)
        {
          v132 = v135 + 1;
        }
        else
        {
          v132 = *(_QWORD *)(v126 + 8);
          if (v136 <= v127)
            goto LABEL_153;
        }
        v133 = __ldxp((unsigned __int128 *)v126);
        if ((unint64_t)v133 ^ v136 | *((_QWORD *)&v133 + 1) ^ v135)
          break;
        if (__stlxp(__PAIR128__(v132, v137), (unsigned __int128 *)v126))
          goto LABEL_175;
        v134 = 1;
LABEL_176:
        __dmb(0xBu);
        if (v134)
          goto LABEL_153;
      }
      __clrex();
LABEL_175:
      v134 = 0;
      goto LABEL_176;
    }
    v82 = v81 + 1;
    if (v81 + 1 < 8)
    {
      LODWORD(v83) = 0;
      v84 = v69 >> 14;
      goto LABEL_129;
    }
    if (v82 >= 0x20)
    {
      v86 = 0uLL;
      v85 = v82 & 0xFFFFFFFFFFFFFFE0;
      v87 = 0uLL;
      v88 = (int8x16_t *)(v43 + v70 + 160);
      v89 = v82 & 0xFFFFFFFFFFFFFFE0;
      v90 = 0uLL;
      v91 = 0uLL;
      v92 = 0uLL;
      v93 = 0uLL;
      v94 = 0uLL;
      v95 = 0uLL;
      do
      {
        v96 = (uint8x16_t)vceqq_s8(v88[-1], v11);
        v97 = vmovl_u8(*(uint8x8_t *)v96.i8);
        v98 = vmovl_high_u8(v96);
        v99 = (uint8x16_t)vceqq_s8(*v88, v11);
        v100 = vmovl_u8(*(uint8x8_t *)v99.i8);
        v101 = vmovl_high_u8(v99);
        v91 = vaddq_s32(v91, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v98), v12));
        v90 = vaddq_s32(v90, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v98.i8), v12));
        v87 = vaddq_s32(v87, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v97), v12));
        v86 = vaddq_s32(v86, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v97.i8), v12));
        v95 = vaddq_s32(v95, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v101), v12));
        v94 = vaddq_s32(v94, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v101.i8), v12));
        v93 = vaddq_s32(v93, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v100), v12));
        v92 = vaddq_s32(v92, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v100.i8), v12));
        v88 += 2;
        v89 -= 32;
      }
      while (v89);
      v83 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v92, v86), vaddq_s32(v94, v90)), vaddq_s32(vaddq_s32(v93, v87), vaddq_s32(v95, v91))));
      if (v82 == v85)
        goto LABEL_134;
      if ((v82 & 0x18) == 0)
      {
        v84 = v70 + v85;
LABEL_129:
        v108 = v71 - v84 + 1;
        v109 = (unsigned __int8 *)(v43 + v84 + 144);
        do
        {
          v110 = *v109++;
          if (v110 == 255)
            v83 = (v83 + 1);
          else
            v83 = v83;
          --v108;
        }
        while (v108);
LABEL_134:
        if ((_DWORD)v83)
          goto LABEL_135;
        v111 = v81 + 1;
        if (v111 >= 8)
        {
          if (v111 < 0x20)
          {
            v112 = 0;
            goto LABEL_145;
          }
          v112 = v111 & 0xFFFFFFFFFFFFFFE0;
          v113 = (int8x16_t *)(v43 + v70 + 160);
          v114 = v111 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v115 = vaddq_s8(*v113, v10);
            v113[-1] = vaddq_s8(v113[-1], v10);
            *v113 = v115;
            v113 += 2;
            v114 -= 32;
          }
          while (v114);
          if (v111 == v112)
            goto LABEL_152;
          if ((v111 & 0x18) != 0)
          {
LABEL_145:
            v116 = v112 - (v111 & 0xFFFFFFFFFFFFFFF8);
            v117 = (int8x8_t *)(v43 + v112 + v70 + 144);
            do
            {
              *v117 = vadd_s8(*v117, (int8x8_t)0x101010101010101);
              ++v117;
              v116 += 8;
            }
            while (v116);
            v70 += v111 & 0xFFFFFFFFFFFFFFF8;
            if (v111 == (v111 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_152;
            goto LABEL_150;
          }
          v70 += v112;
        }
LABEL_150:
        v118 = v71 - v70 + 1;
        v119 = (_BYTE *)(v43 + v70 + 144);
        do
        {
          ++*v119++;
          --v118;
        }
        while (v118);
        goto LABEL_152;
      }
    }
    else
    {
      LODWORD(v83) = 0;
      v85 = 0;
    }
    v84 = v70 + (v82 & 0xFFFFFFFFFFFFFFF8);
    v102 = 0uLL;
    v103 = (int32x4_t)v83;
    v104 = v85 - (v82 & 0xFFFFFFFFFFFFFFF8);
    v105 = (int8x8_t *)(v43 + v85 + v70 + 144);
    do
    {
      v106 = *v105++;
      v107 = vmovl_u8((uint8x8_t)vceq_s8(v106, (int8x8_t)-1));
      v102 = vaddq_s32(v102, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v107), v12));
      v103 = vaddq_s32(v103, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v107.i8), v12));
      v104 += 8;
    }
    while (v104);
    v83 = vaddvq_s32(vaddq_s32(v103, v102));
    if (v82 == (v82 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_134;
    goto LABEL_129;
  }
LABEL_104:
  v68 = pas_bitfit_allocator_commit_view((os_unfair_lock_s *)v6, (uint64_t)&unk_1E35BEB08, v13 != 0);
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v11.i64[0] = -1;
  v11.i64[1] = -1;
  v10.i64[0] = 0x101010101010101;
  v10.i64[1] = 0x101010101010101;
  if ((v68 & 1) != 0)
    goto LABEL_57;
  v213 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v214 = __ldxr(&v15->_os_unfair_lock_opaque);
    if (v214 != v213)
      break;
    if (!__stlxr(0, &v15->_os_unfair_lock_opaque))
      goto LABEL_274;
  }
  __clrex();
  os_unfair_lock_unlock(v15);
LABEL_274:
  if (v13)
  {
    v215 = *(_DWORD *)(StatusReg + 24);
    v211 = 2;
    while (1)
    {
      v216 = __ldxr(&v14->_os_unfair_lock_opaque);
      if (v216 != v215)
        break;
      if (!__stlxr(0, &v14->_os_unfair_lock_opaque))
        return v211;
    }
    goto LABEL_268;
  }
  return 2;
}

void jit_medium_bitfit_page_config_specialized_page_deallocate_with_page(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t StatusReg;
  unsigned int v10;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  int8x16_t *v39;
  int8x16_t v40;
  int8x16_t v41;
  unint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x8_t v49;
  int8x8_t *v50;
  uint64_t v51;
  int8x8_t v52;
  int8x8_t v53;
  uint64_t v54;
  _BYTE *v55;
  char v56;
  int v57;
  unsigned int *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  unsigned int v63;

  v4 = a2 & 0x1FFFF;
  v5 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v5)
    v6 = pas_compact_heap_reservation_base + 8 * v5;
  else
    v6 = 0;
  v7 = (a2 >> 8) & 0x1FF;
  v8 = (unsigned int *)(v6 + 16);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v10 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(v8))
  {
    if (!__stxr(v10, v8))
    {
      if (!v4)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 16));
  if (!v4)
    goto LABEL_12;
LABEL_10:
  v12 = a1 + 4 * ((unint64_t)(v7 - 1) >> 5);
  v13 = 1 << (v7 - 1);
  if ((*(_DWORD *)(v12 + 16) & v13) == 0 && (*(_DWORD *)(v12 + 80) & v13) == 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 5u, a2, v4, (uint64_t)"previous bit is not free or end of object");
LABEL_12:
  v14 = a1 + 16;
  if (((*(_DWORD *)(a1 + 16 + ((v4 >> 11) & 0x3C)) >> SBYTE1(v4)) & 1) != 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 5u, a2, v4, (uint64_t)"free bit set");
  v15 = v4 >> 14;
  v16 = (v4 >> 8) & 0x3F;
  v17 = a1 + 80;
  v18 = *(_QWORD *)(a1 + 80 + 8 * (v4 >> 14));
  if (v18 >> v16)
  {
    v19 = __clz(__rbit64(v18 >> v16));
    v20 = v19 + 1;
    if (v19 == 63)
      v21 = -1;
    else
      v21 = ~(-2 << v19);
    v22 = v21 << v16;
    v23 = 8 * v15;
    *(_QWORD *)(v14 + v23) = *(_QWORD *)(v14 + 8 * v15) | v22;
    *(_QWORD *)(v17 + v23) = v18 & ~(1 << (v19 + v7));
    goto LABEL_34;
  }
  if (v15 == 7)
    goto LABEL_85;
  v24 = v15 + 1;
  v25 = (unint64_t *)(v17 + 8 * (v15 + 1));
  v26 = *v25;
  if (*v25)
  {
    v27 = 0;
    v28 = v15 + 1;
    v24 = v4 >> 14;
    goto LABEL_29;
  }
  if (v15 == 6)
    goto LABEL_85;
  v29 = v15 + 2;
  v25 = (unint64_t *)(v17 + 8 * (v15 + 2));
  v26 = *v25;
  if (*v25)
  {
    v27 = 8;
LABEL_24:
    v28 = v29;
    goto LABEL_29;
  }
  if (v15 == 5)
    goto LABEL_85;
  v24 = v15 + 3;
  v25 = (unint64_t *)(v17 + 8 * (v15 + 3));
  v26 = *v25;
  if (*v25)
  {
    v27 = 16;
LABEL_28:
    v28 = v24;
    v24 = v29;
    goto LABEL_29;
  }
  if (v15 == 4)
    goto LABEL_85;
  v29 = v15 + 4;
  v25 = (unint64_t *)(v17 + 8 * (v15 + 4));
  v26 = *v25;
  if (*v25)
  {
    v27 = 24;
    goto LABEL_24;
  }
  if (v15 == 3)
    goto LABEL_85;
  v24 = v15 + 5;
  v25 = (unint64_t *)(v17 + 8 * (v15 + 5));
  v26 = *v25;
  if (*v25)
  {
    v27 = 32;
    goto LABEL_28;
  }
  if (v15 == 2)
    goto LABEL_85;
  v29 = v15 + 6;
  v25 = (unint64_t *)(v17 + 8 * (v15 + 6));
  v26 = *v25;
  if (*v25)
  {
    v27 = 40;
    goto LABEL_24;
  }
  if (v15 == 1)
    goto LABEL_85;
  v24 = v15 + 7;
  v25 = (unint64_t *)(v17 + 8 * (v15 + 7));
  v26 = *v25;
  if (*v25)
  {
    v27 = 48;
    goto LABEL_28;
  }
  if (v4 < 0x4000)
LABEL_85:
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 5u, a2, v4, (uint64_t)"object falls off end of page");
  v28 = v15 | 8;
  v25 = (unint64_t *)(v17 + 8 * (v15 | 8));
  v26 = *v25;
  v27 = 56;
LABEL_29:
  v30 = __clz(__rbit64(v26));
  if (v30 == 63)
    v31 = -1;
  else
    v31 = ~(-2 << v30);
  *(_QWORD *)(v14 + 8 * v28) |= v31;
  *v25 = v26 & ~(1 << v30);
  *(_QWORD *)(v14 + 8 * v15) |= -1 << v16;
  v20 = v30 - v16 + ((v24 - v15) << 6) + 65;
  if (v24 > v15)
    memset((void *)(a1 + 8 * v15 + 24), 255, v27);
LABEL_34:
  if (!(v20 << 8) || (v32 = (v4 + (v20 << 8) - 1) >> 14, v15 > v32))
  {
    v33 = 1;
    if (*(_BYTE *)(a1 + 1))
      goto LABEL_37;
LABEL_60:
    pas_bitfit_view_note_max_free(v6);
    *(_BYTE *)(a1 + 1) = 1;
    v57 = *(unsigned __int16 *)(a1 + 2);
    *(_WORD *)(a1 + 2) = v57 - v20;
    if (v57 == (unsigned __int16)v20)
      goto LABEL_38;
LABEL_61:
    if (v33)
      goto LABEL_66;
    v58 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v59 = mach_approximate_time();
      v60 = *v58;
      v61 = v58[1];
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_65:
        *(_QWORD *)(a1 + 8) = v59 * v60 / v61;
        pas_bitfit_directory_view_did_become_empty_at_index((unint64_t *)(((8 * *(unsigned __int16 *)(v6 + 8)) | ((unint64_t)*(unsigned __int8 *)(v6 + 10) << 19))+ pas_compact_heap_reservation_base), *(unsigned int *)(v6 + 12));
        goto LABEL_66;
      }
    }
    else
    {
      get_timebase_info_slow();
      v59 = mach_approximate_time();
      v60 = timebase_info;
      v61 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_65;
    }
    pas_get_epoch_first = 1;
    goto LABEL_65;
  }
  v35 = v32 - v15 + 1;
  if (v35 < 8)
  {
    LOBYTE(v36) = 0;
    v37 = v4 >> 14;
    goto LABEL_55;
  }
  if (v35 < 0x20)
  {
    v36 = 0;
    v38 = 0;
LABEL_47:
    v49 = vdup_n_s8(v36);
    v37 = v15 | v35 & 0xFFFFFFFFFFFFFFF8;
    v50 = (int8x8_t *)(v38 + v15 + a1 + 144);
    v51 = v38 - (v35 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v52 = vadd_s8(*v50, (int8x8_t)-1);
      *v50++ = v52;
      v53 = vceqz_s8(v52);
      v49 = vsub_s8(vbic_s8(v49, v53), v53);
      v51 += 8;
    }
    while (v51);
    LOBYTE(v36) = *(_QWORD *)&v49 != 0;
    if (v35 == (v35 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_59;
    goto LABEL_55;
  }
  v38 = v35 & 0xFFFFFFFFFFFFFFE0;
  v39 = (int8x16_t *)(v15 + a1 + 160);
  v40 = 0uLL;
  v41.i64[0] = -1;
  v41.i64[1] = -1;
  v42 = v35 & 0xFFFFFFFFFFFFFFE0;
  v43 = 0uLL;
  do
  {
    v44 = vaddq_s8(v39[-1], v41);
    v45 = vaddq_s8(*v39, v41);
    v39[-1] = v44;
    *v39 = v45;
    v46 = vceqzq_s8(v44);
    v47 = vceqzq_s8(v45);
    v40 = vsubq_s8(vbicq_s8(v40, v46), v46);
    v43 = vsubq_s8(vbicq_s8(v43, v47), v47);
    v39 += 2;
    v42 -= 32;
  }
  while (v42);
  v48 = vorrq_s8(v40, v43);
  v36 = vmaxvq_u8((uint8x16_t)vtstq_s8(v48, v48)) & 1;
  if (v35 == v38)
    goto LABEL_59;
  if ((v35 & 0x18) != 0)
    goto LABEL_47;
  v37 = v15 | v38;
LABEL_55:
  v54 = v32 - v37 + 1;
  v55 = (_BYTE *)(v37 + a1 + 144);
  do
  {
    v56 = *v55 - 1;
    *v55++ = v56;
    if (!v56)
      LOBYTE(v36) = 1;
    --v54;
  }
  while (v54);
LABEL_59:
  v33 = v36 == 0;
  if (!*(_BYTE *)(a1 + 1))
    goto LABEL_60;
LABEL_37:
  v34 = *(unsigned __int16 *)(a1 + 2);
  *(_WORD *)(a1 + 2) = v34 - v20;
  if (v34 != (unsigned __int16)v20)
    goto LABEL_61;
LABEL_38:
  pas_bitfit_view_note_full_emptiness(v6, a1);
LABEL_66:
  v62 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v63 = __ldxr(v8);
    if (v63 != v62)
      break;
    if (!__stlxr(0, v8))
      return;
  }
  __clrex();
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 16));
}

unint64_t jit_medium_bitfit_page_config_specialized_page_get_allocation_size_with_page(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a1 + 8 * ((a2 >> 14) & 7);
  v3 = *(_QWORD *)(v2 + 80);
  if (v3 >> SBYTE1(a2))
    return (__clz(__rbit64(v3 >> SBYTE1(a2))) << 8) + 256;
  v5 = -(uint64_t)((a2 >> 8) & 0x3F);
  v6 = (unint64_t *)(v2 + 88);
  do
  {
    v8 = *v6++;
    v7 = v8;
    v5 += 64;
  }
  while (!v8);
  return ((__clz(__rbit64(v7)) + v5) << 8) + 256;
}

void jit_medium_bitfit_page_config_specialized_page_shrink_with_page(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t StatusReg;
  unsigned int v18;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  BOOL v52;
  int v53;
  unint64_t v54;
  _BOOL8 v55;
  unint64_t v56;
  uint64_t v57;
  int8x16_t *v58;
  int8x16_t v59;
  int8x16_t v60;
  unint64_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x8_t v68;
  uint64_t v69;
  int8x8_t *v70;
  int8x8_t v71;
  int8x8_t v72;
  uint64_t v73;
  _BYTE *v74;
  char v75;
  int v76;
  unsigned int *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unsigned int v82;

  v10 = a2 & 0x1FFFF;
  v11 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v11)
    v12 = pas_compact_heap_reservation_base + 8 * v11;
  else
    v12 = 0;
  if (a3)
    v13 = (unint64_t)(a3 + 255) >> 8;
  else
    v13 = 1;
  v14 = v13;
  v15 = (a2 >> 8) & 0x1FF;
  v16 = (unsigned int *)(v12 + 16);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(v16))
  {
    if (!__stxr(v18, v16))
    {
      if (!v10)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  __clrex();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 16));
  if (!v10)
    goto LABEL_15;
LABEL_13:
  v20 = a1 + 4 * ((unint64_t)(v15 - 1) >> 5);
  v21 = 1 << (v15 - 1);
  if ((*(_DWORD *)(v20 + 16) & v21) == 0 && (*(_DWORD *)(v20 + 80) & v21) == 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 5u, a2, v10, (uint64_t)"previous bit is not free or end of object");
LABEL_15:
  v22 = a1 + 16;
  if (((*(_DWORD *)(a1 + 16 + ((v10 >> 11) & 0x3C)) >> SBYTE1(v10)) & 1) != 0)
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 5u, a2, v10, (uint64_t)"free bit set");
  v23 = v10 >> 14;
  v24 = (v10 >> 8) & 0x3F;
  v25 = a1 + 80;
  v26 = *(_QWORD *)(a1 + 80 + 8 * (v10 >> 14));
  if (v26 >> v24)
  {
    v27 = __clz(__rbit64(v26 >> v24));
    v28 = v27 + 1 - v13;
    if (v27 + 1 >= v13)
    {
      if (v27 + 1 != v13)
      {
        if (v28 == 64)
          v29 = -1;
        else
          v29 = ~(-1 << v28);
        v30 = v13 + v24;
        v31 = 8 * v23;
        *(_QWORD *)(v22 + v31) |= v29 << v30;
        *(_QWORD *)(v25 + v31) = v26 & ~(1 << (v27 + v15)) | (1 << (v30 - 1));
        v14 = v27 + 1;
      }
      goto LABEL_46;
    }
LABEL_99:
    pas_deallocation_did_fail((uint64_t)"attempt to shrink to a larger size", a2, a3, a4, a5, a6, a7, a8);
  }
  if (v23 == 7)
    goto LABEL_100;
  v32 = v23 + 1;
  v33 = (unint64_t *)(v25 + 8 * (v23 + 1));
  v34 = *v33;
  if (*v33)
  {
    v35 = 0;
    v36 = v23 + 1;
    v32 = v10 >> 14;
    goto LABEL_34;
  }
  if (v23 == 6)
    goto LABEL_100;
  v37 = v23 + 2;
  v33 = (unint64_t *)(v25 + 8 * (v23 + 2));
  v34 = *v33;
  if (*v33)
  {
    v35 = 1;
LABEL_29:
    v36 = v37;
    goto LABEL_34;
  }
  if (v23 == 5)
    goto LABEL_100;
  v32 = v23 + 3;
  v33 = (unint64_t *)(v25 + 8 * (v23 + 3));
  v34 = *v33;
  if (*v33)
  {
    v35 = 2;
LABEL_33:
    v36 = v32;
    v32 = v37;
    goto LABEL_34;
  }
  if (v23 == 4)
    goto LABEL_100;
  v37 = v23 + 4;
  v33 = (unint64_t *)(v25 + 8 * (v23 + 4));
  v34 = *v33;
  if (*v33)
  {
    v35 = 3;
    goto LABEL_29;
  }
  if (v23 == 3)
    goto LABEL_100;
  v32 = v23 + 5;
  v33 = (unint64_t *)(v25 + 8 * (v23 + 5));
  v34 = *v33;
  if (*v33)
  {
    v35 = 4;
    goto LABEL_33;
  }
  if (v23 == 2)
    goto LABEL_100;
  v37 = v23 + 6;
  v33 = (unint64_t *)(v25 + 8 * (v23 + 6));
  v34 = *v33;
  if (*v33)
  {
    v35 = 5;
    goto LABEL_29;
  }
  if (v23 == 1)
    goto LABEL_100;
  v32 = v23 + 7;
  v33 = (unint64_t *)(v25 + 8 * (v23 + 7));
  v34 = *v33;
  if (*v33)
  {
    v35 = 6;
    goto LABEL_33;
  }
  if (v10 < 0x4000)
LABEL_100:
    pas_bitfit_page_deallocation_did_fail((const void *)a1, 5u, a2, v10, (uint64_t)"object falls off end of page");
  v36 = v23 | 8;
  v33 = (unint64_t *)(v25 + 8 * (v23 | 8));
  v34 = *v33;
  v35 = 7;
LABEL_34:
  v38 = __clz(__rbit64(v34));
  v39 = v38 - v24 + ((v32 - v23) << 6) + 65;
  v40 = v39 - v13;
  if (v39 < v13)
    goto LABEL_99;
  if (v39 != v13)
  {
    v41 = (v13 + v15) >> 6;
    v42 = (v13 + v15) & 0x3F;
    *(_DWORD *)(v25 + (((v13 + v15 - 1) >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << (v13 + v15 - 1);
    v43 = *v33;
    if (v41 == v36)
    {
      v44 = -1;
      if (v40 != 64)
        v44 = ~(-1 << v40);
      *(_QWORD *)(v22 + 8 * v36) |= v44 << v42;
      *v33 = v43 & ~(1 << v38);
    }
    else
    {
      v45 = 8 * v36;
      if (v38 == 63)
        v46 = -1;
      else
        v46 = ~(-2 << v38);
      *(_QWORD *)(v22 + v45) |= v46;
      *v33 = v43 & ~(1 << v38);
      *(_QWORD *)(v22 + 8 * v41) |= -1 << v42;
      if (v41 < v32)
        memset((void *)(a1 + 8 * v41 + 24), 255, 8 * (v23 - v41 + v35));
    }
    v14 = v39;
  }
LABEL_46:
  v47 = v14 - v13;
  v48 = (v10 + (v13 << 8) + 0x3FFF) & 0xFFFFFFFFFFFFC000;
  v49 = v10 + (v14 << 8);
  if (v49 < v48)
  {
    v49 = 0;
    v48 = 0;
  }
  if (v48 == v49 || (v50 = v48 >> 14, v51 = (v49 - 1) >> 14, v48 >> 14 > v51))
  {
    v52 = 1;
    if (*(_BYTE *)(a1 + 1))
      goto LABEL_51;
LABEL_74:
    pas_bitfit_view_note_max_free(v12);
    *(_BYTE *)(a1 + 1) = 1;
    v76 = *(unsigned __int16 *)(a1 + 2);
    *(_WORD *)(a1 + 2) = v76 - v47;
    if (v76 == v47)
      goto LABEL_52;
LABEL_75:
    if (v52)
      goto LABEL_80;
    v77 = (unsigned int *)timebase_info_ptr;
    if (timebase_info_ptr)
    {
      v78 = mach_approximate_time();
      v79 = *v77;
      v80 = v77[1];
      if ((pas_get_epoch_first & 1) != 0)
      {
LABEL_79:
        *(_QWORD *)(a1 + 8) = v78 * v79 / v80;
        pas_bitfit_directory_view_did_become_empty_at_index((unint64_t *)(((8 * *(unsigned __int16 *)(v12 + 8)) | ((unint64_t)*(unsigned __int8 *)(v12 + 10) << 19))+ pas_compact_heap_reservation_base), *(unsigned int *)(v12 + 12));
        goto LABEL_80;
      }
    }
    else
    {
      get_timebase_info_slow();
      v78 = mach_approximate_time();
      v79 = timebase_info;
      v80 = *(unsigned int *)algn_1ECF57B54;
      if ((pas_get_epoch_first & 1) != 0)
        goto LABEL_79;
    }
    pas_get_epoch_first = 1;
    goto LABEL_79;
  }
  v54 = v51 - v50 + 1;
  if (v54 < 8)
  {
    LOBYTE(v55) = 0;
    v56 = v50;
    goto LABEL_69;
  }
  if (v54 < 0x20)
  {
    LODWORD(v55) = 0;
    v57 = 0;
LABEL_61:
    v68 = vdup_n_s8(v55);
    v56 = v50 + (v54 & 0xFFFFFFFFFFFFFFF8);
    v69 = v57 - (v54 & 0xFFFFFFFFFFFFFFF8);
    v70 = (int8x8_t *)(v57 + v50 + a1 + 144);
    do
    {
      v71 = vadd_s8(*v70, (int8x8_t)-1);
      *v70++ = v71;
      v72 = vceqz_s8(v71);
      v68 = vsub_s8(vbic_s8(v68, v72), v72);
      v69 += 8;
    }
    while (v69);
    v55 = *(_QWORD *)&v68 != 0;
    if (v54 == (v54 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_73;
    goto LABEL_69;
  }
  v57 = v54 & 0xFFFFFFFFFFFFFFE0;
  v58 = (int8x16_t *)(v50 + a1 + 160);
  v59 = 0uLL;
  v60.i64[0] = -1;
  v60.i64[1] = -1;
  v61 = v54 & 0xFFFFFFFFFFFFFFE0;
  v62 = 0uLL;
  do
  {
    v63 = vaddq_s8(v58[-1], v60);
    v64 = vaddq_s8(*v58, v60);
    v58[-1] = v63;
    *v58 = v64;
    v65 = vceqzq_s8(v63);
    v66 = vceqzq_s8(v64);
    v59 = vsubq_s8(vbicq_s8(v59, v65), v65);
    v62 = vsubq_s8(vbicq_s8(v62, v66), v66);
    v58 += 2;
    v61 -= 32;
  }
  while (v61);
  v67 = vorrq_s8(v59, v62);
  LODWORD(v55) = vmaxvq_u8((uint8x16_t)vtstq_s8(v67, v67)) & 1;
  if (v54 == v57)
    goto LABEL_73;
  if ((v54 & 0x18) != 0)
    goto LABEL_61;
  v56 = v50 + v57;
LABEL_69:
  v73 = v51 - v56 + 1;
  v74 = (_BYTE *)(v56 + a1 + 144);
  do
  {
    v75 = *v74 - 1;
    *v74++ = v75;
    if (!v75)
      LOBYTE(v55) = 1;
    --v73;
  }
  while (v73);
LABEL_73:
  v52 = !v55;
  if (!*(_BYTE *)(a1 + 1))
    goto LABEL_74;
LABEL_51:
  v53 = *(unsigned __int16 *)(a1 + 2);
  *(_WORD *)(a1 + 2) = v53 - v47;
  if (v53 != v47)
    goto LABEL_75;
LABEL_52:
  pas_bitfit_view_note_full_emptiness(v12, a1);
LABEL_80:
  v81 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v82 = __ldxr(v16);
    if (v82 != v81)
      break;
    if (!__stlxr(0, v16))
      return;
  }
  __clrex();
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 16));
}

uint64_t jit_heap_config_fast_megapage_kind()
{
  return 0;
}

uint64_t jit_heap_config_page_header(unint64_t a1)
{
  int v1;
  unsigned int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  if (off_1EE342948)
  {
    v1 = (a1 >> 14) ^ ((a1 >> 14) >> 4);
    v2 = ((v1 ^ 0xDEADBEEF) + 32 * v1) ^ (((v1 ^ 0xDEADBEEF) + 32 * v1) >> 11);
    v3 = (char *)off_1EE342948 + 32;
    v4 = *((_DWORD *)off_1EE342948 + 3) & v2;
    v5 = *((_QWORD *)off_1EE342948 + 2 * v4 + 4);
    if (v5 == (a1 & 0xFFFFFFFFFFFFC000))
    {
LABEL_6:
      v7 = *(_QWORD *)&v3[16 * v4 + 8];
      if (v7)
        return v7;
    }
    else
    {
      v6 = v2 + 1;
      while (v5 != -1)
      {
        v4 = *((_DWORD *)off_1EE342948 + 3) & v6;
        v5 = *(_QWORD *)&v3[16 * v4];
        ++v6;
        if (v5 == (a1 & 0xFFFFFFFFFFFFC000))
          goto LABEL_6;
      }
    }
  }
  if (off_1EE342918)
  {
    v9 = (a1 >> 17) ^ ((a1 >> 17) >> 4);
    v10 = ((v9 ^ 0xDEADBEEF) + 32 * v9) ^ (((v9 ^ 0xDEADBEEF) + 32 * v9) >> 11);
    v11 = (char *)off_1EE342918 + 32;
    v12 = *((_DWORD *)off_1EE342918 + 3) & v10;
    v13 = *((_QWORD *)off_1EE342918 + 2 * v12 + 4);
    if (v13 == (a1 & 0xFFFFFFFFFFFE0000))
      return *(_QWORD *)&v11[16 * v12 + 8];
    v14 = v10 + 1;
    while (v13 != -1)
    {
      v12 = *((_DWORD *)off_1EE342918 + 3) & v14;
      v13 = *(_QWORD *)&v11[16 * v12];
      ++v14;
      if (v13 == (a1 & 0xFFFFFFFFFFFE0000))
        return *(_QWORD *)&v11[16 * v12 + 8];
    }
  }
  return 0;
}

unint64_t jit_aligned_allocator@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v7;
  unint64_t result;
  int v9;
  char v10;
  int64x2_t v11;
  uint64_t (*v12)@<X0>(uint64_t@<X0>, unint64_t@<X1>, uint64_t@<X2>, uint64_t@<X3>, uint64_t@<X8>);
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  v7 = (a1 + a2 - 1) & -(uint64_t)a2;
  *(_QWORD *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  v16[1] = a4;
  v16[2] = 0;
  v16[0] = jit_large_fresh_memory_heap;
  v11 = vdupq_n_s64(1uLL);
  v12 = large_aligned_allocator;
  v13 = v16;
  v14 = 0;
  v15 = 0;
  result = try_allocate_without_fixing(jit_large_fresh_memory_heap, v7, a2, a3, (unint64_t *)&v11);
  if ((v10 & 1) != 0)
  {
    *(_QWORD *)a5 = result;
    *(_QWORD *)(a5 + 8) = a1;
    *(_QWORD *)(a5 + 16) = result;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = result + a1;
    *(_QWORD *)(a5 + 40) = v7 - a1;
    *(_DWORD *)(a5 + 48) = v9;
  }
  return result;
}

unint64_t *jit_prepare_to_enumerate(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD v20[7];

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 168);
  if (v2 > v3 || v3 >= *(_QWORD *)(a1 + 56) + v2)
  {
    v3 = (*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
    if (v3)
      goto LABEL_6;
    return 0;
  }
  if (v3 >= 8)
    v3 = v3 - v2 + *(_QWORD *)(a1 + 48);
  if (!v3)
    return 0;
LABEL_6:
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 > v4 || v4 >= *(_QWORD *)(a1 + 56) + v5)
  {
    v4 = (*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
    if (v4)
      goto LABEL_11;
    return 0;
  }
  if (v4 >= 8)
    v4 = v4 - v5 + *(_QWORD *)(a1 + 48);
  if (!v4)
    return 0;
LABEL_11:
  v6 = *(unint64_t **)(v4 + 1048);
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 > (unint64_t)v6 || (unint64_t)v6 >= *(_QWORD *)(a1 + 56) + v7)
  {
    v6 = (unint64_t *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 96))(a1, *(_QWORD *)(v4 + 1048), 16, *(_QWORD *)(a1 + 104));
    if (v6)
      goto LABEL_16;
    return 0;
  }
  if ((unint64_t)v6 >= 8)
    v6 = (unint64_t *)((char *)v6 + *(_QWORD *)(a1 + 48) - v7);
  if (!v6)
    return 0;
LABEL_16:
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1 || (v9 = *(_QWORD *)(v8 + 16), (unint64_t)(*(_QWORD *)(v8 + 8) - v9) <= 0x17))
  {
    pas_page_malloc_try_allocate_without_deallocating_padding(48, 1, 0, (uint64_t)v20);
    v9 = 0;
    v10 = v20[0];
    v11 = v20[1] + v20[5] - 24;
    *(_QWORD *)v20[0] = v8;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)a1 = v10;
    v8 = v10;
  }
  v12 = v9 + 24;
  v13 = (unint64_t *)(v12 + v8);
  *(_QWORD *)(v8 + 16) = v12;
  *v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  v14 = *v6;
  v15 = *(_QWORD *)(a1 + 40);
  if (v15 <= *v6 && v14 < *(_QWORD *)(a1 + 56) + v15)
  {
    if (v14 >= 8)
      v14 = v14 - v15 + *(_QWORD *)(a1 + 48);
    if (pas_basic_heap_config_enumerator_data_add_page_header_table(v13, a1, v14))
      goto LABEL_24;
    return 0;
  }
  v19 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD))(a1 + 96))(a1, *v6, 16, *(_QWORD *)(a1 + 104));
  if (!pas_basic_heap_config_enumerator_data_add_page_header_table(v13, a1, v19))
    return 0;
LABEL_24:
  v16 = v6[1];
  v17 = *(_QWORD *)(a1 + 40);
  if (v17 > v16 || v16 >= *(_QWORD *)(a1 + 56) + v17)
  {
    v16 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, _QWORD))(a1 + 96))(a1, v6[1], 16, *(_QWORD *)(a1 + 104));
  }
  else if (v16 >= 8)
  {
    v16 = v16 - v17 + *(_QWORD *)(a1 + 48);
  }
  if (pas_basic_heap_config_enumerator_data_add_page_header_table(v13, a1, v16))
    return v13;
  else
    return 0;
}

uint64_t jit_heap_config_for_each_shared_page_directory()
{
  return 1;
}

uint64_t jit_heap_config_for_each_shared_page_directory_remote()
{
  return 1;
}

uint64_t jit_heap_config_specialized_local_allocator_try_allocate_small_segregated_slow(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v8)(_QWORD, _QWORD);
  _QWORD *v10;
  _QWORD *v11;
  _DWORD *v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unsigned int v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _OWORD *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int i;
  uint64_t v94;
  int v95;
  _BYTE *v96;
  int v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  os_unfair_lock_s *v102;
  char v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t eligible;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  os_unfair_lock_s *v120;
  uint64_t v121;
  unsigned int *p_os_unfair_lock_opaque;
  unsigned int v123;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unsigned int *v128;
  unsigned int v129;
  int v131;
  unint64_t v132;
  unsigned int v133;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  BOOL v143;
  BOOL v144;
  BOOL v145;
  unint64_t v146;
  _DWORD *v147;
  int32x2_t *v148;
  uint64_t v149;
  int32x2_t v150;
  int32x2_t v151;
  int32x2_t v152;
  unint64_t v153;
  unsigned int v154;
  _QWORD *v156;
  int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  unint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int *v175;
  unsigned int v176;
  int v178;
  unsigned int v179;
  os_unfair_lock_s *v180;
  os_unfair_lock_s *v181;
  unsigned int v182;
  unint64_t v184;
  int v185;
  unsigned int v186;
  int v187;
  unsigned int v188;
  os_unfair_lock_s *v189;
  unsigned int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char local_allocator_slow;
  uint64_t v202;
  unint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  const os_unfair_lock *v211;
  _BOOL4 v212;
  char v213;
  int v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  BOOL v218;
  os_unfair_lock_t v219;
  int v220;
  unsigned int v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  os_unfair_lock_s *v225;
  unint64_t v226;
  int v227;
  unsigned int v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  os_unfair_lock_s *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unsigned int v242;
  int *v243;
  int *v244;
  int *v245;
  int v246;
  int v247;
  int v248;
  BOOL v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int *v252;
  unint64_t v253;
  unint64_t v254;
  unsigned int v255;
  _DWORD *v256;
  os_unfair_lock_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  unint64_t *v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  int v267;
  unsigned int v268;
  int v269;
  unsigned int v270;
  uint64_t v271;
  os_unfair_lock_t v272;
  uint64_t v273;
  unint64_t v274;
  int v276;
  unsigned int v277;
  int64x2_t v278;
  uint64_t v279;
  uint64_t v280;
  os_unfair_lock_s *v281;
  uint64_t (*v282)(_QWORD, _QWORD);
  uint64_t (*v283)(_QWORD, _QWORD);
  _OWORD *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t StatusReg;
  unsigned int *v288;
  os_unfair_lock_t lock;
  int64x2_t v290;
  double (*v291)@<D0>(uint64_t@<X8>);
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;

  v8 = (uint64_t (*)(_QWORD, _QWORD))a4;
  v295 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 3) != 2)
    pas_local_allocator_scavenger_data_commit_if_necessary_slow((BOOL *)a1, 0);
  v10 = (_QWORD *)(a1 + 32);
  v284 = (_OWORD *)(a1 + 56);
  v11 = &unk_1ECF57000;
  v12 = &unk_1ECF57000;
  v13 = &unk_1ECF57000;
  v278 = vdupq_n_s64(1uLL);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    lock = 0;
    v14 = *(_QWORD *)(a1 + 48);
    if ((v14 & 7) == 5)
    {
      v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 16);
      if ((*(_BYTE *)(*(_QWORD *)v16 + 2) & 1) == 0)
        goto LABEL_15;
      goto LABEL_36;
    }
    if (!v14)
      goto LABEL_14;
    if ((v14 & 7u) < 2)
    {
      v17 = v14 & 0xFFFFFFFFFFFFFFF8;
      v18 = *(unsigned __int8 *)(v17 + 10);
      v19 = *(unsigned __int16 *)(v17 + 8);
      goto LABEL_12;
    }
    if ((v14 & 7) != 4)
    {
LABEL_14:
      v15 = 0;
      v16 = MEMORY[0x10];
      if ((*(_BYTE *)(*MEMORY[0x10] + 2) & 1) != 0)
        goto LABEL_36;
LABEL_15:
      v21 = *(unsigned int *)(v16 + 36);
      if (!(_DWORD)v21)
        goto LABEL_36;
      v22 = *(_QWORD *)(v16 + 8);
      if (v22)
      {
        v23 = v22 & 0xFFFFFFFFFE000000;
        v24 = *(_QWORD *)(v16 + 8) & 0x1FFFFFFLL;
        v25 = (unint64_t)(v24 - 16392) >> 14;
        v26 = (unint64_t)(v24 + 4 * v21 - 16385) >> 14;
        v27 = v23 | 0x10;
        v28 = (unint64_t *)(v27 + 8 * v25);
        while (1)
        {
          v29 = *v28;
          if ((*v28 & 7) < 3)
          {
LABEL_25:
            if (v25 == v26)
              goto LABEL_26;
            v104 = (unint64_t *)(v27 + 8 * v26);
            while (2)
            {
              v105 = *v104;
              if ((*v104 & 7) < 3)
                goto LABEL_26;
              v106 = __ldxr(v104);
              if (v106 == v105)
              {
                if (!__stlxr(v105 & 0xFFFFFFFFFFFFFFF8 | 2, v104))
                {
                  v107 = 1;
                  goto LABEL_127;
                }
              }
              else
              {
                __clrex();
              }
              v107 = 0;
LABEL_127:
              __dmb(0xBu);
              if (v107)
                goto LABEL_26;
              continue;
            }
          }
          v30 = __ldxr(v28);
          if (v30 != v29)
            break;
          if (__stlxr(v29 & 0xFFFFFFFFFFFFFFF8 | 2, v28))
            goto LABEL_23;
          v31 = 1;
LABEL_24:
          __dmb(0xBu);
          if (v31)
            goto LABEL_25;
        }
        __clrex();
LABEL_23:
        v31 = 0;
        goto LABEL_24;
      }
LABEL_26:
      v32 = *(_QWORD *)(v16 + 16);
      if (!v32)
        goto LABEL_36;
      v33 = v32 & 0xFFFFFFFFFE000000;
      v34 = *(_QWORD *)(v16 + 16) & 0x1FFFFFFLL;
      v35 = (unint64_t)(v34 - 16392) >> 14;
      v36 = (unint64_t)(v34 + 4 * v21 - 16385) >> 14;
      v37 = v33 | 0x10;
      v38 = (unint64_t *)((v33 | 0x10) + 8 * v35);
      while (1)
      {
        v39 = *v38;
        if ((*v38 & 7) < 3)
        {
LABEL_35:
          if (v35 == v36)
            goto LABEL_36;
          v108 = (unint64_t *)(v37 + 8 * v36);
          while (2)
          {
            v109 = *v108;
            if ((*v108 & 7) < 3)
              goto LABEL_36;
            v110 = __ldxr(v108);
            if (v110 == v109)
            {
              if (!__stlxr(v109 & 0xFFFFFFFFFFFFFFF8 | 2, v108))
              {
                v111 = 1;
                goto LABEL_136;
              }
            }
            else
            {
              __clrex();
            }
            v111 = 0;
LABEL_136:
            __dmb(0xBu);
            if (v111)
              goto LABEL_36;
            continue;
          }
        }
        v40 = __ldxr(v38);
        if (v40 != v39)
          break;
        if (__stlxr(v39 & 0xFFFFFFFFFFFFFFF8 | 2, v38))
          goto LABEL_33;
        v41 = 1;
LABEL_34:
        __dmb(0xBu);
        if (v41)
          goto LABEL_35;
      }
      __clrex();
LABEL_33:
      v41 = 0;
      goto LABEL_34;
    }
    v20 = (unsigned __int16 *)(v14 | 7);
    v18 = *((unsigned __int8 *)v20 + 2);
    v19 = *v20;
LABEL_12:
    v15 = ((8 * v19) | (v18 << 19)) + v11[317];
    v16 = *(_QWORD *)(v15 + 16);
    if ((*(_BYTE *)(*(_QWORD *)v16 + 2) & 1) == 0)
      goto LABEL_15;
LABEL_36:
    v42 = *(unsigned int *)(v16 + 28);
    v43 = v11[317] + 8 * v42;
    if ((_DWORD)v42)
      v44 = v43 == 0;
    else
      v44 = 1;
    if (!v44)
    {
      v45 = *(unsigned int *)(v43 + 12);
      if ((_DWORD)v45)
      {
        v46 = *(unsigned int *)(v43 + 8);
        if ((_DWORD)v46)
          v47 = v11[317] + 8 * v46;
        else
          v47 = 0;
        v48 = v47 - pas_compact_expendable_memory_payload;
        v49 = (unint64_t)(v47 - pas_compact_expendable_memory_payload - 8) >> 14;
        v50 = (unint64_t)(v48 + 16 * v45 - 1) >> 14;
        v51 = (unint64_t *)&pas_compact_expendable_memory_header[v49 + 1];
        while (1)
        {
          v52 = *v51;
          if ((*v51 & 7) < 3)
          {
LABEL_52:
            if (v49 == v50)
              goto LABEL_53;
            v98 = (unint64_t *)&pas_compact_expendable_memory_header[v50 + 1];
            while (2)
            {
              v99 = *v98;
              if ((*v98 & 7) < 3)
                goto LABEL_53;
              v100 = __ldxr(v98);
              if (v100 == v99)
              {
                if (!__stlxr(v99 & 0xFFFFFFFFFFFFFFF8 | 2, v98))
                {
                  v101 = 1;
                  goto LABEL_115;
                }
              }
              else
              {
                __clrex();
              }
              v101 = 0;
LABEL_115:
              __dmb(0xBu);
              if (v101)
                goto LABEL_53;
              continue;
            }
          }
          v53 = __ldxr(v51);
          if (v53 != v52)
            break;
          if (__stlxr(v52 & 0xFFFFFFFFFFFFFFF8 | 2, v51))
            goto LABEL_50;
          v54 = 1;
LABEL_51:
          __dmb(0xBu);
          if (v54)
            goto LABEL_52;
        }
        __clrex();
LABEL_50:
        v54 = 0;
        goto LABEL_51;
      }
    }
LABEL_53:
    *(_WORD *)(a1 + 1) = 256;
    v55 = v12[763];
    v56 = v55 != 1 && v13[3048] == 0;
    v288 = (unsigned int *)v15;
    if (v56)
    {
      __dmb(0xBu);
      v13[3048] = 1;
LABEL_68:
      pas_scavenger_notify_eligibility_if_needed();
      v15 = (unint64_t)v288;
      v57 = *(_QWORD *)(a1 + 24);
      if (!v57)
        goto LABEL_69;
LABEL_59:
      if (off_1EE342948)
      {
        v58 = v57 & 0xFFFFFFFFFFFFC000;
        v59 = (v57 >> 14) ^ ((v57 >> 14) >> 4);
        v60 = ((v59 ^ 0xDEADBEEF) + 32 * v59) ^ (((v59 ^ 0xDEADBEEF) + 32 * v59) >> 11);
        v61 = (char *)off_1EE342948 + 32;
        v62 = *((_DWORD *)off_1EE342948 + 3) & v60;
        v63 = *((_QWORD *)off_1EE342948 + 2 * v62 + 4);
        if (v63 == v58)
        {
LABEL_64:
          v65 = *(_QWORD *)&v61[16 * v62 + 8];
          v66 = *(_QWORD *)(v65 + 32);
          if ((v66 & 6) == 0)
          {
LABEL_66:
            v285 = v66;
            goto LABEL_70;
          }
LABEL_65:
          v66 = *(_QWORD *)(a1 + 48);
          goto LABEL_66;
        }
        v64 = v60 + 1;
        while (v63 != -1)
        {
          v62 = *((_DWORD *)off_1EE342948 + 3) & v64;
          v63 = *(_QWORD *)&v61[16 * v62];
          ++v64;
          if (v63 == v58)
            goto LABEL_64;
        }
      }
      v65 = 0;
      v66 = MEMORY[0x20];
      if ((MEMORY[0x20] & 6) == 0)
        goto LABEL_66;
      goto LABEL_65;
    }
    if (v55 != 1)
      goto LABEL_68;
    v57 = *(_QWORD *)(a1 + 24);
    if (v57)
      goto LABEL_59;
LABEL_69:
    v65 = 0;
    v285 = 0;
LABEL_70:
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v67 = v15 | 5;
    if (!v15)
      v67 = 0;
    *v10 = 0;
    v10[1] = 0;
    *(_QWORD *)(a1 + 48) = v67;
    *(_WORD *)(a1 + 5) = 10;
    v68 = *(_QWORD *)(StatusReg + 752);
    if (v68)
    {
      v281 = *(os_unfair_lock_s **)(v68 + 8016);
      if (*(_BYTE *)(v68 + 8048))
      {
        v279 = v65;
        v69 = *(_DWORD *)(v68 + 8052) + 31;
        if (v69 >= 0x20)
        {
          v90 = 0;
          v91 = *(_QWORD *)(v68 + 8024);
          v92 = v69 >> 5;
          do
          {
            for (i = *(_DWORD *)(v91 + 4 * v90); i; i &= ~v95)
            {
              v94 = __clz(__rbit32(i));
              v95 = 1 << v94;
              *(_DWORD *)(v91 + 4 * v90) &= ~(1 << v94);
              v96 = (_BYTE *)(v68 + 8064 + 8 * ((32 * v90) | v94));
              if (v96 != (_BYTE *)a1 && v96[1])
              {
                v97 = v96[3];
                if (v97 == 4)
                {
                  pas_local_view_cache_stop(v96, 1);
                }
                else if (v97 == 2)
                {
                  pas_local_allocator_stop(v96, 1, 0);
                }
              }
            }
            ++v90;
          }
          while (v90 != v92);
        }
        *(_BYTE *)(v68 + 8048) = 0;
        v11 = (_QWORD *)&unk_1ECF57000;
        v65 = v279;
      }
      lock = 0;
      v70 = v285;
      if (!v285)
        goto LABEL_86;
    }
    else
    {
      v281 = 0;
      lock = 0;
      v70 = v285;
      if (!v285)
        goto LABEL_86;
    }
    if ((v70 & 7) == 4)
    {
      v83 = v70 & 0xFFFFFFFFFFFFFFF8;
      v84 = *(_BYTE *)((v70 & 0xFFFFFFFFFFFFFFF8) + 19);
      if ((v84 & 4) != 0)
      {
        v282 = v8;
        v102 = *(os_unfair_lock_s **)(v65 + 8);
        if (v102)
        {
          lock = pas_segregated_page_switch_lock_slow(v65, 0, v102);
          v84 = *(_BYTE *)(v83 + 19);
        }
        v103 = v84 & 0xF9;
        goto LABEL_324;
      }
    }
    else if ((v70 & 7) == 0)
    {
      pas_segregated_page_switch_lock_and_rebias_while_ineligible_impl(v65, &lock, v281);
      *(_QWORD *)(v65 + 32) = v70 | 1;
      *(_BYTE *)(v65 + 2) = 0;
      v10 = (_QWORD *)(a1 + 32);
      v12 = (_DWORD *)&unk_1ECF57000;
      v71 = *(_QWORD *)(v65 - 16);
      v72 = v288;
      if (*(_QWORD *)(v65 + 24))
      {
LABEL_339:
        *(_QWORD *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 16) = 0;
        v251 = v11[317];
        v252 = (unsigned int *)(v251 + 8 * v72[10]);
        v253 = *v252;
        v254 = v253 >> 10;
        v255 = (((v252[1] >> 4) - 1) >> 6) + 1;
        v256 = (_DWORD *)(v251 + *(unsigned int *)((char *)v252 + 9));
        *(_DWORD *)(a1 + 32) = *v252 >> 10;
        *(_DWORD *)(a1 + 36) = v255;
        *v284 = 0u;
        *(_OWORD *)(a1 + 72) = 0u;
        *(_OWORD *)(a1 + 88) = 0u;
        *(_OWORD *)(a1 + 104) = 0u;
        *(_OWORD *)(a1 + 120) = 0u;
        *(_OWORD *)(a1 + 136) = 0u;
        *(_OWORD *)(a1 + 152) = 0u;
        *(_OWORD *)(a1 + 168) = 0u;
        *(_QWORD *)(a1 + 24) = (v253 & 0xFFFFFC00) + v71;
        LODWORD(v252) = *v256;
        LODWORD(v253) = *(_DWORD *)(v65 + 44);
        *(_DWORD *)(a1 + 56) = *v256 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 44) = v253 | v252;
        LODWORD(v252) = v256[1];
        LODWORD(v253) = *(_DWORD *)(v65 + 48);
        *(_DWORD *)(a1 + 60) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 48) = v253 | v252;
        LODWORD(v252) = v256[2];
        LODWORD(v253) = *(_DWORD *)(v65 + 52);
        *(_DWORD *)(a1 + 64) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 52) = v253 | v252;
        LODWORD(v252) = v256[3];
        LODWORD(v253) = *(_DWORD *)(v65 + 56);
        *(_DWORD *)(a1 + 68) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 56) = v253 | v252;
        LODWORD(v252) = v256[4];
        LODWORD(v253) = *(_DWORD *)(v65 + 60);
        *(_DWORD *)(a1 + 72) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 60) = v253 | v252;
        LODWORD(v252) = v256[5];
        LODWORD(v253) = *(_DWORD *)(v65 + 64);
        *(_DWORD *)(a1 + 76) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 64) = v253 | v252;
        LODWORD(v252) = v256[6];
        LODWORD(v253) = *(_DWORD *)(v65 + 68);
        *(_DWORD *)(a1 + 80) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 68) = v253 | v252;
        LODWORD(v252) = v256[7];
        LODWORD(v253) = *(_DWORD *)(v65 + 72);
        *(_DWORD *)(a1 + 84) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 72) = v253 | v252;
        LODWORD(v252) = v256[8];
        LODWORD(v253) = *(_DWORD *)(v65 + 76);
        *(_DWORD *)(a1 + 88) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 76) = v253 | v252;
        LODWORD(v252) = v256[9];
        LODWORD(v253) = *(_DWORD *)(v65 + 80);
        *(_DWORD *)(a1 + 92) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 80) = v253 | v252;
        LODWORD(v252) = v256[10];
        LODWORD(v253) = *(_DWORD *)(v65 + 84);
        *(_DWORD *)(a1 + 96) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 84) = v253 | v252;
        LODWORD(v252) = v256[11];
        LODWORD(v253) = *(_DWORD *)(v65 + 88);
        *(_DWORD *)(a1 + 100) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 88) = v253 | v252;
        LODWORD(v252) = v256[12];
        LODWORD(v253) = *(_DWORD *)(v65 + 92);
        *(_DWORD *)(a1 + 104) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 92) = v253 | v252;
        LODWORD(v252) = v256[13];
        LODWORD(v253) = *(_DWORD *)(v65 + 96);
        *(_DWORD *)(a1 + 108) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 96) = v253 | v252;
        LODWORD(v252) = v256[14];
        LODWORD(v253) = *(_DWORD *)(v65 + 100);
        *(_DWORD *)(a1 + 112) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 100) = v253 | v252;
        LODWORD(v252) = v256[15];
        LODWORD(v253) = *(_DWORD *)(v65 + 104);
        *(_DWORD *)(a1 + 116) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 104) = v253 | v252;
        LODWORD(v252) = v256[16];
        LODWORD(v253) = *(_DWORD *)(v65 + 108);
        *(_DWORD *)(a1 + 120) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 108) = v253 | v252;
        LODWORD(v252) = v256[17];
        LODWORD(v253) = *(_DWORD *)(v65 + 112);
        *(_DWORD *)(a1 + 124) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 112) = v253 | v252;
        LODWORD(v252) = v256[18];
        LODWORD(v253) = *(_DWORD *)(v65 + 116);
        *(_DWORD *)(a1 + 128) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 116) = v253 | v252;
        LODWORD(v252) = v256[19];
        LODWORD(v253) = *(_DWORD *)(v65 + 120);
        *(_DWORD *)(a1 + 132) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 120) = v253 | v252;
        LODWORD(v252) = v256[20];
        LODWORD(v253) = *(_DWORD *)(v65 + 124);
        *(_DWORD *)(a1 + 136) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 124) = v253 | v252;
        LODWORD(v252) = v256[21];
        LODWORD(v253) = *(_DWORD *)(v65 + 128);
        *(_DWORD *)(a1 + 140) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 128) = v253 | v252;
        LODWORD(v252) = v256[22];
        LODWORD(v253) = *(_DWORD *)(v65 + 132);
        *(_DWORD *)(a1 + 144) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 132) = v253 | v252;
        LODWORD(v252) = v256[23];
        LODWORD(v253) = *(_DWORD *)(v65 + 136);
        *(_DWORD *)(a1 + 148) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 136) = v253 | v252;
        LODWORD(v252) = v256[24];
        LODWORD(v253) = *(_DWORD *)(v65 + 140);
        *(_DWORD *)(a1 + 152) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 140) = v253 | v252;
        LODWORD(v252) = v256[25];
        LODWORD(v253) = *(_DWORD *)(v65 + 144);
        *(_DWORD *)(a1 + 156) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 144) = v253 | v252;
        LODWORD(v252) = v256[26];
        LODWORD(v253) = *(_DWORD *)(v65 + 148);
        *(_DWORD *)(a1 + 160) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 148) = v253 | v252;
        LODWORD(v252) = v256[27];
        LODWORD(v253) = *(_DWORD *)(v65 + 152);
        *(_DWORD *)(a1 + 164) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 152) = v253 | v252;
        LODWORD(v252) = v256[28];
        LODWORD(v253) = *(_DWORD *)(v65 + 156);
        *(_DWORD *)(a1 + 168) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 156) = v253 | v252;
        LODWORD(v252) = v256[29];
        LODWORD(v253) = *(_DWORD *)(v65 + 160);
        *(_DWORD *)(a1 + 172) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 160) = v253 | v252;
        LODWORD(v252) = v256[30];
        LODWORD(v253) = *(_DWORD *)(v65 + 164);
        *(_DWORD *)(a1 + 176) = v252 & ~(_DWORD)v253;
        *(_DWORD *)(v65 + 164) = v253 | v252;
        LODWORD(v256) = v256[31];
        LODWORD(v252) = *(_DWORD *)(v65 + 168);
        *(_DWORD *)(a1 + 180) = v256 & ~(_DWORD)v252;
        *(_DWORD *)(v65 + 168) = v252 | v256;
        *(_QWORD *)(a1 + 40) = __rbit64(*(_QWORD *)(a1 + 56 + 8 * v254));
        *(_BYTE *)(a1 + 6) = 1;
        *(_QWORD *)(v65 + 24) = *(unsigned __int8 *)(v11[317] + 8 * v72[10] + 8);
        goto LABEL_340;
      }
LABEL_82:
      v73 = v11[317] + 8 * v72[10];
      v74 = *(_DWORD *)v73;
      v75 = *(unsigned int *)(v73 + 4) + v71;
      *(_QWORD *)(v65 + 24) = *(unsigned __int8 *)(v73 + 8);
      *(_QWORD *)(a1 + 8) = v75;
      *(_DWORD *)(a1 + 16) = v75 - (v74 + v71);
      *v10 = 0;
      v10[1] = 0;
      *(_QWORD *)(a1 + 24) = v71;
      v76 = (_OWORD *)(v11[317] + *(unsigned int *)(v73 + 9));
      v77 = v76[2];
      v78 = v76[3];
      v79 = v76[1];
      *(_OWORD *)(v65 + 44) = *v76;
      *(_OWORD *)(v65 + 92) = v78;
      *(_OWORD *)(v65 + 76) = v77;
      *(_OWORD *)(v65 + 60) = v79;
      v80 = v76[6];
      v81 = v76[7];
      v82 = v76[5];
      *(_OWORD *)(v65 + 108) = v76[4];
      *(_OWORD *)(v65 + 156) = v81;
      *(_OWORD *)(v65 + 140) = v80;
      *(_OWORD *)(v65 + 124) = v82;
LABEL_340:
      v13 = (_BYTE *)&unk_1ECF57000;
      goto LABEL_341;
    }
LABEL_86:
    if (!v68)
      goto LABEL_140;
    v85 = v288[8];
    if (*(_DWORD *)(v68 + 8052) <= v85)
    {
      if ((_DWORD)v85 == -1)
        goto LABEL_140;
      local_allocator_slow = pas_thread_local_cache_get_local_allocator_slow(v68, v85, 0, a4, a5, a6, a7, a8);
      v86 = v202;
      if ((local_allocator_slow & 1) == 0)
        goto LABEL_140;
    }
    else
    {
      v86 = v68 + 8 * v85 + 8064;
    }
    *(_BYTE *)v86 = 1;
    if (*(_BYTE *)(v86 + 3) != 4)
      goto LABEL_138;
    v87 = *(unsigned __int8 *)(v86 + 5);
    if (*(unsigned __int8 *)(v86 + 6) != (_DWORD)v87)
      goto LABEL_93;
    if (*(_BYTE *)(v86 + 7))
    {
      if (*(_BYTE *)(v86 + 7) == 2)
      {
LABEL_93:
        *(_WORD *)(v86 + 1) = 256;
        if (*(unsigned __int8 *)(v86 + 4) > (v87 + 1))
          v88 = v87 + 1;
        else
          v88 = 0;
        *(_BYTE *)(v86 + 5) = v88;
        v89 = ((8 * *(unsigned __int16 *)(v86 + 3 * v87 + 8)) | ((unint64_t)*(unsigned __int8 *)(v86 + 3 * v87 + 10) << 19))
            + v11[317];
        *(_BYTE *)(v86 + 7) = 1;
        *(_BYTE *)v86 = 0;
        goto LABEL_269;
      }
    }
    else
    {
LABEL_138:
      pas_local_allocator_scavenger_data_commit_if_necessary_slow((BOOL *)v86, 0);
    }
    *(_WORD *)(v86 + 1) = 256;
    *(_BYTE *)v86 = 0;
LABEL_140:
    eligible = pas_segregated_size_directory_take_first_eligible(v288);
    v89 = eligible;
    if (!eligible)
      goto LABEL_269;
    if ((eligible & 7) < 2)
    {
      v280 = v65;
      v113 = v11;
      v114 = eligible & 0xFFFFFFFFFFFFFFF8;
      if (*(_BYTE *)((eligible & 0xFFFFFFFFFFFFFFF8) + 11))
        goto LABEL_143;
      v127 = ((8 * *(unsigned __int16 *)(v114 + 8)) | ((unint64_t)*(unsigned __int8 *)(v114 + 10) << 19))
           + v113[317];
      if (*(_QWORD *)v114)
      {
        v290.i64[0] = 0;
        v128 = (unsigned int *)(v114 + 16);
        v129 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(v128))
        {
          if (!__stxr(v129, v128))
            goto LABEL_197;
        }
        __clrex();
        os_unfair_lock_lock((os_unfair_lock_t)(v114 + 16));
LABEL_197:
        v290.i64[0] = v114 + 16;
        if (*(unsigned __int8 *)(v127 + 13) << 8 == 512)
          pas_physical_page_sharing_pool_take_for_page_config(0x4000uLL, (uint64_t)&unk_1E35BE8A8, 0, (uint64_t)&v290, 1);
        v153 = *(_QWORD *)v114;
        v70 = v285;
        v154 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
        {
          if (!__stxr(v154, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_204;
        }
        __clrex();
        os_unfair_lock_lock(&pas_heap_lock);
LABEL_204:
        v156 = (_QWORD *)pas_utility_heap_try_allocate_with_alignment(188, 0x10uLL, (uint64_t)"pas_page_header_table/header");
        *v156 = v153;
        pas_lock_free_read_ptr_ptr_hashtable_set(&off_1EE342948, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x4000, v153, (unint64_t)(v156 + 2));
        v157 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v158 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
          if (v158 != v157)
            break;
          if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
            goto LABEL_209;
        }
        __clrex();
        os_unfair_lock_unlock(&pas_heap_lock);
LABEL_209:
        v159 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v160 = __ldxr(v128);
          if (v160 != v159)
            break;
          if (!__stlxr(0, v128))
            goto LABEL_214;
        }
        __clrex();
        os_unfair_lock_unlock((os_unfair_lock_t)(v114 + 16));
LABEL_214:
        v132 = *(_QWORD *)v114;
      }
      else
      {
        v131 = *(unsigned __int8 *)(v127 + 13) << 8;
        v70 = v285;
        if (v131 != 512
          || (pas_physical_page_sharing_pool_take_for_page_config(0x4000uLL, (uint64_t)&unk_1E35BE8A8, 0, 0, 0),
              (v132 = *(_QWORD *)v114) == 0))
        {
          v133 = *(_DWORD *)(StatusReg + 24);
          while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
          {
            if (!__stxr(v133, &pas_heap_lock._os_unfair_lock_opaque))
              goto LABEL_220;
          }
          __clrex();
          os_unfair_lock_lock(&pas_heap_lock);
LABEL_220:
          os_unfair_lock_assert_owner(&pas_heap_lock);
          v290 = v278;
          v291 = fresh_memory_aligned_allocator;
          v293 = 0;
          v294 = 0;
          v292 = 0;
          v163 = try_allocate_without_fixing(jit_fresh_memory_heap, 0x4000uLL, 0x4000uLL, 0, (unint64_t *)&v290);
          *(_QWORD *)v114 = v163;
          if (v163)
          {
            v164 = v163;
            v165 = (_QWORD *)pas_utility_heap_try_allocate_with_alignment(188, 0x10uLL, (uint64_t)"pas_page_header_table/header");
            *v165 = v164;
            pas_lock_free_read_ptr_ptr_hashtable_set(&off_1EE342948, (uint64_t (*)(unint64_t, uint64_t))pas_page_header_table_hash, 0x4000, v164, (unint64_t)(v165 + 2));
          }
          v70 = v285;
          v166 = *(_DWORD *)(StatusReg + 24);
          while (1)
          {
            v167 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
            if (v167 != v166)
              break;
            if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
              goto LABEL_227;
          }
          __clrex();
          os_unfair_lock_unlock(&pas_heap_lock);
LABEL_227:
          v132 = *(_QWORD *)v114;
          if (!*(_QWORD *)v114)
          {
            v89 = 0;
LABEL_143:
            v11 = v113;
            v65 = v280;
            goto LABEL_269;
          }
        }
      }
      if (off_1EE342948)
      {
        v168 = (v132 >> 14) ^ ((v132 >> 14) >> 4);
        v169 = ((v168 ^ 0xDEADBEEF) + 32 * v168) ^ (((v168 ^ 0xDEADBEEF) + 32 * v168) >> 11);
        v170 = (char *)off_1EE342948 + 32;
        v171 = *((_DWORD *)off_1EE342948 + 3) & v169;
        v172 = *((_QWORD *)off_1EE342948 + 2 * v171 + 4);
        if (v172 == v132)
        {
LABEL_233:
          v174 = *(_QWORD *)&v170[16 * v171 + 8];
          goto LABEL_235;
        }
        v173 = v169 + 1;
        while (v172 != -1)
        {
          v171 = *((_DWORD *)off_1EE342948 + 3) & v173;
          v172 = *(_QWORD *)&v170[16 * v171];
          ++v173;
          if (v172 == v132)
            goto LABEL_233;
        }
      }
      v174 = 0;
LABEL_235:
      pas_segregated_page_construct(v174, v114 | 1, 0, (uint64_t)&unk_1E35BE8A8);
      v175 = (unsigned int *)(v114 + 20);
      v176 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr(v175))
      {
        if (!__stxr(v176, v175))
          goto LABEL_240;
      }
      __clrex();
      os_unfair_lock_lock((os_unfair_lock_t)(v114 + 20));
LABEL_240:
      *(_BYTE *)(v114 + 11) = 1;
      v178 = *(_DWORD *)(StatusReg + 24);
      v11 = v113;
      v65 = v280;
      while (1)
      {
        v179 = __ldxr(v175);
        if (v179 != v178)
          break;
        if (!__stlxr(0, v175))
          goto LABEL_269;
      }
      __clrex();
      v180 = (os_unfair_lock_s *)v175;
LABEL_268:
      os_unfair_lock_unlock(v180);
      goto LABEL_269;
    }
    if ((eligible & 7) != 4)
    {
      v89 = 0;
      goto LABEL_269;
    }
    v115 = v65;
    v116 = v11;
    v117 = eligible & 0xFFFFFFFFFFFFFFF8;
    v118 = *(unsigned __int16 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 4) | ((unint64_t)*(unsigned __int8 *)((eligible & 0xFFFFFFFFFFFFFFF8) + 6) << 16);
    if (!v118 || (v119 = v116[317], (v120 = (os_unfair_lock_s *)(v119 + 8 * v118)) == 0))
    {
      v11 = v116;
      v65 = v115;
      goto LABEL_269;
    }
    v121 = *(_QWORD *)(((8 * *(unsigned __int16 *)(v117 + 7)) | ((unint64_t)*(unsigned __int8 *)(v117 + 9) << 19))
                     + v119
                     + 16);
    p_os_unfair_lock_opaque = &v120[2]._os_unfair_lock_opaque;
    v123 = *(_DWORD *)(StatusReg + 24);
    do
    {
      if (__ldaxr(p_os_unfair_lock_opaque))
      {
        __clrex();
        os_unfair_lock_lock(v120 + 2);
        v125 = *(_QWORD *)&v120->_os_unfair_lock_opaque;
        if ((*(_QWORD *)&v120->_os_unfair_lock_opaque & 1) == 0)
          goto LABEL_151;
        goto LABEL_166;
      }
    }
    while (__stxr(v123, p_os_unfair_lock_opaque));
    v125 = *(_QWORD *)&v120->_os_unfair_lock_opaque;
    if ((*(_QWORD *)&v120->_os_unfair_lock_opaque & 1) == 0)
    {
LABEL_151:
      v126 = pas_segregated_shared_view_commit_page(v120, v121, 0, v89 & 0xFFFFFFFFFFFFFFF8, (uint64_t)&unk_1E35BE8A8);
      goto LABEL_167;
    }
LABEL_166:
    v126 = v125 & 0xFFFFFFFFFFFFFFFELL;
LABEL_167:
    v70 = v285;
    if (v126)
    {
      if ((*(_BYTE *)(v117 + 19) & 0x10) == 0)
      {
        v135 = *(unsigned __int8 *)(v117 + 17);
        if (*(_BYTE *)(v117 + 17))
        {
          v136 = v116[317] + *(unsigned int *)(v117 + 12);
          v137 = *(unsigned __int8 *)(v117 + 18);
          v138 = v137 + v135;
          v139 = v126 + 20;
          if (v135 < 0x18)
            goto LABEL_253;
          v140 = 4 * v137;
          v141 = v139 + 4 * v137;
          v142 = v139 + 4 * v138;
          v143 = v141 < (unint64_t)&pas_compact_heap_reservation_available_size
              && v142 > (unint64_t)&pas_compact_heap_reservation_base;
          v144 = v143;
          v145 = v136 + 4 * v137 >= v142 || v141 >= v136 + 4 * v138;
          if (!v145 || v144)
            goto LABEL_253;
          v137 += v135 & 0xFC;
          v146 = (v117 - v116[317]) >> 3;
          if (!v117)
            LODWORD(v146) = 0;
          v147 = (_DWORD *)(v126 + v140 + 32);
          v148 = (int32x2_t *)(v136 + v140 + 8);
          v149 = v135 & 0xFC;
          while (1)
          {
            v150 = *v148;
            v151 = vtst_s32(v148[-1], v148[-1]);
            if ((v151.i8[0] & 1) != 0)
            {
              *(v147 - 3) = v146;
              if ((v151.i8[4] & 1) == 0)
                goto LABEL_189;
            }
            else if ((v151.i8[4] & 1) == 0)
            {
LABEL_189:
              v152 = vtst_s32(v150, v150);
              if ((v152.i8[0] & 1) != 0)
                goto LABEL_190;
              goto LABEL_194;
            }
            *(v147 - 2) = v146;
            v152 = vtst_s32(v150, v150);
            if ((v152.i8[0] & 1) != 0)
            {
LABEL_190:
              *(v147 - 1) = v146;
              if ((v152.i8[4] & 1) != 0)
                goto LABEL_195;
              goto LABEL_186;
            }
LABEL_194:
            if ((v152.i8[4] & 1) != 0)
LABEL_195:
              *v147 = v146;
LABEL_186:
            v147 += 4;
            v148 += 2;
            v149 -= 4;
            if (!v149)
            {
              if ((v135 & 0xFC) == v135)
                break;
              do
              {
LABEL_253:
                if (*(_DWORD *)(v136 + 4 * v137))
                {
                  v184 = (v117 - v116[317]) >> 3;
                  if (!v117)
                    LODWORD(v184) = 0;
                  *(_DWORD *)(v139 + 4 * v137) = v184;
                }
                ++v137;
              }
              while (v137 < v138);
              break;
            }
          }
        }
        v181 = v120 + 3;
        v182 = *(_DWORD *)(StatusReg + 24);
        while (!__ldaxr(&v181->_os_unfair_lock_opaque))
        {
          if (!__stxr(v182, &v181->_os_unfair_lock_opaque))
            goto LABEL_258;
        }
        __clrex();
        os_unfair_lock_lock(v181);
LABEL_258:
        *(_BYTE *)(v117 + 19) |= 0x10u;
        v185 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v186 = __ldxr(&v181->_os_unfair_lock_opaque);
          if (v186 != v185)
            break;
          if (!__stlxr(0, &v181->_os_unfair_lock_opaque))
            goto LABEL_263;
        }
        __clrex();
        os_unfair_lock_unlock(v181);
      }
LABEL_263:
      v187 = *(_DWORD *)(StatusReg + 24);
      v11 = v116;
      v65 = v115;
      while (1)
      {
        v188 = __ldxr(p_os_unfair_lock_opaque);
        if (v188 != v187)
          break;
        if (!__stlxr(0, p_os_unfair_lock_opaque))
          goto LABEL_269;
      }
      __clrex();
      v180 = (os_unfair_lock_s *)p_os_unfair_lock_opaque;
      goto LABEL_268;
    }
    v161 = *(_DWORD *)(StatusReg + 24);
    v11 = v116;
    v65 = v115;
    while (1)
    {
      v162 = __ldxr(p_os_unfair_lock_opaque);
      if (v162 != v161)
        break;
      v89 = 0;
      if (!__stlxr(0, p_os_unfair_lock_opaque))
        goto LABEL_269;
    }
    __clrex();
    os_unfair_lock_unlock(v120 + 2);
    v89 = 0;
LABEL_269:
    if (!v70)
      goto LABEL_299;
    v189 = *(os_unfair_lock_s **)(v65 + 8);
    if (lock != v189)
    {
      lock = pas_segregated_page_switch_lock_slow(v65, lock, v189);
      v190 = v70 & 7;
      if (v190 < 2)
        goto LABEL_272;
LABEL_282:
      if (v190 != 4)
        goto LABEL_299;
      v283 = v8;
      v203 = v70 & 0xFFFFFFFFFFFFFFF8;
      v204 = v11;
      v205 = v65;
      v206 = v11[317];
      v207 = ((8 * *(unsigned __int16 *)((v70 & 0xFFFFFFFFFFFFFFF8) + 4)) | ((unint64_t)*(unsigned __int8 *)((v70 & 0xFFFFFFFFFFFFFFF8) + 6) << 19))
           + v206;
      v208 = *(unsigned __int8 *)(v203 + 9);
      v209 = *(unsigned __int16 *)(v203 + 7);
      v286 = *(_QWORD *)((*(_QWORD *)v207 & 0xFFFFFFFFFFFFFFFELL) + 8);
      v210 = v205;
      v211 = *(const os_unfair_lock **)(v205 + 8);
      if (v211)
        os_unfair_lock_assert_owner(v211);
      if (*(_DWORD *)(v207 + 24) == 1)
      {
        v212 = *(_QWORD *)(v210 + 24) == 0;
        v213 = *(_BYTE *)(v203 + 19);
        if ((v213 & 2) == 0)
          goto LABEL_290;
LABEL_287:
        *(_BYTE *)(v203 + 19) = v213 & 0xFC;
        --*(_DWORD *)(v207 + 24);
        pas_segregated_directory_view_did_become_eligible_at_index(((8 * v209) | (v208 << 19)) + v206, *(unsigned __int8 *)(v203 + 16));
        v8 = v283;
        v11 = v204;
        if (v212)
          goto LABEL_291;
        goto LABEL_299;
      }
      v212 = 0;
      v213 = *(_BYTE *)(v203 + 19);
      if ((v213 & 2) != 0)
        goto LABEL_287;
LABEL_290:
      *(_BYTE *)(v203 + 19) = v213 & 0xFE;
      --*(_DWORD *)(v207 + 24);
      v8 = v283;
      v11 = v204;
      if (!v212)
        goto LABEL_299;
LABEL_291:
      v214 = v206 & 5 | 2;
      if (v214 == 3)
      {
        v215 = ((8 * *(unsigned __int16 *)((v207 & 0xFFFFFFFFFFFFFFF8) + 16)) | ((unint64_t)*(unsigned __int8 *)((v207 & 0xFFFFFFFFFFFFFFF8) + 18) << 19))
             + v11[317];
      }
      else
      {
        if (v214 != 2)
        {
          v200 = 0;
          goto LABEL_297;
        }
        v215 = v207 & 0xFFFFFFFFFFFFFFF8;
      }
      v200 = *(_DWORD *)(v215 + 16) & 0x7FFFFFFF;
LABEL_297:
      v199 = v286;
      goto LABEL_298;
    }
    v190 = v70 & 7;
    if (v190 >= 2)
      goto LABEL_282;
LABEL_272:
    v191 = *(unsigned __int8 *)(v65 + 2);
    if (*(_BYTE *)(v65 + 2))
      *(_BYTE *)(v65 + 2) = 0;
    v192 = v70 & 0xFFFFFFFFFFFFFFF8;
    v193 = (8 * *(unsigned __int16 *)((v70 & 0xFFFFFFFFFFFFFFF8) + 8)) | ((unint64_t)*(unsigned __int8 *)((v70 & 0xFFFFFFFFFFFFFFF8) + 10) << 19);
    v194 = v11[317];
    v195 = v193 + v194;
    v196 = *(unsigned int *)(v192 + 12);
    v197 = v65;
    v198 = *(_QWORD *)(v65 + 24);
    *(_BYTE *)(v197 + 1) = 0;
    if (v191)
      pas_segregated_directory_view_did_become_eligible_at_index(v193 + v194, v196);
    if (!v198)
    {
      v199 = v195;
      v200 = v196;
LABEL_298:
      pas_segregated_directory_view_did_become_empty_at_index(v199, v200);
    }
LABEL_299:
    if (!v89)
    {
      v272 = lock;
      if (lock)
      {
        v276 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v277 = __ldxr(&v272->_os_unfair_lock_opaque);
          if (v277 != v276)
            break;
          if (!__stlxr(0, &v272->_os_unfair_lock_opaque))
            goto LABEL_376;
        }
        __clrex();
        os_unfair_lock_unlock(v272);
LABEL_376:
        lock = 0;
      }
LABEL_367:
      v271 = 0;
      v273 = 0;
      goto LABEL_370;
    }
    v83 = v89 & 0xFFFFFFFFFFFFFFF8;
    if ((v89 & 6) == 0)
    {
      if (off_1EE342948)
      {
        v220 = (*(_QWORD *)v83 >> 14) ^ ((*(_QWORD *)v83 >> 14) >> 4);
        v221 = ((v220 ^ 0xDEADBEEF) + 32 * v220) ^ (((v220 ^ 0xDEADBEEF) + 32 * v220) >> 11);
        v222 = (char *)off_1EE342948 + 32;
        v223 = v221 & *((_DWORD *)off_1EE342948 + 3);
        v224 = *((_QWORD *)off_1EE342948 + 2 * v223 + 4);
        if (v224 == *(_QWORD *)v83)
        {
          v10 = (_QWORD *)(a1 + 32);
          v12 = (_DWORD *)&unk_1ECF57000;
          v225 = v281;
LABEL_337:
          v65 = *(_QWORD *)&v222[16 * v223 + 8];
        }
        else
        {
          v250 = v221 + 1;
          v10 = (_QWORD *)(a1 + 32);
          v12 = (_DWORD *)&unk_1ECF57000;
          v225 = v281;
          while (v224 != -1)
          {
            v223 = *((_DWORD *)off_1EE342948 + 3) & v250;
            v224 = *(_QWORD *)&v222[16 * v223];
            ++v250;
            if (v224 == *(_QWORD *)v83)
              goto LABEL_337;
          }
          v65 = 0;
        }
      }
      else
      {
        v65 = 0;
        v10 = (_QWORD *)(a1 + 32);
        v12 = (_DWORD *)&unk_1ECF57000;
        v225 = v281;
      }
      pas_segregated_page_switch_lock_and_rebias_while_ineligible_impl(v65, &lock, v225);
      *(_BYTE *)(v65 + 1) = 1;
      *(_QWORD *)(v65 + 32) = v89 | 1;
      v71 = *(_QWORD *)(v65 - 16);
      v72 = v288;
      if (*(_QWORD *)(v65 + 24))
        goto LABEL_339;
      goto LABEL_82;
    }
    v216 = *(unsigned __int16 *)(v83 + 4) | ((unint64_t)*(unsigned __int8 *)(v83 + 6) << 16);
    v217 = v11[317] + 8 * v216;
    if (v216)
      v218 = v217 == 0;
    else
      v218 = 1;
    if (v218)
    {
      v219 = lock;
      if (lock)
      {
        v269 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v270 = __ldxr(&v219->_os_unfair_lock_opaque);
          if (v270 != v269)
            break;
          if (!__stlxr(0, &v219->_os_unfair_lock_opaque))
            goto LABEL_364;
        }
        __clrex();
        os_unfair_lock_unlock(v219);
LABEL_364:
        lock = 0;
      }
      v10 = (_QWORD *)(a1 + 32);
      v12 = (_DWORD *)&unk_1ECF57000;
      v13 = (_BYTE *)&unk_1ECF57000;
      if (!jit_small_segregated_page_config_specialized_local_allocator_start_allocating_in_primordial_partial_view(a1, v89 & 0xFFFFFFFFFFFFFFF8, (uint64_t)v288))goto LABEL_367;
LABEL_342:
      v258 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v258)
        goto LABEL_365;
      goto LABEL_343;
    }
    v226 = *(_QWORD *)v217;
    if ((*(_QWORD *)v217 & 1) != 0)
      v226 = *(_QWORD *)(v226 & 0xFFFFFFFFFFFFFFFELL);
    if (!off_1EE342948)
      goto LABEL_320;
    v227 = (v226 >> 14) ^ ((v226 >> 14) >> 4);
    v228 = ((v227 ^ 0xDEADBEEF) + 32 * v227) ^ (((v227 ^ 0xDEADBEEF) + 32 * v227) >> 11);
    v229 = (char *)off_1EE342948 + 32;
    v230 = *((_DWORD *)off_1EE342948 + 3) & v228;
    v231 = *((_QWORD *)off_1EE342948 + 2 * v230 + 4);
    if (v231 != v226)
    {
      v232 = v228 + 1;
      while (v231 != -1)
      {
        v230 = *((_DWORD *)off_1EE342948 + 3) & v232;
        v231 = *(_QWORD *)&v229[16 * v230];
        ++v232;
        if (v231 == v226)
          goto LABEL_319;
      }
LABEL_320:
      v65 = 0;
      goto LABEL_321;
    }
LABEL_319:
    v65 = *(_QWORD *)&v229[16 * v230 + 8];
LABEL_321:
    v282 = v8;
    v233 = *(os_unfair_lock_s **)(v65 + 8);
    if (lock != v233)
      lock = pas_segregated_page_switch_lock_slow(v65, lock, v233);
    *(_BYTE *)(v83 + 19) |= 1u;
    ++*(_DWORD *)(v217 + 24);
    v103 = *(_BYTE *)(v83 + 19) & 0xFB;
LABEL_324:
    *(_BYTE *)(v83 + 19) = v103;
    v234 = v65;
    v235 = *(_QWORD *)(v65 - 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    v236 = v83 | 4;
    v237 = *(unsigned int *)(v83 + 12);
    v238 = v11[317];
    v239 = *(unsigned __int8 *)(v83 + 18);
    v240 = *(unsigned __int8 *)(v83 + 17);
    v241 = (v240 + v239);
    *(_QWORD *)(a1 + 48) = v236;
    *(_DWORD *)(a1 + 32) = v239 >> 1;
    *(_DWORD *)(a1 + 36) = (v241 + 1) >> 1;
    bzero((char *)v284 + 8 * (v239 >> 1), (4 * (v241 - (v239 & 0xFE)) + 4) & 0x3FFFFFFF8);
    v242 = 0;
    *(_QWORD *)(a1 + 24) = v235 + (v239 >> 1 << 10);
    if (v239 < v241)
    {
      v242 = 0;
      v243 = (int *)v284 + v239;
      v244 = (int *)(v234 + 4 * v239 + 44);
      v245 = (int *)(v238 + v237 + 4 * v239);
      do
      {
        v247 = *v245++;
        v246 = v247;
        v248 = *v244;
        *v243++ = v247 & ~*v244;
        *v244++ = v248 | v247;
        if (v248)
          v249 = 1;
        else
          v249 = v246 == 0;
        if (!v249)
          ++v242;
        --v240;
      }
      while (v240);
    }
    *(_QWORD *)(a1 + 40) = __rbit64(*(_QWORD *)(a1 + 8 * (v239 >> 1) + 56));
    *(_BYTE *)(a1 + 6) = 1;
    *(_QWORD *)(v234 + 24) += v242;
    v8 = v282;
    v10 = (_QWORD *)(a1 + 32);
    v11 = (_QWORD *)&unk_1ECF57000;
    v12 = (_DWORD *)&unk_1ECF57000;
    v13 = (_BYTE *)&unk_1ECF57000;
LABEL_341:
    v257 = lock;
    if (!lock)
      goto LABEL_342;
    v267 = *(_DWORD *)(StatusReg + 24);
    while (1)
    {
      v268 = __ldxr(&v257->_os_unfair_lock_opaque);
      if (v268 != v267)
        break;
      if (!__stlxr(0, &v257->_os_unfair_lock_opaque))
        goto LABEL_356;
    }
    __clrex();
    os_unfair_lock_unlock(v257);
LABEL_356:
    lock = 0;
    v258 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v258)
    {
LABEL_365:
      *(_DWORD *)(a1 + 16) = v258 - *(_DWORD *)(a1 + 20);
      v271 = *(_QWORD *)(a1 + 8) - v258;
      goto LABEL_369;
    }
LABEL_343:
    v259 = *(_QWORD *)(a1 + 40);
    v260 = *(_QWORD *)(a1 + 24);
    if (v259)
      break;
    if (*(_BYTE *)(a1 + 5) == 10)
    {
      v261 = *(_DWORD *)(a1 + 36);
      v262 = *(unsigned int *)v10;
      if (v262 < v261)
      {
        *(_QWORD *)(a1 + 8 * v262 + 56) = 0;
        v263 = (unint64_t *)(a1 + 64 + 8 * v262);
        v264 = v261 - 1 - v262;
        while (v264)
        {
          v260 += 1024;
          v266 = *v263++;
          v265 = v266;
          LODWORD(v262) = v262 + 1;
          --v264;
          if (v266)
          {
            v259 = __rbit64(v265);
            *(_DWORD *)(a1 + 32) = v262;
            *(_QWORD *)(a1 + 24) = v260;
            goto LABEL_368;
          }
        }
        v10 = (_QWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v261;
        v12 = (_DWORD *)&unk_1ECF57000;
        v13 = (_BYTE *)&unk_1ECF57000;
      }
    }
  }
LABEL_368:
  v274 = __clz(v259);
  *(_QWORD *)(a1 + 40) = v259 & ~(0x8000000000000000 >> v274);
  v271 = v260 + 16 * v274;
LABEL_369:
  v273 = 1;
LABEL_370:
  *(_BYTE *)a1 = 0;
  return v8(v271, v273);
}

