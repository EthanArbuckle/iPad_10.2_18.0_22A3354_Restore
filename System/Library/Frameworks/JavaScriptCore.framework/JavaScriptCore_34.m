void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::evaluateOnCallFrame(uint64_t a1@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, _BYTE *a5@<X4>, _BYTE *a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X7>, uint64_t a9@<X8>, _BYTE *a10)
{
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void (**v40)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v41;
  _QWORD *v42;

  Inspector::InjectedScriptManager::injectedScriptForObjectId(*(Inspector::InjectedScriptManager **)(a1 + 48), a2, &v40);
  if (v42 && *v42)
  {
    Inspector::InspectorDebuggerAgent::evaluateOnCallFrame((_QWORD *)(a1 - 16), (uint64_t)&v40, a2, a3, a4, a5, a6, a7, a9, a8, a10);
  }
  else
  {
    v26 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v26 = 0x2D00000002;
    *(_QWORD *)(v26 + 8) = "Missing injected script for given callFrameId";
    *(_DWORD *)(v26 + 16) = 4;
    *(_QWORD *)a9 = v26;
    *(_DWORD *)(a9 + 24) = 1;
  }
  v40 = &off_1E3591350;
  if (v42)
  {
    v36 = v42 - 2;
    v37 = *(_QWORD *)(((unint64_t)(v42 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v38 = (uint64_t *)*(v42 - 1);
    if (v38)
    {
      v39 = *v36;
      *v38 = *v36;
      *(_QWORD *)(v39 + 8) = v38;
      *v36 = 0;
      v36[1] = 0;
    }
    *v36 = *(_QWORD *)(v37 + 40);
    *(_QWORD *)(v37 + 40) = v36;
    v42 = 0;
  }
  v27 = v41;
  v41 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
}

void Inspector::InspectorDebuggerAgent::setShouldBlackboxURL(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, StringView a4@<X4:X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  BOOL v15;
  int v16;
  BOOL v17;
  int v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  WTF *v26;
  BOOL v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _WORD *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  WTF *v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  int v82;
  unint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _WORD *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  int *v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  WTF::StringImpl *v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  StringView v134;
  StringView v135;
  StringView v136;
  StringView v137;

  v9 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || (v12 = *(unsigned int *)(v9 + 4), !(_DWORD)v12))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v10 = 0x1500000002;
    v11 = "URL must not be empty";
LABEL_3:
    *(_QWORD *)(v10 + 8) = v11;
    *(_DWORD *)(v10 + 16) = 4;
    *(_QWORD *)a8 = v10;
    *(_BYTE *)(a8 + 8) = 1;
    return;
  }
  v13 = (int)a3;
  if (*((_BYTE *)a4.m_characters + 1))
    v15 = *(_BYTE *)a4.m_characters == 0;
  else
    v15 = 1;
  v16 = !v15;
  if (*(_BYTE *)(*(_QWORD *)&a4.m_length + 1))
    v17 = **(_BYTE **)&a4.m_length == 0;
  else
    v17 = 1;
  v18 = !v17;
  if ((v16 & 1) != 0 || v18)
    goto LABEL_26;
  v19 = a2;
  v134.m_characters = (void *)(v12 | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32));
  *(_QWORD *)&v134.m_length = "__InjectedScript_";
  a4.m_characters = (void *)0x100000011;
  v20 = WTF::startsWith(*(int8x16_t **)(v9 + 8), v134, a4);
  v9 = *(_QWORD *)v19;
  if (v20)
  {
    if (!v9)
      goto LABEL_27;
    LODWORD(v135.m_characters) = *(_DWORD *)(v9 + 4);
    HIDWORD(v135.m_characters) = (*(_DWORD *)(v9 + 16) >> 2) & 1;
    *(_QWORD *)&v135.m_length = ".js";
    a4.m_characters = (void *)0x100000003;
    if (WTF::endsWith(*(WTF **)(v9 + 8), v135, a4))
    {
      v10 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v10 = 0x5600000002;
      v11 = "Blackboxing of internal scripts is controlled by 'Debugger.setPauseForInternalScripts'";
      goto LABEL_3;
    }
    v9 = *(_QWORD *)v19;
  }
  if (v9)
LABEL_26:
    *(_DWORD *)v9 += 2;
LABEL_27:
  v131 = (WTF::StringImpl *)v9;
  v132 = v16;
  v133 = v18;
  if (!v13)
  {
    v36 = *(_QWORD *)(a1 + 80);
    v37 = *(unsigned int *)(a1 + 92);
    v38 = v36 + 16 * v37;
    if ((_DWORD)v37)
    {
      v39 = 0;
      v40 = v36 + 16 * v37;
      v41 = v40;
      do
      {
        v42 = *(WTF **)v36;
        a2 = v131;
        if (*(WTF::StringImpl **)v36 == v131
          || (v42 ? (v43 = v131 == 0) : (v43 = 1), !v43 && WTF::equal(v42, v131, a3)))
        {
          if (*(unsigned __int8 *)(v36 + 8) == v132 && *(unsigned __int8 *)(v36 + 9) == v133)
          {
            v44 = v36;
            if (v41 != *(_QWORD *)(a1 + 80) + 16 * *(unsigned int *)(a1 + 92))
            {
              if (v40 == v36)
              {
                v44 = v41;
              }
              else
              {
                if (v40 <= v41)
                {
                  v57 = 0;
                  v70 = (uint64_t)(v36 - v40) >> 4;
                  do
                  {
                    v58 = v36 + v57;
                    v59 = v41 + v36 - v40 + v57;
                    v60 = *(_QWORD *)(v36 + v57 - 16);
                    *(_QWORD *)(v58 - 16) = 0;
                    *(_QWORD *)(v59 - 16) = v60;
                    *(_WORD *)(v59 - 8) = *(_WORD *)(v36 + v57 - 8);
                    v61 = *(WTF::StringImpl **)(v36 + v57 - 16);
                    *(_QWORD *)(v58 - 16) = 0;
                    if (v61)
                    {
                      if (*(_DWORD *)v61 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v61, a2, (uint64_t)a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
                        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
                      }
                      else
                      {
                        *(_DWORD *)v61 -= 2;
                      }
                    }
                    v57 -= 16;
                  }
                  while (v36 + v57 != v40);
                }
                else
                {
                  v45 = v41;
                  v46 = v40;
                  do
                  {
                    v47 = *(WTF::StringImpl **)v46;
                    *(_QWORD *)v46 = 0;
                    *(_QWORD *)v45 = v47;
                    *(_WORD *)(v45 + 8) = *(_WORD *)(v46 + 8);
                    v48 = *(WTF::StringImpl **)v46;
                    *(_QWORD *)v46 = 0;
                    if (v48)
                    {
                      if (*(_DWORD *)v48 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v48, a2, (uint64_t)a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
                        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
                      }
                      else
                      {
                        *(_DWORD *)v48 -= 2;
                      }
                    }
                    v46 += 16;
                    v45 += 16;
                  }
                  while (v46 != v36);
                  v70 = (uint64_t)(v36 - v40) >> 4;
                }
                v44 = v41 + 16 * v70;
              }
            }
            v71 = *(WTF::StringImpl **)v36;
            *(_QWORD *)v36 = 0;
            v40 = v36 + 16;
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
              {
                WTF::StringImpl::~StringImpl(v71, a2, (uint64_t)a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
                WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
              }
              else
              {
                *(_DWORD *)v71 -= 2;
              }
            }
            ++v39;
            v41 = v44;
          }
        }
        v36 += 16;
      }
      while (v36 < v38);
      v36 = *(_QWORD *)(a1 + 80);
      v80 = *(unsigned int *)(a1 + 92);
      v38 = v41;
    }
    else
    {
      v80 = 0;
      v39 = 0;
      v40 = v38;
    }
    v83 = v36 + 16 * v80;
    if (v40 != v83)
    {
      if (v40 <= v38)
      {
        v94 = (_WORD *)(((v83 - v40) & 0xFFFFFFFFFFFFFFF0) + v38 - 8);
        do
        {
          v95 = *(_QWORD *)(v83 - 16);
          v83 -= 16;
          *(_QWORD *)v83 = 0;
          *((_QWORD *)v94 - 1) = v95;
          *v94 = *(_WORD *)(v83 + 8);
          v96 = *(WTF::StringImpl **)v83;
          *(_QWORD *)v83 = 0;
          if (v96)
          {
            if (*(_DWORD *)v96 == 2)
            {
              WTF::StringImpl::~StringImpl(v96, a2, (uint64_t)a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
              WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
            }
            else
            {
              *(_DWORD *)v96 -= 2;
            }
          }
          v94 -= 8;
        }
        while (v83 != v40);
      }
      else
      {
        do
        {
          v84 = *(WTF::StringImpl **)v40;
          *(_QWORD *)v40 = 0;
          *(_QWORD *)v38 = v84;
          *(_WORD *)(v38 + 8) = *(_WORD *)(v40 + 8);
          v85 = *(WTF::StringImpl **)v40;
          *(_QWORD *)v40 = 0;
          if (v85)
          {
            if (*(_DWORD *)v85 == 2)
            {
              WTF::StringImpl::~StringImpl(v85, a2, (uint64_t)a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
              WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
            }
            else
            {
              *(_DWORD *)v85 -= 2;
            }
          }
          v40 += 16;
          v38 += 16;
        }
        while (v40 != v83);
      }
    }
    v82 = *(_DWORD *)(a1 + 92) - v39;
    goto LABEL_100;
  }
  v21 = (uint64_t *)(a1 + 80);
  LODWORD(v22) = *(_DWORD *)(a1 + 92);
  if (!(_DWORD)v22)
  {
LABEL_39:
    if ((_DWORD)v22 == *(_DWORD *)(a1 + 88))
    {
      v28 = (_QWORD *)WTF::Vector<Inspector::InspectorDebuggerAgent::BlackboxConfig,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 80, v22 + 1, (unint64_t)&v131);
      v31 = (_DWORD *)*v28;
      v29 = (unsigned __int8 *)(v28 + 1);
      v30 = v31;
      v32 = *(unsigned int *)(a1 + 92);
      v33 = *(_QWORD *)(a1 + 80);
      if (v31)
        *v30 += 2;
      v34 = (_QWORD *)(v33 + 16 * v32);
      *v34 = v30;
      v35 = v34 + 1;
    }
    else
    {
      v29 = &v132;
      v81 = (_QWORD *)(*v21 + 16 * v22);
      if (v9)
        *(_DWORD *)v9 += 2;
      *v81 = v9;
      v35 = v81 + 1;
    }
    *v35 = *(_WORD *)v29;
    v82 = *(_DWORD *)(a1 + 92) + 1;
LABEL_100:
    *(_DWORD *)(a1 + 92) = v82;
    goto LABEL_101;
  }
  v23 = 0;
  v24 = 0;
  while (1)
  {
    v25 = *v21;
    v26 = *(WTF **)(*v21 + v23);
    if (v26 == (WTF *)v9
      || (v26 ? (v27 = v9 == 0) : (v27 = 1), !v27 && WTF::equal(v26, (const WTF::StringImpl *)v9, a3)))
    {
      if (*(unsigned __int8 *)(v25 + v23 + 8) == v16 && *(unsigned __int8 *)(v25 + v23 + 9) == v18)
        break;
    }
    ++v24;
    v22 = *(unsigned int *)(a1 + 92);
    v23 += 16;
    if (v24 >= v22)
      goto LABEL_39;
  }
LABEL_101:
  v105 = *(_QWORD *)(a1 + 72);
  if (v105)
  {
    v106 = *(unsigned int *)(v105 - 4);
    v107 = (int *)(v105 + 72 * v106);
    if (*(_DWORD *)(v105 - 12))
    {
      v108 = *(int **)(a1 + 72);
      if ((_DWORD)v106)
      {
        v109 = 72 * v106;
        v108 = *(int **)(a1 + 72);
        while ((*v108 + 1) <= 1)
        {
          v108 += 18;
          v109 -= 72;
          if (!v109)
          {
            v108 = v107;
            goto LABEL_111;
          }
        }
      }
      goto LABEL_111;
    }
    v108 = (int *)(v105 + 72 * v106);
  }
  else
  {
    v108 = 0;
    LODWORD(v106) = 0;
  }
  v107 = (int *)(v105 + 72 * v106);
LABEL_111:
  if (v105)
    v110 = (int *)(v105 + 72 * *(unsigned int *)(v105 - 4));
  else
    v110 = 0;
  while (v108 != v110)
  {
    v112 = (uint64_t *)(v108 + 6);
    v111 = *((_QWORD *)v108 + 3);
    if (!v111)
      goto LABEL_136;
    LODWORD(v136.m_characters) = *(_DWORD *)(v111 + 4);
    HIDWORD(v136.m_characters) = (*(_DWORD *)(v111 + 16) >> 2) & 1;
    *(_QWORD *)&v136.m_length = "__InjectedScript_";
    a4.m_characters = (void *)0x100000011;
    if (!WTF::startsWith(*(int8x16_t **)(v111 + 8), v136, a4)
      || (v113 = *v112) == 0
      || (LODWORD(v137.m_characters) = *(_DWORD *)(v113 + 4),
          HIDWORD(v137.m_characters) = (*(_DWORD *)(v113 + 16) >> 2) & 1,
          *(_QWORD *)&v137.m_length = ".js",
          a4.m_characters = (void *)0x100000003,
          !WTF::endsWith(*(WTF **)(v113 + 8), v137, a4)))
    {
LABEL_136:
      if ((Inspector::InspectorDebuggerAgent::shouldBlackboxURL((Inspector::InspectorDebuggerAgent *)a1, (const WTF::String *)(v108 + 6), (uint64_t)a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7) & 1) != 0|| Inspector::InspectorDebuggerAgent::shouldBlackboxURL((Inspector::InspectorDebuggerAgent *)a1, (const WTF::String *)(v108 + 2), v114, v115, v116, v117, v118, v119))
      {
        v120 = 0x100000000;
      }
      else
      {
        v120 = 0;
      }
      JSC::Debugger::setBlackboxType(*(_QWORD *)(a1 + 56), *v108, v120);
    }
    v121 = v108 + 18;
    v108 = v107;
    if (v121 != v107)
    {
      v108 = v121;
      while ((*v108 + 1) <= 1)
      {
        v108 += 18;
        if (v108 == v107)
        {
          v108 = v107;
          break;
        }
      }
    }
  }
  *(_BYTE *)a8 = 0;
  *(_BYTE *)(a8 + 8) = 0;
  v122 = v131;
  v131 = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
    {
      WTF::StringImpl::~StringImpl(v122, a2, (uint64_t)a3, (uint64_t)a4.m_characters, *(uint64_t *)&a4.m_length, a5, a6, a7);
      WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
    }
    else
    {
      *(_DWORD *)v122 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::setShouldBlackboxURL(uint64_t a1@<X0>, WTF::StringImpl *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  Inspector::InspectorDebuggerAgent::setShouldBlackboxURL(a1 - 16, a2, a3, *(StringView *)&a4, a5, a6, a7, a8);
}

uint64_t Inspector::InspectorDebuggerAgent::setBlackboxBreakpointEvaluations@<X0>(uint64_t this@<X0>, __int16 a2@<W1>, _BYTE *a3@<X8>)
{
  *(_WORD *)(*(_QWORD *)(this + 56) + 48) = *(_WORD *)(*(_QWORD *)(this + 56) + 48) & 0xFFFE | a2;
  *a3 = 0;
  a3[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'Inspector::InspectorDebuggerAgent::setBlackboxBreakpointEvaluations@<X0>(uint64_t this@<X0>, __int16 a2@<W1>, _BYTE *a3@<X8>)
{
  *(_WORD *)(*(_QWORD *)(this + 40) + 48) = *(_WORD *)(*(_QWORD *)(this + 40) + 48) & 0xFFFE | a2;
  *a3 = 0;
  a3[8] = 0;
  return this;
}

void Inspector::InspectorDebuggerAgent::scriptExecutionBlockedByCSP(Inspector::InspectorDebuggerAgent *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  WTF::AtomStringImpl *v14;
  JSC::Wasm::NameSection *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF *v26;
  WTF::StringImpl *v27;
  int v28;
  int v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD **v48;
  uint64_t v49;
  _DWORD *v50;
  WTF::StringImpl *v51;
  WTF *v52;
  WTF *v53[2];
  char v54;

  v2 = *((_QWORD *)this + 7);
  if ((*(_WORD *)(v2 + 48) & 0x40) == 0 || *(_OWORD *)(v2 + 152) == 0)
    return;
  v5 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v5 = 0x500000001;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x900000002;
  *(_QWORD *)(v6 + 8) = "directive";
  *(_DWORD *)(v6 + 16) = 4;
  v51 = (WTF::StringImpl *)v6;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  v13 = *(_DWORD **)a2;
  *((_QWORD *)v7 + 1) = *(_QWORD *)a2;
  if (v13)
    *v13 += 2;
  v52 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v5 + 16), (WTF::AtomStringImpl *)&v51, (const WTF::StringImpl *)&v52, v8, v9, v10, v11, v12, (uint64_t)v53);
  if (v54)
  {
    v22 = (uint64_t *)(v5 + 24);
    v23 = *(unsigned int *)(v5 + 36);
    if ((_DWORD)v23 == *(_DWORD *)(v5 + 32))
    {
      v48 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v23 + 1, (unint64_t)&v51);
      v23 = *(unsigned int *)(v5 + 36);
      v49 = *(_QWORD *)(v5 + 24);
      v50 = *v48;
      if (*v48)
        *v50 += 2;
      *(_QWORD *)(v49 + 8 * v23) = v50;
    }
    else
    {
      v24 = *v22;
      v25 = v51;
      if (v51)
        *(_DWORD *)v51 += 2;
      *(_QWORD *)(v24 + 8 * v23) = v25;
    }
    *(_DWORD *)(v5 + 36) = v23 + 1;
  }
  v26 = v52;
  v52 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
      WTF::JSONImpl::Value::operator delete(v26, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
    else
      --*(_DWORD *)v26;
  }
  v27 = v51;
  v51 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  if (*(_DWORD *)(v5 + 4) != 5)
  {
    __break(0xC471u);
    return;
  }
  v28 = *(_DWORD *)v5;
  *(_DWORD *)v5 += 2;
  if (v28 == -1)
  {
    WTF::JSONImpl::Value::operator delete((WTF *)v5, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
    v28 = *(_DWORD *)v5 - 1;
    if (*(_DWORD *)v5 != 1)
      goto LABEL_20;
  }
  else
  {
    *(_DWORD *)v5 = v28 + 1;
    if (v28)
    {
LABEL_20:
      *(_DWORD *)v5 = v28;
      goto LABEL_21;
    }
  }
  WTF::JSONImpl::Value::operator delete((WTF *)v5, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
LABEL_21:
  v53[0] = 0;
  v29 = *((_DWORD *)this + 39);
  if (v29 != 302)
  {
    *((_DWORD *)this + 42) = v29;
    v30 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    v31 = (WTF *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v30;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::JSONImpl::Value::operator delete(v31, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
      else
        --*(_DWORD *)v31;
    }
  }
  *((_DWORD *)this + 39) = 298;
  v32 = (WTF *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v5;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
      WTF::JSONImpl::Value::operator delete(v32, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
    else
      --*(_DWORD *)v32;
  }
  JSC::Debugger::breakProgram(*((_QWORD *)this + 7), (WTF::AtomStringImpl *)v53, v15, v16, v17, v18, v19, v20, v21);
  if (v53[0])
    WTF::RefCounted<JSC::Breakpoint>::deref(v53[0], v33, v34, v35, v36, v37, v38, v39);
}

double Inspector::InspectorDebuggerAgent::currentCallFrames@<D0>(Inspector::InspectorDebuggerAgent *this@<X0>, const Inspector::InjectedScript *a2@<X1>, WTF **a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  double result;
  WTF *v8;

  v4 = (_QWORD *)*((_QWORD *)a2 + 3);
  if (v4 && *v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 14);
    if (v5)
      v6 = *v5;
    else
      v6 = 0;
    Inspector::InjectedScript::wrapCallFrames((uint64_t)a2, v6, a3);
  }
  else
  {
    v8 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)&result = 0x600000001;
    *(_QWORD *)v8 = 0x600000001;
    *((_QWORD *)v8 + 2) = 0;
    *((_QWORD *)v8 + 3) = 0;
    *a3 = v8;
  }
  return result;
}

void Inspector::InspectorDebuggerAgent::sourceMapURLForScript(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *(_DWORD **)(a1 + 24);
  if (v2)
    *v2 += 2;
  *a2 = v2;
}

uint64_t Inspector::InspectorDebuggerAgent::setPauseForInternalScripts@<X0>(uint64_t this@<X0>, int a2@<W1>, StringView a3@<X4:X3>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  StringView v17;
  StringView v18;

  if (*(unsigned __int8 *)(this + 250) == a2)
    goto LABEL_30;
  v5 = this;
  *(_BYTE *)(this + 250) = a2;
  v6 = *(_QWORD *)(this + 72);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    v8 = v6 + 72 * v7;
    if (*(_DWORD *)(v6 - 12))
    {
      v9 = *(_QWORD *)(this + 72);
      if ((_DWORD)v7)
      {
        v10 = 72 * v7;
        v9 = *(_QWORD *)(this + 72);
        while ((*(_DWORD *)v9 + 1) <= 1)
        {
          v9 += 72;
          v10 -= 72;
          if (!v10)
          {
            v9 = v8;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v9 = v6 + 72 * v7;
  }
  else
  {
    v9 = 0;
    LODWORD(v7) = 0;
  }
  v8 = v6 + 72 * v7;
LABEL_12:
  if (v6)
    v11 = v6 + 72 * *(unsigned int *)(v6 - 4);
  else
    v11 = 0;
  if (v11 != v9)
  {
    v12 = 0x100000000;
    if (a2)
      v12 = 0;
    v13 = v12 | a2 ^ 1u;
    do
    {
      v14 = *(_QWORD *)(v9 + 24);
      if (v14)
      {
        LODWORD(v17.m_characters) = *(_DWORD *)(v14 + 4);
        HIDWORD(v17.m_characters) = (*(_DWORD *)(v14 + 16) >> 2) & 1;
        *(_QWORD *)&v17.m_length = "__InjectedScript_";
        a3.m_characters = (void *)0x100000011;
        this = WTF::startsWith(*(int8x16_t **)(v14 + 8), v17, a3);
        if ((_DWORD)this)
        {
          v15 = *(_QWORD *)(v9 + 24);
          if (v15)
          {
            LODWORD(v18.m_characters) = *(_DWORD *)(v15 + 4);
            HIDWORD(v18.m_characters) = (*(_DWORD *)(v15 + 16) >> 2) & 1;
            *(_QWORD *)&v18.m_length = ".js";
            a3.m_characters = (void *)0x100000003;
            this = WTF::endsWith(*(WTF **)(v15 + 8), v18, a3);
            if ((_DWORD)this)
              this = (uint64_t)JSC::Debugger::setBlackboxType(*(_QWORD *)(v5 + 56), *(_DWORD *)v9, v13);
          }
        }
      }
      v16 = v9 + 72;
      v9 = v8;
      if (v16 != v8)
      {
        v9 = v16;
        while ((*(_DWORD *)v9 + 1) <= 1)
        {
          v9 += 72;
          if (v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
      }
    }
    while (v9 != v11);
  }
LABEL_30:
  *a4 = 0;
  a4[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'Inspector::InspectorDebuggerAgent::setPauseForInternalScripts@<X0>(Inspector::InspectorDebuggerAgent *this@<X0>, int a2@<W1>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  return Inspector::InspectorDebuggerAgent::setPauseForInternalScripts((uint64_t)this - 16, a2, *(StringView *)&a3, a4);
}

const WTF::StringImpl *Inspector::InspectorDebuggerAgent::SymbolicBreakpoint::matches(Inspector::InspectorDebuggerAgent::SymbolicBreakpoint *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t i;
  const WTF::StringImpl *result;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  WTF *v17;
  unint64_t *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  JSC::Yarr::BytecodePattern *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  const WTF::StringImpl *v34;
  void *v35;
  unint64_t v36;
  const WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::Yarr::BytecodePattern *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void *v53;
  size_t v54;
  void *v55;
  size_t v56;
  WTF *v57[3];

  result = *a2;
  if (*a2)
  {
    if (*((_DWORD *)result + 1))
    {
      v12 = *((_QWORD *)this + 3);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 - 8);
        v14 = *((_DWORD *)result + 4);
        if (v14 < 0x100)
          v15 = WTF::StringImpl::hashSlowCase(result);
        else
          v15 = v14 >> 8;
        for (i = 0; ; v15 = i + v16)
        {
          v16 = v15 & v13;
          v17 = *(WTF **)(v12 + 8 * (v15 & v13));
          if (!v17)
            break;
          if (v17 != (WTF *)-1 && WTF::equal(v17, *a2, a3))
            return (const WTF::StringImpl *)1;
          i = (i + 1);
        }
      }
      v18 = (unint64_t *)((char *)this + 32);
      if (!*((_BYTE *)this + 40))
      {
        Inspector::ContentSearchUtilities::createRegularExpressionForSearchString(this, *((_BYTE *)this + 8), *((_BYTE *)this + 9) == 0, a4, a5, a6, a7, a8, (uint64_t *)v57);
        v23 = v57[0];
        if (*((_BYTE *)this + 40))
        {
          if (v57[0])
            ++*(_DWORD *)v57[0];
          i = *v18;
          *v18 = (unint64_t)v23;
          if (i)
          {
            if (*(_DWORD *)i == 1)
            {
              v24 = *(JSC::Yarr::BytecodePattern **)(i + 24);
              *(_QWORD *)(i + 24) = 0;
              if (v24)
              {
                JSC::Yarr::BytecodePattern::~BytecodePattern(v24, v19, v20, v21, v22, a6, a7, a8);
                WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
              }
              v33 = *(_QWORD **)(i + 8);
              if (v33)
                goto LABEL_44;
              goto LABEL_25;
            }
            --*(_DWORD *)i;
          }
        }
        else
        {
          if (v57[0])
            ++*(_DWORD *)v57[0];
          *((_QWORD *)this + 4) = v23;
          *((_BYTE *)this + 40) = 1;
        }
        while (1)
        {
          v57[0] = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
            {
              v43 = (JSC::Yarr::BytecodePattern *)*((_QWORD *)v23 + 3);
              *((_QWORD *)v23 + 3) = 0;
              if (v43)
              {
                JSC::Yarr::BytecodePattern::~BytecodePattern(v43, v19, v20, v21, v22, a6, a7, a8);
                WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
              }
              v52 = (_QWORD *)*((_QWORD *)v23 + 1);
              if (v52)
              {
                v53 = (void *)v52[5];
                v54 = v52[6];
                v52[5] = 0;
                v52[6] = 0;
                v52[4] = 0;
                if (munmap(v53, v54) == -1)
                {
                  __break(0xC471u);
                  goto LABEL_43;
                }
              }
              WTF::fastFree((unint64_t)v23, v19, v20, v21, v22, a6, a7, a8);
            }
            else
            {
              --*(_DWORD *)v23;
            }
          }
          v33 = (_QWORD *)*((unsigned __int8 *)this + 40);
          if (*((_BYTE *)this + 40))
            break;
LABEL_43:
          __break(1u);
LABEL_44:
          v55 = (void *)v33[5];
          v56 = v33[6];
          v33[5] = 0;
          v33[6] = 0;
          v33[4] = 0;
          result = (const WTF::StringImpl *)munmap(v55, v56);
          if ((_DWORD)result == -1)
          {
            __break(0xC471u);
            return result;
          }
LABEL_25:
          WTF::fastFree(i, v19, v20, v21, v22, a6, a7, a8);
          v23 = v57[0];
        }
      }
      v34 = *a2;
      if (*a2)
      {
        v35 = (void *)*((_QWORD *)v34 + 1);
        v36 = *((unsigned int *)v34 + 1) | ((unint64_t)((*((_DWORD *)v34 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v35 = 0;
        v36 = 0x100000000;
      }
      if (JSC::Yarr::RegularExpression::match((uint64_t *)this + 4, v35, v36, 0, 0, a6, a7, a8) != -1)
      {
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 3, a2, v37, v38, v39, v40, v41, v42, (uint64_t)v57);
        return (const WTF::StringImpl *)1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t Inspector::InspectorDebuggerAgent::didCreateNativeExecutable(JSC::NativeExecutable &)::$_1::operator()(uint64_t *a1, int a2)
{
  uint64_t v4;
  int v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::ExecutableMemoryHandle *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  JSC::ExecutableMemoryHandle *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  JSC::ExecutableMemoryHandle *v140;
  uint64_t v141;
  JSC::ExecutableMemoryHandle *v142;

  v4 = *a1;
  v5 = *(unsigned __int8 *)(*a1 + 5);
  v6 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance;
  if (a2)
  {
    if (v5 == 8)
      goto LABEL_7;
    v7 = *(_QWORD *)(v4 + 16);
  }
  else
  {
    if (v5 == 8)
      goto LABEL_7;
    v7 = *(_QWORD *)(v4 + 8);
  }
  if (!v7)
    v6 = 0;
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1986BADF8);
  }
LABEL_7:
  v8 = 16;
  if (!a2)
    v8 = 8;
  v9 = *(unsigned int **)(v4 + v8);
  v10 = v9 + 2;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v17 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
  if (!(_DWORD)v17)
    goto LABEL_59;
  if (a2 == 1)
  {
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1[1] + 90440), a1[1], (void (*)(uint64_t *__return_ptr, uint64_t))JSC::nativeConstructWithDebuggerHookGenerator, v12, v13, v14, v15, v16, &v141);
    v26 = v141;
    v25 = (unsigned int *)v142;
    v142 = 0;
    if (v25)
    {
      do
      {
        v29 = __ldaxr(v25);
        v28 = --v29 == 0;
      }
      while (__stlxr(v29, v25));
LABEL_19:
      if (v28)
      {
        atomic_store(1u, v25);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v25, v18, v19, v20, v21, v22, v23, v24);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
    }
  }
  else if (a2)
  {
    v26 = 0;
  }
  else
  {
    JSC::JITThunks::ctiStub(*(_QWORD *)(a1[1] + 90440), a1[1], (void (*)(uint64_t *__return_ptr, uint64_t))JSC::nativeCallWithDebuggerHookGenerator, v12, v13, v14, v15, v16, &v141);
    v26 = v141;
    v25 = (unsigned int *)v142;
    v142 = 0;
    if (v25)
    {
      do
      {
        v27 = __ldaxr(v25);
        v28 = --v27 == 0;
      }
      while (__stlxr(v27, v25));
      goto LABEL_19;
    }
  }
  v38 = 32;
  if (!a2)
    v38 = 24;
  v39 = *(_QWORD *)(*a1 + v38);
  if (v39 != (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v9 + 40))(v9, 1))
  {
    __break(0xC471u);
    JUMPOUT(0x1986BAE18);
  }
  v139 = v26;
  v140 = 0;
  (*(void (**)(uint64_t *__return_ptr, unsigned int *, uint64_t *))(*(_QWORD *)v9 + 16))(&v141, v9, &v139);
  v47 = (unsigned int *)v140;
  v140 = 0;
  if (v47)
  {
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v47);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v47, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
  }
  v50 = *a1;
  v51 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v9 + 40))(v9, 1);
  v59 = 32;
  if (!a2)
    v59 = 24;
  v60 = *(_QWORD *)(v50 + v59);
  *(_QWORD *)(v50 + v59) = v51;
  if (a2 == 1)
  {
    v73 = *(_QWORD *)a1[3];
    v74 = v142;
    v142 = 0;
    v75 = *(unsigned int **)(v73 + 48);
    *(_QWORD *)(v73 + 40) = v141;
    *(_QWORD *)(v73 + 48) = v74;
    if (v75)
    {
      do
      {
        v76 = __ldaxr(v75);
        v77 = v76 - 1;
      }
      while (__stlxr(v77, v75));
      if (!v77)
      {
        atomic_store(1u, v75);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v75, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
      }
    }
    *(_QWORD *)(*(_QWORD *)a1[3] + 56) = v60;
    v78 = *(_QWORD *)(*(_QWORD *)a1[3] + 40);
    v79 = *(_QWORD *)(a1[1] + 90440);
    v81 = *(_QWORD *)(v79 + 72);
    v80 = *(unsigned int **)(v79 + 80);
    if (v80)
    {
      do
        v82 = __ldaxr(v80);
      while (__stlxr(v82 + 1, v80));
      do
      {
        v83 = __ldaxr(v80);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v80));
      if (!v84)
      {
        atomic_store(1u, v80);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v80, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
      }
    }
    if (v78 != v81)
    {
LABEL_67:
      __break(0xC471u);
      JUMPOUT(0x1986BACCCLL);
    }
  }
  else if (!a2)
  {
    v61 = *(_QWORD *)a1[3];
    v62 = v142;
    v142 = 0;
    v63 = *(unsigned int **)(v61 + 24);
    *(_QWORD *)(v61 + 16) = v141;
    *(_QWORD *)(v61 + 24) = v62;
    if (v63)
    {
      do
      {
        v64 = __ldaxr(v63);
        v65 = v64 - 1;
      }
      while (__stlxr(v65, v63));
      if (!v65)
      {
        atomic_store(1u, v63);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v63, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
      }
    }
    *(_QWORD *)(*(_QWORD *)a1[3] + 32) = v60;
    v66 = *(_QWORD *)(*(_QWORD *)a1[3] + 16);
    v67 = *(_QWORD *)(a1[1] + 90440);
    v69 = *(_QWORD *)(v67 + 56);
    v68 = *(unsigned int **)(v67 + 64);
    if (v68)
    {
      do
        v70 = __ldaxr(v68);
      while (__stlxr(v70 + 1, v68));
      do
      {
        v71 = __ldaxr(v68);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v68));
      if (!v72)
      {
        atomic_store(1u, v68);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v68, v52, v53, v54, v55, v56, v57, v58);
        WTF::fastFree(v115, v116, v117, v118, v119, v120, v121, v122);
      }
    }
    if (v66 != v69)
      goto LABEL_67;
  }
  v85 = (unsigned int *)v142;
  v142 = 0;
  if (v85)
  {
    do
    {
      v86 = __ldaxr(v85);
      v87 = v86 - 1;
    }
    while (__stlxr(v87, v85));
    if (!v87)
    {
      atomic_store(1u, v85);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v85, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
  }
  do
  {
LABEL_59:
    v88 = __ldaxr(v10);
    v89 = v88 - 1;
  }
  while (__stlxr(v89, v10));
  if (!v89)
  {
    atomic_store(1u, v9 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 32))(v9);
  }
  return v17;
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::didCreateNativeExecutable(Inspector::InspectorDebuggerAgent *this, JSC::NativeExecutable *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorDebuggerAgent::didCreateNativeExecutable((Inspector::InspectorDebuggerAgent *)((char *)this - 32), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::InspectorDebuggerAgent::willCallNativeExecutable(Inspector::InspectorDebuggerAgent *this, JSC::CallFrame *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int *v14;
  uint64_t v15;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int i;
  int v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  JSC::Wasm::NameSection *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  WTF *v49;
  int v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD **v70;
  uint64_t v71;
  _DWORD *v72;
  WTF::StringImpl *v73;
  WTF *v74;
  WTF *v75[2];
  char v76;

  if ((*(_WORD *)(*((_QWORD *)this + 7) + 48) & 0x40) == 0)
    return;
  v9 = *((unsigned int *)this + 61);
  if (!(_DWORD)v9)
    return;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFFFE000000000007) == 3)
    return;
  v11 = *((_QWORD *)a2 + 2);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 64);
    if (v12)
      v13 = *(_BYTE *)(v12 + 5) == 12;
    else
      v13 = 0;
    if (!v13)
      return;
    v14 = *(int **)(*(_QWORD *)(v12 + 88) + 80);
    if (!v14)
      return;
  }
  else
  {
    if (!v10 || *(_BYTE *)(v10 + 5) != 26)
      return;
    v15 = *(_QWORD *)(v10 + 24);
    if ((v15 & 1) != 0)
      v15 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (!v15 || *(_BYTE *)(v15 + 5) != 8)
      return;
    v14 = *(int **)(v15 + 64);
    if (!v14)
      return;
  }
  v17 = *v14;
  v18 = v14[1];
  *v14 += 2;
  if (v18)
  {
    v19 = 0;
    while (1)
    {
      v20 = *(_QWORD *)(*((_QWORD *)this + 29) + 48 * v19 + 24);
      if (v20)
        break;
LABEL_33:
      if (++v19 >= v9)
        goto LABEL_60;
    }
    v21 = *(_DWORD *)(v20 - 8);
    v22 = v14[4];
    if (v22 < 0x100)
      v23 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v14);
    else
      v23 = v22 >> 8;
    for (i = 0; ; v23 = i + v25)
    {
      v25 = v23 & v21;
      v26 = *(WTF **)(v20 + 8 * (v23 & v21));
      if (!v26)
      {
        v9 = *((unsigned int *)this + 61);
        goto LABEL_33;
      }
      if (v26 != (WTF *)-1 && WTF::equal(v26, (const WTF::StringImpl *)v14, a3))
        break;
      ++i;
    }
    v27 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v27 = 0x500000001;
    *(_QWORD *)(v27 + 24) = 0;
    *(_QWORD *)(v27 + 32) = 0;
    *(_QWORD *)(v27 + 16) = 0;
    v28 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v28 = 0x400000002;
    *(_QWORD *)(v28 + 8) = "name";
    *(_DWORD *)(v28 + 16) = 4;
    v73 = (WTF::StringImpl *)v28;
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v29 = 0x400000001;
    *((_QWORD *)v29 + 1) = v14;
    *v14 += 2;
    v74 = v29;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v27 + 16), (WTF::AtomStringImpl *)&v73, (const WTF::StringImpl *)&v74, v30, v31, v32, v33, v34, (uint64_t)v75);
    if (v76)
    {
      v43 = (uint64_t *)(v27 + 24);
      v44 = *(unsigned int *)(v27 + 36);
      if ((_DWORD)v44 == *(_DWORD *)(v27 + 32))
      {
        v70 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v73);
        v44 = *(unsigned int *)(v27 + 36);
        v71 = *(_QWORD *)(v27 + 24);
        v72 = *v70;
        if (*v70)
          *v72 += 2;
        *(_QWORD *)(v71 + 8 * v44) = v72;
      }
      else
      {
        v45 = *v43;
        v46 = v73;
        if (v73)
          *(_DWORD *)v73 += 2;
        *(_QWORD *)(v45 + 8 * v44) = v46;
      }
      *(_DWORD *)(v27 + 36) = v44 + 1;
    }
    v47 = v74;
    v74 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 1)
        WTF::JSONImpl::Value::operator delete(v47, v35, (uint64_t)v36, v37, v38, v39, v40, v41);
      else
        --*(_DWORD *)v47;
    }
    v48 = v73;
    v73 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v35, (uint64_t)v36, v37, v38, v39, v40, v41);
        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
    if (v19 < *((unsigned int *)this + 61))
    {
      v49 = *(WTF **)(*((_QWORD *)this + 29) + 48 * v19 + 16);
      if (v49)
        ++*(_DWORD *)v49;
      v75[0] = v49;
      v50 = *((_DWORD *)this + 39);
      if (v50 != 302)
      {
        *((_DWORD *)this + 42) = v50;
        v51 = *((_QWORD *)this + 20);
        *((_QWORD *)this + 20) = 0;
        v52 = (WTF *)*((_QWORD *)this + 22);
        *((_QWORD *)this + 22) = v51;
        if (v52)
        {
          if (*(_DWORD *)v52 == 1)
            WTF::JSONImpl::Value::operator delete(v52, v35, (uint64_t)v36, v37, v38, v39, v40, v41);
          else
            --*(_DWORD *)v52;
        }
      }
      *((_DWORD *)this + 39) = 278;
      v53 = (WTF *)*((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = v27;
      if (v53)
      {
        if (*(_DWORD *)v53 == 1)
          WTF::JSONImpl::Value::operator delete(v53, v35, (uint64_t)v36, v37, v38, v39, v40, v41);
        else
          --*(_DWORD *)v53;
      }
      JSC::Debugger::breakProgram(*((_QWORD *)this + 7), (WTF::AtomStringImpl *)v75, v36, v37, v38, v39, v40, v41, v42);
      if (v75[0])
        WTF::RefCounted<JSC::Breakpoint>::deref(v75[0], a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_60:
      v17 = *v14 - 2;
      goto LABEL_61;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_61:
    if (v17)
    {
      *v14 = v17;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::willCallNativeExecutable(Inspector::InspectorDebuggerAgent *this, JSC::CallFrame *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorDebuggerAgent::willCallNativeExecutable((Inspector::InspectorDebuggerAgent *)((char *)this - 32), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t Inspector::InspectorDebuggerAgent::isInspectorDebuggerAgent(Inspector::InspectorDebuggerAgent *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'Inspector::InspectorDebuggerAgent::isInspectorDebuggerAgent(Inspector::InspectorDebuggerAgent *this)
{
  return 1;
}

uint64_t Inspector::InspectorDebuggerAgent::debuggerScopeExtensionObject(Inspector::InspectorDebuggerAgent *this, JSC::Debugger *a2, JSC::VM **a3, JSC::DebuggerCallFrame *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t *v18;
  Inspector::JavaScriptCallFrame *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t CommandLineAPIObject;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (**v50)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v51;
  _QWORD *v52;

  Inspector::InjectedScriptManager::injectedScriptFor(*((_QWORD *)this + 8), (JSC::JSGlobalObject *)a3, (unint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)&v50);
  v17 = v52;
  if (v52)
  {
    if (*v52)
    {
      v18 = *(unint64_t **)(16
                                 * (*(_DWORD *)JSC::DebuggerCallFrame::scope(a4, a3[7], v11, v12, v13, v14, v15, v16) & 0xFFFFFFFE)
                                 + 0x28);
      ++*(_DWORD *)a4;
      v19 = (Inspector::JavaScriptCallFrame *)WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v19 = 1;
      *((_QWORD *)v19 + 1) = a4;
      *((_QWORD *)v19 + 2) = 0;
      v26 = Inspector::toJS((uint64_t)v18, v18, v19, v20, v21, v22, v23, v24, v25);
      if (*(_DWORD *)v19 == 1)
      {
        Inspector::JavaScriptCallFrame::~JavaScriptCallFrame(v19);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      else
      {
        --*(_DWORD *)v19;
      }
      CommandLineAPIObject = Inspector::InjectedScript::createCommandLineAPIObject((uint64_t)&v50, v26);
      v17 = v52;
      v50 = &off_1E3591350;
      if (!v52)
        goto LABEL_12;
    }
    else
    {
      CommandLineAPIObject = 0;
      v50 = &off_1E3591350;
    }
    v28 = v17 - 2;
    v29 = *(_QWORD *)(((unint64_t)(v17 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v30 = (uint64_t *)*(v17 - 1);
    if (v30)
    {
      v31 = *v28;
      *v30 = *v28;
      *(_QWORD *)(v31 + 8) = v30;
      *v28 = 0;
      v28[1] = 0;
    }
    *v28 = *(_QWORD *)(v29 + 40);
    *(_QWORD *)(v29 + 40) = v28;
    v52 = 0;
  }
  else
  {
    CommandLineAPIObject = 0;
    v50 = &off_1E3591350;
  }
LABEL_12:
  v32 = v51;
  v51 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return CommandLineAPIObject;
}

uint64_t `non-virtual thunk to'Inspector::InspectorDebuggerAgent::debuggerScopeExtensionObject(Inspector::InspectorDebuggerAgent *this, JSC::Debugger *a2, JSC::VM **a3, JSC::DebuggerCallFrame *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return Inspector::InspectorDebuggerAgent::debuggerScopeExtensionObject((Inspector::InspectorDebuggerAgent *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::InspectorDebuggerAgent::didParseSource(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  _BYTE *v11;
  WTF::StringImpl *v12;
  _BOOL4 v13;
  uint64_t *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  int v34;
  const WTF::StringImpl *v35;
  StringView v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  const WTF::StringImpl **v50;
  const WTF::StringImpl *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl **v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  unsigned int v69;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  WTF *v88;
  WTF::StringImpl **v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void *v124;
  unint64_t v125;
  void *v126;
  int v127;
  WTF *v128;
  JSC::Yarr::BytecodePattern *v129;
  unint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  void *v139;
  size_t v140;
  WTF *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  const WTF::StringImpl *v145;
  WTF *v146[4];
  StringView v147;
  StringView v148;

  v6 = 0;
  v146[3] = *(WTF **)MEMORY[0x1E0C80C00];
  v7 = a2;
  do
  {
    v8 = (v7 % 0xA) | 0x30;
    *((_BYTE *)&v146[1] + v6-- + 4) = (v7 % 0xA) | 0x30;
    v9 = v7 > 9;
    v7 /= 0xAu;
  }
  while (v9);
  if (v6 + 14 >= 15)
    __break(1u);
  if (v6)
  {
    if ((unint64_t)-v6 >> 31)
    {
      __break(0xC471u);
LABEL_126:
      JUMPOUT(0x1986BBB4CLL);
    }
    v10 = WTF::fastCompactMalloc((WTF *)(20 - v6));
    v11 = (_BYTE *)(v10 + 20);
    *(_DWORD *)v10 = 2;
    *(_DWORD *)(v10 + 4) = -(int)v6;
    *(_QWORD *)(v10 + 8) = v10 + 20;
    *(_DWORD *)(v10 + 16) = 4;
    v144 = (WTF::StringImpl *)v10;
    if (v6 == -1)
      *v11 = v8;
    else
      memcpy(v11, (char *)&v146[1] + v6 + 5, -v6);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v144 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  }
  v12 = *(WTF::StringImpl **)(a3 + 16);
  if (v12)
  {
    v13 = *((_DWORD *)v12 + 1) == 0;
    *(_DWORD *)v12 += 2;
  }
  else
  {
    v13 = 1;
  }
  v143 = v12;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 456))(&v142, a1, a3);
  v14 = *(uint64_t **)(a1 + 40);
  v15 = *(_DWORD *)(a3 + 40);
  v16 = *(_DWORD *)(a3 + 44);
  v17 = *(_DWORD *)(a3 + 48);
  v18 = *(_DWORD *)(a3 + 52);
  LOBYTE(v146[0]) = *(_BYTE *)(a3 + 56);
  BYTE1(v146[0]) = 1;
  LOBYTE(v145) = *(_BYTE *)(*(_QWORD *)(a3 + 32) + 12) == 1;
  BYTE1(v145) = 1;
  Inspector::DebuggerFrontendDispatcher::scriptParsed(v14, (_DWORD **)&v144, (_DWORD **)a3, v15, v16, v17, v18, (char *)v146, (_DWORD **)&v143, (_DWORD **)&v142, (char *)&v145);
  v26 = (uint64_t *)(a1 + 72);
  v25 = *(_QWORD *)(a1 + 72);
  if (v25
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Debugger::Script>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Debugger::Script>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Debugger::Script,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Debugger::Script>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash((uint64_t *)(a1 + 72), 8u), (v25 = *v26) != 0))
  {
    v27 = *(_DWORD *)(v25 - 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v29 = (v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11);
  v30 = v27 & (v29 ^ HIWORD(v29));
  v31 = (unsigned int *)(v25 + 72 * v30);
  v32 = *v31;
  if (*v31)
  {
    v33 = 0;
    v34 = 1;
    do
    {
      if (v32 == a2)
      {
        JSC::Debugger::Script::operator=((uint64_t)(v31 + 2), a3, v19, v20, v21, v22, v23, v24);
        goto LABEL_37;
      }
      if (v32 == -1)
        v33 = v31;
      v30 = (v30 + v34) & v27;
      v31 = (unsigned int *)(v25 + 72 * v30);
      v32 = *v31;
      ++v34;
    }
    while (*v31);
    if (v33)
    {
      *v33 = 0;
      *(_OWORD *)(v33 + 2) = 0u;
      *(_OWORD *)(v33 + 6) = 0u;
      *(_OWORD *)(v33 + 10) = 0u;
      *(_OWORD *)(v33 + 14) = 0u;
      --*(_DWORD *)(*v26 - 16);
      v31 = v33;
    }
  }
  *v31 = a2;
  JSC::Debugger::Script::operator=((uint64_t)(v31 + 2), a3, v19, v20, v21, v22, v23, v24);
  v40 = *v26;
  if (*v26)
    v41 = *(_DWORD *)(v40 - 12) + 1;
  else
    v41 = 1;
  *(_DWORD *)(v40 - 12) = v41;
  v42 = *v26;
  if (*v26)
    v43 = *(_DWORD *)(v42 - 12);
  else
    v43 = 0;
  v44 = (*(_DWORD *)(v42 - 16) + v43);
  v45 = *(unsigned int *)(v42 - 4);
  if (v45 <= 0x400)
  {
    if (3 * v45 > 4 * v44)
      goto LABEL_37;
    if (!(_DWORD)v45)
    {
      v46 = 8;
      goto LABEL_36;
    }
LABEL_33:
    v46 = (_DWORD)v45 << (6 * *(_DWORD *)(v42 - 12) >= (2 * v45));
LABEL_36:
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Debugger::Script>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Debugger::Script>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Debugger::Script,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Debugger::Script>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash((uint64_t *)(a1 + 72), v46);
    goto LABEL_37;
  }
  if (v45 <= 2 * v44)
    goto LABEL_33;
LABEL_37:
  if (v143)
  {
    LODWORD(v147.m_characters) = *((_DWORD *)v143 + 1);
    HIDWORD(v147.m_characters) = (*((_DWORD *)v143 + 4) >> 2) & 1;
    *(_QWORD *)&v147.m_length = "__InjectedScript_";
    v36.m_characters = (void *)0x100000011;
    if (!WTF::startsWith(*((int8x16_t **)v143 + 1), v147, v36))
    {
LABEL_43:
      if (v143)
      {
        if (*((_DWORD *)v143 + 1))
        {
          v117 = *(unsigned int *)(a1 + 92);
          if ((_DWORD)v117)
          {
            v118 = *(char **)(a1 + 80);
            v119 = 16 * v117;
            while (1)
            {
              Inspector::ContentSearchUtilities::createRegularExpressionForSearchString((const WTF::String *)v118, v118[8], v118[9] == 0, (uint64_t)v36.m_characters, *(uint64_t *)&v36.m_length, v37, v38, v39, (uint64_t *)v146);
              v123 = (unint64_t)v143;
              if (v143)
              {
                v124 = (void *)*((_QWORD *)v143 + 1);
                v123 = *((unsigned int *)v143 + 1);
                v125 = ((unint64_t)*((unsigned int *)v143 + 4) >> 2) & 1;
              }
              else
              {
                v124 = 0;
                v125 = 1;
              }
              v127 = JSC::Yarr::RegularExpression::match((uint64_t *)v146, v124, v123 | (v125 << 32), 0, 0, v120, v121, v122);
              v128 = v146[0];
              v146[0] = 0;
              if (v128)
              {
                if (*(_DWORD *)v128 == 1)
                {
                  v129 = (JSC::Yarr::BytecodePattern *)*((_QWORD *)v128 + 3);
                  *((_QWORD *)v128 + 3) = 0;
                  if (v129)
                  {
                    JSC::Yarr::BytecodePattern::~BytecodePattern(v129, v126, (uint64_t)v35, (uint64_t)v36.m_characters, *(uint64_t *)&v36.m_length, v37, v38, v39);
                    WTF::fastFree(v130, v131, v132, v133, v134, v135, v136, v137);
                  }
                  v138 = (_QWORD *)*((_QWORD *)v128 + 1);
                  if (v138)
                  {
                    v139 = (void *)v138[5];
                    v140 = v138[6];
                    v138[5] = 0;
                    v138[6] = 0;
                    v138[4] = 0;
                    if (munmap(v139, v140) == -1)
                    {
                      __break(0xC471u);
                      goto LABEL_126;
                    }
                  }
                  WTF::fastFree((unint64_t)v128, v126, (uint64_t)v35, (uint64_t)v36.m_characters, *(uint64_t *)&v36.m_length, v37, v38, v39);
                }
                else
                {
                  --*(_DWORD *)v128;
                }
              }
              if (v127 != -1)
                goto LABEL_45;
              v118 += 16;
              v119 -= 16;
              if (!v119)
                goto LABEL_44;
            }
          }
        }
      }
      goto LABEL_44;
    }
    if (v143)
    {
      LODWORD(v148.m_characters) = *((_DWORD *)v143 + 1);
      HIDWORD(v148.m_characters) = (*((_DWORD *)v143 + 4) >> 2) & 1;
      *(_QWORD *)&v148.m_length = ".js";
      v36.m_characters = (void *)0x100000003;
      if (WTF::endsWith(*((WTF **)v143 + 1), v148, v36))
      {
        if (*(_BYTE *)(a1 + 250))
          goto LABEL_47;
        v48 = *(_QWORD *)(a1 + 56);
        v49 = 0x100000001;
        goto LABEL_46;
      }
      goto LABEL_43;
    }
  }
LABEL_44:
  if (!Inspector::InspectorDebuggerAgent::shouldBlackboxURL((Inspector::InspectorDebuggerAgent *)a1, (const WTF::String *)a3, (uint64_t)v35, (uint64_t)v36.m_characters, *(uint64_t *)&v36.m_length, v37, v38, v39))goto LABEL_47;
LABEL_45:
  v48 = *(_QWORD *)(a1 + 56);
  v49 = 0x100000000;
LABEL_46:
  v145 = (const WTF::StringImpl *)v49;
  LODWORD(v141) = a2;
  WTF::HashMap<unsigned int,JSC::Debugger::BlackboxType,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<JSC::Debugger::BlackboxType>,WTF::HashTableTraits>::inlineSet<unsigned int const&,JSC::Debugger::BlackboxType&>((uint64_t *)(v48 + 40), (int *)&v141, &v145, (uint64_t)v146);
LABEL_47:
  v50 = (const WTF::StringImpl **)(a3 + 16);
  if (v13)
    v50 = (const WTF::StringImpl **)a3;
  v51 = *v50;
  if (!*v50)
    goto LABEL_90;
  v52 = *(_DWORD *)v51;
  *(_DWORD *)v51 += 2;
  v145 = v51;
  if (!*((_DWORD *)v51 + 1))
  {
    v145 = 0;
    if (v52)
    {
LABEL_89:
      *(_DWORD *)v51 = v52;
      goto LABEL_90;
    }
LABEL_60:
    WTF::StringImpl::~StringImpl(v51, v47, (uint64_t)v35, (uint64_t)v36.m_characters, *(uint64_t *)&v36.m_length, v37, v38, v39);
    WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    goto LABEL_90;
  }
  v53 = *(_QWORD *)(a1 + 120);
  if (v53)
  {
    v54 = *(unsigned int *)(v53 - 4);
    v55 = (WTF::StringImpl **)(v53 + 80 * v54);
    if (*(_DWORD *)(v53 - 12))
    {
      v56 = *(WTF::StringImpl ***)(a1 + 120);
      if ((_DWORD)v54)
      {
        v57 = 80 * v54;
        v56 = *(WTF::StringImpl ***)(a1 + 120);
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 10;
          v57 -= 80;
          if (!v57)
          {
            v56 = v55;
            goto LABEL_58;
          }
        }
      }
      goto LABEL_58;
    }
    v56 = (WTF::StringImpl **)(v53 + 80 * v54);
  }
  else
  {
    v56 = 0;
    LODWORD(v54) = 0;
  }
  v55 = (WTF::StringImpl **)(v53 + 80 * v54);
  if (v53)
  {
LABEL_58:
    v58 = (WTF::StringImpl **)(v53 + 80 * *(unsigned int *)(v53 - 4));
    goto LABEL_65;
  }
  v58 = 0;
LABEL_65:
  if (v58 != v56)
  {
    do
    {
      if (Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::matchesScriptURL((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)(v56 + 1), &v145, v35))
      {
        v67 = *(_QWORD *)(a1 + 136);
        *(_QWORD *)(a1 + 136) = v67 + 1;
        Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::createDebuggerBreakpoint((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)(v56 + 1), v67, a2, (uint64_t *)&v141);
        v68 = v141;
        v69 = *((_DWORD *)v141 + 5);
        if (v69 < *(_DWORD *)(a3 + 40) || *(_DWORD *)(a3 + 48) < v69)
          goto LABEL_78;
        if (!JSC::Debugger::resolveBreakpoint(*(JSC::Debugger **)(a1 + 56), (uint64_t)v141, *(JSC::SourceProvider **)(a3 + 32)))goto LABEL_78;
        JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)v146, *(JSC::VM **)(*(_QWORD *)(a1 + 56) + 16), (uint64_t)v35, (uint64_t)v36.m_characters, *(uint64_t *)&v36.m_length, v37, v38, v39, v71);
        JSC::Debugger::setBreakpoint(*(_QWORD **)(a1 + 56), (uint64_t)v68, v72, v73, v74, v75, v76, v77);
        v79 = v78;
        JSC::JSLockHolder::~JSLockHolder((unsigned int **)v146, v80, v81, v82, v83, v84, v85, v86);
        if (!v79)
          goto LABEL_78;
        Inspector::InspectorDebuggerAgent::didSetBreakpoint(a1, v56 + 1, v68, (uint64_t)v36.m_characters, *(uint64_t *)&v36.m_length, v37, v38, v39);
        v87 = *(uint64_t **)(a1 + 40);
        Inspector::buildDebuggerLocation(v146, v68);
        Inspector::DebuggerFrontendDispatcher::breakpointResolved(v87, (_DWORD **)v56 + 1, v146);
        v88 = v146[0];
        v146[0] = 0;
        if (v88)
        {
          if (*(_DWORD *)v88 == 1)
            WTF::JSONImpl::Value::operator delete(v88, v47, (uint64_t)v35, (uint64_t)v36.m_characters, *(uint64_t *)&v36.m_length, v37, v38, v39);
          else
            --*(_DWORD *)v88;
        }
        v68 = v141;
        if (v141)
LABEL_78:
          WTF::RefCounted<JSC::Breakpoint>::deref(v68, v47, (uint64_t)v35, (uint64_t)v36.m_characters, *(uint64_t *)&v36.m_length, v37, v38, v39);
      }
      v89 = v56 + 10;
      v56 = v55;
      if (v89 != v55)
      {
        v56 = v89;
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 10;
          if (v56 == v55)
          {
            v56 = v55;
            break;
          }
        }
      }
    }
    while (v56 != v58);
    v51 = v145;
  }
  v145 = 0;
  if (v51)
  {
    v52 = *(_DWORD *)v51 - 2;
    if (*(_DWORD *)v51 != 2)
      goto LABEL_89;
    goto LABEL_60;
  }
LABEL_90:
  v90 = v142;
  v142 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
    {
      WTF::StringImpl::~StringImpl(v90, v47, (uint64_t)v35, (uint64_t)v36.m_characters, *(uint64_t *)&v36.m_length, v37, v38, v39);
      WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
    }
    else
    {
      *(_DWORD *)v90 -= 2;
    }
  }
  v91 = v143;
  v143 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
    {
      WTF::StringImpl::~StringImpl(v91, v47, (uint64_t)v35, (uint64_t)v36.m_characters, *(uint64_t *)&v36.m_length, v37, v38, v39);
      WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
    }
    else
    {
      *(_DWORD *)v91 -= 2;
    }
  }
  v92 = v144;
  v144 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
    {
      WTF::StringImpl::~StringImpl(v92, v47, (uint64_t)v35, (uint64_t)v36.m_characters, *(uint64_t *)&v36.m_length, v37, v38, v39);
      WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
    }
    else
    {
      *(_DWORD *)v92 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::didParseSource(uint64_t a1, unsigned int a2, uint64_t a3)
{
  Inspector::InspectorDebuggerAgent::didParseSource(a1 - 32, a2, a3);
}

void Inspector::InspectorDebuggerAgent::failedToParseSource(Inspector::DebuggerFrontendDispatcher **this, const WTF::String *a2, const WTF::String *a3, int a4, int a5, const WTF::String *a6)
{
  Inspector::DebuggerFrontendDispatcher::scriptFailedToParse(this[5], a2, a3, a4, a5, a6);
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::failedToParseSource(Inspector::DebuggerFrontendDispatcher **this, const WTF::String *a2, const WTF::String *a3, int a4, int a5, const WTF::String *a6)
{
  Inspector::DebuggerFrontendDispatcher::scriptFailedToParse(this[1], a2, a3, a4, a5, a6);
}

void Inspector::InspectorDebuggerAgent::willEnter(Inspector::InspectorDebuggerAgent *this, JSC::CallFrame *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int *v14;
  uint64_t v15;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int i;
  int v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF *v47;
  WTF::StringImpl *v48;
  _DWORD *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  WTF *v70;
  WTF *v71[2];
  char v72;

  if ((*(_WORD *)(*((_QWORD *)this + 7) + 48) & 0x40) == 0)
    return;
  v9 = *((unsigned int *)this + 61);
  if (!(_DWORD)v9)
    return;
  v10 = *((_QWORD *)a2 + 3);
  if ((v10 & 0xFFFE000000000007) == 3)
    return;
  v11 = *((_QWORD *)a2 + 2);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 64);
    if (v12)
      v13 = *(_BYTE *)(v12 + 5) == 12;
    else
      v13 = 0;
    if (!v13)
      return;
    v14 = *(int **)(*(_QWORD *)(v12 + 88) + 80);
    if (!v14)
      return;
  }
  else
  {
    if (!v10 || *(_BYTE *)(v10 + 5) != 26)
      return;
    v15 = *(_QWORD *)(v10 + 24);
    if ((v15 & 1) != 0)
      v15 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (!v15 || *(_BYTE *)(v15 + 5) != 8)
      return;
    v14 = *(int **)(v15 + 64);
    if (!v14)
      return;
  }
  v17 = *v14;
  v18 = v14[1];
  *v14 += 2;
  if (v18)
  {
    v19 = 0;
    while (1)
    {
      v20 = *(_QWORD *)(*((_QWORD *)this + 29) + 48 * v19 + 24);
      if (v20)
        break;
LABEL_33:
      if (++v19 >= v9)
        goto LABEL_52;
    }
    v21 = *(_DWORD *)(v20 - 8);
    v22 = v14[4];
    if (v22 < 0x100)
      v23 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v14);
    else
      v23 = v22 >> 8;
    for (i = 0; ; v23 = i + v25)
    {
      v25 = v23 & v21;
      v26 = *(WTF **)(v20 + 8 * (v23 & v21));
      if (!v26)
      {
        v9 = *((unsigned int *)this + 61);
        goto LABEL_33;
      }
      if (v26 != (WTF *)-1 && WTF::equal(v26, (const WTF::StringImpl *)v14, a3))
        break;
      ++i;
    }
    v27 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v27 = 0x500000001;
    *(_QWORD *)(v27 + 24) = 0;
    *(_QWORD *)(v27 + 32) = 0;
    *(_QWORD *)(v27 + 16) = 0;
    v28 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v28 = 0x400000002;
    *(_QWORD *)(v28 + 8) = "name";
    *(_DWORD *)(v28 + 16) = 4;
    v69 = (WTF::StringImpl *)v28;
    v29 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v29 = 0x400000001;
    *((_QWORD *)v29 + 1) = v14;
    *v14 += 2;
    v70 = v29;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v27 + 16), (WTF::AtomStringImpl *)&v69, (const WTF::StringImpl *)&v70, v30, v31, v32, v33, v34, (uint64_t)v71);
    if (v72)
    {
      v43 = (uint64_t *)(v27 + 24);
      v44 = *(unsigned int *)(v27 + 36);
      if ((_DWORD)v44 == *(_DWORD *)(v27 + 32))
      {
        v66 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, v44 + 1, (unint64_t)&v69);
        v44 = *(unsigned int *)(v27 + 36);
        v67 = *(_QWORD *)(v27 + 24);
        v68 = *v66;
        if (*v66)
          *v68 += 2;
        *(_QWORD *)(v67 + 8 * v44) = v68;
      }
      else
      {
        v45 = *v43;
        v46 = v69;
        if (v69)
          *(_DWORD *)v69 += 2;
        *(_QWORD *)(v45 + 8 * v44) = v46;
      }
      *(_DWORD *)(v27 + 36) = v44 + 1;
    }
    v47 = v70;
    v70 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 1)
        WTF::JSONImpl::Value::operator delete(v47, v35, v36, v37, v38, v39, v40, v41);
      else
        --*(_DWORD *)v47;
    }
    v48 = v69;
    v69 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v35, v36, v37, v38, v39, v40, v41);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
    if (v19 < *((unsigned int *)this + 61))
    {
      v49 = *(_DWORD **)(*((_QWORD *)this + 29) + 48 * v19 + 16);
      v71[0] = (WTF *)v27;
      Inspector::InspectorDebuggerAgent::schedulePauseForSpecialBreakpoint((uint64_t)this, v49, 278, (uint64_t *)v71, v38, v39, v40, v41, v42);
      if (v71[0])
      {
        if (*(_DWORD *)v71[0] == 1)
          WTF::JSONImpl::Value::operator delete(v71[0], a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        else
          --*(_DWORD *)v71[0];
      }
LABEL_52:
      v17 = *v14 - 2;
      goto LABEL_53;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_53:
    if (v17)
    {
      *v14 = v17;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::willEnter(Inspector::InspectorDebuggerAgent *this, JSC::CallFrame *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorDebuggerAgent::willEnter((Inspector::InspectorDebuggerAgent *)((char *)this - 32), a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::InspectorDebuggerAgent::didQueueMicrotask(uint64_t a1, JSC::VM **a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 48) & 0x40) != 0)
    Inspector::InspectorDebuggerAgent::didScheduleAsyncCall(a1, a2, 4, a3, 1, a7, a8, a9, a4);
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::didQueueMicrotask(uint64_t a1, JSC::VM **a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((*(_WORD *)(*(_QWORD *)(a1 + 24) + 48) & 0x40) != 0)
    Inspector::InspectorDebuggerAgent::didScheduleAsyncCall(a1 - 32, a2, 4, a3, 1, a7, a8, a9, a4);
}

void Inspector::InspectorDebuggerAgent::willRunMicrotask(uint64_t a1, __n128 a2, uint64_t a3, WTF *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  Inspector::AsyncStackTrace *v14;
  char **v15;
  uint64_t v16;
  __n128 *v17;
  char *v18;
  _DWORD *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27[2];

  v10 = *(int *)(a1 + 208);
  if ((_DWORD)v10)
  {
    v27[0] = (WTF *)4;
    v27[1] = a4;
    v11 = *(_QWORD *)(a1 + 184);
    v12 = WTF::HashTable<std::pair<unsigned int,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>>,std::pair<unsigned int,unsigned long long>>(v11, 4, (uint64_t)a4);
    v13 = v11 ? v11 + 24 * *(unsigned int *)(v11 - 4) : 0;
    if ((int *)v13 != v12)
    {
      v14 = (Inspector::AsyncStackTrace *)*((_QWORD *)v12 + 2);
      *((_BYTE *)v14 + 28) = 1;
      Inspector::AsyncStackTrace::truncate(v14, v10);
      v15 = (char **)(a1 + 192);
      v16 = *(unsigned int *)(a1 + 204);
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 200))
      {
        v17 = (__n128 *)WTF::Vector<std::pair<JSC::Identifier,WTF::RefPtr<JSC::RegisterID,WTF::RawPtrTraits<JSC::RegisterID>,WTF::DefaultRefDerefTraits<JSC::RegisterID>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v16 + 1, (unint64_t)v27);
        v16 = *(unsigned int *)(a1 + 204);
        v18 = *(char **)(a1 + 192);
        a2 = *v17;
      }
      else
      {
        v18 = *v15;
        a2 = *(__n128 *)v27;
      }
      *(__n128 *)&v18[16 * v16] = a2;
      ++*(_DWORD *)(a1 + 204);
    }
  }
  if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 48) & 0x40) != 0)
  {
    v19 = *(_DWORD **)(a1 + 224);
    if (v19)
    {
      v27[0] = 0;
      Inspector::InspectorDebuggerAgent::schedulePauseForSpecialBreakpoint(a1, v19, 261, (uint64_t *)v27, a6, a7, a8, a9, a2.n128_f64[0]);
      if (v27[0])
      {
        if (*(_DWORD *)v27[0] == 1)
          WTF::JSONImpl::Value::operator delete(v27[0], v20, v21, v22, v23, v24, v25, v26);
        else
          --*(_DWORD *)v27[0];
      }
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::willRunMicrotask(uint64_t a1, uint64_t a2, WTF *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  Inspector::InspectorDebuggerAgent::willRunMicrotask(a1 - 32, a9, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::InspectorDebuggerAgent::didRunMicrotask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  WTF *v22;
  WTF *v23;

  Inspector::InspectorDebuggerAgent::didDispatchAsyncCall(a1, 4, a3);
  v11 = *(_QWORD *)(a1 + 56);
  if ((*(_WORD *)(v11 + 48) & 0x40) != 0)
  {
    v12 = *(WTF **)(a1 + 224);
    if (v12)
    {
      if (*(WTF **)(v11 + 112) == v12)
      {
        *(_QWORD *)(v11 + 112) = 0;
        WTF::RefCounted<JSC::Breakpoint>::deref(v12, v4, v5, v6, v7, v8, v9, v10);
        v20 = *(_DWORD *)(a1 + 156);
        if (v20 != 302)
        {
          *(_DWORD *)(a1 + 168) = v20;
          v21 = *(_QWORD *)(a1 + 160);
          *(_QWORD *)(a1 + 160) = 0;
          v22 = *(WTF **)(a1 + 176);
          *(_QWORD *)(a1 + 176) = v21;
          if (v22)
          {
            if (*(_DWORD *)v22 == 1)
              WTF::JSONImpl::Value::operator delete(v22, v13, v14, v15, v16, v17, v18, v19);
            else
              --*(_DWORD *)v22;
          }
        }
        *(_DWORD *)(a1 + 156) = 97;
        v23 = *(WTF **)(a1 + 160);
        *(_QWORD *)(a1 + 160) = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 1)
            WTF::JSONImpl::Value::operator delete(v23, v13, v14, v15, v16, v17, v18, v19);
          else
            --*(_DWORD *)v23;
        }
      }
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::didRunMicrotask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Inspector::InspectorDebuggerAgent::didRunMicrotask(a1 - 32, a2, a3);
}

void Inspector::InspectorDebuggerAgent::didPause(uint64_t a1, uint64_t a2, JSC::DebuggerCallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v11;
  uint64_t v12;
  Inspector::JavaScriptCallFrame *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  BOOL v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  WTF *v53;
  int v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  WTF *v66;
  WTF *v67;
  uint64_t v68;
  WTF *v69;
  int v70;
  uint64_t v71;
  WTF *v72;
  WTF *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::AtomStringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  WTF *v94;
  WTF *v95;
  WTF *v96;
  WTF *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  WTF *v107;
  WTF *v108;
  WTF *v109;
  uint64_t *v110;
  uint64_t v111;
  char **v112;
  char *v113;
  int v114;
  char *v115;
  int *v116;
  WTF *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF::AtomStringImpl *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  WTF *v133;
  WTF *v134;
  WTF *v135;
  uint64_t v136;
  WTF *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  WTF *v146;
  WTF *v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  WTF *v173;
  WTF *v174;
  uint64_t v175;
  uint64_t v176;
  int *v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  WTF *v181;
  char **v182;
  char *v183;
  int v184;
  char *v185;
  int *v186;
  WTF *v187;
  WTF::AtomStringImpl *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  WTF *v195;
  WTF *v196;
  WTF *v197;
  uint64_t v198;
  WTF::AtomStringImpl *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  WTF *v206;
  uint64_t v207;
  WTF::AtomStringImpl *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  double v218;
  uint64_t *v219;
  uint64_t v220;
  __int128 *v221;
  uint64_t v222;
  __int128 v223;
  WTF *v224;
  WTF::StringImpl *v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _DWORD **v258;
  uint64_t v259;
  _DWORD *v260;
  _DWORD **v261;
  uint64_t v262;
  _DWORD *v263;
  _DWORD **v264;
  uint64_t v265;
  _DWORD *v266;
  _DWORD **v267;
  uint64_t v268;
  _DWORD *v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  WTF *v274;
  WTF *v275;
  void (**v276)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v277;
  _QWORD *v278;
  WTF *v279[2];
  char v280;
  WTF *v281;

  *(_QWORD *)(a1 + 104) = a2;
  v11 = *(unint64_t **)(16
                             * (*(_DWORD *)JSC::DebuggerCallFrame::scope(a3, *(JSC::VM **)(a2 + 56), (uint64_t)a3, a4, a5, a6, a7, a8) & 0xFFFFFFFE)+ 0x28);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 56);
  ++*(_DWORD *)a3;
  v13 = (Inspector::JavaScriptCallFrame *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v13 = 1;
  *((_QWORD *)v13 + 1) = a3;
  *((_QWORD *)v13 + 2) = 0;
  v27 = Inspector::toJS((uint64_t)v11, v11, v13, v14, v15, v16, v17, v18, v19);
  v28 = *(_QWORD *)(v12 + 712);
  if (!v28)
  {
    JSC::HandleSet::grow((JSC::HandleSet *)(v12 + 672), v20, v21, v22, v23, v24, v25, v26);
    v28 = *(_QWORD *)(v12 + 712);
  }
  *(_QWORD *)(v12 + 712) = *(_QWORD *)v28;
  *(_QWORD *)(v28 + 16) = 0;
  v29 = (uint64_t *)(v28 + 16);
  *(_QWORD *)v28 = 0;
  *(_QWORD *)(v28 + 8) = 0;
  if (v27)
    v30 = (v27 & 0xFFFE000000000002) == 0;
  else
    v30 = 0;
  if (v30)
  {
    v31 = *(unint64_t **)((v28 & 0xFFFFFFFFFFFFF000) + 0x10);
    v32 = v31[3];
    v31 += 3;
    *(_QWORD *)v28 = v32;
    *(_QWORD *)(v28 + 8) = v31;
    *v31 = v28;
    *(_QWORD *)(v32 + 8) = v28;
  }
  *v29 = v27;
  v33 = (uint64_t **)(a1 + 112);
  JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((uint64_t **)(a1 + 112), v29, v21, v22, v23, v24, v25, v26);
  v40 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF000) + 0x10);
  v41 = *(_QWORD **)(v28 + 8);
  if (v41)
  {
    v42 = *(_QWORD *)v28;
    *v41 = *(_QWORD *)v28;
    *(_QWORD *)(v42 + 8) = v41;
    *(_QWORD *)v28 = 0;
    *(_QWORD *)(v28 + 8) = 0;
  }
  *(_QWORD *)v28 = *(_QWORD *)(v40 + 40);
  *(_QWORD *)(v40 + 40) = v28;
  if (*(_DWORD *)v13 == 1)
  {
    Inspector::JavaScriptCallFrame::~JavaScriptCallFrame(v13);
    WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
  }
  else
  {
    --*(_DWORD *)v13;
  }
  Inspector::InjectedScriptManager::injectedScriptFor(*(_QWORD *)(a1 + 64), *(JSC::JSGlobalObject **)(a1 + 104), v34, v35, v36, v37, v38, v39, (uint64_t)&v276);
  if (*(_DWORD *)(a1 + 156) == 97)
  {
    v50 = *(_QWORD *)(a1 + 56);
    switch(*(_DWORD *)(v50 + 52))
    {
      case 1:
        Inspector::InspectorDebuggerAgent::buildExceptionPauseReason(a4, (uint64_t)&v276, v279);
        v51 = *(_DWORD *)(a1 + 156);
        if (v51 != 302)
        {
          *(_DWORD *)(a1 + 168) = v51;
          v52 = *(_QWORD *)(a1 + 160);
          *(_QWORD *)(a1 + 160) = 0;
          v53 = *(WTF **)(a1 + 176);
          *(_QWORD *)(a1 + 176) = v52;
          if (v53)
          {
            if (*(_DWORD *)v53 == 1)
              WTF::JSONImpl::Value::operator delete(v53, v43, v44, v45, v46, v47, v48, v49);
            else
              --*(_DWORD *)v53;
          }
        }
        v54 = 297;
        goto LABEL_28;
      case 6:
        v43 = *(WTF::AtomStringImpl **)(v50 + 144);
        v63 = *(_QWORD *)(a1 + 144);
        if (!v63 || v43 != *(WTF::AtomStringImpl **)(v63 + 8))
        {
          Inspector::InspectorDebuggerAgent::buildBreakpointPauseReason((Inspector::InspectorDebuggerAgent *)a1, (uint64_t)v43, (uint64_t *)v279);
          v64 = *(_DWORD *)(a1 + 156);
          if (v64 != 302)
          {
            *(_DWORD *)(a1 + 168) = v64;
            v65 = *(_QWORD *)(a1 + 160);
            *(_QWORD *)(a1 + 160) = 0;
            v66 = *(WTF **)(a1 + 176);
            *(_QWORD *)(a1 + 176) = v65;
            if (v66)
            {
              if (*(_DWORD *)v66 == 1)
                WTF::JSONImpl::Value::operator delete(v66, v43, v44, v45, v46, v47, v48, v49);
              else
                --*(_DWORD *)v66;
            }
          }
          v54 = 300;
LABEL_28:
          *(_DWORD *)(a1 + 156) = v54;
          v67 = *(WTF **)(a1 + 160);
          *(WTF **)(a1 + 160) = v279[0];
          if (v67)
            goto LABEL_29;
        }
        break;
      case 7:
        *(_DWORD *)(a1 + 168) = 97;
        v68 = *(_QWORD *)(a1 + 160);
        *(_QWORD *)(a1 + 160) = 0;
        v69 = *(WTF **)(a1 + 176);
        *(_QWORD *)(a1 + 176) = v68;
        if (!v69)
          goto LABEL_34;
        if (*(_DWORD *)v69 == 1)
        {
          WTF::JSONImpl::Value::operator delete(v69, v43, v44, v45, v46, v47, v48, v49);
          v67 = *(WTF **)(a1 + 160);
          *(_DWORD *)(a1 + 156) = 299;
          *(_QWORD *)(a1 + 160) = 0;
          if (v67)
          {
LABEL_29:
            if (*(_DWORD *)v67 == 1)
              WTF::JSONImpl::Value::operator delete(v67, v43, v44, v45, v46, v47, v48, v49);
            else
              --*(_DWORD *)v67;
          }
        }
        else
        {
          --*(_DWORD *)v69;
LABEL_34:
          *(_DWORD *)(a1 + 156) = 299;
          *(_QWORD *)(a1 + 160) = 0;
        }
        break;
      case 8:
        *(_DWORD *)(a1 + 168) = 97;
        *(_DWORD *)(a1 + 156) = 302;
        break;
      default:
        break;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 56) + 52) != 8)
  {
LABEL_119:
    if (!a4)
      goto LABEL_123;
    goto LABEL_120;
  }
  v70 = *(_DWORD *)(a1 + 156);
  if (v70 != 302)
  {
    *(_DWORD *)(a1 + 168) = v70;
    v71 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = 0;
    v72 = *(WTF **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v71;
    if (v72)
    {
      if (*(_DWORD *)v72 == 1)
        WTF::JSONImpl::Value::operator delete(v72, v43, v44, v45, v46, v47, v48, v49);
      else
        --*(_DWORD *)v72;
    }
  }
  *(_DWORD *)(a1 + 156) = v70;
  v73 = *(WTF **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 1)
      WTF::JSONImpl::Value::operator delete(v73, v43, v44, v45, v46, v47, v48, v49);
    else
      --*(_DWORD *)v73;
  }
  v74 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 144);
  if (v74)
  {
    v75 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v75 = 0x500000001;
    *(_QWORD *)(v75 + 16) = 0;
    *(_QWORD *)(v75 + 24) = 0;
    *(_QWORD *)(v75 + 32) = 0;
    v76 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v76 = 0xE00000002;
    *(_QWORD *)(v76 + 8) = "originalReason";
    *(_DWORD *)(v76 + 16) = 4;
    v275 = (WTF *)v76;
    v77 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v77 = 0xA00000002;
    *(_QWORD *)(v77 + 8) = "Breakpoint";
    *(_DWORD *)(v77 + 16) = 4;
    v78 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v78 = 0x400000001;
    *((_QWORD *)v78 + 1) = v77;
    *(_DWORD *)v77 += 2;
    v281 = v78;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v75 + 16), (WTF::AtomStringImpl *)&v275, (const WTF::StringImpl *)&v281, v79, v80, v81, v82, v83, (uint64_t)v279);
    if (v280)
    {
      v91 = (uint64_t *)(v75 + 24);
      v92 = *(unsigned int *)(v75 + 36);
      if ((_DWORD)v92 == *(_DWORD *)(v75 + 32))
      {
        v258 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v91, v92 + 1, (unint64_t)&v275);
        v92 = *(unsigned int *)(v75 + 36);
        v259 = *(_QWORD *)(v75 + 24);
        v260 = *v258;
        if (*v258)
          *v260 += 2;
        *(_QWORD *)(v259 + 8 * v92) = v260;
      }
      else
      {
        v93 = *v91;
        v94 = v275;
        if (v275)
          *(_DWORD *)v275 += 2;
        *(_QWORD *)(v93 + 8 * v92) = v94;
      }
      *(_DWORD *)(v75 + 36) = v92 + 1;
    }
    v95 = v281;
    v281 = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 1)
        WTF::JSONImpl::Value::operator delete(v95, v84, v85, v86, v87, v88, v89, v90);
      else
        --*(_DWORD *)v95;
    }
    if (*(_DWORD *)v77 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v77, v84, v85, v86, v87, v88, v89, v90);
      WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
    }
    else
    {
      *(_DWORD *)v77 -= 2;
    }
    v96 = v275;
    v275 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 2)
      {
        WTF::StringImpl::~StringImpl(v96, v84, v85, v86, v87, v88, v89, v90);
        WTF::fastFree(v156, v157, v158, v159, v160, v161, v162, v163);
      }
      else
      {
        *(_DWORD *)v96 -= 2;
      }
    }
    Inspector::InspectorDebuggerAgent::buildBreakpointPauseReason((Inspector::InspectorDebuggerAgent *)a1, v74, (uint64_t *)&v281);
    v97 = v281;
    if (!v281)
      goto LABEL_110;
    v98 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v98 = 0xC00000002;
    *(_QWORD *)(v98 + 8) = "originalData";
    *(_DWORD *)(v98 + 16) = 4;
    v274 = v97;
    v275 = (WTF *)v98;
    v281 = 0;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v75 + 16), (WTF::AtomStringImpl *)&v275, (const WTF::StringImpl *)&v274, v99, v100, v101, v102, v103, (uint64_t)v279);
    if (v280)
    {
      v104 = (uint64_t *)(v75 + 24);
      v105 = *(unsigned int *)(v75 + 36);
      if ((_DWORD)v105 == *(_DWORD *)(v75 + 32))
      {
        v261 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v104, v105 + 1, (unint64_t)&v275);
        v105 = *(unsigned int *)(v75 + 36);
        v262 = *(_QWORD *)(v75 + 24);
        v263 = *v261;
        if (*v261)
          *v263 += 2;
        *(_QWORD *)(v262 + 8 * v105) = v263;
      }
      else
      {
        v106 = *v104;
        v107 = v275;
        if (v275)
          *(_DWORD *)v275 += 2;
        *(_QWORD *)(v106 + 8 * v105) = v107;
      }
      *(_DWORD *)(v75 + 36) = v105 + 1;
    }
    v108 = v274;
    v274 = 0;
    if (v108)
    {
      if (*(_DWORD *)v108 == 1)
        WTF::JSONImpl::Value::operator delete(v108, v43, v44, v45, v46, v47, v48, v49);
      else
        --*(_DWORD *)v108;
    }
    v109 = v275;
    v275 = 0;
    if (!v109)
      goto LABEL_110;
LABEL_103:
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v164, v165, v166, v167, v168, v169, v170, v171);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
    goto LABEL_110;
  }
  if (!*(_QWORD *)(a1 + 176))
  {
    v75 = 0;
    goto LABEL_110;
  }
  v75 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v75 = 0x500000001;
  *(_QWORD *)(v75 + 16) = 0;
  v110 = (uint64_t *)(v75 + 16);
  *(_QWORD *)(v75 + 24) = 0;
  *(_QWORD *)(v75 + 32) = 0;
  v111 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v111 = 0xE00000002;
  *(_QWORD *)(v111 + 8) = "originalReason";
  *(_DWORD *)(v111 + 16) = 4;
  v275 = (WTF *)v111;
  v112 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * *(int *)(a1 + 168)];
  v113 = v112[1];
  if (v113)
  {
    v114 = (_DWORD)v113 - 1;
    if (v113 == (char *)1)
    {
      v116 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v115 = *v112;
      v116 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v116 = 2;
      v116[1] = v114;
      *((_QWORD *)v116 + 1) = v115;
      v116[4] = 4;
    }
  }
  else
  {
    v116 = 0;
  }
  v117 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v117 = 0x400000001;
  *((_QWORD *)v117 + 1) = v116;
  if (v116)
    *v116 += 2;
  v281 = v117;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v110, (WTF::AtomStringImpl *)&v275, (const WTF::StringImpl *)&v281, v118, v119, v120, v121, v122, (uint64_t)v279);
  if (v280)
  {
    v130 = (uint64_t *)(v75 + 24);
    v131 = *(unsigned int *)(v75 + 36);
    if ((_DWORD)v131 == *(_DWORD *)(v75 + 32))
    {
      v264 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v130, v131 + 1, (unint64_t)&v275);
      v131 = *(unsigned int *)(v75 + 36);
      v265 = *(_QWORD *)(v75 + 24);
      v266 = *v264;
      if (*v264)
        *v266 += 2;
      *(_QWORD *)(v265 + 8 * v131) = v266;
    }
    else
    {
      v132 = *v130;
      v133 = v275;
      if (v275)
        *(_DWORD *)v275 += 2;
      *(_QWORD *)(v132 + 8 * v131) = v133;
    }
    *(_DWORD *)(v75 + 36) = v131 + 1;
  }
  v134 = v281;
  v281 = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v134, v123, v124, v125, v126, v127, v128, v129);
      if (!v116)
        goto LABEL_90;
      goto LABEL_88;
    }
    --*(_DWORD *)v134;
  }
  if (!v116)
    goto LABEL_90;
LABEL_88:
  if (*v116 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v116, v123, v124, v125, v126, v127, v128, v129);
    WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
  }
  else
  {
    *v116 -= 2;
  }
LABEL_90:
  v135 = v275;
  v275 = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
    {
      WTF::StringImpl::~StringImpl(v135, v123, v124, v125, v126, v127, v128, v129);
      WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
    }
    else
    {
      *(_DWORD *)v135 -= 2;
    }
  }
  v136 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v136 = 0xC00000002;
  *(_QWORD *)(v136 + 8) = "originalData";
  *(_DWORD *)(v136 + 16) = 4;
  v281 = (WTF *)v136;
  v137 = *(WTF **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  v275 = v137;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v110, (WTF::AtomStringImpl *)&v281, (const WTF::StringImpl *)&v275, v138, v139, v140, v141, v142, (uint64_t)v279);
  if (v280)
  {
    v143 = (uint64_t *)(v75 + 24);
    v144 = *(unsigned int *)(v75 + 36);
    if ((_DWORD)v144 == *(_DWORD *)(v75 + 32))
    {
      v267 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v143, v144 + 1, (unint64_t)&v281);
      v144 = *(unsigned int *)(v75 + 36);
      v268 = *(_QWORD *)(v75 + 24);
      v269 = *v267;
      if (*v267)
        *v269 += 2;
      *(_QWORD *)(v268 + 8 * v144) = v269;
    }
    else
    {
      v145 = *v143;
      v146 = v281;
      if (v281)
        *(_DWORD *)v281 += 2;
      *(_QWORD *)(v145 + 8 * v144) = v146;
    }
    *(_DWORD *)(v75 + 36) = v144 + 1;
  }
  v147 = v275;
  v275 = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 1)
      WTF::JSONImpl::Value::operator delete(v147, v43, v44, v45, v46, v47, v48, v49);
    else
      --*(_DWORD *)v147;
  }
  v109 = v281;
  v281 = 0;
  if (v109)
    goto LABEL_103;
LABEL_110:
  v172 = *(_DWORD *)(a1 + 156);
  v173 = *(WTF **)(a1 + 160);
  if (v172 == 302)
    goto LABEL_111;
  *(_DWORD *)(a1 + 168) = v172;
  *(_QWORD *)(a1 + 160) = 0;
  v174 = *(WTF **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v173;
  if (!v174)
    goto LABEL_118;
  if (*(_DWORD *)v174 != 1)
  {
    --*(_DWORD *)v174;
LABEL_118:
    *(_DWORD *)(a1 + 156) = 302;
    *(_QWORD *)(a1 + 160) = v75;
    goto LABEL_119;
  }
  WTF::JSONImpl::Value::operator delete(v174, v43, v44, v45, v46, v47, v48, v49);
  v173 = *(WTF **)(a1 + 160);
LABEL_111:
  *(_DWORD *)(a1 + 156) = 302;
  *(_QWORD *)(a1 + 160) = v75;
  if (!v173)
    goto LABEL_119;
  if (*(_DWORD *)v173 == 1)
  {
    WTF::JSONImpl::Value::operator delete(v173, v43, v44, v45, v46, v47, v48, v49);
    if (!a4)
      goto LABEL_123;
  }
  else
  {
    --*(_DWORD *)v173;
    if (!a4)
      goto LABEL_123;
  }
LABEL_120:
  if (v278 && *v278)
  {
    Inspector::InjectedScript::setExceptionValue((uint64_t)&v276, a4);
    *(_BYTE *)(a1 + 253) = 1;
  }
LABEL_123:
  *(_DWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 249) = 0;
  v275 = 0;
  v175 = *(unsigned int *)(a1 + 204);
  if ((_DWORD)v175)
  {
    v176 = *(_QWORD *)(a1 + 184);
    v177 = WTF::HashTable<std::pair<unsigned int,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>>,std::pair<unsigned int,unsigned long long>>(v176, *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16 * v175 - 16), *(_QWORD *)(*(_QWORD *)(a1 + 192) + 16 * v175 - 8));
    v178 = v176 ? v176 + 24 * *(unsigned int *)(v176 - 4) : 0;
    if ((int *)v178 != v177)
    {
      Inspector::AsyncStackTrace::buildInspectorObject(*((Inspector::AsyncStackTrace **)v177 + 2), (uint64_t *)v279);
      v275 = v279[0];
    }
  }
  v179 = *(uint64_t **)(a1 + 40);
  if (v278 && *v278)
  {
    if (*v33)
      v180 = **v33;
    else
      v180 = 0;
    Inspector::InjectedScript::wrapCallFrames((uint64_t)&v276, v180, v279);
  }
  else
  {
    v181 = (WTF *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v181 = 0x600000001;
    *((_QWORD *)v181 + 2) = 0;
    *((_QWORD *)v181 + 3) = 0;
    v279[0] = v181;
  }
  v182 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * *(int *)(a1 + 156)];
  v183 = v182[1];
  if (v183)
  {
    v184 = (_DWORD)v183 - 1;
    if (v183 == (char *)1)
    {
      v186 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v185 = *v182;
      v186 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v186 = 2;
      v186[1] = v184;
      *((_QWORD *)v186 + 1) = v185;
      v186[4] = 4;
    }
  }
  else
  {
    v186 = 0;
  }
  v281 = (WTF *)v186;
  v187 = *(WTF **)(a1 + 160);
  if (v187)
    ++*(_DWORD *)v187;
  v274 = v187;
  Inspector::DebuggerFrontendDispatcher::paused(v179, v279, (_DWORD **)&v281, &v274, &v275);
  v195 = v274;
  v274 = 0;
  if (v195)
  {
    if (*(_DWORD *)v195 == 1)
      WTF::JSONImpl::Value::operator delete(v195, v188, v189, v190, v191, v192, v193, v194);
    else
      --*(_DWORD *)v195;
  }
  v196 = v281;
  v281 = 0;
  if (v196)
  {
    if (*(_DWORD *)v196 == 2)
    {
      WTF::StringImpl::~StringImpl(v196, v188, v189, v190, v191, v192, v193, v194);
      WTF::fastFree(v226, v227, v228, v229, v230, v231, v232, v233);
    }
    else
    {
      *(_DWORD *)v196 -= 2;
    }
  }
  v197 = v279[0];
  v279[0] = 0;
  if (v197)
  {
    if (*(_DWORD *)v197 == 1)
      WTF::JSONImpl::Value::operator delete(v197, v188, v189, v190, v191, v192, v193, v194);
    else
      --*(_DWORD *)v197;
  }
  *(_BYTE *)(a1 + 251) = 0;
  v198 = *(_QWORD *)(a1 + 144);
  if (v198)
  {
    JSC::Debugger::removeBreakpoint(*(_QWORD **)(a1 + 56), v198, v189, v190, v191, v192, v193, v194);
    v206 = *(WTF **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    if (v206)
      WTF::RefCounted<JSC::Breakpoint>::deref(v206, v199, v200, v201, v202, v203, v204, v205);
  }
  v207 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 64) + 24) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24));
  v215 = mach_absolute_time();
  v217 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v217 != -1)
  {
    v279[0] = (WTF *)&v274;
    v281 = (WTF *)v279;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v281, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v216) = dword_1ECF4400C;
  v218 = (double)(v215 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v216 * 1000000000.0);
  v219 = (uint64_t *)(v207 + 24);
  v279[0] = *(WTF **)(v207 + 16);
  *(double *)&v279[1] = v218;
  v220 = *(unsigned int *)(v207 + 36);
  if ((_DWORD)v220 == *(_DWORD *)(v207 + 32))
  {
    v221 = (__int128 *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v219, v220 + 1, (unint64_t)v279);
    v220 = *(unsigned int *)(v207 + 36);
    v222 = *(_QWORD *)(v207 + 24);
    v223 = *v221;
  }
  else
  {
    v222 = *v219;
    v223 = *(_OWORD *)v279;
  }
  *(_OWORD *)(v222 + 16 * v220) = v223;
  ++*(_DWORD *)(v207 + 36);
  *(double *)(v207 + 8) = v218 - *(double *)(v207 + 16) + *(double *)(v207 + 8);
  *(_QWORD *)(v207 + 16) = 0x7FF8000000000000;
  *(_BYTE *)(a1 + 252) = 1;
  v224 = v275;
  v275 = 0;
  if (v224)
  {
    if (*(_DWORD *)v224 == 1)
      WTF::JSONImpl::Value::operator delete(v224, v208, v209, v210, v211, v212, v213, v214);
    else
      --*(_DWORD *)v224;
  }
  v276 = &off_1E3591350;
  if (v278)
  {
    v270 = v278 - 2;
    v271 = *(_QWORD *)(((unint64_t)(v278 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v272 = (uint64_t *)*(v278 - 1);
    if (v272)
    {
      v273 = *v270;
      *v272 = *v270;
      *(_QWORD *)(v273 + 8) = v272;
      *v270 = 0;
      v270[1] = 0;
    }
    *v270 = *(_QWORD *)(v271 + 40);
    *(_QWORD *)(v271 + 40) = v270;
    v278 = 0;
  }
  v225 = v277;
  v277 = 0;
  if (v225)
  {
    if (*(_DWORD *)v225 == 2)
    {
      WTF::StringImpl::~StringImpl(v225, v208, v209, v210, v211, v212, v213, v214);
      WTF::fastFree(v234, v235, v236, v237, v238, v239, v240, v241);
    }
    else
    {
      *(_DWORD *)v225 -= 2;
    }
  }
}

uint64_t **JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(uint64_t **result, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  int v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t v30;

  if (a2)
  {
    v10 = *a2;
    v8 = (uint64_t)(a2 - 2);
    v9 = v10;
    v11 = *result;
    if (!*result)
    {
      v12 = **(_QWORD **)((v8 & 0xFFFFFFFFFFFFF000) + 0x10);
      v13 = *(_QWORD **)(v12 + 712);
      if (!v13)
      {
        v30 = v9;
        v28 = **(_QWORD **)((v8 & 0xFFFFFFFFFFFFF000) + 0x10);
        v29 = result;
        JSC::HandleSet::grow((JSC::HandleSet *)(v12 + 672), v8, a3, a4, a5, a6, a7, a8);
        v12 = v28;
        result = v29;
        v9 = v30;
        v13 = *(_QWORD **)(v28 + 712);
      }
      *(_QWORD *)(v12 + 712) = *v13;
      v13[2] = 0;
      v11 = v13 + 2;
      *v13 = 0;
      v13[1] = 0;
      *result = v13 + 2;
    }
    v14 = (unint64_t)(v11 - 2);
    v15 = *v11;
    v17 = (v9 & 0xFFFE000000000002) == 0 && v9 != 0;
    v18 = (v15 & 0xFFFE000000000002) == 0;
    if (!v15)
      v18 = 0;
    if (v18 != v17)
    {
      if ((v17 & 1) != 0)
      {
        v19 = *(unint64_t **)((v14 & 0xFFFFFFFFFFFFF000) + 0x10);
        v20 = v19[3];
        v19 += 3;
        *(_QWORD *)v14 = v20;
        *(v11 - 1) = (uint64_t)v19;
        *v19 = v14;
        *(_QWORD *)(v20 + 8) = v14;
      }
      else
      {
        v27 = *(_QWORD *)v14;
        v26 = (_QWORD *)*(v11 - 1);
        *v26 = *(_QWORD *)v14;
        *(_QWORD *)(v27 + 8) = v26;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        v11 = *result;
      }
    }
    *v11 = v9;
  }
  else
  {
    v21 = *result;
    if (*result)
    {
      v22 = v21 - 2;
      v23 = *(_QWORD *)(((unint64_t)(v21 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v24 = (uint64_t *)*(v21 - 1);
      if (v24)
      {
        v25 = *v22;
        *v24 = *v22;
        *(_QWORD *)(v25 + 8) = v24;
        *v22 = 0;
        v22[1] = 0;
      }
      *v22 = *(_QWORD *)(v23 + 40);
      *(_QWORD *)(v23 + 40) = v22;
      *result = 0;
    }
  }
  return result;
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::didPause(uint64_t a1, uint64_t a2, JSC::DebuggerCallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorDebuggerAgent::didPause(a1 - 32, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::InspectorDebuggerAgent::applyBreakpoints(Inspector::InspectorDebuggerAgent *this, JSC::CodeBlock *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  const WTF::StringImpl *v13;
  int v14;
  int v15;
  Inspector::InspectorDebuggerAgent::SymbolicBreakpoint *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const WTF::StringImpl *v28;

  v8 = *((unsigned int *)this + 61);
  if ((_DWORD)v8)
  {
    v10 = *((_QWORD *)a2 + 8);
    if (v10 && *(_BYTE *)(v10 + 5) == 12)
    {
      v13 = *(const WTF::StringImpl **)(*(_QWORD *)(v10 + 88) + 80);
      if (v13)
      {
        v14 = *(_DWORD *)v13;
        v15 = *((_DWORD *)v13 + 1);
        *(_DWORD *)v13 += 2;
        v28 = v13;
        if (!v15)
        {
          v28 = 0;
          if (v14)
            goto LABEL_17;
          goto LABEL_20;
        }
        v16 = (Inspector::InspectorDebuggerAgent::SymbolicBreakpoint *)*((_QWORD *)this + 29);
        v17 = 48 * v8;
        do
        {
          if (Inspector::InspectorDebuggerAgent::SymbolicBreakpoint::matches(v16, &v28, a3, a4, a5, a6, a7, a8))
          {
            *((_DWORD *)a2 + 10) += 4;
            v19 = *((_QWORD *)a2 + 15);
            if (v19)
            {
              if ((*(_BYTE *)(v19 + 12) & 0xFE) == 4)
                JSC::CodeBlock::jettison((uint64_t)a2, 2u, 0, 0, v18, a5, a6, a7, a8);
            }
          }
          v16 = (Inspector::InspectorDebuggerAgent::SymbolicBreakpoint *)((char *)v16 + 48);
          v17 -= 48;
        }
        while (v17);
        v13 = v28;
        v28 = 0;
        if (v13)
        {
          v14 = *(_DWORD *)v13 - 2;
          if (*(_DWORD *)v13 != 2)
          {
LABEL_17:
            *(_DWORD *)v13 = v14;
            return;
          }
LABEL_20:
          WTF::StringImpl::~StringImpl(v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
        }
      }
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::applyBreakpoints(Inspector::InspectorDebuggerAgent *this, JSC::CodeBlock *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorDebuggerAgent::applyBreakpoints((Inspector::InspectorDebuggerAgent *)((char *)this - 32), a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::InspectorDebuggerAgent::breakpointActionSound(Inspector::DebuggerFrontendDispatcher **this, int a2)
{
  Inspector::DebuggerFrontendDispatcher::playBreakpointActionSound(this[5], a2);
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::breakpointActionSound(Inspector::DebuggerFrontendDispatcher **this, int a2)
{
  Inspector::DebuggerFrontendDispatcher::playBreakpointActionSound(this[1], a2);
}

void Inspector::InspectorDebuggerAgent::breakpointActionProbe(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  WTF *v61;
  WTF *v62;
  uint64_t v63;
  double *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  WTF *v81;
  WTF *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  double v87;
  uint64_t v88;
  double *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WTF::AtomStringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  WTF *v105;
  WTF *v106;
  WTF *v107;
  WTF *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::AtomStringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  WTF *v125;
  WTF *v126;
  WTF *v127;
  WTF *v128;
  WTF *v129;
  WTF::StringImpl *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _DWORD **v187;
  uint64_t v188;
  _DWORD *v189;
  _DWORD **v190;
  uint64_t v191;
  _DWORD *v192;
  _DWORD **v193;
  uint64_t v194;
  _DWORD *v195;
  _DWORD **v196;
  uint64_t v197;
  _DWORD *v198;
  _DWORD **v199;
  uint64_t v200;
  _DWORD *v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  WTF *v206;
  void (**v207)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v208;
  uint64_t v209;
  WTF *v210;
  WTF *v211;
  WTF *v212;
  int v213;
  char v214;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  Inspector::InjectedScriptManager::injectedScriptFor(*(_QWORD *)(a1 + 64), a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v207);
  v212 = (WTF *)"breakpoint-action-";
  v213 = 18;
  LODWORD(v210) = v11;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((unint64_t)&v212, (unsigned int *)&v210, (int **)&v211);
  if (v211)
  {
    Inspector::InjectedScript::wrapObject((uint64_t)&v207, a6, (const WTF::String *)&v211, 1, &v206);
    v20 = v211;
    v211 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
    if (v206)
    {
      v21 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v21 = 0x500000001;
      *(_QWORD *)(v21 + 16) = 0;
      v22 = (uint64_t *)(v21 + 16);
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0;
      v23 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v23 = 0x700000002;
      *(_QWORD *)(v23 + 8) = "probeId";
      *(_DWORD *)(v23 + 16) = 4;
      v210 = (WTF *)v23;
      v24 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v24 = 0x300000001;
      v24[1] = (double)v11;
      v211 = (WTF *)v24;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v21 + 16), (WTF::AtomStringImpl *)&v210, (const WTF::StringImpl *)&v211, v25, v26, v27, v28, v29, (uint64_t)&v212);
      if (v214)
      {
        v37 = (uint64_t *)(v21 + 24);
        v38 = *(unsigned int *)(v21 + 36);
        if ((_DWORD)v38 == *(_DWORD *)(v21 + 32))
        {
          v187 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v210);
          v38 = *(unsigned int *)(v21 + 36);
          v188 = *(_QWORD *)(v21 + 24);
          v189 = *v187;
          if (*v187)
            *v189 += 2;
          *(_QWORD *)(v188 + 8 * v38) = v189;
        }
        else
        {
          v39 = *v37;
          v40 = v210;
          if (v210)
            *(_DWORD *)v210 += 2;
          *(_QWORD *)(v39 + 8 * v38) = v40;
        }
        *(_DWORD *)(v21 + 36) = v38 + 1;
      }
      v41 = v211;
      v211 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 1)
          WTF::JSONImpl::Value::operator delete(v41, v30, v31, v32, v33, v34, v35, v36);
        else
          --*(_DWORD *)v41;
      }
      v42 = v210;
      v210 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          WTF::StringImpl::~StringImpl(v42, v30, v31, v32, v33, v34, v35, v36);
          WTF::fastFree(v147, v148, v149, v150, v151, v152, v153, v154);
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
      v43 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v43 = 0x700000002;
      *(_QWORD *)(v43 + 8) = "batchId";
      *(_DWORD *)(v43 + 16) = 4;
      v210 = (WTF *)v43;
      v44 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v44 = 0x300000001;
      v44[1] = (double)v10;
      v211 = (WTF *)v44;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v22, (WTF::AtomStringImpl *)&v210, (const WTF::StringImpl *)&v211, v45, v46, v47, v48, v49, (uint64_t)&v212);
      if (v214)
      {
        v57 = (uint64_t *)(v21 + 24);
        v58 = *(unsigned int *)(v21 + 36);
        if ((_DWORD)v58 == *(_DWORD *)(v21 + 32))
        {
          v190 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v58 + 1, (unint64_t)&v210);
          v58 = *(unsigned int *)(v21 + 36);
          v191 = *(_QWORD *)(v21 + 24);
          v192 = *v190;
          if (*v190)
            *v192 += 2;
          *(_QWORD *)(v191 + 8 * v58) = v192;
        }
        else
        {
          v59 = *v57;
          v60 = v210;
          if (v210)
            *(_DWORD *)v210 += 2;
          *(_QWORD *)(v59 + 8 * v58) = v60;
        }
        *(_DWORD *)(v21 + 36) = v58 + 1;
      }
      v61 = v211;
      v211 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 1)
          WTF::JSONImpl::Value::operator delete(v61, v50, v51, v52, v53, v54, v55, v56);
        else
          --*(_DWORD *)v61;
      }
      v62 = v210;
      v210 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
        {
          WTF::StringImpl::~StringImpl(v62, v50, v51, v52, v53, v54, v55, v56);
          WTF::fastFree(v155, v156, v157, v158, v159, v160, v161, v162);
        }
        else
        {
          *(_DWORD *)v62 -= 2;
        }
      }
      v63 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v63 = 0x800000002;
      *(_QWORD *)(v63 + 8) = "sampleId";
      *(_DWORD *)(v63 + 16) = 4;
      v210 = (WTF *)v63;
      v64 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v64 = 0x300000001;
      v64[1] = (double)v9;
      v211 = (WTF *)v64;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v22, (WTF::AtomStringImpl *)&v210, (const WTF::StringImpl *)&v211, v65, v66, v67, v68, v69, (uint64_t)&v212);
      if (v214)
      {
        v77 = (uint64_t *)(v21 + 24);
        v78 = *(unsigned int *)(v21 + 36);
        if ((_DWORD)v78 == *(_DWORD *)(v21 + 32))
        {
          v193 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, v78 + 1, (unint64_t)&v210);
          v78 = *(unsigned int *)(v21 + 36);
          v194 = *(_QWORD *)(v21 + 24);
          v195 = *v193;
          if (*v193)
            *v195 += 2;
          *(_QWORD *)(v194 + 8 * v78) = v195;
        }
        else
        {
          v79 = *v77;
          v80 = v210;
          if (v210)
            *(_DWORD *)v210 += 2;
          *(_QWORD *)(v79 + 8 * v78) = v80;
        }
        *(_DWORD *)(v21 + 36) = v78 + 1;
      }
      v81 = v211;
      v211 = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 1)
          WTF::JSONImpl::Value::operator delete(v81, v70, v71, v72, v73, v74, v75, v76);
        else
          --*(_DWORD *)v81;
      }
      v82 = v210;
      v210 = 0;
      if (v82)
      {
        if (*(_DWORD *)v82 == 2)
        {
          WTF::StringImpl::~StringImpl(v82, v70, v71, v72, v73, v74, v75, v76);
          WTF::fastFree(v163, v164, v165, v166, v167, v168, v169, v170);
        }
        else
        {
          *(_DWORD *)v82 -= 2;
        }
      }
      v83 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 64) + 24) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 24));
      v84 = mach_absolute_time();
      v86 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v86 != -1)
      {
        v212 = (WTF *)&v210;
        v211 = (WTF *)&v212;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v211, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v85) = dword_1ECF4400C;
      v87 = *(double *)(v83 + 8)
          + (double)(v84 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v85 * 1000000000.0)
          - *(double *)(v83 + 16);
      v88 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v88 = 0x900000002;
      *(_QWORD *)(v88 + 8) = "timestamp";
      *(_DWORD *)(v88 + 16) = 4;
      v210 = (WTF *)v88;
      v89 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v89 = 0x200000001;
      v89[1] = v87;
      v211 = (WTF *)v89;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v22, (WTF::AtomStringImpl *)&v210, (const WTF::StringImpl *)&v211, v90, v91, v92, v93, v94, (uint64_t)&v212);
      if (v214)
      {
        v102 = (uint64_t *)(v21 + 24);
        v103 = *(unsigned int *)(v21 + 36);
        if ((_DWORD)v103 == *(_DWORD *)(v21 + 32))
        {
          v196 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v102, v103 + 1, (unint64_t)&v210);
          v103 = *(unsigned int *)(v21 + 36);
          v197 = *(_QWORD *)(v21 + 24);
          v198 = *v196;
          if (*v196)
            *v198 += 2;
          *(_QWORD *)(v197 + 8 * v103) = v198;
        }
        else
        {
          v104 = *v102;
          v105 = v210;
          if (v210)
            *(_DWORD *)v210 += 2;
          *(_QWORD *)(v104 + 8 * v103) = v105;
        }
        *(_DWORD *)(v21 + 36) = v103 + 1;
      }
      v106 = v211;
      v211 = 0;
      if (v106)
      {
        if (*(_DWORD *)v106 == 1)
          WTF::JSONImpl::Value::operator delete(v106, v95, v96, v97, v98, v99, v100, v101);
        else
          --*(_DWORD *)v106;
      }
      v107 = v210;
      v210 = 0;
      if (v107)
      {
        if (*(_DWORD *)v107 == 2)
        {
          WTF::StringImpl::~StringImpl(v107, v95, v96, v97, v98, v99, v100, v101);
          WTF::fastFree(v171, v172, v173, v174, v175, v176, v177, v178);
        }
        else
        {
          *(_DWORD *)v107 -= 2;
        }
      }
      v108 = v206;
      v206 = 0;
      v109 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v109 = 0x700000002;
      *(_QWORD *)(v109 + 8) = "payload";
      *(_DWORD *)(v109 + 16) = 4;
      v210 = v108;
      v211 = (WTF *)v109;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v22, (WTF::AtomStringImpl *)&v211, (const WTF::StringImpl *)&v210, v110, v111, v112, v113, v114, (uint64_t)&v212);
      if (v214)
      {
        v122 = (uint64_t *)(v21 + 24);
        v123 = *(unsigned int *)(v21 + 36);
        if ((_DWORD)v123 == *(_DWORD *)(v21 + 32))
        {
          v199 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v122, v123 + 1, (unint64_t)&v211);
          v123 = *(unsigned int *)(v21 + 36);
          v200 = *(_QWORD *)(v21 + 24);
          v201 = *v199;
          if (*v199)
            *v201 += 2;
          *(_QWORD *)(v200 + 8 * v123) = v201;
        }
        else
        {
          v124 = *v122;
          v125 = v211;
          if (v211)
            *(_DWORD *)v211 += 2;
          *(_QWORD *)(v124 + 8 * v123) = v125;
        }
        *(_DWORD *)(v21 + 36) = v123 + 1;
      }
      v126 = v210;
      v210 = 0;
      if (v126)
      {
        if (*(_DWORD *)v126 == 1)
          WTF::JSONImpl::Value::operator delete(v126, v115, v116, v117, v118, v119, v120, v121);
        else
          --*(_DWORD *)v126;
      }
      v127 = v211;
      v211 = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 2)
        {
          WTF::StringImpl::~StringImpl(v127, v115, v116, v117, v118, v119, v120, v121);
          WTF::fastFree(v179, v180, v181, v182, v183, v184, v185, v186);
        }
        else
        {
          *(_DWORD *)v127 -= 2;
        }
      }
      v212 = (WTF *)v21;
      Inspector::DebuggerFrontendDispatcher::didSampleProbe(*(uint64_t **)(a1 + 40), &v212);
      v128 = v212;
      v212 = 0;
      if (v128)
      {
        if (*(_DWORD *)v128 == 1)
          WTF::JSONImpl::Value::operator delete(v128, v13, v14, v15, v16, v17, v18, v19);
        else
          --*(_DWORD *)v128;
      }
      v129 = v206;
      v206 = 0;
      if (v129)
      {
        if (*(_DWORD *)v129 == 1)
          WTF::JSONImpl::Value::operator delete(v129, v13, v14, v15, v16, v17, v18, v19);
        else
          --*(_DWORD *)v129;
      }
    }
    v207 = &off_1E3591350;
    if (v209)
    {
      v202 = (uint64_t *)(v209 - 16);
      v203 = *(_QWORD *)(((v209 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
      v204 = *(uint64_t **)(v209 - 8);
      if (v204)
      {
        v205 = *v202;
        *v204 = *v202;
        *(_QWORD *)(v205 + 8) = v204;
        *v202 = 0;
        v202[1] = 0;
      }
      *v202 = *(_QWORD *)(v203 + 40);
      *(_QWORD *)(v203 + 40) = v202;
      v209 = 0;
    }
    v130 = v208;
    v208 = 0;
    if (v130)
    {
      if (*(_DWORD *)v130 == 2)
      {
        WTF::StringImpl::~StringImpl(v130, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
      }
      else
      {
        *(_DWORD *)v130 -= 2;
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::breakpointActionProbe(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorDebuggerAgent::breakpointActionProbe(a1 - 32, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::InspectorDebuggerAgent::didContinue(Inspector::InspectorDebuggerAgent *this, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  char v48;
  char **v49;
  char *v50;

  if (*((_BYTE *)this + 252))
  {
    *((_BYTE *)this + 252) = 0;
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 8) + 24) + 56))(*(_QWORD *)(*((_QWORD *)this + 8) + 24));
    v10 = mach_absolute_time();
    v12 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v12 != -1)
    {
      v50 = &v48;
      v49 = &v50;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v49, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v11) = dword_1ECF4400C;
    *(double *)(v9 + 16) = (double)(v10 * WTF::machTimebaseInfo(void)::timebaseInfo)
                         / ((double)v11
                          * 1000000000.0);
  }
  *((_QWORD *)this + 13) = 0;
  JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((uint64_t **)this + 14, 0, a3, a4, a5, a6, a7, a8);
  v13 = *((_QWORD *)this + 8);
  v14 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v14 = 0x900000002;
  *(_QWORD *)(v14 + 8) = "backtrace";
  *(_DWORD *)(v14 + 16) = 4;
  v50 = (char *)v14;
  v22 = *(_DWORD **)(v13 + 8);
  if (!v22)
  {
    v25 = 0;
    LODWORD(v23) = 0;
LABEL_14:
    v24 = &v22[12 * v23];
    goto LABEL_15;
  }
  v23 = *(v22 - 1);
  v24 = &v22[12 * v23];
  if (!*(v22 - 3))
  {
    v25 = &v22[12 * v23];
    goto LABEL_14;
  }
  v25 = v22;
  if ((_DWORD)v23)
  {
    v26 = 48 * v23;
    v25 = v22;
    while ((*v25 + 1) <= 1)
    {
      v25 += 12;
      v26 -= 48;
      if (!v26)
      {
        v25 = v24;
        break;
      }
    }
  }
LABEL_15:
  if (v22)
    v27 = &v22[12 * *(v22 - 1)];
  else
    v27 = 0;
  if (v27 == v25)
  {
    v50 = 0;
LABEL_28:
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v14, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
    goto LABEL_30;
  }
  do
  {
    Inspector::InjectedScript::releaseObjectGroup((Inspector::InjectedScript *)(v25 + 2), (const WTF::String *)&v50);
    v28 = v25 + 12;
    v25 = v24;
    if (v28 != v24)
    {
      v25 = v28;
      while ((*v25 + 1) <= 1)
      {
        v25 += 12;
        if (v25 == v24)
        {
          v25 = v24;
          break;
        }
      }
    }
  }
  while (v25 != v27);
  v14 = (uint64_t)v50;
  v50 = 0;
  if (v14)
    goto LABEL_28;
LABEL_30:
  v29 = *((_DWORD *)this + 39);
  if (v29 != 302)
  {
    *((_DWORD *)this + 42) = v29;
    v30 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    v31 = (WTF *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v30;
    if (v31)
    {
      if (*(_DWORD *)v31 == 1)
        WTF::JSONImpl::Value::operator delete(v31, v15, v16, v17, v18, v19, v20, v21);
      else
        --*(_DWORD *)v31;
    }
  }
  *((_DWORD *)this + 39) = 97;
  v32 = (WTF *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
      WTF::JSONImpl::Value::operator delete(v32, v15, v16, v17, v18, v19, v20, v21);
    else
      --*(_DWORD *)v32;
  }
  if (!*((_BYTE *)this + 253))
    goto LABEL_61;
  v33 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v33)
  {
    v34 = *(unsigned int *)(v33 - 4);
    v35 = (_DWORD *)(v33 + 48 * v34);
    if (*(_DWORD *)(v33 - 12))
    {
      v36 = *(_DWORD **)(*((_QWORD *)this + 8) + 8);
      if ((_DWORD)v34)
      {
        v37 = 48 * v34;
        v36 = *(_DWORD **)(*((_QWORD *)this + 8) + 8);
        while ((*v36 + 1) <= 1)
        {
          v36 += 12;
          v37 -= 48;
          if (!v37)
          {
            v36 = v35;
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
    v36 = (_DWORD *)(v33 + 48 * v34);
  }
  else
  {
    v36 = 0;
    LODWORD(v34) = 0;
  }
  v35 = (_DWORD *)(v33 + 48 * v34);
LABEL_50:
  if (v33)
    v46 = (_DWORD *)(v33 + 48 * *(unsigned int *)(v33 - 4));
  else
    v46 = 0;
  while (v36 != v46)
  {
    Inspector::InjectedScript::clearExceptionValue((Inspector::InjectedScript *)(v36 + 2));
    v47 = v36 + 12;
    v36 = v35;
    if (v47 != v35)
    {
      v36 = v47;
      while ((*v36 + 1) <= 1)
      {
        v36 += 12;
        if (v36 == v35)
        {
          v36 = v35;
          break;
        }
      }
    }
  }
  *((_BYTE *)this + 253) = 0;
LABEL_61:
  if (*((_DWORD *)this + 38) == 2)
    Inspector::DebuggerFrontendDispatcher::resumed(*((Inspector::DebuggerFrontendDispatcher **)this + 5));
}

void Inspector::InspectorDebuggerAgent::clearExceptionValue(Inspector::InspectorDebuggerAgent *this)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;

  if (!*((_BYTE *)this + 253))
    return;
  v2 = *(_QWORD *)(*((_QWORD *)this + 8) + 8);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = (_DWORD *)(v2 + 48 * v3);
    if (*(_DWORD *)(v2 - 12))
    {
      v5 = *(_DWORD **)(*((_QWORD *)this + 8) + 8);
      if ((_DWORD)v3)
      {
        v6 = 48 * v3;
        v5 = *(_DWORD **)(*((_QWORD *)this + 8) + 8);
        while ((*v5 + 1) <= 1)
        {
          v5 += 12;
          v6 -= 48;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_12;
          }
        }
      }
      goto LABEL_12;
    }
    v5 = (_DWORD *)(v2 + 48 * v3);
  }
  else
  {
    v5 = 0;
    LODWORD(v3) = 0;
  }
  v4 = (_DWORD *)(v2 + 48 * v3);
LABEL_12:
  if (v2)
    v7 = (_DWORD *)(v2 + 48 * *(unsigned int *)(v2 - 4));
  else
    v7 = 0;
  while (v5 != v7)
  {
    Inspector::InjectedScript::clearExceptionValue((Inspector::InjectedScript *)(v5 + 2));
    v8 = v5 + 12;
    v5 = v4;
    if (v8 != v4)
    {
      v5 = v8;
      while ((*v5 + 1) <= 1)
      {
        v5 += 12;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  *((_BYTE *)this + 253) = 0;
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::didContinue(Inspector::InspectorDebuggerAgent *this, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorDebuggerAgent::didContinue((Inspector::InspectorDebuggerAgent *)((char *)this - 32), a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::InspectorDebuggerAgent::didDeferBreakpointPause(WTF **this, uint64_t a2)
{
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;

  Inspector::InspectorDebuggerAgent::buildBreakpointPauseReason((Inspector::InspectorDebuggerAgent *)this, a2, (uint64_t *)&v14);
  v10 = *((_DWORD *)this + 39);
  if (v10 != 302)
  {
    *((_DWORD *)this + 42) = v10;
    v11 = this[20];
    this[20] = 0;
    v12 = this[22];
    this[22] = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::JSONImpl::Value::operator delete(v12, v3, v4, v5, v6, v7, v8, v9);
      else
        --*(_DWORD *)v12;
    }
  }
  *((_DWORD *)this + 39) = 300;
  v13 = this[20];
  this[20] = v14;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::JSONImpl::Value::operator delete(v13, v3, v4, v5, v6, v7, v8, v9);
    else
      --*(_DWORD *)v13;
  }
}

void `non-virtual thunk to'Inspector::InspectorDebuggerAgent::didDeferBreakpointPause(Inspector::InspectorDebuggerAgent *this, uint64_t a2)
{
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;

  Inspector::InspectorDebuggerAgent::buildBreakpointPauseReason((Inspector::InspectorDebuggerAgent *)((char *)this - 32), a2, &v14);
  v10 = *((_DWORD *)this + 31);
  if (v10 != 302)
  {
    *((_DWORD *)this + 34) = v10;
    v11 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = 0;
    v12 = (WTF *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::JSONImpl::Value::operator delete(v12, v3, v4, v5, v6, v7, v8, v9);
      else
        --*(_DWORD *)v12;
    }
  }
  *((_DWORD *)this + 31) = 300;
  v13 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v14;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      WTF::JSONImpl::Value::operator delete(v13, v3, v4, v5, v6, v7, v8, v9);
    else
      --*(_DWORD *)v13;
  }
}

void Inspector::InspectorDebuggerAgent::clearDebuggerBreakpointState(Inspector::InspectorDebuggerAgent *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::Debugger::Script *v41;
  uint64_t v42;
  WTF *v43;
  int v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  JSC::Debugger *v48;
  unsigned int *v49;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v49, *(JSC::VM **)(*((_QWORD *)this + 7) + 16), a4, a5, a6, a7, a8, a9, a2);
  JSC::Debugger::clearBreakpoints(*((JSC::Debugger **)this + 7), v10, v11, v12, v13, v14, v15, v16);
  v24 = *((_QWORD *)this + 7);
  v25 = *(_QWORD *)(v24 + 40);
  if (v25)
  {
    *(_QWORD *)(v24 + 40) = 0;
    WTF::fastFree(v25 - 16, v17, v18, v19, v20, v21, v22, v23);
  }
  JSC::JSLockHolder::~JSLockHolder(&v49, v17, v18, v19, v20, v21, v22, v23);
  *((_QWORD *)this + 13) = 0;
  JSC::Strong<JSC::Unknown,(JSC::ShouldStrongDestructorGrabLock)0>::operator=((uint64_t **)this + 14, 0, v26, v27, v28, v29, v30, v31);
  v39 = *((_QWORD *)this + 9);
  if (v39)
  {
    *((_QWORD *)this + 9) = 0;
    v40 = *(unsigned int *)(v39 - 4);
    if ((_DWORD)v40)
    {
      v41 = (JSC::Debugger::Script *)(v39 + 8);
      do
      {
        if (*((_DWORD *)v41 - 2) != -1)
          JSC::Debugger::Script::~Script(v41, v32, v33, v34, v35, v36, v37, v38);
        v41 = (JSC::Debugger::Script *)((char *)v41 + 72);
        --v40;
      }
      while (v40);
    }
    WTF::fastFree(v39 - 16, v32, v33, v34, v35, v36, v37, v38);
  }
  v42 = *((_QWORD *)this + 16);
  if (v42)
  {
    *((_QWORD *)this + 16) = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v42, v32, v33, v34, v35, v36, v37, v38);
  }
  v43 = (WTF *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 17) = 1;
  *((_QWORD *)this + 18) = 0;
  if (v43)
    WTF::RefCounted<JSC::Breakpoint>::deref(v43, v32, v33, v34, v35, v36, v37, v38);
  v44 = *((_DWORD *)this + 39);
  if (v44 != 302)
  {
    *((_DWORD *)this + 42) = v44;
    v45 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    v46 = (WTF *)*((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = v45;
    if (v46)
    {
      if (*(_DWORD *)v46 == 1)
        WTF::JSONImpl::Value::operator delete(v46, v32, v33, v34, v35, v36, v37, v38);
      else
        --*(_DWORD *)v46;
    }
  }
  *((_DWORD *)this + 39) = 97;
  v47 = (WTF *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 1)
      WTF::JSONImpl::Value::operator delete(v47, v32, v33, v34, v35, v36, v37, v38);
    else
      --*(_DWORD *)v47;
  }
  *((_BYTE *)this + 251) = 0;
  *((_BYTE *)this + 253) = 0;
  v48 = (JSC::Debugger *)*((_QWORD *)this + 7);
  if ((*((_WORD *)v48 + 24) & 0x20) != 0)
  {
    JSC::Debugger::continueProgram(v48, v32, v33, v34, v35, v36, v37, v38);
    Inspector::DebuggerFrontendDispatcher::resumed(*((Inspector::DebuggerFrontendDispatcher **)this + 5));
  }
}

void Inspector::InspectorDebuggerAgent::didClearGlobalObject(Inspector::DebuggerFrontendDispatcher **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  Inspector::InspectorDebuggerAgent::clearDebuggerBreakpointState((Inspector::InspectorDebuggerAgent *)this, a9, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorDebuggerAgent::clearAsyncStackTraceData((Inspector::InspectorDebuggerAgent *)this, v10, v11, v12, v13, v14, v15, v16);
  Inspector::DebuggerFrontendDispatcher::globalObjectCleared(this[5]);
}

uint64_t Inspector::InspectorHeapAgent::InspectorHeapAgent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 8) = "Heap";
  *(_DWORD *)(v4 + 16) = 4;
  *(_QWORD *)(a1 + 16) = &unk_1E3594990;
  *(_QWORD *)v4 = 0x400000002;
  *(_QWORD *)a1 = off_1E35948F8;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[1];
  *(_QWORD *)(a1 + 24) = &unk_1E35949F0;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = a2[2];
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = v6;
  *(_QWORD *)(a1 + 40) = v7;
  Inspector::HeapBackendDispatcher::create((Inspector::HeapBackendDispatcher *)a2[3], (Inspector::BackendDispatcher *)(a1 + 16), &v10);
  v8 = *a2;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v8;
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x7FF8000000000000;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 8) = "Heap";
  *(_DWORD *)(v4 + 16) = 4;
  *(_QWORD *)(a1 + 16) = &unk_1E3594990;
  *(_QWORD *)v4 = 0x400000002;
  *(_QWORD *)a1 = off_1E35948F8;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[1];
  *(_QWORD *)(a1 + 24) = &unk_1E35949F0;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = a2[2];
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = v6;
  *(_QWORD *)(a1 + 40) = v7;
  Inspector::HeapBackendDispatcher::create((Inspector::HeapBackendDispatcher *)a2[3], (Inspector::BackendDispatcher *)(a1 + 16), &v10);
  v8 = *a2;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v8;
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0x7FF8000000000000;
  return a1;
}

void Inspector::InspectorHeapAgent::~InspectorHeapAgent(Inspector::InspectorHeapAgent *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E35948F8;
  *((_QWORD *)this + 2) = &unk_1E3594990;
  *((_QWORD *)this + 3) = &unk_1E35949F0;
  v9 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(this, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  _DWORD *v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E35948F8;
  *((_QWORD *)this + 2) = &unk_1E3594990;
  *((_QWORD *)this + 3) = &unk_1E35949F0;
  v9 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(this, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = off_1E35948F8;
  *((_QWORD *)this + 2) = &unk_1E3594990;
  *((_QWORD *)this + 3) = &unk_1E35949F0;
  v9 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(this, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
}

void `non-virtual thunk to'Inspector::InspectorHeapAgent::~InspectorHeapAgent(Inspector::InspectorHeapAgent *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorAgentBase *v9;
  _DWORD *v10;
  unint64_t v11;

  *((_QWORD *)this - 2) = off_1E35948F8;
  v9 = (Inspector::InspectorHeapAgent *)((char *)this - 16);
  *(_QWORD *)this = &unk_1E3594990;
  *((_QWORD *)this + 1) = &unk_1E35949F0;
  v10 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(v9, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  Inspector::InspectorAgentBase *v9;
  _DWORD *v10;
  unint64_t v11;

  *((_QWORD *)this - 3) = off_1E35948F8;
  v9 = (Inspector::InspectorHeapAgent *)((char *)this - 24);
  *((_QWORD *)this - 1) = &unk_1E3594990;
  *(_QWORD *)this = &unk_1E35949F0;
  v10 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(v9, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  Inspector::InspectorAgentBase *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *((_QWORD *)this - 2) = off_1E35948F8;
  v9 = (Inspector::InspectorHeapAgent *)((char *)this - 16);
  *(_QWORD *)this = &unk_1E3594990;
  *((_QWORD *)this + 1) = &unk_1E35949F0;
  v10 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(v9, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
}

{
  Inspector::InspectorAgentBase *v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *((_QWORD *)this - 3) = off_1E35948F8;
  v9 = (Inspector::InspectorHeapAgent *)((char *)this - 24);
  *((_QWORD *)this - 1) = &unk_1E3594990;
  *(_QWORD *)this = &unk_1E35949F0;
  v10 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(v9, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
}

void Inspector::InspectorHeapAgent::willDestroyFrontendAndBackend(uint64_t a1)
{
  WTF::AtomStringImpl *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  char v18;

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)a1 + 56))(&v17);
  if (v18)
  {
    v8 = v17;
    v17 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::~StringImpl(v8, v1, v2, v3, v4, v5, v6, v7);
        WTF::fastFree(v9, v10, v11, v12, v13, v14, v15, v16);
      }
      else
      {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
}

uint64_t Inspector::InspectorHeapAgent::enable@<X0>(Inspector::InspectorHeapAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  if (*((_BYTE *)this + 64))
  {
    result = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)result = 0x1B00000002;
    *(_QWORD *)(result + 8) = "Heap domain already enabled";
    *(_DWORD *)(result + 16) = 4;
    *(_QWORD *)a2 = result;
    v4 = 1;
  }
  else
  {
    *((_BYTE *)this + 64) = 1;
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7));
    v8 = (char *)this + 24;
    result = v6 + 856;
    v7 = *(unsigned int *)(v6 + 868);
    if ((_DWORD)v7 == *(_DWORD *)(v6 + 864))
    {
      result = (uint64_t)WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v7 + 1, (unint64_t)&v8);
      v7 = *(unsigned int *)(v6 + 868);
      *(_QWORD *)(*(_QWORD *)(v6 + 856) + 8 * v7) = *(_QWORD *)result;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)result + 8 * v7) = (char *)this + 24;
    }
    v4 = 0;
    *(_DWORD *)(v6 + 868) = v7 + 1;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t `non-virtual thunk to'Inspector::InspectorHeapAgent::enable@<X0>(Inspector::InspectorHeapAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  if (*((_BYTE *)this + 48))
  {
    result = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)result = 0x1B00000002;
    *(_QWORD *)(result + 8) = "Heap domain already enabled";
    *(_DWORD *)(result + 16) = 4;
    *(_QWORD *)a2 = result;
    v4 = 1;
  }
  else
  {
    *((_BYTE *)this + 48) = 1;
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
    v8 = (char *)this + 8;
    result = v6 + 856;
    v7 = *(unsigned int *)(v6 + 868);
    if ((_DWORD)v7 == *(_DWORD *)(v6 + 864))
    {
      result = (uint64_t)WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, v7 + 1, (unint64_t)&v8);
      v7 = *(unsigned int *)(v6 + 868);
      *(_QWORD *)(*(_QWORD *)(v6 + 856) + 8 * v7) = *(_QWORD *)result;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)result + 8 * v7) = (char *)this + 8;
    }
    v4 = 0;
    *(_DWORD *)(v6 + 868) = v7 + 1;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

void Inspector::InspectorHeapAgent::disable(Inspector::InspectorHeapAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Inspector::InspectorHeapAgent **v7;
  uint64_t v8;
  Inspector::InspectorHeapAgent *v9;
  uint64_t v10;
  char v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;

  if (*((_BYTE *)this + 64))
  {
    *((_WORD *)this + 32) = 0;
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7));
    v5 = *(unsigned int *)(v4 + 868);
    if ((_DWORD)v5)
    {
      v6 = v4;
      v7 = *(Inspector::InspectorHeapAgent ***)(v4 + 856);
      if (*v7 == (Inspector::InspectorHeapAgent *)((char *)this + 24))
      {
        v8 = 0;
LABEL_10:
        memmove(&v7[v8], &v7[v8 + 1], 8 * v5 - (8 * v8 + 8));
        --*(_DWORD *)(v6 + 868);
      }
      else
      {
        v8 = 0;
        while (v5 - 1 != v8)
        {
          v9 = v7[++v8];
          if (v9 == (Inspector::InspectorHeapAgent *)((char *)this + 24))
            goto LABEL_10;
        }
      }
    }
    v12 = (JSC::VM *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7));
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v34, v12, v13, v14, v15, v16, v17, v18, v19);
    v27 = *((_QWORD *)v12 + 11669);
    if ((v27 & 1) == 0 && v27)
    {
      if (*(_DWORD *)(v27 + 16))
      {
        v28 = *(unsigned int *)(v27 + 20);
        if ((_DWORD)v28)
        {
          v29 = *(unint64_t **)(v27 + 8);
          v30 = 8 * v28;
          do
          {
            v31 = *v29;
            *v29 = 0;
            if (v31)
            {
              v32 = *(_QWORD *)v31;
              if (*(_QWORD *)v31)
              {
                *(_QWORD *)v31 = 0;
                *(_DWORD *)(v31 + 8) = 0;
                WTF::fastFree(v32, v20, v21, v22, v23, v24, v25, v26);
              }
              WTF::fastFree(v31, v20, v21, v22, v23, v24, v25, v26);
            }
            ++v29;
            v30 -= 8;
          }
          while (v30);
          *(_DWORD *)(v27 + 20) = 0;
        }
        v33 = *(_QWORD *)(v27 + 8);
        if (v33)
        {
          *(_QWORD *)(v27 + 8) = 0;
          *(_DWORD *)(v27 + 16) = 0;
          WTF::fastFree(v33, v20, v21, v22, v23, v24, v25, v26);
        }
      }
      JSC::HeapSnapshotBuilder::nextAvailableObjectIdentifier = 1;
    }
    JSC::JSLockHolder::~JSLockHolder(&v34, v20, v21, v22, v23, v24, v25, v26);
    v11 = 0;
    *a2 = 0;
  }
  else
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v10 = 0x1C00000002;
    *(_QWORD *)(v10 + 8) = "Heap domain already disabled";
    *(_DWORD *)(v10 + 16) = 4;
    *(_QWORD *)a2 = v10;
    v11 = 1;
  }
  a2[8] = v11;
}

void Inspector::InspectorHeapAgent::clearHeapSnapshots(Inspector::InspectorHeapAgent *this)
{
  JSC::VM *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;

  v1 = (JSC::VM *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7));
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v24, v1, v2, v3, v4, v5, v6, v7, v8);
  v16 = *((_QWORD *)v1 + 11669);
  if ((v16 & 1) == 0 && v16)
  {
    v23 = *((_QWORD *)v1 + 11669);
    if (*(_DWORD *)(v16 + 16))
    {
      v17 = *(unsigned int *)(v23 + 20);
      if ((_DWORD)v17)
      {
        v18 = *(unint64_t **)(v23 + 8);
        v19 = 8 * v17;
        do
        {
          v20 = *v18;
          *v18 = 0;
          if (v20)
          {
            v21 = *(_QWORD *)v20;
            if (*(_QWORD *)v20)
            {
              *(_QWORD *)v20 = 0;
              *(_DWORD *)(v20 + 8) = 0;
              WTF::fastFree(v21, v9, v10, v11, v12, v13, v14, v15);
            }
            WTF::fastFree(v20, v9, v10, v11, v12, v13, v14, v15);
          }
          ++v18;
          v19 -= 8;
        }
        while (v19);
        *(_DWORD *)(v23 + 20) = 0;
      }
      v22 = *(_QWORD *)(v23 + 8);
      if (v22)
      {
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 16) = 0;
        WTF::fastFree(v22, v9, v10, v11, v12, v13, v14, v15);
      }
    }
    JSC::HeapSnapshotBuilder::nextAvailableObjectIdentifier = 1;
  }
  JSC::JSLockHolder::~JSLockHolder(&v24, v9, v10, v11, v12, v13, v14, v15);
}

void `non-virtual thunk to'Inspector::InspectorHeapAgent::disable(Inspector::InspectorHeapAgent *this@<X0>, _BYTE *a2@<X8>)
{
  Inspector::InspectorHeapAgent::disable((Inspector::InspectorHeapAgent *)((char *)this - 16), a2);
}

void Inspector::InspectorHeapAgent::gc(Inspector::InspectorHeapAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  __int16 v34;
  unsigned int *v35;
  unsigned int *v36;

  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7));
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v36, (JSC::VM *)v3, v4, v5, v6, v7, v8, v9, v10);
  JSC::sanitizeStackForVM((JSC *)v3, v11, v12, v13, v14, v15, v16, v17);
  v34 = 257;
  v35 = 0;
  JSC::Heap::collectNow((JSC::Heap *)(v3 + 192), (void *)1, (uint64_t)&v34, v18, v19, v20, v21, v22);
  v30 = v35;
  v35 = 0;
  if (v30)
  {
    v31 = v30 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v30 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
    }
  }
  *a2 = 0;
  a2[8] = 0;
  JSC::JSLockHolder::~JSLockHolder(&v36, v23, v24, v25, v26, v27, v28, v29);
}

void `non-virtual thunk to'Inspector::InspectorHeapAgent::gc(Inspector::InspectorHeapAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  __int16 v34;
  unsigned int *v35;
  unsigned int *v36;

  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 72))(*((_QWORD *)this + 5));
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v36, (JSC::VM *)v3, v4, v5, v6, v7, v8, v9, v10);
  JSC::sanitizeStackForVM((JSC *)v3, v11, v12, v13, v14, v15, v16, v17);
  v34 = 257;
  v35 = 0;
  JSC::Heap::collectNow((JSC::Heap *)(v3 + 192), (void *)1, (uint64_t)&v34, v18, v19, v20, v21, v22);
  v30 = v35;
  v35 = 0;
  if (v30)
  {
    v31 = v30 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v30 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
    }
  }
  *a2 = 0;
  a2[8] = 0;
  JSC::JSLockHolder::~JSLockHolder(&v36, v23, v24, v25, v26, v27, v28, v29);
}

void `non-virtual thunk to'Inspector::InspectorHeapAgent::snapshot(Inspector::InspectorHeapAgent *this@<X0>, uint64_t a2@<X8>)
{
  Inspector::InspectorHeapAgent::snapshot((Inspector::InspectorHeapAgent *)((char *)this - 16), a2);
}

Inspector::HeapFrontendDispatcher **Inspector::InspectorHeapAgent::startTracking@<X0>(Inspector::HeapFrontendDispatcher **this@<X0>, double *a2@<X8>)
{
  Inspector::HeapFrontendDispatcher **v3;
  uint64_t v4;
  double v5;
  WTF::StringImpl *v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Inspector::InspectorHeapAgent *v23;
  double v24;
  WTF::StringImpl *v25;
  double v26;
  WTF::StringImpl *v27;
  unsigned int v28;

  if (*((_BYTE *)this + 65))
  {
    *(_BYTE *)a2 = 0;
    *((_BYTE *)a2 + 8) = 0;
    return this;
  }
  v3 = this;
  *((_BYTE *)this + 65) = 1;
  Inspector::InspectorHeapAgent::snapshot((Inspector::InspectorHeapAgent *)this, (uint64_t)&v26);
  v4 = v28;
  if (v28)
  {
    if (v28 != 1)
    {
      v23 = (Inspector::InspectorHeapAgent *)std::__throw_bad_variant_access[abi:sn180100]();
    }
    v5 = v26;
    v26 = 0.0;
    *a2 = v5;
    *((_BYTE *)a2 + 8) = 1;
  }
  else
  {
    v6 = v27;
    v27 = 0;
    v24 = v26;
    v25 = v6;
    Inspector::HeapFrontendDispatcher::trackingStart(v3[5], v26, (const WTF::String *)&v25);
    *(_BYTE *)a2 = 0;
    *((_BYTE *)a2 + 8) = 0;
    v14 = v25;
    v25 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  return (Inspector::HeapFrontendDispatcher **)((uint64_t (*)(double *, double *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJdN3WTF6StringEEEES8_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v4])(&v24, &v26);
}

Inspector::HeapFrontendDispatcher **`non-virtual thunk to'Inspector::InspectorHeapAgent::startTracking@<X0>(Inspector::HeapFrontendDispatcher **this@<X0>, double *a2@<X8>)
{
  return Inspector::InspectorHeapAgent::startTracking(this - 2, a2);
}

Inspector::HeapFrontendDispatcher **Inspector::InspectorHeapAgent::stopTracking@<X0>(Inspector::HeapFrontendDispatcher **this@<X0>, double *a2@<X8>)
{
  Inspector::HeapFrontendDispatcher **v3;
  uint64_t v4;
  double v5;
  WTF::StringImpl *v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Inspector::InspectorHeapAgent *v23;
  double v24;
  WTF::StringImpl *v25;
  double v26;
  WTF::StringImpl *v27;
  unsigned int v28;

  if (!*((_BYTE *)this + 65))
  {
    *(_BYTE *)a2 = 0;
    *((_BYTE *)a2 + 8) = 0;
    return this;
  }
  v3 = this;
  *((_BYTE *)this + 65) = 0;
  Inspector::InspectorHeapAgent::snapshot((Inspector::InspectorHeapAgent *)this, (uint64_t)&v26);
  v4 = v28;
  if (v28)
  {
    if (v28 != 1)
    {
      v23 = (Inspector::InspectorHeapAgent *)std::__throw_bad_variant_access[abi:sn180100]();
    }
    v5 = v26;
    v26 = 0.0;
    *a2 = v5;
    *((_BYTE *)a2 + 8) = 1;
  }
  else
  {
    v6 = v27;
    v27 = 0;
    v24 = v26;
    v25 = v6;
    Inspector::HeapFrontendDispatcher::trackingComplete(v3[5], v26, (const WTF::String *)&v25);
    *(_BYTE *)a2 = 0;
    *((_BYTE *)a2 + 8) = 0;
    v14 = v25;
    v25 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::~StringImpl(v14, v7, v8, v9, v10, v11, v12, v13);
        WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
      }
      else
      {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  return (Inspector::HeapFrontendDispatcher **)((uint64_t (*)(double *, double *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_5tupleIJdN3WTF6StringEEEES8_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v4])(&v24, &v26);
}

Inspector::HeapFrontendDispatcher **`non-virtual thunk to'Inspector::InspectorHeapAgent::stopTracking@<X0>(Inspector::HeapFrontendDispatcher **this@<X0>, double *a2@<X8>)
{
  return Inspector::InspectorHeapAgent::stopTracking(this - 2, a2);
}

void Inspector::InspectorHeapAgent::nodeForHeapObjectIdentifier(Inspector::InspectorHeapAgent *this@<X0>, WTF::StringImpl **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  const char *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;

  v7 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7)) + 93352);
  if ((v7 & 1) == 0
    && v7
    && (v28 = *(unsigned int *)(v7 + 20), (_DWORD)v28)
    && (v29 = *(char **)(*(_QWORD *)(v7 + 8) + 8 * v28 - 8)) != 0)
  {
    while (1)
    {
      v30 = *((unsigned int *)v29 + 3);
      if ((_DWORD)v30)
      {
        if (*((_DWORD *)v29 + 9) < a3)
          goto LABEL_19;
        if (*((_DWORD *)v29 + 8) <= a3)
          break;
      }
      v29 = (char *)*((_QWORD *)v29 + 3);
      if (!v29)
      {
LABEL_19:
        v8 = WTF::fastCompactMalloc((WTF *)0x20);
        v16 = (WTF::StringImpl *)v8;
        v17 = 0x3400000002;
        v18 = "No object for identifier, it may have been collected";
        goto LABEL_3;
      }
    }
    v31 = *(char **)v29;
    v32 = 16 * v30;
    while (*((_DWORD *)v31 + 2) != a3)
    {
      v31 += 16;
      v32 -= 16;
      if (!v32)
        goto LABEL_19;
    }
    v33 = *v31;
    *(_QWORD *)(a4 + 1) = *(_QWORD *)(v31 + 1);
    *(_QWORD *)(a4 + 8) = *((_QWORD *)v31 + 1);
    *(_BYTE *)a4 = v33;
    *(_BYTE *)(a4 + 16) = 1;
  }
  else
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x20);
    v16 = (WTF::StringImpl *)v8;
    v17 = 0x1000000002;
    v18 = "No heap snapshot";
LABEL_3:
    *(_QWORD *)v8 = v17;
    *(_QWORD *)(v8 + 8) = v18;
    *(_DWORD *)(v8 + 16) = 4;
    v19 = *a2;
    *a2 = v16;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 16) = 0;
  }
}

void Inspector::InspectorHeapAgent::getPreview(Inspector::InspectorHeapAgent *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  WTF::AtomStringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  JSC::JSGlobalObject *v22;
  int v23;
  int *v24;
  WTF::StringImpl *v25;
  void (**v26)(Inspector::InjectedScriptBase *__hidden);
  uint64_t v27;
  JSC::JSGlobalObject *v28;
  WTF *v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  WTF *v67;
  void (**v68)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v69;
  _QWORD *v70;
  JSC::JSGlobalObject *v71;
  char v72;
  unsigned int *v73;
  WTF::StringImpl *v74;

  v74 = 0;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7));
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v73, (JSC::VM *)v6, v7, v8, v9, v10, v11, v12, v13);
  ++*(_DWORD *)(v6 + 916);
  Inspector::InspectorHeapAgent::nodeForHeapObjectIdentifier(this, &v74, a2, (uint64_t)&v71);
  if (!v72)
  {
    v25 = v74;
    if (v74)
      *(_DWORD *)v74 += 2;
    *(_QWORD *)a3 = v25;
    goto LABEL_33;
  }
  v22 = v71;
  v23 = *((unsigned __int8 *)v71 + 5);
  if (v23 == 3)
  {
    if (*((_DWORD *)v71 + 2))
    {
      JSC::JSBigInt::toStringGeneric((JSC::JSBigInt *)v6, 0, v71, 10, v17, v18, v19, v20, (int **)&v68);
    }
    else
    {
      if (*(_BYTE *)(v6 + 44265))
      {
        v26 = *(void (***)(Inspector::InjectedScriptBase *__hidden))(*(_QWORD *)(v6 + 42600) + 8);
        if ((v26 & 1) != 0)
          v31 = 0;
        else
          v31 = *(_DWORD **)(*(_QWORD *)(v6 + 42600) + 8);
        *v31 += 2;
        goto LABEL_27;
      }
      LOBYTE(v67) = 48;
      WTF::AtomStringImpl::add((uint64_t)&v67, 1uLL, v16, v17, v18, v19, v20, &v68);
    }
    v26 = v68;
LABEL_27:
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = v26;
    *(_DWORD *)(a3 + 24) = 0;
    goto LABEL_34;
  }
  if (v23 == 2)
  {
    v24 = (int *)*((_QWORD *)v71 + 1);
    if ((v24 & 1) != 0)
    {
      v24 = *JSC::JSRopeString::resolveRope((unint64_t)v71, 0, v15, v16, v21, v17, v18, v19, v20);
      if (!v24)
        goto LABEL_7;
    }
    else if (!v24)
    {
LABEL_7:
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = v24;
      *(_DWORD *)(a3 + 24) = 0;
      goto LABEL_34;
    }
    *v24 += 2;
    goto LABEL_7;
  }
  v27 = *(_DWORD *)v71 & 0xFFFFFFFE;
  if (!(_DWORD)v27)
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v32 = 0x2800000002;
    v33 = "Unable to get object details - Structure";
LABEL_32:
    *(_QWORD *)(v32 + 8) = v33;
    *(_DWORD *)(v32 + 16) = 4;
    *(_QWORD *)a3 = v32;
LABEL_33:
    *(_DWORD *)(a3 + 24) = 1;
    goto LABEL_34;
  }
  v28 = *(JSC::JSGlobalObject **)(16 * v27 + 0x28);
  if (!v28)
  {
    v32 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v32 = 0x2B00000002;
    v33 = "Unable to get object details - GlobalObject";
    goto LABEL_32;
  }
  Inspector::InjectedScriptManager::injectedScriptFor(*((_QWORD *)this + 4), v28, v15, v16, v17, v18, v19, v20, (uint64_t)&v68);
  if (v70 && *v70)
  {
    if (*((_BYTE *)v22 + 5) != 26)
    {
      Inspector::InjectedScript::previewValue((uint64_t)&v68, (uint64_t)v22, (WTF **)(a3 + 16));
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 24) = 0;
      goto LABEL_45;
    }
    v67 = 0;
    Inspector::InjectedScript::functionDetails((uint64_t)&v68, &v74, (uint64_t)v22, &v67);
    v29 = v67;
    if (v67)
    {
      v30 = (*(_DWORD *)v67)++;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = v29;
      *(_QWORD *)(a3 + 16) = 0;
      *(_DWORD *)(a3 + 24) = 0;
      v67 = 0;
      if (v30)
        *(_DWORD *)v29 = v30;
      else
        WTF::JSONImpl::Value::operator delete(v29, v14, v15, v16, v17, v18, v19, v20);
      goto LABEL_45;
    }
    v62 = v74;
    if (v74)
      *(_DWORD *)v74 += 2;
    *(_QWORD *)a3 = v62;
  }
  else
  {
    v34 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v34 = 0x2D00000002;
    *(_QWORD *)(v34 + 8) = "Unable to get object details - InjectedScript";
    *(_DWORD *)(v34 + 16) = 4;
    *(_QWORD *)a3 = v34;
  }
  *(_DWORD *)(a3 + 24) = 1;
LABEL_45:
  v68 = &off_1E3591350;
  if (v70)
  {
    v63 = v70 - 2;
    v64 = *(_QWORD *)(((unint64_t)(v70 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v65 = (uint64_t *)*(v70 - 1);
    if (v65)
    {
      v66 = *v63;
      *v65 = *v63;
      *(_QWORD *)(v66 + 8) = v65;
      *v63 = 0;
      v63[1] = 0;
    }
    *v63 = *(_QWORD *)(v64 + 40);
    *(_QWORD *)(v64 + 40) = v63;
    v70 = 0;
  }
  v53 = v69;
  v69 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
LABEL_34:
  v35 = *(_DWORD *)(v6 + 916) - 1;
  *(_DWORD *)(v6 + 916) = v35;
  if (*(unsigned __int8 *)(v6 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v36 = v35 == 0;
  else
    v36 = 0;
  if (v36)
  {
    *(_BYTE *)(v6 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v6 + 192, 0);
  }
  JSC::JSLockHolder::~JSLockHolder(&v73, v14, v15, v16, v17, v18, v19, v20);
  v44 = v74;
  v74 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorHeapAgent::getPreview(Inspector::InspectorHeapAgent *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  Inspector::InspectorHeapAgent::getPreview((Inspector::InspectorHeapAgent *)((char *)this - 16), a2, a3);
}

void Inspector::InspectorHeapAgent::getRemoteObject(Inspector::InspectorHeapAgent *this@<X0>, const WTF::String *a2@<X2>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  WTF::AtomStringImpl *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::JSGlobalObject *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  int v31;
  BOOL v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  WTF *v62;
  void (**v63)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v64;
  _QWORD *v65;
  _DWORD *v66;
  char v67;
  unsigned int *v68;
  WTF::StringImpl *v69;

  v69 = 0;
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 72))(*((_QWORD *)this + 7));
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v68, (JSC::VM *)v8, v9, v10, v11, v12, v13, v14, v15);
  ++*(_DWORD *)(v8 + 916);
  Inspector::InspectorHeapAgent::nodeForHeapObjectIdentifier(this, &v69, a3, (uint64_t)&v66);
  if (!v67)
  {
    v26 = v69;
    if (v69)
      *(_DWORD *)v69 += 2;
    *(_QWORD *)a4 = v26;
    goto LABEL_19;
  }
  v23 = (uint64_t)v66;
  v24 = *v66 & 0xFFFFFFFE;
  if (!(_DWORD)v24)
  {
    v27 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v27 = 0x2800000002;
    v28 = "Unable to get object details - Structure";
LABEL_18:
    *(_QWORD *)(v27 + 8) = v28;
    *(_DWORD *)(v27 + 16) = 4;
    *(_QWORD *)a4 = v27;
LABEL_19:
    *(_DWORD *)(a4 + 8) = 1;
    goto LABEL_20;
  }
  v25 = *(JSC::JSGlobalObject **)(16 * v24 + 0x28);
  if (!v25)
  {
    v27 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v27 = 0x2B00000002;
    v28 = "Unable to get object details - GlobalObject";
    goto LABEL_18;
  }
  Inspector::InjectedScriptManager::injectedScriptFor(*((_QWORD *)this + 4), v25, v17, v18, v19, v20, v21, v22, (uint64_t)&v63);
  if (v65 && *v65)
  {
    Inspector::InjectedScript::wrapObject((uint64_t)&v63, v23, a2, 1, &v62);
    if (v62)
    {
      *(_QWORD *)a4 = v62;
      *(_DWORD *)(a4 + 8) = 0;
    }
    else
    {
      v56 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v56 = 0x2500000002;
      *(_QWORD *)(v56 + 8) = "Internal error: unable to cast Object";
      *(_DWORD *)(v56 + 16) = 4;
      *(_QWORD *)a4 = v56;
      *(_DWORD *)(a4 + 8) = 1;
      v57 = v62;
      v62 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 1)
          WTF::JSONImpl::Value::operator delete(v57, v16, v17, v18, v19, v20, v21, v22);
        else
          --*(_DWORD *)v57;
      }
    }
  }
  else
  {
    v29 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v29 = 0x2D00000002;
    *(_QWORD *)(v29 + 8) = "Unable to get object details - InjectedScript";
    *(_DWORD *)(v29 + 16) = 4;
    *(_QWORD *)a4 = v29;
    *(_DWORD *)(a4 + 8) = 1;
  }
  v63 = &off_1E3591350;
  if (v65)
  {
    v58 = v65 - 2;
    v59 = *(_QWORD *)(((unint64_t)(v65 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v60 = (uint64_t *)*(v65 - 1);
    if (v60)
    {
      v61 = *v58;
      *v60 = *v58;
      *(_QWORD *)(v61 + 8) = v60;
      *v58 = 0;
      v58[1] = 0;
    }
    *v58 = *(_QWORD *)(v59 + 40);
    *(_QWORD *)(v59 + 40) = v58;
    v65 = 0;
  }
  v30 = v64;
  v64 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
LABEL_20:
  v31 = *(_DWORD *)(v8 + 916) - 1;
  *(_DWORD *)(v8 + 916) = v31;
  if (*(unsigned __int8 *)(v8 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v32 = v31 == 0;
  else
    v32 = 0;
  if (v32)
  {
    *(_BYTE *)(v8 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v8 + 192, 0);
  }
  JSC::JSLockHolder::~JSLockHolder(&v68, v16, v17, v18, v19, v20, v21, v22);
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v33, v34, v35, v36, v37, v38, v39);
      WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorHeapAgent::getRemoteObject(Inspector::InspectorHeapAgent *this@<X0>, const WTF::String *a2@<X2>, unsigned int a3@<W1>, uint64_t a4@<X8>)
{
  Inspector::InspectorHeapAgent::getRemoteObject((Inspector::InspectorHeapAgent *)((char *)this - 16), a2, a3, a4);
}

double Inspector::InspectorHeapAgent::willGarbageCollect(Inspector::InspectorHeapAgent *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double result;
  char v7;
  char **v8;
  char *v9;

  if (*((_BYTE *)this + 64))
  {
    v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 56))(*((_QWORD *)this + 7));
    v3 = mach_absolute_time();
    v5 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v5 != -1)
    {
      v9 = &v7;
      v8 = &v9;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v4) = dword_1ECF4400C;
    result = *(double *)(v2 + 8)
           + (double)(v3 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v4 * 1000000000.0)
           - *(double *)(v2 + 16);
    *((double *)this + 9) = result;
  }
  return result;
}

double `non-virtual thunk to'Inspector::InspectorHeapAgent::willGarbageCollect(Inspector::InspectorHeapAgent *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double result;
  char v7;
  char **v8;
  char *v9;

  if (*((_BYTE *)this + 40))
  {
    v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4));
    v3 = mach_absolute_time();
    v5 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v5 != -1)
    {
      v9 = &v7;
      v8 = &v9;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v4) = dword_1ECF4400C;
    result = *(double *)(v2 + 8)
           + (double)(v3 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v4 * 1000000000.0)
           - *(double *)(v2 + 16);
    *((double *)this + 6) = result;
  }
  return result;
}

uint64_t Inspector::InspectorHeapAgent::didGarbageCollect(uint64_t result, int a2)
{
  double *v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char **v10;
  char *v11;

  v2 = (double *)result;
  if (*(_BYTE *)(result + 64))
  {
    v4 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(result + 56) + 56))(*(_QWORD *)(result + 56), *(double *)(result + 72));
    v5 = mach_absolute_time();
    v7 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v7 != -1)
    {
      v11 = &v9;
      v10 = &v11;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    v6.n128_u32[0] = dword_1ECF4400C;
    v6.n128_f64[0] = *(double *)(v4 + 8)
                   + (double)(v5 * WTF::machTimebaseInfo(void)::timebaseInfo)
                   / ((double)v6.n128_u64[0]
                    * 1000000000.0)
                   - *(double *)(v4 + 16);
    if (a2)
      v8 = 160;
    else
      v8 = 161;
    result = (*(uint64_t (**)(double *, uint64_t, double, __n128))(*(_QWORD *)v2 + 128))(v2, v8, v2[9], v6);
  }
  v2[9] = NAN;
  return result;
}

uint64_t `non-virtual thunk to'Inspector::InspectorHeapAgent::didGarbageCollect(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char **v10;
  char *v11;

  v2 = result;
  if (*(_BYTE *)(result + 40))
  {
    v4 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(result + 32) + 56))(*(_QWORD *)(result + 32), *(double *)(result + 48));
    v5 = mach_absolute_time();
    v7 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v7 != -1)
    {
      v11 = &v9;
      v10 = &v11;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    v6.n128_u32[0] = dword_1ECF4400C;
    v6.n128_f64[0] = *(double *)(v4 + 8)
                   + (double)(v5 * WTF::machTimebaseInfo(void)::timebaseInfo)
                   / ((double)v6.n128_u64[0]
                    * 1000000000.0)
                   - *(double *)(v4 + 16);
    if (a2)
      v8 = 160;
    else
      v8 = 161;
    result = (*(uint64_t (**)(uint64_t, uint64_t, double, __n128))(*(_QWORD *)(v2 - 24) + 128))(v2 - 24, v8, *(double *)(v2 + 48), v6);
  }
  *(_QWORD *)(v2 + 48) = 0x7FF8000000000000;
  return result;
}

void Inspector::InspectorHeapAgent::dispatchGarbageCollectedEvent(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char **v11;
  char *v12;
  int v13;
  char *v14;
  int *v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  double *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF *v73;
  WTF::StringImpl *v74;
  WTF::AtomStringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _DWORD **v115;
  uint64_t v116;
  _DWORD *v117;
  _DWORD **v118;
  uint64_t v119;
  _DWORD *v120;
  _DWORD **v121;
  uint64_t v122;
  _DWORD *v123;
  WTF::StringImpl *v124;
  WTF *v125;
  WTF *v126[2];
  char v127;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  v9 = (uint64_t *)(v8 + 16);
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x400000002;
  *(_QWORD *)(v10 + 8) = "type";
  *(_DWORD *)(v10 + 16) = 4;
  v124 = (WTF::StringImpl *)v10;
  v11 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * a2];
  v12 = v11[1];
  if (v12)
  {
    v13 = (_DWORD)v12 - 1;
    if (v12 == (char *)1)
    {
      v15 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v14 = *v11;
      v15 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v15 = 2;
      v15[1] = v13;
      *((_QWORD *)v15 + 1) = v14;
      v15[4] = 4;
    }
  }
  else
  {
    v15 = 0;
  }
  v16 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v16 = 0x400000001;
  *((_QWORD *)v16 + 1) = v15;
  if (v15)
    *v15 += 2;
  v125 = v16;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v9, (WTF::AtomStringImpl *)&v124, (const WTF::StringImpl *)&v125, v17, v18, v19, v20, v21, (uint64_t)v126);
  if (v127)
  {
    v29 = (uint64_t *)(v8 + 24);
    v30 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v30 == *(_DWORD *)(v8 + 32))
    {
      v115 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)&v124);
      v30 = *(unsigned int *)(v8 + 36);
      v116 = *(_QWORD *)(v8 + 24);
      v117 = *v115;
      if (*v115)
        *v117 += 2;
      *(_QWORD *)(v116 + 8 * v30) = v117;
    }
    else
    {
      v31 = *v29;
      v32 = v124;
      if (v124)
        *(_DWORD *)v124 += 2;
      *(_QWORD *)(v31 + 8 * v30) = v32;
    }
    *(_DWORD *)(v8 + 36) = v30 + 1;
  }
  v33 = v125;
  v125 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v33, v22, v23, v24, v25, v26, v27, v28);
      if (!v15)
        goto LABEL_18;
      goto LABEL_16;
    }
    --*(_DWORD *)v33;
  }
  if (!v15)
    goto LABEL_18;
LABEL_16:
  if (*v15 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, v22, v23, v24, v25, v26, v27, v28);
    WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
  }
  else
  {
    *v15 -= 2;
  }
LABEL_18:
  v34 = v124;
  v124 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v22, v23, v24, v25, v26, v27, v28);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
  v35 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v35 = 0x900000002;
  *(_QWORD *)(v35 + 8) = "startTime";
  *(_DWORD *)(v35 + 16) = 4;
  v124 = (WTF::StringImpl *)v35;
  v36 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v36 = 0x200000001;
  v36[1] = a3;
  v125 = (WTF *)v36;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v9, (WTF::AtomStringImpl *)&v124, (const WTF::StringImpl *)&v125, v37, v38, v39, v40, v41, (uint64_t)v126);
  if (v127)
  {
    v49 = (uint64_t *)(v8 + 24);
    v50 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v50 == *(_DWORD *)(v8 + 32))
    {
      v118 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)&v124);
      v50 = *(unsigned int *)(v8 + 36);
      v119 = *(_QWORD *)(v8 + 24);
      v120 = *v118;
      if (*v118)
        *v120 += 2;
      *(_QWORD *)(v119 + 8 * v50) = v120;
    }
    else
    {
      v51 = *v49;
      v52 = v124;
      if (v124)
        *(_DWORD *)v124 += 2;
      *(_QWORD *)(v51 + 8 * v50) = v52;
    }
    *(_DWORD *)(v8 + 36) = v50 + 1;
  }
  v53 = v125;
  v125 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 1)
      WTF::JSONImpl::Value::operator delete(v53, v42, v43, v44, v45, v46, v47, v48);
    else
      --*(_DWORD *)v53;
  }
  v54 = v124;
  v124 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  v55 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v55 = 0x700000002;
  *(_QWORD *)(v55 + 8) = "endTime";
  *(_DWORD *)(v55 + 16) = 4;
  v124 = (WTF::StringImpl *)v55;
  v56 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v56 = 0x200000001;
  v56[1] = a4;
  v125 = (WTF *)v56;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v9, (WTF::AtomStringImpl *)&v124, (const WTF::StringImpl *)&v125, v57, v58, v59, v60, v61, (uint64_t)v126);
  if (v127)
  {
    v69 = (uint64_t *)(v8 + 24);
    v70 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v70 == *(_DWORD *)(v8 + 32))
    {
      v121 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v70 + 1, (unint64_t)&v124);
      v70 = *(unsigned int *)(v8 + 36);
      v122 = *(_QWORD *)(v8 + 24);
      v123 = *v121;
      if (*v121)
        *v123 += 2;
      *(_QWORD *)(v122 + 8 * v70) = v123;
    }
    else
    {
      v71 = *v69;
      v72 = v124;
      if (v124)
        *(_DWORD *)v124 += 2;
      *(_QWORD *)(v71 + 8 * v70) = v72;
    }
    *(_DWORD *)(v8 + 36) = v70 + 1;
  }
  v73 = v125;
  v125 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 1)
      WTF::JSONImpl::Value::operator delete(v73, v62, v63, v64, v65, v66, v67, v68);
    else
      --*(_DWORD *)v73;
  }
  v74 = v124;
  v124 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v62, v63, v64, v65, v66, v67, v68);
      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  v126[0] = (WTF *)v8;
  Inspector::HeapFrontendDispatcher::garbageCollected(*(uint64_t **)(a1 + 40), v126);
  v82 = v126[0];
  v126[0] = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 1)
      WTF::JSONImpl::Value::operator delete(v82, v75, v76, v77, v78, v79, v80, v81);
    else
      --*(_DWORD *)v82;
  }
}

uint64_t Inspector::InspectorRuntimeAgent::InspectorRuntimeAgent(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 8) = "Runtime";
  *(_DWORD *)(v4 + 16) = 4;
  *(_QWORD *)v4 = 0x700000002;
  *(_QWORD *)a1 = off_1E3594A20;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[1];
  *(_QWORD *)(a1 + 16) = &unk_1E3594B18;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 64))(*a2);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2);
  *(_WORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 50) = 0;
  return a1;
}

uint64_t Inspector::InspectorRuntimeAgent::enable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  *(_BYTE *)(this + 48) = 1;
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'Inspector::InspectorRuntimeAgent::enable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  *(_BYTE *)(this + 32) = 1;
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t Inspector::InspectorRuntimeAgent::disable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  *(_BYTE *)(this + 48) = 0;
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'Inspector::InspectorRuntimeAgent::disable@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  *(_BYTE *)(this + 32) = 0;
  *a2 = 0;
  a2[8] = 0;
  return this;
}

void Inspector::InspectorRuntimeAgent::parse(JSC::VM **this@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  JSC *v13;
  uint64_t v14;
  JSC::ParserError *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  int v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  WTF::StringImpl *v53;
  int v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF *v66;
  WTF::StringImpl *v67;
  int v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _DWORD **v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD **v105;
  uint64_t v106;
  _DWORD *v107;
  SourceCode v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  int v115;
  __int16 v116;
  unsigned int *v117;
  WTF::StringImpl *v118;
  WTF *v119;
  _DWORD *v120;
  int v121;
  int v122;
  uint64_t v123;

  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v117, this[5], a3, a4, a5, a6, a7, a8, a10);
  LODWORD(v108.var0.var0) = 0x100000;
  *(_OWORD *)&v108.var1 = 0u;
  v109 = 0u;
  v110 = 0;
  v111 = -1;
  v112 = -1;
  v113 = -1;
  v114 = 0;
  v115 = -1;
  v116 = 0;
  v13 = this[5];
  v14 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v14 + 8) = 1;
  *(_BYTE *)(v14 + 12) = 0;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_QWORD *)(v14 + 109) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_QWORD *)v14 = off_1E357C4B0;
  v20 = *a2;
  if (!*a2)
    v20 = &WTF::StringImpl::s_emptyAtomString;
  *v20 += 2;
  *(_QWORD *)(v14 + 120) = v20;
  v120 = (_DWORD *)v14;
  v121 = 0;
  v122 = v20[1];
  v123 = 0;
  JSC::checkSyntax(v13, (JSC::VM *)&v120, &v108, v15, v16, v17, v18, v19, 0.0);
  v28 = v120;
  v120 = 0;
  if (v28)
  {
    if (v28[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
    else
      --v28[2];
  }
  v29 = 0;
  v30 = 9;
  switch(HIBYTE(v116))
  {
    case 0:
      goto LABEL_7;
    case 1:
      v31 = 0;
      v30 = 257;
      break;
    case 2:
      v31 = 0;
      v30 = 258;
      break;
    case 3:
      v31 = 0;
      v30 = 259;
      break;
    default:
      v30 = 0;
      v31 = 1;
      break;
  }
  v32 = v114;
  if (v114)
    *(_DWORD *)v114 += 2;
  v29 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v29 = 0x500000001;
  *(_QWORD *)(v29 + 16) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  *(_QWORD *)(v29 + 32) = 0;
  v33 = v110;
  v34 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v34 = 0xB00000002;
  *(_QWORD *)(v34 + 8) = "startOffset";
  *(_DWORD *)(v34 + 16) = 4;
  v118 = (WTF::StringImpl *)v34;
  v35 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v35 = 0x300000001;
  v35[1] = (double)v33;
  v119 = (WTF *)v35;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v29 + 16), (WTF::AtomStringImpl *)&v118, (const WTF::StringImpl *)&v119, v36, v37, v38, v39, v40, (uint64_t)&v120);
  if ((_BYTE)v123)
  {
    v48 = (uint64_t *)(v29 + 24);
    v49 = *(unsigned int *)(v29 + 36);
    if ((_DWORD)v49 == *(_DWORD *)(v29 + 32))
    {
      v102 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v49 + 1, (unint64_t)&v118);
      v49 = *(unsigned int *)(v29 + 36);
      v103 = *(_QWORD *)(v29 + 24);
      v104 = *v102;
      if (*v102)
        *v104 += 2;
      *(_QWORD *)(v103 + 8 * v49) = v104;
    }
    else
    {
      v50 = *v48;
      v51 = v118;
      if (v118)
        *(_DWORD *)v118 += 2;
      *(_QWORD *)(v50 + 8 * v49) = v51;
    }
    *(_DWORD *)(v29 + 36) = v49 + 1;
  }
  v52 = v119;
  v119 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
      WTF::JSONImpl::Value::operator delete(v52, v41, v42, v43, v44, v45, v46, v47);
    else
      --*(_DWORD *)v52;
  }
  v53 = v118;
  v118 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
  v54 = HIDWORD(v110);
  v55 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v55 = 0x900000002;
  *(_QWORD *)(v55 + 8) = "endOffset";
  *(_DWORD *)(v55 + 16) = 4;
  v118 = (WTF::StringImpl *)v55;
  v56 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v56 = 0x300000001;
  v56[1] = (double)v54;
  v119 = (WTF *)v56;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v29 + 16), (WTF::AtomStringImpl *)&v118, (const WTF::StringImpl *)&v119, v57, v58, v59, v60, v61, (uint64_t)&v120);
  if ((_BYTE)v123)
  {
    v62 = (uint64_t *)(v29 + 24);
    v63 = *(unsigned int *)(v29 + 36);
    if ((_DWORD)v63 == *(_DWORD *)(v29 + 32))
    {
      v105 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v62, v63 + 1, (unint64_t)&v118);
      v63 = *(unsigned int *)(v29 + 36);
      v106 = *(_QWORD *)(v29 + 24);
      v107 = *v105;
      if (*v105)
        *v107 += 2;
      *(_QWORD *)(v106 + 8 * v63) = v107;
    }
    else
    {
      v64 = *v62;
      v65 = v118;
      if (v118)
        *(_DWORD *)v118 += 2;
      *(_QWORD *)(v64 + 8 * v63) = v65;
    }
    *(_DWORD *)(v29 + 36) = v63 + 1;
  }
  v66 = v119;
  v119 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 1)
      WTF::JSONImpl::Value::operator delete(v66, v21, v22, v23, v24, v25, v26, v27);
    else
      --*(_DWORD *)v66;
  }
  v67 = v118;
  v118 = 0;
  if (!v67)
  {
LABEL_38:
    if (!v31)
      goto LABEL_39;
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (*(_DWORD *)v67 != 2)
  {
    *(_DWORD *)v67 -= 2;
    goto LABEL_38;
  }
  WTF::StringImpl::~StringImpl(v67, v21, v22, v23, v24, v25, v26, v27);
  WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
  if (v31)
    goto LABEL_50;
LABEL_39:
  if (!v32)
  {
LABEL_7:
    *(_DWORD *)a9 = v30;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = v29;
    *(_DWORD *)(a9 + 24) = 0;
    goto LABEL_42;
  }
  v68 = *(_DWORD *)v32;
  *(_DWORD *)v32 += 2;
  *(_DWORD *)a9 = v30;
  *(_QWORD *)(a9 + 8) = v32;
  *(_QWORD *)(a9 + 16) = v29;
  *(_DWORD *)(a9 + 24) = 0;
  if (v68)
  {
    *(_DWORD *)v32 = v68;
    goto LABEL_42;
  }
LABEL_51:
  WTF::StringImpl::~StringImpl(v32, v21, v22, v23, v24, v25, v26, v27);
  WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
LABEL_42:
  v69 = v114;
  v114 = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
    {
      WTF::StringImpl::~StringImpl(v69, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v69 -= 2;
    }
  }
  JSC::JSLockHolder::~JSLockHolder(&v117, v21, v22, v23, v24, v25, v26, v27);
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::parse(JSC::VM **this@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  Inspector::InspectorRuntimeAgent::parse(this - 2, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void Inspector::InspectorRuntimeAgent::evaluate(_QWORD *a1@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, _BYTE *a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X7>, uint64_t a9@<X8>, _BYTE *a10)
{
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void (**v49)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v50;
  _QWORD *v51;
  WTF::StringImpl *v52;

  v52 = 0;
  (*(void (**)(void (***__return_ptr)(Inspector::InjectedScriptBase *__hidden), _QWORD *, WTF::StringImpl **, uint64_t))(*a1 + 208))(&v49, a1, &v52, a6);
  v25 = v51;
  if (v51 && *v51)
  {
    Inspector::InspectorRuntimeAgent::evaluate(a1, (uint64_t)&v49, a2, a3, a4, a5, a7, a8, a9, a10);
    v25 = v51;
  }
  else
  {
    v26 = v52;
    if (v52)
      *(_DWORD *)v52 += 2;
    *(_QWORD *)a9 = v26;
    *(_DWORD *)(a9 + 24) = 1;
  }
  v49 = &off_1E3591350;
  if (v25)
  {
    v45 = v25 - 2;
    v46 = *(_QWORD *)(((unint64_t)(v25 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v47 = (uint64_t *)*(v25 - 1);
    if (v47)
    {
      v48 = *v45;
      *v47 = *v45;
      *(_QWORD *)(v48 + 8) = v47;
      *v45 = 0;
      v45[1] = 0;
    }
    *v45 = *(_QWORD *)(v46 + 40);
    *(_QWORD *)(v46 + 40) = v45;
    v51 = 0;
  }
  v27 = v50;
  v50 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = v52;
  v52 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
}

void Inspector::InspectorRuntimeAgent::evaluate(_QWORD *a1@<X0>, uint64_t a2@<X1>, const WTF::String *a3@<X2>, const WTF::String *a4@<X3>, _BYTE *a5@<X4>, _BYTE *a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X7>, uint64_t a9@<X8>, _BYTE *a10)
{
  uint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  const WTF::String *v21;
  const WTF::String *v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  int v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  WTF *v60;
  WTF::StringImpl *v61;

  v13 = a2;
  v16 = 0;
  v17 = 0;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  LOBYTE(v58) = 0;
  BYTE4(v58) = 0;
  v18 = a1[4];
  if (a6[1])
    v19 = *a6 == 0;
  else
    v19 = 1;
  v20 = v19;
  if (!v19)
  {
    v55 = v20;
    v57 = *(_QWORD *)(v18 + 152);
    if (v57)
      *(_QWORD *)(v18 + 152) = 0;
    v21 = a3;
    v22 = a4;
    v16 = *(_QWORD *)(v18 + 160);
    if (v16)
      *(_QWORD *)(v18 + 160) = 0;
    (*(void (**)(_QWORD *))(*a1 + 216))(a1);
    a4 = v22;
    a3 = v21;
    v13 = a2;
    v17 = v57;
    v20 = v55;
  }
  if (a5[1])
    v23 = *a5 == 0;
  else
    v23 = 1;
  v24 = !v23;
  if (a7[1])
    v25 = *a7 == 0;
  else
    v25 = 1;
  v26 = !v25;
  if (a8[1])
    v27 = *a8 == 0;
  else
    v27 = 1;
  v28 = !v27;
  if (a10[1])
    v29 = *a10 == 0;
  else
    v29 = 1;
  v30 = !v29;
  Inspector::InjectedScript::evaluate(v13, (WTF::AtomStringImpl *)&v61, a3, a4, v24, v26, v28, v30, &v60, (uint64_t)&v59, (uint64_t)&v58);
  if ((v20 & 1) == 0)
    (*(void (**)(_QWORD *))(*a1 + 224))(a1);
  v38 = v60;
  if (v60)
  {
    v39 = 0;
    v60 = 0;
    v40 = v59;
    v41 = v58;
    *(_QWORD *)a9 = v38;
    *(_WORD *)(a9 + 8) = v40;
    *(_QWORD *)(a9 + 12) = v41;
  }
  else
  {
    v42 = v61;
    if (v61)
      *(_DWORD *)v61 += 2;
    *(_QWORD *)a9 = v42;
    v39 = 1;
  }
  *(_DWORD *)(a9 + 24) = v39;
  if (v17)
  {
    v43 = *(WTF **)(v18 + 152);
    *(_QWORD *)(v18 + 152) = v17;
    if (v43)
      WTF::RefCounted<JSC::Breakpoint>::deref(v43, v31, v32, v33, v34, v35, v36, v37);
  }
  if (v16)
  {
    v44 = *(WTF **)(v18 + 160);
    *(_QWORD *)(v18 + 160) = v16;
    if (v44)
      WTF::RefCounted<JSC::Breakpoint>::deref(v44, v31, v32, v33, v34, v35, v36, v37);
  }
  v45 = v60;
  v60 = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 1)
      WTF::JSONImpl::Value::operator delete(v45, v31, v32, v33, v34, v35, v36, v37);
    else
      --*(_DWORD *)v45;
  }
  v46 = v61;
  v61 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v31, v32, v33, v34, v35, v36, v37);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::evaluate(uint64_t a1@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, _BYTE *a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, _BYTE *a7@<X6>, _BYTE *a8@<X7>, uint64_t a9@<X8>, _BYTE *a10)
{
  _QWORD *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void (**v49)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v50;
  _QWORD *v51;
  WTF::StringImpl *v52;

  v52 = 0;
  v17 = (_QWORD *)(a1 - 16);
  (*(void (**)(void (***__return_ptr)(Inspector::InjectedScriptBase *__hidden), uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)(a1 - 16) + 208))(&v49, a1 - 16, &v52, a6);
  v25 = v51;
  if (v51 && *v51)
  {
    Inspector::InspectorRuntimeAgent::evaluate(v17, (uint64_t)&v49, a2, a3, a4, a5, a7, a8, a9, a10);
    v25 = v51;
  }
  else
  {
    v26 = v52;
    if (v52)
      *(_DWORD *)v52 += 2;
    *(_QWORD *)a9 = v26;
    *(_DWORD *)(a9 + 24) = 1;
  }
  v49 = &off_1E3591350;
  if (v25)
  {
    v45 = v25 - 2;
    v46 = *(_QWORD *)(((unint64_t)(v25 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v47 = (uint64_t *)*(v25 - 1);
    if (v47)
    {
      v48 = *v45;
      *v47 = *v45;
      *(_QWORD *)(v48 + 8) = v47;
      *v45 = 0;
      v45[1] = 0;
    }
    *v45 = *(_QWORD *)(v46 + 40);
    *(_QWORD *)(v46 + 40) = v45;
    v51 = 0;
  }
  v27 = v50;
  v50 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v28 = v52;
  v52 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
}

void Inspector::InspectorRuntimeAgent::awaitPromise(uint64_t a1, const WTF::String *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, Inspector::BackendDispatcher::CallbackBase **a6)
{
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  BOOL v15;
  int v16;
  Inspector::BackendDispatcher::CallbackBase *v17;
  WTF::StringImpl *v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Inspector::BackendDispatcher::CallbackBase *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  void (**v50)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v51;
  _QWORD *v52;

  Inspector::InjectedScriptManager::injectedScriptForObjectId(*(Inspector::InjectedScriptManager **)(a1 + 24), a2, &v50);
  if (v52 && *v52)
  {
    if (a3[1])
      v11 = *a3 == 0;
    else
      v11 = 1;
    v12 = !v11;
    if (a4[1])
      v13 = *a4 == 0;
    else
      v13 = 1;
    v14 = !v13;
    if (a5[1])
      v15 = *a5 == 0;
    else
      v15 = 1;
    v16 = !v15;
    v17 = *a6;
    *a6 = 0;
    v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v18 = &off_1E3595308;
    *((_QWORD *)v18 + 1) = v17;
    v49 = v18;
    Inspector::InjectedScript::awaitPromise((uint64_t)&v50, a2, v12, v14, v16, (uint64_t *)&v49);
    if (v49)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v49 + 8))(v49);
  }
  else
  {
    v26 = *a6;
    v27 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v27 = 0x3100000002;
    *(_QWORD *)(v27 + 8) = "Missing injected script for given promiseObjectId";
    *(_DWORD *)(v27 + 16) = 4;
    v49 = (WTF::StringImpl *)v27;
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v26, &v49);
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v27, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v50 = &off_1E3591350;
  if (v52)
  {
    v45 = v52 - 2;
    v46 = *(_QWORD *)(((unint64_t)(v52 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v47 = (uint64_t *)*(v52 - 1);
    if (v47)
    {
      v48 = *v45;
      *v47 = *v45;
      *(_QWORD *)(v48 + 8) = v47;
      *v45 = 0;
      v45[1] = 0;
    }
    *v45 = *(_QWORD *)(v46 + 40);
    *(_QWORD *)(v46 + 40) = v45;
    v52 = 0;
  }
  v28 = v51;
  v51 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::~StringImpl(v28, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v28 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::awaitPromise(uint64_t a1, const WTF::String *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, Inspector::BackendDispatcher::CallbackBase **a6)
{
  Inspector::InspectorRuntimeAgent::awaitPromise(a1 - 16, a2, a3, a4, a5, a6);
}

void Inspector::InspectorRuntimeAgent::callFunctionOn(uint64_t a1, const WTF::String *a2, const WTF::String *a3, WTF::JSONImpl::Value **a4, _BYTE *a5, _BYTE *a6, _BYTE *a7, uint64_t a8, _BYTE *a9, uint64_t *a10)
{
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Inspector::BackendDispatcher::CallbackBase *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  void (**v49)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v50;
  _QWORD *v51;

  Inspector::InjectedScriptManager::injectedScriptForObjectId(*(Inspector::InjectedScriptManager **)(a1 + 24), a2, &v49);
  if (v51 && *v51)
  {
    Inspector::InspectorRuntimeAgent::callFunctionOn((_QWORD *)a1, (uint64_t)&v49, a2, a3, a4, a5, a6, a7, v47, a9, a10);
  }
  else
  {
    v24 = (Inspector::BackendDispatcher::CallbackBase *)*a10;
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x2A00000002;
    *(_QWORD *)(v25 + 8) = "Missing injected script for given objectId";
    *(_DWORD *)(v25 + 16) = 4;
    v48 = (WTF::StringImpl *)v25;
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v24, &v48);
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v49 = &off_1E3591350;
  if (v51)
  {
    v43 = v51 - 2;
    v44 = *(_QWORD *)(((unint64_t)(v51 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v45 = (uint64_t *)*(v51 - 1);
    if (v45)
    {
      v46 = *v43;
      *v45 = *v43;
      *(_QWORD *)(v46 + 8) = v45;
      *v43 = 0;
      v43[1] = 0;
    }
    *v43 = *(_QWORD *)(v44 + 40);
    *(_QWORD *)(v44 + 40) = v43;
    v51 = 0;
  }
  v26 = v50;
  v50 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
}

void Inspector::InspectorRuntimeAgent::callFunctionOn(_QWORD *a1, uint64_t a2, const WTF::String *a3, const WTF::String *a4, WTF::JSONImpl::Value **a5, _BYTE *a6, _BYTE *a7, _BYTE *a8, uint64_t a9, _BYTE *a10, uint64_t *a11)
{
  uint64_t v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF *v37;
  WTF *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v49;
  _QWORD *v50;
  WTF::StringImpl *v51;

  v16 = a1[4];
  if (a6[1])
    v17 = *a6 == 0;
  else
    v17 = 1;
  v18 = v17;
  v49 = v18;
  if (v17)
  {
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v20 = *(_QWORD *)(v16 + 152);
    if (v20)
      *(_QWORD *)(v16 + 152) = 0;
    v19 = *(_QWORD *)(v16 + 160);
    if (v19)
      *(_QWORD *)(v16 + 160) = 0;
    (*(void (**)(_QWORD *))(*a1 + 216))(a1);
  }
  if (*a5)
    WTF::JSONImpl::Value::toJSONString(*a5, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, &v51);
  else
    v51 = 0;
  if (a7[1])
    v21 = *a7 == 0;
  else
    v21 = 1;
  v22 = !v21;
  if (a8[1])
    v23 = *a8 == 0;
  else
    v23 = 1;
  v24 = !v23;
  if (a10[1])
    v25 = *a10 == 0;
  else
    v25 = 1;
  v26 = !v25;
  v27 = *a11;
  *a11 = 0;
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v28 = &off_1E3595330;
  v28[1] = v27;
  v50 = v28;
  Inspector::InjectedScript::callFunctionOn(a2, a3, a4, (const WTF::String *)&v51, v22, v24, v26, (uint64_t *)&v50);
  if (v50)
    (*(void (**)(_QWORD *))(*v50 + 8))(v50);
  v36 = v51;
  v51 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  if ((v49 & 1) == 0)
    (*(void (**)(_QWORD *))(*a1 + 224))(a1);
  if (v20)
  {
    v37 = *(WTF **)(v16 + 152);
    *(_QWORD *)(v16 + 152) = v20;
    if (v37)
      WTF::RefCounted<JSC::Breakpoint>::deref(v37, v29, v30, v31, v32, v33, v34, v35);
  }
  if (v19)
  {
    v38 = *(WTF **)(v16 + 160);
    *(_QWORD *)(v16 + 160) = v19;
    if (v38)
      WTF::RefCounted<JSC::Breakpoint>::deref(v38, v29, v30, v31, v32, v33, v34, v35);
  }
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::callFunctionOn(uint64_t a1, const WTF::String *a2, const WTF::String *a3, WTF::JSONImpl::Value **a4, _BYTE *a5, _BYTE *a6, _BYTE *a7, uint64_t a8, _BYTE *a9, uint64_t *a10)
{
  Inspector::InspectorRuntimeAgent::callFunctionOn(a1 - 16, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void Inspector::InspectorRuntimeAgent::getPreview(Inspector::InjectedScriptManager **this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  Inspector::InjectedScriptManager *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  WTF *v43;
  void (**v44)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v45;
  _QWORD *v46;
  WTF::StringImpl *v47;

  v47 = 0;
  Inspector::InjectedScriptManager::injectedScriptForObjectId(this[3], a2, &v44);
  if (v46 && *v46)
  {
    v6 = this[4];
    v7 = *((_QWORD *)v6 + 19);
    if (v7)
      *((_QWORD *)v6 + 19) = 0;
    v8 = *((_QWORD *)v6 + 20);
    if (v8)
      *((_QWORD *)v6 + 20) = 0;
    v43 = 0;
    (*((void (**)(Inspector::InjectedScriptManager **))*this + 27))(this);
    Inspector::InjectedScript::getPreview((uint64_t)&v44, &v47, a2, &v43);
    (*((void (**)(Inspector::InjectedScriptManager **))*this + 28))(this);
    v16 = v43;
    if (v43)
    {
      v17 = 0;
    }
    else
    {
      v16 = v47;
      if (v47)
        *(_DWORD *)v47 += 2;
      v17 = 1;
    }
    *(_QWORD *)a3 = v16;
    *(_DWORD *)(a3 + 8) = v17;
    if (v7)
    {
      v19 = (WTF *)*((_QWORD *)v6 + 19);
      *((_QWORD *)v6 + 19) = v7;
      if (v19)
        WTF::RefCounted<JSC::Breakpoint>::deref(v19, v9, v10, v11, v12, v13, v14, v15);
    }
    if (v8)
    {
      v20 = (WTF *)*((_QWORD *)v6 + 20);
      *((_QWORD *)v6 + 20) = v8;
      if (v20)
        WTF::RefCounted<JSC::Breakpoint>::deref(v20, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  else
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v18 = 0x2A00000002;
    *(_QWORD *)(v18 + 8) = "Missing injected script for given objectId";
    *(_DWORD *)(v18 + 16) = 4;
    *(_QWORD *)a3 = v18;
    *(_DWORD *)(a3 + 8) = 1;
  }
  v44 = &off_1E3591350;
  if (v46)
  {
    v39 = v46 - 2;
    v40 = *(_QWORD *)(((unint64_t)(v46 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v41 = (uint64_t *)*(v46 - 1);
    if (v41)
    {
      v42 = *v39;
      *v41 = *v39;
      *(_QWORD *)(v42 + 8) = v41;
      *v39 = 0;
      v39[1] = 0;
    }
    *v39 = *(_QWORD *)(v40 + 40);
    *(_QWORD *)(v40 + 40) = v39;
    v46 = 0;
  }
  v21 = v45;
  v45 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  v22 = v47;
  v47 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v9, v10, v11, v12, v13, v14, v15);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::getPreview(Inspector::InjectedScriptManager **this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  Inspector::InspectorRuntimeAgent::getPreview(this - 2, a2, a3);
}

void Inspector::InspectorRuntimeAgent::getProperties(uint64_t a1@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X5>, uint64_t a7@<X8>)
{
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  int v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  int v33;
  WTF *v34;
  uint64_t v35;
  const char *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF *v56;
  WTF *v57;
  WTF *v58;
  WTF *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  WTF *v64;
  WTF *v65;
  void (**v66)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v67;
  _QWORD *v68;
  WTF::StringImpl *v69;

  v69 = 0;
  Inspector::InjectedScriptManager::injectedScriptForObjectId(*(Inspector::InjectedScriptManager **)(a1 + 24), a2, &v66);
  if (!v68 || !*v68)
  {
    v35 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v35 = 0x2A00000002;
    v36 = "Missing injected script for given objectId";
LABEL_38:
    *(_QWORD *)(v35 + 8) = v36;
    *(_DWORD *)(v35 + 16) = 4;
    *(_QWORD *)a7 = v35;
    *(_DWORD *)(a7 + 16) = 1;
    goto LABEL_39;
  }
  if (*(_BYTE *)(a4 + 4))
    v14 = *(_DWORD *)a4;
  else
    v14 = 0;
  if ((v14 & 0x80000000) != 0)
  {
    v35 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v35 = 0x1D00000002;
    v36 = "fetchStart cannot be negative";
    goto LABEL_38;
  }
  if (*(_BYTE *)(a5 + 4))
    v15 = *(_DWORD *)a5;
  else
    v15 = 0;
  if ((v15 & 0x80000000) != 0)
  {
    v35 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v35 = 0x1D00000002;
    v36 = "fetchCount cannot be negative";
    goto LABEL_38;
  }
  v64 = 0;
  v65 = 0;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(v16 + 152);
  if (v17)
    *(_QWORD *)(v16 + 152) = 0;
  v18 = *(_QWORD *)(v16 + 160);
  if (v18)
    *(_QWORD *)(v16 + 160) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  if (a3[1])
    v19 = *a3 == 0;
  else
    v19 = 1;
  v20 = !v19;
  if (a6[1])
    v21 = *a6 == 0;
  else
    v21 = 1;
  v22 = !v21;
  Inspector::InjectedScript::getProperties((uint64_t)&v66, &v69, a2, v20, v14, v15, v22, &v65);
  if (!v14)
  {
    if (a6[1])
      v23 = *a6 == 0;
    else
      v23 = 1;
    v24 = !v23;
    Inspector::InjectedScript::getInternalProperties((uint64_t)&v66, &v69, a2, v24, &v64);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  v32 = v65;
  if (v65)
  {
    v33 = 0;
    v34 = v64;
    v64 = 0;
    v65 = 0;
    *(_QWORD *)a7 = v32;
    *(_QWORD *)(a7 + 8) = v34;
  }
  else
  {
    v55 = v69;
    if (v69)
      *(_DWORD *)v69 += 2;
    *(_QWORD *)a7 = v55;
    v33 = 1;
  }
  *(_DWORD *)(a7 + 16) = v33;
  if (v17)
  {
    v56 = *(WTF **)(v16 + 152);
    *(_QWORD *)(v16 + 152) = v17;
    if (v56)
      WTF::RefCounted<JSC::Breakpoint>::deref(v56, v25, v26, v27, v28, v29, v30, v31);
  }
  if (v18)
  {
    v57 = *(WTF **)(v16 + 160);
    *(_QWORD *)(v16 + 160) = v18;
    if (v57)
      WTF::RefCounted<JSC::Breakpoint>::deref(v57, v25, v26, v27, v28, v29, v30, v31);
  }
  v58 = v64;
  v64 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 1)
      WTF::JSONImpl::Value::operator delete(v58, v25, v26, v27, v28, v29, v30, v31);
    else
      --*(_DWORD *)v58;
  }
  v59 = v65;
  v65 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 1)
      WTF::JSONImpl::Value::operator delete(v59, v25, v26, v27, v28, v29, v30, v31);
    else
      --*(_DWORD *)v59;
  }
LABEL_39:
  v66 = &off_1E3591350;
  if (v68)
  {
    v60 = v68 - 2;
    v61 = *(_QWORD *)(((unint64_t)(v68 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v62 = (uint64_t *)*(v68 - 1);
    if (v62)
    {
      v63 = *v60;
      *v62 = *v60;
      *(_QWORD *)(v63 + 8) = v62;
      *v60 = 0;
      v60[1] = 0;
    }
    *v60 = *(_QWORD *)(v61 + 40);
    *(_QWORD *)(v61 + 40) = v60;
    v68 = 0;
  }
  v37 = v67;
  v67 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  v38 = v69;
  v69 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::getProperties(uint64_t a1@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X5>, uint64_t a7@<X8>)
{
  Inspector::InspectorRuntimeAgent::getProperties(a1 - 16, a2, a3, a4, a5, a6, a7);
}

void Inspector::InspectorRuntimeAgent::getDisplayableProperties(uint64_t a1@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  int v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  int v29;
  WTF *v30;
  uint64_t v31;
  const char *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF *v52;
  WTF *v53;
  WTF *v54;
  WTF *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  WTF *v60;
  WTF *v61;
  void (**v62)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v63;
  _QWORD *v64;
  WTF::StringImpl *v65;

  v65 = 0;
  Inspector::InjectedScriptManager::injectedScriptForObjectId(*(Inspector::InjectedScriptManager **)(a1 + 24), a2, &v62);
  if (!v64 || !*v64)
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x2A00000002;
    v32 = "Missing injected script for given objectId";
LABEL_32:
    *(_QWORD *)(v31 + 8) = v32;
    *(_DWORD *)(v31 + 16) = 4;
    *(_QWORD *)a6 = v31;
    *(_DWORD *)(a6 + 16) = 1;
    goto LABEL_33;
  }
  if (*(_BYTE *)(a3 + 4))
    v12 = *(_DWORD *)a3;
  else
    v12 = 0;
  if ((v12 & 0x80000000) != 0)
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x1D00000002;
    v32 = "fetchStart cannot be negative";
    goto LABEL_32;
  }
  if (*(_BYTE *)(a4 + 4))
    v13 = *(_DWORD *)a4;
  else
    v13 = 0;
  if ((v13 & 0x80000000) != 0)
  {
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0x1D00000002;
    v32 = "fetchCount cannot be negative";
    goto LABEL_32;
  }
  v60 = 0;
  v61 = 0;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(v14 + 152);
  if (v15)
    *(_QWORD *)(v14 + 152) = 0;
  v16 = *(_QWORD *)(v14 + 160);
  if (v16)
    *(_QWORD *)(v14 + 160) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  if (a5[1])
    v17 = *a5 == 0;
  else
    v17 = 1;
  v18 = !v17;
  Inspector::InjectedScript::getDisplayableProperties((uint64_t)&v62, &v65, a2, v12, v13, v18, &v61);
  if (!v12)
  {
    if (a5[1])
      v19 = *a5 == 0;
    else
      v19 = 1;
    v20 = !v19;
    Inspector::InjectedScript::getInternalProperties((uint64_t)&v62, &v65, a2, v20, &v60);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  v28 = v61;
  if (v61)
  {
    v29 = 0;
    v30 = v60;
    v60 = 0;
    v61 = 0;
    *(_QWORD *)a6 = v28;
    *(_QWORD *)(a6 + 8) = v30;
  }
  else
  {
    v51 = v65;
    if (v65)
      *(_DWORD *)v65 += 2;
    *(_QWORD *)a6 = v51;
    v29 = 1;
  }
  *(_DWORD *)(a6 + 16) = v29;
  if (v15)
  {
    v52 = *(WTF **)(v14 + 152);
    *(_QWORD *)(v14 + 152) = v15;
    if (v52)
      WTF::RefCounted<JSC::Breakpoint>::deref(v52, v21, v22, v23, v24, v25, v26, v27);
  }
  if (v16)
  {
    v53 = *(WTF **)(v14 + 160);
    *(_QWORD *)(v14 + 160) = v16;
    if (v53)
      WTF::RefCounted<JSC::Breakpoint>::deref(v53, v21, v22, v23, v24, v25, v26, v27);
  }
  v54 = v60;
  v60 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 1)
      WTF::JSONImpl::Value::operator delete(v54, v21, v22, v23, v24, v25, v26, v27);
    else
      --*(_DWORD *)v54;
  }
  v55 = v61;
  v61 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
      WTF::JSONImpl::Value::operator delete(v55, v21, v22, v23, v24, v25, v26, v27);
    else
      --*(_DWORD *)v55;
  }
LABEL_33:
  v62 = &off_1E3591350;
  if (v64)
  {
    v56 = v64 - 2;
    v57 = *(_QWORD *)(((unint64_t)(v64 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v58 = (uint64_t *)*(v64 - 1);
    if (v58)
    {
      v59 = *v56;
      *v58 = *v56;
      *(_QWORD *)(v59 + 8) = v58;
      *v56 = 0;
      v56[1] = 0;
    }
    *v56 = *(_QWORD *)(v57 + 40);
    *(_QWORD *)(v57 + 40) = v56;
    v64 = 0;
  }
  v33 = v63;
  v63 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::~StringImpl(v33, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v33 -= 2;
    }
  }
  v34 = v65;
  v65 = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v21, v22, v23, v24, v25, v26, v27);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::getDisplayableProperties(uint64_t a1@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X8>)
{
  Inspector::InspectorRuntimeAgent::getDisplayableProperties(a1 - 16, a2, a3, a4, a5, a6);
}

void Inspector::InspectorRuntimeAgent::getCollectionEntries(uint64_t a1@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v11;
  unsigned int v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  const char *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  WTF *v46;
  void (**v47)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v48;
  _QWORD *v49;
  WTF::StringImpl *v50;

  v50 = 0;
  Inspector::InjectedScriptManager::injectedScriptForObjectId(*(Inspector::InjectedScriptManager **)(a1 + 24), a2, &v47);
  if (!v49 || !*v49)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v22 = 0x2A00000002;
    v23 = "Missing injected script for given objectId";
LABEL_14:
    *(_QWORD *)(v22 + 8) = v23;
    *(_DWORD *)(v22 + 16) = 4;
    *(_QWORD *)a6 = v22;
    *(_DWORD *)(a6 + 8) = 1;
    goto LABEL_15;
  }
  if (*(_BYTE *)(a4 + 4))
    v11 = *(_DWORD *)a4;
  else
    v11 = 0;
  if ((v11 & 0x80000000) != 0)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v22 = 0x1D00000002;
    v23 = "fetchStart cannot be negative";
    goto LABEL_14;
  }
  if (*(_BYTE *)(a5 + 4))
    v12 = *(_DWORD *)a5;
  else
    v12 = 0;
  if ((v12 & 0x80000000) != 0)
  {
    v22 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v22 = 0x1D00000002;
    v23 = "fetchCount cannot be negative";
    goto LABEL_14;
  }
  v46 = 0;
  Inspector::InjectedScript::getCollectionEntries((uint64_t)&v47, &v50, a2, a3, v11, v12, &v46);
  v20 = v46;
  if (v46)
  {
    v21 = 0;
  }
  else
  {
    v20 = v50;
    if (v50)
      *(_DWORD *)v50 += 2;
    v21 = 1;
  }
  *(_QWORD *)a6 = v20;
  *(_DWORD *)(a6 + 8) = v21;
LABEL_15:
  v47 = &off_1E3591350;
  if (v49)
  {
    v42 = v49 - 2;
    v43 = *(_QWORD *)(((unint64_t)(v49 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v44 = (uint64_t *)*(v49 - 1);
    if (v44)
    {
      v45 = *v42;
      *v44 = *v42;
      *(_QWORD *)(v45 + 8) = v44;
      *v42 = 0;
      v42[1] = 0;
    }
    *v42 = *(_QWORD *)(v43 + 40);
    *(_QWORD *)(v43 + 40) = v42;
    v49 = 0;
  }
  v24 = v48;
  v48 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  v25 = v50;
  v50 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::getCollectionEntries(uint64_t a1@<X0>, const WTF::String *a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  Inspector::InspectorRuntimeAgent::getCollectionEntries(a1 - 16, a2, a3, a4, a5, a6);
}

void Inspector::InspectorRuntimeAgent::saveResult(Inspector::InjectedScriptManager **a1@<X0>, WTF::JSONImpl::Value **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  WTF::JSONImpl::ObjectBase *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  WTF::AtomStringImpl *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  void (**v139)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  WTF::StringImpl *v144;
  void (**v145)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  WTF::StringImpl *v150;

  v150 = 0;
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)(v8 + 4) = 14;
  *(_QWORD *)(v8 + 8) = "InjectedScript";
  *(_DWORD *)(v8 + 16) = 4;
  v148 = 0;
  v149 = 0;
  v146 = (WTF::StringImpl *)v8;
  v147 = 0;
  *(_DWORD *)v8 = 2;
  v9 = *a2;
  v145 = &off_1E3591330;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x800000002;
  *(_QWORD *)(v10 + 8) = "objectId";
  *(_DWORD *)(v10 + 16) = 4;
  v139 = (void (**)(Inspector::InjectedScriptBase *__hidden))v10;
  WTF::JSONImpl::ObjectBase::getString(v9, (WTF::StringImpl **)&v139, v11, &v144);
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v10, v12, v13, v14, v15, v16, v17, v18);
    WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
  if (!v144)
  {
    (*((void (**)(void (***__return_ptr)(Inspector::InjectedScriptBase *__hidden), Inspector::InjectedScriptManager **, WTF::StringImpl **, uint64_t))*a1
     + 26))(&v139, a1, &v150, a3);
    v45 = v140;
    if (v140)
      *(_DWORD *)v140 += 2;
    v46 = v146;
    v146 = v45;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v38, v39, v40, v41, v42, v43, v44);
        WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    v147 = v141;
    JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v148, &v142, v39, v40, v41, v42, v43, v44);
    v149 = v143;
    v139 = &off_1E3591350;
    if (v142)
    {
      v134 = v142 - 2;
      v135 = *(_QWORD *)(((unint64_t)(v142 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
      v136 = (uint64_t *)*(v142 - 1);
      if (v136)
      {
        v137 = *v134;
        *v136 = *v134;
        *(_QWORD *)(v137 + 8) = v136;
        *v134 = 0;
        v134[1] = 0;
      }
      *v134 = *(_QWORD *)(v135 + 40);
      *(_QWORD *)(v135 + 40) = v134;
      v142 = 0;
    }
    v47 = v140;
    v140 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::~StringImpl(v47, v37, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v118, v119, v120, v121, v122, v123, v124, v125);
      }
      else
      {
        *(_DWORD *)v47 -= 2;
      }
    }
    if (!v148 || !*v148)
    {
LABEL_32:
      v50 = v150;
      if (v150)
        *(_DWORD *)v150 += 2;
      *(_QWORD *)(a4 + 8) = v50;
      goto LABEL_35;
    }
LABEL_27:
    LOBYTE(v139) = 0;
    BYTE4(v139) = 0;
    WTF::JSONImpl::Value::toJSONString(*a2, v29, v30, v31, v32, v33, v34, &v138);
    Inspector::InjectedScript::saveResult((uint64_t)&v145, &v150, (const WTF::String *)&v138, (uint64_t)&v139);
    v48 = v138;
    v138 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v37, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
    if (BYTE4(v139))
    {
      v49 = 0;
      *(_QWORD *)(a4 + 8) = v139;
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  Inspector::InjectedScriptManager::injectedScriptForObjectId(a1[3], (const WTF::String *)&v144, &v139);
  v26 = v140;
  if (v140)
    *(_DWORD *)v140 += 2;
  v27 = v146;
  v146 = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  v147 = v141;
  JSC::Strong<JSC::JSObject,(JSC::ShouldStrongDestructorGrabLock)0>::operator=(&v148, &v142, v20, v21, v22, v23, v24, v25);
  v149 = v143;
  v139 = &off_1E3591350;
  if (v142)
  {
    v130 = v142 - 2;
    v131 = *(_QWORD *)(((unint64_t)(v142 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v132 = (uint64_t *)*(v142 - 1);
    if (v132)
    {
      v133 = *v130;
      *v132 = *v130;
      *(_QWORD *)(v133 + 8) = v132;
      *v130 = 0;
      v130[1] = 0;
    }
    *v130 = *(_QWORD *)(v131 + 40);
    *(_QWORD *)(v131 + 40) = v130;
    v142 = 0;
  }
  v35 = v140;
  v140 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
    {
      WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
    }
    else
    {
      *(_DWORD *)v35 -= 2;
    }
  }
  if (v148 && *v148)
    goto LABEL_27;
  v36 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v36 = 0x2A00000002;
  *(_QWORD *)(v36 + 8) = "Missing injected script for given objectId";
  *(_DWORD *)(v36 + 16) = 4;
  *(_QWORD *)(a4 + 8) = v36;
LABEL_35:
  v49 = 1;
LABEL_36:
  *(_DWORD *)(a4 + 16) = v49;
  v51 = v144;
  v144 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v37, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  v145 = &off_1E3591350;
  if (v148)
  {
    v126 = v148 - 2;
    v127 = *(_QWORD *)(((unint64_t)(v148 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v128 = (uint64_t *)*(v148 - 1);
    if (v128)
    {
      v129 = *v126;
      *v128 = *v126;
      *(_QWORD *)(v129 + 8) = v128;
      *v126 = 0;
      v126[1] = 0;
    }
    *v126 = *(_QWORD *)(v127 + 40);
    *(_QWORD *)(v127 + 40) = v126;
    v148 = 0;
  }
  v52 = v146;
  v146 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v37, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  v53 = v150;
  v150 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
    {
      WTF::StringImpl::~StringImpl(v53, v37, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
    }
    else
    {
      *(_DWORD *)v53 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::saveResult(uint64_t a1@<X0>, WTF::JSONImpl::Value **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  Inspector::InspectorRuntimeAgent::saveResult((Inspector::InjectedScriptManager **)(a1 - 16), a2, a3, a4);
}

void Inspector::InspectorRuntimeAgent::setSavedResultAlias(Inspector::InspectorRuntimeAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  _BYTE *v12;
  int v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 32);
  v11 = *a2;
  if (*a2)
  {
    v13 = *(unsigned __int8 *)(v10 + 32);
    v12 = (_BYTE *)(v10 + 32);
    v14 = (WTF::StringImpl **)(v12 - 8);
    *(_DWORD *)v11 += 4;
    if (v13)
      goto LABEL_3;
LABEL_8:
    *v14 = v11;
    *v12 = 1;
    goto LABEL_9;
  }
  v24 = *(unsigned __int8 *)(v10 + 32);
  v12 = (_BYTE *)(v10 + 32);
  v14 = (WTF::StringImpl **)(v12 - 8);
  if (!v24)
    goto LABEL_8;
LABEL_3:
  v15 = *v14;
  *v14 = v11;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
LABEL_9:
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  *a9 = 0;
  a9[8] = 0;
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::setSavedResultAlias(Inspector::InspectorRuntimeAgent *this@<X0>, WTF::StringImpl **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  _BYTE *v12;
  int v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
  v11 = *a2;
  if (*a2)
  {
    v13 = *(unsigned __int8 *)(v10 + 32);
    v12 = (_BYTE *)(v10 + 32);
    v14 = (WTF::StringImpl **)(v12 - 8);
    *(_DWORD *)v11 += 4;
    if (v13)
      goto LABEL_3;
LABEL_8:
    *v14 = v11;
    *v12 = 1;
    goto LABEL_9;
  }
  v24 = *(unsigned __int8 *)(v10 + 32);
  v12 = (_BYTE *)(v10 + 32);
  v14 = (WTF::StringImpl **)(v12 - 8);
  if (!v24)
    goto LABEL_8;
LABEL_3:
  v15 = *v14;
  *v14 = v11;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
LABEL_9:
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  *a9 = 0;
  a9[8] = 0;
}

void Inspector::InspectorRuntimeAgent::releaseObject(Inspector::InjectedScriptManager **this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (**v26)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v27;
  _QWORD *v28;

  Inspector::InjectedScriptManager::injectedScriptForObjectId(this[3], a2, &v26);
  v12 = v28;
  if (v28)
  {
    if (*v28)
    {
      Inspector::InjectedScript::releaseObject((Inspector::InjectedScript *)&v26, a2);
      v12 = v28;
      *a3 = 0;
      a3[8] = 0;
      v26 = &off_1E3591350;
      if (!v12)
        goto LABEL_10;
    }
    else
    {
      *a3 = 0;
      a3[8] = 0;
      v26 = &off_1E3591350;
    }
    v13 = v12 - 2;
    v14 = *(_QWORD *)(((unint64_t)(v12 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v15 = (uint64_t *)*(v12 - 1);
    if (v15)
    {
      v16 = *v13;
      *v15 = *v13;
      *(_QWORD *)(v16 + 8) = v15;
      *v13 = 0;
      v13[1] = 0;
    }
    *v13 = *(_QWORD *)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;
    v28 = 0;
  }
  else
  {
    *a3 = 0;
    a3[8] = 0;
    v26 = &off_1E3591350;
  }
LABEL_10:
  v17 = v27;
  v27 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::releaseObject(Inspector::InjectedScriptManager **this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (**v26)(Inspector::InjectedScriptBase *__hidden);
  WTF::StringImpl *v27;
  _QWORD *v28;

  Inspector::InjectedScriptManager::injectedScriptForObjectId(this[1], a2, &v26);
  v12 = v28;
  if (v28)
  {
    if (*v28)
    {
      Inspector::InjectedScript::releaseObject((Inspector::InjectedScript *)&v26, a2);
      v12 = v28;
      *a3 = 0;
      a3[8] = 0;
      v26 = &off_1E3591350;
      if (!v12)
        goto LABEL_10;
    }
    else
    {
      *a3 = 0;
      a3[8] = 0;
      v26 = &off_1E3591350;
    }
    v13 = v12 - 2;
    v14 = *(_QWORD *)(((unint64_t)(v12 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v15 = (uint64_t *)*(v12 - 1);
    if (v15)
    {
      v16 = *v13;
      *v15 = *v13;
      *(_QWORD *)(v16 + 8) = v15;
      *v13 = 0;
      v13[1] = 0;
    }
    *v13 = *(_QWORD *)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;
    v28 = 0;
  }
  else
  {
    *a3 = 0;
    a3[8] = 0;
    v26 = &off_1E3591350;
  }
LABEL_10:
  v17 = v27;
  v27 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
}

void Inspector::InspectorRuntimeAgent::releaseObjectGroup(Inspector::InspectorRuntimeAgent *this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;

  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v5)
  {
    v8 = 0;
    LODWORD(v6) = 0;
LABEL_10:
    v7 = (_DWORD *)(v5 + 48 * v6);
    goto LABEL_11;
  }
  v6 = *(unsigned int *)(v5 - 4);
  v7 = (_DWORD *)(v5 + 48 * v6);
  if (!*(_DWORD *)(v5 - 12))
  {
    v8 = (_DWORD *)(v5 + 48 * v6);
    goto LABEL_10;
  }
  v8 = *(_DWORD **)(*((_QWORD *)this + 3) + 8);
  if ((_DWORD)v6)
  {
    v9 = 48 * v6;
    v8 = *(_DWORD **)(*((_QWORD *)this + 3) + 8);
    while ((*v8 + 1) <= 1)
    {
      v8 += 12;
      v9 -= 48;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_11:
  if (v5)
    v10 = (_DWORD *)(v5 + 48 * *(unsigned int *)(v5 - 4));
  else
    v10 = 0;
  while (v8 != v10)
  {
    Inspector::InjectedScript::releaseObjectGroup((Inspector::InjectedScript *)(v8 + 2), a2);
    v11 = v8 + 12;
    v8 = v7;
    if (v11 != v7)
    {
      v8 = v11;
      while ((*v8 + 1) <= 1)
      {
        v8 += 12;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
  }
  *a3 = 0;
  a3[8] = 0;
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::releaseObjectGroup(Inspector::InspectorRuntimeAgent *this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;

  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (!v5)
  {
    v8 = 0;
    LODWORD(v6) = 0;
LABEL_10:
    v7 = (_DWORD *)(v5 + 48 * v6);
    goto LABEL_11;
  }
  v6 = *(unsigned int *)(v5 - 4);
  v7 = (_DWORD *)(v5 + 48 * v6);
  if (!*(_DWORD *)(v5 - 12))
  {
    v8 = (_DWORD *)(v5 + 48 * v6);
    goto LABEL_10;
  }
  v8 = *(_DWORD **)(*((_QWORD *)this + 1) + 8);
  if ((_DWORD)v6)
  {
    v9 = 48 * v6;
    v8 = *(_DWORD **)(*((_QWORD *)this + 1) + 8);
    while ((*v8 + 1) <= 1)
    {
      v8 += 12;
      v9 -= 48;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_11:
  if (v5)
    v10 = (_DWORD *)(v5 + 48 * *(unsigned int *)(v5 - 4));
  else
    v10 = 0;
  while (v8 != v10)
  {
    Inspector::InjectedScript::releaseObjectGroup((Inspector::InjectedScript *)(v8 + 2), a2);
    v11 = v8 + 12;
    v8 = v7;
    if (v11 != v7)
    {
      v8 = v11;
      while ((*v8 + 1) <= 1)
      {
        v8 += 12;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
  }
  *a3 = 0;
  a3[8] = 0;
}

void Inspector::InspectorRuntimeAgent::getRuntimeTypesForVariablesAtOffsets(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  JSC::VM *v8;
  JSC::TypeProfilerLog *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  WTF::JSONImpl::ObjectBase *v27;
  int v28;
  unsigned int v29;
  int v30;
  WTF::JSONImpl::ObjectBase *v32;
  int v33;
  uint64_t v34;
  const WTF::StringImpl *v35;
  uint64_t Integer;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  const WTF::StringImpl *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const WTF::StringImpl *v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  unint64_t v105;
  int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  unint64_t v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  _QWORD *Location;
  uint64_t v129;
  unsigned int v130;
  int v131;
  char v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  uint64_t v135;
  WTF *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  WTF::AtomStringImpl *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  WTF *v153;
  WTF *v154;
  WTF *v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  WTF *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF::AtomStringImpl *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  WTF *v174;
  WTF *v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  WTF *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  WTF::AtomStringImpl *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  WTF *v194;
  WTF *v195;
  WTF::StringImpl *v196;
  char v197;
  uint64_t v198;
  WTF *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  WTF *v208;
  WTF *v209;
  WTF *v210;
  WTF::StringImpl *v211;
  unint64_t v212;
  const char *v213;
  uint64_t v214;
  uint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  const void *v219;
  void *v220;
  WTF::StringImpl **v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  void *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _DWORD **v270;
  uint64_t v271;
  _DWORD *v272;
  _DWORD **v273;
  uint64_t v274;
  _DWORD *v275;
  _DWORD **v276;
  uint64_t v277;
  _DWORD *v278;
  _DWORD **v279;
  uint64_t v280;
  _DWORD *v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  WTF::AtomStringImpl *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  const void **v301;
  WTF *v302;
  WTF::StringImpl *v303;
  WTF::StringImpl *v304;
  WTF *v305;
  WTF::StringImpl *v306[2];
  char v307;
  WTF *v308[2];

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 40) + 93168))
  {
    v283 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v283 = 0x1A00000002;
    *(_QWORD *)(v283 + 8) = "VM has no type information";
    *(_DWORD *)(v283 + 16) = 4;
    *(_QWORD *)a3 = v283;
    *(_DWORD *)(a3 + 8) = 1;
    return;
  }
  v5 = a1;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x600000001;
  *(_QWORD *)(v6 + 16) = 0;
  v301 = (const void **)(v6 + 16);
  *(_QWORD *)(v6 + 24) = 0;
  mach_absolute_time();
  v7 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v7 != -1)
  {
    v306[0] = (WTF::StringImpl *)&v305;
    v308[0] = (WTF *)v306;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v308, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  v300 = a3;
  v8 = *(JSC::VM **)(v5 + 40);
  v9 = (JSC::TypeProfilerLog *)*((_QWORD *)v8 + 11647);
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0xA00000002;
  *(_QWORD *)(v10 + 8) = "User Query";
  *(_DWORD *)(v10 + 16) = 4;
  v306[0] = (WTF::StringImpl *)v10;
  JSC::TypeProfilerLog::processLogEntries(v9, v8, (const WTF::String *)v306, v11, v12, v13, v14, v15);
  v23 = v306[0];
  v306[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v292, v293, v294, v295, v296, v297, v298, v299);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *a2;
  if (*(_DWORD *)(*a2 + 28))
  {
    v25 = 0;
    v26 = "typeInformationDescriptor";
    while (1)
    {
      if (v25 >= *(unsigned int *)(v24 + 28))
      {
LABEL_230:
        __break(0xC471u);
        JUMPOUT(0x1986C2C2CLL);
      }
      v27 = *(WTF::JSONImpl::ObjectBase **)(*(_QWORD *)(v24 + 16) + 8 * v25);
      v28 = *(_DWORD *)v27;
      v29 = *((_DWORD *)v27 + 1);
      v30 = *(_DWORD *)v27 + 1;
      *(_DWORD *)v27 = v30;
      if (v29 < 5 || v29 == 6)
      {
        v32 = 0;
      }
      else
      {
        if (v29 != 5)
          goto LABEL_229;
        v30 = v28 + 2;
        *(_DWORD *)v27 = v28 + 2;
        v32 = v27;
      }
      v33 = v30 - 1;
      if (v33)
        *(_DWORD *)v27 = v33;
      else
        WTF::JSONImpl::Value::operator delete(v27, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
      if (!v32)
      {
        v284 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v284 = 0x2700000002;
        *(_QWORD *)(v284 + 8) = "Unexpected non-object item in locations";
        *(_DWORD *)(v284 + 16) = 4;
        *(_QWORD *)v300 = v284;
        *(_DWORD *)(v300 + 8) = 1;
        if (*(_DWORD *)v6 == 1)
          WTF::JSONImpl::Value::operator delete((WTF *)v6, v285, v286, v287, v288, v289, v290, v291);
        else
          --*(_DWORD *)v6;
        return;
      }
      v34 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v34 = 0x1900000002;
      *(_QWORD *)(v34 + 8) = v26;
      *(_DWORD *)(v34 + 16) = 4;
      v306[0] = (WTF::StringImpl *)v34;
      Integer = WTF::JSONImpl::ObjectBase::getInteger(v32, v306, v35);
      v44 = (Integer & 0xFF00000000) != 0 ? Integer : 1;
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v34, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
      v45 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v45 = 0x800000002;
      *(_QWORD *)(v45 + 8) = "sourceID";
      *(_DWORD *)(v45 + 16) = 4;
      v306[0] = (WTF::StringImpl *)v45;
      WTF::JSONImpl::ObjectBase::getString(v32, v306, v46, &v304);
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v45, v47, v48, v49, v50, v51, v52, v53);
        WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
      }
      else
      {
        *(_DWORD *)v45 -= 2;
      }
      v54 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v54 = 0x500000002;
      *(_QWORD *)(v54 + 8) = "divot";
      *(_DWORD *)(v54 + 16) = 4;
      v306[0] = (WTF::StringImpl *)v54;
      v56 = WTF::JSONImpl::ObjectBase::getInteger(v32, v306, v55);
      v64 = (v56 & 0xFF00000000) != 0 ? v56 : 0;
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v54, v57, v58, v59, v60, v61, v62, v63);
        WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
      if (!v304)
        break;
      v65 = *((_QWORD *)v304 + 1);
      v66 = *((unsigned int *)v304 + 1);
      if ((*((_BYTE *)v304 + 16) & 4) != 0)
        goto LABEL_75;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      if (!v65 || !(_DWORD)v66)
        goto LABEL_110;
      v70 = 0;
      v71 = 2 * v66;
      while (1)
      {
        v72 = *(unsigned __int16 *)(v65 + v70);
        if (v72 - 9 >= 5 && v72 != 32)
          break;
        --v66;
        v70 += 2;
        if (v71 == v70)
          goto LABEL_109;
      }
      if (v72 == 43)
      {
        if (v71 - 2 == v70)
          goto LABEL_109;
        --v66;
        v73 = v65 + v70;
        v75 = *(unsigned __int16 *)(v73 + 2);
        v74 = v73 + 2;
        v72 = v75;
      }
      else
      {
        v74 = v65 + v70;
      }
      if (v72 - 48 > 9)
        goto LABEL_109;
      v100 = 0;
      v101 = 0;
      while (1)
      {
        v102 = v72 - 48;
        v103 = (v100 * (unsigned __int128)0xAuLL) >> 64;
        if (is_mul_ok(v100, 0xAuLL))
          v100 *= 10;
        v104 = __CFADD__(v100, v102);
        v105 = v100 + v102;
        v106 = v104;
        if (!v104)
          v100 = v105;
        if (v103)
          v107 = 1;
        else
          v107 = v106;
        if (v107)
          v101 = 1;
        if (!--v66)
          break;
        v108 = *(unsigned __int16 *)(v74 + 2);
        v74 += 2;
        v72 = v108;
        v109 = v108 - 48;
        if (v108 - 48 > 9 || v109 >= 0xA)
        {
          if (!v101)
          {
            v110 = 0;
            while (1)
            {
              v111 = *(unsigned __int16 *)(v74 + 2 * v110);
              if ((v111 - 9) >= 5 && v111 != 32)
                break;
              if (v66 == ++v110)
                goto LABEL_206;
            }
          }
          goto LABEL_109;
        }
      }
LABEL_205:
      if (!v101)
      {
LABEL_206:
        v69 = v100 & 0xFFFFFF00;
        v67 = v100;
        v68 = 1;
        goto LABEL_110;
      }
LABEL_109:
      v67 = 0;
      v68 = 0;
      v69 = 0;
LABEL_110:
      if (!v68)
      {
        std::__throw_bad_optional_access[abi:sn180100]();
LABEL_229:
        __break(0xC471u);
        JUMPOUT(0x1986C2C50);
      }
      Location = JSC::TypeProfiler::findLocation(*(uint64_t **)(*(_QWORD *)(v5 + 40) + 93168), v64, v69 | v67, v44, *(_QWORD *)(v5 + 40));
      v302 = v32;
      if (Location && ((v129 = Location[2]) != 0 && *Location != -2 || (v129 = Location[1]) != 0))
      {
        do
          v130 = __ldaxr((unsigned int *)v129);
        while (__stlxr(v130 + 1, (unsigned int *)v129));
        v131 = *(unsigned __int16 *)(v129 + 6);
        v132 = *(_WORD *)(v129 + 6) != 0;
        v133 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v133 = 0x500000001;
        *((_QWORD *)v133 + 3) = 0;
        *((_QWORD *)v133 + 4) = 0;
        *((_QWORD *)v133 + 2) = 0;
        v306[0] = v133;
        Inspector::Protocol::Runtime::TypeDescription::Builder<0>::setIsValid((uint64_t *)v306, v132);
        v134 = v306[0];
        if (v131)
        {
          JSC::StructureShape::leastCommonAncestor((uint64_t **)(v129 + 8), v16, v17, v18, v19, v20, v21, v22, &v303);
          v135 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v135 = 0x1300000002;
          *(_QWORD *)(v135 + 8) = "leastCommonAncestor";
          *(_DWORD *)(v135 + 16) = 4;
          v305 = (WTF *)v135;
          v136 = (WTF *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v136 = 0x400000001;
          v142 = v303;
          *((_QWORD *)v136 + 1) = v303;
          if (v142)
            *(_DWORD *)v142 += 2;
          v308[0] = v136;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v134 + 2, (WTF::AtomStringImpl *)&v305, (const WTF::StringImpl *)v308, v137, v138, v139, v140, v141, (uint64_t)v306);
          if (v307)
          {
            v150 = (uint64_t *)((char *)v134 + 24);
            v151 = *((unsigned int *)v134 + 9);
            if ((_DWORD)v151 == *((_DWORD *)v134 + 8))
            {
              v270 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v150, v151 + 1, (unint64_t)&v305);
              v151 = *((unsigned int *)v134 + 9);
              v271 = *((_QWORD *)v134 + 3);
              v272 = *v270;
              if (*v270)
                *v272 += 2;
              *(_QWORD *)(v271 + 8 * v151) = v272;
            }
            else
            {
              v152 = *v150;
              v153 = v305;
              if (v305)
                *(_DWORD *)v305 += 2;
              *(_QWORD *)(v152 + 8 * v151) = v153;
            }
            *((_DWORD *)v134 + 9) = v151 + 1;
          }
          v154 = v308[0];
          v308[0] = 0;
          if (v154)
          {
            if (*(_DWORD *)v154 == 1)
              WTF::JSONImpl::Value::operator delete(v154, v143, v144, v145, v146, v147, v148, v149);
            else
              --*(_DWORD *)v154;
          }
          v155 = v305;
          v305 = 0;
          if (v155)
          {
            if (*(_DWORD *)v155 == 2)
            {
              WTF::StringImpl::~StringImpl(v155, v143, v144, v145, v146, v147, v148, v149);
              WTF::fastFree(v230, v231, v232, v233, v234, v235, v236, v237);
            }
            else
            {
              *(_DWORD *)v155 -= 2;
            }
          }
          v156 = v303;
          v303 = 0;
          if (v156)
          {
            if (*(_DWORD *)v156 == 2)
            {
              WTF::StringImpl::~StringImpl(v156, v143, v144, v145, v146, v147, v148, v149);
              WTF::fastFree(v238, v239, v240, v241, v242, v243, v244, v245);
            }
            else
            {
              *(_DWORD *)v156 -= 2;
            }
          }
          JSC::TypeSet::allStructureRepresentations((JSC::TypeSet *)v129, &v303);
          v157 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v157 = 0xA00000002;
          *(_QWORD *)(v157 + 8) = "structures";
          *(_DWORD *)(v157 + 16) = 4;
          v308[0] = (WTF *)v157;
          v158 = v303;
          v303 = 0;
          v305 = v158;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)v134 + 2, v308, (const WTF::StringImpl *)&v305, v159, v160, v161, v162, v163, (uint64_t)v306);
          if (v307)
          {
            v171 = (uint64_t *)((char *)v134 + 24);
            v172 = *((unsigned int *)v134 + 9);
            if ((_DWORD)v172 == *((_DWORD *)v134 + 8))
            {
              v273 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v171, v172 + 1, (unint64_t)v308);
              v172 = *((unsigned int *)v134 + 9);
              v274 = *((_QWORD *)v134 + 3);
              v275 = *v273;
              if (*v273)
                *v275 += 2;
              *(_QWORD *)(v274 + 8 * v172) = v275;
            }
            else
            {
              v173 = *v171;
              v174 = v308[0];
              if (v308[0])
                *(_DWORD *)v308[0] += 2;
              *(_QWORD *)(v173 + 8 * v172) = v174;
            }
            *((_DWORD *)v134 + 9) = v172 + 1;
          }
          v175 = v305;
          v305 = 0;
          if (v175)
          {
            if (*(_DWORD *)v175 == 1)
              WTF::JSONImpl::Value::operator delete(v175, v164, v165, v166, v167, v168, v169, v170);
            else
              --*(_DWORD *)v175;
          }
          v176 = v308[0];
          v308[0] = 0;
          if (v176)
          {
            if (*(_DWORD *)v176 == 2)
            {
              WTF::StringImpl::~StringImpl(v176, v164, v165, v166, v167, v168, v169, v170);
              WTF::fastFree(v246, v247, v248, v249, v250, v251, v252, v253);
            }
            else
            {
              *(_DWORD *)v176 -= 2;
            }
          }
          JSC::TypeSet::inspectorTypeSet((JSC::TypeSet *)v129, (uint64_t *)&v303);
          v177 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v177 = 0x700000002;
          *(_QWORD *)(v177 + 8) = "typeSet";
          *(_DWORD *)(v177 + 16) = 4;
          v308[0] = (WTF *)v177;
          v178 = v303;
          v303 = 0;
          v305 = v178;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>((uint64_t *)v134 + 2, (WTF::AtomStringImpl *)v308, (const WTF::StringImpl *)&v305, v179, v180, v181, v182, v183, (uint64_t)v306);
          if (v307)
          {
            v191 = (uint64_t *)((char *)v134 + 24);
            v192 = *((unsigned int *)v134 + 9);
            if ((_DWORD)v192 == *((_DWORD *)v134 + 8))
            {
              v276 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v191, v192 + 1, (unint64_t)v308);
              v192 = *((unsigned int *)v134 + 9);
              v277 = *((_QWORD *)v134 + 3);
              v278 = *v276;
              if (*v276)
                *v278 += 2;
              *(_QWORD *)(v277 + 8 * v192) = v278;
            }
            else
            {
              v193 = *v191;
              v194 = v308[0];
              if (v308[0])
                *(_DWORD *)v308[0] += 2;
              *(_QWORD *)(v193 + 8 * v192) = v194;
            }
            *((_DWORD *)v134 + 9) = v192 + 1;
          }
          v195 = v305;
          v305 = 0;
          if (v195)
          {
            if (*(_DWORD *)v195 == 1)
              WTF::JSONImpl::Value::operator delete(v195, v184, v185, v186, v187, v188, v189, v190);
            else
              --*(_DWORD *)v195;
          }
          v196 = v308[0];
          v308[0] = 0;
          if (v196)
          {
            if (*(_DWORD *)v196 == 2)
            {
              WTF::StringImpl::~StringImpl(v196, v184, v185, v186, v187, v188, v189, v190);
              WTF::fastFree(v254, v255, v256, v257, v258, v259, v260, v261);
            }
            else
            {
              *(_DWORD *)v196 -= 2;
            }
          }
          v197 = *(_BYTE *)(v129 + 5);
          v198 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v198 = 0xB00000002;
          *(_QWORD *)(v198 + 8) = "isTruncated";
          *(_DWORD *)(v198 + 16) = 4;
          v305 = (WTF *)v198;
          v199 = (WTF *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v199 = 0x100000001;
          *((_BYTE *)v199 + 8) = v197;
          v308[0] = v199;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v134 + 2, (WTF::AtomStringImpl *)&v305, (const WTF::StringImpl *)v308, v200, v201, v202, v203, v204, (uint64_t)v306);
          if (v307)
          {
            v205 = (uint64_t *)((char *)v134 + 24);
            v206 = *((unsigned int *)v134 + 9);
            if ((_DWORD)v206 == *((_DWORD *)v134 + 8))
            {
              v279 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v205, v206 + 1, (unint64_t)&v305);
              v206 = *((unsigned int *)v134 + 9);
              v280 = *((_QWORD *)v134 + 3);
              v281 = *v279;
              if (*v279)
                *v281 += 2;
              *(_QWORD *)(v280 + 8 * v206) = v281;
            }
            else
            {
              v207 = *v205;
              v208 = v305;
              if (v305)
                *(_DWORD *)v305 += 2;
              *(_QWORD *)(v207 + 8 * v206) = v208;
            }
            *((_DWORD *)v134 + 9) = v206 + 1;
          }
          v209 = v308[0];
          v308[0] = 0;
          if (v209)
          {
            if (*(_DWORD *)v209 == 1)
              WTF::JSONImpl::Value::operator delete(v209, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
            else
              --*(_DWORD *)v209;
          }
          v210 = v305;
          v305 = 0;
          if (v210)
          {
            if (*(_DWORD *)v210 == 2)
            {
              WTF::StringImpl::~StringImpl(v210, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
              WTF::fastFree(v262, v263, v264, v265, v266, v267, v268, v269);
            }
            else
            {
              *(_DWORD *)v210 -= 2;
            }
          }
        }
      }
      else
      {
        v211 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v211 = 0x500000001;
        *((_QWORD *)v211 + 3) = 0;
        *((_QWORD *)v211 + 4) = 0;
        *((_QWORD *)v211 + 2) = 0;
        v306[0] = v211;
        Inspector::Protocol::Runtime::TypeDescription::Builder<0>::setIsValid((uint64_t *)v306, 0);
        v129 = 0;
        v134 = v306[0];
      }
      v212 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v212 == *(_DWORD *)(v6 + 24))
      {
        v213 = v26;
        v214 = v5;
        v215 = a2;
        v216 = v212 + (v212 >> 2);
        if (v216 >= 0x10)
          v217 = v216 + 1;
        else
          v217 = 16;
        if (v217 <= v212 + 1)
          v218 = v212 + 1;
        else
          v218 = v217;
        if (v218 >> 29)
          goto LABEL_230;
        v219 = *v301;
        v220 = (void *)WTF::fastMalloc((WTF *)(8 * v218));
        *(_DWORD *)(v6 + 24) = v218;
        *(_QWORD *)(v6 + 16) = v220;
        memcpy(v220, v219, 8 * v212);
        a2 = v215;
        v5 = v214;
        v26 = v213;
        if (v219)
        {
          if (*v301 == v219)
          {
            *(_QWORD *)(v6 + 16) = 0;
            *(_DWORD *)(v6 + 24) = 0;
          }
          WTF::fastFree((unint64_t)v219, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
        }
        v212 = *(unsigned int *)(v6 + 28);
        v221 = (WTF::StringImpl **)(*(_QWORD *)(v6 + 16) + 8 * v212);
      }
      else
      {
        v221 = (WTF::StringImpl **)((char *)*v301 + 8 * v212);
      }
      *v221 = v134;
      *(_DWORD *)(v6 + 28) = v212 + 1;
      if (v129)
        WTF::ThreadSafeRefCounted<JSC::TypeSet,(WTF::DestructionThread)0>::deref((WTF *)v129, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
      if (v304)
      {
        if (*(_DWORD *)v304 == 2)
        {
          WTF::StringImpl::~StringImpl(v304, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
          WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
        }
        else
        {
          *(_DWORD *)v304 -= 2;
        }
      }
      if (*(_DWORD *)v302 == 1)
        WTF::JSONImpl::Value::operator delete(v302, v16, (uint64_t)v17, v18, v19, v20, v21, v22);
      else
        --*(_DWORD *)v302;
      ++v25;
      v24 = *a2;
      if (v25 >= *(unsigned int *)(*a2 + 28))
        goto LABEL_219;
    }
    v65 = 0;
    v66 = 0;
LABEL_75:
    v67 = 0;
    v68 = 0;
    v69 = 0;
    if (!v65 || !v66)
      goto LABEL_110;
    v112 = 0;
    while (1)
    {
      v113 = *(unsigned __int8 *)(v65 + v112);
      if (v113 - 9 >= 5 && v113 != 32)
        break;
      if (v66 == ++v112)
        goto LABEL_109;
    }
    if (v113 == 43)
    {
      if (v66 - 1 == v112)
        goto LABEL_109;
      v114 = ~v112 + v66;
      v115 = v65 + v112;
      v117 = *(unsigned __int8 *)(v115 + 1);
      v116 = v115 + 1;
      v113 = v117;
    }
    else
    {
      v116 = v65 + v112;
      v114 = v66 - v112;
    }
    if (v113 - 48 > 9)
      goto LABEL_109;
    v100 = 0;
    v101 = 0;
    while (1)
    {
      v118 = v113 - 48;
      v119 = (v100 * (unsigned __int128)0xAuLL) >> 64;
      if (is_mul_ok(v100, 0xAuLL))
        v100 *= 10;
      v120 = __CFADD__(v100, v118);
      v121 = v100 + v118;
      v122 = v120;
      if (!v120)
        v100 = v121;
      if (v119)
        v123 = 1;
      else
        v123 = v122;
      if (v123)
        v101 = 1;
      if (!--v114)
        goto LABEL_205;
      v124 = *(unsigned __int8 *)++v116;
      v113 = v124;
      v125 = v124 - 48;
      if (v124 - 48 > 9 || v125 >= 0xA)
      {
        if (!v101)
        {
          v126 = 0;
          while (1)
          {
            v127 = *(unsigned __int8 *)(v116 + v126);
            if ((v127 - 9) >= 5 && v127 != 32)
              break;
            if (v114 == ++v126)
              goto LABEL_206;
          }
        }
        goto LABEL_109;
      }
    }
  }
LABEL_219:
  mach_absolute_time();
  v282 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v282 != -1)
  {
    v306[0] = (WTF::StringImpl *)&v305;
    v308[0] = (WTF *)v306;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, v308, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  *(_QWORD *)v300 = v6;
  *(_DWORD *)(v300 + 8) = 0;
}

uint64_t *Inspector::Protocol::Runtime::TypeDescription::Builder<0>::setIsValid(uint64_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD **v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  _BYTE v39[24];

  v4 = *a1;
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x700000002;
  *(_QWORD *)(v5 + 8) = "isValid";
  *(_DWORD *)(v5 + 16) = 4;
  v37 = (WTF::StringImpl *)v5;
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = 0x100000001;
  *((_BYTE *)v6 + 8) = a2;
  v38 = v6;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), (WTF::AtomStringImpl *)&v37, (const WTF::StringImpl *)&v38, v7, v8, v9, v10, v11, (uint64_t)v39);
  if (v39[16])
  {
    v19 = (uint64_t *)(v4 + 24);
    v20 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v20 == *(_DWORD *)(v4 + 32))
    {
      v34 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, v20 + 1, (unint64_t)&v37);
      v20 = *(unsigned int *)(v4 + 36);
      v35 = *(_QWORD *)(v4 + 24);
      v36 = *v34;
      if (*v34)
        *v36 += 2;
      *(_QWORD *)(v35 + 8 * v20) = v36;
    }
    else
    {
      v21 = *v19;
      v22 = v37;
      if (v37)
        *(_DWORD *)v37 += 2;
      *(_QWORD *)(v21 + 8 * v20) = v22;
    }
    *(_DWORD *)(v4 + 36) = v20 + 1;
  }
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::JSONImpl::Value::operator delete(v23, v12, v13, v14, v15, v16, v17, v18);
    else
      --*(_DWORD *)v23;
  }
  v24 = v37;
  v37 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return a1;
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::getRuntimeTypesForVariablesAtOffsets(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  Inspector::InspectorRuntimeAgent::getRuntimeTypesForVariablesAtOffsets(a1 - 16, a2, a3);
}

void Inspector::InspectorRuntimeAgent::willDestroyFrontendAndBackend(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  char v31;
  uint64_t v32;

  if (a2 && *(_BYTE *)(a1 + 49))
  {
    *(_BYTE *)(a1 + 49) = 0;
    v3 = *(_QWORD *)(a1 + 40);
    v4 = WTF::fastMalloc((WTF *)0x18);
    v12 = v4;
    *(_QWORD *)v4 = off_1E3595358;
    *(_QWORD *)(v4 + 8) = v3;
    *(_BYTE *)(v4 + 16) = 0;
    v32 = v4;
    if (*(_QWORD *)(v3 + 90568))
    {
      v29 = *(unsigned int *)(v3 + 93476);
      if ((_DWORD)v29 != *(_DWORD *)(v3 + 93472))
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 93464) + 8 * v29) = v4;
        *(_DWORD *)(v3 + 93476) = v29 + 1;
        *(_BYTE *)(v3 + 56) |= 0x20u;
        goto LABEL_6;
      }
      WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v3 + 93464, (unint64_t)&v32);
      v12 = v32;
      *(_BYTE *)(v3 + 56) |= 0x20u;
      v32 = 0;
      if (!v12)
        goto LABEL_6;
    }
    else
    {
      WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::setTypeProfilerEnabledState(BOOL)::$_0,void>::call(v4, v5, v6, v7, v8, v9, v10, v11);
      v32 = 0;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
LABEL_6:
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(&v30, a1);
  if (v31)
  {
    v20 = v30;
    v30 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
  }
}

uint64_t Inspector::InspectorRuntimeAgent::setTypeProfilerEnabledState(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned __int8 *)(this + 49) != a2)
  {
    v2 = a2;
    *(_BYTE *)(this + 49) = a2;
    v3 = *(_QWORD *)(this + 40);
    this = WTF::fastMalloc((WTF *)0x18);
    v11 = this;
    *(_QWORD *)this = off_1E3595358;
    *(_QWORD *)(this + 8) = v3;
    *(_BYTE *)(this + 16) = v2;
    v13 = this;
    if (!*(_QWORD *)(v3 + 90568))
    {
      WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::setTypeProfilerEnabledState(BOOL)::$_0,void>::call(this, v4, v5, v6, v7, v8, v9, v10);
      v13 = 0;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    v12 = *(unsigned int *)(v3 + 93476);
    if ((_DWORD)v12 != *(_DWORD *)(v3 + 93472))
    {
      *(_QWORD *)(*(_QWORD *)(v3 + 93464) + 8 * v12) = this;
      *(_DWORD *)(v3 + 93476) = v12 + 1;
      *(_BYTE *)(v3 + 56) |= 0x20u;
      return this;
    }
    this = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v3 + 93464, (unint64_t)&v13);
    v11 = v13;
    *(_BYTE *)(v3 + 56) |= 0x20u;
    v13 = 0;
    if (v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return this;
}

uint64_t Inspector::InspectorRuntimeAgent::enableTypeProfiler@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_BYTE *)(this + 49))
  {
    *(_BYTE *)(this + 49) = 1;
    v3 = *(_QWORD *)(this + 40);
    this = WTF::fastMalloc((WTF *)0x18);
    v11 = this;
    *(_QWORD *)this = off_1E3595358;
    *(_QWORD *)(this + 8) = v3;
    *(_BYTE *)(this + 16) = 1;
    v13 = this;
    if (*(_QWORD *)(v3 + 90568))
    {
      v12 = *(unsigned int *)(v3 + 93476);
      if ((_DWORD)v12 != *(_DWORD *)(v3 + 93472))
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 93464) + 8 * v12) = this;
        *(_DWORD *)(v3 + 93476) = v12 + 1;
        *(_BYTE *)(v3 + 56) |= 0x20u;
        goto LABEL_5;
      }
      this = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v3 + 93464, (unint64_t)&v13);
      v11 = v13;
      *(_BYTE *)(v3 + 56) |= 0x20u;
      v13 = 0;
      if (!v11)
        goto LABEL_5;
    }
    else
    {
      WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::setTypeProfilerEnabledState(BOOL)::$_0,void>::call(this, v4, v5, v6, v7, v8, v9, v10);
      v13 = 0;
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
LABEL_5:
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'Inspector::InspectorRuntimeAgent::enableTypeProfiler@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_BYTE *)(this + 33))
  {
    *(_BYTE *)(this + 33) = 1;
    v3 = *(_QWORD *)(this + 24);
    this = WTF::fastMalloc((WTF *)0x18);
    v11 = this;
    *(_QWORD *)this = off_1E3595358;
    *(_QWORD *)(this + 8) = v3;
    *(_BYTE *)(this + 16) = 1;
    v13 = this;
    if (*(_QWORD *)(v3 + 90568))
    {
      v12 = *(unsigned int *)(v3 + 93476);
      if ((_DWORD)v12 != *(_DWORD *)(v3 + 93472))
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 93464) + 8 * v12) = this;
        *(_DWORD *)(v3 + 93476) = v12 + 1;
        *(_BYTE *)(v3 + 56) |= 0x20u;
        goto LABEL_5;
      }
      this = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v3 + 93464, (unint64_t)&v13);
      v11 = v13;
      *(_BYTE *)(v3 + 56) |= 0x20u;
      v13 = 0;
      if (!v11)
        goto LABEL_5;
    }
    else
    {
      WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::setTypeProfilerEnabledState(BOOL)::$_0,void>::call(this, v4, v5, v6, v7, v8, v9, v10);
      v13 = 0;
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
LABEL_5:
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t Inspector::InspectorRuntimeAgent::disableTypeProfiler@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(this + 49))
  {
    *(_BYTE *)(this + 49) = 0;
    v3 = *(_QWORD *)(this + 40);
    this = WTF::fastMalloc((WTF *)0x18);
    v11 = this;
    *(_QWORD *)this = off_1E3595358;
    *(_QWORD *)(this + 8) = v3;
    *(_BYTE *)(this + 16) = 0;
    v13 = this;
    if (*(_QWORD *)(v3 + 90568))
    {
      v12 = *(unsigned int *)(v3 + 93476);
      if ((_DWORD)v12 != *(_DWORD *)(v3 + 93472))
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 93464) + 8 * v12) = this;
        *(_DWORD *)(v3 + 93476) = v12 + 1;
        *(_BYTE *)(v3 + 56) |= 0x20u;
        goto LABEL_5;
      }
      this = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v3 + 93464, (unint64_t)&v13);
      v11 = v13;
      *(_BYTE *)(v3 + 56) |= 0x20u;
      v13 = 0;
      if (!v11)
        goto LABEL_5;
    }
    else
    {
      WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::setTypeProfilerEnabledState(BOOL)::$_0,void>::call(this, v4, v5, v6, v7, v8, v9, v10);
      v13 = 0;
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
LABEL_5:
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'Inspector::InspectorRuntimeAgent::disableTypeProfiler@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(this + 33))
  {
    *(_BYTE *)(this + 33) = 0;
    v3 = *(_QWORD *)(this + 24);
    this = WTF::fastMalloc((WTF *)0x18);
    v11 = this;
    *(_QWORD *)this = off_1E3595358;
    *(_QWORD *)(this + 8) = v3;
    *(_BYTE *)(this + 16) = 0;
    v13 = this;
    if (*(_QWORD *)(v3 + 90568))
    {
      v12 = *(unsigned int *)(v3 + 93476);
      if ((_DWORD)v12 != *(_DWORD *)(v3 + 93472))
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 93464) + 8 * v12) = this;
        *(_DWORD *)(v3 + 93476) = v12 + 1;
        *(_BYTE *)(v3 + 56) |= 0x20u;
        goto LABEL_5;
      }
      this = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v3 + 93464, (unint64_t)&v13);
      v11 = v13;
      *(_BYTE *)(v3 + 56) |= 0x20u;
      v13 = 0;
      if (!v11)
        goto LABEL_5;
    }
    else
    {
      WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::setTypeProfilerEnabledState(BOOL)::$_0,void>::call(this, v4, v5, v6, v7, v8, v9, v10);
      v13 = 0;
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
LABEL_5:
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t Inspector::InspectorRuntimeAgent::enableControlFlowProfiler@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_BYTE *)(this + 50))
  {
    *(_BYTE *)(this + 50) = 1;
    v3 = *(_QWORD *)(this + 40);
    this = WTF::fastMalloc((WTF *)0x18);
    v11 = this;
    *(_QWORD *)this = off_1E3595380;
    *(_QWORD *)(this + 8) = v3;
    *(_BYTE *)(this + 16) = 1;
    v13 = this;
    if (*(_QWORD *)(v3 + 90568))
    {
      v12 = *(unsigned int *)(v3 + 93476);
      if ((_DWORD)v12 != *(_DWORD *)(v3 + 93472))
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 93464) + 8 * v12) = this;
        *(_DWORD *)(v3 + 93476) = v12 + 1;
        *(_BYTE *)(v3 + 56) |= 0x20u;
        goto LABEL_5;
      }
      this = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v3 + 93464, (unint64_t)&v13);
      v11 = v13;
      *(_BYTE *)(v3 + 56) |= 0x20u;
      v13 = 0;
      if (!v11)
        goto LABEL_5;
    }
    else
    {
      WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::setControlFlowProfilerEnabledState(BOOL)::$_0,void>::call(this, v4, v5, v6, v7, v8, v9, v10);
      v13 = 0;
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
LABEL_5:
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t Inspector::InspectorRuntimeAgent::setControlFlowProfilerEnabledState(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(unsigned __int8 *)(this + 50) != a2)
  {
    v2 = a2;
    *(_BYTE *)(this + 50) = a2;
    v3 = *(_QWORD *)(this + 40);
    this = WTF::fastMalloc((WTF *)0x18);
    v11 = this;
    *(_QWORD *)this = off_1E3595380;
    *(_QWORD *)(this + 8) = v3;
    *(_BYTE *)(this + 16) = v2;
    v13 = this;
    if (!*(_QWORD *)(v3 + 90568))
    {
      WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::setControlFlowProfilerEnabledState(BOOL)::$_0,void>::call(this, v4, v5, v6, v7, v8, v9, v10);
      v13 = 0;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    v12 = *(unsigned int *)(v3 + 93476);
    if ((_DWORD)v12 != *(_DWORD *)(v3 + 93472))
    {
      *(_QWORD *)(*(_QWORD *)(v3 + 93464) + 8 * v12) = this;
      *(_DWORD *)(v3 + 93476) = v12 + 1;
      *(_BYTE *)(v3 + 56) |= 0x20u;
      return this;
    }
    this = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v3 + 93464, (unint64_t)&v13);
    v11 = v13;
    *(_BYTE *)(v3 + 56) |= 0x20u;
    v13 = 0;
    if (v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return this;
}

uint64_t `non-virtual thunk to'Inspector::InspectorRuntimeAgent::enableControlFlowProfiler@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_BYTE *)(this + 34))
  {
    *(_BYTE *)(this + 34) = 1;
    v3 = *(_QWORD *)(this + 24);
    this = WTF::fastMalloc((WTF *)0x18);
    v11 = this;
    *(_QWORD *)this = off_1E3595380;
    *(_QWORD *)(this + 8) = v3;
    *(_BYTE *)(this + 16) = 1;
    v13 = this;
    if (*(_QWORD *)(v3 + 90568))
    {
      v12 = *(unsigned int *)(v3 + 93476);
      if ((_DWORD)v12 != *(_DWORD *)(v3 + 93472))
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 93464) + 8 * v12) = this;
        *(_DWORD *)(v3 + 93476) = v12 + 1;
        *(_BYTE *)(v3 + 56) |= 0x20u;
        goto LABEL_5;
      }
      this = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v3 + 93464, (unint64_t)&v13);
      v11 = v13;
      *(_BYTE *)(v3 + 56) |= 0x20u;
      v13 = 0;
      if (!v11)
        goto LABEL_5;
    }
    else
    {
      WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::setControlFlowProfilerEnabledState(BOOL)::$_0,void>::call(this, v4, v5, v6, v7, v8, v9, v10);
      v13 = 0;
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
LABEL_5:
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t Inspector::InspectorRuntimeAgent::disableControlFlowProfiler@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(this + 50))
  {
    *(_BYTE *)(this + 50) = 0;
    v3 = *(_QWORD *)(this + 40);
    this = WTF::fastMalloc((WTF *)0x18);
    v11 = this;
    *(_QWORD *)this = off_1E3595380;
    *(_QWORD *)(this + 8) = v3;
    *(_BYTE *)(this + 16) = 0;
    v13 = this;
    if (*(_QWORD *)(v3 + 90568))
    {
      v12 = *(unsigned int *)(v3 + 93476);
      if ((_DWORD)v12 != *(_DWORD *)(v3 + 93472))
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 93464) + 8 * v12) = this;
        *(_DWORD *)(v3 + 93476) = v12 + 1;
        *(_BYTE *)(v3 + 56) |= 0x20u;
        goto LABEL_5;
      }
      this = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v3 + 93464, (unint64_t)&v13);
      v11 = v13;
      *(_BYTE *)(v3 + 56) |= 0x20u;
      v13 = 0;
      if (!v11)
        goto LABEL_5;
    }
    else
    {
      WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::setControlFlowProfilerEnabledState(BOOL)::$_0,void>::call(this, v4, v5, v6, v7, v8, v9, v10);
      v13 = 0;
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
LABEL_5:
  *a2 = 0;
  a2[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'Inspector::InspectorRuntimeAgent::disableControlFlowProfiler@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(this + 34))
  {
    *(_BYTE *)(this + 34) = 0;
    v3 = *(_QWORD *)(this + 24);
    this = WTF::fastMalloc((WTF *)0x18);
    v11 = this;
    *(_QWORD *)this = off_1E3595380;
    *(_QWORD *)(this + 8) = v3;
    *(_BYTE *)(this + 16) = 0;
    v13 = this;
    if (*(_QWORD *)(v3 + 90568))
    {
      v12 = *(unsigned int *)(v3 + 93476);
      if ((_DWORD)v12 != *(_DWORD *)(v3 + 93472))
      {
        *(_QWORD *)(*(_QWORD *)(v3 + 93464) + 8 * v12) = this;
        *(_DWORD *)(v3 + 93476) = v12 + 1;
        *(_BYTE *)(v3 + 56) |= 0x20u;
        goto LABEL_5;
      }
      this = WTF::Vector<WTF::Function<void ()(void)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Function<void ()(void)>>(v3 + 93464, (unint64_t)&v13);
      v11 = v13;
      *(_BYTE *)(v3 + 56) |= 0x20u;
      v13 = 0;
      if (!v11)
        goto LABEL_5;
    }
    else
    {
      WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::setControlFlowProfilerEnabledState(BOOL)::$_0,void>::call(this, v4, v5, v6, v7, v8, v9, v10);
      v13 = 0;
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
LABEL_5:
  *a2 = 0;
  a2[8] = 0;
  return this;
}

void Inspector::InspectorRuntimeAgent::getBasicBlocks(Inspector::InspectorRuntimeAgent *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned __int16 *v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  WTF *v59;
  const char *v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  uint64_t *v64;
  int v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::AtomStringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF *v84;
  WTF::StringImpl *v85;
  int v86;
  uint64_t v87;
  double *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::AtomStringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  WTF *v105;
  WTF::StringImpl *v106;
  char v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  WTF::AtomStringImpl *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  WTF *v126;
  WTF::StringImpl *v127;
  int v128;
  uint64_t v129;
  double *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF *v140;
  WTF::StringImpl *v141;
  unint64_t v142;
  WTF *v143;
  const char *v144;
  const char *v145;
  const char *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  const void *v150;
  void *v151;
  uint64_t *v152;
  unint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _DWORD **v185;
  uint64_t v186;
  _DWORD *v187;
  _DWORD **v188;
  uint64_t v189;
  _DWORD *v190;
  _DWORD **v191;
  uint64_t v192;
  _DWORD *v193;
  _DWORD **v194;
  uint64_t v195;
  _DWORD *v196;
  uint64_t v197;
  const void **v198;
  WTF *v199;
  int v200;
  unsigned int v201;
  WTF::StringImpl *v202;
  WTF *v203;
  _BYTE v204[16];
  char v205;

  if (!*(_QWORD *)(*((_QWORD *)this + 5) + 93280))
  {
    v6 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v6 = 0x2200000002;
    *(_QWORD *)(v6 + 8) = "VM has no control flow information";
    *(_DWORD *)(v6 + 16) = 4;
    v15 = 1;
LABEL_164:
    *(_QWORD *)a3 = v6;
    *(_DWORD *)(a3 + 8) = v15;
    return;
  }
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x600000001;
  *(_QWORD *)(v6 + 16) = 0;
  v198 = (const void **)(v6 + 16);
  *(_QWORD *)(v6 + 24) = 0;
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 4);
    if ((*(_BYTE *)(v7 + 16) & 4) == 0)
    {
      if (v8)
        v10 = (_DWORD)v9 == 0;
      else
        v10 = 1;
      if (v10)
        goto LABEL_9;
      v16 = 0;
      v17 = 2 * v9;
      while (1)
      {
        v18 = *(unsigned __int16 *)(v8 + v16);
        if (v18 - 9 >= 5 && v18 != 32)
          break;
        --v9;
        v16 += 2;
        if (v17 == v16)
          goto LABEL_9;
      }
      if (v18 == 43)
      {
        if (v17 - 2 == v16)
          goto LABEL_9;
        --v9;
        v19 = (unsigned __int16 *)(v8 + v16 + 2);
        v18 = *v19;
      }
      else
      {
        v19 = (unsigned __int16 *)(v8 + v16);
      }
      if (v18 - 48 <= 9)
      {
        v20 = 0;
        v21 = 0;
        v22 = v9 - 1;
        v23 = v19 + 1;
        do
        {
          v24 = v18 - 48;
          v25 = (v20 * (unsigned __int128)0xAuLL) >> 64;
          if (is_mul_ok(v20, 0xAuLL))
            v20 *= 10;
          v26 = __CFADD__(v20, v24);
          v27 = v20 + v24;
          v28 = v26;
          if (!v26)
            v20 = v27;
          if (v25)
            v29 = 1;
          else
            v29 = v28;
          if (v29)
            v21 = 1;
          if (!v22)
            break;
          v30 = *v23++;
          v18 = v30;
          v31 = v30 - 48;
          if (v30 - 48 > 9)
            break;
          --v22;
        }
        while (v31 < 0xA);
        if (!v21)
        {
          v13 = v20 & 0xFFFFFF00;
          v11 = v20;
          v12 = 1;
          goto LABEL_10;
        }
      }
LABEL_9:
      v11 = 0;
      v12 = 0;
      v13 = 0;
LABEL_10:
      v14 = v13 | v11;
      goto LABEL_72;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v32 = 0;
  v12 = 0;
  v33 = 0;
  if (v8 && v9)
  {
    v34 = 0;
    while (1)
    {
      v35 = *(unsigned __int8 *)(v8 + v34);
      if (v35 - 9 >= 5 && v35 != 32)
        break;
      if (v9 == ++v34)
        goto LABEL_70;
    }
    if (v35 == 43)
    {
      if (v9 - 1 == v34)
      {
LABEL_70:
        v32 = 0;
        v12 = 0;
        v33 = 0;
        goto LABEL_71;
      }
      v36 = ~v34 + v9;
      v37 = (unsigned __int8 *)(v8 + v34 + 1);
      v35 = *v37;
    }
    else
    {
      v37 = (unsigned __int8 *)(v8 + v34);
      v36 = v9 - v34;
    }
    if (v35 - 48 <= 9)
    {
      v38 = 0;
      v39 = 0;
      v40 = v36 - 1;
      v41 = v37 + 1;
      do
      {
        v42 = v35 - 48;
        v43 = (v38 * (unsigned __int128)0xAuLL) >> 64;
        if (is_mul_ok(v38, 0xAuLL))
          v38 *= 10;
        v44 = __CFADD__(v38, v42);
        v45 = v38 + v42;
        v46 = v44;
        if (!v44)
          v38 = v45;
        if (v43)
          v47 = 1;
        else
          v47 = v46;
        if (v47)
          v39 = 1;
        if (!v40)
          break;
        v48 = *v41++;
        v35 = v48;
        v49 = v48 - 48;
        if (v48 - 48 > 9)
          break;
        --v40;
      }
      while (v49 < 0xA);
      if (!v39)
      {
        v33 = v38 & 0xFFFFFF00;
        v32 = v38;
        v12 = 1;
        goto LABEL_71;
      }
    }
    goto LABEL_70;
  }
LABEL_71:
  v14 = v33 | v32;
LABEL_72:
  if (v12)
    v50 = v14;
  else
    v50 = 0;
  JSC::ControlFlowProfiler::getBasicBlocksForSourceID(*(JSC::ControlFlowProfiler **)(*((_QWORD *)this + 5) + 93280), *((JSC::VM **)this + 5), v50, (uint64_t)&v199);
  v58 = v199;
  if (!v201)
  {
LABEL_161:
    if (v58)
    {
      v199 = 0;
      v200 = 0;
      WTF::fastFree((unint64_t)v58, v51, v52, v53, v54, v55, v56, v57);
    }
    v15 = 0;
    goto LABEL_164;
  }
  v197 = a3;
  v59 = (WTF *)((char *)v199 + 24 * v201);
  v60 = "startOffset";
  v61 = "endOffset";
  v62 = "hasExecuted";
  while (1)
  {
    v63 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v63 = 0x500000001;
    *(_QWORD *)(v63 + 16) = 0;
    v64 = (uint64_t *)(v63 + 16);
    *(_QWORD *)(v63 + 24) = 0;
    *(_QWORD *)(v63 + 32) = 0;
    v65 = *(_DWORD *)v58;
    v66 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v66 = 0xB00000002;
    *(_QWORD *)(v66 + 8) = v60;
    *(_DWORD *)(v66 + 16) = 4;
    v202 = (WTF::StringImpl *)v66;
    v67 = (double *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v67 = 0x300000001;
    v67[1] = (double)v65;
    v203 = (WTF *)v67;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v63 + 16), (WTF::AtomStringImpl *)&v202, (const WTF::StringImpl *)&v203, v68, v69, v70, v71, v72, (uint64_t)v204);
    if (v205)
    {
      v80 = (uint64_t *)(v63 + 24);
      v81 = *(unsigned int *)(v63 + 36);
      if ((_DWORD)v81 == *(_DWORD *)(v63 + 32))
      {
        v185 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v80, v81 + 1, (unint64_t)&v202);
        v81 = *(unsigned int *)(v63 + 36);
        v186 = *(_QWORD *)(v63 + 24);
        v187 = *v185;
        if (*v185)
          *v187 += 2;
        *(_QWORD *)(v186 + 8 * v81) = v187;
      }
      else
      {
        v82 = *v80;
        v83 = v202;
        if (v202)
          *(_DWORD *)v202 += 2;
        *(_QWORD *)(v82 + 8 * v81) = v83;
      }
      *(_DWORD *)(v63 + 36) = v81 + 1;
    }
    v84 = v203;
    v203 = 0;
    if (v84)
    {
      if (*(_DWORD *)v84 == 1)
        WTF::JSONImpl::Value::operator delete(v84, v73, v74, v75, v76, v77, v78, v79);
      else
        --*(_DWORD *)v84;
    }
    v85 = v202;
    v202 = 0;
    if (v85)
    {
      if (*(_DWORD *)v85 == 2)
      {
        WTF::StringImpl::~StringImpl(v85, v73, v74, v75, v76, v77, v78, v79);
        WTF::fastFree(v153, v154, v155, v156, v157, v158, v159, v160);
      }
      else
      {
        *(_DWORD *)v85 -= 2;
      }
    }
    v86 = *((_DWORD *)v58 + 1);
    v87 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v87 = 0x900000002;
    *(_QWORD *)(v87 + 8) = v61;
    *(_DWORD *)(v87 + 16) = 4;
    v202 = (WTF::StringImpl *)v87;
    v88 = (double *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v88 = 0x300000001;
    v88[1] = (double)v86;
    v203 = (WTF *)v88;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v64, (WTF::AtomStringImpl *)&v202, (const WTF::StringImpl *)&v203, v89, v90, v91, v92, v93, (uint64_t)v204);
    if (v205)
    {
      v101 = (uint64_t *)(v63 + 24);
      v102 = *(unsigned int *)(v63 + 36);
      if ((_DWORD)v102 == *(_DWORD *)(v63 + 32))
      {
        v188 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v101, v102 + 1, (unint64_t)&v202);
        v102 = *(unsigned int *)(v63 + 36);
        v189 = *(_QWORD *)(v63 + 24);
        v190 = *v188;
        if (*v188)
          *v190 += 2;
        *(_QWORD *)(v189 + 8 * v102) = v190;
      }
      else
      {
        v103 = *v101;
        v104 = v202;
        if (v202)
          *(_DWORD *)v202 += 2;
        *(_QWORD *)(v103 + 8 * v102) = v104;
      }
      *(_DWORD *)(v63 + 36) = v102 + 1;
    }
    v105 = v203;
    v203 = 0;
    if (v105)
    {
      if (*(_DWORD *)v105 == 1)
        WTF::JSONImpl::Value::operator delete(v105, v94, v95, v96, v97, v98, v99, v100);
      else
        --*(_DWORD *)v105;
    }
    v106 = v202;
    v202 = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 2)
      {
        WTF::StringImpl::~StringImpl(v106, v94, v95, v96, v97, v98, v99, v100);
        WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
      }
      else
      {
        *(_DWORD *)v106 -= 2;
      }
    }
    v107 = *((_BYTE *)v58 + 8);
    v108 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v108 = 0xB00000002;
    *(_QWORD *)(v108 + 8) = v62;
    *(_DWORD *)(v108 + 16) = 4;
    v202 = (WTF::StringImpl *)v108;
    v109 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v109 = 0x100000001;
    *((_BYTE *)v109 + 8) = v107;
    v203 = v109;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v64, (WTF::AtomStringImpl *)&v202, (const WTF::StringImpl *)&v203, v110, v111, v112, v113, v114, (uint64_t)v204);
    if (v205)
    {
      v122 = (uint64_t *)(v63 + 24);
      v123 = *(unsigned int *)(v63 + 36);
      if ((_DWORD)v123 == *(_DWORD *)(v63 + 32))
      {
        v191 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v122, v123 + 1, (unint64_t)&v202);
        v123 = *(unsigned int *)(v63 + 36);
        v192 = *(_QWORD *)(v63 + 24);
        v193 = *v191;
        if (*v191)
          *v193 += 2;
        *(_QWORD *)(v192 + 8 * v123) = v193;
      }
      else
      {
        v124 = *v122;
        v125 = v202;
        if (v202)
          *(_DWORD *)v202 += 2;
        *(_QWORD *)(v124 + 8 * v123) = v125;
      }
      *(_DWORD *)(v63 + 36) = v123 + 1;
    }
    v126 = v203;
    v203 = 0;
    if (v126)
    {
      if (*(_DWORD *)v126 == 1)
        WTF::JSONImpl::Value::operator delete(v126, v115, v116, v117, v118, v119, v120, v121);
      else
        --*(_DWORD *)v126;
    }
    v127 = v202;
    v202 = 0;
    if (v127)
    {
      if (*(_DWORD *)v127 == 2)
      {
        WTF::StringImpl::~StringImpl(v127, v115, v116, v117, v118, v119, v120, v121);
        WTF::fastFree(v169, v170, v171, v172, v173, v174, v175, v176);
      }
      else
      {
        *(_DWORD *)v127 -= 2;
      }
    }
    v128 = *((_DWORD *)v58 + 4);
    v129 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v129 = 0xE00000002;
    *(_QWORD *)(v129 + 8) = "executionCount";
    *(_DWORD *)(v129 + 16) = 4;
    v202 = (WTF::StringImpl *)v129;
    v130 = (double *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v130 = 0x300000001;
    v130[1] = (double)v128;
    v203 = (WTF *)v130;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v64, (WTF::AtomStringImpl *)&v202, (const WTF::StringImpl *)&v203, v131, v132, v133, v134, v135, (uint64_t)v204);
    if (v205)
    {
      v136 = (uint64_t *)(v63 + 24);
      v137 = *(unsigned int *)(v63 + 36);
      if ((_DWORD)v137 == *(_DWORD *)(v63 + 32))
      {
        v194 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v137 + 1, (unint64_t)&v202);
        v137 = *(unsigned int *)(v63 + 36);
        v195 = *(_QWORD *)(v63 + 24);
        v196 = *v194;
        if (*v194)
          *v196 += 2;
        *(_QWORD *)(v195 + 8 * v137) = v196;
      }
      else
      {
        v138 = *v136;
        v139 = v202;
        if (v202)
          *(_DWORD *)v202 += 2;
        *(_QWORD *)(v138 + 8 * v137) = v139;
      }
      *(_DWORD *)(v63 + 36) = v137 + 1;
    }
    v140 = v203;
    v203 = 0;
    if (v140)
    {
      if (*(_DWORD *)v140 == 1)
        WTF::JSONImpl::Value::operator delete(v140, (WTF::AtomStringImpl *)v51, v52, v53, v54, v55, v56, v57);
      else
        --*(_DWORD *)v140;
    }
    v141 = v202;
    v202 = 0;
    if (v141)
    {
      if (*(_DWORD *)v141 == 2)
      {
        WTF::StringImpl::~StringImpl(v141, (WTF::AtomStringImpl *)v51, v52, v53, v54, v55, v56, v57);
        WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
      }
      else
      {
        *(_DWORD *)v141 -= 2;
      }
    }
    v142 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v142 == *(_DWORD *)(v6 + 24))
      break;
    v152 = (uint64_t *)((char *)*v198 + 8 * v142);
LABEL_139:
    *v152 = v63;
    *(_DWORD *)(v6 + 28) = v142 + 1;
    v58 = (WTF *)((char *)v58 + 24);
    if (v58 == v59)
    {
      v58 = v199;
      a3 = v197;
      goto LABEL_161;
    }
  }
  v143 = v59;
  v144 = v62;
  v145 = v61;
  v146 = v60;
  v147 = v142 + (v142 >> 2);
  if (v147 >= 0x10)
    v148 = v147 + 1;
  else
    v148 = 16;
  if (v148 <= v142 + 1)
    v149 = v142 + 1;
  else
    v149 = v148;
  if (!(v149 >> 29))
  {
    v150 = *v198;
    v151 = (void *)WTF::fastMalloc((WTF *)(8 * v149));
    *(_DWORD *)(v6 + 24) = v149;
    *(_QWORD *)(v6 + 16) = v151;
    memcpy(v151, v150, 8 * v142);
    v60 = v146;
    v61 = v145;
    v62 = v144;
    v59 = v143;
    if (v150)
    {
      if (*v198 == v150)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
      }
      WTF::fastFree((unint64_t)v150, v51, v52, v53, v54, v55, v56, v57);
    }
    v142 = *(unsigned int *)(v6 + 28);
    v152 = (uint64_t *)(*(_QWORD *)(v6 + 16) + 8 * v142);
    goto LABEL_139;
  }
  __break(0xC471u);
}

void `non-virtual thunk to'Inspector::InspectorRuntimeAgent::getBasicBlocks(Inspector::InspectorRuntimeAgent *this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  Inspector::InspectorRuntimeAgent::getBasicBlocks((Inspector::InspectorRuntimeAgent *)((char *)this - 16), a2, a3);
}

uint64_t Inspector::InspectorScriptProfilerAgent::InspectorScriptProfilerAgent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 8) = "ScriptProfiler";
  *(_DWORD *)(v4 + 16) = 4;
  *(_QWORD *)v4 = 0xE00000002;
  *(_QWORD *)a1 = off_1E3594BD8;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = &unk_1E3594C40;
  *(_QWORD *)(a1 + 24) = &unk_1E3594C70;
  v5 = a2[2];
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v6 = v5;
  *(_QWORD *)(a1 + 32) = v6;
  Inspector::ScriptProfilerBackendDispatcher::create((Inspector::ScriptProfilerBackendDispatcher *)a2[3], (Inspector::BackendDispatcher *)(a1 + 16), &v9);
  v7 = *a2;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 58) = 0;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v4 + 8) = "ScriptProfiler";
  *(_DWORD *)(v4 + 16) = 4;
  *(_QWORD *)v4 = 0xE00000002;
  *(_QWORD *)a1 = off_1E3594BD8;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = &unk_1E3594C40;
  *(_QWORD *)(a1 + 24) = &unk_1E3594C70;
  v5 = a2[2];
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v6 = v5;
  *(_QWORD *)(a1 + 32) = v6;
  Inspector::ScriptProfilerBackendDispatcher::create((Inspector::ScriptProfilerBackendDispatcher *)a2[3], (Inspector::BackendDispatcher *)(a1 + 16), &v9);
  v7 = *a2;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v7;
  *(_WORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 58) = 0;
  return a1;
}

void Inspector::InspectorScriptProfilerAgent::~InspectorScriptProfilerAgent(Inspector::InspectorScriptProfilerAgent *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unint64_t v10;

  v9 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(this, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  _DWORD *v9;
  unint64_t v10;

  v9 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(this, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(this, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
}

void `non-virtual thunk to'Inspector::InspectorScriptProfilerAgent::~InspectorScriptProfilerAgent(Inspector::InspectorScriptProfilerAgent *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unint64_t v10;

  v9 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase((Inspector::InspectorScriptProfilerAgent *)((char *)this - 16), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  _DWORD *v9;
  unint64_t v10;

  v9 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase((Inspector::InspectorScriptProfilerAgent *)((char *)this - 24), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase((Inspector::InspectorScriptProfilerAgent *)((char *)this - 16), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
}

{
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase((Inspector::InspectorScriptProfilerAgent *)((char *)this - 24), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
}

void Inspector::InspectorScriptProfilerAgent::willDestroyFrontendAndBackend(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 58) = 0;
    *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48)) + 208) = 0;
    Inspector::InspectorScriptProfilerAgent::stopSamplingWhenDisconnecting((Inspector::InspectorScriptProfilerAgent *)a1);
  }
}

void Inspector::InspectorScriptProfilerAgent::stopSamplingWhenDisconnecting(Inspector::InspectorScriptProfilerAgent *this)
{
  JSC::VM *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int *v32;

  if (*((_BYTE *)this + 57))
  {
    v2 = *(JSC::VM **)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 64))(*((_QWORD *)this + 6)) + 16);
    JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v32, v2, v3, v4, v5, v6, v7, v8, v9);
    v16 = *((_QWORD *)v2 + 11671);
    if (!v16)
    {
      __break(0xC471u);
      return;
    }
    v17 = (unsigned __int8 *)(v16 + 4);
    if (__ldaxr((unsigned __int8 *)(v16 + 4)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
      goto LABEL_7;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v16 + 4);
LABEL_7:
    *(_BYTE *)(v16 + 5) = 1;
    WTF::Vector<JSC::SamplingProfiler::StackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v16 + 48, 0, v10, v11, v12, v13, v14, v15);
    v26 = *(_QWORD *)(v16 + 104);
    if (v26)
    {
      *(_QWORD *)(v16 + 104) = 0;
      WTF::fastFree(v26 - 16, v19, v20, v21, v22, v23, v24, v25);
    }
    if (*(_DWORD *)(v16 + 72))
    {
      v27 = *(unsigned int *)(v16 + 76);
      if ((_DWORD)v27)
      {
        v28 = v27 << 6;
        v29 = *(_QWORD *)(v16 + 64) + 48;
        do
        {
          v29 = WTF::Vector<JSC::SamplingProfiler::UnprocessedStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v19, v20, v21, v22, v23, v24, v25)+ 64;
          v28 -= 64;
        }
        while (v28);
        *(_DWORD *)(v16 + 76) = 0;
      }
      v30 = *(_QWORD *)(v16 + 64);
      if (v30)
      {
        *(_QWORD *)(v16 + 64) = 0;
        *(_DWORD *)(v16 + 72) = 0;
        WTF::fastFree(v30, v19, v20, v21, v22, v23, v24, v25);
      }
    }
    *((_BYTE *)this + 57) = 0;
    v31 = __ldxr(v17);
    if (v31 == 1)
    {
      if (!__stlxr(0, v17))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v16 + 4), 0, v20, v21, v22, v23, v24, v25);
LABEL_21:
    JSC::JSLockHolder::~JSLockHolder(&v32, v19, v20, v21, v22, v23, v24, v25);
  }
}

void Inspector::InspectorScriptProfilerAgent::startTracking(uint64_t a1@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int **v17;
  unsigned int *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  Inspector::ScriptProfilerFrontendDispatcher *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t *v55;
  char *v56;

  if (*(_BYTE *)(a1 + 56))
    goto LABEL_33;
  *(_BYTE *)(a1 + 56) = 1;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 56))(*(_QWORD *)(a1 + 48));
  if (a2[1])
    v7 = *a2 == 0;
  else
    v7 = 1;
  if (v7)
    goto LABEL_30;
  v15 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48)) + 16);
  v16 = (*(_DWORD *)v6)++;
  v56 = (char *)v6;
  v17 = (unsigned int **)(v15 + 93368);
  v18 = *(unsigned int **)(v15 + 93368);
  if (v18)
  {
    v19 = v6;
    if (v16)
    {
LABEL_8:
      *(_DWORD *)v19 = v16;
      goto LABEL_9;
    }
    goto LABEL_17;
  }
  v22 = WTF::fastMalloc((WTF *)0x80);
  JSC::SamplingProfiler::SamplingProfiler(v22, v15, (uint64_t *)&v56, v23, v24, v25, v26, v27);
  v28 = *v17;
  *v17 = (unsigned int *)v22;
  if (v28)
  {
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      atomic_store(1u, v28);
      JSC::SamplingProfiler::~SamplingProfiler((JSC::SamplingProfiler *)v28, v8, v9, v10, v11, v12, v13, v14);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
  }
  *(_BYTE *)(v15 + 56) |= 1u;
  v18 = *v17;
  v19 = (unint64_t)v56;
  if (v56)
  {
    v16 = *(_DWORD *)v56 - 1;
    if (*(_DWORD *)v56 != 1)
      goto LABEL_8;
LABEL_17:
    v31 = *(_QWORD *)(v19 + 24);
    if (v31)
    {
      *(_QWORD *)(v19 + 24) = 0;
      *(_DWORD *)(v19 + 32) = 0;
      WTF::fastFree(v31, v8, v9, v10, v11, v12, v13, v14);
    }
    WTF::fastFree(v19, v8, v9, v10, v11, v12, v13, v14);
  }
LABEL_9:
  v20 = (unsigned __int8 *)(v18 + 1);
  if (__ldaxr((unsigned __int8 *)v18 + 4))
  {
    __clrex();
LABEL_21:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v18 + 1));
    goto LABEL_22;
  }
  if (__stxr(1u, v20))
    goto LABEL_21;
LABEL_22:
  ++*(_DWORD *)v6;
  v32 = *((_QWORD *)v18 + 5);
  *((_QWORD *)v18 + 5) = v6;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      v44 = *(_QWORD *)(v32 + 24);
      if (v44)
      {
        *(_QWORD *)(v32 + 24) = 0;
        *(_DWORD *)(v32 + 32) = 0;
        v53 = v32;
        WTF::fastFree(v44, v8, v9, v10, v11, v12, v13, v14);
        v32 = v53;
      }
      WTF::fastFree(v32, v8, v9, v10, v11, v12, v13, v14);
    }
    else
    {
      --*(_DWORD *)v32;
    }
  }
  JSC::SamplingProfiler::noticeCurrentThreadAsJSCExecutionThreadWithLock((JSC::SamplingProfiler *)v18, v8, v9, v10, v11, v12, v13, v14);
  *((_BYTE *)v18 + 5) = 0;
  JSC::SamplingProfiler::createThreadIfNecessary((JSC::SamplingProfiler *)v18);
  *(_BYTE *)(a1 + 57) = 1;
  v39 = __ldxr(v20);
  if (v39 == 1)
  {
    if (!__stlxr(0, v20))
      goto LABEL_30;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v18 + 4, 0, v33, v34, v35, v36, v37, v38);
LABEL_30:
  *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48)) + 208) = a1 + 24;
  v40 = *(Inspector::ScriptProfilerFrontendDispatcher **)(a1 + 32);
  v41 = mach_absolute_time();
  v43 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v43 != -1)
  {
    v56 = &v54;
    v55 = (uint64_t *)&v56;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v55, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v42) = dword_1ECF4400C;
  Inspector::ScriptProfilerFrontendDispatcher::trackingStart(v40, *(double *)(v6 + 8)+ (double)(v41 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v42 * 1000000000.0)- *(double *)(v6 + 16));
LABEL_33:
  *a3 = 0;
  a3[8] = 0;
}

void `non-virtual thunk to'Inspector::InspectorScriptProfilerAgent::startTracking(uint64_t a1@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X8>)
{
  Inspector::InspectorScriptProfilerAgent::startTracking(a1 - 16, a2, a3);
}

void Inspector::InspectorScriptProfilerAgent::stopTracking(Inspector::InspectorScriptProfilerAgent *this@<X0>, _BYTE *a2@<X8>)
{
  if (*((_BYTE *)this + 56))
  {
    *((_BYTE *)this + 56) = 0;
    *((_BYTE *)this + 58) = 0;
    *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 64))(*((_QWORD *)this + 6)) + 208) = 0;
    Inspector::InspectorScriptProfilerAgent::trackingComplete(this);
  }
  *a2 = 0;
  a2[8] = 0;
}

void Inspector::InspectorScriptProfilerAgent::trackingComplete(Inspector::InspectorScriptProfilerAgent *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const void **v43;
  WTF *v44;
  WTF *v45;
  unint64_t *v46;
  WTF *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  int *v56;
  _BYTE *v57;
  uint64_t v58;
  WTF *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int8x16_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  WTF *v76;
  WTF *v77;
  WTF *v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  WTF *v97;
  WTF *v98;
  WTF *v99;
  int v100;
  uint64_t v101;
  double *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  WTF *v119;
  WTF *v120;
  int v121;
  uint64_t v122;
  double *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF::AtomStringImpl *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  WTF *v139;
  WTF *v140;
  WTF *v141;
  WTF::StringImpl *v142;
  uint64_t v143;
  WTF *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  WTF::AtomStringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  WTF *v160;
  WTF *v161;
  WTF *v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  double *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  WTF::AtomStringImpl *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  WTF *v183;
  WTF *v184;
  WTF *v185;
  int v186;
  uint64_t v187;
  double *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  WTF::AtomStringImpl *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  WTF *v204;
  WTF *v205;
  WTF *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  WTF::AtomStringImpl *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  WTF *v223;
  WTF *v224;
  WTF *v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  WTF::StringImpl *v245;
  int v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  void *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unsigned int v312;
  BOOL v313;
  unint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _DWORD **v338;
  uint64_t v339;
  _DWORD *v340;
  _DWORD **v341;
  uint64_t v342;
  _DWORD *v343;
  _DWORD **v344;
  uint64_t v345;
  _DWORD *v346;
  _DWORD **v347;
  uint64_t v348;
  _DWORD *v349;
  _DWORD **v350;
  uint64_t v351;
  _DWORD *v352;
  _DWORD **v353;
  uint64_t v354;
  _DWORD *v355;
  _DWORD **v356;
  uint64_t v357;
  _DWORD *v358;
  _DWORD **v359;
  uint64_t v360;
  _DWORD *v361;
  unint64_t v362;
  void *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  WTF *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  WTF::AtomStringImpl *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  WTF *v389;
  WTF *v390;
  WTF *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  WTF::AtomStringImpl *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t v407;
  WTF *v408;
  WTF *v409;
  WTF *v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  const void *v415;
  void *v416;
  void *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  unint64_t v425;
  void *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  void *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  _DWORD **v441;
  uint64_t v442;
  _DWORD *v443;
  _DWORD **v444;
  uint64_t v445;
  _DWORD *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  WTF::AtomStringImpl *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t *v461;
  uint64_t v462;
  uint64_t v463;
  WTF *v464;
  WTF *v465;
  WTF *v466;
  uint64_t *v467;
  WTF::AtomStringImpl *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  WTF *v475;
  WTF *v476;
  WTF *v477;
  unsigned int v478;
  unint64_t v479;
  unint64_t v480;
  unsigned int *v481;
  unsigned int v482;
  unsigned int v483;
  int v484;
  BOOL v485;
  unint64_t v486;
  void *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  _DWORD **v494;
  uint64_t v495;
  _DWORD *v496;
  Inspector::InspectorScriptProfilerAgent *v497;
  char *v498;
  const void **v499;
  WTF *v500;
  WTF *v501;
  unint64_t StatusReg;
  JSC::VM *v503;
  uint64_t v504;
  unint64_t *v505;
  WTF *v506;
  WTF *v507;
  unsigned int v508;
  unsigned int *v509;
  WTF::StringImpl *v510;
  WTF *v511;
  WTF *v512;
  WTF *v513[2];
  char v514;
  uint64_t v515;

  v515 = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 56))(*((_QWORD *)this + 6));
  v3 = mach_absolute_time();
  v5 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v5 != -1)
  {
    v513[0] = (WTF *)&v512;
    v507 = (WTF *)v513;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v507, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v4) = dword_1ECF4400C;
  v6 = *(double *)(v2 + 8);
  v7 = (double)(v3 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v4 * 1000000000.0)
     - *(double *)(v2 + 16);
  v8 = v6 + v7;
  if (!*((_BYTE *)this + 57))
  {
    v27 = (uint64_t *)*((_QWORD *)this + 4);
    v513[0] = 0;
    Inspector::ScriptProfilerFrontendDispatcher::trackingComplete(v27, v513, v6 + v7);
    v35 = v513[0];
    v513[0] = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 1)
        WTF::JSONImpl::Value::operator delete(v35, v28, v29, v30, v31, v32, v33, v34);
      else
        --*(_DWORD *)v35;
    }
    return;
  }
  v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 64))(*((_QWORD *)this + 6)) + 16);
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)&v509, (JSC::VM *)v9, v10, v11, v12, v13, v14, v15, v16);
  ++*(_DWORD *)(v9 + 916);
  v24 = *(unsigned __int8 **)(v9 + 93368);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x1986C5E9CLL);
  }
  v25 = v24 + 4;
  if (__ldaxr(v24 + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v25))
  {
    goto LABEL_12;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v24 + 4));
LABEL_12:
  v24[5] = 1;
  JSC::SamplingProfiler::releaseStackTraces((JSC::SamplingProfiler *)v24, v17, v18, v19, v20, v21, v22, v23, &v507);
  v42 = __ldxr(v25);
  v503 = (JSC::VM *)v9;
  v497 = this;
  if (v42 == 1)
  {
    if (!__stlxr(0, v25))
      goto LABEL_17;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v24 + 4, 0, v36, v37, v38, v39, v40, v41);
LABEL_17:
  v43 = (const void **)WTF::fastMalloc((WTF *)0x20);
  v44 = (WTF *)v43;
  *v43 = (const void *)0x600000001;
  v43[2] = 0;
  v499 = v43 + 2;
  v43[3] = 0;
  if (v508)
  {
    v45 = v507;
    v498 = (char *)v507 + 32 * v508;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v500 = (WTF *)v43;
    while (1)
    {
      v46 = (unint64_t *)WTF::fastMalloc((WTF *)0x20);
      v47 = (WTF *)v46;
      *v46 = 0x600000001;
      v46[2] = 0;
      v505 = v46 + 2;
      v46[3] = 0;
      v501 = v45;
      v48 = *((_DWORD *)v45 + 7);
      if (v48)
        break;
LABEL_245:
      v370 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v370 = 0x500000001;
      *(_QWORD *)(v370 + 16) = 0;
      *(_QWORD *)(v370 + 24) = 0;
      *(_QWORD *)(v370 + 32) = 0;
      v371 = *((_QWORD *)v501 + 1);
      v372 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v372 = 0x900000002;
      *(_QWORD *)(v372 + 8) = "timestamp";
      *(_DWORD *)(v372 + 16) = 4;
      v511 = (WTF *)v372;
      v373 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v373 = 0x200000001;
      *((_QWORD *)v373 + 1) = v371;
      v512 = v373;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v370 + 16), (WTF::AtomStringImpl *)&v511, (const WTF::StringImpl *)&v512, v374, v375, v376, v377, v378, (uint64_t)v513);
      if (v514)
      {
        v386 = (uint64_t *)(v370 + 24);
        v387 = *(unsigned int *)(v370 + 36);
        if ((_DWORD)v387 == *(_DWORD *)(v370 + 32))
        {
          v441 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v386, v387 + 1, (unint64_t)&v511);
          v387 = *(unsigned int *)(v370 + 36);
          v442 = *(_QWORD *)(v370 + 24);
          v443 = *v441;
          if (*v441)
            *v443 += 2;
          *(_QWORD *)(v442 + 8 * v387) = v443;
        }
        else
        {
          v388 = *v386;
          v389 = v511;
          if (v511)
            *(_DWORD *)v511 += 2;
          *(_QWORD *)(v388 + 8 * v387) = v389;
        }
        *(_DWORD *)(v370 + 36) = v387 + 1;
      }
      v390 = v512;
      v512 = 0;
      if (v390)
      {
        if (*(_DWORD *)v390 == 1)
          WTF::JSONImpl::Value::operator delete(v390, v379, v380, v381, v382, v383, v384, v385);
        else
          --*(_DWORD *)v390;
      }
      v391 = v511;
      v511 = 0;
      if (v391)
      {
        if (*(_DWORD *)v391 == 2)
        {
          WTF::StringImpl::~StringImpl(v391, v379, v380, v381, v382, v383, v384, v385);
          WTF::fastFree(v425, v426, v427, v428, v429, v430, v431, v432);
        }
        else
        {
          *(_DWORD *)v391 -= 2;
        }
      }
      v392 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v392 = 0xB00000002;
      *(_QWORD *)(v392 + 8) = "stackFrames";
      *(_DWORD *)(v392 + 16) = 4;
      v511 = v47;
      v512 = (WTF *)v392;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v370 + 16), &v512, (const WTF::StringImpl *)&v511, v393, v394, v395, v396, v397, (uint64_t)v513);
      v44 = v500;
      if (v514)
      {
        v405 = (uint64_t *)(v370 + 24);
        v406 = *(unsigned int *)(v370 + 36);
        if ((_DWORD)v406 == *(_DWORD *)(v370 + 32))
        {
          v444 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v405, v406 + 1, (unint64_t)&v512);
          v406 = *(unsigned int *)(v370 + 36);
          v445 = *(_QWORD *)(v370 + 24);
          v446 = *v444;
          if (*v444)
            *v446 += 2;
          *(_QWORD *)(v445 + 8 * v406) = v446;
        }
        else
        {
          v407 = *v405;
          v408 = v512;
          if (v512)
            *(_DWORD *)v512 += 2;
          *(_QWORD *)(v407 + 8 * v406) = v408;
        }
        *(_DWORD *)(v370 + 36) = v406 + 1;
      }
      v409 = v511;
      v511 = 0;
      if (v409)
      {
        if (*(_DWORD *)v409 == 1)
          WTF::JSONImpl::Value::operator delete(v409, v398, v399, v400, v401, v402, v403, v404);
        else
          --*(_DWORD *)v409;
      }
      v410 = v512;
      v512 = 0;
      if (v410)
      {
        if (*(_DWORD *)v410 == 2)
        {
          WTF::StringImpl::~StringImpl(v410, v398, v399, v400, v401, v402, v403, v404);
          WTF::fastFree(v433, v434, v435, v436, v437, v438, v439, v440);
        }
        else
        {
          *(_DWORD *)v410 -= 2;
        }
      }
      v411 = *((unsigned int *)v500 + 7);
      if ((_DWORD)v411 == *((_DWORD *)v500 + 6))
      {
        v412 = v411 + (v411 >> 2);
        if (v412 >= 0x10)
          v413 = v412 + 1;
        else
          v413 = 16;
        if (v413 <= v411 + 1)
          v414 = v411 + 1;
        else
          v414 = v413;
        if (v414 >> 29)
        {
LABEL_348:
          __break(0xC471u);
          JUMPOUT(0x1986C5E7CLL);
        }
        v415 = *v499;
        v416 = (void *)WTF::fastMalloc((WTF *)(8 * v414));
        *((_DWORD *)v500 + 6) = v414;
        v44 = v500;
        *((_QWORD *)v500 + 2) = v416;
        memcpy(v416, v415, 8 * v411);
        if (v415)
        {
          if (*v499 == v415)
          {
            *((_QWORD *)v500 + 2) = 0;
            *((_DWORD *)v500 + 6) = 0;
          }
          WTF::fastFree((unint64_t)v415, v417, v418, v419, v420, v421, v422, v423);
        }
        v411 = *((unsigned int *)v500 + 7);
        v424 = (uint64_t *)(*((_QWORD *)v500 + 2) + 8 * v411);
      }
      else
      {
        v424 = (uint64_t *)((char *)*v499 + 8 * v411);
      }
      *v424 = v370;
      *((_DWORD *)v44 + 7) = v411 + 1;
      v45 = (WTF *)((char *)v501 + 32);
      if ((char *)v501 + 32 == v498)
        goto LABEL_295;
    }
    v49 = *((_QWORD *)v45 + 2);
    v504 = v49 + 136 * v48;
    v506 = (WTF *)v46;
    while (1)
    {
      v50 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)(v50 + 16) = 0;
      v51 = (uint64_t *)(v50 + 16);
      *(_QWORD *)v50 = 0x500000001;
      *(_QWORD *)(v50 + 24) = 0;
      *(_QWORD *)(v50 + 32) = 0;
      if ((*(_DWORD *)v49 - 1) >= 5)
      {
        if (*(_DWORD *)v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1986C5F30);
        }
        v240 = *(_QWORD *)(v49 + 16);
        if (*(_BYTE *)(v240 + 5) == 8)
        {
          v52 = -1;
        }
        else
        {
          v311 = *(_QWORD *)(v240 + 40);
          if (v311)
          {
            v52 = *(_DWORD *)(v311 + 112);
            if (!v52)
            {
              do
                v312 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
              while (__stlxr(v312 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
              v313 = __CFADD__(v312, 1);
              v52 = v312 + 1;
              *(_DWORD *)(v311 + 112) = v52;
              if (v313)
                goto LABEL_348;
            }
          }
          else
          {
            v52 = 1;
          }
        }
      }
      else
      {
        v52 = -1;
      }
      v53 = 0;
      do
      {
        v54 = (v52 % 0xA) | 0x30;
        *((_BYTE *)&v513[1] + v53-- + 4) = (v52 % 0xA) | 0x30;
        v55 = v52 > 9;
        v52 /= 0xAu;
      }
      while (v55);
      if (v53)
      {
        if ((unint64_t)-v53 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x1986C5F3CLL);
        }
        v56 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v53));
        v57 = v56 + 5;
        *v56 = 2;
        v56[1] = -(int)v53;
        *((_QWORD *)v56 + 1) = v56 + 5;
        v56[4] = 4;
        if (v53 == -1)
          *v57 = v54;
        else
          memcpy(v57, (char *)&v513[1] + v53 + 5, -v53);
      }
      else
      {
        v56 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      v58 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v58 = 0x800000002;
      *(_QWORD *)(v58 + 8) = "sourceID";
      *(_DWORD *)(v58 + 16) = 4;
      v511 = (WTF *)v58;
      v59 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v59 = 0x400000001;
      *((_QWORD *)v59 + 1) = v56;
      *v56 += 2;
      v512 = v59;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v51, (WTF::AtomStringImpl *)&v511, (const WTF::StringImpl *)&v512, v60, v61, v62, v63, v64, (uint64_t)v513);
      if (v514)
      {
        v73 = (uint64_t *)(v50 + 24);
        v74 = *(unsigned int *)(v50 + 36);
        if ((_DWORD)v74 == *(_DWORD *)(v50 + 32))
        {
          v338 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v73, v74 + 1, (unint64_t)&v511);
          v74 = *(unsigned int *)(v50 + 36);
          v339 = *(_QWORD *)(v50 + 24);
          v340 = *v338;
          if (*v338)
            *v340 += 2;
          *(_QWORD *)(v339 + 8 * v74) = v340;
        }
        else
        {
          v75 = *v73;
          v76 = v511;
          if (v511)
            *(_DWORD *)v511 += 2;
          *(_QWORD *)(v75 + 8 * v74) = v76;
        }
        *(_DWORD *)(v50 + 36) = v74 + 1;
      }
      v77 = v512;
      v512 = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 1)
          WTF::JSONImpl::Value::operator delete(v77, v65, v66, v67, v68, v69, v70, v71);
        else
          --*(_DWORD *)v77;
      }
      v78 = v511;
      v511 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
        {
          WTF::StringImpl::~StringImpl(v78, v65, v66, v67, v68, v69, v70, v71);
          WTF::fastFree(v255, v256, v257, v258, v259, v260, v261, v262);
        }
        else
        {
          *(_DWORD *)v78 -= 2;
        }
      }
      JSC::SamplingProfiler::StackFrame::displayName((JSC::SamplingProfiler::StackFrame *)v49, (JSC::VM *)v9, v66, v67, v68, v69, v70, v71, (uint64_t *)&v510, v72);
      v79 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v79 = 0x400000002;
      *(_QWORD *)(v79 + 8) = "name";
      *(_DWORD *)(v79 + 16) = 4;
      v511 = (WTF *)v79;
      v80 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v80 = 0x400000001;
      v86 = v510;
      *((_QWORD *)v80 + 1) = v510;
      if (v86)
        *(_DWORD *)v86 += 2;
      v512 = v80;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v51, (WTF::AtomStringImpl *)&v511, (const WTF::StringImpl *)&v512, v81, v82, v83, v84, v85, (uint64_t)v513);
      if (v514)
      {
        v94 = (uint64_t *)(v50 + 24);
        v95 = *(unsigned int *)(v50 + 36);
        if ((_DWORD)v95 == *(_DWORD *)(v50 + 32))
        {
          v341 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v94, v95 + 1, (unint64_t)&v511);
          v95 = *(unsigned int *)(v50 + 36);
          v342 = *(_QWORD *)(v50 + 24);
          v343 = *v341;
          if (*v341)
            *v343 += 2;
          *(_QWORD *)(v342 + 8 * v95) = v343;
        }
        else
        {
          v96 = *v94;
          v97 = v511;
          if (v511)
            *(_DWORD *)v511 += 2;
          *(_QWORD *)(v96 + 8 * v95) = v97;
        }
        *(_DWORD *)(v50 + 36) = v95 + 1;
      }
      v98 = v512;
      v512 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 1)
          WTF::JSONImpl::Value::operator delete(v98, v87, v88, v89, v90, v91, v92, v93);
        else
          --*(_DWORD *)v98;
      }
      v99 = v511;
      v511 = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
        {
          WTF::StringImpl::~StringImpl(v99, v87, v88, v89, v90, v91, v92, v93);
          WTF::fastFree(v263, v264, v265, v266, v267, v268, v269, v270);
        }
        else
        {
          *(_DWORD *)v99 -= 2;
        }
      }
      if ((*(_DWORD *)v49 - 1) < 5)
        goto LABEL_58;
      if (*(_DWORD *)v49)
      {
        __break(0xC471u);
        JUMPOUT(0x1986C5ED0);
      }
      v241 = *(_QWORD *)(v49 + 16);
      if (*(_BYTE *)(v241 + 5) == 8)
LABEL_58:
        v100 = -1;
      else
        v100 = *(_DWORD *)(v241 + 56) + 1;
      v101 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v101 = 0x400000002;
      *(_QWORD *)(v101 + 8) = "line";
      *(_DWORD *)(v101 + 16) = 4;
      v511 = (WTF *)v101;
      v102 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v102 = 0x300000001;
      v102[1] = (double)v100;
      v512 = (WTF *)v102;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v51, (WTF::AtomStringImpl *)&v511, (const WTF::StringImpl *)&v512, v103, v104, v105, v106, v107, (uint64_t)v513);
      if (v514)
      {
        v115 = (uint64_t *)(v50 + 24);
        v116 = *(unsigned int *)(v50 + 36);
        if ((_DWORD)v116 == *(_DWORD *)(v50 + 32))
        {
          v344 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v115, v116 + 1, (unint64_t)&v511);
          v116 = *(unsigned int *)(v50 + 36);
          v345 = *(_QWORD *)(v50 + 24);
          v346 = *v344;
          if (*v344)
            *v346 += 2;
          *(_QWORD *)(v345 + 8 * v116) = v346;
        }
        else
        {
          v117 = *v115;
          v118 = v511;
          if (v511)
            *(_DWORD *)v511 += 2;
          *(_QWORD *)(v117 + 8 * v116) = v118;
        }
        *(_DWORD *)(v50 + 36) = v116 + 1;
      }
      v119 = v512;
      v512 = 0;
      if (v119)
      {
        if (*(_DWORD *)v119 == 1)
          WTF::JSONImpl::Value::operator delete(v119, v108, v109, v110, v111, v112, v113, v114);
        else
          --*(_DWORD *)v119;
      }
      v120 = v511;
      v511 = 0;
      if (v120)
      {
        if (*(_DWORD *)v120 == 2)
        {
          WTF::StringImpl::~StringImpl(v120, v108, v109, v110, v111, v112, v113, v114);
          WTF::fastFree(v271, v272, v273, v274, v275, v276, v277, v278);
        }
        else
        {
          *(_DWORD *)v120 -= 2;
        }
      }
      if ((*(_DWORD *)v49 - 1) < 5)
        goto LABEL_72;
      if (*(_DWORD *)v49)
      {
        __break(0xC471u);
        JUMPOUT(0x1986C5EF0);
      }
      v242 = *(_QWORD *)(v49 + 16);
      if (*(_BYTE *)(v242 + 5) == 8)
LABEL_72:
        v121 = -1;
      else
        v121 = *(_DWORD *)(v242 + 60) + 1;
      v122 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v122 = 0x600000002;
      *(_QWORD *)(v122 + 8) = "column";
      *(_DWORD *)(v122 + 16) = 4;
      v511 = (WTF *)v122;
      v123 = (double *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = 0x300000001;
      v123[1] = (double)v121;
      v512 = (WTF *)v123;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v51, (WTF::AtomStringImpl *)&v511, (const WTF::StringImpl *)&v512, v124, v125, v126, v127, v128, (uint64_t)v513);
      if (v514)
      {
        v136 = (uint64_t *)(v50 + 24);
        v137 = *(unsigned int *)(v50 + 36);
        if ((_DWORD)v137 == *(_DWORD *)(v50 + 32))
        {
          v347 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v137 + 1, (unint64_t)&v511);
          v137 = *(unsigned int *)(v50 + 36);
          v348 = *(_QWORD *)(v50 + 24);
          v349 = *v347;
          if (*v347)
            *v349 += 2;
          *(_QWORD *)(v348 + 8 * v137) = v349;
        }
        else
        {
          v138 = *v136;
          v139 = v511;
          if (v511)
            *(_DWORD *)v511 += 2;
          *(_QWORD *)(v138 + 8 * v137) = v139;
        }
        *(_DWORD *)(v50 + 36) = v137 + 1;
      }
      v140 = v512;
      v512 = 0;
      if (v140)
      {
        if (*(_DWORD *)v140 == 1)
          WTF::JSONImpl::Value::operator delete(v140, v129, v130, v131, v132, v133, v134, v135);
        else
          --*(_DWORD *)v140;
      }
      v141 = v511;
      v511 = 0;
      if (v141)
      {
        if (*(_DWORD *)v141 == 2)
        {
          WTF::StringImpl::~StringImpl(v141, v129, v130, v131, v132, v133, v134, v135);
          WTF::fastFree(v279, v280, v281, v282, v283, v284, v285, v286);
        }
        else
        {
          *(_DWORD *)v141 -= 2;
        }
      }
      if ((*(_DWORD *)v49 - 1) < 5)
        goto LABEL_86;
      if (*(_DWORD *)v49)
      {
        __break(0xC471u);
        JUMPOUT(0x1986C5F10);
      }
      v243 = *(_QWORD *)(v49 + 16);
      if (*(_BYTE *)(v243 + 5) == 8)
      {
LABEL_86:
        v142 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      else
      {
        v244 = *(_QWORD *)(v243 + 40);
        v245 = *(WTF::StringImpl **)(v244 + 64);
        if (v245 && (v246 = *((_DWORD *)v245 + 1), *(_DWORD *)v245 += 2, v246))
        {
          v142 = v245;
        }
        else
        {
          v142 = *(WTF::StringImpl **)(v244 + 88);
          if (v142)
            *(_DWORD *)v142 += 2;
          if (v245)
          {
            if (*(_DWORD *)v245 == 2)
            {
              WTF::StringImpl::~StringImpl(v245, v129, v130, v131, v132, v133, v134, v135);
              WTF::fastFree(v362, v363, v364, v365, v366, v367, v368, v369);
            }
            else
            {
              *(_DWORD *)v245 -= 2;
            }
          }
        }
      }
      v143 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v143 = 0x300000002;
      *(_QWORD *)(v143 + 8) = "url";
      *(_DWORD *)(v143 + 16) = 4;
      v511 = (WTF *)v143;
      v144 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v144 = 0x400000001;
      *((_QWORD *)v144 + 1) = v142;
      if (v142)
        *(_DWORD *)v142 += 2;
      v512 = v144;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v51, (WTF::AtomStringImpl *)&v511, (const WTF::StringImpl *)&v512, v145, v146, v147, v148, v149, (uint64_t)v513);
      if (v514)
      {
        v157 = (uint64_t *)(v50 + 24);
        v158 = *(unsigned int *)(v50 + 36);
        if ((_DWORD)v158 == *(_DWORD *)(v50 + 32))
        {
          v350 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v157, v158 + 1, (unint64_t)&v511);
          v158 = *(unsigned int *)(v50 + 36);
          v351 = *(_QWORD *)(v50 + 24);
          v352 = *v350;
          if (*v350)
            *v352 += 2;
          *(_QWORD *)(v351 + 8 * v158) = v352;
        }
        else
        {
          v159 = *v157;
          v160 = v511;
          if (v511)
            *(_DWORD *)v511 += 2;
          *(_QWORD *)(v159 + 8 * v158) = v160;
        }
        *(_DWORD *)(v50 + 36) = v158 + 1;
      }
      v161 = v512;
      v512 = 0;
      if (v161)
      {
        if (*(_DWORD *)v161 == 1)
          WTF::JSONImpl::Value::operator delete(v161, v150, v151, v152, v153, v154, v155, v156);
        else
          --*(_DWORD *)v161;
      }
      v162 = v511;
      v511 = 0;
      if (v162)
      {
        if (*(_DWORD *)v162 == 2)
        {
          WTF::StringImpl::~StringImpl(v162, v150, v151, v152, v153, v154, v155, v156);
          WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
          if (!v142)
            goto LABEL_104;
          goto LABEL_102;
        }
        *(_DWORD *)v162 -= 2;
      }
      if (!v142)
        goto LABEL_104;
LABEL_102:
      if (*(_DWORD *)v142 == 2)
      {
        WTF::StringImpl::~StringImpl(v142, v150, v151, v152, v153, v154, v155, v156);
        WTF::fastFree(v295, v296, v297, v298, v299, v300, v301, v302);
      }
      else
      {
        *(_DWORD *)v142 -= 2;
      }
LABEL_104:
      v163 = v510;
      v510 = 0;
      if (v163)
      {
        if (*(_DWORD *)v163 == 2)
        {
          WTF::StringImpl::~StringImpl(v163, v150, v151, v152, v153, v154, v155, v156);
          WTF::fastFree(v303, v304, v305, v306, v307, v308, v309, v310);
        }
        else
        {
          *(_DWORD *)v163 -= 2;
        }
      }
      if (*v56 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v56, v150, v151, v152, v153, v154, v155, v156);
        WTF::fastFree(v247, v248, v249, v250, v251, v252, v253, v254);
      }
      else
      {
        *v56 -= 2;
      }
      v47 = v506;
      if (*(_DWORD *)(v49 + 72) != -1 && *(_DWORD *)(v49 + 76) != -1)
      {
        v164 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v164 = 0x500000001;
        *(_QWORD *)(v164 + 16) = 0;
        *(_QWORD *)(v164 + 24) = 0;
        *(_QWORD *)(v164 + 32) = 0;
        v165 = *(_DWORD *)(v49 + 72);
        v166 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v166 = 0x400000002;
        *(_QWORD *)(v166 + 8) = "line";
        *(_DWORD *)(v166 + 16) = 4;
        v511 = (WTF *)v166;
        v167 = (double *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v167 = 0x300000001;
        v167[1] = (double)v165;
        v512 = (WTF *)v167;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v164 + 16), (WTF::AtomStringImpl *)&v511, (const WTF::StringImpl *)&v512, v168, v169, v170, v171, v172, (uint64_t)v513);
        if (v514)
        {
          v180 = (uint64_t *)(v164 + 24);
          v181 = *(unsigned int *)(v164 + 36);
          if ((_DWORD)v181 == *(_DWORD *)(v164 + 32))
          {
            v353 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v180, v181 + 1, (unint64_t)&v511);
            v181 = *(unsigned int *)(v164 + 36);
            v354 = *(_QWORD *)(v164 + 24);
            v355 = *v353;
            if (*v353)
              *v355 += 2;
            *(_QWORD *)(v354 + 8 * v181) = v355;
          }
          else
          {
            v182 = *v180;
            v183 = v511;
            if (v511)
              *(_DWORD *)v511 += 2;
            *(_QWORD *)(v182 + 8 * v181) = v183;
          }
          *(_DWORD *)(v164 + 36) = v181 + 1;
        }
        v184 = v512;
        v512 = 0;
        if (v184)
        {
          if (*(_DWORD *)v184 == 1)
            WTF::JSONImpl::Value::operator delete(v184, v173, v174, v175, v176, v177, v178, v179);
          else
            --*(_DWORD *)v184;
        }
        v185 = v511;
        v511 = 0;
        if (v185)
        {
          if (*(_DWORD *)v185 == 2)
          {
            WTF::StringImpl::~StringImpl(v185, v173, v174, v175, v176, v177, v178, v179);
            WTF::fastFree(v314, v315, v316, v317, v318, v319, v320, v321);
          }
          else
          {
            *(_DWORD *)v185 -= 2;
          }
        }
        v186 = *(_DWORD *)(v49 + 76);
        v187 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v187 = 0x600000002;
        *(_QWORD *)(v187 + 8) = "column";
        *(_DWORD *)(v187 + 16) = 4;
        v511 = (WTF *)v187;
        v188 = (double *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v188 = 0x300000001;
        v188[1] = (double)v186;
        v512 = (WTF *)v188;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v164 + 16), (WTF::AtomStringImpl *)&v511, (const WTF::StringImpl *)&v512, v189, v190, v191, v192, v193, (uint64_t)v513);
        if (v514)
        {
          v201 = (uint64_t *)(v164 + 24);
          v202 = *(unsigned int *)(v164 + 36);
          if ((_DWORD)v202 == *(_DWORD *)(v164 + 32))
          {
            v356 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v201, v202 + 1, (unint64_t)&v511);
            v202 = *(unsigned int *)(v164 + 36);
            v357 = *(_QWORD *)(v164 + 24);
            v358 = *v356;
            if (*v356)
              *v358 += 2;
            *(_QWORD *)(v357 + 8 * v202) = v358;
          }
          else
          {
            v203 = *v201;
            v204 = v511;
            if (v511)
              *(_DWORD *)v511 += 2;
            *(_QWORD *)(v203 + 8 * v202) = v204;
          }
          *(_DWORD *)(v164 + 36) = v202 + 1;
        }
        v205 = v512;
        v512 = 0;
        if (v205)
        {
          if (*(_DWORD *)v205 == 1)
            WTF::JSONImpl::Value::operator delete(v205, v194, v195, v196, v197, v198, v199, v200);
          else
            --*(_DWORD *)v205;
        }
        v206 = v511;
        v511 = 0;
        if (v206)
        {
          if (*(_DWORD *)v206 == 2)
          {
            WTF::StringImpl::~StringImpl(v206, v194, v195, v196, v197, v198, v199, v200);
            WTF::fastFree(v322, v323, v324, v325, v326, v327, v328, v329);
          }
          else
          {
            *(_DWORD *)v206 -= 2;
          }
        }
        v207 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v207 = 0x1200000002;
        *(_QWORD *)(v207 + 8) = "expressionLocation";
        *(_DWORD *)(v207 + 16) = 4;
        v511 = (WTF *)v164;
        v512 = (WTF *)v207;
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ObjectBase,WTF::RawPtrTraits<WTF::JSONImpl::ObjectBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ObjectBase>>>(v51, (WTF::AtomStringImpl *)&v512, (const WTF::StringImpl *)&v511, v208, v209, v210, v211, v212, (uint64_t)v513);
        v47 = v506;
        if (v514)
        {
          v220 = (uint64_t *)(v50 + 24);
          v221 = *(unsigned int *)(v50 + 36);
          if ((_DWORD)v221 == *(_DWORD *)(v50 + 32))
          {
            v359 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v220, v221 + 1, (unint64_t)&v512);
            v221 = *(unsigned int *)(v50 + 36);
            v360 = *(_QWORD *)(v50 + 24);
            v361 = *v359;
            if (*v359)
              *v361 += 2;
            *(_QWORD *)(v360 + 8 * v221) = v361;
          }
          else
          {
            v222 = *v220;
            v223 = v512;
            if (v512)
              *(_DWORD *)v512 += 2;
            *(_QWORD *)(v222 + 8 * v221) = v223;
          }
          *(_DWORD *)(v50 + 36) = v221 + 1;
        }
        v224 = v511;
        v511 = 0;
        if (v224)
        {
          if (*(_DWORD *)v224 == 1)
            WTF::JSONImpl::Value::operator delete(v224, v213, v214, v215, v216, v217, v218, v219);
          else
            --*(_DWORD *)v224;
        }
        v225 = v512;
        v512 = 0;
        if (v225)
        {
          if (*(_DWORD *)v225 == 2)
          {
            WTF::StringImpl::~StringImpl(v225, v213, v214, v215, v216, v217, v218, v219);
            WTF::fastFree(v330, v331, v332, v333, v334, v335, v336, v337);
          }
          else
          {
            *(_DWORD *)v225 -= 2;
          }
        }
      }
      v226 = *((unsigned int *)v47 + 7);
      if ((_DWORD)v226 != *((_DWORD *)v47 + 6))
      {
        v239 = (uint64_t *)(*v505 + 8 * v226);
        goto LABEL_165;
      }
      v227 = v226 + (v226 >> 2);
      if (v227 >= 0x10)
        v228 = v227 + 1;
      else
        v228 = 16;
      if (v228 <= v226 + 1)
        v229 = v226 + 1;
      else
        v229 = v228;
      if (v229 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1986C5F44);
      }
      v230 = *v505;
      v231 = (void *)WTF::fastMalloc((WTF *)(8 * v229));
      *((_DWORD *)v47 + 6) = v229;
      *((_QWORD *)v47 + 2) = v231;
      memcpy(v231, (const void *)v230, 8 * v226);
      if (v230)
      {
        if (*v505 == v230)
        {
          *((_QWORD *)v47 + 2) = 0;
          *((_DWORD *)v47 + 6) = 0;
        }
        v237 = *(_QWORD *)(StatusReg + 752);
        if (v237)
        {
          if (!(v230 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v230 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v230)) & 1) != 0)
          {
LABEL_161:
            v238 = *(unsigned int *)(v237 + 8000);
            if (v238 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v237, v230, (os_unfair_lock_s *)5, v232, v233, v234, v235, v236);
            }
            else
            {
              *(_QWORD *)(v237 + 8 * v238) = v230 | 0x5000000000000;
              *(_DWORD *)(v237 + 8000) = v238 + 1;
            }
            goto LABEL_163;
          }
          if (v230 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v230 >> 24)
          {
            v232 = 0;
          }
          else
          {
            v232 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v230 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v230) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v232 == 1)
              goto LABEL_161;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v237, v230, 1, v232, v233, v234, v235, v236);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v230, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_163:
      v226 = *((unsigned int *)v47 + 7);
      v239 = (uint64_t *)(*((_QWORD *)v47 + 2) + 8 * v226);
LABEL_165:
      *v239 = v50;
      *((_DWORD *)v47 + 7) = v226 + 1;
      v49 += 136;
      if (v49 == v504)
        goto LABEL_245;
    }
  }
LABEL_295:
  v447 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v447 = 0x500000001;
  *(_QWORD *)(v447 + 24) = 0;
  *(_QWORD *)(v447 + 32) = 0;
  *(_QWORD *)(v447 + 16) = 0;
  v448 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v448 = 0xB00000002;
  *(_QWORD *)(v448 + 8) = "stackTraces";
  *(_DWORD *)(v448 + 16) = 4;
  v511 = v44;
  v512 = (WTF *)v448;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v447 + 16), &v512, (const WTF::StringImpl *)&v511, v449, v450, v451, v452, v453, (uint64_t)v513);
  if (v514)
  {
    v461 = (uint64_t *)(v447 + 24);
    v462 = *(unsigned int *)(v447 + 36);
    if ((_DWORD)v462 == *(_DWORD *)(v447 + 32))
    {
      v494 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v461, v462 + 1, (unint64_t)&v512);
      v462 = *(unsigned int *)(v447 + 36);
      v495 = *(_QWORD *)(v447 + 24);
      v496 = *v494;
      if (*v494)
        *v496 += 2;
      *(_QWORD *)(v495 + 8 * v462) = v496;
    }
    else
    {
      v463 = *v461;
      v464 = v512;
      if (v512)
        *(_DWORD *)v512 += 2;
      *(_QWORD *)(v463 + 8 * v462) = v464;
    }
    *(_DWORD *)(v447 + 36) = v462 + 1;
  }
  v465 = v511;
  v511 = 0;
  if (v465)
  {
    if (*(_DWORD *)v465 == 1)
      WTF::JSONImpl::Value::operator delete(v465, v454, v455, v456, v457, v458, v459, v460);
    else
      --*(_DWORD *)v465;
  }
  v466 = v512;
  v512 = 0;
  if (v466)
  {
    if (*(_DWORD *)v466 == 2)
    {
      WTF::StringImpl::~StringImpl(v466, v454, v455, v456, v457, v458, v459, v460);
      WTF::fastFree(v486, v487, v488, v489, v490, v491, v492, v493);
    }
    else
    {
      *(_DWORD *)v466 -= 2;
    }
  }
  *((_BYTE *)v497 + 57) = 0;
  v467 = (uint64_t *)*((_QWORD *)v497 + 4);
  v513[0] = (WTF *)v447;
  Inspector::ScriptProfilerFrontendDispatcher::trackingComplete(v467, v513, v8);
  v475 = v513[0];
  v513[0] = 0;
  if (v475)
  {
    if (*(_DWORD *)v475 == 1)
      WTF::JSONImpl::Value::operator delete(v475, v468, v469, v470, v471, v472, v473, v474);
    else
      --*(_DWORD *)v475;
  }
  v476 = v507;
  if (v508)
  {
    v477 = (WTF *)((char *)v507 + 32 * v508);
    do
    {
      v478 = *((_DWORD *)v476 + 7);
      v479 = *((_QWORD *)v476 + 2);
      if (v478)
      {
        v480 = v479 + 136 * v478;
        do
        {
          if (*(_BYTE *)(v479 + 56))
          {
            v481 = *(unsigned int **)(v479 + 48);
            *(_QWORD *)(v479 + 48) = 0;
            if (v481)
            {
              do
              {
                v482 = __ldaxr(v481);
                v483 = v482 - 1;
              }
              while (__stlxr(v483, v481));
              if (!v483)
              {
                atomic_store(1u, v481);
                v513[0] = (WTF *)v481;
                WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v513, v468, v469, v470, v471, v472, v473, v474);
              }
            }
          }
          v479 += 136;
        }
        while (v479 != v480);
        v479 = *((_QWORD *)v476 + 2);
      }
      if (v479)
      {
        *((_QWORD *)v476 + 2) = 0;
        *((_DWORD *)v476 + 6) = 0;
        WTF::fastFree(v479, v468, v469, v470, v471, v472, v473, v474);
      }
      v476 = (WTF *)((char *)v476 + 32);
    }
    while (v476 != v477);
    v476 = v507;
  }
  if (v476)
    WTF::fastFree((unint64_t)v476, v468, v469, v470, v471, v472, v473, v474);
  v484 = *((_DWORD *)v503 + 229) - 1;
  *((_DWORD *)v503 + 229) = v484;
  if (*((unsigned __int8 *)v503 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v485 = v484 == 0;
  else
    v485 = 0;
  if (v485)
  {
    *((_BYTE *)v503 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v503 + 192, 0);
  }
  JSC::JSLockHolder::~JSLockHolder(&v509, v468, v469, v470, v471, v472, v473, v474);
}

void `non-virtual thunk to'Inspector::InspectorScriptProfilerAgent::stopTracking(Inspector::InspectorScriptProfilerAgent *this@<X0>, _BYTE *a2@<X8>)
{
  Inspector::InspectorScriptProfilerAgent *v3;

  if (*((_BYTE *)this + 40))
  {
    v3 = (Inspector::InspectorScriptProfilerAgent *)((char *)this - 16);
    *((_BYTE *)this + 40) = 0;
    *((_BYTE *)this + 42) = 0;
    *(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 64))(*((_QWORD *)this + 4)) + 208) = 0;
    Inspector::InspectorScriptProfilerAgent::trackingComplete(v3);
  }
  *a2 = 0;
  a2[8] = 0;
}

uint64_t Inspector::InspectorScriptProfilerAgent::isAlreadyProfiling(Inspector::InspectorScriptProfilerAgent *this)
{
  return *((unsigned __int8 *)this + 58);
}

uint64_t `non-virtual thunk to'Inspector::InspectorScriptProfilerAgent::isAlreadyProfiling(Inspector::InspectorScriptProfilerAgent *this)
{
  return *((unsigned __int8 *)this + 34);
}

void Inspector::InspectorScriptProfilerAgent::willEvaluateScript(Inspector::InspectorScriptProfilerAgent *this)
{
  JSC::SamplingProfiler *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char **v12;
  char *v13;

  *((_BYTE *)this + 58) = 1;
  if (*((_BYTE *)this + 57))
  {
    v2 = *(JSC::SamplingProfiler **)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 64))(*((_QWORD *)this + 6))
                                               + 16)
                                   + 93368);
    if (!v2)
    {
      __break(0xC471u);
      return;
    }
    JSC::SamplingProfiler::noticeCurrentThreadAsJSCExecutionThread(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 56))(*((_QWORD *)this + 6));
  mach_absolute_time();
  v10 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v10 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
}

void `non-virtual thunk to'Inspector::InspectorScriptProfilerAgent::willEvaluateScript(Inspector::InspectorScriptProfilerAgent *this)
{
  JSC::SamplingProfiler *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char **v12;
  char *v13;

  *((_BYTE *)this + 34) = 1;
  if (*((_BYTE *)this + 33))
  {
    v2 = *(JSC::SamplingProfiler **)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 64))(*((_QWORD *)this + 3))
                                               + 16)
                                   + 93368);
    if (!v2)
    {
      __break(0xC471u);
      return;
    }
    JSC::SamplingProfiler::noticeCurrentThreadAsJSCExecutionThread(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  mach_absolute_time();
  v10 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v10 != -1)
  {
    v13 = &v11;
    v12 = &v13;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
}

void Inspector::InspectorScriptProfilerAgent::didEvaluateScript(uint64_t a1, unsigned int a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  char **v11;
  char *v12;

  *(_BYTE *)(a1 + 58) = 0;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 56))(*(_QWORD *)(a1 + 48));
  v7 = mach_absolute_time();
  v9 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v9 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v8) = dword_1ECF4400C;
  Inspector::InspectorScriptProfilerAgent::addEvent(a1, a2, a3, *(double *)(v6 + 8)+ (double)(v7 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v8 * 1000000000.0)- *(double *)(v6 + 16));
}

void Inspector::InspectorScriptProfilerAgent::addEvent(uint64_t a1, unsigned int a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  char **v52;
  char *v53;
  int v54;
  char *v55;
  int *v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF *v74;
  WTF::StringImpl *v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF *v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD **v116;
  uint64_t v117;
  _DWORD *v118;
  _DWORD **v119;
  uint64_t v120;
  _DWORD *v121;
  _DWORD **v122;
  uint64_t v123;
  _DWORD *v124;
  WTF::StringImpl *v125;
  WTF *v126;
  WTF *v127[2];
  char v128;

  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = 0x500000001;
  *(_QWORD *)(v8 + 16) = 0;
  v9 = (uint64_t *)(v8 + 16);
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v10 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v10 = 0x900000002;
  *(_QWORD *)(v10 + 8) = "startTime";
  *(_DWORD *)(v10 + 16) = 4;
  v125 = (WTF::StringImpl *)v10;
  v11 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = 0x200000001;
  v11[1] = a3;
  v126 = (WTF *)v11;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v8 + 16), (WTF::AtomStringImpl *)&v125, (const WTF::StringImpl *)&v126, v12, v13, v14, v15, v16, (uint64_t)v127);
  if (v128)
  {
    v24 = (uint64_t *)(v8 + 24);
    v25 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v25 == *(_DWORD *)(v8 + 32))
    {
      v116 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v24, v25 + 1, (unint64_t)&v125);
      v25 = *(unsigned int *)(v8 + 36);
      v117 = *(_QWORD *)(v8 + 24);
      v118 = *v116;
      if (*v116)
        *v118 += 2;
      *(_QWORD *)(v117 + 8 * v25) = v118;
    }
    else
    {
      v26 = *v24;
      v27 = v125;
      if (v125)
        *(_DWORD *)v125 += 2;
      *(_QWORD *)(v26 + 8 * v25) = v27;
    }
    *(_DWORD *)(v8 + 36) = v25 + 1;
  }
  v28 = v126;
  v126 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::JSONImpl::Value::operator delete(v28, v17, v18, v19, v20, v21, v22, v23);
    else
      --*(_DWORD *)v28;
  }
  v29 = v125;
  v125 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  v30 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v30 = 0x700000002;
  *(_QWORD *)(v30 + 8) = "endTime";
  *(_DWORD *)(v30 + 16) = 4;
  v125 = (WTF::StringImpl *)v30;
  v31 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v31 = 0x200000001;
  v31[1] = a4;
  v126 = (WTF *)v31;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v9, (WTF::AtomStringImpl *)&v125, (const WTF::StringImpl *)&v126, v32, v33, v34, v35, v36, (uint64_t)v127);
  if (v128)
  {
    v44 = (uint64_t *)(v8 + 24);
    v45 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v45 == *(_DWORD *)(v8 + 32))
    {
      v119 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v125);
      v45 = *(unsigned int *)(v8 + 36);
      v120 = *(_QWORD *)(v8 + 24);
      v121 = *v119;
      if (*v119)
        *v121 += 2;
      *(_QWORD *)(v120 + 8 * v45) = v121;
    }
    else
    {
      v46 = *v44;
      v47 = v125;
      if (v125)
        *(_DWORD *)v125 += 2;
      *(_QWORD *)(v46 + 8 * v45) = v47;
    }
    *(_DWORD *)(v8 + 36) = v45 + 1;
  }
  v48 = v126;
  v126 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 1)
      WTF::JSONImpl::Value::operator delete(v48, v37, v38, v39, v40, v41, v42, v43);
    else
      --*(_DWORD *)v48;
  }
  v49 = v125;
  v125 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  if (a2 > 2)
    v50 = 197;
  else
    v50 = qword_199156E08[(char)a2];
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v51 = 0x400000002;
  *(_QWORD *)(v51 + 8) = "type";
  *(_DWORD *)(v51 + 16) = 4;
  v125 = (WTF::StringImpl *)v51;
  v52 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * v50];
  v53 = v52[1];
  if (v53)
  {
    v54 = (_DWORD)v53 - 1;
    if (v53 == (char *)1)
    {
      v56 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v55 = *v52;
      v56 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v56 = 2;
      v56[1] = v54;
      *((_QWORD *)v56 + 1) = v55;
      v56[4] = 4;
    }
  }
  else
  {
    v56 = 0;
  }
  v57 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v57 = 0x400000001;
  *((_QWORD *)v57 + 1) = v56;
  if (v56)
    *v56 += 2;
  v126 = v57;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v9, (WTF::AtomStringImpl *)&v125, (const WTF::StringImpl *)&v126, v58, v59, v60, v61, v62, (uint64_t)v127);
  if (v128)
  {
    v70 = (uint64_t *)(v8 + 24);
    v71 = *(unsigned int *)(v8 + 36);
    if ((_DWORD)v71 == *(_DWORD *)(v8 + 32))
    {
      v122 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v70, v71 + 1, (unint64_t)&v125);
      v71 = *(unsigned int *)(v8 + 36);
      v123 = *(_QWORD *)(v8 + 24);
      v124 = *v122;
      if (*v122)
        *v124 += 2;
      *(_QWORD *)(v123 + 8 * v71) = v124;
    }
    else
    {
      v72 = *v70;
      v73 = v125;
      if (v125)
        *(_DWORD *)v125 += 2;
      *(_QWORD *)(v72 + 8 * v71) = v73;
    }
    *(_DWORD *)(v8 + 36) = v71 + 1;
  }
  v74 = v126;
  v126 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v74, v63, v64, v65, v66, v67, v68, v69);
      if (!v56)
        goto LABEL_45;
      goto LABEL_43;
    }
    --*(_DWORD *)v74;
  }
  if (!v56)
    goto LABEL_45;
LABEL_43:
  if (*v56 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v56, v63, v64, v65, v66, v67, v68, v69);
    WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
  }
  else
  {
    *v56 -= 2;
  }
LABEL_45:
  v75 = v125;
  v125 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  v127[0] = (WTF *)v8;
  Inspector::ScriptProfilerFrontendDispatcher::trackingUpdate(*(uint64_t **)(a1 + 32), v127);
  v83 = v127[0];
  v127[0] = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 1)
      WTF::JSONImpl::Value::operator delete(v83, v76, v77, v78, v79, v80, v81, v82);
    else
      --*(_DWORD *)v83;
  }
}

void `non-virtual thunk to'Inspector::InspectorScriptProfilerAgent::didEvaluateScript(uint64_t a1, unsigned int a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  char **v11;
  char *v12;

  *(_BYTE *)(a1 + 34) = 0;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
  v7 = mach_absolute_time();
  v9 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v9 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v8) = dword_1ECF4400C;
  Inspector::InspectorScriptProfilerAgent::addEvent(a1 - 24, a2, a3, *(double *)(v6 + 8)+ (double)(v7 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v8 * 1000000000.0)- *(double *)(v6 + 16));
}

Inspector::InspectorTargetAgent *Inspector::InspectorTargetAgent::InspectorTargetAgent(Inspector::InspectorTargetAgent *this, Inspector::FrontendRouter *a2, Inspector::BackendDispatcher *a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v6 + 8) = "Target";
  *(_DWORD *)(v6 + 16) = 4;
  *(_QWORD *)v6 = 0x600000002;
  *(_QWORD *)this = off_1E3594CA8;
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = &unk_1E3594D00;
  *((_QWORD *)this + 3) = a2;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = a2;
  *((_QWORD *)this + 4) = v7;
  Inspector::TargetBackendDispatcher::create(a3, (Inspector::InspectorTargetAgent *)((char *)this + 16), (uint64_t *)this + 5);
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  return this;
}

{
  uint64_t v6;
  _QWORD *v7;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)(v6 + 8) = "Target";
  *(_DWORD *)(v6 + 16) = 4;
  *(_QWORD *)v6 = 0x600000002;
  *(_QWORD *)this = off_1E3594CA8;
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = &unk_1E3594D00;
  *((_QWORD *)this + 3) = a2;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = a2;
  *((_QWORD *)this + 4) = v7;
  Inspector::TargetBackendDispatcher::create(a3, (Inspector::InspectorTargetAgent *)((char *)this + 16), (uint64_t *)this + 5);
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  return this;
}

void Inspector::InspectorTargetAgent::~InspectorTargetAgent(Inspector::InspectorTargetAgent *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;

  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v10)
    {
      v11 = (WTF::StringImpl **)*((_QWORD *)this + 6);
      do
      {
        v12 = *v11;
        if (*v11 != (WTF::StringImpl *)-1)
        {
          *v11 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
            {
              WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
            }
            else
            {
              *(_DWORD *)v12 -= 2;
            }
          }
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v21 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  v22 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v22)
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(this, a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::InspectorTargetAgent::~InspectorTargetAgent(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void `non-virtual thunk to'Inspector::InspectorTargetAgent::~InspectorTargetAgent(Inspector::InspectorTargetAgent *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorTargetAgent::~InspectorTargetAgent((Inspector::InspectorTargetAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::InspectorTargetAgent::~InspectorTargetAgent((Inspector::InspectorTargetAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void Inspector::InspectorTargetAgent::didCreateFrontendAndBackend(Inspector::InspectorTargetAgent *this, Inspector::FrontendRouter *a2, Inspector::BackendDispatcher *a3)
{
  *((_BYTE *)this + 56) = 1;
  Inspector::InspectorTargetAgent::connectToTargets(this);
}

void Inspector::InspectorTargetAgent::connectToTargets(Inspector::InspectorTargetAgent *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  const Inspector::InspectorTarget *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  _QWORD *v25;
  WTF *v26;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = (_QWORD *)(v2 + 16 * v3);
    if (*(_DWORD *)(v2 - 12))
    {
      v5 = (_QWORD *)*((_QWORD *)this + 6);
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = (_QWORD *)*((_QWORD *)this + 6);
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v5 = (_QWORD *)(v2 + 16 * v3);
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = (_QWORD *)(v2 + 16 * v3);
  if (v2)
  {
LABEL_8:
    v7 = (_QWORD *)(v2 + 16 * *(unsigned int *)(v2 - 4));
    goto LABEL_13;
  }
  v7 = 0;
LABEL_13:
  while (v5 != v7)
  {
    v8 = (const Inspector::InspectorTarget *)v5[1];
    v9 = *((_QWORD *)this + 3);
    v10 = *(unsigned int *)(v9 + 20);
    if ((_DWORD)v10)
    {
      v11 = *(uint64_t **)(v9 + 8);
      v12 = 8 * v10 - 8;
      do
      {
        v13 = *v11++;
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        if ((v14 & 1) != 0)
          break;
        v15 = v12;
        v12 -= 8;
      }
      while (v15);
    }
    else
    {
      v14 = 0;
    }
    (*(void (**)(const Inspector::InspectorTarget *, uint64_t))(*(_QWORD *)v8 + 40))(v8, v14);
    v16 = (uint64_t *)*((_QWORD *)this + 4);
    Inspector::buildTargetInfoObject((Inspector *)&v26, v8);
    Inspector::TargetFrontendDispatcher::targetCreated(v16, &v26);
    v24 = v26;
    v26 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        WTF::JSONImpl::Value::operator delete(v24, v17, v18, v19, v20, v21, v22, v23);
      else
        --*(_DWORD *)v24;
    }
    v25 = v5 + 2;
    v5 = v4;
    if (v25 != v4)
    {
      v5 = v25;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
}

uint64_t Inspector::InspectorTargetAgent::willDestroyFrontendAndBackend(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = result;
  v2 = *(_QWORD *)(result + 48);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = v2 + 16 * v3;
    if (*(_DWORD *)(v2 - 12))
    {
      v5 = *(_QWORD *)(result + 48);
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = *(_QWORD *)(result + 48);
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 16;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v5 = v2 + 16 * v3;
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = v2 + 16 * v3;
  if (v2)
  {
LABEL_8:
    v7 = v2 + 16 * *(unsigned int *)(v2 - 4);
    goto LABEL_13;
  }
  v7 = 0;
LABEL_13:
  while (v5 != v7)
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 48))(*(_QWORD *)(v5 + 8));
    v8 = v5 + 16;
    v5 = v4;
    if (v8 != v4)
    {
      v5 = v8;
      while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
      {
        v5 += 16;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  *(_WORD *)(v1 + 56) = 0;
  return result;
}

uint64_t Inspector::InspectorTargetAgent::disconnectFromTargets(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(this + 48);
  if (v1)
  {
    v2 = *(unsigned int *)(v1 - 4);
    v3 = v1 + 16 * v2;
    if (*(_DWORD *)(v1 - 12))
    {
      v4 = *(_QWORD *)(this + 48);
      if ((_DWORD)v2)
      {
        v5 = 16 * v2;
        v4 = *(_QWORD *)(this + 48);
        while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
        {
          v4 += 16;
          v5 -= 16;
          if (!v5)
          {
            v4 = v3;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v4 = v1 + 16 * v2;
  }
  else
  {
    v4 = 0;
    v2 = 0;
  }
  v3 = v1 + 16 * v2;
  if (v1)
  {
LABEL_8:
    v6 = v1 + 16 * *(unsigned int *)(v1 - 4);
    goto LABEL_13;
  }
  v6 = 0;
LABEL_13:
  while (v4 != v6)
  {
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 48))(*(_QWORD *)(v4 + 8));
    v7 = v4 + 16;
    v4 = v3;
    if (v7 != v3)
    {
      v4 = v7;
      while ((unint64_t)(*(_QWORD *)v4 + 1) <= 1)
      {
        v4 += 16;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
  return this;
}

uint64_t Inspector::InspectorTargetAgent::setPauseOnStart@<X0>(uint64_t this@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  *(_BYTE *)(this + 57) = a2;
  *a3 = 0;
  a3[8] = 0;
  return this;
}

uint64_t `non-virtual thunk to'Inspector::InspectorTargetAgent::setPauseOnStart@<X0>(uint64_t this@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  *(_BYTE *)(this + 41) = a2;
  *a3 = 0;
  a3[8] = 0;
  return this;
}

uint64_t Inspector::InspectorTargetAgent::resume@<X0>(Inspector::InspectorTargetAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  const char *v17;

  v5 = *((_QWORD *)this + 6);
  if (!v5)
    goto LABEL_15;
  v7 = *(_DWORD *)(v5 - 8);
  v8 = *((_DWORD *)*a2 + 4);
  v9 = v8 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v8 >> 8;
  for (i = 0; ; v9 = ++i + v11)
  {
    v11 = v9 & v7;
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != (WTF *)-1)
    {
      if (!v12)
        goto LABEL_15;
      if (WTF::equal(v12, *a2, a3))
        break;
    }
  }
  v13 = *(_QWORD *)(v5 + 16 * v11 + 8);
  if (!v13)
  {
LABEL_15:
    result = WTF::fastCompactMalloc((WTF *)0x20);
    v16 = 0x2100000002;
    v17 = "Missing target for given targetId";
LABEL_16:
    *(_QWORD *)result = v16;
    *(_QWORD *)(result + 8) = v17;
    *(_DWORD *)(result + 16) = 4;
    *(_QWORD *)a4 = result;
    v15 = 1;
    goto LABEL_17;
  }
  if (!*(_BYTE *)(v13 + 24))
  {
    result = WTF::fastCompactMalloc((WTF *)0x20);
    v16 = 0x2700000002;
    v17 = "Target for given targetId is not paused";
    goto LABEL_16;
  }
  *(_BYTE *)(v13 + 24) = 0;
  result = *(_QWORD *)(v13 + 16);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    result = *(_QWORD *)(v13 + 16);
    *(_QWORD *)(v13 + 16) = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v15 = 0;
  *(_BYTE *)a4 = 0;
LABEL_17:
  *(_BYTE *)(a4 + 8) = v15;
  return result;
}

uint64_t `non-virtual thunk to'Inspector::InspectorTargetAgent::resume@<X0>(Inspector::InspectorTargetAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  return Inspector::InspectorTargetAgent::resume((Inspector::InspectorTargetAgent *)((char *)this - 16), a2, a3, a4);
}

uint64_t Inspector::InspectorTargetAgent::sendMessageToTarget@<X0>(Inspector::InspectorTargetAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t result;
  char v16;

  v5 = *((_QWORD *)this + 6);
  if (!v5)
    goto LABEL_11;
  v8 = *(_DWORD *)(v5 - 8);
  v9 = *((_DWORD *)*a2 + 4);
  v10 = v9 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v9 >> 8;
  for (i = 0; ; v10 = ++i + v12)
  {
    v12 = v10 & v8;
    v13 = *(WTF **)(v5 + 16 * v12);
    if (v13 != (WTF *)-1)
    {
      if (!v13)
        goto LABEL_11;
      if (WTF::equal(v13, *a2, a3))
        break;
    }
  }
  v14 = *(_QWORD *)(v5 + 16 * v12 + 8);
  if (v14)
  {
    result = (*(uint64_t (**)(uint64_t, const WTF::String *))(*(_QWORD *)v14 + 56))(v14, a3);
    v16 = 0;
    *a4 = 0;
  }
  else
  {
LABEL_11:
    result = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)result = 0x2100000002;
    *(_QWORD *)(result + 8) = "Missing target for given targetId";
    *(_DWORD *)(result + 16) = 4;
    *(_QWORD *)a4 = result;
    v16 = 1;
  }
  a4[8] = v16;
  return result;
}

uint64_t `non-virtual thunk to'Inspector::InspectorTargetAgent::sendMessageToTarget@<X0>(Inspector::InspectorTargetAgent *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::String *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v5;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int i;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t result;
  char v16;

  v5 = *((_QWORD *)this + 4);
  if (!v5)
    goto LABEL_11;
  v8 = *(_DWORD *)(v5 - 8);
  v9 = *((_DWORD *)*a2 + 4);
  v10 = v9 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v9 >> 8;
  for (i = 0; ; v10 = ++i + v12)
  {
    v12 = v10 & v8;
    v13 = *(WTF **)(v5 + 16 * v12);
    if (v13 != (WTF *)-1)
    {
      if (!v13)
        goto LABEL_11;
      if (WTF::equal(v13, *a2, a3))
        break;
    }
  }
  v14 = *(_QWORD *)(v5 + 16 * v12 + 8);
  if (v14)
  {
    result = (*(uint64_t (**)(uint64_t, const WTF::String *))(*(_QWORD *)v14 + 56))(v14, a3);
    v16 = 0;
    *a4 = 0;
  }
  else
  {
LABEL_11:
    result = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)result = 0x2100000002;
    *(_QWORD *)(result + 8) = "Missing target for given targetId";
    *(_DWORD *)(result + 16) = 4;
    *(_QWORD *)a4 = result;
    v16 = 1;
  }
  a4[8] = v16;
  return result;
}

void Inspector::InspectorTargetAgent::sendMessageFromTargetToFrontend(Inspector::TargetFrontendDispatcher **this, const WTF::String *a2, const WTF::String *a3)
{
  Inspector::TargetFrontendDispatcher::dispatchMessageFromTarget(this[4], a2, a3);
}

void Inspector::InspectorTargetAgent::targetCreated(Inspector::InspectorTargetAgent *this, Inspector::InspectorTarget *a2)
{
  WTF::AtomStringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  WTF **v16;
  int i;
  uint64_t v18;
  WTF **v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;

  (*(void (**)(WTF::StringImpl **__return_ptr, Inspector::InspectorTarget *))(*(_QWORD *)a2 + 16))(&v63, a2);
  v11 = (uint64_t *)((char *)this + 48);
  v12 = *((_QWORD *)this + 6);
  if (v12
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,void const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,void const*>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,void const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this + 6, 8uLL, 0, v6, v7, v8, v9, v10), (v12 = *v11) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_DWORD *)v63 + 4);
  if (v14 < 0x100)
    v15 = WTF::StringImpl::hashSlowCase(v63);
  else
    v15 = v14 >> 8;
  v16 = 0;
  for (i = 1; ; ++i)
  {
    v18 = v15 & v13;
    v19 = (WTF **)(v12 + 16 * v18);
    v20 = *v19;
    if (*v19 == (WTF *)-1)
    {
      v16 = (WTF **)(v12 + 16 * v18);
      goto LABEL_12;
    }
    if (!v20)
      break;
    if (WTF::equal(v20, v63, v5))
    {
      *(_QWORD *)(v12 + 16 * v18 + 8) = a2;
      goto LABEL_32;
    }
LABEL_12:
    v15 = i + v18;
  }
  if (v16)
  {
    *v16 = 0;
    v16[1] = 0;
    --*(_DWORD *)(*v11 - 16);
    v19 = v16;
  }
  v21 = v63;
  v63 = 0;
  v22 = *v19;
  *v19 = v21;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v4, (uint64_t)v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  v19[1] = a2;
  v23 = *v11;
  if (*v11)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_27:
      v29 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
      goto LABEL_31;
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    if ((_DWORD)v28)
      goto LABEL_27;
    v29 = 8;
LABEL_31:
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,void const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,void const*>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,void const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this + 6, v29, (uint64_t)v19, v6, v7, v8, v9, v10);
  }
LABEL_32:
  v30 = v63;
  v63 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::~StringImpl(v30, v4, (uint64_t)v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  if (*((_BYTE *)this + 56))
  {
    if (*((_BYTE *)this + 57))
      *((_BYTE *)a2 + 24) = 1;
    v31 = *((_QWORD *)this + 3);
    v32 = *(unsigned int *)(v31 + 20);
    if ((_DWORD)v32)
    {
      v33 = *(uint64_t **)(v31 + 8);
      v34 = 8 * v32 - 8;
      do
      {
        v35 = *v33++;
        v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        if ((v36 & 1) != 0)
          break;
        v37 = v34;
        v34 -= 8;
      }
      while (v37);
    }
    else
    {
      v36 = 0;
    }
    (*(void (**)(Inspector::InspectorTarget *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v36);
    v38 = (uint64_t *)*((_QWORD *)this + 4);
    Inspector::buildTargetInfoObject((Inspector *)&v63, a2);
    Inspector::TargetFrontendDispatcher::targetCreated(v38, &v63);
    v46 = v63;
    v63 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 1)
        WTF::JSONImpl::Value::operator delete(v46, v39, v40, v41, v42, v43, v44, v45);
      else
        --*(_DWORD *)v46;
    }
  }
}

uint64_t Inspector::InspectorTargetAgent::connectionType(Inspector::InspectorTargetAgent *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v1 = *((_QWORD *)this + 3);
  v2 = *(unsigned int *)(v1 + 20);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(uint64_t **)(v1 + 8);
  v4 = 8 * v2 - 8;
  do
  {
    v5 = *v3++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    if ((result & 1) != 0)
      break;
    v7 = v4;
    v4 -= 8;
  }
  while (v7);
  return result;
}

void Inspector::buildTargetInfoObject(Inspector *this, const Inspector::InspectorTarget *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  char *v32;
  int v33;
  char *v34;
  int *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  WTF *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::AtomStringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  WTF *v94;
  WTF::StringImpl *v95;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD **v144;
  uint64_t v145;
  _DWORD *v146;
  _DWORD **v147;
  uint64_t v148;
  _DWORD *v149;
  _DWORD **v150;
  uint64_t v151;
  _DWORD *v152;
  _DWORD **v153;
  uint64_t v154;
  _DWORD *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF *v158;
  _BYTE v159[16];
  char v160;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v4 = 0x500000001;
  *(_QWORD *)(v4 + 16) = 0;
  v5 = (uint64_t *)(v4 + 16);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  (*(void (**)(WTF::StringImpl **__return_ptr, const Inspector::InspectorTarget *))(*(_QWORD *)a2 + 16))(&v156, a2);
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x800000002;
  *(_QWORD *)(v6 + 8) = "targetId";
  *(_DWORD *)(v6 + 16) = 4;
  v157 = (WTF::StringImpl *)v6;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x400000001;
  v13 = v156;
  *((_QWORD *)v7 + 1) = v156;
  if (v13)
    *(_DWORD *)v13 += 2;
  v158 = v7;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v5, (WTF::AtomStringImpl *)&v157, (const WTF::StringImpl *)&v158, v8, v9, v10, v11, v12, (uint64_t)v159);
  if (v160)
  {
    v21 = (uint64_t *)(v4 + 24);
    v22 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v22 == *(_DWORD *)(v4 + 32))
    {
      v144 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, v22 + 1, (unint64_t)&v157);
      v22 = *(unsigned int *)(v4 + 36);
      v145 = *(_QWORD *)(v4 + 24);
      v146 = *v144;
      if (*v144)
        *v146 += 2;
      *(_QWORD *)(v145 + 8 * v22) = v146;
    }
    else
    {
      v23 = *v21;
      v24 = v157;
      if (v157)
        *(_DWORD *)v157 += 2;
      *(_QWORD *)(v23 + 8 * v22) = v24;
    }
    *(_DWORD *)(v4 + 36) = v22 + 1;
  }
  v25 = v158;
  v158 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
      WTF::JSONImpl::Value::operator delete(v25, v14, v15, v16, v17, v18, v19, v20);
    else
      --*(_DWORD *)v25;
  }
  v26 = v157;
  v157 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  v27 = (*(uint64_t (**)(const Inspector::InspectorTarget *))(*(_QWORD *)a2 + 24))(a2);
  if (v27 == 1)
    v28 = 262;
  else
    v28 = 133;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x400000002;
  *(_QWORD *)(v29 + 8) = "type";
  *(_DWORD *)(v29 + 16) = 4;
  v157 = (WTF::StringImpl *)v29;
  v30 = 181;
  if (v27 != 2)
    v30 = v28;
  v31 = &(&Inspector::Protocol::Helpers::enum_constant_values)[2 * v30];
  v32 = v31[1];
  if (v32)
  {
    v33 = (_DWORD)v32 - 1;
    if (v32 == (char *)1)
    {
      v35 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v34 = *v31;
      v35 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
      *v35 = 2;
      v35[1] = v33;
      *((_QWORD *)v35 + 1) = v34;
      v35[4] = 4;
    }
  }
  else
  {
    v35 = 0;
  }
  v36 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v36 = 0x400000001;
  *((_QWORD *)v36 + 1) = v35;
  if (v35)
    *v35 += 2;
  v158 = v36;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v5, (WTF::AtomStringImpl *)&v157, (const WTF::StringImpl *)&v158, v37, v38, v39, v40, v41, (uint64_t)v159);
  if (v160)
  {
    v49 = (uint64_t *)(v4 + 24);
    v50 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v50 == *(_DWORD *)(v4 + 32))
    {
      v147 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, v50 + 1, (unint64_t)&v157);
      v50 = *(unsigned int *)(v4 + 36);
      v148 = *(_QWORD *)(v4 + 24);
      v149 = *v147;
      if (*v147)
        *v149 += 2;
      *(_QWORD *)(v148 + 8 * v50) = v149;
    }
    else
    {
      v51 = *v49;
      v52 = v157;
      if (v157)
        *(_DWORD *)v157 += 2;
      *(_QWORD *)(v51 + 8 * v50) = v52;
    }
    *(_DWORD *)(v4 + 36) = v50 + 1;
  }
  v53 = v158;
  v158 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 1)
    {
      WTF::JSONImpl::Value::operator delete(v53, v42, v43, v44, v45, v46, v47, v48);
      if (!v35)
        goto LABEL_37;
      goto LABEL_35;
    }
    --*(_DWORD *)v53;
  }
  if (!v35)
    goto LABEL_37;
LABEL_35:
  if (*v35 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, v42, v43, v44, v45, v46, v47, v48);
    WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
  }
  else
  {
    *v35 -= 2;
  }
LABEL_37:
  v54 = v157;
  v157 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
    {
      WTF::StringImpl::~StringImpl(v54, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v54 -= 2;
    }
  }
  *(_QWORD *)this = v4;
  v55 = v156;
  v156 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, v42, v43, v44, v45, v46, v47, v48);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
  }
  if ((*(unsigned int (**)(const Inspector::InspectorTarget *))(*(_QWORD *)a2 + 32))(a2))
  {
    v56 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v56 = 0xD00000002;
    *(_QWORD *)(v56 + 8) = "isProvisional";
    *(_DWORD *)(v56 + 16) = 4;
    v157 = (WTF::StringImpl *)v56;
    v57 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v57 = 0x100000001;
    *((_BYTE *)v57 + 8) = 1;
    v158 = v57;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v5, (WTF::AtomStringImpl *)&v157, (const WTF::StringImpl *)&v158, v58, v59, v60, v61, v62, (uint64_t)v159);
    if (v160)
    {
      v70 = (uint64_t *)(v4 + 24);
      v71 = *(unsigned int *)(v4 + 36);
      if ((_DWORD)v71 == *(_DWORD *)(v4 + 32))
      {
        v153 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v70, v71 + 1, (unint64_t)&v157);
        v71 = *(unsigned int *)(v4 + 36);
        v154 = *(_QWORD *)(v4 + 24);
        v155 = *v153;
        if (*v153)
          *v155 += 2;
        *(_QWORD *)(v154 + 8 * v71) = v155;
      }
      else
      {
        v72 = *v70;
        v73 = v157;
        if (v157)
          *(_DWORD *)v157 += 2;
        *(_QWORD *)(v72 + 8 * v71) = v73;
      }
      *(_DWORD *)(v4 + 36) = v71 + 1;
    }
    v74 = v158;
    v158 = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 1)
        WTF::JSONImpl::Value::operator delete(v74, v63, v64, v65, v66, v67, v68, v69);
      else
        --*(_DWORD *)v74;
    }
    v75 = v157;
    v157 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
      {
        WTF::StringImpl::~StringImpl(v75, v63, v64, v65, v66, v67, v68, v69);
        WTF::fastFree(v136, v137, v138, v139, v140, v141, v142, v143);
      }
      else
      {
        *(_DWORD *)v75 -= 2;
      }
    }
  }
  if (*((_BYTE *)a2 + 24))
  {
    v76 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v76 = 0x800000002;
    *(_QWORD *)(v76 + 8) = "isPaused";
    *(_DWORD *)(v76 + 16) = 4;
    v157 = (WTF::StringImpl *)v76;
    v77 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v77 = 0x100000001;
    *((_BYTE *)v77 + 8) = 1;
    v158 = v77;
    WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v5, (WTF::AtomStringImpl *)&v157, (const WTF::StringImpl *)&v158, v78, v79, v80, v81, v82, (uint64_t)v159);
    if (v160)
    {
      v90 = (uint64_t *)(v4 + 24);
      v91 = *(unsigned int *)(v4 + 36);
      if ((_DWORD)v91 == *(_DWORD *)(v4 + 32))
      {
        v150 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v90, v91 + 1, (unint64_t)&v157);
        v91 = *(unsigned int *)(v4 + 36);
        v151 = *(_QWORD *)(v4 + 24);
        v152 = *v150;
        if (*v150)
          *v152 += 2;
        *(_QWORD *)(v151 + 8 * v91) = v152;
      }
      else
      {
        v92 = *v90;
        v93 = v157;
        if (v157)
          *(_DWORD *)v157 += 2;
        *(_QWORD *)(v92 + 8 * v91) = v93;
      }
      *(_DWORD *)(v4 + 36) = v91 + 1;
    }
    v94 = v158;
    v158 = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 1)
        WTF::JSONImpl::Value::operator delete(v94, v83, v84, v85, v86, v87, v88, v89);
      else
        --*(_DWORD *)v94;
    }
    v95 = v157;
    v157 = 0;
    if (v95)
    {
      if (*(_DWORD *)v95 == 2)
      {
        WTF::StringImpl::~StringImpl(v95, v83, v84, v85, v86, v87, v88, v89);
        WTF::fastFree(v128, v129, v130, v131, v132, v133, v134, v135);
      }
      else
      {
        *(_DWORD *)v95 -= 2;
      }
    }
  }
}

void Inspector::InspectorTargetAgent::targetDestroyed(Inspector::InspectorTargetAgent *this, Inspector::InspectorTarget *a2)
{
  WTF::AtomStringImpl *v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl ***v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  WTF::StringImpl **v23;
  int v24;
  WTF::StringImpl **v25;
  unsigned int v26;
  unsigned int v27;
  WTF::StringImpl *v29;
  Inspector::TargetFrontendDispatcher *v30;
  WTF::AtomStringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;

  (*(void (**)(WTF::StringImpl **__return_ptr, Inspector::InspectorTarget *))(*(_QWORD *)a2 + 16))(&v63, a2);
  v11 = (WTF::StringImpl ***)((char *)this + 48);
  v12 = *((_QWORD *)this + 6);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v14 = *((_DWORD *)v63 + 4);
    if (v14 < 0x100)
      v15 = WTF::StringImpl::hashSlowCase(v63);
    else
      v15 = v14 >> 8;
    for (i = 0; ; v15 = i + v17)
    {
      v17 = v15 & v13;
      v18 = *(WTF **)(v12 + 16 * v17);
      if (v18 != (WTF *)-1)
      {
        if (!v18)
        {
          v19 = *v11;
          if (!*v11)
            goto LABEL_29;
          v20 = *((unsigned int *)v19 - 1);
          v21 = &v19[2 * v20];
          goto LABEL_13;
        }
        if (WTF::equal(v18, v63, v5))
          break;
      }
      ++i;
    }
    v21 = (WTF::StringImpl **)(v12 + 16 * v17);
    v19 = *v11;
    if (!*v11)
      goto LABEL_14;
    v20 = *((unsigned int *)v19 - 1);
LABEL_13:
    v19 += 2 * v20;
    if (v19 == v21)
      goto LABEL_29;
LABEL_14:
    if (v19 != v21)
    {
      v22 = *v21;
      *v21 = (WTF::StringImpl *)-1;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::~StringImpl(v22, v4, (uint64_t)v5, v6, v7, v8, v9, v10);
          WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
        }
        else
        {
          *(_DWORD *)v22 -= 2;
        }
      }
      ++*((_DWORD *)*v11 - 4);
      v23 = *v11;
      if (*v11)
        v24 = *((_DWORD *)v23 - 3) - 1;
      else
        v24 = -1;
      *((_DWORD *)v23 - 3) = v24;
      v25 = *v11;
      if (*v11)
      {
        v26 = 6 * *((_DWORD *)v25 - 3);
        v27 = *((_DWORD *)v25 - 1);
        if (v26 < v27 && v27 >= 9)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,void const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,void const*>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,void const*,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<void const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)this + 6, v27 >> 1, 0, v6, v7, v8, v9, v10);
      }
    }
  }
LABEL_29:
  v29 = v63;
  v63 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v4, (uint64_t)v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  if (*((_BYTE *)this + 56))
  {
    v30 = (Inspector::TargetFrontendDispatcher *)*((_QWORD *)this + 4);
    (*(void (**)(WTF::StringImpl **__return_ptr, Inspector::InspectorTarget *))(*(_QWORD *)a2 + 16))(&v63, a2);
    Inspector::TargetFrontendDispatcher::targetDestroyed(v30, (const WTF::String *)&v63);
    v38 = v63;
    v63 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::~StringImpl(v38, v31, v32, v33, v34, v35, v36, v37);
        WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
      }
      else
      {
        *(_DWORD *)v38 -= 2;
      }
    }
  }
}

void Inspector::InspectorTargetAgent::didCommitProvisionalTarget(Inspector::InspectorTargetAgent *this, const WTF::String *a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  WTF *v12;

  if (*((_BYTE *)this + 56))
  {
    v4 = *((_QWORD *)this + 6);
    if (v4)
    {
      v7 = *(_DWORD *)(v4 - 8);
      v8 = *((_DWORD *)*a3 + 4);
      if (v8 < 0x100)
        v9 = WTF::StringImpl::hashSlowCase(*a3);
      else
        v9 = v8 >> 8;
      for (i = 0; ; v9 = i + v11)
      {
        v11 = v9 & v7;
        v12 = *(WTF **)(v4 + 16 * v11);
        if (v12 != (WTF *)-1)
        {
          if (!v12)
            return;
          if (WTF::equal(v12, *a3, (const WTF::StringImpl *)a3))
            break;
        }
        ++i;
      }
      if (*(_QWORD *)(v4 + 16 * v11 + 8))
        Inspector::TargetFrontendDispatcher::didCommitProvisionalTarget(*((Inspector::TargetFrontendDispatcher **)this + 4), a2, (const WTF::String *)a3);
    }
  }
}

void Inspector::JSGlobalObjectAuditAgent::~JSGlobalObjectAuditAgent(Inspector::JSGlobalObjectAuditAgent *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  *(_QWORD *)this = off_1E3594370;
  *((_QWORD *)this + 2) = &unk_1E35943E8;
  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    v20 = (uint64_t *)(v9 - 16);
    v21 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v22 = *(uint64_t **)(v9 - 8);
    if (v22)
    {
      v23 = *v20;
      *v22 = *v20;
      *(_QWORD *)(v23 + 8) = v22;
      *v20 = 0;
      v20[1] = 0;
    }
    *v20 = *(_QWORD *)(v21 + 40);
    *(_QWORD *)(v21 + 40) = v20;
    *((_QWORD *)this + 6) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3594420;
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
}

{
  uint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  *(_QWORD *)this = off_1E3594370;
  *((_QWORD *)this + 2) = &unk_1E35943E8;
  v9 = *((_QWORD *)this + 6);
  if (v9)
  {
    v20 = (uint64_t *)(v9 - 16);
    v21 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v22 = *(uint64_t **)(v9 - 8);
    if (v22)
    {
      v23 = *v20;
      *v22 = *v20;
      *(_QWORD *)(v23 + 8) = v22;
      *v20 = 0;
      v20[1] = 0;
    }
    *v20 = *(_QWORD *)(v21 + 40);
    *(_QWORD *)(v21 + 40) = v20;
    *((_QWORD *)this + 6) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E3594420;
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void `non-virtual thunk to'Inspector::JSGlobalObjectAuditAgent::~JSGlobalObjectAuditAgent(Inspector::JSGlobalObjectAuditAgent *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  *((_QWORD *)this - 2) = off_1E3594370;
  *(_QWORD *)this = &unk_1E35943E8;
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    v20 = (uint64_t *)(v9 - 16);
    v21 = *(_QWORD *)(((v9 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v22 = *(uint64_t **)(v9 - 8);
    if (v22)
    {
      v23 = *v20;
      *v22 = *v20;
      *(_QWORD *)(v23 + 8) = v22;
      *v20 = 0;
      v20[1] = 0;
    }
    *v20 = *(_QWORD *)(v21 + 40);
    *(_QWORD *)(v21 + 40) = v20;
    *((_QWORD *)this + 4) = 0;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this - 1);
  *((_QWORD *)this - 2) = off_1E3594420;
  *((_QWORD *)this - 1) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
}

{
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  *((_QWORD *)this - 2) = off_1E3594370;
  v9 = (char *)this - 16;
  *(_QWORD *)this = &unk_1E35943E8;
  v10 = *((_QWORD *)this + 4);
  if (v10)
  {
    v21 = (uint64_t *)(v10 - 16);
    v22 = *(_QWORD *)(((v10 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v23 = *(uint64_t **)(v10 - 8);
    if (v23)
    {
      v24 = *v21;
      *v23 = *v21;
      *(_QWORD *)(v24 + 8) = v23;
      *v21 = 0;
      v21[1] = 0;
    }
    *v21 = *(_QWORD *)(v22 + 40);
    *(_QWORD *)(v22 + 40) = v21;
    *((_QWORD *)this + 4) = 0;
  }
  v11 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this - 1);
  *((_QWORD *)this - 2) = off_1E3594420;
  *((_QWORD *)this - 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::JSGlobalObjectAuditAgent::injectedScriptForEval(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _QWORD *v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (*(_BYTE *)(a3 + 4))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v18 = 0x5900000002;
    *(_QWORD *)(v18 + 8) = "executionContextId is not supported for JSContexts as there is only one execution context";
    *(_DWORD *)(v18 + 16) = 4;
    v19 = *a2;
    *a2 = (WTF::StringImpl *)v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    v20 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)(v20 + 4) = 14;
    *(_QWORD *)(v20 + 8) = "InjectedScript";
    *(_DWORD *)(v20 + 16) = 4;
    a9[3] = 0;
    a9[4] = 0;
    a9[2] = 0;
    *(_DWORD *)v20 = 2;
    *a9 = &off_1E3591330;
    a9[1] = v20;
  }
  else
  {
    Inspector::InjectedScriptManager::injectedScriptFor(*(_QWORD *)(a1 + 32), *(JSC::JSGlobalObject **)(a1 + 56), a3, a4, a5, a6, a7, a8, (uint64_t)a9);
    v21 = (_QWORD *)a9[3];
    if (!v21 || !*v21)
    {
      v29 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v29 = 0x3600000002;
      *(_QWORD *)(v29 + 8) = "Internal error: main world execution context not found";
      *(_DWORD *)(v29 + 16) = 4;
      v30 = *a2;
      *a2 = (WTF::StringImpl *)v29;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::~StringImpl(v30, v22, v23, v24, v25, v26, v27, v28);
          WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
        }
        else
        {
          *(_DWORD *)v30 -= 2;
        }
      }
    }
  }
}

void `non-virtual thunk to'Inspector::JSGlobalObjectDebuggerAgent::~JSGlobalObjectDebuggerAgent(Inspector::JSGlobalObjectDebuggerAgent *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent((Inspector::JSGlobalObjectDebuggerAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

{
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent((Inspector::JSGlobalObjectDebuggerAgent *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8);
}

{
  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent((Inspector::JSGlobalObjectDebuggerAgent *)((char *)this - 32), a2, a3, a4, a5, a6, a7, a8);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent((Inspector::JSGlobalObjectDebuggerAgent *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent((Inspector::JSGlobalObjectDebuggerAgent *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent((Inspector::JSGlobalObjectDebuggerAgent *)((char *)this - 32), a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

void Inspector::JSGlobalObjectDebuggerAgent::~JSGlobalObjectDebuggerAgent(Inspector::JSGlobalObjectDebuggerAgent *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  Inspector::InspectorDebuggerAgent::~InspectorDebuggerAgent(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t Inspector::JSGlobalObjectDebuggerAgent::injectedScriptForEval@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t result;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (!*(_BYTE *)(a3 + 4))
    return Inspector::InjectedScriptManager::injectedScriptFor(*(_QWORD *)(a1 + 64), *(JSC::JSGlobalObject **)(*(_QWORD *)(a1 + 56) + 232), a3, a4, a5, a6, a7, a8, (uint64_t)a9);
  v18 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v18 = 0x5900000002;
  *(_QWORD *)(v18 + 8) = "executionContextId is not supported for JSContexts as there is only one execution context";
  *(_DWORD *)(v18 + 16) = 4;
  v19 = *a2;
  *a2 = (WTF::StringImpl *)v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  result = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)(result + 4) = 14;
  *(_QWORD *)(result + 8) = "InjectedScript";
  *(_DWORD *)(result + 16) = 4;
  a9[3] = 0;
  a9[4] = 0;
  a9[2] = 0;
  *(_DWORD *)result = 2;
  *a9 = &off_1E3591330;
  a9[1] = result;
  return result;
}

void Inspector::JSGlobalObjectDebuggerAgent::breakpointActionLog(Inspector::JSGlobalObjectDebuggerAgent *this, JSC::VM **a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  Inspector::ConsoleMessage *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Inspector::ConsoleMessage *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Inspector::ScriptCallStack *v35;
  Inspector::ScriptCallStack *v36;
  Inspector::ConsoleMessage *v37;

  v10 = *((_QWORD *)this + 32);
  Inspector::createScriptCallStack(a2, (JSC::JSGlobalObject *)0xC8, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t *)&v36, a9);
  v11 = (Inspector::ConsoleMessage *)WTF::fastMalloc((WTF *)0x60);
  if (*(_BYTE *)(Inspector::ConsoleMessage::ConsoleMessage((uint64_t)v11, 1, 0, 0, (_DWORD **)a3, (uint64_t *)&v36, 0, 0.0)+ 1) == 8)Inspector::InspectorConsoleAgent::clearMessages(v10, (WTF::AtomStringImpl *)0x54, (uint64_t)v12, v13, v14, v15, v16, v17);
  v37 = v11;
  Inspector::InspectorConsoleAgent::addConsoleMessage(v10, (WTF::AtomStringImpl *)&v37, v12, v13, v14, v15, v16, v17, v18);
  v26 = v37;
  v37 = 0;
  if (v26)
  {
    Inspector::ConsoleMessage::~ConsoleMessage(v26, v19, v20, v21, v22, v23, v24, v25);
    WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
  }
  v35 = v36;
  v36 = 0;
  if (v35)
    WTF::RefCounted<Inspector::ScriptCallStack>::deref(v35);
}

void `non-virtual thunk to'Inspector::JSGlobalObjectDebuggerAgent::breakpointActionLog(Inspector::JSGlobalObjectDebuggerAgent *this, JSC::VM **a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  Inspector::JSGlobalObjectDebuggerAgent::breakpointActionLog((Inspector::JSGlobalObjectDebuggerAgent *)((char *)this - 32), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t Inspector::InspectorDebuggerAgent::enabled(Inspector::InspectorDebuggerAgent *this)
{
  return *((unsigned __int8 *)this + 248);
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t StatusReg;
  WTF::StringImpl **v11;
  uint64_t v12;
  unint64_t **v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;

  v8 = a1;
  v45 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v45)
  {
    v9 = 0;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v11 = (WTF::StringImpl **)(v8 + 24 * v9);
      if (*v11 != (WTF::StringImpl *)-1)
      {
        v12 = v8 + 24 * v9;
        v13 = (unint64_t **)(v12 + 8);
        v14 = *(unsigned int *)(v12 + 20);
        if ((_DWORD)v14)
        {
          v15 = *v13;
          v16 = (uint64_t)&(*v13)[v14];
          do
          {
            v17 = *v15;
            *v15 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 1)
              {
                v18 = *(unsigned int *)(v17 + 52);
                if (!(_DWORD)v18)
                {
LABEL_30:
                  v24 = *(_QWORD *)(v17 + 40);
                  if (v24)
                  {
                    *(_QWORD *)(v17 + 40) = 0;
                    *(_DWORD *)(v17 + 48) = 0;
                    WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
                  }
                  v25 = *(WTF::StringImpl **)(v17 + 32);
                  *(_QWORD *)(v17 + 32) = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v25, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
                    }
                    else
                    {
                      *(_DWORD *)v25 -= 2;
                    }
                  }
                  WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
                  goto LABEL_9;
                }
                v19 = 24 * v18;
                v20 = (unint64_t *)(*(_QWORD *)(v17 + 40) + 8);
                while (2)
                {
                  v21 = *v20;
                  *v20 = 0;
                  if (v21)
                  {
                    if (*(_DWORD *)v21 != 2)
                    {
                      *(_DWORD *)v21 -= 2;
                      goto LABEL_16;
                    }
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                    v22 = *(_QWORD *)(StatusReg + 752);
                    if (v22)
                    {
                      if (v21 >> 43
                        || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v21 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v21)) & 1) == 0)
                      {
                        if (v21 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v21 >> 24)
                        {
                          a4 = 0;
                        }
                        else
                        {
                          a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                          + ((((v21 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                          + 24) >> (2 * ((BYTE3(v21) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                          if ((_DWORD)a4 == 1)
                            goto LABEL_21;
                        }
                        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v22, v21, 1, a4, a5, a6, a7, a8);
                      }
                      else
                      {
LABEL_21:
                        v23 = *(unsigned int *)(v22 + 8000);
                        if (v23 >= 0x3E7)
                        {
                          pas_thread_local_cache_append_deallocation_slow(v22, v21, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                        }
                        else
                        {
                          *(_QWORD *)(v22 + 8 * v23) = v21 | 0x5000000000000;
                          *(_DWORD *)(v22 + 8000) = v23 + 1;
                        }
                      }
                    }
                    else
                    {
                      pas_try_deallocate_slow_no_cache(v21, (uint64_t)&bmalloc_heap_config, 1);
                    }
                  }
LABEL_16:
                  v20 += 3;
                  v19 -= 24;
                  if (!v19)
                    goto LABEL_30;
                  continue;
                }
              }
              --*(_DWORD *)v17;
            }
LABEL_9:
            ++v15;
          }
          while (v15 != (unint64_t *)v16);
        }
        v34 = (unint64_t)*v13;
        v8 = a1;
        if (*v13)
        {
          *v13 = 0;
          *(_DWORD *)(a1 + 24 * v9 + 16) = 0;
          WTF::fastFree(v34, a2, a3, a4, a5, a6, a7, a8);
        }
        v35 = *v11;
        *v11 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl(v35, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
      }
      ++v9;
    }
    while (v9 != v45);
  }
  WTF::fastFree(v8 - 16, a2, a3, a4, a5, a6, a7, a8);
}

void Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::~ProtocolBreakpoint(Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v9 = *((unsigned int *)this + 13);
  if ((_DWORD)v9)
  {
    v10 = 24 * v9;
    v11 = (WTF::StringImpl **)(*((_QWORD *)this + 5) + 8);
    do
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
        }
        else
        {
          *(_DWORD *)v12 -= 2;
        }
      }
      v11 += 3;
      v10 -= 24;
    }
    while (v10);
  }
  v21 = *((_QWORD *)this + 5);
  if (v21)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
}

void JSC::Debugger::Script::~Script(JSC::Debugger::Script *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v9 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  v13 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
}

void Inspector::Protocol::Debugger::Location::setColumnNumber(Inspector::Protocol::Debugger::Location *this, int a2)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD **v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  WTF *v36;
  _BYTE v37[24];

  v4 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v4 = 0xC00000002;
  *(_QWORD *)(v4 + 8) = "columnNumber";
  *(_DWORD *)(v4 + 16) = 4;
  v35 = (WTF::StringImpl *)v4;
  v5 = (double *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = 0x300000001;
  v5[1] = (double)a2;
  v36 = (WTF *)v5;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)this + 2, (WTF::AtomStringImpl *)&v35, (const WTF::StringImpl *)&v36, v6, v7, v8, v9, v10, (uint64_t)v37);
  if (v37[16])
  {
    v18 = (uint64_t *)((char *)this + 24);
    v19 = *((unsigned int *)this + 9);
    if ((_DWORD)v19 == *((_DWORD *)this + 8))
    {
      v32 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v18, v19 + 1, (unint64_t)&v35);
      v19 = *((unsigned int *)this + 9);
      v33 = *((_QWORD *)this + 3);
      v34 = *v32;
      if (*v32)
        *v34 += 2;
      *(_QWORD *)(v33 + 8 * v19) = v34;
    }
    else
    {
      v20 = *v18;
      v21 = v35;
      if (v35)
        *(_DWORD *)v35 += 2;
      *(_QWORD *)(v20 + 8 * v19) = v21;
    }
    *((_DWORD *)this + 9) = v19 + 1;
  }
  v22 = v36;
  v36 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::JSONImpl::Value::operator delete(v22, v11, v12, v13, v14, v15, v16, v17);
    else
      --*(_DWORD *)v22;
  }
  v23 = v35;
  v35 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
}

unint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>@<X0>(unint64_t result@<X0>, unsigned int *a2@<X1>, int **a3@<X8>)
{
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  _BYTE *v10;
  size_t v11;
  int *v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(result + 8);
  v5 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v15 = -v5;
    v6 = 1;
    do
    {
      ++v6;
      v16 = v15 >= 0xA;
      v15 /= 0xAu;
    }
    while (v16);
  }
  else
  {
    v6 = 0;
    v7 = *a2;
    do
    {
      ++v6;
      v8 = v7 > 9;
      v7 /= 0xAu;
    }
    while (v8);
  }
  if ((v6 | v4) < 0)
    goto LABEL_19;
  v9 = (v4 + v6);
  if (__OFADD__(v4, v6))
    goto LABEL_19;
  if (!(_DWORD)v9)
  {
    v12 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_16;
  }
  if ((v9 & 0x80000000) != 0)
  {
LABEL_19:
    v12 = 0;
  }
  else
  {
    v10 = *(_BYTE **)result;
    v11 = *(unsigned int *)(result + 8);
    result = WTF::tryFastCompactMalloc((WTF *)(v9 + 20), v17);
    v12 = (int *)v17[0];
    if (v17[0])
    {
      v13 = (_BYTE *)(v17[0] + 20);
      *(_DWORD *)v17[0] = 2;
      v12[1] = v9;
      *((_QWORD *)v12 + 1) = v12 + 5;
      v12[4] = 4;
      if ((_DWORD)v11 == 1)
      {
        *v13 = *v10;
      }
      else if ((_DWORD)v11)
      {
        result = (unint64_t)memcpy(v12 + 5, v10, v11);
      }
      if ((v5 & 0x80000000) != 0)
      {
        result = WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(-v5, &v13[v11]);
      }
      else
      {
        v14 = 0;
        do
        {
          *((_BYTE *)&v17[1] + v14-- + 4) = (v5 % 0xA) | 0x30;
          v8 = v5 > 9;
          v5 /= 0xAu;
        }
        while (v8);
        if (v14 + 14 <= 13)
          result = (unint64_t)memcpy(&v13[v11], (char *)&v17[1] + v14 + 5, -v14);
      }
    }
  }
LABEL_16:
  *a3 = v12;
  return result;
}

unint64_t WTF::writeIntegerToBufferImpl<unsigned char,unsigned int,(WTF::PositiveOrNegativeNumber)1>(unint64_t result, void *__dst)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v6[13];
  uint64_t v7;

  v2 = 0;
  v7 = *MEMORY[0x1E0C80C00];
  do
  {
    v6[v2-- + 12] = (result % 0xA) | 0x30;
    v3 = result > 9;
    result = result / 0xAuLL;
  }
  while (v3);
  v4 = v2 + 12;
  v5 = &v6[v2 + 12];
  *v5 = 45;
  if (v2 + 14 <= 14)
  {
    if (v4 <= 12)
      v4 = 12;
    return (unint64_t)memcpy(__dst, v5, v4 - v2 - 11);
  }
  return result;
}

void Inspector::ReplacedThunk::~ReplacedThunk(uint64_t **this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v9 = *this;
  if (*this && *v9 && (v9[1] & 3) == 0)
  {
    _ZZN9Inspector13ReplacedThunkD1EvENKUlN3JSC22CodeSpecializationKindEE_clES2_(this, 0);
    _ZZN9Inspector13ReplacedThunkD1EvENKUlN3JSC22CodeSpecializationKindEE_clES2_(this, 1);
  }
  v10 = (unsigned int *)this[5];
  this[5] = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  v13 = (unsigned int *)this[2];
  this[2] = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v13, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  if (*this)
  {
    (*this)[1] = 3;
    *this = 0;
  }
}

void _ZZN9Inspector13ReplacedThunkD1EvENKUlN3JSC22CodeSpecializationKindEE_clES2_(uint64_t **a1, int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  JSC::ExecutableMemoryHandle *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  JSC::ExecutableMemoryHandle *v49;
  uint64_t v50;
  JSC::ExecutableMemoryHandle *v51;

  v4 = **a1;
  v5 = *(unsigned __int8 *)(v4 + 5);
  if (a2)
  {
    if (v5 == 8)
      goto LABEL_8;
    v6 = *(_QWORD *)(v4 + 16);
  }
  else
  {
    if (v5 == 8)
      goto LABEL_8;
    v6 = *(_QWORD *)(v4 + 8);
  }
  if (v6)
    v7 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance;
  else
    v7 = 0;
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x1986C8E7CLL);
  }
LABEL_8:
  v8 = 16;
  if (!a2)
    v8 = 8;
  v9 = *(unsigned int **)(v4 + v8);
  v10 = v9 + 2;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9))
  {
    if (a2 == 1)
    {
      v12 = a1[4];
      v13 = (JSC::ExecutableMemoryHandle *)a1[5];
      v14 = (uint64_t *)(a1 + 6);
      a1[5] = 0;
    }
    else
    {
      if (a2)
      {
        v12 = 0;
        v13 = 0;
        v15 = 0;
LABEL_19:
        v48 = v12;
        v49 = v13;
        (*(void (**)(uint64_t *__return_ptr, unsigned int *, uint64_t **))(*(_QWORD *)v9 + 16))(&v50, v9, &v48);
        v23 = (unsigned int *)v51;
        v51 = 0;
        if (v23)
        {
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            atomic_store(1u, v23);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v23, v16, v17, v18, v19, v20, v21, v22);
            WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
          }
        }
        v26 = (unsigned int *)v49;
        v49 = 0;
        if (v26)
        {
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            atomic_store(1u, v26);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v26, v16, v17, v18, v19, v20, v21, v22);
            WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
          }
        }
        v29 = 32;
        if (!a2)
          v29 = 24;
        *(_QWORD *)(**a1 + v29) = v15;
        goto LABEL_30;
      }
      v12 = a1[1];
      v13 = (JSC::ExecutableMemoryHandle *)a1[2];
      v14 = (uint64_t *)(a1 + 3);
      a1[2] = 0;
    }
    v15 = *v14;
    goto LABEL_19;
  }
  do
  {
LABEL_30:
    v30 = __ldaxr(v10);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v10));
  if (!v31)
  {
    atomic_store(1u, v9 + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 32))(v9);
  }
}

void WTF::Vector<std::unique_ptr<Inspector::ConsoleMessage>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  Inspector::ConsoleMessage **v10;
  uint64_t v11;
  Inspector::ConsoleMessage *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(Inspector::ConsoleMessage ***)a1;
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        Inspector::ConsoleMessage::~ConsoleMessage(v12, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  *(_DWORD *)(a1 + 12) = 0;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::MonotonicTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::MonotonicTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::MonotonicTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::MonotonicTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v15 = v7;
  v16 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v16;
  *(_DWORD *)(v15 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v17 = 0;
    v18 = v5;
    do
    {
      v19 = (WTF::StringImpl **)(v4 + 16 * v17);
      v20 = *v19;
      if (*v19 != (WTF::StringImpl *)-1)
      {
        if (v20)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = *((_DWORD *)v20 + 4);
          if (v23 < 0x100)
            v24 = WTF::StringImpl::hashSlowCase(v20);
          else
            v24 = v23 >> 8;
          v25 = 0;
          do
          {
            v26 = v24 & v22;
            v24 = ++v25 + v26;
          }
          while (*(_QWORD *)(v21 + 16 * v26));
          v27 = (WTF::StringImpl **)(v21 + 16 * v26);
          *v27 = 0;
          v28 = *v19;
          *v19 = 0;
          *v27 = v28;
          v27[1] = *(WTF::StringImpl **)(v4 + 16 * v17 + 8);
          v29 = *v19;
          *v19 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
            {
              WTF::StringImpl::~StringImpl(v29, v8, v9, v10, v11, v12, v13, v14);
              WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
            }
            else
            {
              *(_DWORD *)v29 -= 2;
            }
          }
        }
        else
        {
          *v19 = 0;
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

_BYTE *WTF::tryMakeString<WTF::String,WTF::ASCIILiteral,WTF::FormattedNumber,WTF::ASCIILiteral>(_BYTE *result, uint64_t a2, int8x16_t *a3, uint64_t a4, unsigned int *a5, int8x16_t *a6, uint64_t a7)
{
  int **v11;
  size_t v12;
  size_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int *v18;
  int v19;
  char v20;
  uint64_t v21;
  _WORD *v22;
  int8x16_t *v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  size_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  size_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  char *v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  uint64_t v54;
  char *v55;
  int8x16_t *v56;
  char *v57;
  __int128 v58;
  char *v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  char *v63;
  char *v64;
  char *v65;
  __int16 v66;
  unsigned __int128 *v67;
  unsigned __int128 *v68;
  unsigned __int128 v69;
  char v70;
  _DWORD *v71;
  int8x16x2_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;
  int8x16x2_t v79;
  int8x16x2_t v80;

  v11 = (int **)result;
  if (a4)
  {
    v12 = a4 - 1;
    if ((unint64_t)(a4 - 1) >> 31)
      goto LABEL_84;
  }
  else
  {
    v12 = 0;
  }
  if (a7)
  {
    v13 = a7 - 1;
    if (!((unint64_t)(a7 - 1) >> 31))
      goto LABEL_5;
LABEL_84:
    __break(0xC471u);
    JUMPOUT(0x1986C94D8);
  }
  v13 = 0;
LABEL_5:
  if (a2)
    v14 = *(_DWORD *)(a2 + 4);
  else
    v14 = 0;
  v15 = a5[31];
  if ((v15 & 0x80000000) != 0)
    goto LABEL_68;
  v16 = __OFADD__(v15, (_DWORD)v13);
  v17 = v15 + v13;
  if (v16)
    goto LABEL_68;
  v18 = 0;
  v16 = __OFADD__((_DWORD)v12, v17);
  v19 = v12 + v17;
  v20 = v16;
  if (v14 < 0 || (v20 & 1) != 0)
    goto LABEL_67;
  v21 = (v14 + v19);
  if (__OFADD__(v14, v19))
    goto LABEL_68;
  if (a2 && (*(_BYTE *)(a2 + 16) & 4) == 0)
  {
    if ((_DWORD)v21)
    {
      if (v21 <= 0x7FFFFFEF)
      {
        result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(2 * v21 + 20), &v71);
        v18 = v71;
        if (v71)
        {
          v22 = v71 + 5;
          *v71 = 2;
          v18[1] = v21;
          *((_QWORD *)v18 + 1) = v18 + 5;
          v18[4] = 0;
          v23 = *(int8x16_t **)(a2 + 8);
          v24 = *(unsigned int *)(a2 + 4);
          if ((*(_BYTE *)(a2 + 16) & 4) != 0)
          {
            v32 = (char *)&v22[v24];
            if (v24 >= 0x40)
            {
              v33 = (char *)&v22[v24 & 0xFFFFFFC0];
              v34 = 0uLL;
              v35 = (char *)(v18 + 5);
              do
              {
                v72.val[0] = *v23;
                v36 = v23[1];
                v75.val[0] = v23[2];
                v37 = v23[3];
                v23 += 4;
                v38 = v37;
                v75.val[1] = 0uLL;
                v78.val[0] = v36;
                v72.val[1] = 0uLL;
                v39 = v35;
                vst2q_s8(v39, v72);
                v39 += 32;
                v78.val[1] = 0uLL;
                vst2q_s8(v39, v78);
                v40 = v35 + 64;
                vst2q_s8(v40, v75);
                v41 = v35 + 96;
                vst2q_s8(v41, *(int8x16x2_t *)(&v34 - 1));
                v35 += 128;
              }
              while (v35 != v33);
            }
            else
            {
              v33 = (char *)(v18 + 5);
            }
            while (v33 != v32)
            {
              v42 = v23->u8[0];
              v23 = (int8x16_t *)((char *)v23 + 1);
              *(_WORD *)v33 = v42;
              v33 += 2;
            }
          }
          else if ((_DWORD)v24 == 1)
          {
            *v22 = v23->i16[0];
          }
          else if ((_DWORD)v24)
          {
            memcpy(v18 + 5, v23, 2 * v24);
          }
          v43 = (char *)&v22[*(unsigned int *)(a2 + 4)];
          v44 = &v43[2 * v12];
          if ((v12 & 0x7FFFFFC0) != 0)
          {
            v45 = &v43[2 * (v12 & 0x7FFFFFC0)];
            v46 = 0uLL;
            do
            {
              v73.val[0] = *a3;
              v47 = a3[1];
              v76.val[0] = a3[2];
              v48 = a3[3];
              a3 += 4;
              v49 = v48;
              v76.val[1] = 0uLL;
              v79.val[0] = v47;
              v73.val[1] = 0uLL;
              v50 = v43;
              vst2q_s8(v50, v73);
              v50 += 32;
              v79.val[1] = 0uLL;
              vst2q_s8(v50, v79);
              v51 = v43 + 64;
              vst2q_s8(v51, v76);
              v52 = v43 + 96;
              vst2q_s8(v52, *(int8x16x2_t *)(&v46 - 1));
              v43 += 128;
            }
            while (v43 != v45);
            v43 = v45;
          }
          while (v43 != v44)
          {
            v53 = a3->u8[0];
            a3 = (int8x16_t *)((char *)a3 + 1);
            *(_WORD *)v43 = v53;
            v43 += 2;
          }
          v54 = a5[31];
          v55 = &v44[2 * v54];
          if (v54 >= 0x40)
          {
            v57 = &v44[2 * (v54 & 0xFFFFFFC0)];
            v58 = 0uLL;
            v56 = (int8x16_t *)a5;
            v59 = v44;
            do
            {
              v74.val[0] = *v56;
              v60 = v56[1];
              v77.val[0] = v56[2];
              v61 = v56[3];
              v56 += 4;
              v62 = v61;
              v77.val[1] = 0uLL;
              v80.val[0] = v60;
              v74.val[1] = 0uLL;
              v63 = v59;
              vst2q_s8(v63, v74);
              v63 += 32;
              v80.val[1] = 0uLL;
              vst2q_s8(v63, v80);
              v64 = v59 + 64;
              vst2q_s8(v64, v77);
              v65 = v59 + 96;
              vst2q_s8(v65, *(int8x16x2_t *)(&v58 - 1));
              v59 += 128;
            }
            while (v59 != v57);
          }
          else
          {
            v56 = (int8x16_t *)a5;
            v57 = v44;
          }
          while (v57 != v55)
          {
            v66 = v56->u8[0];
            v56 = (int8x16_t *)((char *)v56 + 1);
            *(_WORD *)v57 = v66;
            v57 += 2;
          }
          result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v44[2 * a5[31]], a6, v13);
        }
        goto LABEL_67;
      }
LABEL_68:
      v18 = 0;
      goto LABEL_67;
    }
LABEL_71:
    v18 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_67;
  }
  if (!(_DWORD)v21)
    goto LABEL_71;
  if ((v21 & 0x80000000) != 0)
    goto LABEL_68;
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(v21 + 20), &v71);
  v18 = v71;
  if (v71)
  {
    v25 = v71 + 5;
    *v71 = 2;
    v18[1] = v21;
    *((_QWORD *)v18 + 1) = v18 + 5;
    v18[4] = 4;
    if (a2)
    {
      v26 = *(_BYTE **)(a2 + 8);
      v27 = *(unsigned int *)(a2 + 4);
      if ((*(_BYTE *)(a2 + 16) & 4) != 0)
      {
        if ((_DWORD)v27 == 1)
        {
          *v25 = *v26;
        }
        else if ((_DWORD)v27)
        {
          memcpy(v18 + 5, v26, v27);
        }
      }
      else
      {
        if (v27 < 0x10)
        {
          v67 = (unsigned __int128 *)(v18 + 5);
        }
        else
        {
          v67 = (unsigned __int128 *)&v25[v27 & 0xFFFFFFF0];
          v68 = (unsigned __int128 *)(v18 + 5);
          do
          {
            v69 = (unsigned __int128)vld2q_s8(v26);
            v26 += 32;
            *v68++ = v69;
          }
          while (v68 != v67);
        }
        while (v67 != (unsigned __int128 *)&v25[v27])
        {
          v70 = *v26;
          v26 += 2;
          *(_BYTE *)v67 = v70;
          v67 = (unsigned __int128 *)((char *)v67 + 1);
        }
      }
      v28 = *(unsigned int *)(a2 + 4);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v25[v28];
    if ((_DWORD)v12 == 1)
    {
      *v29 = a3->i8[0];
    }
    else if ((_DWORD)v12)
    {
      memcpy(&v25[v28], a3, v12);
    }
    v30 = &v29[v12];
    v31 = a5[31];
    if ((_DWORD)v31 == 1)
    {
      *v30 = *(_BYTE *)a5;
    }
    else if ((_DWORD)v31)
    {
      memcpy(&v29[v12], a5, v31);
    }
    result = &v30[a5[31]];
    if ((_DWORD)v13 == 1)
    {
      *result = a6->i8[0];
    }
    else if ((_DWORD)v13)
    {
      result = memcpy(result, a6, v13);
    }
  }
LABEL_67:
  *v11 = v18;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned int,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, _OWORD *a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, int **a7@<X8>)
{
  int v11;
  int *v13;
  _BYTE *v14;
  _BYTE *v15;
  size_t v16;
  _WORD *v17;
  int8x16_t *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  BOOL v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int16 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  int8x16_t v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  char *v44;
  char *v45;
  __int16 v46;
  uint64_t v47;
  unsigned __int128 *v49;
  unsigned __int128 *v50;
  unsigned __int128 v51;
  char v52;
  _QWORD v53[3];
  int8x16x2_t v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;
  int8x16x2_t v58;
  int8x16x2_t v59;

  v11 = result;
  v53[2] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), v53);
        v13 = (int *)v53[0];
        if (v53[0])
        {
          v14 = (_BYTE *)(v53[0] + 20);
          *(_DWORD *)v53[0] = 2;
          v13[1] = v11;
          *((_QWORD *)v13 + 1) = v13 + 5;
          v13[4] = 4;
          if (a3)
          {
            v15 = *(_BYTE **)(a3 + 8);
            v16 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v16 == 1)
              {
                *v14 = *v15;
              }
              else if ((_DWORD)v16)
              {
                result = (uint64_t)memcpy(v13 + 5, v15, v16);
              }
            }
            else
            {
              if (v16 < 0x10)
              {
                v49 = (unsigned __int128 *)(v13 + 5);
              }
              else
              {
                v49 = (unsigned __int128 *)&v14[v16 & 0xFFFFFFF0];
                v50 = (unsigned __int128 *)(v13 + 5);
                do
                {
                  v51 = (unsigned __int128)vld2q_s8(v15);
                  v15 += 32;
                  *v50++ = v51;
                }
                while (v50 != v49);
              }
              while (v49 != (unsigned __int128 *)&v14[v16])
              {
                v52 = *v15;
                v15 += 2;
                *(_BYTE *)v49 = v52;
                v49 = (unsigned __int128 *)((char *)v49 + 1);
              }
            }
            v20 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v14[v20];
          if (a5 == 1)
          {
            *v21 = *(_BYTE *)a4;
          }
          else if (a5)
          {
            result = (uint64_t)memcpy(&v14[v20], a4, a5);
          }
          v22 = 0;
          do
          {
            *((_BYTE *)&v53[1] + v22-- + 4) = (a6 % 0xA) | 0x30;
            v23 = a6 > 9;
            a6 /= 0xAu;
          }
          while (v23);
          if (v22 + 14 <= 13)
            result = (uint64_t)memcpy(&v21[a5], (char *)&v53[1] + v22 + 5, -v22);
        }
        goto LABEL_47;
      }
LABEL_50:
      v13 = 0;
      goto LABEL_47;
    }
LABEL_49:
    v13 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_47;
  }
  if (!(_DWORD)result)
    goto LABEL_49;
  if (result > 0x7FFFFFEF)
    goto LABEL_50;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), v53);
  v13 = (int *)v53[0];
  if (v53[0])
  {
    v17 = (_WORD *)(v53[0] + 20);
    *(_DWORD *)v53[0] = 2;
    v13[1] = v11;
    *((_QWORD *)v13 + 1) = v13 + 5;
    v13[4] = 0;
    if (a3)
    {
      v18 = *(int8x16_t **)(a3 + 8);
      v19 = *(unsigned int *)(a3 + 4);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        v24 = (char *)&v17[v19];
        if (v19 >= 0x40)
        {
          v25 = (char *)&v17[v19 & 0xFFFFFFC0];
          v26 = 0uLL;
          v27 = (char *)(v13 + 5);
          do
          {
            v54.val[0] = *v18;
            v28 = v18[1];
            v56.val[0] = v18[2];
            v29 = v18[3];
            v18 += 4;
            v30 = v29;
            v56.val[1] = 0uLL;
            v58.val[0] = v28;
            v54.val[1] = 0uLL;
            v31 = v27;
            vst2q_s8(v31, v54);
            v31 += 32;
            v58.val[1] = 0uLL;
            vst2q_s8(v31, v58);
            v32 = v27 + 64;
            vst2q_s8(v32, v56);
            v33 = v27 + 96;
            vst2q_s8(v33, *(int8x16x2_t *)(&v26 - 1));
            v27 += 128;
          }
          while (v27 != v25);
        }
        else
        {
          v25 = (char *)(v13 + 5);
        }
        while (v25 != v24)
        {
          v34 = v18->u8[0];
          v18 = (int8x16_t *)((char *)v18 + 1);
          *(_WORD *)v25 = v34;
          v25 += 2;
        }
      }
      else if ((_DWORD)v19 == 1)
      {
        *v17 = v18->i16[0];
      }
      else if ((_DWORD)v19)
      {
        result = (uint64_t)memcpy(v13 + 5, v18, 2 * v19);
      }
      v35 = *(unsigned int *)(a3 + 4);
    }
    else
    {
      v35 = 0;
    }
    v36 = (char *)&v17[v35];
    v37 = &v36[2 * a5];
    if ((a5 & 0xFFFFFFC0) != 0)
    {
      v38 = &v36[2 * (a5 & 0xFFFFFFC0)];
      v39 = 0uLL;
      do
      {
        v55.val[0] = (int8x16_t)*a4;
        v40 = *((int8x16_t *)a4 + 1);
        v57.val[0] = (int8x16_t)a4[2];
        v41 = a4[3];
        a4 += 4;
        v42 = v41;
        v57.val[1] = 0uLL;
        v59.val[0] = v40;
        v55.val[1] = 0uLL;
        v43 = v36;
        vst2q_s8(v43, v55);
        v43 += 32;
        v59.val[1] = 0uLL;
        vst2q_s8(v43, v59);
        v44 = v36 + 64;
        vst2q_s8(v44, v57);
        v45 = v36 + 96;
        vst2q_s8(v45, *(int8x16x2_t *)(&v39 - 1));
        v36 += 128;
      }
      while (v36 != v38);
      v36 = v38;
    }
    while (v36 != v37)
    {
      v46 = *(unsigned __int8 *)a4;
      a4 = (_OWORD *)((char *)a4 + 1);
      *(_WORD *)v36 = v46;
      v36 += 2;
    }
    v47 = 0;
    do
    {
      *((_BYTE *)&v53[1] + v47-- + 4) = (a6 % 0xA) | 0x30;
      v23 = a6 > 9;
      a6 /= 0xAu;
    }
    while (v23);
    if (v47 + 14 <= 13)
    {
      do
      {
        *(_WORD *)v37 = *((unsigned __int8 *)&v53[1] + v47 + 5);
        v37 += 2;
      }
      while (!__CFADD__(v47++, 1));
    }
  }
LABEL_47:
  *a7 = v13;
  return result;
}

uint64_t Inspector::breakpointActionTypeForString(WTF::StringImpl **this, WTF::String *a2, const WTF::String *a3)
{
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF::AtomStringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46[2];

  if (WTF::equalInternal<unsigned char>(*(_QWORD *)a2, (unint64_t)"log", 3))
  {
    v5 = 0;
LABEL_5:
    v6 = 1;
    return v5 | (v6 << 8);
  }
  if (WTF::equalInternal<unsigned char>(*(_QWORD *)a2, (unint64_t)"evaluate", 8))
  {
    v5 = 1;
    goto LABEL_5;
  }
  if (WTF::equalInternal<unsigned char>(*(_QWORD *)a2, (unint64_t)"sound", 5))
  {
    v6 = 1;
    v5 = 2;
    return v5 | (v6 << 8);
  }
  if (WTF::equalInternal<unsigned char>(*(_QWORD *)a2, (unint64_t)"probe", 5))
  {
    v6 = 1;
    v5 = 3;
    return v5 | (v6 << 8);
  }
  v8 = *(WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v8 += 2;
  v44 = v8;
  v46[0] = (uint64_t)"Unknown breakpoint action type: ";
  v46[1] = 33;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>(v46, (uint64_t *)&v44, (int **)&v45);
  v16 = v45;
  if (v45)
  {
    v45 = 0;
    v17 = *this;
    *this = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
        v27 = v45;
        v45 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::~StringImpl(v27, v9, v10, v11, v12, v13, v14, v15);
            WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
          }
          else
          {
            *(_DWORD *)v27 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v17 -= 2;
        v45 = 0;
      }
    }
    v18 = v44;
    v44 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    v5 = 0;
    v6 = 0;
    return v5 | (v6 << 8);
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<JSC::Breakpoint::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::Breakpoint::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::Breakpoint::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::Breakpoint::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(_DWORD *)(a1 + 12);
      v5 = 24 * a2;
      v6 = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v6;
      if (v4)
      {
        v14 = v6;
        v15 = v3 + 24 * v4;
        v16 = v3;
        do
        {
          *(_BYTE *)v14 = *(_BYTE *)v16;
          v17 = *(_QWORD *)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v14 + 8) = v17;
          LODWORD(v17) = *(_DWORD *)(v16 + 16);
          *(_BYTE *)(v14 + 20) = *(_BYTE *)(v16 + 20);
          *(_DWORD *)(v14 + 16) = v17;
          v18 = *(WTF::StringImpl **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
            {
              WTF::StringImpl::~StringImpl(v18, v7, v8, v9, v10, v11, v12, v13);
              WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
            }
            else
            {
              *(_DWORD *)v18 -= 2;
            }
          }
          v16 += 24;
          v14 += 24;
        }
        while (v16 != v15);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

double WTF::Detail::CallableWrapper<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::fromPayload(WTF::String &,unsigned int,unsigned int,unsigned int,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)::$_0,std::optional<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>,WTF::String const&,WTF::Vector<JSC::Breakpoint::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,BOOL,unsigned long>::call@<D0>(unsigned int **a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;

  Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::ProtocolBreakpoint((uint64_t)&v16, *a1[1], *a1[2], *a1[3], a2, a3, a4, a5);
  *(_OWORD *)a6 = v16;
  *(_QWORD *)(a6 + 16) = v17;
  *(_DWORD *)(a6 + 24) = v18;
  v7 = v19;
  v16 = 0u;
  v19 = 0u;
  *(_OWORD *)(a6 + 32) = v7;
  *(_QWORD *)&v7 = v20;
  v20 = 0;
  *(_QWORD *)(a6 + 48) = v7;
  *(_OWORD *)(a6 + 56) = v21;
  *(_BYTE *)(a6 + 72) = 1;
  Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::~ProtocolBreakpoint((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)&v16, v8, v9, v10, v11, v12, v13, v14);
  return result;
}

double WTF::Detail::CallableWrapper<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::fromPayload(WTF::String &,WTF::String const&,BOOL,unsigned int,unsigned int,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)::$_0,std::optional<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>,WTF::String const&,WTF::Vector<JSC::Breakpoint::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,BOOL,unsigned long>::call@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;

  Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::ProtocolBreakpoint((uint64_t)&v16, *(unsigned __int8 **)(a1 + 8), **(unsigned __int8 **)(a1 + 16), **(unsigned int **)(a1 + 24), **(unsigned int **)(a1 + 32), a2, a3, a4, a5);
  *(_OWORD *)a6 = v16;
  *(_QWORD *)(a6 + 16) = v17;
  *(_DWORD *)(a6 + 24) = v18;
  v7 = v19;
  v16 = 0u;
  v19 = 0u;
  *(_OWORD *)(a6 + 32) = v7;
  *(_QWORD *)&v7 = v20;
  v20 = 0;
  *(_QWORD *)(a6 + 48) = v7;
  *(_OWORD *)(a6 + 56) = v21;
  *(_BYTE *)(a6 + 72) = 1;
  Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::~ProtocolBreakpoint((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)&v16, v8, v9, v10, v11, v12, v13, v14);
  return result;
}

void WTF::Detail::CallableWrapper<Inspector::InspectorDebuggerAgent::debuggerBreakpointFromPayload(WTF::String &,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&)::$_0,WTF::RefPtr<JSC::Breakpoint,WTF::RawPtrTraits<JSC>,WTF::DefaultRefDerefTraits<JSC>>,WTF::String const&,WTF::Vector<JSC::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,BOOL,unsigned long>::call(WTF::StringImpl **a1@<X1>, uint64_t *a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v17 = WTF::fastMalloc((WTF *)0x50);
  v18 = *a1;
  if (*a1)
  {
    *(_DWORD *)v18 += 2;
    *(_QWORD *)(v17 + 21) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    *(_DWORD *)v18 += 2;
  }
  else
  {
    *(_QWORD *)(v17 + 21) = 0;
    *(_QWORD *)(v17 + 16) = 0;
  }
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 40) = 0;
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 32) = v18;
  v19 = *a2;
  *a2 = 0;
  *(_QWORD *)(v17 + 40) = v19;
  LODWORD(v19) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(v17 + 48) = v19;
  LODWORD(v19) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(v17 + 52) = v19;
  *(_BYTE *)(v17 + 56) = a3;
  *(_QWORD *)(v17 + 64) = a4;
  *(_QWORD *)(v17 + 72) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  *a5 = v17;
}

void WTF::VectorDestructor<true,Inspector::InspectorDebuggerAgent::SymbolicBreakpoint>::destruct(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *i;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::Yarr::BytecodePattern *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void *v32;
  size_t v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (a1 != a2)
  {
    for (i = a1; i != a2; i += 48)
    {
      if (i[40])
      {
        v10 = *((_QWORD *)i + 4);
        *((_QWORD *)i + 4) = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 1)
          {
            v22 = *(JSC::Yarr::BytecodePattern **)(v10 + 24);
            *(_QWORD *)(v10 + 24) = 0;
            if (v22)
            {
              JSC::Yarr::BytecodePattern::~BytecodePattern(v22, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
            }
            v31 = *(_QWORD **)(v10 + 8);
            if (v31)
            {
              v32 = (void *)v31[5];
              v33 = v31[6];
              v31[5] = 0;
              v31[6] = 0;
              v31[4] = 0;
              if (munmap(v32, v33) == -1)
              {
                __break(0xC471u);
                return;
              }
            }
            WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          }
          else
          {
            --*(_DWORD *)v10;
          }
        }
      }
      v11 = *((_QWORD *)i + 3);
      if (v11)
      {
        v34 = *(unsigned int *)(v11 - 4);
        if ((_DWORD)v34)
        {
          v35 = (WTF::StringImpl **)*((_QWORD *)i + 3);
          do
          {
            v36 = *v35;
            if (*v35 != (WTF::StringImpl *)-1)
            {
              *v35 = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                {
                  WTF::StringImpl::~StringImpl(v36, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
                }
                else
                {
                  *(_DWORD *)v36 -= 2;
                }
              }
            }
            ++v35;
            --v34;
          }
          while (v34);
        }
        WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
      }
      v12 = (WTF *)*((_QWORD *)i + 2);
      *((_QWORD *)i + 2) = 0;
      if (v12)
        WTF::RefCounted<JSC::Breakpoint>::deref(v12, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      v13 = *(WTF::StringImpl **)i;
      *(_QWORD *)i = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
        {
          WTF::StringImpl::~StringImpl(v13, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
        }
        else
        {
          *(_DWORD *)v13 -= 2;
        }
      }
    }
  }
}

int *WTF::HashTable<std::pair<unsigned int,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>>,std::pair<unsigned int,unsigned long long>>(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int *v10;
  int v11;
  uint64_t v12;
  int v14;

  if (!a1)
    return 0;
  v3 = *(_DWORD *)(a1 - 8);
  v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  v6 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v3 & ((0xD7862706ELL
            * (unint64_t)(277951225 * (v5 ^ HIWORD(v5)) + 95187966
                                                               * ((v8 >> 31) ^ v8))) >> 4);
  v10 = (int *)(a1 + 24 * v9);
  v11 = *v10;
  v12 = *((_QWORD *)v10 + 1);
  if (*v10 != a2 || v12 != a3)
  {
    v14 = 1;
    while (v11 || v12)
    {
      v9 = (v9 + v14) & v3;
      v10 = (int *)(a1 + 24 * v9);
      v11 = *v10;
      v12 = *((_QWORD *)v10 + 1);
      ++v14;
      if (*v10 == a2 && v12 == a3)
        return v10;
    }
    return (int *)(a1 + 24 * *(unsigned int *)(a1 - 4));
  }
  return v10;
}

void WTF::HashTable<std::pair<unsigned int,unsigned long long>,WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  Inspector::AsyncStackTrace *v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  Inspector::AsyncStackTrace *v42;
  _QWORD *v43;
  Inspector::AsyncStackTrace *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v21 = 0;
    v14 = 0xD7862706ELL;
    v22 = v11;
    while (1)
    {
      v23 = (int *)(v10 + 24 * v21);
      v24 = *v23;
      if (*v23 != -1)
      {
        v25 = *((_QWORD *)v23 + 1);
        if (v24)
          v26 = 0;
        else
          v26 = v25 == 0;
        if (v26)
        {
          v29 = v10 + 24 * v21;
          v30 = *(Inspector::AsyncStackTrace **)(v29 + 16);
          *(_QWORD *)(v29 + 16) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
              goto LABEL_31;
            --*(_DWORD *)v30;
          }
        }
        else
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v31 = 9 * ((v24 + ~(v24 << 15)) ^ ((v24 + ~(v24 << 15)) >> 10));
          v32 = (v31 ^ (v31 >> 6)) + ~((v31 ^ (v31 >> 6)) << 11);
          v33 = (v25 + ~(v25 << 32)) ^ ((unint64_t)(v25 + ~(v25 << 32)) >> 22);
          v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
          v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
          v36 = v28 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * (v32 ^ HIWORD(v32))
                                         + 95187966 * ((v35 >> 31) ^ v35))) >> 4);
          v37 = 1;
          do
          {
            v38 = v36;
            v39 = v27 + 24 * v36;
            v36 = (v36 + v37++) & v28;
            if (*(_DWORD *)v39)
              v40 = 0;
            else
              v40 = *(_QWORD *)(v39 + 8) == 0;
          }
          while (!v40);
          v41 = v27 + 24 * v38;
          v44 = *(Inspector::AsyncStackTrace **)(v41 + 16);
          v43 = (_QWORD *)(v41 + 16);
          v42 = v44;
          *v43 = 0;
          if (v44)
          {
            if (*(_DWORD *)v42 == 1)
            {
              Inspector::AsyncStackTrace::~AsyncStackTrace(v42);
              WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
              v14 = 0xD7862706ELL;
            }
            else
            {
              --*(_DWORD *)v42;
            }
          }
          *(_OWORD *)v39 = *(_OWORD *)v23;
          v45 = v10 + 24 * v21;
          v46 = *(_QWORD *)(v45 + 16);
          *(_QWORD *)(v45 + 16) = 0;
          *v43 = v46;
          v30 = *(Inspector::AsyncStackTrace **)(v45 + 16);
          *(_QWORD *)(v45 + 16) = 0;
          if (!v30)
            goto LABEL_29;
          if (*(_DWORD *)v30 == 1)
          {
LABEL_31:
            Inspector::AsyncStackTrace::~AsyncStackTrace(v30);
            WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            v14 = 0xD7862706ELL;
            goto LABEL_29;
          }
          --*(_DWORD *)v30;
        }
      }
LABEL_29:
      if (++v21 == v22)
        goto LABEL_35;
    }
  }
  if (v10)
LABEL_35:
    WTF::fastFree(v10 - 16, (void *)v14, v15, v16, v17, v18, v19, v20);
}

uint64_t WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<unsigned int,unsigned long long>,WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<std::pair<unsigned int,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<Inspector::AsyncStackTrace,WTF::RawPtrTraits<Inspector::AsyncStackTrace>,WTF::DefaultRefDerefTraits<Inspector::AsyncStackTrace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<unsigned int,unsigned long long>>>,std::pair<unsigned int,unsigned long long>>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int *v13;
  int v14;
  uint64_t v15;
  int v17;
  int *v18;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = *a2;
    v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
    v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
    v7 = v6 ^ HIWORD(v6);
    v8 = *((_QWORD *)a2 + 1);
    v9 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v3 & ((0xD7862706ELL
               * (unint64_t)(277951225 * v7 + 95187966 * ((v11 >> 31) ^ v11))) >> 4);
    v13 = (int *)(v2 + 24 * v12);
    v14 = *v13;
    v15 = *((_QWORD *)v13 + 1);
    if (*v13 == *a2 && v15 == v8)
      return *(_QWORD *)(v2 + 24 * v12 + 16);
    v17 = 1;
    while (v14 || v15)
    {
      v12 = (v12 + v17) & v3;
      v18 = (int *)(v2 + 24 * v12);
      v14 = *v18;
      v15 = *((_QWORD *)v18 + 1);
      ++v17;
      if (v14 == v4 && v15 == v8)
        return *(_QWORD *)(v2 + 24 * v12 + 16);
    }
  }
  return 0;
}

uint64_t Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::operator=(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  WTF::StringImpl *v72;
  int v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  int v88;

  v10 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v10 += 2;
  v11 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = *(_DWORD **)(a2 + 8);
  if (v12)
    *v12 += 2;
  v13 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  v14 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v14;
  v15 = *(_DWORD **)(a2 + 32);
  if (v15)
    *v15 += 2;
  v16 = *(WTF::StringImpl **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  if (a2 != a1)
  {
    v17 = (unint64_t *)(a1 + 40);
    v18 = *(unsigned int *)(a1 + 52);
    v19 = *(unsigned int *)(a2 + 52);
    if (v18 <= v19)
    {
      v31 = *(_DWORD *)(a1 + 48);
      if (v19 <= v31)
      {
        LODWORD(v19) = *(_DWORD *)(a1 + 52);
LABEL_43:
        v68 = *(_QWORD *)(a2 + 40);
        v69 = *v17;
        if ((_DWORD)v18)
        {
          v70 = v68 + 24 * v19;
          do
          {
            *(_BYTE *)v69 = *(_BYTE *)v68;
            v71 = *(_DWORD **)(v68 + 8);
            if (v71)
              *v71 += 2;
            v72 = *(WTF::StringImpl **)(v69 + 8);
            *(_QWORD *)(v69 + 8) = v71;
            if (v72)
            {
              if (*(_DWORD *)v72 == 2)
              {
                WTF::StringImpl::~StringImpl(v72, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
              }
              else
              {
                *(_DWORD *)v72 -= 2;
              }
            }
            v73 = *(_DWORD *)(v68 + 16);
            *(_BYTE *)(v69 + 20) = *(_BYTE *)(v68 + 20);
            *(_DWORD *)(v69 + 16) = v73;
            v68 += 24;
            v69 += 24;
          }
          while (v68 != v70);
          v68 = *(_QWORD *)(a2 + 40);
          v82 = *(_DWORD *)(a1 + 52);
          v69 = *(_QWORD *)(a1 + 40);
        }
        else
        {
          v82 = 0;
        }
        v83 = *(_DWORD *)(a2 + 52);
        if (v82 != v83)
        {
          v84 = v68 + 24 * v83;
          v85 = v69 + 24 * v82;
          v86 = v68 + 24 * v82;
          do
          {
            *(_BYTE *)v85 = *(_BYTE *)v86;
            v87 = *(_DWORD **)(v86 + 8);
            if (v87)
              *v87 += 2;
            *(_QWORD *)(v85 + 8) = v87;
            v88 = *(_DWORD *)(v86 + 16);
            *(_BYTE *)(v85 + 20) = *(_BYTE *)(v86 + 20);
            *(_DWORD *)(v85 + 16) = v88;
            v86 += 24;
            v85 += 24;
          }
          while (v86 != v84);
          v82 = *(_DWORD *)(a2 + 52);
        }
        *(_DWORD *)(a1 + 52) = v82;
        goto LABEL_61;
      }
      if (v31)
      {
        if ((_DWORD)v18)
        {
          v32 = 24 * v18;
          v33 = (WTF::StringImpl **)(*v17 + 8);
          do
          {
            v34 = *v33;
            *v33 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
              {
                WTF::StringImpl::~StringImpl(v34, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
              }
              else
              {
                *(_DWORD *)v34 -= 2;
              }
            }
            v33 += 3;
            v32 -= 24;
          }
          while (v32);
          *(_DWORD *)(a1 + 52) = 0;
        }
        v67 = *v17;
        if (*v17)
        {
          *(_QWORD *)(a1 + 40) = 0;
          *(_DWORD *)(a1 + 48) = 0;
          WTF::fastFree(v67, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
      }
      WTF::Vector<JSC::Breakpoint::Action,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 40, *(unsigned int *)(a2 + 52));
      LODWORD(v19) = *(_DWORD *)(a1 + 52);
    }
    else
    {
      v20 = 24 * v18 - 24 * v19;
      v21 = (WTF::StringImpl **)(*v17 + 24 * v19 + 8);
      do
      {
        v22 = *v21;
        *v21 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
          {
            WTF::StringImpl::~StringImpl(v22, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
          }
          else
          {
            *(_DWORD *)v22 -= 2;
          }
        }
        v21 += 3;
        v20 -= 24;
      }
      while (v20);
      *(_DWORD *)(a1 + 52) = v19;
    }
    LODWORD(v18) = v19;
    goto LABEL_43;
  }
LABEL_61:
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

void WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::InspectorDebuggerAgent::ProtocolBreakpoint,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::InspectorDebuggerAgent::ProtocolBreakpoint>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  WTF::StringImpl **v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = WTF::fastMalloc((WTF *)(80 * a2 + 16));
  if (a2)
  {
    v14 = a2;
    v15 = v6 + 44;
    do
    {
      *(_QWORD *)v15 = 0;
      *(_QWORD *)(v15 + 44) = 0;
      *(_QWORD *)(v15 + 12) = 0;
      *(_QWORD *)(v15 + 28) = 0;
      *(_QWORD *)(v15 + 20) = 0;
      *(_BYTE *)(v15 + 36) = 0;
      *(_QWORD *)(v15 - 28) = 0;
      *(_QWORD *)(v15 - 12) = 0;
      *(_QWORD *)(v15 - 20) = 0;
      *(_BYTE *)(v15 - 4) = 0;
      v15 += 80;
      --v14;
    }
    while (v14);
  }
  *a1 = v6 + 16;
  *(_DWORD *)(v6 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v16 = 0;
    v17 = v4;
    while (1)
    {
      v18 = (WTF::StringImpl **)(v3 + 80 * v16);
      v19 = *v18;
      if (*v18 != (WTF::StringImpl *)-1)
      {
        if (v19)
        {
          v21 = *a1;
          if (*a1)
            v22 = *(_DWORD *)(v21 - 8);
          else
            v22 = 0;
          v23 = *((_DWORD *)v19 + 4);
          if (v23 < 0x100)
            v24 = WTF::StringImpl::hashSlowCase(v19);
          else
            v24 = v23 >> 8;
          v25 = 0;
          do
          {
            v26 = v24 & v22;
            v27 = (WTF::StringImpl **)(v21 + 80 * (v24 & v22));
            v24 = ++v25 + (v24 & v22);
          }
          while (*v27);
          Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::~ProtocolBreakpoint((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)(v21 + 80 * v26 + 8), v7, v8, v9, v10, v11, v12, v13);
          v35 = *v27;
          *v27 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::~StringImpl(v35, v28, v29, v30, v31, v32, v33, v34);
              WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
            }
            else
            {
              *(_DWORD *)v35 -= 2;
            }
          }
          v36 = *v18;
          *v18 = 0;
          *v27 = v36;
          v37 = v3 + 80 * v16;
          v38 = *(_QWORD *)(v37 + 8);
          v37 += 8;
          *(_QWORD *)v37 = 0;
          *(_QWORD *)(v21 + 80 * v26 + 8) = v38;
          v39 = v21 + 80 * v26;
          v40 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(v37 + 8) = 0;
          *(_QWORD *)(v39 + 16) = v40;
          v41 = *(_QWORD *)(v37 + 16);
          *(_DWORD *)(v39 + 32) = *(_DWORD *)(v37 + 24);
          *(_QWORD *)(v39 + 24) = v41;
          v42 = *(_QWORD *)(v37 + 32);
          *(_QWORD *)(v37 + 32) = 0;
          *(_QWORD *)(v39 + 48) = 0;
          *(_QWORD *)(v39 + 56) = 0;
          *(_QWORD *)(v39 + 40) = v42;
          v43 = *(_QWORD *)(v37 + 40);
          *(_QWORD *)(v37 + 40) = 0;
          *(_QWORD *)(v39 + 48) = v43;
          LODWORD(v43) = *(_DWORD *)(v37 + 48);
          *(_DWORD *)(v37 + 48) = 0;
          *(_DWORD *)(v39 + 56) = v43;
          LODWORD(v43) = *(_DWORD *)(v37 + 52);
          *(_DWORD *)(v37 + 52) = 0;
          *(_DWORD *)(v39 + 60) = v43;
          *(_OWORD *)(v39 + 64) = *(_OWORD *)(v37 + 56);
          Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::~ProtocolBreakpoint((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)v37, v28, v29, v30, v31, v32, v33, v34);
          v20 = *v18;
          *v18 = 0;
          if (!v20)
            goto LABEL_27;
          if (*(_DWORD *)v20 == 2)
          {
LABEL_30:
            WTF::StringImpl::~StringImpl(v20, v7, v8, v9, v10, v11, v12, v13);
            WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
            goto LABEL_27;
          }
          *(_DWORD *)v20 -= 2;
        }
        else
        {
          Inspector::InspectorDebuggerAgent::ProtocolBreakpoint::~ProtocolBreakpoint((Inspector::InspectorDebuggerAgent::ProtocolBreakpoint *)(v3 + 80 * v16 + 8), v7, v8, v9, v10, v11, v12, v13);
          v20 = *v18;
          *v18 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              goto LABEL_30;
            *(_DWORD *)v20 -= 2;
          }
        }
      }
LABEL_27:
      if (++v16 == v17)
        goto LABEL_34;
    }
  }
  if (v3)
LABEL_34:
    WTF::fastFree(v3 - 16, v7, v8, v9, v10, v11, v12, v13);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<JSC::Breakpoint,WTF::RawPtrTraits<JSC::Breakpoint>,WTF::DefaultRefDerefTraits<JSC::Breakpoint>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  unint64_t **v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  WTF::StringImpl *v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  WTF::StringImpl **v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl **v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl **v101;
  WTF::StringImpl *v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  WTF::StringImpl *v112;
  unint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  WTF::StringImpl *v122;
  unint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  WTF::StringImpl **result;
  uint64_t v148;
  uint64_t v149;
  _DWORD *v152;
  WTF::StringImpl **v153;
  WTF::StringImpl **v154;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v20 = 0;
    v21 = 0;
    v22 = v10;
    v148 = v10;
    v149 = v9;
    do
    {
      v23 = (WTF::StringImpl **)(v9 + 24 * v20);
      v24 = *v23;
      if (*v23 != (WTF::StringImpl *)-1)
      {
        v154 = v21;
        if (v24)
        {
          v53 = *a1;
          if (*a1)
            v54 = *(_DWORD *)(v53 - 8);
          else
            v54 = 0;
          v57 = *((_DWORD *)v24 + 4);
          v153 = (WTF::StringImpl **)(v9 + 24 * v20);
          if (v57 < 0x100)
            v58 = WTF::StringImpl::hashSlowCase(v24);
          else
            v58 = v57 >> 8;
          v59 = 0;
          do
          {
            v60 = v58 & v54;
            v61 = (WTF::StringImpl **)(v53 + 24 * (v58 & v54));
            v58 = ++v59 + (v58 & v54);
          }
          while (*v61);
          v62 = v53 + 24 * v60;
          v152 = (_DWORD *)(v62 + 20);
          v63 = v62 + 8;
          if (*(_DWORD *)(v62 + 20))
          {
            v64 = *(unint64_t **)v63;
            v65 = *(_QWORD *)v63 + 8 * *(unsigned int *)(v62 + 20);
            do
            {
              v66 = *v64;
              *v64 = 0;
              if (v66)
              {
                if (*(_DWORD *)v66 == 1)
                {
                  v67 = *(unsigned int *)(v66 + 52);
                  if ((_DWORD)v67)
                  {
                    v68 = 24 * v67;
                    v69 = (WTF::StringImpl **)(*(_QWORD *)(v66 + 40) + 8);
                    do
                    {
                      v70 = *v69;
                      *v69 = 0;
                      if (v70)
                      {
                        if (*(_DWORD *)v70 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v70, v13, v14, v15, v16, v17, v18, v19);
                          WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
                        }
                        else
                        {
                          *(_DWORD *)v70 -= 2;
                        }
                      }
                      v69 += 3;
                      v68 -= 24;
                    }
                    while (v68);
                  }
                  v79 = *(_QWORD *)(v66 + 40);
                  if (v79)
                  {
                    *(_QWORD *)(v66 + 40) = 0;
                    *(_DWORD *)(v66 + 48) = 0;
                    WTF::fastFree(v79, v13, v14, v15, v16, v17, v18, v19);
                  }
                  v80 = *(WTF::StringImpl **)(v66 + 32);
                  *(_QWORD *)(v66 + 32) = 0;
                  if (v80)
                  {
                    if (*(_DWORD *)v80 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v80, v13, v14, v15, v16, v17, v18, v19);
                      WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
                    }
                    else
                    {
                      *(_DWORD *)v80 -= 2;
                    }
                  }
                  WTF::fastFree(v66, v13, v14, v15, v16, v17, v18, v19);
                }
                else
                {
                  --*(_DWORD *)v66;
                }
              }
              ++v64;
            }
            while (v64 != (unint64_t *)v65);
          }
          v89 = *(_QWORD *)v63;
          if (*(_QWORD *)v63)
          {
            *(_QWORD *)v63 = 0;
            *(_DWORD *)(v53 + 24 * v60 + 16) = 0;
            WTF::fastFree(v89, v13, v14, v15, v16, v17, v18, v19);
          }
          v90 = *v61;
          *v61 = 0;
          v9 = v149;
          if (v90)
          {
            if (*(_DWORD *)v90 == 2)
            {
              WTF::StringImpl::~StringImpl(v90, v13, v14, v15, v16, v17, v18, v19);
              WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
            }
            else
            {
              *(_DWORD *)v90 -= 2;
            }
          }
          v91 = *v153;
          *v153 = 0;
          *v61 = v91;
          v92 = v149 + 24 * v20;
          *(_QWORD *)v63 = 0;
          *(_QWORD *)(v63 + 8) = 0;
          v94 = *(_QWORD *)(v92 + 8);
          v93 = v92 + 8;
          *(_QWORD *)v93 = 0;
          *(_QWORD *)v63 = v94;
          LODWORD(v91) = *(_DWORD *)(v93 + 8);
          *(_DWORD *)(v93 + 8) = 0;
          *(_DWORD *)(v53 + 24 * v60 + 16) = (_DWORD)v91;
          LODWORD(v91) = *(_DWORD *)(v93 + 12);
          *(_DWORD *)(v93 + 12) = 0;
          *v152 = (_DWORD)v91;
          v95 = *(unsigned int *)(v93 + 12);
          if ((_DWORD)v95)
          {
            v96 = *(unint64_t **)v93;
            v97 = *(_QWORD *)v93 + 8 * v95;
            do
            {
              v98 = *v96;
              *v96 = 0;
              if (v98)
              {
                if (*(_DWORD *)v98 == 1)
                {
                  v99 = *(unsigned int *)(v98 + 52);
                  if ((_DWORD)v99)
                  {
                    v100 = 24 * v99;
                    v101 = (WTF::StringImpl **)(*(_QWORD *)(v98 + 40) + 8);
                    do
                    {
                      v102 = *v101;
                      *v101 = 0;
                      if (v102)
                      {
                        if (*(_DWORD *)v102 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v102, v13, v14, v15, v16, v17, v18, v19);
                          WTF::fastFree(v103, v104, v105, v106, v107, v108, v109, v110);
                        }
                        else
                        {
                          *(_DWORD *)v102 -= 2;
                        }
                      }
                      v101 += 3;
                      v100 -= 24;
                    }
                    while (v100);
                  }
                  v111 = *(_QWORD *)(v98 + 40);
                  if (v111)
                  {
                    *(_QWORD *)(v98 + 40) = 0;
                    *(_DWORD *)(v98 + 48) = 0;
                    WTF::fastFree(v111, v13, v14, v15, v16, v17, v18, v19);
                  }
                  v112 = *(WTF::StringImpl **)(v98 + 32);
                  *(_QWORD *)(v98 + 32) = 0;
                  if (v112)
                  {
                    if (*(_DWORD *)v112 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v112, v13, v14, v15, v16, v17, v18, v19);
                      WTF::fastFree(v113, v114, v115, v116, v117, v118, v119, v120);
                    }
                    else
                    {
                      *(_DWORD *)v112 -= 2;
                    }
                  }
                  WTF::fastFree(v98, v13, v14, v15, v16, v17, v18, v19);
                }
                else
                {
                  --*(_DWORD *)v98;
                }
              }
              ++v96;
            }
            while (v96 != (unint64_t *)v97);
          }
          v121 = *(_QWORD *)v93;
          if (*(_QWORD *)v93)
          {
            *(_QWORD *)v93 = 0;
            *(_DWORD *)(v93 + 8) = 0;
            WTF::fastFree(v121, v13, v14, v15, v16, v17, v18, v19);
          }
          v122 = *v153;
          *v153 = 0;
          if (v122)
          {
            if (*(_DWORD *)v122 == 2)
            {
              WTF::StringImpl::~StringImpl(v122, v13, v14, v15, v16, v17, v18, v19);
              WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
            }
            else
            {
              *(_DWORD *)v122 -= 2;
            }
          }
          if (v153 == (WTF::StringImpl **)a3)
            v21 = v61;
          else
            v21 = v154;
          v22 = v148;
        }
        else
        {
          v25 = v9 + 24 * v20;
          v26 = (unint64_t **)(v25 + 8);
          v27 = *(unsigned int *)(v25 + 20);
          if ((_DWORD)v27)
          {
            v28 = *v26;
            v29 = (uint64_t)&(*v26)[v27];
            do
            {
              v30 = *v28;
              *v28 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 1)
                {
                  v31 = *(unsigned int *)(v30 + 52);
                  if ((_DWORD)v31)
                  {
                    v32 = 24 * v31;
                    v33 = (WTF::StringImpl **)(*(_QWORD *)(v30 + 40) + 8);
                    do
                    {
                      v34 = *v33;
                      *v33 = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v34, v13, v14, v15, v16, v17, v18, v19);
                          WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
                        }
                        else
                        {
                          *(_DWORD *)v34 -= 2;
                        }
                      }
                      v33 += 3;
                      v32 -= 24;
                    }
                    while (v32);
                  }
                  v43 = *(_QWORD *)(v30 + 40);
                  if (v43)
                  {
                    *(_QWORD *)(v30 + 40) = 0;
                    *(_DWORD *)(v30 + 48) = 0;
                    WTF::fastFree(v43, v13, v14, v15, v16, v17, v18, v19);
                  }
                  v44 = *(WTF::StringImpl **)(v30 + 32);
                  *(_QWORD *)(v30 + 32) = 0;
                  if (v44)
                  {
                    if (*(_DWORD *)v44 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v44, v13, v14, v15, v16, v17, v18, v19);
                      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
                    }
                    else
                    {
                      *(_DWORD *)v44 -= 2;
                    }
                  }
                  WTF::fastFree(v30, v13, v14, v15, v16, v17, v18, v19);
                }
                else
                {
                  --*(_DWORD *)v30;
                }
              }
              ++v28;
            }
            while (v28 != (unint64_t *)v29);
          }
          v55 = (unint64_t)*v26;
          if (*v26)
          {
            *v26 = 0;
            *(_DWORD *)(v9 + 24 * v20 + 16) = 0;
            WTF::fastFree(v55, v13, v14, v15, v16, v17, v18, v19);
          }
          v56 = *v23;
          *v23 = 0;
          v21 = v154;
          if (v56)
          {
            if (*(_DWORD *)v56 == 2)
            {
              WTF::StringImpl::~StringImpl(v56, v13, v14, v15, v16, v17, v18, v19);
              WTF::fastFree(v123, v124, v125, v126, v127, v128, v129, v130);
            }
            else
            {
              *(_DWORD *)v56 -= 2;
            }
          }
        }
      }
      ++v20;
    }
    while (v20 != v22);
  }
  else
  {
    v21 = 0;
    result = 0;
    if (!v9)
      return result;
  }
  WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
  return v21;
}

uint64_t *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  int v5;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  WTF::StringImpl **v16;
  WTF::StringImpl **v17;
  uint64_t *v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *a1 = 0;
  v3 = (_QWORD *)*a2;
  if (*a2)
  {
    v5 = *((_DWORD *)v3 - 3);
    if (v5)
    {
      v7 = WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v15 = WTF::fastZeroedMalloc(8 * v7 + 16, v8, v9, v10, v11, v12, v13, v14);
      *a1 = v15 + 16;
      *(_DWORD *)(v15 + 12) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v5;
      *(_DWORD *)(*a1 - 16) = 0;
      v16 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)a2);
      v17 = v16;
      v18 = a2;
      v20 = v19;
      v21 = *v18;
      v22 = v21 ? v21 + 8 * *(unsigned int *)(v21 - 4) : 0;
      if ((WTF::StringImpl **)v22 != v16)
      {
        do
        {
          v23 = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, v17);
          WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::String const&>(v23, (WTF::AtomStringImpl *)v17, v17, v24, v25, v26, v27, v28);
          while (++v17 != v20)
          {
            if ((unint64_t)*v17 + 1 > 1)
              goto LABEL_12;
          }
          v17 = v20;
LABEL_12:
          ;
        }
        while (v17 != (WTF::StringImpl **)v22);
      }
    }
  }
  return a1;
}

_QWORD *WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(_QWORD **a1)
{
  _QWORD *result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result = *a1;
  if (!result)
    return 0;
  v3 = *((unsigned int *)result - 1);
  v4 = &result[v3];
  if (!*((_DWORD *)result - 3))
    return &result[v3];
  if ((_DWORD)v3)
  {
    v5 = 8 * v3;
    while ((unint64_t)(*result + 1) <= 1)
    {
      ++result;
      v5 -= 8;
      if (!v5)
        return v4;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;

  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 8);
  else
    v3 = 0;
  v4 = *((_DWORD *)*a2 + 4);
  if (v4 < 0x100)
    v5 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v5 = v4 >> 8;
  v6 = 0;
  do
  {
    v7 = v5 & v3;
    v5 = ++v6 + v7;
  }
  while (*(_QWORD *)(v2 + 8 * v7));
  return v2 + 8 * v7;
}

void WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>::translate<WTF::String,WTF::String,WTF::String const&>(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *a3;
  if (*a3)
    *(_DWORD *)v9 += 2;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

char *WTF::Vector<Inspector::InspectorDebuggerAgent::SymbolicBreakpoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a3;
  v5 = *(char **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = &v5[48 * *(unsigned int *)(a1 + 12)];
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v24 = *(char **)a1;
        return &v24[16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4)];
      }
      if (v9 < 0x5555556)
      {
        v10 = 48 * v9;
        v11 = WTF::fastMalloc((WTF *)(48 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x30;
        *(_QWORD *)a1 = v11;
        WTF::VectorMover<false,Inspector::InspectorDebuggerAgent::SymbolicBreakpoint>::move(v5, v6, v11, v12, v13, v14, v15, v16);
        v24 = *(char **)a1;
        if (v5)
        {
          if (v24 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v17, v18, v19, v20, v21, v22, v23);
          v24 = *(char **)a1;
        }
        return &v24[16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4)];
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x1986CB2F0);
    }
  }
  v25 = *(unsigned int *)(a1 + 8);
  v26 = v25 + (v25 >> 2);
  if (v26 >= 0x10)
    v27 = v26 + 1;
  else
    v27 = 16;
  if (v27 <= a2)
    v27 = a2;
  if (v27 > v25)
  {
    if (v27 >= 0x5555556)
      goto LABEL_28;
    v28 = &v5[48 * *(unsigned int *)(a1 + 12)];
    v29 = 48 * v27;
    v30 = WTF::fastMalloc((WTF *)(48 * v27));
    *(_DWORD *)(a1 + 8) = (v29 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)a1 = v30;
    WTF::VectorMover<false,Inspector::InspectorDebuggerAgent::SymbolicBreakpoint>::move(v5, v28, v30, v31, v32, v33, v34, v35);
    if (v5)
    {
      if (*(char **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v36, v37, v38, v39, v40, v41, v42);
    }
  }
  return (char *)v3;
}

void WTF::VectorMover<false,Inspector::InspectorDebuggerAgent::SymbolicBreakpoint>::move(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *i;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::Yarr::BytecodePattern *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  size_t v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (a1 != a2)
  {
    v8 = a3;
    for (i = a1; i != a2; i += 48)
    {
      v11 = *(WTF::StringImpl **)i;
      *(_QWORD *)i = 0;
      *(_QWORD *)v8 = v11;
      *(_WORD *)(v8 + 8) = *((_WORD *)i + 4);
      v12 = *((_QWORD *)i + 2);
      *((_QWORD *)i + 2) = 0;
      *(_QWORD *)(v8 + 16) = v12;
      *(_QWORD *)(v8 + 24) = 0;
      v13 = *((_QWORD *)i + 3);
      *((_QWORD *)i + 3) = 0;
      *(_QWORD *)(v8 + 24) = v13;
      *(_BYTE *)(v8 + 32) = 0;
      *(_BYTE *)(v8 + 40) = 0;
      if (i[40])
      {
        v14 = (_DWORD *)*((_QWORD *)i + 4);
        if (v14)
          ++*v14;
        *(_QWORD *)(v8 + 32) = v14;
        *(_BYTE *)(v8 + 40) = 1;
        if (i[40])
        {
          v15 = *((_QWORD *)i + 4);
          *((_QWORD *)i + 4) = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1)
            {
              v27 = *(JSC::Yarr::BytecodePattern **)(v15 + 24);
              *(_QWORD *)(v15 + 24) = 0;
              if (v27)
              {
                JSC::Yarr::BytecodePattern::~BytecodePattern(v27, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
              }
              v36 = *(_QWORD **)(v15 + 8);
              if (v36)
              {
                v37 = (void *)v36[5];
                v38 = v36[6];
                v36[5] = 0;
                v36[6] = 0;
                v36[4] = 0;
                if (munmap(v37, v38) == -1)
                {
                  __break(0xC471u);
                  return;
                }
              }
              WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
            }
            else
            {
              --*(_DWORD *)v15;
            }
          }
        }
      }
      v16 = *((_QWORD *)i + 3);
      if (v16)
      {
        v39 = *(unsigned int *)(v16 - 4);
        if ((_DWORD)v39)
        {
          v40 = (WTF::StringImpl **)*((_QWORD *)i + 3);
          do
          {
            v41 = *v40;
            if (*v40 != (WTF::StringImpl *)-1)
            {
              *v40 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                {
                  WTF::StringImpl::~StringImpl(v41, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
                }
                else
                {
                  *(_DWORD *)v41 -= 2;
                }
              }
            }
            ++v40;
            --v39;
          }
          while (v39);
        }
        WTF::fastFree(v16 - 16, a2, a3, a4, a5, a6, a7, a8);
      }
      v17 = (WTF *)*((_QWORD *)i + 2);
      *((_QWORD *)i + 2) = 0;
      if (v17)
        WTF::RefCounted<JSC::Breakpoint>::deref(v17, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      v18 = *(WTF::StringImpl **)i;
      *(_QWORD *)i = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::~StringImpl(v18, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
      v8 += 48;
    }
  }
}

void WTF::Detail::CallableWrapper<Inspector::InspectorDebuggerAgent::addSymbolicBreakpoint(WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&)::$_0,void,JSC::CodeBlock *>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorDebuggerAgent::SymbolicBreakpoint *v9;
  uint64_t v10;
  BOOL v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  double v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;

  v9 = *(Inspector::InspectorDebuggerAgent::SymbolicBreakpoint **)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 64);
  if (v10)
    v11 = *(_BYTE *)(v10 + 5) == 12;
  else
    v11 = 0;
  if (v11)
  {
    v12 = *(WTF::StringImpl **)(*(_QWORD *)(v10 + 88) + 80);
    if (v12)
      *(_DWORD *)v12 += 2;
  }
  else
  {
    v12 = 0;
  }
  v32 = v12;
  v20 = Inspector::InspectorDebuggerAgent::SymbolicBreakpoint::matches(v9, &v32, a3, a4, a5, a6, a7, a8);
  v22 = v32;
  v32 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      if (!v20)
        return;
      goto LABEL_12;
    }
    *(_DWORD *)v22 -= 2;
  }
  if (!v20)
    return;
LABEL_12:
  *(_DWORD *)(a2 + 40) += 4;
  v23 = *(_QWORD *)(a2 + 120);
  if (v23)
  {
    if ((*(_BYTE *)(v23 + 12) & 0xFE) == 4)
      JSC::CodeBlock::jettison(a2, 2u, 0, 0, v21, v16, v17, v18, v19);
  }
}

void WTF::VectorMover<false,Inspector::InspectorDebuggerAgent::SymbolicBreakpoint>::moveOverlapping(char *a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::Yarr::BytecodePattern *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  size_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v8 = a2;
  if ((unint64_t)a1 > a3)
  {
    WTF::VectorMover<false,Inspector::InspectorDebuggerAgent::SymbolicBreakpoint>::move(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (a2 != a1)
  {
    v10 = a3 + a2 - a1;
    v11 = v10;
    do
    {
      v13 = v8 - 48;
      v12 = *((_QWORD *)v8 - 6);
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v11 - 48) = v12;
      v11 -= 48;
      *(_WORD *)(v11 + 8) = *((_WORD *)v8 - 20);
      v14 = *((_QWORD *)v8 - 4);
      *((_QWORD *)v13 + 2) = 0;
      *(_QWORD *)(v11 + 16) = v14;
      *(_QWORD *)(v11 + 24) = 0;
      v15 = *((_QWORD *)v8 - 3);
      *((_QWORD *)v13 + 3) = 0;
      *(_QWORD *)(v11 + 24) = v15;
      *(_BYTE *)(v11 + 32) = 0;
      *(_BYTE *)(v11 + 40) = 0;
      if (*(v8 - 8))
      {
        v16 = (_DWORD *)*((_QWORD *)v8 - 2);
        if (v16)
          ++*v16;
        *(_QWORD *)(v10 - 16) = v16;
        *(_BYTE *)(v10 - 8) = 1;
        if (*(v8 - 8))
        {
          v17 = *((_QWORD *)v8 - 2);
          *((_QWORD *)v8 - 2) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 1)
            {
              v29 = *(JSC::Yarr::BytecodePattern **)(v17 + 24);
              *(_QWORD *)(v17 + 24) = 0;
              if (v29)
              {
                JSC::Yarr::BytecodePattern::~BytecodePattern(v29, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
              }
              v38 = *(_QWORD **)(v17 + 8);
              if (v38)
              {
                v39 = (void *)v38[5];
                v40 = v38[6];
                v38[5] = 0;
                v38[6] = 0;
                v38[4] = 0;
                if (munmap(v39, v40) == -1)
                {
                  __break(0xC471u);
                  return;
                }
              }
              WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
            }
            else
            {
              --*(_DWORD *)v17;
            }
          }
        }
      }
      v18 = *((_QWORD *)v8 - 3);
      if (v18)
      {
        v41 = *(unsigned int *)(v18 - 4);
        if ((_DWORD)v41)
        {
          v42 = (WTF::StringImpl **)*((_QWORD *)v8 - 3);
          do
          {
            v43 = *v42;
            if (*v42 != (WTF::StringImpl *)-1)
            {
              *v42 = 0;
              if (v43)
              {
                if (*(_DWORD *)v43 == 2)
                {
                  WTF::StringImpl::~StringImpl(v43, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
                }
                else
                {
                  *(_DWORD *)v43 -= 2;
                }
              }
            }
            ++v42;
            --v41;
          }
          while (v41);
        }
        WTF::fastFree(v18 - 16, a2, a3, a4, a5, a6, a7, a8);
      }
      v19 = (WTF *)*((_QWORD *)v8 - 4);
      *((_QWORD *)v8 - 4) = 0;
      if (v19)
        WTF::RefCounted<JSC::Breakpoint>::deref(v19, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      v8 -= 48;
      v20 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
      v10 = v11;
    }
    while (v13 != a1);
  }
}

void WTF::Detail::CallableWrapper<Inspector::InspectorDebuggerAgent::removeSymbolicBreakpoint(WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &)::$_0,void,JSC::CodeBlock *>::call(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::InspectorDebuggerAgent::SymbolicBreakpoint *v9;
  uint64_t v10;
  BOOL v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v9 = *(Inspector::InspectorDebuggerAgent::SymbolicBreakpoint **)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 64);
  if (v10)
    v11 = *(_BYTE *)(v10 + 5) == 12;
  else
    v11 = 0;
  if (v11)
  {
    v12 = *(WTF::StringImpl **)(*(_QWORD *)(v10 + 88) + 80);
    if (v12)
      *(_DWORD *)v12 += 2;
  }
  else
  {
    v12 = 0;
  }
  v30 = v12;
  v20 = Inspector::InspectorDebuggerAgent::SymbolicBreakpoint::matches(v9, &v30, a3, a4, a5, a6, a7, a8);
  v21 = v30;
  v30 = 0;
  if (!v21)
  {
LABEL_11:
    if (!v20)
      return;
    goto LABEL_12;
  }
  if (*(_DWORD *)v21 != 2)
  {
    *(_DWORD *)v21 -= 2;
    goto LABEL_11;
  }
  WTF::StringImpl::~StringImpl(v21, v13, v14, v15, v16, v17, v18, v19);
  WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
  if (!v20)
    return;
LABEL_12:
  *(_DWORD *)(a2 + 40) -= 4;
}

void WTF::VectorMover<false,WTF::Box<Inspector::ReplacedThunk>>::moveOverlapping(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v8 = (_QWORD *)a3;
  v9 = (unint64_t *)a2;
  v10 = a1;
  if ((unint64_t)a1 <= a3)
  {
    if ((unint64_t *)a2 != a1)
    {
      v22 = a3 + a2 - (_QWORD)a1;
      do
      {
        v23 = *--v9;
        *v9 = 0;
        *(_QWORD *)(v22 - 8) = v23;
        v22 -= 8;
        v24 = *v9;
        *v9 = 0;
        if (v24)
        {
          do
          {
            v25 = __ldaxr((unsigned int *)v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, (unsigned int *)v24));
          if (!v26)
          {
            atomic_store(1u, (unsigned int *)v24);
            Inspector::ReplacedThunk::~ReplacedThunk((uint64_t **)(v24 + 8), a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v24, v27, v28, v29, v30, v31, v32, v33);
          }
        }
      }
      while (v9 != v10);
    }
  }
  else if (a1 != (unint64_t *)a2)
  {
    do
    {
      v11 = *v10;
      *v10 = 0;
      *v8 = v11;
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr((unsigned int *)v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)v12));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)v12);
          Inspector::ReplacedThunk::~ReplacedThunk((uint64_t **)(v12 + 8), a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v12, v15, v16, v17, v18, v19, v20, v21);
        }
      }
      ++v8;
      ++v10;
    }
    while (v10 != v9);
  }
}

void WTF::Detail::CallableWrapper<Inspector::InspectorDebuggerAgent::getBreakpointLocations(WTF::Ref<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &&,WTF::Ref<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> &)::$_0,void,int,int>::call(uint64_t a1, int a2, int a3)
{
  WTF *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  int *v11;
  _BYTE *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Inspector::Protocol::Debugger::Location *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Inspector::Protocol::Debugger::Location **v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  int *v52;
  WTF *v53[4];

  v53[3] = *(WTF **)MEMORY[0x1E0C80C00];
  v6 = (WTF *)WTF::fastMalloc((WTF *)0x28);
  v7 = 0;
  *(_QWORD *)v6 = 0x500000001;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 2) = 0;
  v53[0] = v6;
  v8 = **(_DWORD **)(a1 + 8);
  do
  {
    v9 = (v8 % 0xA) | 0x30;
    *((_BYTE *)&v53[2] + v7-- + 7) = (v8 % 0xA) | 0x30;
    v10 = v8 > 9;
    v8 /= 0xAu;
  }
  while (v10);
  if (v7 + 14 >= 15)
    __break(1u);
  if (v7)
  {
    if ((unint64_t)-v7 >> 31)
    {
      __break(0xC471u);
      goto LABEL_34;
    }
    v11 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v7));
    v12 = v11 + 5;
    *v11 = 2;
    v11[1] = -(int)v7;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 4;
    v52 = v11;
    if (v7 == -1)
      *v12 = v9;
    else
      memcpy(v12, (char *)&v53[3] + v7, -v7);
  }
  else
  {
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v52 = &WTF::StringImpl::s_emptyAtomString;
  }
  Inspector::Protocol::Console::CallFrame::Builder<3>::setScriptId((uint64_t *)v53, &v52);
  Inspector::Protocol::Console::CallFrame::Builder<7>::setLineNumber((uint64_t *)v53, a2);
  v20 = v53[0];
  v53[0] = 0;
  if (*v11 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    v51 = v53[0];
    v53[0] = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 1)
        WTF::JSONImpl::Value::operator delete(v51, v44, v45, v46, v47, v48, v49, v50);
      else
        --*(_DWORD *)v51;
    }
  }
  else
  {
    *v11 -= 2;
  }
  Inspector::Protocol::Debugger::Location::setColumnNumber(v20, a3);
  v21 = **(_QWORD **)(a1 + 16);
  v22 = *(unsigned int *)(v21 + 28);
  if ((_DWORD)v22 != *(_DWORD *)(v21 + 24))
  {
    v35 = (Inspector::Protocol::Debugger::Location **)(*(_QWORD *)(v21 + 16) + 8 * v22);
    goto LABEL_26;
  }
  v23 = v22 + (v22 >> 2);
  if (v23 >= 0x10)
    v24 = v23 + 1;
  else
    v24 = 16;
  if (v24 <= v22 + 1)
    v25 = v22 + 1;
  else
    v25 = v24;
  if (v25 >> 29)
  {
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x1986CBBACLL);
  }
  v26 = *(const void **)(v21 + 16);
  v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
  *(_DWORD *)(v21 + 24) = v25;
  *(_QWORD *)(v21 + 16) = v27;
  memcpy(v27, v26, 8 * v22);
  if (v26)
  {
    if (*(const void **)(v21 + 16) == v26)
    {
      *(_QWORD *)(v21 + 16) = 0;
      *(_DWORD *)(v21 + 24) = 0;
    }
    WTF::fastFree((unint64_t)v26, v28, v29, v30, v31, v32, v33, v34);
  }
  v22 = *(unsigned int *)(v21 + 28);
  v35 = (Inspector::Protocol::Debugger::Location **)(*(_QWORD *)(v21 + 16) + 8 * v22);
LABEL_26:
  *v35 = v20;
  *(_DWORD *)(v21 + 28) = v22 + 1;
}

void WTF::Detail::CallableWrapper<Inspector::InspectorDebuggerAgent::registerIdleHandler(void)::$_0,void>::call(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  Inspector::InspectorDebuggerAgent::didBecomeIdle(*(Inspector::InspectorDebuggerAgent **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9);
}

unint64_t WTF::Vector<Inspector::InspectorDebuggerAgent::BlackboxConfig,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<Inspector::InspectorDebuggerAgent::BlackboxConfig,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<Inspector::InspectorDebuggerAgent::BlackboxConfig,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<Inspector::InspectorDebuggerAgent::BlackboxConfig,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = v9;
        v18 = v7 + 16 * v8;
        v19 = v7;
        do
        {
          v20 = *(WTF::StringImpl **)v19;
          *(_QWORD *)v19 = 0;
          *(_QWORD *)v17 = v20;
          *(_WORD *)(v17 + 8) = *(_WORD *)(v19 + 8);
          v21 = *(WTF::StringImpl **)v19;
          *(_QWORD *)v19 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::~StringImpl(v21, v10, v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
            }
            else
            {
              *(_DWORD *)v21 -= 2;
            }
          }
          v19 += 16;
          v17 += 16;
        }
        while (v19 != v18);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

unint64_t WTF::Vector<WTF::Box<Inspector::ReplacedThunk>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2;
  if (qword_1ECF58878 <= a2 && qword_1ECF58878 + 8 * (unint64_t)dword_1ECF58884 > a2)
  {
    v6 = a2 - qword_1ECF58878;
    v7 = dword_1ECF58880 + ((unint64_t)dword_1ECF58880 >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a1)
      a1 = v8;
    WTF::Vector<WTF::Box<Inspector::ReplacedThunk>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1);
    return qword_1ECF58878 + v6;
  }
  else
  {
    v4 = dword_1ECF58880 + ((unint64_t)dword_1ECF58880 >> 2);
    if (v4 >= 0x10)
      v5 = v4 + 1;
    else
      v5 = 16;
    if (v5 > a1)
      a1 = v5;
    WTF::Vector<WTF::Box<Inspector::ReplacedThunk>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1);
  }
  return v2;
}

void WTF::Vector<WTF::Box<Inspector::ReplacedThunk>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unint64_t a1)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (dword_1ECF58880 < a1)
  {
    v1 = a1;
    if (a1 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = qword_1ECF58878;
      v3 = dword_1ECF58884;
      v4 = WTF::fastMalloc((WTF *)(8 * a1));
      dword_1ECF58880 = v1;
      qword_1ECF58878 = v4;
      if ((_DWORD)v3)
      {
        v12 = (_QWORD *)v4;
        v13 = (unint64_t *)(v2 + 8 * v3);
        v14 = (unint64_t *)v2;
        do
        {
          v15 = *v14;
          *v14 = 0;
          *v12 = v15;
          v16 = *v14;
          *v14 = 0;
          if (v16)
          {
            do
            {
              v17 = __ldaxr((unsigned int *)v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, (unsigned int *)v16));
            if (!v18)
            {
              atomic_store(1u, (unsigned int *)v16);
              Inspector::ReplacedThunk::~ReplacedThunk((uint64_t **)(v16 + 8), (uint64_t)v5, v6, v7, v8, v9, v10, v11);
              WTF::fastFree(v16, v19, v20, v21, v22, v23, v24, v25);
            }
          }
          ++v12;
          ++v14;
        }
        while (v14 != v13);
      }
      if (v2)
      {
        if (qword_1ECF58878 == v2)
        {
          qword_1ECF58878 = 0;
          dword_1ECF58880 = 0;
        }
        WTF::fastFree(v2, v5, v6, v7, v8, v9, v10, v11);
      }
    }
  }
}

uint64_t JSC::Debugger::Script::operator=(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _DWORD *v19;
  __int128 v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v10 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v10 += 2;
  v11 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = *(_DWORD **)(a2 + 8);
  if (v12)
    *v12 += 2;
  v13 = *(WTF::StringImpl **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  v14 = *(_DWORD **)(a2 + 16);
  if (v14)
    *v14 += 2;
  v15 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::~StringImpl(v15, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v15 -= 2;
    }
  }
  v16 = *(_DWORD **)(a2 + 24);
  if (v16)
    *v16 += 2;
  v17 = *(WTF::StringImpl **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v16;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v17 -= 2;
    }
  }
  v18 = *(_QWORD *)(a2 + 32);
  if (v18)
    ++*(_DWORD *)(v18 + 8);
  v19 = *(_DWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v18;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v20 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v20;
  return a1;
}

void WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,JSC::Debugger::Script>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,JSC::Debugger::Script>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,JSC::Debugger::Script,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<JSC::Debugger::Script>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t i;
  int *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(72 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_OWORD *)(v7 + 24);
    do
    {
      *((_DWORD *)v16 - 2) = 0;
      *v16 = 0uLL;
      v16[1] = 0uLL;
      v16[2] = 0uLL;
      v16[3] = 0uLL;
      v16 = (_OWORD *)((char *)v16 + 72);
      --v15;
    }
    while (v15);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v18 = (int *)(v4 + 72 * i);
      v19 = *v18;
      if (*v18 != -1)
      {
        if (v19)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = 0;
          v23 = 9 * ((v19 + ~(v19 << 15)) ^ ((v19 + ~(v19 << 15)) >> 10));
          v24 = (v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11);
          v25 = v24 ^ HIWORD(v24);
          do
          {
            v26 = v25 & v21;
            v27 = (int *)(v20 + 72 * (v25 & v21));
            v25 = ++v22 + (v25 & v21);
          }
          while (*v27);
          v28 = v20 + 72 * v26;
          JSC::Debugger::Script::~Script((JSC::Debugger::Script *)(v28 + 8), v8, v9, v10, v11, v12, v13, v14);
          *v27 = *v18;
          v29 = v4 + 72 * i;
          v30 = *(_QWORD *)(v29 + 8);
          v29 += 8;
          *(_QWORD *)v29 = 0;
          *(_QWORD *)(v28 + 8) = v30;
          v31 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          *(_QWORD *)(v28 + 16) = v31;
          v32 = *(_QWORD *)(v29 + 16);
          *(_QWORD *)(v29 + 16) = 0;
          *(_QWORD *)(v28 + 24) = v32;
          v33 = *(_QWORD *)(v29 + 24);
          *(_QWORD *)(v29 + 24) = 0;
          *(_QWORD *)(v28 + 32) = v33;
          v34 = *(_QWORD *)(v29 + 32);
          *(_QWORD *)(v29 + 32) = 0;
          *(_QWORD *)(v28 + 40) = v34;
          v35 = *(_OWORD *)(v29 + 40);
          *(_BYTE *)(v28 + 64) = *(_BYTE *)(v29 + 56);
          *(_OWORD *)(v28 + 48) = v35;
          JSC::Debugger::Script::~Script((JSC::Debugger::Script *)v29, v36, v37, v38, v39, v40, v41, v42);
        }
        else
        {
          JSC::Debugger::Script::~Script((JSC::Debugger::Script *)(v4 + 72 * i + 8), v8, v9, v10, v11, v12, v13, v14);
        }
      }
    }
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t WTF::Detail::CallableWrapper<Inspector::InspectorHeapAgent::snapshot(void)::$_0,BOOL,JSC::HeapSnapshotNode const&>::call(uint64_t a1, _DWORD **a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = **a2 & 0xFFFFFFFE;
  if (!(_DWORD)v2)
    return 1;
  if (!*(_QWORD *)(16 * v2 + 0x28))
    return 1;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 56) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56));
  if ((_DWORD)result)
    return 1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::awaitPromise(WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,std::optional<BOOL> &,WTF::Ref<Inspector::RuntimeBackendDispatcherHandler::AwaitPromiseCallback,WTF::RawPtrTraits<Inspector::RuntimeBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::RuntimeBackendDispatcherHandler>> &&)::$_0,void,WTF::String&,WTF::RefPtr<Inspector::Protocol::Runtime::RemoteObject,Inspector::RuntimeBackendDispatcherHandler::AwaitPromiseCallback<Inspector::Protocol>,WTF::RawPtrTraits<Inspector::RuntimeBackendDispatcherHandler><Inspector::Protocol>> &&,std::optional<BOOL> &,std::optional<int> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3595308;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

void WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::awaitPromise(WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,std::optional<BOOL> &,WTF::Ref<Inspector::RuntimeBackendDispatcherHandler::AwaitPromiseCallback,WTF::RawPtrTraits<Inspector::RuntimeBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::RuntimeBackendDispatcherHandler>> &&)::$_0,void,WTF::String&,WTF::RefPtr<Inspector::Protocol::Runtime::RemoteObject,Inspector::RuntimeBackendDispatcherHandler::AwaitPromiseCallback<Inspector::Protocol>,WTF::RawPtrTraits<Inspector::RuntimeBackendDispatcherHandler><Inspector::Protocol>> &&,std::optional<BOOL> &,std::optional<int> &&>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;

  v9 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3595308;
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::awaitPromise(WTF::String const&,std::optional<BOOL> &&,std::optional<BOOL> &,std::optional<BOOL> &,WTF::Ref<Inspector::RuntimeBackendDispatcherHandler::AwaitPromiseCallback,WTF::RawPtrTraits<Inspector::RuntimeBackendDispatcherHandler>,WTF::DefaultRefDerefTraits<Inspector::RuntimeBackendDispatcherHandler>> &&)::$_0,void,WTF::String&,WTF::RefPtr<Inspector::Protocol::Runtime::RemoteObject,Inspector::RuntimeBackendDispatcherHandler::AwaitPromiseCallback<Inspector::Protocol>,WTF::RawPtrTraits<Inspector::RuntimeBackendDispatcherHandler><Inspector::Protocol>> &&,std::optional<BOOL> &,std::optional<int> &&>::call(uint64_t a1, WTF::StringImpl **a2, WTF **a3, char *a4, uint64_t a5)
{
  Inspector::BackendDispatcher::CallbackBase *v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;

  v5 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 8);
  if (*a3)
  {
    v14 = *a3;
    *a3 = 0;
    Inspector::RuntimeBackendDispatcherHandler::AwaitPromiseCallback::sendSuccess((uint64_t)v5, &v14, a4, a5);
    v13 = v14;
    v14 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::JSONImpl::Value::operator delete(v13, v6, v7, v8, v9, v10, v11, v12);
      else
        --*(_DWORD *)v13;
    }
  }
  else
  {
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v5, a2);
  }
}

_QWORD *WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::callFunctionOn(Inspector::InjectedScript &,WTF::String const&,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,std::optional<BOOL> &&,std::optional<BOOL>,std::optional<BOOL>,std::optional<BOOL>,std::optional<BOOL>,WTF::Ref<Inspector::RuntimeBackendDispatcherHandler::CallFunctionOnCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::String&,WTF::RefPtr<Inspector::Protocol::Runtime::RemoteObject,WTF::RawPtrTraits<WTF::String&>,WTF::DefaultRefDerefTraits<WTF::String&>> &&,std::optional<BOOL>,std::__1<int> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3595330;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

void WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::callFunctionOn(Inspector::InjectedScript &,WTF::String const&,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,std::optional<BOOL> &&,std::optional<BOOL>,std::optional<BOOL>,std::optional<BOOL>,std::optional<BOOL>,WTF::Ref<Inspector::RuntimeBackendDispatcherHandler::CallFunctionOnCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::String&,WTF::RefPtr<Inspector::Protocol::Runtime::RemoteObject,WTF::RawPtrTraits<WTF::String&>,WTF::DefaultRefDerefTraits<WTF::String&>> &&,std::optional<BOOL>,std::__1<int> &&>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;

  v9 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3595330;
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::callFunctionOn(Inspector::InjectedScript &,WTF::String const&,WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Array,WTF::RawPtrTraits<WTF::JSONImpl::Array>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Array>> &&,std::optional<BOOL> &&,std::optional<BOOL>,std::optional<BOOL>,std::optional<BOOL>,std::optional<BOOL>,WTF::Ref<Inspector::RuntimeBackendDispatcherHandler::CallFunctionOnCallback,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::String&,WTF::RefPtr<Inspector::Protocol::Runtime::RemoteObject,WTF::RawPtrTraits<WTF::String&>,WTF::DefaultRefDerefTraits<WTF::String&>> &&,std::optional<BOOL>,std::__1<int> &&>::call(uint64_t a1, WTF::StringImpl **a2, WTF **a3, char *a4)
{
  Inspector::BackendDispatcher::CallbackBase *v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;

  v4 = *(Inspector::BackendDispatcher::CallbackBase **)(a1 + 8);
  if (*a3)
  {
    v13 = *a3;
    *a3 = 0;
    Inspector::RuntimeBackendDispatcherHandler::CallFunctionOnCallback::sendSuccess((uint64_t)v4, &v13, a4);
    v12 = v13;
    v13 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::JSONImpl::Value::operator delete(v12, v5, v6, v7, v8, v9, v10, v11);
      else
        --*(_DWORD *)v12;
    }
  }
  else
  {
    Inspector::BackendDispatcher::CallbackBase::sendFailure(v4, a2);
  }
}

uint64_t WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::setTypeProfilerEnabledState(BOOL)::$_0,void>::call(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  int v13;
  JSC::TypeProfiler *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v9 = *(unsigned __int8 *)(a1 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    result = JSC::VM::enableTypeProfiler((JSC::VM *)result);
    if ((result & 1) != 0)
      return JSC::VM::deleteAllCode(*(_QWORD *)(a1 + 8), 0);
  }
  else
  {
    v11 = result + 93168;
    v12 = *(_DWORD *)(result + 93184);
    if (v12)
    {
      v13 = v12 - 1;
      *(_DWORD *)(result + 93184) = v13;
      if (!v13)
      {
        v14 = *(JSC::TypeProfiler **)v11;
        *(_QWORD *)v11 = 0;
        if (v14)
        {
          JSC::TypeProfiler::~TypeProfiler(v14, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
        }
        v23 = *(_QWORD *)(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 16);
          if (v24)
            WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
        }
        return JSC::VM::deleteAllCode(*(_QWORD *)(a1 + 8), 0);
      }
    }
    else
    {
      result = 1232;
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<Inspector::InspectorRuntimeAgent::setControlFlowProfilerEnabledState(BOOL)::$_0,void>::call(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  JSC::ControlFlowProfiler *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSC::ControlFlowProfiler *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v8 = result;
  v9 = *(_QWORD *)(result + 8) + 93280;
  v10 = *(_DWORD *)(*(_QWORD *)(result + 8) + 93288);
  if (*(_BYTE *)(result + 16))
  {
    if (v10)
    {
      *(_DWORD *)(*(_QWORD *)(result + 8) + 93288) = v10 + 1;
      return result;
    }
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v19 = 0;
    v19[1] = -1;
    v19[3] = 0;
    v19[4] = 0;
    v19[2] = 0;
    v20 = *(JSC::ControlFlowProfiler **)v9;
    *(_QWORD *)v9 = v19;
    if (v20)
    {
      JSC::ControlFlowProfiler::~ControlFlowProfiler(v20, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    ++*(_DWORD *)(v9 + 8);
    return JSC::VM::deleteAllCode(*(_QWORD *)(v8 + 8), 0);
  }
  if (v10)
  {
    v11 = v10 - 1;
    *(_DWORD *)(*(_QWORD *)(result + 8) + 93288) = v11;
    if (!v11)
    {
      v29 = *(JSC::ControlFlowProfiler **)v9;
      *(_QWORD *)v9 = 0;
      if (v29)
      {
        JSC::ControlFlowProfiler::~ControlFlowProfiler(v29, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
      return JSC::VM::deleteAllCode(*(_QWORD *)(v8 + 8), 0);
    }
  }
  else
  {
    result = 1232;
    __break(0xC471u);
  }
  return result;
}

void Inspector::JSGlobalObjectRuntimeAgent::~JSGlobalObjectRuntimeAgent(Inspector::JSGlobalObjectRuntimeAgent *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unint64_t v10;

  v9 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(this, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase(this, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
}

void `non-virtual thunk to'Inspector::JSGlobalObjectRuntimeAgent::~JSGlobalObjectRuntimeAgent(Inspector::JSGlobalObjectRuntimeAgent *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unint64_t v10;

  v9 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase((Inspector::JSGlobalObjectRuntimeAgent *)((char *)this - 16), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
}

{
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  Inspector::InspectorAgentBase::~InspectorAgentBase((Inspector::JSGlobalObjectRuntimeAgent *)((char *)this - 16), (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
}

void Inspector::JSGlobalObjectRuntimeAgent::injectedScriptForEval(uint64_t a1@<X0>, WTF::StringImpl **a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _QWORD *v21;
  WTF::AtomStringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  if (*(_BYTE *)(a3 + 4))
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v18 = 0x5900000002;
    *(_QWORD *)(v18 + 8) = "executionContextId is not supported for JSContexts as there is only one execution context";
    *(_DWORD *)(v18 + 16) = 4;
    v19 = *a2;
    *a2 = (WTF::StringImpl *)v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
        WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    v20 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_DWORD *)(v20 + 4) = 14;
    *(_QWORD *)(v20 + 8) = "InjectedScript";
    *(_DWORD *)(v20 + 16) = 4;
    a9[3] = 0;
    a9[4] = 0;
    a9[2] = 0;
    *(_DWORD *)v20 = 2;
    *a9 = &off_1E3591330;
    a9[1] = v20;
  }
  else
  {
    Inspector::InjectedScriptManager::injectedScriptFor(*(_QWORD *)(a1 + 24), *(JSC::JSGlobalObject **)(a1 + 72), a3, a4, a5, a6, a7, a8, (uint64_t)a9);
    v21 = (_QWORD *)a9[3];
    if (!v21 || !*v21)
    {
      v29 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v29 = 0x3700000002;
      *(_QWORD *)(v29 + 8) = "Missing execution context for given executionContextId.";
      *(_DWORD *)(v29 + 16) = 4;
      v30 = *a2;
      *a2 = (WTF::StringImpl *)v29;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
        {
          WTF::StringImpl::~StringImpl(v30, v22, v23, v24, v25, v26, v27, v28);
          WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
        }
        else
        {
          *(_DWORD *)v30 -= 2;
        }
      }
    }
  }
}

void Inspector::RemoteAutomationTarget::~RemoteAutomationTarget(Inspector::RemoteAutomationTarget *this)
{
  Inspector::RemoteInspector *v2;
  const __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E3595560;
  v2 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton(this);
  Inspector::RemoteInspector::unregisterTarget(v2, this, v3, v4, v5, v6, v7, v8);
}

void Inspector::RemoteControllableTarget::~RemoteControllableTarget(Inspector::RemoteControllableTarget *this)
{
  Inspector::RemoteInspector *v2;
  const __CFString *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E3595560;
  v2 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton(this);
  Inspector::RemoteInspector::unregisterTarget(v2, this, v3, v4, v5, v6, v7, v8);
}

void Inspector::RemoteAutomationTarget::setIsPaired(Inspector::RemoteAutomationTarget *this, int a2)
{
  Inspector::RemoteInspector *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*((unsigned __int8 *)this + 20) != a2)
  {
    *((_BYTE *)this + 20) = a2;
    v3 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton(this);
    Inspector::RemoteInspector::updateTarget(v3, this, v4, v5, v6, v7, v8, v9);
  }
}

void Inspector::RemoteControllableTarget::update(Inspector::RemoteControllableTarget *this)
{
  Inspector::RemoteInspector *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton(this);
  Inspector::RemoteInspector::updateTarget(v2, this, v3, v4, v5, v6, v7, v8);
}

void Inspector::RemoteInspector::unregisterTarget(Inspector::RemoteInspector *this, Inspector::RemoteControllableTarget *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  __CFString *v31;
  unsigned int *info;
  void *v33;
  void *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  dispatch_time_t v47;
  NSObject *global_queue;
  _QWORD block[5];

  v10 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  v12 = *((_DWORD *)a2 + 4);
  if (v12)
  {
    v13 = (uint64_t *)((char *)this + 16);
    v14 = *((_QWORD *)this + 2);
    if (v14)
    {
      v15 = *(_DWORD *)(v14 - 8);
      v16 = 9 * ((v12 + ~(v12 << 15)) ^ ((v12 + ~(v12 << 15)) >> 10));
      v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
      v18 = v15 & (v17 ^ HIWORD(v17));
      v19 = *(_DWORD *)(v14 + 16 * v18);
      if (v19 != v12)
      {
        v20 = 1;
        while (v19)
        {
          v18 = ((_DWORD)v18 + v20) & v15;
          v19 = *(_DWORD *)(v14 + 16 * v18);
          ++v20;
          if (v19 == v12)
            goto LABEL_12;
        }
        v18 = *(unsigned int *)(v14 - 4);
      }
LABEL_12:
      if (v18 != *(_DWORD *)(v14 - 4))
      {
        v21 = 16 * v18;
        v22 = -1;
        *(_DWORD *)(v14 + v21) = -1;
        ++*(_DWORD *)(*v13 - 16);
        v23 = *v13;
        if (*v13)
          v22 = *(_DWORD *)(v23 - 12) - 1;
        *(_DWORD *)(v23 - 12) = v22;
        v24 = *v13;
        if (*v13)
        {
          v25 = 6 * *(_DWORD *)(v24 - 12);
          v26 = *(_DWORD *)(v24 - 4);
          if (v25 < v26 && v26 >= 9)
            WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,Inspector::RemoteControllableTarget *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,Inspector::RemoteControllableTarget *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,Inspector::RemoteControllableTarget *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<Inspector::RemoteControllableTarget *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v13, v26 >> 1, 0, a4, a5, a6, a7, a8);
        }
      }
    }
    v28 = *((_QWORD *)this + 4);
    if (v28)
    {
      v46 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(*((_QWORD *)this + 4), v12);
      if (v46)
      {
        a3 = (const __CFString *)(v28 + 16 * *(unsigned int *)(v28 - 4));
        if ((const __CFString *)v46 != a3)
          WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::removeWithoutEntryConsistencyCheck((uint64_t *)this + 4, v46, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
    v29 = *((_QWORD *)this + 3);
    if (v29)
    {
      v31 = (__CFString *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(*((_QWORD *)this + 3), v12);
      if (v31)
      {
        a3 = (const __CFString *)(v29 + 16 * *(unsigned int *)(v29 - 4));
        if (v31 != a3)
        {
          info = (unsigned int *)v31->info;
          v31->info = 0;
          WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::remove((uint64_t *)this + 3, v31, a3, a4, a5, a6, a7, a8);
          if (info)
          {
            Inspector::RemoteConnectionToTarget::targetClosed((Inspector::RemoteConnectionToTarget *)info, v33, (uint64_t)a3, a4, a5, a6, a7, a8);
            v35 = info + 2;
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, info + 2);
              Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)info, v34, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
            }
          }
        }
      }
    }
    if (*((_QWORD *)this + 5))
    {
      if (!*((_BYTE *)this + 114))
      {
        *((_BYTE *)this + 114) = 1;
        v47 = dispatch_time(0, 200000000);
        global_queue = dispatch_get_global_queue(0, 0);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = ___ZN9Inspector15RemoteInspector16pushListingsSoonEv_block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = this;
        dispatch_after(v47, global_queue, block);
      }
    }
  }
  v30 = __ldxr(v10);
  if (v30 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, v10))
LABEL_28:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void Inspector::RemoteControllableTarget::init(Inspector::RemoteControllableTarget *this)
{
  Inspector::RemoteInspector *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton(this);
  Inspector::RemoteInspector::registerTarget(v2, this, v3, v4, v5, v6, v7, v8);
}

void Inspector::RemoteInspector::registerTarget(Inspector::RemoteInspector *this, Inspector::RemoteControllableTarget *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  const Inspector::RemoteInspectionTarget *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  CFTypeRef v29;
  dispatch_time_t v30;
  NSObject *global_queue;
  CFTypeRef cf;
  int v33;
  Inspector::RemoteControllableTarget *v34;
  _QWORD block[5];

  v34 = a2;
  v9 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_4:
  v11 = *((_DWORD *)this + 26);
  v12 = (uint64_t *)((char *)this + 16);
  while (1)
  {
    do
    {
LABEL_5:
      v13 = v11++;
      *((_DWORD *)this + 26) = v11;
    }
    while (v11 < 2);
    v14 = *v12;
    if (!*v12)
      break;
    v15 = *(_DWORD *)(v14 - 8);
    v16 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
    v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
    v18 = v15 & (v17 ^ HIWORD(v17));
    v19 = *(_DWORD *)(v14 + 16 * v18);
    if (v19 != v13)
    {
      v20 = 1;
      while (v19)
      {
        v18 = (v18 + v20) & v15;
        v19 = *(_DWORD *)(v14 + 16 * v18);
        ++v20;
        if (v19 == v13)
          goto LABEL_5;
      }
      break;
    }
  }
  v33 = v13;
  *((_DWORD *)v34 + 4) = v13;
  WTF::HashMap<unsigned int,Inspector::RemoteControllableTarget *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<Inspector::RemoteControllableTarget *>,WTF::HashTableTraits>::inlineSet<unsigned int const&,Inspector::RemoteControllableTarget *&>(v12, &v33, &v34, a4, a5, a6, a7, a8, (uint64_t)block);
  v21 = v34;
  if ((*(unsigned int (**)(Inspector::RemoteControllableTarget *))(*(_QWORD *)v34 + 32))(v34))
  {
    Inspector::RemoteInspector::listingForInspectionTarget((uint64_t)this, v21, &cf);
  }
  else
  {
    if ((*(unsigned int (**)(const Inspector::RemoteInspectionTarget *))(*(_QWORD *)v21 + 32))(v21))
      goto LABEL_15;
    Inspector::RemoteInspector::listingForAutomationTarget((uint64_t)this, v21, &cf);
  }
  if (cf)
  {
    WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::RetainPtr<NSDictionary>&>((uint64_t *)this + 4, &v33, &cf, v23, v24, v25, v26, v27, (uint64_t)block);
    v29 = cf;
    cf = 0;
    if (v29)
      CFRelease(v29);
  }
LABEL_15:
  if (*((_QWORD *)this + 5))
  {
    if (!*((_BYTE *)this + 114))
    {
      *((_BYTE *)this + 114) = 1;
      v30 = dispatch_time(0, 200000000);
      global_queue = dispatch_get_global_queue(0, 0);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ZN9Inspector15RemoteInspector16pushListingsSoonEv_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = this;
      dispatch_after(v30, global_queue, block);
    }
  }
  v28 = __ldxr(v9);
  if (v28 == 1)
  {
    if (!__stlxr(0, v9))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, v22, v23, v24, v25, v26, v27);
}

void Inspector::RemoteInspector::updateTarget(Inspector::RemoteInspector *this, Inspector::RemoteControllableTarget *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v10 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
LABEL_3:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
    goto LABEL_4;
  }
  if (__stxr(1u, v10))
    goto LABEL_3;
LABEL_4:
  if (Inspector::RemoteInspector::updateTargetMap(this, a2, a3, a4, a5, a6, a7, a8))
    Inspector::RemoteInspector::pushListingsSoon(this);
  v18 = __ldxr(v10);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v10))
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, v12, v13, v14, v15, v16, v17);
}

uint64_t Inspector::RemoteInspectionTarget::remoteControlAllowed(Inspector::RemoteInspectionTarget *this)
{
  uint64_t v3;

  if (*((_BYTE *)this + 20))
  {
    if (*((_BYTE *)this + 20) != 1)
      return (*(uint64_t (**)(Inspector::RemoteInspectionTarget *))(*(_QWORD *)this + 88))(this);
    {
      v3 = Inspector::RemoteInspectionTarget::allowsInspectionByPolicy(void)const::allowInternalSecurityPolicies;
      if (!Inspector::RemoteInspectionTarget::allowsInspectionByPolicy(void)const::allowInternalSecurityPolicies)
        return (*(uint64_t (**)(Inspector::RemoteInspectionTarget *))(*(_QWORD *)this + 88))(this);
    }
    else
    {
      v3 = os_variant_allows_internal_security_policies();
      Inspector::RemoteInspectionTarget::allowsInspectionByPolicy(void)const::allowInternalSecurityPolicies = v3;
      if (!(_DWORD)v3)
        return (*(uint64_t (**)(Inspector::RemoteInspectionTarget *))(*(_QWORD *)this + 88))(this);
    }
    if (*((_BYTE *)Inspector::RemoteInspector::singleton((Inspector::RemoteInspector *)v3) + 129))
      return (*(uint64_t (**)(Inspector::RemoteInspectionTarget *))(*(_QWORD *)this + 88))(this);
  }
  return 1;
}

BOOL Inspector::RemoteInspectionTarget::allowsInspectionByPolicy(Inspector::RemoteInspectionTarget *this)
{
  int v1;
  _BOOL8 result;
  uint64_t v3;

  v1 = *((unsigned __int8 *)this + 20);
  result = 0;
  if (v1 != 2)
  {
    if (!*((_BYTE *)this + 20))
      return 1;
    if (v1 == 1)
    {
      {
        v3 = Inspector::RemoteInspectionTarget::allowsInspectionByPolicy(void)const::allowInternalSecurityPolicies;
      }
      else
      {
        v3 = os_variant_allows_internal_security_policies();
        Inspector::RemoteInspectionTarget::allowsInspectionByPolicy(void)const::allowInternalSecurityPolicies = v3;
      }
      if ((_DWORD)v3 && !*((_BYTE *)Inspector::RemoteInspector::singleton((Inspector::RemoteInspector *)v3) + 129))
        return 1;
    }
  }
  return result;
}

BOOL Inspector::RemoteInspectionTarget::inspectable(Inspector::RemoteInspectionTarget *this)
{
  unsigned int v1;

  v1 = *((unsigned __int8 *)this + 20);
  return (v1 & 7) == 0 && v1 < 3;
}

void Inspector::RemoteInspectionTarget::setInspectable(Inspector::RemoteInspectionTarget *this, int a2)
{
  char v3;
  Inspector::RemoteInspector *v4;
  Inspector::RemoteInspector *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Inspector::RemoteInspector *v12;

  if (a2)
  {
    *((_BYTE *)this + 20) = 0;
  }
  else
  {
    if ((JSRemoteInspectorGetInspectionFollowsInternalPolicies() & 1) != 0)
      v3 = 1;
    else
      v3 = 2;
    *((_BYTE *)this + 20) = v3;
  }
  v4 = (Inspector::RemoteInspector *)Inspector::RemoteInspectionTarget::allowsInspectionByPolicy(this);
  if ((_DWORD)v4
    && (v4 = (Inspector::RemoteInspector *)(*(uint64_t (**)(Inspector::RemoteInspectionTarget *))(*(_QWORD *)this + 104))(this),
        (_DWORD)v4))
  {
    v12 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton(v4);
    Inspector::RemoteInspector::updateAutomaticInspectionCandidate(v12, this);
  }
  else
  {
    v5 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton(v4);
    Inspector::RemoteInspector::updateTarget(v5, this, v6, v7, v8, v9, v10, v11);
  }
}

void Inspector::RemoteInspectionTarget::pauseWaitingForAutomaticInspection(Inspector::RemoteInspectionTarget *this)
{
  Inspector::RemoteInspectionTarget *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  _BOOL4 v18;
  int v19;
  int v20;
  const __CFString *v21;

  v1 = this;
  while (1)
  {
    v2 = (unsigned __int8 *)Inspector::RemoteInspector::singleton(this);
    v9 = v2;
    v10 = *((_DWORD *)v1 + 4);
    v11 = v2 + 8;
    if (__ldaxr(v2 + 8))
    {
      __clrex();
    }
    else if (!__stxr(1u, v11))
    {
      goto LABEL_6;
    }
    v2 = (unsigned __int8 *)WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)(v2 + 8));
LABEL_6:
    v13 = *((_QWORD *)v9 + 17);
    if (v13)
    {
      v14 = *(_DWORD *)(v13 - 8);
      v15 = 9 * ((v10 + ~(v10 << 15)) ^ ((v10 + ~(v10 << 15)) >> 10));
      v16 = v14 & (((v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11)) ^ (((v15 ^ (v15 >> 6))
                                                                        + ~((v15 ^ (v15 >> 6)) << 11)) >> 16));
      v17 = *(_DWORD *)(v13 + 4 * v16);
      if (v17 == v10)
      {
        v18 = 1;
      }
      else
      {
        v19 = 1;
        do
        {
          v18 = v17 != -1;
          if (v17 == -1)
            break;
          v16 = (v16 + v19) & v14;
          v17 = *(_DWORD *)(v13 + 4 * v16);
          ++v19;
        }
        while (v17 != v10);
      }
    }
    else
    {
      v18 = 0;
    }
    v20 = __ldxr(v11);
    if (v20 != 1)
      break;
    if (__stlxr(0, v11))
      goto LABEL_18;
    if (!v18)
      return;
LABEL_19:
    v21 = Inspector::JSGlobalObjectDebugger::runLoopMode((Inspector::JSGlobalObjectDebugger *)v2);
    this = (Inspector::RemoteInspectionTarget *)(int)CFRunLoopRunInMode(v21, 0.05, 1u);
  }
  __clrex();
LABEL_18:
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 0, v3, v4, v5, v6, v7, v8);
  if (v18)
    goto LABEL_19;
}

BOOL Inspector::RemoteInspector::waitingForAutomaticInspection(Inspector::RemoteInspector *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  _BOOL8 v17;
  int v18;
  int v19;

  v10 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_5:
  v12 = *((_QWORD *)this + 17);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v14 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v15 = v13 & (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) ^ (((v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11)) >> 16));
    v16 = *(_DWORD *)(v12 + 4 * v15);
    if (v16 == a2)
    {
      v17 = 1;
    }
    else
    {
      v18 = 1;
      do
      {
        v17 = v16 != -1;
        if (v16 == -1)
          break;
        v15 = (v15 + v18) & v13;
        v16 = *(_DWORD *)(v12 + 4 * v15);
        ++v18;
      }
      while (v16 != a2);
    }
  }
  else
  {
    v17 = 0;
  }
  v19 = __ldxr(v10);
  if (v19 == 1)
  {
    if (!__stlxr(0, v10))
      return v17;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
  return v17;
}

void Inspector::RemoteInspectionTarget::unpauseForInitializedInspector(Inspector::RemoteInspectionTarget *this)
{
  Inspector::RemoteInspector *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton(this);
  Inspector::RemoteInspector::setupCompleted(v2, *((_DWORD *)this + 4), v3, v4, v5, v6, v7, v8);
}

void Inspector::RemoteInspector::setupCompleted(Inspector::RemoteInspector *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v26;

  v10 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_5:
  v14 = *((_QWORD *)this + 17);
  v13 = (uint64_t *)((char *)this + 136);
  v12 = v14;
  if (v14)
  {
    v15 = *(_DWORD *)(v12 - 8);
    v16 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v17 = v15 & (((v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11)) ^ (((v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11)) >> 16));
    v18 = *(_DWORD *)(v12 + 4 * v17);
    if (v18 != a2)
    {
      v19 = 1;
      while (v18 != -1)
      {
        v17 = ((_DWORD)v17 + v19) & v15;
        v18 = *(_DWORD *)(v12 + 4 * v17);
        ++v19;
        if (v18 == a2)
          goto LABEL_12;
      }
      v17 = *(unsigned int *)(v12 - 4);
    }
LABEL_12:
    if (v17 != *(_DWORD *)(v12 - 4))
    {
      *(_DWORD *)(v12 + 4 * v17) = -2;
      ++*(_DWORD *)(*v13 - 16);
      v20 = *v13;
      v21 = *v13 ? *(_DWORD *)(v20 - 12) - 1 : -1;
      *(_DWORD *)(v20 - 12) = v21;
      v22 = *v13;
      if (*v13)
      {
        v23 = 6 * *(_DWORD *)(v22 - 12);
        v24 = *(_DWORD *)(v22 - 4);
        if (v23 < v24 && v24 >= 9)
          WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v13, v24 >> 1, 0);
      }
    }
  }
  v26 = __ldxr(v10);
  if (v26 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, v10))
LABEL_26:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

_BYTE *Inspector::RemoteInspectionTarget::setPresentingApplicationPID(uint64_t a1, int *a2)
{
  int v2;
  _BYTE *result;

  v2 = *a2;
  *(_BYTE *)(a1 + 36) = *((_BYTE *)a2 + 4);
  *(_DWORD *)(a1 + 32) = v2;
  result = Inspector::RemoteInspector::singleton((Inspector::RemoteInspector *)a1);
  result[130] = 1;
  return result;
}

void Inspector::RemoteInspector::startDisabled(Inspector::RemoteInspector *this)
{
  Inspector::RemoteInspector::startEnabled = 0;
}

uint64_t Inspector::RemoteInspector::nextAvailableTargetIdentifier(Inspector::RemoteInspector *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;

  v1 = *((unsigned int *)this + 26);
  while (1)
  {
    do
    {
LABEL_2:
      v2 = v1;
      v1 = (v1 + 1);
      *((_DWORD *)this + 26) = v1;
    }
    while (v1 < 2);
    v3 = *((_QWORD *)this + 2);
    if (!v3)
      return v2;
    v4 = *(_DWORD *)(v3 - 8);
    v5 = 9 * ((v2 + ~((_DWORD)v2 << 15)) ^ ((v2 + ~((_DWORD)v2 << 15)) >> 10));
    v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
    v7 = v4 & (v6 ^ HIWORD(v6));
    v8 = *(_DWORD *)(v3 + 16 * v7);
    if (v8 != (_DWORD)v2)
    {
      v9 = 1;
      while (v8)
      {
        v7 = (v7 + v9) & v4;
        v8 = *(_DWORD *)(v3 + 16 * v7);
        ++v9;
        if (v8 == (_DWORD)v2)
          goto LABEL_2;
      }
      return v2;
    }
  }
}

uint64_t Inspector::RemoteInspector::listingForTarget@<X0>(Inspector::RemoteInspector *this@<X0>, const Inspector::RemoteControllableTarget *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  if ((*(unsigned int (**)(const Inspector::RemoteControllableTarget *))(*(_QWORD *)a2 + 32))(a2))
    return Inspector::RemoteInspector::listingForInspectionTarget((uint64_t)this, a2, a3);
  result = (*(uint64_t (**)(const Inspector::RemoteControllableTarget *))(*(_QWORD *)a2 + 32))(a2);
  if (!(_DWORD)result)
    return Inspector::RemoteInspector::listingForAutomationTarget((uint64_t)this, a2, a3);
  *a3 = 0;
  return result;
}

uint64_t WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::remove(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(*a1, *a2);
  v11 = v2 + 16 * *(unsigned int *)(v2 - 4);
  if (!v5 || v5 == v11)
    return 0;
  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::removeWithoutEntryConsistencyCheck(a1, v5, v11, v6, v7, v8, v9, v10);
  return 1;
}

BOOL Inspector::RemoteInspector::updateTargetMap(Inspector::RemoteInspector *this, Inspector::RemoteControllableTarget *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  CFTypeRef v17;
  _BYTE v18[24];
  CFTypeRef cf;
  _BYTE v20[28];
  int v21;
  const Inspector::RemoteControllableTarget *v22;

  v22 = a2;
  v8 = *((_DWORD *)a2 + 4);
  v21 = v8;
  if (v8)
  {
    WTF::HashMap<unsigned int,Inspector::RemoteControllableTarget *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<Inspector::RemoteControllableTarget *>,WTF::HashTableTraits>::inlineSet<unsigned int const&,Inspector::RemoteControllableTarget *&>((uint64_t *)this + 2, &v21, &v22, a4, a5, a6, a7, a8, (uint64_t)v20);
    Inspector::RemoteInspector::listingForTarget(this, v22, &cf);
    v16 = (uint64_t *)((char *)this + 32);
    if (cf)
      WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::RetainPtr<NSDictionary>&>(v16, &v21, &cf, v11, v12, v13, v14, v15, (uint64_t)v18);
    else
      WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::remove(v16, &v21);
    v17 = cf;
    cf = 0;
    if (v17)
      CFRelease(v17);
  }
  return v8 != 0;
}

void Inspector::RemoteInspector::updateClientCapabilities(Inspector::RemoteInspector *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;

  v9 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_5:
  v11 = *((_QWORD *)this + 7);
  if (v11)
  {
    v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 7) + 24))(&v71);
    (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)this + 7) + 32))(&v72);
    v13 = *((unsigned __int8 *)this + 88);
    *((_BYTE *)this + 64) = *((_BYTE *)this + 64) & 0xFE | v70 & 1;
    v14 = v71;
    if (v13)
    {
      if (v71)
        *(_DWORD *)v71 += 2;
      v15 = (WTF::StringImpl *)*((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = v14;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::~StringImpl(v15, v12, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
        }
        else
        {
          *(_DWORD *)v15 -= 2;
        }
      }
      v16 = v72;
      if (v72)
        *(_DWORD *)v72 += 2;
      v17 = (WTF::StringImpl *)*((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = v16;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, v12, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
          v16 = v72;
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
    }
    else
    {
      if (v71)
        *(_DWORD *)v71 += 2;
      *((_QWORD *)this + 9) = v14;
      v16 = v72;
      if (v72)
        *(_DWORD *)v72 += 2;
      *((_QWORD *)this + 10) = v16;
      *((_BYTE *)this + 88) = 1;
    }
    v72 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
      {
        WTF::StringImpl::~StringImpl(v16, v12, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      else
      {
        *(_DWORD *)v16 -= 2;
      }
    }
    v36 = v71;
    v71 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v12, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  else if (*((_BYTE *)this + 88))
  {
    v18 = (WTF::StringImpl *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    *((_BYTE *)this + 88) = 0;
  }
  v37 = __ldxr(v9);
  if (v37 == 1)
  {
    if (!__stlxr(0, v9))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void Inspector::RemoteInspector::setClient(Inspector::RemoteInspector *this, Inspector::RemoteInspector::Client *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  int v12;

  v10 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_5:
  *((_QWORD *)this + 7) = a2;
  v12 = __ldxr(v10);
  if (v12 == 1)
  {
    if (!__stlxr(0, v10))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
LABEL_10:
  Inspector::RemoteInspector::updateClientCapabilities(this, a2, a3, a4, a5, a6, a7, a8);
  Inspector::RemoteInspector::pushListingsSoon(this);
}

void Inspector::RemoteInspector::setupFailed(Inspector::RemoteInspector *this, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v8 = (int)a2;
  v10 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_5:
  v13 = (uint64_t *)((char *)this + 24);
  v12 = *((_QWORD *)this + 3);
  if (v12)
  {
    v35 = *(_DWORD *)(v12 - 8);
    v36 = 9 * ((~(v8 << 15) + v8) ^ ((~(v8 << 15) + v8) >> 10));
    v37 = (v36 ^ (v36 >> 6)) + ~((v36 ^ (v36 >> 6)) << 11);
    v38 = v35 & (v37 ^ HIWORD(v37));
    v39 = *(_DWORD *)(v12 + 16 * v38);
    if (v39 != v8)
    {
      v40 = 1;
      while (v39)
      {
        v38 = ((_DWORD)v38 + v40) & v35;
        v39 = *(_DWORD *)(v12 + 16 * v38);
        ++v40;
        if (v39 == v8)
          goto LABEL_39;
      }
      v38 = *(unsigned int *)(v12 - 4);
    }
LABEL_39:
    if (v38 != *(_DWORD *)(v12 - 4))
    {
      v41 = v12 + 16 * v38;
      *(_DWORD *)v41 = -1;
      v42 = *(unsigned int **)(v41 + 8);
      *(_QWORD *)(v41 + 8) = 0;
      if (v42)
      {
        v43 = v42 + 2;
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          atomic_store(1u, v42 + 2);
          Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v42, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
        }
      }
      ++*(_DWORD *)(*v13 - 16);
      v46 = *v13;
      if (*v13)
        v47 = *(_DWORD *)(v46 - 12) - 1;
      else
        v47 = -1;
      *(_DWORD *)(v46 - 12) = v47;
      v48 = *v13;
      if (*v13)
      {
        v49 = 6 * *(_DWORD *)(v48 - 12);
        v50 = *(_DWORD *)(v48 - 4);
        if (v49 < v50 && v50 >= 9)
          WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash((uint64_t *)this + 3, v50 >> 1, 0, a4, a5, a6, a7, a8);
      }
    }
  }
  v14 = (uint64_t *)((char *)this + 136);
  v15 = *((_QWORD *)this + 17);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = 9 * ((~(v8 << 15) + v8) ^ ((~(v8 << 15) + v8) >> 10));
    v18 = v16 & (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) ^ (((v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11)) >> 16));
    v19 = *(_DWORD *)(v15 + 4 * v18);
    if (v19 != v8)
    {
      v20 = 1;
      while (v19 != -1)
      {
        v18 = ((_DWORD)v18 + v20) & v16;
        v19 = *(_DWORD *)(v15 + 4 * v18);
        ++v20;
        if (v19 == v8)
          goto LABEL_13;
      }
      v18 = *(unsigned int *)(v15 - 4);
    }
LABEL_13:
    if (v18 != *(_DWORD *)(v15 - 4))
    {
      *(_DWORD *)(v15 + 4 * v18) = -2;
      ++*(_DWORD *)(*v14 - 16);
      v21 = *v14;
      v22 = *v14 ? *(_DWORD *)(v21 - 12) - 1 : -1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *v14;
      if (*v14)
      {
        v24 = 6 * *(_DWORD *)(v23 - 12);
        v25 = *(_DWORD *)(v23 - 4);
        if (v24 < v25 && v25 >= 9)
          WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(v14, v25 >> 1, 0);
      }
    }
  }
  v27 = *v13;
  if (*v13)
    LODWORD(v27) = *(_DWORD *)(v27 - 12) != 0;
  if (*((unsigned __int8 *)this + 113) != (_DWORD)v27)
    *((_BYTE *)this + 113) = v27;
  Inspector::RemoteInspector::updateTargetListing(this, v8);
  Inspector::RemoteInspector::pushListingsSoon(this);
  v34 = __ldxr(v10);
  if (v34 != 1)
  {
    __clrex();
    goto LABEL_31;
  }
  if (__stlxr(0, v10))
LABEL_31:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, v28, v29, v30, v31, v32, v33);
}

uint64_t Inspector::RemoteInspector::updateHasActiveDebugSession(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 24);
  if (v1)
    LODWORD(v1) = *(_DWORD *)(v1 - 12) != 0;
  if (*(unsigned __int8 *)(this + 113) != (_DWORD)v1)
    *(_BYTE *)(this + 113) = v1;
  return this;
}

void Inspector::RemoteInspector::updateTargetListing(Inspector::RemoteInspector *this, int a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  const Inspector::RemoteControllableTarget *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  _BYTE v17[28];
  int v18;
  CFTypeRef v19;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
    v7 = v4 & (v6 ^ HIWORD(v6));
    v8 = *(_DWORD *)(v2 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v10 = *(const Inspector::RemoteControllableTarget **)(v2 + 16 * v7 + 8);
      if (v10)
      {
        Inspector::RemoteInspector::listingForTarget(this, v10, &v19);
        if (v19)
        {
          v18 = *((_DWORD *)v10 + 4);
          WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::RetainPtr<NSDictionary>&>((uint64_t *)this + 4, &v18, &v19, v11, v12, v13, v14, v15, (uint64_t)v17);
          Inspector::RemoteInspector::pushListingsSoon(this);
          v16 = v19;
          v19 = 0;
          if (v16)
            CFRelease(v16);
        }
      }
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v4;
        v8 = *(_DWORD *)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
}

void Inspector::RemoteInspector::clientCapabilitiesDidChange(Inspector::RemoteInspector *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Inspector::RemoteInspector::updateClientCapabilities(this, a2, a3, a4, a5, a6, a7, a8);
  Inspector::RemoteInspector::pushListingsSoon(this);
}

void Inspector::RemoteInspector::stop(Inspector::RemoteInspector *this, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v9 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_5:
  Inspector::RemoteInspector::stopInternal((uint64_t)this, 0, a3, a4, a5, a6, a7, a8);
  v17 = __ldxr(v9);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v9))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, v11, v12, v13, v14, v15, v16);
}

void Inspector::RemoteInspector::updateTargetListing(Inspector::RemoteInspector *this, const Inspector::RemoteControllableTarget *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  _BYTE v10[28];
  int v11;
  CFTypeRef v12;

  Inspector::RemoteInspector::listingForTarget(this, a2, &v12);
  if (v12)
  {
    v11 = *((_DWORD *)a2 + 4);
    WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::RetainPtr<NSDictionary>&>((uint64_t *)this + 4, &v11, &v12, v4, v5, v6, v7, v8, (uint64_t)v10);
    Inspector::RemoteInspector::pushListingsSoon(this);
    v9 = v12;
    v12 = 0;
    if (v9)
      CFRelease(v9);
  }
}

uint64_t Inspector::RemoteAutomationTarget::type(Inspector::RemoteAutomationTarget *this)
{
  return 0;
}

BOOL Inspector::RemoteAutomationTarget::remoteControlAllowed(Inspector::RemoteAutomationTarget *this)
{
  return *((_BYTE *)this + 20) == 0;
}

uint64_t Inspector::RemoteControllableTarget::targetRunLoop(Inspector::RemoteControllableTarget *this)
{
  return 0;
}

uint64_t Inspector::RemoteInspectionTarget::targetRunLoop(Inspector::RemoteInspectionTarget *this)
{
  return *((_QWORD *)this + 3);
}

void Inspector::RemoteInspectionTarget::name(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void Inspector::RemoteInspectionTarget::url(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void *Inspector::RemoteInspectionTarget::nameOverride(Inspector::RemoteInspectionTarget *this)
{
  return &WTF::nullStringData;
}

uint64_t Inspector::RemoteInspectionTarget::automaticInspectionAllowed(Inspector::RemoteInspectionTarget *this)
{
  return 0;
}

void Inspector::RemoteInspector::Client::browserName(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void Inspector::RemoteInspector::Client::browserVersion(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t *WTF::HashMap<unsigned int,Inspector::RemoteControllableTarget *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<Inspector::RemoteControllableTarget *>,WTF::HashTableTraits>::inlineSet<unsigned int const&,Inspector::RemoteControllableTarget *&>@<X0>(uint64_t *result@<X0>, int *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,Inspector::RemoteControllableTarget *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,Inspector::RemoteControllableTarget *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,Inspector::RemoteControllableTarget *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<Inspector::RemoteControllableTarget *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(result, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
  v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
  v19 = (v18 ^ HIWORD(v18)) & v15;
  v20 = v13 + 16 * v19;
  v21 = *(_DWORD *)v20;
  if (*(_DWORD *)v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v16)
      {
        if ((v14 & 1) != 0)
          v31 = 0;
        else
          v31 = *(unsigned int *)(v13 - 4);
        *(_QWORD *)a9 = v20;
        *(_QWORD *)(a9 + 8) = v13 + 16 * v31;
        *(_BYTE *)(a9 + 16) = 0;
        *(_QWORD *)(v20 + 8) = *a3;
        return result;
      }
      if (v21 == -1)
        v22 = (_QWORD *)v20;
      v19 = (v19 + v23) & v15;
      v20 = v13 + 16 * v19;
      v21 = *(_DWORD *)v20;
      ++v23;
    }
    while (*(_DWORD *)v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v20 = (uint64_t)v22;
    }
  }
  *(_DWORD *)v20 = v16;
  *(_QWORD *)(v20 + 8) = *a3;
  v24 = *v11;
  if (*v11)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *v11;
  if (*v11)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_17;
    goto LABEL_21;
  }
  if (3 * v29 <= 4 * v28)
  {
    if (!(_DWORD)v29)
    {
      v30 = 8;
      goto LABEL_22;
    }
LABEL_21:
    v30 = ((_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29)));
LABEL_22:
    result = (uint64_t *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,Inspector::RemoteControllableTarget *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,Inspector::RemoteControllableTarget *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,Inspector::RemoteControllableTarget *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<Inspector::RemoteControllableTarget *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v11, v30, v20, a4, a5, a6, a7, a8);
    v20 = (uint64_t)result;
    v26 = *v11;
    if (*v11)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
  }
LABEL_17:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v26 + 16 * v29;
  *(_BYTE *)(a9 + 16) = 1;
  return result;
}

_OWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,Inspector::RemoteControllableTarget *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,Inspector::RemoteControllableTarget *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,Inspector::RemoteControllableTarget *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<Inspector::RemoteControllableTarget *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v10;

  v8 = *a1;
  if (*a1 && (v9 = *(_DWORD *)(v8 - 4)) != 0)
    v10 = (v9 << (6 * *(_DWORD *)(v8 - 12) >= (2 * v9)));
  else
    v10 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,Inspector::RemoteControllableTarget *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,Inspector::RemoteControllableTarget *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,Inspector::RemoteControllableTarget *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<Inspector::RemoteControllableTarget *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v10, 0, a4, a5, a6, a7, a8);
}

_OWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,Inspector::RemoteControllableTarget *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,Inspector::RemoteControllableTarget *>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,Inspector::RemoteControllableTarget *,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<Inspector::RemoteControllableTarget *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (_DWORD *)(v11 + 16 * v22);
      if ((*v24 + 1) >= 2)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(_DWORD *)(v25 - 8);
        else
          v26 = 0;
        v27 = 0;
        v28 = 9 * ((*v24 + ~(*v24 << 15)) ^ ((*v24 + ~(*v24 << 15)) >> 10));
        v29 = ((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) ^ (((v28 ^ (v28 >> 6)) + ~((v28 ^ (v28 >> 6)) << 11)) >> 16);
        do
        {
          v30 = v29 & v26;
          v29 = ++v27 + v30;
        }
        while (*(_DWORD *)(v25 + 16 * v30));
        v31 = (_OWORD *)(v25 + 16 * v30);
        *v31 = *(_OWORD *)v24;
        if (v24 == (_DWORD *)a3)
          v23 = v31;
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::inlineSet<unsigned int const&,WTF::RetainPtr<NSDictionary>&>(uint64_t *a1@<X0>, int *a2@<X1>, CFTypeRef *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  int v23;
  CFTypeRef v24;
  const void *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  CFTypeRef v29;
  const void *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = 9 * ((v16 + ~(v16 << 15)) ^ ((v16 + ~(v16 << 15)) >> 10));
  v18 = (v17 ^ (v17 >> 6)) + ~((v17 ^ (v17 >> 6)) << 11);
  v19 = (v18 ^ HIWORD(v18)) & v15;
  v20 = v13 + 16 * v19;
  v21 = *(_DWORD *)v20;
  if (!*(_DWORD *)v20)
  {
LABEL_12:
    *(_DWORD *)v20 = v16;
    v24 = *a3;
    if (v24)
      CFRetain(v24);
    v25 = *(const void **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = v24;
    if (v25)
      CFRelease(v25);
    v26 = *a1;
    if (*a1)
      v27 = *(_DWORD *)(v26 - 12) + 1;
    else
      v27 = 1;
    *(_DWORD *)(v26 - 12) = v27;
    v31 = *a1;
    if (*a1)
      v32 = *(_DWORD *)(v31 - 12);
    else
      v32 = 0;
    v33 = (*(_DWORD *)(v31 - 16) + v32);
    v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 <= 2 * v33)
        goto LABEL_31;
    }
    else if (3 * v34 <= 4 * v33)
    {
      if (!(_DWORD)v34)
      {
        v35 = 8;
LABEL_34:
        v20 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v35, v20, a4, a5, a6, a7, a8);
        v31 = *a1;
        if (*a1)
          v34 = *(unsigned int *)(v31 - 4);
        else
          v34 = 0;
        goto LABEL_36;
      }
LABEL_31:
      v35 = ((_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34)));
      goto LABEL_34;
    }
LABEL_36:
    *(_QWORD *)a9 = v20;
    *(_QWORD *)(a9 + 8) = v31 + 16 * v34;
    *(_BYTE *)(a9 + 16) = 1;
    return;
  }
  v22 = 0;
  v23 = 1;
  while (v21 != v16)
  {
    if (v21 == -1)
      v22 = (_QWORD *)v20;
    v19 = (v19 + v23) & v15;
    v20 = v13 + 16 * v19;
    v21 = *(_DWORD *)v20;
    ++v23;
    if (!*(_DWORD *)v20)
    {
      if (v22)
      {
        *v22 = 0;
        v22[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v16 = *a2;
        v20 = (uint64_t)v22;
      }
      goto LABEL_12;
    }
  }
  if ((v14 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v13 - 4);
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v13 + 16 * v28;
  *(_BYTE *)(a9 + 16) = 0;
  v29 = *a3;
  if (*a3)
    CFRetain(*a3);
  v30 = *(const void **)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v29;
  if (v30)
    CFRelease(v30);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  uint64_t result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (int *)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24 != -1)
      {
        if (v25)
        {
          v28 = *a1;
          if (*a1)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v30 = 0;
          v31 = 9 * ((v25 + ~(v25 << 15)) ^ ((v25 + ~(v25 << 15)) >> 10));
          v32 = ((v31 ^ (v31 >> 6)) + ~((v31 ^ (v31 >> 6)) << 11)) ^ (((v31 ^ (v31 >> 6)) + ~((v31 ^ (v31 >> 6)) << 11)) >> 16);
          do
          {
            v33 = v32 & v29;
            v32 = ++v30 + v33;
          }
          while (*(_DWORD *)(v28 + 16 * v33));
          v34 = v28 + 16 * v33;
          v35 = *(const void **)(v34 + 8);
          *(_QWORD *)(v34 + 8) = 0;
          if (v35)
            CFRelease(v35);
          *(_DWORD *)v34 = *v24;
          v36 = v11 + 16 * v22;
          v37 = *(_QWORD *)(v36 + 8);
          *(_QWORD *)(v36 + 8) = 0;
          *(_QWORD *)(v34 + 8) = v37;
          v38 = *(const void **)(v36 + 8);
          *(_QWORD *)(v36 + 8) = 0;
          if (v38)
            CFRelease(v38);
          if (v24 == (int *)a3)
            v23 = v34;
        }
        else
        {
          v26 = v11 + 16 * v22;
          v27 = *(const void **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v27)
            CFRelease(v27);
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::removeWithoutEntryConsistencyCheck(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v9 = *a1;
  if (*a1)
    v9 += 16 * *(unsigned int *)(v9 - 4);
  if (v9 != a2)
  {
    *(_DWORD *)a2 = -1;
    v10 = *(const void **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v10)
      CFRelease(v10);
    ++*(_DWORD *)(*a1 - 16);
    v11 = *a1;
    if (*a1)
      v12 = *(_DWORD *)(v11 - 12) - 1;
    else
      v12 = -1;
    *(_DWORD *)(v11 - 12) = v12;
    v13 = *a1;
    if (*a1)
    {
      v14 = 6 * *(_DWORD *)(v13 - 12);
      v15 = *(_DWORD *)(v13 - 4);
      if (v14 < v15 && v15 >= 9)
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v15 >> 1, 0, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RetainPtr<NSDictionary>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,WTF::RetainPtr<NSDictionary>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RetainPtr<NSDictionary>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned int>>,unsigned int>(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v4 = (v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11);
    v5 = v2 & (v4 ^ HIWORD(v4));
    v6 = *(_DWORD *)(result + 16 * v5);
    if (v6 == a2)
    {
LABEL_6:
      result += 16 * v5;
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v2;
        v6 = *(_DWORD *)(result + 16 * v5);
        ++v7;
        if (v6 == a2)
          goto LABEL_6;
      }
      return 0;
    }
  }
  return result;
}

void WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::remove(uint64_t *a1, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*a1)
  {
    v9 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if ((void *)v9 == a2)
      return;
  }
  else
  {
    if (!a2)
      return;
    v9 = 0;
  }
  if ((void *)v9 != a2)
  {
    *(_DWORD *)a2 = -1;
    v10 = (unsigned int *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    if (v10)
    {
      v11 = v10 + 2;
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v10 + 2);
        Inspector::RemoteConnectionToTarget::~RemoteConnectionToTarget((Inspector::RemoteConnectionToTarget *)v10, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
    }
    ++*(_DWORD *)(*a1 - 16);
    v14 = *a1;
    if (*a1)
      v15 = *(_DWORD *)(v14 - 12) - 1;
    else
      v15 = -1;
    *(_DWORD *)(v14 - 12) = v15;
    v16 = *a1;
    if (*a1)
    {
      v17 = 6 * *(_DWORD *)(v16 - 12);
      v18 = *(_DWORD *)(v16 - 4);
      if (v17 < v18 && v18 >= 9)
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<WTF::RefPtr<Inspector::RemoteConnectionToTarget,WTF::RawPtrTraits<Inspector::RemoteConnectionToTarget>,WTF::DefaultRefDerefTraits<Inspector::RemoteConnectionToTarget>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(a1, v18 >> 1, 0, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::CallFrame::setCurrentVPC(uint64_t result, unint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;

  v2 = *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(result + 16) + 56) + 80);
  v3 = *v2;
  v4 = *((unsigned int *)v2 + 3) + *v2;
  if (v3 <= a2)
  {
    v5 = v4 >= a2;
    v6 = v4 == a2;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  if (!v6 && v5)
  {
    *(_DWORD *)(result + 36) = (a2 - v3) & 0x3FFFFFFF;
  }
  else
  {
    result = 299;
    __break(0xC471u);
  }
  return result;
}

unint64_t JSC::CallFrame::bytecodeIndex(JSC::CallFrame *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if ((*((_QWORD *)this + 3) & 0xFFFE000000000007) == 3)
    return (4 * *((_DWORD *)this + 9));
  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 120);
  if (!v2)
  {
LABEL_8:
    __break(0xC471u);
    JUMPOUT(0x1986CE944);
  }
  v3 = *(unsigned __int8 *)(v2 + 12);
  if (v3 - 4 >= 2)
  {
    if (v3 > 1)
      return (4 * *((_DWORD *)this + 9));
    goto LABEL_8;
  }
  JSC::CallFrame::codeOrigin((uint64_t)this, (uint64_t *)&v16);
  while (1)
  {
    v12 = (_QWORD *)(v16 & 0xFFFFFFFF8);
    if ((v16 & 1) != 0)
      v12 = (_QWORD *)*v12;
    if (!v12)
      break;
    JSC::CodeOrigin::operator=((uint64_t *)&v16, v12 + 2, v6, v7, v8, v9, v10, v11);
  }
  if ((v16 & 2) != 0)
  {
    if ((v16 & 1) == 0)
      return 0xFFFFFFFFLL;
    v13 = v16 & 0xFFFFFFFF8;
    v14 = 0xFFFFFFFFLL;
  }
  else
  {
    if ((v16 & 1) == 0)
      return v16 >> 36;
    v13 = v16 & 0xFFFFFFFF8;
    v14 = *(unsigned int *)((v16 & 0xFFFFFFFF8) + 8);
  }
  v15 = v14;
  if (v13)
    WTF::fastFree(v13, v5, v6, v7, v8, v9, v10, v11);
  return v15;
}

uint64_t JSC::CallFrame::codeOrigin@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v3 = *(_QWORD *)(this + 16);
  if (!v3)
    goto LABEL_8;
  v4 = *(unsigned __int8 **)(v3 + 120);
  if (!v4)
    goto LABEL_9;
  v5 = v4[12];
  if (v5 - 4 >= 2)
  {
    if (v5 > 1)
    {
      v6 = *(_DWORD *)(this + 36);
      v7 = 4 * v6;
      if (((v6 >> 26) & 0xF) != 0)
      {
        this = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)this = 0;
        *(_DWORD *)(this + 8) = v7;
        v8 = 1;
      }
      else
      {
        v8 = 0;
        this = v7 << 36;
      }
      v3 = this | v8;
      goto LABEL_8;
    }
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x1986CEA4CLL);
  }
  v9 = *(unsigned int *)(this + 36);
  this = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v4 + 72))(v4);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 40) + 8) + 8 * v9);
  if ((v3 & 1) != 0)
  {
    v10 = *(_QWORD *)(v3 & 0xFFFFFFFF8);
    if ((v3 & 2) != 0
      || ((v11 = *(unsigned int *)((v3 & 0xFFFFFFFF8) + 8), (_DWORD)v11 != 0x3FFFFFFF)
        ? (v12 = (_DWORD)v11 == -1)
        : (v12 = 1),
          v12))
    {
      v13 = 2;
    }
    else if (v11 >> 28)
    {
      this = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)this = v10;
      *(_DWORD *)(this + 8) = v11;
      v13 = 1;
      v10 = this;
    }
    else
    {
      v13 = *(_QWORD *)(v3 & 0xFFFFFFFF8);
      v10 = v11 << 36;
    }
    v3 = v10 | v13;
  }
LABEL_8:
  *a2 = v3;
  return this;
}

uint64_t JSC::CallFrame::topOfFrameInternal(JSC::CallFrame *this, JSC::CodeBlock *a2)
{
  JSC::LLInt *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;

  v3 = (JSC::LLInt *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)v3 + 15);
  if (v4)
  {
    v5 = *(unsigned __int8 *)(v4 + 12);
    if (v5 == 3)
    {
      v6 = (((*(_DWORD *)(*((_QWORD *)v3 + 7) + 20) & 0x7FFFFFFF) + 3) & 0xFFFFFFFE) - 2;
      return (uint64_t)this - 8 * v6;
    }
    if ((v5 - 4) < 2)
    {
      v7 = (unsigned int *)(v4 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      v6 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4) + 200);
      do
      {
        v9 = __ldaxr(v7);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v7));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)(v4 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      }
      return (uint64_t)this - 8 * v6;
    }
    if (v5 == 2)
    {
      v6 = JSC::LLInt::frameRegisterCountFor(v3, a2);
      return (uint64_t)this - 8 * v6;
    }
  }
  result = 3046;
  __break(0xC471u);
  return result;
}

uint64_t JSC::CallFrame::callerFrame(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (result == *a2)
  {
    v4 = vmEntryRecord(result);
    *a2 = *(_QWORD *)(v4 + 16);
    return *(_QWORD *)(v4 + 8);
  }
  return result;
}

void JSC::CallFrame::callerSourceOrigin(JSC::CallFrame *this@<X0>, JSC::VM *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  __int128 v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _OWORD *v24;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  JSC::Wasm::NameSection *v30;

  if ((*((_QWORD *)this + 3) & 0xFFFE000000000007) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1986CED48);
  }
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)a7 = 0u;
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v25, this, a2, 0, a3, a4, a5, a6);
  if (v26)
  {
    JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v25, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
    if (v26)
    {
      v15 = (_OWORD *)(a7 + 8);
      do
      {
        if ((v27 & 0xFFFE000000000007) == 3)
        {
          if (*(_BYTE *)(qword_1ECF4C080 + (v27 & 0xFFFFFFFFFFFFFFFCLL) + 4) == 1)
            break;
        }
        else if (v28)
        {
          v16 = *(_QWORD *)(v28 + 64);
          if ((*(_WORD *)(*(_QWORD *)(v28 + 56) + 28) & 0x3000) != 0x2000
            || (*(_QWORD *)(*(_QWORD *)(v16 + 88) + 16) & 0x80000000) == 0)
          {
            v17 = *(_QWORD *)(v16 + 40);
            v18 = *(_DWORD **)(v17 + 16);
            if (v18)
              *v18 += 2;
            *(_QWORD *)a7 = v18;
            v19 = *(_OWORD *)(v17 + 40);
            *v15 = *(_OWORD *)(v17 + 24);
            v15[1] = v19;
            v20 = *(_QWORD *)(v17 + 56);
            if (v20)
              ++*(_DWORD *)(v20 + 8);
            *(_QWORD *)(a7 + 40) = v20;
            break;
          }
        }
        v24 = v15;
        JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v25, (uint64_t)v8, v9, v10, v11, v12, v13, v14);
        v15 = v24;
      }
      while (v26);
    }
  }
  v21 = v29;
  v29 = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      v30 = (JSC::Wasm::NameSection *)v21;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v30, v8, v9, v10, v11, v12, v13, v14);
    }
  }
}

uint64_t JSC::CallFrame::globalObjectOfClosestCodeBlock(JSC::CallFrame *this, JSC::VM *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  _BYTE v26[16];
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int *v30;
  JSC::Wasm::NameSection *v31;

  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v26, a2, this, 0, a5, a6, a7, a8);
  while (1)
  {
    v16 = v27;
    if (!v27)
      goto LABEL_17;
    if ((v28 & 0xFFFE000000000007) == 3)
      break;
    if (v29
      && ((*(_WORD *)(v29[7] + 28) & 0x3000) != 0x2000
       || (*(_QWORD *)(*(_QWORD *)(v29[8] + 88) + 16) & 0x80000000) == 0))
    {
      v18 = v29 + 1;
      goto LABEL_11;
    }
    JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v26, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
  }
  v17 = v27[3];
  if ((v17 & 0xFFFE000000000007) != 3)
  {
LABEL_9:
    v18 = (uint64_t *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 40);
LABEL_11:
    v19 = *v18;
    goto LABEL_18;
  }
  while (1)
  {
    v20 = *(unsigned __int8 *)((v17 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
    if (v20)
      break;
    v16 = (_QWORD *)*v16;
    v17 = v16[3];
    if ((v17 & 0xFFFE000000000007) != 3)
      goto LABEL_9;
  }
  if (v20 == 1)
  {
    v18 = (uint64_t *)(v16[2] + 32);
    goto LABEL_11;
  }
LABEL_17:
  v19 = 0;
LABEL_18:
  v21 = v30;
  v30 = 0;
  if (!v21)
    goto LABEL_21;
  do
  {
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (!v23)
  {
    atomic_store(1u, v21);
    v31 = (JSC::Wasm::NameSection *)v21;
    WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v31, v9, v10, v11, v12, v13, v14, v15);
    if (v19)
      return v19;
  }
  else
  {
LABEL_21:
    if (v19)
      return v19;
  }
  v24 = *((_QWORD *)this + 11321);
  if (v24)
    return *(_QWORD *)(v24 + 8);
  else
    return 0;
}

uint64_t JSC::CallFrame::friendlyFunctionName@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  if ((*(_QWORD *)(this + 24) & 0xFFFE000000000007) != 3)
  {
    if (*(_QWORD *)(this + 16))
      __asm { BR              X11 }
  }
  WTF::StringImpl::s_emptyAtomString += 2;
  *a2 = &WTF::StringImpl::s_emptyAtomString;
  return this;
}

const char *WTF::StringLiterals::operator"" _s(const char *a1)
{
  strlen(a1);
  return a1;
}

uint64_t JSC::CallFrame::describeFrame(JSC::CallFrame *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  char *v8;
  int v9;
  JSC::CodeBlock *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  WTF::PrintStream *v14;
  WTF::PrintStream *v15;
  const char *v16;
  const char *v17;
  WTF::PrintStream *v18;
  int v19;
  WTF::PrintStream *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  WTF::PrintStream *v30;
  WTF::PrintStream *v31;
  unint64_t v32;
  uint64_t v33;
  WTF::PrintStream *v34;
  uint64_t v35;
  WTF *v36;
  const WTF::String *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  float v44;
  WTF::PrintStream *v45;
  float v46;
  uint64_t v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unsigned int v56;
  unsigned int v57;
  const void *v58;
  WTF::PrintStream *v59;
  char *v60;
  WTF *v61;
  size_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  unsigned int *v82;
  WTF::StringImpl *v83;
  WTF *v84;
  int v85;
  char v86;
  WTF **v87;
  WTF *v88;
  __int128 v89;
  _BYTE v90[128];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load(&qword_1ECF58890);
  if (v2 != -1)
  {
    v87 = &v81;
    v84 = (WTF *)&v87;
    std::__call_once(&qword_1ECF58890, &v84, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::CallFrame::describeFrame(void)::$_0 &&>>);
  }
  v87 = (WTF **)off_1E3572250;
  v88 = (WTF *)v90;
  v89 = xmmword_199122F80;
  v90[0] = 0;
  v3 = *((_QWORD *)this + 3);
  if ((v3 & 0xFFFE000000000007) != 3)
  {
    v10 = (JSC::CodeBlock *)*((_QWORD *)this + 2);
    if (v10)
    {
      JSC::CodeBlock::inferredName(*((JSC::CodeBlock **)this + 2));
      JSC::CodeBlock::hashAsStringIfPossible(v10, (uint64_t *)&v81);
      v11 = *((_QWORD *)v10 + 15);
      if (v11)
        v12 = *(unsigned __int8 *)(v11 + 12);
      else
        v12 = 0;
      v13 = JSC::CallFrame::bytecodeIndex(this);
      v14 = (WTF::PrintStream *)((uint64_t (*)(WTF ***))v87[4])(&v87);
      v15 = v14;
      if (v84)
        v16 = (char *)v84 + 16;
      else
        v16 = 0;
      WTF::PrintStream::printf(v14, "%s", v16);
      WTF::PrintStream::printf(v15, "%s", "#");
      if (v81)
        v17 = (char *)v81 + 16;
      else
        v17 = 0;
      WTF::PrintStream::printf(v15, "%s", v17);
      WTF::PrintStream::printf(v15, "%s", " [");
      WTF::printInternal((uint64_t)v15, v12);
      WTF::PrintStream::printf(v15, "%s", " ");
      v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v15 + 32))(v15);
      WTF::PrintStream::printf(v18, "%s", "bc#");
      WTF::PrintStream::printf(v18, "%u", v13 >> 2);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v15 + 40))(v15);
      v19 = v13 & 3;
      if ((v13 & 3) != 0)
      {
        v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v15 + 32))(v15);
        WTF::PrintStream::printf(v20, "%s", "cp#");
        WTF::PrintStream::printf(v20, "%u", v19);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v15 + 40))(v15);
      }
      WTF::PrintStream::printf(v15, "%s", "]");
      ((void (*)(WTF ***))v87[5])(&v87);
      v28 = v81;
      v81 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 1)
          WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
        else
          --*(_DWORD *)v28;
      }
      v29 = v84;
      v84 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 1)
          WTF::fastFree((unint64_t)v29, v21, v22, v23, v24, v25, v26, v27);
        else
          --*(_DWORD *)v29;
      }
      v30 = (WTF::PrintStream *)((uint64_t (*)(WTF ***))v87[4])(&v87);
      WTF::PrintStream::printf(v30, "%s", "(");
      ((void (*)(WTF ***))v87[5])(&v87);
      v84 = (WTF *)*((_QWORD *)this + 5);
      JSC::JSValue::dumpForBacktrace((JSC::JSValue *)&v84, (WTF::PrintStream *)&v87);
      if (*((_DWORD *)this + 8) != 1)
      {
        v32 = 0;
        v33 = 0x600000000;
        do
        {
          v34 = (WTF::PrintStream *)((uint64_t (*)(WTF ***))v87[4])(&v87);
          WTF::PrintStream::printf(v34, "%s", ", ");
          ((void (*)(WTF ***))v87[5])(&v87);
          if (*((int *)this + 8) - 1 <= v32)
            v35 = 10;
          else
            v35 = *(_QWORD *)((char *)this + (v33 >> 29));
          v84 = (WTF *)v35;
          JSC::JSValue::dumpForBacktrace((JSC::JSValue *)&v84, (WTF::PrintStream *)&v87);
          ++v32;
          v33 += 0x100000000;
        }
        while (v32 < *((int *)this + 8) - 1);
      }
      v31 = (WTF::PrintStream *)((uint64_t (*)(WTF ***))v87[4])(&v87);
      WTF::PrintStream::printf(v31, "%s");
      goto LABEL_62;
    }
    goto LABEL_29;
  }
  v4 = qword_1ECF4C080 + (v3 & 0xFFFFFFFFFFFFFFFCLL);
  if (!*(_BYTE *)(v4 + 4))
  {
LABEL_29:
    WTF::PrintStream::printf((WTF::PrintStream *)&v87, "%p");
    goto LABEL_62;
  }
  if (*(_BYTE *)(v4 + 4) != 1)
    goto LABEL_63;
  v5 = *(unsigned int **)(v4 + 16);
  v81 = *(WTF **)(v4 + 8);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  v82 = v5;
  JSC::Wasm::makeString((uint64_t *)&v81, (uint64_t *)&v83);
  v7 = *(unsigned __int8 *)(v4 + 6);
  v8 = "IPInt";
  v9 = 6;
  switch(v7)
  {
    case 0:
      v8 = "LLInt";
      v9 = 6;
      break;
    case 1:
      break;
    case 2:
      v8 = "BBQ";
      goto LABEL_41;
    case 3:
      v8 = "BBQForOSREntry";
      goto LABEL_45;
    case 4:
      v8 = "OMG";
LABEL_41:
      v9 = 4;
      break;
    case 5:
      v8 = "OMGForOSREntry";
LABEL_45:
      v9 = 15;
      break;
    case 6:
      v8 = "JSEntrypoint";
      v9 = 13;
      break;
    case 7:
      v8 = "JSEntrypointInterpreter";
      v9 = 24;
      break;
    case 8:
      v8 = "JSToWasmIC";
      v9 = 11;
      break;
    case 9:
      v8 = "WasmToJS";
      v9 = 9;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1986CF7C4);
  }
  v36 = (WTF *)((uint64_t (*)(WTF ***))v87[4])(&v87);
  WTF::printInternal(v36, (WTF::PrintStream *)&v83, v37, v38, v39, v40, v41, v42, v43, v44);
  WTF::PrintStream::printf(v36, "%s", " [");
  v45 = (WTF::PrintStream *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v36 + 32))(v36);
  if (v8)
  {
    WTF::StringImpl::utf8ForCharacters(v8, (v9 - 1), (uint64_t)&v84, v46);
  }
  else
  {
    v47 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v47 = 1;
    *(_QWORD *)(v47 + 8) = 0;
    *(_BYTE *)(v47 + 16) = 0;
    v84 = (WTF *)v47;
    v85 = 0;
  }
  WTF::printExpectedCStringHelper(v45, "StringView", &v84);
  if (v85 != -1)
    ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v85])(&v86, &v84);
  (*(void (**)(WTF *))(*(_QWORD *)v36 + 40))(v36);
  WTF::PrintStream::printf(v36, "%s", "]");
  ((void (*)(WTF ***))v87[5])(&v87);
  v55 = v83;
  v83 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
      WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
  }
  v82 = 0;
  if (v5)
  {
    do
    {
      v56 = __ldaxr(v5);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, v5));
    if (!v57)
    {
      atomic_store(1u, v5);
      v84 = (WTF *)v5;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v84, v48, v49, v50, v51, v52, v53, v54);
    }
  }
  v58 = (const void *)*((_QWORD *)this + 2);
  v59 = (WTF::PrintStream *)((uint64_t (*)(WTF ***))v87[4])(&v87);
  WTF::PrintStream::printf(v59, "%s", "(Wasm::Instance: ");
  WTF::PrintStream::printf(v59, "%p", v58);
  WTF::PrintStream::printf(v59, "%s");
LABEL_62:
  ((void (*)(WTF ***))v87[5])(&v87);
LABEL_63:
  v60 = (char *)_MergedGlobals_37;
  v61 = v88;
  if (v88)
  {
    v62 = v89;
    if ((unint64_t)v89 >= 0xFFFFFFFFFFFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x1986CF7CCLL);
    }
    if ((_QWORD)v89 == -17)
    {
      __break(0xC471u);
      JUMPOUT(0x1986CF7D4);
    }
    v63 = WTF::fastMalloc((WTF *)(v89 + 17));
    *(_DWORD *)v63 = 1;
    *(_QWORD *)(v63 + 8) = v62;
    memcpy((void *)(v63 + 16), v61, v62);
    *(_BYTE *)(v63 + 16 + v62) = 0;
    strncpy(v60, (const char *)(v63 + 16), 0xC8uLL);
    if (*(_DWORD *)v63 == 1)
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    else
      --*(_DWORD *)v63;
  }
  else
  {
    strncpy((char *)_MergedGlobals_37, 0, 0xC8uLL);
  }
  v71 = _MergedGlobals_37;
  *(_BYTE *)(_MergedGlobals_37 + 200) = 0;
  if (v88 != (WTF *)v90)
    WTF::fastFree((unint64_t)v88, v64, v65, v66, v67, v68, v69, v70);
  return v71;
}

uint64_t JSC::CallFrame::lexicalGlobalObjectFromNativeCallee(_QWORD *a1)
{
  unint64_t v1;
  int v2;
  uint64_t v3;

  v1 = a1[3];
  while (1)
  {
    v2 = *(unsigned __int8 *)((v1 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
    if (v2)
      break;
    a1 = (_QWORD *)*a1;
    v1 = a1[3];
    if ((v1 & 0xFFFE000000000007) != 3)
    {
      v3 = 16 * (*(_DWORD *)v1 & 0xFFFFFFFE) + 40;
      return *(_QWORD *)v3;
    }
  }
  if (v2 == 1)
  {
    v3 = a1[2] + 32;
    return *(_QWORD *)v3;
  }
  return 0;
}

uint64_t JSC::CallFrame::codeOwnerCellSlow(JSC::CallFrame *this)
{
  uint64_t v1;
  int v2;
  char *v3;

  v1 = *((_QWORD *)this + 3);
  while (1)
  {
    v2 = *(unsigned __int8 *)((v1 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4);
    if (v2 == 1)
    {
      v3 = (char *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 40);
      return *(_QWORD *)v3;
    }
    if (v2)
      break;
    this = *(JSC::CallFrame **)this;
    v1 = *((_QWORD *)this + 3);
    if ((v1 & 0xFFFE000000000007) != 3)
    {
      v3 = (char *)this + 16;
      return *(_QWORD *)v3;
    }
  }
  return 0;
}

uint64_t JSC::isFromJSCode(JSC *this, void *a2)
{
  BOOL v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (qword_1ECF4C1F8 <= (unint64_t)this)
  {
    v2 = qword_1ECF4C200 >= (unint64_t)this;
    v3 = qword_1ECF4C200 == (_QWORD)this;
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  if (!v3 && v2)
    return 1;
  if ((unint64_t)llintPCRangeStart >= (unint64_t)llintPCRangeEnd)
  {
    result = 49;
    __break(0xC471u);
  }
  else
  {
    if (this >= (JSC *)llintPCRangeStart)
    {
      v4 = this >= (JSC *)llintPCRangeEnd;
      v5 = this == (JSC *)llintPCRangeEnd;
    }
    else
    {
      v4 = 1;
      v5 = 0;
    }
    return v5 || !v4;
  }
  return result;
}

uint64_t JSC::eval(JSC::CallFrame *a1, void *a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  char v9;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int **v27;
  char v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  char v32;
  _BOOL4 v33;
  int v34;
  char v36;
  char v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  WTF *v48;
  BOOL v49;
  int v51;
  uint64_t v52;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const WTF::String *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::AtomStringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(WTF::StringImpl **);
  WTF::StringImpl **v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  unint64_t v92;
  __n128 v93;
  BOOL v94;
  unsigned int v95;
  unsigned __int8 *v96;
  unint64_t v97;
  unsigned int v98;
  BOOL v99;
  BOOL v100;
  BOOL v101;
  unsigned __int8 **v102;
  WTF::AtomStringImpl *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  __int128 v117;
  uint64_t v118;
  int *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::AtomStringImpl *v124;
  uint64_t v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl **v133;
  unsigned __int8 *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  WTF::StringImpl **v138;
  WTF::StringImpl *v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  char v149;
  unsigned __int8 *v150;
  int v151;
  unsigned __int8 *v152;
  unint64_t v153;
  int v154;
  int v155;
  int v156;
  int v157;
  unint64_t v158;
  BOOL v159;
  unsigned int v160;
  unint64_t v161;
  int8x16_t *v162;
  unsigned __int8 *v163;
  int8x16_t v164;
  int8x16_t v165;
  uint8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  unsigned __int8 *v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  uint8x16_t v175;
  unsigned int v176;
  unint64_t v177;
  WTF::AtomStringImpl *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  WTF::StringImpl **v186;
  WTF::StringImpl *v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t (*v197)(unint64_t, uint64_t, WTF::StringImpl **, uint64_t);
  int *v198;
  char v199;
  WTF::StringImpl *v200;
  uint64_t v201;
  const WTF::String *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  WTF::AtomStringImpl *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  WTF::StringImpl *v216;
  const WTF::String *v217;
  unint64_t EvalError;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unsigned __int8 *v225;
  WTF::AtomStringImpl *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  WTF::AtomStringImpl *v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  int v237;
  unint64_t v238;
  void *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  unint64_t v256;
  int v257;
  int v258;
  BOOL v259;
  unint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  WTF::AtomStringImpl *v269;
  unint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned __int8 *v278;
  unsigned __int8 *v279;
  unsigned __int8 *v280;
  unsigned __int8 *v281;
  uint8x16_t v282;
  char v283;
  int v284;
  unsigned __int8 *v285;
  int v286;
  int v287;
  int v288;
  int v289;
  unint64_t v290;
  uint64_t v291;
  WTF::StringImpl *v292;
  const char *v293;
  unsigned __int8 *v294;
  int v295;
  unsigned __int8 *v296;
  int8x16_t *v297;
  WTF::StringImpl *v298;
  WTF::StringImpl *v299;
  int v300;
  uint64_t v301;
  int v302;
  int v303;
  int64_t v304;
  int v305;
  BOOL v306;
  unint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  void *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  WTF::StringImpl *v325;
  uint64_t v326;
  const char *v327;
  unsigned __int8 *v328;
  int v329;
  unsigned __int8 *v330;
  uint64_t v331;
  unsigned int v332;
  BOOL v333;
  BOOL v334;
  BOOL v335;
  unint64_t *v336;
  unsigned __int8 v337;
  unsigned int v338;
  uint64_t v339;
  WTF::StringImpl **v340;
  char v341;
  uint64_t v342;
  const JSC::Identifier *v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  WTF::StringImpl **v348;
  WTF::StringImpl *v349;
  _QWORD *v350;
  WTF::StringImpl *v351;
  unsigned __int8 v352;
  char v353;
  unsigned int v354;
  double v355;
  unsigned __int8 v356;
  unint64_t v357;
  unsigned __int8 *v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  char v362;
  char v363;
  uint64_t v364;
  uint64_t v365;
  char v366;
  uint64_t v367;
  char *v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  uint64_t v373;
  _BYTE *v374;
  uint64_t v375;
  _BYTE v376[16];
  _BYTE *v377;
  uint64_t v378;
  _BYTE v379[128];
  WTF::StringImpl *v380;
  WTF::StringImpl **v381;
  unsigned __int8 v382;

  v9 = a4;
  v344 = a3;
  v11 = *(unsigned int *)(*(_QWORD *)a1 + 36);
  v12 = *(_QWORD **)(*(_QWORD *)a1 + 16);
  LODWORD(v347) = 4 * v11;
  v13 = (_BYTE *)v12[15];
  if (v13 && (v13[12] & 0xFE) == 4)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v13 + 72))(v13) + 40)
                                + 8)
                    + 8 * v11);
    if ((v14 & 1) != 0)
    {
      v85 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
      if ((v14 & 2) != 0
        || ((v86 = *(unsigned int *)((v14 & 0xFFFFFFFF8) + 8), (_DWORD)v86 != 0x3FFFFFFF)
          ? (v87 = (_DWORD)v86 == -1)
          : (v87 = 1),
            v87))
      {
        v88 = 2;
      }
      else if (v86 >> 28)
      {
        v233 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v233 = v85;
        *(_DWORD *)(v233 + 8) = v86;
        v88 = 1;
        v85 = v233;
      }
      else
      {
        v88 = *(_QWORD *)(v14 & 0xFFFFFFFF8);
        v85 = v86 << 36;
      }
      v14 = v85 | v88;
    }
    if (v12[24])
      v12 = (_QWORD *)v12[24];
    v15 = v12[15];
    if (v15)
    {
      v16 = *(unsigned __int8 *)(v15 + 12);
      if ((v16 & 0xFE) != 2 && v16 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1986D0CE8);
      }
    }
    v18 = (uint64_t *)(v14 & 0xFFFFFFFF8);
    v19 = v14 & 0xFFFFFFFF8;
    if ((v14 & 1) != 0)
      v19 = *v18;
    if (v19)
      v12 = *(_QWORD **)(v19 + 8);
    if ((v14 & 2) != 0)
    {
      LODWORD(v347) = -1;
      if ((v14 & 1) == 0)
        goto LABEL_19;
    }
    else
    {
      if ((v14 & 1) == 0)
      {
        v347 = v14 >> 36;
        goto LABEL_19;
      }
      LODWORD(v347) = *(_DWORD *)((v14 & 0xFFFFFFFF8) + 8);
    }
    if (v18)
      WTF::fastFree((unint64_t)v18, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
LABEL_19:
  v346 = v12[1];
  v20 = *(_DWORD **)(v346 + 1960);
  if (*v20 <= 0xA2u)
  {
    __break(0xC471u);
    JUMPOUT(0x1986CFDF8);
  }
  v21 = v12[7];
  v22 = *((_QWORD *)a1 + 3);
  v23 = *((_QWORD *)v20 + 163);
  if ((v23 & 1) != 0)
  {
    v81 = *(uint64_t (**)(WTF::StringImpl **))(v23 & 0xFFFFFFFFFFFFFFFCLL);
    v82 = (WTF::StringImpl **)(v346 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v346 & 8) != 0)
      v82 = (WTF::StringImpl **)(v346 - 16);
    v349 = *v82;
    v350 = (_QWORD *)v346;
    v351 = (WTF::StringImpl *)(v20 + 326);
    v83 = v21;
    v23 = v81(&v349);
    v21 = v83;
  }
  if (v22 != v23)
    return 0;
  v341 = v9;
  v24 = *(_QWORD *)(v346 + 56);
  if (*((_DWORD *)a1 + 8) == 1)
  {
    v25 = 10;
    goto LABEL_89;
  }
  v25 = *((_QWORD *)a1 + 6);
  if ((v25 & 0xFFFE000000000002) != 0 || (v26 = *((_QWORD *)a1 + 6), *(_BYTE *)(v25 + 5) != 2))
  {
    if (!HIBYTE(qword_1ECF4C7A8))
      goto LABEL_89;
    v57 = v21;
    (*(void (**)(WTF::StringImpl **__return_ptr, unint64_t, _QWORD))(*(_QWORD *)(v346 + 3280) + 152))(&v349, v346, *((_QWORD *)a1 + 6));
    if (!v349)
      goto LABEL_89;
    v26 = JSC::jsString((JSC *)v24, (JSC::VM *)&v349, v58, v59, v60, v61, v62, v63);
    v64 = v349;
    v349 = 0;
    v21 = v57;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
      {
        WTF::StringImpl::~StringImpl(v64, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
        v21 = v57;
      }
      else
      {
        *(_DWORD *)v64 -= 2;
      }
    }
    if (!v26)
      goto LABEL_89;
  }
  v345 = v26;
  v27 = (int **)(v26 + 8);
  if ((*(_BYTE *)(v26 + 8) & 1) != 0)
  {
    v65 = v21;
    v27 = JSC::JSRopeString::resolveRope(v345, (JSC::JSGlobalObject *)v346, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    v21 = v65;
  }
  v340 = (WTF::StringImpl **)v27;
  if (*(_DWORD *)(v24 + 80))
  {
    v84 = *(_DWORD *)(v24 + 80);
    if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
    {
      v301 = v21;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v24 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v27 = (int **)v340;
      v21 = v301;
    }
    if (*(_QWORD *)(v24 + 16))
      goto LABEL_114;
  }
  if (HIBYTE(qword_1ECF4C7A8) && *(_BYTE *)(v346 + 3171))
  {
    v196 = v21;
    v197 = *(uint64_t (**)(unint64_t, uint64_t, WTF::StringImpl **, uint64_t))(*(_QWORD *)(v346 + 3280)
                                                                                            + 160);
    v198 = *v27;
    if (*v27)
      *v198 += 2;
    v380 = (WTF::StringImpl *)v198;
    v199 = v197(v346, 1, &v380, v25);
    v200 = v380;
    v380 = 0;
    if (v200)
    {
      if (*(_DWORD *)v200 == 2)
      {
        WTF::StringImpl::~StringImpl(v200, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v238, v239, v240, v241, v242, v243, v244, v245);
      }
      else
      {
        *(_DWORD *)v200 -= 2;
      }
    }
    v21 = v196;
    v27 = (int **)v340;
    if ((v199 & 1) == 0)
    {
      v201 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v201 = 0x6600000002;
      *(_QWORD *)(v201 + 8) = "Refused to evaluate a string as JavaScript because this document requires a 'Trusted Type' assignment.";
      *(_DWORD *)(v201 + 16) = 4;
      v349 = (WTF::StringImpl *)v201;
      v203 = JSC::createEvalError(v346, &v349, v202);
      JSC::VM::throwException((JSC::VM *)v24, (JSC::JSGlobalObject *)v346, v203, v204, v205, v206, v207, v208);
      v216 = v349;
      v349 = 0;
      if (v216)
      {
        if (*(_DWORD *)v216 == 2)
        {
          WTF::StringImpl::~StringImpl(v216, v209, v210, v211, v212, v213, v214, v215);
          WTF::fastFree(v246, v247, v248, v249, v250, v251, v252, v253);
        }
        else
        {
          *(_DWORD *)v216 -= 2;
        }
      }
LABEL_114:
      v25 = 0;
      goto LABEL_89;
    }
  }
  v342 = *(_QWORD *)(v24 + 40);
  *(_QWORD *)(v24 + 40) = a1;
  if (!*(_BYTE *)(v346 + 3169))
  {
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)(v346 + 3280) + 112))(v346, v345);
    EvalError = JSC::createEvalError(v346, (WTF::StringImpl **)(v346 + 3184), v217);
    JSC::VM::throwException((JSC::VM *)v24, (JSC::JSGlobalObject *)v346, EvalError, v219, v220, v221, v222, v223);
LABEL_304:
    v25 = 0;
    goto LABEL_88;
  }
  v28 = *(_BYTE *)(v21 + 42);
  v29 = 1 << v28;
  v30 = *(unsigned __int16 *)(v21 + 28) | ((unint64_t)*(unsigned __int8 *)(v21 + 30) << 16);
  v31 = (v30 >> 8) & 3;
  v339 = v21;
  if (((1 << v28) & 0x940) != 0)
  {
    v338 = 1;
  }
  else
  {
    if ((int)*(_QWORD *)(v21 + 20) < 0)
      v32 = 1;
    else
      v32 = 2;
    if ((*(_WORD *)(v21 + 28) & 0x10) == 0)
      v32 = HIBYTE(*(_WORD *)(v21 + 28)) & 3;
    v33 = (*(_WORD *)(v21 + 28) & 8) != 0;
    if ((v30 & 8) != 0)
      v32 = BYTE1(v30) & 3;
    if ((v30 & 0x18) == 0)
      v33 = 0;
    v338 = v33;
    if ((v30 & 0x18) != 0)
      LOBYTE(v31) = v32;
  }
  v34 = v29 & 0x1F8FFF;
  if ((v29 & 0x1F8FFF) == 0 || v28 == 19)
    v36 = 2;
  else
    v36 = 1;
  if ((v30 & 0x3000) == 0x1000)
    v37 = (v30 >> 10) & 3;
  else
    v37 = 0;
  if ((v29 & 0x1F8FFF) != 0)
    v38 = 1;
  else
    v38 = v37;
  if (v34)
    v39 = 1;
  else
    v39 = v28 == 19;
  if (v39)
    v38 = v36;
  v337 = v38;
  v40 = v12[28];
  if (!v40)
  {
    v74 = (WTF::AtomStringImpl *)WTF::fastMalloc((WTF *)0x20);
    *(_OWORD *)v74 = 0u;
    *((_OWORD *)v74 + 1) = 0u;
    __dmb(0xAu);
    std::unique_ptr<JSC::CodeBlock::RareData>::reset[abi:sn180100](v12 + 28, v74, v75, v76, v77, v78, v79, v80);
    v27 = (int **)v340;
    v40 = v12[28];
  }
  v336 = v12 + 28;
  v41 = (unint64_t)*v27;
  if (*v27)
    *(_DWORD *)v41 += 2;
  v25 = *(_QWORD *)(v40 + 16);
  if (v25)
  {
    v42 = *(_DWORD *)(v25 - 8);
    v43 = *(_DWORD *)(v41 + 16);
    if (v43 < 0x100)
      v44 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v41);
    else
      v44 = v43 >> 8;
    v45 = (v44 ^ v347) & v42;
    v46 = v25 + 24 * v45;
    v47 = *(_DWORD *)(v46 + 8);
    v48 = *(WTF **)v46;
    v49 = *(_QWORD *)v46 == 0;
    if (v47 == -1 && v48 == 0)
    {
LABEL_81:
      v25 = 0;
    }
    else
    {
      v51 = 1;
      while (v48 == (WTF *)-1
           || v47 != (_DWORD)v347
           || v48 != (WTF *)v41 && (v49 || !WTF::equal(v48, (const WTF::StringImpl *)v41, a3)))
      {
        v45 = ((_DWORD)v45 + v51) & v42;
        v52 = v25 + 24 * v45;
        v47 = *(_DWORD *)(v52 + 8);
        v48 = *(WTF **)v52;
        v49 = *(_QWORD *)v52 == 0;
        ++v51;
        if (v47 == -1 && v48 == 0)
          goto LABEL_81;
      }
      v25 = *(_QWORD *)(v25 + 24 * v45 + 16);
    }
  }
  if (v41)
  {
    if (*(_DWORD *)v41 != 2)
    {
      *(_DWORD *)v41 -= 2;
      goto LABEL_86;
    }
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v41, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v55 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v55)
    {
      pas_try_deallocate_slow_no_cache(v41, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_86;
    }
    if (!(v41 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v41 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v41)) & 1) != 0)
    {
      goto LABEL_95;
    }
    if (v41 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v41 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v41 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v41) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_95:
        v56 = *(unsigned int *)(v55 + 8000);
        if (v56 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v55, v41, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v55 + 8 * v56) = v41 | 0x5000000000000;
          *(_DWORD *)(v55 + 8000) = v56 + 1;
        }
        goto LABEL_86;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v55, v41, 1, a4, a5, a6, a7, a8);
  }
LABEL_86:
  if (!v25)
  {
    if (!v341)
      goto LABEL_172;
    v89 = *v340;
    if (*v340)
    {
      if ((*((_BYTE *)v89 + 16) & 4) == 0)
      {
        v224 = *((unsigned int *)v89 + 1);
        v225 = (unsigned __int8 *)*((_QWORD *)v89 + 1);
        v349 = (WTF::StringImpl *)v346;
        v350 = v12;
        v351 = 0;
        v356 = 1;
        v357 = (unint64_t)v225;
        v358 = &v225[2 * v224];
        v359 = 0;
        v360 = 0;
        v361 = 0;
        v362 = 1;
        v363 = 1;
        v364 = 0;
        v365 = 0;
        v366 = 0;
        v367 = 0x800000000;
        v369 = 0u;
        v370 = 0u;
        v371 = 0u;
        v372 = 0u;
        v368 = (char *)&v369 + 8;
        v373 = 0;
        v374 = v376;
        v375 = 16;
        v377 = v379;
        v378 = 16;
        v25 = JSC::LiteralParser<char16_t>::tryLiteralParse((uint64_t)&v349, (int8x16_t)0x10uLL, (uint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8);
        JSC::LiteralParser<unsigned char>::~LiteralParser((uint64_t)&v349, v226, v227, v228, v229, v230, v231, v232);
        if (v25)
          goto LABEL_88;
        goto LABEL_171;
      }
      v90 = (unsigned __int8 *)*((_QWORD *)v89 + 1);
      v91 = *((unsigned int *)v89 + 1);
    }
    else
    {
      v90 = 0;
      v91 = 0;
    }
    v349 = (WTF::StringImpl *)v346;
    v350 = v12;
    v351 = 0;
    v356 = 1;
    v92 = (unint64_t)&v90[v91];
    v357 = (unint64_t)v90;
    v358 = &v90[v91];
    v359 = 0;
    v360 = 0;
    v361 = 0;
    v362 = 1;
    v363 = 1;
    v364 = 0;
    v365 = 0;
    v366 = 0;
    v367 = 0x800000000;
    v369 = 0u;
    v370 = 0u;
    v371 = 0u;
    v372 = 0u;
    v368 = (char *)&v369 + 8;
    v373 = 0;
    v374 = v376;
    v93 = (__n128)0x10uLL;
    v375 = 16;
    v377 = v379;
    v378 = 16;
    if (v91)
    {
      if (JSC::tokenTypesOfLatin1Characters[*v90] == 19)
      {
        v134 = v90 + 1;
        v135 = v91 - 1;
        while (1)
        {
          v357 = (unint64_t)v134;
          if (!v135)
            goto LABEL_308;
          v136 = *v134++;
          --v135;
          if (JSC::tokenTypesOfLatin1Characters[v136] != 19)
          {
            v90 = v134 - 1;
            v94 = (unint64_t)v90 < v92;
            goto LABEL_133;
          }
        }
      }
      v94 = 1;
    }
    else
    {
      v94 = 0;
    }
LABEL_133:
    if (v90 != (unsigned __int8 *)v92)
    {
      v352 = 18;
      a4 = *v90;
      v95 = JSC::tokenTypesOfLatin1Characters[a4];
      if (v95 <= 4)
      {
        if (v95 == 4)
        {
          a3 = (const WTF::StringImpl *)(v90 + 1);
          v357 = (unint64_t)a3;
          v96 = v90 + 1;
          if ((unint64_t)a3 < v92)
          {
            v97 = v92 - (_QWORD)a3;
            v96 = (unsigned __int8 *)a3;
            while (1)
            {
              v98 = *v96;
              v99 = v98 < 0x20 || v98 == 92;
              v100 = v99 || v98 == (_DWORD)a4;
              v101 = v100;
              if (v98 != 9 && v101)
                break;
              v357 = (unint64_t)++v96;
              if (!--v97)
              {
                v96 = (unsigned __int8 *)v92;
                break;
              }
            }
          }
          if ((unint64_t)v96 < v92 && *v96 == (_DWORD)a4)
          {
            v353 |= 1u;
            v355 = *(double *)&a3;
            v357 = (unint64_t)(v96 + 1);
            v354 = v354 & 0x80000000 | ((_DWORD)v96 - (_DWORD)a3) & 0x7FFFFFFF;
            v352 = 4;
          }
          else
          {
            JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)&v351, (uint64_t)&v352, (size_t)a3, a4, a5, a6, a7, a8);
          }
          goto LABEL_164;
        }
LABEL_163:
        v352 = v95;
        v357 = (unint64_t)(v90 + 1);
LABEL_164:
        v102 = (unsigned __int8 **)*((_QWORD *)v349 + 7);
        if (!v363)
        {
          v25 = JSC::LiteralParser<unsigned char>::parseRecursivelyEntry((uint64_t)&v349, v102, v93, (uint64_t)a3, a4, a5, a6, a7, a8);
          goto LABEL_166;
        }
        v25 = JSC::LiteralParser<unsigned char>::parse((uint64_t)&v349, (uint64_t)v102, 3uLL, a4, a5, a6, a7, a8);
        if (v352 != 17)
          goto LABEL_166;
        v90 = (unsigned __int8 *)v357;
        v158 = (unint64_t)v358;
        if (v357 >= (unint64_t)v358)
        {
          v159 = 0;
        }
        else if (JSC::tokenTypesOfLatin1Characters[*(unsigned __int8 *)v357] == 19)
        {
          v278 = v358;
          v279 = (unsigned __int8 *)(v357 + 1);
          v280 = &v358[~v357];
          while (1)
          {
            v281 = v279;
            v357 = (unint64_t)v279;
            if (!v280)
              break;
            ++v279;
            --v280;
            if (JSC::tokenTypesOfLatin1Characters[*v281] != 19)
            {
              v278 = v281;
              break;
            }
          }
          v159 = v281 < v358;
          v90 = v278;
        }
        else
        {
          v159 = 1;
        }
        if (v90 == v358)
        {
          v352 = 14;
          goto LABEL_166;
        }
        v352 = 18;
        a4 = *v90;
        v160 = JSC::tokenTypesOfLatin1Characters[a4];
        if (v160 <= 4)
        {
          if (v160 == 4)
          {
            v153 = v356;
            if ((_DWORD)a4 != 39)
            {
              a3 = (const WTF::StringImpl *)(v90 + 1);
              v357 = (unint64_t)(v90 + 1);
              if (!v356)
              {
                v161 = v358 - (unsigned __int8 *)a3;
                if (v358 - (unsigned __int8 *)a3 < 0)
                  goto LABEL_393;
                v162 = (int8x16_t *)&v90[v161 + 1];
                if (v161 >= 0x10)
                {
                  v163 = v90 + 16;
                  v164.i64[0] = 0x2222222222222222;
                  v164.i64[1] = 0x2222222222222222;
                  v165.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                  v165.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                  v166.i64[0] = 0x2020202020202020;
                  v166.i64[1] = 0x2020202020202020;
                  while (1)
                  {
                    v167 = *(int8x16_t *)(v163 - 15);
                    v168 = vceqq_s8(v167, v164);
                    v169 = vorrq_s8(vorrq_s8(vceqq_s8(v167, v165), (int8x16_t)vcgtq_u8(v166, (uint8x16_t)v167)), v168);
                    v168.i8[0] = vmaxvq_u8((uint8x16_t)v169);
                    if (v168.i32[0])
                      break;
                    v163 += 16;
                    if (v163 >= (unsigned __int8 *)v162)
                    {
                      if (v163 - 15 >= (unsigned __int8 *)v162)
                        goto LABEL_355;
                      v170 = (unsigned __int8 *)&v162[-1];
                      v171 = v162[-1];
                      v172.i64[0] = 0x2222222222222222;
                      v172.i64[1] = 0x2222222222222222;
                      v173 = vceqq_s8(v171, v172);
                      v174.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
                      v174.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
                      v175.i64[0] = 0x2020202020202020;
                      v175.i64[1] = 0x2020202020202020;
                      v169 = vorrq_s8(vorrq_s8(vceqq_s8(v171, v174), (int8x16_t)vcgtq_u8(v175, (uint8x16_t)v171)), v173);
                      v173.i8[0] = vmaxvq_u8((uint8x16_t)v169);
                      if (!v173.i32[0])
                        goto LABEL_355;
LABEL_354:
                      v282 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_19911D0A0, v169);
                      v282.i8[0] = vminvq_u8(v282);
                      v162 = (int8x16_t *)&v170[v282.u32[0]];
                      goto LABEL_355;
                    }
                  }
                  v170 = v163 - 15;
                  goto LABEL_354;
                }
                if (v358 == (unsigned __int8 *)a3)
                  goto LABEL_355;
                v297 = (int8x16_t *)(v90 + 1);
                do
                {
                  if (!JSC::safeStringLatin1CharactersInStrictJSON[v297->u8[0]])
                  {
                    v162 = v297;
                    break;
                  }
                  v297 = (int8x16_t *)((char *)v297 + 1);
                  --v161;
                }
                while (v161);
LABEL_355:
                v357 = (unint64_t)v162;
LABEL_356:
                if (v162 < (int8x16_t *)v358 && v162->u8[0] == (_DWORD)a4)
                {
                  v353 |= 1u;
                  v355 = *(double *)&a3;
                  v357 = (unint64_t)v162->u64 + 1;
                  v354 = v354 & 0x80000000 | ((_DWORD)v162 - (_DWORD)a3) & 0x7FFFFFFF;
                  v352 = 4;
                }
                else
                {
                  JSC::LiteralParser<unsigned char>::Lexer::lexStringSlow((WTF::StringBuilder *)&v351, (uint64_t)&v352, (size_t)a3, a4, a5, a6, a7, a8);
                }
                goto LABEL_166;
              }
LABEL_476:
              if (a3 >= (const WTF::StringImpl *)v358)
              {
                v162 = (int8x16_t *)a3;
              }
              else
              {
                v331 = (uint64_t)&v90[v358 - (unsigned __int8 *)a3 + 1];
                v162 = (int8x16_t *)a3;
                while (1)
                {
                  v332 = v162->u8[0];
                  v333 = v332 < 0x20 || v332 == 92;
                  v334 = v333 || v332 == (_DWORD)a4;
                  v335 = v334;
                  if (v332 != 9 && v335)
                    break;
                  v162 = (int8x16_t *)((char *)v162 + 1);
                  v357 = (unint64_t)v162;
                  if (v162 == (int8x16_t *)v331)
                  {
                    v162 = (int8x16_t *)v331;
                    goto LABEL_356;
                  }
                }
              }
              goto LABEL_356;
            }
            if (v356)
            {
              a3 = (const WTF::StringImpl *)(v90 + 1);
              v357 = (unint64_t)(v90 + 1);
              goto LABEL_476;
            }
            v324 = WTF::fastCompactMalloc((WTF *)0x20);
            v325 = (WTF::StringImpl *)v324;
            v326 = 0x2900000002;
            v327 = "Single quotes (') are not allowed in JSON";
            goto LABEL_460;
          }
LABEL_347:
          v352 = v160;
          v357 = (unint64_t)(v90 + 1);
          goto LABEL_166;
        }
        if (v160 == 6)
        {
          v283 = (_DWORD)a4 != 45 || !v159;
          v153 = (unint64_t)v90;
          if ((v283 & 1) == 0)
          {
            v153 = (unint64_t)(v90 + 1);
            v357 = (unint64_t)(v90 + 1);
          }
          if (v153 < (unint64_t)v358)
          {
            v284 = *(unsigned __int8 *)v153;
            if (v284 == 48)
              goto LABEL_394;
            if ((v284 - 49) <= 8)
            {
              v285 = (unsigned __int8 *)(v153 + 1);
              do
              {
                v153 = (unint64_t)v285;
                v357 = (unint64_t)v285;
                if (v285 >= v358)
                  break;
                ++v285;
              }
              while (*(unsigned __int8 *)v153 - 48 < 0xA);
              goto LABEL_370;
            }
          }
          v324 = WTF::fastCompactMalloc((WTF *)0x20);
          v325 = (WTF::StringImpl *)v324;
          v326 = 0xE00000002;
          v327 = "Invalid number";
LABEL_460:
          *(_QWORD *)v324 = v326;
          *(_QWORD *)(v324 + 8) = v327;
          *(_DWORD *)(v324 + 16) = 4;
          v299 = v351;
          v351 = v325;
          if (!v299)
            goto LABEL_166;
          goto LABEL_457;
        }
        if (v160 != 5)
        {
          if (v160 - 18 < 2)
          {
            WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>("Unrecognized token '", 21, v90, 1uLL, 39, &v381);
            v298 = (WTF::StringImpl *)v381;
            v381 = 0;
            v299 = v351;
            v351 = v298;
            if (!v299)
              goto LABEL_166;
            v300 = *(_DWORD *)v299 - 2;
            if (*(_DWORD *)v299 != 2)
              goto LABEL_434;
            WTF::StringImpl::~StringImpl(v299, v103, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v308, v309, v310, v311, v312, v313, v314, v315);
            v299 = (WTF::StringImpl *)v381;
            v381 = 0;
            if (!v299)
              goto LABEL_166;
LABEL_457:
            v300 = *(_DWORD *)v299 - 2;
            if (*(_DWORD *)v299 == 2)
            {
              WTF::StringImpl::~StringImpl(v299, v103, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v316, v317, v318, v319, v320, v321, v322, v323);
              goto LABEL_166;
            }
LABEL_434:
            *(_DWORD *)v299 = v300;
            goto LABEL_166;
          }
          goto LABEL_347;
        }
        if ((_DWORD)a4 == 110)
        {
          if (v358 - v90 >= 4 && *(_WORD *)(v90 + 1) == 27765 && v90[3] == 108)
          {
            v357 = (unint64_t)(v90 + 4);
            v352 = 13;
            goto LABEL_166;
          }
        }
        else if ((_DWORD)a4 == 102)
        {
          if (v358 - v90 >= 5 && *(_WORD *)(v90 + 1) == 27745 && *(_WORD *)(v90 + 3) == 25971)
          {
            v357 = (unint64_t)(v90 + 5);
            v352 = 12;
            goto LABEL_166;
          }
        }
        else if ((_DWORD)a4 == 116 && v358 - v90 >= 4 && *(_WORD *)(v90 + 1) == 30066 && v90[3] == 101)
        {
          v357 = (unint64_t)(v90 + 4);
          v352 = 11;
          goto LABEL_166;
        }
        v302 = (int)v90;
        v355 = *(double *)&v90;
        v303 = (int)v90;
        if (v90 < v358)
        {
          v304 = v358 - v90;
          while (1)
          {
            v305 = *v90;
            if (v305 != 36)
            {
              v306 = v305 != 95 && (v305 - 48) >= 0xA;
              if (v306 && (v305 | 0x20u) - 97 > 0x19)
                break;
            }
            v357 = (unint64_t)++v90;
            if (!--v304)
            {
              LODWORD(v90) = (_DWORD)v358;
              break;
            }
          }
          v303 = (int)v90;
        }
        v354 = v354 & 0x80000000 | (v303 - v302) & 0x7FFFFFFF;
        v352 = 5;
LABEL_166:
        v104 = v352;
        JSC::LiteralParser<unsigned char>::~LiteralParser((uint64_t)&v349, v103, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (v104 == 14 && v25 != 0)
          goto LABEL_88;
LABEL_171:
        if (*(_DWORD *)(v24 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v24, v105, v106, a4, a5, a6, a7, a8))
        {
          goto LABEL_304;
        }
LABEL_172:
        v381 = 0;
        v348 = 0;
        JSC::JSScope::collectClosureVariablesUnderTDZ((uint64_t)v344, (uint64_t *)&v381, (uint64_t *)&v348, a4, a5, a6, a7, a8);
        if (*(_BYTE *)(v24 + 41452))
        {
          v382 = 1;
          v349 = (WTF::StringImpl *)&v382;
          JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,JSC::computeNewSourceTaintedOriginFromStack(JSC::VM &,JSC::CallFrame *)::$_0>(a1, (JSC::VM *)v24, (_BYTE **)&v349, v108, v109, v110, v111, v112);
          v113 = v382;
        }
        else
        {
          v113 = 0;
        }
        v114 = *(_QWORD *)(v12[8] + 40);
        v115 = WTF::fastMalloc((WTF *)0x80);
        *(_DWORD *)(v115 + 8) = 1;
        *(_QWORD *)v115 = off_1E35964B0;
        *(_BYTE *)(v115 + 12) = 0;
        v116 = *(_DWORD **)(v114 + 16);
        if (v116)
          *v116 += 2;
        *(_QWORD *)(v115 + 16) = v116;
        v117 = *(_OWORD *)(v114 + 24);
        *(_OWORD *)(v115 + 40) = *(_OWORD *)(v114 + 40);
        *(_OWORD *)(v115 + 24) = v117;
        v118 = *(_QWORD *)(v114 + 56);
        if (v118)
          ++*(_DWORD *)(v118 + 8);
        *(_QWORD *)(v115 + 56) = v118;
        *(_OWORD *)(v115 + 64) = 0u;
        *(_OWORD *)(v115 + 80) = 0u;
        *(_OWORD *)(v115 + 96) = 0u;
        *(_DWORD *)(v115 + 112) = 0;
        *(_BYTE *)(v115 + 116) = v113;
        *(_QWORD *)v115 = off_1E357C4B0;
        v119 = (int *)*v340;
        if (!*v340)
          v119 = &WTF::StringImpl::s_emptyAtomString;
        *v119 += 2;
        *(_QWORD *)(v115 + 120) = v119;
        v349 = (WTF::StringImpl *)v115;
        LODWORD(v350) = 0;
        v120 = v119[1];
        v351 = 0;
        HIDWORD(v350) = v120;
        v121 = *(_QWORD *)(v339 + 152);
        if (v121)
        {
          v176 = *(unsigned __int8 *)(v121 + 56);
          v122 = v176 & 1;
          v123 = (v176 >> 1) & 1;
        }
        else
        {
          v122 = 0;
          v123 = 0;
        }
        v25 = JSC::DirectEvalExecutable::create(v346, (JSC::VM *)&v349, v31, v122, v123, v338, (*(unsigned __int16 *)(v12[8] + 70) >> 7) & 1, v337, &v381, (uint64_t *)&v348, v341);
        v127 = v349;
        v349 = 0;
        if (v127)
        {
          if (*((_DWORD *)v127 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v127 + 8))(v127);
          else
            --*((_DWORD *)v127 + 2);
        }
        if (v25 && !v113)
        {
          v128 = *v336;
          if (!*v336)
          {
            v178 = (WTF::AtomStringImpl *)WTF::fastMalloc((WTF *)0x20);
            *(_OWORD *)v178 = 0u;
            *((_OWORD *)v178 + 1) = 0u;
            __dmb(0xAu);
            std::unique_ptr<JSC::CodeBlock::RareData>::reset[abi:sn180100](v336, v178, v179, v180, v181, v182, v183, v184);
            v128 = *v336;
          }
          v131 = *(_QWORD *)(v128 + 16);
          v129 = v128 + 16;
          v130 = v131;
          if (!v131 || *(_DWORD *)(v130 - 12) <= 0x3Fu)
            JSC::DirectEvalCodeCache::setSlow(v129, v346, (unint64_t)v12, v340, v347, v25, a7, a8);
        }
        v132 = (uint64_t)v348;
        if (v348)
        {
          v185 = *((unsigned int *)v348 - 1);
          if ((_DWORD)v185)
          {
            v186 = v348;
            do
            {
              v187 = *v186;
              if (*v186 != (WTF::StringImpl *)-1)
              {
                if (v187)
                {
                  *v186 = 0;
                  if (*(_DWORD *)v187 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v187, v124, v125, v126, a5, a6, a7, a8);
                    WTF::fastFree(v188, v189, v190, v191, v192, v193, v194, v195);
                  }
                  else
                  {
                    *(_DWORD *)v187 -= 2;
                  }
                }
                else
                {
                  *v186 = 0;
                }
              }
              v186 += 2;
              --v185;
            }
            while (v185);
          }
          WTF::fastFree(v132 - 16, v124, v125, v126, a5, a6, a7, a8);
        }
        v133 = v381;
        if (v381)
        {
          v137 = *((unsigned int *)v381 - 1);
          if ((_DWORD)v137)
          {
            v138 = v381;
            do
            {
              v139 = *v138;
              if (*v138 != (WTF::StringImpl *)-1)
              {
                if (v139)
                {
                  *v138 = 0;
                  if (*(_DWORD *)v139 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v139, v124, v125, v126, a5, a6, a7, a8);
                    WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
                  }
                  else
                  {
                    *(_DWORD *)v139 -= 2;
                  }
                }
                else
                {
                  *v138 = 0;
                }
              }
              ++v138;
              --v137;
            }
            while (v137);
          }
          WTF::fastFree((unint64_t)(v133 - 2), v124, v125, v126, a5, a6, a7, a8);
        }
        if (!v25)
          goto LABEL_88;
        goto LABEL_87;
      }
      if (v95 != 6)
      {
        if (v95 == 5)
        {
          if ((_DWORD)a4 == 110)
          {
            if ((uint64_t)(v92 - (_QWORD)v90) >= 4 && *(_WORD *)(v90 + 1) == 27765 && v90[3] == 108)
            {
              v357 = (unint64_t)(v90 + 4);
              v352 = 13;
              goto LABEL_164;
            }
          }
          else if ((_DWORD)a4 == 102)
          {
            if ((uint64_t)(v92 - (_QWORD)v90) >= 5 && *(_WORD *)(v90 + 1) == 27745 && *(_WORD *)(v90 + 3) == 25971)
            {
              v357 = (unint64_t)(v90 + 5);
              v352 = 12;
              goto LABEL_164;
            }
          }
          else if ((_DWORD)a4 == 116
                 && (uint64_t)(v92 - (_QWORD)v90) >= 4
                 && *(_WORD *)(v90 + 1) == 30066
                 && v90[3] == 101)
          {
            v357 = (unint64_t)(v90 + 4);
            v352 = 11;
            goto LABEL_164;
          }
          v254 = (int)v90;
          v355 = *(double *)&v90;
          v255 = (int)v90;
          if ((unint64_t)v90 < v92)
          {
            v256 = v92 - (_QWORD)v90;
            v257 = (_DWORD)v90 + v256;
            while (1)
            {
              v258 = *v90;
              if (v258 != 36)
              {
                v259 = v258 != 95 && (v258 - 48) >= 0xA;
                if (v259 && (v258 | 0x20u) - 97 > 0x19)
                  break;
              }
              v357 = (unint64_t)++v90;
              if (!--v256)
              {
                LODWORD(v90) = v257;
                break;
              }
            }
            v255 = (int)v90;
          }
          v354 = v354 & 0x80000000 | (v255 - v254) & 0x7FFFFFFF;
          v352 = 5;
          goto LABEL_164;
        }
        if (v95 - 18 >= 2)
          goto LABEL_163;
        WTF::makeString<WTF::ASCIILiteral,std::span<unsigned char const,18446744073709551615ul>,char>("Unrecognized token '", 21, v90, 1uLL, 39, &v381);
        v235 = (WTF::StringImpl *)v381;
        v381 = 0;
        v236 = v351;
        v351 = v235;
        if (!v236)
          goto LABEL_164;
        v237 = *(_DWORD *)v236 - 2;
        if (*(_DWORD *)v236 != 2)
        {
LABEL_317:
          *(_DWORD *)v236 = v237;
          goto LABEL_164;
        }
        WTF::StringImpl::~StringImpl(v236, v234, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v261, v262, v263, v264, v265, v266, v267, v268);
        v236 = (WTF::StringImpl *)v381;
        v381 = 0;
        if (!v236)
          goto LABEL_164;
LABEL_342:
        v237 = *(_DWORD *)v236 - 2;
        if (*(_DWORD *)v236 == 2)
        {
          WTF::StringImpl::~StringImpl(v236, v269, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v270, v271, v272, v273, v274, v275, v276, v277);
          goto LABEL_164;
        }
        goto LABEL_317;
      }
      v148 = !v94;
      if ((_DWORD)a4 == 45)
        v149 = v148;
      else
        v149 = 1;
      v150 = v90;
      if ((v149 & 1) == 0)
      {
        v150 = v90 + 1;
        v357 = (unint64_t)(v90 + 1);
      }
      if ((unint64_t)v150 < v92)
      {
        v151 = *v150;
        if (v151 == 48)
        {
          v153 = (unint64_t)(v150 + 1);
          v357 = v153;
          goto LABEL_224;
        }
        if ((v151 - 49) <= 8)
        {
          v152 = v150 + 1;
          do
          {
            v153 = (unint64_t)v152;
            v357 = (unint64_t)v152;
            if ((unint64_t)v152 >= v92)
              break;
            ++v152;
          }
          while (*(unsigned __int8 *)v153 - 48 < 0xA);
LABEL_224:
          if (v153 < v92)
          {
            v154 = *(unsigned __int8 *)v153;
            if (v154 == 46)
            {
              v357 = v153 + 1;
              if (v153 + 1 >= v92 || *(unsigned __int8 *)(v153 + 1) - 48 > 9)
              {
                v291 = WTF::fastCompactMalloc((WTF *)0x20);
                v292 = (WTF::StringImpl *)v291;
                v93.n128_u64[0] = 0x2200000002;
                v293 = "Invalid digits after decimal point";
                goto LABEL_401;
              }
              v177 = v153 + 2;
              do
              {
                v153 = v177;
                v357 = v177;
                if (v177 >= v92)
                  break;
                ++v177;
              }
              while (*(unsigned __int8 *)v153 - 48 < 0xA);
            }
            else if (v154 != 69 && v154 != 101 && (uint64_t)(v153 - (_QWORD)v90) <= 9)
            {
              v352 = 6;
              v155 = *v90;
              if (v155 == 45)
                ++v90;
              if ((unint64_t)v90 >= v153)
              {
                if (v155 != 45)
                {
                  v156 = 0;
LABEL_235:
                  v93.n128_f64[0] = (double)v156;
                  v355 = (double)v156;
                  goto LABEL_164;
                }
              }
              else
              {
                v156 = 0;
                do
                {
                  v157 = *v90++;
                  v156 = v157 + 10 * v156 - 48;
                }
                while ((unint64_t)v90 < v153);
                if (v155 != 45)
                  goto LABEL_235;
                if (v156)
                {
                  v156 = -v156;
                  goto LABEL_235;
                }
              }
              v355 = -0.0;
              goto LABEL_164;
            }
          }
          if (v153 >= v92 || (*(unsigned __int8 *)v153 | 0x20) != 0x65)
          {
LABEL_265:
            v158 = 6;
            v352 = 6;
            v381 = 0;
            v103 = (WTF::AtomStringImpl *)(v153 - (_QWORD)v90);
            if ((uint64_t)(v153 - (_QWORD)v90) < 0)
            {
              while (1)
              {
LABEL_393:
                __break(1u);
LABEL_394:
                v357 = ++v153;
LABEL_370:
                if (v153 < v158)
                {
                  v286 = *(unsigned __int8 *)v153;
                  if (v286 == 46)
                  {
                    v357 = v153 + 1;
                    if (v153 + 1 >= v158 || *(unsigned __int8 *)(v153 + 1) - 48 > 9)
                    {
                      v324 = WTF::fastCompactMalloc((WTF *)0x20);
                      v325 = (WTF::StringImpl *)v324;
                      v326 = 0x2200000002;
                      v327 = "Invalid digits after decimal point";
                      goto LABEL_460;
                    }
                    v290 = v153 + 2;
                    do
                    {
                      v153 = v290;
                      v357 = v290;
                      if (v290 >= v158)
                        break;
                      ++v290;
                    }
                    while (*(unsigned __int8 *)v153 - 48 < 0xA);
                  }
                  else if (v286 != 69 && v286 != 101 && (uint64_t)(v153 - (_QWORD)v90) <= 9)
                  {
                    v352 = 6;
                    v287 = *v90;
                    if (v287 == 45)
                      ++v90;
                    if ((unint64_t)v90 >= v153)
                    {
                      if (v287 != 45)
                      {
                        v288 = 0;
LABEL_381:
                        v355 = (double)v288;
                        goto LABEL_166;
                      }
                    }
                    else
                    {
                      v288 = 0;
                      do
                      {
                        v289 = *v90++;
                        v288 = v289 + 10 * v288 - 48;
                      }
                      while ((unint64_t)v90 < v153);
                      if (v287 != 45)
                        goto LABEL_381;
                      if (v288)
                      {
                        v288 = -v288;
                        goto LABEL_381;
                      }
                    }
                    v355 = -0.0;
                    goto LABEL_166;
                  }
                }
                if (v153 < v158 && (*(unsigned __int8 *)v153 | 0x20) == 0x65)
                {
                  v328 = (unsigned __int8 *)(v153 + 1);
                  v357 = v153 + 1;
                  if (v153 + 1 < v158)
                  {
                    v329 = *v328;
                    if (v329 == 45 || v329 == 43)
                    {
                      v328 = (unsigned __int8 *)(v153 + 2);
                      v357 = v153 + 2;
                    }
                  }
                  if ((unint64_t)v328 >= v158 || *v328 - 48 > 9)
                  {
                    v324 = WTF::fastCompactMalloc((WTF *)0x20);
                    v325 = (WTF::StringImpl *)v324;
                    v326 = 0x5D00000002;
                    v327 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
                    goto LABEL_460;
                  }
                  v330 = v328 + 1;
                  do
                  {
                    v153 = (unint64_t)v330;
                    v357 = (unint64_t)v330;
                    if ((unint64_t)v330 >= v158)
                      break;
                    ++v330;
                  }
                  while (*(unsigned __int8 *)v153 - 48 < 0xA);
                }
                v158 = 6;
                v352 = 6;
                v381 = 0;
                v103 = (WTF::AtomStringImpl *)(v153 - (_QWORD)v90);
                if ((uint64_t)(v153 - (_QWORD)v90) >= 0)
                {
                  v355 = WTF::parseDouble(v90, (uint64_t)v103, &v381);
                  goto LABEL_166;
                }
              }
            }
            v93.n128_f64[0] = WTF::parseDouble(v90, (uint64_t)v103, &v381);
            v355 = v93.n128_f64[0];
            goto LABEL_164;
          }
          v294 = (unsigned __int8 *)(v153 + 1);
          v357 = v153 + 1;
          if (v153 + 1 < v92)
          {
            v295 = *v294;
            if (v295 == 45 || v295 == 43)
            {
              v294 = (unsigned __int8 *)(v153 + 2);
              v357 = v153 + 2;
            }
          }
          if ((unint64_t)v294 < v92 && *v294 - 48 <= 9)
          {
            v296 = v294 + 1;
            do
            {
              v153 = (unint64_t)v296;
              v357 = (unint64_t)v296;
              if ((unint64_t)v296 >= v92)
                break;
              ++v296;
            }
            while (*(unsigned __int8 *)v153 - 48 < 0xA);
            goto LABEL_265;
          }
          v291 = WTF::fastCompactMalloc((WTF *)0x20);
          v292 = (WTF::StringImpl *)v291;
          v93.n128_u64[0] = 0x5D00000002;
          v293 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_401:
          *(_QWORD *)v291 = v93.n128_u64[0];
          *(_QWORD *)(v291 + 8) = v293;
          *(_DWORD *)(v291 + 16) = 4;
          v236 = v351;
          v351 = v292;
          if (!v236)
            goto LABEL_164;
          goto LABEL_342;
        }
      }
      v291 = WTF::fastCompactMalloc((WTF *)0x20);
      v292 = (WTF::StringImpl *)v291;
      v93.n128_u64[0] = 0xE00000002;
      v293 = "Invalid number";
      goto LABEL_401;
    }
LABEL_308:
    v352 = 14;
    goto LABEL_164;
  }
LABEL_87:
  v25 = JSC::Interpreter::executeEval((WTF::Thread *)(v24 + 90560), v25, (JSC::JSGlobalObject *)a2, v344, a5, a6, a7, a8, *(double *)a9.i64);
LABEL_88:
  *(_QWORD *)(v24 + 40) = v342;
LABEL_89:
  *(_BYTE *)(v24 + 93120) = 1;
  return v25;
}

uint64_t JSC::LiteralParser<char16_t>::tryLiteralParse(uint64_t a1, int8x16_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;
  unsigned __int16 *v11;
  BOOL v12;
  char v13;
  WTF::StringImpl **v14;
  _BYTE *v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int16x8_t *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  int16x8_t v22;
  int16x8_t v23;
  uint16x8_t v24;
  int16x8_t v25;
  int8x16_t v26;
  unsigned __int16 *v27;
  int16x8_t v28;
  int16x8_t v29;
  int8x16_t v30;
  int16x8_t v31;
  uint16x8_t v32;
  unint64_t *v33;
  uint64_t result;
  char v35;
  char v36;
  uint64_t v37;
  unsigned __int16 *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 *v43;
  int v44;
  int v45;
  int v46;
  WTF::AtomStringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned __int16 *v73;
  BOOL v74;
  char v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  int16x8_t *v81;
  unsigned __int16 *v82;
  unsigned __int16 *v83;
  int16x8_t v84;
  int16x8_t v85;
  uint16x8_t v86;
  int16x8_t v87;
  int8x16_t v88;
  int8x16_t v89;
  unsigned __int16 *v90;
  int16x8_t v91;
  int16x8_t v92;
  int8x16_t v93;
  int16x8_t v94;
  uint16x8_t v95;
  char v96;
  char v97;
  uint64_t v98;
  unsigned __int16 *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int16 *v104;
  int v105;
  int v106;
  int v107;
  double v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  const char *v111;
  unsigned __int16 *v112;
  int v113;
  BOOL v115;
  unsigned int v116;
  unsigned __int16 *v117;
  unint64_t v118;
  unsigned __int16 *v119;
  int v120;
  unsigned __int16 *v121;
  uint64_t v122;
  int16x8_t *v123;
  unint64_t v124;
  WTF::AtomStringImpl *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  int v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::AtomStringImpl *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  WTF::StringImpl *v159;
  uint64_t v160;
  const char *v161;
  unsigned __int16 *v162;
  int v163;
  BOOL v165;
  unsigned int v166;
  unsigned __int16 *v167;
  unint64_t v168;
  unsigned __int16 *v169;
  int v170;
  unsigned __int16 *v171;
  uint64_t v172;
  int16x8_t *v173;
  unint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;

  v11 = *(unsigned __int16 **)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v11 >= v10)
  {
    v13 = 0;
  }
  else
  {
    do
    {
      v12 = *v11 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v11] == 19;
      v13 = !v12;
      if (!v12)
        break;
      *(_QWORD *)(a1 + 48) = ++v11;
    }
    while ((unint64_t)v11 < v10);
  }
  v14 = (WTF::StringImpl **)(a1 + 16);
  v15 = (_BYTE *)(a1 + 24);
  if (v11 == (unsigned __int16 *)v10)
  {
    *v15 = 14;
    goto LABEL_29;
  }
  *v15 = 18;
  a5 = *v11;
  if (a5 > 0xFF)
    goto LABEL_74;
  v16 = JSC::tokenTypesOfLatin1Characters[a5];
  if (v16 > 4)
  {
    if (v16 == 5)
    {
      if ((_DWORD)a5 == 102)
      {
        if ((uint64_t)(v10 - (_QWORD)v11) >= 9 && *(_DWORD *)(v11 + 1) == 7077985 && *(_DWORD *)(v11 + 3) == 6619251)
        {
          *(_QWORD *)(a1 + 48) = v11 + 5;
          v35 = 12;
          goto LABEL_40;
        }
      }
      else if ((_DWORD)a5 == 116)
      {
        if ((uint64_t)(v10 - (_QWORD)v11) >= 7 && *(_DWORD *)(v11 + 1) == 7667826 && v11[3] == 101)
        {
          *(_QWORD *)(a1 + 48) = v11 + 4;
          v35 = 11;
          goto LABEL_40;
        }
      }
      else if ((_DWORD)a5 == 110
             && (uint64_t)(v10 - (_QWORD)v11) >= 7
             && *(_DWORD *)(v11 + 1) == 7078005
             && v11[3] == 108)
      {
        *(_QWORD *)(a1 + 48) = v11 + 4;
        v35 = 13;
        goto LABEL_40;
      }
      *(_QWORD *)(a1 + 32) = v11;
      LODWORD(v112) = (_DWORD)v11;
      if ((unint64_t)v11 < v10)
      {
        v112 = v11;
        do
        {
          v113 = *v112;
          v115 = (v113 | 0x20u) - 97 >= 0x1A && (v113 - 48) >= 0xA && (v113 - 8204) >= 2;
          if (v115 && v113 != 95 && v113 != 36)
            break;
          *(_QWORD *)(a1 + 48) = ++v112;
        }
        while ((unint64_t)v112 < v10);
      }
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v112 - (_DWORD)v11) >> 1);
      v35 = 5;
      goto LABEL_40;
    }
    if (v16 != 6)
    {
      if (v16 - 18 >= 2)
        goto LABEL_28;
LABEL_74:
      WTF::makeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((int8x16_t *)"Unrecognized token '", 21, v11, 1uLL, 39, &v176);
      v48 = v176;
      v176 = 0;
      v49 = *v14;
      *v14 = v48;
      if (!v49)
        goto LABEL_29;
      v50 = *(_DWORD *)v49 - 2;
      if (*(_DWORD *)v49 != 2)
        goto LABEL_76;
      WTF::StringImpl::~StringImpl(v49, v47, a4, a5, a6, a7, a8, a9);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
      v49 = v176;
      v176 = 0;
      if (!v49)
        goto LABEL_29;
LABEL_79:
      v50 = *(_DWORD *)v49 - 2;
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v59, a4, a5, a6, a7, a8, a9);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
        goto LABEL_29;
      }
LABEL_76:
      *(_DWORD *)v49 = v50;
      goto LABEL_29;
    }
    v36 = v13 ^ 1;
    if ((_DWORD)a5 != 45)
      v36 = 1;
    if ((v36 & 1) != 0)
    {
      v37 = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 48) = v11 + 1;
      v37 = 1;
    }
    v38 = &v11[v37];
    if ((unint64_t)v38 < v10)
    {
      v39 = *v38;
      if (v39 == 48)
      {
        v42 = v37 + 1;
        goto LABEL_51;
      }
      if ((v39 - 49) <= 8)
      {
        v40 = v37 + 1;
        v41 = 2 * v37 + 2;
        do
        {
          v42 = v40;
          if ((unint64_t)v11 + v41 >= v10)
            break;
          ++v40;
          v41 += 2;
        }
        while (v11[v42] - 48 < 0xA);
LABEL_51:
        v43 = &v11[v42];
        *(_QWORD *)(a1 + 48) = v43;
        if ((unint64_t)v43 < v10)
        {
          v44 = *v43;
          if (v44 != 101 && v44 != 69)
          {
            if (v44 == 46)
            {
              v117 = v43 + 1;
              *(_QWORD *)(a1 + 48) = v117;
              if ((unint64_t)v117 >= v10 || *v117 - 48 > 9)
              {
                v109 = WTF::fastCompactMalloc((WTF *)0x20);
                v110 = (WTF::StringImpl *)v109;
                a2.i64[0] = 0x2200000002;
                v111 = "Invalid digits after decimal point";
                goto LABEL_150;
              }
              v118 = (unint64_t)&v11[v42 + 2];
              do
              {
                v43 = (unsigned __int16 *)v118;
                if (v118 >= v10)
                  break;
                v118 += 2;
              }
              while (*v43 - 48 < 0xA);
              *(_QWORD *)(a1 + 48) = v43;
            }
            else if (v42 <= 9)
            {
              *v15 = 6;
              if ((_DWORD)a5 == 45)
              {
                if (v42 < 2)
                  goto LABEL_218;
                ++v11;
              }
              v45 = 0;
              do
              {
                v46 = *v11++;
                v45 = v46 + 10 * v45 - 48;
              }
              while (v11 < v43);
              if ((_DWORD)a5 != 45)
                goto LABEL_60;
              if (v45)
              {
                v45 = -v45;
LABEL_60:
                *(double *)a2.i64 = (double)v45;
LABEL_61:
                *(_QWORD *)(a1 + 32) = a2.i64[0];
                goto LABEL_29;
              }
LABEL_218:
              *(_QWORD *)(a1 + 32) = 0x8000000000000000;
              goto LABEL_29;
            }
          }
        }
        if ((unint64_t)v43 >= v10 || (*v43 | 0x20) != 0x65)
        {
LABEL_202:
          *v15 = 6;
          v176 = 0;
          if ((char *)v43 - (char *)v11 <= -2)
            goto LABEL_285;
          *(double *)a2.i64 = WTF::parseDouble(v11, v43 - v11, &v176);
          goto LABEL_61;
        }
        v119 = v43 + 1;
        *(_QWORD *)(a1 + 48) = v43 + 1;
        if ((unint64_t)(v43 + 1) < v10)
        {
          v120 = *v119;
          if (v120 == 45 || v120 == 43)
          {
            v119 = v43 + 2;
            *(_QWORD *)(a1 + 48) = v43 + 2;
          }
        }
        if ((unint64_t)v119 < v10 && *v119 - 48 <= 9)
        {
          v121 = v119 + 1;
          do
          {
            v43 = v121;
            if ((unint64_t)v121 >= v10)
              break;
            ++v121;
          }
          while (*v43 - 48 < 0xA);
          *(_QWORD *)(a1 + 48) = v43;
          goto LABEL_202;
        }
        v109 = WTF::fastCompactMalloc((WTF *)0x20);
        v110 = (WTF::StringImpl *)v109;
        a2.i64[0] = 0x5D00000002;
        v111 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
LABEL_150:
        *(_QWORD *)v109 = a2.i64[0];
        *(_QWORD *)(v109 + 8) = v111;
        *(_DWORD *)(v109 + 16) = 4;
        v49 = *v14;
        *v14 = v110;
        if (!v49)
          goto LABEL_29;
        goto LABEL_79;
      }
    }
    v109 = WTF::fastCompactMalloc((WTF *)0x20);
    v110 = (WTF::StringImpl *)v109;
    a2.i64[0] = 0xE00000002;
    v111 = "Invalid number";
    goto LABEL_150;
  }
  if (v16 != 4)
  {
LABEL_28:
    *(_BYTE *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 48) = v11 + 1;
    goto LABEL_29;
  }
  v17 = *(unsigned __int8 *)(a1 + 40);
  if ((_DWORD)a5 == 39)
  {
    if (*(_BYTE *)(a1 + 40))
    {
      a4 = (unint64_t)(v11 + 1);
      *(_QWORD *)(a1 + 48) = v11 + 1;
LABEL_174:
      v19 = (int16x8_t *)a4;
      if (a4 < v10)
      {
        while (1)
        {
          v116 = v19->u16[0];
          if (v116 < 0x20)
          {
            if (v116 != 9)
              goto LABEL_37;
          }
          else if (v116 == (_DWORD)a5 || v116 > 0xFF || v116 == 92)
          {
            goto LABEL_37;
          }
          v19 = (int16x8_t *)((char *)v19 + 2);
          *(_QWORD *)(a1 + 48) = v19;
          if ((unint64_t)v19 >= v10)
            goto LABEL_37;
        }
      }
      goto LABEL_37;
    }
    v109 = WTF::fastCompactMalloc((WTF *)0x20);
    v110 = (WTF::StringImpl *)v109;
    a2.i64[0] = 0x2900000002;
    v111 = "Single quotes (') are not allowed in JSON";
    goto LABEL_150;
  }
  a4 = (unint64_t)(v11 + 1);
  *(_QWORD *)(a1 + 48) = v11 + 1;
  if (v17)
    goto LABEL_174;
  v18 = v10 - a4;
  if ((uint64_t)(v10 - a4) <= -2)
    goto LABEL_285;
  v19 = (int16x8_t *)((char *)v11 + (v18 & 0xFFFFFFFFFFFFFFFELL) + 2);
  if ((unint64_t)v18 <= 0xE)
  {
    if (v10 != a4)
    {
      v122 = 2 * (v18 >> 1);
      v123 = (int16x8_t *)a4;
      while (1)
      {
        v124 = v123->u16[0];
        if (v124 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v124])
          break;
        v123 = (int16x8_t *)((char *)v123 + 2);
        v122 -= 2;
        if (!v122)
          goto LABEL_36;
      }
      v19 = v123;
    }
    goto LABEL_36;
  }
  v20 = v11 + 1;
  if (v18 < 15)
  {
LABEL_22:
    if (v20 >= (unsigned __int16 *)v19)
      goto LABEL_36;
    v27 = (unsigned __int16 *)&v19[-1];
    v28 = v19[-1];
    v29.i64[0] = 0x22002200220022;
    v29.i64[1] = 0x22002200220022;
    v30 = (int8x16_t)vceqq_s16(v28, v29);
    v31.i64[0] = 0x5C005C005C005CLL;
    v31.i64[1] = 0x5C005C005C005CLL;
    v32.i64[0] = 0x20002000200020;
    v32.i64[1] = 0x20002000200020;
    a2 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v28, v31), (int8x16_t)vcgtq_u16(v32, (uint16x8_t)v28)), v30);
    v30.i16[0] = vmaxvq_u16((uint16x8_t)a2);
    if (!v30.i32[0])
      goto LABEL_36;
  }
  else
  {
    v21 = v11 + 8;
    v22.i64[0] = 0x22002200220022;
    v22.i64[1] = 0x22002200220022;
    v23.i64[0] = 0x5C005C005C005CLL;
    v23.i64[1] = 0x5C005C005C005CLL;
    v24.i64[0] = 0x20002000200020;
    v24.i64[1] = 0x20002000200020;
    while (1)
    {
      v25 = *(int16x8_t *)(v21 - 7);
      v26 = (int8x16_t)vceqq_s16(v25, v22);
      a2 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v25, v23), (int8x16_t)vcgtq_u16(v24, (uint16x8_t)v25)), v26);
      v26.i16[0] = vmaxvq_u16((uint16x8_t)a2);
      if (v26.i32[0])
        break;
      v21 += 8;
      if (v21 >= (unsigned __int16 *)v19)
      {
        v20 = v21 - 7;
        goto LABEL_22;
      }
    }
    v27 = v21 - 7;
  }
  a2 = vornq_s8((int8x16_t)xmmword_199123280, a2);
  a2.i16[0] = vminvq_u16((uint16x8_t)a2);
  v19 = (int16x8_t *)&v27[a2.u8[0]];
LABEL_36:
  *(_QWORD *)(a1 + 48) = v19;
LABEL_37:
  if ((unint64_t)v19 < v10 && v19->u16[0] == (_DWORD)a5)
  {
    *(_BYTE *)(a1 + 25) &= ~1u;
    *(_QWORD *)(a1 + 32) = a4;
    *(_QWORD *)(a1 + 48) = (char *)v19->i64 + 2;
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v19 - a4) >> 1);
    v35 = 4;
LABEL_40:
    *(_BYTE *)(a1 + 24) = v35;
    goto LABEL_29;
  }
  JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(a1 + 16, a1 + 24, a4, a5, a6, a7, a8, a9);
LABEL_29:
  v33 = *(unint64_t **)(*(_QWORD *)a1 + 56);
  if (!*(_BYTE *)(a1 + 88))
  {
    result = JSC::LiteralParser<char16_t>::parseRecursivelyEntry(a1, v33, (__n128)a2, a4, a5, a6, a7, a8, a9);
    goto LABEL_31;
  }
  v175 = JSC::LiteralParser<char16_t>::parse((uint64_t *)a1, (uint64_t)v33, 3uLL, a5, a6, a7, a8, a9);
  if (*(_BYTE *)(a1 + 24) == 17)
  {
    v73 = *(unsigned __int16 **)(a1 + 48);
    v72 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v73 >= v72)
    {
      v75 = 0;
    }
    else
    {
      do
      {
        v74 = *v73 <= 0xFFu && JSC::tokenTypesOfLatin1Characters[*v73] == 19;
        v75 = !v74;
        if (!v74)
          break;
        *(_QWORD *)(a1 + 48) = ++v73;
      }
      while ((unint64_t)v73 < v72);
    }
    if (v73 == (unsigned __int16 *)v72)
    {
      *v15 = 14;
      goto LABEL_110;
    }
    *v15 = 18;
    v76 = *v73;
    if (v76 > 0xFF)
      goto LABEL_221;
    v77 = JSC::tokenTypesOfLatin1Characters[v76];
    if (v77 <= 4)
    {
      if (v77 == 4)
      {
        v78 = *(unsigned __int8 *)(a1 + 40);
        if ((_DWORD)v76 != 39)
        {
          v79 = (unint64_t)(v73 + 1);
          *(_QWORD *)(a1 + 48) = v73 + 1;
          if (!v78)
          {
            v80 = v72 - v79;
            if ((uint64_t)(v72 - v79) > -2)
            {
              v81 = (int16x8_t *)((char *)v73 + (v80 & 0xFFFFFFFFFFFFFFFELL) + 2);
              if ((unint64_t)v80 <= 0xE)
              {
                if (v72 != v79)
                {
                  v172 = 2 * (v80 >> 1);
                  v173 = (int16x8_t *)v79;
                  while (1)
                  {
                    v174 = v173->u16[0];
                    if (v174 <= 0xFF && !JSC::safeStringLatin1CharactersInStrictJSON[v174])
                      break;
                    v173 = (int16x8_t *)((char *)v173 + 2);
                    v172 -= 2;
                    if (!v172)
                      goto LABEL_113;
                  }
                  v81 = v173;
                }
                goto LABEL_113;
              }
              v82 = v73 + 1;
              if (v80 < 15)
              {
LABEL_103:
                if (v82 >= (unsigned __int16 *)v81)
                  goto LABEL_113;
                v90 = (unsigned __int16 *)&v81[-1];
                v91 = v81[-1];
                v92.i64[0] = 0x22002200220022;
                v92.i64[1] = 0x22002200220022;
                v93 = (int8x16_t)vceqq_s16(v91, v92);
                v94.i64[0] = 0x5C005C005C005CLL;
                v94.i64[1] = 0x5C005C005C005CLL;
                v95.i64[0] = 0x20002000200020;
                v95.i64[1] = 0x20002000200020;
                v89 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v91, v94), (int8x16_t)vcgtq_u16(v95, (uint16x8_t)v91)), v93);
                v93.i16[0] = vmaxvq_u16((uint16x8_t)v89);
                if (!v93.i32[0])
                  goto LABEL_113;
              }
              else
              {
                v83 = v73 + 8;
                v84.i64[0] = 0x22002200220022;
                v84.i64[1] = 0x22002200220022;
                v85.i64[0] = 0x5C005C005C005CLL;
                v85.i64[1] = 0x5C005C005C005CLL;
                v86.i64[0] = 0x20002000200020;
                v86.i64[1] = 0x20002000200020;
                while (1)
                {
                  v87 = *(int16x8_t *)(v83 - 7);
                  v88 = (int8x16_t)vceqq_s16(v87, v84);
                  v89 = vorrq_s8(vorrq_s8((int8x16_t)vceqq_s16(v87, v85), (int8x16_t)vcgtq_u16(v86, (uint16x8_t)v87)), v88);
                  v88.i16[0] = vmaxvq_u16((uint16x8_t)v89);
                  if (v88.i32[0])
                    break;
                  v83 += 8;
                  if (v83 >= (unsigned __int16 *)v81)
                  {
                    v82 = v83 - 7;
                    goto LABEL_103;
                  }
                }
                v90 = v83 - 7;
              }
              v81 = (int16x8_t *)&v90[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v89))];
LABEL_113:
              *(_QWORD *)(a1 + 48) = v81;
LABEL_114:
              if ((unint64_t)v81 >= v72 || v81->u16[0] != (_DWORD)v76)
              {
                JSC::LiteralParser<char16_t>::Lexer::lexStringSlow(a1 + 16, a1 + 24, v79, v76, v68, v69, v70, v71);
                goto LABEL_110;
              }
              *(_BYTE *)(a1 + 25) &= ~1u;
              *(_QWORD *)(a1 + 32) = v79;
              *(_QWORD *)(a1 + 48) = (char *)v81->i64 + 2;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v81 - v79) >> 1);
              v96 = 4;
              goto LABEL_117;
            }
            goto LABEL_285;
          }
LABEL_254:
          v81 = (int16x8_t *)v79;
          if (v79 < v72)
          {
            while (1)
            {
              v166 = v81->u16[0];
              if (v166 < 0x20)
              {
                if (v166 != 9)
                  goto LABEL_114;
              }
              else if (v166 == (_DWORD)v76 || v166 > 0xFF || v166 == 92)
              {
                goto LABEL_114;
              }
              v81 = (int16x8_t *)((char *)v81 + 2);
              *(_QWORD *)(a1 + 48) = v81;
              if ((unint64_t)v81 >= v72)
                goto LABEL_114;
            }
          }
          goto LABEL_114;
        }
        if (*(_BYTE *)(a1 + 40))
        {
          v79 = (unint64_t)(v73 + 1);
          *(_QWORD *)(a1 + 48) = v73 + 1;
          goto LABEL_254;
        }
        v158 = WTF::fastCompactMalloc((WTF *)0x20);
        v159 = (WTF::StringImpl *)v158;
        v160 = 0x2900000002;
        v161 = "Single quotes (') are not allowed in JSON";
LABEL_231:
        *(_QWORD *)v158 = v160;
        *(_QWORD *)(v158 + 8) = v161;
        *(_DWORD *)(v158 + 16) = 4;
        v133 = *v14;
        *v14 = v159;
        if (!v133)
          goto LABEL_110;
        goto LABEL_227;
      }
      goto LABEL_109;
    }
    if (v77 != 5)
    {
      if (v77 != 6)
      {
        if (v77 - 18 >= 2)
        {
LABEL_109:
          *(_BYTE *)(a1 + 24) = v77;
          *(_QWORD *)(a1 + 48) = v73 + 1;
          goto LABEL_110;
        }
LABEL_221:
        WTF::makeString<WTF::ASCIILiteral,std::span<char16_t const,18446744073709551615ul>,char>((int8x16_t *)"Unrecognized token '", 21, v73, 1uLL, 39, &v176);
        v132 = v176;
        v176 = 0;
        v133 = *v14;
        *v14 = v132;
        if (!v133)
          goto LABEL_110;
        v134 = *(_DWORD *)v133 - 2;
        if (*(_DWORD *)v133 != 2)
        {
LABEL_223:
          *(_DWORD *)v133 = v134;
          goto LABEL_110;
        }
        WTF::StringImpl::~StringImpl(v133, v125, v126, v127, v128, v129, v130, v131);
        WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
        v133 = v176;
        v176 = 0;
        if (!v133)
          goto LABEL_110;
LABEL_227:
        v134 = *(_DWORD *)v133 - 2;
        if (*(_DWORD *)v133 == 2)
        {
          WTF::StringImpl::~StringImpl(v133, v143, v144, v145, v146, v147, v148, v149);
          WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
          goto LABEL_110;
        }
        goto LABEL_223;
      }
      v97 = v75 ^ 1;
      if ((_DWORD)v76 != 45)
        v97 = 1;
      if ((v97 & 1) != 0)
      {
        v98 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 48) = v73 + 1;
        v98 = 1;
      }
      v99 = &v73[v98];
      if ((unint64_t)v99 < v72)
      {
        v100 = *v99;
        if (v100 == 48)
        {
          v103 = v98 + 1;
LABEL_128:
          v104 = &v73[v103];
          *(_QWORD *)(a1 + 48) = v104;
          if ((unint64_t)v104 < v72)
          {
            v105 = *v104;
            if (v105 != 101 && v105 != 69)
            {
              if (v105 == 46)
              {
                v167 = v104 + 1;
                *(_QWORD *)(a1 + 48) = v167;
                if ((unint64_t)v167 >= v72 || *v167 - 48 > 9)
                {
                  v158 = WTF::fastCompactMalloc((WTF *)0x20);
                  v159 = (WTF::StringImpl *)v158;
                  v160 = 0x2200000002;
                  v161 = "Invalid digits after decimal point";
                  goto LABEL_231;
                }
                v168 = (unint64_t)&v73[v103 + 2];
                do
                {
                  v104 = (unsigned __int16 *)v168;
                  if (v168 >= v72)
                    break;
                  v168 += 2;
                }
                while (*v104 - 48 < 0xA);
                *(_QWORD *)(a1 + 48) = v104;
              }
              else if (v103 <= 9)
              {
                *v15 = 6;
                if ((_DWORD)v76 == 45)
                {
                  if (v103 < 2)
                    goto LABEL_300;
                  ++v73;
                }
                v106 = 0;
                do
                {
                  v107 = *v73++;
                  v106 = v107 + 10 * v106 - 48;
                }
                while (v73 < v104);
                if ((_DWORD)v76 != 45)
                  goto LABEL_137;
                if (v106)
                {
                  v106 = -v106;
LABEL_137:
                  v108 = (double)v106;
LABEL_138:
                  *(double *)(a1 + 32) = v108;
                  goto LABEL_110;
                }
LABEL_300:
                *(_QWORD *)(a1 + 32) = 0x8000000000000000;
                goto LABEL_110;
              }
            }
          }
          if ((unint64_t)v104 < v72 && (*v104 | 0x20) == 0x65)
          {
            v169 = v104 + 1;
            *(_QWORD *)(a1 + 48) = v104 + 1;
            if ((unint64_t)(v104 + 1) < v72)
            {
              v170 = *v169;
              if (v170 == 45 || v170 == 43)
              {
                v169 = v104 + 2;
                *(_QWORD *)(a1 + 48) = v104 + 2;
              }
            }
            if ((unint64_t)v169 >= v72 || *v169 - 48 > 9)
              goto LABEL_286;
            v171 = v169 + 1;
            do
            {
              v104 = v171;
              if ((unint64_t)v171 >= v72)
                break;
              ++v171;
            }
            while (*v104 - 48 < 0xA);
            *(_QWORD *)(a1 + 48) = v104;
          }
          *v15 = 6;
          v176 = 0;
          if ((char *)v104 - (char *)v73 > -2)
          {
            v108 = WTF::parseDouble(v73, v104 - v73, &v176);
            goto LABEL_138;
          }
LABEL_285:
          __break(1u);
LABEL_286:
          v158 = WTF::fastCompactMalloc((WTF *)0x20);
          v159 = (WTF::StringImpl *)v158;
          v160 = 0x5D00000002;
          v161 = "Exponent symbols should be followed by an optional '+' or '-' and then by at least one number";
          goto LABEL_231;
        }
        if ((v100 - 49) <= 8)
        {
          v101 = v98 + 1;
          v102 = 2 * v98 + 2;
          do
          {
            v103 = v101;
            if ((unint64_t)v73 + v102 >= v72)
              break;
            ++v101;
            v102 += 2;
          }
          while (v73[v103] - 48 < 0xA);
          goto LABEL_128;
        }
      }
      v158 = WTF::fastCompactMalloc((WTF *)0x20);
      v159 = (WTF::StringImpl *)v158;
      v160 = 0xE00000002;
      v161 = "Invalid number";
      goto LABEL_231;
    }
    if ((_DWORD)v76 == 102)
    {
      if ((uint64_t)(v72 - (_QWORD)v73) >= 9 && *(_DWORD *)(v73 + 1) == 7077985 && *(_DWORD *)(v73 + 3) == 6619251)
      {
        *(_QWORD *)(a1 + 48) = v73 + 5;
        v96 = 12;
LABEL_117:
        *(_BYTE *)(a1 + 24) = v96;
        goto LABEL_110;
      }
    }
    else if ((_DWORD)v76 == 116)
    {
      if ((uint64_t)(v72 - (_QWORD)v73) >= 7 && *(_DWORD *)(v73 + 1) == 7667826 && v73[3] == 101)
      {
        *(_QWORD *)(a1 + 48) = v73 + 4;
        v96 = 11;
        goto LABEL_117;
      }
    }
    else if ((_DWORD)v76 == 110
           && (uint64_t)(v72 - (_QWORD)v73) >= 7
           && *(_DWORD *)(v73 + 1) == 7078005
           && v73[3] == 108)
    {
      *(_QWORD *)(a1 + 48) = v73 + 4;
      v96 = 13;
      goto LABEL_117;
    }
    *(_QWORD *)(a1 + 32) = v73;
    LODWORD(v162) = (_DWORD)v73;
    if ((unint64_t)v73 < v72)
    {
      v162 = v73;
      do
      {
        v163 = *v162;
        v165 = (v163 | 0x20u) - 97 >= 0x1A && (v163 - 48) >= 0xA && (v163 - 8204) >= 2;
        if (v165 && v163 != 95 && v163 != 36)
          break;
        *(_QWORD *)(a1 + 48) = ++v162;
      }
      while ((unint64_t)v162 < v72);
    }
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 28) & 0x80000000 | (((_DWORD)v162 - (_DWORD)v73) >> 1);
    v96 = 5;
    goto LABEL_117;
  }
LABEL_110:
  result = v175;
LABEL_31:
  if (*v15 != 14)
    return 0;
  return result;
}

uint64_t JSC::Interpreter::executeEval(WTF::Thread *inited, uint64_t a2, JSC::JSGlobalObject *a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC::VM *v9;
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  WTF::Thread *v13;
  uint64_t v14;
  unint64_t StatusReg;
  uint64_t casual;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  JSC::JSGlobalObject *v24;
  int v25;
  unsigned int *v26;
  int v27;
  uint64_t (*v28)();
  uint64_t v29;
  rlim_t v30;
  uint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  JSC::JSGlobalObject *v34;
  rlim_t SlowCase;
  int v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t (*v40)();
  rlim_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  BOOL v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  JSC::VM *v52;
  unint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  unint64_t *v58;
  unsigned int v59;
  unsigned int v60;
  _opaque_pthread_t *v61;
  unint64_t v63;
  char *stackaddr_np;
  _opaque_pthread_t *v65;
  unint64_t v66;
  int v67;
  _opaque_pthread_t *v68;
  rlim_t rlim_cur;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  WTF *v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unint64_t v77;
  JSC::JSGlobalObject *v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  JSC::Identifier *v82;
  unint64_t v83;
  unsigned int *v84;
  unint64_t v85;
  JSC::JSGlobalObject *v86;
  unint64_t v87;
  unsigned int *v88;
  JSC::JSGlobalObject *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  BOOL v95;
  char v96;
  int v97;
  unint64_t v98;
  unsigned int *v99;
  unint64_t v100;
  unsigned int *v101;
  int *v102;
  uint64_t v103;
  unsigned int *v104;
  JSC::JSGlobalObject *v105;
  __n128 v106;
  char v107;
  unint64_t v108;
  int v109;
  JSC::VM *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  JSC::WatchpointSet *v122;
  JSC::JSGlobalObject *v123;
  uint64_t v124;
  _BYTE *v125;
  unint64_t v126;
  WTF::StringImpl *v127;
  unint64_t v128;
  unsigned int *v129;
  char v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  int v134;
  JSC::JSGlobalObject *v135;
  unint64_t ErrorForInvalidGlobalFunctionDeclaration;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unsigned int *v143;
  unint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _BOOL4 v156;
  uint64_t v157;
  uint64_t v158;
  JSC::Identifier *v159;
  unint64_t v160;
  unint64_t v161;
  JSC::JSGlobalObject *v162;
  uint64_t v163;
  JSC::JSGlobalObject *v164;
  uint64_t *v165[3];
  JSC::JSGlobalObject *v166;
  JSC::VM *v167;
  JSC::JSGlobalObject *v168;
  JSC::JSGlobalObject *v169;
  JSC::VM *v170;
  rlimit v171;
  unint64_t v172;
  JSC::JSGlobalObject *v173;
  uint64_t v174;
  uint64_t v175;
  JSC::JSGlobalObject *v176;
  uint64_t v177;
  char v178;
  _BYTE v179[16];
  _QWORD v180[2];
  int v181;
  int v182;
  uint64_t v183;

  v164 = a3;
  v9 = (WTF::Thread *)((char *)inited - 90560);
  v170 = (WTF::Thread *)((char *)inited - 90560);
  v10 = *((_QWORD *)inited - 11306);
  if (!*(_BYTE *)(v10 + 6))
  {
LABEL_109:
    __break(0xC471u);
    JUMPOUT(0x1986D270CLL);
  }
  v11 = a4;
  v13 = inited;
  v14 = *(_QWORD *)(v10 + 8);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  casual = *(_QWORD *)(StatusReg + 736);
  if (!casual)
  {
    v54 = atomic_load(&WTF::initialize(void)::onceKey);
    if (v54 != -1)
    {
      v171.rlim_cur = (rlim_t)v165;
      v180[0] = &v171;
      std::__call_once(&WTF::initialize(void)::onceKey, v180, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
    }
    v55 = *(_QWORD *)(StatusReg + 752);
    if (v55)
    {
      v56 = (_BYTE *)(v55 + 9408);
      *(_BYTE *)(v55 + 9408) = 1;
      v57 = *(unsigned int *)(v55 + 9424);
      if ((_DWORD)v57)
      {
        *(_DWORD *)(v55 + 9424) = v57 - *(_DWORD *)(v55 + 9428);
        casual = *(_QWORD *)(v55 + 9416) - v57;
LABEL_70:
        *v56 = 0;
LABEL_71:
        *(_OWORD *)casual = 0u;
        *(_OWORD *)(casual + 16) = 0u;
        *(_QWORD *)(casual + 96) = 0;
        *(_OWORD *)(casual + 64) = 0u;
        *(_OWORD *)(casual + 80) = 0u;
        *(_OWORD *)(casual + 32) = 0u;
        *(_OWORD *)(casual + 48) = 0u;
        *(_DWORD *)casual = 1;
        *(_OWORD *)(casual + 8) = 0u;
        v58 = (unint64_t *)(casual + 8);
        *(_OWORD *)(casual + 24) = 0u;
        do
        {
          v59 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
          v60 = v59 + 1;
        }
        while (__stlxr(v60, (unsigned int *)&WTF::ThreadLike::s_uid));
        *(_DWORD *)(casual + 48) = v60;
        *(_QWORD *)(casual + 52) = 0;
        *(_QWORD *)(casual + 68) = 0;
        *(_QWORD *)(casual + 60) = 0;
        *(_DWORD *)(casual + 76) = 0;
        *(_QWORD *)(casual + 88) = 0;
        *(_QWORD *)(casual + 96) = 0;
        v61 = pthread_self();
        if (__ldaxr(v58))
        {
          __clrex();
        }
        else if (!__stxr(1uLL, v58))
        {
LABEL_76:
          *(_QWORD *)(casual + 40) = v61;
          *(_DWORD *)(casual + 52) = pthread_mach_thread_np(v61);
          v63 = __ldxr(v58);
          if (v63 == 1)
          {
            if (!__stlxr(0, v58))
              goto LABEL_81;
          }
          else
          {
            __clrex();
          }
          WTF::WordLock::unlockSlow((WTF::WordLock *)(casual + 8));
LABEL_81:
          stackaddr_np = *(char **)(casual + 16);
          if (!stackaddr_np)
          {
            v67 = pthread_main_np();
            v68 = pthread_self();
            stackaddr_np = (char *)pthread_get_stackaddr_np(v68);
            if (v67)
            {
              getrlimit(3, &v171);
              if (v171.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
                rlim_cur = 0x800000;
              else
                rlim_cur = v171.rlim_cur;
            }
            else
            {
              rlim_cur = pthread_get_stacksize_np(v68);
            }
            *(_QWORD *)(casual + 16) = stackaddr_np;
            *(_QWORD *)(casual + 24) = &stackaddr_np[-rlim_cur];
          }
          *(_QWORD *)(casual + 80) = stackaddr_np;
          *(_QWORD *)(casual + 56) = casual + 64;
          v65 = pthread_self();
          if (pthread_equal(v65, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
          {
            v66 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
            if (v66 != -1)
            {
              v171.rlim_cur = (rlim_t)v165;
              v180[0] = &v171;
              std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, v180, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
            }
            *(_QWORD *)(casual + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
          }
          *(_QWORD *)(StatusReg + 736) = casual;
          inited = (WTF::Thread *)pthread_key_init_np();
          goto LABEL_3;
        }
        WTF::WordLock::lockSlow((WTF::WordLock *)(casual + 8));
        goto LABEL_76;
      }
      v70 = *(_QWORD *)(v55 + 9448);
      v71 = *(_QWORD *)(v55 + 9432);
      if (v70)
      {
LABEL_97:
        v72 = __clz(v70);
        *(_QWORD *)(v55 + 9448) = v70 & ~(0x8000000000000000 >> v72);
        casual = v71 + 16 * v72;
        goto LABEL_70;
      }
      if (*(_BYTE *)(v55 + 9413) == 6)
      {
        v116 = *(_DWORD *)(v55 + 9444);
        v117 = *(unsigned int *)(v55 + 9440);
        if (v117 < v116)
        {
          *(_QWORD *)&v56[8 * v117 + 56] = 0;
          v118 = (unint64_t *)(v55 + 8 * v117 + 9472);
          v119 = v116 - 1 - v117;
          while (v119)
          {
            v71 += 1024;
            v121 = *v118++;
            v120 = v121;
            LODWORD(v117) = v117 + 1;
            --v119;
            if (v121)
            {
              v70 = __rbit64(v120);
              *(_DWORD *)(v55 + 9440) = v117;
              *(_QWORD *)(v55 + 9432) = v71;
              goto LABEL_97;
            }
          }
          *(_DWORD *)(v55 + 9440) = v116;
        }
      }
      *v56 = 0;
    }
    casual = bmalloc_allocate_casual(104, 1);
    goto LABEL_71;
  }
LABEL_3:
  if (v14 != casual)
    goto LABEL_109;
  v168 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28);
  v169 = v168;
  v167 = v9;
  if (*((_QWORD *)v13 + 1))
    goto LABEL_5;
  *((_QWORD *)v13 + 1) = &v167;
  v73 = *(WTF **)(StatusReg + 736);
  if (!v73)
  {
    inited = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(inited);
    v73 = inited;
  }
  if ((*((_BYTE *)v73 + 5) & 0x20) == 0)
  {
    *((_BYTE *)v73 + 5) |= 0x20u;
    if (BYTE2(dword_1ECF4C6C3))
      JSC::Wasm::startTrackingCurrentThread(inited, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::registerThreadForMachExceptionHandling(v73, (WTF::Thread *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  inited = v167;
  if (!*((_BYTE *)v167 + 56))
  {
    v74 = *((_QWORD *)v167 + 11624);
    v75 = atomic_load(&JSC::lastTimeZoneID);
    if (v74 == v75)
      goto LABEL_5;
    inited = v167;
  }
  JSC::VM::executeEntryScopeServicesOnEntry(inited, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
LABEL_5:
  *((_QWORD *)v13 - 11316) = 0;
  if ((unint64_t)&v157 < *((_QWORD *)v13 - 11319))
  {
    v29 = JSC::throwStackOverflowError((unint64_t)v169, &v170, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_61;
  }
  if (*((_DWORD *)v13 - 22639))
  {
    JSC::Interpreter::checkVMEntryPermission(inited);
    v29 = 10;
    goto LABEL_61;
  }
  v17 = *(_QWORD **)(a2 + 80);
  v18 = (unsigned int *)v17[27];
  if (v18)
    v19 = *v18;
  else
    v19 = 0;
  v20 = (unsigned int *)v17[16];
  if (v20)
    v21 = *v20;
  else
    v21 = 0;
  v22 = (unsigned int *)v17[28];
  if (v22)
    v23 = *v22;
  else
    v23 = 0;
  v166 = 0;
  v24 = v11;
  if (v19 | v21 && (v24 = v11, (*(_BYTE *)(a2 + 68) & 1) != 0))
  {
    v110 = (JSC::VM *)JSC::JSGlobalObject::strictEvalActivationStructure((unint64_t)v169);
    v11 = (JSC::JSGlobalObject *)JSC::StrictEvalActivation::create((uint64_t)v9, v110, (uint64_t)v11, v111, v112, v113, v114, v115);
    v166 = v11;
  }
  else
  {
    while (1)
    {
      v25 = *((unsigned __int8 *)v24 + 5);
      if (v25 == 51 || (v25 - 53) <= 1 && (*(_BYTE *)(*((_QWORD *)v24 + 3) + 21) & 0x1C) == 0)
        break;
      v24 = (JSC::JSGlobalObject *)*((_QWORD *)v24 + 2);
      if (!v24)
      {
        __break(0xC471u);
        JUMPOUT(0x1986D27FCLL);
      }
    }
    v166 = v24;
  }
  v26 = (unsigned int *)((char *)v13 - 90480);
  v27 = *((_DWORD *)v13 - 22620);
  if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
  {
    if ((*v26 & 0x27) != 0 && (*v26 & 0x20) == 0)
      JSC::VMTraps::handleTraps((WTF::Thread *)((char *)v13 - 90496), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*((_QWORD *)v13 - 11318))
    {
LABEL_115:
      v29 = *((_QWORD *)v170 + 2);
      goto LABEL_61;
    }
  }
  v171.rlim_cur = 0;
  if (*(_BYTE *)(a2 + 5) == 8
    || (*(_QWORD *)(a2 + 8)
      ? (v28 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
      : (v28 = 0),
        v28))
  {
    v171.rlim_cur = *(_QWORD *)(a2 + 72);
  }
  else
  {
    JSC::ScriptExecutable::prepareForExecutionImpl(a2, v9, 0, v11, 0, &v171);
  }
  v29 = *((_QWORD *)v170 + 2);
  if (v29)
    goto LABEL_61;
  v30 = v171.rlim_cur;
  v31 = *(_QWORD *)(v171.rlim_cur + 56);
  a3 = v166;
  v32 = 16 * (*(_DWORD *)v166 & 0xFFFFFFFE);
  if ((*(_DWORD *)(v32 + 0x10) & 3) == 2)
  {
    v163 = *(_QWORD *)(v171.rlim_cur + 56);
    JSC::Structure::flattenDictionaryStructure(v32, v9, v166, (uint64_t)a4, a5, a6, a7, a8);
    v31 = v163;
  }
  if (v23)
    v33 = 1;
  else
    v33 = (v19 | v21) != 0;
  if (!v33)
    goto LABEL_32;
  v163 = v31;
  v78 = v166;
  if ((*(_BYTE *)((16 * *(unsigned int *)v166) | 0x10) & 3) == 0)
  {
    JSC::JSObject::convertToDictionary(v166, v9, a9, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v78 = v166;
  }
  if (*((_QWORD *)v78 + 2))
  {
    if ((*(_BYTE *)(a2 + 68) & 1) == 0)
    {
      v122 = *(JSC::WatchpointSet **)(*(_QWORD *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0x28) + 2056);
      if (*((_BYTE *)v122 + 4) == 1)
        JSC::WatchpointSet::fireAllSlow(v122, v9, "Executed eval, fired VarInjection watchpoint", (uint64_t)a4, a5, a6, a7, a8, a9);
    }
  }
  if ((*(_BYTE *)(a2 + 68) & 1) != 0)
  {
LABEL_142:
    v86 = v166;
    if (*((_BYTE *)v166 + 5) != 51)
    {
LABEL_186:
      LODWORD(v162) = 0;
LABEL_159:
      v165[0] = (uint64_t *)&v166;
      v165[1] = (uint64_t *)&v169;
      v165[2] = (uint64_t *)&v170;
      if ((*(_BYTE *)(a2 + 68) & 1) == 0 && v23)
      {
        v131 = 0;
        v160 = v23;
        v132 = 2;
        do
        {
          v133 = *(unsigned int **)(v163 + 224);
          if (v131 >= *v133)
          {
            __break(0xC471u);
            JUMPOUT(0x1986D3124);
          }
          v159 = (JSC::Identifier *)&v133[v132];
          v161 = JSC::JSScope::resolveScopeForHoistingFuncDeclInEval(v169, v11, (JSC::JSScope *)&v133[v132], a4, a5, a6, a7, a8);
          if (*((_DWORD *)v170 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v170, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
              goto LABEL_115;
          }
          if (v161 != 10)
          {
            if ((_DWORD)v162)
            {
              JSC::JSGlobalObject::canDeclareGlobalVar(v166, v159, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              if (v134)
                JSC::JSGlobalObject::createGlobalVarBinding<(JSC::BindingCreationContext)1>((uint64_t)v166, (unint64_t *)v159, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            }
            else
            {
              JSC::Interpreter::executeEval(JSC::EvalExecutable *,JSC::JSValue,JSC::JSScope *)::$_1::operator()(v165, (unint64_t *)v159, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
          }
          ++v131;
          v132 += 2;
        }
        while (v160 != v131);
      }
      if (v21)
      {
        if ((v162 & 1) != 0)
        {
          v98 = 0;
          while (1)
          {
            v99 = *(unsigned int **)(v30 + 176);
            if (v98 >= *v99)
              break;
            JSC::JSGlobalObject::createGlobalFunctionBinding<(JSC::BindingCreationContext)1>((uint64_t)v166, (unint64_t *)(*(_QWORD *)(*(_QWORD *)&v99[2 * v98++ + 2] + 88) + 72), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            if (v21 == v98)
              goto LABEL_166;
          }
        }
        else
        {
          v142 = 0;
          while (1)
          {
            v143 = *(unsigned int **)(v30 + 176);
            if (v142 >= *v143)
              break;
            JSC::Interpreter::executeEval(JSC::EvalExecutable *,JSC::JSValue,JSC::JSScope *)::$_1::operator()(v165, (unint64_t *)(*(_QWORD *)(*(_QWORD *)&v143[2 * v142++ + 2] + 88) + 72), (uint64_t)a3, a4, a5, a6, a7, a8);
            if (v21 == v142)
              goto LABEL_166;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1986D3058);
      }
LABEL_166:
      if (v19)
      {
        v161 = v19;
        if ((v162 & 1) != 0)
        {
          v100 = 0;
          v162 = (JSC::JSGlobalObject *)v179;
          while (1)
          {
            v101 = *(unsigned int **)(v163 + 216);
            if (v100 >= *v101)
              break;
            v102 = (int *)v166;
            v103 = *((_QWORD *)v166 + 7);
            v104 = &v101[2 * v100];
            v172 = 0xFFFFFFFF00000000;
            v173 = v166;
            v174 = 0;
            v175 = 0;
            LODWORD(v176) = 0x20000;
            BYTE4(v176) = 0;
            LOBYTE(v177) = 0;
            v178 = 0;
            v105 = v162;
            *(_QWORD *)v162 = 0;
            *((_QWORD *)v105 + 1) = 0;
            JSC::JSGlobalObject::getOwnPropertySlot((uint64_t)v102, (uint64_t)v102, *((_QWORD *)v104 + 1), (uint64_t)&v171, a5, a6, a7, a8);
            if ((v107 & 1) == 0)
            {
              v108 = *((_QWORD *)v104 + 1);
              v180[0] = 0;
              v180[1] = v102;
              v181 = -1;
              v106.n128_u64[0] = 0x100000001000000;
              v182 = 0x1000000;
              v183 = 0;
              JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v102, v103, v108, 10, 0, (uint64_t)v180, a7, a8, v106);
            }
            if (v178)
            {
              v109 = *(_DWORD *)(v177 + 4);
              if (!v109)
              {
                __break(0xC471u);
                JUMPOUT(0x1986D30A8);
              }
              *(_DWORD *)(v177 + 4) = v109 - 1;
            }
            if (v161 == ++v100)
              goto LABEL_32;
          }
        }
        else
        {
          v144 = 0;
          v145 = 2;
          while (1)
          {
            v146 = *(unsigned int **)(v163 + 216);
            if (v144 >= *v146)
              break;
            JSC::Interpreter::executeEval(JSC::EvalExecutable *,JSC::JSValue,JSC::JSScope *)::$_1::operator()(v165, (unint64_t *)&v146[v145], (uint64_t)a3, a4, a5, a6, a7, a8);
            ++v144;
            v145 += 2;
            if (v161 == v144)
              goto LABEL_32;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1986D2FD4);
      }
LABEL_32:
      v34 = v169;
      if (v11 == *((JSC::JSGlobalObject **)v169 + 9))
      {
        SlowCase = *((_QWORD *)v169 + 11);
LABEL_40:
        v38 = *v26;
        if ((*v26 & 0x20) == 0)
        {
          do
            v39 = __ldaxr(v26);
          while (__stlxr(v39 | 0x20, v26));
        }
        v180[0] = 0;
        if (*(_BYTE *)(a2 + 5) == 8
          || (*(_QWORD *)(a2 + 8)
            ? (v40 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
            : (v40 = 0),
              v40))
        {
          v180[0] = *(_QWORD *)(a2 + 72);
        }
        else
        {
          JSC::ScriptExecutable::prepareForExecutionImpl(a2, v9, 0, v11, 0, v180);
        }
        v29 = *((_QWORD *)v170 + 2);
        if (v29)
        {
          if ((v38 & 0x20) == 0)
          {
            do
              v76 = __ldaxr(v26);
            while (__stlxr(v76 & 0xFFFFFFDF, v26));
          }
        }
        else
        {
          v41 = v180[0];
          v42 = *(_QWORD *)(a2 + 8);
          v43 = (unsigned int *)(v42 + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 + 1, v43));
          v171.rlim_cur = v41;
          v171.rlim_max = SlowCase;
          v175 = 0;
          v176 = v169;
          v45 = 1;
          LODWORD(v172) = 1;
          if (v41)
          {
            v46 = *(_DWORD *)(v41 + 28);
            v47 = v46 >= 2;
            v48 = v46 | 1;
            if (v47)
              v45 = v48;
            else
              v45 = 1;
          }
          LODWORD(v174) = v45;
          HIDWORD(v172) = 0;
          v173 = v164;
          if ((v38 & 0x20) == 0)
          {
            do
              v49 = __ldaxr(v26);
            while (__stlxr(v49 & 0xFFFFFFDF, v26));
          }
          v29 = vmEntryToJavaScript(*(_QWORD *)(v42 + 16), v9, (uint64_t)&v171, (uint64_t)a4, a5, a6, a7, a8);
          do
          {
            v50 = __ldaxr(v43);
            v51 = v50 - 1;
          }
          while (__stlxr(v51, v43));
          if (!v51)
          {
            atomic_store(1u, (unsigned int *)(v42 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 32))(v42);
          }
        }
        goto LABEL_61;
      }
      SlowCase = *((_QWORD *)v13 - 6600);
      if (SlowCase >= *((_QWORD *)v13 - 6599))
      {
        SlowCase = *((_QWORD *)v13 - 6598);
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM((WTF::Thread *)((char *)v13 - 90560), (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)v13 - 52824, (char *)v13 - 90368, 32, 0, 0);
LABEL_35:
          *(_DWORD *)SlowCase = 0;
          v36 = *((_DWORD *)v34 + 234);
          if (v36)
            v37 = 16 * (v36 & 0xFFFFFFFE);
          else
            v37 = 0;
          JSC::JSCallee::JSCallee((JSC::JSCell *)SlowCase, (uint64_t)v9, (uint64_t)v11, v37);
          if (*((_BYTE *)v13 - 89805))
            __dmb(0xAu);
          goto LABEL_40;
        }
        v77 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v13 - 6597);
        *((_QWORD *)v13 - 6599) = SlowCase + HIDWORD(v77);
        *((_QWORD *)v13 - 6598) = SlowCase + (int)v77;
      }
      *((_QWORD *)v13 - 6600) = SlowCase + 32;
      goto LABEL_35;
    }
    if (!v21)
      goto LABEL_157;
    v87 = 0;
    v161 = (unint64_t)&v174;
    v159 = (JSC::Identifier *)v21;
    v160 = (unint64_t)v179;
    while (1)
    {
      v88 = *(unsigned int **)(v30 + 176);
      if (v87 >= *v88)
      {
        __break(0xC471u);
        JUMPOUT(0x1986D3078);
      }
      v89 = v166;
      v158 = *(_QWORD *)&v88[2 * v87 + 2];
      v90 = *(_QWORD *)(v158 + 88);
      v172 = 0xFFFFFFFF00000000;
      v173 = v166;
      v91 = v161;
      *(_QWORD *)v161 = 0;
      *(_QWORD *)(v91 + 8) = 0;
      *(_WORD *)(v91 + 16) = 0;
      WORD1(v176) = 2;
      BYTE4(v176) = 0;
      LOBYTE(v177) = 0;
      v178 = 0;
      v92 = v160;
      *(_QWORD *)v160 = 0;
      *(_QWORD *)(v92 + 8) = 0;
      v93 = *(_QWORD *)(v90 + 72);
      v162 = v89;
      JSC::JSGlobalObject::getOwnPropertySlot((uint64_t)v89, (uint64_t)v89, v93, (uint64_t)&v171, a5, a6, a7, a8);
      if ((v94 & 1) != 0)
      {
        if ((v172 & 8) == 0)
        {
          v96 = 1;
          goto LABEL_151;
        }
        v95 = (v172 & 0x36) == 0;
      }
      else
      {
        v95 = (*(_BYTE *)((16 * *(unsigned int *)v162) | 0x12) & 0x10) == 0;
      }
      v96 = v95;
LABEL_151:
      if (v178)
      {
        v97 = *(_DWORD *)(v177 + 4);
        if (!v97)
        {
          __break(0xC471u);
          JUMPOUT(0x1986D30C8);
        }
        *(_DWORD *)(v177 + 4) = v97 - 1;
      }
      if ((v96 & 1) == 0)
      {
        v135 = v169;
        ErrorForInvalidGlobalFunctionDeclaration = JSC::createErrorForInvalidGlobalFunctionDeclaration(v169, (WTF::StringImpl **)(*(_QWORD *)(v158 + 88) + 72), a3);
        goto LABEL_221;
      }
      if (v159 == (JSC::Identifier *)++v87)
      {
        v86 = v166;
        goto LABEL_157;
      }
    }
  }
  if (v19)
  {
    v79 = 0;
    v161 = v19;
    v80 = 8;
    do
    {
      v81 = *(unsigned int **)(v163 + 216);
      if (v79 >= *v81)
      {
        __break(0xC471u);
        JUMPOUT(0x1986D2FA0);
      }
      v162 = (JSC::JSGlobalObject *)v80;
      v160 = (unint64_t)v81;
      v82 = (JSC::Identifier *)JSC::JSScope::resolveScopeForHoistingFuncDeclInEval(v169, v11, (JSC::JSScope *)((char *)v81 + v80), a4, a5, a6, a7, a8);
      if (*((_DWORD *)v170 + 20))
      {
        v159 = v82;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v170, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v82 = v159;
        if (hasExceptionsAfterHandlingTraps)
          goto LABEL_115;
      }
      if (v82 == (JSC::Identifier *)10)
      {
        v123 = v169;
        v124 = *(_QWORD *)((char *)v162 + v160);
        if (v124)
        {
LABEL_198:
          v125 = *(_BYTE **)(v124 + 8);
          v126 = *(unsigned int *)(v124 + 4) | ((unint64_t)((*(_DWORD *)(v124 + 16) >> 2) & 1) << 32);
        }
        else
        {
LABEL_203:
          v125 = 0;
          v126 = 0x100000000;
        }
        WTF::makeString<WTF::ASCIILiteral,WTF::StringView,char>((int8x16_t *)"Can't create duplicate variable in eval: '", 43, v125, v126, 39, (int **)&v171);
        v29 = JSC::throwSyntaxError(v123, &v170, (WTF::StringImpl **)&v171);
        v127 = (WTF::StringImpl *)v171.rlim_cur;
        v171.rlim_cur = 0;
        if (v127)
        {
          if (*(_DWORD *)v127 == 2)
          {
            WTF::StringImpl::~StringImpl(v127, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
          }
          else
          {
            *(_DWORD *)v127 -= 2;
          }
        }
        goto LABEL_61;
      }
      ++v79;
      v80 = (uint64_t)v162 + 8;
    }
    while (v161 != v79);
  }
  if (v21)
  {
    v83 = 0;
    v162 = (JSC::JSGlobalObject *)v21;
    while (1)
    {
      v84 = *(unsigned int **)(v30 + 176);
      if (v83 >= *v84)
      {
        __break(0xC471u);
        JUMPOUT(0x1986D3024);
      }
      v161 = *(_QWORD *)&v84[2 * v83 + 2];
      v85 = JSC::JSScope::resolveScopeForHoistingFuncDeclInEval(v169, v11, (JSC::JSScope *)(*(_QWORD *)(v161 + 88) + 72), a4, a5, a6, a7, a8);
      if (*((_DWORD *)v170 + 20))
      {
        v160 = v85;
        v156 = JSC::VM::hasExceptionsAfterHandlingTraps(v170, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v85 = v160;
        if (v156)
          goto LABEL_115;
      }
      if (v85 == 10)
      {
        v123 = v169;
        v124 = *(_QWORD *)(*(_QWORD *)(v161 + 88) + 72);
        if (v124)
          goto LABEL_198;
        goto LABEL_203;
      }
      if (v162 == (JSC::JSGlobalObject *)++v83)
        goto LABEL_142;
    }
  }
  v86 = v166;
  if (*((_BYTE *)v166 + 5) != 51)
    goto LABEL_186;
LABEL_157:
  if ((*(_BYTE *)((16 * *(unsigned int *)v86) | 0x12) & 0x10) == 0 || !v19)
  {
    LODWORD(v162) = 1;
    goto LABEL_159;
  }
  v128 = 0;
  v160 = v19;
  v161 = 8;
  while (1)
  {
    v129 = *(unsigned int **)(v163 + 216);
    if (v128 >= *v129)
    {
      __break(0xC471u);
      JUMPOUT(0x1986D30F8);
    }
    v162 = (JSC::JSGlobalObject *)((char *)v129 + v161);
    JSC::JSGlobalObject::canDeclareGlobalVar(v166, (const JSC::Identifier *)((char *)v129 + v161), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if ((v130 & 1) == 0)
      break;
    ++v128;
    v161 += 8;
    LODWORD(v162) = 1;
    if (v160 == v128)
      goto LABEL_159;
  }
  v135 = v169;
  ErrorForInvalidGlobalFunctionDeclaration = JSC::createErrorForInvalidGlobalVarDeclaration(v169, (WTF::StringImpl **)v162, a3);
LABEL_221:
  v29 = JSC::VM::throwException(v170, v135, ErrorForInvalidGlobalFunctionDeclaration, v137, v138, v139, v140, v141);
LABEL_61:
  v52 = v167;
  if (*((JSC::VM ***)v167 + 11321) == &v167)
  {
    *((_QWORD *)v167 + 11321) = 0;
    if (*((_BYTE *)v52 + 56))
      JSC::VM::executeEntryScopeServicesOnExit(v52, (void *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  *((_BYTE *)v13 + 2560) = 1;
  return v29;
}

JSC::JSObject *JSC::ScopedArguments::length(JSC::ScopedArguments *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSObject *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  JSC::JSObject *v24;
  JSC::JSObject *v25;

  if (!*((_BYTE *)this + 24))
    return (JSC::JSObject *)*((unsigned int *)this + 7);
  v10 = *((_QWORD *)a2 + 7);
  result = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 1768), a4, a5, a6, a7, a8);
  v25 = result;
  if (*(_DWORD *)(v10 + 80))
  {
    v24 = result;
    v23 = *(_DWORD *)(v10 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v11, v12, v13, v14, v15, v16);
    result = v24;
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)result < 0xFFFE000000000000)
  {
    v18 = (unint64_t)result - 0x2000000000000;
    if ((unint64_t)result - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase(&v25, a2, v11, v12, v13, v14, v15, v16, v17);
      v18 = v22;
    }
    v19 = (v18 >> 52) & 0x7FF;
    if ((v19 - 1023) > 0x53)
      return 0;
    v20 = v18 >> (51 - (v18 >> 52));
    if (v19 > 0x433)
      LODWORD(v20) = v18 << ((v18 >> 52) - 51);
    if (v19 >= 0x41F)
      v21 = v20;
    else
      v21 = (((1 << ((v18 >> 52) + 1)) - 1) & v20) + (1 << ((v18 >> 52) + 1));
    if ((v18 & 0x8000000000000000) == 0)
      return (JSC::JSObject *)v21;
    else
      return (JSC::JSObject *)-v21;
  }
  return result;
}

uint64_t JSC::sizeFrameForVarargs(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  JSC::JSObject *v19;
  uint64_t v20;
  unint64_t InvalidFunctionApplyParameterError;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  JSC::JSObject *v30;
  int8x16_t v31;
  JSC::JSObject *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  int v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  int8x16_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v49;
  int8x16_t v50;
  int v51;
  JSC::VM *v52;
  JSC::VM *v53;
  JSC::JSObject *v54;

  v9 = a5;
  v13 = *((_QWORD *)a1 + 7);
  v52 = (JSC::VM *)a3;
  v53 = (JSC::VM *)v13;
  if ((a4 & 0xFFFE000000000002) != 0)
  {
    if ((a4 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_43:
      v17 = 0;
      goto LABEL_11;
    }
LABEL_37:
    InvalidFunctionApplyParameterError = JSC::createInvalidFunctionApplyParameterError((uint64_t)a1, a4);
    JSC::VM::throwException((JSC::VM *)v13, a1, InvalidFunctionApplyParameterError, v22, v23, v24, v25, v26);
    goto LABEL_43;
  }
  v14 = a6;
  v15 = *(unsigned __int8 *)(a4 + 5);
  if (v15 <= 0x20)
  {
    if (v15 == 19)
    {
      LODWORD(v16) = *(_DWORD *)(a4 + 8);
      goto LABEL_5;
    }
    if (v15 - 2 >= 3)
    {
LABEL_20:
      if (v15 <= 0x16)
      {
        __break(0xC471u);
        JUMPOUT(0x1986D34A4);
      }
      if (v15 == 36)
      {
        if ((*(_BYTE *)(a4 + 4) & 0xE) == 0)
        {
          LODWORD(v16) = 0;
          goto LABEL_5;
        }
        v16 = *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8);
        goto LABEL_24;
      }
      if (v15 != 35)
      {
        if (v15 == 33)
        {
          v33 = *(_QWORD *)(a4 + 40);
          if (v33
            && (!qword_1ECF4C038
             || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
             || (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
          {
            v54 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)a4, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1768), a4, a5, a6, a7, a8);
            if (*(_DWORD *)(v13 + 80)
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v49, a3, a4, a5, a6, a7, a8))
            {
              LODWORD(v16) = 0;
            }
            else
            {
              LODWORD(v16) = JSC::JSValue::toUInt32(&v54, a1, a3, a4, a5, a6, a7, a8, v50);
            }
          }
          else
          {
            LODWORD(v16) = *(_DWORD *)(a4 + 32);
          }
        }
        else
        {
          if (v15 != 34)
          {
            v30 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)a4, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1768), a4, a5, a6, a7, a8);
            v54 = v30;
            if (!*(_DWORD *)(v13 + 80)
              || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v29, a3, a4, a5, a6, a7, a8))
            {
              if ((unint64_t)v30 >= 0xFFFE000000000000)
              {
                v16 = v30 & ~((int)v30 >> 31);
                goto LABEL_24;
              }
              v39 = JSC::JSValue::toIntegerOrInfinity(&v54, a1, a3, a4, a5, a6, a7, a8, v31);
              if (v39 > 0.0)
              {
                if (v39 > 9.00719925e15)
                  v39 = 9.00719925e15;
                v16 = (unint64_t)v39;
                goto LABEL_24;
              }
            }
            goto LABEL_75;
          }
          LODWORD(v16) = JSC::ScopedArguments::length((JSC::ScopedArguments *)a4, a1, a3, a4, a5, a6, a7, a8);
        }
        v16 = v16;
        goto LABEL_24;
      }
      if ((*(_BYTE *)((16 * *(unsigned int *)a4) | 0x12) & 0x20) != 0)
      {
        v54 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)a4, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1768), a4, a5, a6, a7, a8);
        if (*(_DWORD *)(v13 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v38, a3, a4, a5, a6, a7, a8))
        {
LABEL_75:
          v16 = 0;
LABEL_24:
          if (v16 > 0xFFFFFFFE)
            LODWORD(v16) = -1;
          goto LABEL_5;
        }
      }
      else
      {
        v32 = *(JSC::JSObject **)(*(_QWORD *)(a4 + 8) - 16);
        v54 = v32;
        if ((unint64_t)v32 >= 0xFFFE000000000000)
        {
          v16 = v32 & ~((int)v32 >> 31);
          goto LABEL_24;
        }
      }
      v16 = JSC::JSValue::toLength(&v54, a1, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_24;
    }
    goto LABEL_37;
  }
  switch(v15)
  {
    case '#':
      if ((*(_BYTE *)((16 * *(unsigned int *)a4) | 0x12) & 0x20) != 0)
      {
        v35 = JSC::JSObject::get((unsigned int *)a4, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1768), a4, a5, a6, a7, a8);
        v54 = (JSC::JSObject *)v35;
        if (*(_DWORD *)(v13 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v34, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_84;
        }
        if (v35 >= 0xFFFE000000000000)
        {
          LODWORD(v16) = v35 & ~((int)v35 >> 31);
          break;
        }
      }
      else
      {
        v19 = *(JSC::JSObject **)(*(_QWORD *)(a4 + 8) - 16);
        v54 = v19;
        if ((unint64_t)v19 >= 0xFFFE000000000000)
        {
          LODWORD(v16) = v19 & ~((int)v19 >> 31);
          break;
        }
      }
      v36 = JSC::JSValue::toIntegerOrInfinity(&v54, a1, a3, a4, a5, a6, a7, a8, a9);
      if (v36 <= 0.0)
      {
LABEL_84:
        LODWORD(v16) = 0;
        break;
      }
      if (v36 > 9.00719925e15)
        v36 = 9.00719925e15;
      v16 = (unint64_t)v36;
      break;
    case '!':
      v20 = *(_QWORD *)(a4 + 40);
      if (!v20
        || qword_1ECF4C038
        && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
        && !((v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        LODWORD(v16) = *(_DWORD *)(a4 + 32);
        break;
      }
      v16 = JSC::JSObject::get((unsigned int *)a4, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1768), a4, a5, a6, a7, a8);
      v54 = (JSC::JSObject *)v16;
      if (*(_DWORD *)(v13 + 80))
      {
        v47 = v16;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v40, a3, a4, a5, a6, a7, a8);
        v16 = v47;
        if (hasExceptionsAfterHandlingTraps)
          goto LABEL_84;
      }
      if (v16 >= 0xFFFE000000000000)
        break;
      v42 = v16 - 0x2000000000000;
      if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase(&v54, a1, a3, a4, a5, a6, a7, a8, v41);
        v42 = v46;
      }
      v43 = (v42 >> 52) & 0x7FF;
      if ((v43 - 1023) > 0x53)
        goto LABEL_84;
      v44 = v42 >> (51 - (v42 >> 52));
      if (v43 > 0x433)
        LODWORD(v44) = v42 << ((v42 >> 52) - 51);
      if (v43 >= 0x41F)
        v45 = v44;
      else
        v45 = (((1 << ((v42 >> 52) + 1)) - 1) & v44) + (1 << ((v42 >> 52) + 1));
      if ((v42 & 0x8000000000000000) == 0)
        LODWORD(v16) = v45;
      else
        LODWORD(v16) = -v45;
      break;
    case '"':
      LODWORD(v16) = JSC::ScopedArguments::length((JSC::ScopedArguments *)a4, a1, a3, a4, a5, a6, a7, a8);
      break;
    default:
      goto LABEL_20;
  }
LABEL_5:
  if (*(_DWORD *)(v13 + 80))
  {
    v28 = *(_DWORD *)(v13 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
    {
      v51 = v16;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
      LODWORD(v16) = v51;
    }
    if (*(_QWORD *)(v13 + 16))
      goto LABEL_43;
  }
  if (v16 > 0x10000)
  {
    v37 = v16;
    JSC::throwStackOverflowError((unint64_t)a1, &v53, a3, a4, a5, a6, a7, a8);
    LODWORD(v16) = v37;
  }
  if (v16 >= v14)
    v17 = v16 - v14;
  else
    v17 = 0;
LABEL_11:
  if (*(_DWORD *)(a3 + 80))
  {
    v27 = *(_DWORD *)(a3 + 80);
    if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a3 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(a3 + 16))
      return 0;
  }
  if (v17 > 0x10000
    || *(_QWORD *)(a3 + 8) > a2 - 8 * (unint64_t)((v9 + (((_DWORD)v17 + 1) & 0xFFFFFFFE) + 7) & 0xFFFFFFFE))
  {
    JSC::throwStackOverflowError((unint64_t)a1, &v52, a3, a4, a5, a6, a7, a8);
    return 0;
  }
  return v17;
}

void JSC::loadVarargs(JSC::JSGlobalObject *a1, JSC::JSValue *a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::VM *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 IndexQuicklyForTypedArray;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;

  if ((a3 & 0xFFFE000000000002) != 0 || a5 == 0)
    return;
  v7 = (uint64_t *)a2;
  switch(*(_BYTE *)(a3 + 5))
  {
    case '!':
      JSC::DirectArguments::copyToArguments((JSC::DirectArguments *)a3, a1, a2, a4, a5);
      return;
    case '"':
      JSC::ScopedArguments::copyToArguments((JSC::ScopedArguments *)a3, a1, a2, a4, a5);
      return;
    case '#':
      JSC::ClonedArguments::copyToArguments(a3, a1, a2, a4, a5);
      return;
    case '$':
      JSC::JSArray::copyToArguments(a3, a1, a2, a4, a5);
      return;
    default:
      if (*(_BYTE *)(a3 + 5) == 19)
      {
        v9 = a3 + 16;
        v10 = a5;
        do
        {
          if (a4 >= *(_DWORD *)(a3 + 8))
          {
            v11 = 10;
          }
          else if ((*(_BYTE *)(a3 + 4) & 0xE) == 6)
          {
            v11 = *(_QWORD *)(v9 + 8 * a4) + 0x2000000000000;
          }
          else
          {
            v11 = *(_QWORD *)(v9 + 8 * a4);
          }
          *v7++ = v11;
          LODWORD(a4) = a4 + 1;
          --v10;
        }
        while (v10);
        return;
      }
      v12 = 0;
      v13 = (JSC::VM *)*((_QWORD *)a1 + 7);
      v14 = a4;
      v15 = a5;
      break;
  }
  while (1)
  {
    v16 = v14 + v12;
    v17 = *(_QWORD *)(a3 + 8);
    v18 = *(_BYTE *)(a3 + 4) & 0xF;
    if ((v18 - 8) >= 2)
    {
      switch(*(_BYTE *)(a3 + 4) & 0xF)
      {
        case 0:
        case 1:
          v36 = v14 + v12;
          v34 = a4;
          v35 = a5;
          v32 = v12;
          v33 = v15;
          IndexQuicklyForTypedArray = JSC::JSObject::canGetIndexQuicklyForTypedArray((JSC::JSObject *)a3, v14 + v12);
          v12 = v32;
          LODWORD(v15) = v33;
          LODWORD(a4) = v34;
          a5 = v35;
          if (!IndexQuicklyForTypedArray)
            goto LABEL_20;
          v17 = *(_QWORD *)(a3 + 8);
          v18 = *(_BYTE *)(a3 + 4) & 0xF;
          break;
        case 3:
          goto LABEL_20;
        case 4:
        case 5:
          goto LABEL_18;
        case 6:
        case 7:
          if (*(_DWORD *)(v17 - 4) > v16)
            goto LABEL_27;
          goto LABEL_20;
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
          if (*(_DWORD *)(v17 - 4) > v16 && *(_QWORD *)(v17 + 8 * v16 + 16))
            goto LABEL_27;
          goto LABEL_20;
        default:
          __break(0xC471u);
          JUMPOUT(0x1986D3B48);
      }
      goto LABEL_28;
    }
LABEL_18:
    if (*(_DWORD *)(v17 - 4) <= v16 || !*(_QWORD *)(v17 + 8 * v16))
      break;
LABEL_27:
    v32 = v12;
    v33 = v15;
    v36 = v14 + v12;
    v34 = a4;
    v35 = a5;
LABEL_28:
    if ((v18 - 8) >= 2)
    {
      switch(v18)
      {
        case 0:
        case 1:
          v29 = JSC::JSObject::getIndexQuicklyForTypedArray(a3, v36, 0);
          break;
        case 4:
        case 5:
          v29 = *(unsigned int *)(v17 + 8 * v36) | 0xFFFE000000000000;
          break;
        case 6:
        case 7:
          v29 = *(_QWORD *)(v17 + 8 * v36) + 0x2000000000000;
          break;
        case 10:
        case 11:
        case 12:
        case 13:
          v29 = *(_QWORD *)(v17 + 8 * v36 + 16);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x1986D3B78);
      }
    }
    else
    {
      v29 = *(_QWORD *)(v17 + 8 * v36);
    }
    *v7++ = v29;
    v15 = v33;
    v12 = v32 + 1;
    LODWORD(a4) = v34;
    a5 = v35;
    if (v33 == v32 + 1)
      return;
  }
LABEL_20:
  if (v12 < a5)
  {
    v19 = v12 + a4;
    v20 = v15 - v12;
    do
    {
      v21 = JSC::JSObject::get((JSC::JSObject *)a3, a1, v19);
      if (*((_DWORD *)v13 + 20))
      {
        v37 = v21;
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v13, v22, v23, v24, v25, v26, v27, v28);
        v21 = v37;
        if (hasExceptionsAfterHandlingTraps)
          break;
      }
      *v7++ = v21;
      v19 = (v19 + 1);
      --v20;
    }
    while (v20);
  }
}

void JSC::setupVarargsFrame(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned int a6)
{
  unint64_t v10;
  JSC::JSValue *v11;
  JSC::VM *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  JSC::JSValue *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 IndexQuicklyForTypedArray;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  int v59;

  v10 = (unint64_t)(a3 - a2) >> 3;
  if ((int)v10 >= 1073741818)
  {
    v23 = *(_QWORD *)(a2 + 16);
    v24 = (v10 - 1073741818);
    if (v24 >= *(unsigned int *)(v23 + 172))
    {
      __break(0xC471u);
      JUMPOUT(0x1986D40E0);
    }
    v11 = (JSC::JSValue *)(*(_QWORD *)(v23 + 160) + 8 * v24);
  }
  else
  {
    v11 = (JSC::JSValue *)(a2 + ((((a3 - a2) << 29) + 0x600000000) >> 29));
  }
  if ((a4 & 0xFFFE000000000002) == 0 && a6)
  {
    v12 = (JSC::VM *)*((_QWORD *)a1 + 7);
    switch(*(_BYTE *)(a4 + 5))
    {
      case '!':
        JSC::DirectArguments::copyToArguments((JSC::DirectArguments *)a4, a1, v11, a5, a6);
        goto LABEL_14;
      case '"':
        JSC::ScopedArguments::copyToArguments((JSC::ScopedArguments *)a4, a1, v11, a5, a6);
        goto LABEL_14;
      case '#':
        JSC::ClonedArguments::copyToArguments(a4, a1, v11, a5, a6);
        goto LABEL_14;
      case '$':
        v13 = a6 + a5;
        v14 = *(_QWORD *)(a4 + 8);
        if ((*(_BYTE *)(a4 + 4) & 0xF) != 9)
        {
          v16 = a5;
          switch(*(_BYTE *)(a4 + 4) & 0xF)
          {
            case 1:
              goto LABEL_14;
            case 3:
              goto LABEL_13;
            case 5:
              break;
            case 7:
              v16 = a5;
              if (*(_DWORD *)(v14 - 8) > a5)
              {
                v16 = a5;
                v25 = v11;
                do
                {
                  *(_QWORD *)v25 = *(_QWORD *)(v14 + 8 * v16) + 0x2000000000000;
                  v25 = (JSC::JSValue *)((char *)v25 + 8);
                  ++v16;
                }
                while (v16 < *(unsigned int *)(v14 - 8));
              }
              goto LABEL_13;
            case 0xB:
            case 0xD:
              v15 = *(_DWORD *)(v14 - 4);
              v14 += 16;
              if (v15 >= v13)
                v15 = a6 + a5;
              goto LABEL_8;
            default:
              __break(0xC471u);
              JUMPOUT(0x1986D40B8);
          }
        }
        v15 = *(_DWORD *)(v14 - 8);
LABEL_8:
        v16 = a5;
        if (v15 > a5)
        {
          v17 = 0;
          v18 = a5;
          while (1)
          {
            v19 = *(_QWORD *)(v14 + 8 * v18);
            if (!v19)
              break;
            *((_QWORD *)v11 + v17) = v19;
            ++v18;
            ++v17;
            if (v15 == v18)
            {
              v16 = v15;
              goto LABEL_13;
            }
          }
          v16 = v18;
        }
LABEL_13:
        while (v16 < v13)
        {
          while (1)
          {
            v56 = v13;
            v59 = a5;
            *((_QWORD *)v11 + (v16 - a5)) = JSC::JSObject::get((JSC::JSObject *)a4, a1, v16);
            if (*((_DWORD *)v12 + 20))
              break;
            v16 = (v16 + 1);
            v13 = v56;
            LODWORD(a5) = v59;
            if (v16 >= v56)
              goto LABEL_14;
          }
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12, v45, v46, v47, v48, v49, v50, v51);
          LODWORD(a5) = v59;
          v13 = v56;
          if (hasExceptionsAfterHandlingTraps)
            break;
          v16 = (v16 + 1);
        }
        goto LABEL_14;
      default:
        if (*(_BYTE *)(a4 + 5) == 19)
        {
          v20 = a4 + 16;
          v21 = a6;
          do
          {
            if (a5 >= *(_DWORD *)(a4 + 8))
            {
              v22 = 10;
            }
            else if ((*(_BYTE *)(a4 + 4) & 0xE) == 6)
            {
              v22 = *(_QWORD *)(v20 + 8 * a5) + 0x2000000000000;
            }
            else
            {
              v22 = *(_QWORD *)(v20 + 8 * a5);
            }
            *(_QWORD *)v11 = v22;
            v11 = (JSC::JSValue *)((char *)v11 + 8);
            LODWORD(a5) = a5 + 1;
            --v21;
          }
          while (v21);
          goto LABEL_14;
        }
        v26 = 0;
        v27 = a5;
        v28 = a6;
        break;
    }
    do
    {
      v29 = v27 + v26;
      v30 = *(_QWORD *)(a4 + 8);
      v31 = *(_BYTE *)(a4 + 4) & 0xF;
      if ((v31 - 8) >= 2)
      {
        switch(*(_BYTE *)(a4 + 4) & 0xF)
        {
          case 0:
          case 1:
            v54 = v28;
            v55 = v27 + v26;
            v57 = a5;
            v53 = v26;
            IndexQuicklyForTypedArray = JSC::JSObject::canGetIndexQuicklyForTypedArray((JSC::JSObject *)a4, v27 + v26);
            v26 = v53;
            LODWORD(v28) = v54;
            LODWORD(a5) = v57;
            if (!IndexQuicklyForTypedArray)
              goto LABEL_35;
            v30 = *(_QWORD *)(a4 + 8);
            v31 = *(_BYTE *)(a4 + 4) & 0xF;
            break;
          case 3:
            goto LABEL_35;
          case 4:
          case 5:
            goto LABEL_33;
          case 6:
          case 7:
            if (*(_DWORD *)(v30 - 4) > v29)
              goto LABEL_42;
            goto LABEL_35;
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
            if (*(_DWORD *)(v30 - 4) > v29 && *(_QWORD *)(v30 + 8 * v29 + 16))
              goto LABEL_42;
            goto LABEL_35;
          default:
            __break(0xC471u);
            JUMPOUT(0x1986D40B0);
        }
      }
      else
      {
LABEL_33:
        if (*(_DWORD *)(v30 - 4) <= v29 || !*(_QWORD *)(v30 + 8 * v29))
        {
LABEL_35:
          if (v26 < a6)
          {
            v32 = v26 + a5;
            v33 = v28 - v26;
            do
            {
              v34 = JSC::JSObject::get((JSC::JSObject *)a4, a1, v32);
              if (*((_DWORD *)v12 + 20))
              {
                v58 = v34;
                v44 = JSC::VM::hasExceptionsAfterHandlingTraps(v12, v35, v36, v37, v38, v39, v40, v41);
                v34 = v58;
                if (v44)
                  break;
              }
              *(_QWORD *)v11 = v34;
              v11 = (JSC::JSValue *)((char *)v11 + 8);
              v32 = (v32 + 1);
              --v33;
            }
            while (v33);
          }
          break;
        }
LABEL_42:
        v53 = v26;
        v54 = v28;
        v55 = v27 + v26;
        v57 = a5;
      }
      if ((v31 - 8) >= 2)
      {
        switch(v31)
        {
          case 0:
          case 1:
            v42 = JSC::JSObject::getIndexQuicklyForTypedArray(a4, v55, 0);
            break;
          case 4:
          case 5:
            v42 = *(unsigned int *)(v30 + 8 * v55) | 0xFFFE000000000000;
            break;
          case 6:
          case 7:
            v42 = *(_QWORD *)(v30 + 8 * v55) + 0x2000000000000;
            break;
          case 10:
          case 11:
          case 12:
          case 13:
            v42 = *(_QWORD *)(v30 + 8 * v55 + 16);
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1986D4110);
        }
      }
      else
      {
        v42 = *(_QWORD *)(v30 + 8 * v55);
      }
      *(_QWORD *)v11 = v42;
      v11 = (JSC::JSValue *)((char *)v11 + 8);
      v28 = v54;
      v26 = v53 + 1;
      LODWORD(a5) = v57;
    }
    while (v54 != v53 + 1);
  }
LABEL_14:
  *(_DWORD *)(a3 + 32) = a6 + 1;
}

void JSC::Interpreter::getStackTrace(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, JSC::CallLinkInfo *this)
{
  JSC::CallFrame *v8;
  unint64_t v12;
  uint64_t v14;
  unsigned int v15;
  int v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::CallFrame *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  JSC::CallFrame *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  JSC::CallFrame *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  int v43;
  uint64_t v44;
  JSC::CallFrame *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  JSC::CallFrame *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  int v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  char v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  _QWORD *v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  JSC::CallFrame *v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  JSC::CallFrame *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  JSC::CallFrame *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unint64_t v127;
  unsigned int v128;
  unsigned int v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  JSC::CallFrame *v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  BOOL v152;
  uint64_t v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int v156;
  WTF *v157;
  unint64_t v159;
  _QWORD *v160;
  unsigned int *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  BOOL v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  unsigned int v186;
  char v187;
  unsigned int *v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int *v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int *v199;
  unsigned int v200;
  unsigned int v201;
  unint64_t v202;
  unint64_t v203;
  WTF *v204;
  WTF *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int *v215;
  unsigned int v216;
  unsigned int v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t *v229[6];
  WTF *v230;
  uint64_t v231;
  _BYTE v232[263];
  char v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  int v239;
  JSC::CallFrame *v240;
  unsigned int *v241;
  unsigned int *v242;
  JSC::CallFrame *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  char v249;
  uint64_t v250;
  unsigned int *v251;
  uint64_t v252;
  unsigned int *v253;
  JSC::Wasm::NameSection *v254[3];
  unsigned int *v255;
  JSC::Wasm::NameSection *v256[2];

  v236 = a5;
  v237 = a4;
  if (!a5)
    return;
  v8 = *(JSC::CallFrame **)(a1 - 90520);
  if (!v8)
    return;
  v12 = 0;
  v234 = 0;
  v235 = 0;
  v231 = 16;
  v229[0] = &v235;
  v229[1] = &v237;
  v229[2] = (unint64_t *)&v233;
  v229[3] = (unint64_t *)&v230;
  v229[4] = &v234;
  v229[5] = &v236;
  v230 = (WTF *)v232;
  if (a6)
  {
LABEL_9:
    v14 = a1;
    goto LABEL_10;
  }
  v14 = a1;
  if (a7)
  {
    if (!this)
    {
      v12 = 0;
      goto LABEL_10;
    }
    v15 = *((unsigned __int8 *)this + 17) >> 4;
    if (v15 > 9)
    {
      __break(0xC471u);
      JUMPOUT(0x1986D5698);
    }
    v16 = 1 << v15;
    if ((v16 & 0x19E) != 0)
      goto LABEL_8;
    if ((v16 & 0x260) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1986D5678);
    }
    if (*(_BYTE *)(a7 + 5) != 18)
    {
LABEL_8:
      v12 = 0;
    }
    else
    {
      JSC::CallLinkInfo::codeOrigin((uint64_t)this, (uint64_t *)&v238);
      v177 = v238;
      v178 = v238 & 0xFFFFFFFF8;
      if ((v238 & 1) != 0)
        v178 = *(_QWORD *)(v238 & 0xFFFFFFFF8);
      if (v178)
      {
        v179 = &v238;
        do
        {
          v180 = v177 & 0xFFFFFFFF8;
          if ((v177 & 1) != 0)
          {
            if (!*(_QWORD *)v180)
              break;
            v181 = *(_QWORD *)(*(_QWORD *)v180 + 8);
            if ((v177 & 2) != 0)
              LODWORD(v182) = -1;
            else
              LODWORD(v182) = *(_DWORD *)((v177 & 0xFFFFFFFF8) + 8);
          }
          else
          {
            if (!v180)
              break;
            v181 = *(_QWORD *)((v177 & 0xFFFFFFFF8) + 8);
            if ((v177 & 2) != 0)
              LODWORD(v182) = -1;
            else
              v182 = v177 >> 36;
          }
          if (JSC::Interpreter::getStackTrace(JSC::JSCell *,WTF::Vector<JSC::StackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned long,unsigned long,JSC::JSCell *,JSC::JSCell *,JSC::CallLinkInfo *)::$_1::operator()(v229, v181, v182, v176, a5, a6, a7, (uint64_t)this))
          {
            break;
          }
          v183 = (_QWORD *)(*v179 & 0xFFFFFFFF8);
          if ((*v179 & 1) != 0)
            v183 = (_QWORD *)*v183;
          do
          {
            v184 = v183;
            v177 = v183[2];
            v185 = v183[3] >> 60;
            v183 = (_QWORD *)(v177 & 0xFFFFFFFF8);
            if ((v177 & 1) != 0)
              v183 = (_QWORD *)*v183;
            v186 = (v185 < 0xC) & (0x824u >> v185);
            if (v183)
              v187 = v186;
            else
              v187 = 0;
          }
          while ((v187 & 1) != 0);
          v179 = v184 + 2;
        }
        while ((v186 & 1) == 0);
      }
      else
      {
        if ((v238 & 2) != 0)
        {
          LODWORD(v202) = -1;
        }
        else if ((v238 & 1) != 0)
        {
          LODWORD(v202) = *(_DWORD *)((v238 & 0xFFFFFFFF8) + 8);
        }
        else
        {
          v202 = v238 >> 36;
        }
        JSC::Interpreter::getStackTrace(JSC::JSCell *,WTF::Vector<JSC::StackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned long,unsigned long,JSC::JSCell *,JSC::JSCell *,JSC::CallLinkInfo *)::$_1::operator()(v229, a7, v202, v176, a5, a6, a7, (uint64_t)this);
      }
      if ((v238 & 1) != 0 && (v238 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v238 & 0xFFFFFFFF8, v174, v175, v176, a5, a6, a7, (uint64_t)this);
      v12 = v235;
    }
    goto LABEL_9;
  }
LABEL_10:
  v17 = (JSC::VM *)(v14 - 90560);
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)&v238, v8, (JSC::VM *)(v14 - 90560), 0, a5, a6, a7, (uint64_t)this);
  v24 = v240;
  if (v240)
  {
    v25 = a6 == 0;
    do
    {
      if (v235 >= v237)
      {
        if (v25)
        {
          if (v245)
          {
            v40 = *(_QWORD *)(v245 + 64);
            goto LABEL_40;
          }
          if ((v244 & 0xFFFE000000000007) == 3)
          {
            v43 = *(unsigned __int8 *)(qword_1ECF4C080 + (v244 & 0xFFFFFFFFFFFFFFFCLL) + 5);
LABEL_44:
            if ((v43 - 1) >= 2)
              goto LABEL_45;
          }
          else
          {
            if (v244 && *(_BYTE *)(v244 + 5) == 26)
            {
              v40 = *(_QWORD *)(v244 + 24);
              if ((v40 & 1) != 0)
                v40 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFFELL) + 48);
LABEL_40:
              if (v40)
              {
                v41 = *(unsigned __int8 *)(v40 + 5);
                if (v41 == 12)
                {
                  v42 = *(_BYTE *)(*(_QWORD *)(v40 + 88) + 51);
                }
                else
                {
                  if (v41 != 8)
                    goto LABEL_45;
                  v42 = *(_BYTE *)(v40 + 56);
                }
                v43 = v42 & 3;
                goto LABEL_44;
              }
            }
LABEL_45:
            if (++v234 >= v236)
              break;
          }
          v25 = 1;
          goto LABEL_14;
        }
        v25 = (v244 & 0xFFFE000000000007) != 3 && v244 == a6;
      }
      ++v235;
LABEL_14:
      ++v246;
      if ((v244 & 0xFFFE000000000007) != 3)
      {
        v26 = v238;
        if (v238)
        {
          v52 = (_QWORD *)v238;
          do
          {
            v53 = v52;
            v54 = v52[2];
            v55 = v52[3] >> 60;
            v52 = (_QWORD *)(v54 & 0xFFFFFFFF8);
            if ((v54 & 1) != 0)
              v52 = (_QWORD *)*v52;
            v56 = (v55 < 0xC) & (0x824u >> v55);
            if (v52)
              v57 = v56;
            else
              v57 = 0;
          }
          while ((v57 & 1) != 0);
          if (v56)
          {
            do
            {
              JSC::StackVisitor::readInlinedFrame((JSC::StackVisitor *)&v238, v240, (JSC::CodeOrigin *)(v26 + 16));
              v26 = v238;
            }
            while (v238);
            v241 = v242;
            JSC::StackVisitor::readFrame((JSC::StackVisitor *)&v238, v243, v63, v64, v65, v66, v67, v68);
          }
          else
          {
            JSC::StackVisitor::readInlinedFrame((JSC::StackVisitor *)&v238, v24, (JSC::CodeOrigin *)(v53 + 2));
          }
          goto LABEL_35;
        }
      }
      v27 = (uint64_t)v242;
      v28 = v243;
      v241 = v242;
      if (!v243)
        goto LABEL_105;
      if ((*((_QWORD *)v243 + 3) & 0xFFFE000000000007) == 3)
      {
        JSC::StackVisitor::readInlinableNativeCalleeFrame((JSC::StackVisitor *)&v238, v243, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        v29 = *((_QWORD *)v243 + 2);
        if (!v29)
        {
          v59 = *((int *)v243 + 8);
          v240 = v243;
          v247 = v59;
          v60 = *(JSC::CallFrame **)v243;
          if (*(unsigned int **)v243 == v242)
          {
            v164 = vmEntryRecord((uint64_t)v242);
            v61 = *(_QWORD *)(v164 + 16);
            v242 = (unsigned int *)v61;
            v60 = *(JSC::CallFrame **)(v164 + 8);
            v27 = (uint64_t)v241;
          }
          else
          {
            v61 = (uint64_t)v242;
          }
          v243 = v60;
          v249 = v249 & 0xFC | (v61 != v27);
          v244 = *((_QWORD *)v28 + 3);
          v238 = 0;
          v239 = 0;
          if ((*((_QWORD *)v28 + 3) & 0xFFFE000000000007) == 3)
          {
            v62 = 0;
            v245 = 0;
          }
          else
          {
            v245 = *((_QWORD *)v28 + 2);
            if (v245)
              v62 = JSC::CallFrame::bytecodeIndex(v28);
            else
              v62 = 0;
          }
          v248 = v62;
          if ((*((_QWORD *)v28 + 3) & 0xFFFE000000000007) == 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1986D52F0);
          }
          goto LABEL_35;
        }
        v30 = *(_BYTE **)(v29 + 120);
        if (!v30 || (v30[12] & 0xFE) != 4)
        {
          v44 = *((int *)v243 + 8);
          v240 = v243;
          v247 = v44;
          v45 = *(JSC::CallFrame **)v243;
          if (*(unsigned int **)v243 == v242)
          {
            v162 = vmEntryRecord((uint64_t)v242);
            v46 = *(_QWORD *)(v162 + 16);
            v242 = (unsigned int *)v46;
            v45 = *(JSC::CallFrame **)(v162 + 8);
            v27 = (uint64_t)v241;
          }
          else
          {
            v46 = (uint64_t)v242;
          }
          v243 = v45;
          v249 = v249 & 0xFC | (v46 != v27);
          v244 = *((_QWORD *)v28 + 3);
          v238 = 0;
          v239 = 0;
          if ((*((_QWORD *)v28 + 3) & 0xFFFE000000000007) == 3)
          {
            LODWORD(v50) = 0;
            v245 = 0;
          }
          else
          {
            v245 = *((_QWORD *)v28 + 2);
            if (!v245)
              goto LABEL_380;
            if ((*((_QWORD *)v28 + 3) & 0xFFFE000000000007) == 3)
              goto LABEL_56;
            v47 = *((_QWORD *)v28 + 2);
            if (v47)
            {
              v48 = *(_QWORD *)(v47 + 120);
              if (!v48)
                goto LABEL_247;
              v49 = *(unsigned __int8 *)(v48 + 12);
              if (v49 - 4 < 2)
              {
                JSC::CallFrame::codeOrigin((uint64_t)v28, (uint64_t *)v254);
                v70 = (unint64_t)v254[0];
LABEL_92:
                v69 = (uint64_t *)(v70 & 0xFFFFFFFF8);
                if ((v70 & 1) != 0)
                  v69 = (uint64_t *)*v69;
                while (v69)
                {
                  if ((v70 & 1) != 0 && (v70 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v70 & 0xFFFFFFFF8, v165, v18, v19, v20, v21, v22, v23);
                  v70 = v69[2];
                  v69 = (uint64_t *)(v70 & 0xFFFFFFFF8);
                  if ((v70 & 1) != 0)
                  {
                    v71 = *v69;
                    if ((v70 & 2) != 0
                      || ((v72 = *(unsigned int *)((v70 & 0xFFFFFFFF8) + 8), (_DWORD)v72 != 0x3FFFFFFF)
                        ? (v73 = (_DWORD)v72 == -1)
                        : (v73 = 1),
                          v73))
                    {
                      v74 = 2;
                    }
                    else if (v72 >> 28)
                    {
                      v227 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v227 = v71;
                      *(_DWORD *)(v227 + 8) = v72;
                      v74 = 1;
                      v71 = v227;
                    }
                    else
                    {
                      v74 = v71;
                      v71 = v72 << 36;
                    }
                    v70 = v71 | v74;
                    goto LABEL_92;
                  }
                }
                if ((v70 & 2) != 0)
                {
                  if ((v70 & 1) == 0)
                  {
                    LODWORD(v50) = -1;
                    goto LABEL_57;
                  }
                  v223 = v70 & 0xFFFFFFFF8;
                  LODWORD(v50) = -1;
                }
                else
                {
                  if ((v70 & 1) == 0)
                  {
                    v50 = v70 >> 36;
                    goto LABEL_57;
                  }
                  v223 = v70 & 0xFFFFFFFF8;
                  LODWORD(v50) = *(_DWORD *)((v70 & 0xFFFFFFFF8) + 8);
                }
                if (v223)
                  WTF::fastFree(v223, v165, v18, v19, v20, v21, v22, v23);
                goto LABEL_57;
              }
              if (v49 <= 1)
              {
LABEL_247:
                __break(0xC471u);
                JUMPOUT(0x1986D4DE0);
              }
LABEL_56:
              LODWORD(v50) = 4 * *((_DWORD *)v28 + 9);
            }
            else
            {
LABEL_380:
              LODWORD(v50) = 0;
            }
          }
LABEL_57:
          v248 = v50;
          if ((*((_QWORD *)v28 + 3) & 0xFFFE000000000007) == 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1986D5094);
          }
          goto LABEL_35;
        }
        v31 = *((unsigned int *)v243 + 9);
        if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v30 + 72))(*(_QWORD *)(v29 + 120))
                                   + 40)
                       + 20) <= v31)
        {
LABEL_105:
          v240 = 0;
          v238 = 0;
          v249 &= ~2u;
          break;
        }
        v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v29 + 120) + 72))(*(_QWORD *)(v29 + 120))
                                                + 40)
                                    + 8)
                        + 8 * v31);
        if ((v33 & 1) != 0)
        {
          v170 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
          if ((v33 & 2) != 0
            || ((v171 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v171 != 0x3FFFFFFF)
              ? (v172 = (_DWORD)v171 == -1)
              : (v172 = 1),
                v172))
          {
            v173 = 2;
          }
          else if (v171 >> 28)
          {
            v225 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v225 = v170;
            *(_DWORD *)(v225 + 8) = v171;
            v173 = 1;
            v170 = v225;
          }
          else
          {
            v173 = v170;
            v170 = v171 << 36;
          }
          v33 = v170 | v173;
        }
        v254[0] = (JSC::Wasm::NameSection *)v33;
        v34 = (uint64_t *)(v33 & 0xFFFFFFFF8);
        v35 = v33 & 0xFFFFFFFF8;
        if ((v33 & 1) != 0)
          v35 = *v34;
        if (v35)
        {
          JSC::StackVisitor::readInlinedFrame((JSC::StackVisitor *)&v238, v28, (JSC::CodeOrigin *)v254);
        }
        else
        {
          v247 = *((int *)v28 + 8);
          v36 = (uint64_t)v241;
          v240 = v28;
          v242 = v241;
          v37 = *(JSC::CallFrame **)v28;
          if (*(unsigned int **)v28 == v241)
          {
            v58 = vmEntryRecord((uint64_t)v241);
            v38 = *(_QWORD *)(v58 + 16);
            v242 = (unsigned int *)v38;
            v37 = *(JSC::CallFrame **)(v58 + 8);
            v36 = (uint64_t)v241;
          }
          else
          {
            v38 = (uint64_t)v241;
          }
          v243 = v37;
          v249 = v249 & 0xFC | (v38 != v36);
          v244 = *((_QWORD *)v28 + 3);
          v238 = 0;
          v239 = 0;
          if ((*((_QWORD *)v28 + 3) & 0xFFFE000000000007) == 3)
          {
            LODWORD(v39) = 0;
            v245 = 0;
          }
          else
          {
            v39 = *((_QWORD *)v28 + 2);
            v245 = v39;
            if (v39)
            {
              if ((v33 & 2) != 0)
              {
                LODWORD(v39) = -1;
              }
              else if ((v33 & 1) != 0)
              {
                LODWORD(v39) = *(_DWORD *)((v33 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v39 = v33 >> 36;
              }
            }
          }
          v248 = v39;
          if ((*((_QWORD *)v28 + 3) & 0xFFFE000000000007) == 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1986D502CLL);
          }
        }
        if ((v33 & 1) != 0 && v34)
          WTF::fastFree(v33 & 0xFFFFFFFF8, v32, v18, v19, v20, v21, v22, v23);
      }
LABEL_35:
      v24 = v240;
    }
    while (v240);
  }
  v75 = v251;
  v251 = 0;
  if (v75)
  {
    do
    {
      v76 = __ldaxr(v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, v75));
    if (!v77)
    {
      atomic_store(1u, v75);
      v254[0] = (JSC::Wasm::NameSection *)v75;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v254, v24, v18, v19, v20, v21, v22, v23);
    }
  }
  v78 = v234;
  if (v234)
  {
    v79 = *(unsigned int *)(a3 + 8);
    v80 = *(_QWORD *)a3;
    if (v234 > v79)
    {
      v81 = v79 + (v79 >> 2);
      if (v81 >= 0x10)
        v82 = v81 + 1;
      else
        v82 = 16;
      if (v82 <= v234)
        v82 = v234;
      if (v82 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x1986D56A0);
      }
      v83 = *(_DWORD *)(a3 + 12);
      v84 = 40 * v82;
      v88 = WTF::fastMalloc((WTF *)(40 * v82));
      *(_DWORD *)(a3 + 8) = (v84 & 0xFFFFFFF8) / 0x28;
      *(_QWORD *)a3 = v88;
      if (v83)
      {
        v218 = v80 + 40 * v83;
        v219 = v80;
        do
        {
          *(_OWORD *)v88 = *(_OWORD *)v219;
          *(_QWORD *)(v88 + 16) = *(_QWORD *)(v219 + 16);
          v220 = *(_QWORD *)(v219 + 24);
          *(_QWORD *)(v219 + 24) = 0;
          *(_QWORD *)(v88 + 24) = v220;
          LODWORD(v220) = *(_DWORD *)(v219 + 32);
          *(_BYTE *)(v88 + 36) = *(_BYTE *)(v219 + 36);
          *(_DWORD *)(v88 + 32) = v220;
          JSC::StackFrame::~StackFrame((JSC::StackFrame *)v219, v85, v86, v87, v20, v21, v22, v23);
          v219 = v221 + 40;
          v88 += 40;
        }
        while (v219 != v218);
        v88 = *(_QWORD *)a3;
      }
      if (v80)
      {
        if (v88 == v80)
        {
          *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 8) = 0;
        }
        WTF::fastFree(v80, v85, v86, v87, v20, v21, v22, v23);
        v80 = *(_QWORD *)a3;
      }
      else
      {
        v80 = v88;
      }
    }
    if (v80)
    {
      v89 = *(unsigned int *)(a3 + 12);
      if (v78 != v89)
      {
        v90 = v80 + 40 * v89;
        do
        {
          *(_QWORD *)(v90 + 32) = 0;
          *(_OWORD *)v90 = 0uLL;
          *(_OWORD *)(v90 + 16) = 0uLL;
          *(_QWORD *)(v90 + 16) = 0x4000000000000000;
          *(_DWORD *)(v90 + 32) = -1;
          v90 += 40;
        }
        while (v90 != v80 + 40 * v78);
      }
    }
    *(_DWORD *)(a3 + 12) = v78;
    if (HIDWORD(v231))
    {
      v203 = 0;
      v204 = v230;
      v205 = (WTF *)((char *)v230 + 16 * HIDWORD(v231));
      do
      {
        JSC::StackFrame::StackFrame((uint64_t)&v238, (uint64_t)v17, a2, *(_QWORD *)v204, *((_DWORD *)v204 + 2));
        if (v203 >= *(unsigned int *)(a3 + 12))
        {
LABEL_407:
          __break(0xC471u);
          JUMPOUT(0x1986D4DC0);
        }
        JSC::StackFrame::operator=(*(_QWORD *)a3 + 40 * v203, (uint64_t)&v238, v206, v207, v208, v209, v210, v211);
        v215 = v241;
        v241 = 0;
        if (v215)
        {
          do
          {
            v216 = __ldaxr(v215);
            v217 = v216 - 1;
          }
          while (__stlxr(v217, v215));
          if (!v217)
          {
            atomic_store(1u, v215);
            v254[0] = (JSC::Wasm::NameSection *)v215;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v254, v212, v213, v214, v20, v21, v22, v23);
          }
        }
        ++v203;
        v204 = (WTF *)((char *)v204 + 16);
      }
      while (v204 != v205);
      v91 = HIDWORD(v231);
    }
    else
    {
      v91 = 0;
    }
    v92 = v235;
    JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)&v238, v8, v17, 0, v20, v21, v22, v23);
    if (v240)
    {
      v93 = v92 - v12;
      while (1)
      {
        if (v93)
        {
          --v93;
          goto LABEL_151;
        }
        v94 = v245;
        if (v245)
          break;
        if ((v244 & 0xFFFE000000000007) != 3)
        {
          if (!v244 || *(_BYTE *)(v244 + 5) != 26)
            goto LABEL_137;
          v95 = *(_QWORD *)(v244 + 24);
          if ((v95 & 1) != 0)
            v95 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFFFELL) + 48);
          goto LABEL_132;
        }
        v98 = *(unsigned __int8 *)(qword_1ECF4C080 + (v244 & 0xFFFFFFFFFFFFFFFCLL) + 5);
LABEL_136:
        if ((v98 - 1) < 2)
          goto LABEL_343;
LABEL_137:
        v99 = *(unsigned int *)(a3 + 12);
        if (v91 >= v99)
          goto LABEL_233;
        v100 = v244;
        if ((v244 & 0xFFFE000000000007) != 3)
        {
          if (!v245 || (*(_WORD *)(*(_QWORD *)(v245 + 56) + 28) & 1) != 0)
          {
            if (a2 && v244 && *(_DWORD *)(a1 - 89800) >= *(unsigned __int8 *)(a2 + 7))
            {
              JSC::Heap::writeBarrierSlowPath(a1 - 90368, a2);
              v99 = *(unsigned int *)(a3 + 12);
            }
            if (v91 >= v99)
            {
              __break(0xC471u);
              JUMPOUT(0x1986D56A8);
            }
            v159 = *(_QWORD *)a3;
            v160 = (_QWORD *)(*(_QWORD *)a3 + 40 * v91);
            *v160 = v100;
            v160[1] = 0;
            v161 = (unsigned int *)v160[3];
            v160[2] = 0x4000000000000000;
            v160[3] = 0;
            if (v161)
            {
              do
              {
                v128 = __ldaxr(v161);
                v129 = v128 - 1;
              }
              while (__stlxr(v129, v161));
              if (!v129)
              {
                atomic_store(1u, v161);
                v254[0] = (JSC::Wasm::NameSection *)v161;
                WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v254, v24, v18, v19, v20, v21, v22, v23);
              }
            }
            v93 = 0;
            v107 = v159 + 40 * v91++;
            *(_DWORD *)(v107 + 32) = -1;
          }
          else
          {
            v101 = v248;
            if (a2 && v244)
            {
              if (*(_DWORD *)(a1 - 89800) >= *(unsigned __int8 *)(a2 + 7))
                JSC::Heap::writeBarrierSlowPath(a1 - 90368, a2);
            }
            else if (!a2)
            {
              goto LABEL_144;
            }
            if (*(_DWORD *)(a1 - 89800) >= *(unsigned __int8 *)(a2 + 7))
              JSC::Heap::writeBarrierSlowPath(a1 - 90368, a2);
LABEL_144:
            if (v91 >= *(unsigned int *)(a3 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x1986D5640);
            }
            v102 = *(_QWORD *)a3;
            v103 = (_QWORD *)(*(_QWORD *)a3 + 40 * v91);
            *v103 = v100;
            v103[1] = v94;
            v104 = (unsigned int *)v103[3];
            v103[2] = 0x4000000000000000;
            v103[3] = 0;
            if (v104)
            {
              do
              {
                v105 = __ldaxr(v104);
                v106 = v105 - 1;
              }
              while (__stlxr(v106, v104));
              if (!v106)
              {
                atomic_store(1u, v104);
                v254[0] = (JSC::Wasm::NameSection *)v104;
                WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v254, v24, v18, v19, v20, v21, v22, v23);
              }
            }
            v93 = 0;
            v107 = v102 + 40 * v91++;
            *(_DWORD *)(v107 + 32) = v101;
          }
          *(_BYTE *)(v107 + 36) = 0;
          goto LABEL_151;
        }
        if (*(_BYTE *)(qword_1ECF4C080 + (v244 & 0xFFFFFFFFFFFFFFFCLL) + 4) != 1)
        {
LABEL_343:
          v93 = 0;
          goto LABEL_151;
        }
        v188 = v251;
        v252 = v250;
        if (v251)
        {
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 + 1, v188));
        }
        v253 = v188;
        JSC::StackFrame::StackFrame((uint64_t)v254, &v252);
        if (v91 >= *(unsigned int *)(a3 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1986D56B0);
        }
        JSC::StackFrame::operator=(*(_QWORD *)a3 + 40 * v91, (uint64_t)v254, v190, v191, v192, v193, v194, v195);
        v196 = v255;
        v255 = 0;
        if (v196)
        {
          do
          {
            v197 = __ldaxr(v196);
            v198 = v197 - 1;
          }
          while (__stlxr(v198, v196));
          if (!v198)
          {
            atomic_store(1u, v196);
            v256[0] = (JSC::Wasm::NameSection *)v196;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v256, v24, v18, v19, v20, v21, v22, v23);
          }
        }
        v199 = v253;
        v253 = 0;
        if (v199)
        {
          do
          {
            v200 = __ldaxr(v199);
            v201 = v200 - 1;
          }
          while (__stlxr(v201, v199));
          if (!v201)
          {
            atomic_store(1u, v199);
            v256[0] = (JSC::Wasm::NameSection *)v199;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v256, v24, v18, v19, v20, v21, v22, v23);
          }
        }
        v93 = 0;
        ++v91;
LABEL_151:
        ++v246;
        if ((v244 & 0xFFFE000000000007) != 3)
        {
          v108 = v238;
          if (v238)
          {
            v130 = (_QWORD *)v238;
            do
            {
              v131 = v130;
              v132 = v130[2];
              v133 = v130[3] >> 60;
              v130 = (_QWORD *)(v132 & 0xFFFFFFFF8);
              if ((v132 & 1) != 0)
                v130 = (_QWORD *)*v130;
              v134 = (v133 < 0xC) & (0x824u >> v133);
              if (v130)
                v135 = v134;
              else
                v135 = 0;
            }
            while ((v135 & 1) != 0);
            if (v134)
            {
              do
              {
                JSC::StackVisitor::readInlinedFrame((JSC::StackVisitor *)&v238, v240, (JSC::CodeOrigin *)(v108 + 16));
                v108 = v238;
              }
              while (v238);
              v241 = v242;
              JSC::StackVisitor::readFrame((JSC::StackVisitor *)&v238, v243, v141, v142, v143, v144, v145, v146);
            }
            else
            {
              JSC::StackVisitor::readInlinedFrame((JSC::StackVisitor *)&v238, v240, (JSC::CodeOrigin *)(v131 + 2));
            }
            goto LABEL_172;
          }
        }
        v109 = (uint64_t)v242;
        v110 = v243;
        v241 = v242;
        if (!v243)
          goto LABEL_232;
        if ((*((_QWORD *)v243 + 3) & 0xFFFE000000000007) == 3)
        {
          JSC::StackVisitor::readInlinableNativeCalleeFrame((JSC::StackVisitor *)&v238, v243, v18, v19, v20, v21, v22, v23);
        }
        else
        {
          v111 = *((_QWORD *)v243 + 2);
          if (!v111)
          {
            v137 = *((int *)v243 + 8);
            v240 = v243;
            v247 = v137;
            v138 = *(JSC::CallFrame **)v243;
            if (*(unsigned int **)v243 == v242)
            {
              v163 = vmEntryRecord((uint64_t)v242);
              v139 = *(_QWORD *)(v163 + 16);
              v242 = (unsigned int *)v139;
              v138 = *(JSC::CallFrame **)(v163 + 8);
              v109 = (uint64_t)v241;
            }
            else
            {
              v139 = (uint64_t)v242;
            }
            v243 = v138;
            v249 = v249 & 0xFC | (v139 != v109);
            v244 = *((_QWORD *)v110 + 3);
            v238 = 0;
            v239 = 0;
            if ((*((_QWORD *)v110 + 3) & 0xFFFE000000000007) == 3)
            {
              v140 = 0;
              v245 = 0;
            }
            else
            {
              v245 = *((_QWORD *)v110 + 2);
              if (v245)
                v140 = JSC::CallFrame::bytecodeIndex(v110);
              else
                v140 = 0;
            }
            v248 = v140;
            if ((*((_QWORD *)v110 + 3) & 0xFFFE000000000007) == 3)
            {
              __break(0xC471u);
              JUMPOUT(0x1986D5130);
            }
            goto LABEL_172;
          }
          v112 = *(_BYTE **)(v111 + 120);
          if (!v112 || (v112[12] & 0xFE) != 4)
          {
            v121 = *((int *)v243 + 8);
            v240 = v243;
            v247 = v121;
            v122 = *(JSC::CallFrame **)v243;
            if (*(unsigned int **)v243 == v242)
            {
              v147 = vmEntryRecord((uint64_t)v242);
              v123 = *(_QWORD *)(v147 + 16);
              v242 = (unsigned int *)v123;
              v122 = *(JSC::CallFrame **)(v147 + 8);
              v109 = (uint64_t)v241;
            }
            else
            {
              v123 = (uint64_t)v242;
            }
            v243 = v122;
            v249 = v249 & 0xFC | (v123 != v109);
            v244 = *((_QWORD *)v110 + 3);
            v238 = 0;
            v239 = 0;
            if ((*((_QWORD *)v110 + 3) & 0xFFFE000000000007) == 3)
            {
              LODWORD(v127) = 0;
              v245 = 0;
            }
            else
            {
              v245 = *((_QWORD *)v110 + 2);
              if (!v245)
                goto LABEL_378;
              if ((*((_QWORD *)v110 + 3) & 0xFFFE000000000007) == 3)
                goto LABEL_185;
              v124 = *((_QWORD *)v110 + 2);
              if (v124)
              {
                v125 = *(_QWORD *)(v124 + 120);
                if (!v125)
                  goto LABEL_407;
                v126 = *(unsigned __int8 *)(v125 + 12);
                if (v126 - 4 < 2)
                {
                  JSC::CallFrame::codeOrigin((uint64_t)v110, (uint64_t *)v254);
                  v149 = (unint64_t)v254[0];
LABEL_219:
                  v148 = (uint64_t *)(v149 & 0xFFFFFFFF8);
                  if ((v149 & 1) != 0)
                    v148 = (uint64_t *)*v148;
                  while (v148)
                  {
                    if ((v149 & 1) != 0 && (v149 & 0xFFFFFFFF8) != 0)
                      WTF::fastFree(v149 & 0xFFFFFFFF8, v24, v18, v19, v20, v21, v22, v23);
                    v149 = v148[2];
                    v148 = (uint64_t *)(v149 & 0xFFFFFFFF8);
                    if ((v149 & 1) != 0)
                    {
                      v150 = *v148;
                      if ((v149 & 2) != 0
                        || ((v151 = *(unsigned int *)((v149 & 0xFFFFFFFF8) + 8), (_DWORD)v151 != 0x3FFFFFFF)
                          ? (v152 = (_DWORD)v151 == -1)
                          : (v152 = 1),
                            v152))
                      {
                        v153 = 2;
                      }
                      else if (v151 >> 28)
                      {
                        v226 = WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v226 = v150;
                        *(_DWORD *)(v226 + 8) = v151;
                        v153 = 1;
                        v150 = v226;
                      }
                      else
                      {
                        v153 = v150;
                        v150 = v151 << 36;
                      }
                      v149 = v150 | v153;
                      goto LABEL_219;
                    }
                  }
                  if ((v149 & 2) != 0)
                  {
                    if ((v149 & 1) == 0)
                    {
                      LODWORD(v127) = -1;
                      goto LABEL_186;
                    }
                    v222 = v149 & 0xFFFFFFFF8;
                    LODWORD(v127) = -1;
                  }
                  else
                  {
                    if ((v149 & 1) == 0)
                    {
                      v127 = v149 >> 36;
                      goto LABEL_186;
                    }
                    v222 = v149 & 0xFFFFFFFF8;
                    LODWORD(v127) = *(_DWORD *)((v149 & 0xFFFFFFFF8) + 8);
                  }
                  if (v222)
                    WTF::fastFree(v222, v24, v18, v19, v20, v21, v22, v23);
                  goto LABEL_186;
                }
                if (v126 <= 1)
                  goto LABEL_407;
LABEL_185:
                LODWORD(v127) = 4 * *((_DWORD *)v110 + 9);
              }
              else
              {
LABEL_378:
                LODWORD(v127) = 0;
              }
            }
LABEL_186:
            v248 = v127;
            if ((*((_QWORD *)v110 + 3) & 0xFFFE000000000007) == 3)
            {
              __break(0xC471u);
              JUMPOUT(0x1986D504CLL);
            }
            goto LABEL_172;
          }
          v113 = *((unsigned int *)v243 + 9);
          if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v112 + 72))(*(_QWORD *)(v111 + 120))
                                     + 40)
                         + 20) <= v113)
          {
LABEL_232:
            v240 = 0;
            v238 = 0;
            v249 &= ~2u;
            goto LABEL_233;
          }
          v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v111 + 120) + 72))(*(_QWORD *)(v111 + 120))
                                                   + 40)
                                       + 8)
                           + 8 * v113);
          if ((v114 & 1) != 0)
          {
            v166 = *(_QWORD *)(v114 & 0xFFFFFFFF8);
            if ((v114 & 2) != 0
              || ((v167 = *(unsigned int *)((v114 & 0xFFFFFFFF8) + 8), (_DWORD)v167 != 0x3FFFFFFF)
                ? (v168 = (_DWORD)v167 == -1)
                : (v168 = 1),
                  v168))
            {
              v169 = 2;
            }
            else if (v167 >> 28)
            {
              v224 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v224 = v166;
              *(_DWORD *)(v224 + 8) = v167;
              v169 = 1;
              v166 = v224;
            }
            else
            {
              v169 = v166;
              v166 = v167 << 36;
            }
            v114 = v166 | v169;
          }
          v254[0] = (JSC::Wasm::NameSection *)v114;
          v115 = (uint64_t *)(v114 & 0xFFFFFFFF8);
          v116 = v114 & 0xFFFFFFFF8;
          if ((v114 & 1) != 0)
            v116 = *v115;
          if (v116)
          {
            JSC::StackVisitor::readInlinedFrame((JSC::StackVisitor *)&v238, v110, (JSC::CodeOrigin *)v254);
          }
          else
          {
            v247 = *((int *)v110 + 8);
            v117 = (uint64_t)v241;
            v240 = v110;
            v242 = v241;
            v118 = *(JSC::CallFrame **)v110;
            if (*(unsigned int **)v110 == v241)
            {
              v136 = vmEntryRecord((uint64_t)v241);
              v119 = *(_QWORD *)(v136 + 16);
              v242 = (unsigned int *)v119;
              v118 = *(JSC::CallFrame **)(v136 + 8);
              v117 = (uint64_t)v241;
            }
            else
            {
              v119 = (uint64_t)v241;
            }
            v243 = v118;
            v249 = v249 & 0xFC | (v119 != v117);
            v244 = *((_QWORD *)v110 + 3);
            v238 = 0;
            v239 = 0;
            if ((*((_QWORD *)v110 + 3) & 0xFFFE000000000007) == 3)
            {
              LODWORD(v120) = 0;
              v245 = 0;
            }
            else
            {
              v120 = *((_QWORD *)v110 + 2);
              v245 = v120;
              if (v120)
              {
                if ((v114 & 2) != 0)
                {
                  LODWORD(v120) = -1;
                }
                else if ((v114 & 1) != 0)
                {
                  LODWORD(v120) = *(_DWORD *)((v114 & 0xFFFFFFFF8) + 8);
                }
                else
                {
                  v120 = v114 >> 36;
                }
              }
            }
            v248 = v120;
            if ((*((_QWORD *)v110 + 3) & 0xFFFE000000000007) == 3)
            {
              __break(0xC471u);
              JUMPOUT(0x1986D4FB8);
            }
          }
          if ((v114 & 1) != 0 && v115)
            WTF::fastFree(v114 & 0xFFFFFFFF8, v24, v18, v19, v20, v21, v22, v23);
        }
LABEL_172:
        if (!v240)
          goto LABEL_233;
      }
      v95 = *(_QWORD *)(v245 + 64);
LABEL_132:
      if (!v95)
        goto LABEL_137;
      v96 = *(unsigned __int8 *)(v95 + 5);
      if (v96 == 12)
      {
        v97 = *(_BYTE *)(*(_QWORD *)(v95 + 88) + 51);
      }
      else
      {
        if (v96 != 8)
          goto LABEL_137;
        v97 = *(_BYTE *)(v95 + 56);
      }
      v98 = v97 & 3;
      goto LABEL_136;
    }
LABEL_233:
    v154 = v251;
    v251 = 0;
    if (v154)
    {
      do
      {
        v155 = __ldaxr(v154);
        v156 = v155 - 1;
      }
      while (__stlxr(v156, v154));
      if (!v156)
      {
        atomic_store(1u, v154);
        v254[0] = (JSC::Wasm::NameSection *)v154;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v254, v24, v18, v19, v20, v21, v22, v23);
      }
    }
  }
  v157 = v230;
  if (v232 != (_BYTE *)v230 && v230 != 0)
  {
    v230 = 0;
    LODWORD(v231) = 0;
    WTF::fastFree((unint64_t)v157, v24, v18, v19, v20, v21, v22, v23);
  }
}

BOOL JSC::Interpreter::getStackTrace(JSC::JSCell *,WTF::Vector<JSC::StackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned long,unsigned long,JSC::JSCell *,JSC::JSCell *,JSC::CallLinkInfo *)::$_1::operator()(unint64_t **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v8;
  unint64_t v9;
  _BOOL8 result;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;

  v8 = *a1;
  v9 = **a1;
  if (v9 < *a1[1])
  {
    result = 0;
    *v8 = v9 + 1;
    return result;
  }
  v12 = *(_QWORD *)(a2 + 64);
  if (!v12)
    goto LABEL_9;
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 == 12)
  {
    v14 = *(_BYTE *)(*(_QWORD *)(v12 + 88) + 51);
  }
  else
  {
    if (v13 != 8)
      goto LABEL_9;
    v14 = *(_BYTE *)(v12 + 56);
  }
  if ((v14 & 3) != 0)
    return 0;
LABEL_9:
  v15 = (uint64_t)a1[3];
  *(_QWORD *)&v22 = a2;
  DWORD2(v22) = a3;
  v16 = *(unsigned int *)(v15 + 12);
  if ((_DWORD)v16 == *(_DWORD *)(v15 + 8))
  {
    v17 = (__int128 *)WTF::Vector<JSC::VisitCounter,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, (void *)(v16 + 1), (unint64_t)&v22, a4, a5, a6, a7, a8);
    v16 = *(unsigned int *)(v15 + 12);
    v18 = *(_QWORD *)v15;
    v19 = *v17;
  }
  else
  {
    v18 = *(_QWORD *)v15;
    v19 = v22;
  }
  *(_OWORD *)(v18 + 16 * v16) = v19;
  ++*(_DWORD *)(v15 + 12);
  v20 = a1[4];
  v21 = *v20 + 1;
  *v20 = v21;
  return v21 >= *a1[5];
}

uint64_t JSC::StackFrame::operator=(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  JSC::Wasm::NameSection *v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v11 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v16 = (JSC::Wasm::NameSection *)v11;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v16, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v14 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v14;
  return a1;
}

void JSC::StackFrame::~StackFrame(JSC::StackFrame *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  JSC::Wasm::NameSection *v11;

  v8 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v11 = (JSC::Wasm::NameSection *)v8;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::Interpreter::stackTraceAsString(JSC::VM *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, WTF::StringImpl **a9@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::AtomStringImpl *v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int8x16_t *v66;
  unint64_t v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x16_t v77;
  WTF::StringImpl *v78;
  unsigned int v79;
  char v80;

  v77.i64[1] = 0;
  v78 = 0;
  v79 = 0;
  v80 = 1;
  if (*(_DWORD *)(a2 + 12))
  {
    v12 = 0;
    v13 = 0;
    while (1)
    {
      JSC::StackFrame::toString((JSC::StackFrame *)(*(_QWORD *)a2 + v12), a1, a3, a4, a5, a6, a7, a8, (int **)&v77);
      v15 = v77.i64[0];
      if (v79)
        v16 = 0;
      else
        v16 = v78 == 0;
      if (v16)
      {
        if (v77.i64[0])
          *(_DWORD *)v77.i64[0] += 2;
        v17 = (WTF::StringImpl *)v77.i64[1];
        v77.i64[1] = v15;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2)
          {
            WTF::StringImpl::~StringImpl(v17, v14, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
            v15 = v77.i64[0];
          }
          else
          {
            *(_DWORD *)v17 -= 2;
          }
        }
        if (v15)
          LODWORD(v15) = *(_DWORD *)(v15 + 4);
        v79 = v15;
        goto LABEL_16;
      }
      if (v77.i64[0])
      {
        v66 = *(int8x16_t **)(v77.i64[0] + 8);
        v67 = *(unsigned int *)(v77.i64[0] + 4);
        if ((*(_BYTE *)(v77.i64[0] + 16) & 4) == 0)
        {
          WTF::StringBuilder::append((uint64_t)&v77.i64[1], v66, v67, a4, a5, a6, a7, a8);
          goto LABEL_16;
        }
      }
      else
      {
        v66 = 0;
        v67 = 0;
      }
      WTF::StringBuilder::append((uint64_t)&v77.i64[1], v66, v67, a4, a5, a6, a7, a8);
LABEL_16:
      v18 = (WTF::StringImpl *)v77.i64[0];
      v77.i64[0] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
        {
          WTF::StringImpl::~StringImpl(v18, v14, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
        }
        else
        {
          *(_DWORD *)v18 -= 2;
        }
      }
      v19 = *(unsigned int *)(a2 + 12);
      if (v13 != v19 - 1)
      {
        v77.i8[0] = 10;
        if (v78 && ((v20 = v79, v79 < *((_DWORD *)v78 + 1)) ? (v21 = v77.i64[1] == 0) : (v21 = 0), v21))
        {
          v22 = *((_DWORD *)v78 + 4);
          v23 = *((_QWORD *)v78 + 1);
          ++v79;
          if ((v22 & 4) != 0)
            *(_BYTE *)(v23 + v20) = 10;
          else
            *(_WORD *)(v23 + 2 * v20) = 10;
        }
        else
        {
          WTF::StringBuilder::append((uint64_t)&v77.i64[1], &v77, 1uLL, a4, a5, a6, a7, a8);
        }
        v19 = *(unsigned int *)(a2 + 12);
      }
      ++v13;
      v12 += 40;
      if (v19 <= v13)
      {
        v40 = (WTF::StringImpl *)v77.i64[1];
        if (v77.i64[1])
          goto LABEL_34;
        v58 = (WTF::AtomStringImpl *)v79;
        if ((v79 & 0x80000000) != 0)
          goto LABEL_57;
        goto LABEL_45;
      }
    }
  }
  v58 = 0;
LABEL_45:
  if (v78 && *((_DWORD *)v78 + 1) > v58 + (v58 >> 2))
  {
    if ((*((_BYTE *)v78 + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v77.i64[1], v58, a3, a4, a5, a6, a7, a8);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v77.i64[1], v58, a3, a4, a5, a6, a7, a8);
    v68 = (WTF::StringImpl *)v77.i64[1];
    v77.i64[1] = (uint64_t)v78;
    v78 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
      {
        WTF::StringImpl::~StringImpl(v68, v59, v60, v61, v62, v63, v64, v65);
        WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
      }
      else
      {
        *(_DWORD *)v68 -= 2;
      }
    }
  }
LABEL_57:
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v77.u64[1]);
  v40 = (WTF::StringImpl *)v77.i64[1];
  if (v77.i64[1])
LABEL_34:
    *(_DWORD *)v40 += 2;
  *a9 = v40;
  v41 = v78;
  v78 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v14, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      v40 = (WTF::StringImpl *)v77.i64[1];
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  v77.i64[1] = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, v14, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
}

uint64_t JSC::CatchInfo::CatchInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  JSC::ExecutableMemoryHandle *v51;
  unsigned __int8 *v52;
  char v53;

  *(_QWORD *)(a1 + 8) = 0;
  v9 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v10 = (_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)a1 = a2 != 0;
  if (!a2)
    return a1;
  *(_BYTE *)(a1 + 1) = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 32);
  *v10 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 1;
  if (*(_BYTE *)(a3 + 6) == 1)
  {
    *(_DWORD *)(a1 + 32) = -1;
    v12 = *(unsigned int *)(a2 + 12);
    *(_DWORD *)(a1 + 32) = 2;
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 40) = *(unsigned int *)(a2 + 16);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 20);
    return a1;
  }
  if (!*(_BYTE *)(a3 + 6))
  {
    *(_QWORD *)(a1 + 24) = **(_QWORD **)(a3 + 64) + *(unsigned int *)(a2 + 12);
    *(_DWORD *)(a1 + 32) = 1;
    return a1;
  }
  v13 = (uint64_t *)JSC::Wasm::thunks;
  v14 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  v52 = (unsigned __int8 *)(JSC::Wasm::thunks + 8);
  v53 = 1;
  if (__ldaxr((unsigned __int8 *)(JSC::Wasm::thunks + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_10;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v14);
LABEL_10:
  JSC::Wasm::Thunks::stub(v13, (uint64_t)&v52, (void (*)(uint64_t))JSC::Wasm::catchInWasmThunkGenerator, a4, a5, a6, a7, a8, &v50);
  if (v53)
  {
    v23 = v52;
    v24 = __ldxr(v52);
    if (v24 == 1)
    {
      if (!__stlxr(0, v52))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v23, 0, v17, v18, v19, v20, v21, v22);
  }
LABEL_16:
  v26 = v50;
  v25 = (unsigned int *)v51;
  if (v51)
  {
    do
      v27 = __ldaxr(v25);
    while (__stlxr(v27 + 1, v25));
    *v9 = v26;
    do
    {
      v28 = __ldaxr(v25);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v25));
    if (!v29)
    {
      atomic_store(1u, v25);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v25, v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    v30 = (unsigned int *)v51;
    v51 = 0;
    if (v30)
    {
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, v30);
        JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v30, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
    }
  }
  else
  {
    *v9 = v50;
  }
  *v10 = *(_QWORD *)(a2 + 32);
  return a1;
}

void JSC::Interpreter::unwind(JSC::VM *a1@<X1>, JSC::CallFrame **a2@<X2>, JSC::Exception *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  JSC::Exception *v13;
  int v14;
  uint64_t v15;
  JSC::VM *v16;
  JSC::CallFrame *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char **v21;
  int v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  JSC::CallFrame *v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int *v35;
  JSC::CallFrame *v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  JSC::Debugger *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  int v44;
  unint64_t v45;
  uint64_t *v46;
  unsigned int *v47;
  _DWORD *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int **v56;
  JSC::CallFrame *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  int64_t v71;
  unint64_t v72;
  char v73;
  _QWORD *v74;
  uint64_t v75;
  JSC::CallFrame *v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  JSC::CallFrame *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  JSC::CallFrame *v90;
  JSC::CallFrame *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  JSC::CallFrame *v105;
  uint64_t v106;
  unsigned int v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  JSC::CallFrame *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  unsigned int *v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  BOOL v154;
  uint64_t v155;
  _BOOL4 v156;
  unsigned int *v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  BOOL v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  BOOL v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int *v170;
  unsigned int v171;
  JSC::Wasm::Callee *v172;
  unsigned int **v173;
  unsigned int *v174;
  unsigned int v175;
  uint64_t v176;
  _DWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int128 v185;
  unsigned int *v186;
  _DWORD *v187;
  unsigned int v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  JSC::Exception *v203;
  unsigned int *v204;
  _QWORD *v205;
  int v206;
  JSC::CallFrame *v207;
  uint64_t v208;
  uint64_t v209;
  JSC::CallFrame *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  char v216;
  unsigned int *v217;
  char v218;
  __int128 v219;
  __int128 v220;
  int8x16_t v221;
  int v222;
  char v223;
  _QWORD *v224;
  _QWORD v225[2];

  v13 = (JSC::Exception *)*((_QWORD *)a1 + 3);
  v203 = v13;
  if (v13 == a3)
  {
    v16 = 0;
    v13 = a3;
  }
  else
  {
    v14 = *((_DWORD *)a1 + 22);
    *((_DWORD *)a1 + 22) = v14 + 1;
    if (v14)
      goto LABEL_4;
    v15 = *((_QWORD *)a1 + 2);
    if (!v15)
      goto LABEL_4;
    v16 = a1;
    if (*((_QWORD *)a1 + 3) == v15)
    {
      *((_QWORD *)a1 + 2) = 0;
      v159 = (unsigned int *)((char *)a1 + 80);
      do
        v160 = __ldaxr(v159);
      while (__stlxr(v160 & 0xFFFFFFEF, v159));
      *((_BYTE *)a1 + 86) = 1;
      v13 = (JSC::Exception *)*((_QWORD *)a1 + 3);
LABEL_4:
      v16 = a1;
    }
  }
  v17 = *a2;
  v18 = *((_QWORD *)a3 + 1);
  if (!v18)
    v18 = 2;
  *(_BYTE *)a8 = 0;
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 40) = 0;
  *(_DWORD *)(a8 + 48) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  *(_QWORD *)(a8 + 24) = 0;
  *(_DWORD *)(a8 + 32) = 0;
  v19 = (v18 & 0xFFFE000000000002) != 0 || v13 == a3;
  if (v19)
    goto LABEL_262;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v21 = (char **)(16 * v20);
  if ((char **)(16 * v20) != &JSC::JSWebAssemblyException::s_info)
  {
    v19 = (_DWORD)v20 == 0;
    v156 = v20 != 0;
    if (!v19 && v21 != &JSC::ErrorInstance::s_info)
    {
      do
      {
        v21 = (char **)v21[2];
        v156 = v21 != 0;
      }
      while (v21 != &JSC::ErrorInstance::s_info && v21 != 0);
    }
    if (v156)
    {
      v201 = 0;
      v22 = (*(unsigned __int8 *)(v18 + 59) >> 4) & 1;
      goto LABEL_13;
    }
LABEL_262:
    v201 = 0;
    v202 = 0;
    goto LABEL_14;
  }
  v201 = *(_QWORD *)(v18 + 16);
  v22 = 1;
LABEL_13:
  v202 = v22;
LABEL_14:
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)&v205, v17, a1, 0, a4, a5, a6, a7);
  if (v218 || (v31 = v207) == 0)
  {
    v204 = 0;
    goto LABEL_162;
  }
  v204 = 0;
LABEL_17:
  if ((v211 & 0xFFFE000000000007) == 3 || !v205)
    goto LABEL_19;
  v87 = v205[2];
  if ((v87 & 1) != 0)
  {
    v165 = *(_QWORD *)(v87 & 0xFFFFFFFF8);
    if ((v87 & 2) != 0
      || ((v166 = *(unsigned int *)((v87 & 0xFFFFFFFF8) + 8), (_DWORD)v166 != 0x3FFFFFFF)
        ? (v167 = (_DWORD)v166 == -1)
        : (v167 = 1),
          v167))
    {
      v168 = 2;
    }
    else if (v166 >> 28)
    {
      v196 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v196 = v165;
      *(_DWORD *)(v196 + 8) = v166;
      v168 = 1;
      v165 = v196;
    }
    else
    {
      v168 = *(_QWORD *)(v87 & 0xFFFFFFFF8);
      v165 = v166 << 36;
    }
    v87 = v165 | v168;
  }
  *(_QWORD *)&v219 = v87;
  while (1)
  {
    v88 = (_QWORD *)(v87 & 0xFFFFFFFF8);
    if ((v87 & 1) != 0)
      break;
    if (!v88)
      goto LABEL_117;
LABEL_279:
    JSC::CodeOrigin::operator=((uint64_t *)&v219, v88 + 2, v24, v25, v26, v27, v28, v29);
    v87 = v219;
  }
  v88 = (_QWORD *)*v88;
  if (v88)
    goto LABEL_279;
LABEL_117:
  v90 = v207;
  v89 = v208;
  v214 = *((int *)v207 + 8);
  v209 = v208;
  v91 = *(JSC::CallFrame **)v207;
  if (*(_QWORD *)v207 == v208)
  {
    v123 = vmEntryRecord(v208);
    v92 = *(_QWORD *)(v123 + 16);
    v209 = v92;
    v91 = *(JSC::CallFrame **)(v123 + 8);
    v89 = v208;
  }
  else
  {
    v92 = v208;
  }
  v210 = v91;
  v216 = v216 & 0xFC | (v92 != v89);
  v211 = *((_QWORD *)v90 + 3);
  v205 = 0;
  v206 = 0;
  if ((*((_QWORD *)v90 + 3) & 0xFFFE000000000007) == 3)
  {
    LODWORD(v93) = 0;
    v212 = 0;
  }
  else
  {
    v93 = *((_QWORD *)v90 + 2);
    v212 = (_QWORD *)v93;
    if (v93)
    {
      if ((v219 & 2) != 0)
      {
        LODWORD(v93) = -1;
      }
      else if ((v219 & 1) != 0)
      {
        LODWORD(v93) = *(_DWORD *)((v219 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v93 = (unint64_t)v219 >> 36;
      }
    }
  }
  v215 = v93;
  v54 = *((_QWORD *)v90 + 3) & 0xFFFE000000000007;
  if (v54 != 3)
  {
    v54 = v219;
    if ((v219 & 1) == 0)
      goto LABEL_126;
    goto LABEL_290;
  }
  v23 = "./interpreter/StackVisitor.cpp";
  v24 = (unint64_t)"void JSC::StackVisitor::readNonInlinedFrame(CallFrame *, CodeOrigin *)";
  v25 = 390;
  __break(0xC471u);
  while (2)
  {
    __break(1u);
LABEL_290:
    if ((v54 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v54 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
LABEL_126:
    v31 = v207;
LABEL_19:
    *a2 = v31;
    v32 = v212;
    *(_BYTE *)a8 = 0;
    if (v13 == a3 || !v32)
    {
LABEL_26:
      if ((v211 & 0xFFFE000000000007) == 3)
      {
        v176 = qword_1ECF4C080 + (v211 & 0xFFFFFFFFFFFFFFFCLL);
        if (*(_BYTE *)(v176 + 4) == 1 && v202 != 0)
        {
          v178 = *(_DWORD **)(v176 + 24);
          if (v178)
          {
            if (*v178)
            {
              v179 = JSC::Wasm::Callee::handlerForIndex(qword_1ECF4C080 + (v211 & 0xFFFFFFFFFFFFFFFCLL), *((_QWORD *)*a2 + 2), *((_DWORD *)*a2 + 9), v201);
              JSC::CatchInfo::CatchInfo((uint64_t)&v219, v179, v176, v180, v181, v182, v183, v184);
              v185 = v220;
              *(_OWORD *)a8 = v219;
              *(_OWORD *)(a8 + 16) = v185;
              v30 = v221;
              *(int8x16_t *)(a8 + 32) = v221;
              *(_DWORD *)(a8 + 48) = v222;
              if (*(_BYTE *)a8)
                goto LABEL_162;
            }
          }
        }
      }
      v36 = *a2;
      v37 = *((_QWORD *)*a2 + 3);
      v38 = (v37 & 0xFFFE000000000007) != 3 && (v37 & 0xFFFE000000000002) == 0;
      if (v38
        && &JSC::JSRemoteFunction::s_info == (char **)(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C)))
      {
        v186 = v204;
        if (v13 != a3)
          v186 = (unsigned int *)*((_QWORD *)*a2 + 3);
        v204 = v186;
      }
      if ((v37 & 0xFFFE000000000007) == 3)
        v39 = JSC::CallFrame::lexicalGlobalObjectFromNativeCallee(v36);
      else
        v39 = *(_QWORD *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x28);
      v40 = *(JSC::Debugger **)(v39 + 2016);
      if (v40)
      {
        *(_QWORD *)&v219 = a1;
        v142 = *((_DWORD *)a1 + 22);
        *((_DWORD *)a1 + 22) = v142 + 1;
        if (!v142)
        {
          v143 = *((_QWORD *)a1 + 2);
          if (v143)
          {
            if (*((_QWORD *)a1 + 3) == v143)
            {
              v192 = (unsigned int *)((char *)a1 + 80);
              *((_QWORD *)a1 + 2) = 0;
              do
                v193 = __ldaxr(v192);
              while (__stlxr(v193 & 0xFFFFFFEF, v192));
              *((_BYTE *)a1 + 86) = 1;
            }
          }
        }
        v144 = (unsigned int *)((char *)a1 + 80);
        v145 = *((_QWORD *)a1 + 2);
        *((_QWORD *)a1 + 2) = 0;
        v200 = *((_QWORD *)a1 + 4);
        *((_QWORD *)a1 + 4) = 0;
        if (v145)
        {
          do
            v146 = __ldaxr(v144);
          while (__stlxr(v146 & 0xFFFFFFEF, v144));
        }
        v147 = *((_QWORD *)v36 + 3);
        if ((v147 & 0xFFFE000000000007) == 3 || *(_BYTE *)(v147 + 5) == 26)
          JSC::Debugger::unwindEvent((uint64_t)v40, v36);
        else
          JSC::Debugger::didExecuteProgram(v40, v36);
        if (v145)
        {
          do
            v148 = __ldaxr(v144);
          while (__stlxr(v148 | 0x10, v144));
        }
        *((_QWORD *)a1 + 4) = v200;
        *((_QWORD *)a1 + 2) = v145;
        JSC::DeferTermination<(JSC::VMTraps::DeferAction)1>::~DeferTermination((uint64_t *)&v219);
      }
      if ((v211 & 0xFFFE000000000007) == 3)
      {
        v172 = (JSC::Wasm::Callee *)(qword_1ECF4C080 + (v211 & 0xFFFFFFFFFFFFFFFCLL));
        if (*((_BYTE *)v172 + 4) != 1)
          goto LABEL_89;
        v173 = (unsigned int **)JSC::Wasm::Callee::calleeSaveRegisters(v172);
        if (!v173)
          goto LABEL_89;
        std::optional<JSC::RegisterAtOffsetList>::optional[abi:sn180100]<JSC::RegisterAtOffsetList&,0>((uint64_t)&v219, v173);
        goto LABEL_54;
      }
      if (v205 || !v212)
        goto LABEL_89;
      v41 = v212[15];
      if (v41)
      {
        v42 = (unsigned int *)(v41 + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 + 1, v42));
      }
      v44 = *(unsigned __int8 *)(v41 + 12);
      if (v44 == 5)
      {
        v46 = (uint64_t *)(v41 + 256);
      }
      else if (v44 == 4)
      {
        v98 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
        if (v98 != -1)
        {
          *(_QWORD *)&v219 = &v224;
          v225[0] = &v219;
          std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, v225, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v46 = &JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result;
      }
      else
      {
        v45 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
        if (v45 != -1)
        {
          *(_QWORD *)&v219 = &v224;
          v225[0] = &v219;
          std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, v225, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
        }
        v46 = &JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
      }
      v47 = (unsigned int *)*v46;
      if (*v46)
      {
        v188 = *v47;
        v187 = v47 + 2;
        v199 = 8 * v188;
        v48 = (_DWORD *)WTF::fastMalloc((WTF *)(v199 + 8));
        *v48 = v188;
        if (v188)
        {
          v189 = 0;
          do
          {
            *(_QWORD *)&v48[v189 / 4 + 2] = *(_QWORD *)&v187[v189 / 4];
            v189 += 8;
          }
          while (v199 != v189);
          v190 = v46[1];
          *(_QWORD *)&v219 = v48;
          *((_QWORD *)&v219 + 1) = v190;
          LOBYTE(v220) = 1;
          if (!v41)
          {
LABEL_55:
            v53 = atomic_load(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag);
            if (v53 != -1)
            {
              v225[0] = &v223;
              v224 = v225;
              std::__call_once(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag, &v224, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::$_0 &&>>);
            }
            v54 = v220;
            if (!(_BYTE)v220)
              continue;
            if ((_QWORD)v219)
              v55 = *(unsigned int *)v219;
            else
              v55 = 0;
            v56 = (unsigned int **)JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::result;
            v57 = *a2;
            v58 = vmEntryRecord(*((_QWORD *)a1 + 6));
            v54 = v220;
            if (v55)
            {
              if ((_BYTE)v220)
              {
                v59 = 0;
                v60 = v219 + 8;
                v61 = *(unsigned int *)v219;
                while (1)
                {
                  if (v59 == v61)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1986D6878);
                  }
                  v62 = *(_QWORD *)(v60 + 8 * v59);
                  if ((v62 & 0x7Fu) >= 0x40uLL)
                    break;
                  if (((1 << (v62 & 0x7F)) & 0xA0000000) == 0)
                  {
                    v63 = *v56;
                    if (!*v56)
                      goto LABEL_152;
                    v64 = *v63;
                    if (*v63 < 2)
                    {
                      LODWORD(v65) = 0;
                      v24 = *v63;
LABEL_75:
                      if (!v24)
                        goto LABEL_152;
                      v67 = __OFSUB__(v64, (_DWORD)v65);
                      if (v64 <= v65)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1986D68F8);
                      }
                      v25 = *(_QWORD *)&v63[2 * v65 + 2];
                      if (((v25 ^ v62) & 0x7F) != 0)
                      {
LABEL_152:
                        __break(0xC471u);
                        JUMPOUT(0x1986D6514);
                      }
                    }
                    else
                    {
                      v65 = 0;
                      v23 = (char *)(v63 + 2);
                      v24 = *v63;
                      while (1)
                      {
                        v26 = v24 - 1;
                        v66 = v65 + ((v24 - 1) >> 1);
                        v67 = __OFSUB__(v64, (_DWORD)v66);
                        if (v64 <= v66)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1986D6858);
                        }
                        v25 = *(_QWORD *)&v23[8 * v66];
                        v27 = v25 ^ *(_QWORD *)(v60 + 8 * v59);
                        if (((v25 ^ *(_QWORD *)(v60 + 8 * v59)) & 0x7F) == 0)
                          break;
                        v26 >>= 1;
                        v27 = v26 + 1;
                        v24 -= v26 + 1;
                        if ((v62 & 0x7Fu) >= (v25 & 0x7Fu))
                        {
                          v68 = v26 + 1;
                        }
                        else
                        {
                          v24 = v26;
                          v68 = 0;
                        }
                        v65 += v68;
                        if (v24 <= 1)
                          goto LABEL_75;
                      }
                    }
                    v69 = (v62 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
                    if (v69 < 0 != v67)
                      v69 += 7;
                    v70 = *(_QWORD *)((char *)v57 + ((v69 << 29 >> 29) & 0xFFFFFFFFFFFFFFF8));
                    v71 = (v25 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
                    if (v25 >> 6 < 0 != v67)
                      v71 += 7;
                    *(_QWORD *)(v58 + 8 * (int)(v71 >> 3) + 24) = v70;
                  }
                  if (++v59 == v55)
                    goto LABEL_86;
                }
              }
              continue;
            }
LABEL_86:
            if ((_DWORD)v54)
            {
              v72 = v219;
              *(_QWORD *)&v219 = 0;
              if (v72)
                WTF::fastFree(v72, v23, v24, v25, v26, v27, v28, v29);
            }
LABEL_89:
            v73 = v216;
            if ((v216 & 1) != 0)
              goto LABEL_162;
            ++v213;
            if ((v211 & 0xFFFE000000000007) != 3 && (v74 = v205) != 0)
            {
              v117 = v205;
              do
              {
                v118 = v117;
                v119 = v117[2];
                v120 = v117[3] >> 60;
                v117 = (_QWORD *)(v119 & 0xFFFFFFFF8);
                if ((v119 & 1) != 0)
                  v117 = (_QWORD *)*v117;
                v121 = (v120 < 0xC) & (0x824u >> v120);
                if (v117)
                  v122 = v121;
                else
                  v122 = 0;
              }
              while ((v122 & 1) != 0);
              if (v121)
              {
                do
                {
                  JSC::StackVisitor::readInlinedFrame((JSC::StackVisitor *)&v205, v207, (JSC::CodeOrigin *)(v74 + 2));
                  v74 = v205;
                }
                while (v205);
                v208 = v209;
                JSC::StackVisitor::readFrame((JSC::StackVisitor *)&v205, v210, v129, v130, v131, v132, v133, v134);
              }
              else
              {
                JSC::StackVisitor::readInlinedFrame((JSC::StackVisitor *)&v205, v207, (JSC::CodeOrigin *)(v118 + 2));
              }
            }
            else
            {
              v75 = v209;
              v76 = v210;
              v208 = v209;
              if (!v210)
              {
                v207 = 0;
                v205 = 0;
                goto LABEL_187;
              }
              if ((*((_QWORD *)v210 + 3) & 0xFFFE000000000007) == 3)
              {
                JSC::StackVisitor::readInlinableNativeCalleeFrame((JSC::StackVisitor *)&v205, v210, v24, v25, v26, v27, v28, v29);
                goto LABEL_111;
              }
              v77 = *((_QWORD *)v210 + 2);
              if (v77)
              {
                v78 = *(_BYTE **)(v77 + 120);
                if (v78 && (v78[12] & 0xFE) == 4)
                {
                  v79 = *((unsigned int *)v210 + 9);
                  if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v78 + 72))(*(_QWORD *)(v77 + 120))
                                             + 40)
                                 + 20) > v79)
                  {
                    v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v77 + 120)
                                                                                                + 72))(*(_QWORD *)(v77 + 120))
                                                            + 40)
                                                + 8)
                                    + 8 * v79);
                    if ((v80 & 1) != 0)
                    {
                      v161 = *(_QWORD *)(v80 & 0xFFFFFFFF8);
                      if ((v80 & 2) != 0
                        || ((v162 = *(unsigned int *)((v80 & 0xFFFFFFFF8) + 8), (_DWORD)v162 != 0x3FFFFFFF)
                          ? (v163 = (_DWORD)v162 == -1)
                          : (v163 = 1),
                            v163))
                      {
                        v164 = 2;
                      }
                      else if (v162 >> 28)
                      {
                        v195 = WTF::fastMalloc((WTF *)0x10);
                        *(_QWORD *)v195 = v161;
                        *(_DWORD *)(v195 + 8) = v162;
                        v164 = 1;
                        v161 = v195;
                      }
                      else
                      {
                        v164 = v161;
                        v161 = v162 << 36;
                      }
                      v80 = v161 | v164;
                    }
                    *(_QWORD *)&v219 = v80;
                    v81 = (uint64_t *)(v80 & 0xFFFFFFFF8);
                    v82 = v80 & 0xFFFFFFFF8;
                    if ((v80 & 1) != 0)
                      v82 = *v81;
                    if (v82)
                    {
                      JSC::StackVisitor::readInlinedFrame((JSC::StackVisitor *)&v205, v76, (JSC::CodeOrigin *)&v219);
                    }
                    else
                    {
                      v214 = *((int *)v76 + 8);
                      v83 = v208;
                      v207 = v76;
                      v209 = v208;
                      v84 = *(JSC::CallFrame **)v76;
                      if (*(_QWORD *)v76 == v208)
                      {
                        v124 = vmEntryRecord(v208);
                        v85 = *(_QWORD *)(v124 + 16);
                        v209 = v85;
                        v84 = *(JSC::CallFrame **)(v124 + 8);
                        v83 = v208;
                      }
                      else
                      {
                        v85 = v208;
                      }
                      v210 = v84;
                      v216 = v216 & 0xFC | (v85 != v83);
                      v211 = *((_QWORD *)v76 + 3);
                      v205 = 0;
                      v206 = 0;
                      if ((*((_QWORD *)v76 + 3) & 0xFFFE000000000007) == 3)
                      {
                        LODWORD(v86) = 0;
                        v212 = 0;
                      }
                      else
                      {
                        v86 = (_QWORD *)*((_QWORD *)v76 + 2);
                        v212 = v86;
                        if (v86)
                        {
                          if ((v80 & 2) != 0)
                          {
                            LODWORD(v86) = -1;
                          }
                          else if ((v80 & 1) != 0)
                          {
                            LODWORD(v86) = *(_DWORD *)((v80 & 0xFFFFFFFF8) + 8);
                          }
                          else
                          {
                            v86 = (_QWORD *)(v80 >> 36);
                          }
                        }
                      }
                      v215 = (int)v86;
                      if ((*((_QWORD *)v76 + 3) & 0xFFFE000000000007) == 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1986D6BA0);
                      }
                    }
                    if ((v80 & 1) != 0 && v81)
                      WTF::fastFree(v80 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
                    goto LABEL_111;
                  }
                  v207 = 0;
                  v205 = 0;
                  v73 = v216;
LABEL_187:
                  v216 = v73 & 0xFD;
                  goto LABEL_162;
                }
                v104 = *((int *)v210 + 8);
                v207 = v210;
                v214 = v104;
                v105 = *(JSC::CallFrame **)v210;
                if (*(_QWORD *)v210 == v209)
                {
                  v135 = vmEntryRecord(v209);
                  v106 = *(_QWORD *)(v135 + 16);
                  v209 = v106;
                  v105 = *(JSC::CallFrame **)(v135 + 8);
                  v75 = v208;
                  v73 = v216;
                }
                else
                {
                  v106 = v209;
                }
                v210 = v105;
                v216 = v73 & 0xFC | (v106 != v75);
                v211 = *((_QWORD *)v76 + 3);
                v205 = 0;
                v206 = 0;
                if ((*((_QWORD *)v76 + 3) & 0xFFFE000000000007) == 3)
                {
                  LODWORD(v108) = 0;
                  v212 = 0;
                }
                else
                {
                  v212 = (_QWORD *)*((_QWORD *)v76 + 2);
                  if (!v212)
                    goto LABEL_357;
                  if ((*((_QWORD *)v76 + 3) & 0xFFFE000000000007) == 3)
                  {
LABEL_155:
                    LODWORD(v108) = 4 * *((_DWORD *)v76 + 9);
                    goto LABEL_156;
                  }
                  v102 = *((_QWORD *)v76 + 2);
                  if (v102)
                  {
                    v103 = *(_QWORD *)(v102 + 120);
                    if (!v103)
                      goto LABEL_200;
                    v107 = *(unsigned __int8 *)(v103 + 12);
                    if (v107 - 4 >= 2)
                    {
                      if (v107 <= 1)
                      {
LABEL_200:
                        __break(0xC471u);
                        JUMPOUT(0x1986D67FCLL);
                      }
                      goto LABEL_155;
                    }
                    JSC::CallFrame::codeOrigin((uint64_t)v76, (uint64_t *)&v219);
                    v150 = v219;
LABEL_236:
                    v151 = (uint64_t *)(v150 & 0xFFFFFFFF8);
                    if ((v150 & 1) != 0)
                      v151 = (uint64_t *)*v151;
                    while (v151)
                    {
                      if ((v150 & 1) != 0 && (v150 & 0xFFFFFFFF8) != 0)
                        WTF::fastFree(v150 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
                      v150 = v151[2];
                      v151 = (uint64_t *)(v150 & 0xFFFFFFFF8);
                      if ((v150 & 1) != 0)
                      {
                        v152 = *v151;
                        if ((v150 & 2) != 0
                          || ((v153 = *(unsigned int *)((v150 & 0xFFFFFFFF8) + 8), (_DWORD)v153 != 0x3FFFFFFF)
                            ? (v154 = (_DWORD)v153 == -1)
                            : (v154 = 1),
                              v154))
                        {
                          v155 = 2;
                        }
                        else if (v153 >> 28)
                        {
                          v198 = WTF::fastMalloc((WTF *)0x10);
                          *(_QWORD *)v198 = v152;
                          *(_DWORD *)(v198 + 8) = v153;
                          v155 = 1;
                          v152 = v198;
                        }
                        else
                        {
                          v155 = v152;
                          v152 = v153 << 36;
                        }
                        v150 = v152 | v155;
                        goto LABEL_236;
                      }
                    }
                    if ((v150 & 2) == 0)
                    {
                      if ((v150 & 1) == 0)
                      {
                        v108 = v150 >> 36;
                        goto LABEL_156;
                      }
                      v194 = v150 & 0xFFFFFFFF8;
                      LODWORD(v108) = *(_DWORD *)((v150 & 0xFFFFFFFF8) + 8);
LABEL_353:
                      if (v194)
                        WTF::fastFree(v194, v23, v24, v25, v26, v27, v28, v29);
                      goto LABEL_156;
                    }
                    if ((v150 & 1) != 0)
                    {
                      v194 = v150 & 0xFFFFFFFF8;
                      LODWORD(v108) = -1;
                      goto LABEL_353;
                    }
                    LODWORD(v108) = -1;
                  }
                  else
                  {
LABEL_357:
                    LODWORD(v108) = 0;
                  }
                }
LABEL_156:
                v215 = v108;
                if ((*((_QWORD *)v76 + 3) & 0xFFFE000000000007) == 3)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1986D6568);
                }
                goto LABEL_111;
              }
              v125 = *((int *)v210 + 8);
              v207 = v210;
              v214 = v125;
              v126 = *(JSC::CallFrame **)v210;
              if (*(_QWORD *)v210 == v209)
              {
                v149 = vmEntryRecord(v209);
                v127 = *(_QWORD *)(v149 + 16);
                v209 = v127;
                v126 = *(JSC::CallFrame **)(v149 + 8);
                v75 = v208;
                v73 = v216;
              }
              else
              {
                v127 = v209;
              }
              v210 = v126;
              v216 = v73 & 0xFC | (v127 != v75);
              v211 = *((_QWORD *)v76 + 3);
              v205 = 0;
              v206 = 0;
              if ((*((_QWORD *)v76 + 3) & 0xFFFE000000000007) == 3)
              {
                v128 = 0;
                v212 = 0;
              }
              else
              {
                v212 = (_QWORD *)*((_QWORD *)v76 + 2);
                if (v212)
                  v128 = JSC::CallFrame::bytecodeIndex(v76);
                else
                  v128 = 0;
              }
              v215 = v128;
              if ((*((_QWORD *)v76 + 3) & 0xFFFE000000000007) == 3)
              {
                __break(0xC471u);
                JUMPOUT(0x1986D67B0);
              }
            }
LABEL_111:
            v31 = v207;
            if (!v207)
              goto LABEL_162;
            goto LABEL_17;
          }
          goto LABEL_50;
        }
      }
      else
      {
        v48 = 0;
      }
      v49 = v46[1];
      *(_QWORD *)&v219 = v48;
      *((_QWORD *)&v219 + 1) = v49;
      LOBYTE(v220) = 1;
LABEL_50:
      v50 = (unsigned int *)(v41 + 8);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, (unsigned int *)(v41 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41);
      }
LABEL_54:
      if (!(_BYTE)v220)
        goto LABEL_89;
      goto LABEL_55;
    }
    break;
  }
  v33 = v32[15];
  if (!v33 || (*(_BYTE *)(v33 + 12) & 0xFE) != 4)
  {
    if ((*((_QWORD *)v31 + 3) & 0xFFFE000000000007) != 3)
    {
      v94 = *((_QWORD *)v31 + 2);
      if (!v94)
      {
        LODWORD(v97) = 0;
        goto LABEL_133;
      }
      v95 = *(_QWORD *)(v94 + 120);
      if (!v95)
        goto LABEL_188;
      v96 = *(unsigned __int8 *)(v95 + 12);
      if (v96 - 4 < 2)
      {
        JSC::CallFrame::codeOrigin((uint64_t)v31, (uint64_t *)&v219);
        v136 = v219;
LABEL_207:
        v137 = (uint64_t *)(v136 & 0xFFFFFFFF8);
        if ((v136 & 1) != 0)
          v137 = (uint64_t *)*v137;
        while (v137)
        {
          if ((v136 & 1) != 0 && (v136 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v136 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
          v136 = v137[2];
          v137 = (uint64_t *)(v136 & 0xFFFFFFFF8);
          if ((v136 & 1) != 0)
          {
            v138 = *v137;
            if ((v136 & 2) != 0
              || ((v139 = *(unsigned int *)((v136 & 0xFFFFFFFF8) + 8), (_DWORD)v139 != 0x3FFFFFFF)
                ? (v140 = (_DWORD)v139 == -1)
                : (v140 = 1),
                  v140))
            {
              v141 = 2;
            }
            else if (v139 >> 28)
            {
              v197 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v197 = v138;
              *(_DWORD *)(v197 + 8) = v139;
              v141 = 1;
              v138 = v197;
            }
            else
            {
              v141 = v138;
              v138 = v139 << 36;
            }
            v136 = v138 | v141;
            goto LABEL_207;
          }
        }
        if ((v136 & 2) != 0)
        {
          if ((v136 & 1) == 0)
          {
            LODWORD(v97) = -1;
            goto LABEL_133;
          }
          v191 = v136 & 0xFFFFFFFF8;
          LODWORD(v97) = -1;
        }
        else
        {
          if ((v136 & 1) == 0)
          {
            v97 = v136 >> 36;
            goto LABEL_133;
          }
          v191 = v136 & 0xFFFFFFFF8;
          LODWORD(v97) = *(_DWORD *)((v136 & 0xFFFFFFFF8) + 8);
        }
        if (v191)
          WTF::fastFree(v191, v23, v24, v25, v26, v27, v28, v29);
        goto LABEL_133;
      }
      if (v96 <= 1)
      {
LABEL_188:
        __break(0xC471u);
        JUMPOUT(0x1986D66E4);
      }
    }
    LODWORD(v97) = 4 * *((_DWORD *)v31 + 9);
LABEL_133:
    v34 = v97 >> 2;
    goto LABEL_24;
  }
  v34 = *((_DWORD *)v31 + 9);
LABEL_24:
  v35 = (unsigned int *)v32[28];
  if (!v35 || (v99 = v35[3], !(_DWORD)v99))
  {
LABEL_25:
    *(_BYTE *)a8 = 0;
    *(_QWORD *)(a8 + 40) = 0;
    *(_DWORD *)(a8 + 48) = 0;
    *(_QWORD *)(a8 + 16) = 0;
    *(_QWORD *)(a8 + 24) = 0;
    *(_QWORD *)(a8 + 8) = 0;
    *(_DWORD *)(a8 + 32) = 0;
    goto LABEL_26;
  }
  v100 = (unsigned int *)(*(_QWORD *)v35 + 8);
  v101 = 24 * v99;
  while (*(v100 - 2) > v34 || *(v100 - 1) <= v34)
  {
    v100 += 6;
    v101 -= 24;
    if (!v101)
      goto LABEL_25;
  }
  v109 = v100[1] & 3;
  v110 = *((_QWORD *)v100 + 1);
  v111 = v32[15];
  if (v111 && (*(_BYTE *)(v111 + 12) & 0xFE) == 4)
    v112 = 0;
  else
    v112 = **(_QWORD **)(v32[7] + 80) + *v100;
  *(_BYTE *)a8 = 1;
  *(_BYTE *)(a8 + 1) = v109;
  *(_QWORD *)(a8 + 8) = v110;
  *(_QWORD *)(a8 + 16) = 0;
  *(_QWORD *)(a8 + 24) = v112;
  *(_DWORD *)(a8 + 32) = 0;
  *(_QWORD *)(a8 + 40) = 0;
  *(_DWORD *)(a8 + 48) = 0;
LABEL_162:
  v113 = v217;
  v217 = 0;
  if (v113)
  {
    do
    {
      v114 = __ldaxr(v113);
      v115 = v114 - 1;
    }
    while (__stlxr(v115, v113));
    if (!v115)
    {
      atomic_store(1u, v113);
      *(_QWORD *)&v219 = v113;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)&v219, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  if (v204)
    JSC::sanitizeRemoteFunctionException(a1, (JSC::VM *)*v204, *((_QWORD *)a3 + 1), (JSC::Exception *)v25, v26, v27, v28, v29, v30);
  if (*((_DWORD *)a1 + 23307))
    JSC::VM::popAllCheckpointOSRSideStateUntil(a1, *a2);
  if (v203 != a3)
  {
    v116 = *((_DWORD *)v16 + 22) - 1;
    *((_DWORD *)v16 + 22) = v116;
    if (!v116)
    {
      if (*((_BYTE *)v16 + 93441))
      {
        if (*((_BYTE *)v16 + 86))
        {
          v169 = *((_QWORD *)v16 + 3);
          *((_QWORD *)v16 + 2) = v169;
          *((_QWORD *)v16 + 4) = v169;
          if (v169)
          {
            v170 = (unsigned int *)((char *)v16 + 80);
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 | 0x10, v170));
          }
          if (*((_BYTE *)v16 + 93443))
            *((_BYTE *)v16 + 93442) = 1;
          *((_BYTE *)v16 + 86) = 0;
        }
        else
        {
          v174 = (unsigned int *)((char *)v16 + 80);
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 | 2, v174));
        }
      }
    }
  }
}

void JSC::sanitizeRemoteFunctionException(JSC *this, JSC::VM *a2, uint64_t a3, JSC::Exception *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGlobalObject *v9;
  unsigned int *v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  char **v23;
  BOOL v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  JSC::VM *v37;

  v36 = a3;
  v37 = this;
  v9 = *(JSC::JSGlobalObject **)(16 * (a2 & 0xFFFFFFFE) + 0x28);
  *((_QWORD *)this + 2) = 0;
  v10 = (unsigned int *)((char *)this + 80);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 & 0xFFFFFFEF, v10));
  if ((a3 & 0xFFFE000000000002) == 0)
  {
    v13 = *(unsigned __int8 *)(a3 + 5);
    if ((v13 - 2) >= 3)
    {
      v21 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
      v22 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
      v23 = (char **)(16 * v21);
      if ((_DWORD)v21)
        v24 = v23 == &JSC::ErrorInstance::s_info;
      else
        v24 = 1;
      if (!v24)
      {
        do
        {
          v23 = (char **)v23[2];
          v22 = v23 != 0;
        }
        while (v23 != &JSC::ErrorInstance::s_info && v23 != 0);
      }
      if (!v22)
      {
        v12 = 0;
        goto LABEL_26;
      }
      JSC::ErrorInstance::sanitizedMessageString((JSC::ErrorInstance *)a3, v9, a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v34, a9);
      goto LABEL_5;
    }
    if (v13 == 2)
    {
      v12 = *(WTF::StringImpl **)(a3 + 8);
      if ((v12 & 1) != 0)
      {
        v12 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(a3, v9, a3, (uint64_t)a4, a9, a5, a6, a7, a8);
        if (!v12)
          goto LABEL_11;
      }
      else if (!v12)
      {
        goto LABEL_11;
      }
      *(_DWORD *)v12 += 2;
      goto LABEL_11;
    }
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v36, v9, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v34);
LABEL_5:
  v12 = v34;
LABEL_11:
  v35 = v12;
  if (v12 && *((_DWORD *)v12 + 1))
  {
    JSC::throwTypeError((unint64_t)v9, &v37, &v35);
    v12 = v35;
    goto LABEL_27;
  }
LABEL_26:
  JSC::throwTypeError(v9, &v37);
LABEL_27:
  v35 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
}

void JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,JSC::GetCatchHandlerFunctor>(JSC::CallFrame *a1, JSC::VM *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE v26[16];
  JSC::CallFrame *v27;
  uint64_t v28;
  unsigned int *v29;
  JSC::Wasm::NameSection *v30;

  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v26, a1, a2, a4, a5, a6, a7, a8);
  while (v27)
  {
    JSC::StackVisitor::unwindToMachineCodeBlockFrame((JSC::StackVisitor *)v26, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
    v16 = v28;
    if (v28)
    {
      v17 = *(_QWORD *)(v28 + 120);
      if (v17 && (*(_BYTE *)(v17 + 12) & 0xFE) == 4)
        v18 = *((_DWORD *)v27 + 9);
      else
        v18 = JSC::CallFrame::bytecodeIndex(v27) >> 2;
      v19 = *(uint64_t **)(v16 + 224);
      if (v19)
      {
        v20 = *((unsigned int *)v19 + 3);
        if ((_DWORD)v20)
        {
          v21 = *v19;
          v22 = 24 * v20;
          while ((*(_BYTE *)(v21 + 12) & 3) != 0 || *(_DWORD *)v21 > v18 || *(_DWORD *)(v21 + 4) <= v18)
          {
            v21 += 24;
            v22 -= 24;
            if (!v22)
              goto LABEL_8;
          }
          *a3 = v21;
          break;
        }
      }
LABEL_8:
      *a3 = 0;
    }
    JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v26, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
  }
  v23 = v29;
  v29 = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      v30 = (JSC::Wasm::NameSection *)v23;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v30, v9, v10, v11, v12, v13, v14, v15);
    }
  }
}

uint64_t JSC::Interpreter::checkVMEntryPermission(JSC::Interpreter *this)
{
  JSC::Interpreter *v2;
  const SourceCode *v3;
  JSC::JSGlobalObject *v4;
  JSC::JSObject *v5;

  if (!(word_1ECF4C254 | byte_1ECF4C1E3))
    return 10;
  if (!byte_1ECF4C092)
  {
    __break(0xC471u);
    JUMPOUT(0x1986D72A4);
  }
  WTF::StringLiterals::operator"" _s("VM entry disallowed");
  v2 = (JSC::Interpreter *)abort_with_reason();
  return JSC::Interpreter::executeProgram(v2, v3, v4, v5);
}

uint64_t JSC::Interpreter::executeProgram(JSC::Interpreter *this, SourceCode *a2, JSC::JSGlobalObject *a3, JSC::JSObject *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSObject *v8;
  JSC::Interpreter *v10;
  JSC::VM *v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t SlowCase;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int *v24;
  uint64_t v25;
  JSC::Interpreter *v26;
  JSC::Interpreter *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const char *v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  JSC::JSScope *v35;
  int v36;
  JSC::VM *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t v52;
  int v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::AtomStringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t (*v70)();
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  BOOL v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  WTF *v83;
  JSC::VM *v84;
  WTF *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  WTF::StringImpl **v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  JSC::Interpreter *v105;
  JSC::VM *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  JSC::VM *v110;
  char *v111;
  int v112;
  uint64_t *v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  unint64_t *v117;
  int v118;
  JSC::JSString *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  _QWORD *v123;
  JSC::VM *v124;
  unsigned int v125;
  _BYTE *v126;
  unint64_t v127;
  uint64_t v128;
  JSC::JSString *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  unsigned int v146;
  int v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  _BYTE *v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  unsigned __int16 *v161;
  uint64_t v162;
  unint64_t *v163;
  JSC::JSString *v164;
  uint64_t v165;
  int v166;
  int v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  JSC::VM *v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  char OwnStaticPropertySlot;
  unint64_t v179;
  JSC::JSGlobalObject **v180;
  JSC::JSString *v181;
  unsigned int v182;
  uint64_t v183;
  char v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unsigned int v189;
  JSC::JSGlobalObject *v190;
  unint64_t v191;
  unsigned int v192;
  char v193;
  _BYTE *v194;
  JSC::JSGlobalObject *v195;
  uint64_t v196;
  JSC::JSString *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  int v202;
  _WORD *v203;
  uint64_t v204;
  JSC::VM *v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unsigned int v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  JSC::JSObject *v213;
  unsigned int v214;
  JSC::FunctionHasExecutedCache *v215;
  unsigned int started;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  JSC::JSGlobalObject *v230;
  unint64_t UndefinedVariableError;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  JSC::JSString *v242;
  uint64_t v243;
  int hasProperty;
  JSC::JSGlobalObject **v245;
  int v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  _BYTE *v270;
  uint64_t v271;
  uint64_t v272;
  JSC::JSGlobalObject *v273;
  unint64_t NotAFunctionError;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned __int16 *v281;
  unsigned int v282;
  unsigned int *v283;
  JSC::VM *v284;
  uint64_t v285;
  JSC::JSGlobalObject *v286;
  unint64_t TDZError;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  char v293;
  uint64_t v294;
  int v295;
  _BYTE *v296;
  uint64_t v297;
  uint64_t v298;
  JSC::JSObject *v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unsigned int v303;
  uint64_t v304;
  unsigned int v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  unsigned __int16 *v314;
  uint64_t v315;
  unsigned int v316;
  int v317;
  WTF *v318;
  char v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  unsigned __int16 *v332;
  unsigned int v333;
  uint64_t v334;
  char v335;
  int v336;
  unsigned int v337;
  uint64_t v338;
  unsigned __int8 *v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  double v343;
  const unsigned __int8 *v344;
  char v345;
  int v346;
  unsigned int v347;
  uint64_t v348;
  unsigned __int8 *v349;
  int v350;
  unsigned __int8 *v351;
  uint64_t v352;
  unsigned int v353;
  unint64_t v354;
  unint64_t v355;
  double v356;
  const unsigned __int8 *v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int *v360;
  uint64_t v361;
  WTF::StringImpl *Index;
  int v363;
  char v364;
  int v365;
  _BYTE *v366;
  uint64_t v367;
  uint64_t v368;
  unsigned __int8 *v369;
  unsigned int v370;
  uint64_t v371;
  char v372;
  int v373;
  uint64_t v374;
  unsigned __int16 *v376;
  uint64_t v377;
  unsigned int v378;
  uint64_t v379;
  _DWORD *v380;
  JSC::JSGlobalObject **v381;
  int v382;
  uint64_t v383;
  int v384;
  uint64_t **v385;
  WTF::StringImpl *v386;
  unint64_t v387;
  void *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unsigned __int8 *v395;
  uint64_t v396;
  unsigned int v397;
  uint64_t v398;
  int v399;
  int v400;
  int v401;
  uint64_t v402;
  _BOOL4 v403;
  uint64_t v404;
  unsigned int *v405;
  uint64_t v406;
  WTF::StringImpl *v407;
  int v408;
  char v409;
  JSC::VM **v410;
  uint64_t v411;
  int v412;
  _BYTE *v413;
  uint64_t v414;
  unsigned __int16 *v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  unsigned __int8 *v419;
  unsigned int v420;
  uint64_t v421;
  int v422;
  int v423;
  int v424;
  uint64_t v425;
  _BOOL4 v426;
  BOOL hasExceptionsAfterHandlingTraps;
  BOOL v428;
  unsigned __int8 *v429;
  uint64_t v430;
  unsigned int v431;
  uint64_t v432;
  JSC::JSString *v433;
  unsigned __int8 *v434;
  uint64_t v435;
  unsigned int v436;
  uint64_t v437;
  JSC::JSString *v438;
  __int16 v439;
  unint64_t v440;
  unint64_t v441;
  uint64_t v442;
  unint64_t v443;
  JSC::JSGlobalObject *v444;
  JSC::VM *v445;
  WTF *v446;
  JSC::JSGlobalObject *v447;
  uint64_t *v448;
  _QWORD *v449;
  JSC::JSObject *v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  JSC::JSScope *v454;
  char *v455;
  int v456;
  _QWORD v457[2];
  int v458;
  char v459;
  __int16 v460;
  char v461;
  uint64_t v462;
  JSC::JSString *v463;
  unint64_t *v464;
  uint64_t v465;
  WTF *v466;
  uint64_t v467;
  JSC::VM *v468[2];
  JSC::JSGlobalObject *v469;
  JSC::VM *v470;
  WTF::StringImpl *v471;
  uint64_t v472;
  unint64_t v473;
  JSC::JSString *v474;
  _QWORD v475[3];
  uint64_t v476;
  char v477;
  uint64_t v478;
  uint64_t v479;
  JSC::JSGlobalObject **v480;
  uint64_t v481;
  char *v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  __int128 v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  char v490;
  uint64_t v491;
  char *v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  __int128 v496;
  uint64_t v497;
  _BYTE *v498;
  uint64_t v499;
  _BYTE v500[16];
  _QWORD *v501;
  uint64_t v502;
  _QWORD v503[18];

  v8 = a4;
  v10 = this;
  v503[16] = *MEMORY[0x1E0C80C00];
  v11 = (JSC::Interpreter *)((char *)this - 90560);
  v454 = *(JSC::JSScope **)(*(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x28) + 72);
  v12 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v454 & 0xFFFFFFFE) + 0x28);
  v469 = v12;
  v470 = (JSC::Interpreter *)((char *)this - 90560);
  v13 = *((_QWORD *)v12 + 11);
  v468[0] = (JSC::Interpreter *)((char *)this - 90560);
  v468[1] = v12;
  if (!*((_QWORD *)this + 1))
  {
    *((_QWORD *)this + 1) = v468;
    v105 = *(JSC::Interpreter **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v105)
    {
      this = (JSC::Interpreter *)WTF::Thread::initializeCurrentTLS(this);
      v105 = this;
    }
    if ((*((_BYTE *)v105 + 5) & 0x20) == 0)
    {
      *((_BYTE *)v105 + 5) |= 0x20u;
      if (BYTE2(dword_1ECF4C6C3))
        JSC::Wasm::startTrackingCurrentThread(this, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::registerThreadForMachExceptionHandling(v105, (WTF::Thread *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    v106 = v468[0];
    if (!*((_BYTE *)v468[0] + 56))
    {
      v107 = *((_QWORD *)v468[0] + 11624);
      v108 = atomic_load(&JSC::lastTimeZoneID);
      if (v107 == v108)
      {
LABEL_87:
        v12 = v469;
        goto LABEL_2;
      }
      v106 = v468[0];
    }
    JSC::VM::executeEntryScopeServicesOnEntry(v106, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_87;
  }
LABEL_2:
  *((_QWORD *)v10 - 11316) = 0;
  v14 = *((_QWORD *)v12 + 7);
  SlowCase = *(_QWORD *)(v14 + 41272);
  if (SlowCase >= *(_QWORD *)(v14 + 41280))
  {
    SlowCase = *(_QWORD *)(v14 + 41288);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM(*((JSC **)v12 + 7), (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v14 + 41248, v14 + 192, 112, 0, 0, v320, v321, v322);
      goto LABEL_4;
    }
    v188 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v14 + 41296);
    *(_QWORD *)(v14 + 41280) = SlowCase + HIDWORD(v188);
    *(_QWORD *)(v14 + 41288) = SlowCase + (int)v188;
  }
  *(_QWORD *)(v14 + 41272) = SlowCase + 112;
LABEL_4:
  *(_DWORD *)SlowCase = 0;
  JSC::ScriptExecutable::ScriptExecutable(SlowCase, *(_QWORD *)(*((_QWORD *)v12 + 7) + 41584), *((_QWORD *)v12 + 7), (uint64_t *)a2, 0, 0, 0, 0, 0, 0);
  *(_QWORD *)(SlowCase + 72) = 0;
  *(_QWORD *)(SlowCase + 80) = 0;
  *(_QWORD *)(SlowCase + 88) = -1;
  *(_QWORD *)(SlowCase + 96) = 0;
  v23 = (_QWORD *)*((_QWORD *)v12 + 7);
  if (v23[11646] || v23[11660])
  {
    v212 = *(_QWORD *)(SlowCase + 40);
    v452 = v13;
    v213 = v8;
    if (v212)
    {
      v214 = *(_DWORD *)(v212 + 112);
      if (!v214)
      {
        do
          v247 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
        while (__stlxr(v247 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
        v214 = v247 + 1;
        *(_DWORD *)(v212 + 112) = v247 + 1;
        if (v247 == -1)
        {
          __break(0xC471u);
          JUMPOUT(0x1986D8778);
        }
      }
    }
    else
    {
      v214 = 1;
    }
    v215 = (JSC::FunctionHasExecutedCache *)(v23 + 11659);
    started = JSC::ScriptExecutable::typeProfilingStartOffset((JSC::ScriptExecutable *)SlowCase);
    v217 = JSC::ScriptExecutable::typeProfilingEndOffset((JSC::ScriptExecutable *)SlowCase);
    JSC::FunctionHasExecutedCache::insertUnexecutedRange(v215, v214, started, v217, v218, v219, v220, v221);
    v8 = v213;
    v13 = v452;
  }
  if (*(_BYTE *)(v14 + 755))
    __dmb(0xAu);
  v24 = (unsigned int *)((char *)v10 - 90480);
  if (*((_DWORD *)v10 - 22620) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v16, v17, v18, v19, v20, v21, v22))
  {
    v71 = 0;
    goto LABEL_60;
  }
  v25 = *((_QWORD *)v10 - 11306);
  if (!*(_BYTE *)(v25 + 6))
    goto LABEL_226;
  v26 = *(JSC::Interpreter **)(v25 + 8);
  v27 = *(JSC::Interpreter **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v27)
    v27 = (JSC::Interpreter *)WTF::Thread::initializeCurrentTLS(0);
  if (v26 != v27)
  {
LABEL_226:
    v17 = (unint64_t)"JSValue JSC::Interpreter::executeProgram(const SourceCode &, JSGlobalObject *, JSObject *)";
    v18 = 379;
    __break(0xC471u);
    goto LABEL_227;
  }
  if ((unint64_t)&v439 < *((_QWORD *)v10 - 11319))
  {
LABEL_228:
    v71 = JSC::throwStackOverflowError((unint64_t)v469, &v470, v17, v18, v19, v20, v21, v22);
    goto LABEL_60;
  }
  if (*((_DWORD *)v10 - 22639))
  {
    JSC::Interpreter::checkVMEntryPermission(v27);
    v71 = 10;
    goto LABEL_60;
  }
  v466 = 0;
  v467 = 0;
  v28 = *(_QWORD *)(SlowCase + 40);
  if (!v28)
  {
    v317 = *((unsigned __int8 *)a2->var0.var0 + 116);
    v37 = v11;
    v35 = v454;
    if (v317)
      goto LABEL_31;
LABEL_427:
    v71 = 10;
    goto LABEL_57;
  }
  v29 = *(unsigned int *)(SlowCase + 48);
  v30 = *(_DWORD *)(SlowCase + 52);
  v31 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28);
  if (v16 <= v29)
  {
    v53 = *((unsigned __int8 *)a2->var0.var0 + 116);
    v37 = v11;
    v35 = v454;
    if (v53)
      goto LABEL_31;
    v31 = "";
    LODWORD(v33) = 0;
    goto LABEL_28;
  }
  v32 = v30 - v29;
  if ((int)v16 - (int)v29 > (v30 - v29) || (v32 = v16 - v29, (_DWORD)v29))
  {
    v33 = v32;
    v34 = v16 - v29;
    if ((v16 & 0xFF00000000) != 0)
    {
      v35 = v454;
      if (v34 >= v33)
      {
        v31 += v29;
        v33 |= 0x100000000uLL;
        goto LABEL_22;
      }
      goto LABEL_227;
    }
    v35 = v454;
    if (v34 >= v33)
    {
      v31 += 2 * v29;
      goto LABEL_22;
    }
LABEL_227:
    __break(1u);
    goto LABEL_228;
  }
  v33 = v16;
  v35 = v454;
LABEL_22:
  v36 = *((unsigned __int8 *)a2->var0.var0 + 116);
  v37 = v11;
  if (v36)
    goto LABEL_31;
  if (!v31)
    goto LABEL_427;
  if ((v33 & 0xFF00000000) == 0)
  {
    v481 = 0;
    v482 = 0;
    v480 = (JSC::JSGlobalObject **)v469;
    LOBYTE(v484) = 2;
    *((_QWORD *)&v484 + 1) = v31;
    v485 = (unint64_t)&v31[2 * v33];
    DWORD2(v486) = 0;
    *(_QWORD *)&v486 = 0;
    BYTE12(v486) = 1;
    LOBYTE(v487) = 2;
    v488 = 0;
    v489 = 0;
    v490 = 0;
    v491 = 0x800000000;
    v493 = 0u;
    v494 = 0u;
    v495 = 0u;
    v496 = 0u;
    v492 = (char *)&v493 + 8;
    v497 = 0;
    v498 = v500;
    v499 = 16;
    v501 = v503;
    v502 = 16;
    v38 = (**((uint64_t (***)(JSC::JSGlobalObject *))v469 + 410))(v469);
    v44 = JSC::LiteralParser<char16_t>::tryJSONPParse((uint64_t)&v480, (uint64_t)&v466, v38, v39, v40, v41, v42, v43);
    JSC::LiteralParser<unsigned char>::~LiteralParser((uint64_t)&v480, v45, v46, v47, v48, v49, v50, v51);
    goto LABEL_29;
  }
LABEL_28:
  v481 = 0;
  v482 = 0;
  v480 = (JSC::JSGlobalObject **)v469;
  LOBYTE(v484) = 2;
  *((_QWORD *)&v484 + 1) = v31;
  v485 = (unint64_t)&v31[v33];
  DWORD2(v486) = 0;
  *(_QWORD *)&v486 = 0;
  BYTE12(v486) = 1;
  LOBYTE(v487) = 2;
  v488 = 0;
  v489 = 0;
  v490 = 0;
  v491 = 0x800000000;
  v493 = 0u;
  v494 = 0u;
  v495 = 0u;
  v496 = 0u;
  v492 = (char *)&v493 + 8;
  v497 = 0;
  v498 = v500;
  v499 = 16;
  v501 = v503;
  v502 = 16;
  v54 = (**((uint64_t (***)(JSC::JSGlobalObject *))v469 + 410))(v469);
  v44 = JSC::LiteralParser<unsigned char>::tryJSONPParse((uint64_t)&v480, (WTF::AtomStringImpl *)&v466, v54, v55, v56, v57, v58, v59);
  JSC::LiteralParser<unsigned char>::~LiteralParser((uint64_t)&v480, v60, v61, v62, v63, v64, v65, v66);
LABEL_29:
  if (*v24 && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v16, v17, v18, v19, v20, v21, v22))
    goto LABEL_231;
  v37 = v11;
  if (!v44)
    goto LABEL_31;
  if (!HIDWORD(v467))
  {
LABEL_231:
    v71 = 0;
    goto LABEL_57;
  }
  v109 = 0;
  v71 = 0;
  v448 = &v478;
  v449 = v475;
  v110 = v11;
  v450 = v8;
  v452 = v13;
LABEL_92:
  v464 = 0;
  v465 = 0;
  v111 = (char *)v466 + 24 * v109;
  v464 = *(unint64_t **)v111;
  *(_QWORD *)v111 = 0;
  LODWORD(v465) = *((_DWORD *)v111 + 2);
  *((_DWORD *)v111 + 2) = 0;
  v112 = HIDWORD(v465);
  HIDWORD(v465) = *((_DWORD *)v111 + 3);
  *((_DWORD *)v111 + 3) = v112;
  if (v109 >= HIDWORD(v467))
  {
    __break(0xC471u);
    JUMPOUT(0x1986D9554);
  }
  v113 = (uint64_t *)*((_QWORD *)v466 + 3 * v109 + 2);
  if (v113)
    v453 = *v113;
  else
    v453 = 0;
  v114 = HIDWORD(v465);
  v451 = v109;
  if (HIDWORD(v465) != 1)
  {
    v115 = 0;
    v116 = 0;
    v463 = v469;
    LODWORD(v457[0]) = 0;
    while (1)
    {
      if (v114 <= v116)
      {
        __break(0xC471u);
        JUMPOUT(0x1986D94C0);
      }
      v117 = &v464[2 * v115];
      v118 = *((unsigned __int8 *)v117 + 12);
      if (v118 != 1)
        break;
      if (!v116)
      {
        if (v463 != v469)
        {
          __break(0xC471u);
          JUMPOUT(0x1986D8B84);
        }
        v480 = &v469;
        v481 = (uint64_t)&v464;
        v482 = (char *)v457;
        v119 = (JSC::JSString *)JSC::Interpreter::executeProgram(JSC::SourceCode const&,JSC::JSGlobalObject *,JSC::JSObject *)::$_1::operator()(&v480, *((_QWORD *)v469 + 9), v17, v18, v19, v20, v21, v22);
        if (*((_DWORD *)v110 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v110, v16, v17, v18, v19, v20, v21, v22))
          goto LABEL_396;
        if (v119)
          goto LABEL_105;
        v119 = (JSC::JSString *)JSC::Interpreter::executeProgram(JSC::SourceCode const&,JSC::JSGlobalObject *,JSC::JSObject *)::$_1::operator()(&v480, (uint64_t)v469, v17, v18, v19, v20, v21, v22);
        if (*((_DWORD *)v110 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v110, v16, v17, v18, v19, v20, v21, v22))
          goto LABEL_396;
        if (v119)
        {
LABEL_105:
          v463 = v119;
          goto LABEL_106;
        }
        if (v451)
        {
          if (HIDWORD(v465) <= LODWORD(v457[0]))
          {
            __break(0xC471u);
            JUMPOUT(0x1986D9694);
          }
          v230 = v469;
          UndefinedVariableError = JSC::createUndefinedVariableError((uint64_t)v469, (JSC::JSGlobalObject *)&v464[2 * LODWORD(v457[0])], (const JSC::Identifier *)v17);
          v237 = JSC::VM::throwException(v110, v230, UndefinedVariableError, v232, v233, v234, v235, v236);
LABEL_289:
          v167 = 1;
        }
        else
        {
          v167 = 8;
          v237 = v442;
        }
        goto LABEL_290;
      }
      v16 = (unint64_t)v469;
      v17 = *v117;
      v121 = (unint64_t)v463;
      v473 = 0xFFFFFFFF00000000;
      v474 = v463;
      LOBYTE(v476) = 0;
      v477 = 0;
      v122 = v448;
      *v448 = 0;
      v122[1] = 0;
      v123 = v449;
      *v449 = 0;
      v123[1] = 0;
      *(_QWORD *)((char *)v123 + 13) = 0;
      v447 = (JSC::JSGlobalObject *)v16;
      if ((v121 & 0xFFFE000000000002) == 0)
      {
        v124 = *(JSC::VM **)(v16 + 56);
        v125 = *(unsigned __int8 *)(v121 + 5);
        if (v125 > 0x16)
          goto LABEL_110;
        v445 = *(JSC::VM **)(v16 + 56);
        if (v125 == 2)
        {
          v358 = *(_QWORD *)(*((_QWORD *)v445 + 5244) + 1768);
          v446 = (WTF *)v17;
          if (v358 == v17)
          {
            v359 = *(_QWORD *)(v121 + 8);
            if ((v359 & 1) != 0)
              v360 = (unsigned int *)(v121 + 16);
            else
              v360 = (unsigned int *)(v359 + 4);
            v361 = *v360;
            if ((v361 & 0x80000000) != 0)
            {
              *(double *)v52.i64 = (double)v361;
              Index = (WTF::StringImpl *)(COERCE__INT64((double)v361) + 0x2000000000000);
            }
            else
            {
              Index = (WTF::StringImpl *)(v361 | 0xFFFE000000000000);
            }
            v363 = 14;
LABEL_614:
            v471 = Index;
            LODWORD(v473) = v363;
            v475[0] = 0;
            v364 = 1;
            BYTE1(v475[2]) = 1;
LABEL_615:
            if (*((_DWORD *)v445 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v445, v16, v17, v18, v19, v20, v21, v22))
            {
              goto LABEL_150;
            }
            v13 = v452;
            v17 = (unint64_t)v446;
            v16 = (unint64_t)v447;
            if ((v364 & 1) != 0)
              goto LABEL_171;
            goto LABEL_187;
          }
          if (v446)
          {
            v365 = *((_DWORD *)v446 + 4);
            if ((v365 & 0x20) == 0)
            {
              v366 = (_BYTE *)*((_QWORD *)v446 + 1);
              v367 = *((unsigned int *)v446 + 1);
              if ((v365 & 4) != 0)
              {
                if ((_DWORD)v367)
                {
                  v17 = *v366 - 48;
                  if (v17 <= 9)
                  {
                    v428 = v367 >= 2 && *v366 == 48;
                    if (!v428)
                    {
                      v429 = v366 + 1;
                      v430 = v367 - 1;
                      while (v430)
                      {
                        if (v17 > 0x19999999)
                          goto LABEL_633;
                        v431 = *v429 - 48;
                        if (v431 > 9)
                          goto LABEL_633;
                        v364 = 0;
                        v78 = __CFADD__(v431, 10 * v17);
                        v17 = v431 + 10 * (_DWORD)v17;
                        ++v429;
                        --v430;
                        if (v78)
                          goto LABEL_615;
                      }
                      goto LABEL_870;
                    }
                  }
                }
              }
              else if ((_DWORD)v367)
              {
                v17 = *(unsigned __int16 *)v366 - 48;
                if (v17 <= 9 && (*(_WORD *)v366 != 48 || v367 <= 1))
                {
                  v376 = (unsigned __int16 *)(v366 + 2);
                  v377 = v367 - 1;
                  while (v377)
                  {
                    if (v17 > 0x19999999)
                      goto LABEL_633;
                    v378 = *v376 - 48;
                    if (v378 > 9)
                      goto LABEL_633;
                    v364 = 0;
                    v78 = __CFADD__(v378, 10 * v17);
                    v17 = v378 + 10 * (_DWORD)v17;
                    ++v376;
                    --v377;
                    if (v78)
                      goto LABEL_615;
                  }
LABEL_870:
                  if ((_DWORD)v17 != -1)
                  {
                    v432 = *(_QWORD *)(v121 + 8);
                    v433 = (JSC::JSString *)((v432 & 1) != 0 ? v121 + 16 : v432 + 4);
                    if (*(_DWORD *)v433 > v17)
                    {
                      Index = (WTF::StringImpl *)JSC::JSString::getIndex((JSC::JSString *)v121, v447, v17, v18, v19, v20, v21, v22, v52);
                      if (!*((_DWORD *)v445 + 20)
                        || !JSC::VM::hasExceptionsAfterHandlingTraps(v445, v16, v17, v18, v19, v20, v21, v22))
                      {
                        v363 = 10;
                        goto LABEL_614;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_633:
          v364 = 0;
          goto LABEL_615;
        }
      }
LABEL_187:
      v168 = v17;
      v169 = v16;
      v170 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v463, v16);
      if (!v170)
      {
        v155 = 10;
        goto LABEL_152;
      }
      v124 = *(JSC::VM **)(v169 + 56);
      v17 = v168;
      v121 = v170;
LABEL_110:
      v126 = (_BYTE *)(v121 + 6);
      v127 = v17 >> 4;
      v128 = v121;
      if ((*(_BYTE *)(v121 + 6) & 8) == 0)
      {
        v129 = (JSC::JSString *)v121;
        do
        {
          v130 = *(_DWORD *)v129 & 0xFFFFFFFE;
          v131 = 16 * v130;
          if (!(_DWORD)v127 || (v127 & ~*(_DWORD *)(16 * v130 + 0x20)) != 0)
            goto LABEL_123;
          v132 = *(_QWORD *)(16 * v130 + 0x58);
          if (!v132)
          {
            v143 = *(_QWORD *)(16 * v130 + 0x40);
            if (!v143 || *(_BYTE *)(v143 + 5) != 1 && *(_DWORD *)(v143 + 80) < 2u)
              goto LABEL_123;
            v444 = (JSC::JSGlobalObject *)v121;
            v445 = v124;
            v446 = (WTF *)v17;
            v144 = v127;
            JSC::Structure::materializePropertyTable((JSC::Structure *)v131, v124, 1, (const JSC::PropertyTable *)v18, v19, v20, v21, v22);
            v124 = v445;
            v17 = (unint64_t)v446;
            v127 = v144;
            v121 = (unint64_t)v444;
            if (!v132)
              goto LABEL_123;
          }
          if (!*(_DWORD *)(v132 + 24))
            goto LABEL_123;
          v133 = *(_QWORD *)(v132 + 16);
          v134 = v133 & 0xFFFFFFFFFFFFFFFELL;
          v135 = *(unsigned int *)(v132 + 8);
          v136 = *(_DWORD *)(v17 + 16);
          if ((v133 & 1) != 0)
          {
            if ((v136 & 0x20) != 0)
              v136 = *(_DWORD *)(v17 + 32);
            v137 = *(_DWORD *)(v132 + 12);
            v138 = (v136 >> 8) & *(_QWORD *)&v137;
            v139 = *(unsigned __int8 *)(v134 + v138);
            if (!*(_BYTE *)(v134 + v138))
              goto LABEL_123;
            v140 = v134 + v135;
            v141 = 1;
            while (1)
            {
              v142 = *(_QWORD *)(v140 + 8 * (v139 - 1));
              if (v17 == (v142 & 0xFFFFFFFFFFFFLL))
                break;
              v138 = ((_DWORD)v138 + v141) & v137;
              v139 = *(unsigned __int8 *)(v134 + v138);
              ++v141;
              if (!*(_BYTE *)(v134 + v138))
                goto LABEL_123;
            }
            v20 = (v142 >> 16) & 0xFF00000000 | HIBYTE(v142);
          }
          else
          {
            if ((v136 & 0x20) != 0)
              v136 = *(_DWORD *)(v17 + 32);
            v145 = *(_DWORD *)(v132 + 12);
            v146 = v145 & (v136 >> 8);
            v147 = *(_DWORD *)(v134 + 4 * v146);
            if (!v147)
              goto LABEL_123;
            v148 = v134 + 4 * v135;
            v149 = 1;
            while (1)
            {
              v150 = (v147 - 1);
              if (v17 == *(_QWORD *)(v148 + 16 * v150))
                break;
              v146 = (v146 + v149) & v145;
              v147 = *(_DWORD *)(v134 + 4 * v146);
              ++v149;
              if (!v147)
                goto LABEL_123;
            }
            v20 = *(unsigned int *)(v148 + 16 * v150 + 8) | ((unint64_t)*(unsigned __int8 *)(v148 + 16 * v150 + 12) << 32);
          }
          if ((_DWORD)v20 != -1)
          {
            if ((int)v20 <= 63)
            {
              v157 = (uint64_t)v129 + 16;
              v158 = v20 << 32;
            }
            else
            {
              v157 = *((_QWORD *)v129 + 1) - 8;
              v158 = 0x3F00000000 - (v20 << 32);
            }
            v8 = v450;
            v19 = HIDWORD(v20);
            v18 = *(_QWORD *)(v157 + (v158 >> 29));
            if ((v18 & 0xFFFE000000000002) == 0)
            {
              v159 = *(unsigned __int8 *)(v18 + 5);
              if (v159 == 5)
              {
                v179 = v17;
                JSC::JSObject::fillGetterPropertySlot((unsigned int *)v129, (uint64_t)v124, (uint64_t)&v471, v18, SHIDWORD(v20), v20);
                v17 = v179;
                goto LABEL_170;
              }
              if (v159 == 6)
              {
                v238 = *(_DWORD *)(v131 + 16) & 3;
                v239 = *(_QWORD *)(v18 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v241 = *(_QWORD *)(v18 + 24);
                  v240 = *(_QWORD *)(v18 + 32);
                  v471 = *(WTF::StringImpl **)(v18 + 8);
                  v472 = v239;
                  LODWORD(v473) = HIDWORD(v20);
                  v475[0] = v129;
                  BYTE1(v475[2]) = 3;
                  if (v238 != 2)
                  {
                    LOBYTE(v475[2]) = 1;
                    BYTE3(v475[2]) = 1;
                    v478 = v241;
                    v479 = v240;
                    goto LABEL_170;
                  }
                  BYTE3(v475[2]) = 1;
                  v478 = v241;
                  v479 = v240;
                }
                else
                {
                  v471 = *(WTF::StringImpl **)(v18 + 8);
                  v472 = v239;
                  LODWORD(v473) = HIDWORD(v20);
                  v475[0] = v129;
                  BYTE1(v475[2]) = 3;
                  if (v238 != 2)
                    LOBYTE(v475[2]) = 1;
                }
                v13 = v452;
                v16 = (unint64_t)v447;
                goto LABEL_425;
              }
            }
LABEL_162:
            v471 = (WTF::StringImpl *)v18;
            v475[0] = v129;
            v473 = __PAIR64__(v20, v19);
            LOWORD(v475[2]) = 257;
            v13 = v452;
            goto LABEL_163;
          }
LABEL_123:
          if ((*v126 & 0x20) != 0)
          {
            v177 = v17;
            v443 = v127;
            v445 = v124;
            OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v129, v124, v17, (uint64_t)&v471);
            v124 = v445;
            v127 = v443;
            v17 = v177;
            if ((OwnStaticPropertySlot & 1) != 0)
            {
LABEL_204:
              v8 = v450;
LABEL_170:
              v16 = (unint64_t)v447;
              goto LABEL_171;
            }
          }
          v128 = *(_QWORD *)(v131 + 48);
          if (!v128)
            v128 = *((_QWORD *)v129 + 2);
          if ((v128 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v128 + 5) < 0x17u)
          {
            if (!v17)
              goto LABEL_298;
            v151 = *(_DWORD *)(v17 + 16);
            v8 = v450;
            if ((v151 & 0x20) == 0)
            {
              v152 = *(_BYTE **)(v17 + 8);
              v153 = *(unsigned int *)(v17 + 4);
              if ((v151 & 4) != 0)
              {
                if (!(_DWORD)v153)
                  goto LABEL_298;
                v154 = *v152 - 48;
                if (v154 > 9 || v153 >= 2 && *v152 == 48)
                  goto LABEL_298;
                v351 = v152 + 1;
                v352 = v153 - 1;
                while (v352)
                {
                  if (v154 > 0x19999999)
                    goto LABEL_298;
                  v353 = *v351 - 48;
                  if (v353 > 9)
                    goto LABEL_298;
                  v78 = __CFADD__(v353, 10 * v154);
                  v154 = v353 + 10 * v154;
                  ++v351;
                  --v352;
                  v155 = 10;
                  if (v78)
                  {
LABEL_299:
                    v8 = v450;
                    goto LABEL_151;
                  }
                }
                goto LABEL_191;
              }
              if ((_DWORD)v153)
              {
                v154 = *(unsigned __int16 *)v152 - 48;
                if (v154 <= 9 && (*(_WORD *)v152 != 48 || v153 <= 1))
                {
                  v161 = (unsigned __int16 *)(v152 + 2);
                  v162 = v153 - 1;
                  while (v162)
                  {
                    if (v154 <= 0x19999999)
                    {
                      v160 = *v161 - 48;
                      if (v160 <= 9)
                      {
                        v78 = __CFADD__(v160, 10 * v154);
                        v154 = v160 + 10 * v154;
                        ++v161;
                        --v162;
                        if (!v78)
                          continue;
                      }
                    }
                    goto LABEL_150;
                  }
LABEL_191:
                  if (v154 == -1)
                    goto LABEL_298;
                  v446 = (WTF *)v17;
                  v171 = (JSC::VM *)*((_QWORD *)v447 + 7);
                  while (2)
                  {
                    v445 = (JSC::VM *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE));
                    v174 = (*(uint64_t (**)(unint64_t))(16 * *((unsigned int *)v445 + 19) + 0x70))(v121);
                    if (*((_DWORD *)v171 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v171, v172, v173, v18, v19, v20, v21, v22))
                    {
                      goto LABEL_298;
                    }
                    v17 = (unint64_t)v446;
                    if ((v174 & 1) != 0)
                      goto LABEL_204;
                    v16 = (unint64_t)v447;
                    if (BYTE2(v475[2]) == 3)
                    {
                      if (BYTE4(v475[2]))
                        goto LABEL_298;
                      v175 = *(unsigned __int8 *)(v121 + 5);
                      v16 = (unint64_t)v447;
                      if (v175 != 61)
                        goto LABEL_197;
                    }
                    else
                    {
                      v175 = *(unsigned __int8 *)(v121 + 5);
                      if (v175 == 61)
                      {
                        if (BYTE2(v475[2]) == 1)
                          goto LABEL_298;
                      }
                      else
                      {
LABEL_197:
                        if ((v175 - 39) <= 0xA)
                        {
                          v354 = JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v121, v16, (uint64_t)v446, v18, v19, v20, v21, v22);
                          v16 = (unint64_t)v447;
                          if (v354 <= v154)
                            goto LABEL_298;
                        }
                      }
                    }
                    if ((*((_WORD *)v445 + 6) & 0x800) == 0 || BYTE2(v475[2]) == 3)
                    {
                      v176 = *(_QWORD *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0x30);
                      if (!v176)
                        v176 = *(_QWORD *)(v121 + 16);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v176 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0x4C) + 0xB0))(v121, v447, v17);
                      }
                      else
                      {
                        v176 = *(_QWORD *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0x30);
                        if (!v176)
                          v176 = *(_QWORD *)(v121 + 16);
                      }
                      if (*((_DWORD *)v171 + 20))
                      {
                        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v171, v16, v17, v18, v19, v20, v21, v22);
                        v16 = (unint64_t)v447;
                        if (hasExceptionsAfterHandlingTraps)
                          goto LABEL_298;
                      }
                      else
                      {
                        v16 = (unint64_t)v447;
                      }
                    }
                    if ((v176 & 0xFFFE000000000002) != 0 || (v121 = v176, *(unsigned __int8 *)(v176 + 5) <= 0x16u))
                    {
LABEL_298:
                      v155 = 10;
                      goto LABEL_299;
                    }
                    continue;
                  }
                }
              }
            }
LABEL_150:
            v155 = 10;
            goto LABEL_151;
          }
          v126 = (_BYTE *)(v128 + 6);
          v129 = (JSC::JSString *)v128;
        }
        while ((*(_BYTE *)(v128 + 6) & 8) == 0);
      }
      v443 = v127;
      v446 = (WTF *)v17;
      if (v17)
      {
        v295 = *((_DWORD *)v446 + 4);
        if ((v295 & 0x20) == 0)
        {
          v296 = (_BYTE *)*((_QWORD *)v446 + 1);
          v297 = *((unsigned int *)v446 + 1);
          if ((v295 & 4) != 0)
          {
            if ((_DWORD)v297)
            {
              v298 = *v296 - 48;
              if (v298 <= 9 && (v297 < 2 || *v296 != 48))
              {
                v395 = v296 + 1;
                v396 = v297 - 1;
                while (v396)
                {
                  if (v298 <= 0x19999999)
                  {
                    v397 = *v395 - 48;
                    if (v397 <= 9)
                    {
                      v78 = __CFADD__(v397, 10 * v298);
                      v298 = v397 + 10 * (_DWORD)v298;
                      ++v395;
                      --v396;
                      if (!v78)
                        continue;
                    }
                  }
                  goto LABEL_378;
                }
LABEL_729:
                if ((_DWORD)v298 != -1)
                {
                  v445 = (JSC::VM *)*((_QWORD *)v447 + 7);
                  while (1)
                  {
                    v398 = 16 * (*(_DWORD *)v121 & 0xFFFFFFFE);
                    v399 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v398 + 0x4C) + 0x70))(v121, v447, v298, &v471);
                    v400 = v399;
                    if (*((_DWORD *)v445 + 20))
                    {
                      v403 = JSC::VM::hasExceptionsAfterHandlingTraps(v445, v16, v17, v18, v19, v20, v21, v22);
                      if (((v403 | v400) & 1) != 0)
                      {
                        if (!v403)
                        {
LABEL_744:
                          v8 = v450;
LABEL_745:
                          v17 = (unint64_t)v446;
                          v16 = (unint64_t)v447;
LABEL_171:
                          if (BYTE1(v475[2]) == 2)
                          {
                            v155 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v471, (JSC::JSGlobalObject *)v16, v17, v18, v19, v20, v21, v22);
                            goto LABEL_151;
                          }
                          v13 = v452;
                          if (BYTE1(v475[2]) != 1)
                          {
LABEL_425:
                            v155 = JSC::PropertySlot::customGetter((uint64_t)&v471, *(JSC::VM **)(v16 + 56), (WTF::StringImpl *)v17);
                            goto LABEL_152;
                          }
LABEL_163:
                          v155 = (uint64_t)v471;
                          goto LABEL_152;
                        }
                        goto LABEL_298;
                      }
                    }
                    else if ((v399 & 1) != 0)
                    {
                      goto LABEL_744;
                    }
                    if (BYTE2(v475[2]) == 3)
                    {
                      if (BYTE4(v475[2]))
                        goto LABEL_298;
                      v401 = *(unsigned __int8 *)(v121 + 5);
                      if (v401 != 61)
                      {
LABEL_735:
                        if ((v401 - 39) <= 0xA
                          && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v121, v16, v17, v18, v19, v20, v21, v22) <= v298)
                        {
                          goto LABEL_298;
                        }
                      }
                    }
                    else
                    {
                      v401 = *(unsigned __int8 *)(v121 + 5);
                      if (v401 != 61)
                        goto LABEL_735;
                      if (BYTE2(v475[2]) == 1)
                        goto LABEL_298;
                    }
                    if ((*(_WORD *)(v398 + 12) & 0x800) == 0 || BYTE2(v475[2]) == 3)
                    {
                      v402 = *(_QWORD *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0x30);
                      if (!v402)
                        v402 = *(_QWORD *)(v121 + 16);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v402 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0x4C)
                                                                                                  + 0xB0))(v121, v447);
                      }
                      else
                      {
                        v402 = *(_QWORD *)(16 * (*(_DWORD *)v121 & 0xFFFFFFFE) + 0x30);
                        if (!v402)
                          v402 = *(_QWORD *)(v121 + 16);
                      }
                      if (*((_DWORD *)v445 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v445, v16, v17, v18, v19, v20, v21, v22))
                      {
                        goto LABEL_298;
                      }
                    }
                    if ((v402 & 0xFFFE000000000002) != 0)
                      goto LABEL_298;
                    v155 = 10;
                    v121 = v402;
                    if (*(unsigned __int8 *)(v402 + 5) <= 0x16u)
                      goto LABEL_299;
                  }
                }
              }
            }
          }
          else if ((_DWORD)v297)
          {
            v298 = *(unsigned __int16 *)v296 - 48;
            if (v298 <= 9 && (*(_WORD *)v296 != 48 || v297 <= 1))
            {
              v314 = (unsigned __int16 *)(v296 + 2);
              v315 = v297 - 1;
              while (v315)
              {
                if (v298 <= 0x19999999)
                {
                  v316 = *v314 - 48;
                  if (v316 <= 9)
                  {
                    v78 = __CFADD__(v316, 10 * v298);
                    v298 = v316 + 10 * (_DWORD)v298;
                    ++v314;
                    --v315;
                    if (!v78)
                      continue;
                  }
                }
                goto LABEL_378;
              }
              goto LABEL_729;
            }
          }
        }
      }
LABEL_378:
      v445 = (JSC::VM *)*((_QWORD *)v447 + 7);
      v8 = v450;
      while (1)
      {
        v299 = v8;
        v300 = 16 * (*(_DWORD *)v128 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v128 + 6) & 8) != 0)
        {
          v335 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, WTF *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v128 & 0xFFFFFFFE) + 0x4C) + 0x68))(v128, v447, v446, &v471);
          if (*((_DWORD *)v445 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v445, v16, v17, v18, v19, v20, v21, v22))
          {
            break;
          }
          if ((v335 & 1) != 0)
            goto LABEL_429;
          if (BYTE2(v475[2]) == 3)
          {
            if (BYTE4(v475[2]))
              break;
            v336 = *(unsigned __int8 *)(v128 + 5);
            if (v336 != 61)
            {
LABEL_493:
              if (!v446)
                goto LABEL_385;
              if ((v336 - 50) < 0xFFFFFFF5)
                goto LABEL_385;
              v337 = *((_DWORD *)v446 + 4);
              if ((v337 & 0x20) != 0)
                goto LABEL_385;
              v338 = *((unsigned int *)v446 + 1);
              if (!(_DWORD)v338)
                goto LABEL_385;
              v339 = (unsigned __int8 *)*((_QWORD *)v446 + 1);
              if ((v337 & 4) == 0)
              {
                v340 = *(unsigned __int16 *)v339;
                if ((_DWORD)v338 == 1)
                  goto LABEL_499;
                if (v340 == 45)
                {
                  v340 = *((unsigned __int16 *)v339 + 1);
                  goto LABEL_511;
                }
                if ((v340 - 48) >= 0xA && ((_DWORD)v338 != 8 || v340 != 73))
                {
LABEL_531:
                  if ((_DWORD)v338 != 3 || v340 != 78)
                    goto LABEL_385;
                }
LABEL_524:
                v441 = v441 & 0xFFFFFF0000000000 | v338 | ((unint64_t)((v337 >> 2) & 1) << 32);
                JSC::jsToNumber(v339, v441);
                WTF::numberToString(&v480, v343);
                if (WTF::equal((unint64_t)v446, (unint64_t)&v480, v344))
                  break;
                goto LABEL_385;
              }
              v340 = *v339;
              if ((_DWORD)v338 == 1)
              {
LABEL_499:
                if ((v340 - 48) < 0xA)
                  break;
                goto LABEL_385;
              }
              if (v340 == 45)
              {
                v340 = v339[1];
LABEL_511:
                if ((v340 - 48) < 0xA)
                {
                  if ((_DWORD)v338 == 2)
                    break;
                  goto LABEL_524;
                }
                if ((_DWORD)v338 != 9)
                  goto LABEL_385;
              }
              else
              {
                if ((v340 - 48) < 0xA)
                  goto LABEL_524;
                if ((_DWORD)v338 != 8)
                  goto LABEL_531;
              }
              if (v340 != 73)
                goto LABEL_385;
              goto LABEL_524;
            }
          }
          else
          {
            v336 = *(unsigned __int8 *)(v128 + 5);
            if (v336 != 61)
              goto LABEL_493;
            if (BYTE2(v475[2]) == 1)
              break;
          }
        }
        else
        {
          if ((_DWORD)v443)
          {
            if ((v443 & ~*(_DWORD *)(16 * (*(_DWORD *)v128 & 0xFFFFFFFE) + 0x20)) == 0)
            {
              JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v128 & 0xFFFFFFFE)), v445, v17, (const JSC::PropertyTable *)v18, v19, v20, v21, v22);
              if (v301)
              {
                v480 = (JSC::JSGlobalObject **)v446;
                v302 = JSC::PropertyTable::get(v301, (uint64_t *)&v480);
                v20 = v302;
                if ((_DWORD)v302 != -1)
                {
                  if ((int)v302 <= 63)
                  {
                    v306 = v128 + 16;
                    v307 = v302 << 32;
                  }
                  else
                  {
                    v306 = *(_QWORD *)(v128 + 8) - 8;
                    v307 = 0x3F00000000 - (v302 << 32);
                  }
                  v19 = HIDWORD(v302);
                  v18 = *(_QWORD *)(v306 + (v307 >> 29));
                  if ((v18 & 0xFFFE000000000002) != 0)
                    goto LABEL_404;
                  v308 = *(unsigned __int8 *)(v18 + 5);
                  if (v308 != 5)
                  {
                    if (v308 != 6)
                    {
LABEL_404:
                      v129 = (JSC::JSString *)v128;
                      goto LABEL_162;
                    }
                    v323 = *(_DWORD *)(v300 + 16) & 3;
                    v324 = *(_QWORD *)(v18 + 16);
                    if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                             + 0x4C)))
                    {
                      v326 = *(_QWORD *)(v18 + 24);
                      v325 = *(_QWORD *)(v18 + 32);
                      v471 = *(WTF::StringImpl **)(v18 + 8);
                      v472 = v324;
                      LODWORD(v473) = HIDWORD(v302);
                      v475[0] = v128;
                      BYTE1(v475[2]) = 3;
                      if (v323 != 2)
                      {
                        LOBYTE(v475[2]) = 1;
                        BYTE3(v475[2]) = 1;
                        v478 = v326;
                        v479 = v325;
                        goto LABEL_429;
                      }
                      BYTE3(v475[2]) = 1;
                      v478 = v326;
                      v479 = v325;
                    }
                    else
                    {
                      v471 = *(WTF::StringImpl **)(v18 + 8);
                      v472 = v324;
                      LODWORD(v473) = HIDWORD(v302);
                      v475[0] = v128;
                      BYTE1(v475[2]) = 3;
                      if (v323 != 2)
                        LOBYTE(v475[2]) = 1;
                    }
                    v13 = v452;
                    v17 = (unint64_t)v446;
                    v16 = (unint64_t)v447;
                    goto LABEL_425;
                  }
                  JSC::JSObject::fillGetterPropertySlot((unsigned int *)v128, (uint64_t)v445, (uint64_t)&v471, v18, SHIDWORD(v302), v302);
LABEL_429:
                  v8 = v299;
                  goto LABEL_745;
                }
              }
            }
          }
          if ((*(_BYTE *)(v128 + 6) & 0x20) != 0)
          {
            v318 = v446;
            v319 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v128, v445, (unint64_t)v446, (uint64_t)&v471);
            v17 = (unint64_t)v318;
            v8 = v299;
            v16 = (unint64_t)v447;
            if ((v319 & 1) != 0)
              goto LABEL_171;
          }
        }
LABEL_385:
        if ((*(_WORD *)(v300 + 12) & 0x800) == 0)
        {
          v303 = *(_DWORD *)v128;
LABEL_387:
          v304 = *(_QWORD *)(16 * (v303 & 0xFFFFFFFE) + 0x30);
          if (!v304)
            v304 = *(_QWORD *)(v128 + 16);
          goto LABEL_389;
        }
        v303 = *(_DWORD *)v128;
        if (BYTE2(v475[2]) == 3)
          goto LABEL_387;
        v334 = 16 * (v303 & 0xFFFFFFFE);
        if ((*(_WORD *)(v334 + 12) & 0x800) != 0)
        {
          v304 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v334 + 76) + 0xB0))(v128, v447);
        }
        else
        {
          v304 = *(_QWORD *)(v334 + 48);
          if (!v304)
            v304 = *(_QWORD *)(v128 + 16);
        }
        if (*((_DWORD *)v445 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v445, v16, v17, v18, v19, v20, v21, v22))
          break;
LABEL_389:
        if ((v304 & 0xFFFE000000000002) != 0)
          break;
        v305 = *(unsigned __int8 *)(v304 + 5);
        v155 = 10;
        v128 = v304;
        v8 = v299;
        v13 = v452;
        if (v305 <= 0x16)
          goto LABEL_152;
      }
      v155 = 10;
      v8 = v299;
LABEL_151:
      v13 = v452;
LABEL_152:
      if (v477)
      {
        v156 = *(_DWORD *)(v476 + 4);
        if (!v156)
        {
          __break(0xC471u);
          JUMPOUT(0x1986D8CECLL);
        }
        *(_DWORD *)(v476 + 4) = v156 - 1;
      }
      v463 = (JSC::JSString *)v155;
      v110 = v470;
      if (*((_DWORD *)v470 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v470, v16, v17, v18, v19, v20, v21, v22))
        {
LABEL_396:
          v237 = 0;
          goto LABEL_289;
        }
      }
LABEL_106:
      ++LODWORD(v457[0]);
      v115 = LODWORD(v457[0]);
      v114 = HIDWORD(v465);
      v120 = HIDWORD(v465) - 1;
      v116 = v457[0];
      if (v120 <= LODWORD(v457[0]))
      {
        if (!HIDWORD(v465))
        {
          __break(0xC471u);
          JUMPOUT(0x1986D955CLL);
        }
        v163 = &v464[2 * v120];
        if (HIDWORD(v465) != 1)
        {
LABEL_176:
          v164 = v463;
          v457[0] = 0;
          v457[1] = v463;
          v458 = -1;
          v459 &= 0xF8u;
          v460 = 0;
          v461 = 1;
          v462 = 0;
          if (!HIDWORD(v465))
          {
            __break(0xC471u);
            JUMPOUT(0x1986D95A8);
          }
          v165 = HIDWORD(v465) - 1;
          v166 = BYTE4(v464[2 * v165 + 1]);
          if (v166 == 1)
          {
            JSC::JSValue::put((JSC::JSValue *)&v463, v469, *v163, v453, (uint64_t)v457, v20, v21, v22);
LABEL_179:
            if (!*((_DWORD *)v110 + 20)
              || !JSC::VM::hasExceptionsAfterHandlingTraps(v110, v16, v17, v18, v19, v20, v21, v22))
            {
              goto LABEL_180;
            }
            v442 = 0;
            v167 = 1;
LABEL_343:
            v13 = v452;
            goto LABEL_181;
          }
          if (v166 == 2)
          {
            JSC::JSValue::putByIndex((JSC::JSValue *)&v463, v469, (const WTF::StringImpl *)LODWORD(v464[2 * v165 + 1]), v453, 0, v20, v21, v22);
            goto LABEL_179;
          }
          if (v166 != 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1986D8650);
          }
          v190 = v469;
          v191 = *v163;
          v473 = 0xFFFFFFFF00000000;
          LOBYTE(v476) = 0;
          v477 = 0;
          v478 = 0;
          v479 = 0;
          memset(v475, 0, 21);
          v474 = v463;
          v446 = (WTF *)v191;
          v444 = v469;
          if (((unint64_t)v463 & 0xFFFE000000000002) != 0)
            goto LABEL_773;
          v445 = (JSC::VM *)*((_QWORD *)v469 + 7);
          v192 = *((unsigned __int8 *)v463 + 5);
          if (v192 > 0x16)
            goto LABEL_245;
          if (v192 != 2)
            goto LABEL_773;
          if (*(_QWORD *)(*((_QWORD *)v445 + 5244) + 1768) == v191)
          {
            v404 = *((_QWORD *)v463 + 1);
            if ((v404 & 1) != 0)
              v405 = (unsigned int *)((char *)v463 + 16);
            else
              v405 = (unsigned int *)(v404 + 4);
            v406 = *v405;
            if ((v406 & 0x80000000) != 0)
              v407 = (WTF::StringImpl *)(COERCE__INT64((double)v406) + 0x2000000000000);
            else
              v407 = (WTF::StringImpl *)(v406 | 0xFFFE000000000000);
            v408 = 14;
LABEL_770:
            v471 = v407;
            LODWORD(v473) = v408;
            v475[0] = 0;
            v409 = 1;
            BYTE1(v475[2]) = 1;
LABEL_771:
            if (*((_DWORD *)v445 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v445, (uint64_t)v190, v17, v18, v19, v20, v21, v22))
            {
              goto LABEL_340;
            }
            v190 = v444;
            if ((v409 & 1) != 0)
              goto LABEL_356;
LABEL_773:
            v410 = (JSC::VM **)v190;
            v411 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v463, (unint64_t)v190);
            if (!v411)
              goto LABEL_340;
            v164 = (JSC::JSString *)v411;
            v190 = (JSC::JSGlobalObject *)v410;
            v445 = v410[7];
            v191 = (unint64_t)v446;
LABEL_245:
            v194 = (char *)v164 + 6;
            v193 = *((_BYTE *)v164 + 6);
            v195 = (JSC::JSGlobalObject *)(v191 >> 4);
            v196 = (uint64_t)v164;
            v447 = v195;
            if ((v193 & 8) == 0)
            {
              v197 = v164;
              while (1)
              {
                v198 = *(_DWORD *)v197 & 0xFFFFFFFE;
                v199 = 16 * v198;
                if ((_DWORD)v195)
                {
                  if ((v195 & ~*(_DWORD *)(16 * v198 + 0x20)) == 0)
                  {
                    JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v199, v445, v17, (const JSC::PropertyTable *)v18, v19, v20, v21, v22);
                    LODWORD(v195) = (_DWORD)v447;
                    if (v200)
                    {
                      v480 = (JSC::JSGlobalObject **)v446;
                      v201 = JSC::PropertyTable::get(v200, (uint64_t *)&v480);
                      LODWORD(v195) = (_DWORD)v447;
                      v20 = v201;
                      if ((_DWORD)v201 != -1)
                        break;
                    }
                  }
                }
                if ((*v194 & 0x20) != 0)
                {
                  v293 = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v197, v445, (unint64_t)v446, (uint64_t)&v471);
                  LODWORD(v195) = (_DWORD)v447;
                  if ((v293 & 1) != 0)
                  {
LABEL_356:
                    if (BYTE1(v475[2]) == 2)
                    {
                      v285 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v471, v444, v17, v18, v19, v20, v21, v22);
                      goto LABEL_360;
                    }
                    if (BYTE1(v475[2]) != 1)
                      goto LABEL_358;
                    goto LABEL_324;
                  }
                }
                v196 = *(_QWORD *)(v199 + 48);
                if (!v196)
                  v196 = *((_QWORD *)v197 + 2);
                if ((v196 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v196 + 5) < 0x17u)
                {
                  if (!v446)
                    goto LABEL_340;
                  v269 = *((_DWORD *)v446 + 4);
                  if ((v269 & 0x20) != 0)
                    goto LABEL_340;
                  v270 = (_BYTE *)*((_QWORD *)v446 + 1);
                  v271 = *((unsigned int *)v446 + 1);
                  if ((v269 & 4) != 0)
                  {
                    if (!(_DWORD)v271)
                      goto LABEL_340;
                    v272 = *v270 - 48;
                    if (v272 > 9 || v271 >= 2 && *v270 == 48)
                      goto LABEL_340;
                    v368 = v271 - 1;
                    v369 = v270 + 1;
                    while (v368)
                    {
                      if (v272 > 0x19999999)
                        goto LABEL_340;
                      v370 = *v369 - 48;
                      if (v370 > 9)
                        goto LABEL_340;
                      v78 = __CFADD__(v370, 10 * v272);
                      v272 = v370 + 10 * (_DWORD)v272;
                      --v368;
                      ++v369;
                      v211 = 10;
                      if (v78)
                        goto LABEL_325;
                    }
                  }
                  else
                  {
                    if (!(_DWORD)v271)
                      goto LABEL_340;
                    v272 = *(unsigned __int16 *)v270 - 48;
                    if (v272 > 9 || *(_WORD *)v270 == 48 && v271 > 1)
                      goto LABEL_340;
                    v280 = v271 - 1;
                    v281 = (unsigned __int16 *)(v270 + 2);
                    while (v280)
                    {
                      if (v272 > 0x19999999)
                        goto LABEL_340;
                      v282 = *v281 - 48;
                      if (v282 > 9)
                        goto LABEL_340;
                      v78 = __CFADD__(v282, 10 * v272);
                      v272 = v282 + 10 * (_DWORD)v272;
                      --v280;
                      ++v281;
                      v211 = 10;
                      if (v78)
                        goto LABEL_325;
                    }
                  }
                  if ((_DWORD)v272 == -1)
                  {
LABEL_340:
                    v211 = 10;
                    goto LABEL_325;
                  }
                  v447 = (JSC::JSGlobalObject *)*((_QWORD *)v444 + 7);
                  while (2)
                  {
                    v371 = 16 * (*(_DWORD *)v164 & 0xFFFFFFFE);
                    v372 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v371 + 0x4C) + 0x70))(v164, v444, v272, &v471);
                    if (*((_DWORD *)v447 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v447, (uint64_t)v190, v17, v18, v19, v20, v21, v22))
                    {
                      goto LABEL_340;
                    }
                    if ((v372 & 1) != 0)
                      goto LABEL_356;
                    if (BYTE2(v475[2]) == 3)
                    {
                      if (BYTE4(v475[2]))
                        goto LABEL_340;
                      v373 = *((unsigned __int8 *)v164 + 5);
                      if (v373 != 61)
                      {
LABEL_651:
                        if ((v373 - 39) <= 0xA
                          && JSC::JSArrayBufferView::length(v164, (uint64_t)v190, v17, v18, v19, v20, v21, v22) <= v272)
                        {
                          goto LABEL_340;
                        }
                      }
                    }
                    else
                    {
                      v373 = *((unsigned __int8 *)v164 + 5);
                      if (v373 != 61)
                        goto LABEL_651;
                      if (BYTE2(v475[2]) == 1)
                        goto LABEL_340;
                    }
                    if ((*(_WORD *)(v371 + 12) & 0x800) == 0 || BYTE2(v475[2]) == 3)
                    {
                      v374 = *(_QWORD *)(16 * (*(_DWORD *)v164 & 0xFFFFFFFE) + 0x30);
                      if (!v374)
                        v374 = *((_QWORD *)v164 + 2);
                    }
                    else
                    {
                      if ((*(_WORD *)(16 * (*(_DWORD *)v164 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                      {
                        v374 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16
                                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v164 & 0xFFFFFFFE) + 0x4C)
                                                                                                 + 0xB0))(v164, v444);
                      }
                      else
                      {
                        v374 = *(_QWORD *)(16 * (*(_DWORD *)v164 & 0xFFFFFFFE) + 0x30);
                        if (!v374)
                          v374 = *((_QWORD *)v164 + 2);
                      }
                      if (*((_DWORD *)v447 + 20)
                        && JSC::VM::hasExceptionsAfterHandlingTraps(v447, (uint64_t)v190, v17, v18, v19, v20, v21, v22))
                      {
                        goto LABEL_340;
                      }
                    }
                    if ((v374 & 0xFFFE000000000002) != 0)
                      goto LABEL_340;
                    v211 = 10;
                    v164 = (JSC::JSString *)v374;
                    if (*(unsigned __int8 *)(v374 + 5) <= 0x16u)
                      goto LABEL_325;
                    continue;
                  }
                }
                v194 = (_BYTE *)(v196 + 6);
                v197 = (JSC::JSString *)v196;
                if ((*(_BYTE *)(v196 + 6) & 8) != 0)
                  goto LABEL_257;
              }
              if ((int)v201 <= 63)
              {
                v248 = (uint64_t)v197 + 16;
                v249 = v201 << 32;
              }
              else
              {
                v248 = *((_QWORD *)v197 + 1) - 8;
                v249 = 0x3F00000000 - (v201 << 32);
              }
              v19 = HIDWORD(v201);
              v18 = *(_QWORD *)(v248 + (v249 >> 29));
              if ((v18 & 0xFFFE000000000002) != 0)
              {
LABEL_323:
                v471 = (WTF::StringImpl *)v18;
                v475[0] = v197;
                v473 = __PAIR64__(v20, v19);
                LOWORD(v475[2]) = 257;
LABEL_324:
                v211 = (unint64_t)v471;
                goto LABEL_325;
              }
              v250 = *(unsigned __int8 *)(v18 + 5);
              if (v250 != 5)
              {
                if (v250 != 6)
                  goto LABEL_323;
                v310 = *(_DWORD *)(v199 + 16) & 3;
                v311 = *(_QWORD *)(v18 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v313 = *(_QWORD *)(v18 + 24);
                  v312 = *(_QWORD *)(v18 + 32);
                  v471 = *(WTF::StringImpl **)(v18 + 8);
                  v472 = v311;
                  LODWORD(v473) = HIDWORD(v201);
                  v475[0] = v197;
                  goto LABEL_409;
                }
                v471 = *(WTF::StringImpl **)(v18 + 8);
                v472 = v311;
                LODWORD(v473) = HIDWORD(v201);
                v475[0] = v197;
LABEL_472:
                BYTE1(v475[2]) = 3;
                if (v310 != 2)
                  LOBYTE(v475[2]) = 1;
                goto LABEL_358;
              }
              v283 = (unsigned int *)v197;
              v284 = v445;
LABEL_355:
              JSC::JSObject::fillGetterPropertySlot(v283, (uint64_t)v284, (uint64_t)&v471, v18, v19, v20);
              goto LABEL_356;
            }
LABEL_257:
            if (!v446)
              goto LABEL_262;
            v202 = *((_DWORD *)v446 + 4);
            if ((v202 & 0x20) != 0)
              goto LABEL_262;
            v203 = (_WORD *)*((_QWORD *)v446 + 1);
            v204 = *((unsigned int *)v446 + 1);
            if ((v202 & 4) == 0)
            {
              if ((_DWORD)v204)
              {
                if ((unsigned __int16)*v203 - 48 <= 9)
                {
                  v330 = (unsigned __int16)*v203 - 48;
                  if (*v203 != 48 || v204 <= 1)
                  {
                    v331 = v204 - 1;
                    v332 = v203 + 1;
                    while (v331)
                    {
                      if (v330 <= 0x19999999)
                      {
                        v333 = *v332 - 48;
                        if (v333 <= 9)
                        {
                          v78 = __CFADD__(v333, 10 * v330);
                          v330 = v333 + 10 * (_DWORD)v330;
                          --v331;
                          ++v332;
                          if (!v78)
                            continue;
                        }
                      }
                      goto LABEL_262;
                    }
                    goto LABEL_803;
                  }
                }
              }
              goto LABEL_262;
            }
            if ((_DWORD)v204)
            {
              if (*(unsigned __int8 *)v203 - 48 <= 9)
              {
                v330 = *(unsigned __int8 *)v203 - 48;
                if (v204 < 2 || *(_BYTE *)v203 != 48)
                {
                  v418 = v204 - 1;
                  v419 = (unsigned __int8 *)v203 + 1;
                  while (v418)
                  {
                    if (v330 <= 0x19999999)
                    {
                      v420 = *v419 - 48;
                      if (v420 <= 9)
                      {
                        v78 = __CFADD__(v420, 10 * v330);
                        v330 = v420 + 10 * (_DWORD)v330;
                        --v418;
                        ++v419;
                        if (!v78)
                          continue;
                      }
                    }
                    goto LABEL_262;
                  }
LABEL_803:
                  if ((_DWORD)v330 != -1)
                  {
                    v447 = (JSC::JSGlobalObject *)*((_QWORD *)v444 + 7);
                    while (1)
                    {
                      v421 = 16 * (*(_DWORD *)v164 & 0xFFFFFFFE);
                      v422 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(v421 + 0x4C) + 0x70))(v164, v444, v330, &v471);
                      v423 = v422;
                      if (*((_DWORD *)v447 + 20))
                      {
                        v426 = JSC::VM::hasExceptionsAfterHandlingTraps(v447, (uint64_t)v190, v17, v18, v19, v20, v21, v22);
                        if (((v426 | v423) & 1) != 0)
                        {
                          if (!v426)
                            goto LABEL_356;
                          goto LABEL_340;
                        }
                      }
                      else if ((v422 & 1) != 0)
                      {
                        goto LABEL_356;
                      }
                      if (BYTE2(v475[2]) == 3)
                      {
                        if (BYTE4(v475[2]))
                          goto LABEL_340;
                        v424 = *((unsigned __int8 *)v164 + 5);
                        if (v424 == 61)
                          goto LABEL_810;
                      }
                      else
                      {
                        v424 = *((unsigned __int8 *)v164 + 5);
                        if (v424 == 61)
                        {
                          if (BYTE2(v475[2]) == 1)
                            goto LABEL_340;
                          goto LABEL_810;
                        }
                      }
                      if ((v424 - 39) <= 0xA
                        && JSC::JSArrayBufferView::length(v164, (uint64_t)v190, v17, v18, v19, v20, v21, v22) <= v330)
                      {
                        goto LABEL_340;
                      }
LABEL_810:
                      if ((*(_WORD *)(v421 + 12) & 0x800) == 0 || BYTE2(v475[2]) == 3)
                      {
                        v425 = *(_QWORD *)(16 * (*(_DWORD *)v164 & 0xFFFFFFFE) + 0x30);
                        if (!v425)
                          v425 = *((_QWORD *)v164 + 2);
                      }
                      else
                      {
                        if ((*(_WORD *)(16 * (*(_DWORD *)v164 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                        {
                          v425 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v164 & 0xFFFFFFFE) + 0x4C) + 0xB0))(v164, v444);
                        }
                        else
                        {
                          v425 = *(_QWORD *)(16 * (*(_DWORD *)v164 & 0xFFFFFFFE) + 0x30);
                          if (!v425)
                            v425 = *((_QWORD *)v164 + 2);
                        }
                        if (*((_DWORD *)v447 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v447, (uint64_t)v190, v17, v18, v19, v20, v21, v22))
                        {
                          goto LABEL_340;
                        }
                      }
                      if ((v425 & 0xFFFE000000000002) != 0)
                        goto LABEL_340;
                      v211 = 10;
                      v164 = (JSC::JSString *)v425;
                      if (*(unsigned __int8 *)(v425 + 5) <= 0x16u)
                        goto LABEL_325;
                    }
                  }
                }
              }
            }
LABEL_262:
            v205 = (JSC::VM *)*((_QWORD *)v444 + 7);
            while (2)
            {
              v206 = 16 * (*(_DWORD *)v196 & 0xFFFFFFFE);
              if ((*(_BYTE *)(v196 + 6) & 8) == 0)
              {
                if ((_DWORD)v447)
                {
                  if ((v447 & ~*(_DWORD *)(16 * (*(_DWORD *)v196 & 0xFFFFFFFE) + 0x20)) == 0)
                  {
                    JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v196 & 0xFFFFFFFE)), v205, v17, (const JSC::PropertyTable *)v18, v19, v20, v21, v22);
                    if (v207)
                    {
                      v480 = (JSC::JSGlobalObject **)v446;
                      v208 = JSC::PropertyTable::get(v207, (uint64_t *)&v480);
                      v20 = v208;
                      if ((_DWORD)v208 != -1)
                      {
                        if ((int)v208 <= 63)
                        {
                          v327 = v196 + 16;
                          v328 = v208 << 32;
                        }
                        else
                        {
                          v327 = *(_QWORD *)(v196 + 8) - 8;
                          v328 = 0x3F00000000 - (v208 << 32);
                        }
                        v19 = HIDWORD(v208);
                        v18 = *(_QWORD *)(v327 + (v328 >> 29));
                        if ((v18 & 0xFFFE000000000002) != 0)
                        {
LABEL_459:
                          v197 = (JSC::JSString *)v196;
                          goto LABEL_323;
                        }
                        v329 = *(unsigned __int8 *)(v18 + 5);
                        if (v329 == 5)
                        {
                          v283 = (unsigned int *)v196;
                          v284 = v205;
                          goto LABEL_355;
                        }
                        if (v329 != 6)
                          goto LABEL_459;
                        v310 = *(_DWORD *)(v206 + 16) & 3;
                        v341 = *(_QWORD *)(v18 + 16);
                        if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                                 + 0x4C)))
                        {
                          v471 = *(WTF::StringImpl **)(v18 + 8);
                          v472 = v341;
                          LODWORD(v473) = HIDWORD(v208);
                          v475[0] = v196;
                          goto LABEL_472;
                        }
                        v313 = *(_QWORD *)(v18 + 24);
                        v312 = *(_QWORD *)(v18 + 32);
                        v471 = *(WTF::StringImpl **)(v18 + 8);
                        v472 = v341;
                        LODWORD(v473) = HIDWORD(v208);
                        v475[0] = v196;
LABEL_409:
                        BYTE1(v475[2]) = 3;
                        if (v310 != 2)
                        {
                          LOBYTE(v475[2]) = 1;
                          BYTE3(v475[2]) = 1;
                          v478 = v313;
                          v479 = v312;
                          goto LABEL_356;
                        }
                        BYTE3(v475[2]) = 1;
                        v478 = v313;
                        v479 = v312;
LABEL_358:
                        v285 = JSC::PropertySlot::customGetter((uint64_t)&v471, *((JSC::VM **)v444 + 7), v446);
LABEL_360:
                        v211 = v285;
LABEL_325:
                        if (v477)
                        {
                          v251 = *(_DWORD *)(v476 + 4);
                          if (!v251)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1986D8FB4);
                          }
                          *(_DWORD *)(v476 + 4) = v251 - 1;
                        }
                        v110 = v470;
                        if (*((_DWORD *)v470 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v470, (uint64_t)v190, v17, v18, v19, v20, v21, v22))
                        {
LABEL_453:
                          v442 = 0;
                          goto LABEL_342;
                        }
                        JSC::getCallData(v211, (uint64_t)&v471);
                        if (!(_BYTE)v471)
                        {
                          v273 = v469;
                          NotAFunctionError = JSC::createNotAFunctionError((unint64_t)v469, v211);
                          v442 = JSC::VM::throwException(v110, v273, NotAFunctionError, v275, v276, v277, v278, v279);
                          goto LABEL_342;
                        }
                        LOBYTE(v480) = 0;
                        v481 = 0x800000000;
                        v483 = 0u;
                        v484 = 0u;
                        v485 = 0u;
                        v486 = 0u;
                        v482 = (char *)&v483 + 8;
                        v487 = 0;
                        JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v480, v453, v252, v253, v254, v255, v256, v257);
                        if (HIDWORD(v465) == 1)
                          v261 = 10;
                        else
                          v261 = (uint64_t)v463;
                        v455 = v482;
                        v456 = v481;
                        v453 = JSC::call((uint64_t *)v469, v211, (unsigned __int8 *)&v471, v261, (uint64_t)&v455, v258, v259, v260);
                        if (*((_DWORD *)v110 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v110, (uint64_t)v262, v263, v264, v265, v266, v267, v268))
                        {
                          JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v481, v262, v263, v264, v265, v266, v267, v268);
                          goto LABEL_453;
                        }
                        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v481, v262, v263, v264, v265, v266, v267, v268);
                        v8 = v450;
LABEL_180:
                        v13 = v452;
                        v71 = v453;
                        v167 = 0;
LABEL_181:
                        WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v464, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
                        if (v167 != 13 && v167)
                          goto LABEL_445;
                        v109 = v451 + 1;
                        if (v451 + 1 >= HIDWORD(v467))
                          goto LABEL_57;
                        goto LABEL_92;
                      }
                    }
                  }
                }
                if ((*(_BYTE *)(v196 + 6) & 0x20) != 0
                  && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v196, v205, (unint64_t)v446, (uint64_t)&v471) & 1) != 0)
                {
                  goto LABEL_356;
                }
LABEL_269:
                if ((*(_WORD *)(v206 + 12) & 0x800) != 0)
                {
                  v209 = *(_DWORD *)v196;
                  if (BYTE2(v475[2]) == 3)
                    goto LABEL_271;
                  v342 = 16 * (v209 & 0xFFFFFFFE);
                  if ((*(_WORD *)(v342 + 12) & 0x800) != 0)
                  {
                    v210 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(v342 + 76)
                                                                                     + 0xB0))(v196, v444);
                  }
                  else
                  {
                    v210 = *(_QWORD *)(v342 + 48);
                    if (!v210)
                      v210 = *(_QWORD *)(v196 + 16);
                  }
                  if (*((_DWORD *)v205 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v205, (uint64_t)v190, v17, v18, v19, v20, v21, v22))
                  {
                    goto LABEL_340;
                  }
                }
                else
                {
                  v209 = *(_DWORD *)v196;
LABEL_271:
                  v210 = *(_QWORD *)(16 * (v209 & 0xFFFFFFFE) + 0x30);
                  if (!v210)
                    v210 = *(_QWORD *)(v196 + 16);
                }
                if ((v210 & 0xFFFE000000000002) != 0)
                  goto LABEL_340;
                v211 = 10;
                v196 = v210;
                if (*(unsigned __int8 *)(v210 + 5) <= 0x16u)
                  goto LABEL_325;
                continue;
              }
              break;
            }
            v345 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, WTF *, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v196 & 0xFFFFFFFE) + 0x4C) + 0x68))(v196, v444, v446, &v471);
            if (*((_DWORD *)v205 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v205, (uint64_t)v190, v17, v18, v19, v20, v21, v22))
            {
              goto LABEL_340;
            }
            if ((v345 & 1) != 0)
              goto LABEL_356;
            if (BYTE2(v475[2]) == 3)
            {
              if (BYTE4(v475[2]))
                goto LABEL_340;
              v346 = *(unsigned __int8 *)(v196 + 5);
              if (v346 == 61)
                goto LABEL_269;
            }
            else
            {
              v346 = *(unsigned __int8 *)(v196 + 5);
              if (v346 == 61)
              {
                if (BYTE2(v475[2]) == 1)
                  goto LABEL_340;
                goto LABEL_269;
              }
            }
            if (!v446)
              goto LABEL_269;
            if ((v346 - 50) < 0xFFFFFFF5)
              goto LABEL_269;
            v347 = *((_DWORD *)v446 + 4);
            if ((v347 & 0x20) != 0)
              goto LABEL_269;
            v348 = *((unsigned int *)v446 + 1);
            if (!(_DWORD)v348)
              goto LABEL_269;
            v349 = (unsigned __int8 *)*((_QWORD *)v446 + 1);
            if ((v347 & 4) == 0)
            {
              v350 = *(unsigned __int16 *)v349;
              if ((_DWORD)v348 == 1)
                goto LABEL_544;
              if (v350 == 45)
              {
                v350 = *((unsigned __int16 *)v349 + 1);
                goto LABEL_577;
              }
              if ((v350 - 48) >= 0xA && ((_DWORD)v348 != 8 || v350 != 73))
              {
LABEL_624:
                if ((_DWORD)v348 != 3 || v350 != 78)
                  goto LABEL_269;
              }
LABEL_600:
              v440 = v440 & 0xFFFFFF0000000000 | v348 | ((unint64_t)((v347 >> 2) & 1) << 32);
              JSC::jsToNumber(v349, v440);
              WTF::numberToString(&v480, v356);
              if (WTF::equal((unint64_t)v446, (unint64_t)&v480, v357))
                goto LABEL_340;
              goto LABEL_269;
            }
            v350 = *v349;
            if ((_DWORD)v348 == 1)
            {
LABEL_544:
              if ((v350 - 48) < 0xA)
                goto LABEL_340;
              goto LABEL_269;
            }
            if (v350 == 45)
            {
              v350 = v349[1];
LABEL_577:
              if ((v350 - 48) < 0xA)
              {
                if ((_DWORD)v348 == 2)
                  goto LABEL_340;
                goto LABEL_600;
              }
              if ((_DWORD)v348 != 9)
                goto LABEL_269;
            }
            else
            {
              if ((v350 - 48) < 0xA)
                goto LABEL_600;
              if ((_DWORD)v348 != 8)
                goto LABEL_624;
            }
            if (v350 != 73)
              goto LABEL_269;
            goto LABEL_600;
          }
          if (v446)
          {
            v412 = *((_DWORD *)v446 + 4);
            if ((v412 & 0x20) == 0)
            {
              v413 = (_BYTE *)*((_QWORD *)v446 + 1);
              v414 = *((unsigned int *)v446 + 1);
              if ((v412 & 4) != 0)
              {
                if ((_DWORD)v414)
                {
                  v17 = *v413 - 48;
                  if (v17 <= 9 && (v414 < 2 || *v413 != 48))
                  {
                    v434 = v413 + 1;
                    v435 = v414 - 1;
                    while (v435)
                    {
                      if (v17 > 0x19999999)
                        goto LABEL_780;
                      v436 = *v434 - 48;
                      if (v436 > 9)
                        goto LABEL_780;
                      v409 = 0;
                      v78 = __CFADD__(v436, 10 * v17);
                      v17 = v436 + 10 * (_DWORD)v17;
                      ++v434;
                      --v435;
                      if (v78)
                        goto LABEL_771;
                    }
                    goto LABEL_892;
                  }
                }
              }
              else if ((_DWORD)v414)
              {
                v17 = *(unsigned __int16 *)v413 - 48;
                if (v17 <= 9 && (*(_WORD *)v413 != 48 || v414 <= 1))
                {
                  v415 = (unsigned __int16 *)(v413 + 2);
                  v416 = v414 - 1;
                  while (v416)
                  {
                    if (v17 > 0x19999999)
                      goto LABEL_780;
                    v417 = *v415 - 48;
                    if (v417 > 9)
                      goto LABEL_780;
                    v409 = 0;
                    v78 = __CFADD__(v417, 10 * v17);
                    v17 = v417 + 10 * (_DWORD)v17;
                    ++v415;
                    --v416;
                    if (v78)
                      goto LABEL_771;
                  }
LABEL_892:
                  if ((_DWORD)v17 != -1)
                  {
                    v437 = *((_QWORD *)v463 + 1);
                    v438 = (v437 & 1) != 0 ? (JSC::JSString *)((char *)v463 + 16) : (JSC::JSString *)(v437 + 4);
                    if (*(_DWORD *)v438 > v17)
                    {
                      v407 = (WTF::StringImpl *)JSC::JSString::getIndex(v463, v444, v17, v18, v19, v20, v21, v22, v52);
                      if (!*((_DWORD *)v445 + 20)
                        || !JSC::VM::hasExceptionsAfterHandlingTraps(v445, (uint64_t)v190, v17, v18, v19, v20, v21, v22))
                      {
                        v408 = 10;
                        goto LABEL_770;
                      }
                    }
                  }
                }
              }
            }
          }
LABEL_780:
          v409 = 0;
          goto LABEL_771;
        }
        v222 = *((unsigned __int8 *)v163 + 12);
LABEL_301:
        if (v222 == 2)
          goto LABEL_176;
        if (v463 != v469)
        {
          __break(0xC471u);
          JUMPOUT(0x1986D9014);
        }
        v242 = (JSC::JSString *)*((_QWORD *)v469 + 9);
        hasProperty = JSC::JSObject::hasProperty((unint64_t)v242, (uint64_t)v469, *v163, (const JSC::PropertyTable *)v18, v19, v20, v21, v22);
        if (*((_DWORD *)v110 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v110, v243, v17, v18, v19, v20, v21, v22))
        {
          goto LABEL_453;
        }
        if (!hasProperty)
          goto LABEL_313;
        v482 = (char *)0xFFFFFFFF00000000;
        LOBYTE(v485) = 0;
        BYTE8(v485) = 0;
        v486 = 0uLL;
        *(_QWORD *)&v484 = 0;
        v483 = (unint64_t)v242;
        *(_QWORD *)((char *)&v484 + 5) = 0;
        JSC::JSGlobalLexicalEnvironment::getOwnPropertySlot((uint64_t)v242, (uint64_t)v469, *v163, (uint64_t)&v480, v19, v20, v21, v22);
        if (BYTE9(v484) == 1)
        {
          v245 = v480;
        }
        else
        {
          if (BYTE9(v484) == 2)
            v294 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v480, v469, v17, v18, v19, v20, v21, v22);
          else
            v294 = JSC::PropertySlot::customGetter((uint64_t)&v480, *((JSC::VM **)v469 + 7), (WTF::StringImpl *)*v163);
          v245 = (JSC::JSGlobalObject **)v294;
        }
        if (v245)
        {
          v463 = v242;
        }
        else
        {
          v286 = v469;
          TDZError = JSC::createTDZError(v469, (JSC::JSGlobalObject *)v16);
          v442 = JSC::VM::throwException(v110, v286, TDZError, v288, v289, v290, v291, v292);
        }
        if (BYTE8(v485))
        {
          v246 = *(_DWORD *)(v485 + 4);
          if (!v246)
          {
            __break(0xC471u);
            JUMPOUT(0x1986D90C0);
          }
          *(_DWORD *)(v485 + 4) = v246 - 1;
        }
        if (v245)
        {
LABEL_313:
          v8 = v450;
          goto LABEL_176;
        }
LABEL_342:
        v167 = 1;
        v8 = v450;
        goto LABEL_343;
      }
    }
    if (v118 != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1986D8544);
    }
    v180 = (JSC::JSGlobalObject **)v469;
    v17 = LODWORD(v464[2 * v115 + 1]);
    v181 = v463;
    v482 = (char *)0xFFFFFFFF00000000;
    LOBYTE(v485) = 0;
    BYTE8(v485) = 0;
    v486 = 0uLL;
    *(_QWORD *)&v484 = 0;
    v483 = (unint64_t)v463;
    *(_QWORD *)((char *)&v484 + 5) = 0;
    v446 = (WTF *)v17;
    if (((unint64_t)v463 & 0xFFFE000000000002) == 0)
    {
      v447 = (JSC::JSGlobalObject *)*((_QWORD *)v469 + 7);
      v182 = *((unsigned __int8 *)v463 + 5);
      if (v182 > 0x16)
      {
        while (1)
        {
LABEL_211:
          v183 = 16 * (*(_DWORD *)v181 & 0xFFFFFFFE);
          v184 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject **))(16
                                                                                    * *(unsigned int *)(v183 + 0x4C)
                                                                                    + 0x70))(v181, v180);
          if (*((_DWORD *)v447 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v447, v16, v17, v18, v19, v20, v21, v22))
          {
LABEL_221:
            v187 = 10;
            goto LABEL_702;
          }
          if ((v184 & 1) != 0)
            goto LABEL_700;
          if (BYTE10(v484) == 3)
          {
            if (BYTE12(v484))
              goto LABEL_221;
            v185 = *((unsigned __int8 *)v181 + 5);
            if (v185 == 61)
              goto LABEL_216;
          }
          else
          {
            v185 = *((unsigned __int8 *)v181 + 5);
            if (v185 == 61)
            {
              if (BYTE10(v484) == 1)
                goto LABEL_221;
              goto LABEL_216;
            }
          }
          if ((v185 - 39) <= 0xA)
          {
            v355 = JSC::JSArrayBufferView::length(v181, v16, v17, v18, v19, v20, v21, v22);
            if (v355 <= (unint64_t)v446)
              goto LABEL_221;
          }
LABEL_216:
          if ((*(_WORD *)(v183 + 12) & 0x800) == 0 || BYTE10(v484) == 3)
          {
            v186 = *(_QWORD *)(16 * (*(_DWORD *)v181 & 0xFFFFFFFE) + 0x30);
            if (!v186)
              v186 = *((_QWORD *)v181 + 2);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v181 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v186 = (*(uint64_t (**)(JSC::JSString *, JSC::JSGlobalObject **))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v181 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0xB0))(v181, v180);
            }
            else
            {
              v186 = *(_QWORD *)(16 * (*(_DWORD *)v181 & 0xFFFFFFFE) + 0x30);
              if (!v186)
                v186 = *((_QWORD *)v181 + 2);
            }
            if (*((_DWORD *)v447 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v447, v16, v17, v18, v19, v20, v21, v22))
            {
              goto LABEL_221;
            }
          }
          if ((v186 & 0xFFFE000000000002) == 0)
          {
            v181 = (JSC::JSString *)v186;
            v17 = (unint64_t)v446;
            if (*(unsigned __int8 *)(v186 + 5) > 0x16u)
              continue;
          }
          goto LABEL_221;
        }
      }
      if (v182 == 2)
      {
        v379 = *((_QWORD *)v463 + 1);
        if ((v379 & 1) != 0)
          v380 = (_DWORD *)((char *)v463 + 16);
        else
          v380 = (_DWORD *)(v379 + 4);
        if (*v380 <= v17
          || (v381 = (JSC::JSGlobalObject **)JSC::JSString::getIndex(v463, v469, (uint64_t)v446, v18, v19, v20, v21, v22, v52), *((_DWORD *)v447 + 20))&& JSC::VM::hasExceptionsAfterHandlingTraps(v447, v16, v17, v18, v19, v20, v21, v22))
        {
          v382 = 0;
        }
        else
        {
          v480 = v381;
          LODWORD(v482) = 10;
          *((_QWORD *)&v483 + 1) = 0;
          v382 = 1;
          BYTE9(v484) = 1;
        }
        if (*((_DWORD *)v447 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v447, v16, v17, v18, v19, v20, v21, v22))
        {
          v187 = 0;
LABEL_702:
          v8 = v450;
          v13 = v452;
LABEL_703:
          if (BYTE8(v485))
          {
            v384 = *(_DWORD *)(v485 + 4);
            if (!v384)
            {
              __break(0xC471u);
              JUMPOUT(0x1986D9A18);
            }
            *(_DWORD *)(v485 + 4) = v384 - 1;
          }
          v463 = (JSC::JSString *)v187;
          v110 = v470;
          if (!*((_DWORD *)v470 + 20))
            goto LABEL_106;
          if (!JSC::VM::hasExceptionsAfterHandlingTraps(v470, v16, v17, v18, v19, v20, v21, v22))
          {
            v8 = v450;
            goto LABEL_106;
          }
          v237 = 0;
          v167 = 1;
          v8 = v450;
LABEL_290:
          v442 = v237;
          goto LABEL_181;
        }
        v13 = v452;
        if (v382)
        {
LABEL_700:
          if (BYTE9(v484) == 1)
          {
            v187 = (uint64_t)v480;
          }
          else if (BYTE9(v484) == 2)
          {
            v187 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v480, (JSC::JSGlobalObject *)v180, v17, v18, v19, v20, v21, v22);
          }
          else
          {
            v385 = (uint64_t **)v180[7];
            JSC::Identifier::from(v385, (unint64_t)v446, (const WTF::StringImpl *)v17, v18, v19, v20, v21, v22, (int **)&v471);
            v187 = JSC::PropertySlot::customGetter((uint64_t)&v480, (JSC::VM *)v385, v471);
            v386 = v471;
            v471 = 0;
            if (v386)
            {
              if (*(_DWORD *)v386 == 2)
              {
                WTF::StringImpl::~StringImpl(v386, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
                WTF::fastFree(v387, v388, v389, v390, v391, v392, v393, v394);
              }
              else
              {
                *(_DWORD *)v386 -= 2;
              }
            }
          }
          goto LABEL_702;
        }
      }
    }
    v383 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v463, (unint64_t)v180);
    if (v383)
    {
      v181 = (JSC::JSString *)v383;
      v447 = v180[7];
      goto LABEL_211;
    }
    v187 = 0;
    v8 = v450;
    goto LABEL_703;
  }
  v163 = v464;
  v222 = *((unsigned __int8 *)v464 + 12);
  if (*((_BYTE *)v464 + 12))
  {
    v463 = v469;
    goto LABEL_301;
  }
  if ((*(_BYTE *)((16 * *(unsigned int *)v469) | 0x12) & 0x10) != 0)
  {
    v167 = 8;
  }
  else
  {
    JSC::JSGlobalObject::createGlobalVarBinding<(JSC::BindingCreationContext)0>(v469, v464, v17, v18, v19, v20, v21, v22);
    if (!*((_DWORD *)v110 + 20)
      || !JSC::VM::hasExceptionsAfterHandlingTraps(v110, v223, v224, v225, v226, v227, v228, v229))
    {
      v480 = 0;
      v481 = (uint64_t)v469;
      LODWORD(v482) = -1;
      BYTE4(v482) &= 0xF8u;
      *(_WORD *)((char *)&v482 + 5) = 0;
      HIBYTE(v482) = 1;
      *(_QWORD *)&v483 = 0;
      if (!HIDWORD(v465))
      {
        __break(0xC471u);
        JUMPOUT(0x1986D95C8);
      }
      (*(void (**)(JSC::JSGlobalObject *, JSC::JSGlobalObject *, _QWORD, uint64_t, JSC::JSGlobalObject ***))(16 * *(unsigned int *)(16 * (*(_DWORD *)v469 & 0xFFFFFFFE) + 0x4C) + 0x48))(v469, v469, *v464, v453, &v480);
      v110 = v470;
      if (*((_DWORD *)v470 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v470, v16, v17, v18, v19, v20, v21, v22))
      {
        v442 = 0;
        v167 = 1;
      }
      else
      {
        v167 = 13;
        v71 = 10;
      }
      goto LABEL_181;
    }
    v442 = 0;
    v167 = 1;
  }
  WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v464, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
LABEL_445:
  v71 = v442;
  v428 = v167 == 8;
  v35 = v454;
  if (!v428)
    goto LABEL_57;
  v37 = v470;
LABEL_31:
  v67 = JSC::ProgramExecutable::initializeGlobalProperties((JSC::ProgramExecutable *)SlowCase, v11, v469, v35);
  if (*((_DWORD *)v37 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v37, v16, v17, v18, v19, v20, v21, v22))
    goto LABEL_237;
  if (v67)
  {
    v71 = JSC::VM::throwException(v37, v469, (unint64_t)v67, v18, v19, v20, v21, v22);
    goto LABEL_57;
  }
  if ((*v24 & 0x27) != 0
    && (*v24 & 0x20) == 0
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v16, v17, v18, v19, v20, v21, v22))
  {
LABEL_237:
    v71 = *((_QWORD *)v37 + 2);
  }
  else
  {
    if ((*(_DWORD *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x10) & 3) == 2)
      JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)v35 & 0xFFFFFFFE), v11, v35, v18, v19, v20, v21, v22);
    v68 = *v24;
    if ((*v24 & 0x20) == 0)
    {
      do
        v69 = __ldaxr(v24);
      while (__stlxr(v69 | 0x20, v24));
    }
    v471 = 0;
    if (*(_BYTE *)(SlowCase + 5) == 8
      || (*(_QWORD *)(SlowCase + 8)
        ? (v70 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
        : (v70 = 0),
          v70))
    {
      v471 = *(WTF::StringImpl **)(SlowCase + 72);
    }
    else
    {
      JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)SlowCase, (uint64_t)v11, 0, v35, 0, &v471, v21, v22);
    }
    v71 = *((_QWORD *)v470 + 2);
    if (v71)
    {
      if ((v68 & 0x20) == 0)
      {
        do
          v189 = __ldaxr(v24);
        while (__stlxr(v189 & 0xFFFFFFDF, v24));
      }
    }
    else
    {
      v72 = v471;
      v73 = *(_QWORD *)(SlowCase + 8);
      v74 = (unsigned int *)(v73 + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 + 1, v74));
      v480 = (JSC::JSGlobalObject **)v72;
      v481 = v13;
      *(_QWORD *)&v484 = 0;
      *((_QWORD *)&v484 + 1) = v469;
      v76 = 1;
      LODWORD(v482) = 1;
      if (v72)
      {
        v77 = *((_DWORD *)v72 + 7);
        v78 = v77 >= 2;
        v79 = v77 | 1;
        if (v78)
          v76 = v79;
        else
          v76 = 1;
      }
      DWORD2(v483) = v76;
      HIDWORD(v482) = 0;
      *(_QWORD *)&v483 = v8;
      if ((v68 & 0x20) == 0)
      {
        do
          v80 = __ldaxr(v24);
        while (__stlxr(v80 & 0xFFFFFFDF, v24));
      }
      v71 = vmEntryToJavaScript(*(_QWORD *)(v73 + 16), v11, (uint64_t)&v480, v18, v19, v20, v21, v22);
      do
      {
        v81 = __ldaxr(v74);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, v74));
      if (!v82)
      {
        atomic_store(1u, (unsigned int *)(v73 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73);
      }
    }
  }
LABEL_57:
  v83 = v466;
  if (HIDWORD(v467))
  {
    v86 = (WTF *)((char *)v466 + 24 * HIDWORD(v467));
    do
    {
      v87 = *((_QWORD *)v83 + 2);
      if (v87)
      {
        v88 = (uint64_t *)(v87 - 16);
        v89 = *(_QWORD *)(((v87 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
        v90 = *(uint64_t **)(v87 - 8);
        if (v90)
        {
          v91 = *v88;
          *v90 = *v88;
          *(_QWORD *)(v91 + 8) = v90;
          *v88 = 0;
          v88[1] = 0;
        }
        *v88 = *(_QWORD *)(v89 + 40);
        *(_QWORD *)(v89 + 40) = v88;
        *((_QWORD *)v83 + 2) = 0;
      }
      v92 = *((unsigned int *)v83 + 3);
      if ((_DWORD)v92)
      {
        v94 = *(WTF::StringImpl ***)v83;
        v95 = 16 * v92;
        do
        {
          v96 = *v94;
          *v94 = 0;
          if (v96)
          {
            if (*(_DWORD *)v96 == 2)
            {
              WTF::StringImpl::~StringImpl(v96, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
              WTF::fastFree(v97, v98, v99, v100, v101, v102, v103, v104);
            }
            else
            {
              *(_DWORD *)v96 -= 2;
            }
          }
          v94 += 2;
          v95 -= 16;
        }
        while (v95);
      }
      v93 = *(_QWORD *)v83;
      if (*(_QWORD *)v83)
      {
        *(_QWORD *)v83 = 0;
        *((_DWORD *)v83 + 2) = 0;
        WTF::fastFree(v93, (void *)v16, v17, v18, v19, v20, v21, v22);
      }
      v83 = (WTF *)((char *)v83 + 24);
    }
    while (v83 != v86);
    v83 = v466;
  }
  if (v83)
  {
    v466 = 0;
    LODWORD(v467) = 0;
    WTF::fastFree((unint64_t)v83, (void *)v16, v17, v18, v19, v20, v21, v22);
  }
LABEL_60:
  *((_BYTE *)v10 + 2560) = 1;
  v84 = v468[0];
  if (*((JSC::VM ***)v468[0] + 11321) == v468)
  {
    *((_QWORD *)v468[0] + 11321) = 0;
    if (*((_BYTE *)v84 + 56))
      JSC::VM::executeEntryScopeServicesOnExit(v84, (void *)v16, v17, v18, v19, v20, v21, v22);
  }
  return v71;
}

void JSC::JSGlobalObject::createGlobalVarBinding<(JSC::BindingCreationContext)0>(JSC::JSGlobalObject *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  _BYTE v18[16];
  unint64_t v19;
  JSC::JSGlobalObject *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v19 = 0xFFFFFFFF00000000;
  v21 = 0;
  v22 = 0;
  v20 = a1;
  v23 = 0x20000;
  v24 = 0;
  LOBYTE(v25) = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  JSC::JSGlobalObject::getOwnPropertySlot((uint64_t)a1, (uint64_t)a1, *a2, (uint64_t)v18, a5, a6, a7, a8);
  if ((v16 & 1) == 0)
    JSC::JSGlobalObject::addSymbolTableEntry(a1, (WTF::StringImpl **)a2, v10, v11, v12, v13, v14, v15);
  if (v26)
  {
    v17 = *(_DWORD *)(v25 + 4);
    if (v17)
      *(_DWORD *)(v25 + 4) = v17 - 1;
    else
      __break(0xC471u);
  }
}

uint64_t JSC::Interpreter::executeProgram(JSC::SourceCode const&,JSC::JSGlobalObject *,JSC::JSObject *)::$_1::operator()(JSC::JSGlobalObject ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject **v8;
  uint64_t v9;
  uint64_t v10;
  JSC::JSGlobalObject *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  _WORD *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  unsigned int *v51;
  uint64_t v52;
  JSC::JSGlobalObject **v53;
  uint64_t v54;
  int v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  BOOL v62;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int8x16_t **v67;
  int v68;
  _BYTE *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  JSC::VMTraps *v73;
  char *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  JSC::VM *v78;
  JSC::VMTraps *v79;
  char *v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  int v93;
  unsigned int v94;
  int v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  JSC::VM *v101;
  uint64_t v102;
  JSC::VMTraps *v103;
  char *v104;
  _BYTE *v105;
  char OwnStaticPropertySlot;
  _BYTE *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  unsigned __int8 *v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  size_t v123;
  char *v124;
  char *v125;
  int v126;
  uint64_t v127;
  unsigned __int8 *v128;
  JSC::VM **v129;
  uint64_t v130;
  int v131;
  int v132;
  JSC::VM **p_dst;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int16 *v141;
  uint64_t v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  unsigned __int8 *v146;
  uint64_t v147;
  unsigned int v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  int v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  char v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unsigned int v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  char v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  char v172;
  int v173;
  unint64_t v174;
  unint64_t v175;
  char v176;
  unint64_t v177;
  JSC::VMTraps *v178;
  JSC::VMTraps *v179;
  _BYTE *v180;
  char v181;
  JSC::Structure *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t (*v185)(unint64_t);
  uint64_t v186;
  unint64_t v187;
  _DWORD *v188;
  _DWORD *v189;
  _QWORD v190[2];
  uint64_t v191;
  char v192;
  int8x16_t **v193;
  uint64_t v194;
  JSC::VM *__dst;
  char v196;
  char __s[3];
  _BYTE v198[39];

  *(_QWORD *)&v198[23] = *MEMORY[0x1E0C80C00];
  v187 = 0xFFFFFFFF00000000;
  LOBYTE(v191) = 0;
  v192 = 0;
  v193 = 0;
  v194 = 0;
  v189 = 0;
  memset(v190, 0, 13);
  v188 = (_DWORD *)a2;
  v8 = a1[1];
  v9 = *(unsigned int *)a1[2];
  if (*((_DWORD *)v8 + 3) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1986DB268);
  }
  v10 = a2;
  v12 = **a1;
  v13 = *((_QWORD *)*v8 + 2 * v9);
  v14 = (_BYTE *)(a2 + 6);
  v15 = v13 >> 4;
  v16 = a2;
  if ((*(_BYTE *)(a2 + 6) & 8) == 0)
  {
    v17 = (JSC::VM *)*((_QWORD *)v12 + 7);
    v18 = a2;
    do
    {
      v19 = *(_DWORD *)v18 & 0xFFFFFFFE;
      v20 = 16 * v19;
      if (!(_DWORD)v15 || (v15 & ~*(_DWORD *)(16 * v19 + 0x20)) != 0)
        goto LABEL_31;
      v21 = *(_QWORD *)(16 * v19 + 0x58);
      if (!v21)
      {
        v22 = *(_QWORD *)(16 * v19 + 0x40);
        if (!v22 || *(_BYTE *)(v22 + 5) != 1 && *(_DWORD *)(v22 + 80) < 2u)
          goto LABEL_31;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v20, v17, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v21)
          goto LABEL_31;
      }
      if (!*(_DWORD *)(v21 + 24))
        goto LABEL_31;
      v23 = *(_QWORD *)(v21 + 16);
      v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
      v25 = *(unsigned int *)(v21 + 8);
      v26 = *(_DWORD *)(v13 + 16);
      if ((v23 & 1) != 0)
      {
        if ((v26 & 0x20) != 0)
          v26 = *(_DWORD *)(v13 + 32);
        v27 = *(_DWORD *)(v21 + 12);
        v28 = (v26 >> 8) & *(_QWORD *)&v27;
        v29 = *(unsigned __int8 *)(v24 + v28);
        if (!*(_BYTE *)(v24 + v28))
          goto LABEL_31;
        v30 = v24 + v25;
        v31 = 1;
        while (1)
        {
          v32 = *(_QWORD *)(v30 + 8 * (v29 - 1));
          if (v13 == (v32 & 0xFFFFFFFFFFFFLL))
            break;
          v28 = ((_DWORD)v28 + v31) & v27;
          v29 = *(unsigned __int8 *)(v24 + v28);
          ++v31;
          if (!*(_BYTE *)(v24 + v28))
            goto LABEL_31;
        }
        a6 = (v32 >> 16) & 0xFF00000000 | HIBYTE(v32);
      }
      else
      {
        if ((v26 & 0x20) != 0)
          v26 = *(_DWORD *)(v13 + 32);
        v33 = *(_DWORD *)(v21 + 12);
        v34 = v33 & (v26 >> 8);
        v35 = *(_DWORD *)(v24 + 4 * v34);
        if (!v35)
          goto LABEL_31;
        v36 = v24 + 4 * v25;
        v37 = 1;
        while (1)
        {
          v38 = (v35 - 1);
          if (v13 == *(_QWORD *)(v36 + 16 * v38))
            break;
          v34 = (v34 + v37) & v33;
          v35 = *(_DWORD *)(v24 + 4 * v34);
          ++v37;
          if (!v35)
            goto LABEL_31;
        }
        a6 = *(unsigned int *)(v36 + 16 * v38 + 8) | ((unint64_t)*(unsigned __int8 *)(v36 + 16 * v38 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v44 = v18 + 16;
          v45 = a6 << 32;
        }
        else
        {
          v44 = *(_QWORD *)(v18 + 8) - 8;
          v45 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v44 + (v45 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v46 = *(unsigned __int8 *)(a4 + 5);
          if (v46 != 5)
          {
            if (v46 != 6)
              goto LABEL_52;
            v64 = *(_DWORD *)(v20 + 16) & 3;
            v65 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v67 = *(int8x16_t ***)(a4 + 24);
              v66 = *(_QWORD *)(a4 + 32);
              v185 = *(uint64_t (**)(unint64_t))(a4 + 8);
              v186 = v65;
              LODWORD(v187) = HIDWORD(a6);
              v189 = (_DWORD *)v18;
              goto LABEL_90;
            }
            v185 = *(uint64_t (**)(unint64_t))(a4 + 8);
            v186 = v65;
            LODWORD(v187) = HIDWORD(a6);
            v189 = (_DWORD *)v18;
LABEL_230:
            BYTE1(v190[1]) = 3;
            if (v64 != 2)
              LOBYTE(v190[1]) = 1;
            goto LABEL_64;
          }
          v51 = (unsigned int *)v18;
          v52 = (uint64_t)v17;
LABEL_63:
          JSC::JSObject::fillGetterPropertySlot(v51, v52, (uint64_t)&v185, a4, a5, a6);
          goto LABEL_64;
        }
LABEL_52:
        v185 = (uint64_t (*)(unint64_t))a4;
        v189 = (_DWORD *)v18;
LABEL_53:
        v187 = __PAIR64__(a6, a5);
        LOWORD(v190[1]) = 257;
        goto LABEL_64;
      }
LABEL_31:
      if ((*v14 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v17, v13, (uint64_t)&v185) & 1) != 0)
      {
        goto LABEL_64;
      }
      v16 = *(_QWORD *)(v20 + 48);
      if (!v16)
        v16 = *(_QWORD *)(v18 + 16);
      if ((v16 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v16 + 5) < 0x17u)
      {
        if (!v13)
          goto LABEL_45;
        v39 = *(_DWORD *)(v13 + 16);
        if ((v39 & 0x20) != 0)
          goto LABEL_45;
        v40 = *(_WORD **)(v13 + 8);
        v41 = *(unsigned int *)(v13 + 4);
        if ((v39 & 4) == 0)
        {
          if ((_DWORD)v41)
          {
            v42 = (unsigned __int16)*v40 - 48;
            if (v42 <= 9 && (*v40 != 48 || v41 <= 1))
            {
              v47 = v40 + 1;
              v48 = v41 - 1;
              while (v48)
              {
                if (v42 > 0x19999999)
                  goto LABEL_45;
                v49 = *v47 - 48;
                if (v49 > 9)
                  goto LABEL_45;
                result = 0;
                v50 = __CFADD__(v49, 10 * v42);
                v42 = v49 + 10 * v42;
                ++v47;
                --v48;
                if (v50)
                  goto LABEL_67;
              }
              goto LABEL_258;
            }
          }
          goto LABEL_45;
        }
        if (!(_DWORD)v41)
          goto LABEL_45;
        v42 = *(unsigned __int8 *)v40 - 48;
        if (v42 > 9 || v41 >= 2 && *(_BYTE *)v40 == 48)
          goto LABEL_45;
        v146 = (unsigned __int8 *)v40 + 1;
        v147 = v41 - 1;
        while (v147)
        {
          if (v42 > 0x19999999)
            goto LABEL_45;
          v148 = *v146 - 48;
          if (v148 > 9)
            goto LABEL_45;
          result = 0;
          v50 = __CFADD__(v148, 10 * v42);
          v42 = v148 + 10 * v42;
          ++v146;
          --v147;
          if (v50)
            goto LABEL_67;
        }
LABEL_258:
        if (v42 == -1)
        {
LABEL_45:
          result = 0;
          goto LABEL_67;
        }
        v149 = v42;
        v150 = *((_QWORD *)v12 + 7);
        while (2)
        {
          v151 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
          v152 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v151 + 0x4C) + 0x70))(v10, v12, v149, &v185);
          if (*(_DWORD *)(v150 + 80))
          {
            v155 = *(_DWORD *)(v150 + 80);
            if ((v155 & 0x27) != 0 && (v155 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v150 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v150 + 16))
              goto LABEL_45;
          }
          if ((v152 & 1) != 0)
            goto LABEL_64;
          if (BYTE2(v190[1]) == 3)
          {
            if (BYTE4(v190[1]))
              goto LABEL_45;
            v153 = *(unsigned __int8 *)(v10 + 5);
            if (v153 != 61)
              goto LABEL_264;
          }
          else
          {
            v153 = *(unsigned __int8 *)(v10 + 5);
            if (v153 == 61)
            {
              if (BYTE2(v190[1]) == 1)
                goto LABEL_45;
            }
            else
            {
LABEL_264:
              if ((v153 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  v196 = 0;
                  v158 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                  v157 = v159 ? v158 : 0;
                }
                else
                {
                  v157 = *(_QWORD *)(v10 + 24);
                }
                if (v157 <= v149)
                  goto LABEL_45;
              }
            }
          }
          if ((*(_WORD *)(v151 + 12) & 0x800) == 0 || BYTE2(v190[1]) == 3)
          {
            v154 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
            if (!v154)
              v154 = *(_QWORD *)(v10 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v154 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v10 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v10, v12);
            }
            else
            {
              v154 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
              if (!v154)
                v154 = *(_QWORD *)(v10 + 16);
            }
            if (*(_DWORD *)(v150 + 80))
            {
              v156 = *(_DWORD *)(v150 + 80);
              if ((v156 & 0x27) != 0 && (v156 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v150 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v150 + 16))
                goto LABEL_45;
            }
          }
          if ((v154 & 0xFFFE000000000002) != 0)
            goto LABEL_45;
          result = 0;
          v10 = v154;
          if (*(unsigned __int8 *)(v154 + 5) <= 0x16u)
            goto LABEL_67;
          continue;
        }
      }
      v14 = (_BYTE *)(v16 + 6);
      v18 = v16;
    }
    while ((*(_BYTE *)(v16 + 6) & 8) == 0);
  }
  if (v13)
  {
    v68 = *(_DWORD *)(v13 + 16);
    if ((v68 & 0x20) == 0)
    {
      v69 = *(_BYTE **)(v13 + 8);
      v70 = *(unsigned int *)(v13 + 4);
      if ((v68 & 4) != 0)
      {
        if ((_DWORD)v70)
        {
          v71 = *v69 - 48;
          if (v71 <= 9 && (v70 < 2 || *v69 != 48))
          {
            v160 = v69 + 1;
            v161 = v70 - 1;
            while (v161)
            {
              if (v71 <= 0x19999999)
              {
                v162 = *v160 - 48;
                if (v162 <= 9)
                {
                  v50 = __CFADD__(v162, 10 * v71);
                  v71 = v162 + 10 * v71;
                  ++v160;
                  --v161;
                  if (!v50)
                    continue;
                }
              }
              goto LABEL_98;
            }
LABEL_312:
            if (v71 != -1)
            {
              v163 = v71;
              v164 = *((_QWORD *)v12 + 7);
              while (1)
              {
                v165 = 16 * (*(_DWORD *)v10 & 0xFFFFFFFE);
                v166 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v165 + 0x4C) + 0x70))(v10, v12, v163, &v185);
                v167 = v166;
                if (*(_DWORD *)(v164 + 80))
                {
                  v170 = *(_DWORD *)(v164 + 80);
                  if ((v170 & 0x27) != 0 && (v170 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v164 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  v171 = *(_QWORD *)(v164 + 16);
                  if (v171)
                    v172 = 1;
                  else
                    v172 = v167;
                  if ((v172 & 1) != 0)
                  {
                    if (!v171)
                      goto LABEL_64;
                    goto LABEL_45;
                  }
                }
                else if ((v166 & 1) != 0)
                {
                  goto LABEL_64;
                }
                if (BYTE2(v190[1]) == 3)
                {
                  if (BYTE4(v190[1]))
                    goto LABEL_45;
                  v168 = *(unsigned __int8 *)(v10 + 5);
                  if (v168 == 61)
                    goto LABEL_319;
                }
                else
                {
                  v168 = *(unsigned __int8 *)(v10 + 5);
                  if (v168 == 61)
                  {
                    if (BYTE2(v190[1]) == 1)
                      goto LABEL_45;
                    goto LABEL_319;
                  }
                }
                if ((v168 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    v196 = 0;
                    v175 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                    v174 = v176 ? v175 : 0;
                  }
                  else
                  {
                    v174 = *(_QWORD *)(v10 + 24);
                  }
                  if (v174 <= v163)
                    goto LABEL_45;
                }
LABEL_319:
                if ((*(_WORD *)(v165 + 12) & 0x800) == 0 || BYTE2(v190[1]) == 3)
                {
                  v169 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                  if (!v169)
                    v169 = *(_QWORD *)(v10 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v169 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v10, v12);
                  }
                  else
                  {
                    v169 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x30);
                    if (!v169)
                      v169 = *(_QWORD *)(v10 + 16);
                  }
                  if (*(_DWORD *)(v164 + 80))
                  {
                    v173 = *(_DWORD *)(v164 + 80);
                    if ((v173 & 0x27) != 0 && (v173 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v164 + 64), 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v164 + 16))
                      goto LABEL_45;
                  }
                }
                if ((v169 & 0xFFFE000000000002) != 0)
                  goto LABEL_45;
                result = 0;
                v10 = v169;
                if (*(unsigned __int8 *)(v169 + 5) <= 0x16u)
                  goto LABEL_67;
              }
            }
          }
        }
      }
      else if ((_DWORD)v70)
      {
        v71 = *(unsigned __int16 *)v69 - 48;
        if (v71 <= 9 && (*(_WORD *)v69 != 48 || v70 <= 1))
        {
          v141 = (unsigned __int16 *)(v69 + 2);
          v142 = v70 - 1;
          while (v142)
          {
            if (v71 <= 0x19999999)
            {
              v143 = *v141 - 48;
              if (v143 <= 9)
              {
                v50 = __CFADD__(v143, 10 * v71);
                v71 = v143 + 10 * v71;
                ++v141;
                --v142;
                if (!v50)
                  continue;
              }
            }
            goto LABEL_98;
          }
          goto LABEL_312;
        }
      }
    }
  }
LABEL_98:
  v72 = *((_QWORD *)v12 + 7);
  v73 = (JSC::VMTraps *)(v72 + 64);
  v74 = &__s[1];
  v75 = v198;
  while (1)
  {
    a3 = 16 * (*(_DWORD *)v16 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v16 + 6) & 8) == 0)
      break;
    v179 = v73;
    v180 = v75;
    v110 = v74;
    v184 = 16 * (*(_DWORD *)v16 & 0xFFFFFFFE);
    v181 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v184 + 0x4C) + 0x68))(v16, v12, v13, &v185);
    v111 = v72;
    if (*(_DWORD *)(v72 + 80))
    {
      v137 = *(_DWORD *)(v72 + 80);
      if ((v137 & 0x27) != 0 && (v137 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v179, 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v72 + 16))
        goto LABEL_45;
    }
    if ((v181 & 1) != 0)
      goto LABEL_64;
    if (BYTE2(v190[1]) == 3)
    {
      if (BYTE4(v190[1]))
        goto LABEL_45;
      v112 = *(unsigned __int8 *)(v16 + 5);
      if (v112 == 61)
        goto LABEL_198;
    }
    else
    {
      v112 = *(unsigned __int8 *)(v16 + 5);
      if (v112 == 61)
      {
        v73 = v179;
        v75 = v180;
        v74 = v110;
        a3 = v184;
        if (BYTE2(v190[1]) == 1)
          goto LABEL_45;
        goto LABEL_128;
      }
    }
    if (!v13)
      goto LABEL_198;
    if ((v112 - 50) < 0xFFFFFFF5)
      goto LABEL_198;
    v113 = *(_DWORD *)(v13 + 16);
    if ((v113 & 0x20) != 0)
      goto LABEL_198;
    v114 = *(unsigned int *)(v13 + 4);
    if (!(_DWORD)v114)
      goto LABEL_198;
    v115 = *(unsigned __int8 **)(v13 + 8);
    if ((v113 & 4) != 0)
    {
      v116 = *v115;
      if ((_DWORD)v114 == 1)
      {
LABEL_153:
        v73 = v179;
        v75 = v180;
        v74 = v110;
        a3 = v184;
        if ((v116 - 48) < 0xA)
          goto LABEL_45;
        goto LABEL_128;
      }
      if (v116 == 45)
      {
        v116 = v115[1];
        goto LABEL_157;
      }
      if ((v116 - 48) < 0xA)
        goto LABEL_168;
      if ((_DWORD)v114 == 8)
        goto LABEL_167;
    }
    else
    {
      v116 = *(unsigned __int16 *)v115;
      if ((_DWORD)v114 == 1)
        goto LABEL_153;
      if (v116 == 45)
      {
        v116 = *((unsigned __int16 *)v115 + 1);
LABEL_157:
        if ((v116 - 48) < 0xA)
        {
          if ((_DWORD)v114 == 2)
            goto LABEL_45;
          goto LABEL_168;
        }
        if ((_DWORD)v114 != 9)
          goto LABEL_198;
LABEL_167:
        if (v116 != 73)
          goto LABEL_198;
        goto LABEL_168;
      }
      if ((v116 - 48) < 0xA || (_DWORD)v114 == 8 && v116 == 73)
        goto LABEL_168;
    }
    if ((_DWORD)v114 != 3 || v116 != 78)
      goto LABEL_198;
LABEL_168:
    v177 = v177 & 0xFFFFFF0000000000 | v114 | ((unint64_t)((v113 >> 2) & 1) << 32);
    JSC::jsToNumber(v115, v177);
    v118 = (v117 >> 52) & 0x7FF;
    if ((_DWORD)v118 == 2047)
    {
      if ((v117 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v119 = v180;
      }
      else
      {
        if ((v117 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v125 = v110;
        }
        else
        {
          v125 = __s;
        }
        *(_QWORD *)v125 = 0x7974696E69666E49;
        v119 = v125 + 8;
      }
      goto LABEL_182;
    }
    v120 = v117 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v117 & 0x8000000000000000) != 0 && v120)
    {
      __s[0] = 45;
      v121 = v110;
    }
    else
    {
      if (!v120)
      {
        __s[0] = 48;
        v119 = v110;
        goto LABEL_182;
      }
      v121 = __s;
    }
    v122 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v117 & 0x800FFFFFFFFFFFFFLL, v118);
    v119 = WTF::dragonbox::detail::to_shortest(v122, v123, (uint64_t)v121, v124);
LABEL_182:
    *v119 = 0;
    v126 = strlen(__s);
    memcpy(&__dst, __s, v126);
    *((_BYTE *)&__dst + v126) = 0;
    v127 = *(unsigned int *)(v13 + 4);
    v128 = *(unsigned __int8 **)(v13 + 8);
    if ((*(_BYTE *)(v13 + 16) & 4) != 0)
    {
      if ((_DWORD)v127)
      {
        p_dst = &__dst;
        v134 = *(unsigned int *)(v13 + 4);
        do
        {
          v136 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::VM **)((char *)p_dst + 1);
          v135 = v136;
          if (!v136 || *v128 != v135)
            goto LABEL_198;
          ++v128;
        }
        while (--v134);
      }
    }
    else if ((_DWORD)v127)
    {
      v129 = &__dst;
      v130 = *(unsigned int *)(v13 + 4);
      while (1)
      {
        v132 = *(unsigned __int8 *)v129;
        v129 = (JSC::VM **)((char *)v129 + 1);
        v131 = v132;
        if (!v132 || *(unsigned __int16 *)v128 != v131)
          break;
        v128 += 2;
        if (!--v130)
          goto LABEL_194;
      }
LABEL_198:
      v73 = v179;
      v75 = v180;
      v74 = v110;
      v72 = v111;
      a3 = v184;
      goto LABEL_128;
    }
LABEL_194:
    v73 = v179;
    v75 = v180;
    v74 = v110;
    v72 = v111;
    a3 = v184;
    if (!*((_BYTE *)&__dst + v127))
      goto LABEL_45;
LABEL_128:
    if ((*(_WORD *)(a3 + 12) & 0x800) != 0)
    {
      v99 = *(_DWORD *)v16;
      if (BYTE2(v190[1]) != 3)
      {
        v107 = v75;
        v108 = v74;
        v178 = v73;
        v109 = 16 * (v99 & 0xFFFFFFFE);
        if ((*(_WORD *)(v109 + 12) & 0x800) != 0)
        {
          v100 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v109 + 76) + 0xB0))(v16, v12);
        }
        else
        {
          v100 = *(_QWORD *)(v109 + 48);
          if (!v100)
            v100 = *(_QWORD *)(v16 + 16);
        }
        if (*(_DWORD *)(v72 + 80))
        {
          v138 = *(_DWORD *)(v72 + 80);
          if ((v138 & 0x27) != 0 && (v138 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v178, 7u, a3, a4, a5, a6, a7, a8);
          v73 = v178;
          v74 = v108;
          v75 = v107;
          if (*(_QWORD *)(v72 + 16))
            goto LABEL_45;
        }
        else
        {
          v73 = v178;
          v74 = v108;
          v75 = v107;
        }
        goto LABEL_132;
      }
    }
    else
    {
      v99 = *(_DWORD *)v16;
    }
    v100 = *(_QWORD *)(16 * (v99 & 0xFFFFFFFE) + 0x30);
    if (!v100)
      v100 = *(_QWORD *)(v16 + 16);
LABEL_132:
    if ((v100 & 0xFFFE000000000002) != 0)
      goto LABEL_45;
    result = 0;
    v16 = v100;
    if (*(unsigned __int8 *)(v100 + 5) <= 0x16u)
      goto LABEL_67;
  }
  if (!(_DWORD)v15 || (v15 & ~*(_DWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_127;
  v76 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x58);
  if (!v76)
  {
    v77 = *(_QWORD *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x40);
    if (!v77 || *(_BYTE *)(v77 + 5) != 1 && *(_DWORD *)(v77 + 80) < 2u)
      goto LABEL_127;
    v78 = (JSC::VM *)v72;
    v182 = (JSC::Structure *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE));
    v79 = v73;
    v80 = v74;
    v81 = v72;
    v82 = v75;
    JSC::Structure::materializePropertyTable(v182, v78, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    a3 = (uint64_t)v182;
    v75 = v82;
    v72 = v81;
    v74 = v80;
    v73 = v79;
    if (!v76)
      goto LABEL_127;
  }
  if (!*(_DWORD *)(v76 + 24))
    goto LABEL_127;
  v83 = *(_QWORD *)(v76 + 16);
  v84 = v83 & 0xFFFFFFFFFFFFFFFELL;
  v85 = *(unsigned int *)(v76 + 8);
  v86 = *(_DWORD *)(v13 + 16);
  if ((v83 & 1) != 0)
  {
    if ((v86 & 0x20) != 0)
      v86 = *(_DWORD *)(v13 + 32);
    v87 = *(_DWORD *)(v76 + 12);
    v88 = (v86 >> 8) & *(_QWORD *)&v87;
    v89 = *(unsigned __int8 *)(v84 + v88);
    if (*(_BYTE *)(v84 + v88))
    {
      v90 = v84 + v85;
      v91 = 1;
      while (1)
      {
        v92 = *(_QWORD *)(v90 + 8 * (v89 - 1));
        if (v13 == (v92 & 0xFFFFFFFFFFFFLL))
          break;
        v88 = ((_DWORD)v88 + v91) & v87;
        v89 = *(unsigned __int8 *)(v84 + v88);
        ++v91;
        if (!*(_BYTE *)(v84 + v88))
          goto LABEL_127;
      }
      a6 = (v92 >> 16) & 0xFF00000000 | HIBYTE(v92);
      goto LABEL_124;
    }
    goto LABEL_127;
  }
  if ((v86 & 0x20) != 0)
    v86 = *(_DWORD *)(v13 + 32);
  v93 = *(_DWORD *)(v76 + 12);
  v94 = v93 & (v86 >> 8);
  v95 = *(_DWORD *)(v84 + 4 * v94);
  if (!v95)
    goto LABEL_127;
  v96 = v84 + 4 * v85;
  v97 = 1;
  while (1)
  {
    v98 = (v95 - 1);
    if (v13 == *(_QWORD *)(v96 + 16 * v98))
      break;
    v94 = (v94 + v97) & v93;
    v95 = *(_DWORD *)(v84 + 4 * v94);
    ++v97;
    if (!v95)
      goto LABEL_127;
  }
  a6 = *(unsigned int *)(v96 + 16 * v98 + 8) | ((unint64_t)*(unsigned __int8 *)(v96 + 16 * v98 + 12) << 32);
LABEL_124:
  if ((_DWORD)a6 == -1)
  {
LABEL_127:
    if ((*(_BYTE *)(v16 + 6) & 0x20) != 0)
    {
      v101 = (JSC::VM *)v72;
      v102 = a3;
      v103 = v73;
      v104 = v74;
      v183 = v72;
      v105 = v75;
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v16, v101, v13, (uint64_t)&v185);
      a3 = v102;
      v75 = v105;
      v72 = v183;
      v74 = v104;
      v73 = v103;
      if ((OwnStaticPropertySlot & 1) != 0)
        goto LABEL_64;
    }
    goto LABEL_128;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v139 = v16 + 16;
    v140 = a6 << 32;
  }
  else
  {
    v139 = *(_QWORD *)(v16 + 8) - 8;
    v140 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v139 + (v140 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_236:
    v185 = (uint64_t (*)(unint64_t))a4;
    v189 = (_DWORD *)v16;
    goto LABEL_53;
  }
  v144 = *(unsigned __int8 *)(a4 + 5);
  if (v144 == 5)
  {
    v51 = (unsigned int *)v16;
    v52 = v72;
    goto LABEL_63;
  }
  if (v144 != 6)
    goto LABEL_236;
  v64 = *(_DWORD *)(a3 + 16) & 3;
  v145 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v185 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v186 = v145;
    LODWORD(v187) = HIDWORD(a6);
    v189 = (_DWORD *)v16;
    goto LABEL_230;
  }
  v67 = *(int8x16_t ***)(a4 + 24);
  v66 = *(_QWORD *)(a4 + 32);
  v185 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v186 = v145;
  LODWORD(v187) = HIDWORD(a6);
  v189 = (_DWORD *)v16;
LABEL_90:
  BYTE1(v190[1]) = 3;
  if (v64 != 2)
    LOBYTE(v190[1]) = 1;
  BYTE3(v190[1]) = 1;
  v193 = v67;
  v194 = v66;
LABEL_64:
  v53 = a1[1];
  v54 = *(unsigned int *)a1[2];
  if (*((_DWORD *)v53 + 3) <= v54)
  {
    __break(0xC471u);
    JUMPOUT(0x1986DB270);
  }
  if (BYTE1(v190[1]) == 1)
  {
    result = (uint64_t)v185;
  }
  else if (BYTE1(v190[1]) == 2)
  {
    result = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v185, **a1, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v56 = (WTF::StringImpl *)*((_QWORD *)*v53 + 2 * v54);
    v57 = (unint64_t)v189;
    v58 = *(_QWORD *)(16 * (*v189 & 0xFFFFFFFE) + 0x28);
    if ((v187 & 0x20) != 0)
      v57 = (unint64_t)v188;
    if (BYTE3(v190[1]) != 1)
      goto LABEL_87;
    if ((v57 & 0xFFFE000000000002) != 0)
      goto LABEL_245;
    v59 = *(unsigned int *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x4C);
    v60 = *(_DWORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x4C) != 0;
    v61 = 16 * v59;
    if ((_DWORD)v59)
      v62 = v193 == (int8x16_t **)v61;
    else
      v62 = 1;
    if (!v62)
    {
      do
      {
        v61 = *(_QWORD *)(v61 + 16);
        v60 = v61 != 0;
      }
      while ((int8x16_t **)v61 != v193 && v61 != 0);
    }
    if (!v60)
    {
LABEL_245:
      __dst = (JSC::VM *)*((_QWORD *)**a1 + 7);
      result = JSC::throwDOMAttributeGetterTypeError(v58, &__dst, v193, v56);
    }
    else
    {
LABEL_87:
      result = v185(v58);
    }
  }
LABEL_67:
  if (v192)
  {
    v55 = *(_DWORD *)(v191 + 4);
    if (!v55)
    {
      __break(0xC471u);
      JUMPOUT(0x1986DAF2CLL);
    }
    *(_DWORD *)(v191 + 4) = v55 - 1;
  }
  return result;
}

uint64_t JSC::getCallData@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if ((result & 0xFFFE000000000002) != 0)
  {
    *(_BYTE *)a2 = 0;
  }
  else if (*(_BYTE *)(result + 5) == 26)
  {
    v2 = *(_QWORD *)(result + 24);
    if ((v2 & 1) != 0)
    {
      v2 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v2 + 5) != 8)
        goto LABEL_5;
    }
    else if (*(_BYTE *)(v2 + 5) != 8)
    {
LABEL_5:
      *(_BYTE *)a2 = 2;
      v3 = *(_QWORD *)(result + 16);
      *(_QWORD *)(a2 + 8) = v2;
      *(_QWORD *)(a2 + 16) = v3;
      return result;
    }
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(v2 + 40);
    *(_BYTE *)(a2 + 16) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)result & 0xFFFFFFFE)
                                                                                     + 0x4C));
  }
  else
  {
    return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)result & 0xFFFFFFFE) + 0x4C) + 0x38))();
  }
  return result;
}

uint64_t JSC::JSValue::put(JSC::JSValue *a1, JSC::JSGlobalObject *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *(_QWORD *)a1;
  if ((v9 & 0xFFFE000000000002) != 0)
    return JSC::JSValue::putToPrimitive(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) + 0x48))();
}

uint64_t JSC::JSValue::putByIndex(JSC::JSValue *a1, JSC::JSGlobalObject *a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;

  v9 = *(_QWORD *)a1;
  if ((v9 & 0xFFFE000000000002) != 0)
    return JSC::JSValue::putToPrimitiveByIndex(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) + 0x50))();
}

uint64_t WTF::Vector<JSC::JSONPPathEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v12 = *(WTF::StringImpl ***)a1;
    v13 = 16 * v9;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
        {
          WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
        }
        else
        {
          *(_DWORD *)v14 -= 2;
        }
      }
      v12 += 2;
      v13 -= 16;
    }
    while (v13);
  }
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::Interpreter::executeBoundCall(WTF::Thread *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  WTF *v18;
  unsigned int v20;
  WTF *v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v26;
  _QWORD *v27;
  uint64_t i;
  uint64_t v29;
  int v30;
  WTF *v31;
  unsigned int v33;
  WTF *v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const WTF::StringImpl *v45;
  WTF *v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  const WTF::StringImpl *v51;
  _DWORD *v52;
  unint64_t v53;
  int v54;
  unsigned int *v55;
  int v56;
  unsigned int v57;
  JSC::CodeBlock *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  JSC::VM *v67;
  unint64_t j;
  uint64_t v70;
  unsigned int v71;
  _QWORD *v74;
  uint64_t (*v75)();
  unsigned int *v76;
  unsigned int v77;
  WTF *v78;
  uint64_t v79;
  WTF *v80;
  int v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  WTF *v85;
  uint64_t v86;
  uint64_t v87;
  const WTF::StringImpl *v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  BOOL v93;
  _QWORD *v94;
  _QWORD *v95;
  WTF *v96;
  unint64_t v97;
  unint64_t v98;
  WTF *v99;
  uint64_t v100;
  BOOL v101;
  _QWORD *v103;
  uint64_t v105;
  WTF *v106;
  int v107;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF *v113;
  uint64_t v114;
  JSC::MarkedVectorBase *v115;
  JSC::MarkedVectorBase *v116;
  uint64_t v117;
  const WTF::StringImpl *v118;
  char v119;
  uint64_t v120;
  WTF *v121;
  _OWORD v122[4];
  uint64_t v123;
  JSC::VM *v124;
  JSC::CodeBlock *v125;
  _QWORD v126[2];
  unsigned int v127;
  int v128;
  uint64_t v129;
  int v130;
  WTF *v131;
  unint64_t v132;
  _QWORD v133[2];
  JSC::VM *v134;

  v8 = a4;
  v123 = 0;
  v124 = (JSC::VM *)a2;
  v119 = 0;
  v115 = (JSC::MarkedVectorBase *)&v120;
  v120 = 0x800000000;
  v121 = (WTF *)((char *)v122 + 8);
  memset(v122, 0, sizeof(v122));
  v11 = *(unsigned int *)(a4 + 8) + (unint64_t)*(unsigned int *)(a3 + 88);
  if (v11 >= 9)
  {
    if (v11 >> 31
      || (a1 = (WTF::Thread *)WTF::tryFastMalloc((WTF *)(8 * (*(_DWORD *)(a4 + 8) + *(_DWORD *)(a3 + 88))), v126), (v96 = (WTF *)v126[0]) == 0))
    {
      v119 = 1;
    }
    else
    {
      v97 = v120;
      if ((_DWORD)v120)
      {
        v98 = 0;
        do
        {
          v99 = v121;
          *((_QWORD *)v96 + v98) = *((_QWORD *)v121 + v98);
          v100 = *((_QWORD *)v99 + v98);
          if (*(_QWORD *)&v122[0])
            v101 = 0;
          else
            v101 = (v100 & 0xFFFE000000000002) == 0;
          if (v101 && v100 != 0)
          {
            v103 = (_QWORD *)(v100 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v100 & 8) != 0)
              v103 = (_QWORD *)(v100 - 16);
            *(_QWORD *)&v122[0] = *v103 + 560;
            v116 = v115;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v122[0], (uint64_t *)&v116, a4, a5, a6, a7, a8, (uint64_t)v126);
            v97 = v120;
          }
          ++v98;
        }
        while (v98 < v97);
      }
      a1 = v121;
      if (v121 != (WTF *)((char *)v122 + 8) && v121 != 0)
        WTF::fastFree((unint64_t)v121, (void *)a2, a3, a4, a5, a6, a7, a8);
      v121 = v96;
      HIDWORD(v120) = v11;
    }
  }
  v12 = *(unsigned int *)(a3 + 88);
  if ((_DWORD)v12)
  {
    v13 = a3 + 48;
    if (v12 > 3)
    {
      v14 = 0;
      while (1)
      {
        v15 = *(_QWORD *)v13 + 16;
        if ((*(_BYTE *)(*(_QWORD *)v13 + 4) & 0xE) == 6)
          v16 = *(_QWORD *)(v15 + 8 * v14) + 0x2000000000000;
        else
          v16 = *(_QWORD *)(v15 + 8 * v14);
        v17 = v120;
        if ((_DWORD)v120 == HIDWORD(v120))
        {
          if (!(v120 >> 30))
          {
            a1 = (WTF::Thread *)WTF::tryFastMalloc((WTF *)(16 * v120), v126);
            v18 = (WTF *)v126[0];
            if (v126[0])
            {
              v114 = v8;
              v20 = v120;
              if ((_DWORD)v120)
              {
                v26 = 0;
                do
                {
                  v22 = v121;
                  *((_QWORD *)v18 + v26) = *((_QWORD *)v121 + v26);
                  v23 = *((_QWORD *)v22 + v26);
                  if (*(_QWORD *)&v122[0])
                    v24 = 0;
                  else
                    v24 = (v23 & 0xFFFE000000000002) == 0;
                  if (v24 && v23 != 0)
                  {
                    v27 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFC000 | 8);
                    if ((v23 & 8) != 0)
                      v27 = (_QWORD *)(v23 - 16);
                    *(_QWORD *)&v122[0] = *v27 + 560;
                    v116 = v115;
                    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v122[0], (uint64_t *)&v116, a4, a5, a6, a7, a8, (uint64_t)v126);
                    v20 = v120;
                  }
                  ++v26;
                }
                while (v26 < v20);
              }
              a1 = v121;
              if (v121 != (WTF *)((char *)v122 + 8) && v121 != 0)
              {
                WTF::fastFree((unint64_t)v121, (void *)a2, a3, a4, a5, a6, a7, a8);
                v20 = v120;
              }
              v121 = v18;
              HIDWORD(v120) = 2 * v17;
              v8 = v114;
              goto LABEL_16;
            }
          }
          v119 = 1;
        }
        else
        {
          v18 = v121;
          if (v121 != (WTF *)((char *)v122 + 8) && v121 != 0)
          {
            v20 = v120;
LABEL_16:
            *((_QWORD *)v18 + v20) = v16;
            LODWORD(v120) = v20 + 1;
            if (!*(_QWORD *)&v122[0] && (v16 & 0xFFFE000000000002) == 0 && v16 != 0)
            {
              v94 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v16 & 8) != 0)
                v94 = (_QWORD *)(v16 - 16);
              *(_QWORD *)&v122[0] = *v94 + 560;
              v116 = v115;
              a1 = (WTF::Thread *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v122[0], (uint64_t *)&v116, a4, a5, a6, a7, a8, (uint64_t)v126);
            }
            goto LABEL_14;
          }
          *((_QWORD *)v121 + v120) = v16;
          LODWORD(v120) = v17 + 1;
        }
LABEL_14:
        if (++v14 == v12)
          goto LABEL_64;
      }
    }
    for (i = 0; i != v12; ++i)
    {
      v29 = *(_QWORD *)(v13 + 8 * i);
      v30 = v120;
      if ((_DWORD)v120 == HIDWORD(v120))
      {
        if (!(v120 >> 30))
        {
          a1 = (WTF::Thread *)WTF::tryFastMalloc((WTF *)(16 * v120), v126);
          v31 = (WTF *)v126[0];
          if (v126[0])
          {
            v114 = v8;
            v33 = v120;
            if ((_DWORD)v120)
            {
              v39 = 0;
              do
              {
                v35 = v121;
                *((_QWORD *)v31 + v39) = *((_QWORD *)v121 + v39);
                v36 = *((_QWORD *)v35 + v39);
                if (*(_QWORD *)&v122[0])
                  v37 = 0;
                else
                  v37 = (v36 & 0xFFFE000000000002) == 0;
                if (v37 && v36 != 0)
                {
                  v40 = (_QWORD *)(v36 & 0xFFFFFFFFFFFFC000 | 8);
                  if ((v36 & 8) != 0)
                    v40 = (_QWORD *)(v36 - 16);
                  *(_QWORD *)&v122[0] = *v40 + 560;
                  v116 = v115;
                  WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v122[0], (uint64_t *)&v116, a4, a5, a6, a7, a8, (uint64_t)v126);
                  v33 = v120;
                }
                ++v39;
              }
              while (v39 < v33);
            }
            a1 = v121;
            v93 = v121 == (WTF *)((char *)v122 + 8) || v121 == 0;
            v8 = v114;
            if (!v93)
            {
              WTF::fastFree((unint64_t)v121, (void *)a2, a3, a4, a5, a6, a7, a8);
              v33 = v120;
            }
            v121 = v31;
            HIDWORD(v120) = 2 * v30;
            goto LABEL_45;
          }
        }
        v119 = 1;
      }
      else
      {
        v31 = v121;
        if (v121 != (WTF *)((char *)v122 + 8) && v121 != 0)
        {
          v33 = v120;
LABEL_45:
          *((_QWORD *)v31 + v33) = v29;
          LODWORD(v120) = v33 + 1;
          if (!*(_QWORD *)&v122[0] && (v29 & 0xFFFE000000000002) == 0 && v29 != 0)
          {
            v95 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v29 & 8) != 0)
              v95 = (_QWORD *)(v29 - 16);
            *(_QWORD *)&v122[0] = *v95 + 560;
            v116 = v115;
            a1 = (WTF::Thread *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v122[0], (uint64_t *)&v116, a4, a5, a6, a7, a8, (uint64_t)v126);
          }
          continue;
        }
        *((_QWORD *)v121 + v120) = v29;
        LODWORD(v120) = v30 + 1;
      }
    }
  }
LABEL_64:
  if (*(_DWORD *)(v8 + 8))
  {
    for (j = 0; j < *(unsigned int *)(v8 + 8); ++j)
    {
      v70 = *(_QWORD *)(*(_QWORD *)v8 + 8 * j);
      v71 = v120;
      if ((_DWORD)v120 == HIDWORD(v120))
      {
        if (!(v120 >> 30))
        {
          a1 = (WTF::Thread *)JSC::MarkedVectorBase::expandCapacity(v115, 2 * (int)v120);
          if (!(_DWORD)a1)
          {
            v71 = v120;
LABEL_105:
            *((_QWORD *)v121 + v71) = v70;
            LODWORD(v120) = v71 + 1;
            if (!*(_QWORD *)&v122[0] && (v70 & 0xFFFE000000000002) == 0 && v70 != 0)
            {
              v74 = (_QWORD *)(v70 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v70 & 8) != 0)
                v74 = (_QWORD *)(v70 - 16);
              *(_QWORD *)&v122[0] = *v74 + 560;
              v116 = v115;
              a1 = (WTF::Thread *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v122[0], (uint64_t *)&v116, a4, a5, a6, a7, a8, (uint64_t)v126);
            }
            continue;
          }
        }
        v119 = 1;
      }
      else
      {
        if (v121 != (WTF *)((char *)v122 + 8) && v121 != 0)
          goto LABEL_105;
        *((_QWORD *)v121 + v120) = v70;
        LODWORD(v120) = v71 + 1;
      }
    }
  }
  if (v119)
  {
    v63 = JSC::throwStackOverflowError(*(_QWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x28), &v124, a3, a4, a5, a6, a7, a8);
    goto LABEL_94;
  }
  v41 = a2 + 90568;
  v43 = *(_QWORD *)(a3 + 32);
  v42 = *(_QWORD *)(a3 + 40);
  if (*(_BYTE *)(v43 + 5) == 26)
  {
    v44 = *(_QWORD *)(v43 + 24);
    if ((v44 & 1) != 0)
      v44 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v44 + 5) != 8)
    {
      LOBYTE(v116) = 2;
      v45 = *(const WTF::StringImpl **)(v43 + 16);
      v117 = v44;
      v118 = v45;
      v46 = v121;
      v47 = v120;
      v134 = (JSC::VM *)a2;
LABEL_71:
      v48 = 0;
      v49 = 1;
      v50 = v117;
      v51 = v118;
      v52 = v118;
      goto LABEL_72;
    }
    LOBYTE(v116) = 1;
    v117 = *(_QWORD *)(v44 + 40);
    LOBYTE(v118) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE)
                                                                              + 0x4C));
    v46 = v121;
    v47 = v120;
    v134 = (JSC::VM *)a2;
  }
  else
  {
    v91 = *(_QWORD *)(a3 + 40);
    a1 = (WTF::Thread *)(*(_QWORD *(**)(JSC::MarkedVectorBase **__return_ptr, _QWORD))(16
                                                                                                * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C)
                                                                                                + 0x38))(&v116, *(_QWORD *)(a3 + 32));
    v42 = v91;
    v46 = v121;
    v47 = v120;
    v134 = (JSC::VM *)a2;
    if (v116 == 2)
      goto LABEL_71;
  }
  v49 = 0;
  v51 = 0;
  v50 = 0;
  v48 = v117;
  v52 = (_DWORD *)v43;
LABEL_72:
  v53 = *(_QWORD *)(16 * (*v52 & 0xFFFFFFFE) + 0x28);
  v133[0] = a2;
  v133[1] = v53;
  if (!*(_QWORD *)v41)
  {
    *(_QWORD *)v41 = v133;
    v78 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v78)
    {
      v114 = v42;
      v79 = v48;
      v80 = v46;
      v81 = v49;
      a1 = (WTF::Thread *)WTF::Thread::initializeCurrentTLS(a1);
      v49 = v81;
      v46 = v80;
      v48 = v79;
      v42 = v114;
      v78 = a1;
    }
    v82 = *((_BYTE *)v78 + 5);
    if ((v82 & 0x20) == 0)
    {
      LODWORD(v114) = v49;
      v113 = v46;
      v110 = v48;
      v111 = v42;
      *((_BYTE *)v78 + 5) = v82 | 0x20;
      if (BYTE2(dword_1ECF4C6C3))
        JSC::Wasm::startTrackingCurrentThread(a1, a2, a3, a4, a5, a6, a7, a8);
      WTF::registerThreadForMachExceptionHandling(v78, (WTF::Thread *)a2, a3, a4, a5, a6, a7, a8);
      v42 = v111;
      v48 = v110;
      v46 = v113;
      v49 = v114;
    }
    a1 = (WTF::Thread *)v133[0];
    if (*(_BYTE *)(v133[0] + 56))
    {
      LODWORD(v114) = v49;
      v85 = v46;
      v86 = v48;
      v87 = v42;
    }
    else
    {
      v83 = *(_QWORD *)(v133[0] + 92992);
      v84 = atomic_load(&JSC::lastTimeZoneID);
      if (v83 == v84)
        goto LABEL_73;
      LODWORD(v114) = v49;
      v85 = v46;
      v86 = v48;
      v87 = v42;
      a1 = (WTF::Thread *)v133[0];
    }
    JSC::VM::executeEntryScopeServicesOnEntry(a1, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
    v42 = v87;
    v48 = v86;
    v46 = v85;
    v49 = v114;
  }
LABEL_73:
  *(_QWORD *)(a2 + 32) = 0;
  if ((unint64_t)&v112 < *(_QWORD *)(a2 + 8) || v47 > 0x10000)
  {
    v63 = JSC::throwStackOverflowError(v53, &v134, a3, a4, a5, a6, a7, a8);
  }
  else if (*(_DWORD *)(a2 + 4))
  {
    JSC::Interpreter::checkVMEntryPermission(a1);
    v63 = 10;
  }
  else
  {
    v54 = *(_DWORD *)(a2 + 80);
    if ((v54 & 0x27) == 0)
      goto LABEL_77;
    if ((v54 & 0x20) != 0)
      goto LABEL_77;
    v114 = v42;
    v105 = v48;
    v106 = v46;
    v107 = v49;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a2, a2, a3, a4, a5, a6, a7, a8);
    v49 = v107;
    v46 = v106;
    v48 = v105;
    v42 = v114;
    if (!hasExceptionsAfterHandlingTraps)
    {
LABEL_77:
      v55 = (unsigned int *)(a2 + 80);
      v56 = *(_DWORD *)(a2 + 80);
      if ((v56 & 0x20) == 0)
      {
        do
          v57 = __ldaxr(v55);
        while (__stlxr(v57 | 0x20, v55));
      }
      v58 = 0;
      v59 = 0;
      v125 = 0;
      if (v49)
      {
        if (*(_BYTE *)(v50 + 5) == 8
          || (*(_QWORD *)(v50 + 8)
            ? (v75 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
            : (v75 = 0),
              v75))
        {
          v125 = *(JSC::CodeBlock **)(v50 + 96);
        }
        else
        {
          v88 = v51;
          v89 = v42;
          v113 = (WTF *)v48;
          v90 = v46;
          LODWORD(v114) = v49;
          JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v50, a2, v43, v88, 0, &v125, a7, a8);
          v49 = v114;
          v46 = v90;
          v48 = (uint64_t)v113;
          v42 = v89;
        }
        v63 = *((_QWORD *)v134 + 2);
        if (v63)
        {
          if ((v56 & 0x20) == 0)
          {
            do
              v109 = __ldaxr(v55);
            while (__stlxr(v109 & 0xFFFFFFDF, v55));
          }
          v41 = a2 + 90568;
          goto LABEL_92;
        }
        *((_BYTE *)v125 + 17) = 0;
        v59 = *(_QWORD *)(v50 + 8);
        v76 = (unsigned int *)(v59 + 8);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 + 1, v76));
        v58 = v125;
      }
      v60 = v47 + 1;
      v126[0] = v58;
      v126[1] = v43;
      v131 = v46;
      v132 = v53;
      v127 = v47 + 1;
      if (v58)
      {
        v61 = *((_DWORD *)v58 + 7);
        if (v61 <= v60)
          v60 = v47 + 1;
        else
          v60 = v61;
      }
      v130 = v60 | 1;
      v128 = 0;
      v129 = v42;
      if ((v56 & 0x20) == 0)
      {
        do
          v62 = __ldaxr(v55);
        while (__stlxr(v62 & 0xFFFFFFDF, v55));
      }
      if (v49)
      {
        v63 = vmEntryToJavaScript(*(_QWORD *)(v59 + 16), (JSC::VM *)a2, (uint64_t)v126, a4, a5, a6, a7, a8);
        v41 = a2 + 90568;
      }
      else
      {
        v63 = vmEntryToNative(v48, (JSC::VM *)a2, (uint64_t)v126, a4, a5, a6, a7, a8);
        v41 = a2 + 90568;
        if (!v59)
          goto LABEL_92;
      }
      v64 = (unsigned int *)(v59 + 8);
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        atomic_store(1u, (unsigned int *)(v59 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 32))(v59);
      }
      goto LABEL_92;
    }
    v63 = *(_QWORD *)(a2 + 16);
  }
LABEL_92:
  v67 = (JSC::VM *)v133[0];
  if (*(_QWORD **)(v133[0] + 90568) == v133)
  {
    *(_QWORD *)(v133[0] + 90568) = 0;
    if (*((_BYTE *)v67 + 56))
      JSC::VM::executeEntryScopeServicesOnExit(v67, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  *(_BYTE *)(v41 + 2552) = 1;
LABEL_94:
  JSC::MarkedVectorBase::~MarkedVectorBase(v115, (void *)a2, a3, a4, a5, a6, a7, a8);
  return v63;
}

uint64_t JSC::Interpreter::executeCall(JSC::VM *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::VM *v10;
  int v11;
  BOOL v12;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  int v18;
  unsigned int *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  JSC::CodeBlock *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  JSC::VM *v33;
  char *v34;
  JSC::VM **v35;
  JSC::VM **v36;
  uint64_t (*v38)();
  unsigned int *v39;
  unsigned int v40;
  WTF *v41;
  JSC::VM *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  JSC::VM *v52;
  JSC::VM *v53;
  uint64_t v54;
  uint64_t v55;
  const WTF::StringImpl *v56;
  unint64_t v57;
  const WTF::StringImpl *v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  const WTF::StringImpl *v62;
  _DWORD *v63;
  JSC::VM *v64;
  int v65;
  unsigned int *v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  JSC::CodeBlock *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t (*v79)();
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  JSC::VM *v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  unint64_t v88;
  JSC::VM *v89;
  uint64_t v90;
  const WTF::StringImpl *v91;
  const WTF::StringImpl *v92;
  uint64_t v93;
  JSC::CodeBlock *v94;
  uint64_t v95;
  const WTF::StringImpl *v96;
  uint64_t v97;
  uint64_t v98;
  JSC::VM *v99;
  JSC::VM *v100;
  uint64_t v101;
  const WTF::StringImpl *v102;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  const WTF::StringImpl *v107;
  uint64_t v108;
  const WTF::StringImpl *v109;
  JSC::VM *v110;
  unint64_t v111;
  const WTF::StringImpl *v112;
  JSC::CodeBlock *v113;
  JSC::VM *v114[2];
  JSC::CodeBlock *v115;
  JSC::CodeBlock *v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unint64_t v123;

  v9 = a1;
  v10 = (JSC::VM *)((char *)a1 - 90560);
  v11 = *a3;
  v12 = v11 == 2 || a3[16] == 0;
  if (!v12)
  {
    if (*(_DWORD *)(a2 + 88))
      return JSC::Interpreter::executeBoundCall(a1, (uint64_t)v10, a2, a5, a5, a6, a7, a8);
    v55 = *(_QWORD *)(a2 + 32);
    v56 = *(const WTF::StringImpl **)(a2 + 40);
    if (*(_BYTE *)(v55 + 5) == 26)
    {
      v57 = *(_QWORD *)(v55 + 24);
      if ((v57 & 1) != 0)
        v57 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v57 + 5) != 8)
      {
        LOBYTE(v110) = 2;
        v58 = *(const WTF::StringImpl **)(v55 + 16);
        v111 = v57;
        v112 = v58;
        v115 = (JSC::VM *)((char *)a1 - 90560);
LABEL_59:
        v59 = 0;
        v60 = 1;
        v61 = v111;
        v62 = v112;
        v63 = v112;
        goto LABEL_60;
      }
      LOBYTE(v110) = 1;
      v111 = *(_QWORD *)(v57 + 40);
      LOBYTE(v112) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)v55 & 0xFFFFFFFE)
                                                                                + 0x4C));
      v115 = (JSC::VM *)((char *)a1 - 90560);
    }
    else
    {
      v93 = *(_QWORD *)(a2 + 32);
      v94 = (JSC::VM *)((char *)a1 - 90560);
      v95 = a5;
      v96 = *(const WTF::StringImpl **)(a2 + 40);
      a1 = (JSC::VM *)(*(_QWORD *(**)(JSC::VM **__return_ptr, uint64_t))(16
                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v55 & 0xFFFFFFFE) + 0x4C)
                                                                                 + 0x38))(&v110, v93);
      v56 = v96;
      a5 = v95;
      v10 = v94;
      v55 = v93;
      v115 = v94;
      if (v110 == 2)
        goto LABEL_59;
    }
    v60 = 0;
    v62 = 0;
    v61 = 0;
    v59 = v111;
    v63 = (_DWORD *)v55;
LABEL_60:
    v64 = *(JSC::VM **)(16 * (*v63 & 0xFFFFFFFE) + 0x28);
    v65 = *(_DWORD *)(a5 + 8);
    v114[0] = v10;
    v114[1] = v64;
    if (*((_QWORD *)v9 + 1))
    {
LABEL_61:
      *((_QWORD *)v9 - 11316) = 0;
      if ((unint64_t)&v108 < *((_QWORD *)v9 - 11319) || *(_DWORD *)(a5 + 8) > 0x10000u)
      {
        v29 = JSC::throwStackOverflowError((unint64_t)v64, &v115, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      else if (*((_DWORD *)v9 - 22639))
      {
        JSC::Interpreter::checkVMEntryPermission(a1);
        v29 = 10;
      }
      else
      {
        v66 = (unsigned int *)((char *)v9 - 90480);
        v67 = *((_DWORD *)v9 - 22620);
        if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
        {
          v108 = v59;
          v109 = (const WTF::StringImpl *)v55;
          v100 = v10;
          v101 = a5;
          v102 = v56;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
          v59 = v108;
          v55 = (uint64_t)v109;
          v56 = v102;
          a5 = v101;
          v10 = v100;
          if (hasExceptionsAfterHandlingTraps)
          {
            v29 = *((_QWORD *)v9 - 11318);
            goto LABEL_80;
          }
        }
        v68 = *v66;
        if ((*v66 & 0x20) == 0)
        {
          do
            v69 = __ldaxr(v66);
          while (__stlxr(v69 | 0x20, v66));
        }
        v70 = 0;
        v71 = 0;
        v113 = 0;
        if (v60)
        {
          if (*(_BYTE *)(v61 + 5) == 8
            || (*(_QWORD *)(v61 + 8)
              ? (v79 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
              : (v79 = 0),
                v79))
          {
            v113 = *(JSC::CodeBlock **)(v61 + 96);
          }
          else
          {
            v89 = v10;
            v90 = v55;
            v91 = v62;
            v108 = v59;
            v109 = (const WTF::StringImpl *)a5;
            v92 = v56;
            JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v61, (uint64_t)v10, v55, v91, 0, &v113, a7, a8);
            v59 = v108;
            a5 = (uint64_t)v109;
            v56 = v92;
            v10 = v89;
            v55 = v90;
          }
          v29 = *((_QWORD *)v115 + 2);
          if (v29)
          {
            if ((v68 & 0x20) == 0)
            {
              do
                v104 = __ldaxr(v66);
              while (__stlxr(v104 & 0xFFFFFFDF, v66));
            }
            goto LABEL_80;
          }
          *((_BYTE *)v113 + 17) = 0;
          v71 = *(_QWORD *)(v61 + 8);
          v80 = (unsigned int *)(v71 + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 + 1, v80));
          v70 = v113;
        }
        v72 = v65 + 1;
        v73 = *(_QWORD *)a5;
        v116 = v70;
        v117 = v55;
        v122 = v73;
        v123 = (unint64_t)v64;
        v118 = v65 + 1;
        if (v70)
        {
          v74 = *((_DWORD *)v70 + 7);
          if (v74 <= v72)
            v72 = v65 + 1;
          else
            v72 = v74;
        }
        v121 = v72 | 1;
        v119 = 0;
        v120 = (uint64_t)v56;
        if ((v68 & 0x20) == 0)
        {
          do
            v75 = __ldaxr(v66);
          while (__stlxr(v75 & 0xFFFFFFDF, v66));
        }
        if (v60)
        {
          v29 = vmEntryToJavaScript(*(_QWORD *)(v71 + 16), v10, (uint64_t)&v116, a4, a5, a6, a7, a8);
          goto LABEL_76;
        }
        v29 = vmEntryToNative(v59, v10, (uint64_t)&v116, a4, a5, a6, a7, a8);
        if (v71)
        {
LABEL_76:
          v76 = (unsigned int *)(v71 + 8);
          do
          {
            v77 = __ldaxr(v76);
            v78 = v77 - 1;
          }
          while (__stlxr(v78, v76));
          if (!v78)
          {
            atomic_store(1u, (unsigned int *)(v71 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v71 + 32))(v71);
          }
        }
      }
LABEL_80:
      v33 = v114[0];
      v34 = (char *)v114[0] + 90568;
      v35 = (JSC::VM **)*((_QWORD *)v114[0] + 11321);
      v36 = v114;
      goto LABEL_29;
    }
    v108 = v59;
    v109 = v56;
    v83 = a5;
    v84 = v10;
    v85 = v55;
    *((_QWORD *)v9 + 1) = v114;
    v86 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v86)
    {
      a1 = (JSC::VM *)WTF::Thread::initializeCurrentTLS(a1);
      v86 = a1;
    }
    if ((*((_BYTE *)v86 + 5) & 0x20) == 0)
    {
      *((_BYTE *)v86 + 5) |= 0x20u;
      if (BYTE2(dword_1ECF4C6C3))
        JSC::Wasm::startTrackingCurrentThread(a1, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::registerThreadForMachExceptionHandling(v86, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    a1 = v114[0];
    if (!*((_BYTE *)v114[0] + 56))
    {
      v87 = *((_QWORD *)v114[0] + 11624);
      v88 = atomic_load(&JSC::lastTimeZoneID);
      v12 = v87 == v88;
      v55 = v85;
      v10 = v84;
      a5 = v83;
      v59 = v108;
      v56 = v109;
      if (v12)
        goto LABEL_61;
      a1 = v114[0];
    }
    JSC::VM::executeEntryScopeServicesOnEntry(a1, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    v55 = v85;
    v10 = v84;
    a5 = v83;
    v59 = v108;
    v56 = v109;
    goto LABEL_61;
  }
  v114[0] = (JSC::VM *)((char *)a1 - 90560);
  if (v11 == 2)
  {
    v15 = 0;
    v14 = *((_QWORD *)a3 + 1);
    v13 = (const WTF::StringImpl *)*((_QWORD *)a3 + 2);
    v16 = v13;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = *((_QWORD *)a3 + 1);
    v16 = (_DWORD *)a2;
  }
  v17 = *(_QWORD *)(16 * (*v16 & 0xFFFFFFFE) + 0x28);
  v18 = *(_DWORD *)(a5 + 8);
  v110 = (JSC::VM *)((char *)a1 - 90560);
  v111 = v17;
  if (!*((_QWORD *)a1 + 1))
  {
    *((_QWORD *)a1 + 1) = &v110;
    v41 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v41)
    {
      v42 = (JSC::VM *)((char *)a1 - 90560);
      v43 = a5;
      v44 = v15;
      v45 = a4;
      v109 = v13;
      a1 = (JSC::VM *)WTF::Thread::initializeCurrentTLS(a1);
      v13 = v109;
      a4 = v45;
      v15 = v44;
      a5 = v43;
      v10 = v42;
      v41 = a1;
    }
    v46 = *((_BYTE *)v41 + 5);
    if ((v46 & 0x20) == 0)
    {
      v108 = a4;
      v109 = v13;
      v97 = v15;
      v98 = a5;
      v99 = v10;
      *((_BYTE *)v41 + 5) = v46 | 0x20;
      if (BYTE2(dword_1ECF4C6C3))
        JSC::Wasm::startTrackingCurrentThread(a1, (uint64_t)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::registerThreadForMachExceptionHandling(v41, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
      v10 = v99;
      a5 = v98;
      v15 = v97;
      a4 = v108;
      v13 = v109;
    }
    a1 = v110;
    if (*((_BYTE *)v110 + 56))
    {
      v109 = v13;
      v49 = a4;
      v50 = v15;
      v51 = a5;
      v52 = v10;
    }
    else
    {
      v47 = *((_QWORD *)v110 + 11624);
      v48 = atomic_load(&JSC::lastTimeZoneID);
      if (v47 == v48)
        goto LABEL_9;
      v109 = v13;
      v49 = a4;
      v50 = v15;
      v51 = a5;
      v52 = v10;
      a1 = v110;
    }
    JSC::VM::executeEntryScopeServicesOnEntry(a1, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    v10 = v52;
    a5 = v51;
    v15 = v50;
    a4 = v49;
    v13 = v109;
  }
LABEL_9:
  *((_QWORD *)v9 - 11316) = 0;
  if ((unint64_t)&v108 < *((_QWORD *)v9 - 11319) || *(_DWORD *)(a5 + 8) > 0x10000u)
  {
    v29 = JSC::throwStackOverflowError(v17, v114, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  else if (*((_DWORD *)v9 - 22639))
  {
    JSC::Interpreter::checkVMEntryPermission(a1);
    v29 = 10;
  }
  else
  {
    v19 = (unsigned int *)((char *)v9 - 90480);
    v20 = *((_DWORD *)v9 - 22620);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
    {
      if ((*v19 & 0x27) != 0 && (*v19 & 0x20) == 0)
      {
        v108 = a4;
        v109 = v10;
        v105 = a5;
        v106 = v15;
        v107 = v13;
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v9 - 90496), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        v13 = v107;
        a4 = v108;
        v10 = v109;
        v15 = v106;
        a5 = v105;
      }
      v29 = *((_QWORD *)v9 - 11318);
      if (v29)
        goto LABEL_28;
    }
    v21 = *v19;
    if ((*v19 & 0x20) == 0)
    {
      do
        v22 = __ldaxr(v19);
      while (__stlxr(v22 | 0x20, v19));
    }
    v23 = 0;
    v24 = 0;
    v115 = 0;
    if (v11 == 2)
    {
      if (*(_BYTE *)(v14 + 5) == 8
        || (*(_QWORD *)(v14 + 8)
          ? (v38 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
          : (v38 = 0),
            v38))
      {
        v115 = *(JSC::CodeBlock **)(v14 + 96);
      }
      else
      {
        v53 = v10;
        v108 = a4;
        v109 = (const WTF::StringImpl *)a5;
        v54 = v15;
        JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v14, (uint64_t)v10, a2, v13, 0, &v115, a7, a8);
        a4 = v108;
        a5 = (uint64_t)v109;
        v15 = v54;
        v10 = v53;
      }
      v29 = *((_QWORD *)v114[0] + 2);
      if (v29)
      {
        if ((v21 & 0x20) == 0)
        {
          do
            v82 = __ldaxr(v19);
          while (__stlxr(v82 & 0xFFFFFFDF, v19));
        }
        goto LABEL_28;
      }
      *((_BYTE *)v115 + 17) = 0;
      v24 = *(_QWORD *)(v14 + 8);
      v39 = (unsigned int *)(v24 + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
      v23 = v115;
    }
    v25 = v18 + 1;
    v26 = *(_QWORD *)a5;
    v116 = v23;
    v117 = a2;
    v122 = v26;
    v123 = v17;
    v118 = v18 + 1;
    if (v23)
    {
      v27 = *((_DWORD *)v23 + 7);
      if (v27 <= v25)
        v25 = v18 + 1;
      else
        v25 = v27;
    }
    v121 = v25 | 1;
    v119 = 0;
    v120 = a4;
    if ((v21 & 0x20) == 0)
    {
      do
        v28 = __ldaxr(v19);
      while (__stlxr(v28 & 0xFFFFFFDF, v19));
    }
    if (v11 == 2)
    {
      v29 = vmEntryToJavaScript(*(_QWORD *)(v24 + 16), v10, (uint64_t)&v116, a4, a5, a6, a7, a8);
      goto LABEL_24;
    }
    v29 = vmEntryToNative(v15, v10, (uint64_t)&v116, a4, a5, a6, a7, a8);
    if (v24)
    {
LABEL_24:
      v30 = (unsigned int *)(v24 + 8);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        atomic_store(1u, (unsigned int *)(v24 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
      }
    }
  }
LABEL_28:
  v33 = v110;
  v34 = (char *)v110 + 90568;
  v35 = (JSC::VM **)*((_QWORD *)v110 + 11321);
  v36 = &v110;
LABEL_29:
  if (v35 == v36)
  {
    *(_QWORD *)v34 = 0;
    if (*((_BYTE *)v33 + 56))
      JSC::VM::executeEntryScopeServicesOnExit(v33, v10, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  *((_BYTE *)v9 + 2560) = 1;
  return v29;
}

uint64_t JSC::Interpreter::executeConstruct(JSC::VM *a1, WTF::Thread *a2, unsigned __int8 *a3, uint64_t a4, WTF *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  JSC::VM *v12;
  int v13;
  int v14;
  uint64_t v15;
  WTF::Thread *v16;
  JSC::VM *v17;
  unsigned int *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  JSC::VM *v37;
  uint64_t v39;
  int v40;
  WTF *v41;
  WTF *v42;
  int v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  WTF *v48;
  int v49;
  BOOL hasExceptionsAfterHandlingTraps;
  unsigned int v51;
  int v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  _QWORD v56[2];
  int v57;
  int v58;
  WTF *v59;
  int v60;
  uint64_t v61;
  JSC::VM *v62;
  JSC::VM *v63[2];
  JSC::VM *v64;

  v11 = a1;
  v12 = (JSC::VM *)((char *)a1 - 90560);
  v13 = *a3;
  v14 = *(_DWORD *)(a4 + 8);
  v15 = *((_QWORD *)a3 + 2);
  if (v13 == 2)
    v16 = (WTF::Thread *)*((_QWORD *)a3 + 2);
  else
    v16 = a2;
  v17 = *(JSC::VM **)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x28);
  v63[0] = (JSC::VM *)((char *)a1 - 90560);
  v63[1] = v17;
  v64 = (JSC::VM *)((char *)a1 - 90560);
  if (!*((_QWORD *)a1 + 1))
  {
    *((_QWORD *)a1 + 1) = v63;
    v41 = *(WTF **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v41)
    {
      v42 = a5;
      v43 = v14;
      v41 = (WTF *)WTF::Thread::initializeCurrentTLS(0);
      v14 = v43;
      a5 = v42;
    }
    v44 = *((_BYTE *)v41 + 5);
    if ((v44 & 0x20) == 0)
    {
      v52 = v14;
      v53 = a5;
      v54 = v41;
      *((_BYTE *)v41 + 5) = v44 | 0x20;
      if (BYTE2(dword_1ECF4C6C3))
        JSC::Wasm::startTrackingCurrentThread(v41, (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
      WTF::registerThreadForMachExceptionHandling(v54, a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
      a5 = v53;
      v14 = v52;
    }
    a1 = v63[0];
    if (*((_BYTE *)v63[0] + 56))
    {
      v47 = v14;
      v48 = a5;
    }
    else
    {
      v45 = *((_QWORD *)v63[0] + 11624);
      v46 = atomic_load(&JSC::lastTimeZoneID);
      if (v45 == v46)
        goto LABEL_5;
      v47 = v14;
      v48 = a5;
      a1 = v63[0];
    }
    JSC::VM::executeEntryScopeServicesOnEntry(a1, a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
    a5 = v48;
    v14 = v47;
  }
LABEL_5:
  *((_QWORD *)v11 - 11316) = 0;
  if ((unint64_t)&v54 < *((_QWORD *)v11 - 11319) || *(_DWORD *)(a4 + 8) > 0x10000u)
  {
    JSC::throwStackOverflowError((unint64_t)v17, &v64, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
    goto LABEL_50;
  }
  if (*((_DWORD *)v11 - 22639))
  {
    JSC::Interpreter::checkVMEntryPermission(a1);
    v33 = *((_QWORD *)v17 + 8);
    goto LABEL_36;
  }
  v18 = (unsigned int *)((char *)v11 - 90480);
  v19 = *((_DWORD *)v11 - 22620);
  if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
  {
    v54 = a5;
    v49 = v14;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v12, (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
    v14 = v49;
    a5 = v54;
    if (hasExceptionsAfterHandlingTraps)
      goto LABEL_50;
  }
  v20 = *v18;
  if ((*v18 & 0x20) == 0)
  {
    do
      v21 = __ldaxr(v18);
    while (__stlxr(v21 | 0x20, v18));
  }
  v55 = 0;
  if (v13 == 2)
  {
    v22 = *((_QWORD *)a3 + 1);
    if (*(_BYTE *)(v22 + 5) == 8
      || (*(_QWORD *)(v22 + 16)
        ? (v23 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
        : (v23 = 0),
          v23))
    {
      v55 = *(_QWORD *)(v22 + 104);
    }
    else
    {
      v39 = v15;
      v54 = a5;
      v40 = v14;
      JSC::ScriptExecutable::prepareForExecutionImpl(v22, v12, a2, v39, 1, &v55);
      v14 = v40;
      a5 = v54;
    }
    if (!*((_QWORD *)v64 + 2))
    {
      *(_BYTE *)(v55 + 17) = 0;
      v24 = *(_QWORD *)(*((_QWORD *)a3 + 1) + 16);
      v25 = (unsigned int *)(v24 + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
      v27 = v55;
      goto LABEL_22;
    }
    if ((v20 & 0x20) == 0)
    {
      do
        v51 = __ldaxr(v18);
      while (__stlxr(v51 & 0xFFFFFFDF, v18));
    }
LABEL_50:
    v33 = 0;
    goto LABEL_36;
  }
  v27 = 0;
  v24 = 0;
LABEL_22:
  v28 = v14 + 1;
  v29 = *(_QWORD *)a4;
  v56[0] = v27;
  v56[1] = a2;
  v61 = v29;
  v62 = v17;
  v57 = v14 + 1;
  if (v27)
  {
    v30 = *(_DWORD *)(v27 + 28);
    if (v30 <= v28)
      v28 = v14 + 1;
    else
      v28 = v30;
  }
  v60 = v28 | 1;
  v58 = 0;
  v59 = a5;
  if ((v20 & 0x20) == 0)
  {
    do
      v31 = __ldaxr(v18);
    while (__stlxr(v31 & 0xFFFFFFDF, v18));
  }
  if (v13 == 2)
    v32 = vmEntryToJavaScript(*(_QWORD *)(v24 + 16), v12, (uint64_t)v56, a4, (uint64_t)a5, a6, a7, a8);
  else
    v32 = vmEntryToNative(*((_QWORD *)a3 + 1), v12, (uint64_t)v56, a4, (uint64_t)a5, a6, a7, a8);
  v33 = v32;
  if (*((_DWORD *)v64 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v64, (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8))
  {
    v33 = 0;
  }
  if (v24)
  {
    v34 = (unsigned int *)(v24 + 8);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)(v24 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    }
  }
LABEL_36:
  v37 = v63[0];
  if (*((JSC::VM ***)v63[0] + 11321) == v63)
  {
    *((_QWORD *)v63[0] + 11321) = 0;
    if (*((_BYTE *)v37 + 56))
      JSC::VM::executeEntryScopeServicesOnExit(v37, a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  *((_BYTE *)v11 + 2560) = 1;
  return v33;
}

JSC::CodeBlock *JSC::Interpreter::prepareForCachedCall(JSC::Interpreter *this, JSC::CachedCall *a2, JSC::JSFunction *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t (*v11)();
  JSC::CodeBlock *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  JSC::CodeBlock *result;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  JSC::CodeBlock *v23;

  v23 = 0;
  v10 = *((_QWORD *)a2 + 25);
  if (*(_BYTE *)(v10 + 5) == 8
    || (*(_QWORD *)(v10 + 8)
      ? (v11 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
      : (v11 = 0),
        v11))
  {
    v23 = *(JSC::CodeBlock **)(v10 + 96);
  }
  else
  {
    JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)v10, (uint64_t)this - 90560, (uint64_t)a3, *((const WTF::StringImpl **)a2 + 26), 0, &v23, a7, a8);
  }
  if (*((_DWORD *)this - 22620))
  {
    v22 = *((_DWORD *)this - 22620);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::Interpreter *)((char *)this - 90496), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)this - 11318))
      return 0;
  }
  v12 = v23;
  *((_BYTE *)v23 + 17) = 0;
  v13 = *((_QWORD *)v12 + 15);
  if (v13)
  {
    v14 = (unsigned int *)(v13 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
  }
  *((_QWORD *)a2 + 27) = *(_QWORD *)(v13 + 16);
  v16 = (unsigned int *)(v13 + 8);
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (!v18)
  {
    atomic_store(1u, (unsigned int *)(v13 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
  }
  result = v23;
  v20 = (_QWORD *)((char *)v23 + 88);
  v21 = *((_QWORD *)v23 + 11);
  *(_QWORD *)a2 = v21;
  *((_QWORD *)a2 + 1) = v20;
  *v20 = a2;
  *(_QWORD *)(v21 + 8) = a2;
  return result;
}

unint64_t JSC::StrictEvalActivation::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t result;
  int v13;
  unint64_t v14;

  v11 = *(_QWORD **)(a1 + 40760);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::strictEvalActivationSpaceSlow((JSC::Heap **)(a1 + 37552));
  result = v11[3];
  if (result < v11[4])
    goto LABEL_4;
  result = v11[5];
  if ((result & 1) == 0)
  {
    v14 = *(_QWORD *)(result + 8) ^ v11[6];
    v11[4] = result + HIDWORD(v14);
    v11[5] = result + (int)v14;
LABEL_4:
    v11[3] = result + 32;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase(v11, a1 + 192, 32, 0, 0);
LABEL_5:
  *(_DWORD *)result = 0;
  v13 = *((_DWORD *)a2 + 2);
  *(_DWORD *)result = (unint64_t)a2 >> 4;
  *(_DWORD *)(result + 4) = v13;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a3;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::JSGlobalObject::strictEvalActivationStructure(unint64_t this)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(this + 776);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v4 = (_QWORD *)(this - 16);
    v5[0] = *v4;
    v5[1] = this;
    v5[2] = this + 776;
    return v3(v5);
  }
  return v1;
}

void JSC::JSGlobalObject::canDeclareGlobalVar(JSC::JSGlobalObject *this, const JSC::Identifier *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BYTE v9[16];
  unint64_t v10;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 0x10) != 0)
  {
    v10 = 0xFFFFFFFF00000000;
    v12 = 0;
    v13 = 0;
    v11 = this;
    v14 = 0x20000;
    v15 = 0;
    LOBYTE(v16) = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    JSC::JSGlobalObject::getOwnPropertySlot((uint64_t)this, (uint64_t)this, *(_QWORD *)a2, (uint64_t)v9, a5, a6, a7, a8);
    if (v17)
    {
      v8 = *(_DWORD *)(v16 + 4);
      if (v8)
        *(_DWORD *)(v16 + 4) = v8 - 1;
      else
        __break(0xC471u);
    }
  }
}

void JSC::JSGlobalObject::createGlobalVarBinding<(JSC::BindingCreationContext)1>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char v14;
  unint64_t v15;
  int v16;
  _BYTE v17[16];
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  int v29;
  int v30;
  uint64_t v31;

  v10 = *(_QWORD *)(a1 + 56);
  v18 = 0xFFFFFFFF00000000;
  v20 = 0;
  v21 = 0;
  v19 = a1;
  v22 = 0x20000;
  v23 = 0;
  LOBYTE(v24) = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  JSC::JSGlobalObject::getOwnPropertySlot(a1, a1, *a2, (uint64_t)v17, a5, a6, a7, a8);
  if ((v14 & 1) == 0)
  {
    v15 = *a2;
    v28[0] = 0;
    v28[1] = a1;
    v29 = -1;
    v13.n128_u64[0] = 0x100000001000000;
    v30 = 0x1000000;
    v31 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, v10, v15, 10, 0, (uint64_t)v28, v11, v12, v13);
  }
  if (v25)
  {
    v16 = *(_DWORD *)(v24 + 4);
    if (v16)
      *(_DWORD *)(v24 + 4) = v16 - 1;
    else
      __break(0xC471u);
  }
}

uint64_t JSC::Interpreter::executeEval(JSC::EvalExecutable *,JSC::JSValue,JSC::JSScope *)::$_1::operator()(uint64_t **a1, unint64_t *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t result;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  _DWORD *v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;

  v9 = **a1;
  v10 = *a1[1];
  v11 = *a2;
  v60 = 0xFFFFFFFF00000000;
  v64 = 0x20000;
  v62 = 0;
  v63 = 0;
  v61 = v9;
  v65 = 0;
  LOBYTE(v66) = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v12 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
  v13 = *(uint64_t (**)(unsigned int *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(16 * *(unsigned int *)(v12 + 0x4C) + 0x68);
  if (v13 != JSC::JSObject::getOwnPropertySlot)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t *))v13)(v9, v10, v11, &v58);
    goto LABEL_81;
  }
  v14 = *(JSC::VM **)(v10 + 56);
  if (!(v11 >> 4)
    || ((v11 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x20)) != 0)
  {
    goto LABEL_36;
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x58);
  if (!v15)
  {
    v16 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x40);
    if (!v16 || *(_BYTE *)(v16 + 5) != 1 && *(_DWORD *)(v16 + 80) < 2u)
      goto LABEL_36;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE)), *(JSC::VM **)(v10 + 56), 1, a4, a5, a6, a7, a8);
    if (!v15)
      goto LABEL_36;
  }
  if (!*(_DWORD *)(v15 + 24))
    goto LABEL_36;
  v17 = *(_QWORD *)(v15 + 16);
  v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
  v19 = *(unsigned int *)(v15 + 8);
  v20 = *(_DWORD *)(v11 + 16);
  if ((v17 & 1) != 0)
  {
    if ((v20 & 0x20) != 0)
      v20 = *(_DWORD *)(v11 + 32);
    v21 = *(_DWORD *)(v15 + 12);
    v22 = (v20 >> 8) & *(_QWORD *)&v21;
    v23 = *(unsigned __int8 *)(v18 + v22);
    if (*(_BYTE *)(v18 + v22))
    {
      v24 = v18 + v19;
      v25 = 1;
      while (1)
      {
        v26 = *(_QWORD *)(v24 + 8 * (v23 - 1));
        if (v11 == (v26 & 0xFFFFFFFFFFFFLL))
          break;
        v22 = ((_DWORD)v22 + v25) & v21;
        v23 = *(unsigned __int8 *)(v18 + v22);
        ++v25;
        if (!*(_BYTE *)(v18 + v22))
          goto LABEL_36;
      }
      a6 = (v26 >> 16) & 0xFF00000000 | HIBYTE(v26);
      goto LABEL_26;
    }
LABEL_36:
    if ((*(_BYTE *)(v9 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v9, v14, v11, (uint64_t)&v58) & 1) != 0)
    {
      goto LABEL_52;
    }
    if (!v11 || (v38 = *(_DWORD *)(v11 + 16), (v38 & 0x20) != 0))
    {
LABEL_80:
      result = 0;
      goto LABEL_81;
    }
    v39 = *(_BYTE **)(v11 + 8);
    v40 = *(unsigned int *)(v11 + 4);
    if ((v38 & 4) != 0)
    {
      if ((_DWORD)v40)
      {
        v41 = *v39 - 48;
        if (v41 <= 9 && (v40 < 2 || *v39 != 48))
        {
          v53 = v39 + 1;
          v54 = v40 - 1;
          while (v54)
          {
            if (v41 > 0x19999999)
              goto LABEL_42;
            v55 = *v53 - 48;
            if (v55 > 9)
              goto LABEL_42;
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v48 = __CFADD__(v55, 10 * v41);
            v41 = v55 + 10 * v41;
            ++v53;
            --v54;
            if (v48)
              goto LABEL_79;
          }
          goto LABEL_73;
        }
      }
    }
    else if ((_DWORD)v40)
    {
      v41 = *(unsigned __int16 *)v39 - 48;
      if (v41 <= 9 && (*(_WORD *)v39 != 48 || v40 <= 1))
      {
        v45 = (unsigned __int16 *)(v39 + 2);
        v46 = v40 - 1;
        while (v46)
        {
          if (v41 > 0x19999999)
            goto LABEL_42;
          v47 = *v45 - 48;
          if (v47 > 9)
            goto LABEL_42;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v48 = __CFADD__(v47, 10 * v41);
          v41 = v47 + 10 * v41;
          ++v45;
          --v46;
          if (v48)
            goto LABEL_79;
        }
LABEL_73:
        v42 = 0x100000000;
        if (v41 == -1)
        {
          v42 = 0;
          v43 = 0;
        }
        else
        {
          v43 = v41;
        }
        if (v41 == -1)
          v44 = 0;
        else
          v44 = v41 & 0xFFFFFF00;
LABEL_79:
        if ((v42 & 0x100000000) != 0)
        {
          result = JSC::JSObject::getOwnPropertySlotByIndex(v9, v10, (const WTF::StringImpl *)(v44 | v43), (uint64_t)&v58, a5, a6, a7, a8);
          goto LABEL_81;
        }
        goto LABEL_80;
      }
    }
LABEL_42:
    v42 = 0;
    v43 = 0;
    v44 = 0;
    goto LABEL_79;
  }
  if ((v20 & 0x20) != 0)
    v20 = *(_DWORD *)(v11 + 32);
  v27 = *(_DWORD *)(v15 + 12);
  v28 = v27 & (v20 >> 8);
  v29 = *(_DWORD *)(v18 + 4 * v28);
  if (!v29)
    goto LABEL_36;
  v30 = v18 + 4 * v19;
  v31 = 1;
  while (1)
  {
    v32 = (v29 - 1);
    if (v11 == *(_QWORD *)(v30 + 16 * v32))
      break;
    v28 = (v28 + v31) & v27;
    v29 = *(_DWORD *)(v18 + 4 * v28);
    ++v31;
    if (!v29)
      goto LABEL_36;
  }
  a6 = *(unsigned int *)(v30 + 16 * v32 + 8) | ((unint64_t)*(unsigned __int8 *)(v30 + 16 * v32 + 12) << 32);
LABEL_26:
  if ((_DWORD)a6 == -1)
    goto LABEL_36;
  if ((int)a6 <= 63)
  {
    v33 = v9 + 16;
    v34 = a6 << 32;
  }
  else
  {
    v33 = *(_QWORD *)(v9 + 8) - 8;
    v34 = 0x3F00000000 - (a6 << 32);
  }
  v35 = *(_QWORD *)(v33 + (v34 >> 29));
  if ((v35 & 0xFFFE000000000002) != 0)
    goto LABEL_33;
  v36 = *(unsigned __int8 *)(v35 + 5);
  if (v36 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)v9, (uint64_t)v14, (uint64_t)&v58, v35, SHIDWORD(a6), a6);
LABEL_52:
    result = 1;
    goto LABEL_81;
  }
  if (v36 != 6)
  {
LABEL_33:
    v58 = v35;
    v62 = v9;
    v60 = __PAIR64__(a6, HIDWORD(a6));
    result = 1;
    LOWORD(v64) = 257;
    goto LABEL_81;
  }
  v49 = *(_DWORD *)(v12 + 16) & 3;
  v50 = *(_DWORD **)(v35 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C)))
  {
    v52 = *(_QWORD *)(v35 + 24);
    v51 = *(_QWORD *)(v35 + 32);
    v58 = *(_QWORD *)(v35 + 8);
    v59 = v50;
    LODWORD(v60) = HIDWORD(a6);
    v62 = v9;
    BYTE1(v64) = 3;
    result = 1;
    if (v49 != 2)
      LOBYTE(v64) = 1;
    HIBYTE(v64) = 1;
    v68 = v52;
    v69 = v51;
  }
  else
  {
    v58 = *(_QWORD *)(v35 + 8);
    v59 = v50;
    LODWORD(v60) = HIDWORD(a6);
    v62 = v9;
    result = 1;
    BYTE1(v64) = 3;
    if (v49 != 2)
      LOBYTE(v64) = 1;
  }
LABEL_81:
  if (v67)
  {
    v56 = *(_DWORD *)(v66 + 4);
    if (!v56)
    {
      result = 57;
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)(v66 + 4) = v56 - 1;
  }
  if ((result & 1) == 0)
  {
    v57 = (_DWORD *)**a1;
    v58 = 0;
    v59 = v57;
    v60 = 0x1000001FFFFFFFFLL;
    v61 = 0;
    return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*v57 & 0xFFFFFFFE) + 0x4C) + 0x48))();
  }
  return result;
}

uint64_t JSC::Interpreter::executeModuleProgram(uint64_t a1, WTF::Thread *a2, uint64_t a3, uint64_t a4, JSC::JSObject *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  JSC::Interpreter *v16;
  JSC::Interpreter *v17;
  JSC::VM *v18;
  unsigned int *v19;
  int v20;
  unint64_t SlowCase;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t (*v27)();
  uint64_t v28;
  JSC::CodeBlock *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  JSC::VM *v39;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::CodeBlock *v47;
  _QWORD v48[2];
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  JSC::VM *v54;
  JSC::VM *v55[2];
  JSC::VM *v56;
  _QWORD v57[6];

  v57[5] = *MEMORY[0x1E0C80C00];
  v8 = (JSC::VM *)(a1 - 90560);
  v56 = (JSC::VM *)(a1 - 90560);
  v9 = *(_QWORD *)(a1 - 90448);
  if (!*(_BYTE *)(v9 + 6))
    goto LABEL_45;
  v16 = *(JSC::Interpreter **)(v9 + 8);
  v17 = *(JSC::Interpreter **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v17)
    v17 = (JSC::Interpreter *)WTF::Thread::initializeCurrentTLS(0);
  if (v16 != v17)
  {
LABEL_45:
    __break(0xC471u);
    JUMPOUT(0x1986DD9E4);
  }
  v18 = *(JSC::VM **)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x28);
  v55[0] = v8;
  v55[1] = v18;
  if (!*(_QWORD *)(a1 + 8))
    JSC::VMEntryScope::setUpSlow((JSC::VMEntryScope *)v55, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  *(_QWORD *)(a1 - 90528) = 0;
  if ((unint64_t)&v46 < *(_QWORD *)(a1 - 90552))
  {
    v28 = JSC::throwStackOverflowError((unint64_t)v18, &v56, a3, a4, (uint64_t)a5, a6, a7, a8);
    goto LABEL_39;
  }
  if (*(_DWORD *)(a1 - 90556))
  {
    JSC::Interpreter::checkVMEntryPermission(v17);
    v28 = 10;
    goto LABEL_39;
  }
  v19 = (unsigned int *)(a1 - 90480);
  v20 = *(_DWORD *)(a1 - 90480);
  if ((v20 & 0x27) != 0
    && (v20 & 0x20) == 0
    && JSC::VM::hasExceptionsAfterHandlingTraps(v8, (uint64_t)a2, a3, a4, (uint64_t)a5, a6, a7, a8))
  {
    v28 = *(_QWORD *)(a1 - 90544);
    goto LABEL_39;
  }
  if ((*(_DWORD *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x10) & 3) == 2)
    JSC::Structure::flattenDictionaryStructure(16 * (*(_DWORD *)a5 & 0xFFFFFFFE), v8, a5, a4, (uint64_t)a5, a6, a7, a8);
  SlowCase = *(_QWORD *)(a1 - 52800);
  if (SlowCase >= *(_QWORD *)(a1 - 52792))
  {
    SlowCase = *(_QWORD *)(a1 - 52784);
    if ((SlowCase & 1) != 0)
    {
      v46 = a1 - 52824;
      JSC::sanitizeStackForVM((JSC *)(a1 - 90560), a2, a3, a4, (uint64_t)a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v46, a1 - 90368, 32, 0, 0, v43, v44, v45);
      goto LABEL_14;
    }
    v41 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(a1 - 52776);
    *(_QWORD *)(a1 - 52792) = SlowCase + HIDWORD(v41);
    *(_QWORD *)(a1 - 52784) = SlowCase + (int)v41;
  }
  *(_QWORD *)(a1 - 52800) = SlowCase + 32;
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  v22 = *((_DWORD *)v18 + 234);
  if (v22)
    v23 = 16 * (v22 & 0xFFFFFFFE);
  else
    v23 = 0;
  JSC::JSCallee::JSCallee((JSC::JSCell *)SlowCase, (uint64_t)v8, (uint64_t)a5, v23);
  if (*(_BYTE *)(a1 - 89805))
    __dmb(0xAu);
  v24 = *((_QWORD *)a2 + 2);
  v57[0] = a2;
  v57[1] = v24;
  v57[2] = a6;
  v57[3] = a7;
  v57[4] = a5;
  v25 = *v19;
  if ((*v19 & 0x20) == 0)
  {
    do
      v26 = __ldaxr(v19);
    while (__stlxr(v26 | 0x20, v19));
  }
  v47 = 0;
  if (*(_BYTE *)(a3 + 5) == 8
    || (*(_QWORD *)(a3 + 8)
      ? (v27 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
      : (v27 = 0),
        v27))
  {
    v47 = *(JSC::CodeBlock **)(a3 + 72);
  }
  else
  {
    JSC::ScriptExecutable::prepareForExecutionImpl((JSC::ModuleProgramExecutable *)a3, (uint64_t)v8, 0, a5, 0, &v47, a7, a8);
  }
  v28 = *((_QWORD *)v56 + 2);
  if (v28)
  {
    if ((v25 & 0x20) == 0)
    {
      do
        v42 = __ldaxr(v19);
      while (__stlxr(v42 & 0xFFFFFFDF, v19));
    }
  }
  else
  {
    v29 = v47;
    v30 = *(_QWORD *)(a3 + 8);
    v31 = (unsigned int *)(v30 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
    v48[0] = v29;
    v48[1] = SlowCase;
    v53 = v57;
    v54 = v18;
    v49 = 6;
    if (v29)
    {
      v33 = *((_DWORD *)v29 + 7);
      v34 = v33 >= 7;
      v35 = v33 | 1;
      if (!v34)
        v35 = 7;
    }
    else
    {
      v35 = 7;
    }
    v52 = v35;
    v50 = 0;
    v51 = 10;
    *((_QWORD *)a2 + 2) = 0xFFFE0000FFFFFFFELL;
    if ((v25 & 0x20) == 0)
    {
      do
        v36 = __ldaxr(v19);
      while (__stlxr(v36 & 0xFFFFFFDF, v19));
    }
    v28 = vmEntryToJavaScript(*(_QWORD *)(v30 + 16), v8, (uint64_t)v48, a4, (uint64_t)a5, a6, a7, a8);
    do
    {
      v37 = __ldaxr(v31);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v31));
    if (!v38)
    {
      atomic_store(1u, (unsigned int *)(v30 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
    }
  }
LABEL_39:
  v39 = v55[0];
  if (*((JSC::VM ***)v55[0] + 11321) == v55)
  {
    *((_QWORD *)v55[0] + 11321) = 0;
    if (*((_BYTE *)v39 + 56))
      JSC::VM::executeEntryScopeServicesOnExit(v39, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  }
  *(_BYTE *)(a1 + 2560) = 1;
  return v28;
}

void JSC::Interpreter::debug(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  JSC::Debugger *v16;
  unsigned int *v17;
  unsigned int v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  _QWORD *v23;

  v9 = (_BYTE *)(a1 - 90496);
  v10 = (_DWORD *)(a1 - 90472);
  v11 = *(_DWORD *)(a1 - 90472);
  *(_DWORD *)(a1 - 90472) = v11 + 1;
  if (!v11)
  {
    v12 = *(_QWORD *)(a1 - 90544);
    if (v12)
    {
      if (*(_QWORD *)(a1 - 90536) == v12)
      {
        *(_QWORD *)(a1 - 90544) = 0;
        v17 = (unsigned int *)(a1 - 90480);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 & 0xFFFFFFEF, v17));
        *(_BYTE *)(a1 - 90474) = 1;
      }
    }
  }
  if (byte_1ECF4C275)
    v13 = (_DWORD)a3 == 3;
  else
    v13 = 0;
  if (v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1986DDC80);
  }
  v14 = a2[3];
  if ((v14 & 0xFFFE000000000007) == 3)
  {
    v23 = a2;
    while (*(_BYTE *)((v14 & 0xFFFFFFFFFFFFFFFCLL) + qword_1ECF4C080 + 4) != 1)
    {
      v23 = (_QWORD *)*v23;
      v14 = v23[3];
      if ((v14 & 0xFFFE000000000007) != 3)
        goto LABEL_8;
    }
    v15 = v23[2] + 32;
  }
  else
  {
LABEL_8:
    v15 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 40;
  }
  v16 = *(JSC::Debugger **)(*(_QWORD *)v15 + 2016);
  switch((int)a3)
  {
    case 0:
      JSC::Debugger::willExecuteProgram((uint64_t)v16, a2);
      break;
    case 1:
      JSC::Debugger::didExecuteProgram(v16, (JSC::CallFrame *)a2);
      break;
    case 2:
      JSC::Debugger::callEvent((uint64_t)v16, (JSC::CallFrame *)a2);
      break;
    case 3:
      JSC::Debugger::didReachDebuggerStatement(v16, (JSC::CallFrame *)a2, a3, a4, a5, a6, a7, a8);
      break;
    case 4:
      JSC::Debugger::returnEvent((uint64_t)v16, (JSC::CallFrame *)a2);
      break;
    case 5:
      JSC::Debugger::atStatement((uint64_t)v16, (JSC::CallFrame *)a2);
      break;
    case 6:
      JSC::Debugger::atExpression((uint64_t)v16, (JSC::CallFrame *)a2);
      break;
    default:
      break;
  }
  v13 = (*v10)-- == 1;
  if (v13 && v9[93377])
  {
    v19 = v9 - 64;
    v20 = *((_QWORD *)v9 - 5);
    *((_QWORD *)v19 + 2) = v20;
    *((_QWORD *)v19 + 4) = v20;
    if (v20)
    {
      v21 = (unsigned int *)(v9 + 16);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 | 0x10, v21));
    }
    if (v9[93379])
      v9[93378] = 1;
    *(_BYTE *)(a1 - 90474) = 0;
  }
}

uint64_t *JSC::DeferTermination<(JSC::VMTraps::DeferAction)1>::~DeferTermination(uint64_t *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v1 = *result;
  v2 = *(_DWORD *)(*result + 88) - 1;
  *(_DWORD *)(*result + 88) = v2;
  if (!v2 && *(_BYTE *)(v1 + 93441))
  {
    v3 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 16) = v3;
    *(_QWORD *)(v1 + 32) = v3;
    if (v3)
    {
      v4 = (unsigned int *)(v1 + 80);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 | 0x10, v4));
    }
    if (*(_BYTE *)(v1 + 93443))
      *(_BYTE *)(v1 + 93442) = 1;
    *(_BYTE *)(v1 + 86) = 0;
  }
  return result;
}

void JSC::ShadowChicken::~ShadowChicken(JSC::ShadowChicken *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  WTF::fastFree(*(_QWORD *)this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 4);
  if (v16)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
  }
}

void JSC::ShadowChicken::log(JSC::ShadowChicken *this, JSC::VM *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v8 + 56;
  v9 = *(_OWORD *)a4;
  v10 = *(_OWORD *)(a4 + 16);
  v11 = *(_OWORD *)(a4 + 32);
  *(_DWORD *)(v8 + 48) = *(_DWORD *)(a4 + 48);
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)v8 = v9;
  JSC::ShadowChicken::update(this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::ShadowChicken::update(JSC::ShadowChicken *this, JSC::VM *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  JSC::CallFrame *v13;
  unsigned int v14;
  JSC::CallFrame **v15;
  uint64_t v16;
  uint64_t v17;
  JSC::CallFrame *v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  int v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  WTF *v42;
  unint64_t v43;
  unint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  WTF *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  void *v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::CallFrame *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  BOOL v79;
  BOOL v80;
  _QWORD *v82;
  uint64_t v83;
  BOOL v85;
  uint64_t v87;
  JSC::CallFrame **v88;
  uint64_t v89;
  BOOL v91;
  uint64_t v93;
  uint64_t v94;
  JSC::CallFrame **v95;
  uint64_t v96;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  _OWORD *v105;
  WTF *v106;
  _OWORD *v107;
  __int128 v108;
  __int128 v109;
  _OWORD *v110;
  __int128 v111;
  __int128 v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  int v120;
  _QWORD *v121;
  uint64_t v122;
  _OWORD *v125;
  _OWORD *v126;
  __int128 v127;
  __int128 v128;
  _OWORD *v129;
  __int128 v130;
  __int128 v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  _OWORD *v138;
  _OWORD *v139;
  __int128 v140;
  __int128 v141;
  _OWORD *v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned __int8 *v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  unsigned int v158;
  __int128 *v159;
  char v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  WTF *v164;
  WTF *v165;
  uint64_t v166;
  _QWORD v167[2];
  _BYTE v168[32];
  uint64_t v169;
  unsigned int *v170;
  _OWORD v171[4];

  v11 = *(_QWORD *)this;
  v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 2) - *(_QWORD *)this) >> 3);
  v13 = a3;
  if ((_DWORD)v12)
  {
    v14 = v12 - 2;
    v15 = (JSC::CallFrame **)(v11 + 56 * (v12 - 1) + 16);
    v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 2) - *(_QWORD *)this) >> 3);
    v13 = a3;
    do
    {
      v17 = (uint64_t)*(v15 - 1);
      if ((unint64_t)(v17 - 31249) >= 2 && v17 != 0)
      {
        v19 = v15[1];
        if ((_DWORD)v16 != 1 && *(_QWORD *)(v11 + 56 * v14 + 8) == 31249)
          v19 = *v15;
        if (v13 < v19)
          v13 = v19;
      }
      --v14;
      v15 -= 7;
      LODWORD(v16) = v16 - 1;
    }
    while ((_DWORD)v16);
  }
  v20 = (_QWORD *)((char *)this + 32);
  v21 = *((_DWORD *)this + 11);
  if (v21)
  {
    v22 = *v20 + 48 * v21 - 8;
    while (*(_QWORD *)(v22 - 32) < (unint64_t)v13 || *(_BYTE *)(v22 + 4))
    {
      v22 -= 48;
      *((_DWORD *)this + 11) = --v21;
      if (!v21)
        goto LABEL_64;
    }
    if (!(_DWORD)v12)
      goto LABEL_26;
    v23 = v12;
    v24 = v11 + 32;
    while (*(_QWORD *)(v24 - 24) != 31249 || *(_QWORD *)(v24 - 16) != *(_QWORD *)(v22 - 32))
    {
      v24 += 56;
      if (!--v23)
        goto LABEL_26;
    }
    *(_QWORD *)(v22 - 24) = *(_QWORD *)(v24 - 32);
    *(_OWORD *)(v22 - 16) = *(_OWORD *)v24;
    *(_DWORD *)v22 = *(_DWORD *)(v24 + 16);
    *(_BYTE *)(v22 + 4) = 1;
    v21 = *((_DWORD *)this + 11);
    if (v21)
    {
LABEL_26:
      v165 = 0;
      v166 = 0;
      JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v167, a3, a2, 0, a5, a6, a7, a8);
      for (i = *(_QWORD *)v168; *(_QWORD *)v168; i = *(_QWORD *)v168)
      {
        if ((v169 & 0xFFFE000000000007) != 3 && v167[0] == 0)
        {
          *(_QWORD *)&v171[0] = v169;
          *((_QWORD *)&v171[0] + 1) = i;
          memset(&v171[1], 0, 24);
          DWORD2(v171[2]) = -1;
          BYTE12(v171[2]) = 0;
          v30 = HIDWORD(v166);
          if (HIDWORD(v166) == (_DWORD)v166)
          {
            v31 = (_OWORD *)WTF::Vector<WTF::Dominators<JSC::B3::BackwardsCFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v165, HIDWORD(v166) + 1, (unint64_t)v171);
            v30 = HIDWORD(v166);
            v32 = (_OWORD *)((char *)v165 + 48 * HIDWORD(v166));
            v34 = v31[1];
            v33 = v31[2];
            *v32 = *v31;
            v32[1] = v34;
            v32[2] = v33;
          }
          else
          {
            v35 = (_OWORD *)((char *)v165 + 48 * HIDWORD(v166));
            v36 = v171[2];
            v37 = v171[0];
            v35[1] = v171[1];
            v35[2] = v36;
            *v35 = v37;
          }
          HIDWORD(v166) = v30 + 1;
        }
        JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v167, (uint64_t)v25, v26, v27, a5, a6, a7, a8);
      }
      v38 = v170;
      v170 = 0;
      if (v38)
      {
        do
        {
          v39 = __ldaxr(v38);
          v40 = v39 - 1;
        }
        while (__stlxr(v40, v38));
        if (!v40)
        {
          atomic_store(1u, v38);
          *(_QWORD *)&v171[0] = v38;
          WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)v171, v25, v26, v27, a5, a6, a7, a8);
        }
      }
      v41 = HIDWORD(v166);
      v42 = v165;
      if (HIDWORD(v166) >= 2)
      {
        v43 = (HIDWORD(v166) - 1);
        v44 = (unint64_t)HIDWORD(v166) >> 1;
        v45 = (_OWORD *)((char *)v165 + 48 * v43);
        v46 = HIDWORD(v166);
        v47 = v165;
        do
        {
          if (!v46)
          {
            __break(0xC471u);
            JUMPOUT(0x1986DE880);
          }
          if (v43 >= v41)
          {
LABEL_219:
            __break(0xC471u);
            JUMPOUT(0x1986DE600);
          }
          *(_OWORD *)v168 = *((_OWORD *)v47 + 1);
          v48 = *(_OWORD *)v168;
          *(_OWORD *)&v168[16] = *((_OWORD *)v47 + 2);
          v49 = *(_OWORD *)v47;
          v50 = *(_OWORD *)((char *)v45 + 29);
          v51 = v45[1];
          *(_OWORD *)v47 = *v45;
          *((_OWORD *)v47 + 1) = v51;
          *(_OWORD *)((char *)v47 + 29) = v50;
          *v45 = v49;
          v45[1] = v48;
          *(_OWORD *)((char *)v45 + 29) = *(_OWORD *)&v168[13];
          v45 -= 3;
          --v43;
          v47 = (WTF *)((char *)v47 + 48);
          --v46;
          --v44;
        }
        while (v44);
      }
      v52 = *((_DWORD *)this + 11);
      if (v52)
      {
        v53 = 0;
        v21 = 0;
        v54 = 0;
        while (2)
        {
          if (v54 != (_DWORD)v41)
          {
            v55 = *v20;
            v56 = v21;
            while (*(_BYTE *)(v55 + 48 * v53 + 44))
            {
              v53 = v56 + 1;
              v56 = v53;
              if (v52 <= v53)
              {
                if (v52 <= v21 + 1)
                  ++v21;
                else
                  v21 = *((_DWORD *)this + 11);
                goto LABEL_62;
              }
            }
            if (*(_QWORD *)(v55 + 48 * v53 + 8) == *((_QWORD *)v42 + 6 * v54 + 1)
              && *(_QWORD *)(v55 + 48 * v53) == *((_QWORD *)v42 + 6 * v54))
            {
              v53 = v56 + 1;
              ++v54;
              v21 = v53;
              if (v52 > v53)
                continue;
              ++v56;
            }
            *((_DWORD *)this + 11) = v56;
            goto LABEL_63;
          }
          break;
        }
      }
      else
      {
        v21 = 0;
      }
LABEL_62:
      *((_DWORD *)this + 11) = v21;
      if (v42)
      {
LABEL_63:
        v165 = 0;
        LODWORD(v166) = 0;
        WTF::fastFree((unint64_t)v42, v25, v26, v27, a5, a6, a7, a8);
        v21 = *((_DWORD *)this + 11);
      }
    }
  }
LABEL_64:
  v57 = 48 * v21;
  while (1)
  {
    v58 = v57 - 48;
    if (!v57)
      break;
    v59 = *(unsigned __int8 *)(*v20 + v57 - 4);
    v57 -= 48;
    if (!v59)
    {
      v60 = *(uint64_t **)(*v20 + v58 + 8);
      goto LABEL_69;
    }
  }
  v60 = 0;
LABEL_69:
  v165 = 0;
  v166 = 0;
  JSC::StackVisitor::StackVisitor((JSC::StackVisitor *)v167, a3, a2, 0, a5, a6, a7, a8);
  v68 = *(JSC::CallFrame **)v168;
  if (*(_QWORD *)v168)
  {
    v69 = v12;
    while ((v169 & 0xFFFE000000000007) == 3 || v167[0] != 0)
    {
LABEL_176:
      v115 = v69;
LABEL_177:
      JSC::StackVisitor::gotoNextFrame((JSC::StackVisitor *)v167, (uint64_t)v61, (uint64_t)v62, v63, v64, v65, v66, v67);
      v68 = *(JSC::CallFrame **)v168;
      v69 = v115;
      if (!*(_QWORD *)v168)
        goto LABEL_185;
    }
    if (v68 == (JSC::CallFrame *)v60)
      goto LABEL_185;
    v71 = *((_QWORD *)v68 + 3);
    v72 = (v69 - 1);
    if (v72 >= v12)
    {
LABEL_125:
      if ((v71 & 0xFFFE000000000007) == 3)
      {
        JSC::CallFrame::bytecodeIndex(v68);
        v93 = 0;
        v94 = 0;
        goto LABEL_150;
      }
LABEL_138:
      v99 = 0;
      goto LABEL_139;
    }
    v73 = *(_QWORD *)v68;
    v74 = *(_QWORD *)this;
    if (v71)
    {
      if (v73)
      {
        v75 = -v72;
        v76 = (_QWORD *)(v74 + 56 * v72 + 24);
        while (1)
        {
          v77 = *(v76 - 2);
          if (v77 && v77 != 31249)
          {
            v79 = v77 != v71 || v77 == 31250;
            v80 = !v79 && *(v76 - 1) == (_QWORD)v68;
            if (v80 && *v76 == v73)
              break;
          }
          ++v75;
          v76 -= 7;
          if (v75 == 1)
            goto LABEL_125;
        }
LABEL_127:
        v69 = -v75;
LABEL_180:
        if ((v71 & 0xFFFE000000000007) == 3)
        {
          JSC::CallFrame::bytecodeIndex(v68);
          v93 = 0;
LABEL_146:
          v94 = *(_QWORD *)(*(_QWORD *)this + 56 * v69 + 32);
          if (v94 && *(unsigned __int8 *)(v94 + 5) - 51 >= 6)
          {
            __break(0xC471u);
            JUMPOUT(0x1986DE810);
          }
LABEL_150:
          v102 = *((_QWORD *)v68 + 5);
          v103 = *((_DWORD *)v68 + 9);
          *(_QWORD *)&v171[0] = v169;
          *((_QWORD *)&v171[0] + 1) = v68;
          *(_QWORD *)&v171[1] = v102;
          *((_QWORD *)&v171[1] + 1) = v94;
          *(_QWORD *)&v171[2] = v93;
          DWORD2(v171[2]) = v103;
          BYTE12(v171[2]) = 0;
          v104 = HIDWORD(v166);
          if (HIDWORD(v166) == (_DWORD)v166)
          {
            v105 = (_OWORD *)WTF::Vector<WTF::Dominators<JSC::B3::BackwardsCFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v165, HIDWORD(v166) + 1, (unint64_t)v171);
            v104 = HIDWORD(v166);
            v106 = v165;
            v107 = (_OWORD *)((char *)v165 + 48 * HIDWORD(v166));
            v109 = v105[1];
            v108 = v105[2];
            *v107 = *v105;
            v107[1] = v109;
            v107[2] = v108;
          }
          else
          {
            v106 = v165;
            v110 = (_OWORD *)((char *)v165 + 48 * HIDWORD(v166));
            v111 = v171[2];
            v112 = v171[0];
            v110[1] = v171[1];
            v110[2] = v111;
            *v110 = v112;
          }
          v113 = v104 + 1;
          HIDWORD(v166) = v113;
          if (v69 < v12)
          {
            if (!v113)
            {
              __break(0xC471u);
              JUMPOUT(0x1986DE878);
            }
            if ((_DWORD)v69
              && *(_QWORD *)(*(_QWORD *)this + 56 * v69 + 16) == *((_QWORD *)v106 + 6 * v113 - 5))
            {
              while (1)
              {
                v114 = *(_QWORD *)this;
                v115 = (v69 - 1);
                v116 = *(_QWORD *)this + 56 * v115;
                if (*(_QWORD *)(v116 + 8) != 31249)
                  break;
                v69 = (v69 - 2);
                if (v69 < v12)
                {
                  v117 = *(_QWORD *)v116;
                  v118 = *(_QWORD *)(v116 + 16);
                  v119 = *(_OWORD *)(v116 + 32);
                  v120 = *(_DWORD *)(v116 + 48);
                  v121 = (_QWORD *)(v114 + 56 * v69 + 16);
                  while (1)
                  {
                    v122 = *(v121 - 1);
                    if (v122 && v122 != 31249 && v122 != 31250 && *v121 == v118)
                      break;
                    --v69;
                    v121 -= 7;
                    if (v69 == -1)
                      goto LABEL_177;
                  }
                  if (*(unsigned __int8 *)(v119 + 5) - 51 >= 6)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1986DE848);
                  }
                  v171[0] = *(_OWORD *)(v114 + 56 * v69 + 8);
                  *(_QWORD *)&v171[1] = v117;
                  *(_OWORD *)((char *)&v171[1] + 8) = v119;
                  DWORD2(v171[2]) = v120;
                  BYTE12(v171[2]) = 1;
                  if (v113 == (_DWORD)v166)
                  {
                    v125 = (_OWORD *)WTF::Vector<WTF::Dominators<JSC::B3::BackwardsCFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v165, v113 + 1, (unint64_t)v171);
                    v113 = HIDWORD(v166);
                    v106 = v165;
                    v126 = (_OWORD *)((char *)v165 + 48 * HIDWORD(v166));
                    v128 = v125[1];
                    v127 = v125[2];
                    *v126 = *v125;
                    v126[1] = v128;
                    v126[2] = v127;
                  }
                  else
                  {
                    v129 = (_OWORD *)((char *)v106 + 48 * v113);
                    v130 = v171[0];
                    v131 = v171[2];
                    v129[1] = v171[1];
                    v129[2] = v131;
                    *v129 = v130;
                  }
                  v115 = 0;
                  HIDWORD(v166) = ++v113;
                  if ((_DWORD)v69)
                    continue;
                }
                goto LABEL_177;
              }
            }
          }
          goto LABEL_176;
        }
        v99 = 1;
LABEL_139:
        v93 = *((_QWORD *)v68 + 2);
        v100 = JSC::CallFrame::bytecodeIndex(v68);
        if (v93)
        {
          if (v100 != -1 && v100 != 0x3FFFFFFF)
          {
            v101 = *(int *)(v93 + 48);
            if ((_DWORD)v101 != 0x3FFFFFFF)
            {
              v94 = *((_QWORD *)v68 + v101);
              if (v94 != 10 && (*(_BYTE *)(*(_QWORD *)(v93 + 56) + 43) & 1) != 0)
              {
                if (*(unsigned __int8 *)(v94 + 5) - 51 >= 6)
                  goto LABEL_219;
                goto LABEL_150;
              }
            }
          }
        }
        if (!v99)
        {
          v94 = 0;
          goto LABEL_150;
        }
        goto LABEL_146;
      }
      v87 = -v72;
      v88 = (JSC::CallFrame **)(v74 + 56 * v72 + 16);
      while (1)
      {
        v89 = (uint64_t)*(v88 - 1);
        if (v89 && v89 != 31249)
        {
          v91 = v89 != v71 || v89 == 31250;
          if (!v91 && *v88 == v68)
            break;
        }
        ++v87;
        v88 -= 7;
        if (v87 == 1)
          goto LABEL_125;
      }
    }
    else
    {
      if (v73)
      {
        v75 = -v72;
        v82 = (_QWORD *)(v74 + 56 * v72 + 24);
        while (1)
        {
          v83 = *(v82 - 2);
          if (v83 && v83 != 31249)
          {
            v85 = v83 != 31250 && *(v82 - 1) == (_QWORD)v68;
            if (v85 && *v82 == v73)
              goto LABEL_127;
          }
          ++v75;
          v82 -= 7;
          if (v75 == 1)
            goto LABEL_138;
        }
      }
      v87 = -v72;
      v95 = (JSC::CallFrame **)(v74 + 56 * v72 + 16);
      while (1)
      {
        v96 = (uint64_t)*(v95 - 1);
        if (v96 && v96 != 31249 && v96 != 31250 && *v95 == v68)
          break;
        ++v87;
        v95 -= 7;
        if (v87 == 1)
          goto LABEL_138;
      }
    }
    v69 = -v87;
    goto LABEL_180;
  }
LABEL_185:
  v132 = v170;
  v170 = 0;
  if (v132)
  {
    do
    {
      v133 = __ldaxr(v132);
      v134 = v133 - 1;
    }
    while (__stlxr(v134, v132));
    if (!v134)
    {
      atomic_store(1u, v132);
      *(_QWORD *)&v171[0] = v132;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)v171, v61, (uint64_t)v62, v63, v64, v65, v66, v67);
    }
  }
  if (HIDWORD(v166))
  {
    v135 = HIDWORD(v166) - 1;
    v136 = 48 * (HIDWORD(v166) - 1);
    do
    {
      if (HIDWORD(v166) <= v135)
      {
        __break(0xC471u);
        JUMPOUT(0x1986DE868);
      }
      v62 = (__int128 *)((char *)v165 + v136);
      v137 = *((unsigned int *)this + 11);
      if ((_DWORD)v137 == *((_DWORD *)this + 10))
      {
        v138 = (_OWORD *)WTF::Vector<WTF::Dominators<JSC::B3::BackwardsCFG>::ValidationContext::Error,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 32, v137 + 1, (unint64_t)v62);
        v139 = (_OWORD *)(*((_QWORD *)this + 4) + 48 * *((unsigned int *)this + 11));
        v141 = v138[1];
        v140 = v138[2];
        *v139 = *v138;
        v139[1] = v141;
        v139[2] = v140;
      }
      else
      {
        v142 = (_OWORD *)(*v20 + 48 * v137);
        v143 = *v62;
        v144 = v62[2];
        v142[1] = v62[1];
        v142[2] = v144;
        *v142 = v143;
      }
      ++*((_DWORD *)this + 11);
      v136 -= 48;
      --v135;
    }
    while (v135 != -1);
  }
  v145 = *(_QWORD *)this;
  if ((_DWORD)v12 && *(_QWORD *)(v145 + 56 * (v12 - 1) + 8) == 31249)
  {
    v146 = v145 + 56 * (v12 - 1);
    v147 = *(_OWORD *)v146;
    v148 = *(_OWORD *)(v146 + 16);
    v149 = *(_OWORD *)(v146 + 32);
    *(_DWORD *)(v145 + 48) = *(_DWORD *)(v146 + 48);
    *(_OWORD *)(v145 + 16) = v148;
    *(_OWORD *)(v145 + 32) = v149;
    *(_OWORD *)v145 = v147;
    v145 = *(_QWORD *)this + 56;
  }
  *((_QWORD *)this + 2) = v145;
  v150 = dword_1ECF4C280;
  v151 = *((unsigned int *)this + 11);
  if (v151 > dword_1ECF4C280)
  {
    v152 = 0;
    v153 = 48 * v151;
    v154 = (unsigned __int8 *)(*v20 + 44);
    do
    {
      v155 = *v154;
      v154 += 48;
      v152 += v155;
      v153 -= 48;
    }
    while (v153);
    if (v152 > dword_1ECF4C280)
    {
      v156 = 0;
      v157 = 0;
      v158 = 0;
      do
      {
        v159 = (__int128 *)(*v20 + v156);
        v160 = *((_BYTE *)v159 + 44);
        if (v152 > v150 && (*((_BYTE *)v159 + 44) & 1) != 0)
        {
          --v152;
        }
        else
        {
          if (v151 <= v158)
          {
            __break(0xC471u);
            JUMPOUT(0x1986DE870);
          }
          v151 = *v20 + 48 * v158++;
          v161 = *v159;
          v162 = v159[1];
          v163 = *((_QWORD *)v159 + 4);
          *(_DWORD *)(v151 + 40) = *((_DWORD *)v159 + 10);
          *(_QWORD *)(v151 + 32) = v163;
          *(_OWORD *)v151 = v161;
          *(_OWORD *)(v151 + 16) = v162;
          *(_BYTE *)(v151 + 44) = v160;
          LODWORD(v151) = *((_DWORD *)this + 11);
        }
        ++v157;
        v156 += 48;
      }
      while (v157 < v151);
      *((_DWORD *)this + 11) = v158;
    }
  }
  v164 = v165;
  if (v165)
  {
    v165 = 0;
    LODWORD(v166) = 0;
    WTF::fastFree((unint64_t)v164, v61, (uint64_t)v62, v63, v64, v65, v66, v67);
  }
}

_QWORD *JSC::ShadowChicken::visitChildren(_QWORD *this, JSC::AbstractSlotVisitor *a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = this;
  v4 = -1227133513 * ((this[2] - *this) >> 3);
  if (v4)
  {
    v5 = v4 - 1;
    while (1)
    {
      v6 = v5;
      v7 = *(_QWORD *)(*v3 + 56 * v5 + 8);
      if (v7 == 31249)
        break;
      if (v7 != 31250)
      {
        (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
        v8 = (_QWORD *)(*v3 + 56 * v5 + 32);
LABEL_9:
        this = (_QWORD *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *v8);
      }
      --v5;
      if (!v6)
        goto LABEL_11;
    }
    (*(void (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(*v3 + 56 * v5 + 32));
    v9 = *v3;
    if ((*(_QWORD *)(*v3 + 56 * v5) & 0xFFFE000000000002) == 0)
    {
      (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
      v9 = *v3;
    }
    v8 = (_QWORD *)(v9 + 56 * v5 + 40);
    goto LABEL_9;
  }
LABEL_11:
  v10 = *((_DWORD *)v3 + 11);
  if (v10)
  {
    v11 = v10 - 1;
    v12 = 48 * (v10 - 1);
    while (*((_DWORD *)v3 + 11) > v11)
    {
      v13 = v3[4];
      v14 = (_QWORD *)(v13 + v12);
      if ((*(_QWORD *)(v13 + v12 + 16) & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
      this = (_QWORD *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *v14);
      if (v14[3])
        this = (_QWORD *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
      if (*(_QWORD *)(v13 + v12 + 32))
        this = (_QWORD *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2);
      v12 -= 48;
      if (--v11 == -1)
        return this;
    }
    __break(0xC471u);
  }
  return this;
}

unint64_t JSC::ShadowChicken::functionsOnStack(JSC::ShadowChicken *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, __n128 a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  int v33;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;

  v12 = *((_QWORD *)a2 + 7);
  v13 = *(_DWORD *)(v12 + 88);
  *(_DWORD *)(v12 + 88) = v13 + 1;
  if (!v13)
  {
    v14 = *(_QWORD *)(v12 + 16);
    if (v14)
    {
      if (*(_QWORD *)(v12 + 24) == v14)
      {
        *(_QWORD *)(v12 + 16) = 0;
        v36 = (unsigned int *)(v12 + 80);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 & 0xFFFFFFEF, v36));
        *(_BYTE *)(v12 + 86) = 1;
      }
    }
  }
  v21 = JSC::constructEmptyArray((unint64_t)a2, 0, 0, 0, a6, a7, a8, a9, a4);
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_4;
  v35 = *(_DWORD *)(v12 + 80);
  if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v15, v16, v17, v18, v19, v20);
  if (*(_QWORD *)(v12 + 16))
  {
    v21 = 0;
  }
  else
  {
LABEL_4:
    ++*(_DWORD *)(v12 + 916);
    JSC::ShadowChicken::update(this, (JSC::VM *)v12, a3, v16, v17, v18, v19, v20);
    v28 = *((unsigned int *)this + 11);
    v29 = 48 * v28 - 48;
    while (v28)
    {
      if (--v28 < (unint64_t)*((unsigned int *)this + 11))
      {
        v30 = v29 - 48;
        JSC::JSArray::push(v21, (JSC::VM **)a2, *(_QWORD *)(*((_QWORD *)this + 4) + v29), v22, v23, v24, v25, v26, v27);
        v29 = v30;
        if (!*(_QWORD *)(v12 + 16))
          continue;
      }
      __break(0xC471u);
      JUMPOUT(0x1986DEB34);
    }
    v31 = *(_DWORD *)(v12 + 916) - 1;
    *(_DWORD *)(v12 + 916) = v31;
    if (*(unsigned __int8 *)(v12 + 1198) | HIBYTE(dword_1ECF4C5CE))
      v32 = v31 == 0;
    else
      v32 = 0;
    if (v32)
    {
      *(_BYTE *)(v12 + 1198) = 0;
      JSC::Heap::collectIfNecessaryOrDefer(v12 + 192, 0);
    }
  }
  v33 = *(_DWORD *)(v12 + 88) - 1;
  *(_DWORD *)(v12 + 88) = v33;
  if (!v33 && *(_BYTE *)(v12 + 93441))
  {
    v38 = *(_QWORD *)(v12 + 24);
    *(_QWORD *)(v12 + 16) = v38;
    *(_QWORD *)(v12 + 32) = v38;
    if (v38)
    {
      v39 = (unsigned int *)(v12 + 80);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 | 0x10, v39));
    }
    if (*(_BYTE *)(v12 + 93443))
      *(_BYTE *)(v12 + 93442) = 1;
    *(_BYTE *)(v12 + 86) = 0;
  }
  return v21;
}

JSC::StackVisitor *JSC::StackVisitor::StackVisitor(JSC::StackVisitor *this, JSC::CallFrame *a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::CallFrame *v8;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::CallFrame *v20;
  JSC::CallFrame *v22;
  uint64_t v23;
  uint64_t v25;
  JSC::CallFrame *v26;
  BOOL v27;

  v8 = a2;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 20) = -1;
  *((_QWORD *)this + 11) = 0x4000000000000000;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_QWORD *)this + 8) = 0;
  v10 = *((_BYTE *)this + 84) & 0xFD;
  *((_BYTE *)this + 84) = v10;
  *((_DWORD *)this + 2) = 0;
  if (a2)
  {
    a2 = (JSC::CallFrame *)*((_QWORD *)a3 + 5);
    v11 = *((_QWORD *)a3 + 6);
    *((_QWORD *)this + 3) = v11;
    if (a2)
    {
      if ((a4 & 1) != 0
        || (v12 = *((_QWORD *)a2 + 3), (v12 & 0xFFFE000000000007) != 3)
        && *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x28) + 96) == v12)
      {
        v22 = *(JSC::CallFrame **)a2;
        if (*(_QWORD *)a2 == v11)
        {
          v25 = vmEntryRecord(v11);
          v23 = *(_QWORD *)(v25 + 16);
          *((_QWORD *)this + 3) = v23;
          v22 = *(JSC::CallFrame **)(v25 + 8);
          a2 = (JSC::CallFrame *)*((_QWORD *)a3 + 5);
          v11 = *((_QWORD *)a3 + 6);
          v10 = *((_BYTE *)this + 84);
        }
        else
        {
          v23 = v11;
        }
        *((_BYTE *)this + 104) = v23 != v11;
        if (a2 == v8)
          v8 = v22;
        a2 = v22;
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  *((_BYTE *)this + 84) = v10 & 0xFE;
  JSC::StackVisitor::readFrame(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v20 = (JSC::CallFrame *)*((_QWORD *)this + 2);
  if (v20 && v20 != v8)
  {
    do
    {
      JSC::StackVisitor::gotoNextFrame(this, v13, v14, v15, v16, v17, v18, v19);
      v26 = (JSC::CallFrame *)*((_QWORD *)this + 2);
      if (v26)
        v27 = v26 == v8;
      else
        v27 = 1;
    }
    while (!v27);
  }
  return this;
}

void JSC::StackVisitor::readFrame(JSC::StackVisitor *this, JSC::CallFrame *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;

  if (!a2)
    goto LABEL_35;
  if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
  {
    JSC::StackVisitor::readInlinableNativeCalleeFrame(this, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v10 = *((_QWORD *)a2 + 2);
  if (v10)
  {
    v11 = *(_BYTE **)(v10 + 120);
    if (v11 && (v11[12] & 0xFE) == 4)
    {
      v12 = *((unsigned int *)a2 + 9);
      if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v11 + 72))(v11) + 40) + 20) > v12)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 120) + 72))(*(_QWORD *)(v10 + 120))
                                                + 40)
                                    + 8)
                        + 8 * v12);
        if ((v20 & 1) != 0)
        {
          v52 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
          if ((v20 & 2) != 0
            || ((v53 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v53 != 0x3FFFFFFF)
              ? (v54 = (_DWORD)v53 == -1)
              : (v54 = 1),
                v54))
          {
            v55 = 2;
          }
          else if (v53 >> 28)
          {
            v61 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v61 = v52;
            *(_DWORD *)(v61 + 8) = v53;
            v55 = 1;
            v52 = v61;
          }
          else
          {
            v55 = v52;
            v52 = v53 << 36;
          }
          v20 = v52 | v55;
        }
        v63 = v20;
        v21 = (uint64_t *)(v20 & 0xFFFFFFFF8);
        v22 = v20 & 0xFFFFFFFF8;
        if ((v20 & 1) != 0)
          v22 = *v21;
        if (v22)
        {
          JSC::StackVisitor::readInlinedFrame(this, a2, (JSC::CodeOrigin *)&v63);
        }
        else
        {
          *((_QWORD *)this + 2) = a2;
          *((_QWORD *)this + 9) = *((int *)a2 + 8);
          v23 = *((_QWORD *)this + 3);
          *((_QWORD *)this + 4) = v23;
          v24 = *(_QWORD *)a2;
          if (*(_QWORD *)a2 == v23)
          {
            v35 = vmEntryRecord(v23);
            v25 = *(_QWORD *)(v35 + 16);
            *((_QWORD *)this + 4) = v25;
            v24 = *(_QWORD *)(v35 + 8);
            v23 = *((_QWORD *)this + 3);
          }
          else
          {
            v25 = v23;
          }
          *((_QWORD *)this + 5) = v24;
          *((_BYTE *)this + 84) = *((_BYTE *)this + 84) & 0xFC | (v25 != v23);
          *((_QWORD *)this + 6) = *((_QWORD *)a2 + 3);
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
          {
            LODWORD(v26) = 0;
            *((_QWORD *)this + 7) = 0;
          }
          else
          {
            v26 = *((_QWORD *)a2 + 2);
            *((_QWORD *)this + 7) = v26;
            if (v26)
            {
              if ((v20 & 2) != 0)
              {
                LODWORD(v26) = -1;
              }
              else if ((v20 & 1) != 0)
              {
                LODWORD(v26) = *(_DWORD *)((v20 & 0xFFFFFFFF8) + 8);
              }
              else
              {
                v26 = v20 >> 36;
              }
            }
          }
          *((_DWORD *)this + 20) = v26;
          if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
          {
            __break(0xC471u);
            JUMPOUT(0x1986DF1B4);
          }
        }
        if ((v20 & 1) != 0)
        {
          if (v21)
            WTF::fastFree(v20 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
        }
        return;
      }
LABEL_35:
      *((_QWORD *)this + 2) = 0;
      *(_QWORD *)this = 0;
      *((_BYTE *)this + 84) &= ~2u;
      return;
    }
    *((_QWORD *)this + 2) = a2;
    *((_QWORD *)this + 9) = *((int *)a2 + 8);
    v27 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 4) = v27;
    v28 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 == v27)
    {
      v41 = vmEntryRecord(v27);
      v29 = *(_QWORD *)(v41 + 16);
      *((_QWORD *)this + 4) = v29;
      v28 = *(_QWORD *)(v41 + 8);
      v27 = *((_QWORD *)this + 3);
    }
    else
    {
      v29 = v27;
    }
    *((_QWORD *)this + 5) = v28;
    *((_BYTE *)this + 84) = *((_BYTE *)this + 84) & 0xFC | (v29 != v27);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 3);
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
    {
      LODWORD(v34) = 0;
      *((_QWORD *)this + 7) = 0;
    }
    else
    {
      v30 = *((_QWORD *)a2 + 2);
      *((_QWORD *)this + 7) = v30;
      if (!v30)
        goto LABEL_89;
      if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
      {
LABEL_30:
        LODWORD(v34) = 4 * *((_DWORD *)a2 + 9);
        goto LABEL_31;
      }
      v31 = *((_QWORD *)a2 + 2);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 120);
        if (!v32)
          goto LABEL_44;
        v33 = *(unsigned __int8 *)(v32 + 12);
        if (v33 - 4 >= 2)
        {
          if (v33 > 1)
            goto LABEL_30;
LABEL_44:
          __break(0xC471u);
          JUMPOUT(0x1986DF0DCLL);
        }
        JSC::CallFrame::codeOrigin((uint64_t)a2, (uint64_t *)&v63);
        v50 = v63;
        v51 = (uint64_t *)(v63 & 0xFFFFFFFF8);
        if ((v63 & 1) != 0)
          v51 = (uint64_t *)*v51;
        while (v51)
        {
          if ((v50 & 1) != 0 && (v50 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v50 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
          v50 = v51[2];
          v51 = (uint64_t *)(v50 & 0xFFFFFFFF8);
          if ((v50 & 1) != 0)
          {
            v56 = *v51;
            if ((v50 & 2) != 0
              || ((v57 = *(unsigned int *)((v50 & 0xFFFFFFFF8) + 8), (_DWORD)v57 != 0x3FFFFFFF)
                ? (v58 = (_DWORD)v57 == -1)
                : (v58 = 1),
                  v58))
            {
              v59 = 2;
            }
            else if (v57 >> 28)
            {
              v62 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v62 = v56;
              *(_DWORD *)(v62 + 8) = v57;
              v59 = 1;
              v56 = v62;
            }
            else
            {
              v59 = v56;
              v56 = v57 << 36;
            }
            v50 = v56 | v59;
            v51 = (uint64_t *)(v50 & 0xFFFFFFFF8);
            if ((v50 & 1) != 0)
              v51 = (uint64_t *)*v51;
          }
        }
        if ((v50 & 2) == 0)
        {
          if ((v50 & 1) == 0)
          {
            v34 = v50 >> 36;
            goto LABEL_31;
          }
          v60 = v50 & 0xFFFFFFFF8;
          LODWORD(v34) = *(_DWORD *)((v50 & 0xFFFFFFFF8) + 8);
LABEL_87:
          if (v60)
            WTF::fastFree(v60, v43, v44, v45, v46, v47, v48, v49);
          goto LABEL_31;
        }
        if ((v50 & 1) != 0)
        {
          v60 = v50 & 0xFFFFFFFF8;
          LODWORD(v34) = -1;
          goto LABEL_87;
        }
        LODWORD(v34) = -1;
      }
      else
      {
LABEL_89:
        LODWORD(v34) = 0;
      }
    }
LABEL_31:
    *((_DWORD *)this + 20) = v34;
    if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1986DEFC8);
    }
    return;
  }
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 9) = *((int *)a2 + 8);
  v36 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v36;
  v37 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == v36)
  {
    v42 = vmEntryRecord(v36);
    v38 = *(_QWORD *)(v42 + 16);
    *((_QWORD *)this + 4) = v38;
    v37 = *(_QWORD *)(v42 + 8);
    v36 = *((_QWORD *)this + 3);
  }
  else
  {
    v38 = v36;
  }
  *((_QWORD *)this + 5) = v37;
  *((_BYTE *)this + 84) = *((_BYTE *)this + 84) & 0xFC | (v38 != v36);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 3);
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
  {
    v40 = 0;
    *((_QWORD *)this + 7) = 0;
  }
  else
  {
    v39 = *((_QWORD *)a2 + 2);
    *((_QWORD *)this + 7) = v39;
    if (v39)
      v40 = JSC::CallFrame::bytecodeIndex(a2);
    else
      v40 = 0;
  }
  *((_DWORD *)this + 20) = v40;
  if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1986DF0BCLL);
  }
}

void JSC::StackVisitor::gotoNextFrame(JSC::StackVisitor *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::CallFrame *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;

  ++*((_QWORD *)this + 8);
  if ((*((_QWORD *)this + 6) & 0xFFFE000000000007) != 3 && (v9 = *(_QWORD *)this) != 0)
  {
    v36 = *(_QWORD **)this;
    do
    {
      v37 = v36;
      v38 = v36[2];
      v39 = v36[3] >> 60;
      v36 = (_QWORD *)(v38 & 0xFFFFFFFF8);
      if ((v38 & 1) != 0)
        v36 = (_QWORD *)*v36;
      v40 = (v39 < 0xC) & (0x824u >> v39);
      if (v36)
        v41 = v40;
      else
        v41 = 0;
    }
    while ((v41 & 1) != 0);
    if (v40)
    {
      do
      {
        JSC::StackVisitor::readInlinedFrame(this, *((JSC::CallFrame **)this + 2), (JSC::CodeOrigin *)(v9 + 16));
        v9 = *(_QWORD *)this;
      }
      while (*(_QWORD *)this);
      v53 = (JSC::CallFrame *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 3) = *((_QWORD *)this + 4);
      JSC::StackVisitor::readFrame(this, v53, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      JSC::StackVisitor::readInlinedFrame(this, *((JSC::CallFrame **)this + 2), (JSC::CodeOrigin *)(v37 + 2));
    }
  }
  else
  {
    v10 = *((_QWORD *)this + 4);
    v11 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 3) = v10;
    if (!v11)
      goto LABEL_46;
    if ((*(_QWORD *)(v11 + 24) & 0xFFFE000000000007) == 3)
    {
      JSC::StackVisitor::readInlinableNativeCalleeFrame(this, (JSC::CallFrame *)v11, a3, a4, a5, a6, a7, a8);
      return;
    }
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = *(_BYTE **)(v12 + 120);
      if (v13 && (v13[12] & 0xFE) == 4)
      {
        v14 = *(unsigned int *)(v11 + 36);
        if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v13 + 72))(*(_QWORD *)(v12 + 120))
                                   + 40)
                       + 20) > v14)
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 120) + 72))(*(_QWORD *)(v12 + 120))
                                                  + 40)
                                      + 8)
                          + 8 * v14);
          if ((v22 & 1) != 0)
          {
            v65 = *(_QWORD *)(v22 & 0xFFFFFFFF8);
            if ((v22 & 2) != 0
              || ((v66 = *(unsigned int *)((v22 & 0xFFFFFFFF8) + 8), (_DWORD)v66 != 0x3FFFFFFF)
                ? (v67 = (_DWORD)v66 == -1)
                : (v67 = 1),
                  v67))
            {
              v68 = 2;
            }
            else if (v66 >> 28)
            {
              v74 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v74 = v65;
              *(_DWORD *)(v74 + 8) = v66;
              v68 = 1;
              v65 = v74;
            }
            else
            {
              v68 = v65;
              v65 = v66 << 36;
            }
            v22 = v65 | v68;
          }
          v76 = v22;
          v23 = (uint64_t *)(v22 & 0xFFFFFFFF8);
          v24 = v22 & 0xFFFFFFFF8;
          if ((v22 & 1) != 0)
            v24 = *v23;
          if (v24)
          {
            JSC::StackVisitor::readInlinedFrame(this, (JSC::CallFrame *)v11, (JSC::CodeOrigin *)&v76);
          }
          else
          {
            *((_QWORD *)this + 2) = v11;
            *((_QWORD *)this + 9) = *(int *)(v11 + 32);
            v25 = *((_QWORD *)this + 3);
            *((_QWORD *)this + 4) = v25;
            v26 = *(_QWORD *)v11;
            if (*(_QWORD *)v11 == v25)
            {
              v42 = vmEntryRecord(v25);
              v27 = *(_QWORD *)(v42 + 16);
              *((_QWORD *)this + 4) = v27;
              v26 = *(_QWORD *)(v42 + 8);
              v25 = *((_QWORD *)this + 3);
            }
            else
            {
              v27 = v25;
            }
            *((_QWORD *)this + 5) = v26;
            *((_BYTE *)this + 84) = *((_BYTE *)this + 84) & 0xFC | (v27 != v25);
            *((_QWORD *)this + 6) = *(_QWORD *)(v11 + 24);
            *(_QWORD *)this = 0;
            *((_DWORD *)this + 2) = 0;
            if ((*(_QWORD *)(v11 + 24) & 0xFFFE000000000007) == 3)
            {
              LODWORD(v28) = 0;
              *((_QWORD *)this + 7) = 0;
            }
            else
            {
              v28 = *(_QWORD *)(v11 + 16);
              *((_QWORD *)this + 7) = v28;
              if (v28)
              {
                if ((v22 & 2) != 0)
                {
                  LODWORD(v28) = -1;
                }
                else if ((v22 & 1) != 0)
                {
                  LODWORD(v28) = *(_DWORD *)((v22 & 0xFFFFFFFF8) + 8);
                }
                else
                {
                  v28 = v22 >> 36;
                }
              }
            }
            *((_DWORD *)this + 20) = v28;
            if ((*(_QWORD *)(v11 + 24) & 0xFFFE000000000007) == 3)
            {
              __break(0xC471u);
              JUMPOUT(0x1986DF7BCLL);
            }
          }
          if ((v22 & 1) != 0)
          {
            if (v23)
              WTF::fastFree(v22 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
          }
          return;
        }
LABEL_46:
        *((_QWORD *)this + 2) = 0;
        *(_QWORD *)this = 0;
        *((_BYTE *)this + 84) &= ~2u;
        return;
      }
      *((_QWORD *)this + 2) = v11;
      *((_QWORD *)this + 9) = *(int *)(v11 + 32);
      v29 = *(_QWORD *)v11;
      if (*(_QWORD *)v11 == v10)
      {
        v54 = vmEntryRecord(v10);
        v30 = *(_QWORD *)(v54 + 16);
        *((_QWORD *)this + 4) = v30;
        v29 = *(_QWORD *)(v54 + 8);
        v10 = *((_QWORD *)this + 3);
      }
      else
      {
        v30 = v10;
      }
      *((_QWORD *)this + 5) = v29;
      *((_BYTE *)this + 84) = *((_BYTE *)this + 84) & 0xFC | (v30 != v10);
      *((_QWORD *)this + 6) = *(_QWORD *)(v11 + 24);
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      if ((*(_QWORD *)(v11 + 24) & 0xFFFE000000000007) == 3)
      {
        LODWORD(v35) = 0;
        *((_QWORD *)this + 7) = 0;
      }
      else
      {
        v31 = *(_QWORD *)(v11 + 16);
        *((_QWORD *)this + 7) = v31;
        if (!v31)
          goto LABEL_102;
        if ((*(_QWORD *)(v11 + 24) & 0xFFFE000000000007) == 3)
        {
LABEL_32:
          LODWORD(v35) = 4 * *(_DWORD *)(v11 + 36);
          goto LABEL_33;
        }
        v32 = *(_QWORD *)(v11 + 16);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 120);
          if (!v33)
            goto LABEL_57;
          v34 = *(unsigned __int8 *)(v33 + 12);
          if (v34 - 4 >= 2)
          {
            if (v34 > 1)
              goto LABEL_32;
LABEL_57:
            __break(0xC471u);
            JUMPOUT(0x1986DF6E4);
          }
          JSC::CallFrame::codeOrigin(v11, (uint64_t *)&v76);
          v63 = v76;
          v64 = (uint64_t *)(v76 & 0xFFFFFFFF8);
          if ((v76 & 1) != 0)
            v64 = (uint64_t *)*v64;
          while (v64)
          {
            if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v63 & 0xFFFFFFFF8, v56, v57, v58, v59, v60, v61, v62);
            v63 = v64[2];
            v64 = (uint64_t *)(v63 & 0xFFFFFFFF8);
            if ((v63 & 1) != 0)
            {
              v69 = *v64;
              if ((v63 & 2) != 0
                || ((v70 = *(unsigned int *)((v63 & 0xFFFFFFFF8) + 8), (_DWORD)v70 != 0x3FFFFFFF)
                  ? (v71 = (_DWORD)v70 == -1)
                  : (v71 = 1),
                    v71))
              {
                v72 = 2;
              }
              else if (v70 >> 28)
              {
                v75 = WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v75 = v69;
                *(_DWORD *)(v75 + 8) = v70;
                v72 = 1;
                v69 = v75;
              }
              else
              {
                v72 = v69;
                v69 = v70 << 36;
              }
              v63 = v69 | v72;
              v64 = (uint64_t *)(v63 & 0xFFFFFFFF8);
              if ((v63 & 1) != 0)
                v64 = (uint64_t *)*v64;
            }
          }
          if ((v63 & 2) == 0)
          {
            if ((v63 & 1) == 0)
            {
              v35 = v63 >> 36;
              goto LABEL_33;
            }
            v73 = v63 & 0xFFFFFFFF8;
            LODWORD(v35) = *(_DWORD *)((v63 & 0xFFFFFFFF8) + 8);
LABEL_100:
            if (v73)
              WTF::fastFree(v73, v56, v57, v58, v59, v60, v61, v62);
            goto LABEL_33;
          }
          if ((v63 & 1) != 0)
          {
            v73 = v63 & 0xFFFFFFFF8;
            LODWORD(v35) = -1;
            goto LABEL_100;
          }
          LODWORD(v35) = -1;
        }
        else
        {
LABEL_102:
          LODWORD(v35) = 0;
        }
      }
LABEL_33:
      *((_DWORD *)this + 20) = v35;
      if ((*(_QWORD *)(v11 + 24) & 0xFFFE000000000007) == 3)
      {
        __break(0xC471u);
        JUMPOUT(0x1986DF538);
      }
      return;
    }
    *((_QWORD *)this + 2) = v11;
    *((_QWORD *)this + 9) = *(int *)(v11 + 32);
    v43 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 == v10)
    {
      v55 = vmEntryRecord(v10);
      v44 = *(_QWORD *)(v55 + 16);
      *((_QWORD *)this + 4) = v44;
      v43 = *(_QWORD *)(v55 + 8);
      v10 = *((_QWORD *)this + 3);
    }
    else
    {
      v44 = v10;
    }
    *((_QWORD *)this + 5) = v43;
    *((_BYTE *)this + 84) = *((_BYTE *)this + 84) & 0xFC | (v44 != v10);
    *((_QWORD *)this + 6) = *(_QWORD *)(v11 + 24);
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    if ((*(_QWORD *)(v11 + 24) & 0xFFFE000000000007) == 3)
    {
      v46 = 0;
      *((_QWORD *)this + 7) = 0;
    }
    else
    {
      v45 = *(_QWORD *)(v11 + 16);
      *((_QWORD *)this + 7) = v45;
      if (v45)
        v46 = JSC::CallFrame::bytecodeIndex((JSC::CallFrame *)v11);
      else
        v46 = 0;
    }
    *((_DWORD *)this + 20) = v46;
    if ((*(_QWORD *)(v11 + 24) & 0xFFFE000000000007) == 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1986DF688);
    }
  }
}

unint64_t JSC::StackVisitor::readInlinedFrame(JSC::StackVisitor *this, JSC::CallFrame *a2, JSC::CodeOrigin *a3)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t result;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  unsigned int v21;

  v6 = *((_BYTE *)this + 84) & 0xFD;
  *((_BYTE *)this + 84) = v6;
  *((_DWORD *)this + 2) = 0;
  v7 = *(_QWORD *)a3;
  v8 = *(_QWORD *)a3 & 0xFFFFFFFF8;
  v9 = v8;
  if ((*(_QWORD *)a3 & 1) != 0)
    v9 = *(_QWORD *)v8;
  if (v9 && HIDWORD(*(_QWORD *)(v9 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v9 + 24) >> 28) >> 24 << 20))
  {
    v10 = *(_QWORD *)a3 & 0xFFFFFFFF8;
    if ((v7 & 1) != 0)
      v10 = *(_QWORD *)v8;
    *((_QWORD *)this + 2) = a2;
    *(_QWORD *)this = v10;
    v11 = *(int *)(v10 + 36);
    if ((_DWORD)v11 == 0x3FFFFFFF)
    {
      v12 = *(_QWORD *)(v10 + 24) & 0x3FFFFFLL;
LABEL_9:
      *((_QWORD *)this + 9) = v12;
      *((_QWORD *)this + 7) = *(_QWORD *)(v10 + 8);
      if ((v7 & 2) != 0)
      {
        LODWORD(v13) = -1;
      }
      else if ((v7 & 1) != 0)
      {
        LODWORD(v13) = *(_DWORD *)(v8 + 8);
      }
      else
      {
        v13 = v7 >> 36;
      }
      *((_DWORD *)this + 20) = v13;
      result = JSC::ValueRecovery::recover(v10 + 40, (uint64_t)a2);
      *((_QWORD *)this + 5) = a2;
      *((_QWORD *)this + 6) = result;
      return result;
    }
    if ((int)v11 < 0x40000000)
    {
      v19 = (int *)((char *)a2 + 8 * v11);
LABEL_30:
      v12 = *v19;
      goto LABEL_9;
    }
    v20 = *((_QWORD *)a2 + 2);
    v21 = v11 - 0x40000000;
    if (v21 < *(_DWORD *)(v20 + 172))
    {
      v19 = (int *)(*(_QWORD *)(v20 + 160) + 8 * v21);
      goto LABEL_30;
    }
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x1986DFA5CLL);
  }
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 9) = *((int *)a2 + 8);
  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = result;
  v15 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == result)
  {
    v18 = vmEntryRecord(result);
    v16 = *(_QWORD *)(v18 + 16);
    *((_QWORD *)this + 4) = v16;
    v15 = *(_QWORD *)(v18 + 8);
    result = *((_QWORD *)this + 3);
    v6 = *((_BYTE *)this + 84);
  }
  else
  {
    v16 = result;
  }
  *((_QWORD *)this + 5) = v15;
  *((_BYTE *)this + 84) = v6 & 0xFC | (v16 != result);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 3);
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
  {
    LODWORD(v17) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  else
  {
    v17 = *((_QWORD *)a2 + 2);
    *((_QWORD *)this + 7) = v17;
    if (v17)
    {
      v17 = *(_QWORD *)a3;
      if ((*(_QWORD *)a3 & 2) != 0)
      {
        LODWORD(v17) = -1;
      }
      else if ((v17 & 1) != 0)
      {
        LODWORD(v17) = *(_DWORD *)((v17 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v17 >>= 36;
      }
    }
  }
  *((_DWORD *)this + 20) = v17;
  if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
    goto LABEL_34;
  return result;
}

void JSC::StackVisitor::unwindToMachineCodeBlockFrame(JSC::StackVisitor *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::StackVisitor *v23;
  JSC::StackVisitor *v24;
  uint64_t v25;

  if ((*((_QWORD *)this + 6) & 0xFFFE000000000007) == 3 || !*(_QWORD *)this)
    return;
  v8 = *(_QWORD *)(*(_QWORD *)this + 16);
  if ((v8 & 1) != 0)
  {
    v24 = this;
    v17 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 2) != 0
      || ((v18 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v18 != 0x3FFFFFFF)
        ? (v19 = (_DWORD)v18 == -1)
        : (v19 = 1),
          v19))
    {
      v20 = 2;
    }
    else
    {
      v21 = v17;
      v22 = v18;
      if (v18 >> 28)
      {
        v17 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v17 = v21;
        *(_DWORD *)(v17 + 8) = v22;
        v20 = 1;
      }
      else
      {
        v20 = v17;
        v17 = v22 << 36;
      }
    }
    v8 = v17 | v20;
    this = v24;
  }
  v25 = v8;
  while (1)
  {
    v9 = (_QWORD *)(v8 & 0xFFFFFFFF8);
    if ((v8 & 1) != 0)
      break;
    if (!v9)
      goto LABEL_8;
LABEL_12:
    v23 = this;
    JSC::CodeOrigin::operator=(&v25, v9 + 2, a3, a4, a5, a6, a7, a8);
    v8 = v25;
    this = v23;
  }
  v9 = (_QWORD *)*v9;
  if (v9)
    goto LABEL_12;
LABEL_8:
  JSC::StackVisitor::readNonInlinedFrame(this, *((JSC::CallFrame **)this + 2), (JSC::CodeOrigin *)&v25);
  if ((v25 & 1) != 0 && (v25 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v25 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
}

unint64_t JSC::StackVisitor::readNonInlinedFrame(JSC::StackVisitor *this, JSC::CallFrame *a2, JSC::CodeOrigin *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v12;

  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 9) = *((int *)a2 + 8);
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v6;
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == v6)
  {
    v12 = vmEntryRecord(v6);
    v8 = *(_QWORD *)(v12 + 16);
    *((_QWORD *)this + 4) = v8;
    v7 = *(_QWORD *)(v12 + 8);
    v6 = *((_QWORD *)this + 3);
  }
  else
  {
    v8 = v6;
  }
  *((_QWORD *)this + 5) = v7;
  *((_BYTE *)this + 84) = *((_BYTE *)this + 84) & 0xFC | (v8 != v6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 3);
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
  {
    result = 0;
    *((_QWORD *)this + 7) = 0;
  }
  else
  {
    v9 = *((_QWORD *)a2 + 2);
    *((_QWORD *)this + 7) = v9;
    if (v9)
    {
      if (a3)
      {
        v10 = *(_QWORD *)a3;
        if ((*(_QWORD *)a3 & 2) != 0)
        {
          result = 0xFFFFFFFFLL;
        }
        else if ((v10 & 1) != 0)
        {
          result = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8);
        }
        else
        {
          result = v10 >> 36;
        }
      }
      else
      {
        result = JSC::CallFrame::bytecodeIndex(a2);
      }
    }
    else
    {
      result = 0;
    }
  }
  *((_DWORD *)this + 20) = result;
  if ((*((_QWORD *)a2 + 3) & 0xFFFE000000000007) == 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1986DFD04);
  }
  return result;
}

void JSC::StackVisitor::readInlinableNativeCalleeFrame(JSC::StackVisitor *this, JSC::CallFrame *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  int v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  int v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  unsigned int *v51;
  JSC::Wasm::NameSection *v52;

  v8 = *((_QWORD *)a2 + 3);
  if ((v8 & 0xFFFE000000000007) != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1986DFF70);
  }
  v11 = qword_1ECF4C080 + (v8 & 0xFFFFFFFFFFFFFFFCLL);
  if (*(_BYTE *)(v11 + 4) == 1)
  {
    v12 = *((_DWORD *)this + 2);
    v13 = *((_BYTE *)this + 84) | 2;
    *((_BYTE *)this + 84) = v13;
    *((_QWORD *)this + 2) = a2;
    *((_QWORD *)this + 9) = *((int *)a2 + 8);
    v14 = (_QWORD *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 4) = v14;
    v15 = *(_QWORD *)a2;
    if (*(_QWORD **)a2 == v14)
      goto LABEL_25;
    v16 = v14;
    while (1)
    {
      *((_QWORD *)this + 5) = v15;
      *((_BYTE *)this + 84) = v13 & 0xFE | (v16 != v14);
      *((_QWORD *)this + 6) = *((_QWORD *)a2 + 3);
      *((_QWORD *)this + 7) = 0;
      *((_DWORD *)this + 2) = 0;
      v17 = *(unsigned int **)(v11 + 16);
      v50 = *(_QWORD *)(v11 + 8);
      if (v17)
      {
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
      }
      v51 = v17;
      v14 = JSC::Wasm::IndexOrName::operator=((_QWORD *)this + 11, &v50, a3, a4, a5, a6, a7, a8);
      v26 = v51;
      v51 = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          v52 = (JSC::Wasm::NameSection *)v26;
          WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v52, v19, v20, v21, v22, v23, v24, v25);
        }
      }
      v29 = *(unsigned __int8 *)(v11 + 6);
      if (v29 - 4 < 2)
        break;
      v40 = v29 > 9;
      v41 = (1 << v29) & 0x3CF;
      if (!v40 && v41 != 0)
        return;
      __break(1u);
LABEL_25:
      v43 = vmEntryRecord((uint64_t)v14);
      v16 = *(_QWORD **)(v43 + 16);
      *((_QWORD *)this + 4) = v16;
      v15 = *(_QWORD *)(v43 + 8);
      v14 = (_QWORD *)*((_QWORD *)this + 3);
      v13 = *((_BYTE *)this + 84);
    }
    v49 = 0;
    JSC::Wasm::OptimizingJITCallee::getOrigin(v11, &v49, *((_DWORD *)a2 + 9), v12, &v50);
    if (v49)
    {
      *((_QWORD *)this + 5) = a2;
      *((_DWORD *)this + 2) = v12 + 1;
      JSC::Wasm::IndexOrName::operator=((_QWORD *)this + 11, &v50, v31, v32, v33, v34, v35, v36);
    }
    v37 = v51;
    v51 = 0;
    if (v37)
    {
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        atomic_store(1u, v37);
        v52 = (JSC::Wasm::NameSection *)v37;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v52, v30, v31, v32, v33, v34, v35, v36);
      }
    }
  }
  else if (!*(_BYTE *)(v11 + 4))
  {
    *((_QWORD *)this + 2) = a2;
    *((_QWORD *)this + 9) = *((int *)a2 + 8);
    v44 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 4) = v44;
    v45 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 == v44)
    {
      v48 = vmEntryRecord(v44);
      v46 = *(_QWORD *)(v48 + 16);
      *((_QWORD *)this + 4) = v46;
      v45 = *(_QWORD *)(v48 + 8);
      v44 = *((_QWORD *)this + 3);
    }
    else
    {
      v46 = v44;
    }
    *((_QWORD *)this + 5) = v45;
    *((_BYTE *)this + 84) = *((_BYTE *)this + 84) & 0xFC | (v46 != v44);
    v47 = *((_QWORD *)a2 + 3);
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    *((_QWORD *)this + 6) = v47;
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 20) = 0;
  }
}

_QWORD *JSC::Wasm::IndexOrName::operator=(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  JSC::Wasm::NameSection *v14;

  *a1 = *a2;
  v9 = a2[1];
  a2[1] = 0;
  v10 = (unsigned int *)a1[1];
  a1[1] = v9;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      v14 = (JSC::Wasm::NameSection *)v10;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v14, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

{
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  JSC::Wasm::NameSection *v15;

  *a1 = *a2;
  v9 = (unsigned int *)a2[1];
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = (unsigned int *)a1[1];
  a1[1] = v9;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      v15 = (JSC::Wasm::NameSection *)v11;
      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v15, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

uint64_t JSC::StackVisitor::Frame::codeType(JSC::StackVisitor::Frame *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 6);
  if ((v1 & 0xFFFE000000000007) == 3)
  {
    if (*(_BYTE *)(qword_1ECF4C080 + (v1 & 0xFFFFFFFFFFFFFFFCLL) + 4) == 1)
      return 5;
    else
      return 4;
  }
  else
  {
    v2 = *((_QWORD *)this + 7);
    if (v2)
      return (*(unsigned __int16 *)(*(_QWORD *)(v2 + 56) + 28) >> 12) & 3;
    else
      return 4;
  }
}

uint64_t std::optional<JSC::RegisterAtOffsetList>::optional[abi:sn180100]<JSC::RegisterAtOffsetList&,0>(uint64_t a1, unsigned int **a2)
{
  uint64_t v2;
  unsigned int *v3;
  _DWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int **v10;

  v2 = a1;
  v3 = *a2;
  if (*a2)
  {
    v10 = a2;
    v6 = *v3;
    v8 = v3 + 2;
    v4 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v6 + 8));
    *v4 = v6;
    if ((_DWORD)v6)
    {
      v7 = 0;
      do
      {
        *(_QWORD *)&v4[v7 + 2] = *(_QWORD *)&v8[v7];
        v7 += 2;
      }
      while (2 * v6 != v7);
    }
    v2 = a1;
    a2 = v10;
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)v2 = v4;
  *(_QWORD *)(v2 + 8) = a2[1];
  *(_BYTE *)(v2 + 16) = 1;
  return v2;
}

void JSC::StackVisitor::Frame::functionName(JSC::StackVisitor::Frame *this@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC **v11;
  JSC *v12;
  JSC::VM *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  int v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC **v43;
  WTF::StringImpl *v44;

  v4 = JSC::StackVisitor::Frame::codeType(this);
  if (v4 != 2)
  {
    v32 = "eval code";
    v33 = 9;
    switch(v4)
    {
      case 0:
        v32 = "global code";
        goto LABEL_18;
      case 1:
        goto LABEL_19;
      case 3:
        v32 = "module code";
LABEL_18:
        v33 = 11;
LABEL_19:
        v21 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)(v21 + 8) = v32;
        *(_DWORD *)(v21 + 16) = 4;
        *(_DWORD *)v21 = 4;
        *(_DWORD *)(v21 + 4) = v33;
        v23 = 2;
        *a2 = v21;
        goto LABEL_11;
      case 4:
        v13 = (JSC::VM *)*((_QWORD *)this + 6);
        if (!v13)
          goto LABEL_25;
        v42 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
        if ((v42 & 8) != 0)
          v43 = (JSC **)(v42 - 16);
        else
          v43 = (JSC **)(v42 & 0xFFFFFFFFFFFFC000 | 8);
        v12 = *v43;
        goto LABEL_6;
      case 5:
        JSC::Wasm::makeString((uint64_t *)this + 11, (uint64_t *)&v44);
        v21 = (uint64_t)v44;
        goto LABEL_9;
      default:
        goto LABEL_25;
    }
  }
  v10 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
  if ((v10 & 8) != 0)
    v11 = (JSC **)(v10 - 16);
  else
    v11 = (JSC **)(v10 & 0xFFFFFFFFFFFFC000 | 8);
  v12 = *v11;
  v13 = (JSC::VM *)*((_QWORD *)this + 6);
LABEL_6:
  JSC::getCalculatedDisplayName(v12, v13, v5, v6, v7, v8, v9, (int **)&v44);
  v21 = (uint64_t)v44;
  if (v44)
  {
    v22 = *(_DWORD *)v44;
    *(_DWORD *)v44 += 2;
    v44 = 0;
    if (v22)
    {
      *(_DWORD *)v21 = v22;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
  }
LABEL_9:
  if (v21)
  {
    v23 = *(_DWORD *)v21;
    *(_DWORD *)v21 += 2;
    *a2 = v21;
    if (v23)
    {
LABEL_11:
      *(_DWORD *)v21 = v23;
    }
    else
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  else
  {
LABEL_25:
    WTF::StringImpl::s_emptyAtomString += 2;
    *a2 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
  }
}

void JSC::StackVisitor::Frame::sourceURL(JSC::StackVisitor::Frame *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4;
  WTF::AtomStringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  int v34;

  v4 = JSC::StackVisitor::Frame::codeType(this);
  if (v4 >= 4)
  {
    if (v4 == 4)
    {
      v33 = "[native code]";
      v34 = 13;
    }
    else
    {
      if (v4 != 5)
      {
LABEL_15:
        WTF::StringImpl::s_emptyAtomString += 2;
        *a2 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
        return;
      }
      v33 = "[wasm code]";
      v34 = 11;
    }
    v15 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)(v15 + 8) = v33;
    *(_DWORD *)(v15 + 16) = 4;
    *(_DWORD *)v15 = 4;
    *(_DWORD *)(v15 + 4) = v34;
    v16 = 2;
    *a2 = v15;
    goto LABEL_9;
  }
  v12 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 64) + 40) + 64);
  if (!v12)
    goto LABEL_15;
  v13 = *(_DWORD *)v12;
  v14 = *((_DWORD *)v12 + 1);
  *(_DWORD *)v12 += 2;
  if (v14)
  {
    *(_DWORD *)v12 = v13 + 4;
    v13 += 2;
    v15 = (uint64_t)v12;
  }
  else
  {
    v15 = 0;
  }
  if (v13)
  {
    *(_DWORD *)v12 = v13;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v12, v5, v6, v7, v8, v9, v10, v11);
    WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
  }
  if (!v15)
    goto LABEL_15;
  v16 = *(_DWORD *)v15;
  *(_DWORD *)v15 += 2;
  *a2 = v15;
  if (v16)
  {
LABEL_9:
    *(_DWORD *)v15 = v16;
    return;
  }
  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v15, v5, v6, v7, v8, v9, v10, v11);
  WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
}

void JSC::StackVisitor::Frame::preRedirectURL(JSC::StackVisitor::Frame *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  WTF::StringImpl *v14;
  int v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (JSC::StackVisitor::Frame::codeType(this) > 3)
    goto LABEL_12;
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 7) + 64) + 40) + 80);
  if (!v11)
    goto LABEL_12;
  v12 = *(_DWORD *)v11;
  v13 = *((_DWORD *)v11 + 1);
  *(_DWORD *)v11 += 2;
  if (v13)
  {
    *(_DWORD *)v11 = v12 + 4;
    v12 += 2;
    v14 = v11;
  }
  else
  {
    v14 = 0;
  }
  if (v12)
  {
    *(_DWORD *)v11 = v12;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v11, v4, v5, v6, v7, v8, v9, v10);
    WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  if (v14)
  {
    v15 = *(_DWORD *)v14;
    *(_DWORD *)v14 += 2;
    *a2 = v14;
    if (v15)
    {
      *(_DWORD *)v14 = v15;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v14, v4, v5, v6, v7, v8, v9, v10);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
  }
  else
  {
LABEL_12:
    WTF::StringImpl::s_emptyAtomString += 2;
    *a2 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  }
}

void JSC::StackVisitor::Frame::toString(JSC::StackVisitor::Frame *this@<X0>, int **a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  _OWORD *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  BOOL v62;
  int v63;
  unint64_t v64;
  int v65;
  BOOL v66;
  int v67;
  int v68;
  BOOL v69;
  int v70;
  int v71;
  BOOL v72;
  uint64_t v73;
  int *v74;
  _WORD *v75;
  int8x16_t *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  size_t v80;
  _BYTE *v81;
  _BYTE *v82;
  size_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unsigned int v89;
  char *v90;
  int v91;
  uint64_t v92;
  char *v93;
  __int128 v94;
  char *v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  char *v99;
  char *v100;
  char *v101;
  __int16 v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  __int128 v107;
  int8x16_t v108;
  __int128 v109;
  __int128 v110;
  char *v111;
  char *v112;
  char *v113;
  __int16 v114;
  uint64_t v115;
  char *v116;
  char *v117;
  __int128 v118;
  char *v119;
  int8x16_t v120;
  __int128 v121;
  __int128 v122;
  char *v123;
  char *v124;
  char *v125;
  __int16 v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unsigned int v130;
  _WORD *v131;
  _WORD *v132;
  BOOL v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  _WORD *v137;
  unint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  unsigned __int128 *v155;
  unsigned __int128 *v156;
  unsigned __int128 v157;
  unsigned __int128 *v158;
  unsigned __int128 *v159;
  unsigned __int128 v160;
  int v161;
  char v162;
  char v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD v167[3];
  int8x16x2_t v168;
  int8x16x2_t v169;
  int8x16x2_t v170;
  int8x16x2_t v171;
  int8x16x2_t v172;
  int8x16x2_t v173;
  int8x16x2_t v174;
  int8x16x2_t v175;
  int8x16x2_t v176;

  v167[2] = *MEMORY[0x1E0C80C00];
  JSC::StackVisitor::Frame::functionName(this, &v166);
  JSC::StackVisitor::Frame::sourceURL(this, &v165);
  v4 = v165;
  if (!v165)
  {
    v5 = "";
    v6 = v166;
LABEL_3:
    v7 = 1;
    goto LABEL_4;
  }
  v6 = v166;
  if (!*(_DWORD *)(v165 + 4))
  {
    v5 = "";
    goto LABEL_3;
  }
  if (v166 && *(_DWORD *)(v166 + 4))
  {
    v5 = "@";
    v7 = 2;
  }
  else
  {
    v5 = "";
    v7 = 1;
  }
  if (!*((_QWORD *)this + 7))
  {
LABEL_4:
    if (v6)
      *(_DWORD *)v6 += 2;
    if (v4)
      *(_DWORD *)v4 += 2;
    v154 = v7 - 1;
    if ((v7 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E0DECLL);
    }
    if (v6)
    {
      v8 = *(_DWORD *)(v6 + 4);
      if (v4)
        goto LABEL_11;
    }
    else
    {
      v8 = 0;
      if (v4)
      {
LABEL_11:
        v9 = *(_DWORD *)(v4 + 4);
        if (v9 < 0)
          goto LABEL_174;
        goto LABEL_12;
      }
    }
    v9 = 0;
LABEL_12:
    v10 = __OFADD__(v154, v9);
    v11 = v154 + v9;
    v12 = v10;
    if ((v8 & 0x80000000) == 0 && (v12 & 1) == 0)
    {
      v13 = (v8 + v11);
      if (!__OFADD__(v8, v11))
      {
        if (v6)
        {
          v14 = *(_DWORD *)(v6 + 16);
          v15 = (v14 >> 2) & 1;
          if (v4 && (v14 & 4) != 0)
            goto LABEL_21;
        }
        else
        {
          if (v4)
          {
LABEL_21:
            v15 = (*(unsigned __int8 *)(v4 + 16) >> 2) & 1;
            goto LABEL_22;
          }
          v15 = 1;
        }
LABEL_22:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v13, v15, v6, (int8x16_t *)v5, v154, v4, a2);
        if (*a2)
        {
          if (v4)
          {
            if (*(_DWORD *)v4 == 2)
            {
              WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
              WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
              if (!v6)
                goto LABEL_29;
              goto LABEL_27;
            }
            *(_DWORD *)v4 -= 2;
          }
          if (!v6)
            goto LABEL_29;
LABEL_27:
          if (*(_DWORD *)v6 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
            WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
          }
          else
          {
            *(_DWORD *)v6 -= 2;
          }
LABEL_29:
          if (!v4)
            goto LABEL_32;
          goto LABEL_30;
        }
LABEL_175:
        __break(0xC471u);
        JUMPOUT(0x1986E0DB8);
      }
    }
LABEL_174:
    *a2 = 0;
    goto LABEL_175;
  }
  v55 = JSC::StackVisitor::Frame::computeLineAndColumn(this);
  v56 = v55;
  if (v6)
    *(_DWORD *)v6 += 2;
  *(_DWORD *)v4 += 2;
  v161 = v7 - 1;
  if ((v7 - 1) >> 31)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E0E80);
  }
  v57 = HIDWORD(v55);
  if (v6)
    v58 = *(_DWORD *)(v6 + 4);
  else
    v58 = 0;
  v59 = 0;
  v60 = *(_DWORD *)(v4 + 4);
  v61 = v55;
  do
  {
    ++v59;
    v62 = v61 > 9;
    v61 /= 0xAu;
  }
  while (v62);
  v63 = 0;
  v64 = HIDWORD(v55);
  do
  {
    ++v63;
    v62 = v64 > 9;
    LODWORD(v64) = v64 / 0xA;
  }
  while (v62);
  if (v63 < 0)
    goto LABEL_179;
  v10 = __OFADD__(v63, 1);
  v65 = v63 + 1;
  v66 = v10;
  if (v59 < 0)
    goto LABEL_179;
  if (v66)
    goto LABEL_179;
  v10 = __OFADD__(v59, v65);
  v67 = v59 + v65;
  if (v10)
    goto LABEL_179;
  v10 = __OFADD__(v67, 1);
  v68 = v67 + 1;
  v69 = v10;
  if (v60 < 0)
    goto LABEL_179;
  if (v69)
    goto LABEL_179;
  v10 = __OFADD__(v60, v68);
  v70 = v60 + v68;
  if (v10)
    goto LABEL_179;
  v10 = __OFADD__(v161, v70);
  v71 = v161 + v70;
  v72 = v10;
  if (v58 < 0)
    goto LABEL_179;
  if (v72)
    goto LABEL_179;
  v73 = (v58 + v71);
  if (__OFADD__(v58, v71))
    goto LABEL_179;
  if (v6 && (*(_BYTE *)(v6 + 16) & 4) == 0 || (*(_BYTE *)(v4 + 16) & 4) == 0)
  {
    if ((_DWORD)v73)
    {
      if (v73 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v73 + 20), v167);
        v74 = (int *)v167[0];
        if (v167[0])
        {
          v164 = v7 - 1;
          v75 = (_WORD *)(v167[0] + 20);
          *(_DWORD *)v167[0] = 2;
          v74[1] = v73;
          *((_QWORD *)v74 + 1) = v74 + 5;
          v74[4] = 0;
          if (v6)
          {
            v76 = *(int8x16_t **)(v6 + 8);
            v77 = *(unsigned int *)(v6 + 4);
            if ((*(_BYTE *)(v6 + 16) & 4) != 0)
            {
              v78 = (char *)&v75[v77];
              if (v77 >= 0x40)
              {
                v79 = (char *)&v75[v77 & 0xFFFFFFC0];
                v94 = 0uLL;
                v95 = (char *)(v74 + 5);
                do
                {
                  v168.val[0] = *v76;
                  v96 = v76[1];
                  v171.val[0] = v76[2];
                  v97 = v76[3];
                  v76 += 4;
                  v98 = v97;
                  v171.val[1] = 0uLL;
                  v174.val[0] = v96;
                  v168.val[1] = 0uLL;
                  v99 = v95;
                  vst2q_s8(v99, v168);
                  v99 += 32;
                  v174.val[1] = 0uLL;
                  vst2q_s8(v99, v174);
                  v100 = v95 + 64;
                  vst2q_s8(v100, v171);
                  v101 = v95 + 96;
                  vst2q_s8(v101, *(int8x16x2_t *)(&v94 - 1));
                  v95 += 128;
                }
                while (v95 != v79);
              }
              else
              {
                v79 = (char *)(v74 + 5);
              }
              while (v79 != v78)
              {
                v102 = v76->u8[0];
                v76 = (int8x16_t *)((char *)v76 + 1);
                *(_WORD *)v79 = v102;
                v79 += 2;
              }
            }
            else if ((_DWORD)v77 == 1)
            {
              *v75 = v76->i16[0];
            }
            else if ((_DWORD)v77)
            {
              memcpy(v74 + 5, v76, 2 * v77);
            }
            v103 = *(unsigned int *)(v6 + 4);
          }
          else
          {
            v103 = 0;
          }
          v104 = (char *)&v75[v103];
          v105 = &v104[2 * v164];
          if ((v164 & 0x7FFFFFC0) != 0)
          {
            v106 = &v104[2 * (v164 & 0x7FFFFFC0)];
            v107 = 0uLL;
            do
            {
              v169.val[0] = *(int8x16_t *)v5;
              v108 = *((int8x16_t *)v5 + 1);
              v172.val[0] = (int8x16_t)*((_OWORD *)v5 + 2);
              v109 = *((_OWORD *)v5 + 3);
              v5 += 64;
              v110 = v109;
              v172.val[1] = 0uLL;
              v175.val[0] = v108;
              v169.val[1] = 0uLL;
              v111 = v104;
              vst2q_s8(v111, v169);
              v111 += 32;
              v175.val[1] = 0uLL;
              vst2q_s8(v111, v175);
              v112 = v104 + 64;
              vst2q_s8(v112, v172);
              v113 = v104 + 96;
              vst2q_s8(v113, *(int8x16x2_t *)(&v107 - 1));
              v104 += 128;
            }
            while (v104 != v106);
            v104 = v106;
          }
          while (v104 != v105)
          {
            v114 = *v5++;
            *(_WORD *)v104 = v114;
            v104 += 2;
          }
          v16 = *(_OWORD **)(v4 + 8);
          v115 = *(unsigned int *)(v4 + 4);
          if ((*(_BYTE *)(v4 + 16) & 4) != 0)
          {
            v116 = &v105[2 * v115];
            if (v115 >= 0x40)
            {
              v117 = &v105[2 * (v115 & 0xFFFFFFC0)];
              v118 = 0uLL;
              v119 = v105;
              do
              {
                v170.val[0] = (int8x16_t)*v16;
                v120 = *((int8x16_t *)v16 + 1);
                v173.val[0] = (int8x16_t)v16[2];
                v121 = v16[3];
                v16 += 4;
                v122 = v121;
                v173.val[1] = 0uLL;
                v176.val[0] = v120;
                v170.val[1] = 0uLL;
                v123 = v119;
                vst2q_s8(v123, v170);
                v123 += 32;
                v176.val[1] = 0uLL;
                vst2q_s8(v123, v176);
                v124 = v119 + 64;
                vst2q_s8(v124, v173);
                v125 = v119 + 96;
                vst2q_s8(v125, *(int8x16x2_t *)(&v118 - 1));
                v119 += 128;
              }
              while (v119 != v117);
            }
            else
            {
              v117 = v105;
            }
            while (v117 != v116)
            {
              v126 = *(unsigned __int8 *)v16;
              v16 = (_OWORD *)((char *)v16 + 1);
              *(_WORD *)v117 = v126;
              v117 += 2;
            }
          }
          else if ((_DWORD)v115 == 1)
          {
            *(_WORD *)v105 = *(_WORD *)v16;
          }
          else if ((_DWORD)v115)
          {
            memcpy(v105, v16, 2 * v115);
          }
          v127 = 0;
          v128 = *(unsigned int *)(v4 + 4);
          v129 = &v105[2 * v128];
          *(_WORD *)v129 = 58;
          v130 = v56;
          do
          {
            *((_BYTE *)&v167[1] + v127-- + 4) = (v130 % 0xA) | 0x30;
            v62 = v130 > 9;
            v130 /= 0xAu;
          }
          while (v62);
          v131 = v129 + 2;
          if (v127 + 14 <= 13)
          {
            v132 = v129 + 2;
            do
            {
              *v132++ = *((unsigned __int8 *)&v167[1] + v127 + 5);
              v133 = __CFADD__(v127++, 1);
            }
            while (!v133);
          }
          v134 = 0;
          do
          {
            ++v134;
            v62 = v56 > 9;
            v56 /= 0xAu;
          }
          while (v62);
          v135 = 0;
          v131[v134] = 58;
          do
          {
            *((_BYTE *)&v167[1] + v135-- + 4) = (v57 % 0xA) | 0x30;
            v62 = v57 > 9;
            LODWORD(v57) = v57 / 0xA;
          }
          while (v62);
          if (v135 + 14 <= 13)
          {
            if (v7 <= 1)
              v136 = 1;
            else
              v136 = v7;
            v137 = (_WORD *)v74 + v103 + v136 + v128 + v134 + 11;
            do
            {
              *v137++ = *((unsigned __int8 *)&v167[1] + v135 + 5);
              v133 = __CFADD__(v135++, 1);
            }
            while (!v133);
          }
          goto LABEL_158;
        }
      }
LABEL_179:
      *a2 = 0;
      __break(0xC471u);
      JUMPOUT(0x1986E0DF8);
    }
LABEL_172:
    v74 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_158;
  }
  if (!(_DWORD)v73)
    goto LABEL_172;
  if ((v73 & 0x80000000) != 0)
    goto LABEL_179;
  WTF::tryFastCompactMalloc((WTF *)(v73 + 20), v167);
  v74 = (int *)v167[0];
  if (!v167[0])
    goto LABEL_179;
  v80 = v7 - 1;
  v81 = (_BYTE *)(v167[0] + 20);
  *(_DWORD *)v167[0] = 2;
  v74[1] = v73;
  *((_QWORD *)v74 + 1) = v74 + 5;
  v74[4] = 4;
  if (v6)
  {
    v82 = *(_BYTE **)(v6 + 8);
    v83 = *(unsigned int *)(v6 + 4);
    if ((*(_BYTE *)(v6 + 16) & 4) != 0)
    {
      if ((_DWORD)v83 == 1)
      {
        *v81 = *v82;
      }
      else if ((_DWORD)v83)
      {
        memcpy(v74 + 5, v82, v83);
      }
    }
    else
    {
      if (v83 < 0x10)
      {
        v155 = (unsigned __int128 *)(v74 + 5);
      }
      else
      {
        v155 = (unsigned __int128 *)&v81[v83 & 0xFFFFFFF0];
        v156 = (unsigned __int128 *)(v74 + 5);
        do
        {
          v157 = (unsigned __int128)vld2q_s8(v82);
          v82 += 32;
          *v156++ = v157;
        }
        while (v156 != v155);
      }
      while (v155 != (unsigned __int128 *)&v81[v83])
      {
        v162 = *v82;
        v82 += 2;
        *(_BYTE *)v155 = v162;
        v155 = (unsigned __int128 *)((char *)v155 + 1);
      }
    }
    v84 = *(unsigned int *)(v6 + 4);
  }
  else
  {
    v84 = 0;
  }
  v85 = &v81[v84];
  if ((_DWORD)v80 == 1)
  {
    *v85 = *v5;
  }
  else if ((_DWORD)v80)
  {
    memcpy(v85, v5, v80);
  }
  v86 = &v85[v80];
  v16 = *(_OWORD **)(v4 + 8);
  v17 = *(unsigned int *)(v4 + 4);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    if ((_DWORD)v17 == 1)
    {
      *v86 = *(_BYTE *)v16;
    }
    else if ((_DWORD)v17)
    {
      memcpy(&v85[v80], v16, v17);
    }
  }
  else
  {
    if (v17 < 0x10)
    {
      v158 = (unsigned __int128 *)&v85[v80];
    }
    else
    {
      v158 = (unsigned __int128 *)&v86[v17 & 0xFFFFFFF0];
      v159 = (unsigned __int128 *)&v85[v80];
      do
      {
        v160 = (unsigned __int128)vld2q_s8((const char *)v16);
        v16 += 2;
        *v159++ = v160;
      }
      while (v159 != v158);
    }
    while (v158 != (unsigned __int128 *)&v86[v17])
    {
      v163 = *(_BYTE *)v16;
      v16 = (_OWORD *)((char *)v16 + 2);
      *(_BYTE *)v158 = v163;
      v158 = (unsigned __int128 *)((char *)v158 + 1);
    }
  }
  v87 = 0;
  v88 = &v86[*(unsigned int *)(v4 + 4)];
  *v88 = 58;
  v89 = v56;
  do
  {
    *((_BYTE *)&v167[1] + v87-- + 4) = (v89 % 0xA) | 0x30;
    v62 = v89 > 9;
    v89 /= 0xAu;
  }
  while (v62);
  v90 = v88 + 1;
  if (v87 + 14 <= 13)
    memcpy(v90, (char *)&v167[1] + v87 + 5, -v87);
  v91 = 0;
  do
  {
    ++v91;
    v62 = v56 > 9;
    v56 /= 0xAu;
  }
  while (v62);
  v92 = 0;
  v93 = &v90[v91];
  *v93 = 58;
  do
  {
    *((_BYTE *)&v167[1] + v92-- + 4) = (v57 % 0xA) | 0x30;
    v62 = v57 > 9;
    LODWORD(v57) = v57 / 0xA;
  }
  while (v62);
  if (v92 + 14 <= 13)
    memcpy(v93 + 1, (char *)&v167[1] + v92 + 5, -v92);
LABEL_158:
  *a2 = v74;
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
    WTF::fastFree(v138, v139, v140, v141, v142, v143, v144, v145);
    if (v6)
    {
LABEL_160:
      if (*(_DWORD *)v6 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
      }
      else
      {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  else
  {
    *(_DWORD *)v4 -= 2;
    if (v6)
      goto LABEL_160;
  }
LABEL_30:
  if (*(_DWORD *)v4 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
    WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
  }
  else
  {
    *(_DWORD *)v4 -= 2;
  }
LABEL_32:
  v166 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, (WTF::AtomStringImpl *)v16, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v6 -= 2;
    }
  }
}

unint64_t JSC::StackVisitor::Frame::computeLineAndColumn(JSC::StackVisitor::Frame *this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v1 = *((_QWORD *)this + 7);
  if (!v1)
    return 0;
  v2 = JSC::CodeBlock::lineColumnForBytecodeIndex(*((_QWORD *)this + 7), *((_DWORD *)this + 20));
  v3 = JSC::ScriptExecutable::overrideLineNumber(*(_QWORD *)(v1 + 64));
  if ((v3 & 0xFF00000000) != 0)
    v4 = v3;
  else
    v4 = v2;
  return v2 & 0xFFFFFFFF00000000 | v4;
}

uint64_t JSC::StackVisitor::Frame::sourceID(JSC::StackVisitor::Frame *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unsigned int v4;

  v1 = *((_QWORD *)this + 7);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 64) + 40);
  if (!v2)
    return 1;
  result = *(unsigned int *)(v2 + 112);
  if (!(_DWORD)result)
  {
    do
      v4 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
    while (__stlxr(v4 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
    result = v4 + 1;
    *(_DWORD *)(v2 + 112) = result;
    if (v4 == -1)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E0F6CLL);
    }
  }
  return result;
}

BOOL JSC::StackVisitor::Frame::isImplementationVisibilityPrivate(JSC::StackVisitor::Frame *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  int v5;
  uint64_t v7;

  v1 = *((_QWORD *)this + 7);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 64);
  }
  else
  {
    v7 = *((_QWORD *)this + 6);
    if ((v7 & 0xFFFE000000000007) == 3)
    {
      v5 = *(unsigned __int8 *)(qword_1ECF4C080 + (v7 & 0xFFFFFFFFFFFFFFFCLL) + 5);
      return (v5 - 1) <= 1;
    }
    if (!v7 || *(_BYTE *)(v7 + 5) != 26)
      return 0;
    v2 = *(_QWORD *)(v7 + 24);
    if ((v2 & 1) != 0)
      v2 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 48);
  }
  if (!v2)
    return 0;
  v3 = *(unsigned __int8 *)(v2 + 5);
  if (v3 == 12)
  {
    v4 = *(_BYTE *)(*(_QWORD *)(v2 + 88) + 51);
  }
  else
  {
    if (v3 != 8)
      return 0;
    v4 = *(_BYTE *)(v2 + 56);
  }
  v5 = v4 & 3;
  return (v5 - 1) <= 1;
}

uint64_t JSC::StackVisitor::Frame::dump(JSC::StackVisitor::Frame *a1, uint64_t a2, int *a3, _QWORD *a4)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF *v12;
  const WTF::String *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  float v20;
  const void *v21;
  WTF::PrintStream *v22;
  WTF::PrintStream *v23;
  int v24;
  WTF *v25;
  const WTF::String *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  float v33;
  const WTF::String *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  float v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::PrintStream *v50;
  int v51;
  WTF *v52;
  const WTF::String *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  float v60;
  const WTF::String *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  float v68;
  WTF::AtomStringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  _BOOL4 v77;
  WTF::PrintStream *v78;
  int v79;
  WTF *v80;
  const WTF::String *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  float v88;
  const char *v89;
  WTF::PrintStream *v90;
  unint64_t v91;
  const void *v92;
  WTF::PrintStream *v93;
  int v94;
  WTF *v95;
  const WTF::String *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  float v103;
  WTF::PrintStream *v104;
  int v105;
  WTF *v106;
  const WTF::String *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  float v114;
  WTF::PrintStream *v115;
  int v116;
  WTF *v117;
  const WTF::String *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  float v125;
  WTF::PrintStream *v126;
  int v127;
  WTF *v128;
  const WTF::String *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  float v136;
  const void *v137;
  WTF::PrintStream *v138;
  int v139;
  WTF *v140;
  const WTF::String *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  double v147;
  float v148;
  WTF::PrintStream *v149;
  int v150;
  WTF *v151;
  const WTF::String *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  double v158;
  float v159;
  WTF::PrintStream *v160;
  WTF::PrintStream *v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  WTF::PrintStream *v165;
  int v166;
  WTF *v167;
  const WTF::String *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  float v175;
  unint64_t v176;
  WTF::PrintStream *v177;
  int v178;
  WTF *v179;
  const WTF::String *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  float v187;
  WTF::PrintStream *v188;
  int v189;
  WTF *v190;
  const WTF::String *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  float v198;
  WTF::PrintStream *v199;
  int v200;
  WTF::PrintStream *v201;
  WTF *v202;
  const WTF::String *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  double v209;
  float v210;
  const void *v212;
  WTF::PrintStream *v213;
  int v214;
  WTF *v215;
  const WTF::String *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  double v222;
  float v223;
  WTF::PrintStream *v224;
  int v225;
  WTF::PrintStream *v226;
  WTF *v227;
  const WTF::String *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  double v234;
  float v235;
  unint64_t v236;
  void *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  const char *v253;
  WTF::PrintStream *v254;
  int v255;
  WTF *v256;
  const WTF::String *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  double v263;
  float v264;
  WTF::PrintStream *v265;
  _BYTE *v266;
  int v267;
  int v268;
  WTF::PrintStream *v269;
  int v270;
  WTF *v271;
  const WTF::String *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  double v278;
  float v279;
  char *v280;
  unsigned int *v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  const void *v285;
  uint64_t v286;
  const void *v287;
  WTF::PrintStream *v288;
  int v289;
  WTF *v290;
  const WTF::String *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  double v297;
  float v298;
  const void *v299;
  const void *v300;
  JSC::CallFrame *v301;
  WTF::StringImpl *v302;

  if (*((_QWORD *)a1 + 2))
  {
    v8 = (_QWORD *)*((_QWORD *)a1 + 7);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v10 = *a3;
    if (*a3)
    {
      v11 = v9;
      do
      {
        --v10;
        v12 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
        WTF::printInternal(v12, (WTF::PrintStream *)(a3 + 2), v13, v14, v15, v16, v17, v18, v19, v20);
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
      }
      while (v10);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 16))(*a4, a2);
    v21 = (const void *)*((_QWORD *)a1 + 2);
    v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v22, "%s", "frame ");
    WTF::PrintStream::printf(v22, "%p", v21);
    WTF::PrintStream::printf(v22, "%s", " {\n");
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    ++*a3;
    v300 = (const void *)*((_QWORD *)a1 + 5);
    v301 = (JSC::CallFrame *)*((_QWORD *)a1 + 2);
    v299 = (const void *)*((_QWORD *)v301 + 1);
    JSC::StackVisitor::Frame::functionName(a1, (uint64_t *)&v302);
    v23 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v24 = *a3;
    while (v24)
    {
      --v24;
      v25 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 32))(v23);
      WTF::printInternal(v25, (WTF::PrintStream *)(a3 + 2), v26, v27, v28, v29, v30, v31, v32, v33);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 40))(v23);
    }
    WTF::PrintStream::printf(v23, "%s", "name: ");
    WTF::printInternal(v23, (WTF::PrintStream *)&v302, v34, v35, v36, v37, v38, v39, v40, v41);
    WTF::PrintStream::printf(v23, "%s", "\n");
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v49 = v302;
    v302 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v236, v237, v238, v239, v240, v241, v242, v243);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
    }
    JSC::StackVisitor::Frame::sourceURL(a1, (uint64_t *)&v302);
    v50 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v51 = *a3;
    while (v51)
    {
      --v51;
      v52 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v50 + 32))(v50);
      WTF::printInternal(v52, (WTF::PrintStream *)(a3 + 2), v53, v54, v55, v56, v57, v58, v59, v60);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v50 + 40))(v50);
    }
    WTF::PrintStream::printf(v50, "%s", "sourceURL: ");
    WTF::printInternal(v50, (WTF::PrintStream *)&v302, v61, v62, v63, v64, v65, v66, v67, v68);
    WTF::PrintStream::printf(v50, "%s", "\n");
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v76 = v302;
    v302 = 0;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
      {
        WTF::StringImpl::~StringImpl(v76, v69, v70, v71, v72, v73, v74, v75);
        WTF::fastFree(v244, v245, v246, v247, v248, v249, v250, v251);
      }
      else
      {
        *(_DWORD *)v76 -= 2;
      }
    }
    v77 = (*((_QWORD *)a1 + 6) & 0xFFFE000000000007) != 3 && *(_QWORD *)a1 != 0;
    v78 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v79 = *a3;
    while (v79)
    {
      --v79;
      v80 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v78 + 32))(v78);
      WTF::printInternal(v80, (WTF::PrintStream *)(a3 + 2), v81, v82, v83, v84, v85, v86, v87, v88);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v78 + 40))(v78);
    }
    WTF::PrintStream::printf(v78, "%s", "isInlinedDFGFrame: ");
    if (v77)
      v89 = "true";
    else
      v89 = "false";
    v90 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v78 + 32))(v78);
    WTF::PrintStream::printf(v90, "%s", v89);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v78 + 40))(v78);
    WTF::PrintStream::printf(v78, "%s", "\n");
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v91 = *((_QWORD *)a1 + 6);
    if ((v91 & 0xFFFE000000000007) != 3)
    {
      v92 = *(const void **)a1;
      if (*(_QWORD *)a1)
      {
        v93 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        v94 = *a3;
        while (v94)
        {
          --v94;
          v95 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v93 + 32))(v93);
          WTF::printInternal(v95, (WTF::PrintStream *)(a3 + 2), v96, v97, v98, v99, v100, v101, v102, v103);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v93 + 40))(v93);
        }
        WTF::PrintStream::printf(v93, "%s", "InlineCallFrame: ");
        WTF::PrintStream::printf(v93, "%p", v92);
        WTF::PrintStream::printf(v93, "%s", "\n");
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        v91 = *((_QWORD *)a1 + 6);
      }
    }
    v104 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v105 = *a3;
    while (v105)
    {
      --v105;
      v106 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v104 + 32))(v104);
      WTF::printInternal(v106, (WTF::PrintStream *)(a3 + 2), v107, v108, v109, v110, v111, v112, v113, v114);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v104 + 40))(v104);
    }
    WTF::PrintStream::printf(v104, "%s", "callee: ");
    WTF::PrintStream::printf(v104, "%p", (const void *)v91);
    WTF::PrintStream::printf(v104, "%s", "\n");
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v115 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v116 = *a3;
    while (v116)
    {
      --v116;
      v117 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v115 + 32))(v115);
      WTF::printInternal(v117, (WTF::PrintStream *)(a3 + 2), v118, v119, v120, v121, v122, v123, v124, v125);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v115 + 40))(v115);
    }
    WTF::PrintStream::printf(v115, "%s", "returnPC: ");
    WTF::PrintStream::printf(v115, "%p", v299);
    WTF::PrintStream::printf(v115, "%s", "\n");
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v126 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v127 = *a3;
    while (v127)
    {
      --v127;
      v128 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v126 + 32))(v126);
      WTF::printInternal(v128, (WTF::PrintStream *)(a3 + 2), v129, v130, v131, v132, v133, v134, v135, v136);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v126 + 40))(v126);
    }
    WTF::PrintStream::printf(v126, "%s", "callerFrame: ");
    WTF::PrintStream::printf(v126, "%p", v300);
    WTF::PrintStream::printf(v126, "%s", "\n");
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v137 = (const void *)*((unsigned int *)v301 + 9);
    v138 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v139 = *a3;
    while (v139)
    {
      --v139;
      v140 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v138 + 32))(v138);
      WTF::printInternal(v140, (WTF::PrintStream *)(a3 + 2), v141, v142, v143, v144, v145, v146, v147, v148);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v138 + 40))(v138);
    }
    WTF::PrintStream::printf(v138, "%s", "rawLocationBits: ");
    WTF::PrintStream::printf(v138, "%lu", v137);
    WTF::PrintStream::printf(v138, "%s", " ");
    WTF::PrintStream::printf(v138, "%p", v137);
    WTF::PrintStream::printf(v138, "%s", "\n");
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v149 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v150 = *a3;
    while (v150)
    {
      --v150;
      v151 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v149 + 32))(v149);
      WTF::printInternal(v151, (WTF::PrintStream *)(a3 + 2), v152, v153, v154, v155, v156, v157, v158, v159);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v149 + 40))(v149);
    }
    WTF::PrintStream::printf(v149, "%s", "codeBlock: ");
    WTF::PrintStream::printf(v149, "%p", v8);
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v160 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    if (v8)
    {
      WTF::PrintStream::printf(v160, "%s", " ");
      JSC::CodeBlock::dumpAssumingJITType((uint64_t)v8);
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v161 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v161, "%s", "\n");
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      if (!v77)
      {
        ++*a3;
        v162 = *(_QWORD *)(*((_QWORD *)v301 + 2) + 120);
        if (v162)
        {
          v163 = *(unsigned __int8 *)(v162 + 12);
          if (v163 - 2 < 2)
          {
            LODWORD(v302) = JSC::CallFrame::bytecodeIndex(v301);
            v164 = *(unsigned int *)(*(_QWORD *)(v8[7] + 80) + 12);
            v165 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
            v166 = *a3;
            while (v166)
            {
              --v166;
              v167 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v165 + 32))(v165);
              WTF::printInternal(v167, (WTF::PrintStream *)(a3 + 2), v168, v169, v170, v171, v172, v173, v174, v175);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v165 + 40))(v165);
            }
            JSC::BytecodeIndex::dump((JSC::BytecodeIndex *)&v302, v165);
            WTF::PrintStream::printf(v165, "%s", " of ");
            WTF::PrintStream::printf(v165, "%lu", v164);
            WTF::PrintStream::printf(v165, "%s");
            goto LABEL_44;
          }
          if (v163 > 1)
          {
            v252 = v8[15];
            v253 = "false";
            if (v252 && (*(_BYTE *)(v252 + 12) & 0xFE) == 4)
              v253 = "true";
            v254 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
            v255 = *a3;
            while (v255)
            {
              --v255;
              v256 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v254 + 32))(v254);
              WTF::printInternal(v256, (WTF::PrintStream *)(a3 + 2), v257, v258, v259, v260, v261, v262, v263, v264);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v254 + 40))(v254);
            }
            WTF::PrintStream::printf(v254, "%s", "hasCodeOrigins: ");
            v265 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v254 + 32))(v254);
            WTF::PrintStream::printf(v265, "%s", v253);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v254 + 40))(v254);
            WTF::PrintStream::printf(v254, "%s", "\n");
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
            v266 = (_BYTE *)v8[15];
            if (!v266 || (v266[12] & 0xFE) != 4)
              goto LABEL_45;
            v267 = *((_DWORD *)v301 + 9);
            v268 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v266 + 72))(v266) + 40)
                             + 20);
            v269 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
            v270 = *a3;
            while (v270)
            {
              --v270;
              v271 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v269 + 32))(v269);
              WTF::printInternal(v271, (WTF::PrintStream *)(a3 + 2), v272, v273, v274, v275, v276, v277, v278, v279);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v269 + 40))(v269);
            }
            WTF::PrintStream::printf(v269, "%s", "callSiteIndex: ");
            WTF::PrintStream::printf(v269, "%u", v267);
            WTF::PrintStream::printf(v269, "%s", " of ");
            WTF::PrintStream::printf(v269, "%u", v268);
            WTF::PrintStream::printf(v269, "%s", "\n");
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
            v280 = (char *)v8[15];
            if (v280)
            {
              if (v280[12] == 5)
                goto LABEL_45;
              v281 = (unsigned int *)(v280 + 8);
              do
                v282 = __ldaxr(v281);
              while (__stlxr(v282 + 1, v281));
              do
              {
                v283 = __ldaxr(v281);
                v284 = v283 - 1;
              }
              while (__stlxr(v284, v281));
              if (!v284)
              {
                atomic_store(1u, (unsigned int *)v280 + 2);
                (*(void (**)(char *))(*(_QWORD *)v280 + 32))(v280);
              }
            }
            v285 = (const void *)(*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)v280 + 56))(v280, 0);
            v286 = (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)v280 + 56))(v280, 0);
            v287 = (const void *)((*(uint64_t (**)(char *))(*(_QWORD *)v280 + 128))(v280) + v286);
            v288 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
            v289 = *a3;
            while (v289)
            {
              --v289;
              v290 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v288 + 32))(v288);
              WTF::printInternal(v290, (WTF::PrintStream *)(a3 + 2), v291, v292, v293, v294, v295, v296, v297, v298);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v288 + 40))(v288);
            }
            WTF::PrintStream::printf(v288, "%s", "jitCode: ");
            WTF::PrintStream::printf(v288, "%p", v280);
            WTF::PrintStream::printf(v288, "%s", " start ");
            WTF::PrintStream::printf(v288, "%p", v285);
            WTF::PrintStream::printf(v288, "%s", " end ");
            WTF::PrintStream::printf(v288, "%p", v287);
            WTF::PrintStream::printf(v288, "%s");
LABEL_44:
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
LABEL_45:
            v176 = JSC::StackVisitor::Frame::computeLineAndColumn(a1);
            v177 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
            v178 = *a3;
            while (v178)
            {
              --v178;
              v179 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v177 + 32))(v177);
              WTF::printInternal(v179, (WTF::PrintStream *)(a3 + 2), v180, v181, v182, v183, v184, v185, v186, v187);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v177 + 40))(v177);
            }
            WTF::PrintStream::printf(v177, "%s", "line: ");
            WTF::PrintStream::printf(v177, "%u", v176);
            WTF::PrintStream::printf(v177, "%s", "\n");
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
            v188 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
            v189 = *a3;
            while (v189)
            {
              --v189;
              v190 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v188 + 32))(v188);
              WTF::printInternal(v190, (WTF::PrintStream *)(a3 + 2), v191, v192, v193, v194, v195, v196, v197, v198);
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v188 + 40))(v188);
            }
            WTF::PrintStream::printf(v188, "%s", "column: ");
            WTF::PrintStream::printf(v188, "%u", HIDWORD(v176));
            WTF::PrintStream::printf(v188, "%s", "\n");
            (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
            --*a3;
            goto LABEL_55;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x1986E2084);
      }
    }
    else
    {
      WTF::PrintStream::printf(v160, "%s", "\n");
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    }
LABEL_55:
    v212 = (const void *)*((_QWORD *)a1 + 3);
    v213 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v214 = *a3;
    while (v214)
    {
      --v214;
      v215 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v213 + 32))(v213);
      WTF::printInternal(v215, (WTF::PrintStream *)(a3 + 2), v216, v217, v218, v219, v220, v221, v222, v223);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v213 + 40))(v213);
    }
    WTF::PrintStream::printf(v213, "%s", "EntryFrame: ");
    WTF::PrintStream::printf(v213, "%p", v212);
    WTF::PrintStream::printf(v213, "%s", "\n");
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    --*a3;
    v224 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v225 = *a3;
    if (*a3)
    {
      v226 = (WTF::PrintStream *)(a3 + 2);
      do
      {
        --v225;
        v227 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v224 + 32))(v224);
        WTF::printInternal(v227, v226, v228, v229, v230, v231, v232, v233, v234, v235);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v224 + 40))(v224);
      }
      while (v225);
    }
    WTF::PrintStream::printf(v224, "%s", "}\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  }
  v199 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v200 = *a3;
  if (*a3)
  {
    v201 = (WTF::PrintStream *)(a3 + 2);
    do
    {
      --v200;
      v202 = (WTF *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v199 + 32))(v199);
      WTF::printInternal(v202, v201, v203, v204, v205, v206, v207, v208, v209, v210);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v199 + 40))(v199);
    }
    while (v200);
  }
  WTF::PrintStream::printf(v199, "%s", "frame 0x0\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
}

JSC::JSObject *JSC::JSValue::toUInt32(JSC::JSObject **this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;

  result = *this;
  if ((unint64_t)result < 0xFFFE000000000000)
  {
    v11 = (unint64_t)result - 0x2000000000000;
    if ((unint64_t)result - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase(this, a2, a3, a4, a5, a6, a7, a8, a9);
      v11 = v15;
    }
    v12 = (v11 >> 52) & 0x7FF;
    if ((v12 - 1023) <= 0x53)
    {
      v13 = v11 >> (51 - (v11 >> 52));
      if (v12 > 0x433)
        LODWORD(v13) = v11 << ((v11 >> 52) - 51);
      if (v12 >= 0x41F)
        v14 = v13;
      else
        v14 = (((1 << ((v11 >> 52) + 1)) - 1) & v13) + (1 << ((v11 >> 52) + 1));
      if ((v11 & 0x8000000000000000) == 0)
        return (JSC::JSObject *)v14;
      else
        return (JSC::JSObject *)-v14;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL JSC::JSObject::canGetIndexQuicklyForTypedArray(JSC::JSObject *this, unsigned int a2)
{
  _BOOL8 result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  switch(*((_BYTE *)this + 5))
  {
    case '\'':
    case '(':
      v3 = a2;
      if ((*((_BYTE *)this + 40) & 7u) <= 2)
        goto LABEL_5;
      v12 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
      if (*(_BYTE *)(v12 + 64) && (v22 = *(_QWORD *)(v12 + 32)) != 0)
        v13 = *(_QWORD *)(v22 + 32);
      else
        v13 = *(_QWORD *)(v12 + 48);
      v8 = *((_QWORD *)this + 3);
      v14 = *((_QWORD *)this + 4);
      if (v8 + v14 > v13)
        goto LABEL_2;
      if ((*((_BYTE *)this + 40) & 1) == 0)
        goto LABEL_29;
      v4 = v13 - v14;
      goto LABEL_6;
    case ')':
      return JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds((uint64_t)this, a2);
    case '*':
    case '+':
      v3 = a2;
      if ((*((_BYTE *)this + 40) & 7u) <= 2)
        goto LABEL_5;
      v5 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
      if (*(_BYTE *)(v5 + 64) && (v20 = *(_QWORD *)(v5 + 32)) != 0)
        v6 = *(_QWORD *)(v20 + 32);
      else
        v6 = *(_QWORD *)(v5 + 48);
      v8 = *((_QWORD *)this + 3);
      v7 = *((_QWORD *)this + 4);
      if (v7 + 2 * v8 > v6)
        goto LABEL_2;
      if ((*((_BYTE *)this + 40) & 1) == 0)
        goto LABEL_29;
      result = a2 < (v6 - v7) >> 1;
      break;
    case ',':
    case '-':
    case '.':
      v3 = a2;
      if ((*((_BYTE *)this + 40) & 7u) <= 2)
        goto LABEL_5;
      v15 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
      if (*(_BYTE *)(v15 + 64) && (v19 = *(_QWORD *)(v15 + 32)) != 0)
        v16 = *(_QWORD *)(v19 + 32);
      else
        v16 = *(_QWORD *)(v15 + 48);
      v8 = *((_QWORD *)this + 3);
      v17 = *((_QWORD *)this + 4);
      if (v17 + 4 * v8 > v16)
        goto LABEL_2;
      if ((*((_BYTE *)this + 40) & 1) == 0)
        goto LABEL_29;
      result = a2 < (v16 - v17) >> 2;
      break;
    case '/':
      v3 = a2;
      if ((*((_BYTE *)this + 40) & 7u) <= 2)
      {
LABEL_5:
        v4 = *((_QWORD *)this + 3);
LABEL_6:
        result = v4 > v3;
      }
      else
      {
        v9 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
        if (*(_BYTE *)(v9 + 64) && (v21 = *(_QWORD *)(v9 + 32)) != 0)
          v10 = *(_QWORD *)(v21 + 32);
        else
          v10 = *(_QWORD *)(v9 + 48);
        v8 = *((_QWORD *)this + 3);
        v11 = *((_QWORD *)this + 4);
        if (v11 + 8 * v8 > v10)
        {
LABEL_2:
          result = 0;
        }
        else if ((*((_BYTE *)this + 40) & 1) != 0)
        {
          result = a2 < (v10 - v11) >> 3;
        }
        else
        {
LABEL_29:
          result = v8 > v3;
        }
      }
      break;
    case '0':
    case '1':
      if ((*((_BYTE *)this + 40) & 7u) < 3)
        goto LABEL_2;
      v18 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
      if (!*(_BYTE *)(v18 + 64) || !*(_QWORD *)(v18 + 32))
        goto LABEL_2;
      return 0;
    default:
      goto LABEL_2;
  }
  return result;
}

unint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::CallFrame::describeFrame(void)::$_0 &&>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;

  result = WTF::fastZeroedMalloc(0xC9uLL, a2, a3, a4, a5, a6, a7, a8);
  _MergedGlobals_37 = result;
  return result;
}

unsigned int *JSC::AssemblyHelpers::purifyNaN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v26[3];

  v8 = a2;
  v10 = (JSC::AssemblerBuffer *)(a1 + 56);
  v11 = *(_DWORD *)(a1 + 200);
  if (v11 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v11) = (v8 << 16) | (32 * v8) | 0x1E602000;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(a1, 0, a3, a4, a5, a6, a7, a8, (uint64_t)v26);
  {
    JSC::AssemblyHelpers::purifyNaN(JSC::ARM64Registers::FPRegisterID)::NaN = 0x7FF8000000000000;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E2478);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, (uint64_t)&JSC::AssemblyHelpers::purifyNaN(JSC::ARM64Registers::FPRegisterID)::NaN, a1 + 296, v12, v13, v14, v15, v16);
  v24 = *(_DWORD *)(a1 + 200);
  if (v24 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v17, v18, v19, v20, v21, v22, v23);
    v24 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v24) = v8 | 0xFC7F6A20;
  *(_DWORD *)(a1 + 200) += 4;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v26, a1, v18, v19, v20, v21, v22, v23);
}

unsigned int *JSC::AssemblyHelpers::jitReleaseAssertNoException(JSC::AssemblyHelpers *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;

  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E25A0);
  }
  *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, (uint64_t)a2 + 16, *((char *)this + 272), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 16, 0xFFFFFFFFLL, v9, v10, v11, v12, (uint64_t)&v25, v13);
  v27 = v25;
  v28 = v26;
  v21 = *((_DWORD *)this + 50);
  if (v21 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblyHelpers *)((char *)this + 56), v14, v15, v16, v17, v18, v19, v20);
    v21 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v21) = 1384129136;
  v22 = *((_DWORD *)this + 50);
  v23 = v22 + 4;
  *((_DWORD *)this + 50) = v22 + 4;
  if ((v22 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblyHelpers *)((char *)this + 56), v14, v15, v16, v17, v18, v19, v20);
    v23 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v23) = -734491104;
  *((_DWORD *)this + 50) += 4;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v27, (uint64_t)this, v15, v16, v17, v18, v19, v20);
}

void JSC::AssemblyHelpers::emitExceptionCheck(uint64_t a1@<X0>, uint64_t a2@<X1>, _BOOL4 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int8x8_t a10@<D0>)
{
  int v11;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int i;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unsigned int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  unsigned int v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unsigned int v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  unsigned int v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unsigned int v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unsigned int v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unsigned int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unsigned int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unsigned int v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unsigned int v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unsigned int v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unsigned int v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unsigned int v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unsigned int v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unsigned int v582;
  JSC::AssemblerBuffer *v583;
  unsigned int v584;
  unint64_t v585;
  unsigned int v586;
  unint64_t v587;

  v11 = a4;
  if (HIBYTE(word_1ECF4C620))
  {
    v28 = (unint64_t *)(a2 + 93336);
    v29 = *(_QWORD *)(a2 + 93336);
    if (!v29)
    {
      v30 = WTF::fastMalloc((WTF *)0x138);
      v31 = *v28;
      *v28 = v30;
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(0, v39, v40, v41, v42, v43, v44, v45);
      v29 = *v28;
    }
    JSC::MacroAssemblerARM64::store64(a1, 0, v29, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::store64(a1, 1, v29 + 8, v46, v47, v48, v49, v50);
    JSC::MacroAssemblerARM64::store64(a1, 2, v29 + 16, v51, v52, v53, v54, v55);
    JSC::MacroAssemblerARM64::store64(a1, 3, v29 + 24, v56, v57, v58, v59, v60);
    JSC::MacroAssemblerARM64::store64(a1, 4, v29 + 32, v61, v62, v63, v64, v65);
    JSC::MacroAssemblerARM64::store64(a1, 5, v29 + 40, v66, v67, v68, v69, v70);
    JSC::MacroAssemblerARM64::store64(a1, 6, v29 + 48, v71, v72, v73, v74, v75);
    JSC::MacroAssemblerARM64::store64(a1, 7, v29 + 56, v76, v77, v78, v79, v80);
    JSC::MacroAssemblerARM64::store64(a1, 8, v29 + 64, v81, v82, v83, v84, v85);
    JSC::MacroAssemblerARM64::store64(a1, 9, v29 + 72, v86, v87, v88, v89, v90);
    JSC::MacroAssemblerARM64::store64(a1, 10, v29 + 80, v91, v92, v93, v94, v95);
    JSC::MacroAssemblerARM64::store64(a1, 11, v29 + 88, v96, v97, v98, v99, v100);
    JSC::MacroAssemblerARM64::store64(a1, 12, v29 + 96, v101, v102, v103, v104, v105);
    JSC::MacroAssemblerARM64::store64(a1, 13, v29 + 104, v106, v107, v108, v109, v110);
    JSC::MacroAssemblerARM64::store64(a1, 14, v29 + 112, v111, v112, v113, v114, v115);
    JSC::MacroAssemblerARM64::store64(a1, 15, v29 + 120, v116, v117, v118, v119, v120);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 128, 0, v121, v122, v123, v124, v125);
    v583 = (JSC::AssemblerBuffer *)(a1 + 56);
    v133 = *(_DWORD *)(a1 + 200);
    if (v133 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v126, v127, v128, v129, v130, v131, v132);
      v133 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v133) = -67108864;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 136, 0, v128, v129, v130, v131, v132);
    v141 = *(_DWORD *)(a1 + 200);
    if (v141 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v134, v135, v136, v137, v138, v139, v140);
      v141 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v141) = -67108863;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 144, 0, v136, v137, v138, v139, v140);
    v149 = *(_DWORD *)(a1 + 200);
    if (v149 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v142, v143, v144, v145, v146, v147, v148);
      v149 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v149) = -67108862;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 152, 0, v144, v145, v146, v147, v148);
    v157 = *(_DWORD *)(a1 + 200);
    if (v157 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v150, v151, v152, v153, v154, v155, v156);
      v157 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v157) = -67108861;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 160, 0, v152, v153, v154, v155, v156);
    v165 = *(_DWORD *)(a1 + 200);
    if (v165 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v158, v159, v160, v161, v162, v163, v164);
      v165 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v165) = -67108860;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 168, 0, v160, v161, v162, v163, v164);
    v173 = *(_DWORD *)(a1 + 200);
    if (v173 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v166, v167, v168, v169, v170, v171, v172);
      v173 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v173) = -67108859;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 176, 0, v168, v169, v170, v171, v172);
    v181 = *(_DWORD *)(a1 + 200);
    if (v181 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v174, v175, v176, v177, v178, v179, v180);
      v181 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v181) = -67108858;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 184, 0, v176, v177, v178, v179, v180);
    v189 = *(_DWORD *)(a1 + 200);
    if (v189 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v182, v183, v184, v185, v186, v187, v188);
      v189 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v189) = -67108857;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 192, 0, v184, v185, v186, v187, v188);
    v197 = *(_DWORD *)(a1 + 200);
    if (v197 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v190, v191, v192, v193, v194, v195, v196);
      v197 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v197) = -67108848;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 200, 0, v192, v193, v194, v195, v196);
    v205 = *(_DWORD *)(a1 + 200);
    if (v205 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v198, v199, v200, v201, v202, v203, v204);
      v205 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v205) = -67108847;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 208, 0, v200, v201, v202, v203, v204);
    v213 = *(_DWORD *)(a1 + 200);
    if (v213 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v206, v207, v208, v209, v210, v211, v212);
      v213 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v213) = -67108846;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 216, 0, v208, v209, v210, v211, v212);
    v221 = *(_DWORD *)(a1 + 200);
    if (v221 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v214, v215, v216, v217, v218, v219, v220);
      v221 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v221) = -67108845;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 224, 0, v216, v217, v218, v219, v220);
    v229 = *(_DWORD *)(a1 + 200);
    if (v229 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v222, v223, v224, v225, v226, v227, v228);
      v229 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v229) = -67108844;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 232, 0, v224, v225, v226, v227, v228);
    v237 = *(_DWORD *)(a1 + 200);
    if (v237 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v230, v231, v232, v233, v234, v235, v236);
      v237 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v237) = -67108843;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 240, 0, v232, v233, v234, v235, v236);
    v245 = *(_DWORD *)(a1 + 200);
    if (v245 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v238, v239, v240, v241, v242, v243, v244);
      v245 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v245) = -67108842;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 248, 0, v240, v241, v242, v243, v244);
    v253 = *(_DWORD *)(a1 + 200);
    if (v253 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v246, v247, v248, v249, v250, v251, v252);
      v253 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v253) = -67108841;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 256, 0, v248, v249, v250, v251, v252);
    v261 = *(_DWORD *)(a1 + 200);
    if (v261 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v254, v255, v256, v257, v258, v259, v260);
      v261 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v261) = -67108840;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 264, 0, v256, v257, v258, v259, v260);
    v269 = *(_DWORD *)(a1 + 200);
    if (v269 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v262, v263, v264, v265, v266, v267, v268);
      v269 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v269) = -67108839;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 272, 0, v264, v265, v266, v267, v268);
    v277 = *(_DWORD *)(a1 + 200);
    if (v277 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v270, v271, v272, v273, v274, v275, v276);
      v277 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v277) = -67108838;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 280, 0, v272, v273, v274, v275, v276);
    v285 = *(_DWORD *)(a1 + 200);
    if (v285 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v278, v279, v280, v281, v282, v283, v284);
      v285 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v285) = -67108837;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 288, 0, v280, v281, v282, v283, v284);
    v293 = *(_DWORD *)(a1 + 200);
    if (v293 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v286, v287, v288, v289, v290, v291, v292);
      v293 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v293) = -67108836;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 296, 0, v288, v289, v290, v291, v292);
    v301 = *(_DWORD *)(a1 + 200);
    if (v301 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v294, v295, v296, v297, v298, v299, v300);
      v301 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v301) = -67108835;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 304, 0, v296, v297, v298, v299, v300);
    v309 = *(_DWORD *)(a1 + 200);
    if (v309 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v302, v303, v304, v305, v306, v307, v308);
      v309 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v309) = -67108834;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2, 0, v304, v305, v306, v307, v308);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (uint64_t)operationExceptionFuzzWithCallFrame, 2, v310, v311, v312, v313, v314);
    *(_DWORD *)(a1 + 208) = 0;
    v322 = *(_DWORD *)(a1 + 200);
    if (v322 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v315, v316, v317, v318, v319, v320, v321);
      v322 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v322) = -700514240;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 128, 0, v317, v318, v319, v320, v321);
    v330 = *(_DWORD *)(a1 + 200);
    if (v330 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v323, v324, v325, v326, v327, v328, v329);
      v330 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v330) = -62914560;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 136, 0, v325, v326, v327, v328, v329);
    v338 = *(_DWORD *)(a1 + 200);
    if (v338 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v331, v332, v333, v334, v335, v336, v337);
      v338 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v338) = -62914559;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 144, 0, v333, v334, v335, v336, v337);
    v346 = *(_DWORD *)(a1 + 200);
    if (v346 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v339, v340, v341, v342, v343, v344, v345);
      v346 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v346) = -62914558;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 152, 0, v341, v342, v343, v344, v345);
    v354 = *(_DWORD *)(a1 + 200);
    if (v354 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v347, v348, v349, v350, v351, v352, v353);
      v354 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v354) = -62914557;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 160, 0, v349, v350, v351, v352, v353);
    v362 = *(_DWORD *)(a1 + 200);
    if (v362 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v355, v356, v357, v358, v359, v360, v361);
      v362 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v362) = -62914556;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 168, 0, v357, v358, v359, v360, v361);
    v370 = *(_DWORD *)(a1 + 200);
    if (v370 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v363, v364, v365, v366, v367, v368, v369);
      v370 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v370) = -62914555;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 176, 0, v365, v366, v367, v368, v369);
    v378 = *(_DWORD *)(a1 + 200);
    if (v378 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v371, v372, v373, v374, v375, v376, v377);
      v378 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v378) = -62914554;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 184, 0, v373, v374, v375, v376, v377);
    v386 = *(_DWORD *)(a1 + 200);
    if (v386 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v379, v380, v381, v382, v383, v384, v385);
      v386 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v386) = -62914553;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 192, 0, v381, v382, v383, v384, v385);
    v394 = *(_DWORD *)(a1 + 200);
    if (v394 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v387, v388, v389, v390, v391, v392, v393);
      v394 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v394) = -62914544;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 200, 0, v389, v390, v391, v392, v393);
    v402 = *(_DWORD *)(a1 + 200);
    if (v402 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v395, v396, v397, v398, v399, v400, v401);
      v402 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v402) = -62914543;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 208, 0, v397, v398, v399, v400, v401);
    v410 = *(_DWORD *)(a1 + 200);
    if (v410 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v403, v404, v405, v406, v407, v408, v409);
      v410 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v410) = -62914542;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 216, 0, v405, v406, v407, v408, v409);
    v418 = *(_DWORD *)(a1 + 200);
    if (v418 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v411, v412, v413, v414, v415, v416, v417);
      v418 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v418) = -62914541;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 224, 0, v413, v414, v415, v416, v417);
    v426 = *(_DWORD *)(a1 + 200);
    if (v426 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v419, v420, v421, v422, v423, v424, v425);
      v426 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v426) = -62914540;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 232, 0, v421, v422, v423, v424, v425);
    v434 = *(_DWORD *)(a1 + 200);
    if (v434 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v427, v428, v429, v430, v431, v432, v433);
      v434 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v434) = -62914539;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 240, 0, v429, v430, v431, v432, v433);
    v442 = *(_DWORD *)(a1 + 200);
    if (v442 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v435, v436, v437, v438, v439, v440, v441);
      v442 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v442) = -62914538;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 248, 0, v437, v438, v439, v440, v441);
    v450 = *(_DWORD *)(a1 + 200);
    if (v450 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v443, v444, v445, v446, v447, v448, v449);
      v450 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v450) = -62914537;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 256, 0, v445, v446, v447, v448, v449);
    v458 = *(_DWORD *)(a1 + 200);
    if (v458 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v451, v452, v453, v454, v455, v456, v457);
      v458 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v458) = -62914536;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 264, 0, v453, v454, v455, v456, v457);
    v466 = *(_DWORD *)(a1 + 200);
    if (v466 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v459, v460, v461, v462, v463, v464, v465);
      v466 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v466) = -62914535;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 272, 0, v461, v462, v463, v464, v465);
    v474 = *(_DWORD *)(a1 + 200);
    if (v474 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v467, v468, v469, v470, v471, v472, v473);
      v474 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v474) = -62914534;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 280, 0, v469, v470, v471, v472, v473);
    v482 = *(_DWORD *)(a1 + 200);
    if (v482 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v475, v476, v477, v478, v479, v480, v481);
      v482 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v482) = -62914533;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 288, 0, v477, v478, v479, v480, v481);
    v490 = *(_DWORD *)(a1 + 200);
    if (v490 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v483, v484, v485, v486, v487, v488, v489);
      v490 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v490) = -62914532;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 296, 0, v485, v486, v487, v488, v489);
    v498 = *(_DWORD *)(a1 + 200);
    if (v498 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v491, v492, v493, v494, v495, v496, v497);
      v498 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v498) = -62914531;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v29 + 304, 0, v493, v494, v495, v496, v497);
    v506 = *(_DWORD *)(a1 + 200);
    if (v506 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v583, v499, v500, v501, v502, v503, v504, v505);
      v506 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v506) = -62914530;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::load64(a1, v29, 0, v501, v502, v503, v504, v505);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 8, 1, v507, v508, v509, v510, v511);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 16, 2, v512, v513, v514, v515, v516);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 24, 3, v517, v518, v519, v520, v521);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 32, 4, v522, v523, v524, v525, v526);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 40, 5, v527, v528, v529, v530, v531);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 48, 6, v532, v533, v534, v535, v536);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 56, 7, v537, v538, v539, v540, v541);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 64, 8, v542, v543, v544, v545, v546);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 72, 9, v547, v548, v549, v550, v551);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 80, 10, v552, v553, v554, v555, v556);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 88, 11, v557, v558, v559, v560, v561);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 96, 12, v562, v563, v564, v565, v566);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 104, 13, v567, v568, v569, v570, v571);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 112, 14, v572, v573, v574, v575, v576);
    JSC::MacroAssemblerARM64::load64(a1, v29 + 120, 15, v577, v578, v579, v580, v581);
    if ((_DWORD)a5 != -1)
      JSC::MacroAssemblerARM64::load64(a1, a2 + 16, a5, a4, a5, a6, a7, a8);
  }
  if (v11 == 1)
    a3 = !a3;
  if ((_DWORD)a5 == -1)
  {
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a1, "Exception check from vm");
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E35A0);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::load64(a1, a2 + 16, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
    v17 = a1;
    v16 = !a3;
    v18 = 16;
  }
  else
  {
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>(a1, "Exception check from operation result register");
    v16 = !a3;
    v17 = a1;
    v18 = a5;
  }
  JSC::MacroAssemblerARM64::branchTest64(v17, v16, v18, 0xFFFFFFFFLL, a5, a6, a7, a8, (uint64_t)&v584, a10);
  i = v584;
  v586 = v584;
  v27 = v585;
  v587 = v585;
  if (v11)
  {
    *(_BYTE *)(a1 + 328) = 1;
    for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v19, v20, v21, v22, v23, v24, v25);
        i = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
      i = *(_DWORD *)(a1 + 200) + 4;
    }
    v582 = i;
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v19, v20, v21, v22, v23, v24, v25);
      v582 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v582) = 335544320;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v27 = 0xFF000F4500000000;
    else
      v27 = 0xFF000F4100000000;
    *(_BYTE *)(a1 + 328) = 0;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v586, a1, v20, v21, v22, v23, v24, v25);
  }
  *(_DWORD *)a9 = i;
  *(_QWORD *)(a9 + 4) = v27;
}

void JSC::AssemblyHelpers::emitNonPatchableExceptionCheck(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, int8x8_t a8@<D0>)
{
  JSC::AssemblyHelpers::emitExceptionCheck(a1, a2, 0, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::AssemblyHelpers::loadProperty(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42[2];
  char v43;
  __int16 v44;
  char v45;
  unsigned int v46[3];

  v9 = a3;
  JSC::MacroAssemblerARM64::branch32(a1, 11, a3, 64, a5, a6, a7, a8, (uint64_t)v46);
  JSC::MacroAssemblerARM64::load64(a1, a2 | 0x800000000, (char)a4, v12, v13, v14, v15, v16);
  if (v9 == 31)
  {
    v41 = *(_DWORD *)(a1 + 200);
    if (v41 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v17, v18, v19, v20, v21, v22, v23);
      v41 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = 1262446591;
  }
  else
  {
    v24 = *(_DWORD *)(a1 + 200);
    if (v24 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v17, v18, v19, v20, v21, v22, v23);
      v24 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v24) = v9 & 0x1F | ((v9 & 0x1F) << 16) | 0x4B0003E0;
  }
  v25 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v25;
  if (v25 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v17, v18, v19, v20, v21, v22, v23);
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = v9 & 0x1F | (32 * (v9 & 0x1F)) | 0x93407C00;
  v26 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v26; v26 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v26)
  {
    if ((v26 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v17, v18, v19, v20, v21, v22, v23);
      v26 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = -721215457;
    v26 = *(_DWORD *)(a1 + 200) + 4;
  }
  v27 = v26;
  if ((v26 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v17, v18, v19, v20, v21, v22, v23);
    v27 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v28 = 69;
  else
    v28 = 65;
  v42[0] = v26;
  v42[1] = 0;
  v43 = v28;
  v44 = 15;
  v45 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v46, a1, v18, v19, v20, v21, v22, v23);
  v36 = *(_DWORD *)(a1 + 200);
  if (v36 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v36 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v36) = (char)a4 | (32 * a2) | 0xD1078000;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v42, a1, v30, v31, v32, v33, v34, v35);
  JSC::MacroAssemblerARM64::load64(a1, a4 | ((unint64_t)v9 << 8) | 0x300000000, 0x2000001F0uLL, (char)a4, v37, v38, v39, v40);
}

void JSC::AssemblyHelpers::storeProperty(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43[2];
  char v44;
  __int16 v45;
  char v46;
  unsigned int v47[3];

  v9 = a4;
  JSC::MacroAssemblerARM64::branch32(a1, 11, a4, 64, a5, a6, a7, a8, (uint64_t)v47);
  JSC::MacroAssemblerARM64::load64(a1, a3 | 0x800000000, a5, v13, v14, v15, v16, v17);
  if (v9 == 31)
  {
    v42 = *(_DWORD *)(a1 + 200);
    if (v42 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
      v42 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = 1262446591;
  }
  else
  {
    v25 = *(_DWORD *)(a1 + 200);
    if (v25 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
      v25 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = v9 & 0x1F | ((v9 & 0x1F) << 16) | 0x4B0003E0;
  }
  v26 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v26;
  if (v26 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
    v26 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = v9 & 0x1F | (32 * (v9 & 0x1F)) | 0x93407C00;
  v27 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v27; v27 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v27)
  {
    if ((v27 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
      v27 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = -721215457;
    v27 = *(_DWORD *)(a1 + 200) + 4;
  }
  v28 = v27;
  if ((v27 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v18, v19, v20, v21, v22, v23, v24);
    v28 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v29 = 69;
  else
    v29 = 65;
  v43[0] = v27;
  v43[1] = 0;
  v44 = v29;
  v45 = 15;
  v46 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v47, a1, v19, v20, v21, v22, v23, v24);
  v37 = *(_DWORD *)(a1 + 200);
  if (v37 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v30, v31, v32, v33, v34, v35, v36);
    v37 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v37) = a5 | (32 * a3) | 0xD1078000;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v43, a1, v31, v32, v33, v34, v35, v36);
  JSC::MacroAssemblerARM64::store64(a1, a2, a5 | ((unint64_t)v9 << 8) | 0x300000000, 0x2000001F0uLL, v38, v39, v40, v41);
}

void JSC::AssemblyHelpers::loadMegamorphicProperty(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, WTF::StringImpl *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  _DWORD *v73;
  uint64_t *v74;
  int v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  void *v88;
  _DWORD *v89;
  _DWORD *v90;
  _QWORD *v91;
  int v92;
  _DWORD *v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int *v108;
  int *v109;
  int v110;
  uint64_t v111;
  int i;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int8x8_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int j;
  unsigned int v140;
  char v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  _DWORD *v175;
  uint64_t *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  void *v190;
  _DWORD *v191;
  _DWORD *v192;
  _QWORD *v193;
  int v194;
  _DWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  int *v210;
  int *v211;
  int v212;
  uint64_t v213;
  int k;
  unsigned int v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  int v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  int v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  JSC::AssemblerBuffer *v264;
  int v265;
  unsigned int v267;
  uint64_t v268;
  int v269;
  unsigned int v273;
  unsigned int v274[2];
  char v275;
  __int16 v276;
  char v277;
  int v278;
  int v279;
  _DWORD v280[3];
  _DWORD v281[3];
  int v282;
  uint64_t v283;
  unsigned int v284[2];
  char v285;
  __int16 v286;
  char v287;
  unsigned int v288[3];
  int v289;
  int v290;
  _DWORD v291[3];
  _DWORD v292[3];
  int v293;
  uint64_t v294;
  _BYTE *v295;
  uint64_t v296;
  _BYTE v297[32];

  v295 = v297;
  v296 = 2;
  *(_QWORD *)a9 = a9 + 16;
  *(_QWORD *)(a9 + 8) = 2;
  JSC::MacroAssemblerARM64::load32(a1, a3, a7, a4, (uint64_t)a5, a6, a7, a8);
  v264 = (JSC::AssemblerBuffer *)(a1 + 56);
  v22 = *(_DWORD *)(a1 + 200);
  if (v22 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v264, v15, v16, v17, v18, v19, v20, v21);
    v22 = *(_DWORD *)(a1 + 200);
  }
  v23 = (char)a10;
  v24 = a7 & 0x1F;
  v25 = a8 & 0x1F;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = v25 | (32 * v24) | 0x53007C00;
  v26 = *(_DWORD *)(a1 + 200);
  v27 = v26 + 4;
  *(_DWORD *)(a1 + 200) = v26 + 4;
  if ((v26 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v264, v15, v16, v17, v18, v19, v20, v21);
    v27 = *(_DWORD *)(a1 + 200);
  }
  v265 = v24 << 16;
  v28 = (v24 << 16) | (32 * v25);
  v29 = a10 & 0x1F;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = v28 & 0xFFFFFFE0 | v29 | 0x4A402C00;
  *(_DWORD *)(a1 + 200) += 4;
  v30 = v25 << 16;
  if (a5)
  {
    v31 = *((_DWORD *)a5 + 4);
    if (v31 < 0x100)
      v32 = WTF::StringImpl::hashSlowCase(a5);
    else
      v32 = v31 >> 8;
    JSC::MacroAssemblerARM64::add32(a1, v32, v23, v23, v18, v19, v20, v21);
    goto LABEL_9;
  }
  JSC::MacroAssemblerARM64::load32(a1, a4 | 0x1000000000, a8, v17, v18, v19, v20, v21);
  v249 = *(_DWORD *)(a1 + 200);
  if (v249 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v264, v242, v243, v244, v245, v246, v247, v248);
    v249 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v249) = a8 & 0x1F | (32 * a8) | 0x53087C00;
  v250 = *(_DWORD *)(a1 + 200);
  v251 = v250 + 4;
  *(_DWORD *)(a1 + 200) = v250 + 4;
  if ((_DWORD)a8 == 31)
  {
    v263 = v23 | (v29 << 16) | 0xB2063E0;
LABEL_152:
    JSC::AssemblerBuffer::putInt(v264, v263, v243, v244, v245, v246, v247, v248);
    goto LABEL_9;
  }
  if ((_DWORD)v23 == 31)
  {
    v263 = v30 | 0xB2063FFu;
    goto LABEL_152;
  }
  if ((v250 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v264, v242, v243, v244, v245, v246, v247, v248);
    v251 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v251) = v30 | (32 * v29) | v29 | 0xB000000;
  *(_DWORD *)(a1 + 200) += 4;
LABEL_9:
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0x7FF, a10, (char)a10);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_155;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v41 = *(char *)(a1 + 272) | 0x321D07E0;
  v42 = *(_DWORD *)(a1 + 200);
  if (v42 + 4 > *(_DWORD *)(a1 + 192))
  {
    v40 = JSC::AssemblerBuffer::outOfLineGrow(v264, v33, v34, v35, v36, v37, v38, v39);
    v42 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v42) = v41;
  v43 = *(_DWORD *)(a1 + 200);
  v44 = v43 + 4;
  *(_DWORD *)(a1 + 200) = v43 + 4;
  if ((v43 + 8) > *(_DWORD *)(a1 + 192))
  {
    v40 = JSC::AssemblerBuffer::outOfLineGrow(v264, v33, v34, v35, v36, v37, v38, v39);
    v44 = *(_DWORD *)(a1 + 200);
  }
  v269 = a10 & 0x1F | (32 * (a10 & 0x1F)) | 0x1B107C00;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v44) = v269;
  *(_DWORD *)(a1 + 200) += 4;
  v45 = *(_QWORD *)(a2 + 93080);
  if ((v45 & 1) != 0)
    v45 = (*(uint64_t (**)(uint64_t, __n128))(v45 & 0xFFFFFFFFFFFFFFFCLL))(a2, v40);
  v268 = v45;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v45, a8, v35, v36, v37, v38, v39);
  if ((_DWORD)a8 == 31)
  {
    v53 = v23 | (v29 << 16);
    v54 = -1960811552;
    goto LABEL_19;
  }
  if ((_DWORD)v23 != 31)
  {
    v53 = v30 | (32 * v29);
    v54 = v29 | 0x8B000000;
LABEL_19:
    v55 = v53 | v54;
    goto LABEL_20;
  }
  v55 = v30 | 0x8B2063FF;
LABEL_20:
  v56 = *(_DWORD *)(a1 + 200);
  if (v56 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v264, v46, v47, v48, v49, v50, v51, v52);
    v56 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v56) = v55;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load16(a1, a8 | 0x2080000000000, a8, v48, v49, v50, v51, v52);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E4AA8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, a10 | 0x800000000, *(char *)(a1 + 304), v57, v58, v59, v60, v61);
  JSC::MacroAssemblerARM64::branch32(a1, 1, a7, 17, v62, v63, v64, v65, (uint64_t)&v293);
  v71 = v293;
  if (v293 != -1)
  {
    v72 = HIDWORD(v296);
    if (HIDWORD(v296) == (_DWORD)v296)
    {
      v73 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v295, (void *)(HIDWORD(v296) + 1), (unint64_t)&v293, v66, v67, v68, v69, v70);
      v75 = *v73;
      v74 = (uint64_t *)(v73 + 1);
      v71 = v75;
      v72 = HIDWORD(v296);
    }
    else
    {
      v74 = &v294;
    }
    v76 = &v295[12 * v72];
    *(_DWORD *)v76 = v71;
    *(_QWORD *)(v76 + 4) = *v74;
    ++HIDWORD(v296);
  }
  if (a5)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E4C7CLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a10, *(char *)(a1 + 304), v66, v67, v68, v69, v70);
    JSC::MacroAssemblerARM64::branch64(a1, 1, 17, (uint64_t)a5, v77, v78, v79, v80, (uint64_t)v292);
    v86 = v292[0];
    if (v292[0] != -1)
    {
      v87 = HIDWORD(v296);
      if (HIDWORD(v296) == (_DWORD)v296)
      {
        v88 = (void *)(HIDWORD(v296) + 1);
        v89 = v292;
LABEL_33:
        v90 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v295, v88, (unint64_t)v89, v81, v82, v83, v84, v85);
        v92 = *v90;
        v91 = v90 + 1;
        v86 = v92;
        v87 = HIDWORD(v296);
LABEL_36:
        v94 = &v295[12 * v87];
        *(_DWORD *)v94 = v86;
        *(_QWORD *)(v94 + 4) = *v91;
        ++HIDWORD(v296);
        goto LABEL_37;
      }
      v93 = v292;
      goto LABEL_35;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E4CDCLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a10, *(char *)(a1 + 304), v66, v67, v68, v69, v70);
    JSC::MacroAssemblerARM64::branch64(a1, 1, 17, a4, v252, v253, v254, v255, (uint64_t)v291);
    v86 = v291[0];
    if (v291[0] != -1)
    {
      v87 = HIDWORD(v296);
      if (HIDWORD(v296) == (_DWORD)v296)
      {
        v88 = (void *)(HIDWORD(v296) + 1);
        v89 = v291;
        goto LABEL_33;
      }
      v93 = v291;
LABEL_35:
      v91 = v93 + 1;
      goto LABEL_36;
    }
  }
LABEL_37:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E4AD8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load16(a1, a10 | 0xC00000000, *(char *)(a1 + 304), v81, v82, v83, v84, v85);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, a8, v95, v96, v97, v98, (uint64_t)&v289);
  v106 = v289;
  if (v289 != -1)
  {
    v107 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v107 == *(_DWORD *)(a9 + 8))
    {
      v108 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v107 + 1), (unint64_t)&v289, v101, v102, v103, v104, v105);
      v110 = *v108;
      v109 = v108 + 1;
      v106 = v110;
      LODWORD(v107) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v109 = &v290;
    }
    v111 = *(_QWORD *)a9 + 12 * v107;
    *(_DWORD *)v111 = v106;
    *(_QWORD *)(v111 + 4) = *(_QWORD *)v109;
    ++*(_DWORD *)(a9 + 12);
  }
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v264, v99, v100, v101, v102, v103, v104, v105);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v267 = i;
  *(_DWORD *)(a1 + 208) = 0;
  JSC::MacroAssemblerARM64::load64(a1, a10 | 0x1000000000, a8, v101, v102, v103, v104, v105);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, a8, 0xFFFFFFFFLL, v113, v114, v115, v116, (uint64_t)v288, v117);
  v125 = *(_DWORD *)(a1 + 200);
  if (v125 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v264, v118, v119, v120, v121, v122, v123, v124);
    v125 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v125) = (32 * a8) | 0xF100041F;
  v126 = *(_DWORD *)(a1 + 200);
  v127 = v126 + 4;
  *(_DWORD *)(a1 + 200) = v126 + 4;
  if ((v126 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v264, v118, v119, v120, v121, v122, v123, v124);
    v127 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v127) = (32 * (a3 & 0x1F)) | (v25 << 16) | a7 & 0x1F | 0x9A800000;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load16(a1, a10 | 0xE00000000, a8, v120, v121, v122, v123, v124);
  JSC::AssemblyHelpers::loadProperty(a1, a7, a8, a6, v128, v129, v130, v131);
  for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v264, v132, v133, v134, v135, v136, v137, v138);
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
    j = *(_DWORD *)(a1 + 200) + 4;
  }
  v140 = j;
  if ((j + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v264, v132, v133, v134, v135, v136, v137, v138);
    v140 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v140) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v141 = 69;
  else
    v141 = 65;
  v284[0] = j;
  v284[1] = 0;
  v285 = v141;
  v286 = 15;
  v287 = -1;
  if (HIDWORD(v296))
  {
    v142 = 0;
    v143 = 0;
    v144 = 12 * HIDWORD(v296);
    while (v143 < HIDWORD(v296))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v295[v142], a1, v133, v134, v135, v136, v137, v138);
      ++v143;
      v142 += 12;
      if (v144 == v142)
        goto LABEL_58;
    }
    __break(0xC471u);
LABEL_155:
    JUMPOUT(0x1986E4A50);
  }
LABEL_58:
  if (a5)
  {
    JSC::MacroAssemblerARM64::add32(a1, a5, a7, v23, v135, v136, v137, v138);
  }
  else
  {
    if ((_DWORD)a7 == 31)
    {
      v257 = 31;
      v256 = a4;
    }
    else
    {
      v256 = a7;
      v257 = a4;
      if ((_DWORD)a4 != 31)
      {
        v256 = a7;
        v257 = a4;
        if ((_DWORD)v23 != 31)
        {
          v258 = *(_DWORD *)(a1 + 200);
          if (v258 + 4 > *(_DWORD *)(a1 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v264, v132, v133, v134, v135, v136, v137, v138);
            v258 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v258) = v265 | (32 * (a4 & 0x1F)) | v29 | 0xB000000;
          v146 = *(_DWORD *)(a1 + 200) + 4;
          *(_DWORD *)(a1 + 200) = v146;
          v145 = v29 << 16;
          goto LABEL_61;
        }
      }
    }
    JSC::AssemblerBuffer::putInt(v264, v23 | (32 * v257) | ((v256 & 0x1F) << 16) | 0xB206000, v133, v134, v135, v136, v137, v138);
  }
  v145 = v29 << 16;
  v146 = *(_DWORD *)(a1 + 200);
  if ((_DWORD)v23 != 31)
  {
LABEL_61:
    v147 = v145 | (32 * v29) | v29 | 0xB402400;
    goto LABEL_62;
  }
  v147 = v145 | 0xB2067FF;
LABEL_62:
  if (v146 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v264, v132, v133, v134, v135, v136, v137, v138);
    v146 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v146) = v147;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0x1FF, a10, (char)a10);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E4BB0);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v155 = *(char *)(a1 + 272) | 0x321D07E0;
  v156 = *(_DWORD *)(a1 + 200);
  if (v156 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v264, v148, v149, v150, v151, v152, v153, v154);
    v156 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v156) = v155;
  v157 = *(_DWORD *)(a1 + 200);
  v158 = v157 + 4;
  *(_DWORD *)(a1 + 200) = v157 + 4;
  if ((v157 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v264, v148, v149, v150, v151, v152, v153, v154);
    v158 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v158) = v269;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::add64(a1, v268 + 49152, v23, v23, v151, v152, v153, v154);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E4BF0);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, a10 | 0x800000000, *(char *)(a1 + 304), v159, v160, v161, v162, v163);
  JSC::MacroAssemblerARM64::branch32(a1, 1, a7, 17, v164, v165, v166, v167, (uint64_t)&v282);
  v173 = v282;
  if (v282 != -1)
  {
    v174 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v174 == *(_DWORD *)(a9 + 8))
    {
      v175 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v174 + 1), (unint64_t)&v282, v168, v169, v170, v171, v172);
      v177 = *v175;
      v176 = (uint64_t *)(v175 + 1);
      v173 = v177;
      LODWORD(v174) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v176 = &v283;
    }
    v178 = *(_QWORD *)a9 + 12 * v174;
    *(_DWORD *)v178 = v173;
    *(_QWORD *)(v178 + 4) = *v176;
    ++*(_DWORD *)(a9 + 12);
  }
  if (a5)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E4C9CLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a10, *(char *)(a1 + 304), v168, v169, v170, v171, v172);
    JSC::MacroAssemblerARM64::branch64(a1, 1, 17, (uint64_t)a5, v179, v180, v181, v182, (uint64_t)v281);
    v188 = v281[0];
    if (v281[0] != -1)
    {
      v189 = *(unsigned int *)(a9 + 12);
      if ((_DWORD)v189 == *(_DWORD *)(a9 + 8))
      {
        v190 = (void *)(v189 + 1);
        v191 = v281;
LABEL_80:
        v192 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, v190, (unint64_t)v191, v183, v184, v185, v186, v187);
        v194 = *v192;
        v193 = v192 + 1;
        v188 = v194;
        LODWORD(v189) = *(_DWORD *)(a9 + 12);
LABEL_83:
        v196 = *(_QWORD *)a9 + 12 * v189;
        *(_DWORD *)v196 = v188;
        *(_QWORD *)(v196 + 4) = *v193;
        ++*(_DWORD *)(a9 + 12);
        goto LABEL_84;
      }
      v195 = v281;
      goto LABEL_82;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E4D0CLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a10, *(char *)(a1 + 304), v168, v169, v170, v171, v172);
    JSC::MacroAssemblerARM64::branch64(a1, 1, 17, a4, v259, v260, v261, v262, (uint64_t)v280);
    v188 = v280[0];
    if (v280[0] != -1)
    {
      v189 = *(unsigned int *)(a9 + 12);
      if ((_DWORD)v189 == *(_DWORD *)(a9 + 8))
      {
        v190 = (void *)(v189 + 1);
        v191 = v280;
        goto LABEL_80;
      }
      v195 = v280;
LABEL_82:
      v193 = v195 + 1;
      goto LABEL_83;
    }
  }
LABEL_84:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E4C10);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load16(a1, a10 | 0xC00000000, *(char *)(a1 + 304), v183, v184, v185, v186, v187);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, a8, v197, v198, v199, v200, (uint64_t)&v278);
  v208 = v278;
  if (v278 != -1)
  {
    v209 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v209 == *(_DWORD *)(a9 + 8))
    {
      v210 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v209 + 1), (unint64_t)&v278, v203, v204, v205, v206, v207);
      v212 = *v210;
      v211 = v210 + 1;
      v208 = v212;
      LODWORD(v209) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v211 = &v279;
    }
    v213 = *(_QWORD *)a9 + 12 * v209;
    *(_DWORD *)v213 = v208;
    *(_QWORD *)(v213 + 4) = *(_QWORD *)v211;
    ++*(_DWORD *)(a9 + 12);
  }
  for (k = *(_DWORD *)(a1 + 200); k < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = k)
  {
    if ((k + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v264, v201, v202, v203, v204, v205, v206, v207);
      k = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + k) = -721215457;
    k = *(_DWORD *)(a1 + 200) + 4;
  }
  v215 = k;
  if ((k + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v264, v201, v202, v203, v204, v205, v206, v207);
    v215 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v215) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v216 = 69;
  else
    v216 = 65;
  v274[0] = k;
  v274[1] = 0;
  v275 = v216;
  v276 = 15;
  v277 = -1;
  v273 = v267;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v274, &v273, a1, v203, v204, v205, v206, v207);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v288, a1, v217, v218, v219, v220, v221, v222);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 10, a6, v223, v224, v225, v226, v227);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v284, a1, v228, v229, v230, v231, v232, v233);
  v241 = (unint64_t)v295;
  if (v297 != v295)
  {
    if (v295)
    {
      v295 = 0;
      LODWORD(v296) = 0;
      WTF::fastFree(v241, v234, v235, v236, v237, v238, v239, v240);
    }
  }
}

void JSC::AssemblyHelpers::storeMegamorphicProperty(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, WTF::StringImpl *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  _DWORD *v82;
  uint64_t *v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  void *v99;
  _DWORD *v100;
  _DWORD *v101;
  _QWORD *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int *v123;
  int *v124;
  int v125;
  _BYTE *v126;
  int i;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int8x8_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  _DWORD *v140;
  uint64_t *v141;
  int v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int j;
  unsigned int v175;
  char v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  int v180;
  char v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  int *v213;
  int *v214;
  int v215;
  _BYTE *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  int v228;
  void *v229;
  _DWORD *v230;
  _DWORD *v231;
  _QWORD *v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _DWORD *v238;
  _BYTE *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  int v252;
  _DWORD *v253;
  uint64_t *v254;
  int v255;
  _BYTE *v256;
  int k;
  unsigned int v258;
  char v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  _BYTE *v276;
  _BYTE *v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  unint64_t v281;
  _BYTE *v282;
  unint64_t v284;
  unint64_t v286;
  uint64_t v288;
  JSC::AssemblerBuffer *v289;
  int v290;
  unsigned int v291;
  uint64_t v293;
  uint64_t v294;
  char v295;
  unsigned int v299;
  unsigned int v300[2];
  char v301;
  __int16 v302;
  char v303;
  int v304;
  uint64_t v305;
  _DWORD v306[3];
  _DWORD v307[3];
  int v308;
  int v309;
  unsigned int v310[2];
  char v311;
  __int16 v312;
  char v313;
  unsigned int v314[3];
  int v315;
  uint64_t v316;
  int v317;
  int v318;
  _DWORD v319[3];
  _DWORD v320[3];
  int v321;
  uint64_t v322;
  _BYTE *v323;
  uint64_t v324;
  _BYTE v325[24];
  _BYTE *v326;
  uint64_t v327;
  _BYTE v328[24];
  _BYTE *v329;
  uint64_t v330;
  _BYTE v331[32];

  v295 = a6;
  v329 = v331;
  v330 = 2;
  v326 = v328;
  v327 = 2;
  v323 = v325;
  v324 = 2;
  v294 = a3;
  JSC::MacroAssemblerARM64::load32(a1, a3, a7, a4, (uint64_t)a5, a6, a7, a8);
  v289 = (JSC::AssemblerBuffer *)(a1 + 56);
  v21 = *(_DWORD *)(a1 + 200);
  if (v21 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v289, v14, v15, v16, v17, v18, v19, v20);
    v21 = *(_DWORD *)(a1 + 200);
  }
  v22 = (char)a10;
  v23 = a7 & 0x1F;
  v24 = a8 & 0x1F;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = v24 | (32 * v23) | 0x53007C00;
  v25 = *(_DWORD *)(a1 + 200);
  v26 = v25 + 4;
  *(_DWORD *)(a1 + 200) = v25 + 4;
  if ((v25 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v289, v14, v15, v16, v17, v18, v19, v20);
    v26 = *(_DWORD *)(a1 + 200);
  }
  v290 = v23 << 16;
  v27 = (v23 << 16) | (32 * v24);
  v28 = a10 & 0x1F;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = v27 & 0xFFFFFFE0 | v28 | 0x4A402C00;
  *(_DWORD *)(a1 + 200) += 4;
  v29 = v24 << 16;
  if (a5)
  {
    v85 = *((_DWORD *)a5 + 4);
    if (v85 < 0x100)
      v86 = WTF::StringImpl::hashSlowCase(a5);
    else
      v86 = v85 >> 8;
    JSC::MacroAssemblerARM64::add32(a1, v86, v22, v22, v17, v18, v19, v20);
    goto LABEL_13;
  }
  JSC::MacroAssemblerARM64::load32(a1, a4 | 0x1000000000, a8, v16, v17, v18, v19, v20);
  v37 = *(_DWORD *)(a1 + 200);
  if (v37 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v289, v30, v31, v32, v33, v34, v35, v36);
    v37 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v37) = a8 & 0x1F | (32 * a8) | 0x53087C00;
  v38 = *(_DWORD *)(a1 + 200);
  v39 = v38 + 4;
  *(_DWORD *)(a1 + 200) = v38 + 4;
  if ((_DWORD)a8 == 31)
  {
    v288 = v22 | (v28 << 16) | 0xB2063E0;
LABEL_182:
    JSC::AssemblerBuffer::putInt(v289, v288, v31, v32, v33, v34, v35, v36);
    goto LABEL_13;
  }
  if ((_DWORD)v22 == 31)
  {
    v288 = v29 | 0xB2063FFu;
    goto LABEL_182;
  }
  if ((v38 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v289, v30, v31, v32, v33, v34, v35, v36);
    v39 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = v29 | (32 * v28) | v28 | 0xB000000;
  *(_DWORD *)(a1 + 200) += 4;
LABEL_13:
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0x7FF, a10, (char)a10);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_187;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v48 = *(char *)(a1 + 272) | 0x321D07E0;
  v49 = *(_DWORD *)(a1 + 200);
  if (v49 + 4 > *(_DWORD *)(a1 + 192))
  {
    v47 = JSC::AssemblerBuffer::outOfLineGrow(v289, v40, v41, v42, v43, v44, v45, v46);
    v49 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = v48;
  v50 = *(_DWORD *)(a1 + 200);
  v51 = v50 + 4;
  *(_DWORD *)(a1 + 200) = v50 + 4;
  if ((v50 + 8) > *(_DWORD *)(a1 + 192))
  {
    v47 = JSC::AssemblerBuffer::outOfLineGrow(v289, v40, v41, v42, v43, v44, v45, v46);
    v51 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v51) = a10 & 0x1F | (32 * (a10 & 0x1F)) | 0x1B107C00;
  *(_DWORD *)(a1 + 200) += 4;
  v52 = *(_QWORD *)(a2 + 93080);
  if ((v52 & 1) != 0)
    v52 = (*(uint64_t (**)(uint64_t, __n128))(v52 & 0xFFFFFFFFFFFFFFFCLL))(a2, v47);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v52, a8, v42, v43, v44, v45, v46);
  v293 = v52;
  if ((_DWORD)a8 == 31)
  {
    v60 = v22 | (v28 << 16);
    v61 = -1960811552;
    goto LABEL_23;
  }
  if ((_DWORD)v22 != 31)
  {
    v60 = v29 | (32 * v28);
    v61 = v28 | 0x8B000000;
LABEL_23:
    v62 = v60 | v61;
    goto LABEL_24;
  }
  v62 = v29 | 0x8B2063FF;
LABEL_24:
  v63 = *(_DWORD *)(a1 + 200);
  if (v63 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v289, v53, v54, v55, v56, v57, v58, v59);
    v63 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v63) = v62;
  v64 = *(_DWORD *)(a1 + 200);
  v65 = v64 + 4;
  *(_DWORD *)(a1 + 200) = v64 + 4;
  if ((v64 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v289, v53, v54, v55, v56, v57, v58, v59);
    v65 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v65) = v22 | (32 * v22) | 0x91403C00;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load16(a1, a8 | 0x2080000000000, a8, v55, v56, v57, v58, v59);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E5C60);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, a10 | 0x800000000, *(char *)(a1 + 304), v66, v67, v68, v69, v70);
  JSC::MacroAssemblerARM64::branch32(a1, 1, a7, 17, v71, v72, v73, v74, (uint64_t)&v321);
  v80 = v321;
  if (v321 != -1)
  {
    v81 = HIDWORD(v330);
    if (HIDWORD(v330) == (_DWORD)v330)
    {
      v82 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v329, (void *)(HIDWORD(v330) + 1), (unint64_t)&v321, v75, v76, v77, v78, v79);
      v84 = *v82;
      v83 = (uint64_t *)(v82 + 1);
      v80 = v84;
      v81 = HIDWORD(v330);
    }
    else
    {
      v83 = &v322;
    }
    v87 = &v329[12 * v81];
    *(_DWORD *)v87 = v80;
    *(_QWORD *)(v87 + 4) = *v83;
    ++HIDWORD(v330);
  }
  if (a5)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E5E94);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a10, *(char *)(a1 + 304), v75, v76, v77, v78, v79);
    JSC::MacroAssemblerARM64::branch64(a1, 1, 17, (uint64_t)a5, v104, v105, v106, v107, (uint64_t)v320);
    v97 = v320[0];
    if (v320[0] != -1)
    {
      v98 = HIDWORD(v330);
      if (HIDWORD(v330) == (_DWORD)v330)
      {
        v99 = (void *)(HIDWORD(v330) + 1);
        v100 = v320;
        goto LABEL_42;
      }
      v108 = v320;
LABEL_48:
      v102 = v108 + 1;
      goto LABEL_49;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E5E44);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a10, *(char *)(a1 + 304), v75, v76, v77, v78, v79);
    JSC::MacroAssemblerARM64::branch64(a1, 1, 17, a4, v88, v89, v90, v91, (uint64_t)v319);
    v97 = v319[0];
    if (v319[0] != -1)
    {
      v98 = HIDWORD(v330);
      if (HIDWORD(v330) == (_DWORD)v330)
      {
        v99 = (void *)(HIDWORD(v330) + 1);
        v100 = v319;
LABEL_42:
        v101 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v329, v99, (unint64_t)v100, v92, v93, v94, v95, v96);
        v103 = *v101;
        v102 = v101 + 1;
        v97 = v103;
        v98 = HIDWORD(v330);
LABEL_49:
        v109 = &v329[12 * v98];
        *(_DWORD *)v109 = v97;
        *(_QWORD *)(v109 + 4) = *v102;
        ++HIDWORD(v330);
        goto LABEL_50;
      }
      v108 = v319;
      goto LABEL_48;
    }
  }
LABEL_50:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E5C80);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load16(a1, a10 | 0x1000000000, *(char *)(a1 + 304), v92, v93, v94, v95, v96);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, a8, v110, v111, v112, v113, (uint64_t)&v317);
  v121 = v317;
  if (v317 != -1)
  {
    v122 = HIDWORD(v327);
    if (HIDWORD(v327) == (_DWORD)v327)
    {
      v123 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v326, (void *)(HIDWORD(v327) + 1), (unint64_t)&v317, v116, v117, v118, v119, v120);
      v125 = *v123;
      v124 = v123 + 1;
      v121 = v125;
      v122 = HIDWORD(v327);
    }
    else
    {
      v124 = &v318;
    }
    v126 = &v326[12 * v122];
    *(_DWORD *)v126 = v121;
    *(_QWORD *)(v126 + 4) = *(_QWORD *)v124;
    ++HIDWORD(v327);
  }
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v289, v114, v115, v116, v117, v118, v119, v120);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  *(_DWORD *)(a1 + 208) = 0;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E5CDCLL);
  }
  v291 = i;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, a10 | 0x1400000000, *(char *)(a1 + 304), v116, v117, v118, v119, v120);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, 17, v128, v129, v130, v131, (uint64_t)&v315, v132);
  v138 = v315;
  if (v315 != -1)
  {
    v139 = HIDWORD(v324);
    if (HIDWORD(v324) == (_DWORD)v324)
    {
      v140 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v323, (void *)(HIDWORD(v324) + 1), (unint64_t)&v315, v133, v134, v135, v136, v137);
      v142 = *v140;
      v141 = (uint64_t *)(v140 + 1);
      v138 = v142;
      v139 = HIDWORD(v324);
    }
    else
    {
      v141 = &v316;
    }
    v143 = &v323[12 * v139];
    *(_DWORD *)v143 = v138;
    *(_QWORD *)(v143 + 4) = *v141;
    ++HIDWORD(v324);
  }
  JSC::MacroAssemblerARM64::load32(a1, a10 | 0xC00000000, a8, v133, v134, v135, v136, v137);
  JSC::MacroAssemblerARM64::load16(a1, a10 | 0x1200000000, v22, v144, v145, v146, v147, v148);
  JSC::MacroAssemblerARM64::branch32(a1, 0, a8, a7, v149, v150, v151, v152, (uint64_t)v314);
  JSC::MacroAssemblerARM64::store32(a1, a8, v294, v153, v154, v155, v156, v157);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v314, a1, v158, v159, v160, v161, v162, v163);
  JSC::AssemblyHelpers::storeProperty(a1, v295, a3, v22, a7, v164, v165, v166);
  for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v289, v167, v168, v169, v170, v171, v172, v173);
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
    j = *(_DWORD *)(a1 + 200) + 4;
  }
  v175 = j;
  if ((j + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v289, v167, v168, v169, v170, v171, v172, v173);
    v175 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v175) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v176 = 69;
  else
    v176 = 65;
  v310[0] = j;
  v310[1] = 0;
  v311 = v176;
  v312 = 15;
  v313 = -1;
  if (HIDWORD(v330))
  {
    v177 = 0;
    v178 = 0;
    v179 = 12 * HIDWORD(v330);
    do
    {
      if (v178 >= HIDWORD(v330))
      {
        __break(0xC471u);
        JUMPOUT(0x1986E5F50);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v329[v177], a1, v168, v169, v170, v171, v172, v173);
      ++v178;
      v177 += 12;
    }
    while (v179 != v177);
  }
  v180 = v28 << 16;
  if (a5)
  {
    JSC::MacroAssemblerARM64::add32(a1, a5, a7, v22, v170, v171, v172, v173);
  }
  else
  {
    if ((_DWORD)a7 == 31)
    {
      v182 = 31;
      v181 = a4;
    }
    else
    {
      v181 = a7;
      v182 = a4;
      if ((_DWORD)a4 != 31)
      {
        v181 = a7;
        v182 = a4;
        if ((_DWORD)v22 != 31)
        {
          v183 = *(_DWORD *)(a1 + 200);
          if (v183 + 4 > *(_DWORD *)(a1 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v289, v167, v168, v169, v170, v171, v172, v173);
            v183 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v183) = v290 | (32 * (a4 & 0x1F)) | v28 | 0xB000000;
          v184 = *(_DWORD *)(a1 + 200) + 4;
          *(_DWORD *)(a1 + 200) = v184;
          goto LABEL_80;
        }
      }
    }
    JSC::AssemblerBuffer::putInt(v289, ((v181 & 0x1F) << 16) | (32 * v182) | v22 | 0xB206000, v168, v169, v170, v171, v172, v173);
  }
  v184 = *(_DWORD *)(a1 + 200);
  if ((_DWORD)v22 != 31)
  {
LABEL_80:
    v185 = v180 | (32 * v28) | v28 | 0xB402400;
    goto LABEL_81;
  }
  v185 = v180 | 0xB2067FF;
LABEL_81:
  if (v184 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v289, v167, v168, v169, v170, v171, v172, v173);
    v184 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v184) = v185;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0x1FF, a10, (char)a10);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E5D58);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  v193 = *(char *)(a1 + 272) | 0x321D07E0;
  v194 = *(_DWORD *)(a1 + 200);
  if (v194 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v289, v186, v187, v188, v189, v190, v191, v192);
    v194 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v194) = v193;
  v195 = *(_DWORD *)(a1 + 200);
  v196 = v195 + 4;
  *(_DWORD *)(a1 + 200) = v195 + 4;
  if ((v195 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v289, v186, v187, v188, v189, v190, v191, v192);
    v196 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v196) = a10 & 0x1F | (32 * (a10 & 0x1F)) | 0x1B107C00;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::add64(a1, v293 + 110592, v22, v22, v189, v190, v191, v192);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E5D98);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, a10 | 0x800000000, *(char *)(a1 + 304), v197, v198, v199, v200, v201);
  JSC::MacroAssemblerARM64::branch32(a1, 1, a7, 17, v202, v203, v204, v205, (uint64_t)&v308);
  v211 = v308;
  if (v308 != -1)
  {
    v212 = HIDWORD(v327);
    if (HIDWORD(v327) == (_DWORD)v327)
    {
      v213 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v326, (void *)(HIDWORD(v327) + 1), (unint64_t)&v308, v206, v207, v208, v209, v210);
      v215 = *v213;
      v214 = v213 + 1;
      v211 = v215;
      v212 = HIDWORD(v327);
    }
    else
    {
      v214 = &v309;
    }
    v216 = &v326[12 * v212];
    *(_DWORD *)v216 = v211;
    *(_QWORD *)(v216 + 4) = *(_QWORD *)v214;
    ++HIDWORD(v327);
  }
  if (a5)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E5EB4);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a10, *(char *)(a1 + 304), v206, v207, v208, v209, v210);
    JSC::MacroAssemblerARM64::branch64(a1, 1, 17, (uint64_t)a5, v234, v235, v236, v237, (uint64_t)v307);
    v226 = v307[0];
    v227 = a10 | 0x1000000000;
    if (v307[0] != -1)
    {
      v228 = HIDWORD(v327);
      if (HIDWORD(v327) == (_DWORD)v327)
      {
        v229 = (void *)(HIDWORD(v327) + 1);
        v230 = v307;
        goto LABEL_102;
      }
      v238 = v307;
LABEL_108:
      v232 = v238 + 1;
      goto LABEL_109;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E5E74);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a10, *(char *)(a1 + 304), v206, v207, v208, v209, v210);
    JSC::MacroAssemblerARM64::branch64(a1, 1, 17, a4, v217, v218, v219, v220, (uint64_t)v306);
    v226 = v306[0];
    v227 = a10 | 0x1000000000;
    if (v306[0] != -1)
    {
      v228 = HIDWORD(v327);
      if (HIDWORD(v327) == (_DWORD)v327)
      {
        v229 = (void *)(HIDWORD(v327) + 1);
        v230 = v306;
LABEL_102:
        v231 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v326, v229, (unint64_t)v230, v221, v222, v223, v224, v225);
        v233 = *v231;
        v232 = v231 + 1;
        v226 = v233;
        v228 = HIDWORD(v327);
LABEL_109:
        v239 = &v326[12 * v228];
        *(_DWORD *)v239 = v226;
        *(_QWORD *)(v239 + 4) = *v232;
        ++HIDWORD(v327);
        goto LABEL_110;
      }
      v238 = v306;
      goto LABEL_108;
    }
  }
LABEL_110:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E5DB8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load16(a1, v227, *(char *)(a1 + 304), v221, v222, v223, v224, v225);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, a8, v240, v241, v242, v243, (uint64_t)&v304);
  v251 = v304;
  if (v304 != -1)
  {
    v252 = HIDWORD(v327);
    if (HIDWORD(v327) == (_DWORD)v327)
    {
      v253 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v326, (void *)(HIDWORD(v327) + 1), (unint64_t)&v304, v246, v247, v248, v249, v250);
      v255 = *v253;
      v254 = (uint64_t *)(v253 + 1);
      v251 = v255;
      v252 = HIDWORD(v327);
    }
    else
    {
      v254 = &v305;
    }
    v256 = &v326[12 * v252];
    *(_DWORD *)v256 = v251;
    *(_QWORD *)(v256 + 4) = *v254;
    ++HIDWORD(v327);
  }
  for (k = *(_DWORD *)(a1 + 200); k < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = k)
  {
    if ((k + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v289, v244, v245, v246, v247, v248, v249, v250);
      k = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + k) = -721215457;
    k = *(_DWORD *)(a1 + 200) + 4;
  }
  v258 = k;
  if ((k + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v289, v244, v245, v246, v247, v248, v249, v250);
    v258 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v258) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v259 = 69;
  else
    v259 = 65;
  v300[0] = k;
  v300[1] = 0;
  v301 = v259;
  v302 = 15;
  v303 = -1;
  v299 = v291;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v300, &v299, a1, v246, v247, v248, v249, v250);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v310, a1, v260, v261, v262, v263, v264, v265);
  v273 = HIDWORD(v327);
  v274 = a9 + 16;
  *(_QWORD *)a9 = a9 + 16;
  *(_DWORD *)(a9 + 8) = 2;
  *(_DWORD *)(a9 + 12) = v273;
  if (v273 >= 3)
  {
    if (v273 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1986E5F58);
    }
    v275 = 12 * v273;
    v274 = WTF::fastMalloc((WTF *)(12 * v273));
    *(_DWORD *)(a9 + 8) = (v275 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)a9 = v274;
    LODWORD(v273) = HIDWORD(v327);
  }
  if ((_DWORD)v273)
  {
    v276 = v326;
    v277 = &v326[12 * v273];
    do
    {
      *(_DWORD *)v274 = *(_DWORD *)v276;
      *(_QWORD *)(v274 + 4) = *(_QWORD *)(v276 + 4);
      v276 += 12;
      v274 += 12;
    }
    while (v276 != v277);
  }
  v278 = HIDWORD(v324);
  v279 = a9 + 56;
  *(_QWORD *)(a9 + 40) = a9 + 56;
  *(_DWORD *)(a9 + 48) = 2;
  *(_DWORD *)(a9 + 52) = v278;
  if (v278 >= 3)
  {
    if (v278 < 0x15555556)
    {
      v280 = 12 * v278;
      v279 = WTF::fastMalloc((WTF *)(12 * v278));
      *(_DWORD *)(a9 + 48) = (v280 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)(a9 + 40) = v279;
      LODWORD(v278) = HIDWORD(v324);
      goto LABEL_131;
    }
    __break(0xC471u);
LABEL_187:
    JUMPOUT(0x1986E5BE8);
  }
LABEL_131:
  v281 = (unint64_t)v323;
  if ((_DWORD)v278)
  {
    v282 = &v323[12 * v278];
    do
    {
      *(_DWORD *)v279 = *(_DWORD *)v281;
      *(_QWORD *)(v279 + 4) = *(_QWORD *)(v281 + 4);
      v281 += 12;
      v279 += 12;
    }
    while ((_BYTE *)v281 != v282);
    v281 = (unint64_t)v323;
  }
  if (v325 != (_BYTE *)v281 && v281 != 0)
  {
    v323 = 0;
    LODWORD(v324) = 0;
    WTF::fastFree(v281, v266, v267, v268, v269, v270, v271, v272);
  }
  v284 = (unint64_t)v326;
  if (v328 != v326 && v326 != 0)
  {
    v326 = 0;
    LODWORD(v327) = 0;
    WTF::fastFree(v284, v266, v267, v268, v269, v270, v271, v272);
  }
  v286 = (unint64_t)v329;
  if (v331 != v329 && v329 != 0)
  {
    v329 = 0;
    LODWORD(v330) = 0;
    WTF::fastFree(v286, v266, v267, v268, v269, v270, v271, v272);
  }
}

void JSC::AssemblyHelpers::hasMegamorphicProperty(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  _DWORD *v81;
  uint64_t *v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  void *v98;
  _DWORD *v99;
  _DWORD *v100;
  _QWORD *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _DWORD *v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int *v122;
  int *v123;
  int v124;
  uint64_t v125;
  int i;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  char v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  char v142;
  int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int *v171;
  int *v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  void *v186;
  _DWORD *v187;
  _DWORD *v188;
  _QWORD *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _DWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  _DWORD *v210;
  uint64_t *v211;
  int v212;
  uint64_t v213;
  int j;
  unsigned int v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  JSC::AssemblerBuffer *v232;
  int v233;
  unsigned int v234;
  int v235;
  uint64_t v236;
  WTF::StringImpl *v238;
  unsigned int v239;
  unsigned int v240[2];
  char v241;
  __int16 v242;
  char v243;
  int v244;
  uint64_t v245;
  _DWORD v246[3];
  _DWORD v247[3];
  int v248;
  int v249;
  unsigned int v250[2];
  char v251;
  __int16 v252;
  char v253;
  int v254;
  int v255;
  _DWORD v256[3];
  _DWORD v257[3];
  int v258;
  uint64_t v259;
  _BYTE *v260;
  uint64_t v261;
  _BYTE v262[32];

  v235 = a6;
  v260 = v262;
  v261 = 2;
  *(_QWORD *)a9 = a9 + 16;
  *(_QWORD *)(a9 + 8) = 2;
  JSC::MacroAssemblerARM64::load32(a1, a3, a7, a4, a5, a6, a7, a8);
  v232 = (JSC::AssemblerBuffer *)(a1 + 56);
  v23 = *(_DWORD *)(a1 + 200);
  if (v23 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v232, v16, v17, v18, v19, v20, v21, v22);
    v23 = *(_DWORD *)(a1 + 200);
  }
  v238 = (WTF::StringImpl *)a5;
  v24 = (char)a10;
  v25 = a7 & 0x1F;
  v26 = a8 & 0x1F;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = v26 | (32 * v25) | 0x53007C00;
  v27 = *(_DWORD *)(a1 + 200);
  v28 = v27 + 4;
  *(_DWORD *)(a1 + 200) = v27 + 4;
  if ((v27 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v232, v16, v17, v18, v19, v20, v21, v22);
    v28 = *(_DWORD *)(a1 + 200);
  }
  v233 = v25 << 16;
  v29 = (v25 << 16) | (32 * v26);
  v30 = a10 & 0x1F;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = v29 & 0xFFFFFFE0 | v30 | 0x4A402400;
  *(_DWORD *)(a1 + 200) += 4;
  v31 = v26 << 16;
  if (v238)
  {
    v84 = *((_DWORD *)v238 + 4);
    if (v84 < 0x100)
      v85 = WTF::StringImpl::hashSlowCase(v238);
    else
      v85 = v84 >> 8;
    JSC::MacroAssemblerARM64::add32(a1, v85, v24, v24, v19, v20, v21, v22);
    goto LABEL_13;
  }
  JSC::MacroAssemblerARM64::load32(a1, a4 | 0x1000000000, a8, v18, v19, v20, v21, v22);
  v39 = *(_DWORD *)(a1 + 200);
  if (v39 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v232, v32, v33, v34, v35, v36, v37, v38);
    v39 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = a8 & 0x1F | (32 * a8) | 0x53087C00;
  v40 = *(_DWORD *)(a1 + 200);
  v41 = v40 + 4;
  *(_DWORD *)(a1 + 200) = v40 + 4;
  if ((_DWORD)a8 == 31)
  {
    v231 = v24 | (v30 << 16) | 0xB2063E0;
LABEL_144:
    JSC::AssemblerBuffer::putInt(v232, v231, v33, v34, v35, v36, v37, v38);
    goto LABEL_13;
  }
  if ((_DWORD)v24 == 31)
  {
    v231 = v31 | 0xB2063FFu;
    goto LABEL_144;
  }
  if ((v40 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v232, v32, v33, v34, v35, v36, v37, v38);
    v41 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = v31 | (32 * v30) | v30 | 0xB000000;
  *(_DWORD *)(a1 + 200) += 4;
LABEL_13:
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0x1FF, a10, (char)a10);
  v50 = *(_DWORD *)(a1 + 200);
  if (v50 + 4 > *(_DWORD *)(a1 + 192))
  {
    v49 = JSC::AssemblerBuffer::outOfLineGrow(v232, v42, v43, v44, v45, v46, v47, v48);
    v50 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = a10 & 0x1F | (32 * (a10 & 0x1F)) | 0x531C6C00;
  *(_DWORD *)(a1 + 200) += 4;
  v51 = *(_QWORD *)(a2 + 93080);
  if ((v51 & 1) != 0)
    v51 = (*(uint64_t (**)(uint64_t, __n128))(v51 & 0xFFFFFFFFFFFFFFFCLL))(a2, v49);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v51, a8, v44, v45, v46, v47, v48);
  v236 = v51;
  if ((_DWORD)a8 == 31)
  {
    v59 = v24 | (v30 << 16);
    v60 = -1960811552;
    goto LABEL_20;
  }
  if ((_DWORD)v24 != 31)
  {
    v59 = v31 | v30 | (32 * v30);
    v60 = -1962934272;
LABEL_20:
    v61 = v59 | v60;
    goto LABEL_21;
  }
  v61 = v31 | 0x8B2063FF;
LABEL_21:
  v62 = *(_DWORD *)(a1 + 200);
  if (v62 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v232, v52, v53, v54, v55, v56, v57, v58);
    v62 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v62) = v61;
  v63 = *(_DWORD *)(a1 + 200);
  v64 = v63 + 4;
  *(_DWORD *)(a1 + 200) = v63 + 4;
  if ((v63 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v232, v52, v53, v54, v55, v56, v57, v58);
    v64 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v64) = v24 | (32 * v24) | 0x91407800;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load16(a1, a8 | 0x2080000000000, a8, v54, v55, v56, v57, v58);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_147;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, a10 | 0x800000000, *(char *)(a1 + 304), v65, v66, v67, v68, v69);
  JSC::MacroAssemblerARM64::branch32(a1, 1, a7, 17, v70, v71, v72, v73, (uint64_t)&v258);
  v79 = v258;
  if (v258 != -1)
  {
    v80 = HIDWORD(v261);
    if (HIDWORD(v261) == (_DWORD)v261)
    {
      v81 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v260, (void *)(HIDWORD(v261) + 1), (unint64_t)&v258, v74, v75, v76, v77, v78);
      v83 = *v81;
      v82 = (uint64_t *)(v81 + 1);
      v79 = v83;
      v80 = HIDWORD(v261);
    }
    else
    {
      v82 = &v259;
    }
    v86 = &v260[12 * v80];
    *(_DWORD *)v86 = v79;
    *(_QWORD *)(v86 + 4) = *v82;
    ++HIDWORD(v261);
  }
  if (v238)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E6CD8);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a10, *(char *)(a1 + 304), v74, v75, v76, v77, v78);
    JSC::MacroAssemblerARM64::branch64(a1, 1, 17, (uint64_t)v238, v103, v104, v105, v106, (uint64_t)v257);
    v96 = v257[0];
    if (v257[0] != -1)
    {
      v97 = HIDWORD(v261);
      if (HIDWORD(v261) == (_DWORD)v261)
      {
        v98 = (void *)(HIDWORD(v261) + 1);
        v99 = v257;
        goto LABEL_39;
      }
      v107 = v257;
LABEL_45:
      v101 = v107 + 1;
      goto LABEL_46;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E6C88);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a10, *(char *)(a1 + 304), v74, v75, v76, v77, v78);
    JSC::MacroAssemblerARM64::branch64(a1, 1, 17, a4, v87, v88, v89, v90, (uint64_t)v256);
    v96 = v256[0];
    if (v256[0] != -1)
    {
      v97 = HIDWORD(v261);
      if (HIDWORD(v261) == (_DWORD)v261)
      {
        v98 = (void *)(HIDWORD(v261) + 1);
        v99 = v256;
LABEL_39:
        v100 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v260, v98, (unint64_t)v99, v91, v92, v93, v94, v95);
        v102 = *v100;
        v101 = v100 + 1;
        v96 = v102;
        v97 = HIDWORD(v261);
LABEL_46:
        v108 = &v260[12 * v97];
        *(_DWORD *)v108 = v96;
        *(_QWORD *)(v108 + 4) = *v101;
        ++HIDWORD(v261);
        goto LABEL_47;
      }
      v107 = v256;
      goto LABEL_45;
    }
  }
LABEL_47:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E6B04);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load16(a1, a10 | 0xC00000000, *(char *)(a1 + 304), v91, v92, v93, v94, v95);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, a8, v109, v110, v111, v112, (uint64_t)&v254);
  v120 = v254;
  if (v254 != -1)
  {
    v121 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v121 == *(_DWORD *)(a9 + 8))
    {
      v122 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v121 + 1), (unint64_t)&v254, v115, v116, v117, v118, v119);
      v124 = *v122;
      v123 = v122 + 1;
      v120 = v124;
      LODWORD(v121) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v123 = &v255;
    }
    v125 = *(_QWORD *)a9 + 12 * v121;
    *(_DWORD *)v125 = v120;
    *(_QWORD *)(v125 + 4) = *(_QWORD *)v123;
    ++*(_DWORD *)(a9 + 12);
  }
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v232, v113, v114, v115, v116, v117, v118, v119);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v234 = i;
  *(_DWORD *)(a1 + 208) = 0;
  JSC::MacroAssemblerARM64::load16(a1, a10 | 0xE00000000, a8, v115, v116, v117, v118, v119);
  v134 = *(_DWORD *)(a1 + 200);
  if (v134 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v232, v127, v128, v129, v130, v131, v132, v133);
    v134 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v134) = v235 | (32 * a8) | 0x11001800;
  v135 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v135; v135 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v135)
  {
    if ((v135 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v232, v127, v128, v129, v130, v131, v132, v133);
      v135 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v135) = -721215457;
    v135 = *(_DWORD *)(a1 + 200) + 4;
  }
  v136 = v135;
  if ((v135 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v232, v127, v128, v129, v130, v131, v132, v133);
    v136 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v136) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v137 = 69;
  else
    v137 = 65;
  v250[0] = v135;
  v250[1] = 0;
  v251 = v137;
  v252 = 15;
  v253 = -1;
  if (HIDWORD(v261))
  {
    v138 = 0;
    v139 = 0;
    v140 = 12 * HIDWORD(v261);
    while (v139 < HIDWORD(v261))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v260[v138], a1, v128, v129, v130, v131, v132, v133);
      ++v139;
      v138 += 12;
      if (v140 == v138)
        goto LABEL_66;
    }
    __break(0xC471u);
LABEL_147:
    JUMPOUT(0x1986E6AD4);
  }
LABEL_66:
  v141 = v30 << 16;
  if (v238)
  {
    JSC::MacroAssemblerARM64::add32(a1, v238, a7, v24, v130, v131, v132, v133);
  }
  else
  {
    if ((_DWORD)a7 == 31)
    {
      v143 = 31;
      v142 = a4;
    }
    else
    {
      v142 = a7;
      v143 = a4;
      if ((_DWORD)a4 != 31)
      {
        v142 = a7;
        v143 = a4;
        if ((_DWORD)v24 != 31)
        {
          v144 = *(_DWORD *)(a1 + 200);
          if (v144 + 4 > *(_DWORD *)(a1 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v232, v127, v128, v129, v130, v131, v132, v133);
            v144 = *(_DWORD *)(a1 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + v144) = v233 | (32 * (a4 & 0x1F)) | v30 | 0xB000000;
          v145 = *(_DWORD *)(a1 + 200) + 4;
          *(_DWORD *)(a1 + 200) = v145;
          goto LABEL_73;
        }
      }
    }
    JSC::AssemblerBuffer::putInt(v232, ((v142 & 0x1F) << 16) | (32 * v143) | v24 | 0xB206000, v128, v129, v130, v131, v132, v133);
  }
  v145 = *(_DWORD *)(a1 + 200);
  if ((_DWORD)v24 != 31)
  {
LABEL_73:
    v146 = v141 | v30 | (32 * v30) | 0xB401C00;
    goto LABEL_74;
  }
  v146 = v141 | 0xB207FFF;
LABEL_74:
  if (v145 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v232, v127, v128, v129, v130, v131, v132, v133);
    v145 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v145) = v146;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0x7F, a10, (char)a10);
  v154 = *(_DWORD *)(a1 + 200);
  if (v154 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v232, v147, v148, v149, v150, v151, v152, v153);
    v154 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v154) = a10 & 0x1F | (32 * (a10 & 0x1F)) | 0x531C6C00;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::add64(a1, v236 + 0x20000, v24, v24, v150, v151, v152, v153);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E6BDCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, a10 | 0x800000000, *(char *)(a1 + 304), v155, v156, v157, v158, v159);
  JSC::MacroAssemblerARM64::branch32(a1, 1, a7, 17, v160, v161, v162, v163, (uint64_t)&v248);
  v169 = v248;
  if (v248 != -1)
  {
    v170 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v170 == *(_DWORD *)(a9 + 8))
    {
      v171 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v170 + 1), (unint64_t)&v248, v164, v165, v166, v167, v168);
      v173 = *v171;
      v172 = v171 + 1;
      v169 = v173;
      LODWORD(v170) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v172 = &v249;
    }
    v174 = *(_QWORD *)a9 + 12 * v170;
    *(_DWORD *)v174 = v169;
    *(_QWORD *)(v174 + 4) = *(_QWORD *)v172;
    ++*(_DWORD *)(a9 + 12);
  }
  if (v238)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E6CF8);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a10, *(char *)(a1 + 304), v164, v165, v166, v167, v168);
    JSC::MacroAssemblerARM64::branch64(a1, 1, 17, (uint64_t)v238, v191, v192, v193, v194, (uint64_t)v247);
    v184 = v247[0];
    if (v247[0] != -1)
    {
      v185 = *(unsigned int *)(a9 + 12);
      if ((_DWORD)v185 == *(_DWORD *)(a9 + 8))
      {
        v186 = (void *)(v185 + 1);
        v187 = v247;
        goto LABEL_92;
      }
      v195 = v247;
LABEL_98:
      v189 = v195 + 1;
      goto LABEL_99;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E6CB8);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a10, *(char *)(a1 + 304), v164, v165, v166, v167, v168);
    JSC::MacroAssemblerARM64::branch64(a1, 1, 17, a4, v175, v176, v177, v178, (uint64_t)v246);
    v184 = v246[0];
    if (v246[0] != -1)
    {
      v185 = *(unsigned int *)(a9 + 12);
      if ((_DWORD)v185 == *(_DWORD *)(a9 + 8))
      {
        v186 = (void *)(v185 + 1);
        v187 = v246;
LABEL_92:
        v188 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, v186, (unint64_t)v187, v179, v180, v181, v182, v183);
        v190 = *v188;
        v189 = v188 + 1;
        v184 = v190;
        LODWORD(v185) = *(_DWORD *)(a9 + 12);
LABEL_99:
        v196 = *(_QWORD *)a9 + 12 * v185;
        *(_DWORD *)v196 = v184;
        *(_QWORD *)(v196 + 4) = *v189;
        ++*(_DWORD *)(a9 + 12);
        goto LABEL_100;
      }
      v195 = v246;
      goto LABEL_98;
    }
  }
LABEL_100:
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986E6BFCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load16(a1, a10 | 0xC00000000, *(char *)(a1 + 304), v179, v180, v181, v182, v183);
  JSC::MacroAssemblerARM64::branch32(a1, 1, 17, a8, v197, v198, v199, v200, (uint64_t)&v244);
  v208 = v244;
  if (v244 != -1)
  {
    v209 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v209 == *(_DWORD *)(a9 + 8))
    {
      v210 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v209 + 1), (unint64_t)&v244, v203, v204, v205, v206, v207);
      v212 = *v210;
      v211 = (uint64_t *)(v210 + 1);
      v208 = v212;
      LODWORD(v209) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v211 = &v245;
    }
    v213 = *(_QWORD *)a9 + 12 * v209;
    *(_DWORD *)v213 = v208;
    *(_QWORD *)(v213 + 4) = *v211;
    ++*(_DWORD *)(a9 + 12);
  }
  for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v232, v201, v202, v203, v204, v205, v206, v207);
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
    j = *(_DWORD *)(a1 + 200) + 4;
  }
  v215 = j;
  if ((j + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v232, v201, v202, v203, v204, v205, v206, v207);
    v215 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v215) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v216 = 69;
  else
    v216 = 65;
  v240[0] = j;
  v240[1] = 0;
  v241 = v216;
  v242 = 15;
  v243 = -1;
  v239 = v234;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v240, &v239, a1, v203, v204, v205, v206, v207);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v250, a1, v217, v218, v219, v220, v221, v222);
  v230 = (unint64_t)v260;
  if (v262 != v260)
  {
    if (v260)
    {
      v260 = 0;
      LODWORD(v261) = 0;
      WTF::fastFree(v230, v223, v224, v225, v226, v227, v228, v229);
    }
  }
}

void JSC::AssemblyHelpers::emitLoadStructure(_DWORD *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v8 = a4;
  JSC::MacroAssemblerARM64::load32((uint64_t)a1, a3, a4, a4, a5, a6, a7, a8);
  v17 = a1[50];
  if (v17 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v10, v11, v12, v13, v14, v15, v16);
    v17 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v17) = v8 & 0x1F | (32 * (v8 & 0x1F)) | 0xD37CEC00;
  a1[50] += 4;
}

uint64_t JSC::AssemblyHelpers::emitLoadPrototype(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  _QWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int8x8_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  unsigned int v54[3];
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;

  v9 = a4;
  v11 = a3;
  v12 = (char)a4;
  JSC::MacroAssemblerARM64::load32(a1, a3, v12, a4, a5, a6, a7, a8);
  v20 = *(_DWORD *)(a1 + 200);
  if (v20 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v13, v14, v15, v16, v17, v18, v19);
    v20 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = v9 & 0x1F | (32 * (v9 & 0x1F)) | 0xD37CEC00;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load32(a1, v9 | 0xC00000000, *(char *)(a1 + 304), v15, v16, v17, v18, v19);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x800, a1, 1, 17, v21, v22, v23, v24, (uint64_t)&v57, v25);
    v55 = v57;
    v31 = v58;
    v56 = v58;
    if (v57 != -1)
    {
      v32 = *(unsigned int *)(a5 + 12);
      if ((_DWORD)v32 == *(_DWORD *)(a5 + 8))
      {
        v33 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a5, (void *)(v32 + 1), (unint64_t)&v55, v26, v27, v28, v29, v30);
        v34 = (_DWORD *)(*(_QWORD *)a5 + 12 * *(unsigned int *)(a5 + 12));
        *v34 = *(_DWORD *)v33;
        v35 = v34 + 1;
        v31 = *(_QWORD *)(v33 + 4);
      }
      else
      {
        v36 = (_DWORD *)(*(_QWORD *)a5 + 12 * v32);
        *v36 = v57;
        v35 = v36 + 1;
      }
      *v35 = v31;
      ++*(_DWORD *)(a5 + 12);
    }
    JSC::MacroAssemblerARM64::load64(a1, v9 | 0x3000000000, v12, v26, v27, v28, v29, v30);
    JSC::MacroAssemblerARM64::branchTest64(a1, 1, v12, 0xFFFFFFFFLL, v37, v38, v39, v40, (uint64_t)v54, v41);
    JSC::MacroAssemblerARM64::load64(a1, v11 | 0x1000000000, v12, v42, v43, v44, v45, v46);
    return (uint64_t)JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v54, a1, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    result = 6195;
    __break(0xC471u);
  }
  return result;
}

void JSC::AssemblyHelpers::emitRandomThunk(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  JSC::AssemblerBuffer *v96;
  JSC::ARM64LogicalImmediate *v97;
  int v98;

  v98 = a6;
  v8 = a5;
  v12 = a2 + 2104;
  v13 = a2 + 2112;
  JSC::MacroAssemblerARM64::load64((uint64_t)a1, a2 + 2104, a3, a4, a5, a6, a7, a8);
  v97 = (JSC::ARM64LogicalImmediate *)v13;
  JSC::MacroAssemblerARM64::load64((uint64_t)a1, v13, a4, v14, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, a4, v12, v19, v20, v21, v22, v23);
  if ((_DWORD)a3 == v8)
    goto LABEL_10;
  if ((_DWORD)a3 == 63)
  {
    if (v8 != 31)
    {
      v33 = v8 & 0x1F | 0xD2800000;
      goto LABEL_7;
    }
    goto LABEL_59;
  }
  if ((_DWORD)a3 == 31 || v8 == 31)
  {
LABEL_59:
    v31 = v8 | (32 * a3);
    v32 = -1862270976;
    goto LABEL_6;
  }
  v31 = v8 | ((a3 & 0x1F) << 16);
  v32 = -1442839584;
LABEL_6:
  v33 = v31 | v32;
LABEL_7:
  v35 = a1 + 50;
  v34 = a1[50];
  if (v34 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v24, v25, v26, v27, v28, v29, v30);
    v34 = *v35;
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v34) = v33;
  *v35 += 4;
LABEL_10:
  v36 = v8 & 0x1F;
  v96 = (JSC::AssemblerBuffer *)(a1 + 14);
  v37 = a1[50];
  if (v37 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v96, v24, v25, v26, v27, v28, v29, v30);
    v37 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v37) = v8 & 0x1F | (32 * (v8 & 0x1F)) | 0xD369A000;
  v38 = a1[50];
  v39 = v38 + 4;
  a1[50] = v38 + 4;
  if ((v38 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v96, v24, v25, v26, v27, v28, v29, v30);
    v39 = a1[50];
  }
  v40 = a3 & 0x1F;
  v41 = 32 * v40;
  v42 = v41 | (v36 << 16) | v40 | 0xCA000000;
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v39) = v42;
  v43 = a1[50];
  v44 = v43 + 4;
  a1[50] = v43 + 4;
  if ((_DWORD)a3 != v8)
  {
    if ((_DWORD)a3 == 63)
    {
      if (v8 != 31)
      {
        v47 = v36 | 0xD2800000;
        goto LABEL_20;
      }
    }
    else if ((_DWORD)a3 != 31 && v8 != 31)
    {
      v45 = v8 | (v40 << 16);
      v46 = -1442839584;
LABEL_19:
      v47 = v45 | v46;
LABEL_20:
      if ((v43 + 8) > a1[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow(v96, v24, v25, v26, v27, v28, v29, v30);
        v44 = a1[50];
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v44) = v47;
      v44 = a1[50] + 4;
      a1[50] = v44;
      goto LABEL_23;
    }
    v45 = v8 | (32 * a3);
    v46 = -1862270976;
    goto LABEL_19;
  }
LABEL_23:
  v48 = v8 & 0x1F | (32 * v8);
  if (v44 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v96, v24, v25, v26, v27, v28, v29, v30);
    v44 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v44) = v48 | 0x9351FC00;
  v49 = a1[50];
  v50 = v49 + 4;
  a1[50] = v49 + 4;
  if ((v49 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v96, v24, v25, v26, v27, v28, v29, v30);
    v50 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v50) = v42;
  v51 = a1[50];
  v52 = v51 + 4;
  a1[50] = v51 + 4;
  if ((_DWORD)a4 != v8)
  {
    if ((_DWORD)a4 == 63)
    {
      if (v8 != 31)
      {
        v55 = v36 | 0xD2800000;
        goto LABEL_33;
      }
    }
    else if ((_DWORD)a4 != 31 && v8 != 31)
    {
      v53 = v8 | ((a4 & 0x1F) << 16);
      v54 = -1442839584;
LABEL_32:
      v55 = v53 | v54;
LABEL_33:
      if ((v51 + 8) > a1[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow(v96, v24, v25, v26, v27, v28, v29, v30);
        v52 = a1[50];
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v52) = v55;
      v52 = a1[50] + 4;
      a1[50] = v52;
      goto LABEL_36;
    }
    v53 = v8 | (32 * a4);
    v54 = -1862270976;
    goto LABEL_32;
  }
LABEL_36:
  v56 = v48 | 0x935AFC00;
  if (v52 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v96, v24, v25, v26, v27, v28, v29, v30);
    v52 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v52) = v56;
  v57 = a1[50];
  v58 = v57 + 4;
  a1[50] = v57 + 4;
  if ((v57 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v96, v24, v25, v26, v27, v28, v29, v30);
    v58 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v58) = v36 & 0xFFE0FFFF | ((a4 & 0x1F) << 16) | (32 * v36) | 0xCA000000;
  v59 = a1[50];
  v60 = v59 + 4;
  a1[50] = v59 + 4;
  if ((v59 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v96, v24, v25, v26, v27, v28, v29, v30);
    v60 = a1[50];
  }
  v61 = (a4 & 0x1F) << 16;
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v60) = v42;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, a3, (uint64_t)v97, v26, v27, v28, v29, v30);
  if ((_DWORD)a4 == 31)
  {
    v69 = a3 | (v40 << 16);
    v70 = -1960811552;
    goto LABEL_45;
  }
  if ((_DWORD)a3 != 31)
  {
    v69 = v41 | v40;
    v70 = v61 | 0x8B000000;
LABEL_45:
    v71 = v69 | v70;
    goto LABEL_46;
  }
  v71 = v61 | 0x8B2063FF;
LABEL_46:
  v72 = a1[50];
  if (v72 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v96, v62, v63, v64, v65, v66, v67, v68);
    v72 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v72) = v71;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, 0x1FFFFFFFFFFFFFLL, a4, v64, v65, v66, v67, v68);
  v80 = a1[50];
  if (v80 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v96, v73, v74, v75, v76, v77, v78, v79);
    v80 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v80) = v41 | v40 | v61 | 0x8A000000;
  v81 = a1[50];
  v82 = v81 + 4;
  a1[50] = v81 + 4;
  if ((v81 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v96, v73, v74, v75, v76, v77, v78, v79);
    v82 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v82) = v41 | v98 | 0x9E620000;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, (uint64_t)&JSC::emitRandomThunkImpl<JSC::AssemblyHelpers::emitRandomThunk(JSC::JSGlobalObject *,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_0,JSC::AssemblyHelpers::emitRandomThunk(JSC::JSGlobalObject *,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_1,JSC::AssemblyHelpers::emitRandomThunk(JSC::JSGlobalObject *,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_2,JSC::AssemblyHelpers::emitRandomThunk(JSC::JSGlobalObject *,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_3>(JSC::AssemblyHelpers&,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID,JSC::AssemblyHelpers::emitRandomThunk(JSC::JSGlobalObject *,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_0 const&,JSC::AssemblyHelpers::emitRandomThunk(JSC::JSGlobalObject *,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_1 const&,JSC::AssemblyHelpers::emitRandomThunk(JSC::JSGlobalObject *,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_2 const&,JSC::AssemblyHelpers::emitRandomThunk(JSC::JSGlobalObject *,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_3 const&)::scale, a4, v75, v76, v77, v78, v79);
  JSC::MacroAssemblerARM64::loadDouble((uint64_t)a1, a4, 31, v83, v84, v85, v86, v87);
  v95 = a1[50];
  if (v95 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v96, v88, v89, v90, v91, v92, v93, v94);
    v95 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v95) = v98 | (32 * v98) | 0x1E7F0800;
  a1[50] += 4;
}

void JSC::AssemblyHelpers::emitRandomThunk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  JSC::AssemblerBuffer *v102;
  int v103;
  uint64_t v104;
  int v105;

  v105 = a7;
  v9 = a5;
  v13 = a6 & 0x1F | 0xF84183A0;
  v102 = (JSC::AssemblerBuffer *)(a1 + 56);
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = v13;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load32(a1, a6, a6, a4, a5, a6, a7, a8);
  v22 = *(_DWORD *)(a1 + 200);
  if (v22 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v15, v16, v17, v18, v19, v20, v21);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = a6 & 0x1F | (32 * (a6 & 0x1F)) | 0xD37CEC00;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::load64(a1, a6 | 0x2800000000, a6, v17, v18, v19, v20, v21);
  JSC::MacroAssemblerARM64::load64(a1, a6 | 0x83800000000, a3, v23, v24, v25, v26, v27);
  JSC::MacroAssemblerARM64::load64(a1, a6 | 0x84000000000, a4, v28, v29, v30, v31, v32);
  JSC::MacroAssemblerARM64::store64(a1, a4, a6 | 0x83800000000, v33, v34, v35, v36, v37);
  v104 = a6 | 0x84000000000;
  if ((_DWORD)a3 == v9)
  {
    v47 = *(_DWORD *)(a1 + 200);
    goto LABEL_13;
  }
  if ((_DWORD)a3 == 63)
  {
    if (v9 != 31)
    {
      v45 = v9 & 0x1F | 0xD2800000;
      goto LABEL_10;
    }
LABEL_62:
    v45 = v9 | (32 * a3) | 0x91000000;
    goto LABEL_10;
  }
  if ((_DWORD)a3 == 31 || v9 == 31)
    goto LABEL_62;
  v45 = v9 | ((a3 & 0x1F) << 16) | 0xAA0003E0;
LABEL_10:
  v46 = *(_DWORD *)(a1 + 200);
  if (v46 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v38, v39, v40, v41, v42, v43, v44);
    v46 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v46) = v45;
  v47 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v47;
LABEL_13:
  v48 = v9 & 0x1F;
  if (v47 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v38, v39, v40, v41, v42, v43, v44);
    v47 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v47) = v9 & 0x1F | (32 * (v9 & 0x1F)) | 0xD369A000;
  v49 = *(_DWORD *)(a1 + 200);
  v50 = v49 + 4;
  *(_DWORD *)(a1 + 200) = v49 + 4;
  if ((v49 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v38, v39, v40, v41, v42, v43, v44);
    v50 = *(_DWORD *)(a1 + 200);
  }
  v51 = (32 * (a3 & 0x1F)) | (v48 << 16) | a3 & 0x1F | 0xCA000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = v51;
  v52 = *(_DWORD *)(a1 + 200);
  v53 = v52 + 4;
  *(_DWORD *)(a1 + 200) = v52 + 4;
  v103 = 32 * (a3 & 0x1F);
  if ((_DWORD)a3 == v9)
  {
    v54 = a3 & 0x1F;
    goto LABEL_25;
  }
  if ((_DWORD)a3 == 63)
  {
    if (v9 != 31)
    {
      v54 = 31;
      v55 = v48 | 0xD2800000;
      goto LABEL_22;
    }
LABEL_65:
    v54 = a3 & 0x1F;
    v55 = v9 | (32 * a3) | 0x91000000;
    goto LABEL_22;
  }
  if ((_DWORD)a3 == 31 || v9 == 31)
    goto LABEL_65;
  v54 = a3 & 0x1F;
  v55 = v9 | (v54 << 16) | 0xAA0003E0;
LABEL_22:
  if ((v52 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v38, v39, v40, v41, v42, v43, v44);
    v53 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v53) = v55;
  v53 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v53;
LABEL_25:
  v56 = v9 & 0x1F | (32 * v9);
  if (v53 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v38, v39, v40, v41, v42, v43, v44);
    v53 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v53) = v56 | 0x9351FC00;
  v57 = *(_DWORD *)(a1 + 200);
  v58 = v57 + 4;
  *(_DWORD *)(a1 + 200) = v57 + 4;
  if ((v57 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v38, v39, v40, v41, v42, v43, v44);
    v58 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v58) = v51;
  v59 = *(_DWORD *)(a1 + 200);
  v60 = v59 + 4;
  *(_DWORD *)(a1 + 200) = v59 + 4;
  if ((_DWORD)a4 != v9)
  {
    if ((_DWORD)a4 == 63)
    {
      if (v9 != 31)
      {
        v61 = v48 | 0xD2800000;
        goto LABEL_34;
      }
    }
    else if ((_DWORD)a4 != 31 && v9 != 31)
    {
      v61 = v9 | ((a4 & 0x1F) << 16) | 0xAA0003E0;
LABEL_34:
      if ((v59 + 8) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v102, v38, v39, v40, v41, v42, v43, v44);
        v60 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v60) = v61;
      v60 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v60;
      goto LABEL_37;
    }
    v61 = v9 | (32 * a4) | 0x91000000;
    goto LABEL_34;
  }
LABEL_37:
  v62 = v56 | 0x935AFC00;
  if (v60 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v38, v39, v40, v41, v42, v43, v44);
    v60 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v60) = v62;
  v63 = *(_DWORD *)(a1 + 200);
  v64 = v63 + 4;
  *(_DWORD *)(a1 + 200) = v63 + 4;
  if ((v63 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v38, v39, v40, v41, v42, v43, v44);
    v64 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v64) = v48 & 0xFFE0FFFF | ((a4 & 0x1F) << 16) | (32 * v48) | 0xCA000000;
  v65 = *(_DWORD *)(a1 + 200);
  v66 = v65 + 4;
  *(_DWORD *)(a1 + 200) = v65 + 4;
  if ((v65 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v38, v39, v40, v41, v42, v43, v44);
    v66 = *(_DWORD *)(a1 + 200);
  }
  v67 = (a4 & 0x1F) << 16;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v66) = v51;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, a3, v104, v40, v41, v42, v43, v44);
  if ((_DWORD)a4 == 31)
  {
    v75 = a3 | (v54 << 16);
    v76 = -1960811552;
    goto LABEL_46;
  }
  if ((_DWORD)a3 != 31)
  {
    v75 = v103 | v54;
    v76 = v67 | 0x8B000000;
LABEL_46:
    v77 = v75 | v76;
    goto LABEL_47;
  }
  v77 = v67 | 0x8B2063FF;
LABEL_47:
  v78 = *(_DWORD *)(a1 + 200);
  if (v78 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v68, v69, v70, v71, v72, v73, v74);
    v78 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v78) = v77;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 0x1FFFFFFFFFFFFFLL, a4, v70, v71, v72, v73, v74);
  v86 = *(_DWORD *)(a1 + 200);
  if (v86 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v79, v80, v81, v82, v83, v84, v85);
    v86 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v86) = v103 | v54 | v67 | 0x8A000000;
  v87 = *(_DWORD *)(a1 + 200);
  v88 = v87 + 4;
  *(_DWORD *)(a1 + 200) = v87 + 4;
  if ((v87 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v79, v80, v81, v82, v83, v84, v85);
    v88 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v88) = v103 | v105 | 0x9E620000;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (uint64_t)&JSC::emitRandomThunkImpl<JSC::AssemblyHelpers::emitRandomThunk(JSC::VM &,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_0,JSC::AssemblyHelpers::emitRandomThunk(JSC::VM &,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_1,JSC::AssemblyHelpers::emitRandomThunk(JSC::VM &,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_2,JSC::AssemblyHelpers::emitRandomThunk(JSC::VM &,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_3>(JSC::AssemblyHelpers&,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID,JSC::AssemblyHelpers::emitRandomThunk(JSC::VM &,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_0 const&,JSC::AssemblyHelpers::emitRandomThunk(JSC::VM &,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_1 const&,JSC::AssemblyHelpers::emitRandomThunk(JSC::VM &,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_2 const&,JSC::AssemblyHelpers::emitRandomThunk(JSC::VM &,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID)::$_3 const&)::scale, a4, v81, v82, v83, v84, v85);
  JSC::MacroAssemblerARM64::loadDouble(a1, a4, 31, v89, v90, v91, v92, v93);
  v101 = *(_DWORD *)(a1 + 200);
  if (v101 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v102, v94, v95, v96, v97, v98, v99, v100);
    v101 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v101) = v105 | (32 * v105) | 0x1E7F0800;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::AssemblyHelpers::emitAllocateWithNonNullAllocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int k;
  unsigned int v11;
  char v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v20;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int i;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int j;
  unsigned int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int8x8_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  int v85;
  int v86;
  char v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  unint64_t v105;
  _DWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  unsigned int v111;
  char v112;
  uint64_t v113;
  int *v114;
  int *v115;
  int v116;
  uint64_t v117;
  _DWORD *v118;
  JSC::AssemblerBuffer *v119;
  unsigned int v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  int v126;
  char v127;
  __int16 v128;
  char v129;
  unsigned int v130;
  int v131;
  uint64_t v132;
  _BYTE v133[12];
  _BYTE v134[12];
  _BYTE v135[12];
  int v136;
  int v137;
  char v138;
  __int16 v139;
  char v140;

  if (!BYTE2(dword_1ECF4C5CE))
  {
    v18 = a7;
    v20 = a4;
    *(_QWORD *)v135 = 0xFFFFFFFFLL;
    *(_WORD *)&v135[8] = 3905;
    v135[10] = 0;
    *(_QWORD *)v134 = 0xFFFFFFFFLL;
    *(_DWORD *)&v134[8] = -16773311;
    *(_QWORD *)v133 = 0xFFFFFFFFLL;
    *(_DWORD *)&v133[8] = -16773311;
    if (!*(_DWORD *)a3)
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)(a3 + 8), a4, a4, a5, a6, a7, a8);
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E837CLL);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    v121 = v18;
    v122 = *(char *)(a1 + 272);
    v23 = a2 & 0x1F;
    v24 = v23 | ((a5 & 0x1F) << 10) | (32 * v20);
    v119 = (JSC::AssemblerBuffer *)(a1 + 56);
    v25 = *(_DWORD *)(a1 + 200);
    if (v25 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v119, a2, a3, a4, a5, a6, a7, a8);
      v25 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = v24 | 0xA9418000;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::branch64(a1, 2, a2, a5, a5, a6, a7, a8, (uint64_t)&v131);
    *(_DWORD *)v135 = v131;
    *(_QWORD *)&v135[4] = v132;
    for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v119, v26, v27, v28, v29, v30, v31, v32);
        i = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
      i = *(_DWORD *)(a1 + 200) + 4;
    }
    v34 = a5 & 0x1F;
    *(_DWORD *)(a1 + 208) = 0;
    v120 = i;
    if (!*(_DWORD *)a3)
    {
      JSC::MacroAssemblerARM64::add64(a1, *(unsigned int *)(*(_QWORD *)(a3 + 8) + 60), a2, a5, v29, v30, v31, v32);
      v35 = v20;
      goto LABEL_28;
    }
    v35 = v20;
    JSC::MacroAssemblerARM64::load32(a1, v20 | 0x3C00000000, a5, v28, v29, v30, v31, v32);
    if ((_DWORD)a2 == 31)
    {
      v44 = a5 | (v34 << 16);
      v45 = -1960811552;
    }
    else
    {
      v43 = v23 << 16;
      if ((_DWORD)a5 == 31)
      {
        v46 = v43 | 0x8B2063FF;
        goto LABEL_22;
      }
      v44 = v43 | (32 * v34);
      v45 = v34 | 0x8B000000;
    }
    v46 = v44 | v45;
LABEL_22:
    v47 = *(_DWORD *)(a1 + 200);
    if (v47 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v119, v36, v37, v38, v39, v40, v41, v42);
      v47 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v47) = v46;
    *(_DWORD *)(a1 + 200) += 4;
LABEL_28:
    JSC::MacroAssemblerARM64::store64(a1, a5, v35 | 0x1800000000, v38, v39, v40, v41, v42);
    for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
    {
      if ((j + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v119, v48, v49, v50, v51, v52, v53, v54);
        j = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
      j = *(_DWORD *)(a1 + 200) + 4;
    }
    v56 = j;
    if ((j + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v119, v48, v49, v50, v51, v52, v53, v54);
      v56 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v56) = 335544320;
    *(_DWORD *)(a1 + 200) += 4;
    v57 = 0xFF000F4500000000;
    if (!*(_BYTE *)(a1 + 328))
      v57 = 0xFF000F4100000000;
    *(_DWORD *)v133 = j;
    *(_QWORD *)&v133[4] = v57;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v135, a1, v49, v50, v51, v52, v53, v54);
    v66 = v24 | 0xA9428000;
    v67 = *(_DWORD *)(a1 + 200);
    if (v67 + 4 > *(_DWORD *)(a1 + 192))
    {
      v65 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v119, v58, v59, v60, v61, v62, v63, v64).n128_u64[0];
      v67 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v67) = v66;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::branchTest64(a1, 1, a2, 1, v61, v62, v63, v64, (uint64_t)&v131, v65);
    v73 = v131;
    *(_DWORD *)v134 = v131;
    v74 = v132;
    *(_QWORD *)&v134[4] = v132;
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986E8464);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::load64(a1, a2 | 0x800000000, *(char *)(a1 + 272), v68, v69, v70, v71, v72);
    v82 = *(_DWORD *)(a1 + 200);
    if (v82 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v119, v75, v76, v77, v78, v79, v80, v81);
      v82 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v82) = v34 | (32 * v34) | 0xCA100000;
    v83 = *(_DWORD *)(a1 + 200);
    v84 = v83 + 4;
    *(_DWORD *)(a1 + 200) = v83 + 4;
    if ((v83 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v119, v75, v76, v77, v78, v79, v80, v81);
      v84 = *(_DWORD *)(a1 + 200);
    }
    v85 = 32 * v20;
    v86 = v34 << 16;
    v87 = v122;
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v84) = v122 | (32 * a2) | (v34 << 16) | 0x8B20C000;
    v88 = *(_DWORD *)(a1 + 200);
    v89 = v88 + 4;
    *(_DWORD *)(a1 + 200) = v88 + 4;
    v90 = v88 + 8;
    if ((_DWORD)a2 == 31 || (_DWORD)a5 == 31)
    {
      v91 = (32 * a2) | a5 | v86 | 0x8B000000;
      v92 = 2121728;
    }
    else
    {
      v91 = v34 | (32 * v23) | v86;
      v92 = -1958707200;
    }
    v93 = v91 | v92;
    if (v90 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v119, v75, v76, v77, v78, v79, v80, v81);
      v87 = v122;
      v89 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v89) = v93;
    v94 = *(_DWORD *)(a1 + 200);
    v95 = v94 + 4;
    *(_DWORD *)(a1 + 200) = v94 + 4;
    v96 = v34 & 0xFFFF83FF | ((v87 & 0x1F) << 10) | v85 | 0xA9020000;
    if ((v94 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v119, v75, v76, v77, v78, v79, v80, v81);
      v95 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v95) = v96;
    *(_DWORD *)(a1 + 200) += 4;
    v130 = v120;
    JSC::MacroAssembler::jump(a1, &v130, v76, v77, v78, v79, v80, v81);
    if (v121)
    {
      v123 = v73;
      v124 = v74;
      if (v73 == -1)
      {
LABEL_67:
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v133, a1, v97, v98, v99, v100, v101, v102);
        return;
      }
      v104 = (_DWORD *)(a6 + 12);
      v103 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v103 == *(_DWORD *)(a6 + 8))
      {
        v105 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v103 + 1), (unint64_t)&v123, v98, v99, v100, v101, v102);
        v106 = (_DWORD *)(*(_QWORD *)a6 + 12 * *(unsigned int *)(a6 + 12));
        *v106 = *(_DWORD *)v105;
        v107 = v106 + 1;
        v74 = *(_QWORD *)(v105 + 4);
      }
      else
      {
        v118 = (_DWORD *)(*(_QWORD *)a6 + 12 * v103);
        *v118 = v73;
        v107 = v118 + 1;
      }
      *v107 = v74;
    }
    else
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v134, a1, v97, v98, v99, v100, v101, v102);
      v109 = *(_DWORD *)(a1 + 200);
      if (v109 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v119, v108, v97, v98, v99, v100, v101, v102);
        v109 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v109) = v23 | 0x52800000;
      v110 = *(_DWORD *)(a1 + 200) + 4;
      for (*(_DWORD *)(a1 + 200) = v110; v110 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v110)
      {
        if ((v110 + 4) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v119, v108, v97, v98, v99, v100, v101, v102);
          v110 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v110) = -721215457;
        v110 = *(_DWORD *)(a1 + 200) + 4;
      }
      v111 = v110;
      if ((v110 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v119, v108, v97, v98, v99, v100, v101, v102);
        v111 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v111) = 335544320;
      *(_DWORD *)(a1 + 200) += 4;
      if (*(_BYTE *)(a1 + 328))
        v112 = 69;
      else
        v112 = 65;
      v125 = v110;
      v126 = 0;
      v127 = v112;
      v128 = 15;
      v129 = -1;
      if (v110 == -1)
        goto LABEL_67;
      v104 = (_DWORD *)(a6 + 12);
      v113 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v113 == *(_DWORD *)(a6 + 8))
      {
        v114 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v113 + 1), (unint64_t)&v125, v98, v99, v100, v101, v102);
        v116 = *v114;
        v115 = v114 + 1;
        v117 = *(_QWORD *)a6 + 12 * *(unsigned int *)(a6 + 12);
        *(_DWORD *)v117 = v116;
      }
      else
      {
        v115 = &v126;
        v117 = *(_QWORD *)a6 + 12 * v113;
        *(_DWORD *)v117 = v110;
      }
      *(_QWORD *)(v117 + 4) = *(_QWORD *)v115;
    }
    ++*v104;
    goto LABEL_67;
  }
  for (k = *(_DWORD *)(a1 + 200); k < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = k)
  {
    if ((k + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      k = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + k) = -721215457;
    k = *(_DWORD *)(a1 + 200) + 4;
  }
  v11 = k;
  if ((k + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v11) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v12 = 69;
  else
    v12 = 65;
  v136 = k;
  v137 = 0;
  v138 = v12;
  v139 = 15;
  v140 = -1;
  if (k != -1)
  {
    v13 = *(unsigned int *)(a6 + 12);
    if ((_DWORD)v13 == *(_DWORD *)(a6 + 8))
    {
      v14 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v13 + 1), (unint64_t)&v136, a4, a5, a6, a7, a8);
      v16 = *v14;
      v15 = v14 + 1;
      v17 = *(_QWORD *)a6 + 12 * *(unsigned int *)(a6 + 12);
      *(_DWORD *)v17 = v16;
    }
    else
    {
      v15 = &v137;
      v17 = *(_QWORD *)a6 + 12 * v13;
      *(_DWORD *)v17 = k;
    }
    *(_QWORD *)(v17 + 4) = *(_QWORD *)v15;
    ++*(_DWORD *)(a6 + 12);
  }
}

void JSC::AssemblyHelpers::emitAllocate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int *v22;
  int *v23;
  int v24;
  int i;
  unsigned int v26;
  char v27;
  uint64_t v28;
  int *v29;
  int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char v38;
  __int16 v39;
  char v40;

  if (*(_DWORD *)a3)
  {
    JSC::MacroAssemblerARM64::branchTest64(a1, 0, a4, 0xFFFFFFFFLL, a5, a6, a7, a8, (uint64_t)&v34, a9);
    v20 = v34;
    if (v34 != -1)
    {
      v21 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v21 == *(_DWORD *)(a6 + 8))
      {
        v22 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v21 + 1), (unint64_t)&v34, v16, v17, v18, v19, a8);
        v24 = *v22;
        v23 = v22 + 1;
        v20 = v24;
        LODWORD(v21) = *(_DWORD *)(a6 + 12);
      }
      else
      {
        v23 = &v35;
      }
      v33 = *(_QWORD *)a6 + 12 * v21;
      *(_DWORD *)v33 = v20;
      *(_QWORD *)(v33 + 4) = *(_QWORD *)v23;
      ++*(_DWORD *)(a6 + 12);
    }
    goto LABEL_17;
  }
  if (*(_QWORD *)(a3 + 8))
  {
LABEL_17:
    JSC::AssemblyHelpers::emitAllocateWithNonNullAllocator(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v26 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v26 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v27 = 69;
  else
    v27 = 65;
  v36 = i;
  v37 = 0;
  v38 = v27;
  v39 = 15;
  v40 = -1;
  if (i != -1)
  {
    v28 = *(unsigned int *)(a6 + 12);
    if ((_DWORD)v28 == *(_DWORD *)(a6 + 8))
    {
      v29 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a6, (void *)(v28 + 1), (unint64_t)&v36, a4, a5, a6, a7, a8);
      v31 = *v29;
      v30 = v29 + 1;
      v32 = *(_QWORD *)a6 + 12 * *(unsigned int *)(a6 + 12);
      *(_DWORD *)v32 = v31;
    }
    else
    {
      v30 = &v37;
      v32 = *(_QWORD *)a6 + 12 * v28;
      *(_DWORD *)v32 = i;
    }
    *(_QWORD *)(v32 + 4) = *(_QWORD *)v30;
    ++*(_DWORD *)(a6 + 12);
  }
}

void JSC::AssemblyHelpers::emitAllocateVariableSized(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v15;
  JSC::AssemblerBuffer *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  uint64_t v38;

  v15 = a5 | (32 * a4) | 0x11003C00;
  v16 = (JSC::AssemblerBuffer *)(a1 + 14);
  v17 = a1[50];
  if (v17 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v17 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v17) = v15;
  v18 = a1[50];
  v19 = v18 + 4;
  a1[50] = v18 + 4;
  if ((v18 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v16, a2, a3, a4, a5, a6, a7, a8);
    v19 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v19) = a5 & 0x1F | (32 * (a5 & 0x1F)) | 0x53047C00;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::branch32((uint64_t)a1, 8, a5, 502, a5, a6, a7, a8, (uint64_t)&v37);
  v25 = v37;
  if (v37 != -1)
  {
    v26 = *(unsigned int *)(a7 + 12);
    if ((_DWORD)v26 == *(_DWORD *)(a7 + 8))
    {
      v27 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a7, (void *)(v26 + 1), (unint64_t)&v37, v20, v21, v22, v23, v24);
      v29 = *v27;
      v28 = (uint64_t *)(v27 + 1);
      v25 = v29;
      LODWORD(v26) = *(_DWORD *)(a7 + 12);
    }
    else
    {
      v28 = &v38;
    }
    v30 = *(_QWORD *)a7 + 12 * v26;
    *(_DWORD *)v30 = v25;
    *(_QWORD *)(v30 + 4) = *v28;
    ++*(_DWORD *)(a7 + 12);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, a3 + 88, a6, v20, v21, v22, v23, v24);
  JSC::MacroAssemblerARM64::load64((uint64_t)a1, a6 | ((unint64_t)a5 << 8) | 0x300000000, 0x200000000uLL, a5, v31, v32, v33, v34);
  v36 = xmmword_199123080;
  JSC::AssemblyHelpers::emitAllocate((uint64_t)a1, a2, (uint64_t)&v36, a5, a6, a7, a8, v35, (int8x8_t)1);
}

void JSC::AssemblyHelpers::restoreCalleeSavesFromEntryFrameCalleeSavesBuffer(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unsigned int **v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD v26[2];
  char v27;
  _QWORD *v28;

  v10 = atomic_load(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag);
  if (v10 != -1)
  {
    v26[0] = &v27;
    v28 = v26;
    std::__call_once(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag, &v28, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::$_0 &&>>);
  }
  v11 = (unsigned int **)JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::result;
  if (*(_QWORD *)JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::result)
    v12 = **(_DWORD **)JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::result;
  else
    v12 = 0;
  if ((_BYTE)word_1ECF4C286)
    goto LABEL_30;
  while (1)
  {
    if (v12)
    {
      v13 = 0;
      v14 = *v11;
      v15 = **v11;
      while (1)
      {
        if (v15 == v13)
          goto LABEL_34;
        v16 = *(_QWORD *)&v14[2 * v13 + 2];
        if ((v16 & 0x7Fu) >= 0x40uLL)
          goto LABEL_29;
        v17 = v13 + 1;
        v18 = (v16 & 0x60) == 0 && ((1 << (v16 & 0x7F)) & 0xA0000000) == 0;
        if (v18 && v17 < v12)
        {
          if (v17 >= v15)
          {
            __break(0xC471u);
            JUMPOUT(0x1986E8B40);
          }
          v20 = *(_QWORD *)&v14[2 * v13 + 4];
          if ((v20 & 0x7Fu) >= 0x40uLL)
            goto LABEL_29;
          if ((v20 & 0x60) == 0
            && ((1 << (v20 & 0x7F)) & 0xA0000000) == 0
            && ((v20 >> 6) & 0xFFFFFFFFFFFFFFFCLL) == ((v16 >> 6) & 0xFFFFFFFFFFFFFFFCLL) + 8)
          {
            break;
          }
        }
        ++v13;
        if (v12 == v17)
          goto LABEL_29;
      }
      v26[1] = 0;
      if ((v16 & 0x40) == 0 && (v20 & 0x40) == 0)
        break;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [50]>((uint64_t)a1);
  }
  v21 = v16 & 0x7F;
  v26[0] = (1 << v16) | (1 << v20) | 0xA0000000;
  JSC::MacroAssemblerARM64::load64((uint64_t)a1, a2, v21, a4, a5, a6, a7, a8);
  JSC::AssemblyHelpers::restoreCalleeSavesFromVMEntryFrameCalleeSavesBufferImpl(a1, v21, v26);
  v25 = **v11;
  if (v25 <= v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1986E8B60);
  }
  if (v25 <= (int)v13 + 1)
  {
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x1986E8B20);
  }
  JSC::MacroAssemblerARM64::loadPair64(a1, v21, (*(_QWORD *)&(*v11)[2 * v13 + 2] >> 6) & 0xFFFFFFFCLL, v21, v20 & 0x7F, v22, v23, v24);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [50]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "restoreCalleeSavesFromEntryFrameCalleeSavesBuffer");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::AssemblyHelpers::restoreCalleeSavesFromVMEntryFrameCalleeSavesBufferImpl(char *a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unsigned __int8 v29;
  uint64_t v30;
  char v31;
  char **v32;

  v6 = vmEntryRecord(4096);
  JSC::MacroAssemblerARM64::add64((uint64_t)a1, (v6 - 4072), a2, a2, v7, v8, v9, v10);
  v16 = atomic_load(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag);
  if (v16 != -1)
  {
    v28 = &v31;
    v32 = &v28;
    std::__call_once(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag, &v32, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::$_0 &&>>);
  }
  v17 = (_QWORD *)JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::result;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [56]>((uint64_t)a1);
  if (!*v17)
    return;
  v18 = *(unsigned int *)*v17;
  v28 = a1;
  v29 = a2;
  v30 = 127;
  if (!(_DWORD)v18)
    return;
  v19 = 0;
  v20 = 127;
  do
  {
    if (v19 >= *(unsigned int *)*v17)
    {
      __break(0xC471u);
LABEL_22:
      __break(1u);
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1986E8EE0);
    }
    v21 = *(_QWORD *)(*v17 + 8 * v19 + 8);
    if ((v21 & 0x7Fu) >= 0x40uLL)
      goto LABEL_22;
    if (((*a3 >> (v21 & 0x7F)) & 1) == 0)
    {
      if ((v21 & 0x60) != 0)
        goto LABEL_24;
      v11 = v20 & 0x7F;
      if ((_DWORD)v11 == 127)
        goto LABEL_13;
      v22 = (v21 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
      v23 = v20 >> 6;
      v24 = (v20 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
      if (v22 == v24 + 8)
      {
        v25 = *(_QWORD *)(*v17 + 8 * v19 + 8) & 0x7FLL;
      }
      else
      {
        if (v24 != v22 + 8)
        {
          JSC::MacroAssemblerARM64::load64((uint64_t)a1, a2 | ((unint64_t)((unint64_t)v20 >> 8) << 34), v11, v11, v12, v13, v14, v15);
          goto LABEL_13;
        }
        v25 = v20 & 0x7F;
        v11 = *(_QWORD *)(*v17 + 8 * v19 + 8) & 0x7FLL;
        v23 = v21 >> 6;
      }
      JSC::MacroAssemblerARM64::loadPair64(a1, a2, v23 & 0xFFFFFFFC, v11, v25, v13, v14, v15);
      v21 = 127;
LABEL_13:
      v30 = v21;
      v20 = v21;
    }
    ++v19;
  }
  while (v18 != v19);
  LODWORD(v19) = v18;
LABEL_24:
  v26 = v20 & 0x7F;
  if ((_DWORD)v26 != 127)
  {
    JSC::MacroAssemblerARM64::load64((uint64_t)a1, a2 | ((unint64_t)((unint64_t)v20 >> 8) << 34), v26, v11, v12, v13, v14, v15);
    v20 = 127;
    v30 = 127;
  }
  if (v19 < v18)
  {
    v27 = v19;
    do
    {
      if (v27 >= *(unsigned int *)*v17)
        goto LABEL_37;
      v32 = *(char ***)(*v17 + 8 * v27 + 8);
      if ((v32 & 0x7Fu) >= 0x40uLL)
        goto LABEL_22;
      if (((*a3 >> (v32 & 0x7F)) & 1) == 0)
        JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&v28, (uint64_t *)&v32, v26, v11, v12, v13, v14, v15);
      ++v27;
    }
    while (v18 != v27);
    v20 = v30;
  }
  if ((v20 & 0x7F) != 0x7F)
    JSC::MacroAssemblerARM64::loadDouble((uint64_t)v28, v29 | ((unint64_t)((unint64_t)v20 >> 8) << 34), (char)((v20 & 0x7F) - 32), v11, v12, v13, v14, v15);
}

void JSC::AssemblyHelpers::restoreCalleeSavesFromVMEntryFrameCalleeSavesBuffer(char *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;

  JSC::MacroAssemblerARM64::load64((uint64_t)a1, a2 | 0x3000000000, a3, a4, a5, a6, a7, a8);
  v10 = xmmword_199156E40;
  JSC::AssemblyHelpers::restoreCalleeSavesFromVMEntryFrameCalleeSavesBufferImpl(a1, a3, &v10);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [56]>(uint64_t a1)
{
  WTF::AtomStringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  void (**v38)(WTF::StringPrintStream *__hidden);
  WTF *v39;
  __int128 v40;
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v38 = off_1E3572250;
    v39 = (WTF *)v41;
    v40 = xmmword_199122F80;
    v41[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v38, "%s", "restoreCalleeSavesFromVMEntryFrameCalleeSavesBufferImpl");
    v38[5]((WTF::StringPrintStream *)&v38);
    if (v39)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v39, v40, (uint64_t *)&v35);
      v9 = v35;
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 200);
    v36 = v10;
    v35 = 0;
    v37 = v9;
    v11 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 224))
    {
      v12 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v11 + 1, (unint64_t)&v36);
      v13 = *(unsigned int *)(a1 + 228);
      v14 = *(_QWORD *)(a1 + 216) + 16 * v13;
      *(_DWORD *)v14 = *(_DWORD *)v12;
      v15 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v14 + 8) = v15;
      v16 = v37;
      *(_DWORD *)(a1 + 228) = v13 + 1;
      v37 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::~StringImpl(v16, v2, v3, v4, v5, v6, v7, v8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 216) + 16 * v11;
      *(_DWORD *)v17 = v10;
      *(_QWORD *)(v17 + 8) = v9;
      *(_DWORD *)(a1 + 228) = v11 + 1;
    }
    v18 = v35;
    v35 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl(v18, v2, v3, v4, v5, v6, v7, v8);
        WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v39 != (WTF *)v41)
      WTF::fastFree((unint64_t)v39, v2, v3, v4, v5, v6, v7, v8);
  }
}

void JSC::AssemblyHelpers::emitVirtualCall(JSC::AssemblyHelpers *this, JSC::VM *a2, JSC::CallLinkInfo *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)a3, 2, a4, a5, a6, a7, a8);
  v11 = JSC::CallLinkInfo::callMode((JSC::CallLinkInfo *)*(unsigned __int16 *)((char *)a3 + 17));
  JSC::AssemblyHelpers::emitVirtualCallWithoutMovingGlobalObject((uint64_t)this, (uint64_t)a2, 2, v11, v12, v13, v14, v15);
}

void JSC::AssemblyHelpers::emitVirtualCallWithoutMovingGlobalObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  unsigned int v12;
  unsigned int *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::ExecutableMemoryHandle *v44;
  __int128 v45;
  uint64_t v46;

  if ((_DWORD)a3 != 2)
  {
    if ((_DWORD)a3 == 31)
    {
      v11 = -1862269982;
    }
    else if ((_DWORD)a3 == 63)
    {
      v11 = -763363326;
    }
    else
    {
      v11 = ((a3 & 0x1F) << 16) | 0xAA0003E2;
    }
    v13 = (unsigned int *)(a1 + 200);
    v12 = *(_DWORD *)(a1 + 200);
    v14 = (_QWORD *)(a1 + 56);
    if (v12 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v12 = *v13;
    }
    *(_DWORD *)(*v14 + v12) = v11;
    *v13 += 4;
  }
  JSC::VM::getCTIVirtualCall(a2, a4, a3, a4, a5, a6, a7, a8, &v43);
  v22 = v43;
  *(_DWORD *)(a1 + 208) = 0;
  v23 = *(_DWORD *)(a1 + 200);
  if (v23 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v15, v16, v17, v18, v19, v20, v21);
    v23 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v23) = -1811939328;
  v24 = (*(_DWORD *)(a1 + 200) + 4);
  *(_DWORD *)(a1 + 200) = v24;
  v25 = (_QWORD *)(a1 + 32);
  LOBYTE(v46) = -1;
  BYTE3(v46) = 15;
  *(_WORD *)((char *)&v46 + 1) = 65;
  *(_QWORD *)&v45 = v24 - 4;
  *((_QWORD *)&v45 + 1) = v22;
  WORD2(v46) = 384;
  v26 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v26 == *(_DWORD *)(a1 + 40))
  {
    v33 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v45, v17, v18, v19, v20, v21);
    v27 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
    *(_QWORD *)v27 = 0;
    *(_QWORD *)(v27 + 8) = 0;
    *(_BYTE *)(v27 + 16) = -1;
    v34 = (((*(unsigned __int8 *)(v27 + 19) >> 4) & 0xF) << 20) | 0xF0041;
    *(_WORD *)(v27 + 17) = 65;
    *(_BYTE *)(v27 + 19) = BYTE2(v34);
    *(_WORD *)(v27 + 20) &= 0xFC00u;
    v28 = *(_OWORD *)v33;
    v29 = *(_QWORD *)(v33 + 16);
  }
  else
  {
    v27 = *v25 + 24 * v26;
    v28 = v45;
    v29 = v46;
  }
  *(_QWORD *)(v27 + 16) = v29;
  *(_OWORD *)v27 = v28;
  ++*(_DWORD *)(a1 + 44);
  v30 = (unsigned int *)v44;
  v44 = 0;
  if (v30)
  {
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, v30));
    if (!v32)
    {
      atomic_store(1u, v30);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v30, v15, v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
  }
}

uint64_t JSC::CallLinkInfo::callMode(JSC::CallLinkInfo *this)
{
  int v1;
  uint64_t result;

  v1 = this >> 4;
  result = 0;
  switch(v1)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x1986E94BCLL);
    case 1:
    case 2:
    case 7:
      return result;
    case 3:
    case 4:
    case 8:
      result = 2;
      break;
    case 5:
    case 6:
    case 9:
      result = 1;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1986E949CLL);
  }
  return result;
}

void JSC::AssemblyHelpers::wangsInt64Hash(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  _QWORD *v14;
  int v15;
  int v16;
  unsigned int v17;
  JSC::AssemblerBuffer *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  int v90;
  JSC::AssemblerBuffer *v91;
  int v92;
  JSC::AssemblerBuffer *v93;
  int v94;
  int v95;
  uint64_t v96;
  JSC::AssemblerBuffer *v97;
  int v98;
  int v99;
  uint64_t v100;
  JSC::AssemblerBuffer *v101;
  JSC::AssemblerBuffer *v102;
  JSC::AssemblerBuffer *v103;
  JSC::AssemblerBuffer *v104;
  int v105;
  JSC::AssemblerBuffer *v106;
  JSC::AssemblerBuffer *v107;
  uint64_t v108;
  JSC::AssemblerBuffer *v109;
  JSC::AssemblerBuffer *v110;
  JSC::AssemblerBuffer *v111;
  int v112;
  JSC::AssemblerBuffer *v113;
  uint64_t v114;
  JSC::AssemblerBuffer *v115;
  int v116;
  int v117;
  uint64_t v118;
  JSC::AssemblerBuffer *v119;
  JSC::AssemblerBuffer *v120;
  JSC::AssemblerBuffer *v121;
  JSC::AssemblerBuffer *v122;
  JSC::AssemblerBuffer *v123;
  JSC::AssemblerBuffer *v124;
  JSC::AssemblerBuffer *v125;
  JSC::AssemblerBuffer *v126;
  JSC::AssemblerBuffer *v127;
  JSC::AssemblerBuffer *v128;
  JSC::AssemblerBuffer *v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;

  v8 = a3;
  v9 = a2;
  if ((_DWORD)a2 == (_DWORD)a3)
    goto LABEL_9;
  if ((_DWORD)a2 == 63)
  {
    if ((_DWORD)a3 != 31)
    {
      v11 = a3 & 0x1F | 0xD2800000;
      goto LABEL_6;
    }
LABEL_137:
    v11 = a3 | (32 * a2) | 0x91000000;
    goto LABEL_6;
  }
  if ((_DWORD)a2 == 31 || (_DWORD)a3 == 31)
    goto LABEL_137;
  v11 = a3 | ((a2 & 0x1F) << 16) | 0xAA0003E0;
LABEL_6:
  v13 = a1 + 50;
  v12 = a1[50];
  v14 = a1 + 14;
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = *v13;
  }
  *(_DWORD *)(*v14 + v12) = v11;
  *v13 += 4;
LABEL_9:
  v15 = v8 & 0x1F;
  v16 = v15 | (32 * v15);
  v17 = (v16 | 0xD348FC00) + 1540096;
  v18 = (JSC::AssemblerBuffer *)(a1 + 14);
  v19 = a1[50];
  if (v19 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v18, a2, a3, a4, a5, a6, a7, a8);
    v16 = v15 | (32 * v15);
    v18 = (JSC::AssemblerBuffer *)(a1 + 14);
    v19 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v19) = v17;
  v20 = a1[50];
  v21 = v20 + 4;
  a1[50] = v20 + 4;
  if ((v20 + 8) > a1[48])
  {
    v91 = v18;
    v92 = v16;
    JSC::AssemblerBuffer::outOfLineGrow(v18, a2, a3, a4, a5, a6, a7, a8);
    v16 = v92;
    v18 = v91;
    v21 = a1[50];
  }
  v22 = (v15 | (v15 << 16)) - 1440742432;
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v21) = v22;
  v23 = a1[50];
  v24 = v23 + 4;
  a1[50] = v23 + 4;
  v25 = v15 << 16;
  if (v8 == 31)
  {
    v26 = v9 | ((v9 & 0x1F) << 16) | 0x8B2063E0;
LABEL_16:
    if ((v23 + 8) <= a1[48])
      goto LABEL_17;
    goto LABEL_153;
  }
  if (v9 != 31)
  {
    v26 = v25 | (32 * (v9 & 0x1F)) | v9 & 0x1F | 0x8B000000;
    goto LABEL_16;
  }
  v26 = v25 | 0x8B2063FF;
  if ((v23 + 8) <= a1[48])
  {
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v24) = v26;
    v28 = a1[50] + 4;
    a1[50] = v28;
    goto LABEL_119;
  }
LABEL_153:
  v111 = v18;
  v112 = v16;
  JSC::AssemblerBuffer::outOfLineGrow(v18, v22, a3, a4, a5, a6, a7, a8);
  v22 = (v15 | (v15 << 16)) - 1440742432;
  v25 = v15 << 16;
  v16 = v112;
  v18 = v111;
  v24 = a1[50];
LABEL_17:
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v24) = v26;
  v27 = a1[50];
  v28 = v27 + 4;
  a1[50] = v27 + 4;
  if (v9 == v8)
    goto LABEL_26;
  if (v9 == 63)
  {
    if (v8 != 31)
    {
      v29 = v15 | 0xD2800000;
      goto LABEL_22;
    }
LABEL_119:
    v29 = v8 | (32 * v9) | 0x91000000;
    v30 = v28 + 4;
    goto LABEL_23;
  }
  if (v9 == 31 || v8 == 31)
    goto LABEL_119;
  v29 = v8 | ((v9 & 0x1F) << 16) | 0xAA0003E0;
LABEL_22:
  v30 = v27 + 8;
LABEL_23:
  if (v30 > a1[48])
  {
    v115 = v18;
    v116 = v16;
    v117 = v25;
    v118 = v22;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, a3, a4, a5, a6, a7, a8);
    v22 = v118;
    v25 = v117;
    v16 = v116;
    v18 = v115;
    v28 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v28) = v29;
  v28 = a1[50] + 4;
  a1[50] = v28;
LABEL_26:
  v31 = v8 & 0x1F | (32 * v8);
  if (v28 + 4 > a1[48])
  {
    v93 = v18;
    v94 = v16;
    v95 = v25;
    v96 = v22;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, a3, a4, a5, a6, a7, a8);
    v22 = v96;
    v25 = v95;
    v16 = v94;
    v18 = v93;
    v28 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v28) = v31 | 0xD356FC00;
  v32 = a1[50];
  v33 = v32 + 4;
  a1[50] = v32 + 4;
  if ((v32 + 8) > a1[48])
  {
    v97 = v18;
    v98 = v16;
    v99 = v25;
    v100 = v22;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, a3, a4, a5, a6, a7, a8);
    v22 = v100;
    v25 = v99;
    v16 = v98;
    v18 = v97;
    v33 = a1[50];
  }
  v34 = v8;
  v35 = v9 & 0x1F;
  v36 = v35 | (unsigned __int16)(32 * (v9 & 0x1F)) | ((v8 & 0x1F) << 16);
  v37 = v36 | 0xCA000000;
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v33) = v36 | 0xCA000000;
  v38 = a1[50];
  v39 = v38 + 4;
  a1[50] = v38 + 4;
  if (v9 != v8)
  {
    if (v9 == 63)
    {
      if (v8 != 31)
      {
        v40 = v15 | 0xD2800000;
        goto LABEL_35;
      }
    }
    else if (v9 != 31 && v8 != 31)
    {
      v40 = v8 | (v35 << 16) | 0xAA0003E0;
LABEL_35:
      if ((v38 + 8) > a1[48])
      {
        v128 = v18;
        v138 = v16;
        v154 = v22;
        v170 = v25;
        JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v8, a4, a5, a6, a7, a8);
        v25 = v170;
        v34 = v8;
        v16 = v138;
        v22 = v154;
        v18 = v128;
        v39 = a1[50];
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v39) = v40;
      v39 = a1[50] + 4;
      a1[50] = v39;
      goto LABEL_38;
    }
    v40 = v8 | (32 * v9) | 0x91000000;
    goto LABEL_35;
  }
LABEL_38:
  v41 = v16 | 0xD373C800;
  if (v39 + 4 > a1[48])
  {
    v125 = v18;
    v130 = v16;
    v145 = v22;
    v161 = v25;
    v177 = v34;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v25 = v161;
    v34 = v177;
    v16 = v130;
    v22 = v145;
    v18 = v125;
    v39 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v39) = v41;
  v42 = a1[50];
  v43 = v42 + 4;
  a1[50] = v42 + 4;
  if ((v42 + 8) > a1[48])
  {
    v101 = v18;
    v131 = v16;
    v146 = v22;
    v162 = v25;
    v178 = v34;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v25 = v162;
    v34 = v178;
    v16 = v131;
    v22 = v146;
    v18 = v101;
    v43 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v43) = v22;
  v44 = a1[50];
  v45 = v44 + 4;
  a1[50] = v44 + 4;
  if (v8 == 31)
  {
    v48 = v9 | (v35 << 16) | 0x8B2063E0;
    v46 = v44 + 8;
    v47 = a1[48];
LABEL_45:
    if (v46 <= v47)
      goto LABEL_46;
    goto LABEL_154;
  }
  v46 = v44 + 8;
  v47 = a1[48];
  if (v9 != 31)
  {
    v48 = v36 | 0x8B000000;
    goto LABEL_45;
  }
  v48 = v25 | 0x8B2063FF;
  if (v46 <= v47)
  {
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v45) = v48;
    v50 = a1[50] + 4;
    a1[50] = v50;
    goto LABEL_122;
  }
LABEL_154:
  v127 = v18;
  v137 = v16;
  v153 = v22;
  v169 = v25;
  v186 = v34;
  JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
  v25 = v169;
  v34 = v186;
  v16 = v137;
  v22 = v153;
  v18 = v127;
  v45 = a1[50];
LABEL_46:
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v45) = v48;
  v49 = a1[50];
  v50 = v49 + 4;
  a1[50] = v49 + 4;
  if (v9 == v8)
    goto LABEL_55;
  if (v9 == 63)
  {
    if (v8 != 31)
    {
      v51 = v15 | 0xD2800000;
      goto LABEL_51;
    }
LABEL_122:
    v51 = v8 | (32 * v9) | 0x91000000;
    v52 = v50 + 4;
    goto LABEL_52;
  }
  if (v9 == 31 || v8 == 31)
    goto LABEL_122;
  v51 = v34 | (v35 << 16) | 0xAA0003E0;
LABEL_51:
  v52 = v49 + 8;
LABEL_52:
  if (v52 > a1[48])
  {
    v171 = v25;
    v187 = v34;
    v139 = v16;
    v155 = v22;
    v129 = v18;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v25 = v171;
    v34 = v187;
    v16 = v139;
    v22 = v155;
    v18 = v129;
    v50 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v50) = v51;
  v50 = a1[50] + 4;
  a1[50] = v50;
LABEL_55:
  if (v50 + 4 > a1[48])
  {
    v126 = v18;
    v132 = v16;
    v147 = v22;
    v163 = v25;
    v179 = v34;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v25 = v163;
    v34 = v179;
    v16 = v132;
    v22 = v147;
    v18 = v126;
    v50 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v50) = v31 | 0xD348FC00;
  v53 = a1[50];
  v54 = v53 + 4;
  a1[50] = v53 + 4;
  if ((v53 + 8) > a1[48])
  {
    v102 = v18;
    v133 = v16;
    v148 = v22;
    v164 = v25;
    v180 = v34;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v25 = v164;
    v34 = v180;
    v16 = v133;
    v22 = v148;
    v18 = v102;
    v54 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v54) = v37;
  v55 = a1[50];
  v56 = v55 + 4;
  a1[50] = v55 + 4;
  if (v9 != v8)
  {
    if (v9 == 63)
    {
      if (v8 != 31)
      {
        v57 = v15 | 0xD2800000;
        goto LABEL_64;
      }
    }
    else if (v9 != 31 && v8 != 31)
    {
      v57 = v34 | (v35 << 16) | 0xAA0003E0;
      goto LABEL_64;
    }
    v57 = v8 | (32 * v9) | 0x91000000;
LABEL_64:
    if ((v55 + 8) > a1[48])
    {
      v119 = v18;
      v140 = v16;
      v156 = v22;
      v172 = v25;
      v188 = v34;
      JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
      v25 = v172;
      v34 = v188;
      v16 = v140;
      v22 = v156;
      v18 = v119;
      v56 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v56) = v57;
    v58 = a1[50];
    v59 = v58 + 4;
    a1[50] = v58 + 4;
    v60 = v16 | 0xD37DF000;
    if ((v58 + 8) > a1[48])
    {
      v120 = v18;
      v141 = v16;
      v157 = v22;
      v173 = v25;
      v189 = v34;
      JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
      v25 = v173;
      v34 = v189;
      v16 = v141;
      v22 = v157;
      v18 = v120;
      v59 = a1[50];
    }
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v59) = v60;
    v61 = a1[50];
    v62 = v61 + 4;
    a1[50] = v61 + 4;
    if (v8 == 31)
    {
      v65 = v9 | (v35 << 16) | 0x8B2063E0;
      v63 = v61 + 8;
      v64 = a1[48];
    }
    else
    {
      v63 = v61 + 8;
      v64 = a1[48];
      if (v9 != 31)
      {
        v65 = v36 | 0x8B000000;
        if (v63 <= v64)
        {
          *(_DWORD *)(*((_QWORD *)a1 + 7) + v62) = v65;
          v66 = a1[50] + 4;
          a1[50] = v66;
          if (v9 != 63)
          {
LABEL_72:
            if (v9 != 31 && v8 != 31)
            {
              v67 = v34 | (v35 << 16) | 0xAA0003E0;
LABEL_75:
              v68 = v66 + 4;
              goto LABEL_76;
            }
LABEL_129:
            v67 = v8 | (32 * v9) | 0x91000000;
            goto LABEL_75;
          }
          goto LABEL_159;
        }
LABEL_156:
        v175 = v25;
        v191 = v34;
        v143 = v16;
        v159 = v22;
        v123 = v18;
        JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
        *(_DWORD *)(*((_QWORD *)a1 + 7) + a1[50]) = v65;
        v66 = a1[50] + 4;
        a1[50] = v66;
        if (v9 != 63)
        {
          v18 = v123;
          v16 = v143;
          v22 = v159;
          v25 = v175;
          v34 = v191;
          goto LABEL_72;
        }
        v18 = v123;
        v16 = v143;
        v22 = v159;
        v25 = v175;
        v34 = v191;
        if (v8 == 31)
          goto LABEL_129;
LABEL_159:
        v67 = v15 | 0xD2800000;
        goto LABEL_75;
      }
      v65 = v25 | 0x8B2063FF;
    }
    if (v63 <= v64)
    {
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v62) = v65;
      v66 = a1[50] + 4;
      a1[50] = v66;
      goto LABEL_129;
    }
    goto LABEL_156;
  }
  if ((v55 + 8) > a1[48])
  {
    v124 = v18;
    v144 = v16;
    v160 = v22;
    v176 = v25;
    v192 = v34;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v25 = v176;
    v34 = v192;
    v16 = v144;
    v22 = v160;
    v18 = v124;
    v56 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v56) = v35 | (32 * v35) | 0xD37DF000;
  v90 = a1[50];
  v66 = v90 + 4;
  a1[50] = v90 + 4;
  if (v9 == 31)
    v67 = -1958779905;
  else
    v67 = (65569 * v35) | 0x8B000000;
  v68 = v90 + 8;
LABEL_76:
  if (v68 > a1[48])
  {
    v168 = v25;
    v185 = v34;
    v136 = v16;
    v152 = v22;
    v110 = v18;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v25 = v168;
    v34 = v185;
    v16 = v136;
    v22 = v152;
    v18 = v110;
    v66 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v66) = v67;
  v69 = a1[50];
  v70 = v69 + 4;
  a1[50] = v69 + 4;
  if ((v69 + 8) > a1[48])
  {
    v103 = v18;
    v134 = v16;
    v149 = v22;
    v165 = v25;
    v181 = v34;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v25 = v165;
    v34 = v181;
    v16 = v134;
    v22 = v149;
    v18 = v103;
    v70 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v70) = v31 | 0xD34FFC00;
  v71 = a1[50];
  v72 = v71 + 4;
  a1[50] = v71 + 4;
  if ((v71 + 8) > a1[48])
  {
    v104 = v18;
    v135 = v16;
    v150 = v22;
    v105 = v25;
    v182 = v34;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v34 = v182;
    v16 = v135;
    v22 = v150;
    v25 = v105;
    v18 = v104;
    v72 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v72) = v37;
  v73 = a1[50];
  v74 = v73 + 4;
  a1[50] = v73 + 4;
  if (v9 != v8)
  {
    if (v9 == 63)
    {
      if (v8 != 31)
      {
        v75 = v15 | 0xD2800000;
        goto LABEL_87;
      }
    }
    else if (v9 != 31 && v8 != 31)
    {
      v75 = v34 | (v35 << 16) | 0xAA0003E0;
LABEL_87:
      if ((v73 + 8) > a1[48])
      {
        v121 = v18;
        v142 = v16;
        v158 = v22;
        v174 = v25;
        v190 = v34;
        JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
        v25 = v174;
        v34 = v190;
        v16 = v142;
        v22 = v158;
        v18 = v121;
        v74 = a1[50];
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v74) = v75;
      v74 = a1[50] + 4;
      a1[50] = v74;
      goto LABEL_90;
    }
    v75 = v8 | (32 * v9) | 0x91000000;
    goto LABEL_87;
  }
LABEL_90:
  v76 = v16 | 0xD3659000;
  if (v74 + 4 > a1[48])
  {
    v106 = v18;
    v151 = v22;
    v166 = v25;
    v183 = v34;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v25 = v166;
    v34 = v183;
    v22 = v151;
    v18 = v106;
    v74 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v74) = v76;
  v77 = a1[50];
  v78 = v77 + 4;
  a1[50] = v77 + 4;
  if ((v77 + 8) > a1[48])
  {
    v107 = v18;
    v167 = v25;
    v184 = v34;
    v108 = v22;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v25 = v167;
    v34 = v184;
    v22 = v108;
    v18 = v107;
    v78 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v78) = v22;
  v79 = a1[50];
  v80 = v79 + 4;
  a1[50] = v79 + 4;
  if (v8 == 31)
  {
    v83 = v9 | (v35 << 16) | 0x8B2063E0;
    v81 = v79 + 8;
    v82 = a1[48];
LABEL_97:
    if (v81 <= v82)
      goto LABEL_98;
    goto LABEL_155;
  }
  v81 = v79 + 8;
  v82 = a1[48];
  if (v9 != 31)
  {
    v83 = v36 | 0x8B000000;
    goto LABEL_97;
  }
  v83 = v25 | 0x8B2063FF;
  if (v81 <= v82)
  {
    *(_DWORD *)(*((_QWORD *)a1 + 7) + v80) = v83;
    v85 = a1[50] + 4;
    a1[50] = v85;
    goto LABEL_125;
  }
LABEL_155:
  v113 = v18;
  v114 = v34;
  JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
  v34 = v114;
  v18 = v113;
  v80 = a1[50];
LABEL_98:
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v80) = v83;
  v84 = a1[50];
  v85 = v84 + 4;
  a1[50] = v84 + 4;
  if (v9 == v8)
    goto LABEL_107;
  if (v9 == 63)
  {
    if (v8 != 31)
    {
      v86 = v15 | 0xD2800000;
      goto LABEL_103;
    }
LABEL_125:
    v86 = v8 | (32 * v9) | 0x91000000;
    v87 = v85 + 4;
    goto LABEL_104;
  }
  if (v9 == 31 || v8 == 31)
    goto LABEL_125;
  v86 = v34 | (v35 << 16) | 0xAA0003E0;
LABEL_103:
  v87 = v84 + 8;
LABEL_104:
  if (v87 > a1[48])
  {
    v122 = v18;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v18 = v122;
    v85 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v85) = v86;
  v85 = a1[50] + 4;
  a1[50] = v85;
LABEL_107:
  if (v85 + 4 > a1[48])
  {
    v109 = v18;
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v18 = v109;
    v85 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v85) = v31 | 0xD35FFC00;
  v88 = a1[50];
  v89 = v88 + 4;
  a1[50] = v88 + 4;
  if ((v88 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v18, v22, v34, a4, a5, a6, a7, a8);
    v89 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v89) = v37;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::and64((uint64_t)a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v9);
}

void JSC::AssemblyHelpers::emitConvertValueToBoolean(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int j;
  unsigned int v50;
  char v51;
  int *v52;
  int *v53;
  int v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  char v76;
  int *v77;
  int *v78;
  int v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int k;
  unsigned int v97;
  char v98;
  int *v99;
  int *v100;
  int v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int m;
  unsigned int v119;
  char v120;
  int *v121;
  int *v122;
  int v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  _DWORD *v149;
  uint64_t *v150;
  int v151;
  _BYTE *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int n;
  unsigned int v161;
  char v162;
  int *v163;
  int *v164;
  int v165;
  _BYTE *v166;
  void *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  int v177;
  int v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int8x8_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  unsigned int v195;
  _DWORD *v196;
  uint64_t *v197;
  int v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  unsigned int v223;
  int *v224;
  int *v225;
  int v226;
  char *v227;
  void *v228;
  uint64_t v229;
  int i;
  unsigned int v231;
  char v232;
  int *v233;
  int *v234;
  int v235;
  _BYTE *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  WTF *v240;
  JSC::AssemblerBuffer *v242;
  JSC::AssemblerBuffer *v243;
  unsigned int v244;
  int v245;
  int v246;
  char v247;
  __int16 v248;
  char v249;
  int v250;
  uint64_t v251;
  unsigned int v252[3];
  int v253;
  int v254;
  char v255;
  __int16 v256;
  char v257;
  int v258;
  int v259;
  char v260;
  __int16 v261;
  char v262;
  int v263;
  int v264;
  char v265;
  __int16 v266;
  char v267;
  int v268;
  int v269;
  char v270;
  __int16 v271;
  char v272;
  int v273;
  int v274;
  char v275;
  __int16 v276;
  char v277;
  int v278;
  int v279;
  int v280;
  uint64_t v281;
  WTF *v282;
  uint64_t v283;
  _BYTE v284[28];
  unsigned int v285[3];
  unsigned int v286[3];
  unsigned int v287[3];
  _BYTE *v288;
  uint64_t v289;
  _BYTE v290[32];

  v10 = a8;
  v11 = a7;
  v12 = a6;
  v288 = v290;
  v289 = 2;
  v18 = a3;
  JSC::AssemblyHelpers::branchIfNotCell(a1, a3, 1, a4, a5, a6, a7, a8, (uint64_t)v287);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_156;
  }
  v244 = v11;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v18 | 0x500000000, *(char *)(a1 + 304), v19, v20, v21, v22, v23);
  JSC::MacroAssemblerARM64::branch32(a1, 0, 17, 2, v24, v25, v26, v27, (uint64_t)v286);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986EAFCCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v18 | 0x500000000, *(char *)(a1 + 304), v28, v29, v30, v31, v32);
  JSC::MacroAssemblerARM64::branch32(a1, 0, 17, 3, v33, v34, v35, v36, (uint64_t)v285);
  if (v10)
  {
    v282 = (WTF *)v284;
    v283 = 2;
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986EB1A8);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, v18 | 0x600000000, *(char *)(a1 + 304), v37, v38, v39, v40, v41);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1, 0, 17, v184, v185, v186, v187, (uint64_t)&v280, v188);
    v194 = v280;
    if (v280 != -1)
    {
      v195 = HIDWORD(v283);
      if (HIDWORD(v283) == (_DWORD)v283)
      {
        v196 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v282, (void *)(HIDWORD(v283) + 1), (unint64_t)&v280, v189, v190, v191, v192, v193);
        v198 = *v196;
        v197 = (uint64_t *)(v196 + 1);
        v194 = v198;
        v195 = HIDWORD(v283);
      }
      else
      {
        v197 = &v281;
      }
      v199 = (char *)v282 + 12 * v195;
      *(_DWORD *)v199 = v194;
      *(_QWORD *)(v199 + 4) = *v197;
      ++HIDWORD(v283);
    }
    JSC::MacroAssemblerARM64::load32(a1, v18, a4, v189, v190, v191, v192, v193);
    v242 = (JSC::AssemblerBuffer *)(a1 + 56);
    v207 = *(_DWORD *)(a1 + 200);
    if (v207 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v242, v200, v201, v202, v203, v204, v205, v206);
      v207 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v207) = a4 & 0x1F | (32 * (a4 & 0x1F)) | 0xD37CEC00;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a9, a5, v202, v203, v204, v205, v206);
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986EB1D8);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a4 | 0x2800000000, *(char *)(a1 + 304), v208, v209, v210, v211, v212);
    JSC::MacroAssemblerARM64::branch64(a1, 1, 17, a5, v213, v214, v215, v216, (uint64_t)&v278);
    v222 = v278;
    if (v278 != -1)
    {
      v223 = HIDWORD(v283);
      if (HIDWORD(v283) == (_DWORD)v283)
      {
        v224 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v282, (void *)(HIDWORD(v283) + 1), (unint64_t)&v278, v217, v218, v219, v220, v221);
        v226 = *v224;
        v225 = v224 + 1;
        v222 = v226;
        v223 = HIDWORD(v283);
      }
      else
      {
        v225 = &v279;
      }
      v227 = (char *)v282 + 12 * v223;
      *(_DWORD *)v227 = v222;
      *(_QWORD *)(v227 + 4) = *(_QWORD *)v225;
      ++HIDWORD(v283);
    }
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a10, a4, v217, v218, v219, v220, v221);
    for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
    {
      if ((i + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v242, (uint64_t)v228, v229, v37, v38, v39, v40, v41);
        i = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
      i = *(_DWORD *)(a1 + 200) + 4;
    }
    v231 = i;
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v242, (uint64_t)v228, v229, v37, v38, v39, v40, v41);
      v231 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v231) = 335544320;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v232 = 69;
    else
      v232 = 65;
    v273 = i;
    v274 = 0;
    v275 = v232;
    v276 = 15;
    v277 = -1;
    if (i != -1)
    {
      if (HIDWORD(v289) == (_DWORD)v289)
      {
        v233 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v288, (void *)(HIDWORD(v289) + 1), (unint64_t)&v273, v37, v38, v39, v40, v41);
        v235 = *v233;
        v234 = v233 + 1;
        v236 = &v288[12 * HIDWORD(v289)];
        *(_DWORD *)v236 = v235;
      }
      else
      {
        v234 = &v274;
        v236 = &v288[12 * HIDWORD(v289)];
        *(_DWORD *)v236 = i;
      }
      *(_QWORD *)(v236 + 4) = *(_QWORD *)v234;
      ++HIDWORD(v289);
    }
    if (!HIDWORD(v283))
    {
LABEL_119:
      v240 = v282;
      if (v284 != (_BYTE *)v282 && v282 != 0)
      {
        v282 = 0;
        LODWORD(v283) = 0;
        WTF::fastFree((unint64_t)v240, v228, v229, v37, v38, v39, v40, v41);
      }
      v12 = v12;
      goto LABEL_4;
    }
    v237 = 0;
    v238 = 0;
    v239 = 12 * HIDWORD(v283);
    while (v238 < HIDWORD(v283))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v282 + v237), a1, v229, v37, v38, v39, v40, v41);
      ++v238;
      v237 += 12;
      if (v239 == v237)
        goto LABEL_119;
    }
    __break(0xC471u);
LABEL_156:
    JUMPOUT(0x1986EAFACLL);
  }
LABEL_4:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(a10 ^ 1u), a4, v37, v38, v39, v40, v41);
  v243 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v243, v42, v43, v44, v45, v46, v47, v48);
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
    j = *(_DWORD *)(a1 + 200) + 4;
  }
  v50 = j;
  if ((j + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v243, v42, v43, v44, v45, v46, v47, v48);
    v50 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v50) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v51 = 69;
  else
    v51 = 65;
  v268 = j;
  v269 = 0;
  v270 = v51;
  v271 = 15;
  v272 = -1;
  if (j != -1)
  {
    if (HIDWORD(v289) == (_DWORD)v289)
    {
      v52 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v288, (void *)(HIDWORD(v289) + 1), (unint64_t)&v268, v44, v45, v46, v47, v48);
      v54 = *v52;
      v53 = v52 + 1;
      v55 = &v288[12 * HIDWORD(v289)];
      *(_DWORD *)v55 = v54;
    }
    else
    {
      v53 = &v269;
      v55 = &v288[12 * HIDWORD(v289)];
      *(_DWORD *)v55 = j;
    }
    *(_QWORD *)(v55 + 4) = *(_QWORD *)v53;
    ++HIDWORD(v289);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v286, a1, v43, v44, v45, v46, v47, v48);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)(a2 + 41968), a4, v56, v57, v58, v59, v60);
  v68 = a4 & 0x1F;
  v69 = v68 << 16;
  if (a3 == 31)
  {
    JSC::AssemblerBuffer::putInt(v243, v69 | 0xEB2063FF, v62, v63, v64, v65, v66, v67);
    v72 = *(_DWORD *)(a1 + 200);
  }
  else
  {
    v70 = v69 | (32 * (a3 & 0x1F)) | 0xEB00001F;
    v71 = *(_DWORD *)(a1 + 200);
    if (v71 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v243, v61, v62, v63, v64, v65, v66, v67);
      v71 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v71) = v70;
    v72 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v72;
  }
  if (v72 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v243, v61, v62, v63, v64, v65, v66, v67);
    v72 = *(_DWORD *)(a1 + 200);
  }
  if (a10)
    v73 = 0;
  else
    v73 = 4096;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v72) = (v73 | v68) ^ 0x1A9F17E0;
  v74 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v74; v74 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v74)
  {
    if ((v74 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v243, v61, v62, v63, v64, v65, v66, v67);
      v74 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v74) = -721215457;
    v74 = *(_DWORD *)(a1 + 200) + 4;
  }
  v75 = v74;
  if ((v74 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v243, v61, v62, v63, v64, v65, v66, v67);
    v75 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v75) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v76 = 69;
  else
    v76 = 65;
  v263 = v74;
  v264 = 0;
  v265 = v76;
  v266 = 15;
  v267 = -1;
  if (v74 != -1)
  {
    if (HIDWORD(v289) == (_DWORD)v289)
    {
      v77 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v288, (void *)(HIDWORD(v289) + 1), (unint64_t)&v263, v63, v64, v65, v66, v67);
      v79 = *v77;
      v78 = v77 + 1;
      v80 = &v288[12 * HIDWORD(v289)];
      *(_DWORD *)v80 = v79;
    }
    else
    {
      v78 = &v264;
      v80 = &v288[12 * HIDWORD(v289)];
      *(_DWORD *)v80 = v74;
    }
    *(_QWORD *)(v80 + 4) = *(_QWORD *)v78;
    ++HIDWORD(v289);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v285, a1, v62, v63, v64, v65, v66, v67);
  JSC::MacroAssemblerARM64::load32(a1, v18 | 0x800000000, a4, v81, v82, v83, v84, v85);
  JSC::MacroAssemblerARM64::compare32(a1, a10 ^ 1u, a4, 0, a4, v86, v87, v88);
  for (k = *(_DWORD *)(a1 + 200); k < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = k)
  {
    if ((k + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v243, v89, v90, v91, v92, v93, v94, v95);
      k = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + k) = -721215457;
    k = *(_DWORD *)(a1 + 200) + 4;
  }
  v97 = k;
  if ((k + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v243, v89, v90, v91, v92, v93, v94, v95);
    v97 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v97) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v98 = 69;
  else
    v98 = 65;
  v258 = k;
  v259 = 0;
  v260 = v98;
  v261 = 15;
  v262 = -1;
  if (k != -1)
  {
    if (HIDWORD(v289) == (_DWORD)v289)
    {
      v99 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v288, (void *)(HIDWORD(v289) + 1), (unint64_t)&v258, v91, v92, v93, v94, v95);
      v101 = *v99;
      v100 = v99 + 1;
      v102 = &v288[12 * HIDWORD(v289)];
      *(_DWORD *)v102 = v101;
    }
    else
    {
      v100 = &v259;
      v102 = &v288[12 * HIDWORD(v289)];
      *(_DWORD *)v102 = k;
    }
    *(_QWORD *)(v102 + 4) = *(_QWORD *)v100;
    ++HIDWORD(v289);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v287, a1, v90, v91, v92, v93, v94, v95);
  v103 = (char)a3;
  JSC::MacroAssemblerARM64::branch64(a1, 3, v103, 27, v104, v105, v106, v107, (uint64_t)&v282);
  JSC::MacroAssemblerARM64::compare32(a1, a10 ^ 1u, v103, 0, a4, v108, v109, v110);
  for (m = *(_DWORD *)(a1 + 200); m < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = m)
  {
    if ((m + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v243, v111, v112, v113, v114, v115, v116, v117);
      m = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + m) = -721215457;
    m = *(_DWORD *)(a1 + 200) + 4;
  }
  v119 = m;
  if ((m + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v243, v111, v112, v113, v114, v115, v116, v117);
    v119 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v119) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v120 = 69;
  else
    v120 = 65;
  v253 = m;
  v254 = 0;
  v255 = v120;
  v256 = 15;
  v257 = -1;
  if (m != -1)
  {
    if (HIDWORD(v289) == (_DWORD)v289)
    {
      v121 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v288, (void *)(HIDWORD(v289) + 1), (unint64_t)&v253, v113, v114, v115, v116, v117);
      v123 = *v121;
      v122 = v121 + 1;
      v124 = &v288[12 * HIDWORD(v289)];
      *(_DWORD *)v124 = v123;
    }
    else
    {
      v122 = &v254;
      v124 = &v288[12 * HIDWORD(v289)];
      *(_DWORD *)v124 = m;
    }
    *(_QWORD *)(v124 + 4) = *(_QWORD *)v122;
    ++HIDWORD(v289);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v282, a1, v112, v113, v114, v115, v116, v117);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, v103, 27, v125, v126, v127, v128, (uint64_t)v252);
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a1, v103, a4, v12, 1, v129, v130, v131);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a10, a4, v132, v133, v134, v135, v136);
  JSC::MacroAssemblerARM64::branchDoubleZeroOrNaN(a1, v12, v244, v137, v138, v139, v140, v141, (uint64_t)&v250);
  v147 = v250;
  if (v250 != -1)
  {
    v148 = HIDWORD(v289);
    if (HIDWORD(v289) == (_DWORD)v289)
    {
      v149 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v288, (void *)(HIDWORD(v289) + 1), (unint64_t)&v250, v142, v143, v144, v145, v146);
      v151 = *v149;
      v150 = (uint64_t *)(v149 + 1);
      v147 = v151;
      v148 = HIDWORD(v289);
    }
    else
    {
      v150 = &v251;
    }
    v152 = &v288[12 * v148];
    *(_DWORD *)v152 = v147;
    *(_QWORD *)(v152 + 4) = *v150;
    ++HIDWORD(v289);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)(a10 ^ 1u), a4, v142, v143, v144, v145, v146);
  for (n = *(_DWORD *)(a1 + 200); n < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = n)
  {
    if ((n + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v243, v153, v154, v155, v156, v157, v158, v159);
      n = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + n) = -721215457;
    n = *(_DWORD *)(a1 + 200) + 4;
  }
  v161 = n;
  if ((n + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v243, v153, v154, v155, v156, v157, v158, v159);
    v161 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v161) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v162 = 69;
  else
    v162 = 65;
  v245 = n;
  v246 = 0;
  v247 = v162;
  v248 = 15;
  v249 = -1;
  if (n != -1)
  {
    if (HIDWORD(v289) == (_DWORD)v289)
    {
      v163 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v288, (void *)(HIDWORD(v289) + 1), (unint64_t)&v245, v155, v156, v157, v158, v159);
      v165 = *v163;
      v164 = v163 + 1;
      v166 = &v288[12 * HIDWORD(v289)];
      *(_DWORD *)v166 = v165;
    }
    else
    {
      v164 = &v246;
      v166 = &v288[12 * HIDWORD(v289)];
      *(_DWORD *)v166 = n;
    }
    *(_QWORD *)(v166 + 4) = *(_QWORD *)v164;
    ++HIDWORD(v289);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v252, a1, v154, v155, v156, v157, v158, v159);
  v174 = *(_DWORD *)(a1 + 200);
  if (v174 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v243, (uint64_t)v167, v168, v169, v170, v171, v172, v173);
    v174 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v174) = (32 * v103) | 0xF1001C1F;
  v175 = *(_DWORD *)(a1 + 200);
  v176 = v175 + 4;
  *(_DWORD *)(a1 + 200) = v175 + 4;
  if (a10)
    v177 = 4096;
  else
    v177 = 0;
  v178 = v177 | v68;
  if ((v175 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v243, (uint64_t)v167, v168, v169, v170, v171, v172, v173);
    v176 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v176) = v178 ^ 0x1A9F17E0;
  *(_DWORD *)(a1 + 200) += 4;
  if (HIDWORD(v289))
  {
    v179 = 0;
    v180 = 0;
    v181 = 12 * HIDWORD(v289);
    do
    {
      if (v180 >= HIDWORD(v289))
      {
        __break(0xC471u);
        JUMPOUT(0x1986EB2B0);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v288[v179], a1, v168, v169, v170, v171, v172, v173);
      ++v180;
      v179 += 12;
    }
    while (v181 != v179);
  }
  v182 = (unint64_t)v288;
  if (v290 != v288 && v288 != 0)
  {
    v288 = 0;
    LODWORD(v289) = 0;
    WTF::fastFree(v182, v167, v168, v169, v170, v171, v172, v173);
  }
}

void JSC::AssemblyHelpers::branchIfValue(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, int a11, int a12, unsigned __int8 a13)
{
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t i;
  unsigned int v51;
  char v52;
  uint64_t v53;
  int *v54;
  int *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int8x8_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  _DWORD *v70;
  uint64_t *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  int j;
  unsigned int v93;
  char v94;
  int *v95;
  int *v96;
  int v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int8x8_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t *v119;
  int v120;
  uint64_t v121;
  int k;
  unsigned int v123;
  char v124;
  int *v125;
  int *v126;
  int v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int8x8_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  _DWORD *v147;
  uint64_t *v148;
  int v149;
  uint64_t v150;
  int m;
  unsigned int v152;
  char v153;
  int *v154;
  int *v155;
  int v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  int *v179;
  int *v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  int *v185;
  int *v186;
  int v187;
  _BYTE *v188;
  int ii;
  unsigned int v190;
  char v191;
  uint64_t v192;
  int *v193;
  int *v194;
  int v195;
  int *v196;
  _QWORD *v197;
  _DWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int *v212;
  int *v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  _BYTE *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  int v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  int v237;
  int v238;
  int *v239;
  int *v240;
  int v241;
  _BYTE *v242;
  int v243;
  int v244;
  unsigned int v245;
  char v246;
  uint64_t v247;
  int *v248;
  int *v249;
  int v250;
  int *v251;
  _QWORD *v252;
  unsigned int v253;
  char v254;
  int *v255;
  int v256;
  int *v257;
  uint64_t v258;
  int n;
  unsigned int v260;
  char v261;
  int *v262;
  int v263;
  int *v264;
  _DWORD *v265;
  unint64_t v266;
  unsigned int v267;
  int v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  _BYTE *v272;
  int v273;
  _BYTE *v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  _BYTE *v281;
  _BYTE *v282;
  unint64_t v283;
  _DWORD *v284;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  int v303;
  JSC::AssemblerBuffer *v304;
  unsigned int v305;
  unsigned __int8 v306;
  unsigned int v307;
  int v310;
  int v311;
  int v312;
  int v313;
  char v314;
  __int16 v315;
  char v316;
  int v317;
  int v318;
  int v319;
  int v320;
  char v321;
  __int16 v322;
  char v323;
  int v324;
  int v325;
  unsigned int v326[3];
  int v327;
  int v328;
  char v329;
  __int16 v330;
  char v331;
  int v332;
  uint64_t v333;
  int v334;
  int v335;
  char v336;
  __int16 v337;
  char v338;
  int v339;
  uint64_t v340;
  int v341;
  int v342;
  char v343;
  __int16 v344;
  char v345;
  int v346;
  uint64_t v347;
  int v348;
  int v349;
  char v350;
  __int16 v351;
  char v352;
  _DWORD v353[2];
  char v354;
  __int16 v355;
  char v356;
  int v357;
  int v358;
  char v359;
  __int16 v360;
  char v361;
  int v362;
  int v363;
  char v364;
  __int16 v365;
  char v366;
  int v367;
  int v368;
  int v369;
  uint64_t v370;
  _BYTE *v371;
  uint64_t v372;
  _BYTE v373[28];
  unsigned int v374[3];
  unsigned int v375[3];
  unsigned int v376[3];
  _BYTE *v377;
  uint64_t v378;
  _BYTE v379[32];

  v13 = a8;
  v14 = a7;
  v15 = a6;
  v377 = v379;
  v378 = 2;
  v20 = a9 + 16;
  *(_QWORD *)a9 = a9 + 16;
  *(_QWORD *)(a9 + 8) = 2;
  v21 = a3;
  JSC::AssemblyHelpers::branchIfNotCell(a1, a3, 1, a4, a5, a6, a7, a8, (uint64_t)v376);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    goto LABEL_259;
  }
  v307 = v15;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v21 | 0x500000000, *(char *)(a1 + 304), v22, v23, v24, v25, v26);
  JSC::MacroAssemblerARM64::branch32(a1, 0, 17, 2, v27, v28, v29, v30, (uint64_t)v375);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986EC394);
  }
  v306 = a3;
  v305 = v14;
  v36 = (_DWORD *)(a9 + 12);
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v21 | 0x500000000, *(char *)(a1 + 304), v31, v32, v33, v34, v35);
  JSC::MacroAssemblerARM64::branch32(a1, 0, 17, 3, v37, v38, v39, v40, (uint64_t)v374);
  if (!v13)
  {
    v48 = a13;
    if (a13)
    {
      JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v41, v42, v43, v44, v45, v46, v47, (int *)&v371);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v290, v291, v292, v293, v294, v295);
      if (*(_BYTE *)(a1 + 328))
        v302 = 69;
      else
        v302 = 65;
      v353[0] = (_DWORD)v371;
      v353[1] = 0;
      v354 = v302;
      v355 = 15;
      v356 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v377, v353, v296, v297, v298, v299, v300, v301);
      i = a2;
    }
    else
    {
      v49 = *(_DWORD *)(a1 + 200);
      for (i = a2; v49 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v49)
      {
        if ((v49 + 4) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v41, v42, v43, v44, v45, v46, v47);
          v49 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = -721215457;
        v49 = *(_DWORD *)(a1 + 200) + 4;
      }
      v51 = v49;
      if ((v49 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v41, v42, v43, v44, v45, v46, v47);
        v51 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v51) = 335544320;
      *(_DWORD *)(a1 + 200) += 4;
      if (*(_BYTE *)(a1 + 328))
        v52 = 69;
      else
        v52 = 65;
      v348 = v49;
      v349 = 0;
      v350 = v52;
      v351 = 15;
      v352 = -1;
      if (v49 != -1)
      {
        v53 = *(unsigned int *)(a9 + 12);
        if ((_DWORD)v53 == *(_DWORD *)(a9 + 8))
        {
          v54 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v53 + 1), (unint64_t)&v348, v43, v44, v45, v46, v47);
          v56 = *v54;
          v55 = v54 + 1;
          v57 = *(_QWORD *)a9 + 12 * *(unsigned int *)(a9 + 12);
          *(_DWORD *)v57 = v56;
        }
        else
        {
          v55 = &v349;
          v57 = *(_QWORD *)a9 + 12 * v53;
          *(_DWORD *)v57 = v49;
        }
        *(_QWORD *)(v57 + 4) = *(_QWORD *)v55;
        ++*v36;
      }
    }
    goto LABEL_20;
  }
  v371 = v373;
  v372 = 2;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986EC5D8);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v21 | 0x600000000, *(char *)(a1 + 304), v43, v44, v45, v46, v47);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1, 0, 17, v58, v59, v60, v61, (uint64_t)&v369, v62);
  v68 = v369;
  if (v369 != -1)
  {
    v69 = HIDWORD(v372);
    if (HIDWORD(v372) == (_DWORD)v372)
    {
      v70 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v371, (void *)(HIDWORD(v372) + 1), (unint64_t)&v369, v63, v64, v65, v66, v67);
      v72 = *v70;
      v71 = (uint64_t *)(v70 + 1);
      v68 = v72;
      v69 = HIDWORD(v372);
    }
    else
    {
      v71 = &v370;
    }
    v221 = &v371[12 * v69];
    *(_DWORD *)v221 = v68;
    *(_QWORD *)(v221 + 4) = *v71;
    ++HIDWORD(v372);
  }
  JSC::MacroAssemblerARM64::load32(a1, v21, a4, v63, v64, v65, v66, v67);
  v304 = (JSC::AssemblerBuffer *)(a1 + 56);
  v229 = *(_DWORD *)(a1 + 200);
  if (v229 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v304, v222, v223, v224, v225, v226, v227, v228);
    v229 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v229) = a4 & 0x1F | (32 * (a4 & 0x1F)) | 0xD37CEC00;
  v230 = *(_DWORD *)(a1 + 200);
  v231 = v230 + 4;
  *(_DWORD *)(a1 + 200) = v230 + 4;
  if (a11)
  {
    if (a11 == 1)
    {
      JSC::MacroAssemblerARM64::move((_DWORD *)a1, (char)a10, a5, v224, v225, v226, v227, v228);
    }
    else
    {
      if ((v230 + 8) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v304, v222, v223, v224, v225, v226, v227, v228);
        v231 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v231) = a5 & 0x1F | 0xF8408340;
      *(_DWORD *)(a1 + 200) += 4;
    }
  }
  else
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a10, a5, v224, v225, v226, v227, v228);
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986EC608);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load64(a1, a4 | 0x2800000000, *(char *)(a1 + 304), v224, v225, v226, v227, v228);
  JSC::MacroAssemblerARM64::branch64(a1, 1, 17, a5, v232, v233, v234, v235, (uint64_t)&v367);
  v237 = v367;
  if (v367 != -1)
  {
    v238 = HIDWORD(v372);
    if (HIDWORD(v372) == (_DWORD)v372)
    {
      v239 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v371, (void *)(HIDWORD(v372) + 1), (unint64_t)&v367, v43, v44, v45, v46, v47);
      v241 = *v239;
      v240 = v239 + 1;
      v237 = v241;
      v238 = HIDWORD(v372);
    }
    else
    {
      v240 = &v368;
    }
    v242 = &v371[12 * v238];
    *(_DWORD *)v242 = v237;
    *(_QWORD *)(v242 + 4) = *(_QWORD *)v240;
    ++HIDWORD(v372);
  }
  v243 = *(_DWORD *)(a1 + 200);
  v244 = *(_DWORD *)(a1 + 52);
  if (a13)
  {
    if (v243 < v244)
    {
      do
      {
        if ((v243 + 4) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v304, (uint64_t)v236, v42, v43, v44, v45, v46, v47);
          v243 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v243) = -721215457;
        v243 = *(_DWORD *)(a1 + 200) + 4;
        *(_DWORD *)(a1 + 200) = v243;
      }
      while (v243 < *(_DWORD *)(a1 + 52));
    }
    v245 = v243;
    if ((v243 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v304, (uint64_t)v236, v42, v43, v44, v45, v46, v47);
      v245 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v245) = 335544320;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v246 = 69;
    else
      v246 = 65;
    v362 = v243;
    v363 = 0;
    v364 = v246;
    v365 = 15;
    v366 = -1;
    if (v243 != -1)
    {
      v247 = *(unsigned int *)(a9 + 12);
      if ((_DWORD)v247 == *(_DWORD *)(a9 + 8))
      {
        v248 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v247 + 1), (unint64_t)&v362, v43, v44, v45, v46, v47);
        v250 = *v248;
        v249 = v248 + 1;
        v251 = (int *)(*(_QWORD *)a9 + 12 * *(unsigned int *)(a9 + 12));
        *v251 = v250;
      }
      else
      {
        v249 = &v363;
        v251 = (int *)(*(_QWORD *)a9 + 12 * v247);
        *v251 = v243;
      }
      v252 = v251 + 1;
      v265 = (_DWORD *)(a9 + 12);
LABEL_154:
      *v252 = *(_QWORD *)v249;
      ++*v265;
    }
  }
  else
  {
    if (v243 < v244)
    {
      do
      {
        if ((v243 + 4) > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v304, (uint64_t)v236, v42, v43, v44, v45, v46, v47);
          v243 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v243) = -721215457;
        v243 = *(_DWORD *)(a1 + 200) + 4;
        *(_DWORD *)(a1 + 200) = v243;
      }
      while (v243 < *(_DWORD *)(a1 + 52));
    }
    v253 = v243;
    if ((v243 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v304, (uint64_t)v236, v42, v43, v44, v45, v46, v47);
      v253 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v253) = 335544320;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v254 = 69;
    else
      v254 = 65;
    v357 = v243;
    v358 = 0;
    v359 = v254;
    v360 = 15;
    v361 = -1;
    if (v243 != -1)
    {
      if (HIDWORD(v378) == (_DWORD)v378)
      {
        v255 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v377, (void *)(HIDWORD(v378) + 1), (unint64_t)&v357, v43, v44, v45, v46, v47);
        v256 = *v255;
        v249 = v255 + 1;
        v257 = (int *)&v377[12 * HIDWORD(v378)];
        *v257 = v256;
      }
      else
      {
        v249 = &v358;
        v257 = (int *)&v377[12 * HIDWORD(v378)];
        *v257 = v243;
      }
      v252 = v257 + 1;
      v265 = (_DWORD *)&v378 + 1;
      goto LABEL_154;
    }
  }
  v266 = (unint64_t)v371;
  v267 = HIDWORD(v372);
  if (!a13)
  {
    if (!HIDWORD(v372))
      goto LABEL_176;
    v275 = *(unsigned int *)(a9 + 8);
    v276 = *(unsigned int *)(a9 + 12);
    v269 = v276 + HIDWORD(v372);
    if (v269 <= v275)
    {
LABEL_207:
      v287 = *v36;
      if (v269 < v287)
      {
        __break(0xC471u);
        JUMPOUT(0x1986EC794);
      }
      v288 = *(_QWORD *)a9 + 12 * v287;
      v289 = v266 + 12 * v267;
      v48 = 0;
      do
      {
        *(_DWORD *)v288 = *(_DWORD *)v266;
        *(_QWORD *)(v288 + 4) = *(_QWORD *)(v266 + 4);
        v266 += 12;
        v288 += 12;
      }
      while (v266 != v289);
      v284 = (_DWORD *)(a9 + 12);
      goto LABEL_192;
    }
    v277 = v275 + (v275 >> 2);
    if (v277 >= 0x10)
      v278 = v277 + 1;
    else
      v278 = 16;
    if (v278 <= v269)
      v278 = v276 + HIDWORD(v372);
    v279 = *(_QWORD *)a9;
    if (v278 < 3)
    {
      *(_QWORD *)a9 = v20;
      *(_DWORD *)(a9 + 8) = 2;
      v280 = v20;
      goto LABEL_199;
    }
    if (v278 < 0x15555556)
    {
      v303 = 12 * v278;
      v280 = WTF::fastMalloc((WTF *)(12 * v278));
      *(_DWORD *)(a9 + 8) = (v303 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)a9 = v280;
LABEL_199:
      if ((_DWORD)v276)
      {
        v286 = v279;
        do
        {
          *(_DWORD *)v280 = *(_DWORD *)v286;
          *(_QWORD *)(v280 + 4) = *(_QWORD *)(v286 + 4);
          v286 += 12;
          v280 += 12;
        }
        while (v286 != v279 + 12 * v276);
      }
      if (v20 != v279 && v279)
      {
        if (*(_QWORD *)a9 == v279)
        {
          *(_QWORD *)a9 = 0;
          *(_DWORD *)(a9 + 8) = 0;
        }
        WTF::fastFree(v279, v236, v42, v43, v44, v45, v46, v47);
      }
      goto LABEL_207;
    }
    __break(0xC471u);
LABEL_259:
    JUMPOUT(0x1986EC374);
  }
  if (!HIDWORD(v372))
  {
LABEL_176:
    v48 = a13;
    i = a2;
    goto LABEL_193;
  }
  v268 = HIDWORD(v378);
  v269 = HIDWORD(v378) + (unint64_t)HIDWORD(v372);
  if (v269 > v378)
  {
    v270 = v378 + ((unint64_t)v378 >> 2);
    if (v270 >= 0x10)
      v271 = v270 + 1;
    else
      v271 = 16;
    if (v271 <= v269)
      v271 = HIDWORD(v378) + (unint64_t)HIDWORD(v372);
    v272 = v377;
    if (v271 < 3)
    {
      v274 = v379;
      v377 = v379;
      LODWORD(v378) = 2;
    }
    else
    {
      if (v271 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x1986EC79CLL);
      }
      v273 = 12 * v271;
      v274 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v271));
      LODWORD(v378) = (v273 & 0xFFFFFFFC) / 0xC;
      v377 = v274;
    }
    if (v268)
    {
      v281 = v272;
      do
      {
        *(_DWORD *)v274 = *(_DWORD *)v281;
        *(_QWORD *)(v274 + 4) = *(_QWORD *)(v281 + 4);
        v281 += 12;
        v274 += 12;
      }
      while (v281 != &v272[12 * v268]);
    }
    if (v379 != v272 && v272)
    {
      if (v377 == v272)
      {
        v377 = 0;
        LODWORD(v378) = 0;
      }
      WTF::fastFree((unint64_t)v272, v236, v42, v43, v44, v45, v46, v47);
    }
  }
  if (v269 < HIDWORD(v378))
  {
    __break(0xC471u);
    JUMPOUT(0x1986EC78CLL);
  }
  v282 = &v377[12 * HIDWORD(v378)];
  v283 = v266 + 12 * v267;
  v48 = a13;
  do
  {
    *(_DWORD *)v282 = *(_DWORD *)v266;
    *(_QWORD *)(v282 + 4) = *(_QWORD *)(v266 + 4);
    v266 += 12;
    v282 += 12;
  }
  while (v266 != v283);
  v284 = (_DWORD *)&v378 + 1;
LABEL_192:
  i = a2;
  *v284 = v269;
  v266 = (unint64_t)v371;
LABEL_193:
  if (v373 != (_BYTE *)v266 && v266 != 0)
  {
    v371 = 0;
    LODWORD(v372) = 0;
    WTF::fastFree(v266, v236, v42, v43, v44, v45, v46, v47);
  }
LABEL_20:
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v375, a1, v42, v43, v44, v45, v46, v47);
  v73 = *(_QWORD *)(i + 41968);
  v74 = (char)v306;
  JSC::MacroAssemblerARM64::branch64(a1, v48 ^ 1, v74, v73, v75, v76, v77, v78, (uint64_t)&v346);
  v86 = v346;
  if (v346 != -1)
  {
    v87 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v87 == *(_DWORD *)(a9 + 8))
    {
      v88 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v87 + 1), (unint64_t)&v346, v81, v82, v83, v84, v85);
      v90 = *v88;
      v89 = (uint64_t *)(v88 + 1);
      v86 = v90;
      LODWORD(v87) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v89 = &v347;
    }
    v91 = *(_QWORD *)a9 + 12 * v87;
    *(_DWORD *)v91 = v86;
    *(_QWORD *)(v91 + 4) = *v89;
    ++*v36;
  }
  for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v79, v80, v81, v82, v83, v84, v85);
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
    j = *(_DWORD *)(a1 + 200) + 4;
  }
  v93 = j;
  if ((j + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v79, v80, v81, v82, v83, v84, v85);
    v93 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v93) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v94 = 69;
  else
    v94 = 65;
  v341 = j;
  v342 = 0;
  v343 = v94;
  v344 = 15;
  v345 = -1;
  if (j != -1)
  {
    if (HIDWORD(v378) == (_DWORD)v378)
    {
      v95 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v377, (void *)(HIDWORD(v378) + 1), (unint64_t)&v341, v81, v82, v83, v84, v85);
      v97 = *v95;
      v96 = v95 + 1;
      v98 = &v377[12 * HIDWORD(v378)];
      *(_DWORD *)v98 = v97;
    }
    else
    {
      v96 = &v342;
      v98 = &v377[12 * HIDWORD(v378)];
      *(_DWORD *)v98 = j;
    }
    *(_QWORD *)(v98 + 4) = *(_QWORD *)v96;
    ++HIDWORD(v378);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v374, a1, v80, v81, v82, v83, v84, v85);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986EC400);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load32(a1, v21 | 0x800000000, *(char *)(a1 + 304), v99, v100, v101, v102, v103);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, v48 ^ 1, 17, v104, v105, v106, v107, (uint64_t)&v339, v108);
  v116 = v339;
  if (v339 != -1)
  {
    v117 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v117 == *(_DWORD *)(a9 + 8))
    {
      v118 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v117 + 1), (unint64_t)&v339, v111, v112, v113, v114, v115);
      v120 = *v118;
      v119 = (uint64_t *)(v118 + 1);
      v116 = v120;
      LODWORD(v117) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v119 = &v340;
    }
    v121 = *(_QWORD *)a9 + 12 * v117;
    *(_DWORD *)v121 = v116;
    *(_QWORD *)(v121 + 4) = *v119;
    ++*v36;
  }
  for (k = *(_DWORD *)(a1 + 200); k < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = k)
  {
    if ((k + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v109, v110, v111, v112, v113, v114, v115);
      k = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + k) = -721215457;
    k = *(_DWORD *)(a1 + 200) + 4;
  }
  v123 = k;
  if ((k + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v109, v110, v111, v112, v113, v114, v115);
    v123 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v123) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v124 = 69;
  else
    v124 = 65;
  v334 = k;
  v335 = 0;
  v336 = v124;
  v337 = 15;
  v338 = -1;
  if (k != -1)
  {
    if (HIDWORD(v378) == (_DWORD)v378)
    {
      v125 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v377, (void *)(HIDWORD(v378) + 1), (unint64_t)&v334, v111, v112, v113, v114, v115);
      v127 = *v125;
      v126 = v125 + 1;
      v128 = &v377[12 * HIDWORD(v378)];
      *(_DWORD *)v128 = v127;
    }
    else
    {
      v126 = &v335;
      v128 = &v377[12 * HIDWORD(v378)];
      *(_DWORD *)v128 = k;
    }
    *(_QWORD *)(v128 + 4) = *(_QWORD *)v126;
    ++HIDWORD(v378);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v376, a1, v110, v111, v112, v113, v114, v115);
  JSC::MacroAssemblerARM64::branch64(a1, 3, v74, 27, v129, v130, v131, v132, (uint64_t)&v371);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, v48 ^ 1, v74, v133, v134, v135, v136, (uint64_t)&v332, v137);
  v145 = v332;
  if (v332 != -1)
  {
    v146 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v146 == *(_DWORD *)(a9 + 8))
    {
      v147 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v146 + 1), (unint64_t)&v332, v140, v141, v142, v143, v144);
      v149 = *v147;
      v148 = (uint64_t *)(v147 + 1);
      v145 = v149;
      LODWORD(v146) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v148 = &v333;
    }
    v150 = *(_QWORD *)a9 + 12 * v146;
    *(_DWORD *)v150 = v145;
    *(_QWORD *)(v150 + 4) = *v148;
    ++*v36;
  }
  for (m = *(_DWORD *)(a1 + 200); m < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = m)
  {
    if ((m + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v138, v139, v140, v141, v142, v143, v144);
      m = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + m) = -721215457;
    m = *(_DWORD *)(a1 + 200) + 4;
  }
  v152 = m;
  if ((m + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v138, v139, v140, v141, v142, v143, v144);
    v152 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v152) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v153 = 69;
  else
    v153 = 65;
  v327 = m;
  v328 = 0;
  v329 = v153;
  v330 = 15;
  v331 = -1;
  if (m != -1)
  {
    if (HIDWORD(v378) == (_DWORD)v378)
    {
      v154 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v377, (void *)(HIDWORD(v378) + 1), (unint64_t)&v327, v140, v141, v142, v143, v144);
      v156 = *v154;
      v155 = v154 + 1;
      v157 = &v377[12 * HIDWORD(v378)];
      *(_DWORD *)v157 = v156;
    }
    else
    {
      v155 = &v328;
      v157 = &v377[12 * HIDWORD(v378)];
      *(_DWORD *)v157 = m;
    }
    *(_QWORD *)(v157 + 4) = *(_QWORD *)v155;
    ++HIDWORD(v378);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v371, a1, v139, v140, v141, v142, v143, v144);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, v74, 27, v158, v159, v160, v161, (uint64_t)v326);
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a1, v74, a4, v307, 1, v162, v163, v164);
  if ((_DWORD)v48)
  {
    JSC::MacroAssemblerARM64::branchDoubleZeroOrNaN(a1, v307, v305, v165, v166, v167, v168, v169, (uint64_t)&v324);
    v183 = v324;
    if (v324 != -1)
    {
      v184 = *(unsigned int *)(a9 + 12);
      if ((_DWORD)v184 == *(_DWORD *)(a9 + 8))
      {
        v185 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v184 + 1), (unint64_t)&v324, v172, v173, v174, v175, v176);
        v187 = *v185;
        v186 = v185 + 1;
        v183 = v187;
        LODWORD(v184) = *(_DWORD *)(a9 + 12);
      }
      else
      {
        v186 = &v325;
      }
      v258 = *(_QWORD *)a9 + 12 * v184;
      *(_DWORD *)v258 = v183;
      *(_QWORD *)(v258 + 4) = *(_QWORD *)v186;
      ++*v36;
    }
    for (n = *(_DWORD *)(a1 + 200); n < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = n)
    {
      if ((n + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v182, v171, v172, v173, v174, v175, v176);
        n = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + n) = -721215457;
      n = *(_DWORD *)(a1 + 200) + 4;
    }
    v260 = n;
    if ((n + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v182, v171, v172, v173, v174, v175, v176);
      v260 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v260) = 335544320;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v261 = 69;
    else
      v261 = 65;
    v319 = n;
    v320 = 0;
    v321 = v261;
    v322 = 15;
    v323 = -1;
    if (n != -1)
    {
      if (HIDWORD(v378) == (_DWORD)v378)
      {
        v262 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v377, (void *)(HIDWORD(v378) + 1), (unint64_t)&v319, v172, v173, v174, v175, v176);
        v263 = *v262;
        v194 = v262 + 1;
        v264 = (int *)&v377[12 * HIDWORD(v378)];
        *v264 = v263;
      }
      else
      {
        v194 = &v320;
        v264 = (int *)&v377[12 * HIDWORD(v378)];
        *v264 = n;
      }
      v197 = v264 + 1;
      v198 = (_DWORD *)&v378 + 1;
      goto LABEL_89;
    }
  }
  else
  {
    JSC::MacroAssemblerARM64::branchDoubleZeroOrNaN(a1, v307, v305, v165, v166, v167, v168, v169, (uint64_t)&v317);
    v177 = v317;
    if (v317 != -1)
    {
      v178 = HIDWORD(v378);
      if (HIDWORD(v378) == (_DWORD)v378)
      {
        v179 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v377, (void *)(HIDWORD(v378) + 1), (unint64_t)&v317, v172, v173, v174, v175, v176);
        v181 = *v179;
        v180 = v179 + 1;
        v177 = v181;
        v178 = HIDWORD(v378);
      }
      else
      {
        v180 = &v318;
      }
      v188 = &v377[12 * v178];
      *(_DWORD *)v188 = v177;
      *(_QWORD *)(v188 + 4) = *(_QWORD *)v180;
      ++HIDWORD(v378);
    }
    for (ii = *(_DWORD *)(a1 + 200); ii < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = ii)
    {
      if ((ii + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v170, v171, v172, v173, v174, v175, v176);
        ii = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + ii) = -721215457;
      ii = *(_DWORD *)(a1 + 200) + 4;
    }
    v190 = ii;
    if ((ii + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v170, v171, v172, v173, v174, v175, v176);
      v190 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v190) = 335544320;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v191 = 69;
    else
      v191 = 65;
    v312 = ii;
    v313 = 0;
    v314 = v191;
    v315 = 15;
    v316 = -1;
    if (ii != -1)
    {
      v192 = *(unsigned int *)(a9 + 12);
      if ((_DWORD)v192 == *(_DWORD *)(a9 + 8))
      {
        v193 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v192 + 1), (unint64_t)&v312, v172, v173, v174, v175, v176);
        v195 = *v193;
        v194 = v193 + 1;
        v196 = (int *)(*(_QWORD *)a9 + 12 * *(unsigned int *)(a9 + 12));
        *v196 = v195;
      }
      else
      {
        v194 = &v313;
        v196 = (int *)(*(_QWORD *)a9 + 12 * v192);
        *v196 = ii;
      }
      v197 = v196 + 1;
      v198 = (_DWORD *)(a9 + 12);
LABEL_89:
      *v197 = *(_QWORD *)v194;
      ++*v198;
    }
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v326, a1, v171, v172, v173, v174, v175, v176);
  JSC::MacroAssemblerARM64::branch64(a1, v48, v74, 7, v199, v200, v201, v202, (uint64_t)&v310);
  v210 = v310;
  if (v310 != -1)
  {
    v211 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v211 == *(_DWORD *)(a9 + 8))
    {
      v212 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v211 + 1), (unint64_t)&v310, v205, v206, v207, v208, v209);
      v214 = *v212;
      v213 = v212 + 1;
      v210 = v214;
      LODWORD(v211) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v213 = &v311;
    }
    v215 = *(_QWORD *)a9 + 12 * v211;
    *(_DWORD *)v215 = v210;
    *(_QWORD *)(v215 + 4) = *(_QWORD *)v213;
    ++*v36;
  }
  if (HIDWORD(v378))
  {
    v216 = 0;
    v217 = 0;
    v218 = 12 * HIDWORD(v378);
    do
    {
      if (v217 >= HIDWORD(v378))
      {
        __break(0xC471u);
        JUMPOUT(0x1986EC784);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v377[v216], a1, v204, v205, v206, v207, v208, v209);
      ++v217;
      v216 += 12;
    }
    while (v218 != v216);
  }
  v219 = (unint64_t)v377;
  if (v379 != v377 && v377 != 0)
  {
    v377 = 0;
    LODWORD(v378) = 0;
    WTF::fastFree(v219, v203, v204, v205, v206, v207, v208, v209);
  }
}

void JSC::AssemblyHelpers::storeWasmContextInstance(_DWORD *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;

  v9 = a2;
  if ((_BYTE)word_1ECF4C286)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [33],JSC::ARM64Registers::RegisterID>((uint64_t)a1, "Store wasm context instance from", &v9);
    a2 = v9;
  }
  JSC::MacroAssemblerARM64::move(a1, a2, 19, a4, a5, a6, a7, a8);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)a1, "Store wasm context instance done");
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [33],JSC::ARM64Registers::RegisterID>(uint64_t a1, const char *a2, char *a3)
{
  char **v5;
  char *v6;
  char *v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  float v10;
  unsigned int v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  void (**v49)(WTF::StringPrintStream *__hidden);
  WTF *v50;
  __int128 v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v49 = off_1E3572250;
    v50 = (WTF *)v52;
    v51 = xmmword_199122F80;
    v52[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v49, "%s", a2);
    v5 = &(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * *a3];
    v6 = *v5;
    v7 = v5[1];
    v8 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v49[4])(&v49);
    WTF::PrintStream::printf(v8, "%s", "%");
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
    if (v6)
    {
      v11 = (_DWORD)v7 - 1;
      if (!v7)
        v11 = 0;
      WTF::StringImpl::utf8ForCharacters(v6, v11, (uint64_t)&v47, v10);
    }
    else
    {
      v12 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 16) = 0;
      v47 = v12;
      LODWORD(v48) = 0;
    }
    WTF::printExpectedCStringHelper(v9, "StringView", &v47);
    if ((_DWORD)v48 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v48])(&v46, &v47);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
    v49[5]((WTF::StringPrintStream *)&v49);
    v49[5]((WTF::StringPrintStream *)&v49);
    if (v50)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v50, v51, (uint64_t *)&v46);
      v20 = v46;
    }
    else
    {
      v20 = 0;
    }
    v21 = *(_DWORD *)(a1 + 200);
    LODWORD(v47) = v21;
    v46 = 0;
    v48 = v20;
    v22 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v22 == *(_DWORD *)(a1 + 224))
    {
      v23 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v22 + 1, (unint64_t)&v47);
      v24 = *(unsigned int *)(a1 + 228);
      v25 = *(_QWORD *)(a1 + 216) + 16 * v24;
      *(_DWORD *)v25 = *(_DWORD *)v23;
      v26 = *(_QWORD *)(v23 + 8);
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v25 + 8) = v26;
      v27 = v48;
      *(_DWORD *)(a1 + 228) = v24 + 1;
      v48 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::~StringImpl(v27, v13, v14, v15, v16, v17, v18, v19);
          WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
        }
        else
        {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 216) + 16 * v22;
      *(_DWORD *)v28 = v21;
      *(_QWORD *)(v28 + 8) = v20;
      *(_DWORD *)(a1 + 228) = v22 + 1;
    }
    v29 = v46;
    v46 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::~StringImpl(v29, v13, v14, v15, v16, v17, v18, v19);
        WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
      }
      else
      {
        *(_DWORD *)v29 -= 2;
      }
    }
    if (v50 != (WTF *)v52)
      WTF::fastFree((unint64_t)v50, v13, v14, v15, v16, v17, v18, v19);
  }
}

void JSC::AssemblyHelpers::copyCalleeSavesToEntryFrameCalleeSavesBufferImpl(char *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unsigned __int8 v37;
  uint64_t v38;
  unsigned __int8 v39;
  char v40;
  char **v41;

  v39 = a2;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [50],JSC::ARM64Registers::RegisterID>((uint64_t)a1, (char *)&v39);
  v4 = vmEntryRecord(4096);
  JSC::MacroAssemblerARM64::add64((uint64_t)a1, (v4 - 4072), a2, a2, v5, v6, v7, v8);
  v16 = atomic_load(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag);
  if (v16 != -1)
  {
    v36 = &v40;
    v41 = &v36;
    std::__call_once(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag, &v41, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::$_0 &&>>);
  }
  v17 = (_QWORD *)JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::result;
  if (!*(_QWORD *)JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::result)
    return;
  v18 = **(unsigned int **)JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::result;
  v19 = v39;
  v36 = a1;
  v37 = v39;
  v38 = 127;
  if (!(_DWORD)v18)
    return;
  v20 = 0;
  v21 = 127;
  do
  {
    if (v20 >= *(unsigned int *)*v17)
    {
      __break(0xC471u);
LABEL_25:
      __break(1u);
      __break(0xC471u);
      JUMPOUT(0x1986ECD04);
    }
    v22 = *(_QWORD *)(*v17 + 8 * v20 + 8);
    if ((v22 & 0x7Fu) >= 0x40uLL)
      goto LABEL_25;
    if (((1 << (v22 & 0x7F)) & 0xA0000000) == 0)
    {
      if ((v22 & 0x60) != 0)
        goto LABEL_26;
      v23 = v21 & 0x7F;
      if ((_DWORD)v23 == 127)
        goto LABEL_13;
      v24 = (v22 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = (v21 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
      if (v24 == v25 + 8)
      {
        if (((v21 >> 6) & 4) != 0 || (v26 = (int)v25 >> 3, (((int)v25 >> 3) + 64) > 0x7F))
        {
          v28 = v19 & 0x3FFFFFFFFLL | ((unint64_t)((unint64_t)(v21 >> 6) >> 2) << 34);
          JSC::MacroAssemblerARM64::store64((uint64_t)a1, v23, v28, v11, v12, v13, v14, v15);
          JSC::MacroAssemblerARM64::store64((uint64_t)a1, v22 & 0x7F, v28 + 0x800000000, v29, v30, v31, v32, v33);
        }
        else
        {
          v27 = *((_DWORD *)a1 + 50);
          if (v27 + 4 > *((_DWORD *)a1 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v9, v10, v11, v12, v13, v14, v15);
            v27 = *((_DWORD *)a1 + 50);
          }
          *(_DWORD *)(*((_QWORD *)a1 + 7) + v27) = ((v26 & 0x7F) << 15) | ((v22 & 0x1F) << 10) | (32 * (char)v19) | v21 & 0x1F | 0xA9000000;
          *((_DWORD *)a1 + 50) += 4;
        }
      }
      else
      {
        if (v25 != v24 + 8)
        {
          JSC::MacroAssemblerARM64::store64((uint64_t)a1, v21 & 0x7F, v19 & 0x3FFFFFFFFLL | ((unint64_t)((unint64_t)v21 >> 8) << 34), v11, v12, v13, v14, v15);
          goto LABEL_13;
        }
        JSC::MacroAssemblerARM64::storePair64(a1, *(_QWORD *)(*v17 + 8 * v20 + 8) & 0x7FLL, v21 & 0x7F, (char)v19, (v22 >> 6) & 0xFFFFFFFCLL, v13, v14, v15);
      }
      v22 = 127;
LABEL_13:
      v38 = v22;
      v21 = v22;
    }
    ++v20;
  }
  while (v18 != v20);
  LODWORD(v20) = v18;
LABEL_26:
  v34 = v21 & 0x7F;
  if ((_DWORD)v34 != 127)
  {
    JSC::MacroAssemblerARM64::store64((uint64_t)a1, v34, v19 & 0x3FFFFFFFFLL | ((unint64_t)((unint64_t)v21 >> 8) << 34), v11, v12, v13, v14, v15);
    v21 = 127;
    v38 = 127;
  }
  if (v20 < v18)
  {
    v35 = v20;
    do
    {
      if (v35 >= *(unsigned int *)*v17)
      {
        __break(0xC471u);
        JUMPOUT(0x1986ECE20);
      }
      v41 = *(char ***)(*v17 + 8 * v35 + 8);
      if ((v41 & 0x7Fu) >= 0x40uLL)
        goto LABEL_25;
      if (((1 << (v41 & 0x7F)) & 0xA0000000) == 0)
        JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>((_DWORD **)&v36, (uint64_t *)&v41, v10, v11, v12, v13, v14, v15);
      ++v35;
    }
    while (v18 != v35);
    v21 = v38;
  }
  if ((v21 & 0x7F) != 0x7F)
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)v36, (char)((v21 & 0x7F) - 32), v37 | ((unint64_t)((unint64_t)v21 >> 8) << 34), v11, v12, v13, v14, v15);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [50],JSC::ARM64Registers::RegisterID>(uint64_t a1, char *a2)
{
  char **v4;
  char *v5;
  char *v6;
  WTF::PrintStream *v7;
  WTF::PrintStream *v8;
  float v9;
  unsigned int v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  void (**v48)(WTF::StringPrintStream *__hidden);
  WTF *v49;
  __int128 v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)word_1ECF4C286)
  {
    v48 = off_1E3572250;
    v49 = (WTF *)v51;
    v50 = xmmword_199122F80;
    v51[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v48, "%s", "copyCalleeSavesToEntryFrameCalleeSavesBufferImpl ");
    v4 = &(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * *a2];
    v5 = *v4;
    v6 = v4[1];
    v7 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v48[4])(&v48);
    WTF::PrintStream::printf(v7, "%s", "%");
    v8 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 32))(v7);
    if (v5)
    {
      v10 = (_DWORD)v6 - 1;
      if (!v6)
        v10 = 0;
      WTF::StringImpl::utf8ForCharacters(v5, v10, (uint64_t)&v46, v9);
    }
    else
    {
      v11 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v46 = v11;
      LODWORD(v47) = 0;
    }
    WTF::printExpectedCStringHelper(v8, "StringView", &v46);
    if ((_DWORD)v47 != -1)
      ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v47])(&v45, &v46);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    v48[5]((WTF::StringPrintStream *)&v48);
    v48[5]((WTF::StringPrintStream *)&v48);
    if (v49)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v49, v50, (uint64_t *)&v45);
      v19 = v45;
    }
    else
    {
      v19 = 0;
    }
    v20 = *(_DWORD *)(a1 + 200);
    LODWORD(v46) = v20;
    v45 = 0;
    v47 = v19;
    v21 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v21 == *(_DWORD *)(a1 + 224))
    {
      v22 = WTF::Vector<std::pair<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 216, v21 + 1, (unint64_t)&v46);
      v23 = *(unsigned int *)(a1 + 228);
      v24 = *(_QWORD *)(a1 + 216) + 16 * v23;
      *(_DWORD *)v24 = *(_DWORD *)v22;
      v25 = *(_QWORD *)(v22 + 8);
      *(_QWORD *)(v22 + 8) = 0;
      *(_QWORD *)(v24 + 8) = v25;
      v26 = v47;
      *(_DWORD *)(a1 + 228) = v23 + 1;
      v47 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::~StringImpl(v26, v12, v13, v14, v15, v16, v17, v18);
          WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
        }
        else
        {
          *(_DWORD *)v26 -= 2;
        }
      }
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 216) + 16 * v21;
      *(_DWORD *)v27 = v20;
      *(_QWORD *)(v27 + 8) = v19;
      *(_DWORD *)(a1 + 228) = v21 + 1;
    }
    v28 = v45;
    v45 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v12, v13, v14, v15, v16, v17, v18);
        WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (v49 != (WTF *)v51)
      WTF::fastFree((unint64_t)v49, v12, v13, v14, v15, v16, v17, v18);
  }
}

void JSC::AssemblyHelpers::cage(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    if (a2 >= 1 || g_config[a2 + 7])
    {
      __break(0xC471u);
      JUMPOUT(0x1986ED1BCLL);
    }
  }
  else if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
  {
    JSC::MacroAssemblerARM64::and64(a1, (JSC::ARM64LogicalImmediate *)0x3FFFFFFFFLL, a3);
    JSC::MacroAssemblerARM64::add64(a1, qword_1ECF4C038, a3, a3, v5, v6, v7, v8);
  }
}

void JSC::AssemblyHelpers::cageConditionally(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  _DWORD v56[3];
  _DWORD v57[3];
  WTF *v58;
  uint64_t v59;
  _BYTE v60[24];

  if (a2)
  {
    if (a2 >= 1)
    {
      __break(0xC471u);
    }
    else if (g_config[a2 + 7])
    {
      JSC::AssemblyHelpers::cage((uint64_t)a1, a2, a3);
    }
  }
  else if (qword_1ECF4C038)
  {
    if (byte_1ECF4C022)
    {
      JSC::MacroAssemblerARM64::and64((uint64_t)a1, (JSC::ARM64LogicalImmediate *)0x3FFFFFFFFLL, a3);
      JSC::MacroAssemblerARM64::add64((uint64_t)a1, qword_1ECF4C038, a3, a3, v10, v11, v12, v13);
    }
    else if (!disablePrimitiveGigacageRequested)
    {
      v58 = (WTF *)v60;
      v59 = 2;
      JSC::MacroAssemblerARM64::branchTest8((uint64_t)a1, 1, (uint64_t)&disablePrimitiveGigacageRequested, -1, a5, a6, a7, a8, (uint64_t)v57);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v58, v57, v15, v16, v17, v18, v19, v20);
      JSC::MacroAssemblerARM64::load64((uint64_t)a1, (uint64_t)&qword_1ECF4C038, a5, v21, v22, v23, v24, v25);
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)a1, 0, a5, 0xFFFFFFFFLL, v26, v27, v28, v29, (uint64_t)v56, v30);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v58, v56, v31, v32, v33, v34, v35, v36);
      JSC::MacroAssemblerARM64::and64((uint64_t)a1, (JSC::ARM64LogicalImmediate *)0x3FFFFFFFFLL, a3);
      JSC::MacroAssemblerARM64::add64(a1, a5, a3, v37, v38, v39, v40, v41);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v58, (uint64_t)a1, v42, v43, v44, v45, v46, v47);
      v55 = v58;
      if (v60 != (_BYTE *)v58)
      {
        if (v58)
        {
          v58 = 0;
          LODWORD(v59) = 0;
          WTF::fastFree((unint64_t)v55, v48, v49, v50, v51, v52, v53, v54);
        }
      }
    }
  }
}

void JSC::AssemblyHelpers::emitSave(JSC::AssemblyHelpers *this, const JSC::RegisterAtOffsetList *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned __int8 v16;
  unint64_t v17;

  v15 = this;
  v16 = 29;
  v17 = 127;
  if (*(_QWORD *)a2 && (v9 = **(unsigned int **)a2, (_DWORD)v9))
  {
    v10 = 0;
    while (1)
    {
      if (**(_DWORD **)a2 <= v10)
      {
LABEL_19:
        __break(0xC471u);
        JUMPOUT(0x1986ED4C4);
      }
      v14 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v10 + 8);
      if ((v14 & 0x60) != 0)
        break;
      JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::RegisterID>(&v15, &v14, a3, a4, a5, a6, a7, a8);
      if (v9 == ++v10)
      {
        v10 = v9;
        break;
      }
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v11 = v17;
  v12 = v17 & 0x7F;
  if ((_DWORD)v12 != 127)
  {
    JSC::MacroAssemblerARM64::store64((uint64_t)v15, v12, v16 | ((unint64_t)(v17 >> 8) << 34), a4, a5, a6, a7, a8);
    v11 = 127;
    v17 = 127;
  }
  if (v10 < v9)
  {
    v13 = 8 * v10 + 8;
    do
    {
      if (**(_DWORD **)a2 <= v10)
        goto LABEL_19;
      JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v15, (uint64_t *)(*(_QWORD *)a2 + v13), a3, a4, a5, a6, a7, a8);
      ++v10;
      v13 += 8;
    }
    while (v9 != v10);
    v11 = v17;
  }
  if ((v11 & 0x7F) != 0x7F)
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)v15, (char)((v11 & 0x7F) - 32), v16 | ((unint64_t)(v11 >> 8) << 34), a4, a5, a6, a7, a8);
}

void JSC::AssemblyHelpers::emitRestore(_DWORD *a1, _DWORD **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned __int8 v23;
  uint64_t v24;

  v22 = a1;
  v23 = a3;
  v24 = 127;
  if (*a2)
  {
    v8 = **a2;
    if ((_DWORD)v8)
    {
      v12 = 0;
      v13 = a3;
      v14 = 127;
      while (1)
      {
        if (**a2 <= v12)
        {
          __break(0xC471u);
          goto LABEL_28;
        }
        v15 = *(_QWORD *)&(*a2)[2 * v12 + 2];
        if ((v15 & 0x60) != 0)
          goto LABEL_13;
        a4 = v14 & 0x7F;
        if ((_DWORD)a4 != 127)
        {
          v16 = (v15 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
          v17 = v14 >> 6;
          v18 = (v14 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
          if (v16 == v18 + 8)
          {
            v19 = *(_QWORD *)&(*a2)[2 * v12 + 2] & 0x7FLL;
LABEL_12:
            JSC::MacroAssemblerARM64::loadPair64(a1, a3, v17 & 0xFFFFFFFC, a4, v19, a6, a7, a8);
            v14 = 127;
            goto LABEL_8;
          }
          if (v18 == v16 + 8)
          {
            v19 = v14 & 0x7F;
            a4 = *(_QWORD *)&(*a2)[2 * v12 + 2] & 0x7FLL;
            v17 = v15 >> 6;
            goto LABEL_12;
          }
          JSC::MacroAssemblerARM64::load64((uint64_t)a1, v13 & 0x3FFFFFFFFLL | ((unint64_t)((unint64_t)v14 >> 8) << 34), a4, a4, a5, a6, a7, a8);
        }
        v14 = v15;
LABEL_8:
        v24 = v14;
        if (v8 == ++v12)
        {
          v12 = v8;
LABEL_13:
          v20 = v14 & 0x7F;
          if ((_DWORD)v20 != 127)
          {
            JSC::MacroAssemblerARM64::load64((uint64_t)a1, v13 & 0x3FFFFFFFFLL | ((unint64_t)((unint64_t)v14 >> 8) << 34), v20, a4, a5, a6, a7, a8);
            v14 = 127;
            v24 = 127;
          }
          if (v12 >= v8)
          {
LABEL_16:
            if ((v14 & 0x7F) != 0x7F)
              JSC::MacroAssemblerARM64::loadDouble((uint64_t)v22, v23 | ((unint64_t)((unint64_t)v14 >> 8) << 34), (char)((v14 & 0x7F) - 32), a4, a5, a6, a7, a8);
            return;
          }
          v21 = 8 * v12 + 8;
          while (**a2 > v12)
          {
            JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v22, (uint64_t *)((char *)*a2 + v21), v20, a4, a5, a6, a7, a8);
            ++v12;
            v21 += 8;
            if (v8 == v12)
            {
              v14 = v24;
              goto LABEL_16;
            }
          }
          __break(0xC471u);
LABEL_28:
          JUMPOUT(0x1986ED6B0);
        }
      }
    }
  }
}

void JSC::AssemblyHelpers::emitSaveCalleeSavesFor(JSC::AssemblyHelpers *this, const JSC::RegisterAtOffsetList *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned __int8 v32;
  uint64_t v33;

  v10 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    LODWORD(v10) = *v10;
  v11 = v10;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "emitSaveCalleeSavesFor");
  v31 = this;
  v32 = 29;
  v12 = 127;
  v33 = 127;
  if ((_DWORD)v11)
  {
    v13 = 0;
    v12 = 127;
    do
    {
      v14 = *(_DWORD **)a2;
      if (v13 >= **(unsigned int **)a2)
      {
        __break(0xC471u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(0xC471u);
        JUMPOUT(0x1986ED960);
      }
      v15 = *(_QWORD *)&v14[2 * v13 + 2];
      if ((v14[2 * v13 + 2] & 0x60) == 0x20)
        goto LABEL_24;
      if ((*(_QWORD *)&v14[2 * v13 + 2] & 0x7FuLL) >= 0x40)
        goto LABEL_32;
      if (((1 << (v15 & 0x7F)) & 0xA0000000) == 0)
      {
        if ((v15 & 0x60) != 0)
          goto LABEL_33;
        v16 = v12 & 0x7F;
        if ((_DWORD)v16 != 127)
        {
          v17 = (v15 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
          v18 = v12 >> 6;
          v19 = (v12 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
          if (v17 == v19 + 8)
          {
            if (((v12 >> 6) & 4) != 0 || (v20 = (int)v19 >> 3, (((int)v19 >> 3) + 64) >= 0x80))
            {
              v22 = v18 >> 2;
              JSC::MacroAssemblerARM64::store64((uint64_t)this, v16, ((unint64_t)(v18 >> 2) << 34) | 0x1D, a4, a5, a6, a7, a8);
              JSC::MacroAssemblerARM64::store64((uint64_t)this, v15 & 0x7F, (v22 << 34) + 0x80000001DLL, v23, v24, v25, v26, v27);
            }
            else
            {
              v21 = *((_DWORD *)this + 50);
              if (v21 + 4 > *((_DWORD *)this + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblyHelpers *)((char *)this + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                v21 = *((_DWORD *)this + 50);
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v21) = ((v20 & 0x7F) << 15) | ((v15 & 0x1F) << 10) | v12 & 0x1F | 0xA90003A0;
              *((_DWORD *)this + 50) += 4;
            }
            v15 = 127;
          }
          else if (v19 == v17 + 8)
          {
            JSC::MacroAssemblerARM64::storePair64(this, v15 & 0x7F, v12 & 0x7F, 29, (v15 >> 6) & 0xFFFFFFFCLL, a6, a7, a8);
            v15 = 127;
          }
          else
          {
            JSC::MacroAssemblerARM64::store64((uint64_t)this, v12 & 0x7F, ((unint64_t)((unint64_t)v12 >> 8) << 34) | 0x1D, a4, a5, a6, a7, a8);
          }
        }
        v33 = v15;
        v12 = v15;
      }
      ++v13;
    }
    while (v11 != v13);
    LODWORD(v13) = v11;
LABEL_24:
    v28 = v12 & 0x7F;
    if ((_DWORD)v28 != 127)
    {
      JSC::MacroAssemblerARM64::store64((uint64_t)this, v28, ((unint64_t)((unint64_t)v12 >> 8) << 34) | 0x1D, a4, a5, a6, a7, a8);
      v12 = 127;
      v33 = 127;
    }
  }
  else
  {
    LODWORD(v13) = 0;
  }
  if (v13 < v11)
  {
    v29 = v13;
    do
    {
      if (v29 >= **(unsigned int **)a2)
      {
        __break(0xC471u);
        JUMPOUT(0x1986EDA3CLL);
      }
      v30 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v29 + 8);
      if ((v30 & 0x7Fu) >= 0x40uLL)
        goto LABEL_32;
      if (((1 << (v30 & 0x7F)) & 0xA0000000) == 0)
        JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v31, &v30, a3, a4, a5, a6, a7, a8);
      ++v29;
    }
    while (v11 != v29);
    v12 = v33;
  }
  if ((v12 & 0x7F) != 0x7F)
    JSC::MacroAssemblerARM64::storeDouble((uint64_t)v31, (char)((v12 & 0x7F) - 32), v32 | ((unint64_t)((unint64_t)v12 >> 8) << 34), a4, a5, a6, a7, a8);
}

void JSC::AssemblyHelpers::emitRestoreCalleeSavesFor(JSC::AssemblyHelpers *this, const JSC::RegisterAtOffsetList *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned __int8 v23;
  uint64_t v24;

  v10 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    LODWORD(v10) = *v10;
  v11 = v10;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "emitRestoreCalleeSavesFor");
  v22 = this;
  v23 = 29;
  v12 = 127;
  v24 = 127;
  if (!(_DWORD)v11)
  {
    LODWORD(v13) = 0;
    goto LABEL_21;
  }
  v13 = 0;
  v12 = 127;
  do
  {
    v14 = *(_DWORD **)a2;
    if (v13 >= **(unsigned int **)a2)
    {
      __break(0xC471u);
LABEL_29:
      __break(1u);
LABEL_39:
      __break(0xC471u);
      JUMPOUT(0x1986EDC48);
    }
    v15 = *(_QWORD *)&v14[2 * v13 + 2];
    if ((v14[2 * v13 + 2] & 0x60) == 0x20)
      goto LABEL_19;
    if ((*(_QWORD *)&v14[2 * v13 + 2] & 0x7FuLL) >= 0x40)
      goto LABEL_29;
    if (((1 << (v15 & 0x7F)) & 0xA0000000) == 0)
    {
      if ((v15 & 0x60) != 0)
        goto LABEL_39;
      a4 = v12 & 0x7F;
      if ((_DWORD)a4 == 127)
        goto LABEL_13;
      v16 = (v15 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
      v17 = v12 >> 6;
      v18 = (v12 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
      if (v16 == v18 + 8)
      {
        v19 = v15 & 0x7F;
      }
      else
      {
        if (v18 != v16 + 8)
        {
          JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)((unint64_t)v12 >> 8) << 34) | 0x1D, a4, a4, a5, a6, a7, a8);
          goto LABEL_13;
        }
        v19 = v12 & 0x7F;
        a4 = v15 & 0x7F;
        v17 = v15 >> 6;
      }
      JSC::MacroAssemblerARM64::loadPair64(this, 29, v17 & 0xFFFFFFFC, a4, v19, a6, a7, a8);
      v15 = 127;
LABEL_13:
      v24 = v15;
      v12 = v15;
    }
    ++v13;
  }
  while (v11 != v13);
  LODWORD(v13) = v11;
LABEL_19:
  a3 = v12 & 0x7F;
  if ((_DWORD)a3 != 127)
  {
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)((unint64_t)v12 >> 8) << 34) | 0x1D, a3, a4, a5, a6, a7, a8);
    v12 = 127;
    v24 = 127;
  }
LABEL_21:
  if (v13 < v11)
  {
    v20 = v13;
    do
    {
      if (v20 >= **(unsigned int **)a2)
        goto LABEL_39;
      v21 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v20 + 8);
      if ((v21 & 0x7Fu) >= 0x40uLL)
        goto LABEL_29;
      if (((1 << (v21 & 0x7F)) & 0xA0000000) == 0)
        JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute<JSC::ARM64Registers::FPRegisterID>(&v22, &v21, a3, a4, a5, a6, a7, a8);
      ++v20;
    }
    while (v11 != v20);
    v12 = v24;
  }
  if ((v12 & 0x7F) != 0x7F)
    JSC::MacroAssemblerARM64::loadDouble((uint64_t)v22, v23 | ((unint64_t)((unint64_t)v12 >> 8) << 34), (char)((v12 & 0x7F) - 32), a4, a5, a6, a7, a8);
}

void JSC::AssemblyHelpers::copyLLIntBaselineCalleeSavesFromFrameOrRegisterToEntryFrameCalleeSavesBuffer(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t i;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  uint64_t j;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int v50;
  int v51;
  int *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned __int8 v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  int *v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  int v106;
  int *v107;
  int v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  char v117;
  int v118[2];
  unsigned __int8 v119;
  unsigned __int8 v120;
  char v121;
  char v122;
  char v123;
  char v124;
  __int16 v125;
  int v126;
  int v127;
  int v128;
  char v129;
  JSC::ARM64LogicalImmediate *v130;
  int v131;
  int v132;
  char v133;
  JSC::ARM64LogicalImmediate *v134;
  uint64_t v135;
  int v136;
  int v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  char v143;
  _QWORD *v144;
  _QWORD v145[2];

  v138 = *a3;
  v140 = 0;
  v141 = 0;
  v139 = 0;
  v142 = 0;
  v5 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v138);
  v11 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v138);
  for (i = 0; i != 23; ++i)
  {
    v13 = JSC::FPRInfo::toRegister::registerForIndex[i];
    v14 = (v13 + 32) & 0x7F;
    if (v14 >= 0x40)
      goto LABEL_142;
    v15 = 1 << v14;
    if ((v141 & v15) == 0 && (((unint64_t)v138 | v139) & v15) == 0)
    {
      v139 |= 1 << (v13 + 32);
      goto LABEL_11;
    }
  }
  v16 = 0;
  while (1)
  {
    v13 = JSC::FPRInfo::toRegister::registerForIndex[v16];
    v17 = (v13 + 32) & 0x7F;
    if (v17 >= 0x40)
      goto LABEL_142;
    if (!((1 << v17) & v141 | v139 & (1 << v17)))
      break;
    if (++v16 == 23)
    {
      __break(0xC471u);
      goto LABEL_176;
    }
  }
  v139 |= 1 << (v13 + 32);
  ++v142;
LABEL_11:
  v18 = JSC::ScratchRegisterAllocator::allocateScratch<JSC::GPRInfo>((uint64_t)&v138);
  for (j = 0; j != 23; ++j)
  {
    v20 = JSC::FPRInfo::toRegister::registerForIndex[j];
    v21 = (v20 + 32) & 0x7F;
    if (v21 >= 0x40)
      goto LABEL_142;
    v22 = 1 << v21;
    if ((v141 & v22) == 0 && (((unint64_t)v138 | v139) & v22) == 0)
    {
      v139 |= 1 << (v20 + 32);
      v25 = v142;
      goto LABEL_21;
    }
  }
  v23 = 0;
  while (1)
  {
    v20 = JSC::FPRInfo::toRegister::registerForIndex[v23];
    v24 = (v20 + 32) & 0x7F;
    if (v24 >= 0x40)
      goto LABEL_142;
    if (!((1 << v24) & v141 | v139 & (1 << v24)))
      break;
    if (++v23 == 23)
    {
      __break(0xC471u);
      JUMPOUT(0x1986EDE7CLL);
    }
  }
  v139 |= 1 << (v20 + 32);
  v25 = ++v142;
LABEL_21:
  if (v25)
  {
    __break(0xC471u);
    JUMPOUT(0x1986EE81CLL);
  }
  JSC::MacroAssemblerARM64::load64(a1, a2, v5, v6, (uint64_t)v7, v8, v9, v10);
  v26 = vmEntryRecord(4096);
  JSC::MacroAssemblerARM64::add64(a1, (v26 - 4072), v5, v5, v27, v28, v29, v30);
  *(_QWORD *)v118 = a1;
  v119 = 29;
  v120 = v5;
  v121 = v11;
  v122 = v18;
  v123 = v13;
  v124 = v20;
  v125 = -1;
  v126 = 0;
  v129 |= 0x7Fu;
  v133 |= 0x7Fu;
  v135 = 0;
  v136 = 0;
  v33 = atomic_load(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag);
  if (v33 != -1)
  {
    v145[0] = &v143;
    v144 = v145;
    std::__call_once(&JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::calleeSavesFlag, &v144, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::$_0 &&>>);
  }
  v34 = (_QWORD *)JSC::RegisterSetBuilder::vmCalleeSaveRegisterOffsets(void)::result;
  v35 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
  if (v35 != -1)
  {
    v145[0] = &v143;
    v144 = v145;
    std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v144, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
  }
  v36 = &bmalloc::availableMemory(void)::availableMemory;
  if (*v34)
  {
    v37 = *(unsigned int *)*v34;
    if ((_DWORD)v37)
    {
      v38 = 0;
      v32 = 2684354560;
      v6 = 24;
      v7 = v118;
      while (1)
      {
        if (v38 >= *(unsigned int *)*v34)
        {
          __break(0xC471u);
          JUMPOUT(0x1986EE680);
        }
        v39 = *(_QWORD *)(*v34 + 8 * v38 + 8);
        if ((v39 & 0x7F) >= 0x40)
          goto LABEL_142;
        if (((1 << (v39 & 0x7F)) & 0xA0000000) != 0)
          goto LABEL_97;
        v40 = (unsigned int *)v36[288];
        if (v40)
        {
          v41 = *v40;
          if (*v40 < 2)
          {
            LODWORD(v42) = 0;
            v44 = *v40;
LABEL_41:
            if (v44)
            {
              if (v41 <= v42)
              {
                __break(0xC471u);
                JUMPOUT(0x1986EE6E0);
              }
              v49 = &v40[2 * v42];
              v50 = v49[2];
              v40 = v49 + 2;
              if (((v50 ^ v39) & 0x7F) != 0)
                v40 = 0;
            }
            else
            {
              v40 = 0;
            }
          }
          else
          {
            v42 = 0;
            v43 = v40 + 2;
            v44 = *v40;
            while (1)
            {
              v45 = v42 + ((v44 - 1) >> 1);
              if (v41 <= v45)
              {
                __break(0xC471u);
                JUMPOUT(0x1986EE404);
              }
              v46 = *(_QWORD *)&v43[2 * v45];
              v31 = v46 ^ *(_QWORD *)(*v34 + 8 * v38 + 8);
              if (((v46 ^ *(_QWORD *)(*v34 + 8 * v38 + 8)) & 0x7F) == 0)
                break;
              v47 = (v44 - 1) >> 1;
              v44 -= v47 + 1;
              if ((v39 & 0x7F) >= (v46 & 0x7Fu))
              {
                v48 = v47 + 1;
              }
              else
              {
                v44 = v47;
                v48 = 0;
              }
              v42 += v48;
              if (v44 <= 1)
                goto LABEL_41;
            }
            v40 = &v43[2 * v42 + 2 * ((v44 - 1) >> 1)];
          }
        }
        if ((v39 & 0x60) != 0)
          goto LABEL_115;
        if (v40)
        {
          v72 = (*(_QWORD *)v40 >> 6) & 0xFFFFFFFCLL;
          v53 = v135;
          v73 = &v118[6 * v135];
          v73[6] = 0;
          v73[7] = v72;
        }
        else
        {
          v51 = v135;
          v52 = &v118[6 * v135];
          v52[6] = 1;
          *((_BYTE *)v52 + 32) = v39 & 0x7F;
          v53 = v51;
        }
        LODWORD(v135) = v53 + 1;
        v54 = (v39 >> 6) & 0xFFFFFFFC;
        if ((v53 + 1) > 1)
          break;
        v137 = (v39 >> 6) & 0xFFFFFFFC;
LABEL_97:
        if (++v38 == v37)
        {
          LODWORD(v38) = v37;
          goto LABEL_115;
        }
      }
      v55 = (v132 - HIDWORD(v135));
      v56 = v131;
      if (v127)
      {
        if (v131)
        {
          if (v127 == 2)
          {
            v57 = v121;
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)v118, (uint64_t)v130, v121, 24, (uint64_t)v118, v8, v9, v10);
            v7 = v118;
            v6 = 24;
            v32 = 2684354560;
            v56 = v131;
          }
          else
          {
            v57 = v129 & 0x7F;
          }
          if (v56 != 2)
          {
            v58 = v133 & 0x7F;
            goto LABEL_56;
          }
          v58 = v122;
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)v118, (uint64_t)v134, v122, 24, (uint64_t)v118, v8, v9, v10);
          goto LABEL_159;
        }
        if (v127 == 2)
        {
          v57 = v121;
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)v118, (uint64_t)v130, v121, 24, (uint64_t)v118, v8, v9, v10);
        }
        else
        {
          v57 = v129 & 0x7F;
        }
        v58 = v122;
        JSC::MacroAssemblerARM64::load64(*(uint64_t *)v118, v119 | (unint64_t)(v55 << 32), v122, v6, (uint64_t)v7, v8, v9, v10);
LABEL_92:
        v32 = 2684354560;
        v6 = 24;
        v7 = v118;
        goto LABEL_56;
      }
      v75 = (v128 - HIDWORD(v135));
      v57 = v121;
      if (v131)
      {
        JSC::MacroAssemblerARM64::load64(*(uint64_t *)v118, v119 | (unint64_t)(v75 << 32), v121, 24, (uint64_t)v118, v8, v9, v10);
        if (v131 == 2)
        {
          v58 = v122;
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)v118, (uint64_t)v134, v122, v92, v93, v8, v9, v10);
        }
        else
        {
          v58 = v133 & 0x7F;
        }
        goto LABEL_92;
      }
      v58 = v122;
      v76 = v75 - v55;
      if ((int)v75 - (int)v55 < 0)
        v76 = v55 - v75;
      if ((int)v55 >= (int)v75)
        v77 = v75;
      else
        v77 = v55;
      if (v76 == 8)
      {
        if ((v77 & 7) == 0 && (((int)v77 >> 3) + 64) < 0x80)
        {
LABEL_89:
          if ((int)v75 >= (int)v55)
          {
            v78 = v55;
            v79 = (char)v119;
            v80 = v58;
            v81 = v57;
          }
          else
          {
            v78 = v75;
            v79 = (char)v119;
            v80 = v57;
            v81 = v58;
          }
          JSC::MacroAssemblerARM64::loadPair64(*(_DWORD **)v118, v79, v78, v80, v81, v8, v9, v10);
          goto LABEL_92;
        }
        if (v126 == 1)
        {
          HIDWORD(v135) += v77;
          JSC::MacroAssemblerARM64::add64(*(uint64_t *)v118, v77, (char)v119, (char)v119, (uint64_t)v118, v8, v9, v10);
          LODWORD(v75) = v75 - v77;
          LODWORD(v55) = v55 - v77;
          goto LABEL_89;
        }
      }
      JSC::MacroAssemblerARM64::load64(*(uint64_t *)v118, v119 | (unint64_t)(v75 << 32), v121, 24, (uint64_t)v118, v8, v9, v10);
      JSC::MacroAssemblerARM64::load64(*(uint64_t *)v118, v119 | (unint64_t)(v55 << 32), v58, v110, v111, v112, v113, v114);
LABEL_159:
      v7 = v118;
      v6 = 24;
      v32 = 2684354560;
LABEL_56:
      v59 = (v137 - v136);
      v60 = (v54 - v136);
      v61 = v59 - v60;
      if ((int)v59 - (int)v60 < 0)
        v61 = v60 - v59;
      if ((int)v60 >= (int)v59)
        v62 = v59;
      else
        v62 = v60;
      if (v61 == 8)
      {
        if ((v62 & 7) == 0 && (((int)v62 >> 3) + 64) < 0x80)
        {
          v63 = (v137 - v136);
          v64 = v60;
LABEL_65:
          v65 = *(_QWORD *)v118;
          v66 = (char)v120;
          v67 = v120;
          if ((int)v63 >= (int)v64)
          {
            if ((v64 & 7) == 0)
            {
              v74 = (int)v64 >> 3;
              if ((((int)v64 >> 3) + 64) <= 0x7F)
              {
                v69 = *(_DWORD *)(*(_QWORD *)v118 + 200);
                if (v69 + 4 > *(_DWORD *)(*(_QWORD *)v118 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)v118 + 56), v31, 2684354560, 24, (uint64_t)v118, v8, v9, v10);
                  v7 = v118;
                  v6 = 24;
                  v32 = 2684354560;
                  v69 = *(_DWORD *)(v65 + 200);
                }
                v70 = ((v57 & 0x1F) << 10) & 0x7FFF | ((v74 & 0x7F) << 15);
                v71 = v58 & 0x1F | (32 * (char)v67) | 0xA9000000;
                goto LABEL_71;
              }
            }
            v91 = v120 | (unint64_t)(v64 << 32);
            JSC::MacroAssemblerARM64::store64(*(uint64_t *)v118, v58, v91, 24, (uint64_t)v118, v8, v9, v10);
            v88 = v91 + 0x800000000;
            v89 = v57;
          }
          else
          {
            if ((v63 & 7) == 0)
            {
              v68 = (int)v63 >> 3;
              if ((((int)v63 >> 3) + 64) <= 0x7F)
              {
                v69 = *(_DWORD *)(*(_QWORD *)v118 + 200);
                if (v69 + 4 > *(_DWORD *)(*(_QWORD *)v118 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)v118 + 56), v31, 2684354560, 24, (uint64_t)v118, v8, v9, v10);
                  v7 = v118;
                  v6 = 24;
                  v32 = 2684354560;
                  v69 = *(_DWORD *)(v65 + 200);
                }
                v70 = ((v58 & 0x1F) << 10) & 0x7FFF | ((v68 & 0x7F) << 15);
                v71 = v57 & 0x1F | (32 * v66) | 0xA9000000;
LABEL_71:
                *(_DWORD *)(*(_QWORD *)(v65 + 56) + v69) = v70 | v71;
                *(_DWORD *)(v65 + 200) += 4;
LABEL_96:
                v36 = &bmalloc::availableMemory(void)::availableMemory;
                LODWORD(v135) = 0;
                goto LABEL_97;
              }
            }
            v82 = v120 | (unint64_t)(v63 << 32);
            JSC::MacroAssemblerARM64::store64(*(uint64_t *)v118, v57, v82, 24, (uint64_t)v118, v8, v9, v10);
            v88 = v82 + 0x800000000;
            v89 = v58;
          }
          v90 = v65;
LABEL_95:
          JSC::MacroAssemblerARM64::store64(v90, v89, v88, v83, v84, v85, v86, v87);
          v7 = v118;
          v6 = 24;
          v32 = 2684354560;
          goto LABEL_96;
        }
        if (v126 == 1)
        {
          v136 += v62;
          JSC::MacroAssemblerARM64::add64(*(uint64_t *)v118, v62, (char)v120, (char)v120, (uint64_t)v118, v8, v9, v10);
          v7 = v118;
          v6 = 24;
          v32 = 2684354560;
          v63 = (v59 - v62);
          v64 = (v60 - v62);
          goto LABEL_65;
        }
      }
      JSC::MacroAssemblerARM64::store64(*(uint64_t *)v118, v57, v120 | (unint64_t)(v59 << 32), 24, (uint64_t)v118, v8, v9, v10);
      v90 = *(_QWORD *)v118;
      v88 = v120 | (unint64_t)(v60 << 32);
      v89 = v58;
      goto LABEL_95;
    }
  }
  else
  {
    LODWORD(v37) = 0;
  }
  LODWORD(v38) = 0;
LABEL_115:
  if ((_DWORD)v135)
  {
    if (v127 == 1)
    {
      v109 = v129 & 0x7F;
    }
    else
    {
      v109 = v121;
      if (v127)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)v118, (uint64_t)v130, v121, v6, (uint64_t)v7, v8, v9, v10);
      else
        JSC::MacroAssemblerARM64::load64(*(uint64_t *)v118, v119 | ((unint64_t)(v128 - HIDWORD(v135)) << 32), v121, v6, (uint64_t)v7, v8, v9, v10);
    }
    JSC::MacroAssemblerARM64::store64(*(uint64_t *)v118, v109, v120 | ((unint64_t)(v137 - v136) << 32), v6, (uint64_t)v7, v8, v9, v10);
    LODWORD(v135) = 0;
    v36 = &bmalloc::availableMemory(void)::availableMemory;
  }
  if (v38 < v37)
  {
    v38 = v38;
    while (1)
    {
      if (v38 >= *(unsigned int *)*v34)
      {
        __break(0xC471u);
        JUMPOUT(0x1986EE6A0);
      }
      v94 = *(_QWORD *)(*v34 + 8 * v38 + 8);
      if ((v94 & 0x7F) >= 0x40)
        break;
      if (((1 << (v94 & 0x7F)) & 0xA0000000) == 0)
      {
        v95 = (unsigned int *)v36[288];
        if (v95)
        {
          v96 = *v95;
          if (*v95 < 2)
          {
            LODWORD(v97) = 0;
            v99 = *v95;
LABEL_130:
            if (v99)
            {
              if (v96 <= v97)
              {
                __break(0xC471u);
                JUMPOUT(0x1986EE700);
              }
              v104 = &v95[2 * v97];
              v105 = v104[2];
              v95 = v104 + 2;
              if (((v105 ^ v94) & 0x7F) != 0)
                v95 = 0;
            }
            else
            {
              v95 = 0;
            }
          }
          else
          {
            v97 = 0;
            v98 = v95 + 2;
            v99 = *v95;
            while (1)
            {
              v100 = v97 + ((v99 - 1) >> 1);
              if (v96 <= v100)
              {
                __break(0xC471u);
                JUMPOUT(0x1986EE660);
              }
              v101 = *(_QWORD *)&v98[2 * v100];
              if (((v101 ^ v94) & 0x7F) == 0)
                break;
              v102 = (v99 - 1) >> 1;
              v99 -= v102 + 1;
              if ((v94 & 0x7F) >= (v101 & 0x7Fu))
              {
                v103 = v102 + 1;
              }
              else
              {
                v99 = v102;
                v103 = 0;
              }
              v97 += v103;
              if (v99 <= 1)
                goto LABEL_130;
            }
            v95 = &v98[2 * v97 + 2 * ((v99 - 1) >> 1)];
          }
        }
        if ((v94 & 0x60) != 0x20)
        {
          __break(0xC471u);
          JUMPOUT(0x1986EE6C0);
        }
        if (v95)
        {
          v115 = (*(_QWORD *)v95 >> 6) & 0xFFFFFFFCLL;
          v108 = v135;
          v116 = &v118[6 * v135];
          v116[6] = 0;
          v116[7] = v115;
        }
        else
        {
          v106 = v135;
          v107 = &v118[6 * v135];
          v107[6] = 1;
          *((_BYTE *)v107 + 32) = v94 & 0x7F;
          v108 = v106;
        }
        LODWORD(v135) = v108 + 1;
        JSC::AssemblyHelpers::CopySpooler::store<JSC::ARM64Registers::FPRegisterID>((_DWORD **)v118, (v94 >> 6) & 0xFFFFFFFC, v32, v6, (uint64_t)v7, v8, v9, v10);
      }
      if (++v38 == v37)
        goto LABEL_143;
    }
LABEL_142:
    __break(1u);
LABEL_143:
    if ((_DWORD)v135)
    {
      if (v127 == 1)
      {
        v117 = (v129 & 0x7F) - 32;
      }
      else
      {
        if (v127)
        {
          __break(0xC471u);
LABEL_176:
          JUMPOUT(0x1986EDDD4);
        }
        v117 = v123;
        JSC::MacroAssemblerARM64::loadDouble(*(uint64_t *)v118, v119 | ((unint64_t)(v128 - HIDWORD(v135)) << 32), v123, v6, (uint64_t)v7, v8, v9, v10);
      }
      JSC::MacroAssemblerARM64::storeDouble(*(uint64_t *)v118, v117, v120 | ((unint64_t)(v137 - v136) << 32), v6, (uint64_t)v7, v8, v9, v10);
    }
  }
}

void JSC::AssemblyHelpers::emitSaveOrCopyLLIntBaselineCalleeSavesFor(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int *v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int *v32;
  int v33[2];
  unsigned __int8 v34;
  unsigned __int8 v35;
  char v36;
  char v37;
  uint64_t v38;
  int v39;
  int v40;
  char v41;
  JSC::ARM64LogicalImmediate *v42;
  char v43;
  uint64_t v44;
  int v45;
  int v46;
  char v47;
  int *v48;

  v8 = a7;
  v9 = a6;
  v14 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
  if (v14 != -1)
  {
    *(_QWORD *)v33 = &v47;
    v48 = v33;
    std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v48, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
  }
  if (JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result)
    v15 = *(_DWORD *)JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
  else
    v15 = 0;
  JSC::MacroAssemblerARM64::add64(a1, (8 * a3), 29, a5, a5, a6, a7, a8);
  *(_QWORD *)v33 = a1;
  v34 = 29;
  v35 = a5;
  v36 = v9;
  v37 = v8;
  v38 = 0xFFFFFFFFLL;
  v41 = -1;
  v43 = -1;
  v44 = 0;
  v45 = 0;
  if (v15)
  {
    v22 = (unsigned int *)JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
    if (a4 == 1)
    {
      v28 = 0;
      while (v28 < *v22)
      {
        v29 = *(_QWORD *)&v22[2 * v28 + 2];
        if ((v29 & 0x7F) > 0x3F)
          goto LABEL_30;
        if (((1 << (v29 & 0x7F)) & 0xA0000000) == 0)
        {
          if ((v29 & 0x60) != 0)
            goto LABEL_31;
          v30 = (v29 >> 6) & 0xFFFFFFFC;
          v31 = v44;
          LODWORD(v44) = v44 + 1;
          v32 = &v33[6 * v31];
          v32[6] = 0;
          v32[7] = v30;
          JSC::AssemblyHelpers::CopySpooler::store<JSC::ARM64Registers::RegisterID>((_DWORD **)v33, v30, v16, v17, v18, v19, v20, v21);
          v22 = (unsigned int *)JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
        }
        if (v15 == ++v28)
          goto LABEL_14;
      }
    }
    else
    {
      v23 = 0;
      while (v23 < *v22)
      {
        v24 = *(_QWORD *)&v22[2 * v23 + 2];
        if ((v24 & 0x7F) >= 0x40)
          goto LABEL_30;
        if (((1 << (v24 & 0x7F)) & 0xA0000000) == 0)
        {
          if ((v24 & 0x60) != 0)
            goto LABEL_31;
          v25 = v44;
          LODWORD(v44) = v44 + 1;
          v26 = &v33[6 * v25];
          v26[6] = 1;
          *((_BYTE *)v26 + 32) = v24 & 0x7F;
          JSC::AssemblyHelpers::CopySpooler::store<JSC::ARM64Registers::RegisterID>((_DWORD **)v33, (v24 >> 6) & 0xFFFFFFFC, v16, v17, v18, v19, v20, v21);
          v22 = (unsigned int *)JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result;
        }
        if (v15 == ++v23)
          goto LABEL_14;
      }
    }
    __break(0xC471u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x1986EEBCCLL);
  }
LABEL_14:
  if ((_DWORD)v44)
  {
    if (v39 == 1)
    {
      v27 = v41 & 0x7F;
    }
    else
    {
      v27 = v36;
      if (v39)
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)v33, (uint64_t)v42, v36, v17, v18, v19, v20, v21);
      else
        JSC::MacroAssemblerARM64::load64(*(uint64_t *)v33, v34 | ((unint64_t)(v40 - HIDWORD(v44)) << 32), v36, v17, v18, v19, v20, v21);
    }
    JSC::MacroAssemblerARM64::store64(*(uint64_t *)v33, v27, v35 | ((unint64_t)(v46 - v45) << 32), v17, v18, v19, v20, v21);
  }
}

void JSC::AssemblyHelpers::getArityPadding(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  char v12;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;

  v10 = a6;
  v11 = a5;
  v12 = a4;
  if ((a3 | 1) == a3)
    v15 = a3;
  else
    v15 = a3 + 1;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v15, a5, a4, a5, a6, a7, a8);
  v23 = (v12 & 0x1F) << 16;
  if (v11 == 31)
    v24 = v23 | 0x4B2063FF;
  else
    v24 = v11 & 0x1F | (32 * (v11 & 0x1F)) | v23 | 0x4B000000;
  v25 = *(_DWORD *)(a1 + 200);
  if (v25 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = v24;
  v26 = *(_DWORD *)(a1 + 200);
  v27 = v26 + 4;
  *(_DWORD *)(a1 + 200) = v26 + 4;
  v28 = v10 | (32 * v11) | 0x11000400;
  if ((v26 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v27 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = v28;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFELL, v10, v10);
  v36 = v10 & 0x1F;
  v37 = *(_DWORD *)(a1 + 200);
  if (v37 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v37 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v37) = v36 | (32 * v36) | 0xD37DF000;
  v38 = *(_DWORD *)(a1 + 200);
  v39 = v38 + 4;
  *(_DWORD *)(a1 + 200) = v38 + 4;
  if ((_DWORD)a7 == 31)
    v40 = -887069761;
  else
    v40 = a7 & 0x1F | 0xCB0003A0;
  v41 = (v36 << 16) | v40;
  if ((v38 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v29, v30, v31, v32, v33, v34, v35);
    v39 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v39) = v41;
  *(_DWORD *)(a1 + 200) += 4;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986EEE5CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load64(a1, a2 + 8, *(char *)(a1 + 272), v31, v32, v33, v34, v35);
  JSC::MacroAssemblerARM64::branch64(a1, 8, 16, a7, v42, v43, v44, v45, (uint64_t)&v57);
  v51 = v57;
  if (v57 != -1)
  {
    v52 = *(unsigned int *)(a8 + 12);
    if ((_DWORD)v52 == *(_DWORD *)(a8 + 8))
    {
      v53 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a8, (void *)(v52 + 1), (unint64_t)&v57, v46, v47, v48, v49, v50);
      v55 = *v53;
      v54 = (uint64_t *)(v53 + 1);
      v51 = v55;
      LODWORD(v52) = *(_DWORD *)(a8 + 12);
    }
    else
    {
      v54 = &v58;
    }
    v56 = *(_QWORD *)a8 + 12 * v52;
    *(_DWORD *)v56 = v51;
    *(_QWORD *)(v56 + 4) = *v54;
    ++*(_DWORD *)(a8 + 12);
  }
}

unsigned int *JSC::AssemblyHelpers::branchIfResizableOrGrowableSharedTypedArrayIsOutOfBounds@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  __int16 v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x8_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x8_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int i;
  unsigned int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  _DWORD *v125;
  uint64_t *v126;
  int v127;
  uint64_t v128;
  int v130;
  uint64_t v131;
  unsigned int v132[2];
  char v133;
  __int16 v134;
  char v135;
  unsigned int v136[3];
  unsigned int v137[3];
  int v138;
  uint64_t v139;

  *(_QWORD *)a9 = a9 + 16;
  *(_QWORD *)(a9 + 8) = 2;
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986EF2F4);
  }
  v10 = a5;
  v14 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load64(a1, a2 | 0x1000000000, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 16, 0xFFFFFFFFLL, v15, v16, v17, v18, (uint64_t)&v138, v19);
  v25 = v138;
  if (v138 != -1)
  {
    v26 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v26 == *(_DWORD *)(a9 + 8))
    {
      v27 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v26 + 1), (unint64_t)&v138, v20, v21, v22, v23, v24);
      v29 = *v27;
      v28 = (uint64_t *)(v27 + 1);
      v25 = v29;
      LODWORD(v26) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v28 = &v139;
    }
    v30 = *(_QWORD *)a9 + 12 * v26;
    *(_DWORD *)v30 = v25;
    *(_QWORD *)(v30 + 4) = *v28;
    ++*(_DWORD *)(a9 + 12);
  }
  JSC::MacroAssemblerARM64::load8(a1, v14 | 0x2800000000, a3, v20, v21, v22, v23, v24);
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)7, a3, a4);
  JSC::MacroAssemblerARM64::branch32(a1, 9, a4, 2, v31, v32, v33, v34, (uint64_t)v137);
  JSC::MacroAssemblerARM64::load64(a1, v14 | 0x800000000, a4, v35, v36, v37, v38, v39);
  JSC::MacroAssemblerARM64::load64(a1, a4 | 0xFFFFFFF800000000, a4, v40, v41, v42, v43, v44);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)2, a1, 1, a3, v45, v46, v47, v48, (uint64_t)v136, v49);
  JSC::MacroAssemblerARM64::load64(a1, a4 | 0x3000000000, a4, v50, v51, v52, v53, v54);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v55, v56, v57, v58, v59, v60, v61);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v63 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v55, v56, v57, v58, v59, v60, v61);
    v63 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v63) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v64 = 69;
  else
    v64 = 65;
  v132[0] = i;
  v132[1] = 0;
  v133 = v64;
  v134 = 15;
  v135 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v136, a1, v56, v57, v58, v59, v60, v61);
  JSC::MacroAssemblerARM64::load64(a1, a4 | 0x2000000000, a4, v65, v66, v67, v68, v69);
  JSC::MacroAssemblerARM64::loadAcq64(a1, a4 | 0x2000000000, a4, v70, v71, v72, v73, v74);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v132, a1, v75, v76, v77, v78, v79, v80);
  if ((v10 & 0xFF00) != 0)
  {
    JSC::MacroAssemblerARM64::load64(a1, v14 | 0x1800000000, a3, v81, v82, v83, v84, v85);
    if ((v10 - 4) <= 7u)
      JSC::MacroAssemblerARM64::lshift64((_DWORD *)a1, a3, qword_199156E98[(char)(v10 - 4)], a3, v87, v88, v89, v90);
  }
  else
  {
    JSC::MacroAssemblerARM64::load8(a1, v14 | 0x500000000, a3, v81, v82, v83, v84, v85);
    JSC::MacroAssemblerARM64::add64(a1, (uint64_t)&JSC::logElementSizes, a3, a3, v91, v92, v93, v94);
    JSC::MacroAssemblerARM64::load8(a1, a3 | 0xFFFFFFD900000000, a3, v95, v96, v97, v98, v99);
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986EF3A0);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::load64(a1, v14 | 0x1800000000, *(char *)(a1 + 272), v100, v101, v102, v103, v104);
    v107 = *(_DWORD *)(a1 + 200);
    if (v107 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v105, v106, v86, v87, v88, v89, v90);
      v107 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v107) = a3 & 0x1F | ((a3 & 0x1F) << 16) | 0x9AC02200;
    *(_DWORD *)(a1 + 200) += 4;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986EF370);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load64(a1, v14 | 0x2000000000, *(char *)(a1 + 272), v86, v87, v88, v89, v90);
  if ((_DWORD)a3 == 31)
    v115 = -1959762945;
  else
    v115 = a3 & 0x1F | (32 * (a3 & 0x1F)) | 0x8B100000;
  v116 = *(_DWORD *)(a1 + 200);
  if (v116 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v108, v109, v110, v111, v112, v113, v114);
    v116 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v116) = v115;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a1, 8, a3, a4, v111, v112, v113, v114, (uint64_t)&v130);
  v123 = v130;
  if (v130 != -1)
  {
    v124 = *(unsigned int *)(a9 + 12);
    if ((_DWORD)v124 == *(_DWORD *)(a9 + 8))
    {
      v125 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v124 + 1), (unint64_t)&v130, v118, v119, v120, v121, v122);
      v127 = *v125;
      v126 = (uint64_t *)(v125 + 1);
      v123 = v127;
      LODWORD(v124) = *(_DWORD *)(a9 + 12);
    }
    else
    {
      v126 = &v131;
    }
    v128 = *(_QWORD *)a9 + 12 * v124;
    *(_DWORD *)v128 = v123;
    *(_QWORD *)(v128 + 4) = *v126;
    ++*(_DWORD *)(a9 + 12);
  }
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v137, a1, v117, v118, v119, v120, v121, v122);
}

void JSC::AssemblyHelpers::loadTypedArrayByteLengthImpl(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int8x8_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int i;
  unsigned int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int8x8_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  int v121;
  int v122;
  int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  int j;
  unsigned int v139;
  char v140;
  int *v141;
  int *v142;
  int v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  char v155;
  int *v156;
  int *v157;
  int v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  WTF *v181;
  JSC::AssemblerBuffer *v183;
  int v184;
  int v185;
  int v186;
  char v187;
  __int16 v188;
  char v189;
  int v190;
  int v191;
  char v192;
  __int16 v193;
  char v194;
  WTF *v195;
  uint64_t v196;
  _BYTE v197[28];
  unsigned int v198[3];
  unsigned int v199[3];
  unsigned int v200[2];
  char v201;
  __int16 v202;
  char v203;
  unsigned int v204[3];
  unsigned int v205[3];

  v184 = a7;
  v8 = a6;
  v13 = BYTE1(a6);
  v14 = a2;
  v15 = a2 | 0x2800000000;
  JSC::MacroAssemblerARM64::load8(a1, v15, a4, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::and32(a1, (JSC::ARM64LogicalImmediate *)7, a4, a5);
  JSC::MacroAssemblerARM64::branch32(a1, 9, a5, 2, v16, v17, v18, v19, (uint64_t)v205);
  if (v13 && v8 == 12)
  {
    v25 = v14 | 0x3000000000;
  }
  else
  {
    JSC::MacroAssemblerARM64::load64(a1, v14 | 0x800000000, a5, v20, v21, v22, v23, v24);
    v25 = a5 | 0xFFFFFFF800000000;
  }
  JSC::MacroAssemblerARM64::load64(a1, v25, a5, v20, v21, v22, v23, v24);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)2, a1, 1, a4, v26, v27, v28, v29, (uint64_t)v204, v30);
  JSC::MacroAssemblerARM64::load64(a1, a5 | 0x3000000000, a5, v31, v32, v33, v34, v35);
  v183 = (JSC::AssemblerBuffer *)(a1 + 56);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v183, v36, v37, v38, v39, v40, v41, v42);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v44 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v183, v36, v37, v38, v39, v40, v41, v42);
    v44 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v44) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v45 = 69;
  else
    v45 = 65;
  v200[0] = i;
  v200[1] = 0;
  v201 = v45;
  v202 = 15;
  v203 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v204, a1, v37, v38, v39, v40, v41, v42);
  v46 = a5 | 0x2000000000;
  JSC::MacroAssemblerARM64::load64(a1, v46, a5, v47, v48, v49, v50, v51);
  JSC::MacroAssemblerARM64::loadAcq64(a1, v46, a5, v52, v53, v54, v55, v56);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v200, a1, v57, v58, v59, v60, v61, v62);
  if (v13)
  {
    JSC::MacroAssemblerARM64::load64(a1, v14 | 0x1800000000, a4, v63, v64, v65, v66, v67);
    v73 = v184;
    if ((v8 - 4) <= 7u)
      JSC::MacroAssemblerARM64::lshift64((_DWORD *)a1, a4, qword_199156E98[(char)(v8 - 4)], a4, v69, v70, v71, v72);
  }
  else
  {
    JSC::MacroAssemblerARM64::load8(a1, v14 | 0x500000000, a4, v63, v64, v65, v66, v67);
    JSC::MacroAssemblerARM64::add64(a1, (uint64_t)&JSC::logElementSizes, a4, a4, v74, v75, v76, v77);
    JSC::MacroAssemblerARM64::load8(a1, a4 | 0xFFFFFFD900000000, a4, v78, v79, v80, v81, v82);
    v73 = v184;
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986EFDC4);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::load64(a1, v14 | 0x1800000000, *(char *)(a1 + 272), v83, v84, v85, v86, v87);
    v90 = *(_DWORD *)(a1 + 200);
    if (v90 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v183, v88, v89, v68, v69, v70, v71, v72);
      v90 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v90) = a4 & 0x1F | ((a4 & 0x1F) << 16) | 0x9AC02200;
    *(_DWORD *)(a1 + 200) += 4;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986EFC9CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load64(a1, v14 | 0x2000000000, *(char *)(a1 + 272), v68, v69, v70, v71, v72);
  if ((_DWORD)a4 == 31)
    v98 = -1959762945;
  else
    v98 = a4 & 0x1F | (32 * (a4 & 0x1F)) | 0x8B100000;
  v99 = *(_DWORD *)(a1 + 200);
  if (v99 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v183, v91, v92, v93, v94, v95, v96, v97);
    v99 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v99) = v98;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a1, 8, a4, a5, v94, v95, v96, v97, (uint64_t)v199);
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x1986EFCCCLL);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::load8(a1, v15, *(char *)(a1 + 304), v100, v101, v102, v103, v104);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1, 0, 17, v105, v106, v107, v108, (uint64_t)v198, v109);
  v195 = (WTF *)v197;
  v196 = 2;
  if (v73 == 1)
  {
    if ((_DWORD)a3 == 31 || (_DWORD)a5 == 31)
    {
      v117 = a3 | (32 * a5) | ((a4 & 0x1F) << 16);
      v118 = -887070720;
    }
    else
    {
      v117 = ((a4 & 0x1F) << 16) | (32 * (a5 & 0x1F)) | a3 & 0x1F;
      v118 = -889192448;
    }
    v119 = v117 | v118;
    v120 = *(_DWORD *)(a1 + 200);
    if (v120 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v183, v110, v111, v112, v113, v114, v115, v116);
      v120 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v120) = v119;
    *(_DWORD *)(a1 + 200) += 4;
    if (!v13)
      goto LABEL_100;
    if ((v8 - 4) <= 7u)
      JSC::MacroAssemblerARM64::and64(a1, (JSC::ARM64LogicalImmediate *)(-1 << qword_199156E98[(char)(v8 - 4)]), a3);
  }
  else if (v13)
  {
    if ((_DWORD)a3 == 31 || (_DWORD)a5 == 31)
    {
      v121 = a3 | (32 * a5) | ((a4 & 0x1F) << 16);
      v122 = -887070720;
    }
    else
    {
      v121 = ((a4 & 0x1F) << 16) | (32 * (a5 & 0x1F)) | a3 & 0x1F;
      v122 = -889192448;
    }
    v123 = v121 | v122;
    v124 = *(_DWORD *)(a1 + 200);
    if (v124 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v183, v110, v111, v112, v113, v114, v115, v116);
      v124 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v124) = v123;
    *(_DWORD *)(a1 + 200) += 4;
    if ((v8 - 4) <= 7u)
      JSC::MacroAssemblerARM64::urshift64((_DWORD *)a1, a3, qword_199156E98[(char)(v8 - 4)], a3, v113, v114, v115, v116);
  }
  else
  {
    v125 = (a4 & 0x1F) << 16;
    if ((_DWORD)a5 == 31)
      v126 = v125 | 0xCB2063FF;
    else
      v126 = v125 | (32 * (a5 & 0x1F)) | a5 & 0x1F | 0xCB000000;
    v127 = *(_DWORD *)(a1 + 200);
    if (v127 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v183, v110, v111, v112, v113, v114, v115, v116);
      v127 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v127) = v126;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::load8(a1, v14 | 0x500000000, a4, v112, v113, v114, v115, v116);
    JSC::MacroAssemblerARM64::add64(a1, (uint64_t)&JSC::logElementSizes, a4, a4, v128, v129, v130, v131);
    JSC::MacroAssemblerARM64::load8(a1, a4 | 0xFFFFFFD900000000, a4, v132, v133, v134, v135, v136);
    v137 = *(_DWORD *)(a1 + 200);
    if (v137 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v183, v110, v111, v112, v113, v114, v115, v116);
      v137 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v137) = a3 & 0x1F | (32 * (a5 & 0x1F)) | v125 | 0x9AC02400;
    *(_DWORD *)(a1 + 200) += 4;
    v73 = v184;
  }
  for (j = *(_DWORD *)(a1 + 200); j < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v183, v110, v111, v112, v113, v114, v115, v116);
      j = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + j) = -721215457;
    j = *(_DWORD *)(a1 + 200) + 4;
  }
  v139 = j;
  if ((j + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v183, v110, v111, v112, v113, v114, v115, v116);
    v139 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v139) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v140 = 69;
  else
    v140 = 65;
  v190 = j;
  v191 = 0;
  v192 = v140;
  v193 = 15;
  v194 = -1;
  if (j != -1)
  {
    if (HIDWORD(v196) == (_DWORD)v196)
    {
      v141 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v195, (void *)(HIDWORD(v196) + 1), (unint64_t)&v190, v112, v113, v114, v115, v116);
      v143 = *v141;
      v142 = v141 + 1;
      v144 = (char *)v195 + 12 * HIDWORD(v196);
      *(_DWORD *)v144 = v143;
    }
    else
    {
      v142 = &v191;
      v144 = (char *)v195 + 12 * HIDWORD(v196);
      *(_DWORD *)v144 = j;
    }
    *(_QWORD *)(v144 + 4) = *(_QWORD *)v142;
    ++HIDWORD(v196);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v199, a1, v111, v112, v113, v114, v115, v116);
  v152 = *(_DWORD *)(a1 + 200);
  if (v152 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v183, v145, v146, v147, v148, v149, v150, v151);
    v152 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v152) = a3 & 0x1F | 0x52800000;
  v153 = *(_DWORD *)(a1 + 200) + 4;
  for (*(_DWORD *)(a1 + 200) = v153; v153 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v153)
  {
    if ((v153 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v183, v145, v146, v147, v148, v149, v150, v151);
      v153 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v153) = -721215457;
    v153 = *(_DWORD *)(a1 + 200) + 4;
  }
  v154 = v153;
  if ((v153 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v183, v145, v146, v147, v148, v149, v150, v151);
    v154 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v154) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v155 = 69;
  else
    v155 = 65;
  v185 = v153;
  v186 = 0;
  v187 = v155;
  v188 = 15;
  v189 = -1;
  if (v153 != -1)
  {
    if (HIDWORD(v196) == (_DWORD)v196)
    {
      v156 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v195, (void *)(HIDWORD(v196) + 1), (unint64_t)&v185, v147, v148, v149, v150, v151);
      v158 = *v156;
      v157 = v156 + 1;
      v159 = (char *)v195 + 12 * HIDWORD(v196);
      *(_DWORD *)v159 = v158;
    }
    else
    {
      v157 = &v186;
      v159 = (char *)v195 + 12 * HIDWORD(v196);
      *(_DWORD *)v159 = v153;
    }
    *(_QWORD *)(v159 + 4) = *(_QWORD *)v157;
    ++HIDWORD(v196);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v198, a1, v146, v147, v148, v149, v150, v151);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v205, a1, v160, v161, v162, v163, v164, v165);
  JSC::MacroAssemblerARM64::load64(a1, v14 | 0x1800000000, a3, v166, v167, v168, v169, v170);
  if (v73 == 1)
  {
    if (v13)
    {
      if ((v8 - 4) <= 7u)
        JSC::MacroAssemblerARM64::lshift64((_DWORD *)a1, a3, qword_199156E98[(char)(v8 - 4)], a3, v174, v175, v176, v177);
      goto LABEL_74;
    }
LABEL_100:
    std::__throw_bad_optional_access[abi:sn180100]();
    goto LABEL_101;
  }
LABEL_74:
  if (HIDWORD(v196))
  {
    v178 = 0;
    v179 = 0;
    v180 = 12 * HIDWORD(v196);
    while (v179 < HIDWORD(v196))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v195 + v178), a1, v172, v173, v174, v175, v176, v177);
      ++v179;
      v178 += 12;
      if (v180 == v178)
        goto LABEL_78;
    }
LABEL_101:
    __break(0xC471u);
    JUMPOUT(0x1986EFE10);
  }
LABEL_78:
  v181 = v195;
  if (v197 != (_BYTE *)v195 && v195 != 0)
  {
    v195 = 0;
    LODWORD(v196) = 0;
    WTF::fastFree((unint64_t)v181, v171, v172, v173, v174, v175, v176, v177);
  }
}

void JSC::MacroAssemblerARM64::and64(uint64_t a1, JSC::ARM64LogicalImmediate *this, int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;

  v6 = JSC::ARM64LogicalImmediate::create64((uint64_t)this);
  if (v6 == -1)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      return;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (uint64_t)this, *(char *)(a1 + 272), v9, v10, v11, v12, v13);
    v14 = a3 & 0x1F | (32 * (a3 & 0x1F));
    v15 = -1978662912;
  }
  else
  {
    v14 = (32 * (a3 & 0x1F)) | (v6 << 10);
    v15 = a3 | 0x92000000;
  }
  v16 = v14 | v15;
  v19 = *(_DWORD *)(a1 + 200);
  v18 = (unsigned int *)(a1 + 200);
  v17 = v19;
  if (v19 + 4 > *(v18 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 - 36), v7, v8, v9, v10, v11, v12, v13);
    v17 = *v18;
  }
  *(_DWORD *)(*((_QWORD *)v18 - 18) + v17) = v16;
  *v18 += 4;
}

void JSC::AssemblyHelpers::loadTypedArrayByteLength(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblyHelpers::loadTypedArrayByteLengthImpl(a1, a2, a3, a4, a5, a6 | 0x100, 1, a8);
}

void JSC::AssemblyHelpers::loadTypedArrayLength(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblyHelpers::loadTypedArrayByteLengthImpl(a1, a2, a3, a4, a5, a6, 0, a8);
}

void JSC::AssemblyHelpers::checkWasmStackOverflow(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;

  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load64(a1, a2 | 0x1000000000, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    *(_QWORD *)a9 = a9 + 16;
    *(_QWORD *)(a9 + 8) = 2;
    JSC::MacroAssemblerARM64::add64(a1, a3, 17, 17, v13, v14, v15, v16);
    JSC::MacroAssemblerARM64::branch64(a1, 3, a4, 17, v17, v18, v19, v20, (uint64_t)&v32);
    v26 = v32;
    if (v32 != -1)
    {
      v27 = *(unsigned int *)(a9 + 12);
      if ((_DWORD)v27 == *(_DWORD *)(a9 + 8))
      {
        v28 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, (void *)(v27 + 1), (unint64_t)&v32, v21, v22, v23, v24, v25);
        v30 = *v28;
        v29 = (uint64_t *)(v28 + 1);
        v26 = v30;
        LODWORD(v27) = *(_DWORD *)(a9 + 12);
      }
      else
      {
        v29 = &v33;
      }
      v31 = *(_QWORD *)a9 + 12 * v27;
      *(_DWORD *)v31 = v26;
      *(_QWORD *)(v31 + 4) = *v29;
      ++*(_DWORD *)(a9 + 12);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

double JSC::MathICHolder::addJITAddIC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v4 = a2;
  result = 0.0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_BYTE *)(v4 + 56) = 0;
  *(_WORD *)(v4 + 57) = 126;
  *(_QWORD *)(v4 + 59) = 0;
  *(_WORD *)(v4 + 67) = 126;
  *(_QWORD *)(v4 + 69) = 0;
  *(_WORD *)(v4 + 77) = -1;
  *(_BYTE *)(v4 + 79) = -1;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 88) = *a1;
  *a1 = v4;
  return result;
}

double JSC::MathICHolder::addJITMulIC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v4 = a2;
  result = 0.0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_BYTE *)(v4 + 56) = 0;
  *(_WORD *)(v4 + 57) = 126;
  *(_QWORD *)(v4 + 59) = 0;
  *(_WORD *)(v4 + 67) = 126;
  *(_QWORD *)(v4 + 69) = 0;
  *(_WORD *)(v4 + 77) = -1;
  *(_BYTE *)(v4 + 79) = -1;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 88) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

double JSC::MathICHolder::addJITSubIC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v4 = a2;
  result = 0.0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_BYTE *)(v4 + 56) = 0;
  *(_WORD *)(v4 + 57) = 126;
  *(_QWORD *)(v4 + 59) = 0;
  *(_WORD *)(v4 + 67) = 126;
  *(_QWORD *)(v4 + 69) = 0;
  *(_WORD *)(v4 + 77) = -1;
  *(_BYTE *)(v4 + 79) = -1;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 88) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  return result;
}

double JSC::MathICHolder::addJITNegIC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = WTF::fastMalloc((WTF *)0x48);
  *(_QWORD *)v4 = a2;
  result = 0.0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_BYTE *)(v4 + 56) = 0;
  *(_WORD *)(v4 + 57) = -1;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 64) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

void JSC::MathICHolder::adoptMathICs(JSC::MathICHolder *this, JSC::MathICHolder *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;

  v10 = *(_QWORD *)this;
  if (*(_QWORD *)this != *(_QWORD *)a2)
  {
    *(_QWORD *)this = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    while (v10)
    {
      v17 = v10;
      v10 = *(_QWORD *)(v10 + 88);
      v18 = *(unsigned int **)(v17 + 16);
      *(_QWORD *)(v17 + 16) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          v68 = v10;
          v71 = v17;
          v33 = v18;
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v18, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v34 = (unint64_t)v33;
          v10 = v68;
          WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
          v17 = v71;
        }
      }
      WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v11 = *((_QWORD *)this + 1);
  v12 = *((_QWORD *)a2 + 1);
  if (v11 != v12)
  {
    *((_QWORD *)this + 1) = v12;
    *((_QWORD *)a2 + 1) = 0;
    while (v11)
    {
      v25 = v11;
      v11 = *(_QWORD *)(v11 + 88);
      v26 = *(unsigned int **)(v25 + 16);
      *(_QWORD *)(v25 + 16) = 0;
      if (v26)
      {
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          v69 = v11;
          v72 = v25;
          v50 = v26;
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v26, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v51 = (unint64_t)v50;
          v11 = v69;
          WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
          v25 = v72;
        }
      }
      WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = *((_QWORD *)this + 2);
  v14 = *((_QWORD *)a2 + 2);
  if (v13 != v14)
  {
    *((_QWORD *)this + 2) = v14;
    *((_QWORD *)a2 + 2) = 0;
    while (v13)
    {
      v29 = v13;
      v13 = *(_QWORD *)(v13 + 64);
      v30 = *(unsigned int **)(v29 + 16);
      *(_QWORD *)(v29 + 16) = 0;
      if (v30)
      {
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          atomic_store(1u, v30);
          v70 = v13;
          v73 = v29;
          v59 = v30;
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v30, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v60 = (unint64_t)v59;
          v13 = v70;
          WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
          v29 = v73;
        }
      }
      WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v15 = *((_QWORD *)this + 3);
  v16 = *((_QWORD *)a2 + 3);
  if (v15 != v16)
  {
    *((_QWORD *)this + 3) = v16;
    *((_QWORD *)a2 + 3) = 0;
    while (v15)
    {
      v21 = v15;
      v15 = *(_QWORD *)(v15 + 88);
      v22 = *(unsigned int **)(v21 + 16);
      *(_QWORD *)(v21 + 16) = 0;
      if (v22)
      {
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v22, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
        }
      }
      WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::BaselineJITCode::BaselineJITCode(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v10 = *a2;
  v11 = (unsigned int *)a2[1];
  a2[1] = 0;
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    *(_DWORD *)(a1 + 8) = 1;
    *(_WORD *)(a1 + 12) = 3;
    *(_BYTE *)(a1 + 14) = 0;
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)a1 = off_1E35959D8;
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 + 1, v11));
    *(_QWORD *)(a1 + 24) = v11;
    do
    {
      v14 = __ldaxr(v11);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v11));
    if (!v15)
    {
      atomic_store(1u, v11);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
    }
    *(_QWORD *)a1 = off_1E3595A90;
    *(_QWORD *)(a1 + 32) = a3;
    do
    {
      v16 = __ldaxr(v11);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v11));
    if (!v17)
    {
      atomic_store(1u, v11);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 1;
    *(_WORD *)(a1 + 12) = 3;
    *(_BYTE *)(a1 + 14) = 0;
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = a3;
  }
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)a1 = off_1E35956E0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  return a1;
}

void JSC::BaselineJITCode::~BaselineJITCode(JSC::BaselineJITCode *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unint64_t *v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  *(_QWORD *)this = off_1E35956E0;
  v9 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_QWORD *)(v9 + 24);
    if (v11)
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v12)
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(*((_QWORD *)this + 13), a2, a3, a4, a5, a6, a7, a8);
  v20 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v20)
  {
    v22 = (unint64_t *)(v20 + 2);
    v21 = *v20;
    if ((_DWORD)v21)
    {
      v39 = 8 * v21;
      do
      {
        v40 = *v22;
        *v22 = 0;
        if (v40)
          WTF::fastFree(v40, v13, v14, v15, v16, v17, v18, v19);
        ++v22;
        v39 -= 8;
      }
      while (v39);
    }
    WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
  }
  v23 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v23)
  {
    v25 = (unint64_t *)(v23 + 2);
    v24 = *v23;
    if ((_DWORD)v24)
    {
      v41 = 16 * v24;
      do
      {
        v42 = *v25;
        *v25 = 0;
        if (v42)
          WTF::fastFree(v42, v13, v14, v15, v16, v17, v18, v19);
        v25 += 2;
        v41 -= 16;
      }
      while (v41);
    }
    WTF::fastFree((unint64_t)v23, v13, v14, v15, v16, v17, v18, v19);
  }
  v26 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v26)
    WTF::fastFree(v26, v13, v14, v15, v16, v17, v18, v19);
  v27 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v27)
    WTF::fastFree(v27, v13, v14, v15, v16, v17, v18, v19);
  JSC::MathICHolder::~MathICHolder((JSC::BaselineJITCode *)((char *)this + 40), v13, v14, v15, v16, v17, v18, v19);
  *(_QWORD *)this = off_1E35959D8;
  if (!HIBYTE(word_1ECF4C286))
  {
    v35 = *((unsigned __int8 *)this + 12);
    if (v35 == 3)
    {
      if (!(_BYTE)dword_1ECF4C28A)
        goto LABEL_23;
    }
    else if ((v35 & 0xFE) != 4 || !BYTE1(dword_1ECF4C28A))
    {
      goto LABEL_23;
    }
  }
  if (*((_QWORD *)this + 3))
  {
    v51 = *((_QWORD *)this + 3);
    WTF::dataLog<char [24],WTF::PointerDump<JSC::ExecutableMemoryHandle>,char [2]>("Destroying JIT code at ", &v51, "\n");
  }
LABEL_23:
  v36 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v36)
  {
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v36);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v36, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
    }
  }
}

{
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  JSC::BaselineJITCode::~BaselineJITCode(this, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::BaselineJITData::BaselineJITData(JSC::BaselineJITData *this, JSC::CodeBlock *a2, int a3, JSC::CodeBlock *a4)
{
  JSC::BaselineJITData *v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;

  *(_DWORD *)this = (_DWORD)a2;
  *((_DWORD *)this + 1) = a3;
  if ((_DWORD)a2)
  {
    v5 = (JSC::BaselineJITData *)((char *)this - 136 * a2);
    do
    {
      *(_QWORD *)v5 = 2;
      *((_DWORD *)v5 + 24) = 0;
      *(_OWORD *)((char *)v5 + 12) = 0uLL;
      *(_OWORD *)((char *)v5 + 28) = 0uLL;
      *((_DWORD *)v5 + 11) = 0;
      *((_QWORD *)v5 + 8) = 0;
      *((_QWORD *)v5 + 9) = 0;
      *((_QWORD *)v5 + 7) = 0;
      *((_QWORD *)v5 + 13) = 0;
      *((_QWORD *)v5 + 14) = -1;
      *((_WORD *)v5 + 60) = -1;
      *(_DWORD *)((char *)v5 + 122) = 0x10000;
      *((_BYTE *)v5 + 126) = 0;
      *((_BYTE *)v5 + 127) = BYTE12(xmmword_1ECF4C260);
      v6 = *(_WORD *)((_BYTE *)v5 + 129) & 0xFC00;
      *((_BYTE *)v5 + 128) = 0;
      *(_WORD *)((char *)v5 + 129) = v6;
      v5 = (JSC::BaselineJITData *)((char *)v5 + 136);
    }
    while (v5 != this);
  }
  *((_QWORD *)this + 1) = *((_QWORD *)a4 + 1);
  v7 = *((_QWORD *)a4 + 15);
  if (v7)
  {
    v8 = *(unsigned __int8 *)(v7 + 12);
    if (v8 == 3)
    {
      v9 = (((*(_DWORD *)(*((_QWORD *)a4 + 7) + 20) & 0x7FFFFFFF) + 3) & 0xFFFFFFFE) - 2;
LABEL_14:
      *((_QWORD *)this + 2) = 8 * -v9;
      return (uint64_t)this;
    }
    if ((v8 - 4) < 2)
    {
      v10 = (unsigned int *)(v7 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v9 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7) + 200);
      do
      {
        v12 = __ldaxr(v10);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v10));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)(v7 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      }
      goto LABEL_14;
    }
    if (v8 == 2)
    {
      v9 = JSC::LLInt::frameRegisterCountFor(a4, a2);
      goto LABEL_14;
    }
  }
  result = 3046;
  __break(0xC471u);
  return result;
}

uint64_t JSC::BaselineJITPlan::BaselineJITPlan(uint64_t this, JSC::CodeBlock *a2)
{
  uint64_t v2;
  JSC::VM *v3;
  JSC::TypeProfilerLog *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  *(_QWORD *)(this + 8) = 1;
  *(_DWORD *)(this + 16) = 1;
  v2 = *((_QWORD *)a2 + 9);
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = v2;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 40) = a2;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = off_1E3595798;
  *(_QWORD *)(this + 72) = 0;
  v3 = (JSC::VM *)*((_QWORD *)a2 + 9);
  if (*((_QWORD *)v3 + 11646))
  {
    v26 = this;
    v4 = (JSC::TypeProfilerLog *)*((_QWORD *)v3 + 11647);
    WTF::String::String((int **)&v27, (uint64_t)"Preparing for JIT compilation.", 31);
    JSC::TypeProfilerLog::processLogEntries(v4, v3, (const WTF::String *)&v27, v5, v6, v7, v8, v9);
    v17 = v27;
    v27 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::~StringImpl(v17, v10, v11, v12, v13, v14, v15, v16);
        WTF::fastFree(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      else
      {
        *(_DWORD *)v17 -= 2;
      }
    }
    return v26;
  }
  return this;
}

uint64_t JSC::BaselineJITPlan::compileInThreadImpl(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  WTF *v48;
  uint64_t v50;
  void *v51;
  unsigned int *v52;
  uint64_t v53;
  _QWORD *v54;
  WTF *v55;
  uint64_t v56;
  __int16 v57;
  __int16 *v58;
  __int16 v59;
  _BYTE v60[352];
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  char v91;
  __int128 v92;
  __int16 v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v53 = a1[4];
  v54 = a1;
  v55 = 0;
  v56 = 0;
  v58 = &v59;
  v59 = 0;
  v57 = 1;
  v10 = a1[6];
  if (v10)
  {
    if (*(_QWORD *)(v10 + 64))
    {
      __break(0xC471u);
      JUMPOUT(0x1986F0CACLL);
    }
    *(_QWORD *)(v10 + 64) = &v53;
    v11 = (unsigned __int8 *)(v10 + 46);
    v12 = __ldxr((unsigned __int8 *)(v10 + 46));
    if (v12 == 1)
    {
      if (!__stlxr(0, v11))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v11, 1, a3, a4, a5, a6, a7, a8);
  }
LABEL_8:
  v14 = a1[4];
  v13 = a1[5];
  JSC::CCallHelpers::CCallHelpers((JSC::CCallHelpers *)v60, 0);
  v61 = v14;
  v62 = a1;
  v63 = 0;
  v64 = 0;
  if (v13)
  {
    v50 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v13 + 56) + 80) + 12);
    v65 = 0;
    LODWORD(v66) = 0;
    HIDWORD(v66) = v50;
    if ((_DWORD)v50)
    {
      if (v50 >> 30)
      {
        __break(0xC471u);
LABEL_42:
        JUMPOUT(0x1986F0C34);
      }
      v51 = (void *)WTF::fastMalloc((WTF *)(4 * v50));
      LODWORD(v66) = v50;
      v65 = v51;
      if (HIDWORD(v66))
        memset(v51, 255, 4 * HIDWORD(v66));
    }
  }
  else
  {
    v65 = 0;
    v66 = 0;
  }
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v67 = 0u;
  v82 = -1;
  v83 = 0u;
  v84 = 0u;
  *(_QWORD *)&v21 = -1;
  *((_QWORD *)&v21 + 1) = -1;
  v86 = v21;
  v87 = v21;
  v85 = v21;
  v88 = 0xFFFFFFFF00000000;
  v89 = 0u;
  v90 = 0u;
  v91 = *(_BYTE *)(v14 + 93123);
  v92 = 0u;
  v93 = 0;
  v94 = v13;
  v95 = *(_QWORD *)(v13 + 56);
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 1;
  JSC::JIT::compileAndLinkWithoutFinalizing((uint64_t)v60, a2, v15, v16, v17, v18, v19, v20, (uint64_t *)&v52);
  v29 = (uint64_t)v52;
  v52 = 0;
  v30 = (unsigned int *)a1[9];
  a1[9] = v29;
  if (v30)
  {
    v31 = v30 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v30 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 32))(v30);
    }
    v34 = v52;
    v52 = 0;
    if (v34)
    {
      v35 = v34 + 2;
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v34 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 32))(v34);
      }
    }
  }
  JSC::JIT::~JIT((JSC::JIT *)v60, v22, v23, v24, v25, v26, v27, v28);
  if (!(_BYTE)v57)
  {
    __break(0xC471u);
    goto LABEL_42;
  }
  v45 = v54[6];
  if (!v45)
    goto LABEL_27;
  if (*(uint64_t **)(v45 + 64) != &v53)
  {
    __break(0xC471u);
    JUMPOUT(0x1986F0C8CLL);
  }
  v46 = (unsigned __int8 *)(v45 + 46);
  if (__ldaxr((unsigned __int8 *)(v45 + 46)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v46))
  {
    goto LABEL_26;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v46);
LABEL_26:
  *(_QWORD *)(v45 + 64) = 0;
LABEL_27:
  v48 = v55;
  if (v55)
  {
    v55 = 0;
    LODWORD(v56) = 0;
    WTF::fastFree((unint64_t)v48, v38, v39, v40, v41, v42, v43, v44);
  }
  if ((_BYTE)v59)
    return 4;
  else
    return 1;
}

uint64_t JSC::BaselineJITPlan::compileInThreadImpl(JSC::BaselineJITPlan *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::BaselineJITPlan::compileInThreadImpl(this, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::BaselineJITPlan::codeSize(JSC::BaselineJITPlan *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
  return result;
}

BOOL JSC::BaselineJITPlan::isKnownToBeLiveAfterGC(JSC::BaselineJITPlan *this)
{
  return *((_DWORD *)this + 3) != 3;
}

BOOL JSC::BaselineJITPlan::isKnownToBeLiveDuringGC(JSC::BaselineJITPlan *this, JSC::AbstractSlotVisitor *a2)
{
  return *((_DWORD *)this + 3) != 3;
}

uint64_t JSC::BaselineJITPlan::finalize(JSC::BaselineJITPlan *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8x8_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v27;
  uint64_t v28;
  unsigned int *v29;

  v9 = *((_QWORD *)this + 5);
  v10 = (unsigned int *)*((_QWORD *)this + 9);
  if (v10)
  {
    v11 = v10 + 2;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v29 = v10;
  v15 = JSC::JIT::finalizeOnMainThread(v9, (uint64_t)this, &v29, a4, a5, a6, a7, a8);
  v17 = v29;
  v29 = 0;
  if (v17)
  {
    v18 = v17 + 2;
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v17 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 32))(v17);
    }
  }
  if ((_DWORD)v15 == 2)
  {
    __isb(0xFu);
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [88],char [2]>("    JIT compilation successful.", "\n");
    v21 = *((_QWORD *)this + 5);
    JSC::ScriptExecutable::installCode(*(_QWORD *)(v21 + 64), *(JSC::VM **)(v21 + 72), (JSC::CodeBlock *)v21, (*(unsigned __int16 *)(*(_QWORD *)(v21 + 56) + 28) >> 12) & 3, *(_DWORD *)(*(_QWORD *)(v21 + 56) + 20) >> 31, 0, v13, v14, v16);
    v22 = *((_QWORD *)this + 5);
    v23 = *(_QWORD *)(v22 + 56);
    v24 = DWORD1(xmmword_1ECF4C4E4);
    v25 = (*(unsigned __int8 *)(*(_QWORD *)(v23 + 72) + 4) >> 4) & 3;
    if (v25)
    {
      if (v25 == 1)
      {
        if ((SDWORD1(xmmword_1ECF4C4E4) & 0x80000000) == 0)
          v27 = DWORD1(xmmword_1ECF4C4E4);
        else
          v27 = DWORD1(xmmword_1ECF4C4E4) + 1;
        v24 = v27 >> 1;
      }
    }
    else
    {
      v24 = 4 * DWORD1(xmmword_1ECF4C4E4);
    }
    JSC::ExecutionCounter<(JSC::CountingVariant)0>::setNewThreshold(v23 + 168, v24, v22);
  }
  else
  {
    if ((_DWORD)v15)
    {
      __break(0xC471u);
      JUMPOUT(0x1986F0EF4);
    }
    v28 = *((_QWORD *)this + 5);
    if (v28)
      JSC::VM::logEvent<JSC::BaselineJITPlan::finalize(void)::$_0>(*(JSC::Profiler::Database **)(*(_QWORD *)(v28 + 72) + 93016), v28);
    if (BYTE1(qword_1ECF4C332))
      WTF::dataLog<char [88],char [2]>("    JIT compilation failed.", "\n");
    JSC::ExecutionCounter<(JSC::CountingVariant)0>::deferIndefinitely(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 168);
    *(_BYTE *)(*((_QWORD *)this + 5) + 18) |= 4u;
  }
  return v15;
}

void JSC::VM::logEvent<JSC::BaselineJITPlan::finalize(void)::$_0>(JSC::Profiler::Database *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  void (**v25)(WTF::StringPrintStream *__hidden);
  _BYTE *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v25 = off_1E3572250;
  v26 = v28;
  v27 = xmmword_199122F80;
  v28[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v25, "%s", "compilation failed");
  v25[5]((WTF::StringPrintStream *)&v25);
  v12 = v26;
  v11 = v27;
  v24 = 0;
  if (v26)
  {
    if ((unint64_t)v27 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x1986F1074);
    }
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)(v27 + 17));
    *(_DWORD *)v13 = 1;
    v13[1] = v11;
    v24 = (WTF *)v13;
    v14 = v13 + 2;
    memcpy(v13 + 2, v12, v11);
    *((_BYTE *)v14 + v11) = 0;
    v15 = (unint64_t)v26;
    if (v26 == v28)
      goto LABEL_9;
  }
  else
  {
    v15 = 0;
  }
  WTF::fastFree(v15, v4, v5, v6, v7, v8, v9, v10);
LABEL_9:
  JSC::Profiler::Database::logEvent(a1, a2, "delayJITCompile", &v24, v7, v8, v9, v10);
  v23 = v24;
  v24 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
    else
      --*(_DWORD *)v23;
  }
}

uint64_t JSC::BinarySwitch::BinarySwitch(uint64_t a1, char a2, uint64_t a3, unint64_t a4, int a5)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;
  __int128 v24;

  v6 = JSC::globalCounter++;
  *(_DWORD *)a1 = v6;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  v7 = a1 + 24;
  if (v6)
    v8 = v6;
  else
    v8 = 1;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = ((v8 >> 26) | (v8 << 23)) ^ ((v8 ^ (v8 << 23)) >> 17);
  *(_QWORD *)(a1 + 32) = 16;
  *(_QWORD *)(a1 + 296) = a1 + 312;
  *(_QWORD *)(a1 + 304) = 32;
  *(_QWORD *)(a1 + 568) = a1 + 584;
  *(_QWORD *)(a1 + 576) = 32;
  *(_QWORD *)(a1 + 968) = a1 + 984;
  *(_QWORD *)(a1 + 976) = 2;
  *(_DWORD *)(a1 + 1008) = a5;
  *(_BYTE *)(a1 + 1012) = a2;
  *(_QWORD *)(a1 + 1016) = 0xFFFFFFFF00000000;
  if (a4)
  {
    if (a4 >= 0x11)
      WTF::VectorBuffer<JSC::BinarySwitch::Case,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1 + 24, a4);
    v11 = 0;
    v12 = 1;
    do
    {
      *(_QWORD *)&v24 = *(_QWORD *)(a3 + 8 * v11);
      DWORD2(v24) = v12 - 1;
      v13 = *(unsigned int *)(a1 + 36);
      if ((_DWORD)v13 == *(_DWORD *)(a1 + 32))
      {
        v23 = v12;
        WTF::Vector<JSC::BinarySwitch::Case,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::BinarySwitch::Case>(v7, (unint64_t)&v24);
        v12 = v23;
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)(a1 + 24) + 16 * v13) = v24;
        ++*(_DWORD *)(a1 + 36);
      }
      v11 = v12;
    }
    while (a4 > v12++);
    v15 = *(unsigned int *)(a1 + 36);
    v16 = 126 - 2 * __clz(v15);
    if ((_DWORD)v15)
      v17 = v16;
    else
      v17 = 0;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *,false>(*(uint64_t **)(a1 + 24), (uint64_t *)(*(_QWORD *)(a1 + 24) + 16 * v15), v17, 1);
    JSC::BinarySwitch::build((JSC::BinarySwitch *)a1, 0, 0, *(unsigned int *)(a1 + 36), v18, v19, v20, v21);
  }
  return a1;
}

void JSC::BinarySwitch::build(JSC::BinarySwitch *this, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v13;
  WTF *v14;
  unint64_t v15;
  WTF *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  JSC::BinarySwitch *v28;
  char v29;
  unint64_t v30;
  uint64_t j;
  unint64_t v32;
  int v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  JSC::BinarySwitch ***v38;
  JSC::BinarySwitch ***v39;
  uint64_t v40;
  int v41;
  JSC::BinarySwitch ***v42;
  JSC::BinarySwitch ***v43;
  uint64_t v44;
  JSC::BinarySwitch ***v45;
  JSC::BinarySwitch ***v46;
  unsigned int v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  JSC::BinarySwitch ***v51;
  JSC::BinarySwitch ***v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  JSC::BinarySwitch ***v56;
  JSC::BinarySwitch ***v57;
  WTF *v58;
  unsigned int v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  JSC::BinarySwitch ***v63;
  JSC::BinarySwitch ***v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  JSC::BinarySwitch ***v71;
  JSC::BinarySwitch ***v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t i;
  unint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  JSC::BinarySwitch *v104;
  WTF *v105;
  uint64_t v106;
  _BYTE v107[32];
  JSC::BinarySwitch **v108;
  __int128 v109;
  int64x2_t v110;
  __int128 v111;
  uint64_t v112;

  v8 = a4 - a2;
  if ((_DWORD)a4 == (_DWORD)a2)
    goto LABEL_146;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  if (v8 > 3)
  {
    v59 = (a4 + a2) >> 1;
    v60 = v59 - a2;
    if ((v8 & 1) != 0)
    {
      if (v60 + 1 != (_DWORD)a4 - v59)
      {
        __break(0xC471u);
        JUMPOUT(0x1986F1A88);
      }
      v83 = *((_QWORD *)this + 2);
      v84 = *((_QWORD *)this + 1) ^ (*((_QWORD *)this + 1) << 23);
      v85 = (v83 >> 26) ^ (v84 >> 17) ^ v83 ^ v84;
      *((_QWORD *)this + 1) = v83;
      *((_QWORD *)this + 2) = v85;
      v59 += ((_BYTE)v85 + (_BYTE)v83) & 1;
    }
    else if (v60 != (_DWORD)a4 - v59)
    {
      __break(0xC471u);
      JUMPOUT(0x1986F1998);
    }
    if (v59 <= a2)
    {
      __break(0xC471u);
      JUMPOUT(0x1986F1950);
    }
    if (v59 + 1 >= a4)
    {
      __break(0xC471u);
      JUMPOUT(0x1986F1970);
    }
    LODWORD(v108) = 2;
    HIDWORD(v108) = v59;
    v61 = (_QWORD *)((char *)this + 296);
    v62 = *((unsigned int *)this + 77);
    if ((_DWORD)v62 == *((_DWORD *)this + 76))
    {
      v64 = (JSC::BinarySwitch ***)WTF::Vector<JSC::BinarySwitch::BranchCode,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 296, (void *)(v62 + 1), (unint64_t)&v108, a4, a5, a6, a7, a8);
      v63 = (JSC::BinarySwitch ***)(*((_QWORD *)this + 37) + 8 * *((unsigned int *)this + 77));
    }
    else
    {
      v63 = (JSC::BinarySwitch ***)(*v61 + 8 * v62);
      v64 = &v108;
    }
    *v63 = *v64;
    ++*((_DWORD *)this + 77);
    JSC::BinarySwitch::build(this, v59, 1, v9);
    v108 = (JSC::BinarySwitch **)0xFFFFFFFF00000003;
    v70 = *((unsigned int *)this + 77);
    if ((_DWORD)v70 == *((_DWORD *)this + 76))
    {
      v72 = (JSC::BinarySwitch ***)WTF::Vector<JSC::BinarySwitch::BranchCode,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 296, (void *)(v70 + 1), (unint64_t)&v108, v65, v66, v67, v68, v69);
      v71 = (JSC::BinarySwitch ***)(*((_QWORD *)this + 37) + 8 * *((unsigned int *)this + 77));
    }
    else
    {
      v71 = (JSC::BinarySwitch ***)(*v61 + 8 * v70);
      v72 = &v108;
    }
    *v71 = *v72;
    ++*((_DWORD *)this + 77);
    JSC::BinarySwitch::build(this, v11, v10, v59);
    return;
  }
  if (!(_DWORD)a3)
  {
    if (!(_DWORD)a2)
      goto LABEL_5;
    v73 = *((_DWORD *)this + 9);
    if (v73 <= (int)a2 - 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1986F1B7CLL);
    }
    if (v73 > a2)
    {
      if (*(_QWORD *)(*((_QWORD *)this + 3) + 16 * (a2 - 1)) != *(_QWORD *)(*((_QWORD *)this + 3)
                                                                                           + 16 * a2)
                                                                               - 1)
        goto LABEL_5;
      goto LABEL_74;
    }
LABEL_146:
    __break(0xC471u);
    JUMPOUT(0x1986F1884);
  }
  v73 = *((_DWORD *)this + 9);
LABEL_74:
  if (v73 > a4)
  {
    if (v73 <= (int)a4 - 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1986F1B64);
    }
    v74 = *((_QWORD *)this + 3);
    if (*(_QWORD *)(v74 + 16 * (a4 - 1)) == *(_QWORD *)(v74 + 16 * a4) - 1)
    {
      if (v8 == 1)
      {
        v13 = 1;
      }
      else
      {
        LODWORD(v75) = v73 - a2;
        if (v73 >= a2)
          v75 = v75;
        else
          v75 = 0;
        v76 = v8 - 1 - 1;
        v77 = a2;
        do
        {
          if (!v75)
          {
            __break(0xC471u);
            JUMPOUT(0x1986F1B6CLL);
          }
          v78 = v77 + 1;
          if (v73 <= v77 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1986F1B74);
          }
          v79 = *(_QWORD *)(v74 + 16 * v77) + 1;
          v80 = *(_QWORD *)(v74 + 16 * v78);
          v82 = v76-- != 0;
          v13 = v79 == v80;
          if (v79 != v80)
            break;
          --v75;
          v77 = v78;
        }
        while (v82);
      }
      goto LABEL_6;
    }
  }
LABEL_5:
  v13 = 0;
LABEL_6:
  v105 = (WTF *)v107;
  v106 = 8;
  do
  {
    LODWORD(v108) = v11;
    if (HIDWORD(v106) == (_DWORD)v106)
    {
      v102 = v13;
      WTF::Vector<unsigned int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>((uint64_t)&v105, (unint64_t)&v108);
      v13 = v102;
    }
    else
    {
      *((_DWORD *)v105 + HIDWORD(v106)) = v11;
      ++HIDWORD(v106);
    }
    ++v11;
  }
  while (v9 != v11);
  v14 = v105;
  v15 = HIDWORD(v106);
  v104 = this;
  if (HIDWORD(v106) >= 2)
  {
    v16 = (WTF *)((char *)v105 + 4 * HIDWORD(v106) - 4);
    do
    {
      v17 = v15 - 1;
      if (v15 == 1)
        goto LABEL_31;
      if (!v15)
      {
        v108 = &v104;
        v109 = xmmword_199156E50;
        v110 = vdupq_n_s64(2uLL);
        v111 = xmmword_199156E60;
        v112 = -1;
        v103 = v13;
        v30 = std::__independent_bits_engine<JSC::RandomNumberGenerator,unsigned long>::__eval((uint64_t **)&v108);
        v13 = v103;
        goto LABEL_41;
      }
      v18 = __clz(v15);
      if (((v15 << v18) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v19 = 64;
      else
        v19 = 63;
      v20 = v19 - v18;
      v21 = (v19 - v18) >> 5;
      if ((v20 & 0x1F) != 0)
        ++v21;
      v22 = v20 / v21;
      if (v22 >= 0x40)
        v23 = 0;
      else
        v23 = (-1 << (v20 / v21)) & 0x100000000;
      if ((v23 ^ 0x100000000) > v23 / v21)
      {
        v22 = v20 / ++v21;
        if (v22 > 0x3F)
        {
          v23 = 0;
          v24 = v21 - (v20 % v21);
          v93 = 64;
LABEL_117:
          v25 = 0;
          v94 = -v93;
          v27 = -1;
          v26 = 0xFFFFFFFF >> v94;
          goto LABEL_29;
        }
        v23 = (-1 << (v20 / v21)) & 0x100000000;
      }
      v24 = v21 - v20 % v21;
      if (v22 >= 0x3F)
      {
        v93 = v22;
        goto LABEL_117;
      }
      v25 = 0x80000000uLL >> v22 << (v22 + 1);
      if (v22)
        v26 = 0xFFFFFFFF >> -(char)v22;
      else
        v26 = 0;
      v27 = 0xFFFFFFFF >> ~(_BYTE)v22;
      if (v22 >= 0x1F)
        v27 = -1;
LABEL_29:
      v28 = v104;
      v29 = v22 + 1;
      if (v24)
      {
        a2 = *((_QWORD *)v104 + 1);
        a3 = *((_QWORD *)v104 + 2);
        do
        {
          if (v22 >= 0x40)
          {
            for (i = 0; i != v24; ++i)
            {
              do
              {
                v92 = a2 ^ (a2 << 23);
                a2 = a3;
                a3 ^= (a3 >> 26) ^ (v92 >> 17) ^ v92;
              }
              while (v23 <= (a3 + a2));
            }
            v30 = v26 & ((_DWORD)a3 + (_DWORD)a2);
          }
          else
          {
            v30 = 0;
            for (j = 0; j != v24; ++j)
            {
              do
              {
                v32 = a2 ^ (a2 << 23);
                a2 = a3;
                a3 ^= (a3 >> 26) ^ (v32 >> 17) ^ v32;
              }
              while (v23 <= (a3 + a2));
              a5 = v26 & ((_DWORD)a3 + (_DWORD)a2);
              v30 = (v30 << v22) + a5;
            }
          }
          a4 = v24;
          if (v24 < v21)
          {
            do
            {
              do
              {
                v86 = a2 ^ (a2 << 23);
                a2 = a3;
                a3 ^= (a3 >> 26) ^ (v86 >> 17) ^ v86;
              }
              while (v25 <= (a3 + a2));
              v87 = v30 << v29;
              if (v22 >= 0x3F)
                v87 = 0;
              a5 = v27 & ((_DWORD)a3 + (_DWORD)a2);
              v30 = v87 + a5;
              ++a4;
            }
            while (a4 != v21);
          }
        }
        while (v30 >= v15);
        *((_QWORD *)v104 + 1) = a2;
        *((_QWORD *)v28 + 2) = a3;
        goto LABEL_41;
      }
      if (v21)
      {
        v95 = *((_QWORD *)v104 + 1);
        v96 = *((_QWORD *)v104 + 2);
        if (v22 >= 0x3F)
        {
          v100 = 0;
          while (1)
          {
            do
            {
              v101 = v95 ^ (v95 << 23);
              v95 = v96;
              v96 ^= (v96 >> 26) ^ (v101 >> 17) ^ v101;
            }
            while (v25 <= (v96 + v95));
            if (++v100 == v21)
            {
              v100 = 0;
              v30 = v27 & ((_DWORD)v96 + (_DWORD)v95);
              if (v15 > v30)
                break;
            }
          }
        }
        else
        {
          v97 = 0;
          v98 = 0;
          while (1)
          {
            do
            {
              v99 = v95 ^ (v95 << 23);
              v95 = v96;
              v96 ^= (v96 >> 26) ^ (v99 >> 17) ^ v99;
            }
            while (v25 <= (v96 + v95));
            v30 = (v97 << v29) + (v27 & ((_DWORD)v96 + (_DWORD)v95));
            ++v98;
            v97 = v30;
            if (v98 == v21)
            {
              v97 = 0;
              v98 = 0;
              if (v30 < v15)
                break;
            }
          }
        }
        *((_QWORD *)v104 + 1) = v95;
        *((_QWORD *)v28 + 2) = v96;
LABEL_41:
        if (v30)
        {
          v33 = *(_DWORD *)v14;
          *(_DWORD *)v14 = *((_DWORD *)v14 + v30);
          *((_DWORD *)v14 + v30) = v33;
        }
      }
LABEL_31:
      v14 = (WTF *)((char *)v14 + 4);
      v15 = v17;
    }
    while (v14 < v16);
  }
  if (v8 != 1)
  {
    v34 = 0;
    v35 = (_QWORD *)((char *)this + 296);
    do
    {
      if (v34 >= HIDWORD(v106))
      {
        __break(0xC471u);
        JUMPOUT(0x1986F1B44);
      }
      v36 = *((_DWORD *)v105 + v34);
      LODWORD(v108) = 1;
      HIDWORD(v108) = v36;
      v37 = *((unsigned int *)this + 77);
      if ((_DWORD)v37 == *((_DWORD *)this + 76))
      {
        v88 = v13;
        v39 = (JSC::BinarySwitch ***)WTF::Vector<JSC::BinarySwitch::BranchCode,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 296, (void *)(v37 + 1), (unint64_t)&v108, a4, a5, v13, a7, a8);
        v13 = v88;
        v38 = (JSC::BinarySwitch ***)(*((_QWORD *)this + 37) + 8 * *((unsigned int *)this + 77));
      }
      else
      {
        v38 = (JSC::BinarySwitch ***)(*v35 + 8 * v37);
        v39 = &v108;
      }
      *v38 = *v39;
      v40 = (*((_DWORD *)this + 77) + 1);
      *((_DWORD *)this + 77) = v40;
      if (v34 >= HIDWORD(v106))
      {
        __break(0xC471u);
        JUMPOUT(0x1986F1B4CLL);
      }
      v41 = *((_DWORD *)v105 + v34);
      LODWORD(v108) = 4;
      HIDWORD(v108) = v41;
      if ((_DWORD)v40 == *((_DWORD *)this + 76))
      {
        v89 = v13;
        v43 = (JSC::BinarySwitch ***)WTF::Vector<JSC::BinarySwitch::BranchCode,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 296, (void *)(v40 + 1), (unint64_t)&v108, a4, a5, v13, a7, a8);
        v13 = v89;
        v42 = (JSC::BinarySwitch ***)(*((_QWORD *)this + 37) + 8 * *((unsigned int *)this + 77));
      }
      else
      {
        v42 = (JSC::BinarySwitch ***)(*v35 + 8 * v40);
        v43 = &v108;
      }
      *v42 = *v43;
      v44 = (*((_DWORD *)this + 77) + 1);
      *((_DWORD *)this + 77) = v44;
      v108 = (JSC::BinarySwitch **)0xFFFFFFFF00000003;
      if ((_DWORD)v44 == *((_DWORD *)this + 76))
      {
        v90 = v13;
        v46 = (JSC::BinarySwitch ***)WTF::Vector<JSC::BinarySwitch::BranchCode,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 296, (void *)(v44 + 1), (unint64_t)&v108, a4, a5, v13, a7, a8);
        v13 = v90;
        v45 = (JSC::BinarySwitch ***)(*((_QWORD *)this + 37) + 8 * *((unsigned int *)this + 77));
      }
      else
      {
        v45 = (JSC::BinarySwitch ***)(*v35 + 8 * v44);
        v46 = &v108;
      }
      *v45 = *v46;
      ++*((_DWORD *)this + 77);
      ++v34;
    }
    while (v8 - 1 != v34);
  }
  v47 = HIDWORD(v106);
  if ((v13 & 1) == 0)
  {
    if (!HIDWORD(v106))
    {
      __break(0xC471u);
      JUMPOUT(0x1986F1B5CLL);
    }
    v48 = *((_DWORD *)v105 + HIDWORD(v106) - 1);
    LODWORD(v108) = 0;
    HIDWORD(v108) = v48;
    v49 = (_QWORD *)((char *)this + 296);
    v50 = *((unsigned int *)this + 77);
    if ((_DWORD)v50 == *((_DWORD *)this + 76))
    {
      v52 = (JSC::BinarySwitch ***)WTF::Vector<JSC::BinarySwitch::BranchCode,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v49, (void *)(v50 + 1), (unint64_t)&v108, a4, a5, v13, a7, a8);
      v51 = (JSC::BinarySwitch ***)(*((_QWORD *)this + 37) + 8 * *((unsigned int *)this + 77));
    }
    else
    {
      v51 = (JSC::BinarySwitch ***)(*v49 + 8 * v50);
      v52 = &v108;
    }
    *v51 = *v52;
    ++*((_DWORD *)this + 77);
    v47 = HIDWORD(v106);
  }
  if (!v47)
  {
    __break(0xC471u);
    JUMPOUT(0x1986F1B54);
  }
  v53 = *((_DWORD *)v105 + v47 - 1);
  LODWORD(v108) = 4;
  HIDWORD(v108) = v53;
  v54 = (_QWORD *)((char *)this + 296);
  v55 = *((unsigned int *)this + 77);
  if ((_DWORD)v55 == *((_DWORD *)this + 76))
  {
    v57 = (JSC::BinarySwitch ***)WTF::Vector<JSC::BinarySwitch::BranchCode,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v54, (void *)(v55 + 1), (unint64_t)&v108, a4, a5, v13, a7, a8);
    v56 = (JSC::BinarySwitch ***)(*((_QWORD *)this + 37) + 8 * *((unsigned int *)this + 77));
  }
  else
  {
    v56 = (JSC::BinarySwitch ***)(*v54 + 8 * v55);
    v57 = &v108;
  }
  *v56 = *v57;
  ++*((_DWORD *)this + 77);
  v58 = v105;
  if (v107 != (_BYTE *)v105)
  {
    if (v105)
    {
      v105 = 0;
      LODWORD(v106) = 0;
      WTF::fastFree((unint64_t)v58, (void *)a2, a3, a4, a5, v13, a7, a8);
    }
  }
}

void JSC::BinarySwitch::~BinarySwitch(JSC::BinarySwitch *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::BinarySwitch *v9;
  JSC::BinarySwitch *v11;
  JSC::BinarySwitch *v13;
  JSC::BinarySwitch *v15;

  v9 = (JSC::BinarySwitch *)*((_QWORD *)this + 121);
  if ((JSC::BinarySwitch *)((char *)this + 984) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 121) = 0;
    *((_DWORD *)this + 244) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = (JSC::BinarySwitch *)*((_QWORD *)this + 71);
  if ((JSC::BinarySwitch *)((char *)this + 584) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 71) = 0;
    *((_DWORD *)this + 144) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = (JSC::BinarySwitch *)*((_QWORD *)this + 37);
  if ((JSC::BinarySwitch *)((char *)this + 312) != v13 && v13 != 0)
  {
    *((_QWORD *)this + 37) = 0;
    *((_DWORD *)this + 76) = 0;
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = (JSC::BinarySwitch *)*((_QWORD *)this + 3);
  if ((JSC::BinarySwitch *)((char *)this + 40) != v15)
  {
    if (v15)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::BinarySwitch::advance(JSC::BinarySwitch *this, JSC::MacroAssembler *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int i;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int j;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  uint64_t *v48;
  int v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  char v63;
  _QWORD *v64;
  uint64_t v65;
  int v67;
  uint64_t v68;
  unsigned int k;
  int v70;
  int v71;
  int v72;
  int v73;
  int *v74;
  int *v75;
  int v76;
  _DWORD *v77;
  _QWORD *v78;
  _DWORD *v79;
  __int128 *v80;
  _DWORD *v81;
  _DWORD *v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  JSC::MacroAssembler *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t *v96;
  int v97;
  _DWORD *v98;
  uint64_t *v99;
  uint64_t v100;
  _DWORD *v101;
  int v102;
  int v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  _QWORD *v118;
  _QWORD *v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  char v124;
  __int16 v125;
  char v126;
  _DWORD v127[2];
  char v128;
  __int16 v129;
  char v130;
  __int128 v131;
  uint64_t v132;

  if (*((_DWORD *)this + 9))
  {
    v10 = *((_DWORD *)this + 254);
    v11 = *((_DWORD *)this + 77);
    if (v11 != v10)
    {
      *((_DWORD *)this + 254) = v10 + 1;
      if (v11 <= v10)
      {
LABEL_147:
        __break(0xC471u);
        JUMPOUT(0x1986F2744);
      }
      v12 = (_QWORD *)((char *)this + 568);
      while (1)
      {
        v13 = *((_QWORD *)this + 37);
        switch(*(_DWORD *)(v13 + 8 * v10))
        {
          case 0:
            v28 = *((_DWORD *)this + 252);
            if (v28)
            {
              if (v28 != 1)
                goto LABEL_46;
              v92 = *(unsigned int *)(v13 + 8 * v10 + 4);
              if (*((_DWORD *)this + 9) <= v92)
              {
                __break(0xC471u);
                JUMPOUT(0x1986F2774);
              }
              JSC::MacroAssemblerARM64::branch64((uint64_t)a2, 1, *((char *)this + 1012), *(_QWORD *)(*((_QWORD *)this + 3) + 16 * v92), a5, a6, a7, a8, (uint64_t)&v120);
              if (v120 == -1)
                goto LABEL_46;
              v93 = (_QWORD *)((char *)this + 968);
              v94 = *((unsigned int *)this + 245);
              if ((_DWORD)v94 == *((_DWORD *)this + 244))
              {
                v95 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v93, (void *)(v94 + 1), (unint64_t)&v120, a4, a5, a6, a7, a8);
                v97 = *v95;
                v96 = (uint64_t *)(v95 + 1);
                v98 = (_DWORD *)(*((_QWORD *)this + 121) + 12 * *((unsigned int *)this + 245));
                *v98 = v97;
                v99 = (uint64_t *)(v98 + 1);
              }
              else
              {
                v101 = (_DWORD *)(*v93 + 12 * v94);
                *v101 = v120;
                v99 = (uint64_t *)(v101 + 1);
                v96 = &v121;
              }
              *v99 = *v96;
              goto LABEL_49;
            }
            v29 = *(unsigned int *)(v13 + 8 * v10 + 4);
            if (*((_DWORD *)this + 9) <= v29)
            {
              __break(0xC471u);
              JUMPOUT(0x1986F275CLL);
            }
            v30 = *((char *)this + 1012);
            v31 = *(_QWORD *)(*((_QWORD *)this + 3) + 16 * v29);
            if (!(_DWORD)v31)
            {
              JSC::MacroAssemblerARM64::branchTest32((uint64_t)a2, 1, *((char *)this + 1012), *((char *)this + 1012), a5, a6, a7, a8, (uint64_t)&v122);
              v60 = v122;
              goto LABEL_68;
            }
            if (v31 < 0x1000)
            {
              v70 = 0;
            }
            else
            {
              v84 = -(int)v31;
              if (-(int)v31 < 0x1000)
              {
                v70 = 0;
                v71 = 0;
                goto LABEL_92;
              }
              if ((v31 & 0xFFF) != 0)
              {
LABEL_113:
                if (!*((_BYTE *)a2 + 212))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1986F26ECLL);
                }
                JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v31, (uint64_t)a2 + 264, a4, a5, a6, a7, a8);
                if (v30 == 31)
                  v57 = 1798333439;
                else
                  v57 = (32 * (v30 & 0x1F)) | 0x6B10001F;
                v55 = *((_DWORD *)a2 + 50);
                if (v55 + 4 > *((_DWORD *)a2 + 48))
                {
LABEL_117:
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssembler *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  v55 = *((_DWORD *)a2 + 50);
                }
LABEL_59:
                *(_DWORD *)(*((_QWORD *)a2 + 7) + v55) = v57;
                v58 = *((_DWORD *)a2 + 50) + 4;
                *((_DWORD *)a2 + 50) = v58;
                if (*((_BYTE *)a2 + 328))
                {
                  while ((signed int)v58 < *((_DWORD *)a2 + 13))
                  {
                    if (v58 + 4 > *((_DWORD *)a2 + 48))
                    {
                      JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssembler *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                      v58 = *((_DWORD *)a2 + 50);
                    }
                    *(_DWORD *)(*((_QWORD *)a2 + 7) + v58) = -721215457;
                    v58 = *((_DWORD *)a2 + 50) + 4;
                    *((_DWORD *)a2 + 50) = v58;
                  }
                  *((_DWORD *)a2 + 52) = 0;
                }
                if (v58 + 4 > *((_DWORD *)a2 + 48))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssembler *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  v58 = *((_DWORD *)a2 + 50);
                }
                *(_DWORD *)(*((_QWORD *)a2 + 7) + v58) = 1409286145;
                v59 = *((_DWORD *)a2 + 50);
                v60 = v59 + 4;
                *((_DWORD *)a2 + 50) = v59 + 4;
                v61 = v59 + 8;
                v62 = v59 + 4;
                if (v61 > *((_DWORD *)a2 + 48))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssembler *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  v62 = *((_DWORD *)a2 + 50);
                }
                *(_DWORD *)(*((_QWORD *)a2 + 7) + v62) = -721215457;
                *((_DWORD *)a2 + 50) += 4;
                if (*((_BYTE *)a2 + 328))
                  v63 = -122;
                else
                  v63 = -126;
                v122 = v60;
                v123 = 0;
                v124 = v63;
                v125 = 1;
                v126 = -1;
LABEL_68:
                if (v60 == -1)
                  goto LABEL_46;
                v64 = (_QWORD *)((char *)this + 968);
                v65 = *((unsigned int *)this + 245);
                if ((_DWORD)v65 == *((_DWORD *)this + 244))
                {
                  v74 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v64, (void *)(v65 + 1), (unint64_t)&v122, a4, a5, a6, a7, a8);
                  v76 = *v74;
                  v75 = v74 + 1;
                  v77 = (_DWORD *)(*((_QWORD *)this + 121) + 12 * *((unsigned int *)this + 245));
                  *v77 = v76;
                  v78 = v77 + 1;
                }
                else
                {
                  v79 = (_DWORD *)(*v64 + 12 * v65);
                  *v79 = v60;
                  v78 = v79 + 1;
                  v75 = &v123;
                }
                *v78 = *(_QWORD *)v75;
LABEL_49:
                ++*((_DWORD *)this + 245);
                goto LABEL_46;
              }
              v103 = (int)v31 >> 12;
              if (BYTE3(v31))
              {
                v84 = -v103;
                if (-v103 >= 0x1000)
                  goto LABEL_113;
                v71 = 0;
                v70 = 1;
LABEL_92:
                LOWORD(v31) = v84;
LABEL_53:
                v54 = ((v31 & 0xFFF) << 10) | (32 * v30);
                v55 = *((_DWORD *)a2 + 50);
                if (v71)
                  v83 = 1895825439;
                else
                  v83 = 822083615;
                if (v70)
                  v56 = v83 | 0x400000;
                else
                  v56 = v83;
                v57 = v54 | v56;
                if (v55 + 4 > *((_DWORD *)a2 + 48))
                  goto LABEL_117;
                goto LABEL_59;
              }
              v70 = 1;
              LODWORD(v31) = (int)v31 >> 12;
            }
            v71 = 1;
            goto LABEL_53;
          case 1:
            v20 = *((_DWORD *)this + 252);
            if (v20)
            {
              if (v20 != 1)
                goto LABEL_46;
              v87 = *(unsigned int *)(v13 + 8 * v10 + 4);
              if (*((_DWORD *)this + 9) <= v87)
              {
                __break(0xC471u);
                JUMPOUT(0x1986F276CLL);
              }
              v88 = *((char *)this + 1012);
              v89 = *(_QWORD *)(*((_QWORD *)this + 3) + 16 * v87);
              v90 = a2;
              v91 = 1;
LABEL_97:
              JSC::MacroAssemblerARM64::branch64((uint64_t)v90, v91, v88, v89, a5, a6, a7, a8, (uint64_t)&v131);
LABEL_50:
              v53 = *((unsigned int *)this + 145);
              if ((_DWORD)v53 == *((_DWORD *)this + 144))
              {
                v80 = (__int128 *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 568, (void *)(v53 + 1), (unint64_t)&v131, a4, a5, a6, a7, a8);
                v81 = (_DWORD *)(*((_QWORD *)this + 71) + 12 * *((unsigned int *)this + 145));
                *v81 = *(_DWORD *)v80;
                v51 = v81 + 1;
              }
              else
              {
                v82 = (_DWORD *)(*v12 + 12 * v53);
                *v82 = v131;
                v51 = v82 + 1;
                v80 = &v131;
              }
              v52 = *(_QWORD *)((char *)v80 + 4);
              goto LABEL_45;
            }
            v21 = *(unsigned int *)(v13 + 8 * v10 + 4);
            if (*((_DWORD *)this + 9) <= v21)
            {
              __break(0xC471u);
              JUMPOUT(0x1986F2754);
            }
            v22 = *((char *)this + 1012);
            v23 = *(_QWORD *)(*((_QWORD *)this + 3) + 16 * v21);
            if ((_DWORD)v23)
            {
              if (v23 < 0x1000)
              {
                v24 = 0;
                goto LABEL_15;
              }
              v73 = -(int)v23;
              if (-(int)v23 < 0x1000)
              {
                v24 = 0;
                v25 = 0;
                goto LABEL_86;
              }
              if ((v23 & 0xFFF) != 0)
              {
LABEL_104:
                if (!*((_BYTE *)a2 + 212))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1986F26CCLL);
                }
                JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v23, (uint64_t)a2 + 264, a4, a5, a6, a7, a8);
                if (v22 == 31)
                  v38 = 1798333439;
                else
                  v38 = (32 * (v22 & 0x1F)) | 0x6B10001F;
                v27 = *((_DWORD *)a2 + 50);
                if (v27 + 4 > *((_DWORD *)a2 + 48))
                  goto LABEL_108;
              }
              else
              {
                v102 = (int)v23 >> 12;
                if (BYTE3(v23))
                {
                  v73 = -v102;
                  if (-v102 >= 0x1000)
                    goto LABEL_104;
                  v25 = 0;
                  v24 = 1;
LABEL_86:
                  LOWORD(v23) = v73;
                }
                else
                {
                  v24 = 1;
                  LODWORD(v23) = (int)v23 >> 12;
LABEL_15:
                  v25 = 1;
                }
                v26 = ((v23 & 0xFFF) << 10) | (32 * v22);
                v27 = *((_DWORD *)a2 + 50);
                if (v25)
                  v72 = 1895825439;
                else
                  v72 = 822083615;
                if (v24)
                  v37 = v72 | 0x400000;
                else
                  v37 = v72;
                v38 = v26 | v37;
                if (v27 + 4 > *((_DWORD *)a2 + 48))
                {
LABEL_108:
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssembler *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  v27 = *((_DWORD *)a2 + 50);
                }
              }
              *(_DWORD *)(*((_QWORD *)a2 + 7) + v27) = v38;
              v39 = *((_DWORD *)a2 + 50) + 4;
              *((_DWORD *)a2 + 50) = v39;
              if (*((_BYTE *)a2 + 328))
              {
                while ((signed int)v39 < *((_DWORD *)a2 + 13))
                {
                  if (v39 + 4 > *((_DWORD *)a2 + 48))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssembler *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                    v39 = *((_DWORD *)a2 + 50);
                  }
                  *(_DWORD *)(*((_QWORD *)a2 + 7) + v39) = -721215457;
                  v39 = *((_DWORD *)a2 + 50) + 4;
                  *((_DWORD *)a2 + 50) = v39;
                }
                *((_DWORD *)a2 + 52) = 0;
              }
              if (v39 + 4 > *((_DWORD *)a2 + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssembler *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                v39 = *((_DWORD *)a2 + 50);
              }
              *(_DWORD *)(*((_QWORD *)a2 + 7) + v39) = 1409286145;
              v40 = *((_DWORD *)a2 + 50);
              v41 = v40 + 4;
              *((_DWORD *)a2 + 50) = v40 + 4;
              v42 = v40 + 8;
              v43 = v40 + 4;
              if (v42 > *((_DWORD *)a2 + 48))
              {
                JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssembler *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                v43 = *((_DWORD *)a2 + 50);
              }
              *(_DWORD *)(*((_QWORD *)a2 + 7) + v43) = -721215457;
              *((_DWORD *)a2 + 50) += 4;
              if (*((_BYTE *)a2 + 328))
                v44 = -122;
              else
                v44 = -126;
              *(_QWORD *)&v131 = v41;
              BYTE8(v131) = v44;
              *(_WORD *)((char *)&v131 + 9) = 1;
              BYTE11(v131) = -1;
              goto LABEL_41;
            }
            JSC::MacroAssemblerARM64::branchTest32((uint64_t)a2, 1, *((char *)this + 1012), *((char *)this + 1012), a5, a6, a7, a8, (uint64_t)&v131);
LABEL_41:
            v45 = *((unsigned int *)this + 145);
            if ((_DWORD)v45 == *((_DWORD *)this + 144))
            {
              v46 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 568, (void *)(v45 + 1), (unint64_t)&v131, a4, a5, a6, a7, a8);
              v47 = (_DWORD *)(*((_QWORD *)this + 71) + 12 * *((unsigned int *)this + 145));
              v50 = *v46;
              v48 = (uint64_t *)(v46 + 1);
              v49 = v50;
            }
            else
            {
              v48 = (uint64_t *)((char *)&v131 + 4);
              v47 = (_DWORD *)(*v12 + 12 * v45);
              v49 = v131;
            }
            *v47 = v49;
            v51 = v47 + 1;
            v52 = *v48;
LABEL_45:
            *v51 = v52;
            ++*((_DWORD *)this + 145);
LABEL_46:
            v10 = *((_DWORD *)this + 254);
            *((_DWORD *)this + 254) = v10 + 1;
            if (*((_DWORD *)this + 77) <= v10)
              goto LABEL_147;
            break;
          case 2:
            v67 = *((_DWORD *)this + 252);
            if (v67)
            {
              if (v67 != 1)
                goto LABEL_46;
              v100 = *(unsigned int *)(v13 + 8 * v10 + 4);
              if (*((_DWORD *)this + 9) <= v100)
              {
                __break(0xC471u);
                JUMPOUT(0x1986F277CLL);
              }
              v88 = *((char *)this + 1012);
              v89 = *(_QWORD *)(*((_QWORD *)this + 3) + 16 * v100);
              v90 = a2;
              v91 = 11;
              goto LABEL_97;
            }
            v68 = *(unsigned int *)(v13 + 8 * v10 + 4);
            if (*((_DWORD *)this + 9) <= v68)
            {
              __break(0xC471u);
              JUMPOUT(0x1986F2764);
            }
            JSC::MacroAssemblerARM64::branch32((uint64_t)a2, 11, *((char *)this + 1012), *(unsigned int *)(*((_QWORD *)this + 3) + 16 * v68), a5, a6, a7, a8, (uint64_t)&v131);
            goto LABEL_50;
          case 3:
            v14 = *((_DWORD *)this + 145);
            if (!v14)
            {
              __break(0xC471u);
              JUMPOUT(0x1986F274CLL);
            }
            v15 = (_QWORD *)((char *)a2 + 32);
            v16 = *((_QWORD *)this + 71) + 12 * v14;
            v17 = *(unsigned int *)(v16 - 12);
            v18 = *(_QWORD *)(v16 - 8);
            *((_DWORD *)this + 145) = v14 - 1;
            *((_DWORD *)a2 + 52) = 0;
            switch(BYTE4(v18))
            {
              case 0x83:
              case 0x87:
                for (i = *((_DWORD *)a2 + 50); (signed int)i < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = i)
                {
                  if (i + 4 > *((_DWORD *)a2 + 48))
                  {
                    v118 = v15;
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssembler *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                    v15 = v118;
                    i = *((_DWORD *)a2 + 50);
                  }
                  *(_DWORD *)(*((_QWORD *)a2 + 7) + i) = -721215457;
                  i = *((_DWORD *)a2 + 50) + 4;
                }
                *(_QWORD *)&v131 = v17;
                *((_QWORD *)&v131 + 1) = i;
                BYTE3(v132) = BYTE5(v18) & 0xF;
                *(_WORD *)((char *)&v132 + 1) = BYTE4(v18);
                WORD2(v132) = ((v18 & 0xFF000000000000) != 0) << 6;
                LOBYTE(v132) = HIBYTE(v18);
                break;
              case 0x84:
              case 0x88:
                for (j = *((_DWORD *)a2 + 50); (signed int)j < *((_DWORD *)a2 + 13); *((_DWORD *)a2 + 50) = j)
                {
                  if (j + 4 > *((_DWORD *)a2 + 48))
                  {
                    v119 = v15;
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssembler *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                    v15 = v119;
                    j = *((_DWORD *)a2 + 50);
                  }
                  *(_DWORD *)(*((_QWORD *)a2 + 7) + j) = -721215457;
                  j = *((_DWORD *)a2 + 50) + 4;
                }
                *(_QWORD *)&v131 = v17;
                *((_QWORD *)&v131 + 1) = j;
                BYTE3(v132) = BYTE5(v18) & 0xF;
                *(_WORD *)((char *)&v132 + 1) = BYTE4(v18);
                WORD2(v132) = v18 & 0x3F;
                LOBYTE(v132) = HIBYTE(v18);
                break;
              default:
                for (k = *((_DWORD *)a2 + 50); (signed int)k < *((_DWORD *)a2 + 13); v15 = (_QWORD *)((char *)a2 + 32))
                {
                  if (k + 4 > *((_DWORD *)a2 + 48))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssembler *)((char *)a2 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                    k = *((_DWORD *)a2 + 50);
                  }
                  *(_DWORD *)(*((_QWORD *)a2 + 7) + k) = -721215457;
                  k = *((_DWORD *)a2 + 50) + 4;
                  *((_DWORD *)a2 + 50) = k;
                }
                LOBYTE(v132) = -1;
                *(_QWORD *)&v131 = v17;
                *((_QWORD *)&v131 + 1) = k;
                BYTE3(v132) = BYTE5(v18) & 0xF;
                *(_WORD *)((char *)&v132 + 1) = BYTE4(v18);
                WORD2(v132) = 0;
                break;
            }
            v33 = *((unsigned int *)a2 + 11);
            if ((_DWORD)v33 == *((_DWORD *)a2 + 10))
            {
              v85 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v33 + 1, (unint64_t)&v131, a4, a5, a6, a7, a8);
              v34 = *((_QWORD *)a2 + 4) + 24 * *((unsigned int *)a2 + 11);
              *(_QWORD *)v34 = 0;
              *(_QWORD *)(v34 + 8) = 0;
              *(_BYTE *)(v34 + 16) = -1;
              v86 = (*(unsigned __int8 *)(v34 + 19) << 16) | 0xF0000;
              *(_WORD *)(v34 + 17) = 65;
              *(_BYTE *)(v34 + 19) = BYTE2(v86);
              *(_WORD *)(v34 + 20) &= 0xFC00u;
              v35 = *(_OWORD *)v85;
              v36 = *(_QWORD *)(v85 + 16);
            }
            else
            {
              v34 = *v15 + 24 * v33;
              v35 = v131;
              v36 = v132;
            }
            *(_QWORD *)(v34 + 16) = v36;
            *(_OWORD *)v34 = v35;
            ++*((_DWORD *)a2 + 11);
            goto LABEL_46;
          case 4:
            *((_DWORD *)this + 255) = *(_DWORD *)(v13 + 8 * v10 + 4);
            return 1;
          default:
            goto LABEL_46;
        }
      }
    }
    if (*((_DWORD *)this + 145))
    {
      __break(0xC471u);
      JUMPOUT(0x1986F25E8);
    }
  }
  else
  {
    v104 = (_DWORD *)((char *)this + 968);
    JSC::ARM64Assembler::label((_DWORD *)a2 + 8, (uint64_t)a2, a3, a4, a5, a6, a7, a8, (int *)&v131);
    JSC::AssemblerBuffer::putInt((JSC::MacroAssembler *)((char *)a2 + 56), 335544320, v105, v106, v107, v108, v109, v110);
    if (*((_BYTE *)a2 + 328))
      v117 = 69;
    else
      v117 = 65;
    v127[0] = v131;
    v127[1] = 0;
    v128 = v117;
    v129 = 15;
    v130 = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v104, v127, v111, v112, v113, v114, v115, v116);
  }
  return 0;
}

void JSC::CCallHelpers::logShadowChickenProloguePacket(_DWORD *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v11 = a2;
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, 29, a2 | 0x1000000000, a4, a5, a6, a7, a8);
  v19 = a1[50];
  if (v19 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v12, v13, v14, v15, v16, v17, v18);
    v19 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v19) = a3 & 0x1F | 0xF84003A0;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, a3, v11 | 0x1800000000, v14, v15, v16, v17, v18);
  v27 = a1[50];
  if (v27 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v20, v21, v22, v23, v24, v25, v26);
    v27 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v27) = a3 & 0x1F | 0xF84183A0;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, a3, v11 | 0x800000000, v22, v23, v24, v25, v26);
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, a4, v11 | 0x2000000000, v28, v29, v30, v31, v32);
}

void JSC::CCallHelpers::ensureShadowChickenPacket(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62[3];

  v8 = *(_QWORD *)(a2 + 93384);
  if ((v8 & 1) != 0 || !v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1986F29CCLL);
  }
  v61 = a5;
  v11 = v8 + 16;
  v14 = *(_QWORD *)(a2 + 93384);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, v8 + 16, a4, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::load64((uint64_t)a1, a4, a3, v15, v16, v17, v18, v19);
  JSC::MacroAssemblerARM64::branch64((uint64_t)a1, 3, a3, *(_QWORD *)(v14 + 24), v20, v21, v22, v23, (uint64_t)v62);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, a2, 0, v24, v25, v26, v27, v28);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, (uint64_t)operationProcessShadowChickenLog, a4, v29, v30, v31, v32, v33);
  a1[52] = 0;
  v41 = a1[50];
  if (v41 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v34, v35, v36, v37, v38, v39, v40);
    v41 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v41) = (32 * (a4 & 0x1F)) | 0xD63F0000;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(a1, v11, a4, v36, v37, v38, v39, v40);
  JSC::MacroAssemblerARM64::load64((uint64_t)a1, a4, a3, v42, v43, v44, v45, v46);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v62, (uint64_t)a1, v47, v48, v49, v50, v51, v52);
  v60 = a1[50];
  if (v60 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), v53, v54, v55, v56, v57, v58, v59);
    v60 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v60) = v61 | (32 * a3) | 0x9100E000;
  a1[50] += 4;
  JSC::MacroAssemblerARM64::store64((uint64_t)a1, v61, a4, v55, v56, v57, v58, v59);
}

void JSC::CCallHelpers::logShadowChickenTailPacketImpl<JSC::ARM64Registers::RegisterID>(uint64_t a1, unsigned __int8 a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v8 = a6;
  JSC::MacroAssemblerARM64::store64(a1, 29, a2 | 0x1000000000, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_7;
  JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, 31249, a1 + 264, v14, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::store64(a1, 16, a2 | 0x800000000, v19, v20, v21, v22, v23);
  JSC::MacroAssemblerARM64::store64(a1, a3, a2, v24, v25, v26, v27, v28);
  JSC::MacroAssemblerARM64::store64(a1, a4, a2 | 0x2000000000, v29, v30, v31, v32, v33);
  JSC::MacroAssemblerARM64::store64(a1, a5, a2 | 0x2800000000, v34, v35, v36, v37, v38);
  if (!v8)
  {
    v44 = 63;
    goto LABEL_6;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x1986F2C50);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)v8, a1 + 264, v39, v40, v41, v42, v43);
  v44 = 16;
LABEL_6:
  JSC::MacroAssemblerARM64::store32(a1, v44, a2 | 0x3000000000, v39, v40, v41, v42, v43);
}

uint64_t JSC::CallFrameShuffleData::setupCalleeSaveRegisters(uint64_t this, const JSC::RegisterAtOffsetList *a2)
{
  unint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v15[9];

  v2 = 0;
  v3 = this + 28;
  while (1)
  {
    v4 = *(_DWORD **)a2;
    v5 = *(_QWORD *)a2 ? *v4 : 0;
    if (v2 >= v5)
      break;
    if (*v4 <= v2)
    {
      __break(0xC471u);
LABEL_26:
      __break(1u);
    }
    v6 = *(_QWORD *)&v4[2 * v2 + 2];
    v7 = v6 & 0x7F;
    if (v7 >= 0x40)
      goto LABEL_26;
    if (((0xFF001FF80000uLL >> v7) & 1) != 0)
    {
      v8 = (v6 >> 6) & 0xFFFFFFFFFFFFFFFCLL;
      if (v8 < 0 != __OFSUB__(v7, 64))
        v8 += 7;
      LOBYTE(v14) = 8;
      *(_QWORD *)((char *)&v14 + 1) = ((unint64_t)v8 >> 3);
      v9 = v3 + 9 * v7;
      *(_QWORD *)v9 = v14;
      *(_BYTE *)(v9 + 8) = 0;
    }
    ++v2;
  }
  v10 = 0;
  v11 = 0x80;
  do
  {
    v12 = v11 & 0x7F;
    if (v12 >= 0x40)
      goto LABEL_26;
    if (((0xFF001FF80000uLL >> v12) & 1) != 0)
    {
      v13 = v3 + 9 * v12;
      if (*(_BYTE *)v13 == 18)
      {
        if ((v11 & 0x60) != 0)
        {
          v15[0] = 6;
          v12 = (v12 - 32);
        }
        else
        {
          v15[0] = 0;
        }
        *(_QWORD *)&v15[1] = v12;
        *(_QWORD *)v13 = *(_QWORD *)v15;
        *(_BYTE *)(v13 + 8) = 0;
      }
    }
    v11 = (v11 + 1) | 0x80;
    if (v10 == 63)
      v11 = -1;
    v10 = v11 & 0x7F;
  }
  while ((v11 & 0x7Fu) < 0x40);
  return this;
}

void JSC::CallFrameShuffleData::createForBaselineOrLLIntTailCall(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  _QWORD v34[3];

  v5 = 0;
  v34[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  do
  {
    v6 = a3 + v5;
    *(_BYTE *)(v6 + 28) = 18;
    *(_QWORD *)(v6 + 29) = 0;
    v5 += 9;
  }
  while (v5 != 576);
  *(_WORD *)(a3 + 604) = 4635;
  v7 = *(unsigned int *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 12) - 2;
  *(_DWORD *)(a3 + 20) = v7;
  *(_DWORD *)(a3 + 24) = a2;
  *(_DWORD *)(a3 + 16) = v8;
  if ((_DWORD)v7)
  {
    v9 = 16;
    if (v7 > 0x10)
      v9 = v7;
    if (v9 >= 0x1C71C71D)
    {
      __break(0xC471u);
      JUMPOUT(0x1986F3090);
    }
    v10 = 9 * v9;
    v11 = WTF::fastMalloc((WTF *)(9 * v9));
    *(_DWORD *)(a3 + 8) = v10 / 9;
    *(_QWORD *)a3 = v11;
    v12 = v11;
    do
    {
      *(_BYTE *)v12 = 18;
      *(_QWORD *)(v12 + 1) = 0;
      v12 += 9;
    }
    while (v12 != v11 + 9 * v7);
  }
  else
  {
    v11 = 0;
  }
  *(_DWORD *)(a3 + 12) = v7;
  if (*(_DWORD *)(a1 + 8))
  {
    v13 = 0;
    v14 = (_BYTE *)(v11 + 8);
    while (1)
    {
      v15 = (v13 - *(_DWORD *)(a1 + 12) + 5);
      LOBYTE(v34[0]) = 8;
      *(_QWORD *)((char *)v34 + 1) = v15;
      if (v7 == v13)
        break;
      *((_QWORD *)v14 - 1) = v34[0];
      *v14 = 0;
      v14 += 9;
      if (++v13 >= (unint64_t)*(unsigned int *)(a1 + 8))
        goto LABEL_13;
    }
    __break(0xC471u);
LABEL_31:
    JUMPOUT(0x1986F3088);
  }
LABEL_13:
  LOBYTE(v34[0]) = 0;
  *(_QWORD *)((char *)v34 + 1) = 0;
  *(_QWORD *)(a3 + 605) = 0;
  *(_BYTE *)(a3 + 613) = 0;
  v16 = atomic_load(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey);
  if (v16 != -1)
  {
    v34[0] = &v32;
    v33 = v34;
    std::__call_once(&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::onceKey, &v33, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::$_0 &&>>);
  }
  JSC::CallFrameShuffleData::setupCalleeSaveRegisters(a3, (const JSC::RegisterAtOffsetList *)&JSC::RegisterAtOffsetList::llintBaselineCalleeSaveRegisters(void)::result);
  v24 = *(unsigned int *)(a3 + 12);
  if (*(_DWORD *)(a3 + 8) > v24)
  {
    v25 = *(_QWORD *)a3;
    v26 = *(_QWORD *)a3;
    if ((_DWORD)v24)
    {
      if (v24 >= 0x1C71C71D)
      {
        __break(0xC471u);
        goto LABEL_31;
      }
      v27 = 9 * v24;
      v28 = WTF::fastMalloc((WTF *)(9 * v24));
      *(_DWORD *)(a3 + 8) = v27 / 9;
      *(_QWORD *)a3 = v28;
      v26 = v25;
      if (v28 != v25)
      {
        v29 = 0;
        do
        {
          v30 = v28 + v29;
          v31 = *(_QWORD *)(v25 + v29);
          *(_BYTE *)(v30 + 8) = *(_BYTE *)(v25 + v29 + 8);
          *(_QWORD *)v30 = v31;
          v29 += 9;
        }
        while (v27 != v29);
        v26 = v28;
      }
    }
    if (v25)
    {
      if (v26 == v25)
      {
        *(_QWORD *)a3 = 0;
        *(_DWORD *)(a3 + 8) = 0;
      }
      WTF::fastFree(v25, v17, v18, v19, v20, v21, v22, v23);
    }
  }
}

JSC::CallFrameShuffler *JSC::CallFrameShuffler::CallFrameShuffler(JSC::CallFrameShuffler *this, JSC::CCallHelpers *a2, const JSC::CallFrameShuffleData *a3)
{
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  char v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v34;
  int v35;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v5 = *((_DWORD *)a3 + 4);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v6 = (v5 + 2);
  *((_DWORD *)this + 7) = v6;
  if (v5 != -2)
  {
    if (v6 >> 29)
      goto LABEL_41;
    v7 = (void *)WTF::fastMalloc((WTF *)(8 * v6));
    *((_DWORD *)this + 6) = v6;
    *((_QWORD *)this + 2) = v7;
    v8 = *((unsigned int *)this + 7);
    if ((_DWORD)v8)
      bzero(v7, 8 * v8);
  }
  v9 = *((unsigned int *)a3 + 3);
  *((_QWORD *)this + 5) = 0;
  v10 = (char *)this + 40;
  *((_BYTE *)this + 32) = 0;
  v11 = v9 + 5;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = v9 + 5;
  if (v9 >= 0x1FFFFFFB)
  {
    __break(0xC471u);
    JUMPOUT(0x1986F344CLL);
  }
  v12 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
  *((_DWORD *)this + 12) = v11;
  *((_QWORD *)this + 5) = v12;
  v13 = *((unsigned int *)this + 13);
  if ((_DWORD)v13)
    bzero(v12, 8 * v13);
  v14 = (*((_DWORD *)a3 + 6) | 1) + 5;
  v15 = (*((_DWORD *)a3 + 3) | 1) + 5;
  *((_DWORD *)this + 14) = v14;
  *((_DWORD *)this + 15) = v15;
  *((_DWORD *)this + 16) = v15 - v14;
  *((_QWORD *)this + 9) = -1;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  v16 = (char *)this + 600;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_BYTE *)this + 1112) = 29;
  *((_DWORD *)this + 279) = 0;
  *((_BYTE *)this + 1120) = -1;
  *(_QWORD *)((char *)this + 1124) = 0x3FFFFFFF00000000;
  *(_QWORD *)((char *)this + 1132) = *(_QWORD *)((char *)a3 + 20);
  *((_QWORD *)this + 9) = 0x80000000E0070000;
  v17 = JSC::CallFrameShuffler::addCachedRecovery((uint64_t)this, *(_QWORD *)((char *)a3 + 605), *((_BYTE *)a3 + 613));
  v18 = v17;
  v34 = 3;
  v19 = *(unsigned int *)(v17 + 12);
  if ((_DWORD)v19 == *(_DWORD *)(v17 + 8))
  {
    WTF::Vector<JSC::VirtualRegister,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::VirtualRegister&>(v17, (unint64_t)&v34);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)v17 + 4 * v19) = 3;
    ++*(_DWORD *)(v17 + 12);
  }
  if (*((_DWORD *)this + 13) <= 3u)
  {
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x1986F3444);
  }
  *(_QWORD *)(*(_QWORD *)v10 + 24) = v18;
  if (*((_DWORD *)a3 + 3))
  {
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = v21 + 5;
      v23 = JSC::CallFrameShuffler::addCachedRecovery((uint64_t)this, *(_QWORD *)(*(_QWORD *)a3 + v20), *(_BYTE *)(*(_QWORD *)a3 + v20 + 8));
      v24 = v23;
      v35 = v21 + 5;
      v25 = *(unsigned int *)(v23 + 12);
      if ((_DWORD)v25 == *(_DWORD *)(v23 + 8))
      {
        WTF::Vector<JSC::VirtualRegister,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::VirtualRegister&>(v23, (unint64_t)&v35);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)v23 + 4 * v25) = v22;
        ++*(_DWORD *)(v23 + 12);
      }
      if (v22 >= (unint64_t)*((unsigned int *)this + 13))
        break;
      *(_QWORD *)(*(_QWORD *)v10 + 8 * v22) = v24;
      ++v21;
      v20 += 9;
      if (v21 >= *((unsigned int *)a3 + 3))
        goto LABEL_17;
    }
    __break(0xC471u);
    goto LABEL_38;
  }
LABEL_17:
  v26 = 0;
  v27 = 0x80;
  do
  {
    if ((v27 & 0x7Fu) >= 0x40)
      goto LABEL_38;
    v28 = (char *)a3 + 9 * (v27 & 0x7F) + 28;
    if (*v28 != 18)
    {
      if ((v27 & 0x60) != 0)
      {
        v31 = JSC::CallFrameShuffler::addCachedRecovery((uint64_t)this, *(_QWORD *)v28, v28[8]);
        *(_QWORD *)&v16[8 * v26] = v31;
        *(_BYTE *)(v31 + 34) = v26 - 32;
      }
      else
      {
        v29 = JSC::CallFrameShuffler::addCachedRecovery((uint64_t)this, *(_QWORD *)v28, v28[8]);
        v30 = *(char *)(v29 + 33);
        if (v30 != -1)
        {
          if (v30 >= 0x40uLL)
            goto LABEL_38;
          *(_QWORD *)&v16[8 * v30] = 0;
        }
        *(_QWORD *)&v16[8 * v26] = v29;
        *(_BYTE *)(v29 + 33) = v26;
      }
    }
    if (v26 == 63)
      v27 = -1;
    else
      v27 = (v27 + 1) | 0x80;
    v26 = v27 & 0x7F;
  }
  while ((v27 & 0x7Fu) < 0x40);
  v32 = *((unsigned __int8 *)a3 + 604);
  *((_BYTE *)this + 592) = v32;
  if (v32 != 255)
  {
    if ((v32 & 0x40) != 0)
    {
LABEL_38:
      __break(1u);
      goto LABEL_41;
    }
    *((_QWORD *)this + 9) |= 1 << v32;
  }
  return this;
}

uint64_t JSC::CallFrameShuffler::getCachedRecovery(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  if (a2 <= 5u)
    goto LABEL_5;
  if ((a2 & 0xFE) == 6)
  {
    v2 = (SBYTE1(a2) + 32);
    if (v2 >= 0x40)
    {
      do
      {
        __break(1u);
LABEL_5:
        v2 = SBYTE1(a2);
      }
      while (v2 >= 0x40);
    }
    v3 = result + 8 * v2 + 80;
    return *(_QWORD *)v3;
  }
  v4 = (int)(1 - (a2 >> 8));
  if (v4 < *(unsigned int *)(result + 28))
  {
    v3 = *(_QWORD *)(result + 16) + 8 * v4;
    return *(_QWORD *)v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::CallFrameShuffler::setCachedRecovery(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;

  if (a2 <= 5u)
    goto LABEL_5;
  if ((a2 & 0xFE) == 6)
  {
    v4 = (SBYTE1(a2) + 32);
    if (v4 >= 0x40)
    {
      do
      {
        __break(1u);
LABEL_5:
        v4 = SBYTE1(a2);
      }
      while (v4 >= 0x40);
    }
    v5 = (_QWORD *)(result + 8 * v4 + 80);
    goto LABEL_7;
  }
  v6 = (int)(1 - (a2 >> 8));
  if (v6 < *(unsigned int *)(result + 28))
  {
    v5 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v6);
LABEL_7:
    *v5 = a4;
    return a4;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::CallFrameShuffler::spill(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  JSC::AssemblerBuffer *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  int v47;
  char v48;
  __int128 v51;

  v9 = *(_DWORD *)(a1 + 28);
  while (1)
  {
    v10 = 2 - v9;
    if ((int)(2 - v9) <= 1)
    {
      v11 = *(_DWORD *)(a1 + 64);
      v12 = -v11;
      v13 = -v11 > v10 ? -v11 : 2 - v9;
      v14 = 2 - v9;
      while (1)
      {
        if (v13 == v14)
          goto LABEL_14;
        v15 = 1 - v14;
        if (v15 >= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x1986F39ECLL);
        }
        if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v15))
          break;
        if (++v14 == 2)
          goto LABEL_14;
      }
      if (v14 < 0 && v14 < v12)
        break;
    }
LABEL_14:
    if (*(_BYTE *)(a1 + 32))
    {
      __break(0xC471u);
      JUMPOUT(0x1986F3988);
    }
    if (v10 < 0)
    {
      v16 = 2 - v9;
      while (1)
      {
        v17 = (int)(1 - v16);
        if (v17 >= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x1986F39E4);
        }
        if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v17))
          break;
        if (__CFADD__(v16++, 1))
        {
          v16 = 0;
          break;
        }
      }
    }
    else
    {
      v16 = 2 - v9;
    }
    v19 = v16 - v10;
    v20 = *(int *)(a1 + 1124) + (unint64_t)*(unsigned int *)(a1 + 52);
    if (v20 > (int)v19)
    {
      v21 = v20 - (int)v19 + 1;
      v22 = v21 & 0xFFFFFFFFFFFFFFFELL;
      v23 = (v21 & 0xFFFFFFFFFFFFFFFELL) + v9;
      v24 = *(unsigned int *)(a1 + 24);
      if (v23 > v24)
      {
        v25 = v24 + (v24 >> 2);
        if (v25 >= 0x10)
          v26 = v25 + 1;
        else
          v26 = 16;
        if (v26 <= v23)
          v27 = (v21 & 0xFFFFFFFFFFFFFFFELL) + v9;
        else
          v27 = v26;
        if (v27 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1986F39F4);
        }
        v28 = *(const void **)(a1 + 16);
        v29 = v9;
        v30 = (void *)WTF::fastMalloc((WTF *)(8 * v27));
        *(_DWORD *)(a1 + 24) = v27;
        *(_QWORD *)(a1 + 16) = v30;
        memcpy(v30, v28, 8 * v29);
        if (v28)
        {
          if (*(const void **)(a1 + 16) == v28)
          {
            *(_QWORD *)(a1 + 16) = 0;
            *(_DWORD *)(a1 + 24) = 0;
          }
          WTF::fastFree((unint64_t)v28, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      *(_DWORD *)(a1 + 28) = v23;
      if (v22)
      {
        v31 = v23 - 1;
        do
        {
          if (v23 <= v31)
          {
            __break(0xC471u);
            JUMPOUT(0x1986F39DCLL);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v31--) = 0;
          --v22;
        }
        while (v22);
      }
      v32 = *(_QWORD *)a1;
      v33 = (8 * v21) & 0xFFFFFFF0;
      if (v33 < 0x1000)
      {
        v34 = -788528129;
        goto LABEL_42;
      }
      v36 = -v33;
      if (-v33 < 0x1000)
      {
        v37 = -2147482625;
        goto LABEL_45;
      }
      if (((8 * (_DWORD)v21) & 0xFF0) != 0)
      {
LABEL_54:
        if (!*(_BYTE *)(v32 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x1986F39B0);
        }
        *(_DWORD *)(*(_QWORD *)(v32 + 264) + 208) &= ~*(_DWORD *)(v32 + 288);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v32, v33, *(char *)(v32 + 272), a4, a5, a6, a7, a8);
        v44 = *(_DWORD *)(v32 + 200);
        v39 = (unsigned int *)(v32 + 200);
        v38 = v44;
        v41 = (JSC::AssemblerBuffer *)(v39 - 36);
        v42 = v44 + 4;
        v43 = *(v39 - 2);
        v35 = -886021121;
      }
      else
      {
        v45 = v33 >> 12;
        if (HIBYTE(v33))
        {
          v36 = -v45;
          if (-v45 >= 0x1000)
            goto LABEL_54;
          v37 = -2143288321;
LABEL_45:
          v35 = v37 | (v36 << 10) | 0x11000000;
        }
        else
        {
          v34 = -784333825;
          v33 >>= 12;
LABEL_42:
          v35 = v34 | ((v33 & 0xFFF) << 10);
        }
        v40 = *(_DWORD *)(v32 + 200);
        v39 = (unsigned int *)(v32 + 200);
        v38 = v40;
        v41 = (JSC::AssemblerBuffer *)(v39 - 36);
        v42 = v40 + 4;
        v43 = *(v39 - 2);
      }
      if (v42 > v43)
      {
        JSC::AssemblerBuffer::outOfLineGrow(v41, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        v38 = *v39;
      }
      *(_DWORD *)(*(_QWORD *)v41 + v38) = v35;
      *v39 += 4;
      v9 = *(_DWORD *)(a1 + 28);
      if (*(_BYTE *)(a1 + 1120) == 31)
        *(_DWORD *)(a1 + 64) = v9;
      else
        *(_DWORD *)(a1 + 1116) = v9 - 2;
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
  v46 = v14;
  v47 = JSC::CallFrameShuffler::emitStore((uint64_t *)a1, (uint64_t)a2, *(unsigned __int8 *)(a1 + 1112) | ((unint64_t)(*(_DWORD *)(a1 + 1116) + v14) << 35), a4, a5, a6, a7, a8)- 1;
  switch(v47)
  {
    case 0:
      v48 = 9;
      break;
    case 1:
      v48 = 10;
      break;
    case 2:
      v48 = 11;
      break;
    case 3:
      v48 = 12;
      break;
    case 4:
      v48 = 14;
      break;
    case 5:
      v48 = 13;
      break;
    default:
      v48 = 8;
      break;
  }
  LOBYTE(v51) = v48;
  *(_QWORD *)((char *)&v51 + 1) = v46;
  return JSC::CallFrameShuffler::updateRecovery(a1, (uint64_t)a2, v51, 0);
}

uint64_t JSC::CallFrameShuffler::updateRecovery(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 24);
  if (v4 != 17)
  {
    v11 = *(_QWORD *)(a2 + 24);
    if (v4 <= 5u)
    {
      v5 = SBYTE1(v11);
      if (v5 >= 0x40)
      {
        do
        {
LABEL_12:
          __break(1u);
LABEL_13:
          v7 = SBYTE1(v11);
        }
        while (v7 >= 0x40);
        goto LABEL_14;
      }
    }
    else
    {
      if ((v4 & 0xFE) != 6)
      {
        v10 = 1 - *(_DWORD *)((char *)&v11 + 1);
        if (v10 >= *(unsigned int *)(result + 28))
          goto LABEL_20;
        v6 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v10);
        goto LABEL_8;
      }
      v5 = (SBYTE1(v11) + 32);
      if (v5 >= 0x40)
        goto LABEL_12;
    }
    v6 = (_QWORD *)(result + 8 * v5 + 80);
LABEL_8:
    *v6 = 0;
  }
  *(_QWORD *)(a2 + 24) = a3;
  *(_BYTE *)(a2 + 32) = a4;
  BYTE1(v11) = BYTE1(a3);
  if (a3 <= 5u)
    goto LABEL_13;
  if ((a3 & 0xFE) != 6)
  {
    v9 = (int)(1 - (a3 >> 8));
    if (v9 < *(unsigned int *)(result + 28))
    {
      v8 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v9);
      goto LABEL_15;
    }
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x1986F3B64);
  }
  v7 = (SBYTE1(a3) + 32);
  if (v7 >= 0x40)
    goto LABEL_12;
LABEL_14:
  v8 = (_QWORD *)(result + 8 * v7 + 80);
LABEL_15:
  *v8 = a2;
  return result;
}

void JSC::CallFrameShuffler::prepareForTailCall(JSC::CallFrameShuffler *this)
{
  WTF *v1;
  int64_t i;
  unsigned int v3;
  char *v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char FreeGPR;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  JSC::AssemblerBuffer *v45;
  int v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  BOOL v81;
  unint64_t v82;
  char v83;
  int v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  char v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  WTF *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  char v110;
  unint64_t v111;
  WTF *v112;
  int v113;
  char v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  int v126;
  unsigned int v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  char v138;
  uint64_t v139;
  WTF *v140;
  uint64_t v141;
  char v142;
  int v143;
  unsigned int v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD *v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  char v185;
  int v186;
  char v187;
  char v188;
  unsigned int v189;
  char v190;
  unint64_t v191;
  char v192;
  _DWORD *v193;
  uint64_t v194;
  int v195;
  unsigned __int8 v196;
  unsigned __int8 v197;
  unint64_t v198;
  WTF *v199;
  unint64_t v200;
  char v201;
  int v202;
  unsigned int v203;
  unint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unsigned int v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  _DWORD *v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  _DWORD *v232;
  _DWORD *v233;
  char v234;
  _DWORD *v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char v243;
  int v244;
  unsigned int v245;
  unint64_t v246;
  uint64_t v247;
  int v248;
  int v249;
  uint64_t v250;
  int v251;
  int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int *v255;
  unsigned int v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char v262;
  _DWORD *v264;
  char v265;
  unsigned int v266;
  int v267;
  int v268;
  unint64_t v269;
  int v270;
  int v272;
  char v273;
  uint64_t v274;
  unsigned int v275;
  char v276;
  uint64_t v277;
  unsigned int v278;
  uint64_t v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  _DWORD *v283;
  _DWORD *v284;
  int v286;
  unsigned int v287;
  unsigned int *v288;
  unsigned int v289;
  char v290;
  char v291;
  unsigned int v292;
  char v294;
  uint64_t v295;
  char v296;
  unsigned int v297[2];
  char v298;
  __int16 v299;
  char v300;
  unsigned int v301[3];
  int v302;
  __int128 v303;
  WTF *v304[3];

  v304[2] = *(WTF **)MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 1112) = 31;
  *((_DWORD *)this + 279) = *((_DWORD *)this + 7) - 2;
  if (JSC::CallFrameShuffler::getFreeGPR(this) == -1)
    JSC::CallFrameShuffler::ensureRegister<JSC::CallFrameShuffler::ensureGPR(void)::{lambda(JSC::CachedRecovery const&)#1}>((uint64_t)this, (uint64_t)this, v7, v8, v9, v10, v11, v12);
  FreeGPR = JSC::CallFrameShuffler::getFreeGPR(this);
  if ((FreeGPR & 0x40) != 0)
    goto LABEL_260;
  *((_QWORD *)this + 9) |= 1 << FreeGPR;
  *((_BYTE *)this + 1120) = FreeGPR;
  *((_DWORD *)this + 281) = -2;
  v21 = *(_QWORD *)this;
  v22 = FreeGPR & 0x1F | 0xB84203A0;
  v23 = *(_DWORD *)(*(_QWORD *)this + 200);
  if (v23 + 4 > *(_DWORD *)(*(_QWORD *)this + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v21 + 56), (uint64_t)v14, v15, v16, v17, v18, v19, v20);
    v23 = *(_DWORD *)(v21 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v21 + 56) + v23) = v22;
  *(_DWORD *)(v21 + 200) += 4;
  JSC::MacroAssemblerARM64::branch32(*(_QWORD *)this, 9, *((char *)this + 1120), *((unsigned int *)this + 284), v17, v18, v19, v20, (uint64_t)v301);
  v31 = *(_QWORD *)this;
  v32 = *((char *)this + 1120) | (32 * *((char *)this + 1120)) | 0x11001800;
  v33 = *(_DWORD *)(*(_QWORD *)this + 200);
  if (v33 + 4 > *(_DWORD *)(*(_QWORD *)this + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v31 + 56), v24, v25, v26, v27, v28, v29, v30);
    v33 = *(_DWORD *)(v31 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v31 + 56) + v33) = v32;
  *(_DWORD *)(v31 + 200) += 4;
  JSC::MacroAssemblerARM64::and32(*(_QWORD *)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFELL, *((_BYTE *)this + 1120), *((char *)this + 1120));
  v41 = *(_QWORD *)this;
  v42 = *((_BYTE *)this + 1120);
  v43 = *(_DWORD *)(*(_QWORD *)this + 200);
  if (v43 + 4 > *(_DWORD *)(*(_QWORD *)this + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v41 + 56), v34, v35, v36, v37, v38, v39, v40);
    v43 = *(_DWORD *)(v41 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v41 + 56) + v43) = v42 & 0x1F | (32 * (v42 & 0x1F)) | 0x531D7000;
  *(_DWORD *)(v41 + 200) += 4;
  v44 = *(_QWORD *)this;
  v45 = (JSC::AssemblerBuffer *)(*(_QWORD *)this + 56);
  v46 = *(_DWORD *)(*(_QWORD *)this + 200);
  if (v46 < *(_DWORD *)(*(_QWORD *)this + 52))
  {
    do
    {
      if ((v46 + 4) > *(_DWORD *)(v44 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v45, v34, v35, v36, v37, v38, v39, v40);
        v46 = *(_DWORD *)(v44 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v44 + 56) + v46) = -721215457;
      v46 = *(_DWORD *)(v44 + 200) + 4;
      *(_DWORD *)(v44 + 200) = v46;
    }
    while (v46 < *(_DWORD *)(v44 + 52));
  }
  v47 = v46;
  if ((v46 + 4) > *(_DWORD *)(v44 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v45, v34, v35, v36, v37, v38, v39, v40);
    v47 = *(_DWORD *)(v44 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v44 + 56) + v47) = 335544320;
  *(_DWORD *)(v44 + 200) += 4;
  if (*(_BYTE *)(v44 + 328))
    v48 = 69;
  else
    v48 = 65;
  v297[0] = v46;
  v297[1] = 0;
  v298 = v48;
  v299 = 15;
  v300 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v301, *(_QWORD *)this, v35, v36, v37, v38, v39, v40);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>(*(unsigned int **)this, (JSC::ARM64LogicalImmediate *)(8 * *((_DWORD *)this + 14)), *((char *)this + 1120), v49, v50, v51, v52, v53);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v297, *(_QWORD *)this, v54, v55, v56, v57, v58, v59);
  v67 = *(_QWORD *)this;
  v68 = *((unsigned __int8 *)this + 1120);
  if (v68 == 31)
    v69 = -1958910977;
  else
    v69 = v68 & 0x1F | (32 * (v68 & 0x1F)) | 0x8B1D0000;
  v72 = *(_DWORD *)(v67 + 200);
  v71 = (unsigned int *)(v67 + 200);
  v70 = v72;
  if (v72 + 4 > *(v71 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v71 - 36), v60, v61, v62, v63, v64, v65, v66);
    v70 = *v71;
  }
  *(_DWORD *)(*((_QWORD *)v71 - 18) + v70) = v69;
  *v71 += 4;
  JSC::MacroAssemblerARM64::sub64(*(_QWORD *)this, *((char *)this + 1120), (8 * (*((_DWORD *)this + 281) + *((_DWORD *)this + 15))), *((char *)this + 1120), v63, v64, v65, v66);
  v73 = *(_QWORD *)this;
  v74 = *(_DWORD *)(*(_QWORD *)this + 200);
  if (v74 + 4 > *(_DWORD *)(*(_QWORD *)this + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v73 + 56), (uint64_t)v14, v15, v16, v17, v18, v19, v20);
    v74 = *(_DWORD *)(v73 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v73 + 56) + v74) = -129989698;
  *(_DWORD *)(v73 + 200) += 4;
  v75 = *(_QWORD *)this;
  v76 = *(_DWORD *)(*(_QWORD *)this + 200);
  if (v76 + 4 > *(_DWORD *)(*(_QWORD *)this + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v75 + 56), (uint64_t)v14, v15, v16, v17, v18, v19, v20);
    v76 = *(_DWORD *)(v75 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v75 + 56) + v76) = -130022467;
  *(_DWORD *)(v75 + 200) += 4;
  v77 = -1;
  *((_DWORD *)this + 282) = -1;
  LODWORD(i) = *((_DWORD *)this + 13);
  if ((int)i >= 1)
  {
    v78 = *((unsigned int *)this + 13);
    while (1)
    {
      v79 = v78 - 1;
      if (*(_QWORD *)(*((_QWORD *)this + 5) + 8 * (v78 - 1)))
      {
        v80 = *((unsigned int *)this + 7);
        v81 = (int)v78 - *((_DWORD *)this + 16) - 1 <= 1 && 2 - (int)v80 <= (int)v78 - *((_DWORD *)this + 16) - 1;
        if (v81)
        {
          v82 = 2 - ((int)v78 - *((_DWORD *)this + 16));
          if (v82 >= v80)
          {
            __break(0xC471u);
            JUMPOUT(0x1986F547CLL);
          }
          if (*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v82))
            break;
        }
      }
      --v78;
      if ((unint64_t)(v79 + 1) <= 1)
      {
        v77 = -1;
        goto LABEL_37;
      }
    }
    v77 = v78 - 1;
    *((_DWORD *)this + 282) = v78 - 1;
  }
LABEL_37:
  *(_OWORD *)v304 = 0uLL;
  v4 = (char *)this + 80;
  v5 = (char *)this + 600;
  do
  {
    LODWORD(v1) = i;
    v3 = v77;
    LODWORD(i) = v77 + 1;
    LODWORD(v303) = v77 + 1;
    if (v77 + 1 < (int)v1)
    {
      v83 = 0;
      v84 = i;
      while (1)
      {
        if (v84 >= (unint64_t)*((unsigned int *)this + 13))
        {
          __break(0xC471u);
          JUMPOUT(0x1986F5448);
        }
        v14 = *(unsigned int **)(*((_QWORD *)this + 5) + 8 * v84);
        if (v14)
        {
          v85 = v14[3];
          if ((_DWORD)v85)
          {
            v86 = *(_DWORD **)v14;
            v87 = 4 * v85;
            while (*((_DWORD *)this + 282) < *v86)
            {
              ++v86;
              v87 -= 4;
              if (!v87)
                goto LABEL_46;
            }
            goto LABEL_50;
          }
LABEL_46:
          if (*((unsigned __int8 *)v14 + 33) == 255 && *((unsigned __int8 *)v14 + 34) == 255)
            break;
        }
LABEL_50:
        while (1)
        {
          v84 = v303 + 1;
          LODWORD(v303) = v84;
          if (v84 < (int)v1)
            break;
          if ((v83 & 1) == 0)
            goto LABEL_66;
          v88 = 0;
          v89 = 255;
          v90 = 128;
          do
          {
            if ((v90 & 0x7F) >= 0x40)
              goto LABEL_260;
            v91 = v90 & 0x7F;
            v92 = *((_QWORD *)this + 9);
            if (((v92 >> (v90 & 0x7F)) & 1) == 0 && !*(_QWORD *)&v4[8 * v91])
            {
              if (!*(_QWORD *)&v5[8 * v91])
                goto LABEL_62;
              if ((~v89 & 0x7F) == 0)
                v89 = v90;
            }
            v90 = ((_BYTE)v90 + 1) | 0xFFFFFF80;
            if (v88 == 63)
              v90 = -1;
            v88 = v90 & 0x7F;
          }
          while ((v90 & 0x7F) < 0x40);
          if ((~v89 & 0x7F) != 0)
            goto LABEL_62;
          v213 = *((unsigned __int8 *)this + 592);
          if (v213 == 255)
            goto LABEL_66;
          v214 = v213 & 0x7F;
          if (v214 < 0x40)
          {
            *((_QWORD *)this + 9) = v92 & ~(1 << v214);
            *((_BYTE *)this + 592) = -1;
LABEL_62:
            v303 = 0uLL;
            v1 = v304[0];
            if (HIDWORD(v304[1]))
            {
              v211 = 4 * HIDWORD(v304[1]);
              do
              {
                v302 = *(_DWORD *)v1;
                if (v302 >= (unint64_t)*((unsigned int *)this + 13))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1986F5474);
                }
                v14 = *(unsigned int **)(*((_QWORD *)this + 5) + 8 * v302);
                if (v14
                  && (JSC::CallFrameShuffler::tryWrites((uint64_t)this, (uint64_t)v14, v15, v16, v17, v18, v19, v20) & 1) == 0)
                {
                  if (HIDWORD(v303) == DWORD2(v303))
                  {
                    WTF::Vector<JSC::VirtualRegister,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::VirtualRegister&>((uint64_t)&v303, (unint64_t)&v302);
                  }
                  else
                  {
                    *(_DWORD *)(v303 + 4 * HIDWORD(v303)) = v302;
                    ++HIDWORD(v303);
                  }
                }
                v1 = (WTF *)((char *)v1 + 4);
                v211 -= 4;
              }
              while (v211);
              v1 = v304[0];
            }
            if (v1)
            {
              v304[0] = 0;
              LODWORD(v304[1]) = 0;
              WTF::fastFree((unint64_t)v1, v14, v15, v16, v17, v18, v19, v20);
            }
            *(_OWORD *)v304 = v303;
            goto LABEL_66;
          }
LABEL_260:
          __break(1u);
LABEL_261:
          if (HIDWORD(v304[1]) == LODWORD(v304[1]))
          {
            WTF::Vector<JSC::VirtualRegister,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::VirtualRegister&>((uint64_t)v304, (unint64_t)&v303);
          }
          else
          {
            *((_DWORD *)v304[0] + HIDWORD(v304[1])) = v303;
            ++HIDWORD(v304[1]);
          }
LABEL_49:
          v83 = 1;
        }
      }
      if ((JSC::CallFrameShuffler::tryWrites((uint64_t)this, (uint64_t)v14, v15, v16, v17, v18, v19, v20) & 1) == 0)
        goto LABEL_261;
      goto LABEL_49;
    }
LABEL_66:
    v77 = *((_DWORD *)this + 282);
  }
  while (v3 != v77);
  v93 = v304[0];
  if (v304[0])
  {
    v304[0] = 0;
    LODWORD(v304[1]) = 0;
    WTF::fastFree((unint64_t)v93, v14, v15, v16, v17, v18, v19, v20);
    v3 = *((_DWORD *)this + 282);
  }
  if ((v3 & 0x80000000) == 0)
  {
    i = v3;
    v3 = 246;
    while (1)
    {
      v147 = *((unsigned int *)this + 282);
      if (i == v147)
        break;
LABEL_174:
      if (i >= (unint64_t)*((unsigned int *)this + 13))
      {
        __break(0xC471u);
        JUMPOUT(0x1986F54F0);
      }
      v148 = *((_QWORD *)this + 5);
      v1 = *(WTF **)(v148 + 8 * i);
      if (v1 && JSC::CallFrameShuffler::canLoadAndBox((uint64_t)this, *(_QWORD *)(v148 + 8 * i)))
      {
        v149 = *((unsigned int *)v1 + 3);
        if ((_DWORD)v149)
        {
          v193 = *(_DWORD **)v1;
          v194 = 4 * v149;
          while (*((_DWORD *)this + 282) < *v193)
          {
            ++v193;
            v194 -= 4;
            if (!v194)
              goto LABEL_192;
          }
        }
        else
        {
LABEL_192:
          if (*((unsigned __int8 *)v1 + 33) == 255 && *((unsigned __int8 *)v1 + 34) == 255)
          {
            JSC::CallFrameShuffler::emitLoad((uint64_t)this, (uint64_t)v1, v15, v16, v17, v18, v19, v20);
            JSC::CallFrameShuffler::emitBox(this, (uint64_t)v1, v168, v169, v170, v171, v172, v173);
            JSC::CallFrameShuffler::tryWrites((uint64_t)this, (uint64_t)v1, v174, v175, v176, v177, v178, v179);
          }
        }
      }
      v81 = i-- <= 0;
      if (v81)
        goto LABEL_70;
    }
    v150 = *((_DWORD *)this + 16) - (int)v147 + 1;
    if (v150 >= *((unsigned int *)this + 7))
    {
      __break(0xC471u);
      JUMPOUT(0x1986F54F8);
    }
    v151 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v150);
    if ((JSC::CallFrameShuffler::canLoad((uint64_t)this, v151) & 1) != 0)
    {
LABEL_183:
      JSC::CallFrameShuffler::emitLoad((uint64_t)this, v151, v153, v154, v155, v156, v157, v158);
      v165 = *(unsigned __int8 *)(v151 + 24);
      if (v165 == 12 || v165 == 7)
      {
        if (JSC::CallFrameShuffler::getFreeGPR(this) == -1)
        {
LABEL_354:
          v270 = *(unsigned __int8 *)(v151 + 24);
          if (v270 == 12 || v270 == 7)
          {
            if (JSC::CallFrameShuffler::getFreeGPR(this) == -1)
              JSC::CallFrameShuffler::ensureRegister<JSC::CallFrameShuffler::ensureGPR(void)::{lambda(JSC::CachedRecovery const&)#1}>((uint64_t)this, (uint64_t)this, v159, v160, v161, v162, v163, v164);
            LOBYTE(v270) = *(_BYTE *)(v151 + 24);
          }
          if ((((_BYTE)v270 - 2) & 0xF6) == 0)
            JSC::CallFrameShuffler::ensureFPR((uint64_t)this, v167, v159, v160, v161, v162, v163, v164);
LABEL_199:
          JSC::CallFrameShuffler::emitBox(this, v151, v159, v160, v161, v162, v163, v164);
          v182 = *(unsigned int *)(v151 + 12);
          if ((_DWORD)v182)
          {
            v180 = *(_DWORD **)v151;
            v181 = 4 * v182;
            while (*((_DWORD *)this + 282) < *v180)
            {
              ++v180;
              v181 -= 4;
              if (!v181)
                goto LABEL_200;
            }
          }
          else
          {
LABEL_200:
            JSC::CallFrameShuffler::tryWrites((uint64_t)this, v151, v15, v16, v17, v18, v19, v20);
          }
          goto LABEL_174;
        }
        LOBYTE(v165) = *(_BYTE *)(v151 + 24);
      }
      if ((((_BYTE)v165 - 2) & 0xF6) != 0 || JSC::CallFrameShuffler::getFreeFPR(this) != -1)
        goto LABEL_199;
      goto LABEL_354;
    }
    v210 = *(unsigned __int8 *)(v151 + 24);
    if (v210 != 8)
    {
      if (v210 == 12)
      {
        JSC::CallFrameShuffler::ensureFPR((uint64_t)this, v152, v153, v154, v155, v156, v157, v158);
        goto LABEL_183;
      }
      if (v210 != 13)
      {
        JSC::CallFrameShuffler::ensureGPR(this);
        goto LABEL_183;
      }
    }
    JSC::CallFrameShuffler::ensureRegister(this);
    goto LABEL_183;
  }
LABEL_70:
  v94 = *((_DWORD *)this + 13);
  if (v94 >= 1)
  {
    for (i = 0; i < v94; ++i)
    {
      v95 = *((_QWORD *)this + 5);
      v1 = *(WTF **)(v95 + 8 * i);
      if (v1)
      {
        JSC::CallFrameShuffler::emitLoad((uint64_t)this, *(_QWORD *)(v95 + 8 * i), v15, v16, v17, v18, v19, v20);
        JSC::CallFrameShuffler::emitBox(this, (uint64_t)v1, v96, v97, v98, v99, v100, v101);
        JSC::CallFrameShuffler::tryWrites((uint64_t)this, (uint64_t)v1, v102, v103, v104, v105, v106, v107);
        v94 = *((_DWORD *)this + 13);
      }
    }
  }
  v108 = *((char *)this + 592);
  if (v108 != -1)
  {
    if (v108 >= 0x40uLL)
      goto LABEL_260;
    if (*(_QWORD *)&v5[8 * v108])
    {
      v109 = v108 & 0x7F;
      if (v109 >= 0x40)
        goto LABEL_260;
      *((_QWORD *)this + 9) &= ~(1 << v109);
    }
  }
  v110 = 0;
  v3 = 128;
  while (2)
  {
    if ((v3 & 0x7F) >= 0x40)
      goto LABEL_260;
    v1 = *(WTF **)&v5[8 * (v3 & 0x7F)];
    if (v1)
    {
      v111 = *((_QWORD *)v1 + 3);
      if (v111 - 8 > 6)
        goto LABEL_89;
      v304[0] = *((WTF **)v1 + 3);
      v113 = v111 >> 8;
      v14 = (unsigned int *)(*((unsigned __int8 *)this + 1112) | ((unint64_t)(*((_DWORD *)this + 279)
                                                                                                 + v113) << 35));
      i = *((unsigned __int8 *)v1 + 33);
      if (i == 255)
        goto LABEL_224;
      if ((char)i >= 0x40uLL)
        goto LABEL_260;
      if (*(_QWORD *)&v4[8 * (char)i])
        goto LABEL_224;
      v114 = i & 0x7F;
      if ((i & 0x7Fu) >= 0x40)
        goto LABEL_260;
      if (((*((_QWORD *)this + 9) >> v114) & 1) != 0)
      {
LABEL_224:
        if (v111 != 8 && v111 - 12 > 1)
          goto LABEL_225;
      }
      else
      {
        if (v111 - 8 < 4 || v111 - 13 < 2)
          goto LABEL_101;
        if (v111 != 12)
        {
LABEL_259:
          v114 = i & 0x7F;
          if ((i & 0x7Fu) >= 0x40)
            goto LABEL_260;
LABEL_101:
          if (((*((_QWORD *)this + 9) >> v114) & 1) == 0)
          {
LABEL_102:
            JSC::MacroAssemblerARM64::load64(*(_QWORD *)this, (uint64_t)v14, (char)i, v16, v17, v18, v19, v20);
            v115 = *((_QWORD *)v1 + 3);
            v116 = *((unsigned __int8 *)v1 + 32);
            switch((char)v115)
            {
              case 1:
              case 9:
                LOBYTE(v304[0]) = 1;
                break;
              case 2:
              case 10:
                LOBYTE(v304[0]) = 2;
                break;
              case 3:
              case 11:
                LOBYTE(v304[0]) = 3;
                break;
              case 4:
              case 14:
                LOBYTE(v304[0]) = 4;
                break;
              case 5:
              case 13:
                LOBYTE(v304[0]) = 5;
                break;
              default:
                LOBYTE(v304[0]) = 0;
                break;
            }
            *(WTF **)((char *)v304 + 1) = (WTF *)i;
            i = (int64_t)v304[0];
            if (v115 != 17)
              JSC::CallFrameShuffler::setCachedRecovery((uint64_t)this, v115, v116, 0);
            *((_QWORD *)v1 + 3) = i;
            *((_BYTE *)v1 + 32) = 0;
            JSC::CallFrameShuffler::setCachedRecovery((uint64_t)this, i, 0, (uint64_t)v1);
            v117 = *((_DWORD *)this + 16);
            if (*((_DWORD *)this + 282) - v117 == v113)
            {
              *((_DWORD *)this + 282) = -1;
              v118 = *((unsigned int *)this + 13);
              if ((int)v118 >= 1)
              {
                v119 = -v117 - 1;
                while (1)
                {
                  v120 = v118 - 1;
                  if (*(_QWORD *)(*((_QWORD *)this + 5) + 8 * (v118 - 1)))
                  {
                    v121 = v119 + v118;
                    if (v119 + (int)v118 <= 1)
                    {
                      v122 = *((unsigned int *)this + 7);
                      if (2 - (int)v122 <= v121)
                      {
                        v123 = 1 - v121;
                        if (v123 >= v122)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1986F5460);
                        }
                        if (*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v123))
                          break;
                      }
                    }
                  }
                  --v118;
                  if ((unint64_t)(v120 + 1) <= 1)
                    goto LABEL_89;
                }
                *((_DWORD *)this + 282) = v118 - 1;
              }
            }
LABEL_89:
            v112 = (WTF *)*((_QWORD *)v1 + 3);
            if (v112 != 17)
            {
              if (v112 > 5u)
              {
LABEL_92:
                if ((v112 & 0xFE) != 6)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1986F4D44);
                }
                if (v112 == 7)
                {
                  v215 = v3;
                  v216 = *((char *)v1 + 33);
                  if (v216 == -1)
                    goto LABEL_288;
                  if (v216 >= 0x40uLL)
                    goto LABEL_260;
                  if (*(_QWORD *)&v4[8 * v216])
                  {
LABEL_288:
                    LODWORD(i) = JSC::CallFrameShuffler::getFreeGPR(this);
                    v112 = (WTF *)*((_QWORD *)v1 + 3);
                  }
                  else
                  {
                    LODWORD(i) = *((unsigned __int8 *)v1 + 33);
                  }
                  v217 = *(_QWORD *)this;
                  v218 = *((_BYTE *)v1 + 32);
                  v304[0] = v112;
                  LOBYTE(v304[1]) = v218;
                  JSC::AssemblyHelpers::purifyNaN(v217, SBYTE1(v112), v15, v16, v17, v18, v19, v20);
                  v219 = *(_DWORD **)this;
                  v220 = *((_BYTE *)v1 + 32);
                  v304[0] = *((WTF **)v1 + 3);
                  LOBYTE(v304[1]) = v220;
                  v3 = (char)i;
                  JSC::MacroAssemblerARM64::moveDoubleTo64(v219, SBYTE1(v304[0]), (char)i, v221, v222, v223, v224, v225);
                  if ((i & 0x7Fu) >= 0x40)
                    goto LABEL_260;
                  *((_QWORD *)this + 9) |= 1 << (i & 0x7F);
                  v231 = JSC::CallFrameShuffler::tryAcquireNumberTagRegister(this);
                  v232 = *(_DWORD **)this;
                  if (v231)
                    JSC::MacroAssemblerARM64::sub64(v232, *((char *)this + 592), (char)i, v226, v227, v228, v229, v230);
                  else
                    JSC::MacroAssemblerARM64::sub64((uint64_t)v232, (char)i, 0xFFFE000000000000, (char)i, v227, v228, v229, v230);
                  *((_QWORD *)this + 9) &= ~(1 << (i & 0x7F));
                  LOBYTE(v304[0]) = 0;
                  *(WTF **)((char *)v304 + 1) = (WTF *)i;
                  JSC::CallFrameShuffler::updateRecovery((uint64_t)this, (uint64_t)v1, (unint64_t)v304[0], 0);
                  LOBYTE(v3) = v215;
                }
              }
              else
              {
                v183 = *((_BYTE *)v1 + 32);
                switch((char)v112)
                {
                  case 1:
                    v184 = *(_QWORD *)this;
                    v304[0] = *((WTF **)v1 + 3);
                    LOBYTE(v304[1]) = v183;
                    *(_QWORD *)&v303 = v112;
                    BYTE8(v303) = v183;
                    JSC::MacroAssemblerARM64::and64(v184, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, SBYTE1(v112), SBYTE1(v112));
                    v185 = *((_BYTE *)v1 + 32);
                    v304[0] = *((WTF **)v1 + 3);
                    LOBYTE(v304[1]) = v185;
                    if ((BYTE1(v304[0]) & 0x40) != 0)
                      goto LABEL_260;
                    *((_QWORD *)this + 9) |= 1 << SBYTE1(v304[0]);
                    v186 = *((unsigned __int8 *)this + 592);
                    if (v186 != 255)
                      goto LABEL_205;
                    v212 = JSC::CallFrameShuffler::getFreeGPR(this);
                    *((_BYTE *)this + 592) = v212;
                    if ((_DWORD)v212 == -1)
                    {
                      v279 = *(_QWORD *)this;
                      v280 = *((_BYTE *)v1 + 32);
                      v304[0] = *((WTF **)v1 + 3);
                      LOBYTE(v304[1]) = v280;
                      JSC::MacroAssemblerARM64::or64(v279, (JSC::ARM64LogicalImmediate *)0xFFFE000000000000, SBYTE1(v304[0]));
                    }
                    else
                    {
                      v15 = v212;
                      if ((v212 & 0x40) != 0)
                        goto LABEL_260;
                      *((_QWORD *)this + 9) |= 1 << v212;
                      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)this, 0xFFFE000000000000, v212, v16, v17, v18, v19, v20);
                      LOBYTE(v186) = *((_BYTE *)this + 592);
LABEL_205:
                      i = *(_QWORD *)this;
                      v187 = *((_BYTE *)v1 + 32);
                      v304[0] = *((WTF **)v1 + 3);
                      LOBYTE(v304[1]) = v187;
                      v188 = BYTE1(v304[0]);
                      v189 = *(_DWORD *)(i + 200);
                      if (v189 + 4 > *(_DWORD *)(i + 192))
                      {
                        v296 = v186;
                        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(i + 56), (uint64_t)v14, v15, v16, v17, v18, v19, v20);
                        LOBYTE(v186) = v296;
                        v189 = *(_DWORD *)(i + 200);
                      }
                      *(_DWORD *)(*(_QWORD *)(i + 56) + v189) = (((v186 & 0x1F) << 16) | (32 * (v188 & 0x1F)) | v188 & 0x1F)
                                                              - 1442840576;
                      *(_DWORD *)(i + 200) += 4;
                    }
                    v190 = *((_BYTE *)v1 + 32);
                    v304[0] = *((WTF **)v1 + 3);
                    LOBYTE(v304[1]) = v190;
                    v191 = BYTE1(v304[0]) & 0x7F;
                    if (v191 >= 0x40)
                      goto LABEL_260;
                    *((_QWORD *)this + 9) &= ~(1 << v191);
LABEL_210:
                    v192 = *((_BYTE *)v1 + 32);
                    *(_QWORD *)&v303 = *((_QWORD *)v1 + 3);
                    BYTE8(v303) = v192;
                    LOBYTE(v304[0]) = 0;
                    *(WTF **)((char *)v304 + 1) = (WTF *)BYTE1(v303);
                    *((WTF **)v1 + 3) = v304[0];
                    *((_BYTE *)v1 + 32) = 0;
                    break;
                  case 2:
                    v233 = *(_DWORD **)this;
                    v304[0] = *((WTF **)v1 + 3);
                    LOBYTE(v304[1]) = v183;
                    JSC::MacroAssemblerARM64::rshift64(v233, SBYTE1(v112), 12, SBYTE1(v112), v17, v18, v19, v20);
                    v234 = *((_BYTE *)v1 + 32);
                    *(_QWORD *)&v303 = *((_QWORD *)v1 + 3);
                    BYTE8(v303) = v234;
                    LOBYTE(v304[0]) = 3;
                    *(WTF **)((char *)v304 + 1) = (WTF *)BYTE1(v303);
                    *((WTF **)v1 + 3) = v304[0];
                    *((_BYTE *)v1 + 32) = 0;
                    goto LABEL_293;
                  case 3:
LABEL_293:
                    i = JSC::CallFrameShuffler::getFreeFPR(this);
                    v235 = *(_DWORD **)this;
                    v236 = *((_BYTE *)v1 + 32);
                    v304[0] = *((WTF **)v1 + 3);
                    LOBYTE(v304[1]) = v236;
                    JSC::MacroAssemblerARM64::convertInt64ToDouble(v235, SBYTE1(v304[0]), i, v237, v238, v239, v240, v241);
                    LOBYTE(v304[0]) = 7;
                    *(WTF **)((char *)v304 + 1) = (WTF *)i;
                    JSC::CallFrameShuffler::updateRecovery((uint64_t)this, (uint64_t)v1, (unint64_t)v304[0], 0);
                    v112 = (WTF *)*((_QWORD *)v1 + 3);
                    goto LABEL_92;
                  case 4:
                    v242 = *(_QWORD *)this;
                    v304[0] = *((WTF **)v1 + 3);
                    LOBYTE(v304[1]) = v183;
                    JSC::MacroAssemblerARM64::add32(v242, 6, SBYTE1(v112), SBYTE1(v112), v17, v18, v19, v20);
                    goto LABEL_210;
                  default:
                    goto LABEL_83;
                }
              }
            }
            goto LABEL_83;
          }
LABEL_228:
          v201 = 0;
          v202 = 255;
          v203 = 128;
          do
          {
            v204 = v203 & 0x7F;
            if (v204 >= 0x40)
              goto LABEL_260;
            v205 = *((_QWORD *)this + 9);
            if (!(v205 & (1 << v204) | v203 & 0x60) && !*(_QWORD *)&v4[8 * v204])
            {
              if (!*(_QWORD *)&v5[8 * v204])
              {
                LOBYTE(v202) = v203;
                goto LABEL_238;
              }
              if ((~v202 & 0x7F) == 0)
                v202 = v203;
            }
            v203 = ((_BYTE)v203 + 1) | 0xFFFFFF80;
            if (v201 == 63)
              v203 = -1;
            v201 = v203 & 0x7F;
          }
          while ((v203 & 0x7F) < 0x40);
          if ((~v202 & 0x7F) == 0)
          {
            v277 = *((unsigned __int8 *)this + 592);
            if (v277 != 255)
            {
              v278 = v277 & 0x7F;
              if (v278 <= 0x1F)
              {
                *((_QWORD *)this + 9) = v205 & ~(1 << v278);
                *((_BYTE *)this + 592) = -1;
                LOBYTE(v202) = v278;
              }
            }
          }
LABEL_238:
          v206 = v202 & 0x7F;
          if (v206 == 127)
            LOBYTE(i) = -1;
          else
            LOBYTE(i) = v206;
          goto LABEL_102;
        }
      }
      v124 = *((char *)v1 + 34);
      if (v124 != -1)
      {
        v207 = (v124 + 32);
        if (v207 >= 0x40)
          goto LABEL_260;
        if (!*(_QWORD *)&v4[8 * v207])
        {
          v196 = *((_BYTE *)v1 + 34);
          v208 = ((_BYTE)v124 + 32) & 0x7F;
          if (v208 >= 0x40)
            goto LABEL_260;
          if (((*((_QWORD *)this + 9) >> v208) & 1) == 0)
            goto LABEL_216;
        }
      }
      v125 = 0;
      v126 = 255;
      v127 = 128;
      do
      {
        v128 = v127 & 0x7F;
        if (v128 >= 0x40)
          goto LABEL_260;
        v129 = *((_QWORD *)this + 9);
        if ((v127 & 0x60) == 0x20 && (v129 & (1 << v128)) == 0 && !*(_QWORD *)&v4[8 * v128])
        {
          if (!*(_QWORD *)&v5[8 * v128])
          {
            LOBYTE(v126) = v127;
            goto LABEL_214;
          }
          if ((~v126 & 0x7F) == 0)
            v126 = v127;
        }
        v127 = ((_BYTE)v127 + 1) | 0xFFFFFF80;
        if (v125 == 63)
          v127 = -1;
        v125 = v127 & 0x7F;
      }
      while ((v127 & 0x7F) < 0x40);
      if ((~v126 & 0x7F) == 0)
      {
        v209 = *((unsigned __int8 *)this + 592);
        if (v209 != 255 && (v209 & 0x60) == 0x20)
        {
          LOBYTE(v126) = v209 & 0x7F;
          if ((v209 & 0x7Fu) >= 0x40)
            goto LABEL_260;
          *((_QWORD *)this + 9) = v129 & ~(1 << v126);
          *((_BYTE *)this + 592) = -1;
        }
      }
LABEL_214:
      v195 = v126 & 0x7F;
      if (v195 != 127)
      {
        v196 = v195 - 32;
        if ((_BYTE)v195 != 31)
        {
LABEL_216:
          v197 = v196;
          JSC::MacroAssemblerARM64::loadDouble(*(_QWORD *)this, (uint64_t)v14, (char)v196, v16, v17, v18, v19, v20);
          v198 = *((_QWORD *)v1 + 3);
          if (v198 == 7 || v198 == 12)
          {
            LOBYTE(v304[0]) = 7;
            v199 = (WTF *)v197;
          }
          else
          {
            LOBYTE(v304[0]) = 6;
            v199 = (WTF *)v197;
          }
          *(WTF **)((char *)v304 + 1) = v199;
          i = (int64_t)v304[0];
          if (v198 != 17)
            JSC::CallFrameShuffler::setCachedRecovery((uint64_t)this, v198, *((unsigned __int8 *)v1 + 32), 0);
          *((_QWORD *)v1 + 3) = i;
          *((_BYTE *)v1 + 32) = 0;
          JSC::CallFrameShuffler::setCachedRecovery((uint64_t)this, i, 0, (uint64_t)v1);
          if (*((_DWORD *)this + 282) - *((_DWORD *)this + 16) == v113)
            JSC::CallFrameShuffler::updateDangerFrontier((uint64_t)this);
          goto LABEL_89;
        }
      }
LABEL_225:
      if ((_DWORD)i == 255)
        goto LABEL_228;
      v200 = (char)i;
      if (v200 >= 0x40)
        goto LABEL_260;
      if (*(_QWORD *)&v4[8 * v200])
        goto LABEL_228;
      goto LABEL_259;
    }
LABEL_83:
    if (v110 == 63)
      v3 = -1;
    else
      v3 = ((_BYTE)v3 + 1) | 0xFFFFFF80;
    v110 = v3 & 0x7F;
    if ((v3 & 0x7F) < 0x40)
      continue;
    break;
  }
  v130 = *((unsigned __int8 *)this + 592);
  if (v130 != 255)
  {
    v131 = v130 & 0x7F;
    if (v131 >= 0x40)
      goto LABEL_260;
    *((_QWORD *)this + 9) &= ~(1 << v131);
  }
  v132 = *((int *)this + 283);
  if ((_DWORD)v132 == -1)
  {
    __break(0xC471u);
    JUMPOUT(0x1986F4B60);
  }
  i = *(_QWORD *)this;
  v1 = (WTF *)(*((unsigned __int8 *)this + 1120) | ((unint64_t)((8 * *((_DWORD *)this + 281) + 32) >> 3) << 35));
  if ((_DWORD)v132)
  {
    if (!*(_BYTE *)(i + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x1986F4B90);
    }
    JSC::MacroAssemblerARM64::moveToCachedReg(*(_DWORD **)this, v132, i + 264, v16, v17, v18, v19, v20);
    v133 = i;
    v134 = 16;
  }
  else
  {
    v133 = *(_QWORD *)this;
    v134 = 63;
  }
  JSC::MacroAssemblerARM64::store64(v133, v134, (uint64_t)v1, v16, v17, v18, v19, v20);
  v135 = *((char *)this + 1120);
  if (v135 != 31)
  {
    v1 = *(WTF **)this;
    LODWORD(i) = (32 * v135) | 0x9100001F;
    v136 = *(_DWORD *)(*(_QWORD *)this + 200);
    if (v136 + 4 > *(_DWORD *)(*(_QWORD *)this + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((WTF *)((char *)v1 + 56), (uint64_t)v14, v15, v16, v17, v18, v19, v20);
      v136 = *((_DWORD *)v1 + 50);
    }
    *(_DWORD *)(*((_QWORD *)v1 + 7) + v136) = i;
    *((_DWORD *)v1 + 50) += 4;
    v137 = *((_BYTE *)this + 1120) & 0x7F;
    if (v137 < 0x40)
    {
      *((_QWORD *)this + 9) &= ~(1 << v137);
      goto LABEL_143;
    }
    goto LABEL_260;
  }
LABEL_143:
  v138 = 0;
  v3 = 128;
  while (2)
  {
    if ((v3 & 0x7F) >= 0x40)
      goto LABEL_260;
    v1 = *(WTF **)&v5[8 * (v3 & 0x7F)];
    if (!v1)
      goto LABEL_146;
    if ((*((_BYTE *)v1 + 33) & 0x7F) == 0x7F)
      v139 = (*((_BYTE *)v1 + 34) + 32) & 0x7F;
    else
      v139 = *((_BYTE *)v1 + 33) & 0x7F;
    if (v139 >= 0x40)
      goto LABEL_260;
    v140 = *(WTF **)&v4[8 * v139];
    if (!v140)
      goto LABEL_324;
    if (v140 == v1)
      goto LABEL_146;
    v294 = v138;
    v295 = *(_QWORD *)&v4[8 * v139];
    v141 = v139;
    if ((v139 & 0x60) != 0x20)
    {
      v243 = 0;
      v244 = 255;
      v245 = 128;
      do
      {
        v246 = v245 & 0x7F;
        if (v246 >= 0x40)
          goto LABEL_260;
        v247 = *((_QWORD *)this + 9);
        if (!(v247 & (1 << v246) | v245 & 0x60) && !*(_QWORD *)&v4[8 * v246])
        {
          if (!*(_QWORD *)&v5[8 * v246])
            goto LABEL_305;
          if ((~v244 & 0x7F) == 0)
            v244 = v245;
        }
        v245 = ((_BYTE)v245 + 1) | 0xFFFFFF80;
        if (v243 == 63)
          v245 = -1;
        v243 = v245 & 0x7F;
      }
      while ((v245 & 0x7F) < 0x40);
      if ((~v244 & 0x7F) == 0)
      {
        v282 = *((unsigned __int8 *)this + 592);
        if (v282 != 255)
        {
          v245 = v282 & 0x7F;
          if (v245 <= 0x1F)
          {
            *((_QWORD *)this + 9) = v247 & ~(1 << v245);
            *((_BYTE *)this + 592) = -1;
LABEL_305:
            LOBYTE(v244) = v245;
          }
        }
      }
      v248 = v244 & 0x7F;
      if (v248 == 127)
        v249 = -1;
      else
        v249 = v248;
      if ((_DWORD)v141 == v249)
      {
LABEL_318:
        v257 = *(_QWORD *)(v295 + 24);
        v258 = *(unsigned __int8 *)(v295 + 32);
        switch((char)v257)
        {
          case 1:
          case 9:
            LOBYTE(v304[0]) = 1;
            break;
          case 2:
          case 10:
            LOBYTE(v304[0]) = 2;
            break;
          case 3:
          case 11:
            LOBYTE(v304[0]) = 3;
            break;
          case 4:
          case 14:
            LOBYTE(v304[0]) = 4;
            break;
          case 5:
          case 13:
            LOBYTE(v304[0]) = 5;
            break;
          default:
            LOBYTE(v304[0]) = 0;
            break;
        }
        v259 = v249;
        goto LABEL_321;
      }
      v250 = *(_QWORD *)this;
      if ((_DWORD)v141 == 63)
      {
        if (v249 != 31)
        {
          v253 = v249 & 0x1F | 0xD2800000;
          goto LABEL_315;
        }
      }
      else if ((_DWORD)v141 != 31 && v249 != 31)
      {
        v251 = v249 & 0x1F | ((v141 & 0x1F) << 16);
        v252 = -1442839584;
LABEL_314:
        v253 = v251 | v252;
LABEL_315:
        v256 = *(_DWORD *)(v250 + 200);
        v255 = (unsigned int *)(v250 + 200);
        v254 = v256;
        if (v256 + 4 > *(v255 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v255 - 36), (uint64_t)v14, v15, v16, v17, v18, v19, v20);
          v254 = *v255;
        }
        *(_DWORD *)(*((_QWORD *)v255 - 18) + v254) = v253;
        *v255 += 4;
        goto LABEL_318;
      }
      v251 = (char)v249 | (32 * v141);
      v252 = -1862270976;
      goto LABEL_314;
    }
    v142 = 0;
    v143 = 255;
    v144 = 128;
    while (1)
    {
      v145 = v144 & 0x7F;
      if (v145 >= 0x40)
        goto LABEL_260;
      v146 = *((_QWORD *)this + 9);
      if ((v144 & 0x60) != 0x20 || (v146 & (1 << v145)) != 0 || *(_QWORD *)&v4[8 * v145])
        goto LABEL_162;
      if (!*(_QWORD *)&v5[8 * v145])
        break;
      if ((~v143 & 0x7F) == 0)
        v143 = v144;
LABEL_162:
      v144 = ((_BYTE)v144 + 1) | 0xFFFFFF80;
      if (v142 == 63)
        v144 = -1;
      v142 = v144 & 0x7F;
      if ((v144 & 0x7F) >= 0x40)
      {
        if ((~v143 & 0x7F) != 0)
          goto LABEL_368;
        v281 = *((unsigned __int8 *)this + 592);
        if (v281 == 255 || (v281 & 0x60) != 0x20)
          goto LABEL_368;
        LOBYTE(v143) = v281 & 0x7F;
        if ((v281 & 0x7Fu) < 0x40)
        {
          *((_QWORD *)this + 9) = v146 & ~(1 << v143);
          *((_BYTE *)this + 592) = -1;
          goto LABEL_368;
        }
        goto LABEL_260;
      }
    }
    LOBYTE(v143) = v144;
LABEL_368:
    v272 = v143 & 0x7F;
    if (v272 == 127)
      v273 = -1;
    else
      v273 = v272 - 32;
    v274 = *(_QWORD *)this;
    v275 = *(_DWORD *)(*(_QWORD *)this + 200);
    if (v275 + 4 > *(_DWORD *)(*(_QWORD *)this + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v274 + 56), (uint64_t)v14, v15, v16, v17, v18, v19, v20);
      v275 = *(_DWORD *)(v274 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v274 + 56) + v275) = v273 | (32 * (char)(v141 - 32)) | 0x1E604000;
    *(_DWORD *)(v274 + 200) += 4;
    v257 = *(_QWORD *)(v295 + 24);
    v258 = *(unsigned __int8 *)(v295 + 32);
    if (v257 == 7 || v257 == 12)
      v276 = 7;
    else
      v276 = 6;
    LOBYTE(v304[0]) = v276;
    v259 = v273;
LABEL_321:
    *(WTF **)((char *)v304 + 1) = (WTF *)v259;
    i = (int64_t)v304[0];
    if (v257 != 17)
      JSC::CallFrameShuffler::setCachedRecovery((uint64_t)this, v257, v258, 0);
    *(_QWORD *)(v295 + 24) = i;
    *(_BYTE *)(v295 + 32) = 0;
    JSC::CallFrameShuffler::setCachedRecovery((uint64_t)this, i, 0, v295);
    v139 = v141;
    v138 = v294;
LABEL_324:
    v260 = v139;
    v261 = *((_QWORD *)v1 + 3);
    v262 = *((_BYTE *)v1 + 32);
    if (v261 == 17)
    {
      v283 = *(_DWORD **)this;
      v304[0] = *((WTF **)v1 + 3);
      LOBYTE(v304[1]) = v262;
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v283, *(uint64_t *)((char *)v304 + 1), v260, v16, v17, v18, v19, v20);
      if (v260 <= 0x1F)
      {
        LOBYTE(v304[0]) = 0;
        *(WTF **)((char *)v304 + 1) = (WTF *)v260;
      }
      else
      {
        LOBYTE(v304[0]) = 6;
        *(WTF **)((char *)v304 + 1) = (WTF *)(v260 - 32);
      }
      i = (int64_t)v304[0];
      v269 = *((_QWORD *)v1 + 3);
LABEL_339:
      if (v269 != 17)
        JSC::CallFrameShuffler::setCachedRecovery((uint64_t)this, v269, *((unsigned __int8 *)v1 + 32), 0);
      *((_QWORD *)v1 + 3) = i;
      *((_BYTE *)v1 + 32) = 0;
      JSC::CallFrameShuffler::setCachedRecovery((uint64_t)this, i, 0, (uint64_t)v1);
      goto LABEL_146;
    }
    if (v261 <= 5u)
    {
      v284 = *(_DWORD **)this;
      if (v260 > 0x1F)
      {
        v304[0] = *((WTF **)v1 + 3);
        LOBYTE(v304[1]) = v262;
        v291 = BYTE1(v261);
        v292 = v284[50];
        if (v292 + 4 > v284[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v284 + 14), (uint64_t)v14, v15, v16, v17, v18, v19, v20);
          v292 = v284[50];
        }
        *(_DWORD *)(*((_QWORD *)v284 + 7) + v292) = (32 * (v291 & 0x1F)) | 0x9E660000 | (v260 - 32) | 0x10000;
        v284[50] += 4;
LABEL_436:
        v269 = *((_QWORD *)v1 + 3);
        if (v269 > 0x11u || ((1 << v269) & 0x20141) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1986F56C8);
        }
LABEL_336:
        if (v260 <= 0x1F)
        {
          LOBYTE(v304[0]) = 0;
          *(WTF **)((char *)v304 + 1) = (WTF *)v260;
        }
        else
        {
          LOBYTE(v304[0]) = 6;
          *(WTF **)((char *)v304 + 1) = (WTF *)(v260 - 32);
        }
        i = (int64_t)v304[0];
        goto LABEL_339;
      }
      v304[0] = *((WTF **)v1 + 3);
      LOBYTE(v304[1]) = v262;
      if ((_DWORD)v260 == BYTE1(v261))
        goto LABEL_436;
      if (BYTE1(v261) == 63)
      {
        if ((_DWORD)v260 != 31)
        {
          v286 = v260 | 0xD2800000;
          goto LABEL_425;
        }
      }
      else if ((_DWORD)v260 != 31 && BYTE1(v261) != 31)
      {
        v286 = v260 & 0xFFE0FFFF | ((BYTE1(v261) & 0x1F) << 16) | 0xAA0003E0;
LABEL_425:
        v289 = v284[50];
        v288 = v284 + 50;
        v287 = v289;
        if (v289 + 4 > *(v288 - 2))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v288 - 36), (uint64_t)v14, v15, v16, v17, v18, v19, v20);
          v287 = *v288;
        }
        *(_DWORD *)(*((_QWORD *)v288 - 18) + v287) = v286;
        *v288 += 4;
        goto LABEL_436;
      }
      v286 = v260 | (32 * SBYTE1(v261)) | 0x91000000;
      goto LABEL_425;
    }
    if (v261 != 12 && v261 != 7)
    {
      v264 = *(_DWORD **)this;
      if (v260 <= 0x1F)
      {
        v304[0] = *((WTF **)v1 + 3);
        LOBYTE(v304[1]) = v262;
        v290 = BYTE1(v261);
        v266 = v264[50];
        if (v266 + 4 > v264[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v264 + 14), (uint64_t)v14, v15, v16, v17, v18, v19, v20);
          v266 = v264[50];
        }
        v267 = v260 | (32 * v290);
        v268 = -1637482496;
      }
      else
      {
        v304[0] = *((WTF **)v1 + 3);
        LOBYTE(v304[1]) = v262;
        v265 = BYTE1(v261);
        v266 = v264[50];
        if (v266 + 4 > v264[48])
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v264 + 14), (uint64_t)v14, v15, v16, v17, v18, v19, v20);
          v266 = v264[50];
        }
        v267 = (v260 - 32) | (32 * v265);
        v268 = 509624320;
      }
      *(_DWORD *)(*((_QWORD *)v264 + 7) + v266) = v267 | v268;
      v264[50] += 4;
      v269 = *((_QWORD *)v1 + 3);
      if (v269 > 0x11u || ((1 << v269) & 0x20141) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1986F5298);
      }
      goto LABEL_336;
    }
    JSC::CallFrameShuffler::emitBox(this, (uint64_t)v1, v15, v16, v17, v18, v19, v20);
LABEL_146:
    if (v138 == 63)
      v3 = -1;
    else
      v3 = ((_BYTE)v3 + 1) | 0xFFFFFF80;
    v138 = v3 & 0x7F;
    if ((v3 & 0x7F) < 0x40)
      continue;
    break;
  }
}

uint64_t JSC::CallFrameShuffler::tryWrites(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;

  if (*(_BYTE *)(a1 + 1120) == 31)
  {
    v38 = *(_QWORD *)(a2 + 24) - 8 <= 6 && *(_DWORD *)(a2 + 12) == 1;
    if (v38 && **(_DWORD **)a2 - *(_DWORD *)(a1 + 64) == (*(_QWORD *)(a2 + 24) >> 8))
    {
      WTF::Vector<JSC::DFG::BasicBlock *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((unint64_t *)a2, (void *)a2, a3, a4, a5, a6, a7, a8);
      result = 1;
      if (*(unsigned __int8 *)(a2 + 33) == 255 && *(unsigned __int8 *)(a2 + 34) == 255)
      {
        JSC::CallFrameShuffler::clearCachedRecovery(a1, *(_QWORD *)(a2 + 24));
        return 1;
      }
      return result;
    }
  }
  result = JSC::CallFrameShuffler::canLoadAndBox(a1, a2);
  if (!(_DWORD)result)
    return result;
  JSC::CallFrameShuffler::emitLoad(a1, a2, v11, v12, v13, v14, v15, v16);
  JSC::CallFrameShuffler::emitBox((JSC::CallFrameShuffler *)a1, a2, v17, v18, v19, v20, v21, v22);
  if (!*(_DWORD *)(a2 + 12))
  {
    if (!*(_DWORD *)(a2 + 8))
      goto LABEL_14;
LABEL_12:
    v33 = *(_QWORD *)a2;
    if (a2 + 16 != *(_QWORD *)a2)
    {
      if (!v33)
        goto LABEL_28;
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v33, v23, v24, v25, v26, v27, v28, v29);
      v33 = *(_QWORD *)a2;
    }
    if (v33)
      goto LABEL_14;
LABEL_28:
    *(_QWORD *)a2 = a2 + 16;
    *(_DWORD *)(a2 + 8) = 1;
    goto LABEL_14;
  }
  v30 = 0;
  do
  {
    v31 = *(int *)(*(_QWORD *)a2 + 4 * v30);
    JSC::CallFrameShuffler::emitStore((uint64_t *)a1, a2, *(unsigned __int8 *)(a1 + 1120) | ((unint64_t)(*(_DWORD *)(a1 + 1124) + v31) << 35), v25, v26, v27, v28, v29);
    if (v31 >= *(unsigned int *)(a1 + 52))
      goto LABEL_39;
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v31) = 0;
    ++v30;
    v32 = *(unsigned int *)(a2 + 12);
  }
  while (v30 < v32);
  if (*(_DWORD *)(a2 + 8))
  {
    if ((_DWORD)v32)
      *(_DWORD *)(a2 + 12) = 0;
    goto LABEL_12;
  }
LABEL_14:
  result = 1;
  if (*(unsigned __int8 *)(a2 + 33) == 255 && *(unsigned __int8 *)(a2 + 34) == 255)
  {
    v34 = *(_QWORD *)(a2 + 24);
    if (v34 != 17)
    {
      v39 = *(_QWORD *)(a2 + 24);
      if (v34 <= 5u)
        goto LABEL_21;
      if ((v34 & 0xFE) == 6)
      {
        v35 = (SBYTE1(v39) + 32);
        if (v35 >= 0x40)
        {
          do
          {
            __break(1u);
LABEL_21:
            v35 = SBYTE1(v39);
          }
          while (v35 >= 0x40);
        }
        v36 = (_QWORD *)(a1 + 8 * v35 + 80);
      }
      else
      {
        v37 = 1 - *(_DWORD *)((char *)&v39 + 1);
        if (v37 >= *(unsigned int *)(a1 + 28))
        {
LABEL_39:
          __break(0xC471u);
          JUMPOUT(0x1986F5A10);
        }
        v36 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v37);
      }
      *v36 = 0;
    }
  }
  return result;
}

uint64_t JSC::CallFrameShuffler::clearCachedRecovery(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;

  if (a2 != 17)
  {
    if (a2 <= 5u)
      goto LABEL_6;
    if ((a2 & 0xFE) == 6)
    {
      v2 = (SBYTE1(a2) + 32);
      if (v2 >= 0x40)
      {
        do
        {
          __break(1u);
LABEL_6:
          v2 = SBYTE1(a2);
        }
        while (v2 >= 0x40);
      }
      v3 = (_QWORD *)(result + 8 * v2 + 80);
    }
    else
    {
      v4 = (int)(1 - (a2 >> 8));
      if (v4 >= *(unsigned int *)(result + 28))
      {
        __break(0xC471u);
        return result;
      }
      v3 = (_QWORD *)(*(_QWORD *)(result + 16) + 8 * v4);
    }
    *v3 = 0;
  }
  return result;
}

uint64_t JSC::CallFrameShuffler::canLoadAndBox(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  char v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;

  result = JSC::CallFrameShuffler::canLoad(a1, a2);
  if ((_DWORD)result)
  {
    v6 = *(unsigned __int8 *)(a2 + 24);
    if (v6 == 12 || v6 == 7)
    {
      v8 = 0;
      v9 = 255;
      v10 = 128;
      while (1)
      {
        v11 = v10 & 0x7F;
        if (v11 >= 0x40)
          break;
        v5 = *(_QWORD *)(a1 + 72);
        if (!(v5 & (1 << v11) | v10 & 0x60) && !*(_QWORD *)(a1 + 80 + 8 * v11))
        {
          if (!*(_QWORD *)(a1 + 8 * v11 + 600))
          {
            v9 = v10;
            goto LABEL_17;
          }
          if ((~v9 & 0x7F) == 0)
            v9 = v10;
        }
        v10 = ((_BYTE)v10 + 1) | 0xFFFFFF80;
        if (v8 == 63)
          v10 = -1;
        v8 = v10 & 0x7F;
        if ((v10 & 0x7F) >= 0x40)
          goto LABEL_24;
      }
      __break(1u);
LABEL_24:
      if ((~v9 & 0x7F) == 0)
      {
        v12 = *(unsigned __int8 *)(a1 + 592);
        if (v12 != 255)
        {
          v13 = v12 & 0x7F;
          if (v13 <= 0x1F)
          {
            *(_QWORD *)(a1 + 72) = v5 & ~(1 << v13);
            *(_BYTE *)(a1 + 592) = -1;
            v9 = v13;
          }
        }
      }
LABEL_17:
      if ((~v9 & 0x7F) == 0)
        return 0;
      LOBYTE(v6) = *(_BYTE *)(a2 + 24);
    }
    return (((_BYTE)v6 - 2) & 0xF6) != 0
        || JSC::CallFrameShuffler::getFreeFPR((JSC::CallFrameShuffler *)a1) != -1;
  }
  return result;
}

BOOL JSC::CallFrameShuffler::hasFreeRegister@<W0>(JSC::CallFrameShuffler *this@<X0>, unint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v2 = 0;
  LODWORD(v3) = 255;
  v4 = 128;
  while (1)
  {
    v5 = v4 & 0x7F;
    if (v5 < 0x40)
      break;
    while (1)
    {
      __break(1u);
LABEL_16:
      if ((~(_DWORD)v3 & 0x7F) == 0)
        LODWORD(v3) = v4;
LABEL_7:
      v4 = ((_BYTE)v4 + 1) | 0xFFFFFF80;
      if (v2 == 63)
        v4 = -1;
      v2 = v4 & 0x7F;
      if ((v4 & 0x7F) < 0x40)
        break;
      v5 = v3 & 0x7F;
      if (v5 != 127)
        return v5 != 127;
      v3 = *((unsigned __int8 *)this + 592);
      if (v3 == 255)
      {
        v5 = 127;
        return v5 != 127;
      }
      v5 = v3 & 0x7F;
      if (v5 < 0x40)
      {
        *((_QWORD *)this + 9) = a2 & ~(1 << v5);
        *((_BYTE *)this + 592) = -1;
        return v5 != 127;
      }
    }
  }
  v6 = v4 & 0x7F;
  a2 = *((_QWORD *)this + 9);
  if (((a2 >> (v4 & 0x7F)) & 1) != 0 || *((_QWORD *)this + v6 + 10))
    goto LABEL_7;
  if (*((_QWORD *)this + v6 + 75))
    goto LABEL_16;
  return v5 != 127;
}

void JSC::JITCode::findPC(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

uint64_t JSC::BaselineJITCode::pcToCodeOriginMap(JSC::BaselineJITCode *this)
{
  return *((_QWORD *)this + 16);
}

void JSC::BaselineJITPlan::~BaselineJITPlan(JSC::BaselineJITPlan *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int **v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int **v21;
  unsigned int **v22;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 32))(v9);
    }
  }
  *(_QWORD *)this = off_1E3596038;
  v13 = *((unsigned int *)this + 17);
  if ((_DWORD)v13)
  {
    v15 = (unsigned int **)*((_QWORD *)this + 7);
    v16 = &v15[v13];
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v17 + 2);
          v21 = v16;
          v22 = v15;
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
          v16 = v21;
          v15 = v22;
        }
      }
      ++v15;
    }
    while (v15 != v16);
  }
  v14 = *((_QWORD *)this + 7);
  if (v14)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int **v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int **v21;
  unsigned int **v22;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 32))(v9);
    }
  }
  *(_QWORD *)this = off_1E3596038;
  v13 = *((unsigned int *)this + 17);
  if ((_DWORD)v13)
  {
    v15 = (unsigned int **)*((_QWORD *)this + 7);
    v16 = &v15[v13];
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v17 + 2);
          v21 = v16;
          v22 = v15;
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
          v16 = v21;
          v15 = v22;
        }
      }
      ++v15;
    }
    while (v15 != v16);
  }
  v14 = *((_QWORD *)this + 7);
  if (v14)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  while (2)
  {
    v4 = 1 - a3;
LABEL_2:
    v5 = v4;
    v6 = (char *)a2 - (char *)a1;
    v7 = ((char *)a2 - (char *)a1) >> 4;
    switch(v7)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v9 = *(a2 - 2);
        v8 = a2 - 2;
        if (v9 < *a1)
          goto LABEL_4;
        return;
      case 3uLL:
        v11 = a1 + 2;
        v12 = a1[2];
        v14 = *(a2 - 2);
        v8 = a2 - 2;
        v13 = v14;
        if (v12 < *a1)
        {
          if (v13 < v12)
          {
LABEL_4:
            v32 = *(_OWORD *)a1;
            v10 = *v8;
            *((_DWORD *)a1 + 2) = *((_DWORD *)v8 + 2);
            *a1 = v10;
          }
          else
          {
            v33 = *(_OWORD *)a1;
            *a1 = *v11;
            *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 6);
            *v11 = v33;
            *((_DWORD *)a1 + 6) = DWORD2(v33);
            if (*v8 >= a1[2])
              return;
            v32 = *(_OWORD *)v11;
            v15 = *((_DWORD *)v8 + 2);
            *v11 = *v8;
            *((_DWORD *)a1 + 6) = v15;
          }
          *v8 = v32;
          *((_DWORD *)v8 + 2) = DWORD2(v32);
          return;
        }
        if (v13 < v12)
        {
          v37 = *(_OWORD *)v11;
          v21 = *((_DWORD *)v8 + 2);
          *v11 = *v8;
          *((_DWORD *)a1 + 6) = v21;
          *v8 = v37;
          *((_DWORD *)v8 + 2) = DWORD2(v37);
          goto LABEL_20;
        }
        return;
      case 4uLL:
        v11 = a1 + 2;
        v16 = a1[2];
        v17 = a1 + 4;
        v18 = a1[4];
        v19 = a2 - 2;
        if (v16 >= *a1)
        {
          if (v18 < v16)
          {
            v39 = *(_OWORD *)v11;
            *v11 = *v17;
            *((_DWORD *)a1 + 6) = *((_DWORD *)a1 + 10);
            *v17 = v39;
            *((_DWORD *)a1 + 10) = DWORD2(v39);
            if (a1[2] < *a1)
            {
              v40 = *(_OWORD *)a1;
              *a1 = *v11;
              *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 6);
              *v11 = v40;
              *((_DWORD *)a1 + 6) = DWORD2(v40);
            }
          }
        }
        else
        {
          if (v18 < v16)
          {
            v34 = *(_OWORD *)a1;
            *a1 = *v17;
            *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 10);
LABEL_14:
            *v17 = v34;
            *((_DWORD *)a1 + 10) = DWORD2(v34);
            goto LABEL_15;
          }
          v41 = *(_OWORD *)a1;
          *a1 = *v11;
          *((_DWORD *)a1 + 2) = *((_DWORD *)a1 + 6);
          *v11 = v41;
          *((_DWORD *)a1 + 6) = DWORD2(v41);
          if (v18 < a1[2])
          {
            v34 = *(_OWORD *)v11;
            *v11 = *v17;
            *((_DWORD *)a1 + 6) = *((_DWORD *)a1 + 10);
            goto LABEL_14;
          }
        }
LABEL_15:
        if (*v19 < *v17)
        {
          v35 = *(_OWORD *)v17;
          v20 = *((_DWORD *)a2 - 2);
          *v17 = *v19;
          *((_DWORD *)a1 + 10) = v20;
          *v19 = v35;
          *((_DWORD *)a2 - 2) = DWORD2(v35);
          if (*v17 < *v11)
          {
            v36 = *(_OWORD *)v11;
            *v11 = *v17;
            *((_DWORD *)a1 + 6) = *((_DWORD *)a1 + 10);
            *v17 = v36;
            *((_DWORD *)a1 + 10) = DWORD2(v36);
LABEL_20:
            if (a1[2] < *a1)
            {
              v38 = *(_OWORD *)a1;
              *a1 = *v11;
              *((_DWORD *)a1 + 2) = *((_DWORD *)v11 + 2);
              *v11 = v38;
              *((_DWORD *)v11 + 2) = DWORD2(v38);
            }
          }
        }
        return;
      case 5uLL:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>((__n128 *)a1, (__n128 *)a1 + 1, (__int128 *)a1 + 2, (__int128 *)a1 + 3, (uint64_t)(a2 - 2));
        return;
      default:
        v22 = a4;
        v30 = a2;
        v31 = (uint64_t)a1;
        if (v6 <= 383)
        {
          if ((a4 & 1) != 0)
            std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>((uint64_t)a1, (uint64_t)a2);
          else
            std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>(a1, a2);
          return;
        }
        if (v5 == 1)
        {
          if (a1 != a2)
            std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *,JSC::BinarySwitch::Case *>((uint64_t)a1, a2, (__int128 *)a2);
          return;
        }
        v23 = a2 - 2;
        v24 = v7 >> 1;
        v25 = &a1[2 * (v7 >> 1)];
        if ((unint64_t)v6 >= 0x801)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>((__int128 *)a1, &a1[2 * v24], v23);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>((__int128 *)(v31 + 16), v25 - 2, v30 - 4);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>((__int128 *)(v31 + 32), (uint64_t *)(v31 + 16 + 16 * v24), v30 - 6);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>((__int128 *)v25 - 1, v25, (uint64_t *)(v31 + 16 + 16 * v24));
          v42 = *(_OWORD *)v31;
          v28 = *v25;
          *(_DWORD *)(v31 + 8) = *((_DWORD *)v25 + 2);
          *(_QWORD *)v31 = v28;
          *((_DWORD *)v25 + 2) = DWORD2(v42);
          *v25 = v42;
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>((__int128 *)&a1[2 * v24], a1, v23);
        }
        if ((v22 & 1) == 0 && *(_QWORD *)(v31 - 16) >= *(_QWORD *)v31)
        {
          a1 = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::BinarySwitch::Case *,std::__less<void,void> &>((uint64_t *)v31, v30);
          goto LABEL_37;
        }
        v26 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::BinarySwitch::Case *,std::__less<void,void> &>((uint64_t *)v31, v30);
        LOBYTE(a4) = v22;
        if ((v27 & 1) == 0)
          goto LABEL_36;
        v29 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>(v31, (uint64_t)v26);
        if (std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>((uint64_t)(v26 + 2), (uint64_t)v30))
        {
          a3 = -v5;
          a2 = v26;
          a1 = (uint64_t *)v31;
          a4 = v22;
          if (v29)
            return;
          continue;
        }
        v4 = v5 + 1;
        a2 = v30;
        a4 = v22;
        a1 = v26 + 2;
        if (!v29)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *,false>(v31, v26, -v5, a4 & 1);
          a1 = v26 + 2;
LABEL_37:
          a4 = 0;
          a3 = -v5;
          a2 = v30;
          continue;
        }
        goto LABEL_2;
    }
  }
}

uint64_t std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (result != a2)
  {
    v2 = result + 16;
    if (result + 16 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_QWORD *)(v4 + 16);
        if (v6 < *(_QWORD *)v4)
        {
          v7 = *(_DWORD *)(v4 + 24);
          v8 = v3;
          while (1)
          {
            v9 = result + v8;
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(result + v8);
            *(_DWORD *)(v9 + 24) = *(_DWORD *)(result + v8 + 8);
            if (!v8)
              break;
            v8 -= 16;
            if (v6 >= *(_QWORD *)(v9 - 16))
            {
              v10 = result + v8 + 16;
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *(_QWORD *)v10 = v6;
          *(_DWORD *)(v10 + 8) = v7;
        }
        v2 = v5 + 16;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 16 != a2);
    }
  }
  return result;
}

_QWORD *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = -2;
      v4 = 1;
      v5 = result;
      while (1)
      {
        v6 = *v2;
        if (*v2 < *v5)
          break;
LABEL_9:
        v5 = &result[2 * v4++];
        v2 += 2;
        --v3;
        if (v2 == a2)
          return result;
      }
      v7 = *((_DWORD *)v5 + 6);
      v8 = v3;
      v9 = v2;
      v10 = v2;
      while (1)
      {
        v11 = *(v10 - 2);
        v10 -= 2;
        *v9 = v11;
        *((_DWORD *)v9 + 2) = *((_DWORD *)v9 - 2);
        if (__CFADD__(v8++, 1))
          break;
        v13 = *(v9 - 4);
        v9 = v10;
        if (v6 >= v13)
        {
          *v10 = v6;
          *((_DWORD *)v10 + 2) = v7;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
  return result;
}

__int128 *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>(__int128 *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *(_QWORD *)result)
  {
    if (v4 < v3)
    {
      v11 = *(_OWORD *)a2;
      v6 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v6;
      *a3 = v11;
      *((_DWORD *)a3 + 2) = DWORD2(v11);
      if (*a2 < *(_QWORD *)result)
      {
        v12 = *result;
        v7 = *((_DWORD *)a2 + 2);
        *(_QWORD *)result = *a2;
        *((_DWORD *)result + 2) = v7;
        *a2 = v12;
        *((_DWORD *)a2 + 2) = DWORD2(v12);
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v13 = *result;
      v8 = *((_DWORD *)a2 + 2);
      *(_QWORD *)result = *a2;
      *((_DWORD *)result + 2) = v8;
      *a2 = v13;
      *((_DWORD *)a2 + 2) = DWORD2(v13);
      if (*a3 >= *a2)
        return result;
      v10 = *(_OWORD *)a2;
      v9 = *((_DWORD *)a3 + 2);
      *a2 = *a3;
      *((_DWORD *)a2 + 2) = v9;
    }
    else
    {
      v10 = *result;
      v5 = *((_DWORD *)a3 + 2);
      *(_QWORD *)result = *a3;
      *((_DWORD *)result + 2) = v5;
    }
    *a3 = v10;
    *((_DWORD *)a3 + 2) = DWORD2(v10);
  }
  return result;
}

uint64_t *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::BinarySwitch::Case *,std::__less<void,void> &>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v3 = *result;
  v2 = result[1];
  if (*result < *(a2 - 2))
  {
    v4 = result + 2;
    while (v4 != a2)
    {
      v5 = *v4;
      v4 += 2;
      if (v3 < v5)
      {
        v6 = v4 - 2;
        goto LABEL_9;
      }
    }
    goto LABEL_24;
  }
  v7 = result + 2;
  do
  {
    v6 = v7;
    if (v7 >= a2)
      break;
    v7 += 2;
  }
  while (v3 >= *v6);
LABEL_9:
  v8 = a2;
  if (v6 < a2)
  {
    v8 = a2;
    while (v8 != result)
    {
      v9 = *(v8 - 2);
      v8 -= 2;
      if (v3 >= v9)
        goto LABEL_20;
    }
    goto LABEL_24;
  }
LABEL_20:
  if (v6 < v8)
  {
    v15 = *(_OWORD *)v6;
    v10 = *v8;
    *((_DWORD *)v6 + 2) = *((_DWORD *)v8 + 2);
    *v6 = v10;
    v11 = v6 + 2;
    *((_DWORD *)v8 + 2) = DWORD2(v15);
    *v8 = v15;
    while (v11 != a2)
    {
      v12 = *v11;
      v11 += 2;
      if (v3 < v12)
      {
        v6 = v11 - 2;
        while (v8 != result)
        {
          v13 = *(v8 - 2);
          v8 -= 2;
          if (v3 >= v13)
            goto LABEL_20;
        }
        break;
      }
    }
LABEL_24:
    __break(1u);
    return result;
  }
  if (v6 - 2 != result)
  {
    v14 = *(v6 - 2);
    *((_DWORD *)result + 2) = *((_DWORD *)v6 - 2);
    *result = v14;
  }
  *(v6 - 2) = v3;
  *((_DWORD *)v6 - 2) = v2;
  return v6;
}

uint64_t *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::BinarySwitch::Case *,std::__less<void,void> &>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v2 = 0;
  v4 = *result;
  v3 = result[1];
  do
  {
    v5 = &result[v2 + 2];
    if (v5 == a2)
      goto LABEL_22;
    v2 += 2;
  }
  while (*v5 < v4);
  v6 = &result[v2];
  v7 = a2;
  if (v2 != 2)
  {
    while (v7 != result)
    {
      v8 = *(v7 - 2);
      v7 -= 2;
      if (v8 < v4)
        goto LABEL_10;
    }
    goto LABEL_22;
  }
  do
  {
    if (v6 >= v7)
      break;
    v9 = *(v7 - 2);
    v7 -= 2;
  }
  while (v9 >= v4);
LABEL_10:
  v10 = &result[v2];
  if (v6 < v7)
  {
    v11 = v7;
LABEL_12:
    v17 = *(_OWORD *)v10;
    v12 = *v11;
    *((_DWORD *)v10 + 2) = *((_DWORD *)v11 + 2);
    *v10 = v12;
    v13 = v10 + 2;
    *((_DWORD *)v11 + 2) = DWORD2(v17);
    *v11 = v17;
    while (v13 != a2)
    {
      v14 = *v13;
      v13 += 2;
      if (v14 >= v4)
      {
        v10 = v13 - 2;
        while (v11 != result)
        {
          v15 = *(v11 - 2);
          v11 -= 2;
          if (v15 < v4)
          {
            if (v10 < v11)
              goto LABEL_12;
            goto LABEL_19;
          }
        }
        break;
      }
    }
LABEL_22:
    __break(1u);
    return result;
  }
LABEL_19:
  if (v10 - 2 != result)
  {
    v16 = *(v10 - 2);
    *((_DWORD *)result + 2) = *((_DWORD *)v10 - 2);
    *result = v16;
  }
  *(v10 - 2) = v4;
  *((_DWORD *)v10 - 2) = v3;
  return v10 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  __n128 *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __int128 v43;
  __n128 v44;
  __n128 v45;

  v2 = 1;
  switch((a2 - a1) >> 4)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v4 = *(_QWORD *)(a2 - 16);
      v3 = a2 - 16;
      if (v4 < *(_QWORD *)a1)
        goto LABEL_9;
      return 1;
    case 3:
      v10 = a1 + 16;
      v11 = *(_QWORD *)(a1 + 16);
      v13 = *(_QWORD *)(a2 - 16);
      v3 = a2 - 16;
      v12 = v13;
      if (v11 >= *(_QWORD *)a1)
      {
        if (v12 < v11)
        {
          v37 = *(__n128 *)v10;
          v20 = *(_DWORD *)(v3 + 8);
          *(_QWORD *)v10 = *(_QWORD *)v3;
          *(_DWORD *)(a1 + 24) = v20;
          *(_QWORD *)v3 = v37.n128_u64[0];
          *(_DWORD *)(v3 + 8) = v37.n128_u32[2];
LABEL_45:
          if (*(_QWORD *)(a1 + 16) < *(_QWORD *)a1)
          {
            v45 = *(__n128 *)a1;
            *(_QWORD *)a1 = *(_QWORD *)v10;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v10 + 8);
            *(_QWORD *)v10 = v45.n128_u64[0];
            *(_DWORD *)(v10 + 8) = v45.n128_u32[2];
          }
        }
      }
      else
      {
        if (v12 < v11)
        {
LABEL_9:
          v33 = *(__n128 *)a1;
          v14 = *(_DWORD *)(v3 + 8);
          *(_QWORD *)a1 = *(_QWORD *)v3;
          *(_DWORD *)(a1 + 8) = v14;
LABEL_10:
          *(_QWORD *)v3 = v33.n128_u64[0];
          *(_DWORD *)(v3 + 8) = v33.n128_u32[2];
          return 1;
        }
        v41 = *(__n128 *)a1;
        *(_QWORD *)a1 = *(_QWORD *)v10;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
        *(_QWORD *)v10 = v41.n128_u64[0];
        *(_DWORD *)(a1 + 24) = v41.n128_u32[2];
        if (*(_QWORD *)v3 < *(_QWORD *)(a1 + 16))
        {
          v33 = *(__n128 *)v10;
          v29 = *(_DWORD *)(v3 + 8);
          *(_QWORD *)v10 = *(_QWORD *)v3;
          *(_DWORD *)(a1 + 24) = v29;
          goto LABEL_10;
        }
      }
      return 1;
    case 4:
      v10 = a1 + 16;
      v15 = *(_QWORD *)(a1 + 16);
      v16 = (_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 32);
      v18 = (_QWORD *)(a2 - 16);
      v19 = *(_QWORD *)a1;
      if (v15 >= *(_QWORD *)a1)
      {
        if (v17 < v15)
        {
          v38 = *(__n128 *)v10;
          *(_QWORD *)v10 = *v16;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
          *v16 = v38.n128_u64[0];
          *(_DWORD *)(a1 + 40) = v38.n128_u32[2];
          if (*(_QWORD *)v10 < v19)
          {
            v39 = *(__n128 *)a1;
            *(_QWORD *)a1 = *(_QWORD *)v10;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
            *(_QWORD *)v10 = v39.n128_u64[0];
            *(_DWORD *)(a1 + 24) = v39.n128_u32[2];
          }
        }
      }
      else
      {
        if (v17 >= v15)
        {
          v42 = *(__n128 *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v10;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
          *(_QWORD *)v10 = v42.n128_u64[0];
          *(_DWORD *)(a1 + 24) = v42.n128_u32[2];
          if (v17 >= *(_QWORD *)(a1 + 16))
            goto LABEL_42;
          v34 = *(__n128 *)v10;
          *(_QWORD *)v10 = *v16;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
        }
        else
        {
          v34 = *(__n128 *)a1;
          *(_QWORD *)a1 = *v16;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 40);
        }
        *v16 = v34.n128_u64[0];
        *(_DWORD *)(a1 + 40) = v34.n128_u32[2];
      }
LABEL_42:
      if (*v18 >= *v16)
        return 1;
      v43 = *(_OWORD *)v16;
      v30 = *(_DWORD *)(a2 - 8);
      *v16 = *v18;
      *(_DWORD *)(a1 + 40) = v30;
      *v18 = v43;
      *(_DWORD *)(a2 - 8) = DWORD2(v43);
      if (*v16 >= *(_QWORD *)v10)
        return 1;
      v44 = *(__n128 *)v10;
      *(_QWORD *)v10 = *v16;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
      *v16 = v44.n128_u64[0];
      *(_DWORD *)(a1 + 40) = v44.n128_u32[2];
      goto LABEL_45;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>((__n128 *)a1, (__n128 *)(a1 + 16), (__int128 *)(a1 + 32), (__int128 *)(a1 + 48), a2 - 16);
      return 1;
    default:
      v5 = (unint64_t *)(a1 + 32);
      v6 = *(_QWORD *)(a1 + 32);
      v7 = (__n128 *)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)a1;
      if (v8 >= *(_QWORD *)a1)
      {
        if (v6 < v8)
        {
          v35 = *v7;
          v7->n128_u64[0] = *v5;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
          *v5 = v35.n128_u64[0];
          *(_DWORD *)(a1 + 40) = v35.n128_u32[2];
          if ((int64_t)v7->n128_u64[0] < v9)
          {
            v36 = *(__n128 *)a1;
            *(_QWORD *)a1 = v7->n128_u64[0];
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
            v7->n128_u64[0] = v36.n128_u64[0];
            *(_DWORD *)(a1 + 24) = v36.n128_u32[2];
          }
        }
      }
      else
      {
        if (v6 >= v8)
        {
          v40 = *(__n128 *)a1;
          *(_QWORD *)a1 = v7->n128_u64[0];
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 24);
          v7->n128_u64[0] = v40.n128_u64[0];
          *(_DWORD *)(a1 + 24) = v40.n128_u32[2];
          if (v6 >= *(_QWORD *)(a1 + 16))
            goto LABEL_26;
          v32 = *v7;
          v7->n128_u64[0] = *v5;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 40);
        }
        else
        {
          v32 = *(__n128 *)a1;
          *(_QWORD *)a1 = *v5;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 40);
        }
        *v5 = v32.n128_u64[0];
        *(_DWORD *)(a1 + 40) = v32.n128_u32[2];
      }
LABEL_26:
      v21 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = *(_QWORD *)v21;
        if (*(_QWORD *)v21 < (int64_t)*v5)
        {
          v25 = *(_DWORD *)(v21 + 8);
          v26 = v22;
          while (1)
          {
            v27 = a1 + v26;
            *(_QWORD *)(v27 + 48) = *(_QWORD *)(a1 + v26 + 32);
            *(_DWORD *)(v27 + 56) = *(_DWORD *)(a1 + v26 + 40);
            if (v26 == -32)
              break;
            v26 -= 16;
            if (v24 >= *(_QWORD *)(v27 + 16))
            {
              v28 = a1 + v26 + 48;
              goto LABEL_34;
            }
          }
          v28 = a1;
LABEL_34:
          *(_QWORD *)v28 = v24;
          *(_DWORD *)(v28 + 8) = v25;
          if (++v23 == 8)
            return v21 + 16 == a2;
        }
        v5 = (unint64_t *)v21;
        v22 += 16;
        v21 += 16;
        if (v21 == a2)
          return 1;
      }
  }
}

__n128 std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *>(__n128 *a1, __n128 *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  int64_t v5;
  int64_t v6;
  __n128 result;
  unsigned __int32 v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  unsigned __int32 v11;
  unsigned __int32 v12;
  int v13;
  unsigned __int32 v14;
  unsigned __int32 v15;
  int v16;
  int v17;
  unsigned __int32 v18;
  unsigned __int32 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __int128 v24;
  __n128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __n128 v30;

  v5 = a2->n128_u64[0];
  v6 = *(_QWORD *)a3;
  if ((int64_t)a2->n128_u64[0] >= (int64_t)a1->n128_u64[0])
  {
    if (v6 < v5)
    {
      result = *a2;
      v21 = *a2;
      v9 = *((_DWORD *)a3 + 2);
      a2->n128_u64[0] = *(_QWORD *)a3;
      a2->n128_u32[2] = v9;
      *(_QWORD *)a3 = v21.n128_u64[0];
      *((_DWORD *)a3 + 2) = v21.n128_u32[2];
      if ((int64_t)a2->n128_u64[0] < (int64_t)a1->n128_u64[0])
      {
        result = *a1;
        v22 = *a1;
        v10 = a2->n128_u32[2];
        a1->n128_u64[0] = a2->n128_u64[0];
        a1->n128_u32[2] = v10;
        a2->n128_u64[0] = v22.n128_u64[0];
        a2->n128_u32[2] = v22.n128_u32[2];
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      result = *a1;
      v20 = *a1;
      v8 = *((_DWORD *)a3 + 2);
      a1->n128_u64[0] = *(_QWORD *)a3;
      a1->n128_u32[2] = v8;
LABEL_9:
      *(_QWORD *)a3 = v20.n128_u64[0];
      *((_DWORD *)a3 + 2) = v20.n128_u32[2];
      goto LABEL_10;
    }
    result = *a1;
    v23 = *a1;
    v11 = a2->n128_u32[2];
    a1->n128_u64[0] = a2->n128_u64[0];
    a1->n128_u32[2] = v11;
    a2->n128_u64[0] = v23.n128_u64[0];
    a2->n128_u32[2] = v23.n128_u32[2];
    if (*(_QWORD *)a3 < (int64_t)a2->n128_u64[0])
    {
      result = *a2;
      v20 = *a2;
      v12 = *((_DWORD *)a3 + 2);
      a2->n128_u64[0] = *(_QWORD *)a3;
      a2->n128_u32[2] = v12;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *(_QWORD *)a3)
  {
    result = (__n128)*a3;
    v24 = *a3;
    v13 = *((_DWORD *)a4 + 2);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *((_DWORD *)a3 + 2) = v13;
    *(_QWORD *)a4 = v24;
    *((_DWORD *)a4 + 2) = DWORD2(v24);
    if (*(_QWORD *)a3 < (int64_t)a2->n128_u64[0])
    {
      result = *a2;
      v25 = *a2;
      v14 = *((_DWORD *)a3 + 2);
      a2->n128_u64[0] = *(_QWORD *)a3;
      a2->n128_u32[2] = v14;
      *(_QWORD *)a3 = v25.n128_u64[0];
      *((_DWORD *)a3 + 2) = v25.n128_u32[2];
      if ((int64_t)a2->n128_u64[0] < (int64_t)a1->n128_u64[0])
      {
        result = *a1;
        v26 = *a1;
        v15 = a2->n128_u32[2];
        a1->n128_u64[0] = a2->n128_u64[0];
        a1->n128_u32[2] = v15;
        a2->n128_u64[0] = v26.n128_u64[0];
        a2->n128_u32[2] = v26.n128_u32[2];
      }
    }
  }
  if (*(_QWORD *)a5 < *(_QWORD *)a4)
  {
    result = (__n128)*a4;
    v27 = *a4;
    v16 = *(_DWORD *)(a5 + 8);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *((_DWORD *)a4 + 2) = v16;
    *(_QWORD *)a5 = v27;
    *(_DWORD *)(a5 + 8) = DWORD2(v27);
    if (*(_QWORD *)a4 < *(_QWORD *)a3)
    {
      result = (__n128)*a3;
      v28 = *a3;
      v17 = *((_DWORD *)a4 + 2);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *((_DWORD *)a3 + 2) = v17;
      *(_QWORD *)a4 = v28;
      *((_DWORD *)a4 + 2) = DWORD2(v28);
      if (*(_QWORD *)a3 < (int64_t)a2->n128_u64[0])
      {
        result = *a2;
        v29 = *a2;
        v18 = *((_DWORD *)a3 + 2);
        a2->n128_u64[0] = *(_QWORD *)a3;
        a2->n128_u32[2] = v18;
        *(_QWORD *)a3 = v29.n128_u64[0];
        *((_DWORD *)a3 + 2) = v29.n128_u32[2];
        if ((int64_t)a2->n128_u64[0] < (int64_t)a1->n128_u64[0])
        {
          result = *a1;
          v30 = *a1;
          v19 = a2->n128_u32[2];
          a1->n128_u64[0] = a2->n128_u64[0];
          a1->n128_u32[2] = v19;
          a2->n128_u64[0] = v30.n128_u64[0];
          a2->n128_u32[2] = v30.n128_u32[2];
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,JSC::BinarySwitch::Case *,JSC::BinarySwitch::Case *>(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  int v20;
  uint64_t *v21;
  __int128 *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t)a2 - result;
    v4 = ((uint64_t)a2 - result) >> 4;
    if ((uint64_t)a2 - result >= 17 && (unint64_t)v3 >= 0x20)
    {
      v5 = (unint64_t)(v4 - 2) >> 1;
      v6 = v5;
      do
      {
        if (v5 >= v6)
        {
          v7 = (2 * v6) | 1;
          v8 = (_QWORD *)(result + 16 * v7);
          if (2 * v6 + 2 >= v4)
          {
            v9 = *v8;
          }
          else
          {
            v9 = v8[2];
            v10 = *v8 < v9;
            if (*v8 > v9)
              v9 = *v8;
            if (v10)
            {
              v8 += 2;
              v7 = 2 * v6 + 2;
            }
          }
          v11 = (_QWORD *)(result + 16 * v6);
          v12 = *v11;
          if (v9 >= *v11)
          {
            v13 = *((_DWORD *)v11 + 2);
            do
            {
              v14 = v11;
              v11 = v8;
              v15 = *v8;
              *((_DWORD *)v14 + 2) = *((_DWORD *)v11 + 2);
              *v14 = v15;
              if (v5 < v7)
                break;
              v16 = (2 * v7) | 1;
              v8 = (_QWORD *)(result + 16 * v16);
              v7 = 2 * v7 + 2;
              if (v7 >= v4)
              {
                v17 = *v8;
                v7 = v16;
              }
              else
              {
                v17 = *v8;
                v18 = v8[2];
                if (*v8 <= v18)
                  v17 = v8[2];
                if (*v8 >= v18)
                  v7 = v16;
                else
                  v8 += 2;
              }
            }
            while (v17 >= v12);
            *v11 = v12;
            *((_DWORD *)v11 + 2) = v13;
          }
        }
        v10 = v6-- <= 0;
      }
      while (!v10);
    }
    if (a2 != (uint64_t *)a3)
    {
      if (v3 >= 32)
      {
        v21 = (uint64_t *)(result + 32);
        v22 = (__int128 *)a2;
        do
        {
          if (*(_QWORD *)v22 < *(_QWORD *)result)
          {
            v52 = *v22;
            v23 = *(_DWORD *)(result + 8);
            *(_QWORD *)v22 = *(_QWORD *)result;
            *((_DWORD *)v22 + 2) = v23;
            *(_QWORD *)result = v52;
            *(_DWORD *)(result + 8) = DWORD2(v52);
            v24 = *(_QWORD *)(result + 16);
            if (v3 == 32)
            {
              v25 = (_QWORD *)(result + 16);
              v26 = 1;
            }
            else
            {
              v27 = v24 < *v21;
              if (v24 <= *v21)
                v24 = *v21;
              if (v27)
                v25 = (_QWORD *)(result + 32);
              else
                v25 = (_QWORD *)(result + 16);
              if (v27)
                v26 = 2;
              else
                v26 = 1;
            }
            v28 = *(_QWORD *)result;
            if (v24 >= *(_QWORD *)result)
            {
              v29 = *(_DWORD *)(result + 8);
              v30 = (_QWORD *)result;
              do
              {
                v31 = v30;
                v30 = v25;
                v32 = *v25;
                *((_DWORD *)v31 + 2) = *((_DWORD *)v30 + 2);
                *v31 = v32;
                if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v26)
                  break;
                v33 = (2 * v26) | 1;
                v25 = (_QWORD *)(result + 16 * v33);
                v26 = 2 * v26 + 2;
                if (v26 >= v4)
                {
                  v34 = *v25;
                  v26 = v33;
                }
                else
                {
                  v34 = *v25;
                  v35 = v25[2];
                  if (*v25 <= v35)
                    v34 = v25[2];
                  if (*v25 >= v35)
                    v26 = v33;
                  else
                    v25 += 2;
                }
              }
              while (v34 >= v28);
              *v30 = v28;
              *((_DWORD *)v30 + 2) = v29;
            }
          }
          ++v22;
        }
        while (v22 != a3);
      }
      else
      {
        v19 = (__int128 *)a2;
        do
        {
          if (*(_QWORD *)v19 < *(_QWORD *)result)
          {
            v51 = *v19;
            v20 = *(_DWORD *)(result + 8);
            *(_QWORD *)v19 = *(_QWORD *)result;
            *((_DWORD *)v19 + 2) = v20;
            *(_QWORD *)result = v51;
            *(_DWORD *)(result + 8) = DWORD2(v51);
          }
          ++v19;
        }
        while (v19 != a3);
      }
    }
    if (v3 >= 17)
    {
      v36 = (unint64_t)v3 >> 4;
      do
      {
        v37 = 0;
        v53 = *(_OWORD *)result;
        v38 = result;
        do
        {
          v39 = v38 + 16 * v37 + 16;
          v40 = (2 * v37) | 1;
          v41 = 2 * v37 + 2;
          if (v41 < v36 && *(_QWORD *)v39 < *(_QWORD *)(v39 + 16))
          {
            v39 += 16;
            v40 = v41;
          }
          v42 = *(_QWORD *)v39;
          *(_DWORD *)(v38 + 8) = *(_DWORD *)(v39 + 8);
          *(_QWORD *)v38 = v42;
          v38 = v39;
          v37 = v40;
        }
        while (v40 <= (uint64_t)((unint64_t)(v36 - 2) >> 1));
        a2 -= 2;
        if ((uint64_t *)v39 == a2)
        {
          *(_DWORD *)(v39 + 8) = DWORD2(v53);
          *(_QWORD *)v39 = v53;
        }
        else
        {
          v43 = *a2;
          *(_DWORD *)(v39 + 8) = *((_DWORD *)a2 + 2);
          *(_QWORD *)v39 = v43;
          *a2 = v53;
          *((_DWORD *)a2 + 2) = DWORD2(v53);
          v44 = v39 - result + 16;
          if (v44 >= 17)
          {
            v45 = (((unint64_t)v44 >> 4) - 2) >> 1;
            v46 = (uint64_t *)(result + 16 * v45);
            v47 = *(_QWORD *)v39;
            if (*v46 < *(_QWORD *)v39)
            {
              v48 = *(_DWORD *)(v39 + 8);
              do
              {
                v49 = v39;
                v39 = (uint64_t)v46;
                v50 = *v46;
                *(_DWORD *)(v49 + 8) = *(_DWORD *)(v39 + 8);
                *(_QWORD *)v49 = v50;
                if (!v45)
                  break;
                v45 = (v45 - 1) >> 1;
                v46 = (uint64_t *)(result + 16 * v45);
              }
              while (*v46 < v47);
              *(_QWORD *)v39 = v47;
              *(_DWORD *)(v39 + 8) = v48;
            }
          }
        }
        v10 = v36-- <= 2;
      }
      while (!v10);
    }
  }
  return result;
}

uint64_t WTF::Vector<JSC::BinarySwitch::BranchCode,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::BinarySwitch::BranchCode,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 0x21)
  {
    v16 = (_QWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 32;
    goto LABEL_12;
  }
  if (!(v14 >> 29))
  {
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if ((_DWORD)v15)
    {
      v17 = 8 * v15;
      v18 = (uint64_t *)v10;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 8;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::BinarySwitch::BranchCode,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(unsigned int *)(a1 + 12);
    if (v11 < 0x21)
    {
      v15 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 32;
    }
    else
    {
      if (v11 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v14)
    {
      v16 = 8 * v14;
      v17 = (uint64_t *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 8;
      }
      while (v16);
    }
    if (a1 + 16 != v13 && v13)
    {
      if (*(_QWORD *)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::CallFrameShuffler::addCachedRecovery(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;

  v5 = result;
  if (a2 == 17)
  {
    result = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)result = result + 16;
    *(_QWORD *)(result + 8) = 1;
    *(_QWORD *)(result + 24) = a2;
    *(_BYTE *)(result + 32) = a3;
    *(_WORD *)(result + 33) = -1;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 40) = *(_QWORD *)(v5 + 8);
    *(_QWORD *)(v5 + 8) = result;
    return result;
  }
  v25 = BYTE1(a2);
  v6 = a2;
  if (a2 <= 5u)
  {
    v7 = SBYTE1(a2);
    if (v7 >= 0x40)
    {
      do
      {
LABEL_16:
        __break(1u);
LABEL_17:
        v12 = v25;
      }
      while (v12 >= 0x40);
      goto LABEL_18;
    }
    goto LABEL_7;
  }
  if ((a2 & 0xFE) == 6)
  {
    v7 = (SBYTE1(a2) + 32);
    if (v7 >= 0x40)
      goto LABEL_16;
LABEL_7:
    v8 = (uint64_t *)(result + 8 * v7 + 80);
    goto LABEL_8;
  }
  v18 = (int)(1 - (a2 >> 8));
  if (v18 >= *(unsigned int *)(result + 28))
    goto LABEL_37;
  v8 = (uint64_t *)(*(_QWORD *)(result + 16) + 8 * v18);
LABEL_8:
  result = *v8;
  if (*v8)
    return result;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v9)
  {
    v10 = (_BYTE *)(v9 + 8672);
    *(_BYTE *)(v9 + 8672) = 1;
    v11 = *(unsigned int *)(v9 + 8688);
    if ((_DWORD)v11)
    {
      *(_DWORD *)(v9 + 8688) = v11 - *(_DWORD *)(v9 + 8692);
      result = *(_QWORD *)(v9 + 8680) - v11;
LABEL_12:
      *v10 = 0;
      goto LABEL_13;
    }
    v14 = *(_QWORD *)(v9 + 8712);
    v15 = *(_QWORD *)(v9 + 8696);
    if (v14)
    {
LABEL_22:
      v16 = __clz(v14);
      *(_QWORD *)(v9 + 8712) = v14 & ~(0x8000000000000000 >> v16);
      result = v15 + 16 * v16;
      goto LABEL_12;
    }
    if (*(_BYTE *)(v9 + 8677) == 6)
    {
      v19 = *(_DWORD *)(v9 + 8708);
      v20 = *(unsigned int *)(v9 + 8704);
      if (v20 < v19)
      {
        *(_QWORD *)&v10[8 * v20 + 56] = 0;
        v21 = (unint64_t *)(v9 + 8 * v20 + 8736);
        v22 = v19 - 1 - v20;
        while (v22)
        {
          v15 += 1024;
          v24 = *v21++;
          v23 = v24;
          LODWORD(v20) = v20 + 1;
          --v22;
          if (v24)
          {
            v14 = __rbit64(v23);
            *(_DWORD *)(v9 + 8704) = v20;
            *(_QWORD *)(v9 + 8696) = v15;
            goto LABEL_22;
          }
        }
        *(_DWORD *)(v9 + 8704) = v19;
      }
    }
    *v10 = 0;
  }
  result = bmalloc_allocate_casual(48, 1);
LABEL_13:
  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 1;
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = a3;
  *(_WORD *)(result + 33) = -1;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 40) = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v5 + 8) = result;
  v25 = BYTE1(a2);
  if (v6 <= 5)
    goto LABEL_17;
  if ((v6 & 0xFE) != 6)
  {
    v17 = (int)(1 - (a2 >> 8));
    if (v17 < *(unsigned int *)(v5 + 28))
    {
      v13 = (uint64_t *)(*(_QWORD *)(v5 + 16) + 8 * v17);
      goto LABEL_19;
    }
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x1986F783CLL);
  }
  v12 = (SBYTE1(a2) + 32);
  if (v12 >= 0x40)
    goto LABEL_16;
LABEL_18:
  v13 = (uint64_t *)(v5 + 8 * v12 + 80);
LABEL_19:
  *v13 = result;
  return result;
}

_DWORD *WTF::Vector<JSC::VirtualRegister,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::VirtualRegister&>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<JSC::VirtualRegister,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

unint64_t WTF::Vector<JSC::VirtualRegister,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 4 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::VirtualRegister,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<JSC::VirtualRegister,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<JSC::VirtualRegister,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::VirtualRegister,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    v12 = *(_QWORD *)a1;
    if ((_DWORD)v4)
    {
      v13 = 4 * v4;
      v14 = *(_DWORD **)a1;
      v15 = (int *)v3;
      do
      {
        v16 = *v15++;
        *v14++ = v16;
        v13 -= 4;
      }
      while (v13);
    }
    if (a1 + 16 != v3 && v3)
    {
      if (v12 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::VectorBuffer<JSC::VirtualRegister,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 2)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
  }
  else
  {
    v3 = a2;
    if (a2 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(4 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

uint64_t JSC::CallFrameShuffler::ensureGPR(JSC::CallFrameShuffler *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = JSC::CallFrameShuffler::getFreeGPR(this);
  if ((_DWORD)result == -1)
    return JSC::CallFrameShuffler::ensureRegister<JSC::CallFrameShuffler::ensureGPR(void)::{lambda(JSC::CachedRecovery const&)#1}>((uint64_t)this, (uint64_t)this, v3, v4, v5, v6, v7, v8);
  return result;
}

uint64_t JSC::CallFrameShuffler::getFreeGPR(JSC::CallFrameShuffler *this)
{
  uint64_t v1;
  char v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;

  v2 = 0;
  v3 = 255;
  v4 = 128;
  while (1)
  {
    v5 = v4 & 0x7F;
    if (v5 >= 0x40)
      break;
    v1 = *((_QWORD *)this + 9);
    if (!(v1 & (1 << v5) | v4 & 0x60) && !*((_QWORD *)this + v5 + 10))
    {
      if (!*((_QWORD *)this + v5 + 75))
      {
        LOBYTE(v3) = v4;
        goto LABEL_11;
      }
      if ((~v3 & 0x7F) == 0)
        v3 = v4;
    }
    v4 = ((_BYTE)v4 + 1) | 0xFFFFFF80;
    if (v2 == 63)
      v4 = -1;
    v2 = v4 & 0x7F;
    if ((v4 & 0x7F) >= 0x40)
      goto LABEL_15;
  }
  __break(1u);
LABEL_15:
  if ((~v3 & 0x7F) == 0)
  {
    v8 = *((unsigned __int8 *)this + 592);
    if (v8 != 255)
    {
      v9 = v8 & 0x7F;
      if (v9 <= 0x1F)
      {
        *((_QWORD *)this + 9) = v1 & ~(1 << v9);
        *((_BYTE *)this + 592) = -1;
        LOBYTE(v3) = v9;
      }
    }
  }
LABEL_11:
  v6 = v3 & 0x7F;
  if (v6 == 127)
    return 0xFFFFFFFFLL;
  else
    return v6;
}

uint64_t JSC::CallFrameShuffler::ensureRegister<JSC::CallFrameShuffler::ensureGPR(void)::{lambda(JSC::CachedRecovery const&)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  unint64_t v17;

  v8 = 0;
  v9 = 0x80;
  do
  {
    if ((v9 & 0x7Fu) >= 0x40)
      goto LABEL_22;
    if (((*(_QWORD *)(a1 + 72) >> (v9 & 0x7F)) & 1) == 0)
    {
      v10 = *(_QWORD **)(a1 + 600 + 8 * (v9 & 0x7F));
      if (v10)
      {
        v11 = v10[3];
        if (v11 <= 5u)
        {
          v12 = BYTE1(v11) & 0x7F;
          if (v12 >= 0x40)
            goto LABEL_22;
          if (((*(_QWORD *)(a2 + 72) >> v12) & 1) == 0)
            return JSC::CallFrameShuffler::spill(a1, v10, a3, a4, a5, a6, a7, a8);
        }
      }
    }
    if (v8 == 63)
      v9 = -1;
    else
      v9 = (v9 + 1) | 0x80;
    v8 = v9 & 0x7F;
  }
  while ((v9 & 0x7Fu) < 0x40);
  v14 = *(unsigned int *)(a1 + 52);
  if ((int)v14 < 1)
  {
LABEL_21:
    __break(0xC471u);
LABEL_22:
    __break(1u);
  }
  v15 = *(_QWORD ***)(a1 + 40);
  while (1)
  {
    v10 = *v15;
    if (*v15)
    {
      v16 = v10[3];
      if (v16 <= 5u)
      {
        v17 = BYTE1(v16) & 0x7F;
        if (v17 >= 0x40)
          goto LABEL_22;
        if (((*(_QWORD *)(a2 + 72) >> v17) & 1) == 0)
          return JSC::CallFrameShuffler::spill(a1, v10, a3, a4, a5, a6, a7, a8);
      }
    }
    ++v15;
    if (!--v14)
      goto LABEL_21;
  }
}

uint64_t JSC::CallFrameShuffler::getFreeFPR(JSC::CallFrameShuffler *this)
{
  char v1;
  int v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v9;

  v1 = 0;
  v2 = 255;
  v3 = 128;
  do
  {
    v4 = v3 & 0x7F;
    if (v4 >= 0x40)
      goto LABEL_21;
    v5 = *((_QWORD *)this + 9);
    if ((v3 & 0x60) == 0x20 && (v5 & (1 << v4)) == 0 && !*((_QWORD *)this + v4 + 10))
    {
      if (!*((_QWORD *)this + v4 + 75))
        goto LABEL_22;
      if ((~v2 & 0x7F) == 0)
        v2 = v3;
    }
    v3 = ((_BYTE)v3 + 1) | 0xFFFFFF80;
    if (v1 == 63)
      v3 = -1;
    v1 = v3 & 0x7F;
  }
  while ((v3 & 0x7F) < 0x40);
  if ((~v2 & 0x7F) == 0)
  {
    v9 = *((unsigned __int8 *)this + 592);
    if (v9 != 255)
    {
      LOBYTE(v3) = v9 & 0x60;
      if ((v9 & 0x60) == 0x20)
      {
        LOBYTE(v2) = v9 & 0x7F;
        if ((v9 & 0x7Fu) < 0x40)
        {
          *((_QWORD *)this + 9) = v5 & ~(1 << v2);
          *((_BYTE *)this + 592) = -1;
          goto LABEL_13;
        }
LABEL_21:
        __break(1u);
LABEL_22:
        LOBYTE(v2) = v3;
      }
    }
  }
LABEL_13:
  v6 = v2 & 0x7F;
  if (v6 == 127)
    return -1;
  else
    return (char)(v6 - 32);
}

uint64_t JSC::CallFrameShuffler::ensureRegister(JSC::CallFrameShuffler *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  unsigned int v18;
  char v19;
  unint64_t v20;

  result = JSC::CallFrameShuffler::hasFreeRegister(this, *MEMORY[0x1E0C80C00]);
  if ((result & 1) == 0)
  {
    v9 = 0;
    v10 = 0x80;
    while (1)
    {
      if ((v10 & 0x7Fu) >= 0x40)
LABEL_27:
        __break(1u);
      v11 = *((_QWORD *)this + 9);
      if (((v11 >> (v10 & 0x7F)) & 1) == 0)
      {
        v12 = (_QWORD *)*((_QWORD *)this + (v10 & 0x7F) + 75);
        if (v12)
        {
          v13 = v12[3];
          if (v13 <= 5)
          {
            v14 = BYTE1(v12[3]);
            goto LABEL_10;
          }
          if ((v13 & 0xFE) == 6)
          {
            v14 = BYTE1(v12[3]) + 32;
LABEL_10:
            v15 = v14 & 0x7F;
            if (v15 >= 0x40)
              goto LABEL_27;
            if (((v11 >> v15) & 1) == 0)
              return JSC::CallFrameShuffler::spill((uint64_t)this, v12, v3, v4, v5, v6, v7, v8);
          }
        }
      }
      v10 = (v10 + 1) | 0x80;
      if (v9 == 63)
        v10 = -1;
      v9 = v10 & 0x7F;
      if ((v10 & 0x7Fu) >= 0x40)
      {
        v16 = *((unsigned int *)this + 13);
        if ((int)v16 < 1)
        {
LABEL_25:
          __break(0xC471u);
          JUMPOUT(0x1986F7F08);
        }
        v17 = (_QWORD **)*((_QWORD *)this + 5);
        while (2)
        {
          v12 = *v17;
          if (*v17)
          {
            v18 = v12[3];
            if (v18 > 5)
            {
              if ((v18 & 0xFE) == 6)
              {
                v19 = BYTE1(v12[3]) + 32;
                goto LABEL_22;
              }
            }
            else
            {
              v19 = BYTE1(v12[3]);
LABEL_22:
              v20 = v19 & 0x7F;
              if (v20 >= 0x40)
                goto LABEL_27;
              if (((v11 >> v20) & 1) == 0)
                return JSC::CallFrameShuffler::spill((uint64_t)this, v12, v3, v4, v5, v6, v7, v8);
            }
          }
          ++v17;
          if (!--v16)
            goto LABEL_25;
          continue;
        }
      }
    }
  }
  return result;
}

uint64_t JSC::CallFrameShuffler::ensureFPR(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  char v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v8 = 0;
  v9 = this + 600;
  v10 = 255;
  v11 = 128;
  do
  {
    v12 = v11 & 0x7F;
    if (v12 >= 0x40)
      goto LABEL_41;
    v13 = *(_QWORD *)(this + 72);
    if ((v11 & 0x60) == 0x20 && (v13 & (1 << v12)) == 0 && !*(_QWORD *)(this + 80 + 8 * v12))
    {
      if (!*(_QWORD *)(v9 + 8 * v12))
      {
        LOBYTE(v10) = v11;
        goto LABEL_14;
      }
      if ((~v10 & 0x7F) == 0)
        v10 = v11;
    }
    v11 = ((_BYTE)v11 + 1) | 0xFFFFFF80;
    if (v8 == 63)
      v11 = -1;
    v8 = v11 & 0x7F;
  }
  while ((v11 & 0x7F) < 0x40);
  if ((~v10 & 0x7F) == 0)
  {
    v24 = *(unsigned __int8 *)(this + 592);
    if (v24 != 255 && (v24 & 0x60) == 0x20)
    {
      LOBYTE(v10) = v24 & 0x7F;
      if ((v24 & 0x7Fu) >= 0x40)
LABEL_41:
        __break(1u);
      v13 &= ~(1 << v10);
      *(_QWORD *)(this + 72) = v13;
      *(_BYTE *)(this + 592) = -1;
    }
  }
LABEL_14:
  v14 = (((v10 + 97) >> 5) | (8 * (v10 + 97)));
  if (v14 <= 7 && ((1 << v14) & 0x99) != 0)
  {
    v15 = 0;
    v16 = 0x80;
    do
    {
      if ((v16 & 0x7Fu) >= 0x40)
        goto LABEL_41;
      if (((v13 >> (v16 & 0x7F)) & 1) == 0)
      {
        v17 = *(_QWORD **)(v9 + 8 * (v16 & 0x7F));
        if (v17)
        {
          v18 = v17[3];
          if ((v18 & 0xFE) == 6)
          {
            v19 = (BYTE1(v18) + 32) & 0x7F;
            if (v19 >= 0x40)
              goto LABEL_41;
            if (((v13 >> v19) & 1) == 0)
              return JSC::CallFrameShuffler::spill(this, v17, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      v16 = (v16 + 1) | 0x80;
      if (v15 == 63)
        v16 = -1;
      v15 = v16 & 0x7F;
    }
    while ((v16 & 0x7Fu) < 0x40);
    v20 = *(unsigned int *)(this + 52);
    if ((int)v20 < 1)
    {
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x1986F813CLL);
    }
    v21 = *(_QWORD ***)(this + 40);
    while (1)
    {
      v17 = *v21;
      if (*v21)
      {
        v22 = v17[3];
        if ((v22 & 0xFE) == 6)
        {
          v23 = (BYTE1(v22) + 32) & 0x7F;
          if (v23 >= 0x40)
            goto LABEL_41;
          if (((v13 >> v23) & 1) == 0)
            return JSC::CallFrameShuffler::spill(this, v17, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v21;
      if (!--v20)
        goto LABEL_35;
    }
  }
  return this;
}

uint64_t WTF::VectorBuffer<JSC::BinarySwitch::Case,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 0x11)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 16;
  }
  else
  {
    v3 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(16 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

__n128 WTF::Vector<JSC::BinarySwitch::Case,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::BinarySwitch::Case>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::BinarySwitch::Case,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<JSC::BinarySwitch::Case,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = *(unsigned int *)(a1 + 12), v5 + 16 * v6 <= a3))
  {
    v20 = *(unsigned int *)(a1 + 8);
    v21 = v20 + (v20 >> 2);
    if (v21 >= 0x10)
      v22 = v21 + 1;
    else
      v22 = 16;
    if (v22 > a2)
      a2 = v22;
    if (a2 > v20)
    {
      v23 = *(unsigned int *)(a1 + 12);
      WTF::VectorBuffer<JSC::BinarySwitch::Case,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
      if ((_DWORD)v23)
      {
        v31 = *(_OWORD **)a1;
        v32 = 16 * v23;
        v33 = (__int128 *)v5;
        do
        {
          v34 = *v33++;
          *v31++ = v34;
          v32 -= 16;
        }
        while (v32);
      }
      if (a1 + 16 != v5 && v5)
      {
        if (*(_QWORD *)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v24, v25, v26, v27, v28, v29, v30);
      }
    }
  }
  else
  {
    v7 = (uint64_t)(a3 - v5) >> 4;
    v8 = *(unsigned int *)(a1 + 8);
    v9 = v8 + (v8 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    if (a2 > v8)
    {
      WTF::VectorBuffer<JSC::BinarySwitch::Case,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
      v18 = 0;
      v19 = *(_QWORD *)a1;
      do
      {
        *(_OWORD *)(v19 + v18) = *(_OWORD *)(v5 + v18);
        v18 += 16;
      }
      while (16 * v6 != v18);
      if (a1 + 16 != v5 && v5)
      {
        if (*(_QWORD *)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v11, v12, v13, v14, v15, v16, v17);
      }
    }
    return *(_QWORD *)a1 + 16 * v7;
  }
  return v3;
}

unint64_t WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = v10 + 12 * *(unsigned int *)(a1 + 12);
    if (v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v14 = (unint64_t)a2;
      if (v14 <= v12)
      {
        v24 = *(_QWORD *)a1;
        return v24 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
      if (v14 < 0x21)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 32;
        goto LABEL_32;
      }
      if (v14 < 0x15555556)
      {
        v15 = 12 * v14;
        v16 = WTF::fastMalloc((WTF *)(12 * v14));
        *(_DWORD *)(a1 + 8) = (v15 & 0xFFFFFFFC) / 0xC;
        *(_QWORD *)a1 = v16;
LABEL_32:
        v25 = 0;
        do
        {
          v26 = v16 + v25;
          v27 = v10 + v25;
          *(_DWORD *)v26 = *(_DWORD *)(v10 + v25);
          *(_QWORD *)(v26 + 4) = *(_QWORD *)(v10 + v25 + 4);
          v25 += 12;
        }
        while (v27 + 12 != v11);
        v24 = *(_QWORD *)a1;
        if (a1 + 16 != v10 && v10)
        {
          if (v24 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
          v24 = *(_QWORD *)a1;
        }
        return v24 + 4 * ((uint64_t)(v8 - v10) >> 2);
      }
LABEL_41:
      __break(0xC471u);
      JUMPOUT(0x1986F85E8);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v19 = (unint64_t)a2;
  if (v19 > v17)
  {
    v20 = *(_DWORD *)(a1 + 12);
    if (v19 < 0x21)
    {
      v22 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 32;
      if (!v20)
        goto LABEL_25;
    }
    else
    {
      if (v19 >= 0x15555556)
        goto LABEL_41;
      v21 = 12 * v19;
      v22 = WTF::fastMalloc((WTF *)(12 * v19));
      *(_DWORD *)(a1 + 8) = (v21 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)a1 = v22;
      if (!v20)
        goto LABEL_25;
    }
    v23 = v10;
    do
    {
      *(_DWORD *)v22 = *(_DWORD *)v23;
      *(_QWORD *)(v22 + 4) = *(_QWORD *)(v23 + 4);
      v23 += 12;
      v22 += 12;
    }
    while (v23 != v10 + 12 * v20);
LABEL_25:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

_DWORD *WTF::Vector<unsigned int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<unsigned int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<unsigned int,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 4 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      if (v10 < 9)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
        goto LABEL_30;
      }
      if (!(v10 >> 30))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(4 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 4 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 4 * ((uint64_t)(v3 - (_QWORD)v5) >> 2);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x1986F87CCLL);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 9)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
    }
    else
    {
      if (v15 >> 30)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(4 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 4 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

uint64_t std::__independent_bits_engine<JSC::RandomNumberGenerator,unsigned long>::__eval(uint64_t **a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t j;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;
  unint64_t v20;

  v1 = (unint64_t)a1[4];
  if (v1)
  {
    v3 = **a1;
    v4 = (unint64_t)a1[5];
    v5 = (unint64_t)a1[2];
    v6 = *((_DWORD *)a1 + 14);
    v7 = *(_QWORD *)(v3 + 8);
    v8 = *(_QWORD *)(v3 + 16);
    if (v5 >= 0x40)
    {
      for (i = 0; i != v1; ++i)
      {
        do
        {
          v20 = v7 ^ (v7 << 23);
          v7 = v8;
          v8 ^= (v8 >> 26) ^ (v20 >> 17) ^ v20;
        }
        while (v4 <= (v8 + v7));
      }
      v2 = v6 & (v8 + v7);
    }
    else
    {
      v2 = 0;
      for (j = 0; j != v1; ++j)
      {
        do
        {
          v10 = v7 ^ (v7 << 23);
          v7 = v8;
          v8 ^= (v8 >> 26) ^ (v10 >> 17) ^ v10;
        }
        while (v4 <= (v8 + v7));
        v2 = (v2 << v5) + (v6 & (v8 + v7));
      }
    }
    *(_QWORD *)(v3 + 8) = v7;
    *(_QWORD *)(v3 + 16) = v8;
  }
  else
  {
    v2 = 0;
  }
  v11 = (unint64_t)a1[3];
  if (v1 < v11)
  {
    v13 = **a1;
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 16);
    do
    {
      do
      {
        v16 = v14 ^ (v14 << 23);
        v14 = v15;
        v15 ^= (v15 >> 26) ^ (v16 >> 17) ^ v16;
      }
      while ((unint64_t)a1[6] <= (v15 + v14));
      v17 = (unint64_t)a1[2];
      v18 = v2 << (v17 + 1);
      if (v17 >= 0x3F)
        v18 = 0;
      v2 = v18 + (*((_DWORD *)a1 + 15) & (v15 + v14));
      ++v1;
    }
    while (v1 != v11);
    *(_QWORD *)(v13 + 8) = v14;
    *(_QWORD *)(v13 + 16) = v15;
  }
  return v2;
}

uint64_t WTF::Vector<JSC::VirtualRegister,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::VirtualRegister&>(uint64_t a1, unint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)a1 + 4 * *(unsigned int *)(a1 + 12)) = *(_DWORD *)WTF::Vector<JSC::VirtualRegister,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t JSC::CallFrameShuffler::emitStore(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  _BYTE v20[9];

  v8 = *(_QWORD *)(a2 + 24);
  switch((char)v8)
  {
    case 0:
      v10 = *a1;
      v11 = SBYTE1(v8);
      goto LABEL_16;
    case 1:
      JSC::MacroAssemblerARM64::store32(*a1, SBYTE1(v8), a3 & 0xFFFFFFFF000000FFLL, a4, a5, a6, a7, a8);
      return 1;
    case 2:
      v13 = *a1;
      v14 = BYTE1(v8) & 0x1F | (32 * (BYTE1(v8) & 0x1F)) | 0x934CFC00;
      v15 = *(_DWORD *)(*a1 + 200);
      if (v15 + 4 > *(_DWORD *)(*a1 + 192))
      {
        v19 = v14;
        v17 = a2;
        v18 = a1;
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), a2, a3, a4, a5, a6, a7, a8);
        v14 = v19;
        a2 = v17;
        a1 = v18;
        v15 = *(_DWORD *)(v13 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(v13 + 56) + v15) = v14;
      *(_DWORD *)(v13 + 200) += 4;
      v8 = *(_QWORD *)(a2 + 24);
      goto LABEL_7;
    case 3:
LABEL_7:
      JSC::MacroAssemblerARM64::store64(*a1, SBYTE1(v8), a3, a4, a5, a6, a7, a8);
      return 3;
    case 4:
      JSC::MacroAssemblerARM64::store64(*a1, SBYTE1(v8), a3, a4, a5, a6, a7, a8);
      return 5;
    case 5:
      JSC::MacroAssemblerARM64::store64(*a1, SBYTE1(v8), a3, a4, a5, a6, a7, a8);
      return 6;
    case 6:
      JSC::MacroAssemblerARM64::storeDouble(*a1, SBYTE1(v8), a3, a4, a5, a6, a7, a8);
      return 16;
    case 7:
      JSC::MacroAssemblerARM64::storeDouble(*a1, SBYTE1(v8), a3, a4, a5, a6, a7, a8);
      return 4;
    case 17:
      v16 = *a1;
      *(_QWORD *)v20 = *(_QWORD *)(a2 + 24);
      v20[8] = *(_BYTE *)(a2 + 32);
      if (*(_QWORD *)&v20[1])
      {
        if (!*(_BYTE *)(v16 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x1986F8B7CLL);
        }
        JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)v16, *(uint64_t *)&v20[1], v16 + 264, a4, a5, a6, a7, a8);
        v10 = v16;
        v11 = 16;
      }
      else
      {
        v10 = *a1;
        v11 = 63;
      }
LABEL_16:
      JSC::MacroAssemblerARM64::store64(v10, v11, a3, a4, a5, a6, a7, a8);
      return 16;
    default:
      __break(0xC471u);
      JUMPOUT(0x1986F8BA0);
  }
}

void JSC::CallFrameShuffler::emitBox(JSC::CallFrameShuffler *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t FreeGPR;
  uint64_t v19;
  uint64_t FreeFPR;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v8 = *(_QWORD *)(a2 + 24);
  if (v8 == 17)
    return;
  if (v8 <= 5u)
  {
    switch(*(_QWORD *)(a2 + 24))
    {
      case 1u:
        JSC::MacroAssemblerARM64::and64(*(_QWORD *)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, SBYTE1(v8), SBYTE1(v8));
        v41 = *(_QWORD *)(a2 + 24);
        BYTE1(v8) = BYTE2(v41);
        if ((v41 & 0x4000) != 0)
          goto LABEL_29;
        *((_QWORD *)this + 9) |= 1 << SBYTE1(v41);
        v14 = *((unsigned __int8 *)this + 592);
        if (v14 != 255)
          goto LABEL_8;
        FreeGPR = JSC::CallFrameShuffler::getFreeGPR(this);
        *((_BYTE *)this + 592) = FreeGPR;
        if ((_DWORD)FreeGPR == -1)
        {
          JSC::MacroAssemblerARM64::or64(*(_QWORD *)this, (JSC::ARM64LogicalImmediate *)0xFFFE000000000000, (char)BYTE1(*(_QWORD *)(a2 + 24)));
        }
        else
        {
          if ((FreeGPR & 0x40) != 0)
            goto LABEL_29;
          *((_QWORD *)this + 9) |= 1 << FreeGPR;
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)this, 0xFFFE000000000000, FreeGPR, v19, a5, a6, a7, a8);
          LOBYTE(v14) = *((_BYTE *)this + 592);
LABEL_8:
          v15 = *(_QWORD *)this;
          v16 = *(_QWORD *)(a2 + 24) >> 8;
          v17 = *(_DWORD *)(*(_QWORD *)this + 200);
          if (v17 + 4 > *(_DWORD *)(*(_QWORD *)this + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v15 + 56), v11, v12, v13, a5, a6, a7, a8);
            v17 = *(_DWORD *)(v15 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v15 + 56) + v17) = ((v14 & 0x1F) << 16) | (32 * (v16 & 0x1F)) | v16 & 0x1F | 0xAA000000;
          *(_DWORD *)(v15 + 200) += 4;
        }
        v8 = BYTE1(*(_QWORD *)(a2 + 24)) & 0x7F;
        if (v8 >= 0x40)
          goto LABEL_29;
        *((_QWORD *)this + 9) &= ~(1 << v8);
        break;
      case 2u:
        JSC::MacroAssemblerARM64::rshift64(*(_DWORD **)this, SBYTE1(v8), 12, SBYTE1(v8), a5, a6, a7, a8);
        LOBYTE(v43) = 3;
        *(_QWORD *)((char *)&v43 + 1) = BYTE1(*(_QWORD *)(a2 + 24));
        *(_QWORD *)(a2 + 24) = v43;
        *(_BYTE *)(a2 + 32) = 0;
        goto LABEL_18;
      case 3u:
LABEL_18:
        FreeFPR = JSC::CallFrameShuffler::getFreeFPR(this);
        v21 = FreeFPR;
        JSC::MacroAssemblerARM64::convertInt64ToDouble(*(_DWORD **)this, (char)BYTE1(*(_QWORD *)(a2 + 24)), FreeFPR, v22, v23, v24, v25, v26);
        LOBYTE(v44) = 7;
        *(_QWORD *)((char *)&v44 + 1) = v21;
        JSC::CallFrameShuffler::updateRecovery((uint64_t)this, a2, v44, 0);
        v8 = *(_QWORD *)(a2 + 24);
        goto LABEL_19;
      case 4u:
        goto LABEL_30;
      default:
        return;
    }
    goto LABEL_13;
  }
LABEL_19:
  if ((v8 & 0xFE) != 6)
  {
    __break(0xC471u);
    goto LABEL_29;
  }
  if (v8 != 7)
    return;
  v27 = *(char *)(a2 + 33);
  if (v27 == -1)
    goto LABEL_24;
  if (v27 >= 0x40uLL)
    goto LABEL_29;
  if (*((_QWORD *)this + v27 + 10))
  {
LABEL_24:
    v28 = JSC::CallFrameShuffler::getFreeGPR(this);
    v8 = *(_QWORD *)(a2 + 24);
  }
  else
  {
    v28 = *(_BYTE *)(a2 + 33);
  }
  JSC::AssemblyHelpers::purifyNaN(*(_QWORD *)this, SBYTE1(v8), a3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveDoubleTo64(*(_DWORD **)this, (char)BYTE1(*(_QWORD *)(a2 + 24)), (char)v28, v29, v30, v31, v32, v33);
  BYTE1(v8) = 0;
  if ((v28 & 0x7Fu) >= 0x40)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    JSC::MacroAssemblerARM64::add32(*(_QWORD *)this, 6, SBYTE1(v8), SBYTE1(v8), a5, a6, a7, a8);
LABEL_13:
    LOBYTE(v42) = 0;
    *(_QWORD *)((char *)&v42 + 1) = BYTE1(*(_QWORD *)(a2 + 24));
    *(_QWORD *)(a2 + 24) = v42;
    *(_BYTE *)(a2 + 32) = 0;
    return;
  }
  *((_QWORD *)this + 9) |= 1 << (v28 & 0x7F);
  v39 = JSC::CallFrameShuffler::tryAcquireNumberTagRegister(this);
  v40 = *(_DWORD **)this;
  if (v39)
    JSC::MacroAssemblerARM64::sub64(v40, *((char *)this + 592), (char)v28, v34, v35, v36, v37, v38);
  else
    JSC::MacroAssemblerARM64::sub64((uint64_t)v40, (char)v28, 0xFFFE000000000000, (char)v28, v35, v36, v37, v38);
  *((_QWORD *)this + 9) &= ~(1 << (v28 & 0x7F));
  LOBYTE(v45) = 0;
  *(_QWORD *)((char *)&v45 + 1) = v28;
  JSC::CallFrameShuffler::updateRecovery((uint64_t)this, a2, v45, 0);
}

uint64_t JSC::CallFrameShuffler::tryAcquireNumberTagRegister(JSC::CallFrameShuffler *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*((unsigned __int8 *)this + 592) != 255)
    return 1;
  result = JSC::CallFrameShuffler::getFreeGPR(this);
  *((_BYTE *)this + 592) = result;
  if ((_DWORD)result == -1)
    return 0;
  if ((result & 0x40) == 0)
  {
    v1 = 1;
    *((_QWORD *)this + 9) |= 1 << result;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(*(_DWORD **)this, 0xFFFE000000000000, result, v4, v5, v6, v7, v8);
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t JSC::CallFrameShuffler::emitLoad(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  unsigned int v28;
  char v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE v45[9];
  _BYTE v46[9];

  v8 = *(_QWORD *)(a2 + 24);
  if ((v8 - 8) > 6)
    return result;
  v10 = result;
  v11 = *(_QWORD *)(a2 + 24) >> 8;
  v12 = *(unsigned __int8 *)(result + 1112) | ((unint64_t)(*(_DWORD *)(result + 1116) + v11) << 35);
  v13 = *(char *)(a2 + 33);
  v14 = *(unsigned __int8 *)(a2 + 33);
  v15 = *(_BYTE *)(a2 + 33);
  if (v13 == -1)
    goto LABEL_31;
  v16 = v13;
  if (v13 >= 0x40uLL)
    goto LABEL_34;
  if (*(_QWORD *)(result + 8 * v13 + 80))
    goto LABEL_31;
  if ((v15 & 0x7Fu) >= 0x40)
    goto LABEL_34;
  if (((*(_QWORD *)(result + 72) >> (v15 & 0x7F)) & 1) != 0)
  {
LABEL_31:
    if (v8 != 8 && (v8 - 12) > 1)
      goto LABEL_32;
    goto LABEL_28;
  }
  if ((v8 - 8) < 4 || (v8 - 13) < 2)
    goto LABEL_9;
  if (v8 == 12)
  {
LABEL_28:
    v25 = *(char *)(a2 + 34);
    if (v25 != -1)
    {
      v35 = (v25 + 32);
      if (v35 >= 0x40)
        goto LABEL_34;
      if (!*(_QWORD *)(result + 8 * v35 + 80))
      {
        v36 = *(_BYTE *)(a2 + 34);
        v37 = ((_BYTE)v25 + 32) & 0x7F;
        if (v37 >= 0x40)
          goto LABEL_34;
        if (((*(_QWORD *)(result + 72) >> v37) & 1) == 0)
        {
LABEL_81:
          JSC::MacroAssemblerARM64::loadDouble(*(_QWORD *)result, v12, (char)v36, a4, a5, a6, a7, a8);
          v43 = *(_QWORD *)(a2 + 24);
          if (v43 == 7 || v43 == 12)
            v46[0] = 7;
          else
            v46[0] = 6;
          *(_QWORD *)&v46[1] = v36;
          if (v43 != 17)
            JSC::CallFrameShuffler::setCachedRecovery(v10, v43, *(unsigned __int8 *)(a2 + 32), 0);
          *(_QWORD *)(a2 + 24) = *(_QWORD *)v46;
          *(_BYTE *)(a2 + 32) = 0;
          result = JSC::CallFrameShuffler::setCachedRecovery(v10, *(unint64_t *)v46, 0, a2);
          if (*(_DWORD *)(v10 + 1128) - *(_DWORD *)(v10 + 64) == v11)
            return JSC::CallFrameShuffler::updateDangerFrontier(v10);
          return result;
        }
      }
    }
    v26 = 0;
    v27 = 255;
    v28 = 128;
    do
    {
      v40 = v28 & 0x7F;
      if (v40 >= 0x40)
        goto LABEL_34;
      v41 = *(_QWORD *)(result + 72);
      if ((v28 & 0x60) == 0x20 && (v41 & (1 << v40)) == 0 && !*(_QWORD *)(result + 80 + 8 * v40))
      {
        if (!*(_QWORD *)(result + 8 * v40 + 600))
        {
          LOBYTE(v27) = v28;
          goto LABEL_79;
        }
        if ((~v27 & 0x7F) == 0)
          v27 = v28;
      }
      v28 = ((_BYTE)v28 + 1) | 0xFFFFFF80;
      if (v26 == 63)
        v28 = -1;
      v26 = v28 & 0x7F;
    }
    while ((v28 & 0x7F) < 0x40);
    if ((~v27 & 0x7F) != 0 || (v44 = *(unsigned __int8 *)(result + 592), v44 == 255) || (v44 & 0x60) != 0x20)
    {
LABEL_79:
      v42 = v27 & 0x7F;
      if (v42 != 127)
      {
        v36 = v42 - 32;
        if ((_BYTE)v42 != 31)
          goto LABEL_81;
      }
LABEL_32:
      if (v14 == 255)
        goto LABEL_36;
      goto LABEL_33;
    }
    LOBYTE(v27) = v44 & 0x7F;
    if ((v44 & 0x7Fu) < 0x40)
    {
      *(_QWORD *)(result + 72) = v41 & ~(1 << v27);
      *(_BYTE *)(result + 592) = -1;
      goto LABEL_79;
    }
LABEL_34:
    __break(1u);
LABEL_35:
    v45[0] = 1;
    goto LABEL_14;
  }
LABEL_33:
  v16 = v13;
  if (v13 >= 0x40uLL)
    goto LABEL_34;
LABEL_9:
  if (*(_QWORD *)(result + 8 * v16 + 80))
    goto LABEL_36;
  v17 = v15 & 0x7F;
  if (v17 >= 0x40)
    goto LABEL_34;
  if (((*(_QWORD *)(result + 72) >> v17) & 1) != 0)
  {
LABEL_36:
    v29 = 0;
    v30 = 255;
    v31 = 128;
    while (1)
    {
      v32 = v31 & 0x7F;
      if (v32 >= 0x40)
        goto LABEL_34;
      v33 = *(_QWORD *)(result + 72);
      if (!(v33 & (1 << v32) | v31 & 0x60) && !*(_QWORD *)(result + 80 + 8 * v32))
      {
        if (!*(_QWORD *)(result + 8 * v32 + 600))
        {
          LOBYTE(v30) = v31;
LABEL_46:
          v34 = v30 & 0x7F;
          if (v34 == 127)
            LOBYTE(v14) = -1;
          else
            LOBYTE(v14) = v34;
          break;
        }
        if ((~v30 & 0x7F) == 0)
          v30 = v31;
      }
      v31 = ((_BYTE)v31 + 1) | 0xFFFFFF80;
      if (v29 == 63)
        v31 = -1;
      v29 = v31 & 0x7F;
      if ((v31 & 0x7F) >= 0x40)
      {
        if ((~v30 & 0x7F) == 0)
        {
          v38 = *(unsigned __int8 *)(result + 592);
          if (v38 != 255)
          {
            v39 = v38 & 0x7F;
            if (v39 <= 0x1F)
            {
              *(_QWORD *)(result + 72) = v33 & ~(1 << v39);
              *(_BYTE *)(result + 592) = -1;
              LOBYTE(v30) = v39;
            }
          }
        }
        goto LABEL_46;
      }
    }
  }
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)result, v12, (char)v14, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a2 + 24);
  a3 = *(unsigned __int8 *)(a2 + 32);
  switch((char)v12)
  {
    case 1:
    case 9:
      goto LABEL_35;
    case 2:
    case 10:
      v45[0] = 2;
      break;
    case 3:
    case 11:
      v45[0] = 3;
      break;
    case 4:
    case 14:
      v45[0] = 4;
      break;
    case 5:
    case 13:
      v45[0] = 5;
      break;
    default:
      v45[0] = 0;
      break;
  }
LABEL_14:
  *(_QWORD *)&v45[1] = v14;
  if (v12 != 17)
    JSC::CallFrameShuffler::setCachedRecovery(v10, v12, a3, 0);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)v45;
  *(_BYTE *)(a2 + 32) = 0;
  result = JSC::CallFrameShuffler::setCachedRecovery(v10, *(unint64_t *)v45, 0, a2);
  v18 = *(_DWORD *)(v10 + 64);
  if (*(_DWORD *)(v10 + 1128) - v18 == v11)
  {
    *(_DWORD *)(v10 + 1128) = -1;
    v19 = *(unsigned int *)(v10 + 52);
    if ((int)v19 >= 1)
    {
      v20 = -v18 - 1;
      while (1)
      {
        v21 = v19 - 1;
        if (*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8 * (v19 - 1)))
        {
          v22 = v20 + v19;
          if (v20 + (int)v19 <= 1)
          {
            v23 = *(unsigned int *)(v10 + 28);
            if (2 - (int)v23 <= v22)
            {
              v24 = 1 - v22;
              if (v24 >= v23)
              {
                __break(0xC471u);
                JUMPOUT(0x1986F94A4);
              }
              if (*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v24))
                break;
            }
          }
        }
        --v19;
        if ((unint64_t)(v21 + 1) <= 1)
          return result;
      }
      *(_DWORD *)(v10 + 1128) = v19 - 1;
    }
  }
  return result;
}

uint64_t JSC::CallFrameShuffler::updateDangerFrontier(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;

  *(_DWORD *)(this + 1128) = -1;
  v1 = *(unsigned int *)(this + 52);
  if ((int)v1 >= 1)
  {
    do
    {
      v2 = v1 - 1;
      if (*(_QWORD *)(*(_QWORD *)(this + 40) + 8 * (v1 - 1)))
      {
        v3 = *(unsigned int *)(this + 28);
        if ((int)v1 - *(_DWORD *)(this + 64) - 1 <= 1 && 2 - (int)v3 <= (int)v1 - *(_DWORD *)(this + 64) - 1)
        {
          v5 = 2 - ((int)v1 - *(_DWORD *)(this + 64));
          if (v5 >= v3)
          {
            __break(0xC471u);
            return this;
          }
          if (*(_QWORD *)(*(_QWORD *)(this + 16) + 8 * v5))
          {
            *(_DWORD *)(this + 1128) = v1 - 1;
            return this;
          }
        }
      }
      --v1;
    }
    while ((unint64_t)(v2 + 1) > 1);
  }
  return this;
}

uint64_t JSC::CallFrameShuffler::canLoad(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v3 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 - 8) > 6)
    return 1;
  if (v3 == 8 || (v3 - 12) <= 1)
  {
    v6 = 0;
    v2 = a1 + 80;
    v7 = 255;
    v8 = 128;
    while (1)
    {
      v9 = v8 & 0x7F;
      if (v9 >= 0x40)
        goto LABEL_38;
      v10 = *(_QWORD *)(a1 + 72);
      if ((v8 & 0x60) == 0x20 && (v10 & (1 << v9)) == 0 && !*(_QWORD *)(v2 + 8 * v9))
      {
        if (!*(_QWORD *)(a1 + 8 * v9 + 600))
        {
          LOBYTE(v7) = v8;
          goto LABEL_19;
        }
        if ((~v7 & 0x7F) == 0)
          v7 = v8;
      }
      v8 = ((_BYTE)v8 + 1) | 0xFFFFFF80;
      if (v6 == 63)
        v8 = -1;
      v6 = v8 & 0x7F;
      if ((v8 & 0x7F) >= 0x40)
      {
        if ((~v7 & 0x7F) == 0)
        {
          v2 = *(unsigned __int8 *)(a1 + 592);
          if (v2 != 255 && (v2 & 0x60) == 0x20)
          {
            v7 = v2 & 0x7F;
            if (v7 >= 0x40)
              goto LABEL_38;
            *(_QWORD *)(a1 + 72) = v10 & ~(1 << v7);
            *(_BYTE *)(a1 + 592) = -1;
          }
        }
LABEL_19:
        v11 = (((v7 + 97) >> 5) | (8 * (v7 + 97)));
        v4 = 1;
        if (v11 > 7)
          return v4;
        v2 = 153;
        if (((1 << v11) & 0x99) == 0)
          return v4;
        goto LABEL_21;
      }
    }
  }
  v12 = *(unsigned __int8 *)(a2 + 24);
  if ((v12 - 8) >= 4 && (v12 - 13) > 1)
    return 0;
LABEL_21:
  v13 = 0;
  v7 = 255;
  v14 = 128;
  while (1)
  {
    v15 = v14 & 0x7F;
    if (v15 >= 0x40)
      break;
    v2 = *(_QWORD *)(a1 + 72);
    if (!(v2 & (1 << v15) | v14 & 0x60) && !*(_QWORD *)(a1 + 80 + 8 * v15))
    {
      if (!*(_QWORD *)(a1 + 8 * v15 + 600))
      {
        v7 = v14;
        return (~v7 & 0x7F) != 0;
      }
      if ((~v7 & 0x7F) == 0)
        v7 = v14;
    }
    v14 = ((_BYTE)v14 + 1) | 0xFFFFFF80;
    if (v13 == 63)
      v14 = -1;
    v13 = v14 & 0x7F;
    if ((v14 & 0x7F) >= 0x40)
      goto LABEL_39;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  if ((~v7 & 0x7F) == 0)
  {
    v16 = *(unsigned __int8 *)(a1 + 592);
    if (v16 != 255)
    {
      v17 = v16 & 0x7F;
      if (v17 <= 0x1F)
      {
        *(_QWORD *)(a1 + 72) = v2 & ~(1 << v17);
        *(_BYTE *)(a1 + 592) = -1;
        v7 = v17;
      }
    }
  }
  return (~v7 & 0x7F) != 0;
}

uint64_t JSC::numberOfExecutableAllocationFuzzChecks(JSC *this)
{
  return atomic_load((unsigned int *)&JSC::s_numberOfExecutableAllocationFuzzChecks);
}

BOOL JSC::doExecutableAllocationFuzzing(JSC *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _BOOL8 v15;
  int v16;
  int v18;
  void (**v19)(CrashLogPrintStream *__hidden);
  _QWORD v20[3];
  __int128 v21;
  _OWORD v22[15];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!byte_1ECF4C63C)
  {
    do
    {
      while (1)
      {
        v10 = atomic_load((unsigned int *)&JSC::s_numberOfExecutableAllocationFuzzChecks);
        v11 = __ldaxr((unsigned int *)&JSC::s_numberOfExecutableAllocationFuzzChecks);
        if (v11 == v10)
          break;
        __clrex();
      }
      v12 = v10 + 1;
    }
    while (__stlxr(v12, (unsigned int *)&JSC::s_numberOfExecutableAllocationFuzzChecks));
    if (v12 != (_DWORD)qword_1ECF4C634 && HIDWORD(qword_1ECF4C634) - 1 >= v12)
      return 0;
    if ((_BYTE)word_1ECF4C648)
    {
      WTF::dataLog<char [16]>("Will pretend to fail executable allocation.\n");
      v23 = 0;
      v21 = 0u;
      memset(v22, 0, sizeof(v22));
      v18 = 33;
      WTFGetBacktrace((void **)&v21, &v18);
      if (v18 < 3)
      {
        v20[0] = off_1E3571850;
        WTF::PrintStream::printf((WTF::PrintStream *)v20, "%s", "no stacktrace available");
        (*(void (**)(_QWORD *))(v20[0] + 40))(v20);
      }
      else
      {
        v19 = off_1E3571850;
        v20[0] = v22;
        v20[1] = (v18 - 2);
        v20[2] = &str_6;
        WTF::StackTracePrinter::dump((WTF::StackTracePrinter *)v20, (WTF::PrintStream *)&v19);
        v19[5]((CrashLogPrintStream *)&v19);
      }
    }
    return 1;
  }
  v8 = atomic_load(&JSC::doExecutableAllocationFuzzing(void)::once);
  if (v8 != -1)
  {
    *(_QWORD *)&v21 = &v19;
    v20[0] = &v21;
    std::__call_once(&JSC::doExecutableAllocationFuzzing(void)::once, v20, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::doExecutableAllocationFuzzing(void)::$_0 &&>>);
  }
  if (__ldaxr(JSC::doExecutableAllocationFuzzing(void)::fuzzingLock))
  {
    __clrex();
LABEL_16:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::doExecutableAllocationFuzzing(void)::fuzzingLock);
    goto LABEL_17;
  }
  if (__stxr(1u, JSC::doExecutableAllocationFuzzing(void)::fuzzingLock))
    goto LABEL_16;
LABEL_17:
  if (*(double *)&qword_1ECF4C640 == 0.0)
  {
    v15 = 0;
  }
  else
  {
    v13 = JSC::doExecutableAllocationFuzzing(void)::random;
    v14 = JSC::doExecutableAllocationFuzzing(void)::random;
    JSC::doExecutableAllocationFuzzing(void)::random = JSC::doExecutableAllocationFuzzing(void)::random;
    JSC::doExecutableAllocationFuzzing(void)::random ^= ((unint64_t)JSC::doExecutableAllocationFuzzing(void)::random >> 26) ^ ((v13 ^ (unint64_t)(v13 << 23)) >> 17) ^ v13 ^ (v13 << 23);
    v15 = *(double *)&qword_1ECF4C640 * 4294967300.0 >= (double)(JSC::doExecutableAllocationFuzzing(void)::random
                                                                             + v14);
  }
  v16 = __ldxr(JSC::doExecutableAllocationFuzzing(void)::fuzzingLock);
  if (v16 == 1)
  {
    if (!__stlxr(0, JSC::doExecutableAllocationFuzzing(void)::fuzzingLock))
      return v15;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::doExecutableAllocationFuzzing(void)::fuzzingLock, 0, a3, a4, a5, a6, a7, a8);
  return v15;
}

void JSC::ExecutableAllocator::disableJIT(JSC::ExecutableAllocator *this)
{
  unint64_t v1;
  void *v2;
  char v3;
  char **v4;
  char *v5;

  if (byte_1ECF4C1E1)
  {
    if (BYTE1(dword_1ECF4C240))
    {
      __break(0xC471u);
      goto LABEL_15;
    }
  }
  else
  {
    byte_1ECF4C1E1 = 1;
    BYTE1(dword_1ECF4C240) = 0;
    if (WTF::processHasEntitlement("dynamic-codesigning")
      || WTF::processHasEntitlement("com.apple.developer.cs.allow-jit"))
    {
      v1 = atomic_load(&Gigacage::ensureGigacage(void)::onceFlag);
      if (v1 != -1)
      {
        v5 = &v3;
        v4 = &v5;
        std::__call_once(&Gigacage::ensureGigacage(void)::onceFlag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<Gigacage::ensureGigacage(void)::$_0 &&>>);
      }
      v2 = mmap(0, 1uLL, 7, 6146, 0x40000000, 0);
      if ((unint64_t)v2 + 1 <= 1)
      {
        __break(0xC471u);
LABEL_15:
        JUMPOUT(0x1986F9C44);
      }
      if (munmap(v2, 1uLL))
      {
        __break(0xC471u);
        JUMPOUT(0x1986F9D38);
      }
      if (mmap(0, 1uLL, 7, 6146, 0x40000000, 0) != (void *)-1)
      {
        __break(0xC471u);
        JUMPOUT(0x1986F9D58);
      }
    }
  }
}

uint64_t JSC::ExecutableAllocator::initializeUnderlyingAllocator(JSC::ExecutableAllocator *this)
{
  JSC::FixedVMPoolExecutableAllocator *v1;
  uint64_t result;

  if (qword_1ECF4C1F0)
  {
    result = 1142;
    __break(0xC471u);
  }
  else
  {
    v1 = (JSC::FixedVMPoolExecutableAllocator *)WTF::fastMalloc((WTF *)0x58);
    result = (uint64_t)JSC::FixedVMPoolExecutableAllocator::FixedVMPoolExecutableAllocator(v1);
    qword_1ECF4C1F0 = result;
    JSC::globalFixedVMPoolExecutableAllocatorToWorkAroundLeaks = result;
  }
  return result;
}

BOOL JSC::ExecutableAllocator::isValid(JSC::ExecutableAllocator *this)
{
  return qword_1ECF4C1F0 && *(_QWORD *)(qword_1ECF4C1F0 + 8) != 0;
}

double JSC::ExecutableAllocator::memoryPressureMultiplier(JSC::ExecutableAllocator *this)
{
  char *v1;
  unint64_t v2;
  double v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  double v8;
  double result;

  if (!qword_1ECF4C1F0)
    return 1.0;
  v1 = (char *)this + *(_QWORD *)(qword_1ECF4C1F0 + 80);
  v2 = *(_QWORD *)(qword_1ECF4C1F0 + 72);
  v3 = (double)v2 * 0.25;
  v4 = v2 - (unint64_t)v3;
  v5 = v2 - 0x40000;
  if ((unint64_t)v3 >> 18)
    v5 = v4;
  if ((unint64_t)v1 >= v5)
    v1 = (char *)v5;
  v6 = v5 - (_QWORD)v1;
  v7 = v5 != (_QWORD)v1;
  v8 = (double)v5 / (double)v6;
  result = v7 && v8 >= 1.0 ? (double)v5 / (double)v6 : 1.0;
  if (v8 < 1.0 && v7)
  {
    result = (double)v5 / (double)v6;
    if (v8 < 1.0)
      return 1.0;
  }
  return result;
}

uint64_t WTF::dataLog<char [43],unsigned long,char [4],unsigned long,char [19]>(const char *a1, _QWORD *a2, const char *a3, _QWORD *a4, const char *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  char v14;
  char **v15;
  char *v16;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", a1);
  WTF::PrintStream::printf(v12, "%lu", *a2);
  WTF::PrintStream::printf(v12, "%s", a3);
  WTF::PrintStream::printf(v12, "%lu", *a4);
  WTF::PrintStream::printf(v12, "%s", a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

uint64_t JSC::ExecutableAllocator::getJumpIslandToUsingJITMemcpy(JSC::ExecutableAllocator *this, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t result;
  unsigned __int8 *v22;
  char v23;

  v8 = (_QWORD *)qword_1ECF4C1F0;
  if (qword_1ECF4C1F0)
  {
    v22 = (unsigned __int8 *)qword_1ECF4C1F0;
    v23 = 1;
    if (__ldaxr((unsigned __int8 *)qword_1ECF4C1F0))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)qword_1ECF4C1F0))
    {
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v8);
LABEL_6:
    v18 = JSC::FixedVMPoolExecutableAllocator::islandForJumpLocation(v8, (uint64_t)&v22, a2, a3, 0, 0, a7, a8);
    if (v23)
    {
      v19 = v22;
      v20 = __ldxr(v22);
      if (v20 == 1)
      {
        if (!__stlxr(0, v22))
          return (uint64_t)v18;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v19, 0, v12, v13, v14, v15, v16, v17);
    }
    return (uint64_t)v18;
  }
  result = 1275;
  __break(0xC471u);
  return result;
}

uint64_t JSC::ExecutableAllocator::getJumpIslandToUsingMemcpy(JSC::ExecutableAllocator *this, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t result;
  unsigned __int8 *v22;
  char v23;

  v8 = (_QWORD *)qword_1ECF4C1F0;
  if (qword_1ECF4C1F0)
  {
    v22 = (unsigned __int8 *)qword_1ECF4C1F0;
    v23 = 1;
    if (__ldaxr((unsigned __int8 *)qword_1ECF4C1F0))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)qword_1ECF4C1F0))
    {
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v8);
LABEL_6:
    v18 = JSC::FixedVMPoolExecutableAllocator::islandForJumpLocation(v8, (uint64_t)&v22, a2, a3, 0, 1, a7, a8);
    if (v23)
    {
      v19 = v22;
      v20 = __ldxr(v22);
      if (v20 == 1)
      {
        if (!__stlxr(0, v22))
          return (uint64_t)v18;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v19, 0, v12, v13, v14, v15, v16, v17);
    }
    return (uint64_t)v18;
  }
  result = 1286;
  __break(0xC471u);
  return result;
}

uint64_t JSC::ExecutableAllocator::getJumpIslandToConcurrently(JSC::ExecutableAllocator *this, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t result;
  unsigned __int8 *v22;
  char v23;

  v8 = (_QWORD *)qword_1ECF4C1F0;
  if (qword_1ECF4C1F0)
  {
    v22 = (unsigned __int8 *)qword_1ECF4C1F0;
    v23 = 1;
    if (__ldaxr((unsigned __int8 *)qword_1ECF4C1F0))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)qword_1ECF4C1F0))
    {
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v8);
LABEL_6:
    v18 = JSC::FixedVMPoolExecutableAllocator::islandForJumpLocation(v8, (uint64_t)&v22, a2, a3, 1, 0, a7, a8);
    if (v23)
    {
      v19 = v22;
      v20 = __ldxr(v22);
      if (v20 == 1)
      {
        if (!__stlxr(0, v22))
          return (uint64_t)v18;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v19, 0, v12, v13, v14, v15, v16, v17);
    }
    return (uint64_t)v18;
  }
  result = 1297;
  __break(0xC471u);
  return result;
}

uint64_t JSC::startOfFixedExecutableMemoryPoolImpl(JSC *this)
{
  if (qword_1ECF4C1F0)
    return qword_1ECF4C1F8;
  else
    return 0;
}

uint64_t JSC::endOfFixedExecutableMemoryPoolImpl(JSC *this)
{
  if (qword_1ECF4C1F0)
    return qword_1ECF4C200;
  else
    return 0;
}

void JSC::dumpJITMemory(JSC *this, const void *a2, char *a3)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  char *v34;
  char *v35;
  int v36;
  char v37;
  char **v38;
  char *v39;

  if (!qword_1ECF4C748)
  {
    __break(0xC471u);
    JUMPOUT(0x1986FA604);
  }
  v6 = atomic_load(&qword_1ECF588C8);
  if (v6 != -1)
  {
    v39 = &v37;
    v38 = &v39;
    std::__call_once(&qword_1ECF588C8, &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::dumpJITMemory(void const*,void const*,unsigned long)::$_0 &&>>);
  }
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_38))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_38))
  {
    goto LABEL_8;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&_MergedGlobals_38);
LABEL_8:
  v8 = mach_absolute_time();
  kdebug_trace();
  kdebug_trace();
  v9 = qword_1ECF588B8;
  v10 = qword_1ECF588B8 + 8;
  if ((unint64_t)(qword_1ECF588B8 + 8) >= 0x20000001)
  {
    JSC::dumpJITMemory(void const*,void const*,unsigned long)::DumpJIT::flush();
    v9 = qword_1ECF588B8;
    v10 = qword_1ECF588B8 + 8;
  }
  *(_QWORD *)(qword_1ECF588B0 + v9) = v8;
  qword_1ECF588B8 = v10;
  if ((byte_1ECF588A9 & 1) == 0)
  {
    byte_1ECF588A9 = 1;
    v11 = qword_1ECF588C0;
    v12 = *(double *)&qword_1ECF4C750;
    v13 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v13 = off_1E3595808;
    v39 = v13;
    (*(void (**)(uint64_t, char **, double))(*(_QWORD *)v11 + 16))(v11, &v39, v12);
    v14 = v39;
    v39 = 0;
    if (v14)
      (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
    v10 = qword_1ECF588B8;
  }
  v15 = v10 + 8;
  if ((unint64_t)(v10 + 8) >= 0x20000001)
  {
    JSC::dumpJITMemory(void const*,void const*,unsigned long)::DumpJIT::flush();
    v10 = qword_1ECF588B8;
    v15 = qword_1ECF588B8 + 8;
  }
  *(_QWORD *)(qword_1ECF588B0 + v10) = this;
  qword_1ECF588B8 = v15;
  if ((byte_1ECF588A9 & 1) == 0)
  {
    byte_1ECF588A9 = 1;
    v16 = qword_1ECF588C0;
    v17 = *(double *)&qword_1ECF4C750;
    v18 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v18 = off_1E3595808;
    v39 = v18;
    (*(void (**)(uint64_t, char **, double))(*(_QWORD *)v16 + 16))(v16, &v39, v17);
    v19 = v39;
    v39 = 0;
    if (v19)
      (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
    v15 = qword_1ECF588B8;
  }
  v20 = v15 + 8;
  if ((unint64_t)(v15 + 8) >= 0x20000001)
  {
    JSC::dumpJITMemory(void const*,void const*,unsigned long)::DumpJIT::flush();
    v15 = qword_1ECF588B8;
    v20 = qword_1ECF588B8 + 8;
  }
  *(_QWORD *)(qword_1ECF588B0 + v15) = a3;
  qword_1ECF588B8 = v20;
  if ((byte_1ECF588A9 & 1) == 0)
  {
    byte_1ECF588A9 = 1;
    v21 = qword_1ECF588C0;
    v22 = *(double *)&qword_1ECF4C750;
    v23 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v23 = off_1E3595808;
    v39 = v23;
    (*(void (**)(uint64_t, char **, double))(*(_QWORD *)v21 + 16))(v21, &v39, v22);
    v24 = v39;
    v39 = 0;
    if (v24)
      (*(void (**)(char *))(*(_QWORD *)v24 + 8))(v24);
    v20 = qword_1ECF588B8;
  }
  v25 = &a3[v20];
  if ((unint64_t)&a3[v20] >= 0x20000001)
  {
    JSC::dumpJITMemory(void const*,void const*,unsigned long)::DumpJIT::flush();
    v20 = qword_1ECF588B8;
    v25 = &a3[qword_1ECF588B8];
  }
  memcpy((void *)(qword_1ECF588B0 + v20), a2, (size_t)a3);
  qword_1ECF588B8 = (uint64_t)v25;
  if ((byte_1ECF588A9 & 1) == 0)
  {
    byte_1ECF588A9 = 1;
    v32 = qword_1ECF588C0;
    v33 = *(double *)&qword_1ECF4C750;
    v34 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v34 = off_1E3595808;
    v39 = v34;
    (*(void (**)(uint64_t, char **, double))(*(_QWORD *)v32 + 16))(v32, &v39, v33);
    v35 = v39;
    v39 = 0;
    if (v35)
      (*(void (**)(char *))(*(_QWORD *)v35 + 8))(v35);
  }
  v36 = __ldxr((unsigned __int8 *)&_MergedGlobals_38);
  if (v36 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)&_MergedGlobals_38))
LABEL_35:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&_MergedGlobals_38, 0, v26, v27, v28, v29, v30, v31);
}

unint64_t JSC::ExecutableMemoryHandle::createImpl@<X0>(JSC::ExecutableMemoryHandle *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  unint64_t result;
  unint64_t v11;
  uint64_t v12;

  result = jit_heap_try_allocate((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    v11 = result;
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    result = jit_heap_get_size(v11);
    *(_DWORD *)v12 = 1;
    *(_DWORD *)(v12 + 4) = result;
    *(_QWORD *)(v12 + 8) = v11;
  }
  else
  {
    v12 = 0;
  }
  *a9 = v12;
  return result;
}

void JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle(JSC::ExecutableMemoryHandle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;

  if (!(_BYTE)word_1ECF4C286)
    goto LABEL_2;
  v15 = *((_QWORD *)this + 1);
  v16 = *((unsigned int *)this + 1);
  if (__ldaxr(JSC::commentsRegistry))
  {
    __clrex();
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)JSC::commentsRegistry);
    goto LABEL_10;
  }
  if (__stxr(1u, JSC::commentsRegistry))
    goto LABEL_9;
LABEL_10:
  v18 = (_QWORD *)xmmword_1ECF500D0;
  if ((_QWORD)xmmword_1ECF500D0)
  {
    v19 = ~v15;
    v20 = (uint64_t *)&xmmword_1ECF500D0;
    do
    {
      v21 = v18[4];
      v22 = v21 >= v19;
      if (v21 >= v19)
        v23 = v18;
      else
        v23 = v18 + 1;
      if (v22)
        v20 = v18;
      v18 = (_QWORD *)*v23;
    }
    while (*v23);
    if (v20 != (uint64_t *)&xmmword_1ECF500D0 && v20[4] <= v19)
    {
      if (v20[5] != v16 + v15)
      {
        __break(0xC471u);
        return;
      }
      std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,WTF::HashMap<unsigned long,WTF::String,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,WTF::HashMap<unsigned long,WTF::String,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,std::less<unsigned long>,true>,WTF::FastAllocator<std::__value_type<unsigned long,std::pair<unsigned long,WTF::HashMap<unsigned long,WTF::String,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>>>::erase((uint64_t **)&qword_1ECF500C8, v20);
    }
  }
  v24 = __ldxr(JSC::commentsRegistry);
  if (v24 == 1)
  {
    if (!__stlxr(0, JSC::commentsRegistry))
      goto LABEL_2;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(JSC::commentsRegistry, 0, a3, a4, a5, a6, a7, a8);
LABEL_2:
  v9 = qword_1ECF4C1F0;
  v10 = *((unsigned int *)this + 1);
  v11 = (unint64_t *)(qword_1ECF4C1F0 + 80);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 - v10, v11));
  if (!*(_QWORD *)(v9 + 64))
    goto LABEL_5;
  v30 = (unsigned __int8 *)v9;
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
LABEL_33:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v30);
    goto LABEL_34;
  }
  if (__stxr(1u, v30))
    goto LABEL_33;
LABEL_34:
  JSC::FixedVMPoolExecutableAllocator::handleWillBeReleased((uint64_t)v30, (void *)*((unsigned int *)this + 1), *((_QWORD *)this + 1), a4, a5, a6, a7, a8);
  v28 = __ldxr(v30);
  if (v28 != 1)
  {
    __clrex();
    v29 = v30;
    goto LABEL_38;
  }
  v29 = v30;
  if (__stlxr(0, v30))
LABEL_38:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v29, 0, v26, v27, a5, a6, a7, a8);
LABEL_5:
  v13 = *((_QWORD *)this + 1);
  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v14)
    jit_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v14, v13, 1, 0, a5, a6, a7, a8);
  else
    pas_try_deallocate_slow_no_cache(v13, (uint64_t)&jit_heap_config, 1);
}

void JSC::ExecutableMemoryHandle::shrink(JSC::ExecutableMemoryHandle *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t StatusReg;
  unsigned int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;

  v10 = *((unsigned int *)this + 1);
  v11 = *((_QWORD *)this + 1);
  if (off_1EE342948)
  {
    v12 = (v11 >> 14) ^ ((v11 >> 14) >> 4);
    v13 = ((v12 ^ 0xDEADBEEF) + 32 * v12) ^ (((v12 ^ 0xDEADBEEF) + 32 * v12) >> 11);
    v14 = (char *)off_1EE342948 + 32;
    v15 = *((_DWORD *)off_1EE342948 + 3) & v13;
    v16 = *((_QWORD *)off_1EE342948 + 2 * v15 + 4);
    if (v16 == (v11 & 0xFFFFFFFFFFFFC000))
    {
LABEL_3:
      v17 = *(unsigned __int8 **)&v14[16 * v15 + 8];
      if (v17)
        goto LABEL_4;
    }
    else
    {
      v19 = v13 + 1;
      while (v16 != -1)
      {
        v15 = *((_DWORD *)off_1EE342948 + 3) & v19;
        v16 = *(_QWORD *)&v14[16 * v15];
        ++v19;
        if (v16 == (v11 & 0xFFFFFFFFFFFFC000))
          goto LABEL_3;
      }
    }
  }
  if (off_1EE342918)
  {
    v20 = (v11 >> 17) ^ ((v11 >> 17) >> 4);
    v21 = ((v20 ^ 0xDEADBEEF) + 32 * v20) ^ (((v20 ^ 0xDEADBEEF) + 32 * v20) >> 11);
    v22 = (char *)off_1EE342918 + 32;
    v23 = *((_DWORD *)off_1EE342918 + 3) & v21;
    v24 = *((_QWORD *)off_1EE342918 + 2 * v23 + 4);
    if (v24 == (v11 & 0xFFFFFFFFFFFE0000))
    {
LABEL_13:
      v17 = *(unsigned __int8 **)&v22[16 * v23 + 8];
      if (v17)
      {
LABEL_4:
        v18 = *v17;
        if (v18 == 6)
        {
          jit_medium_bitfit_page_config_specialized_page_shrink_with_page((uint64_t)v17, v11, a2, a4, a5, a6, a7, a8);
        }
        else if (v18 == 5)
        {
          jit_small_bitfit_page_config_specialized_page_shrink_with_page((uint64_t)v17, v11, a2, a4, a5, a6, a7, a8);
        }
        goto LABEL_25;
      }
    }
    else
    {
      v56 = v21 + 1;
      while (v24 != -1)
      {
        v23 = *((_DWORD *)off_1EE342918 + 3) & v56;
        v24 = *(_QWORD *)&v22[16 * v23];
        ++v56;
        if (v24 == (v11 & 0xFFFFFFFFFFFE0000))
          goto LABEL_13;
      }
    }
  }
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v26 = *(_DWORD *)(StatusReg + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v26, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_19;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_19:
  v34 = pas_large_heap_try_shrink(v11, a2, (uint64_t)&jit_heap_config);
  v35 = *(_DWORD *)(StatusReg + 24);
  while (1)
  {
    v36 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v36 != v35)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_24;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
LABEL_24:
  if (!v34)
    pas_deallocation_did_fail((uint64_t)"Object not allocated", v11, v28, v29, v30, v31, v32, v33);
LABEL_25:
  v37 = *((_QWORD *)this + 1);
  if (off_1EE342948)
  {
    v38 = (v37 >> 14) ^ ((v37 >> 14) >> 4);
    v39 = ((v38 ^ 0xDEADBEEF) + 32 * v38) ^ (((v38 ^ 0xDEADBEEF) + 32 * v38) >> 11);
    v40 = (char *)off_1EE342948 + 32;
    v41 = *((_DWORD *)off_1EE342948 + 3) & v39;
    v42 = *((_QWORD *)off_1EE342948 + 2 * v41 + 4);
    if (v42 == (v37 & 0xFFFFFFFFFFFFC000))
    {
LABEL_27:
      v43 = *(_QWORD *)&v40[16 * v41 + 8];
      if (v43)
        goto LABEL_28;
    }
    else
    {
      v45 = v39 + 1;
      while (v42 != -1)
      {
        v41 = *((_DWORD *)off_1EE342948 + 3) & v45;
        v42 = *(_QWORD *)&v40[16 * v41];
        ++v45;
        if (v42 == (v37 & 0xFFFFFFFFFFFFC000))
          goto LABEL_27;
      }
    }
  }
  if (off_1EE342918)
  {
    v46 = (v37 >> 17) ^ ((v37 >> 17) >> 4);
    v47 = ((v46 ^ 0xDEADBEEF) + 32 * v46) ^ (((v46 ^ 0xDEADBEEF) + 32 * v46) >> 11);
    v48 = (char *)off_1EE342918 + 32;
    v49 = *((_DWORD *)off_1EE342918 + 3) & v47;
    v50 = *((_QWORD *)off_1EE342918 + 2 * v49 + 4);
    if (v50 == (v37 & 0xFFFFFFFFFFFE0000))
    {
LABEL_36:
      v43 = *(_QWORD *)&v48[16 * v49 + 8];
      if (v43)
      {
LABEL_28:
        switch(*(_BYTE *)v43)
        {
          case 1:
            v60 = (*(_QWORD *)(v43 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * ((v37 >> 9) & 0x1F);
            goto LABEL_67;
          case 2:
          case 4:
            v44 = *(_DWORD *)(v43 + 4);
            break;
          case 3:
            v60 = (*(_QWORD *)(v43 + 32) & 0xFFFFFFFFFFFFFFF8) + 4 * v37;
LABEL_67:
            v61 = *(unsigned int *)(v60 + 20);
            if ((_DWORD)v61)
              v62 = pas_compact_heap_reservation_base + 8 * v61;
            else
              v62 = 0;
            v63 = *(unsigned __int16 *)(v62 + 7) | ((unint64_t)*(unsigned __int8 *)(v62 + 9) << 16);
            if ((_DWORD)v63)
              v64 = pas_compact_heap_reservation_base + 8 * v63;
            else
              v64 = 0;
            v44 = *(_DWORD *)(v64 + 24) & 0x7FFFFFF;
            break;
          case 5:
            v65 = v43 + 8 * ((v37 >> 8) & 0x3F);
            v66 = *(_QWORD *)(v65 + 528) >> (v37 >> 2);
            if (v66)
            {
              LODWORD(v66) = __clz(__rbit64(v66));
            }
            else
            {
              v69 = -(uint64_t)(v37 >> 2);
              v70 = (unint64_t *)(v65 + 536);
              do
              {
                v72 = *v70++;
                v71 = v72;
                v69 += 64;
              }
              while (!v72);
              v66 = __clz(__rbit64(v71)) + v69;
            }
            v44 = 4 * v66 + 4;
            break;
          case 6:
            v67 = v43 + 8 * ((v37 >> 14) & 7);
            v68 = *(_QWORD *)(v67 + 80) >> SBYTE1(v37);
            if (v68)
            {
              LODWORD(v68) = __clz(__rbit64(v68));
            }
            else
            {
              v73 = -(uint64_t)((v37 >> 8) & 0x3F);
              v74 = (unint64_t *)(v67 + 88);
              do
              {
                v76 = *v74++;
                v75 = v76;
                v73 += 64;
              }
              while (!v76);
              v68 = __clz(__rbit64(v75)) + v73;
            }
            v44 = ((_DWORD)v68 << 8) + 256;
            break;
          default:
            v44 = 0;
            break;
        }
        goto LABEL_50;
      }
    }
    else
    {
      v57 = v47 + 1;
      while (v50 != -1)
      {
        v49 = *((_DWORD *)off_1EE342918 + 3) & v57;
        v50 = *(_QWORD *)&v48[16 * v49];
        ++v57;
        if (v50 == (v37 & 0xFFFFFFFFFFFE0000))
          goto LABEL_36;
      }
    }
  }
  v51 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v52 = *(_DWORD *)(v51 + 24);
  while (!__ldaxr(&pas_heap_lock._os_unfair_lock_opaque))
  {
    if (!__stxr(v52, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_42;
  }
  __clrex();
  os_unfair_lock_lock(&pas_heap_lock);
LABEL_42:
  pas_large_map_find(v37, &v77);
  if (v77)
    v44 = v78 - v37;
  else
    v44 = 0;
  v54 = *(_DWORD *)(v51 + 24);
  while (1)
  {
    v55 = __ldxr(&pas_heap_lock._os_unfair_lock_opaque);
    if (v55 != v54)
      break;
    if (!__stlxr(0, &pas_heap_lock._os_unfair_lock_opaque))
      goto LABEL_50;
  }
  __clrex();
  os_unfair_lock_unlock(&pas_heap_lock);
LABEL_50:
  *((_DWORD *)this + 1) = v44;
  if (v44 != v10)
  {
    v58 = (unint64_t *)(qword_1ECF4C1F0 + 80);
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + v44 - v10, v58));
  }
}

uint64_t JSC::ExecutableAllocator::singleton(JSC::ExecutableAllocator *this)
{
  return qword_1ECF4C1E8;
}

void JSC::GCAwareJITStubRoutine::observeZeroRefCountImpl(JSC::GCAwareJITStubRoutine *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = *((_BYTE *)this + 40);
  if ((v8 & 0xA) == 8)
  {
    if (*((_DWORD *)this + 4))
      __break(0xC471u);
    else
      *((_BYTE *)this + 40) = v8 | 2;
  }
  else
  {
    JSC::JITStubRoutine::operator delete(this, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::GCAwareJITStubRoutine::removeDeadOwners(JSC::GCAwareJITStubRoutine *this, JSC::VM *a2, uint8x8_t a3)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  int v16;
  unsigned int v17;
  BOOL v18;

  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    if ((v4 & 8) != 0)
    {
      LODWORD(v4) = *(_BYTE *)(v4 - 79) & 1;
    }
    else if (*(_DWORD *)(v4 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)a2 + 108))
    {
      v4 = (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFC000) + 8 * ((v4 >> 10) & 0xF) + 0x28) >> (v4 >> 4)) & 1;
    }
    else
    {
      LODWORD(v4) = 0;
    }
    return v4 ^ 1;
  }
  if ((*((_BYTE *)this + 40) & 0x20) == 0)
    return 0;
  v8 = (uint64_t *)((char *)this + 80);
  v7 = *((_QWORD *)this + 10);
  if (!v7)
    goto LABEL_32;
  v9 = *(_DWORD *)(v7 - 4);
  if (!v9)
    goto LABEL_30;
  v10 = 0;
  v11 = v9 - 1;
  do
  {
    v12 = (unint64_t *)(v7 + 16 * v11);
    v13 = *v12;
    if (*v12 + 1 < 2)
      continue;
    if ((v13 & 8) != 0)
    {
      if ((*(_BYTE *)(v13 - 79) & 1) == 0)
        goto LABEL_16;
    }
    else if (*(_DWORD *)(v13 & 0xFFFFFFFFFFFFC000 | 0x20) != *((_DWORD *)a2 + 108)
           || ((*(_QWORD *)((v13 & 0xFFFFFFFFFFFFC000) + 8 * ((v13 >> 10) & 0xF) + 0x28) >> (v13 >> 4)) & 1) == 0)
    {
LABEL_16:
      *v12 = -1;
      ++v10;
    }
  }
  while ((unint64_t)v11--);
  v7 = *v8;
  if (v10)
  {
    *(_DWORD *)(v7 - 16) += v10;
    v15 = *v8;
    if (*v8)
      v16 = *(_DWORD *)(v15 - 12);
    else
      v16 = 0;
    *(_DWORD *)(v15 - 12) = v16 - v10;
    v7 = *v8;
  }
  if (v7)
  {
    v17 = *(_DWORD *)(v7 - 4);
    v18 = v17 < 9 || 6 * *(_DWORD *)(v7 - 12) >= v17;
    if (v18
      || (WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::shrinkToBestSize((uint64_t *)this + 10),
          (v7 = *v8) != 0))
    {
LABEL_30:
      if (*(_DWORD *)(v7 - 12))
        return 0;
    }
  }
LABEL_32:
  JSC::SharedJITStubSet::remove(*((uint64_t **)a2 + 11306), (uint64_t)this, a3);
  return 1;
}

void JSC::PolymorphicAccessJITStubRoutine::~PolymorphicAccessJITStubRoutine(JSC::PolymorphicAccessJITStubRoutine *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int **v19;
  unsigned int **v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t StatusReg;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t **v34;
  uint64_t *i;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;

  v9 = *((_QWORD *)this + 11);
  if (v9)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v30 = v9;
      v9 = *(_QWORD *)(v9 + 96);
      v31 = *(unsigned int *)(v30 + 88);
      if ((_DWORD)v31 != -1)
        ((void (*)(char *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC50StructureTransitionStructureStubClearingWatchpointENS6_44AdaptiveValueStructureStubClearingWatchpointEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v31])(&v46, v30);
      *(_DWORD *)(v30 + 88) = -1;
      v32 = *(_QWORD *)(StatusReg + 752);
      if (v32)
      {
        if (!(v30 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v30 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v30)) & 1) != 0)
        {
LABEL_37:
          v33 = *(unsigned int *)(v32 + 8000);
          if (v33 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v32, v30, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v32 + 8 * v33) = v30 | 0x5000000000000;
            *(_DWORD *)(v32 + 8000) = v33 + 1;
          }
          continue;
        }
        if (v30 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v30 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v30 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v30) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_37;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v32, v30, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v30, (uint64_t)&bmalloc_heap_config, 1);
      }
    }
    while (v9);
  }
  *((_QWORD *)this + 11) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  v11 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v34 = (uint64_t **)(v11 + 8);
      for (i = *(uint64_t **)(v11 + 8); i != (uint64_t *)v34; i = *v34)
      {
        v45 = *i;
        v44 = (uint64_t *)i[1];
        *v44 = *i;
        *(_QWORD *)(v45 + 8) = v44;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v14 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v14)
  {
    v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
    if (!v15)
    {
      pas_try_deallocate_slow_no_cache(v14, (uint64_t)&bmalloc_heap_config, 1);
      goto LABEL_13;
    }
    if (!(v14 >> 43)
      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v14 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v14)) & 1) != 0)
    {
      goto LABEL_11;
    }
    if (v14 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v14 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v14 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v14) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
      {
LABEL_11:
        v16 = *(unsigned int *)(v15 + 8000);
        if (v16 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v15, v14, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v15 + 8 * v16) = v14 | 0x5000000000000;
          *(_DWORD *)(v15 + 8000) = v16 + 1;
        }
        goto LABEL_13;
      }
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v15, v14, 1, a4, a5, a6, a7, a8);
  }
LABEL_13:
  v17 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!v17)
    goto LABEL_26;
  v19 = (unsigned int **)(v17 + 8);
  v18 = *(unsigned int *)v17;
  if ((_DWORD)v18)
  {
    v20 = &v19[v18];
    do
    {
      v21 = *v19;
      *v19 = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          JSC::AccessCase::operator delete((unint64_t)v21, (void *)v14, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v19;
    }
    while (v19 != v20);
  }
  v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v24)
  {
    pas_try_deallocate_slow_no_cache(v17, (uint64_t)&bmalloc_heap_config, 1);
    goto LABEL_26;
  }
  if (v17 >> 43
    || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v17 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v17)) & 1) == 0)
  {
    if (v17 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v17 >> 24)
    {
      a4 = 0;
    }
    else
    {
      a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v17 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v17) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
      if ((_DWORD)a4 == 1)
        goto LABEL_24;
    }
    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v24, v17, 1, a4, a5, a6, a7, a8);
    goto LABEL_26;
  }
LABEL_24:
  v25 = *(unsigned int *)(v24 + 8000);
  if (v25 >= 0x3E7)
  {
    pas_thread_local_cache_append_deallocation_slow(v24, v17, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
  }
  else
  {
    *(_QWORD *)(v24 + 8 * v25) = v17 | 0x5000000000000;
    *(_DWORD *)(v24 + 8000) = v25 + 1;
  }
LABEL_26:
  v26 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v26)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v26, v14, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
  }
}

void JSC::PolymorphicAccessJITStubRoutine::observeZeroRefCountImpl(JSC::PolymorphicAccessJITStubRoutine *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  char v14;
  unsigned int *v15;
  unsigned int v16;
  BOOL v17;
  unint64_t StatusReg;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  JSC::PolymorphicAccessJITStubRoutine *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t **v33;
  uint64_t *i;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;

  if ((*((_BYTE *)this + 40) & 0x20) != 0)
    JSC::SharedJITStubSet::remove(*(uint64_t **)(*((_QWORD *)this + 6) + 90448), (uint64_t)this, a9);
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v33 = (uint64_t **)(v10 + 8);
      for (i = *(uint64_t **)(v10 + 8); i != (uint64_t *)v33; i = *v33)
      {
        v44 = *i;
        v43 = (uint64_t *)i[1];
        *v43 = *i;
        *(_QWORD *)(v44 + 8) = v43;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v13 = *((_QWORD *)this + 11);
  if (v13)
  {
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v19 = v13;
      v13 = *(_QWORD *)(v13 + 96);
      v20 = *(unsigned int *)(v19 + 88);
      if ((_DWORD)v20 != -1)
        ((void (*)(char *, unint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC50StructureTransitionStructureStubClearingWatchpointENS6_44AdaptiveValueStructureStubClearingWatchpointEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v20])(&v53, v19);
      *(_DWORD *)(v19 + 88) = -1;
      v21 = *(_QWORD *)(StatusReg + 752);
      if (v21)
      {
        if (!(v19 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v19 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v19)) & 1) != 0)
        {
LABEL_18:
          v22 = *(unsigned int *)(v21 + 8000);
          if (v22 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v21, v19, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v21 + 8 * v22) = v19 | 0x5000000000000;
            *(_DWORD *)(v21 + 8000) = v22 + 1;
          }
          continue;
        }
        if (v19 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v19 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v19 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v19) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_18;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v21, v19, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v19, (uint64_t)&bmalloc_heap_config, 1);
      }
    }
    while (v13);
  }
  *((_QWORD *)this + 11) = 0;
  v14 = *((_BYTE *)this + 40);
  if ((v14 & 0xA) == 8)
  {
    if (*((_DWORD *)this + 4))
    {
      __break(0xC471u);
      JUMPOUT(0x1986FB738);
    }
    *((_BYTE *)this + 40) = v14 | 2;
  }
  else
  {
    switch(*((_BYTE *)this + 24))
    {
      case 0:
        v15 = (unsigned int *)*((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = 0;
        if (!v15)
          goto LABEL_26;
        do
        {
          v16 = __ldaxr(v15);
          v17 = --v16 == 0;
        }
        while (__stlxr(v16, v15));
        goto LABEL_24;
      case 1:
        v15 = (unsigned int *)*((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = 0;
        if (v15)
        {
          do
          {
            v23 = __ldaxr(v15);
            v17 = --v23 == 0;
          }
          while (__stlxr(v23, v15));
LABEL_24:
          if (v17)
          {
            atomic_store(1u, v15);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
          }
        }
LABEL_26:
        v24 = this;
        goto LABEL_27;
      case 2:
        v25 = *((unsigned int *)this + 11);
        if ((_DWORD)v25)
        {
          v26 = -24 * v25;
          do
          {
            v27 = (uint64_t *)((char *)this + v26);
            v28 = *(uint64_t **)((char *)this + v26 + 8);
            if (v28)
            {
              v29 = *v27;
              *v28 = *v27;
              *(_QWORD *)(v29 + 8) = v28;
              *v27 = 0;
              v27[1] = 0;
            }
            v26 += 24;
          }
          while (v26);
        }
        v30 = (unsigned int *)*((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = 0;
        if (v30)
        {
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            atomic_store(1u, v30);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v30, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
          }
        }
        v24 = (JSC::PolymorphicAccessJITStubRoutine *)((char *)this - 24 * v25);
        goto LABEL_27;
      case 3:
        JSC::PolymorphicAccessJITStubRoutine::~PolymorphicAccessJITStubRoutine(this, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_27;
      case 4:
        JSC::JITStubRoutine::destroy<JSC::MarkingGCAwareJITStubRoutine>(this, a2, a3, a4, a5, a6, a7, a8);
        return;
      case 5:
        JSC::GCAwareJITStubRoutineWithExceptionHandler::~GCAwareJITStubRoutineWithExceptionHandler(this);
LABEL_27:
        WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
        break;
      default:
        return;
    }
  }
}

uint64_t JSC::PolymorphicAccessJITStubRoutine::computeHash(JSC::AccessCase **a1, uint64_t a2)
{
  JSC::AccessCase **v2;
  int v4;
  uint64_t v5;
  JSC::AccessCase *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  __int16 v10;
  char v11;

  v2 = a1;
  if (a2 == 1)
    return JSC::AccessCase::hash(*a1);
  v4 = -1640531527;
  v10 = 0;
  v11 = 0;
  if (a2)
  {
    v5 = 8 * a2;
    do
    {
      v6 = *v2++;
      v7 = JSC::AccessCase::hash(v6);
      v8 = (v7 >> 5) & 0x7FFF800 ^ ((v4 + (unsigned __int16)v7) << 16) ^ (v4 + (unsigned __int16)v7);
      v4 = v8 + (v8 >> 11);
      v5 -= 8;
    }
    while (v5);
  }
  v9 = v4;
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v9);
}

uint64_t JSC::MarkingGCAwareJITStubRoutine::MarkingGCAwareJITStubRoutine(uint64_t a1, char a2, _QWORD *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint8x8_t v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  size_t v30;
  _DWORD *v31;
  WTF *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  JSC::CallLinkInfo *v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v49;
  uint64_t v50;
  JSC::CallLinkInfo **v51;
  uint64_t v52;
  JSC::CallLinkInfo *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v63;
  unsigned int v64;
  uint64_t i;
  unsigned int *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t j;
  unsigned int *v70;
  WTF *v72;
  _BYTE v73[128];
  WTF *v74;
  int v75;
  unsigned int v76;
  _BYTE v77[128];

  *(_QWORD *)a1 = *a3;
  v13 = (unsigned int *)a3[1];
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a7;
  *(_BYTE *)(a1 + 40) &= 0xC0u;
  *(_QWORD *)(a1 + 48) = a4;
  v15 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 56) = v15;
  v16 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 64) = v16;
  v17 = WTF::fastMalloc((WTF *)0x18);
  v24 = 0;
  *(_DWORD *)v17 = 1;
  *(_WORD *)(v17 + 4) = 1;
  *(_QWORD *)(v17 + 8) = v17 + 8;
  *(_QWORD *)(v17 + 16) = v17 + 8;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = v17;
  v25 = *(unsigned int *)(a8 + 12);
  if ((_DWORD)v25)
  {
    v24 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * v25 + 8));
    *v24 = v25;
    bzero(v24 + 2, 8 * v25);
  }
  *(_QWORD *)(a1 + 96) = v24;
  *(_QWORD *)(a1 + 104) = 0;
  v72 = (WTF *)v73;
  v26 = (uint8x8_t)16;
  v27 = *(_BYTE **)a9;
  if (*(_QWORD *)a9 == a9 + 16)
  {
    v28 = *(unsigned int *)(a9 + 12);
    memcpy(v73, v27, 8 * v28);
    v29 = 16;
    v27 = v73;
  }
  else
  {
    *(_QWORD *)a9 = a9 + 16;
    v72 = (WTF *)v27;
    v29 = *(_DWORD *)(a9 + 8);
    LODWORD(v28) = *(_DWORD *)(a9 + 12);
    *(_DWORD *)(a9 + 8) = 16;
  }
  *(_DWORD *)(a9 + 12) = 0;
  if ((_DWORD)v28)
  {
    v74 = (WTF *)v77;
    v75 = 16;
    if (v27 == v73)
    {
      v30 = 8 * v28;
      memcpy(v77, v73, v30);
    }
    else
    {
      v72 = (WTF *)v73;
      v74 = (WTF *)v27;
      v75 = v29;
      v30 = 8 * v28;
    }
    v76 = v28;
    v31 = (_DWORD *)WTF::fastMalloc((WTF *)(v30 + 8));
    v32 = v74;
    v33 = v76;
    *v31 = v28;
    if ((_DWORD)v33)
    {
      v34 = v31 + 2;
      v35 = 8 * v33;
      v36 = 8 * v33;
      do
      {
        v37 = *(_QWORD *)v32;
        *(_QWORD *)v32 = 0;
        v32 = (WTF *)((char *)v32 + 8);
        *v34++ = v37;
        v36 -= 8;
      }
      while (v36);
      v38 = v74;
      do
      {
        v39 = *(JSC::CallLinkInfo **)v38;
        *(_QWORD *)v38 = 0;
        if (v39)
        {
          JSC::CallLinkInfo::~CallLinkInfo(v39, v27, v18, v19, v20, v21, v22, v23, v26);
          WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
        }
        v38 = (WTF *)((char *)v38 + 8);
        v35 -= 8;
      }
      while (v35);
      v32 = v74;
    }
    if (v77 != (_BYTE *)v32 && v32 != 0)
    {
      v74 = 0;
      v75 = 0;
      WTF::fastFree((unint64_t)v32, v27, v18, v19, v20, v21, v22, v23);
    }
  }
  else
  {
    v31 = 0;
  }
  v49 = *(unsigned int **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v31;
  if (v49)
  {
    v51 = (JSC::CallLinkInfo **)(v49 + 2);
    v50 = *v49;
    if ((_DWORD)v50)
    {
      v52 = 8 * v50;
      do
      {
        v53 = *v51;
        *v51 = 0;
        if (v53)
        {
          JSC::CallLinkInfo::~CallLinkInfo(v53, v27, v18, v19, v20, v21, v22, v23, v26);
          WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
        }
        ++v51;
        v52 -= 8;
      }
      while (v52);
    }
    WTF::fastFree((unint64_t)v49, v27, v18, v19, v20, v21, v22, v23);
  }
  if (v73 != (_BYTE *)v72 && v72 != 0)
    WTF::fastFree((unint64_t)v72, v27, v18, v19, v20, v21, v22, v23);
  v63 = *(_DWORD *)(a8 + 12);
  if (v63)
  {
    if (a7)
    {
      v64 = v63 - 1;
      for (i = 2 * (v63 - 1); ; i -= 2)
      {
        v66 = *(unsigned int **)(a1 + 96);
        if (*v66 <= v64 || *(_DWORD *)(a8 + 12) <= v64)
          break;
        v67 = *(_QWORD *)(*(_QWORD *)a8 + i * 4);
        *(_QWORD *)&v66[i + 2] = v67;
        if (v67 && *(_DWORD *)(a4 + 760) >= *(unsigned __int8 *)(a7 + 7))
          JSC::Heap::writeBarrierSlowPath(a4 + 192, a7);
        if (--v64 == -1)
          return a1;
      }
    }
    else
    {
      v68 = v63 - 1;
      for (j = 2 * v68; ; j -= 2)
      {
        v70 = *(unsigned int **)(a1 + 96);
        if (*v70 <= v68)
          break;
        *(_QWORD *)&v70[j + 2] = *(_QWORD *)(*(_QWORD *)a8 + j * 4);
        if (--v68 == -1)
          return a1;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1986FBB2CLL);
  }
  return a1;
}

void JSC::MarkingGCAwareJITStubRoutine::markRequiredObjectsImpl(JSC::MarkingGCAwareJITStubRoutine *this, JSC::SlotVisitor *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;

  v9 = (unsigned int *)*((_QWORD *)this + 12);
  if (v9)
    v10 = (unint64_t *)(v9 + 2);
  else
    v10 = 0;
  if (v9)
    v11 = (uint64_t)&v9[2 * *v9 + 2];
  else
    v11 = 0;
  while (v10 != (unint64_t *)v11)
  {
    v12 = *v10;
    if (!*v10)
      goto LABEL_13;
    if ((v12 & 8) != 0)
    {
      if ((*(_BYTE *)(v12 - 79) & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      v13 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != v13)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000), v13, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v12 & 0xFFFFFFFFFFFFC000) + 8 * ((v12 >> 10) & 0xF) + 0x28) >> (v12 >> 4)) & 1) != 0)
      {
LABEL_12:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_13;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v12, 0, a4, a5, a6, a7, a8);
LABEL_13:
    ++v10;
  }
}

uint64_t JSC::MarkingGCAwareJITStubRoutine::visitWeakImpl(JSC::MarkingGCAwareJITStubRoutine *this, JSC::VM *a2)
{
  unsigned int *v3;
  JSC::CallLinkInfo **v4;
  uint64_t v5;

  v3 = (unsigned int *)*((_QWORD *)this + 13);
  if (v3)
    v4 = (JSC::CallLinkInfo **)(v3 + 2);
  else
    v4 = 0;
  if (v3)
    v5 = (uint64_t)&v3[2 * *v3 + 2];
  else
    v5 = 0;
  while (v4 != (JSC::CallLinkInfo **)v5)
  {
    if (*v4)
      JSC::CallLinkInfo::visitWeak(*v4, a2);
    ++v4;
  }
  return 1;
}

void JSC::GCAwareJITStubRoutineWithExceptionHandler::~GCAwareJITStubRoutineWithExceptionHandler(JSC::GCAwareJITStubRoutineWithExceptionHandler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v10;
  WTF *v11;

  v10 = *((_QWORD *)this + 15);
  if (v10)
  {
    JSC::DFG::CodeOriginPool::removeDisposableCallSiteIndex(v10, *((_DWORD *)this + 32), a3, a4, a5, a6, a7, a8);
    v11 = (WTF *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v11)
      WTF::ThreadSafeRefCounted<JSC::DFG::CodeOriginPool,(WTF::DestructionThread)0>::deref(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    *((_QWORD *)this + 15) = 0;
  }
  JSC::MarkingGCAwareJITStubRoutine::~MarkingGCAwareJITStubRoutine(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void JSC::MarkingGCAwareJITStubRoutine::~MarkingGCAwareJITStubRoutine(JSC::MarkingGCAwareJITStubRoutine *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  JSC::JITStubRoutine *v15;
  uint64_t v16;
  JSC::JITStubRoutine *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;

  v10 = (unsigned int *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v10)
  {
    v12 = (uint64_t **)(v10 + 2);
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v13 = &v12[v11];
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
        {
          v15 = (JSC::JITStubRoutine *)v14[7];
          if (v15)
          {
            v21 = *((unsigned int *)v15 + 11);
            if ((_DWORD)v21)
            {
              v22 = -24 * v21;
              do
              {
                *((_BYTE *)v15 + v22 + 19) = 1;
                v22 += 24;
              }
              while (v22);
            }
            v14[7] = 0;
            v23 = *((_DWORD *)v15 + 4) - 1;
            *((_DWORD *)v15 + 4) = v23;
            if (!v23)
              JSC::JITStubRoutine::observeZeroRefCount(v15, a2, a3, a4, a5, a6, a7, a8, a9);
          }
          v16 = v14[9];
          if ((v16 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
          v17 = (JSC::JITStubRoutine *)v14[7];
          v14[7] = 0;
          if (v17)
          {
            v18 = *((_DWORD *)v17 + 4) - 1;
            *((_DWORD *)v17 + 4) = v18;
            if (!v18)
              JSC::JITStubRoutine::observeZeroRefCount(v17, a2, a3, a4, a5, a6, a7, a8, a9);
          }
          v19 = (uint64_t *)v14[1];
          if (v19)
          {
            v20 = *v14;
            *v19 = *v14;
            *(_QWORD *)(v20 + 8) = v19;
            *v14 = 0;
            v14[1] = 0;
          }
          WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
        }
        ++v12;
      }
      while (v12 != v13);
    }
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v24 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v24)
    WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
  JSC::PolymorphicAccessJITStubRoutine::~PolymorphicAccessJITStubRoutine(this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::GCAwareJITStubRoutineWithExceptionHandler::observeZeroRefCountImpl(JSC::GCAwareJITStubRoutineWithExceptionHandler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  uint64_t v10;

  v10 = *((_QWORD *)this + 14);
  if (v10)
  {
    JSC::CodeBlock::removeExceptionHandlerForCallSite(v10, *((_DWORD *)this + 32));
    *((_QWORD *)this + 14) = 0;
  }
  JSC::PolymorphicAccessJITStubRoutine::observeZeroRefCountImpl(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::createICJITStubRoutine@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, int a11)
{
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t result;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;

  if ((a6 & 1) == 0)
  {
    v24 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v24 = *a1;
    v25 = (unsigned int *)a1[1];
    if (v25)
    {
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
    goto LABEL_11;
  }
  if (!a10)
  {
    v30 = *(unsigned int *)(a8 + 12);
    if ((_DWORD)v30)
    {
      v31 = *(_QWORD **)a8;
      v32 = 8 * v30;
      while (!*v31)
      {
        ++v31;
        v32 -= 8;
        if (!v32)
          goto LABEL_16;
      }
      goto LABEL_17;
    }
LABEL_16:
    if (*(_DWORD *)(a7 + 12))
    {
LABEL_17:
      v33 = WTF::fastMalloc((WTF *)0x70);
      v34 = JSC::MarkingGCAwareJITStubRoutine::MarkingGCAwareJITStubRoutine(v33, 4, a1, a4, a2, a3, a5, a7, a8);
      *(_BYTE *)(v34 + 40) &= ~0x10u;
      result = JSC::JITStubRoutineSet::add(*(_QWORD *)(a4 + 728), v33);
      *(_BYTE *)(v33 + 40) |= 8u;
      *a9 = v33;
      return result;
    }
    v24 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v24 = *a1;
    v25 = (unsigned int *)a1[1];
    if (v25)
    {
      do
        v35 = __ldaxr(v25);
      while (__stlxr(v35 + 1, v25));
    }
LABEL_11:
    *(_QWORD *)(v24 + 8) = v25;
    *(_QWORD *)(v24 + 16) = 1;
    *(_BYTE *)(v24 + 24) = 3;
    *(_QWORD *)(v24 + 32) = a5;
    *(_BYTE *)(v24 + 40) &= 0xC0u;
    *(_QWORD *)(v24 + 48) = a4;
    v27 = *a2;
    *a2 = 0;
    *(_QWORD *)(v24 + 56) = v27;
    v28 = *a3;
    *a3 = 0;
    *(_QWORD *)(v24 + 64) = v28;
    v29 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v29 = 1;
    *(_WORD *)(v29 + 4) = 1;
    *(_QWORD *)(v29 + 8) = v29 + 8;
    *(_QWORD *)(v29 + 16) = v29 + 8;
    *(_QWORD *)(v24 + 80) = 0;
    *(_QWORD *)(v24 + 88) = 0;
    *(_QWORD *)(v24 + 72) = v29;
    *a9 = v24;
    *(_BYTE *)(v24 + 40) &= ~0x10u;
    result = JSC::JITStubRoutineSet::add(*(_QWORD *)(a4 + 728), v24);
    *(_BYTE *)(v24 + 40) |= 8u;
    return result;
  }
  v19 = *(_QWORD *)(a10 + 120);
  if (!v19)
    goto LABEL_21;
  if ((*(_BYTE *)(v19 + 12) & 0xFE) != 4)
    goto LABEL_21;
  v20 = WTF::fastMalloc((WTF *)0x88);
  *(_QWORD *)(JSC::MarkingGCAwareJITStubRoutine::MarkingGCAwareJITStubRoutine(v20, 5, a1, a4, a2, a3, a5, a7, a8) + 112) = a10;
  v21 = *(unsigned int **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a10 + 120) + 72))(*(_QWORD *)(a10 + 120))
                         + 40);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  *(_QWORD *)(v20 + 120) = v21;
  *(_DWORD *)(v20 + 128) = a11;
  if (!*(_QWORD *)(v20 + 112))
  {
LABEL_21:
    __break(0xC471u);
    JUMPOUT(0x1986FC158);
  }
  *(_BYTE *)(v20 + 40) &= ~0x10u;
  result = JSC::JITStubRoutineSet::add(*(_QWORD *)(a4 + 728), v20);
  *(_BYTE *)(v20 + 40) |= 8u;
  *a9 = v20;
  return result;
}

uint64_t JSC::createPreCompiledICJITStubRoutine@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x60);
  v7 = (_QWORD *)v6;
  *(_QWORD *)v6 = *a1;
  v8 = (unsigned int *)a1[1];
  if (v8)
  {
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *(_QWORD *)(v6 + 8) = v8;
  *(_QWORD *)(v6 + 16) = 1;
  *(_BYTE *)(v6 + 24) = 3;
  *(_QWORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 40) &= 0xC0u;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 48) = a2;
  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)result = 1;
  *(_WORD *)(result + 4) = 1;
  *(_QWORD *)(result + 8) = result + 8;
  *(_QWORD *)(result + 16) = result + 8;
  v7[10] = 0;
  v7[11] = 0;
  v7[9] = result;
  *a3 = v7;
  return result;
}

uint64_t JSC::JSValueRegs::dump(JSC::JSValueRegs *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  char **v5;
  char *v6;
  char *v7;
  WTF::PrintStream *v8;
  WTF::PrintStream *v9;
  float v10;
  unsigned int v11;
  uint64_t v13;
  int v14;
  char v15;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v5 = &(&JSC::ARM64Assembler::gprName(JSC::ARM64Registers::RegisterID)::nameForRegister)[2 * *(char *)this];
  v6 = *v5;
  v7 = v5[1];
  v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  WTF::PrintStream::printf(v8, "%s", "%");
  v9 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 32))(v8);
  if (v6)
  {
    v11 = (_DWORD)v7 - 1;
    if (!v7)
      v11 = 0;
    WTF::StringImpl::utf8ForCharacters(v6, v11, (uint64_t)&v13, v10);
  }
  else
  {
    WTF::CString::CString(&v13, &str_25, 0);
    v14 = 0;
  }
  WTF::printExpectedCStringHelper(v9, "StringView", &v13);
  if (v14 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v14])(&v15, &v13);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v8 + 40))(v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::ICEvent::log(JSC::ICEvent *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  const void *v10;
  uint64_t v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  while (1)
  {
    v9 = (uint64_t *)atomic_load(&JSC::ICStats::s_instance);
    if (v9)
      break;
    v9 = (uint64_t *)WTF::fastMalloc((WTF *)0x20);
    JSC::ICStats::ICStats((JSC::ICStats *)v9);
    if (__ldaxr(&JSC::ICStats::s_instance))
    {
      __clrex();
    }
    else if (!__stlxr((unint64_t)v9, &JSC::ICStats::s_instance))
    {
      break;
    }
    JSC::ICStats::~ICStats((JSC::ICStats *)v9, v10, v11, a4, a5, a6, a7, a8);
    WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  v31 = 1;
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_10;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
LABEL_10:
  WTF::HashMap<JSC::ICEvent,unsigned long long,WTF::DefaultHash<JSC::ICEvent>,WTF::HashTraits<JSC::ICEvent>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>(v9 + 1, (int *)this, &v31, a4, a5, a6, a7, a8, (uint64_t)&v29);
  if (!v30)
    *(_QWORD *)(v29 + 32) += v31;
  v28 = __ldxr((unsigned __int8 *)v9);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_16;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_16:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v9, 0, v22, v23, v24, v25, v26, v27);
}

JSC::ICStats *JSC::ICStats::ICStats(JSC::ICStats *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count **v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count **v46;
  _QWORD *v47;
  unint64_t v48;

  *(_BYTE *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_DWORD *)((char *)this + 23) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3595840;
  v2[1] = this;
  v47 = v2;
  WTF::Thread::create((uint64_t)"JSC ICStats", 12, (uint64_t *)&v47, 1, 0, (uint64_t *)&v48);
  v10 = v48;
  v48 = 0;
  v11 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v10;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v19 = *(unsigned int **)(v11 + 96);
      *(_QWORD *)(v11 + 96) = 0;
      if (v19)
      {
        v20 = v19 + 2;
        do
        {
          v21 = __ldaxr(v20);
          v22 = v21 - 1;
        }
        while (__stlxr(v22, v20));
        if (!v22)
        {
          atomic_store(1u, v19 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v11 + 64), v3, v4, v5, v6, v7, v8, v9);
      v30 = *(_QWORD *)(v11 + 32);
      if (v30)
      {
        v31 = *(unsigned int *)(v30 - 4);
        if ((_DWORD)v31)
        {
          v32 = (std::__shared_weak_count **)(v30 + 16);
          do
          {
            if (*(v32 - 2) != (std::__shared_weak_count *)-1 && *v32)
              std::__shared_weak_count::__release_weak(*v32);
            v32 += 3;
            --v31;
          }
          while (v31);
        }
        WTF::fastFree(v30 - 16, v23, v24, v25, v26, v27, v28, v29);
      }
      WTF::fastFree(v11, v23, v24, v25, v26, v27, v28, v29);
    }
    v14 = v48;
    v48 = 0;
    if (v14)
    {
      do
      {
        v15 = __ldaxr((unsigned int *)v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)v14));
      if (!v16)
      {
        atomic_store(1u, (unsigned int *)v14);
        v33 = *(unsigned int **)(v14 + 96);
        *(_QWORD *)(v14 + 96) = 0;
        if (v33)
        {
          v34 = v33 + 2;
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v33 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
          }
        }
        WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v14 + 64), v3, v4, v5, v6, v7, v8, v9);
        v44 = *(_QWORD *)(v14 + 32);
        if (v44)
        {
          v45 = *(unsigned int *)(v44 - 4);
          if ((_DWORD)v45)
          {
            v46 = (std::__shared_weak_count **)(v44 + 16);
            do
            {
              if (*(v46 - 2) != (std::__shared_weak_count *)-1 && *v46)
                std::__shared_weak_count::__release_weak(*v46);
              v46 += 3;
              --v45;
            }
            while (v45);
          }
          WTF::fastFree(v44 - 16, v37, v38, v39, v40, v41, v42, v43);
        }
        WTF::fastFree(v14, v37, v38, v39, v40, v41, v42, v43);
      }
    }
  }
  v17 = (uint64_t)v47;
  v47 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return this;
}

void JSC::ICStats::~ICStats(JSC::ICStats *this, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  _opaque_pthread_t *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count **v57;

  v9 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 24);
LABEL_5:
  *((_BYTE *)this + 26) = 1;
  v11 = (unsigned __int8 *)this + 25;
  v12 = atomic_load((unsigned __int8 *)this + 25);
  if ((v12 & 1) != 0)
  {
    atomic_store(0, v11);
    WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  v13 = __ldxr(v9);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v9))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 2);
  v15 = (unint64_t *)(v14 + 8);
  if (__ldaxr((unint64_t *)(v14 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v15))
  {
    goto LABEL_16;
  }
  WTF::WordLock::lockSlow((WTF::WordLock *)(v14 + 8));
LABEL_16:
  v17 = *(_opaque_pthread_t **)(v14 + 40);
  v18 = __ldxr(v15);
  if (v18 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, v15))
LABEL_20:
    WTF::WordLock::unlockSlow((WTF::WordLock *)(v14 + 8));
  pthread_join(v17, 0);
  if (__ldaxr(v15))
  {
    __clrex();
  }
  else if (!__stxr(1uLL, v15))
  {
    goto LABEL_25;
  }
  WTF::WordLock::lockSlow((WTF::WordLock *)(v14 + 8));
LABEL_25:
  if ((*(_BYTE *)(v14 + 5) & 2) == 0)
    *(_BYTE *)(v14 + 4) = 1;
  v27 = __ldxr(v15);
  if (v27 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_32;
  }
  else
  {
    __clrex();
  }
  WTF::WordLock::unlockSlow((WTF::WordLock *)(v14 + 8));
LABEL_32:
  v28 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v28)
  {
    do
    {
      v29 = __ldaxr((unsigned int *)v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, (unsigned int *)v28));
    if (!v30)
    {
      atomic_store(1u, (unsigned int *)v28);
      v44 = *(unsigned int **)(v28 + 96);
      *(_QWORD *)(v28 + 96) = 0;
      if (v44)
      {
        v45 = v44 + 2;
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          atomic_store(1u, v44 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v28 + 64), v19, v20, v21, v22, v23, v24, v25);
      v55 = *(_QWORD *)(v28 + 32);
      if (v55)
      {
        v56 = *(unsigned int *)(v55 - 4);
        if ((_DWORD)v56)
        {
          v57 = (std::__shared_weak_count **)(v55 + 16);
          do
          {
            if (*(v57 - 2) != (std::__shared_weak_count *)-1 && *v57)
              std::__shared_weak_count::__release_weak(*v57);
            v57 += 3;
            --v56;
          }
          while (v56);
        }
        WTF::fastFree(v55 - 16, v48, v49, v50, v51, v52, v53, v54);
      }
      WTF::fastFree(v28, v48, v49, v50, v51, v52, v53, v54);
    }
  }
  v31 = *((_QWORD *)this + 1);
  if (v31)
  {
    v32 = *(unsigned int *)(v31 - 4);
    if ((_DWORD)v32)
    {
      v33 = (WTF::StringImpl **)(v31 + 16);
      do
      {
        v34 = *v33;
        if (*((_DWORD *)v33 - 4) == 9 && *(v33 - 1) == 0)
        {
          if (v34)
          {
            *v33 = 0;
LABEL_46:
            if (*(_DWORD *)v34 == 2)
            {
              WTF::StringImpl::~StringImpl(v34, (WTF::AtomStringImpl *)v19, v20, v21, v22, v23, v24, v25);
              WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
            }
            else
            {
              *(_DWORD *)v34 -= 2;
            }
          }
        }
        else
        {
          *v33 = 0;
          if (v34)
            goto LABEL_46;
        }
        v33 += 5;
        --v32;
      }
      while (v32);
    }
    WTF::fastFree(v31 - 16, v19, v20, v21, v22, v23, v24, v25);
  }
}

JSC::FixedVMPoolExecutableAllocator *JSC::FixedVMPoolExecutableAllocator::FixedVMPoolExecutableAllocator(JSC::FixedVMPoolExecutableAllocator *this)
{
  unsigned int **v2;
  _BOOL8 isJITEnabled;
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  mach_vm_address_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int *v264;
  __int16 v265;
  const void *v266[2];
  vm_prot_t cur_protection[2];
  mach_vm_address_t target_address;
  int v269;
  int v270;
  unsigned int v271[3];
  int v272;
  int v273;
  int v274;
  int v275;
  unsigned int v276[3];
  unsigned int v277[3];
  unsigned int *v278[28];
  unsigned int *v279[4];
  __int16 v280;
  _QWORD v281[17];
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;

  v284 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_WORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  v2 = (unsigned int **)((char *)this + 56);
  *(_OWORD *)((char *)this + 72) = 0u;
  v265 = 0;
  v264 = 0;
  isJITEnabled = JSC::isJITEnabled(this);
  if (!isJITEnabled)
  {
    v7 = 0;
    v9 = 0;
LABEL_17:
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = v7;
    *((_QWORD *)this + 3) = v9;
    *((_QWORD *)this + 4) = v264;
    *((_WORD *)this + 20) = v265;
    return this;
  }
  WTF::pageSize((WTF *)isJITEnabled);
  v4 = dword_1ECF4C258;
  if (dword_1ECF4C258)
  {
    if ((double)dword_1ECF4C258 * 0.25 < 262144.0)
      v4 = dword_1ECF4C258 + 0x40000;
  }
  else
  {
    v4 = 0x20000000;
  }
  v5 = (v4 + 0x3FFF) & 0x3FFFFC000;
  if (v5 <= 0x8000)
    v6 = 0x8000;
  else
    v6 = v5;
  if (!(v6 >> 28))
    dword_1EE342930 = 0;
  JSC::initializeJITPageReservation(void)::{lambda(unsigned long)#1}::operator()((uint64_t)v279, v6);
  v8 = v279[0];
  v7 = v279[1];
  v9 = v279[2];
  v264 = v279[3];
  v265 = v280;
  if (BYTE5(qword_1ECF4C780))
  {
    v277[0] = getpid();
    v279[0] = v7;
    v278[0] = (unsigned int *)((char *)v9 + (_QWORD)v7);
    v266[0] = JSC::initializeJITPageReservation;
    WTF::dataLog<int,char [38],WTF::RawPointer,char [4],WTF::RawPointer,char [16],WTF::RawPointer,char [2]>(v277, (const void **)v279, (const void **)v278, v266);
  }
  if (!v8)
    goto LABEL_17;
  if (!MEMORY[0x1E0C926A8])
  {
    byte_1ECF4C1E4 = 0;
LABEL_20:
    v11 = (uint64_t)(v7 + 4096);
    v6 -= 0x4000;
    *(_QWORD *)cur_protection = 0;
    target_address = 0;
    if (!mach_vm_remap(*MEMORY[0x1E0C83DA0], &target_address, v6, 0, 9, *MEMORY[0x1E0C83DA0], (mach_vm_address_t)(v7 + 4096), 0, &cur_protection[1], cur_protection, 1u))
    {
      v40 = target_address;
      JSC::MacroAssemblerARM64::MacroAssemblerARM64((JSC::MacroAssemblerARM64 *)v279);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v279, v40, 7, v41, v42, v43, v44, v45);
      JSC::MacroAssemblerARM64::add64(v279, 7, 0, v46, v47, v48, v49, v50);
      JSC::MacroAssemblerARM64::move(v279, 0, 3, v51, v52, v53, v54, v55);
      JSC::MacroAssemblerARM64::branch64((uint64_t)v279, 3, 2, 64, v56, v57, v58, v59, (uint64_t)v277);
      v67 = v283;
      if (v283 + 4 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v60, v61, v62, v63, v64, v65, v66);
        v67 = v283;
      }
      *(_DWORD *)(v281[0] + v67) = -1862238109;
      v283 += 4;
      JSC::MacroAssemblerARM64::and64((uint64_t)v279, -32, 3, 3);
      v75 = v283;
      if (v283 + 4 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v68, v69, v70, v71, v72, v73, v74);
        v75 = v283;
      }
      *(_DWORD *)(v281[0] + v75) = -1455410132;
      v76 = v283;
      v77 = v283 + 4;
      v283 += 4;
      if (v76 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v68, v69, v70, v71, v72, v73, v74);
        v77 = v283;
      }
      *(_DWORD *)(v281[0] + v77) = -1455342546;
      v283 += 4;
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v281, 3405774949, v69, v70, v71, v72, v73, v74);
      JSC::MacroAssemblerARM64::add64(v279, 5, 1, v78, v79, v80, v81, v82);
      v90 = v283;
      if (v283 + 4 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v83, v84, v85, v86, v87, v88, v89);
        v90 = v283;
      }
      *(_DWORD *)(v281[0] + v90) = -1455414232;
      v91 = v283;
      v92 = v283 + 4;
      v283 += 4;
      if (v91 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v83, v84, v85, v86, v87, v88, v89);
        v92 = v283;
      }
      *(_DWORD *)(v281[0] + v92) = -1455346646;
      v93 = v283;
      v94 = v283 + 4;
      v283 += 4;
      if (v93 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v83, v84, v85, v86, v87, v88, v89);
        v94 = v283;
      }
      *(_DWORD *)(v281[0] + v94) = -1862238175;
      v283 += 4;
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v281, 3406102594, v84, v85, v86, v87, v88, v89);
      v102 = v283;
      if (v283 + 4 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v95, v96, v97, v98, v99, v100, v101);
        v102 = v283;
      }
      *(_DWORD *)(v281[0] + v102) = -1459604468;
      v103 = v283;
      v104 = v283 + 4;
      v283 += 4;
      if (v103 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v95, v96, v97, v98, v99, v100, v101);
        v104 = v283;
      }
      *(_DWORD *)(v281[0] + v104) = -1459536882;
      v283 += 4;
      JSC::MacroAssemblerARM64::branchSub64((uint64_t)v276, (uint64_t)v279, 9, 64, v98, v99, v100, v101);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(v279, v105, v106, v107, v108, v109, v110, v111, &v275);
      v119 = v283;
      if (v283 + 4 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v112, v113, v114, v115, v116, v117, v118);
        v119 = v283;
      }
      *(_DWORD *)(v281[0] + v119) = -1476385688;
      v120 = v283;
      v121 = v283 + 4;
      v283 += 4;
      if (v120 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v112, v113, v114, v115, v116, v117, v118);
        v121 = v283;
      }
      *(_DWORD *)(v281[0] + v121) = -1476318102;
      v122 = v283;
      v123 = v283 + 4;
      v283 += 4;
      if (v122 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v112, v113, v114, v115, v116, v117, v118);
        v123 = v283;
      }
      *(_DWORD *)(v281[0] + v123) = -1862238109;
      v124 = v283;
      v125 = v283 + 4;
      v283 += 4;
      if (v124 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v112, v113, v114, v115, v116, v117, v118);
        v125 = v283;
      }
      *(_DWORD *)(v281[0] + v125) = -1472191448;
      v126 = v283;
      v127 = v283 + 4;
      v283 += 4;
      if (v126 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v112, v113, v114, v115, v116, v117, v118);
        v127 = v283;
      }
      *(_DWORD *)(v281[0] + v127) = -1472123862;
      v128 = v283;
      v129 = v283 + 4;
      v283 += 4;
      if (v128 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v112, v113, v114, v115, v116, v117, v118);
        v129 = v283;
      }
      *(_DWORD *)(v281[0] + v129) = -1862238175;
      v283 += 4;
      JSC::MacroAssemblerARM64::branchSub64((uint64_t)v278, (uint64_t)v279, 8, 32, v115, v116, v117, v118);
      v274 = v275;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v278, (unsigned int *)&v274, (uint64_t)v279, v130, v131, v132, v133, v134);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v276, (uint64_t)v279, v135, v136, v137, v138, v139, v140);
      JSC::MacroAssemblerARM64::add64(v279, 2, 1, v141, v142, v143, v144, v145);
      v153 = v283;
      if (v283 + 4 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v146, v147, v148, v149, v150, v151, v152);
        v153 = v283;
      }
      *(_DWORD *)(v281[0] + v153) = -1455410132;
      v154 = v283;
      v155 = v283 + 4;
      v283 += 4;
      if (v154 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v146, v147, v148, v149, v150, v151, v152);
        v155 = v283;
      }
      *(_DWORD *)(v281[0] + v155) = -1455342546;
      v156 = v283;
      v157 = v283 + 4;
      v283 += 4;
      if (v156 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v146, v147, v148, v149, v150, v151, v152);
        v157 = v283;
      }
      *(_DWORD *)(v281[0] + v157) = -1459608472;
      v158 = v283;
      v159 = v283 + 4;
      v283 += 4;
      if (v158 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v146, v147, v148, v149, v150, v151, v152);
        v159 = v283;
      }
      *(_DWORD *)(v281[0] + v159) = -1459540886;
      v283 += 4;
      JSC::MacroAssemblerARM64::add64(v279, 2, 3, v148, v149, v150, v151, v152);
      v167 = v283;
      if (v283 + 4 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v160, v161, v162, v163, v164, v165, v166);
        v167 = v283;
      }
      *(_DWORD *)(v281[0] + v167) = -1459473300;
      v168 = v283;
      v169 = v283 + 4;
      v283 += 4;
      if (v168 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v160, v161, v162, v163, v164, v165, v166);
        v169 = v283;
      }
      *(_DWORD *)(v281[0] + v169) = -1459405714;
      v283 += 4;
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v281, 3596551104, v161, v162, v163, v164, v165, v166);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(v279, v170, v171, v172, v173, v174, v175, v176, &v273);
      JSC::MacroAssemblerARM64::load64(v279, 0x800000001uLL, 6, v177, v178, v179, v180, v181);
      JSC::MacroAssemblerARM64::store64(v279, 6, 0x800000003uLL, v182, v183, v184, v185, v186);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v277, (uint64_t)v279, v187, v188, v189, v190, v191, v192);
      JSC::MacroAssemblerARM64::branchSub64((uint64_t)v278, (uint64_t)v279, 2, 8, v193, v194, v195, v196);
      v272 = v273;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v278, (unsigned int *)&v272, (uint64_t)v279, v197, v198, v199, v200, v201);
      JSC::MacroAssemblerARM64::branchAdd64((uint64_t)v271, (uint64_t)v279, v202, v203, v204, v205, v206, v207);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(v279, v208, v209, v210, v211, v212, v213, v214, &v270);
      v222 = v283;
      if (v283 + 4 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v215, v216, v217, v218, v219, v220, v221);
        v222 = v283;
      }
      *(_DWORD *)(v281[0] + v222) = 943723558;
      v223 = v283;
      v224 = v283 + 4;
      v283 += 4;
      if (v223 + 8 > v282)
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v281, v215, v216, v217, v218, v219, v220, v221);
        v224 = v283;
      }
      *(_DWORD *)(v281[0] + v224) = 939529318;
      v283 += 4;
      JSC::MacroAssemblerARM64::branchSub64((uint64_t)v278, (uint64_t)v279, 1, 1, v218, v219, v220, v221);
      v269 = v270;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v278, (unsigned int *)&v269, (uint64_t)v279, v225, v226, v227, v228, v229);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v271, (uint64_t)v279, v230, v231, v232, v233, v234, v235);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v281, 3596551104, v236, v237, v238, v239, v240, v241);
      JSC::LinkBuffer::LinkBuffer<(WTF::PtrTag)25031>((uint64_t)v278, (uint64_t)v279, (uint64_t)v7);
      JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v278, 0, 0, v266);
      JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v278, v242, v243, v244, v245, v246, v247, v248);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v279, v249, v250, v251, v252, v253, v254, v255);
      if (byte_1ECF4C1E4)
      {
        __break(0xC471u);
        JUMPOUT(0x1986FD530);
      }
      v256 = (unsigned int *)MEMORY[0x1E0C83DA0];
      if (MEMORY[0x19AEBC7EC](*MEMORY[0x1E0C83DA0], v7, 0x4000, 1, 4))
      {
        __break(0xC471u);
        JUMPOUT(0x1986FD550);
      }
      if (MEMORY[0x19AEBC7EC](*v256, v7 + 4096, v6, 1, 5))
      {
        __break(0xC471u);
        JUMPOUT(0x1986FD570);
      }
      if (MEMORY[0x19AEBC7EC](*v256, target_address, v6, 1, 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1986FD590);
      }
      memset_s(&target_address, 8uLL, 0, 8uLL);
      off_1ECF4C228 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v266[0];
      JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v266, v257, v258, v259, v260, v261, v262, v263);
    }
    if (byte_1ECF4C1E4)
    {
      __break(0xC471u);
      JUMPOUT(0x1986FD3B0);
    }
    goto LABEL_22;
  }
  v10 = be_memory_inline_jit_restrict_with_witness_supported();
  byte_1ECF4C1E4 = v10 != 0;
  if (!v10)
    goto LABEL_20;
  be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
  v11 = (uint64_t)v7;
  if (!byte_1ECF4C1E4)
    goto LABEL_20;
LABEL_22:
  qword_1ECF4C1F8 = v11;
  qword_1ECF4C200 = v11 + v6;
  g_config[0] = v11;
  *(_QWORD *)algn_1ECF4C008 = v11 + v6;
  v279[0] = (unsigned int *)getpid();
  WTF::UUID::createVersion5(0x9F4E325096B39F47, 0x325696C8E7CC11EELL, v279, 8u);
  kdebug_trace();
  *((_QWORD *)this + 1) = v8;
  *((_QWORD *)this + 2) = v7;
  *((_QWORD *)this + 3) = v9;
  *((_QWORD *)this + 4) = v264;
  *((_WORD *)this + 20) = v265;
  *((_QWORD *)this + 6) = 117440512;
  v13 = (((v6 + 117440511) >> 24) * (unsigned __int128)0x2492492492492493uLL) >> 64;
  WTF::FixedVector<JSC::FixedVMPoolExecutableAllocator::RegionAllocator>::createWithSizeAndConstructorArguments<JSC::FixedVMPoolExecutableAllocator&>(v278, v13, (uint64_t)this);
  v14 = v278[0];
  v278[0] = 0;
  v15 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v14;
  v279[0] = v15;
  WTF::FixedVector<JSC::FixedVMPoolExecutableAllocator::RegionAllocator>::~FixedVector(v279, v16, v17, v18, v19, v20, v21, v22);
  WTF::FixedVector<JSC::FixedVMPoolExecutableAllocator::RegionAllocator>::~FixedVector(v278, v23, v24, v25, v26, v27, v28, v29);
  v30 = 0;
  v31 = 0;
  v32 = (char *)qword_1ECF4C1F8;
  v33 = qword_1ECF4C200;
  v34 = v13 - 1;
  v35 = *((_QWORD *)this + 6);
  v36 = v13 << 6;
  v37 = (unint64_t)v34 << 6;
  do
  {
    v38 = (unint64_t)&v32[v35];
    v39 = (unint64_t)&v32[v35 - 0x1000000];
    if (v37 == v31)
    {
      if (v39 >= v33)
        v38 = v33;
      else
        v38 = (unint64_t)&v32[v35 - 0x1000000];
      v39 = v38;
    }
    else if (v38 > v33)
    {
      __break(0xC471u);
      JUMPOUT(0x1986FD350);
    }
    if (**v2 <= v30)
    {
      __break(0xC471u);
      JUMPOUT(0x1986FD370);
    }
    JSC::FixedVMPoolExecutableAllocator::RegionAllocator::configure((JSC::FixedVMPoolExecutableAllocator::RegionAllocator *)&(*v2)[v31 / 4 + 2], v32, v39, v38);
    if (**v2 <= v30)
    {
      __break(0xC471u);
      JUMPOUT(0x1986FD390);
    }
    *((_QWORD *)this + 9) += *(_QWORD *)&(*v2)[v31 / 4 + 10] - *(_QWORD *)&(*v2)[v31 / 4 + 8];
    v35 = *((_QWORD *)this + 6);
    v32 += v35;
    v31 += 64;
    ++v30;
  }
  while (v36 != v31);
  return this;
}

uint64_t JSC::initializeJITPageReservation@<X0>(JSC *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  mach_vm_address_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  const void *v235[2];
  vm_prot_t cur_protection[2];
  mach_vm_address_t target_address;
  int v238;
  int v239;
  unsigned int v240[3];
  int v241;
  int v242;
  int v243;
  int v244;
  unsigned int v245[3];
  unsigned int v246[3];
  const void *v247[28];
  _OWORD v248[2];
  __int16 v249;
  _QWORD v250[17];
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;

  v253 = *MEMORY[0x1E0C80C00];
  *(_WORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  result = JSC::isJITEnabled(this);
  if ((_DWORD)result)
  {
    WTF::pageSize((WTF *)result);
    v4 = dword_1ECF4C258;
    if (dword_1ECF4C258)
    {
      if ((double)dword_1ECF4C258 * 0.25 < 262144.0)
        v4 = dword_1ECF4C258 + 0x40000;
    }
    else
    {
      v4 = 0x20000000;
    }
    v5 = (v4 + 0x3FFF) & 0x3FFFFC000;
    if (v5 <= 0x8000)
      v6 = 0x8000;
    else
      v6 = v5;
    *(_QWORD *)(a2 + 48) = v6;
    if (!(v6 >> 28))
      dword_1EE342930 = 0;
    result = (uint64_t)JSC::initializeJITPageReservation(void)::{lambda(unsigned long)#1}::operator()((uint64_t)v248, v6);
    v7 = v248[1];
    *(_OWORD *)a2 = v248[0];
    *(_OWORD *)(a2 + 16) = v7;
    *(_WORD *)(a2 + 32) = v249;
    if (BYTE5(qword_1ECF4C780))
    {
      v246[0] = getpid();
      v234 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)&v248[0] = *(_QWORD *)(a2 + 8);
      v247[0] = (const void *)(*(_QWORD *)&v248[0] + v234);
      v235[0] = JSC::initializeJITPageReservation;
      result = WTF::dataLog<int,char [38],WTF::RawPointer,char [4],WTF::RawPointer,char [16],WTF::RawPointer,char [2]>(v246, (const void **)v248, v247, v235);
    }
    if (*(_QWORD *)a2)
    {
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 40) = v8;
      if (MEMORY[0x1E0C926A8])
      {
        v9 = be_memory_inline_jit_restrict_with_witness_supported();
        byte_1ECF4C1E4 = v9 != 0;
        if (v9)
        {
          be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
          if (byte_1ECF4C1E4)
          {
LABEL_19:
            qword_1ECF4C1F8 = v8;
            qword_1ECF4C200 = v8 + v6;
            g_config[0] = v8;
            *(_QWORD *)algn_1ECF4C008 = v8 + v6;
            *(_QWORD *)&v248[0] = getpid();
            WTF::UUID::createVersion5(0x9F4E325096B39F47, 0x325696C8E7CC11EELL, v248, 8u);
            return kdebug_trace();
          }
        }
      }
      else
      {
        byte_1ECF4C1E4 = 0;
      }
      v6 -= 0x4000;
      *(_QWORD *)(a2 + 40) = v8 + 0x4000;
      *(_QWORD *)(a2 + 48) = v6;
      *(_QWORD *)cur_protection = 0;
      target_address = 0;
      v10 = (unsigned int *)MEMORY[0x1E0C83DA0];
      if (!mach_vm_remap(*MEMORY[0x1E0C83DA0], &target_address, v6, 0, 9, *MEMORY[0x1E0C83DA0], v8 + 0x4000, 0, &cur_protection[1], cur_protection, 1u))
      {
        v11 = target_address;
        JSC::MacroAssemblerARM64::MacroAssemblerARM64((JSC::MacroAssemblerARM64 *)v248);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v248, v11, 7, v12, v13, v14, v15, v16);
        JSC::MacroAssemblerARM64::add64(v248, 7, 0, v17, v18, v19, v20, v21);
        JSC::MacroAssemblerARM64::move(v248, 0, 3, v22, v23, v24, v25, v26);
        JSC::MacroAssemblerARM64::branch64((uint64_t)v248, 3, 2, 64, v27, v28, v29, v30, (uint64_t)v246);
        v38 = v252;
        if (v252 + 4 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v31, v32, v33, v34, v35, v36, v37);
          v38 = v252;
        }
        *(_DWORD *)(v250[0] + v38) = -1862238109;
        v252 += 4;
        JSC::MacroAssemblerARM64::and64((uint64_t)v248, -32, 3, 3);
        v46 = v252;
        if (v252 + 4 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v39, v40, v41, v42, v43, v44, v45);
          v46 = v252;
        }
        *(_DWORD *)(v250[0] + v46) = -1455410132;
        v47 = v252;
        v48 = v252 + 4;
        v252 += 4;
        if (v47 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v39, v40, v41, v42, v43, v44, v45);
          v48 = v252;
        }
        *(_DWORD *)(v250[0] + v48) = -1455342546;
        v252 += 4;
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v250, 3405774949, v40, v41, v42, v43, v44, v45);
        JSC::MacroAssemblerARM64::add64(v248, 5, 1, v49, v50, v51, v52, v53);
        v61 = v252;
        if (v252 + 4 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v54, v55, v56, v57, v58, v59, v60);
          v61 = v252;
        }
        *(_DWORD *)(v250[0] + v61) = -1455414232;
        v62 = v252;
        v63 = v252 + 4;
        v252 += 4;
        if (v62 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v54, v55, v56, v57, v58, v59, v60);
          v63 = v252;
        }
        *(_DWORD *)(v250[0] + v63) = -1455346646;
        v64 = v252;
        v65 = v252 + 4;
        v252 += 4;
        if (v64 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v54, v55, v56, v57, v58, v59, v60);
          v65 = v252;
        }
        *(_DWORD *)(v250[0] + v65) = -1862238175;
        v252 += 4;
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v250, 3406102594, v55, v56, v57, v58, v59, v60);
        v73 = v252;
        if (v252 + 4 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v66, v67, v68, v69, v70, v71, v72);
          v73 = v252;
        }
        *(_DWORD *)(v250[0] + v73) = -1459604468;
        v74 = v252;
        v75 = v252 + 4;
        v252 += 4;
        if (v74 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v66, v67, v68, v69, v70, v71, v72);
          v75 = v252;
        }
        *(_DWORD *)(v250[0] + v75) = -1459536882;
        v252 += 4;
        JSC::MacroAssemblerARM64::branchSub64((uint64_t)v245, (uint64_t)v248, 9, 64, v69, v70, v71, v72);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(v248, v76, v77, v78, v79, v80, v81, v82, &v244);
        v90 = v252;
        if (v252 + 4 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v83, v84, v85, v86, v87, v88, v89);
          v90 = v252;
        }
        *(_DWORD *)(v250[0] + v90) = -1476385688;
        v91 = v252;
        v92 = v252 + 4;
        v252 += 4;
        if (v91 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v83, v84, v85, v86, v87, v88, v89);
          v92 = v252;
        }
        *(_DWORD *)(v250[0] + v92) = -1476318102;
        v93 = v252;
        v94 = v252 + 4;
        v252 += 4;
        if (v93 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v83, v84, v85, v86, v87, v88, v89);
          v94 = v252;
        }
        *(_DWORD *)(v250[0] + v94) = -1862238109;
        v95 = v252;
        v96 = v252 + 4;
        v252 += 4;
        if (v95 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v83, v84, v85, v86, v87, v88, v89);
          v96 = v252;
        }
        *(_DWORD *)(v250[0] + v96) = -1472191448;
        v97 = v252;
        v98 = v252 + 4;
        v252 += 4;
        if (v97 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v83, v84, v85, v86, v87, v88, v89);
          v98 = v252;
        }
        *(_DWORD *)(v250[0] + v98) = -1472123862;
        v99 = v252;
        v100 = v252 + 4;
        v252 += 4;
        if (v99 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v83, v84, v85, v86, v87, v88, v89);
          v100 = v252;
        }
        *(_DWORD *)(v250[0] + v100) = -1862238175;
        v252 += 4;
        JSC::MacroAssemblerARM64::branchSub64((uint64_t)v247, (uint64_t)v248, 8, 32, v86, v87, v88, v89);
        v243 = v244;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v247, (unsigned int *)&v243, (uint64_t)v248, v101, v102, v103, v104, v105);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v245, (uint64_t)v248, v106, v107, v108, v109, v110, v111);
        JSC::MacroAssemblerARM64::add64(v248, 2, 1, v112, v113, v114, v115, v116);
        v124 = v252;
        if (v252 + 4 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v117, v118, v119, v120, v121, v122, v123);
          v124 = v252;
        }
        *(_DWORD *)(v250[0] + v124) = -1455410132;
        v125 = v252;
        v126 = v252 + 4;
        v252 += 4;
        if (v125 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v117, v118, v119, v120, v121, v122, v123);
          v126 = v252;
        }
        *(_DWORD *)(v250[0] + v126) = -1455342546;
        v127 = v252;
        v128 = v252 + 4;
        v252 += 4;
        if (v127 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v117, v118, v119, v120, v121, v122, v123);
          v128 = v252;
        }
        *(_DWORD *)(v250[0] + v128) = -1459608472;
        v129 = v252;
        v130 = v252 + 4;
        v252 += 4;
        if (v129 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v117, v118, v119, v120, v121, v122, v123);
          v130 = v252;
        }
        *(_DWORD *)(v250[0] + v130) = -1459540886;
        v252 += 4;
        JSC::MacroAssemblerARM64::add64(v248, 2, 3, v119, v120, v121, v122, v123);
        v138 = v252;
        if (v252 + 4 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v131, v132, v133, v134, v135, v136, v137);
          v138 = v252;
        }
        *(_DWORD *)(v250[0] + v138) = -1459473300;
        v139 = v252;
        v140 = v252 + 4;
        v252 += 4;
        if (v139 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v131, v132, v133, v134, v135, v136, v137);
          v140 = v252;
        }
        *(_DWORD *)(v250[0] + v140) = -1459405714;
        v252 += 4;
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v250, 3596551104, v132, v133, v134, v135, v136, v137);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(v248, v141, v142, v143, v144, v145, v146, v147, &v242);
        JSC::MacroAssemblerARM64::load64(v248, 0x800000001uLL, 6, v148, v149, v150, v151, v152);
        JSC::MacroAssemblerARM64::store64(v248, 6, 0x800000003uLL, v153, v154, v155, v156, v157);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v246, (uint64_t)v248, v158, v159, v160, v161, v162, v163);
        JSC::MacroAssemblerARM64::branchSub64((uint64_t)v247, (uint64_t)v248, 2, 8, v164, v165, v166, v167);
        v241 = v242;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v247, (unsigned int *)&v241, (uint64_t)v248, v168, v169, v170, v171, v172);
        JSC::MacroAssemblerARM64::branchAdd64((uint64_t)v240, (uint64_t)v248, v173, v174, v175, v176, v177, v178);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label(v248, v179, v180, v181, v182, v183, v184, v185, &v239);
        v193 = v252;
        if (v252 + 4 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v186, v187, v188, v189, v190, v191, v192);
          v193 = v252;
        }
        *(_DWORD *)(v250[0] + v193) = 943723558;
        v194 = v252;
        v195 = v252 + 4;
        v252 += 4;
        if (v194 + 8 > v251)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v250, v186, v187, v188, v189, v190, v191, v192);
          v195 = v252;
        }
        *(_DWORD *)(v250[0] + v195) = 939529318;
        v252 += 4;
        JSC::MacroAssemblerARM64::branchSub64((uint64_t)v247, (uint64_t)v248, 1, 1, v189, v190, v191, v192);
        v238 = v239;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v247, (unsigned int *)&v238, (uint64_t)v248, v196, v197, v198, v199, v200);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v240, (uint64_t)v248, v201, v202, v203, v204, v205, v206);
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)v250, 3596551104, v207, v208, v209, v210, v211, v212);
        JSC::LinkBuffer::LinkBuffer<(WTF::PtrTag)25031>((uint64_t)v247, (uint64_t)v248, v8);
        JSC::LinkBuffer::finalizeCodeWithoutDisassembly<(WTF::PtrTag)26129>((uint64_t)v247, 0, 0, v235);
        JSC::LinkBuffer::~LinkBuffer((JSC::LinkBuffer *)v247, v213, v214, v215, v216, v217, v218, v219);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)v248, v220, v221, v222, v223, v224, v225, v226);
        if (byte_1ECF4C1E4)
        {
          __break(0xC471u);
          JUMPOUT(0x1986FE004);
        }
        if (MEMORY[0x19AEBC7EC](*v10, v8, 0x4000, 1, 4))
        {
          __break(0xC471u);
          JUMPOUT(0x1986FE024);
        }
        if (MEMORY[0x19AEBC7EC](*v10, v8 + 0x4000, v6, 1, 5))
        {
          __break(0xC471u);
          JUMPOUT(0x1986FE044);
        }
        if (MEMORY[0x19AEBC7EC](*v10, target_address, v6, 1, 3))
        {
          __break(0xC471u);
          JUMPOUT(0x1986FE064);
        }
        memset_s(&target_address, 8uLL, 0, 8uLL);
        off_1ECF4C228 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v235[0];
        JSC::MacroAssemblerCodeRef<(WTF::PtrTag)26129>::~MacroAssemblerCodeRef((uint64_t)v235, v227, v228, v229, v230, v231, v232, v233);
      }
      v8 += 0x4000;
      if (byte_1ECF4C1E4)
      {
        __break(0xC471u);
        JUMPOUT(0x1986FDE84);
      }
      goto LABEL_19;
    }
  }
  return result;
}

unsigned int **WTF::FixedVector<JSC::FixedVMPoolExecutableAllocator::RegionAllocator>::createWithSizeAndConstructorArguments<JSC::FixedVMPoolExecutableAllocator&>(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v25;
  unsigned int *v26;

  v6 = (unint64_t)a2 << 6;
  v7 = 2;
  v8 = (_DWORD *)WTF::fastMalloc((WTF *)(v6 | 8));
  *v8 = a2;
  do
  {
    v16 = &v8[v7];
    v16[1] = 0;
    v16[2] = 0;
    *v16 = a3;
    v16[6] = 0;
    v16[7] = 0;
    v7 += 16;
  }
  while (v16 + 8 != (_QWORD *)((char *)v8 + v6 + 8));
  v25 = 0;
  v26 = 0;
  *a1 = v8;
  WTF::FixedVector<JSC::FixedVMPoolExecutableAllocator::RegionAllocator>::~FixedVector(&v26, v9, v10, v11, v12, v13, v14, v15);
  return WTF::FixedVector<JSC::FixedVMPoolExecutableAllocator::RegionAllocator>::~FixedVector(&v25, v17, v18, v19, v20, v21, v22, v23);
}

unsigned int **WTF::FixedVector<JSC::FixedVMPoolExecutableAllocator::RegionAllocator>::~FixedVector(unsigned int **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *v9;
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      v12 = (unint64_t *)(v9 + 14);
      do
      {
        if (*v12)
          WTF::fastFree(*v12, a2, a3, a4, a5, a6, a7, a8);
        v12 += 8;
        v11 -= 64;
      }
      while (v11);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::FixedVMPoolExecutableAllocator::RegionAllocator::configure(JSC::FixedVMPoolExecutableAllocator::RegionAllocator *this, char *a2, unint64_t a3, unint64_t a4)
{
  BOOL v5;
  uint64_t v6;

  v5 = a3 > (unint64_t)a2;
  v6 = a3 - (_QWORD)a2;
  if (!v5)
    goto LABEL_9;
  if (a4 < a3)
  {
    __break(0xC471u);
    JUMPOUT(0x1986FE1D4);
  }
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = a3;
  *((_QWORD *)this + 5) = a4;
  if ((v6 & 0x3FFF) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1986FE1F4);
  }
  if ((((_WORD)a4 - (_WORD)a3) & 0x3FFF) != 0)
  {
LABEL_9:
    __break(0xC471u);
    JUMPOUT(0x1986FE1B4);
  }
  JSC::FixedVMPoolExecutableAllocator::Allocator::addFreshFreeSpace(this, a2, v6);
}

BOOL JSC::isJITEnabled(JSC *this)
{
  if (byte_1ECF4C1E1)
    return 0;
  if (WTF::processHasEntitlement("dynamic-codesigning"))
    return 1;
  return WTF::processHasEntitlement("com.apple.developer.cs.allow-jit");
}

char *JSC::initializeJITPageReservation(void)::{lambda(unsigned long)#1}::operator()(uint64_t a1, size_t a2)
{
  char *result;

  if (!BYTE1(qword_1ECF4C780))
    return (char *)WTF::PageReservation::tryReserveWithGuardPages(a1, a2);
  result = WTF::OSAllocator::tryReserveUncommitted(a2, 0x40000000, 1, 1, 1, 0);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 257;
  return result;
}

uint64_t WTF::dataLog<int,char [38],WTF::RawPointer,char [4],WTF::RawPointer,char [16],WTF::RawPointer,char [2]>(_DWORD *a1, const void **a2, const void **a3, const void **a4)
{
  unint64_t v8;
  uint64_t v9;
  WTF::PrintStream *v10;
  char v12;
  char **v13;
  char *v14;

  v8 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v8 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v9 = WTF::s_file;
  v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v10, "%d", *a1);
  WTF::PrintStream::printf(v10, "%s", ": Got executable pool reservation at ");
  WTF::PrintStream::printf(v10, "%p", *a2);
  WTF::PrintStream::printf(v10, "%s", "...");
  WTF::PrintStream::printf(v10, "%p", *a3);
  WTF::PrintStream::printf(v10, "%s", ", while I'm at ");
  WTF::PrintStream::printf(v10, "%p", *a4);
  WTF::PrintStream::printf(v10, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
}

WTF *WTF::PageReservation::tryReserveWithGuardPages(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  WTF *result;
  WTF *v6;

  v4 = WTF::pageSize((WTF *)a1);
  result = (WTF *)WTF::OSAllocator::tryReserveUncommitted(a2 + 2 * v4, 0x40000000, 1, 1, 0, 1);
  v6 = result;
  *(_QWORD *)a1 = result;
  if (result)
    result = (WTF *)WTF::pageSize(result);
  *(_QWORD *)(a1 + 8) = (char *)result + (_QWORD)v6;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 257;
  return result;
}

void JSC::MacroAssemblerARM64::branchSub64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  int v11;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  char v19;

  v8 = a3;
  v11 = ((a4 & 0xFFF) << 10) | 0xF1000042;
  v12 = (JSC::AssemblerBuffer *)(a2 + 56);
  v13 = *(_DWORD *)(a2 + 200);
  if (v13 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = v11;
  v14 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v14;
  if (*(_BYTE *)(a2 + 328))
  {
    while ((signed int)v14 < *(_DWORD *)(a2 + 52))
    {
      if (v14 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
        v14 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = -721215457;
      v14 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v14;
    }
    *(_DWORD *)(a2 + 208) = 0;
  }
  if (v14 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = v8 | 0x54000000;
  v15 = *(_DWORD *)(a2 + 200);
  v16 = v15 + 4;
  *(_DWORD *)(a2 + 200) = v15 + 4;
  v17 = v15 + 8;
  v18 = v15 + 4;
  if (v17 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v18) = -721215457;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v19 = -122;
  else
    v19 = -126;
  *(_DWORD *)a1 = v16;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 9) = v8;
  *(_WORD *)(a1 + 10) = -256;
}

uint64_t JSC::LinkBuffer::LinkBuffer<(WTF::PtrTag)25031>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0x4000;
  *(_QWORD *)(a1 + 16) = 0;
  JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>::AssemblerDataImpl(a1 + 24);
  *(_BYTE *)(a1 + 172) = 1;
  *(_DWORD *)(a1 + 176) = 8;
  *(_QWORD *)(a1 + 184) = a3;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 168) = 1;
  JSC::LinkBuffer::linkCode(a1, a2, 1, v6, v7, v8, v9, v10);
  return a1;
}

JSC::MacroAssemblerARM64 *JSC::MacroAssemblerARM64::MacroAssemblerARM64(JSC::MacroAssemblerARM64 *this)
{
  char *v2;
  unint64_t v3;
  pthread_key_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  char v17;
  char **v18;
  char *v19;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0x8000000080000000;
  v2 = (char *)this + 64;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_DWORD *)this + 48) = 128;
  v3 = atomic_load(&JSC::threadSpecificAssemblerData(void)::flag);
  if (v3 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&JSC::threadSpecificAssemblerData(void)::flag, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::threadSpecificAssemblerData(void)::$_0 &&>>);
  }
  v4 = (pthread_key_t *)JSC::threadSpecificAssemblerDataPtr;
  v12 = (uint64_t)pthread_getspecific(*(_QWORD *)JSC::threadSpecificAssemblerDataPtr);
  if (!v12)
  {
    v12 = WTF::fastMalloc((WTF *)0x98);
    WTF::ThreadSpecific<JSC::AssemblerDataImpl<(JSC::AssemblerDataType)0>,(WTF::CanBeGCThread)1>::Data::Data((_QWORD *)v12, v4);
  }
  v13 = *(_QWORD *)v12;
  if (*(_QWORD *)v12 != v12 + 8)
  {
    v14 = *(_DWORD *)(v12 + 136);
    if (*((_DWORD *)this + 48) < v14)
    {
      v15 = *((_QWORD *)this + 7);
      if (v15 && (char *)v15 != v2)
      {
        WTF::fastFree(v15, v5, v6, v7, v8, v9, v10, v11);
        v13 = *(_QWORD *)v12;
        v14 = *(_DWORD *)(v12 + 136);
      }
      *((_QWORD *)this + 7) = v13;
      *((_DWORD *)this + 48) = v14;
      *(_QWORD *)v12 = v12 + 8;
      *(_DWORD *)(v12 + 136) = 128;
    }
  }
  *((_DWORD *)this + 50) = 0;
  *((_BYTE *)this + 212) = 1;
  *((_DWORD *)this + 52) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 33) = this;
  *((_BYTE *)this + 272) = 16;
  *((_QWORD *)this + 35) = 0;
  *((_DWORD *)this + 72) = 0x10000;
  *((_QWORD *)this + 37) = this;
  *((_BYTE *)this + 304) = 17;
  *((_QWORD *)this + 39) = 0;
  *((_DWORD *)this + 80) = 0x20000;
  *((_BYTE *)this + 328) = 0;
  return this;
}

void JSC::FixedVMPoolExecutableAllocator::Allocator::addFreshFreeSpace(JSC::FixedVMPoolExecutableAllocator::Allocator *this, char *a2, uint64_t a3)
{
  if (*((_QWORD *)this + 1) || *((_QWORD *)this + 2))
  {
    __break(0xC471u);
    JUMPOUT(0x1986FE9A8);
  }
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = &a2[a3];
  jit_heap_add_fresh_memory((uint64_t)a2, (uint64_t)&a2[a3]);
}

_QWORD *JSC::FixedVMPoolExecutableAllocator::islandForJumpLocation(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  unint64_t *v12;
  int v13;
  unint64_t v14;
  BOOL v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _BOOL4 v23;
  _QWORD *v24;
  int v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  unsigned int *v57;
  _QWORD *v58;
  unint64_t v59;
  _QWORD *Island;
  _QWORD *i;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  char *v68;
  _QWORD v71[3];
  _QWORD *v72;
  char v73;
  _QWORD *v74;

  v9 = a3;
  v73 = a6;
  v12 = a1 + 8;
  v11 = a1[8];
  if (v11)
  {
    v13 = 129;
    do
    {
      if (!--v13)
      {
LABEL_108:
        __break(0xC471u);
        JUMPOUT(0x1986FEF80);
      }
      v14 = *(_QWORD *)(v11 + 24);
      v15 = v14 > a3;
      if (v14 == a3)
      {
        if ((a5 & 1) == 0)
          JSC::FixedVMPoolExecutableAllocator::freeJumpIslands((uint64_t)a1, v11, a3, a4, a5, a6, a7, a8);
        goto LABEL_66;
      }
      v16 = (uint64_t *)(v11 + 8);
      if (v15)
        v16 = (uint64_t *)v11;
      v11 = *v16;
    }
    while (*v16);
  }
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
  v11 = (uint64_t)v17;
  v17[4] = 0;
  v17[5] = 0;
  v17[3] = v9;
  v18 = 1;
  v17[2] = 1;
  v19 = v17 + 2;
  *v17 = 0;
  v17[1] = 0;
  v20 = *v12;
  v21 = v12;
  if (*v12)
  {
    v22 = *(_QWORD *)(v20 + 24);
    v15 = v22 > v9;
    v23 = v22 <= v9;
    v21 = (_QWORD *)(v20 + 8);
    if (v15)
      v21 = (_QWORD *)*v12;
    v24 = *(_QWORD **)(v20 + 8 * v23);
    if (v24)
    {
      v25 = 128;
      do
      {
        if (!--v25)
        {
          __break(0xC471u);
          JUMPOUT(0x1986FEFA0);
        }
        v20 = (unint64_t)v24;
        v26 = v24[3];
        v27 = v24 + 1;
        if (v26 <= v9)
          v21 = v27;
        else
          v21 = (_QWORD *)v20;
        v24 = (_QWORD *)*v21;
      }
      while (*v21);
    }
    v18 = v20 | 1;
  }
  *v21 = v17;
  v17[2] = v18;
  v28 = *v12;
  if ((_QWORD *)*v12 == v17)
  {
    v28 = (unint64_t)v17;
    goto LABEL_65;
  }
  v29 = v18 & 0xFFFFFFFFFFFFFFFELL;
  v30 = (unint64_t *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 16);
  v31 = *v30;
  if ((*v30 & 1) == 0)
    goto LABEL_61;
  v32 = 129;
  v28 = (unint64_t)v17;
  do
  {
    if (!--v32)
    {
      __break(0xC471u);
      JUMPOUT(0x1986FEFC0);
    }
    v33 = v31 & 0xFFFFFFFFFFFFFFFELL;
    v34 = *(_QWORD *)v33;
    if (*(_QWORD *)v33 == v29)
    {
      v34 = *(_QWORD *)(v33 + 8);
      if (v34 && (*(_BYTE *)(v34 + 16) & 1) != 0)
      {
LABEL_32:
        *v30 = v33;
        *(_QWORD *)(v34 + 16) &= ~1uLL;
        v37 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFFFELL) + 16) & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(v37 + 16) |= 1uLL;
        v28 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFFFELL) + 16) & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_58;
      }
      if (v28 == *(_QWORD *)(v29 + 8))
      {
        v49 = *(_QWORD *)v28;
        *(_QWORD *)(v29 + 8) = *(_QWORD *)v28;
        if (v49)
        {
          *(_QWORD *)(v49 + 16) = *(_QWORD *)(v49 + 16) & 1 | v29;
          v18 = *v19;
          v33 = *v30 & 0xFFFFFFFFFFFFFFFELL;
        }
        *v19 = v18 & 1 | v33;
        v50 = *v30;
        v51 = v12;
        v52 = (_QWORD *)(*v30 & 0xFFFFFFFFFFFFFFFELL);
        if (v52)
        {
          v51 = v52 + 1;
          if (*v52 == v29)
            v51 = (_QWORD *)(*v30 & 0xFFFFFFFFFFFFFFFELL);
        }
        *v51 = v28;
        *(_QWORD *)v28 = v29;
        *v30 = v50 & 1 | v28;
        v36 = v28 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v36 = v29;
        v29 = v28;
      }
      *(_QWORD *)(v36 + 16) &= ~1uLL;
      v53 = *(_QWORD *)((*(_QWORD *)(v29 + 16) & 0xFFFFFFFFFFFFFFFELL) + 16) & 0xFFFFFFFFFFFFFFFELL;
      *(_QWORD *)(v53 + 16) |= 1uLL;
      v43 = *(_QWORD *)((*(_QWORD *)(v29 + 16) & 0xFFFFFFFFFFFFFFFELL) + 16) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(unint64_t **)v43;
      v54 = *(_QWORD *)(*(_QWORD *)v43 + 8);
      *(_QWORD *)v43 = v54;
      if (v54)
        *(_QWORD *)(v54 + 16) = *(_QWORD *)(v54 + 16) & 1 | v43;
      v44[2] = *(_QWORD *)(v43 + 16) & 0xFFFFFFFFFFFFFFFELL | v44[2] & 1;
      v46 = *(_QWORD *)(v43 + 16);
      v55 = v12;
      v56 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL);
      if ((v46 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        v55 = v56 + 1;
        if (*v56 == v43)
          v55 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL);
      }
      *v55 = v44;
      v44[1] = v43;
    }
    else
    {
      if (v34 && (*(_BYTE *)(v34 + 16) & 1) != 0)
        goto LABEL_32;
      if (v28 == *(_QWORD *)v29)
      {
        v38 = *(_QWORD *)(v28 + 8);
        *(_QWORD *)v29 = v38;
        if (v38)
        {
          *(_QWORD *)(v38 + 16) = *(_QWORD *)(v38 + 16) & 1 | v29;
          v18 = *v19;
          v33 = *v30 & 0xFFFFFFFFFFFFFFFELL;
        }
        *v19 = v18 & 1 | v33;
        v39 = *v30;
        v40 = v12;
        v41 = (_QWORD *)(*v30 & 0xFFFFFFFFFFFFFFFELL);
        if (v41)
        {
          v40 = v41 + 1;
          if (*v41 == v29)
            v40 = (_QWORD *)(*v30 & 0xFFFFFFFFFFFFFFFELL);
        }
        *v40 = v28;
        *(_QWORD *)(v28 + 8) = v29;
        *v30 = v39 & 1 | v28;
        v35 = v28 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v35 = v29;
        v29 = v28;
      }
      *(_QWORD *)(v35 + 16) &= ~1uLL;
      v42 = *(_QWORD *)((*(_QWORD *)(v29 + 16) & 0xFFFFFFFFFFFFFFFELL) + 16) & 0xFFFFFFFFFFFFFFFELL;
      *(_QWORD *)(v42 + 16) |= 1uLL;
      v43 = *(_QWORD *)((*(_QWORD *)(v29 + 16) & 0xFFFFFFFFFFFFFFFELL) + 16) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(unint64_t **)(v43 + 8);
      v45 = *v44;
      *(_QWORD *)(v43 + 8) = *v44;
      if (v45)
        *(_QWORD *)(v45 + 16) = *(_QWORD *)(v45 + 16) & 1 | v43;
      v44[2] = *(_QWORD *)(v43 + 16) & 0xFFFFFFFFFFFFFFFELL | v44[2] & 1;
      v46 = *(_QWORD *)(v43 + 16);
      v47 = v12;
      v48 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL);
      if ((v46 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        v47 = v48 + 1;
        if (*v48 == v43)
          v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL);
      }
      *v47 = v44;
      *v44 = v43;
    }
    *(_QWORD *)(v43 + 16) = v46 & 1 | (unint64_t)v44;
    v28 = v29;
LABEL_58:
    if (v28 == *v12)
      goto LABEL_61;
    v19 = (uint64_t *)(v28 + 16);
    v18 = *(_QWORD *)(v28 + 16);
    v29 = v18 & 0xFFFFFFFFFFFFFFFELL;
    v30 = (unint64_t *)((v18 & 0xFFFFFFFFFFFFFFFELL) + 16);
    v31 = *v30;
  }
  while ((*v30 & 1) != 0);
  v28 = *v12;
LABEL_61:
  v18 = *(_QWORD *)(v28 + 16);
LABEL_65:
  *(_QWORD *)(v28 + 16) = v18 & 0xFFFFFFFFFFFFFFFELL;
LABEL_66:
  if (v9 > a4)
    v9 -= a1[6];
  v57 = (unsigned int *)a1[7];
  if (v57)
    v58 = v57 + 2;
  else
    v58 = 0;
  if (v57)
    v59 = (unint64_t)&v57[16 * (unint64_t)*v57 + 2];
  else
    v59 = 0;
  while (1)
  {
    if (v58 == (_QWORD *)v59)
      goto LABEL_108;
    if (v9 >= v58[3] && v9 < v58[5])
      break;
    v58 += 8;
  }
  Island = JSC::FixedVMPoolExecutableAllocator::RegionAllocator::allocateIsland(v58);
  v72 = Island;
  v74 = Island;
  for (i = Island; ; v72 = i)
  {
    v71[0] = i;
    v63 = *(unsigned int *)(v11 + 44);
    if ((_DWORD)v63 == *(_DWORD *)(v11 + 40))
      *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * *(unsigned int *)(v11 + 44)) = *(_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11 + 32, v63 + 1, (unint64_t)v71);
    else
      *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8 * v63) = i;
    ++*(_DWORD *)(v11 + 44);
    v71[0] = &v74;
    v71[1] = &v73;
    v71[2] = &v72;
    if (!((unint64_t)(((uint64_t)((uint64_t)v74 - a4) >> 2) + 0x2000000) >> 26))
      break;
    v64 = (unsigned int *)a1[7];
    if ((unint64_t)v74 <= a4)
      v65 = a1[6];
    else
      v65 = -a1[6];
    if (v64)
      v66 = v64 + 2;
    else
      v66 = 0;
    if (v64)
      v67 = (unint64_t)&v64[16 * (unint64_t)*v64 + 2];
    else
      v67 = 0;
    if (v66 == (_QWORD *)v67)
    {
LABEL_107:
      __break(0xC471u);
      JUMPOUT(0x1986FEFE0);
    }
    v68 = (char *)v74 + v65;
    while ((unint64_t)v68 < v66[3] || (unint64_t)v68 >= v66[5])
    {
      v66 += 8;
      if (v66 == (_QWORD *)v67)
        goto LABEL_107;
    }
    i = JSC::FixedVMPoolExecutableAllocator::RegionAllocator::allocateIsland(v66);
    JSC::FixedVMPoolExecutableAllocator::islandForJumpLocation(WTF::Locker<WTF::Lock,void> const&,unsigned long,unsigned long,BOOL,BOOL)::{lambda(void *)#1}::operator()((uint64_t)v71, (uint64_t)i);
    v74 = i;
  }
  JSC::FixedVMPoolExecutableAllocator::islandForJumpLocation(WTF::Locker<WTF::Lock,void> const&,unsigned long,unsigned long,BOOL,BOOL)::{lambda(void *)#1}::operator()((uint64_t)v71, a4);
  return Island;
}

void JSC::FixedVMPoolExecutableAllocator::freeJumpIslands(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v10)
  {
    v11 = *(unsigned int **)(a1 + 56);
    if (v11)
      v12 = v11 + 2;
    else
      v12 = 0;
    if (v11)
    {
      v13 = (unint64_t *)(v9 + 8 * v10);
      v14 = *(unint64_t **)(a2 + 32);
      while (1)
      {
        v15 = (unint64_t)&v11[16 * (unint64_t)*v11 + 2];
        if (v12 == (unsigned int *)v15)
          break;
        v16 = *v14;
        v17 = v12;
        while (1)
        {
          a3 = *((_QWORD *)v17 + 3);
          v18 = *((_QWORD *)v17 + 5);
          if (v16 >= a3 && v16 < v18)
            break;
          v17 += 16;
          if (v17 == (unsigned int *)v15)
            goto LABEL_27;
        }
        if (v16 < *((_QWORD *)v17 + 4))
          break;
        v20 = ((v18 - v16) >> 2) - 1;
        v21 = v20 >> 5;
        v22 = *((_QWORD *)v17 + 6);
        v23 = 1 << v20;
        v24 = *(_DWORD *)(v22 + 4 * v21);
        if ((v24 & v23) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1986FF118);
        }
        *(_DWORD *)(v22 + 4 * v21) = v24 & ~v23;
        if (++v14 == v13)
          goto LABEL_19;
      }
    }
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x1986FF0F8);
  }
LABEL_19:
  if (*(_DWORD *)(a2 + 40))
  {
    if (*(_DWORD *)(a2 + 44))
      *(_DWORD *)(a2 + 44) = 0;
    if (v9)
    {
      *(_QWORD *)(a2 + 32) = 0;
      *(_DWORD *)(a2 + 40) = 0;
      WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

_QWORD *JSC::FixedVMPoolExecutableAllocator::RegionAllocator::allocateIsland(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v1 = this;
  v2 = this[5];
  v3 = this[7];
  v4 = v3 + 31;
  v5 = (v3 + 31) >> 5;
  if (v3 + 31 < 0x20)
    goto LABEL_9;
  v6 = 0;
  v7 = (int *)this[6];
  v8 = (v3 + 31) >> 5;
  while (1)
  {
    v10 = *v7++;
    v9 = v10;
    if (v10 != -1)
    {
      v11 = __clz(__rbit32(~v9));
      if (v11 < 0x20)
        break;
    }
    v6 -= 32;
    if (!--v8)
      goto LABEL_9;
  }
  if (v11 - v3 == v6
    || (v12 = v11 - v6,
        *(_DWORD *)(this[6] + ((v12 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v11,
        v13 = v2 - 4 * v12,
        this = (_QWORD *)(v13 - 4),
        v13 == 4))
  {
LABEL_9:
    v14 = v2 - v1[4];
    if (v3 > v14 >> 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1986FF384);
    }
    v15 = v14 >> 2;
    if (v3 == v15)
      JSC::FixedVMPoolExecutableAllocator::RegionAllocator::crashOnJumpIslandExhaustion((JSC::FixedVMPoolExecutableAllocator::RegionAllocator *)this);
    if (v15 >= v3 + 4096)
      v16 = v3 + 4096;
    else
      v16 = v15;
    v17 = v16 + 31;
    if (((v16 + 31) ^ v4) >= 0x20)
    {
      v18 = v17 >> 5;
      if (v17 >> 5 < v4 >> 5)
        goto LABEL_33;
      v19 = (char *)WTF::fastMalloc((WTF *)(4 * v18));
      memcpy(v19, (const void *)v1[6], 4 * v5);
      bzero(&v19[4 * v5], 4 * (v18 - v5));
      v27 = v1[6];
      if (v27)
        WTF::fastFree(v27, v20, v21, v22, v23, v24, v25, v26);
      v1[6] = v19;
    }
    v1[7] = v16;
    v28 = v16 - v3;
    v29 = 4 * (v16 - v3);
    *(_QWORD *)(*v1 + 32) += 4 * v28;
    while (madvise((void *)(v2 - 4 * v16), v29, 8) == -1 && *__error() == 35)
      ;
    v30 = v1[7];
    if ((unint64_t)(v30 + 31) >= 0x20)
    {
      v31 = 0;
      v32 = (unint64_t)(v30 + 31) >> 5;
      v33 = (int *)v1[6];
      while (1)
      {
        v35 = *v33++;
        v34 = v35;
        if (v35 != -1)
        {
          v36 = __clz(__rbit32(~v34));
          if (v36 < 0x20)
            break;
        }
        v31 -= 32;
        if (!--v32)
          goto LABEL_33;
      }
      if (v36 - v30 != v31)
      {
        *(_DWORD *)(v1[6] + (((unint64_t)(v36 - v31) >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v36;
        v37 = v2 - 4 * (v36 - v31);
        this = (_QWORD *)(v37 - 4);
        if (v37 != 4)
          return this;
      }
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1986FF314);
  }
  return this;
}

void JSC::FixedVMPoolExecutableAllocator::islandForJumpLocation(WTF::Locker<WTF::Lock,void> const&,unsigned long,unsigned long,BOOL,BOOL)::{lambda(void *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  JSC **v2;
  JSC *v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;

  if ((unint64_t)(((**(_QWORD **)a1 - a2) >> 2) + 0x2000000) >> 26)
  {
    __break(0xC471u);
    JUMPOUT(0x1986FF558);
  }
  v2 = *(JSC ***)(a1 + 16);
  v3 = *v2;
  v4 = ((unint64_t)*v2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (!**(_BYTE **)(a1 + 8))
  {
    if (*v2 != (JSC *)v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1986FF598);
    }
    v5 = ((a2 - (_DWORD)v3) >> 2) & 0x3FFFFFF | 0x14000000;
    v7 = v5;
    if (qword_1ECF4C1F8 <= (unint64_t)v3 && qword_1ECF4C200 > (unint64_t)v3)
    {
      if ((unint64_t)&v7 - qword_1ECF4C028 < qword_1ECF4C030)
      {
        __break(0xC471u);
        JUMPOUT(0x1986FF5B8);
      }
      if (!qword_1ECF4C1F0 || (unint64_t)v3 + 4 > qword_1ECF4C200)
      {
        __break(0xC471u);
        JUMPOUT(0x1986FF5D8);
      }
      if (qword_1ECF4C748)
        JSC::dumpJITMemory(v3, &v7, (char *)4);
      if (byte_1ECF4C1E4)
      {
        be_memory_inline_jit_restrict_rwx_to_rw_with_witness_impl();
        *(_DWORD *)v3 = v7;
        be_memory_inline_jit_restrict_rwx_to_rx_with_witness_impl();
LABEL_25:
        sys_icache_invalidate(v3, 4uLL);
        return;
      }
      if (off_1ECF4C228)
      {
        if (qword_1ECF4C1F0)
          v6 = qword_1ECF4C1F8;
        else
          v6 = 0;
        ((void (*)(char *, unsigned int *, uint64_t))off_1ECF4C228)((char *)v3 - v6, &v7, 4);
        if ((unint64_t)&v7 - qword_1ECF4C028 < qword_1ECF4C030)
        {
          __break(0xC471u);
          JUMPOUT(0x1986FF510);
        }
        goto LABEL_25;
      }
      v5 = v7;
    }
    *(_DWORD *)v3 = v5;
    goto LABEL_25;
  }
  if (*v2 != (JSC *)v4)
  {
    __break(0xC471u);
    JUMPOUT(0x1986FF578);
  }
  *(_DWORD *)v3 = ((a2 - (_DWORD)v3) >> 2) & 0x3FFFFFF | 0x14000000;
  sys_icache_invalidate(v3, 4uLL);
}

ssize_t JSC::dumpJITMemory(void const*,void const*,unsigned long)::DumpJIT::flush()
{
  int v0;
  _BYTE *v1;
  size_t v2;
  size_t v3;
  int *v4;
  _BYTE *v5;
  unint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  float v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  const char *v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF::StringImpl *v36;
  ssize_t result;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF *v54;
  WTF::StringImpl *v55;

  v0 = JSC::dumpJITMemory(void const*,void const*,unsigned long)::fd;
  if (JSC::dumpJITMemory(void const*,void const*,unsigned long)::fd != -1)
    goto LABEL_32;
  v1 = (_BYTE *)qword_1ECF4C748;
  if (qword_1ECF4C748)
  {
    v2 = strlen((const char *)qword_1ECF4C748);
    if (v2)
    {
      v3 = v2;
      if (v2 >> 31)
      {
        __break(0xC471u);
LABEL_38:
        JUMPOUT(0x1986FF82CLL);
      }
      v4 = (int *)WTF::fastCompactMalloc((WTF *)(v2 + 20));
      v5 = v4 + 5;
      *v4 = 2;
      v4[1] = v3;
      *((_QWORD *)v4 + 1) = v4 + 5;
      v4[4] = 4;
      if (v3 == 1)
        *v5 = *v1;
      else
        memcpy(v5, v1, v3);
    }
    else
    {
      v4 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
  }
  else
  {
    v4 = 0;
  }
  v55 = (WTF::StringImpl *)v4;
  v6 = getpid();
  WTF::String::number(v6, (uint64_t *)&v54);
  if (v54)
  {
    v15 = (_BYTE *)*((_QWORD *)v54 + 1);
    v16 = *((unsigned int *)v54 + 1) | ((unint64_t)((*((_DWORD *)v54 + 4) >> 2) & 1) << 32);
    if (v4)
      goto LABEL_12;
LABEL_16:
    v55 = 0;
    goto LABEL_17;
  }
  v15 = 0;
  v16 = 0x100000000;
  if (!v4)
    goto LABEL_16;
LABEL_12:
  WTF::StringImpl::replace((uint16x8_t *)v4, (uint64_t)"%pid", (void *)0x100000004, v15, v16, (int **)&v55, v12, v13, v14);
  if (*v4 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v4, v7, v8, (uint64_t)v15, v16, v9, v10, v11);
    WTF::fastFree(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  else
  {
    *v4 -= 2;
  }
LABEL_17:
  v25 = v54;
  v54 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v7, v8, (uint64_t)v15, v16, v9, v10, v11);
      WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  WTF::FileSystemImpl::fileSystemRepresentation(&v55, (uint64_t *)&v54);
  if (v54)
    v26 = (char *)v54 + 16;
  else
    v26 = 0;
  v27 = open(v26, 1581, 438);
  JSC::dumpJITMemory(void const*,void const*,unsigned long)::fd = v27;
  v35 = v54;
  v54 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 1)
      WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
    else
      --*(_DWORD *)v35;
    v27 = JSC::dumpJITMemory(void const*,void const*,unsigned long)::fd;
  }
  if (v27 == -1)
  {
    __break(0xC471u);
    goto LABEL_38;
  }
  v36 = v55;
  v55 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::~StringImpl(v36, (WTF::AtomStringImpl *)v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
    }
    else
    {
      *(_DWORD *)v36 -= 2;
    }
  }
  v0 = JSC::dumpJITMemory(void const*,void const*,unsigned long)::fd;
LABEL_32:
  result = write(v0, (const void *)qword_1ECF588B0, qword_1ECF588B8);
  qword_1ECF588B8 = 0;
  byte_1ECF588A9 = 0;
  return result;
}

void WTF::Detail::CallableWrapper<JSC::dumpJITMemory(void const*,void const*,unsigned long)::DumpJIT::enqueueFlush(void)::{lambda(void)#1},void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_38))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_38))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&_MergedGlobals_38);
LABEL_5:
  if (byte_1ECF588A9 == 1)
    JSC::dumpJITMemory(void const*,void const*,unsigned long)::DumpJIT::flush();
  v9 = __ldxr((unsigned __int8 *)&_MergedGlobals_38);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, (unsigned __int8 *)&_MergedGlobals_38))
LABEL_11:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&_MergedGlobals_38, 0, a3, a4, a5, a6, a7, a8);
}

void std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,WTF::HashMap<unsigned long,WTF::String,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,WTF::HashMap<unsigned long,WTF::String,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,std::less<unsigned long>,true>,WTF::FastAllocator<std::__value_type<unsigned long,std::pair<unsigned long,WTF::HashMap<unsigned long,WTF::String,WTF::DefaultHash<unsigned long>,WTF::HashTraits<unsigned long>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t *v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = a2;
    do
    {
      v4 = (uint64_t *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v7, a2);
  v15 = a2[6];
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    if ((_DWORD)v16)
    {
      v17 = (WTF::StringImpl **)(v15 + 8);
      do
      {
        if (*(v17 - 1) != (WTF::StringImpl *)-1)
        {
          v18 = *v17;
          *v17 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
            {
              WTF::StringImpl::~StringImpl(v18, v8, v9, v10, v11, v12, v13, v14);
              WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
            }
            else
            {
              *(_DWORD *)v18 -= 2;
            }
          }
        }
        v17 += 2;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree(v15 - 16, v8, v9, v10, v11, v12, v13, v14);
  }
  WTF::fastFree((unint64_t)a2, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t *std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void JSC::FixedVMPoolExecutableAllocator::handleWillBeReleased(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  unint64_t v17;
  int v19;
  char *v20;
  uint64_t v21;
  int v22;
  char *v23;
  uint64_t v24;
  char *v25;
  WTF *v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  WTF *v47;
  uint64_t v48;
  _BYTE v49[128];
  WTF *v50;
  uint64_t v51;
  _QWORD v52[16];
  _QWORD *v53;

  v9 = (unint64_t *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
  {
    v47 = (WTF *)v49;
    v48 = 16;
    v12 = a3 + a2;
    v50 = (WTF *)v52;
    v52[0] = v8;
    v51 = 0x100000010;
    v13 = 1;
    v14 = -1;
    v15 = 1;
    do
    {
      if (!--v14)
      {
LABEL_67:
        __break(0xC471u);
        JUMPOUT(0x1987000D0);
      }
      v16 = (_QWORD *)*((_QWORD *)v50 + v13 - 1);
      HIDWORD(v51) = v15 - 1;
      v17 = v16[3];
      if (v17 >= a3 && v17 < v12)
      {
        v53 = v16;
        v19 = HIDWORD(v48);
        if (HIDWORD(v48) == (_DWORD)v48)
        {
          v20 = WTF::Vector<JSC::B3::Air::StackSlot *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v47, HIDWORD(v48) + 1, (unint64_t)&v53);
          v19 = HIDWORD(v48);
          *((_QWORD *)v47 + HIDWORD(v48)) = *(_QWORD *)v20;
        }
        else
        {
          *((_QWORD *)v47 + HIDWORD(v48)) = v16;
        }
        HIDWORD(v48) = v19 + 1;
        v17 = v16[3];
      }
      if (v17 > a3)
      {
        v21 = *v16;
        if (*v16)
        {
          v53 = (_QWORD *)*v16;
          v22 = HIDWORD(v51);
          if (HIDWORD(v51) == (_DWORD)v51)
          {
            v23 = WTF::Vector<JSC::B3::Air::StackSlot *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v50, HIDWORD(v51) + 1, (unint64_t)&v53);
            v22 = HIDWORD(v51);
            *((_QWORD *)v50 + HIDWORD(v51)) = *(_QWORD *)v23;
          }
          else
          {
            *((_QWORD *)v50 + HIDWORD(v51)) = v21;
          }
          HIDWORD(v51) = v22 + 1;
        }
      }
      if (v17 >= v12)
      {
        v15 = HIDWORD(v51);
      }
      else
      {
        v24 = v16[1];
        v15 = HIDWORD(v51);
        if (v24)
        {
          v53 = (_QWORD *)v16[1];
          if (HIDWORD(v51) == (_DWORD)v51)
          {
            v25 = WTF::Vector<JSC::B3::Air::StackSlot *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v50, HIDWORD(v51) + 1, (unint64_t)&v53);
            v15 = HIDWORD(v51);
            *((_QWORD *)v50 + HIDWORD(v51)) = *(_QWORD *)v25;
          }
          else
          {
            *((_QWORD *)v50 + HIDWORD(v51)) = v24;
          }
          HIDWORD(v51) = ++v15;
        }
      }
      v13 = v15;
    }
    while (v15);
    v26 = v50;
    if (v52 != (_QWORD *)v50 && v50)
    {
      v50 = 0;
      LODWORD(v51) = 0;
      WTF::fastFree((unint64_t)v26, a2, a3, a4, a5, a6, a7, a8);
    }
    v27 = (uint64_t *)v47;
    if (HIDWORD(v48))
    {
      v28 = (uint64_t *)((char *)v47 + 8 * HIDWORD(v48));
      while (1)
      {
        v29 = *v27;
        JSC::FixedVMPoolExecutableAllocator::freeJumpIslands(a1, *v27, a3, a4, a5, a6, a7, a8);
        v35 = *(_QWORD **)v29;
        v36 = v29;
        if (*(_QWORD *)v29)
        {
          v36 = *(_QWORD *)(v29 + 8);
          if (!v36)
          {
            v36 = v29;
            goto LABEL_40;
          }
          v37 = 129;
          while (*(_QWORD *)v36)
          {
            v36 = *(_QWORD *)v36;
            if (!--v37)
              goto LABEL_67;
          }
        }
        v35 = *(_QWORD **)(v36 + 8);
        if (!v35)
        {
          v38 = *(_QWORD *)(v36 + 16);
          v39 = (unint64_t *)(v38 & 0xFFFFFFFFFFFFFFFELL);
          v40 = v38 & 0xFFFFFFFFFFFFFFFELL;
          goto LABEL_41;
        }
LABEL_40:
        v40 = *(_QWORD *)(v36 + 16) & 0xFFFFFFFFFFFFFFFELL;
        v35[2] = v40 | v35[2] & 1;
        v38 = *(_QWORD *)(v36 + 16);
        v39 = (unint64_t *)(v38 & 0xFFFFFFFFFFFFFFFELL);
LABEL_41:
        v41 = v9;
        if (v39)
        {
          v41 = v39 + 1;
          if (v36 == *v39)
            v41 = v39;
        }
        *v41 = (unint64_t)v35;
        if (v36 == v29)
        {
          if ((v38 & 1) == 0)
            WTF::RedBlackTree<JSC::FixedVMPoolExecutableAllocator::Islands,void *>::removeFixup((uint64_t)v9, (unint64_t)v35, v40);
        }
        else
        {
          if ((v38 & 1) != 0)
          {
            v42 = 1;
          }
          else
          {
            WTF::RedBlackTree<JSC::FixedVMPoolExecutableAllocator::Islands,void *>::removeFixup((uint64_t)v9, (unint64_t)v35, v40);
            v42 = *(_QWORD *)(v36 + 16) & 1;
          }
          v43 = *(_QWORD *)(v29 + 16) & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)(v36 + 16) = v43 | v42;
          *(_QWORD *)(v36 + 16) = v43 | *(_QWORD *)(v29 + 16) & 1;
          *(_OWORD *)v36 = *(_OWORD *)v29;
          if (*(_QWORD *)v29)
            *(_QWORD *)(*(_QWORD *)v29 + 16) = *(_QWORD *)(*(_QWORD *)v29 + 16) & 1 | v36;
          v44 = *(_QWORD *)(v29 + 8);
          if (v44)
            *(_QWORD *)(v44 + 16) = *(_QWORD *)(v44 + 16) & 1 | v36;
          v45 = (_QWORD *)(*(_QWORD *)(v29 + 16) & 0xFFFFFFFFFFFFFFFELL);
          if (v45)
          {
            if (*v45 == v29)
              *v45 = v36;
            else
              v45[1] = v36;
          }
          else
          {
            *v9 = v36;
          }
        }
        v46 = *(_QWORD *)(v29 + 32);
        if (v46)
        {
          *(_QWORD *)(v29 + 32) = 0;
          *(_DWORD *)(v29 + 40) = 0;
          WTF::fastFree(v46, v35, v40, v30, v31, v32, v33, v34);
        }
        WTF::fastFree(v29, v35, v40, v30, v31, v32, v33, v34);
        if (++v27 == v28)
        {
          v27 = (uint64_t *)v47;
          break;
        }
      }
    }
    if (v49 != (_BYTE *)v27 && v27)
    {
      v47 = 0;
      LODWORD(v48) = 0;
      WTF::fastFree((unint64_t)v27, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t WTF::RedBlackTree<JSC::FixedVMPoolExecutableAllocator::Islands,void *>::removeFixup(uint64_t result, unint64_t a2, unint64_t a3)
{
  int v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;

  if (*(_QWORD *)result != a2)
  {
    v3 = 129;
    while (1)
    {
      if (a2)
      {
        v4 = *(_QWORD *)(a2 + 16);
        if ((v4 & 1) != 0)
          goto LABEL_71;
      }
      if (!--v3)
      {
        result = 537;
        __break(0xC471u);
        return result;
      }
      v5 = *(unint64_t **)a3;
      if (a2 == *(_QWORD *)a3)
      {
        v5 = *(unint64_t **)(a3 + 8);
        v15 = v5[2];
        if ((v15 & 1) != 0)
        {
          v5[2] = v15 & 0xFFFFFFFFFFFFFFFELL;
          v16 = *(_QWORD *)(a3 + 16) | 1;
          v17 = *v5;
          *(_QWORD *)(a3 + 8) = *v5;
          *(_QWORD *)(a3 + 16) = v16;
          if (v17)
          {
            *(_QWORD *)(v17 + 16) = *(_QWORD *)(v17 + 16) & 1 | a3;
            v16 = *(_QWORD *)(a3 + 16);
          }
          v5[2] = v16 & 0xFFFFFFFFFFFFFFFELL | v5[2] & 1;
          v18 = *(_QWORD *)(a3 + 16);
          v19 = (_QWORD *)result;
          v20 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
          if ((v18 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            v19 = v20 + 1;
            if (*v20 == a3)
              v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
          }
          *v19 = v5;
          *v5 = a3;
          *(_QWORD *)(a3 + 16) = v18 & 1 | (unint64_t)v5;
          v5 = *(unint64_t **)(a3 + 8);
        }
        v21 = *v5;
        if (*v5)
        {
          v22 = *(_QWORD *)(v21 + 16);
          if ((v22 & 1) != 0)
          {
            v23 = v5[1];
            if (!v23)
              goto LABEL_52;
            v24 = *(_QWORD *)(v23 + 16);
LABEL_50:
            if ((v24 & 1) == 0)
            {
              v22 = *(_QWORD *)(v21 + 16);
LABEL_52:
              *(_QWORD *)(v21 + 16) = v22 & 0xFFFFFFFFFFFFFFFELL;
              v34 = v5[2] | 1;
              v5[2] = v34;
              v35 = *(_QWORD *)(v21 + 8);
              *v5 = v35;
              if (v35)
              {
                *(_QWORD *)(v35 + 16) = *(_QWORD *)(v35 + 16) & 1 | (unint64_t)v5;
                v34 = v5[2];
              }
              *(_QWORD *)(v21 + 16) = v34 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v21 + 16) & 1;
              v36 = v5[2];
              v37 = (_QWORD *)result;
              v38 = (_QWORD *)(v36 & 0xFFFFFFFFFFFFFFFELL);
              if ((v36 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v37 = v38 + 1;
                if ((unint64_t *)*v38 == v5)
                  v37 = (_QWORD *)(v36 & 0xFFFFFFFFFFFFFFFELL);
              }
              *v37 = v21;
              *(_QWORD *)(v21 + 8) = v5;
              v5[2] = v36 & 1 | v21;
              v5 = *(unint64_t **)(a3 + 8);
              v23 = v5[1];
            }
            v5[2] = v5[2] & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(a3 + 16) & 1;
            *(_QWORD *)(a3 + 16) &= ~1uLL;
            if (v23)
              *(_QWORD *)(v23 + 16) &= ~1uLL;
            v39 = *v5;
            *(_QWORD *)(a3 + 8) = *v5;
            if (v39)
              *(_QWORD *)(v39 + 16) = *(_QWORD *)(v39 + 16) & 1 | a3;
            v5[2] = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFFELL | v5[2] & 1;
            v31 = *(_QWORD *)(a3 + 16);
            v40 = (_QWORD *)result;
            v41 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFFELL);
            if ((v31 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              v40 = v41 + 1;
              if (*v41 == a3)
                v40 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFFELL);
            }
            *v40 = v5;
            *v5 = a3;
LABEL_66:
            *(_QWORD *)(a3 + 16) = v31 & 1 | (unint64_t)v5;
            a2 = *(_QWORD *)result;
            goto LABEL_67;
          }
        }
        v23 = v5[1];
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 16);
          if ((v24 & 1) != 0)
            goto LABEL_50;
        }
      }
      else
      {
        v6 = v5[2];
        if ((v6 & 1) != 0)
        {
          v5[2] = v6 & 0xFFFFFFFFFFFFFFFELL;
          v7 = *(_QWORD *)(a3 + 16) | 1;
          *(_QWORD *)(a3 + 16) = v7;
          v8 = v5[1];
          *(_QWORD *)a3 = v8;
          if (v8)
          {
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 + 16) & 1 | a3;
            v7 = *(_QWORD *)(a3 + 16);
          }
          v5[2] = v7 & 0xFFFFFFFFFFFFFFFELL | v5[2] & 1;
          v9 = *(_QWORD *)(a3 + 16);
          v10 = (_QWORD *)result;
          v11 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
          if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            v10 = v11 + 1;
            if (*v11 == a3)
              v10 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFFFFELL);
          }
          *v10 = v5;
          v5[1] = a3;
          *(_QWORD *)(a3 + 16) = v9 & 1 | (unint64_t)v5;
          v5 = *(unint64_t **)a3;
        }
        v12 = v5[1];
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 16);
          if ((v13 & 1) != 0)
          {
            v14 = *v5;
            if (!*v5)
              goto LABEL_34;
            if ((*(_QWORD *)(v14 + 16) & 1) == 0)
            {
              v13 = *(_QWORD *)(v12 + 16);
LABEL_34:
              *(_QWORD *)(v12 + 16) = v13 & 0xFFFFFFFFFFFFFFFELL;
              v25 = v5[2] | 1;
              v26 = *(_QWORD *)v12;
              v5[1] = *(_QWORD *)v12;
              v5[2] = v25;
              if (v26)
              {
                *(_QWORD *)(v26 + 16) = *(_QWORD *)(v26 + 16) & 1 | (unint64_t)v5;
                v25 = v5[2];
              }
              *(_QWORD *)(v12 + 16) = v25 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v12 + 16) & 1;
              v27 = v5[2];
              v28 = (_QWORD *)result;
              v29 = (_QWORD *)(v27 & 0xFFFFFFFFFFFFFFFELL);
              if ((v27 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v28 = v29 + 1;
                if ((unint64_t *)*v29 == v5)
                  v28 = (_QWORD *)(v27 & 0xFFFFFFFFFFFFFFFELL);
              }
              *v28 = v12;
              *(_QWORD *)v12 = v5;
              v5[2] = v27 & 1 | v12;
              v5 = *(unint64_t **)a3;
              v14 = **(_QWORD **)a3;
            }
LABEL_40:
            v5[2] = v5[2] & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(a3 + 16) & 1;
            *(_QWORD *)(a3 + 16) &= ~1uLL;
            if (v14)
              *(_QWORD *)(v14 + 16) &= ~1uLL;
            v30 = v5[1];
            *(_QWORD *)a3 = v30;
            if (v30)
              *(_QWORD *)(v30 + 16) = *(_QWORD *)(v30 + 16) & 1 | a3;
            v5[2] = *(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFFFFELL | v5[2] & 1;
            v31 = *(_QWORD *)(a3 + 16);
            v32 = (_QWORD *)result;
            v33 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFFELL);
            if ((v31 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              v32 = v33 + 1;
              if (*v33 == a3)
                v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFFELL);
            }
            *v32 = v5;
            v5[1] = a3;
            goto LABEL_66;
          }
        }
        v14 = *v5;
        if (*v5 && (*(_QWORD *)(v14 + 16) & 1) != 0)
          goto LABEL_40;
      }
      v5[2] |= 1uLL;
      a2 = a3;
LABEL_67:
      v4 = *(_QWORD *)(a2 + 16);
      a3 = v4 & 0xFFFFFFFFFFFFFFFELL;
      if (a2 == *(_QWORD *)result)
        goto LABEL_71;
    }
  }
  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 16);
LABEL_71:
    *(_QWORD *)(a2 + 16) = v4 & 0xFFFFFFFFFFFFFFFELL;
  }
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::doExecutableAllocationFuzzing(void)::$_0 &&>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unint64_t v9;

  result = WTF::cryptographicallyRandomNumber<unsigned int>(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
    v9 = result;
  else
    v9 = 1;
  JSC::doExecutableAllocationFuzzing(void)::random = v9;
  JSC::doExecutableAllocationFuzzing(void)::random = ((v9 >> 26) | (v9 << 23)) ^ ((v9 ^ (v9 << 23)) >> 17);
  return result;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::dumpJITMemory(void const*,void const*,unsigned long)::$_0 &&>>()
{
  uint64_t v0;
  int v1;
  dispatch_qos_class_t v2;
  NSObject *v3;
  NSObject *v4;
  void *v5;
  unsigned int v6;
  void *v7;

  qword_1ECF588B0 = (uint64_t)malloc_type_malloc(0x20000000uLL, 0x2ABF1D20uLL);
  v0 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v0 + 8) = 1;
  *(_QWORD *)v0 = off_1E35726F8;
  *(_QWORD *)(v0 + 16) = 0;
  *(_DWORD *)(v0 + 24) = 0;
  if (WTF::globalMaxQOSclass >= 9)
    v1 = 9;
  else
    v1 = WTF::globalMaxQOSclass;
  if (WTF::globalMaxQOSclass)
    v2 = v1;
  else
    v2 = QOS_CLASS_BACKGROUND;
  v3 = dispatch_queue_attr_make_with_qos_class(0, v2, 0);
  v4 = dispatch_queue_create("jsc.dumpJITMemory.queue", v3);
  v5 = *(void **)(v0 + 16);
  *(_QWORD *)(v0 + 16) = v4;
  if (v5)
  {
    os_release(v5);
    v4 = *(NSObject **)(v0 + 16);
  }
  dispatch_set_context(v4, (void *)v0);
  do
  {
    v6 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
    v7 = (void *)(v6 + 1);
  }
  while (__stlxr(v7, (unsigned int *)&WTF::ThreadLike::s_uid));
  *(_DWORD *)(v0 + 24) = (_DWORD)v7;
  dispatch_queue_set_specific(*(dispatch_queue_t *)(v0 + 16), &WTF::ThreadLike::s_uid, v7, 0);
  *(_QWORD *)v0 = off_1E3572728;
  *(_QWORD *)(v0 + 32) = &unk_1E3572778;
  qword_1ECF588C0 = v0;
  return atexit(JSC::dumpJITMemory(void const*,void const*,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::__invoke);
}

void JSC::dumpJITMemory(void const*,void const*,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::__invoke()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_38))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_38))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&_MergedGlobals_38);
LABEL_5:
  JSC::dumpJITMemory(void const*,void const*,unsigned long)::DumpJIT::flush();
  close(JSC::dumpJITMemory(void const*,void const*,unsigned long)::fd);
  JSC::dumpJITMemory(void const*,void const*,unsigned long)::fd = -1;
  v7 = __ldxr((unsigned __int8 *)&_MergedGlobals_38);
  if (v7 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)&_MergedGlobals_38))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&_MergedGlobals_38, 0, v1, v2, v3, v4, v5, v6);
}

_OWORD *WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::computeBestTableSize(v2);
  return WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::rehash(a1, v3, 0, v4, v5, v6, v7, v8);
}

uint64_t WTF::HashTable<JSC::CodeBlock *,WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::CodeBlock *,unsigned int>>,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::CodeBlock *>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1)
      goto LABEL_11;
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    v4 = (double)a1;
    v5 = (double)v3;
    v6 = 0.604166667;
    goto LABEL_5;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400)
    goto LABEL_4;
LABEL_11:
  v4 = (double)a1;
  v5 = (double)v3;
  v6 = 0.416666667;
LABEL_5:
  if (v5 * v6 <= v4)
    LODWORD(v3) = 2 * v3;
  if (v3 <= 8)
    return 8;
  else
    return v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC50StructureTransitionStructureStubClearingWatchpointENS8_44AdaptiveValueStructureStubClearingWatchpointEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  uint64_t *v16;
  uint64_t v17;

  v9 = a2[3];
  a2[3] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = (uint64_t **)(v9 + 8);
      for (i = *(uint64_t **)(v9 + 8); i != (uint64_t *)v14; i = *v14)
      {
        v17 = *i;
        v16 = (uint64_t *)i[1];
        *v16 = *i;
        *(_QWORD *)(v17 + 8) = v16;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = (uint64_t *)a2[1];
  if (v12)
  {
    v13 = *a2;
    *v12 = *a2;
    *(_QWORD *)(v13 + 8) = v12;
    *a2 = 0;
    a2[1] = 0;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC50StructureTransitionStructureStubClearingWatchpointENS8_44AdaptiveValueStructureStubClearingWatchpointEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *i;
  uint64_t *v18;
  uint64_t v19;

  v9 = a2[10];
  a2[10] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v16 = (uint64_t **)(v9 + 8);
      for (i = *(uint64_t **)(v9 + 8); i != (uint64_t *)v16; i = *v16)
      {
        v19 = *i;
        v18 = (uint64_t *)i[1];
        *v18 = *i;
        *(_QWORD *)(v19 + 8) = v18;
        *i = 0;
        i[1] = 0;
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  *a2 = off_1E3580B60;
  v12 = (_QWORD *)a2[8];
  if (v12)
  {
    v13 = a2[7];
    *v12 = v13;
    *(_QWORD *)(v13 + 8) = v12;
    a2[7] = 0;
    a2[8] = 0;
  }
  v14 = (_QWORD *)a2[5];
  if (v14)
  {
    v15 = a2[4];
    *v14 = v15;
    *(_QWORD *)(v15 + 8) = v14;
    a2[4] = 0;
    a2[5] = 0;
  }
}

void WTF::ThreadSafeRefCounted<JSC::DFG::CodeOriginPool,(WTF::DestructionThread)0>::deref(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  do
  {
    v9 = __ldaxr((unsigned int *)this);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, (unsigned int *)this));
  if (!v10)
  {
    atomic_store(1u, (unsigned int *)this);
    v11 = *((_QWORD *)this + 3);
    if (v11)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    v12 = *((unsigned int *)this + 5);
    v13 = (_QWORD *)*((_QWORD *)this + 1);
    if ((_DWORD)v12)
    {
      v14 = 8 * v12;
      do
      {
        if ((*v13 & 1) != 0)
        {
          v15 = *v13 & 0xFFFFFFFF8;
          if (v15)
          {
            v16 = v14;
            v17 = v13;
            WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
            v14 = v16;
            v13 = v17;
          }
        }
        ++v13;
        v14 -= 8;
      }
      while (v14);
      v13 = (_QWORD *)*((_QWORD *)this + 1);
    }
    if (v13)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  }
}

void WTF::Detail::CallableWrapper<JSC::ICStats::ICStats(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  int v14;
  int v15;
  char v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v36;
  const WTF::StringImpl *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  int v49;
  double v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v55)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v56;
  __int128 v57;
  uint64_t *v58;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)(v1 + 24);
  if (__ldaxr((unsigned __int8 *)(v1 + 24)))
  {
    __clrex();
LABEL_4:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v1 + 24);
    goto LABEL_5;
  }
  if (__stxr(1u, v2))
    goto LABEL_4;
LABEL_5:
  v10 = mach_absolute_time();
  v12 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
  if (v12 != -1)
  {
    *(_QWORD *)&v57 = &v53;
    v54 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&v57;
    std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
  }
  LODWORD(v11) = dword_1ECF4400C;
  v50 = (double)(v10 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v11 * 1000000000.0) + 1.0;
  v51 = 1;
  while (!*(_BYTE *)(v1 + 26))
  {
    v13 = COERCE_DOUBLE(WTF::TimeWithDynamicClockType::nowWithSameClock((WTF::TimeWithDynamicClockType *)&v50));
    if (v51 != v14)
    {
      __break(0xC471u);
      return;
    }
    if (v50 >= v13)
    {
      v52 = v1 + 24;
      v53 = v1 + 25;
      *(_QWORD *)&v57 = WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
      *((_QWORD *)&v57 + 1) = &v57;
      v58 = &v53;
      v54 = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
      v55 = &v54;
      v56 = &v52;
      v16 = WTF::ParkingLot::parkConditionallyImpl(v1 + 25, (uint64_t)&v57, (uint64_t)&v54, (WTF::TimeWithDynamicClockType *)&v50) & 1;
      goto LABEL_18;
    }
    v15 = __ldxr(v2);
    if (v15 == 1)
    {
      if (!__stlxr(0, v2))
        goto LABEL_17;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v1 + 24), 0, v4, v5, v6, v7, v8, v9);
LABEL_17:
    v16 = 0;
LABEL_18:
    if (__ldaxr(v2))
    {
      __clrex();
LABEL_21:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v1 + 24);
      goto LABEL_22;
    }
    if (__stxr(1u, v2))
      goto LABEL_21;
LABEL_22:
    if ((v16 & 1) == 0)
    {
      if (*(_BYTE *)(v1 + 26))
        break;
      WTF::dataLog<char [16]>("ICStats:\n");
      if (__ldaxr((unsigned __int8 *)v1))
      {
        __clrex();
        goto LABEL_27;
      }
      if (__stxr(1u, (unsigned __int8 *)v1))
LABEL_27:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v1);
      v19 = *(_QWORD *)(v1 + 8);
      v54 = 0;
      v55 = 0;
      if (v19)
      {
        v20 = *(unsigned int *)(v19 - 4);
        v21 = v19 + 40 * v20;
        if (*(_DWORD *)(v19 - 12))
        {
          v22 = v19;
          if ((_DWORD)v20)
          {
            v23 = 40 * v20;
            v22 = v19;
            while (1)
            {
              v24 = *(_QWORD *)(v22 + 8);
              if ((*(_DWORD *)v22 || v24 != 0) && (*(_DWORD *)v22 != 9 || v24 != 0))
                break;
              if (*(_QWORD *)(v22 + 16))
                break;
              v22 += 40;
              v23 -= 40;
              if (!v23)
              {
                v22 = v21;
                break;
              }
            }
          }
LABEL_47:
          if (v19)
            v27 = v19 + 40 * *(unsigned int *)(v19 - 4);
          else
            v27 = 0;
          if (v27 == v22)
          {
            v36 = 0;
            v28 = 0;
          }
          else
          {
            v28 = 0;
            LODWORD(v29) = 0;
            do
            {
              v30 = *(_QWORD *)(v22 + 32);
              *(_QWORD *)&v57 = v22;
              *((_QWORD *)&v57 + 1) = v30;
              if ((_DWORD)v29 == (_DWORD)v55)
              {
                v31 = (_OWORD *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v54, v29 + 1, (unint64_t)&v57);
                LODWORD(v29) = HIDWORD(v55);
                v28 = (uint64_t)v54;
                *((_OWORD *)v54 + HIDWORD(v55)) = *v31;
              }
              else
              {
                *(_OWORD *)(v28 + 16 * v29) = v57;
              }
              v29 = (v29 + 1);
              HIDWORD(v55) = v29;
              v32 = v22 + 40;
              v22 = v21;
              if (v32 != v21)
              {
                v22 = v32;
                while (1)
                {
                  v33 = *(_QWORD *)(v22 + 8);
                  if ((*(_DWORD *)v22 || v33 != 0) && (*(_DWORD *)v22 != 9 || v33 != 0))
                    break;
                  if (*(_QWORD *)(v22 + 16))
                    break;
                  v22 += 40;
                  if (v22 == v21)
                  {
                    v22 = v21;
                    break;
                  }
                }
              }
            }
            while (v22 != v27);
            v36 = (char *)(v28 + 16 * v29);
            if ((_DWORD)v29)
            {
              v37 = (const WTF::StringImpl *)(126 - 2 * __clz(v29));
              goto LABEL_74;
            }
          }
          v37 = 0;
LABEL_74:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *,false>(v28, v36, v37, 1);
          v45 = (unint64_t)v54;
          if (HIDWORD(v55))
          {
            v46 = HIDWORD(v55) - 1;
            do
            {
              v47 = v46;
              WTF::dataLog<char [5],JSC::ICEvent,char [3],unsigned long long,char [2]>(*(int **)(v45 + 16 * v46), (_QWORD *)(v45 + 16 * v46 + 8));
              --v46;
            }
            while (v47);
LABEL_79:
            WTF::fastFree(v45, v38, v39, v40, v41, v42, v43, v44);
          }
          else if (v54)
          {
            goto LABEL_79;
          }
          v48 = __ldxr((unsigned __int8 *)v1);
          if (v48 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v1))
              goto LABEL_5;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v1, 0, v39, v40, v41, v42, v43, v44);
          goto LABEL_5;
        }
        v22 = v19 + 40 * v20;
      }
      else
      {
        v22 = 0;
        LODWORD(v20) = 0;
      }
      v21 = v19 + 40 * v20;
      goto LABEL_47;
    }
  }
  v49 = __ldxr(v2);
  if (v49 == 1)
  {
    if (!__stlxr(0, v2))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v1 + 24), 0, v4, v5, v6, v7, v8, v9);
}

uint64_t WTF::dataLog<char [5],JSC::ICEvent,char [3],unsigned long long,char [2]>(int *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  const char **v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  const char *v12;
  WTF::PrintStream *v13;
  int v14;
  const char *v15;
  WTF::PrintStream *v16;
  uint64_t result;
  char v18;
  char **v19;
  char *v20;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v20 = &v18;
    v19 = &v20;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v6, "%s", "    ");
  v7 = (const char **)*((_QWORD *)a1 + 1);
  if (v7)
    v8 = *v7;
  else
    v8 = "<null>";
  v9 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
  v10 = *a1;
  if (v10 >= 0x2E)
  {
    result = 135;
    __break(0xC471u);
  }
  else
  {
    v11 = (WTF::PrintStream *)v9;
    v12 = off_1E3595858[v10];
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    WTF::PrintStream::printf(v13, "%s", v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v11 + 40))(v11);
    WTF::PrintStream::printf(v11, "%s", "(");
    WTF::PrintStream::printf(v11, "%s", v8);
    WTF::PrintStream::printf(v11, "%s", ", ");
    JSC::Identifier::dump((JSC::Identifier *)(a1 + 4), v11);
    WTF::PrintStream::printf(v11, "%s", ")");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    v14 = a1[6];
    if (v14)
    {
      if (v14 == 1)
        v15 = " self";
      else
        v15 = " proto lookup";
      v16 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 32))(v6);
      WTF::PrintStream::printf(v16, "%s", v15);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v6 + 40))(v6);
    }
    WTF::PrintStream::printf(v6, "%s", ": ");
    WTF::PrintStream::printf(v6, "%llu", *a2);
    WTF::PrintStream::printf(v6, "%s", "\n");
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *,false>(uint64_t result, char *a2, const WTF::StringImpl *a3, char a4)
{
  const WTF::StringImpl *v5;
  char *v7;
  const char **v8;
  unint64_t *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const char **v17;
  const char **v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const char **v22;
  uint64_t v23;
  const char **v24;
  WTF *v25;
  const WTF::StringImpl *v26;
  BOOL v27;
  unint64_t v28;
  unint64_t *v29;
  const char **v30;
  WTF *v31;
  const WTF::StringImpl *v32;
  BOOL v33;
  unint64_t *v34;
  const char **v35;
  BOOL v36;
  WTF *v37;
  const WTF::StringImpl *v38;
  BOOL v39;
  unint64_t *v41;
  const char **v42;
  WTF *v43;
  const WTF::StringImpl *v44;
  BOOL v45;
  const char **v46;
  WTF *v47;
  const WTF::StringImpl *v48;
  BOOL v49;
  BOOL v50;
  const WTF::StringImpl *v51;
  const WTF::StringImpl *v52;
  BOOL v53;
  unint64_t v54;
  const char **v55;
  const char **v56;
  const WTF::StringImpl *v57;
  BOOL v58;
  unint64_t *v59;
  const char **v60;
  const WTF::StringImpl *v61;
  BOOL v62;
  const char **v63;
  const WTF::StringImpl *v64;
  BOOL v65;
  const char **v66;
  const WTF::StringImpl *v67;
  BOOL v68;
  const WTF::StringImpl *v69;
  const char **v70;
  const WTF::StringImpl *v71;
  BOOL v72;
  BOOL v73;
  unint64_t v74;
  unint64_t v75;
  const char **v76;
  const char **v77;
  char *v78;
  BOOL v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char **v88;
  const char **v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  const char **v96;
  const char **v97;
  const WTF::StringImpl *v98;
  BOOL v99;
  const WTF::StringImpl *v100;
  BOOL v101;
  int64_t v102;
  int64_t v103;
  int64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char **v111;
  const char **v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  const char **v119;
  const char **v120;
  const WTF::StringImpl *v121;
  const WTF::StringImpl *v122;
  BOOL v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char **v132;
  const char **v133;
  unint64_t v134;
  uint64_t v135;
  const char **v136;
  const char **v137;
  const WTF::StringImpl *v138;
  const WTF::StringImpl *v139;
  BOOL v140;
  BOOL v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char **v155;
  const char **v156;
  const WTF::StringImpl *v157;
  BOOL v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  const char **v168;
  const char **v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  const char **v173;
  const char **v174;
  const WTF::StringImpl *v175;
  BOOL v176;
  const WTF::StringImpl *v177;
  BOOL v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  const char **v187;
  const char **v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  const char **v192;
  const WTF::StringImpl *v193;
  BOOL v194;
  const WTF::StringImpl *v195;
  BOOL v196;
  const WTF::StringImpl *v197;
  BOOL v198;
  uint64_t v199;
  const WTF::StringImpl *v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;

  v5 = a3;
  v7 = (char *)result;
LABEL_2:
  v8 = (const char **)(a2 - 16);
  v200 = (const WTF::StringImpl *)(a2 - 16);
  i = (unint64_t *)v7;
  while (2)
  {
    v7 = (char *)i;
    v10 = a2 - (char *)i;
    v11 = (a2 - (char *)i) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v74 = *((_QWORD *)a2 - 1);
        v75 = *((_QWORD *)v7 + 1);
        if (v74 == v75)
        {
          v19 = *(_QWORD *)v200;
          v8 = *(const char ***)v7;
          v76 = *(const char ***)(*(_QWORD *)v7 + 8);
          v77 = *(const char ***)(*(_QWORD *)v200 + 8);
          if (v76 == v77)
            goto LABEL_460;
          if (!v76)
            goto LABEL_422;
          if (v77)
          {
            result = strcmp(*v76, *v77);
            if ((result & 0x80000000) != 0)
              goto LABEL_422;
          }
        }
        else if (v74 < v75)
        {
          goto LABEL_422;
        }
        return result;
      case 3:
        return std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>((uint64_t)v7, (_QWORD *)v7 + 2, v200);
      case 4:
        return std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>(v7, (_QWORD *)v7 + 2, (const WTF::StringImpl *)(v7 + 32), v200);
      case 5:
        return std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>(v7, (_QWORD *)v7 + 2, (const WTF::StringImpl *)(v7 + 32), (_QWORD *)v7 + 6, v200);
      default:
        if (v10 <= 383)
        {
          v78 = v7 + 16;
          v80 = v7 == a2 || v78 == a2;
          if ((a4 & 1) == 0)
          {
            if (v80)
              return result;
            v179 = 0;
            v180 = -1;
            v181 = 1;
            v182 = v7;
            while (1)
            {
              v183 = v179;
              v179 = v181;
              v184 = *((_QWORD *)v182 + 3);
              v185 = *(_QWORD *)&v7[16 * v183 + 8];
              if (v184 == v185)
                break;
              if (v184 < v185)
                goto LABEL_432;
LABEL_450:
              v182 += 16;
              v181 = v179 + 1;
              v78 = &v7[16 * v179 + 16];
              --v180;
              if (v78 == a2)
                return result;
            }
            v186 = *(_QWORD *)v78;
            v8 = *(const char ***)v182;
            v187 = *(const char ***)(*(_QWORD *)v182 + 8);
            v188 = *(const char ***)(*(_QWORD *)v78 + 8);
            if (v187 == v188)
            {
              result = (uint64_t)v8[2];
              v195 = *(const WTF::StringImpl **)(v186 + 16);
              if ((const WTF::StringImpl *)result == v195)
              {
                v196 = *(_DWORD *)v8 < *(_DWORD *)v186;
                if (*(_DWORD *)v8 == *(_DWORD *)v186)
                {
                  v8 = (const char **)*((unsigned int *)v8 + 6);
                  v196 = (int)v8 < *(_DWORD *)(v186 + 24);
                }
                if (!v196)
                  goto LABEL_450;
              }
              else
              {
                result = WTF::codePointCompare((WTF *)result, v195, a3);
                if ((result & 0x80000000) == 0)
                  goto LABEL_450;
                v184 = *((_QWORD *)v182 + 3);
              }
            }
            else if (v187)
            {
              if (!v188)
                goto LABEL_450;
              result = strcmp(*v187, *v188);
              if ((result & 0x80000000) == 0)
                goto LABEL_450;
            }
LABEL_432:
            v189 = *(_QWORD *)v78;
            *(_OWORD *)v78 = *(_OWORD *)&v7[16 * v183];
            v190 = v180;
            v191 = v182;
            while (1)
            {
              v19 = *((_QWORD *)v191 - 1);
              if (v184 == v19)
              {
                v19 = *((_QWORD *)v191 - 2);
                v8 = *(const char ***)(v19 + 8);
                v192 = *(const char ***)(v189 + 8);
                if (v8 == v192)
                {
                  result = *(_QWORD *)(v19 + 16);
                  v193 = *(const WTF::StringImpl **)(v189 + 16);
                  if ((const WTF::StringImpl *)result == v193)
                  {
                    v8 = (const char **)*(unsigned int *)v19;
                    v194 = (int)v8 < *(_DWORD *)v189;
                    if ((_DWORD)v8 == *(_DWORD *)v189)
                    {
                      v19 = *(unsigned int *)(v19 + 24);
                      v8 = (const char **)*(unsigned int *)(v189 + 24);
                      v194 = (int)v19 < (int)v8;
                    }
                    if (!v194)
                    {
LABEL_449:
                      *(_QWORD *)v191 = v189;
                      *((_QWORD *)v191 + 1) = v184;
                      goto LABEL_450;
                    }
                  }
                  else
                  {
                    result = WTF::codePointCompare((WTF *)result, v193, a3);
                    if ((result & 0x80000000) == 0)
                      goto LABEL_449;
                  }
                }
                else if (v8)
                {
                  if (!v192)
                    goto LABEL_449;
                  result = strcmp(*v8, *v192);
                  if ((result & 0x80000000) == 0)
                    goto LABEL_449;
                }
              }
              else if (v184 >= v19)
              {
                goto LABEL_449;
              }
              *(_OWORD *)v191 = *((_OWORD *)v191 - 1);
              v191 -= 16;
              v36 = __CFADD__(v190++, 1);
              if (v36)
                goto LABEL_459;
            }
          }
          if (v80)
            return result;
          v81 = 0;
          v82 = v7;
LABEL_254:
          v83 = v82;
          v82 = v78;
          v84 = *((_QWORD *)v83 + 3);
          v85 = *((_QWORD *)v83 + 1);
          if (v84 == v85)
          {
            v86 = *(_QWORD *)v78;
            v87 = *(_QWORD *)v83;
            v88 = *(const char ***)(*(_QWORD *)v83 + 8);
            v89 = *(const char ***)(*(_QWORD *)v78 + 8);
            if (v88 == v89)
            {
              result = *(_QWORD *)(v87 + 16);
              v100 = *(const WTF::StringImpl **)(v86 + 16);
              if ((const WTF::StringImpl *)result == v100)
              {
                v101 = *(_DWORD *)v87 < *(_DWORD *)v86;
                if (*(_DWORD *)v87 == *(_DWORD *)v86)
                  v101 = *(_DWORD *)(v87 + 24) < *(_DWORD *)(v86 + 24);
                if (!v101)
                  goto LABEL_284;
              }
              else
              {
                result = WTF::codePointCompare((WTF *)result, v100, a3);
                if ((result & 0x80000000) == 0)
                  goto LABEL_284;
                v84 = *((_QWORD *)v83 + 3);
              }
            }
            else if (v88)
            {
              if (!v89)
                goto LABEL_284;
              result = strcmp(*v88, *v89);
              if ((result & 0x80000000) == 0)
                goto LABEL_284;
            }
          }
          else if (v84 >= v85)
          {
            goto LABEL_284;
          }
          v90 = *((_QWORD *)v83 + 2);
          *(_OWORD *)v82 = *(_OWORD *)v83;
          v91 = v7;
          if (v83 == v7)
            goto LABEL_283;
          v92 = v81;
          while (1)
          {
            v93 = (uint64_t)&v7[v92 - 16];
            v94 = *(_QWORD *)&v7[v92 - 8];
            if (v84 == v94)
            {
              v95 = *(_QWORD *)v93;
              v96 = *(const char ***)(*(_QWORD *)v93 + 8);
              v97 = *(const char ***)(v90 + 8);
              if (v96 == v97)
              {
                result = *(_QWORD *)(v95 + 16);
                v98 = *(const WTF::StringImpl **)(v90 + 16);
                if ((const WTF::StringImpl *)result == v98)
                {
                  v99 = *(_DWORD *)v95 < *(_DWORD *)v90;
                  if (*(_DWORD *)v95 == *(_DWORD *)v90)
                    v99 = *(_DWORD *)(v95 + 24) < *(_DWORD *)(v90 + 24);
                  if (!v99)
                  {
LABEL_278:
                    v91 = v83;
                    goto LABEL_283;
                  }
                }
                else
                {
                  result = WTF::codePointCompare((WTF *)result, v98, a3);
                  if ((result & 0x80000000) == 0)
                    goto LABEL_278;
                }
              }
              else if (v96)
              {
                if (!v97)
                  goto LABEL_278;
                result = strcmp(*v96, *v97);
                if ((result & 0x80000000) == 0)
                  goto LABEL_278;
              }
            }
            else if (v84 >= v94)
            {
              v91 = &v7[v92];
LABEL_283:
              *(_QWORD *)v91 = v90;
              *((_QWORD *)v91 + 1) = v84;
LABEL_284:
              v78 = v82 + 16;
              v81 += 16;
              if (v82 + 16 == a2)
                return result;
              goto LABEL_254;
            }
            v83 -= 16;
            *(_OWORD *)&v7[v92] = *(_OWORD *)v93;
            v92 -= 16;
            if (!v92)
            {
              v91 = v7;
              goto LABEL_283;
            }
          }
        }
        if (!v5)
        {
          if (v7 == a2)
            return result;
          v102 = (unint64_t)(v11 - 2) >> 1;
          v103 = v102;
          while (1)
          {
            v104 = v103;
            if (v102 < v103)
              goto LABEL_356;
            v105 = (2 * v103) | 1;
            v106 = &v7[16 * v105];
            if (2 * v103 + 2 >= v11)
              goto LABEL_301;
            v107 = *((_QWORD *)v106 + 1);
            v108 = *((_QWORD *)v106 + 3);
            if (v107 == v108)
            {
              v109 = *(_QWORD *)v106;
              v110 = *((_QWORD *)v106 + 2);
              v111 = *(const char ***)(v110 + 8);
              v112 = *(const char ***)(*(_QWORD *)v106 + 8);
              if (v111 == v112)
              {
                result = *(_QWORD *)(v110 + 16);
                v122 = *(const WTF::StringImpl **)(v109 + 16);
                if ((const WTF::StringImpl *)result != v122)
                {
                  result = WTF::codePointCompare((WTF *)result, v122, a3);
                  goto LABEL_314;
                }
                v142 = *(_DWORD *)v110 < *(_DWORD *)v109;
                if (*(_DWORD *)v110 == *(_DWORD *)v109)
                  v142 = *(_DWORD *)(v110 + 24) < *(_DWORD *)(v109 + 24);
                if (!v142)
                  goto LABEL_301;
LABEL_300:
                v106 += 16;
                v105 = 2 * v104 + 2;
                goto LABEL_301;
              }
              if (!v111)
                goto LABEL_300;
              if (v112)
              {
                result = strcmp(*v111, *v112);
LABEL_314:
                v102 = (unint64_t)(v11 - 2) >> 1;
                if ((result & 0x80000000) == 0)
                  goto LABEL_301;
                goto LABEL_300;
              }
            }
            else if (v107 < v108)
            {
              goto LABEL_300;
            }
LABEL_301:
            v113 = &v7[16 * v104];
            v114 = *((_QWORD *)v106 + 1);
            v115 = *((_QWORD *)v113 + 1);
            v116 = v114 >= v115;
            if (v114 == v115)
            {
              v117 = *(_QWORD *)v106;
              v118 = *(_QWORD *)v113;
              v119 = *(const char ***)(*(_QWORD *)v113 + 8);
              v120 = *(const char ***)(*(_QWORD *)v106 + 8);
              if (v119 == v120)
              {
                result = *(_QWORD *)(v118 + 16);
                v121 = *(const WTF::StringImpl **)(v117 + 16);
                if ((const WTF::StringImpl *)result == v121)
                {
                  v123 = *(_DWORD *)v118 < *(_DWORD *)v117;
                  if (*(_DWORD *)v118 == *(_DWORD *)v117)
                    v123 = *(_DWORD *)(v118 + 24) < *(_DWORD *)(v117 + 24);
                  if (v123)
                    goto LABEL_356;
                }
                else
                {
                  result = WTF::codePointCompare((WTF *)result, v121, a3);
                  v102 = (unint64_t)(v11 - 2) >> 1;
                  if ((result & 0x80000000) != 0)
                    goto LABEL_356;
                  v114 = *((_QWORD *)v113 + 1);
                }
              }
              else
              {
                if (!v119)
                  goto LABEL_356;
                if (v120)
                {
                  result = strcmp(*v119, *v120);
                  v102 = (unint64_t)(v11 - 2) >> 1;
                  if ((result & 0x80000000) != 0)
                    goto LABEL_356;
                }
              }
            }
            else
            {
              v114 = *((_QWORD *)v113 + 1);
              if (!v116)
                goto LABEL_356;
            }
            v124 = *(_QWORD *)v113;
            *(_OWORD *)v113 = *(_OWORD *)v106;
            if (v102 < v105)
              goto LABEL_355;
            v199 = v124;
            while (1)
            {
              v125 = v106;
              v126 = 2 * v105;
              v105 = (2 * v105) | 1;
              v106 = &v7[16 * v105];
              v127 = v126 + 2;
              if (v126 + 2 >= v11)
                goto LABEL_329;
              v128 = *((_QWORD *)v106 + 1);
              v129 = *((_QWORD *)v106 + 3);
              if (v128 != v129)
              {
                if (v128 >= v129)
                  goto LABEL_329;
LABEL_328:
                v106 += 16;
                v105 = v127;
                goto LABEL_329;
              }
              v130 = *(_QWORD *)v106;
              v131 = *((_QWORD *)v106 + 2);
              v132 = *(const char ***)(v131 + 8);
              v133 = *(const char ***)(*(_QWORD *)v106 + 8);
              if (v132 != v133)
              {
                if (!v132)
                  goto LABEL_328;
                if (!v133)
                  goto LABEL_329;
                result = strcmp(*v132, *v133);
LABEL_343:
                v124 = v199;
                v102 = (unint64_t)(v11 - 2) >> 1;
                if ((result & 0x80000000) != 0)
                  goto LABEL_328;
                goto LABEL_329;
              }
              result = *(_QWORD *)(v131 + 16);
              v139 = *(const WTF::StringImpl **)(v130 + 16);
              if ((const WTF::StringImpl *)result != v139)
              {
                result = WTF::codePointCompare((WTF *)result, v139, a3);
                goto LABEL_343;
              }
              v141 = *(_DWORD *)v131 < *(_DWORD *)v130;
              if (*(_DWORD *)v131 == *(_DWORD *)v130)
                v141 = *(_DWORD *)(v131 + 24) < *(_DWORD *)(v130 + 24);
              if (v141)
                goto LABEL_328;
LABEL_329:
              v134 = *((_QWORD *)v106 + 1);
              if (v134 != v114)
              {
                if (v134 < v114)
                  break;
                goto LABEL_339;
              }
              v135 = *(_QWORD *)v106;
              v136 = *(const char ***)(v124 + 8);
              v137 = *(const char ***)(*(_QWORD *)v106 + 8);
              if (v136 != v137)
              {
                if (!v136)
                  break;
                if (v137)
                {
                  result = strcmp(*v136, *v137);
                  goto LABEL_338;
                }
                goto LABEL_339;
              }
              result = *(_QWORD *)(v124 + 16);
              v138 = *(const WTF::StringImpl **)(v135 + 16);
              if ((const WTF::StringImpl *)result != v138)
              {
                result = WTF::codePointCompare((WTF *)result, v138, a3);
LABEL_338:
                v124 = v199;
                v102 = (unint64_t)(v11 - 2) >> 1;
                if ((result & 0x80000000) != 0)
                  break;
                goto LABEL_339;
              }
              v140 = *(_DWORD *)v124 < *(_DWORD *)v135;
              if (*(_DWORD *)v124 == *(_DWORD *)v135)
                v140 = *(_DWORD *)(v124 + 24) < *(_DWORD *)(v135 + 24);
              if (v140)
                break;
LABEL_339:
              *(_OWORD *)v125 = *(_OWORD *)v106;
              if (v102 < v105)
                goto LABEL_355;
            }
            v106 = v125;
LABEL_355:
            *(_QWORD *)v106 = v124;
            *((_QWORD *)v106 + 1) = v114;
LABEL_356:
            v103 = v104 - 1;
            if (!v104)
            {
              v143 = (unint64_t)v10 >> 4;
              while (1)
              {
                v144 = 0;
                v204 = *(_OWORD *)v7;
                v145 = v143 - 2;
                if (v143 < 2)
                  v145 = v143 - 1;
                v146 = v145 >> 1;
                v147 = v7;
                do
                {
                  v148 = v147;
                  v147 += 16 * v144 + 16;
                  v149 = 2 * v144;
                  v144 = (2 * v144) | 1;
                  v150 = v149 + 2;
                  if (v149 + 2 >= v143)
                    goto LABEL_374;
                  v151 = *((_QWORD *)v147 + 1);
                  v152 = *((_QWORD *)v147 + 3);
                  if (v151 != v152)
                  {
                    if (v151 >= v152)
                      goto LABEL_374;
LABEL_373:
                    v147 += 16;
                    v144 = v150;
                    goto LABEL_374;
                  }
                  v153 = *(_QWORD *)v147;
                  v154 = *((_QWORD *)v147 + 2);
                  v155 = *(const char ***)(v154 + 8);
                  v156 = *(const char ***)(*(_QWORD *)v147 + 8);
                  if (v155 == v156)
                  {
                    result = *(_QWORD *)(v154 + 16);
                    v157 = *(const WTF::StringImpl **)(v153 + 16);
                    if ((const WTF::StringImpl *)result == v157)
                    {
                      v158 = *(_DWORD *)v154 < *(_DWORD *)v153;
                      if (*(_DWORD *)v154 == *(_DWORD *)v153)
                        v158 = *(_DWORD *)(v154 + 24) < *(_DWORD *)(v153 + 24);
                      if (v158)
                        goto LABEL_373;
                    }
                    else
                    {
                      result = WTF::codePointCompare((WTF *)result, v157, a3);
                      if ((result & 0x80000000) != 0)
                        goto LABEL_373;
                    }
                  }
                  else
                  {
                    if (!v155)
                      goto LABEL_373;
                    if (v156)
                    {
                      result = strcmp(*v155, *v156);
                      if ((result & 0x80000000) != 0)
                        goto LABEL_373;
                    }
                  }
LABEL_374:
                  *(_OWORD *)v148 = *(_OWORD *)v147;
                }
                while (v144 <= v146);
                a2 -= 16;
                if (v147 == a2)
                {
                  *(_OWORD *)v147 = v204;
                }
                else
                {
                  *(_OWORD *)v147 = *(_OWORD *)a2;
                  *(_OWORD *)a2 = v204;
                  v159 = v147 - v7 + 16;
                  if (v159 >= 17)
                  {
                    v160 = ((unint64_t)v159 >> 4) - 2;
                    v161 = v160 >> 1;
                    v162 = &v7[16 * (v160 >> 1)];
                    v163 = *((_QWORD *)v162 + 1);
                    v164 = *((_QWORD *)v147 + 1);
                    v165 = v163 >= v164;
                    if (v163 == v164)
                    {
                      v166 = *(_QWORD *)v162;
                      v167 = *(_QWORD *)v147;
                      v168 = *(const char ***)(*(_QWORD *)v147 + 8);
                      v169 = *(const char ***)(*(_QWORD *)v162 + 8);
                      if (v168 == v169)
                      {
                        result = *(_QWORD *)(v167 + 16);
                        v177 = *(const WTF::StringImpl **)(v166 + 16);
                        if ((const WTF::StringImpl *)result == v177)
                        {
                          v178 = *(_DWORD *)v167 < *(_DWORD *)v166;
                          if (*(_DWORD *)v167 == *(_DWORD *)v166)
                            v178 = *(_DWORD *)(v167 + 24) < *(_DWORD *)(v166 + 24);
                          if (!v178)
                            goto LABEL_411;
                          goto LABEL_393;
                        }
                        result = WTF::codePointCompare((WTF *)result, v177, a3);
                        if ((result & 0x80000000) != 0)
                        {
                          v163 = *((_QWORD *)v147 + 1);
                          goto LABEL_393;
                        }
                      }
                      else
                      {
                        if (v168)
                        {
                          if (!v169)
                            goto LABEL_411;
                          result = strcmp(*v168, *v169);
                          if ((result & 0x80000000) == 0)
                            goto LABEL_411;
                        }
LABEL_393:
                        v170 = *(_QWORD *)v147;
                        do
                        {
                          while (1)
                          {
                            while (1)
                            {
                              while (1)
                              {
                                *(_OWORD *)v147 = *(_OWORD *)v162;
                                if (v160 < 2)
                                  goto LABEL_410;
                                v147 = v162;
                                v160 = v161 - 1;
                                v161 = (v161 - 1) >> 1;
                                v162 = &v7[16 * v161];
                                v171 = *((_QWORD *)v162 + 1);
                                if (v171 == v163)
                                  break;
                                if (v171 >= v163)
                                  goto LABEL_409;
                              }
                              v172 = *(_QWORD *)v162;
                              v173 = *(const char ***)(v170 + 8);
                              v174 = *(const char ***)(*(_QWORD *)v162 + 8);
                              if (v173 == v174)
                                break;
                              if (v173)
                              {
                                if (!v174)
                                  goto LABEL_409;
                                result = strcmp(*v173, *v174);
                                if ((result & 0x80000000) == 0)
                                  goto LABEL_409;
                              }
                            }
                            result = *(_QWORD *)(v170 + 16);
                            v175 = *(const WTF::StringImpl **)(v172 + 16);
                            if ((const WTF::StringImpl *)result == v175)
                              break;
                            result = WTF::codePointCompare((WTF *)result, v175, a3);
                            if ((result & 0x80000000) == 0)
                              goto LABEL_409;
                          }
                          v176 = *(_DWORD *)v170 < *(_DWORD *)v172;
                          if (*(_DWORD *)v170 == *(_DWORD *)v172)
                            v176 = *(_DWORD *)(v170 + 24) < *(_DWORD *)(v172 + 24);
                        }
                        while (v176);
LABEL_409:
                        v162 = v147;
LABEL_410:
                        *(_QWORD *)v162 = v170;
                        *((_QWORD *)v162 + 1) = v163;
                      }
                    }
                    else
                    {
                      v163 = *((_QWORD *)v147 + 1);
                      if (!v165)
                        goto LABEL_393;
                    }
                  }
                }
LABEL_411:
                v27 = v143-- <= 2;
                if (v27)
                  return result;
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v7[16 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>((uint64_t)v13, v7, v200);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>((uint64_t)v7, v13, v200);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>((uint64_t)(v7 + 16), (_QWORD *)v13 - 2, (const WTF::StringImpl *)(a2 - 32));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>((uint64_t)(v7 + 32), &v7[16 * v12 + 16], (const WTF::StringImpl *)(a2 - 48));
          result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>((uint64_t)(v13 - 16), v13, (const WTF::StringImpl *)&v7[16 * v12 + 16]);
          v201 = *(_OWORD *)v7;
          *(_OWORD *)v7 = *(_OWORD *)v13;
          *(_OWORD *)v13 = v201;
        }
        v5 = (const WTF::StringImpl *)((char *)v5 - 1);
        if ((a4 & 1) != 0)
          goto LABEL_17;
        v14 = *((_QWORD *)v7 - 1);
        v15 = *((_QWORD *)v7 + 1);
        if (v14 != v15)
        {
          if (v14 < v15)
            goto LABEL_17;
          v14 = *((_QWORD *)v7 + 1);
          goto LABEL_129;
        }
        v16 = *((_QWORD *)v7 - 2);
        v8 = *(const char ***)v7;
        v17 = *(const char ***)(*(_QWORD *)v7 + 8);
        v18 = *(const char ***)(v16 + 8);
        if (v17 != v18)
        {
          if (!v17)
            goto LABEL_17;
          if (v18)
          {
            result = strcmp(*v17, *v18);
            if ((result & 0x80000000) != 0)
              goto LABEL_17;
          }
LABEL_129:
          v54 = *(_QWORD *)v7;
          v19 = *((_QWORD *)a2 - 1);
          if (v14 == v19)
          {
            v19 = *(_QWORD *)v200;
            v8 = *(const char ***)(*(_QWORD *)v200 + 8);
            v55 = *(const char ***)(v54 + 8);
            if (v8 == v55)
            {
              result = *(_QWORD *)(v19 + 16);
              v69 = *(const WTF::StringImpl **)(v54 + 16);
              if ((const WTF::StringImpl *)result == v69)
              {
                v8 = (const char **)*(unsigned int *)v19;
                v73 = (int)v8 < *(_DWORD *)v54;
                if ((_DWORD)v8 == *(_DWORD *)v54)
                {
                  v19 = *(unsigned int *)(v19 + 24);
                  v8 = (const char **)*(unsigned int *)(v54 + 24);
                  v73 = (int)v19 < (int)v8;
                }
                if (v73)
                {
LABEL_136:
                  for (i = (unint64_t *)(v7 + 16); i != (unint64_t *)a2; i += 2)
                  {
                    v19 = i[1];
                    if (v14 == v19)
                    {
                      v19 = *i;
                      v8 = *(const char ***)(*i + 8);
                      v56 = *(const char ***)(v54 + 8);
                      if (v8 == v56)
                      {
                        result = *(_QWORD *)(v19 + 16);
                        v57 = *(const WTF::StringImpl **)(v54 + 16);
                        if ((const WTF::StringImpl *)result == v57)
                        {
                          v8 = (const char **)*(unsigned int *)v19;
                          v58 = (int)v8 < *(_DWORD *)v54;
                          if ((_DWORD)v8 == *(_DWORD *)v54)
                          {
                            v19 = *(unsigned int *)(v19 + 24);
                            v8 = (const char **)*(unsigned int *)(v54 + 24);
                            v58 = (int)v19 < (int)v8;
                          }
                          if (v58)
                            goto LABEL_153;
                        }
                        else
                        {
                          result = WTF::codePointCompare((WTF *)result, v57, a3);
                          if ((result & 0x80000000) != 0)
                            goto LABEL_153;
                        }
                      }
                      else
                      {
                        if (!v8)
                          goto LABEL_153;
                        if (v56)
                        {
                          result = strcmp(*v8, *v56);
                          if ((result & 0x80000000) != 0)
                            goto LABEL_153;
                        }
                      }
                    }
                    else if (v14 < v19)
                    {
                      goto LABEL_153;
                    }
                  }
                  goto LABEL_459;
                }
              }
              else
              {
                result = WTF::codePointCompare((WTF *)result, v69, a3);
                if ((result & 0x80000000) != 0)
                  goto LABEL_136;
              }
            }
            else
            {
              if (!v8)
                goto LABEL_136;
              if (v55)
              {
                result = strcmp(*v8, *v55);
                if ((result & 0x80000000) != 0)
                  goto LABEL_136;
              }
            }
          }
          else if (v14 < v19)
          {
            goto LABEL_136;
          }
          for (i = (unint64_t *)(v7 + 16); i < (unint64_t *)a2; i += 2)
          {
            v19 = i[1];
            if (v14 == v19)
            {
              v19 = *i;
              v8 = *(const char ***)(*i + 8);
              v70 = *(const char ***)(v54 + 8);
              if (v8 == v70)
              {
                result = *(_QWORD *)(v19 + 16);
                v71 = *(const WTF::StringImpl **)(v54 + 16);
                if ((const WTF::StringImpl *)result == v71)
                {
                  v8 = (const char **)*(unsigned int *)v19;
                  v72 = (int)v8 < *(_DWORD *)v54;
                  if ((_DWORD)v8 == *(_DWORD *)v54)
                  {
                    v19 = *(unsigned int *)(v19 + 24);
                    v8 = (const char **)*(unsigned int *)(v54 + 24);
                    v72 = (int)v19 < (int)v8;
                  }
                  if (v72)
                    break;
                }
                else
                {
                  result = WTF::codePointCompare((WTF *)result, v71, a3);
                  if ((result & 0x80000000) != 0)
                    break;
                }
              }
              else
              {
                if (!v8)
                  break;
                if (v70)
                {
                  result = strcmp(*v8, *v70);
                  if ((result & 0x80000000) != 0)
                    break;
                }
              }
            }
            else if (v14 < v19)
            {
              break;
            }
          }
LABEL_153:
          v59 = (unint64_t *)a2;
          if (i < (unint64_t *)a2)
          {
            v59 = (unint64_t *)(a2 - 16);
            if (a2 != v7)
            {
              while (1)
              {
                v19 = v59[1];
                if (v14 == v19)
                {
                  v19 = *v59;
                  v8 = *(const char ***)(*v59 + 8);
                  v60 = *(const char ***)(v54 + 8);
                  if (v8 == v60)
                  {
                    result = *(_QWORD *)(v19 + 16);
                    v61 = *(const WTF::StringImpl **)(v54 + 16);
                    if ((const WTF::StringImpl *)result == v61)
                    {
                      v8 = (const char **)*(unsigned int *)v19;
                      v62 = (int)v8 < *(_DWORD *)v54;
                      if ((_DWORD)v8 == *(_DWORD *)v54)
                      {
                        v19 = *(unsigned int *)(v19 + 24);
                        v8 = (const char **)*(unsigned int *)(v54 + 24);
                        v62 = (int)v19 < (int)v8;
                      }
                      if (!v62)
                        goto LABEL_205;
                    }
                    else
                    {
                      result = WTF::codePointCompare((WTF *)result, v61, a3);
                      if ((result & 0x80000000) == 0)
                        goto LABEL_205;
                    }
                  }
                  else if (v8)
                  {
                    if (!v60)
                      goto LABEL_205;
                    result = strcmp(*v8, *v60);
                    if ((result & 0x80000000) == 0)
                      goto LABEL_205;
                  }
                }
                else if (v14 >= v19)
                {
                  goto LABEL_205;
                }
                v59 -= 2;
                v19 = (unint64_t)(v59 + 2);
                if (v59 + 2 == (unint64_t *)v7)
                  goto LABEL_459;
              }
            }
            goto LABEL_459;
          }
LABEL_205:
          if (i < v59)
          {
            v203 = *(_OWORD *)i;
            *(_OWORD *)i = *(_OWORD *)v59;
            *(_OWORD *)v59 = v203;
            while (1)
            {
              i += 2;
              if (i == (unint64_t *)a2)
                goto LABEL_459;
              v19 = i[1];
              if (v14 == v19)
              {
                v19 = *i;
                v8 = *(const char ***)(*i + 8);
                v63 = *(const char ***)(v54 + 8);
                if (v8 == v63)
                {
                  result = *(_QWORD *)(v19 + 16);
                  v64 = *(const WTF::StringImpl **)(v54 + 16);
                  if ((const WTF::StringImpl *)result == v64)
                  {
                    v8 = (const char **)*(unsigned int *)v19;
                    v65 = (int)v8 < *(_DWORD *)v54;
                    if ((_DWORD)v8 == *(_DWORD *)v54)
                    {
                      v19 = *(unsigned int *)(v19 + 24);
                      v8 = (const char **)*(unsigned int *)(v54 + 24);
                      v65 = (int)v19 < (int)v8;
                    }
                    if (v65)
                    {
LABEL_188:
                      if (v59 != (unint64_t *)v7)
                      {
                        v59 -= 2;
                        while (1)
                        {
                          v19 = v59[1];
                          if (v14 == v19)
                          {
                            v19 = *v59;
                            v8 = *(const char ***)(*v59 + 8);
                            v66 = *(const char ***)(v54 + 8);
                            if (v8 == v66)
                            {
                              result = *(_QWORD *)(v19 + 16);
                              v67 = *(const WTF::StringImpl **)(v54 + 16);
                              if ((const WTF::StringImpl *)result == v67)
                              {
                                v8 = (const char **)*(unsigned int *)v19;
                                v68 = (int)v8 < *(_DWORD *)v54;
                                if ((_DWORD)v8 == *(_DWORD *)v54)
                                {
                                  v19 = *(unsigned int *)(v19 + 24);
                                  v8 = (const char **)*(unsigned int *)(v54 + 24);
                                  v68 = (int)v19 < (int)v8;
                                }
                                if (!v68)
                                  goto LABEL_205;
                              }
                              else
                              {
                                result = WTF::codePointCompare((WTF *)result, v67, a3);
                                if ((result & 0x80000000) == 0)
                                  goto LABEL_205;
                              }
                            }
                            else if (v8)
                            {
                              if (!v66)
                                goto LABEL_205;
                              result = strcmp(*v8, *v66);
                              if ((result & 0x80000000) == 0)
                                goto LABEL_205;
                            }
                          }
                          else if (v14 >= v19)
                          {
                            goto LABEL_205;
                          }
                          v59 -= 2;
                          v19 = (unint64_t)(v59 + 2);
                          if (v59 + 2 == (unint64_t *)v7)
                            goto LABEL_459;
                        }
                      }
                      goto LABEL_459;
                    }
                  }
                  else
                  {
                    result = WTF::codePointCompare((WTF *)result, v64, a3);
                    if ((result & 0x80000000) != 0)
                      goto LABEL_188;
                  }
                }
                else
                {
                  if (!v8)
                    goto LABEL_188;
                  if (v63)
                  {
                    result = strcmp(*v8, *v63);
                    if ((result & 0x80000000) != 0)
                      goto LABEL_188;
                  }
                }
              }
              else if (v14 < v19)
              {
                goto LABEL_188;
              }
            }
          }
          if (i - 2 != (unint64_t *)v7)
            *(_OWORD *)v7 = *((_OWORD *)i - 1);
          a4 = 0;
          *(i - 2) = v54;
          *(i - 1) = v14;
          continue;
        }
        result = (uint64_t)v8[2];
        v52 = *(const WTF::StringImpl **)(v16 + 16);
        if ((const WTF::StringImpl *)result != v52)
        {
          result = WTF::codePointCompare((WTF *)result, v52, a3);
          if ((result & 0x80000000) != 0)
            goto LABEL_17;
          v14 = *((_QWORD *)v7 + 1);
          goto LABEL_129;
        }
        v53 = *(_DWORD *)v8 < *(_DWORD *)v16;
        if (*(_DWORD *)v8 == *(_DWORD *)v16)
        {
          v8 = (const char **)*((unsigned int *)v8 + 6);
          v53 = (int)v8 < *(_DWORD *)(v16 + 24);
        }
        if (!v53)
          goto LABEL_129;
LABEL_17:
        v19 = (unint64_t)(v7 + 16);
        if (v7 + 16 == a2)
          goto LABEL_459;
        v20 = 0;
        v22 = *(const char ***)v7;
        v21 = *((_QWORD *)v7 + 1);
        while (2)
        {
          v8 = *(const char ***)&v7[v20 + 24];
          if (v8 != (const char **)v21)
          {
            if ((unint64_t)v8 >= v21)
              goto LABEL_34;
LABEL_26:
            v20 += 16;
            v19 = (unint64_t)&v7[v20 + 16];
            if ((char *)v19 == a2)
              goto LABEL_459;
            continue;
          }
          break;
        }
        v23 = *(_QWORD *)&v7[v20 + 16];
        v8 = (const char **)v22[1];
        v24 = *(const char ***)(v23 + 8);
        if (v8 != v24)
        {
          if (v8 && (!v24 || (strcmp(*v8, *v24) & 0x80000000) == 0))
            goto LABEL_34;
          goto LABEL_26;
        }
        v25 = (WTF *)v22[2];
        v26 = *(const WTF::StringImpl **)(v23 + 16);
        if (v25 != v26)
        {
          if ((WTF::codePointCompare(v25, v26, a3) & 0x80000000) == 0)
            goto LABEL_34;
          goto LABEL_26;
        }
        v8 = (const char **)*(unsigned int *)v22;
        v27 = (int)v8 < *(_DWORD *)v23;
        if ((_DWORD)v8 == *(_DWORD *)v23)
        {
          v8 = (const char **)*((unsigned int *)v22 + 6);
          v27 = (int)v8 < *(_DWORD *)(v23 + 24);
        }
        if (v27)
          goto LABEL_26;
LABEL_34:
        v19 = (unint64_t)&v7[v20];
        v28 = (unint64_t)&v7[v20 + 16];
        if (v20)
        {
          v29 = (unint64_t *)(a2 - 16);
          if (a2 != v7)
          {
            do
            {
              v19 = v29[1];
              if (v19 == v21)
              {
                v19 = *v29;
                v8 = (const char **)v22[1];
                v30 = *(const char ***)(*v29 + 8);
                if (v8 == v30)
                {
                  v31 = (WTF *)v22[2];
                  v32 = *(const WTF::StringImpl **)(v19 + 16);
                  if (v31 == v32)
                  {
                    v8 = (const char **)*(unsigned int *)v22;
                    v33 = (int)v8 < *(_DWORD *)v19;
                    if ((_DWORD)v8 == *(_DWORD *)v19)
                    {
                      v8 = (const char **)*((unsigned int *)v22 + 6);
                      v19 = *(unsigned int *)(v19 + 24);
                      v33 = (int)v8 < (int)v19;
                    }
                    if (v33)
                      goto LABEL_78;
                  }
                  else if ((WTF::codePointCompare(v31, v32, a3) & 0x80000000) != 0)
                  {
                    goto LABEL_78;
                  }
                }
                else if (!v8 || v30 && strcmp(*v8, *v30) < 0)
                {
                  goto LABEL_78;
                }
              }
              else if (v19 < v21)
              {
                goto LABEL_78;
              }
              v29 -= 2;
              v19 = (unint64_t)(v29 + 2);
            }
            while (v29 + 2 != (unint64_t *)v7);
          }
LABEL_459:
          __break(1u);
LABEL_460:
          result = (uint64_t)v8[2];
          v197 = *(const WTF::StringImpl **)(v19 + 16);
          if ((const WTF::StringImpl *)result == v197)
          {
            v198 = *(_DWORD *)v8 < *(_DWORD *)v19;
            if (*(_DWORD *)v8 == *(_DWORD *)v19)
              v198 = *((_DWORD *)v8 + 6) < *(_DWORD *)(v19 + 24);
            if (!v198)
              return result;
          }
          else
          {
            result = WTF::codePointCompare((WTF *)result, v197, a3);
            if ((result & 0x80000000) == 0)
              return result;
          }
LABEL_422:
          v205 = *(_OWORD *)v7;
          *(_OWORD *)v7 = *(_OWORD *)v200;
          *(_OWORD *)v200 = v205;
          return result;
        }
        v29 = (unint64_t *)a2;
        if (v28 < (unint64_t)a2)
        {
          v34 = (unint64_t *)(a2 - 16);
          do
          {
            while (1)
            {
              while (1)
              {
                v29 = v34;
                v19 = v34[1];
                v34 -= 2;
                if (v19 == v21)
                  break;
                v36 = v19 < v21 || v28 >= (unint64_t)v29;
                if (v36)
                  goto LABEL_78;
              }
              v19 = *v29;
              v8 = (const char **)v22[1];
              v35 = *(const char ***)(*v29 + 8);
              if (v8 == v35)
                break;
              if (!v8 || v35 && strcmp(*v8, *v35) < 0)
                goto LABEL_78;
LABEL_69:
              if (v28 >= (unint64_t)v29)
                goto LABEL_78;
            }
            v37 = (WTF *)v22[2];
            v38 = *(const WTF::StringImpl **)(v19 + 16);
            if (v37 != v38)
            {
              if ((WTF::codePointCompare(v37, v38, a3) & 0x80000000) != 0)
                break;
              goto LABEL_69;
            }
            v8 = (const char **)*(unsigned int *)v22;
            v39 = (int)v8 < *(_DWORD *)v19;
            if ((_DWORD)v8 == *(_DWORD *)v19)
            {
              v8 = (const char **)*((unsigned int *)v22 + 6);
              v19 = *(unsigned int *)(v19 + 24);
              v39 = (int)v8 < (int)v19;
            }
          }
          while (!v39 && v28 < (unint64_t)v29);
        }
LABEL_78:
        i = (unint64_t *)v28;
        if (v28 >= (unint64_t)v29)
          goto LABEL_115;
        v41 = v29;
        while (2)
        {
          v202 = *(_OWORD *)i;
          *(_OWORD *)i = *(_OWORD *)v41;
          *(_OWORD *)v41 = v202;
          do
          {
            while (1)
            {
              while (1)
              {
                while (1)
                {
                  i += 2;
                  if (i == (unint64_t *)a2)
                    goto LABEL_459;
                  v19 = i[1];
                  if (v19 == v21)
                    break;
                  if (v19 >= v21)
                    goto LABEL_96;
                }
                v19 = *i;
                v8 = (const char **)v22[1];
                v42 = *(const char ***)(*i + 8);
                if (v8 == v42)
                  break;
                if (v8 && (!v42 || (strcmp(*v8, *v42) & 0x80000000) == 0))
                  goto LABEL_96;
              }
              v43 = (WTF *)v22[2];
              v44 = *(const WTF::StringImpl **)(v19 + 16);
              if (v43 == v44)
                break;
              if ((WTF::codePointCompare(v43, v44, a3) & 0x80000000) == 0)
                goto LABEL_96;
            }
            v8 = (const char **)*(unsigned int *)v22;
            v45 = (int)v8 < *(_DWORD *)v19;
            if ((_DWORD)v8 == *(_DWORD *)v19)
            {
              v8 = (const char **)*((unsigned int *)v22 + 6);
              v19 = *(unsigned int *)(v19 + 24);
              v45 = (int)v8 < (int)v19;
            }
          }
          while (v45);
LABEL_96:
          if (v41 == (unint64_t *)v7)
            goto LABEL_459;
          v41 -= 2;
          while (2)
          {
            v19 = v41[1];
            if (v19 != v21)
            {
              if (v19 < v21)
                break;
              goto LABEL_105;
            }
            v19 = *v41;
            v8 = (const char **)v22[1];
            v46 = *(const char ***)(*v41 + 8);
            if (v8 != v46)
            {
              if (!v8 || v46 && strcmp(*v8, *v46) < 0)
                break;
              goto LABEL_105;
            }
            v47 = (WTF *)v22[2];
            v48 = *(const WTF::StringImpl **)(v19 + 16);
            if (v47 != v48)
            {
              if ((WTF::codePointCompare(v47, v48, a3) & 0x80000000) != 0)
                break;
              goto LABEL_105;
            }
            v8 = (const char **)*(unsigned int *)v22;
            v49 = (int)v8 < *(_DWORD *)v19;
            if ((_DWORD)v8 == *(_DWORD *)v19)
            {
              v8 = (const char **)*((unsigned int *)v22 + 6);
              v19 = *(unsigned int *)(v19 + 24);
              v49 = (int)v8 < (int)v19;
            }
            if (!v49)
            {
LABEL_105:
              v41 -= 2;
              v19 = (unint64_t)(v41 + 2);
              if (v41 + 2 == (unint64_t *)v7)
                goto LABEL_459;
              continue;
            }
            break;
          }
          if (i < v41)
            continue;
          break;
        }
LABEL_115:
        if (i - 2 != (unint64_t *)v7)
          *(_OWORD *)v7 = *((_OWORD *)i - 1);
        *(i - 2) = (unint64_t)v22;
        *(i - 1) = v21;
        if (v28 < (unint64_t)v29)
        {
LABEL_120:
          result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *,false>(v7, i - 2, v5, a4 & 1);
          a4 = 0;
          continue;
        }
        v50 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>(v7, i - 2, a3);
        result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>(i, a2, v51);
        if (!(_DWORD)result)
        {
          if (v50)
            continue;
          goto LABEL_120;
        }
        a2 = (char *)(i - 2);
        if (!v50)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>(uint64_t result, _QWORD *a2, const WTF::StringImpl *a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char **v10;
  const char **v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char **v15;
  const char **v16;
  __int128 v17;
  const WTF::StringImpl *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char **v22;
  const char **v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char **v29;
  const char **v30;
  __int128 v31;
  const WTF::StringImpl *v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char **v38;
  const char **v39;
  const WTF::StringImpl *v40;
  BOOL v41;
  const WTF::StringImpl *v42;
  const WTF::StringImpl *v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;

  v5 = (_QWORD *)result;
  v6 = a2[1];
  v7 = *(_QWORD *)(result + 8);
  if (v6 == v7)
  {
    v8 = *a2;
    v9 = *(_QWORD *)result;
    v10 = *(const char ***)(*(_QWORD *)result + 8);
    v11 = *(const char ***)(*a2 + 8);
    if (v10 != v11)
    {
      if (v10)
      {
        if (!v11)
          goto LABEL_18;
        result = strcmp(*v10, *v11);
        if ((result & 0x80000000) == 0)
          goto LABEL_18;
      }
LABEL_8:
      v12 = *((_QWORD *)a3 + 1);
      if (v12 == v6)
      {
        v13 = *(_QWORD *)a3;
        v14 = *a2;
        v15 = *(const char ***)(*a2 + 8);
        v16 = *(const char ***)(*(_QWORD *)a3 + 8);
        if (v15 != v16)
        {
          if (v15)
          {
            if (!v16)
              goto LABEL_35;
            result = strcmp(*v15, *v16);
            if ((result & 0x80000000) == 0)
              goto LABEL_35;
          }
LABEL_15:
          v17 = *(_OWORD *)v5;
          *(_OWORD *)v5 = *(_OWORD *)a3;
          goto LABEL_43;
        }
        result = *(_QWORD *)(v14 + 16);
        v32 = *(const WTF::StringImpl **)(v13 + 16);
        if ((const WTF::StringImpl *)result == v32)
        {
          v44 = *(_DWORD *)v14 < *(_DWORD *)v13;
          if (*(_DWORD *)v14 == *(_DWORD *)v13)
            v44 = *(_DWORD *)(v14 + 24) < *(_DWORD *)(v13 + 24);
          if (!v44)
            goto LABEL_35;
          goto LABEL_15;
        }
        result = WTF::codePointCompare((WTF *)result, v32, a3);
        if ((result & 0x80000000) != 0)
          goto LABEL_15;
      }
      else if (v12 < v6)
      {
        goto LABEL_15;
      }
LABEL_35:
      v33 = *(_OWORD *)v5;
      *(_OWORD *)v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v33;
      v34 = *((_QWORD *)a3 + 1);
      v35 = a2[1];
      if (v34 == v35)
      {
        v36 = *(_QWORD *)a3;
        v37 = *a2;
        v38 = *(const char ***)(*a2 + 8);
        v39 = *(const char ***)(*(_QWORD *)a3 + 8);
        if (v38 == v39)
        {
          result = *(_QWORD *)(v37 + 16);
          v43 = *(const WTF::StringImpl **)(v36 + 16);
          if ((const WTF::StringImpl *)result == v43)
          {
            v47 = *(_DWORD *)v37 < *(_DWORD *)v36;
            if (*(_DWORD *)v37 == *(_DWORD *)v36)
              v47 = *(_DWORD *)(v37 + 24) < *(_DWORD *)(v36 + 24);
            if (!v47)
              return result;
          }
          else
          {
            result = WTF::codePointCompare((WTF *)result, v43, a3);
            if ((result & 0x80000000) == 0)
              return result;
          }
        }
        else if (v38)
        {
          if (!v39)
            return result;
          result = strcmp(*v38, *v39);
          if ((result & 0x80000000) == 0)
            return result;
        }
      }
      else if (v34 >= v35)
      {
        return result;
      }
      v17 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
LABEL_43:
      *(_OWORD *)a3 = v17;
      return result;
    }
    result = *(_QWORD *)(v9 + 16);
    v18 = *(const WTF::StringImpl **)(v8 + 16);
    if ((const WTF::StringImpl *)result == v18)
    {
      v41 = *(_DWORD *)v9 < *(_DWORD *)v8;
      if (*(_DWORD *)v9 == *(_DWORD *)v8)
        v41 = *(_DWORD *)(v9 + 24) < *(_DWORD *)(v8 + 24);
      if (!v41)
        goto LABEL_18;
      goto LABEL_8;
    }
    result = WTF::codePointCompare((WTF *)result, v18, a3);
    v6 = a2[1];
    if ((result & 0x80000000) != 0)
      goto LABEL_8;
  }
  else if (v6 < v7)
  {
    goto LABEL_8;
  }
LABEL_18:
  v19 = *((_QWORD *)a3 + 1);
  if (v19 == v6)
  {
    v20 = *(_QWORD *)a3;
    v21 = *a2;
    v22 = *(const char ***)(*a2 + 8);
    v23 = *(const char ***)(*(_QWORD *)a3 + 8);
    if (v22 == v23)
    {
      result = *(_QWORD *)(v21 + 16);
      v40 = *(const WTF::StringImpl **)(v20 + 16);
      if ((const WTF::StringImpl *)result == v40)
      {
        v45 = *(_DWORD *)v21 < *(_DWORD *)v20;
        if (*(_DWORD *)v21 == *(_DWORD *)v20)
          v45 = *(_DWORD *)(v21 + 24) < *(_DWORD *)(v20 + 24);
        if (!v45)
          return result;
      }
      else
      {
        result = WTF::codePointCompare((WTF *)result, v40, a3);
        if ((result & 0x80000000) == 0)
          return result;
      }
    }
    else if (v22)
    {
      if (!v23)
        return result;
      result = strcmp(*v22, *v23);
      if ((result & 0x80000000) == 0)
        return result;
    }
  }
  else if (v19 >= v6)
  {
    return result;
  }
  v24 = *(_OWORD *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v24;
  v25 = a2[1];
  v26 = v5[1];
  if (v25 != v26)
  {
    if (v25 >= v26)
      return result;
    goto LABEL_32;
  }
  v27 = *a2;
  v28 = *v5;
  v29 = *(const char ***)(*v5 + 8);
  v30 = *(const char ***)(*a2 + 8);
  if (v29 != v30)
  {
    if (v29)
    {
      if (!v30)
        return result;
      result = strcmp(*v29, *v30);
      if ((result & 0x80000000) == 0)
        return result;
    }
LABEL_32:
    v31 = *(_OWORD *)v5;
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v31;
    return result;
  }
  result = *(_QWORD *)(v28 + 16);
  v42 = *(const WTF::StringImpl **)(v27 + 16);
  if ((const WTF::StringImpl *)result != v42)
  {
    result = WTF::codePointCompare((WTF *)result, v42, a3);
    if ((result & 0x80000000) == 0)
      return result;
    goto LABEL_32;
  }
  v46 = *(_DWORD *)v28 < *(_DWORD *)v27;
  if (*(_DWORD *)v28 == *(_DWORD *)v27)
    v46 = *(_DWORD *)(v28 + 24) < *(_DWORD *)(v27 + 24);
  if (v46)
    goto LABEL_32;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>(_QWORD *a1, _QWORD *a2, const WTF::StringImpl *a3)
{
  _QWORD *v3;
  uint64_t v5;
  _BOOL8 result;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char **v12;
  const char **v13;
  _QWORD *v14;
  const WTF::StringImpl *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char **v23;
  const char **v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  const char **v31;
  const char **v32;
  WTF *v33;
  const WTF::StringImpl *v34;
  BOOL v35;
  WTF *v36;
  const WTF::StringImpl *v37;
  BOOL v38;
  __int128 v39;
  WTF *v40;
  const WTF::StringImpl *v41;
  BOOL v42;
  _QWORD *v43;

  v3 = a2;
  v5 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 2;
      v8 = *(a2 - 1);
      v9 = a1[1];
      if (v8 != v9)
      {
        if (v8 >= v9)
          return result;
        goto LABEL_51;
      }
      v10 = *v7;
      v11 = *a1;
      v12 = *(const char ***)(*a1 + 8);
      v13 = *(const char ***)(*v7 + 8);
      if (v12 == v13)
      {
        v40 = *(WTF **)(v11 + 16);
        v41 = *(const WTF::StringImpl **)(v10 + 16);
        if (v40 == v41)
        {
          v42 = *(_DWORD *)v11 < *(_DWORD *)v10;
          if (*(_DWORD *)v11 == *(_DWORD *)v10)
            v42 = *(_DWORD *)(v11 + 24) < *(_DWORD *)(v10 + 24);
          if (!v42)
            return 1;
        }
        else if ((WTF::codePointCompare(v40, v41, a3) & 0x80000000) == 0)
        {
          return 1;
        }
LABEL_51:
        v39 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v7;
        *(_OWORD *)v7 = v39;
        return 1;
      }
      if (!v12)
        goto LABEL_51;
      if (v13)
      {
        if ((strcmp(*v12, *v13) & 0x80000000) == 0)
          return 1;
        goto LABEL_51;
      }
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>((uint64_t)a1, a1 + 2, (const WTF::StringImpl *)(a2 - 2));
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>(a1, a1 + 2, (const WTF::StringImpl *)(a1 + 4), a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>(a1, a1 + 2, (const WTF::StringImpl *)(a1 + 4), a1 + 6, a2 - 2);
      return 1;
    default:
      v14 = a1 + 4;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>((uint64_t)a1, a1 + 2, (const WTF::StringImpl *)(a1 + 4));
      v16 = a1 + 6;
      if (a1 + 6 == v3)
        return 1;
      v17 = 0;
      v18 = 0;
      v43 = v3;
      while (2)
      {
        v19 = v16[1];
        v20 = v14[1];
        if (v19 == v20)
        {
          v21 = *v16;
          v22 = *v14;
          v23 = *(const char ***)(*v14 + 8);
          v24 = *(const char ***)(*v16 + 8);
          if (v23 == v24)
          {
            v36 = *(WTF **)(v22 + 16);
            v37 = *(const WTF::StringImpl **)(v21 + 16);
            if (v36 == v37)
            {
              v38 = *(_DWORD *)v22 < *(_DWORD *)v21;
              if (*(_DWORD *)v22 == *(_DWORD *)v21)
                v38 = *(_DWORD *)(v22 + 24) < *(_DWORD *)(v21 + 24);
              if (!v38)
                goto LABEL_40;
            }
            else
            {
              if ((WTF::codePointCompare(v36, v37, v15) & 0x80000000) == 0)
                goto LABEL_40;
              v19 = v16[1];
            }
          }
          else if (v23 && (!v24 || (strcmp(*v23, *v24) & 0x80000000) == 0))
          {
            goto LABEL_40;
          }
        }
        else if (v19 >= v20)
        {
          goto LABEL_40;
        }
        v25 = *v16;
        *(_OWORD *)v16 = *(_OWORD *)v14;
        v26 = a1;
        if (v14 == a1)
          goto LABEL_39;
        v27 = v17;
LABEL_19:
        v28 = (uint64_t)a1 + v27 + 16;
        v29 = *(_QWORD *)((char *)a1 + v27 + 24);
        if (v19 == v29)
        {
          v30 = *(_QWORD *)v28;
          v31 = *(const char ***)(*(_QWORD *)v28 + 8);
          v32 = *(const char ***)(v25 + 8);
          if (v31 == v32)
          {
            v33 = *(WTF **)(v30 + 16);
            v34 = *(const WTF::StringImpl **)(v25 + 16);
            if (v33 == v34)
            {
              v35 = *(_DWORD *)v30 < *(_DWORD *)v25;
              if (*(_DWORD *)v30 == *(_DWORD *)v25)
                v35 = *(_DWORD *)(v30 + 24) < *(_DWORD *)(v25 + 24);
              if (!v35)
              {
LABEL_34:
                v26 = v14;
                goto LABEL_38;
              }
            }
            else if ((WTF::codePointCompare(v33, v34, v15) & 0x80000000) == 0)
            {
              goto LABEL_34;
            }
          }
          else if (v31)
          {
            if (!v32)
            {
              v26 = (_QWORD *)((char *)a1 + v27 + 32);
LABEL_38:
              v3 = v43;
LABEL_39:
              *v26 = v25;
              v26[1] = v19;
              if (++v18 != 8)
              {
LABEL_40:
                v14 = v16;
                v17 += 16;
                v16 += 2;
                if (v16 == v3)
                  return 1;
                continue;
              }
              return v16 + 2 == v3;
            }
            if ((strcmp(*v31, *v32) & 0x80000000) == 0)
              goto LABEL_34;
          }
        }
        else if (v19 >= v29)
        {
          goto LABEL_34;
        }
        break;
      }
      v14 -= 2;
      *(_OWORD *)((char *)a1 + v27 + 32) = *(_OWORD *)v28;
      v27 -= 16;
      if (v27 == -32)
      {
        v26 = a1;
        goto LABEL_38;
      }
      goto LABEL_19;
  }
}

uint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>(_QWORD *a1, _QWORD *a2, const WTF::StringImpl *a3, _QWORD *a4)
{
  uint64_t result;
  const WTF::StringImpl *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char **v14;
  const char **v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char **v21;
  const char **v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char **v28;
  const char **v29;
  const WTF::StringImpl *v30;
  __int128 v31;
  const WTF::StringImpl *v32;
  BOOL v33;
  const WTF::StringImpl *v34;
  BOOL v35;
  BOOL v36;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>((uint64_t)a1, a2, a3);
  v10 = a4[1];
  v11 = *((_QWORD *)a3 + 1);
  if (v10 == v11)
  {
    v12 = *a4;
    v13 = *(_QWORD *)a3;
    v14 = *(const char ***)(*(_QWORD *)a3 + 8);
    v15 = *(const char ***)(*a4 + 8);
    if (v14 == v15)
    {
      result = *(_QWORD *)(v13 + 16);
      v30 = *(const WTF::StringImpl **)(v12 + 16);
      if ((const WTF::StringImpl *)result == v30)
      {
        v33 = *(_DWORD *)v13 < *(_DWORD *)v12;
        if (*(_DWORD *)v13 == *(_DWORD *)v12)
          v33 = *(_DWORD *)(v13 + 24) < *(_DWORD *)(v12 + 24);
        if (!v33)
          return result;
      }
      else
      {
        result = WTF::codePointCompare((WTF *)result, v30, v9);
        if ((result & 0x80000000) == 0)
          return result;
      }
    }
    else if (v14)
    {
      if (!v15)
        return result;
      result = strcmp(*v14, *v15);
      if ((result & 0x80000000) == 0)
        return result;
    }
  }
  else if (v10 >= v11)
  {
    return result;
  }
  v16 = *(_OWORD *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)a4 = v16;
  v17 = *((_QWORD *)a3 + 1);
  v18 = a2[1];
  if (v17 == v18)
  {
    v19 = *(_QWORD *)a3;
    v20 = *a2;
    v21 = *(const char ***)(*a2 + 8);
    v22 = *(const char ***)(*(_QWORD *)a3 + 8);
    if (v21 == v22)
    {
      result = *(_QWORD *)(v20 + 16);
      v32 = *(const WTF::StringImpl **)(v19 + 16);
      if ((const WTF::StringImpl *)result == v32)
      {
        v35 = *(_DWORD *)v20 < *(_DWORD *)v19;
        if (*(_DWORD *)v20 == *(_DWORD *)v19)
          v35 = *(_DWORD *)(v20 + 24) < *(_DWORD *)(v19 + 24);
        if (!v35)
          return result;
      }
      else
      {
        result = WTF::codePointCompare((WTF *)result, v32, v9);
        if ((result & 0x80000000) == 0)
          return result;
      }
    }
    else if (v21)
    {
      if (!v22)
        return result;
      result = strcmp(*v21, *v22);
      if ((result & 0x80000000) == 0)
        return result;
    }
  }
  else if (v17 >= v18)
  {
    return result;
  }
  v23 = *(_OWORD *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v23;
  v24 = a2[1];
  v25 = a1[1];
  if (v24 != v25)
  {
    if (v24 >= v25)
      return result;
    goto LABEL_25;
  }
  v26 = *a2;
  v27 = *a1;
  v28 = *(const char ***)(*a1 + 8);
  v29 = *(const char ***)(*a2 + 8);
  if (v28 != v29)
  {
    if (v28)
    {
      if (!v29)
        return result;
      result = strcmp(*v28, *v29);
      if ((result & 0x80000000) == 0)
        return result;
    }
LABEL_25:
    v31 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v31;
    return result;
  }
  result = *(_QWORD *)(v27 + 16);
  v34 = *(const WTF::StringImpl **)(v26 + 16);
  if ((const WTF::StringImpl *)result != v34)
  {
    result = WTF::codePointCompare((WTF *)result, v34, v9);
    if ((result & 0x80000000) == 0)
      return result;
    goto LABEL_25;
  }
  v36 = *(_DWORD *)v27 < *(_DWORD *)v26;
  if (*(_DWORD *)v27 == *(_DWORD *)v26)
    v36 = *(_DWORD *)(v27 + 24) < *(_DWORD *)(v26 + 24);
  if (v36)
    goto LABEL_25;
  return result;
}

uint64_t std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>(_QWORD *a1, _QWORD *a2, const WTF::StringImpl *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t result;
  const WTF::StringImpl *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char **v16;
  const char **v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char **v23;
  const char **v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char **v30;
  const char **v31;
  const WTF::StringImpl *v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char **v38;
  const char **v39;
  const WTF::StringImpl *v40;
  BOOL v41;
  __int128 v42;
  const WTF::StringImpl *v43;
  BOOL v44;
  const WTF::StringImpl *v45;
  BOOL v46;
  BOOL v47;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WTF::Spectrum<JSC::ICEvent,unsigned long long>::KeyAndCount *>(a1, a2, a3, a4);
  v12 = a5[1];
  v13 = a4[1];
  if (v12 == v13)
  {
    v14 = *a5;
    v15 = *a4;
    v16 = *(const char ***)(*a4 + 8);
    v17 = *(const char ***)(*a5 + 8);
    if (v16 == v17)
    {
      result = *(_QWORD *)(v15 + 16);
      v32 = *(const WTF::StringImpl **)(v14 + 16);
      if ((const WTF::StringImpl *)result == v32)
      {
        v41 = *(_DWORD *)v15 < *(_DWORD *)v14;
        if (*(_DWORD *)v15 == *(_DWORD *)v14)
          v41 = *(_DWORD *)(v15 + 24) < *(_DWORD *)(v14 + 24);
        if (!v41)
          return result;
      }
      else
      {
        result = WTF::codePointCompare((WTF *)result, v32, v11);
        if ((result & 0x80000000) == 0)
          return result;
      }
    }
    else if (v16)
    {
      if (!v17)
        return result;
      result = strcmp(*v16, *v17);
      if ((result & 0x80000000) == 0)
        return result;
    }
  }
  else if (v12 >= v13)
  {
    return result;
  }
  v18 = *(_OWORD *)a4;
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_OWORD *)a5 = v18;
  v19 = a4[1];
  v20 = *((_QWORD *)a3 + 1);
  if (v19 == v20)
  {
    v21 = *a4;
    v22 = *(_QWORD *)a3;
    v23 = *(const char ***)(*(_QWORD *)a3 + 8);
    v24 = *(const char ***)(*a4 + 8);
    if (v23 == v24)
    {
      result = *(_QWORD *)(v22 + 16);
      v40 = *(const WTF::StringImpl **)(v21 + 16);
      if ((const WTF::StringImpl *)result == v40)
      {
        v44 = *(_DWORD *)v22 < *(_DWORD *)v21;
        if (*(_DWORD *)v22 == *(_DWORD *)v21)
          v44 = *(_DWORD *)(v22 + 24) < *(_DWORD *)(v21 + 24);
        if (!v44)
          return result;
      }
      else
      {
        result = WTF::codePointCompare((WTF *)result, v40, v11);
        if ((result & 0x80000000) == 0)
          return result;
      }
    }
    else if (v23)
    {
      if (!v24)
        return result;
      result = strcmp(*v23, *v24);
      if ((result & 0x80000000) == 0)
        return result;
    }
  }
  else if (v19 >= v20)
  {
    return result;
  }
  v25 = *(_OWORD *)a3;
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)a4 = v25;
  v26 = *((_QWORD *)a3 + 1);
  v27 = a2[1];
  if (v26 == v27)
  {
    v28 = *(_QWORD *)a3;
    v29 = *a2;
    v30 = *(const char ***)(*a2 + 8);
    v31 = *(const char ***)(*(_QWORD *)a3 + 8);
    if (v30 == v31)
    {
      result = *(_QWORD *)(v29 + 16);
      v43 = *(const WTF::StringImpl **)(v28 + 16);
      if ((const WTF::StringImpl *)result == v43)
      {
        v46 = *(_DWORD *)v29 < *(_DWORD *)v28;
        if (*(_DWORD *)v29 == *(_DWORD *)v28)
          v46 = *(_DWORD *)(v29 + 24) < *(_DWORD *)(v28 + 24);
        if (!v46)
          return result;
      }
      else
      {
        result = WTF::codePointCompare((WTF *)result, v43, v11);
        if ((result & 0x80000000) == 0)
          return result;
      }
    }
    else if (v30)
    {
      if (!v31)
        return result;
      result = strcmp(*v30, *v31);
      if ((result & 0x80000000) == 0)
        return result;
    }
  }
  else if (v26 >= v27)
  {
    return result;
  }
  v33 = *(_OWORD *)a2;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v33;
  v34 = a2[1];
  v35 = a1[1];
  if (v34 != v35)
  {
    if (v34 >= v35)
      return result;
    goto LABEL_39;
  }
  v36 = *a2;
  v37 = *a1;
  v38 = *(const char ***)(*a1 + 8);
  v39 = *(const char ***)(*a2 + 8);
  if (v38 != v39)
  {
    if (v38)
    {
      if (!v39)
        return result;
      result = strcmp(*v38, *v39);
      if ((result & 0x80000000) == 0)
        return result;
    }
LABEL_39:
    v42 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v42;
    return result;
  }
  result = *(_QWORD *)(v37 + 16);
  v45 = *(const WTF::StringImpl **)(v36 + 16);
  if ((const WTF::StringImpl *)result != v45)
  {
    result = WTF::codePointCompare((WTF *)result, v45, v11);
    if ((result & 0x80000000) == 0)
      return result;
    goto LABEL_39;
  }
  v47 = *(_DWORD *)v37 < *(_DWORD *)v36;
  if (*(_DWORD *)v37 == *(_DWORD *)v36)
    v47 = *(_DWORD *)(v37 + 24) < *(_DWORD *)(v36 + 24);
  if (v47)
    goto LABEL_39;
  return result;
}

void WTF::HashMap<JSC::ICEvent,unsigned long long,WTF::DefaultHash<JSC::ICEvent>,WTF::HashTraits<JSC::ICEvent>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>(uint64_t *a1@<X0>, int *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  int v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int i;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  _DWORD *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::ICEvent,WTF::KeyValuePair<JSC::ICEvent,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::ICEvent,unsigned long long>>,WTF::DefaultHash<JSC::ICEvent>,WTF::HashMap<JSC::ICEvent,unsigned long long,WTF::DefaultHash<JSC::ICEvent>,WTF::HashTraits<JSC::ICEvent>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::ICEvent>>::rehash(a1, 8u, 0), (v13 = *a1) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = *a2;
  v17 = *((_QWORD *)a2 + 1);
  v16 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  v18 = (~(v17 << 32) + v17) ^ ((unint64_t)(~(v17 << 32) + v17) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = a2[6] + *a2 + ((v20 >> 31) ^ v20);
  if (v16)
  {
    v22 = *((_DWORD *)v16 + 4);
    if (v22 < 0x100)
    {
      v23 = WTF::StringImpl::hashSlowCase(v16);
      v15 = *a2;
      v17 = *((_QWORD *)a2 + 1);
      v16 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
    }
    else
    {
      v23 = v22 >> 8;
    }
    v21 += v23;
  }
  v24 = 0;
  for (i = 1; ; ++i)
  {
    v26 = v21 & v14;
    v27 = v13 + 40 * (v21 & v14);
    v28 = *(_DWORD *)v27;
    v29 = *(_QWORD *)(v27 + 8);
    if (*(_DWORD *)v27)
      v30 = 0;
    else
      v30 = v29 == 0;
    if (v30 && !*(_QWORD *)(v27 + 16))
    {
      if (v24)
      {
        *(_DWORD *)v24 = 0;
        *(_QWORD *)(v24 + 8) = 0;
        *(_QWORD *)(v24 + 16) = 0;
        *(_QWORD *)(v24 + 32) = 0;
        --*(_DWORD *)(*a1 - 16);
        v27 = v24;
      }
      *(_OWORD *)v27 = *(_OWORD *)a2;
      v33 = (_DWORD *)*((_QWORD *)a2 + 2);
      if (v33)
        *v33 += 2;
      v34 = *(WTF::StringImpl **)(v27 + 16);
      *(_QWORD *)(v27 + 16) = v33;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
      *(_DWORD *)(v27 + 24) = a2[6];
      *(_QWORD *)(v27 + 32) = *a3;
      v35 = *a1;
      if (*a1)
        v36 = *(_DWORD *)(v35 - 12) + 1;
      else
        v36 = 1;
      *(_DWORD *)(v35 - 12) = v36;
      v39 = *a1;
      if (*a1)
        v40 = *(_DWORD *)(v39 - 12);
      else
        v40 = 0;
      v43 = (*(_DWORD *)(v39 - 16) + v40);
      v44 = *(unsigned int *)(v39 - 4);
      if (v44 > 0x400)
      {
        if (v44 <= 2 * v43)
          goto LABEL_49;
      }
      else if (3 * v44 <= 4 * v43)
      {
        if (!(_DWORD)v44)
        {
          v45 = 8;
LABEL_53:
          v27 = WTF::HashTable<JSC::ICEvent,WTF::KeyValuePair<JSC::ICEvent,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::ICEvent,unsigned long long>>,WTF::DefaultHash<JSC::ICEvent>,WTF::HashMap<JSC::ICEvent,unsigned long long,WTF::DefaultHash<JSC::ICEvent>,WTF::HashTraits<JSC::ICEvent>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::ICEvent>>::rehash(a1, v45, (int *)v27);
          v39 = *a1;
          if (*a1)
            LODWORD(v44) = *(_DWORD *)(v39 - 4);
          else
            LODWORD(v44) = 0;
          goto LABEL_56;
        }
LABEL_49:
        v45 = (_DWORD)v44 << (6 * *(_DWORD *)(v39 - 12) >= (2 * v44));
        goto LABEL_53;
      }
LABEL_56:
      v42 = v39 + 40 * v44;
      v41 = 1;
      goto LABEL_57;
    }
    v31 = v28 == v15 && v29 == v17;
    if (v31 && *(WTF::StringImpl **)(v27 + 16) == v16)
      break;
    if (v28 == 9 && v29 == 0 && !*(_QWORD *)(v27 + 16))
      v24 = v13 + 40 * v26;
    v21 = i + v26;
  }
  v37 = *a1;
  if (*a1)
    v38 = *(_DWORD *)(v37 - 4);
  else
    v38 = 0;
  v41 = 0;
  v42 = v37 + 40 * v38;
LABEL_57:
  *(_QWORD *)a9 = v27;
  *(_QWORD *)(a9 + 8) = v42;
  *(_BYTE *)(a9 + 16) = v41;
}

uint64_t WTF::HashTable<JSC::ICEvent,WTF::KeyValuePair<JSC::ICEvent,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::ICEvent,unsigned long long>>,WTF::DefaultHash<JSC::ICEvent>,WTF::HashMap<JSC::ICEvent,unsigned long long,WTF::DefaultHash<JSC::ICEvent>,WTF::HashTraits<JSC::ICEvent>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::ICEvent>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::AtomStringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  int v23;
  uint64_t v24;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int i;
  unsigned int v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  if (a2)
  {
    v15 = a2;
    v16 = (_QWORD *)(v7 + 24);
    do
    {
      *((_DWORD *)v16 - 2) = 0;
      *v16 = 0;
      v16[1] = 0;
      v16[3] = 0;
      v16 += 5;
      --v15;
    }
    while (v15);
  }
  v17 = a1;
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v18 = 0;
    v19 = 0;
    v20 = v5;
    v21 = a3;
    while (1)
    {
      v22 = (int *)(v4 + 40 * v18);
      v23 = *v22;
      v24 = *((_QWORD *)v22 + 1);
      if (*v22 == 9 && v24 == 0)
      {
        if (*((_QWORD *)v22 + 2))
          goto LABEL_21;
      }
      else
      {
        if (v23)
          v26 = 0;
        else
          v26 = v24 == 0;
        if (!v26 || *((_QWORD *)v22 + 2))
        {
LABEL_21:
          v27 = *v17;
          if (*v17)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = (WTF::StringImpl *)*((_QWORD *)v22 + 2);
          v30 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
          v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
          v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
          v33 = v23 + v22[6] + ((v32 >> 31) ^ v32);
          if (v29)
          {
            v34 = *((_DWORD *)v29 + 4);
            if (v34 < 0x100)
            {
              v35 = WTF::StringImpl::hashSlowCase(v29);
              v21 = a3;
              v17 = a1;
            }
            else
            {
              v35 = v34 >> 8;
            }
            v33 += v35;
          }
          for (i = 0; ; v33 = i + v37)
          {
            v37 = v33 & v28;
            v38 = v27 + 40 * (v33 & v28);
            v39 = !*(_DWORD *)v38 && *(_QWORD *)(v38 + 8) == 0;
            if (v39 && !*(_QWORD *)(v38 + 16))
              break;
            ++i;
          }
          *(_QWORD *)(v38 + 16) = 0;
          *(_OWORD *)v38 = *(_OWORD *)v22;
          v40 = *((_QWORD *)v22 + 2);
          *((_QWORD *)v22 + 2) = 0;
          *(_QWORD *)(v38 + 16) = v40;
          *(_DWORD *)(v38 + 24) = v22[6];
          *(_QWORD *)(v27 + 40 * v37 + 32) = *(_QWORD *)(v4 + 40 * v18 + 32);
          v41 = (WTF::StringImpl *)*((_QWORD *)v22 + 2);
          *((_QWORD *)v22 + 2) = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
            {
              WTF::StringImpl::~StringImpl(v41, v8, v9, v10, v11, v12, v13, v14);
              WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
              v21 = a3;
              v17 = a1;
            }
            else
            {
              *(_DWORD *)v41 -= 2;
            }
          }
          if (v22 == v21)
            v19 = v38;
          goto LABEL_41;
        }
        *((_QWORD *)v22 + 2) = 0;
      }
LABEL_41:
      if (++v18 == v20)
        goto LABEL_46;
    }
  }
  v19 = 0;
  result = 0;
  if (v4)
  {
LABEL_46:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
    return v19;
  }
  return result;
}

void JSC::JIT::~JIT(JSC::JIT *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  uint64_t v10;
  unint64_t *v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  JSC::Profiler::Compilation *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;

  v9 = (unsigned int *)*((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 2);
    v10 = *v9;
    if ((_DWORD)v10)
    {
      v74 = 8 * v10;
      do
      {
        v75 = *v11;
        *v11 = 0;
        if (v75)
          WTF::fastFree(v75, a2, a3, a4, a5, a6, a7, a8);
        ++v11;
        v74 -= 8;
      }
      while (v74);
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (unsigned int *)*((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 2);
    v13 = *v12;
    if ((_DWORD)v13)
    {
      v76 = 16 * v13;
      do
      {
        v77 = *v14;
        *v14 = 0;
        if (v77)
          WTF::fastFree(v77, a2, a3, a4, a5, a6, a7, a8);
        v14 += 2;
        v76 -= 16;
      }
      while (v76);
    }
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 111);
  v16 = *((unsigned int *)this + 227);
  if (v15)
  {
    v17 = 0;
    while (v16 > v17 >> 3)
    {
      if (v15 == ++v17)
        goto LABEL_11;
    }
LABEL_112:
    __break(0xC471u);
    JUMPOUT(0x19870379CLL);
  }
LABEL_11:
  if ((_DWORD)v16)
  {
    v18 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 112) + 8 * v18++), a2, a3, a4, a5, a6, a7, a8);
    while (v18 < *((unsigned int *)this + 227));
  }
  v19 = *((_QWORD *)this + 112);
  if (v19)
  {
    *((_QWORD *)this + 112) = 0;
    *((_DWORD *)this + 226) = 0;
    WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
  }
  v20 = *((_QWORD *)this + 108);
  v21 = *((unsigned int *)this + 221);
  if (v20)
  {
    v22 = 0;
    while (v21 > v22 >> 3)
    {
      if (v20 == ++v22)
        goto LABEL_20;
    }
    goto LABEL_112;
  }
LABEL_20:
  if ((_DWORD)v21)
  {
    v23 = 0;
    do
      WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 109) + 8 * v23++), a2, a3, a4, a5, a6, a7, a8);
    while (v23 < *((unsigned int *)this + 221));
  }
  v24 = *((_QWORD *)this + 109);
  if (v24)
  {
    *((_QWORD *)this + 109) = 0;
    *((_DWORD *)this + 220) = 0;
    WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
  }
  v25 = *((_QWORD *)this + 106);
  if (v25)
  {
    *((_QWORD *)this + 106) = 0;
    *((_DWORD *)this + 214) = 0;
    WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
  }
  JSC::MathICHolder::~MathICHolder((JSC::JIT *)((char *)this + 816), a2, a3, a4, a5, a6, a7, a8);
  v33 = *((_QWORD *)this + 98);
  if (v33)
  {
    v61 = *(unsigned int *)(v33 - 4);
    if ((_DWORD)v61)
    {
      v62 = (unint64_t *)(v33 + 8);
      do
      {
        if (*(v62 - 1) != -1)
        {
          v63 = *v62;
          *v62 = 0;
          if (v63)
          {
            v64 = *(_QWORD *)(v63 + 24);
            if (v63 + 40 != v64 && v64 != 0)
            {
              *(_QWORD *)(v63 + 24) = 0;
              *(_DWORD *)(v63 + 32) = 0;
              WTF::fastFree(v64, v26, v27, v28, v29, v30, v31, v32);
            }
            WTF::fastFree(v63, v26, v27, v28, v29, v30, v31, v32);
          }
        }
        v62 += 2;
        --v61;
      }
      while (v61);
    }
    WTF::fastFree(v33 - 16, v26, v27, v28, v29, v30, v31, v32);
  }
  v34 = *((_QWORD *)this + 97);
  if (v34)
    WTF::fastFree(v34 - 16, v26, v27, v28, v29, v30, v31, v32);
  v35 = *((unsigned int *)this + 191);
  v36 = *((_QWORD *)this + 94);
  if ((_DWORD)v35)
  {
    v78 = 16 * v35;
    v79 = (uint64_t *)(v36 + 8);
    do
    {
      v81 = *v79;
      v79 += 2;
      v80 = v81;
      if ((v81 & 1) != 0 && (v80 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v80 & 0xFFFFFFFF8, v26, v27, v28, v29, v30, v31, v32);
      v78 -= 16;
    }
    while (v78);
    v36 = *((_QWORD *)this + 94);
  }
  if (v36)
  {
    *((_QWORD *)this + 94) = 0;
    *((_DWORD *)this + 190) = 0;
    WTF::fastFree(v36, v26, v27, v28, v29, v30, v31, v32);
  }
  v37 = (JSC::Profiler::Compilation *)*((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
    {
      JSC::Profiler::Compilation::~Compilation(v37, v26, v27, v28, v29, v30, v31, v32);
      WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    }
    else
    {
      --*(_DWORD *)v37;
    }
  }
  v38 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 32);
    if (v39)
    {
      *(_QWORD *)(v38 + 32) = 0;
      *(_DWORD *)(v38 + 40) = 0;
      WTF::fastFree(v39, v26, v27, v28, v29, v30, v31, v32);
    }
    v40 = *(_QWORD *)(v38 + 16);
    if (v40)
    {
      *(_QWORD *)(v38 + 16) = 0;
      *(_DWORD *)(v38 + 24) = 0;
      WTF::fastFree(v40, v26, v27, v28, v29, v30, v31, v32);
    }
    WTF::fastFree(v38, v26, v27, v28, v29, v30, v31, v32);
  }
  v41 = *((_QWORD *)this + 83);
  if (v41)
  {
    *((_QWORD *)this + 83) = 0;
    *((_DWORD *)this + 168) = 0;
    WTF::fastFree(v41, v26, v27, v28, v29, v30, v31, v32);
  }
  v42 = *((_QWORD *)this + 81);
  if (v42)
  {
    *((_QWORD *)this + 81) = 0;
    *((_DWORD *)this + 164) = 0;
    WTF::fastFree(v42, v26, v27, v28, v29, v30, v31, v32);
  }
  v43 = *((_QWORD *)this + 78);
  if (v43)
  {
    *((_QWORD *)this + 78) = 0;
    *((_DWORD *)this + 158) = 0;
    WTF::fastFree(v43, v26, v27, v28, v29, v30, v31, v32);
  }
  v44 = *((_QWORD *)this + 76);
  if (v44)
  {
    *((_QWORD *)this + 76) = 0;
    *((_DWORD *)this + 154) = 0;
    WTF::fastFree(v44, v26, v27, v28, v29, v30, v31, v32);
  }
  v45 = *((_QWORD *)this + 74);
  if (v45)
  {
    *((_QWORD *)this + 74) = 0;
    *((_DWORD *)this + 150) = 0;
    WTF::fastFree(v45, v26, v27, v28, v29, v30, v31, v32);
  }
  v46 = *((_QWORD *)this + 72);
  if (v46)
  {
    *((_QWORD *)this + 72) = 0;
    *((_DWORD *)this + 146) = 0;
    WTF::fastFree(v46, v26, v27, v28, v29, v30, v31, v32);
  }
  v47 = *((_QWORD *)this + 70);
  if (v47)
  {
    *((_QWORD *)this + 70) = 0;
    *((_DWORD *)this + 142) = 0;
    WTF::fastFree(v47, v26, v27, v28, v29, v30, v31, v32);
  }
  v48 = *((_QWORD *)this + 68);
  if (v48)
  {
    *((_QWORD *)this + 68) = 0;
    *((_DWORD *)this + 138) = 0;
    WTF::fastFree(v48, v26, v27, v28, v29, v30, v31, v32);
  }
  v49 = *((_QWORD *)this + 66);
  if (v49)
  {
    *((_QWORD *)this + 66) = 0;
    *((_DWORD *)this + 134) = 0;
    WTF::fastFree(v49, v26, v27, v28, v29, v30, v31, v32);
  }
  v50 = *((_QWORD *)this + 64);
  if (v50)
  {
    *((_QWORD *)this + 64) = 0;
    *((_DWORD *)this + 130) = 0;
    WTF::fastFree(v50, v26, v27, v28, v29, v30, v31, v32);
  }
  v51 = *((_QWORD *)this + 62);
  if (v51)
  {
    *((_QWORD *)this + 62) = 0;
    *((_DWORD *)this + 126) = 0;
    WTF::fastFree(v51, v26, v27, v28, v29, v30, v31, v32);
  }
  v52 = *((_QWORD *)this + 60);
  if (v52)
  {
    *((_QWORD *)this + 60) = 0;
    *((_DWORD *)this + 122) = 0;
    WTF::fastFree(v52, v26, v27, v28, v29, v30, v31, v32);
  }
  v53 = *((_QWORD *)this + 58);
  if (v53)
  {
    *((_QWORD *)this + 58) = 0;
    *((_DWORD *)this + 118) = 0;
    WTF::fastFree(v53, v26, v27, v28, v29, v30, v31, v32);
  }
  v54 = *((_QWORD *)this + 56);
  if (v54)
  {
    *((_QWORD *)this + 56) = 0;
    *((_DWORD *)this + 114) = 0;
    WTF::fastFree(v54, v26, v27, v28, v29, v30, v31, v32);
  }
  v55 = *((_QWORD *)this + 54);
  if (v55)
  {
    *((_QWORD *)this + 54) = 0;
    *((_DWORD *)this + 110) = 0;
    WTF::fastFree(v55, v26, v27, v28, v29, v30, v31, v32);
  }
  v56 = *((_QWORD *)this + 52);
  if (v56)
  {
    *((_QWORD *)this + 52) = 0;
    *((_DWORD *)this + 106) = 0;
    WTF::fastFree(v56, v26, v27, v28, v29, v30, v31, v32);
  }
  v57 = *((_QWORD *)this + 51);
  if (v57)
    WTF::fastFree(v57 - 16, v26, v27, v28, v29, v30, v31, v32);
  v58 = *((_QWORD *)this + 50);
  if (v58)
    WTF::fastFree(v58 - 16, v26, v27, v28, v29, v30, v31, v32);
  v59 = *((_QWORD *)this + 48);
  if (v59)
  {
    *((_QWORD *)this + 48) = 0;
    *((_DWORD *)this + 98) = 0;
    WTF::fastFree(v59, v26, v27, v28, v29, v30, v31, v32);
  }
  v60 = *((_QWORD *)this + 46);
  if (v60)
  {
    *((_QWORD *)this + 46) = 0;
    *((_DWORD *)this + 94) = 0;
    WTF::fastFree(v60, v26, v27, v28, v29, v30, v31, v32);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::~AbstractMacroAssembler((uint64_t)this, v26, v27, v28, v29, v30, v31, v32);
}

unint64_t *std::unique_ptr<JSC::JITDisassembler>::~unique_ptr[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 32);
    if (v10)
    {
      *(_QWORD *)(v9 + 32) = 0;
      *(_DWORD *)(v9 + 40) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    v11 = *(_QWORD *)(v9 + 16);
    if (v11)
    {
      *(_QWORD *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 24) = 0;
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::JIT::addToConstantPool(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;

  v4 = (_QWORD *)(a1 + 848);
  v5 = *(unsigned int *)(a1 + 860);
  v9 = a3 | (a2 << 48);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 856))
  {
    v8 = (_QWORD *)WTF::Vector<JSC::JITConstant<JSC::JITConstantPool::Type>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v5 + 1, (unint64_t)&v9);
    v6 = *(unsigned int *)(a1 + 860);
    *(_QWORD *)(*(_QWORD *)(a1 + 848) + 8 * v6) = *v8;
  }
  else
  {
    *(_QWORD *)(*v4 + 8 * v5) = a3 | (a2 << 48);
    LODWORD(v6) = v5;
  }
  *(_DWORD *)(a1 + 860) = v6 + 1;
  return v5;
}

uint64_t WTF::SegmentedVector<JSC::BaselineUnlinkedStructureStubInfo,8ul>::alloc<>(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = (*(_QWORD *)a1)++;
  v3 = v2 >> 3;
  v4 = *(unsigned int *)(a1 + 20);
  if (v2 >> 3 >= v4)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = WTF::fastMalloc((WTF *)0x140);
    v12 = v9;
    v10 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 16))
    {
      v11 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 8, v10 + 1, (unint64_t)&v12);
      v10 = *(unsigned int *)(a1 + 20);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = *v11;
    }
    else
    {
      *(_QWORD *)(*v8 + 8 * v10) = v9;
    }
    v4 = (v10 + 1);
    *(_DWORD *)(a1 + 20) = v4;
    v2 = *(_QWORD *)a1 - 1;
    v3 = v2 >> 3;
  }
  if (v3 >= v4
    || (v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3) + 40 * (v2 & 7),
        *(_QWORD *)(v5 + 32) = 0,
        *(_OWORD *)v5 = 0u,
        *(_OWORD *)(v5 + 16) = 0u,
        *(_DWORD *)(v5 + 32) = -1,
        v6 = *(_QWORD *)a1 - 1,
        v6 >> 3 >= *(unsigned int *)(a1 + 20)))
  {
    __break(0xC471u);
    JUMPOUT(0x19870397CLL);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v6 >> 3)) + 40 * (v6 & 7);
}

uint64_t WTF::SegmentedVector<JSC::BaselineUnlinkedCallLinkInfo,8ul>::alloc<>(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v2 = (*(_QWORD *)a1)++;
  v3 = v2 >> 3;
  v4 = *(unsigned int *)(a1 + 20);
  if (v2 >> 3 >= v4)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = WTF::fastMalloc((WTF *)0x80);
    v12 = v9;
    v10 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 16))
    {
      v11 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 8, v10 + 1, (unint64_t)&v12);
      v10 = *(unsigned int *)(a1 + 20);
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = *v11;
    }
    else
    {
      *(_QWORD *)(*v8 + 8 * v10) = v9;
    }
    v4 = (v10 + 1);
    *(_DWORD *)(a1 + 20) = v4;
    v2 = *(_QWORD *)a1 - 1;
    v3 = v2 >> 3;
  }
  if (v3 >= v4
    || (v5 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3) + 16 * (v2 & 7)),
        *v5 = 0,
        v5[1] = 0,
        *(_DWORD *)v5 = -1,
        v6 = *(_QWORD *)a1 - 1,
        v6 >> 3 >= *(unsigned int *)(a1 + 20)))
  {
    __break(0xC471u);
    JUMPOUT(0x198703A78);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v6 >> 3)) + 16 * (v6 & 7);
}

void JSC::MacroAssemblerARM64::branchAdd32(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int i;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;

  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198703C8CLL);
  }
  v14 = 822084112;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load32(a1, a4, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  if (a3 < 0x1000)
    goto LABEL_3;
  v23 = 1895825936;
  v24 = -a3;
  if (-a3 < 0x1000)
    goto LABEL_5;
  if ((a3 & 0xFFF) == 0)
  {
    if (!HIBYTE(a3))
    {
      v14 = 826278416;
      a3 >>= 12;
LABEL_3:
      v22 = ((a3 & 0xFFF) << 10) | v14;
      goto LABEL_9;
    }
    v24 = -(a3 >> 12);
    if (v24 < 0x1000)
    {
      v23 = 1900020240;
LABEL_5:
      v22 = v23 | (v24 << 10);
      goto LABEL_9;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x198703CDCLL);
  }
  v22 = 722534928;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a3, *(char *)(a1 + 304), v17, v18, v19, v20, v21);
LABEL_9:
  v25 = *(_DWORD *)(a1 + 200);
  if (v25 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v15, v16, v17, v18, v19, v20, v21);
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = v22;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store32(a1, 16, a4, v17, v18, v19, v20, v21);
  if (*(_BYTE *)(a1 + 328))
  {
    for (i = *(_DWORD *)(a1 + 200); (signed int)i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
    {
      if (i + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v26, v27, v28, v29, v30, v31, v32);
        i = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
      i = *(_DWORD *)(a1 + 200) + 4;
    }
    *(_DWORD *)(a1 + 208) = 0;
  }
  else
  {
    i = *(_DWORD *)(a1 + 200);
  }
  if (i + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v26, v27, v28, v29, v30, v31, v32);
    i = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = a2 | 0x54000000;
  v34 = *(_DWORD *)(a1 + 200);
  v35 = v34 + 4;
  *(_DWORD *)(a1 + 200) = v34 + 4;
  v36 = v34 + 8;
  v37 = v34 + 4;
  if (v36 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v26, v27, v28, v29, v30, v31, v32);
    v37 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v37) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v38 = -122;
  else
    v38 = -126;
  *(_DWORD *)a9 = v35;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v38;
  *(_BYTE *)(a9 + 9) = a2;
  *(_WORD *)(a9 + 10) = -256;
}

uint64_t JSC::JIT::emitNotifyWriteWatchpoint(uint64_t a1, uint64_t a2, int8x8_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned __int8 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36[3];
  int v37;
  uint64_t v38;
  int v39;

  v9 = a2;
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, a2, 0xFFFFFFFFLL, a6, a7, a8, a9, (uint64_t)v36, a3);
  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, v9 | 0x400000000, *(char *)(a1 + 304), v11, v12, v13, v14, v15);
    JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v16, v17, v18, v19, (uint64_t)&v34);
    v26 = (_QWORD *)(a1 + 648);
    v27 = v35;
    v28 = *(_DWORD *)(a1 + 640);
    v37 = v34;
    v38 = v35;
    v39 = v28;
    v29 = *(unsigned int *)(a1 + 660);
    if ((_DWORD)v29 == *(_DWORD *)(a1 + 656))
    {
      v32 = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v26, v29 + 1, (unint64_t)&v37);
      v33 = *(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660);
      *(_DWORD *)v33 = *(_DWORD *)v32;
      *(_QWORD *)(v33 + 4) = *(_QWORD *)(v32 + 4);
      *(_DWORD *)(v33 + 12) = *(_DWORD *)(v32 + 12);
    }
    else
    {
      v30 = *v26 + 16 * v29;
      *(_DWORD *)v30 = v34;
      *(_QWORD *)(v30 + 4) = v27;
      *(_DWORD *)(v30 + 12) = v28;
    }
    ++*(_DWORD *)(a1 + 660);
    return (uint64_t)JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v36, a1, v20, v21, v22, v23, v24, v25);
  }
  else
  {
    result = 6195;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::JIT::emitVarReadOnlyCheck(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;

  v9 = result;
  if ((_DWORD)a2 == 7 || (_DWORD)a2 == 1)
  {
    v10 = a3 & 0x1F | 0xF8408340;
    v11 = *(_DWORD *)(result + 200);
    if (v11 + 4 > *(_DWORD *)(result + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(result + 56), a2, a3, a4, a5, a6, a7, a8);
      v11 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v11) = v10;
    *(_DWORD *)(v9 + 200) += 4;
    JSC::MacroAssemblerARM64::load64(v9, a3 | 0x81000000000, a3, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(v9 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(v9 + 296) + 208) &= ~*(_DWORD *)(v9 + 320);
      JSC::MacroAssemblerARM64::load8(v9, a3 | 0x400000000, *(char *)(v9 + 304), v12, v13, v14, v15, v16);
      JSC::MacroAssemblerARM64::branch32(v9, 0, 17, 2, v17, v18, v19, v20, (uint64_t)&v26);
      result = v9 + 648;
      v21 = v27;
      v22 = *(_DWORD *)(v9 + 640);
      v28 = v26;
      v29 = v27;
      v30 = v22;
      v23 = *(unsigned int *)(v9 + 660);
      if ((_DWORD)v23 == *(_DWORD *)(v9 + 656))
      {
        result = WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v23 + 1, (unint64_t)&v28);
        v25 = *(_QWORD *)(v9 + 648) + 16 * *(unsigned int *)(v9 + 660);
        *(_DWORD *)v25 = *(_DWORD *)result;
        *(_QWORD *)(v25 + 4) = *(_QWORD *)(result + 4);
        *(_DWORD *)(v25 + 12) = *(_DWORD *)(result + 12);
      }
      else
      {
        v24 = *(_QWORD *)result + 16 * v23;
        *(_DWORD *)v24 = v26;
        *(_QWORD *)(v24 + 4) = v21;
        *(_DWORD *)(v24 + 12) = v22;
      }
      ++*(_DWORD *)(v9 + 660);
    }
    else
    {
      result = 6195;
      __break(0xC471u);
    }
  }
  return result;
}

void JSC::JIT::resetSP(JSC::JIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v9 = -1862270017;
  v10 = 16 - ((8 * *(_DWORD *)(*((_QWORD *)this + 101) + 20) + 24) & 0xFFFFFFF0);
  if (v10 < 0x1000)
    goto LABEL_2;
  v16 = -1073740865;
  v17 = ((8 * *(_DWORD *)(*((_QWORD *)this + 101) + 20) + 24) & 0xFFFFFFF0) - 16;
  if (v17 < 0x1000)
  {
LABEL_8:
    v11 = v16 | (v17 << 10);
    v9 = 285212672;
    goto LABEL_3;
  }
  if ((v10 & 0xFF0) == 0)
  {
    if (!HIBYTE(v10))
    {
      v9 = -1858075713;
      v10 >>= 12;
LABEL_2:
      v11 = (v10 & 0xFFF) << 10;
LABEL_3:
      v12 = v11 | v9;
      goto LABEL_4;
    }
    v17 = -(v10 >> 12);
    if (v17 < 0x1000)
    {
      v16 = -1069546561;
      goto LABEL_8;
    }
  }
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    return;
  }
  v12 = -1959763009;
  *(_DWORD *)(*((_QWORD *)this + 33) + 208) &= ~*((_DWORD *)this + 72);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v10, *((char *)this + 272), a4, a5, a6, a7, a8);
LABEL_4:
  v15 = *((_DWORD *)this + 50);
  v14 = (unsigned int *)((char *)this + 200);
  v13 = v15;
  if (v15 + 4 > *(v14 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v14 - 36), a2, a3, a4, a5, a6, a7, a8);
    v13 = *v14;
  }
  *(_DWORD *)(*((_QWORD *)v14 - 18) + v13) = v12;
  *v14 += 4;
}

void JSC::JIT::linkAllSlowCases(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  char v16;
  __int16 v17;
  char v18;
  __int16 v19;
  int v20;
  char v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  JSC::AssemblerBuffer *v31;
  JSC::AssemblerBuffer *v32;
  JSC::AssemblerBuffer *v33;
  JSC::AssemblerBuffer *v34;
  JSC::AssemblerBuffer *v35;
  JSC::AssemblerBuffer *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int *v42;
  __int128 v43;
  uint64_t v44;

  v8 = *a2;
  if (*a2 != (unsigned int *)(*(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660)))
  {
    v11 = *(_DWORD *)(a1 + 640);
    v12 = (_QWORD *)(a1 + 32);
    do
    {
      if (v8[3] != v11)
        break;
      v13 = *v8;
      if ((_DWORD)v13 != -1)
      {
        *(_DWORD *)(a1 + 208) = 0;
        v14 = *((unsigned __int8 *)v8 + 8);
        switch(*((_BYTE *)v8 + 8))
        {
          case 0x83:
          case 0x87:
            v15 = *(_DWORD *)(a1 + 200);
            if (v15 < *(_DWORD *)(a1 + 52))
            {
              v31 = (JSC::AssemblerBuffer *)(a1 + 56);
              do
              {
                if ((v15 + 4) > *(_DWORD *)(a1 + 192))
                {
                  v34 = v31;
                  v37 = v13;
                  v40 = v8;
                  JSC::AssemblerBuffer::outOfLineGrow(v31, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  v13 = v37;
                  v8 = v40;
                  v31 = v34;
                  v15 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = -721215457;
                v15 = *(_DWORD *)(a1 + 200) + 4;
                *(_DWORD *)(a1 + 200) = v15;
              }
              while (v15 < *(_DWORD *)(a1 + 52));
              v14 = *((unsigned __int8 *)v8 + 8);
            }
            v16 = *((_BYTE *)v8 + 9);
            v17 = *((unsigned __int8 *)v8 + 10);
            v18 = *((_BYTE *)v8 + 11);
            *(_QWORD *)&v43 = v13;
            *((_QWORD *)&v43 + 1) = v15;
            BYTE3(v44) = v16 & 0xF;
            *(_WORD *)((char *)&v44 + 1) = v14;
            v19 = v17 << 6;
            goto LABEL_10;
          case 0x84:
          case 0x88:
            v20 = *(_DWORD *)(a1 + 200);
            if (v20 < *(_DWORD *)(a1 + 52))
            {
              v32 = (JSC::AssemblerBuffer *)(a1 + 56);
              do
              {
                if ((v20 + 4) > *(_DWORD *)(a1 + 192))
                {
                  v35 = v32;
                  v38 = v13;
                  v41 = v8;
                  JSC::AssemblerBuffer::outOfLineGrow(v32, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  v13 = v38;
                  v8 = v41;
                  v32 = v35;
                  v20 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v20) = -721215457;
                v20 = *(_DWORD *)(a1 + 200) + 4;
                *(_DWORD *)(a1 + 200) = v20;
              }
              while (v20 < *(_DWORD *)(a1 + 52));
              v14 = *((unsigned __int8 *)v8 + 8);
            }
            v21 = *((_BYTE *)v8 + 9);
            v22 = *((_WORD *)v8 + 2);
            v18 = *((_BYTE *)v8 + 11);
            *(_QWORD *)&v43 = v13;
            *((_QWORD *)&v43 + 1) = v20;
            BYTE3(v44) = v21 & 0xF;
            *(_WORD *)((char *)&v44 + 1) = v14;
            v19 = v22 & 0x3F;
LABEL_10:
            WORD2(v44) = v19;
            LOBYTE(v44) = v18;
            break;
          default:
            v27 = *(_DWORD *)(a1 + 200);
            if (v27 < *(_DWORD *)(a1 + 52))
            {
              v33 = (JSC::AssemblerBuffer *)(a1 + 56);
              do
              {
                if ((v27 + 4) > *(_DWORD *)(a1 + 192))
                {
                  v36 = v33;
                  v39 = v13;
                  v42 = v8;
                  JSC::AssemblerBuffer::outOfLineGrow(v33, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
                  v13 = v39;
                  v8 = v42;
                  v33 = v36;
                  v27 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v27) = -721215457;
                v27 = *(_DWORD *)(a1 + 200) + 4;
                *(_DWORD *)(a1 + 200) = v27;
              }
              while (v27 < *(_DWORD *)(a1 + 52));
              v14 = *((unsigned __int8 *)v8 + 8);
            }
            v28 = *((_BYTE *)v8 + 9);
            LOBYTE(v44) = -1;
            *(_QWORD *)&v43 = v13;
            *((_QWORD *)&v43 + 1) = v27;
            BYTE3(v44) = v28 & 0xF;
            *(_WORD *)((char *)&v44 + 1) = v14;
            WORD2(v44) = 0;
            break;
        }
        v23 = *(unsigned int *)(a1 + 44);
        if ((_DWORD)v23 == *(_DWORD *)(a1 + 40))
        {
          v29 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, v23 + 1, (unint64_t)&v43, a4, a5, a6, a7, a8);
          v24 = *(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 44);
          *(_QWORD *)v24 = 0;
          *(_QWORD *)(v24 + 8) = 0;
          *(_BYTE *)(v24 + 16) = -1;
          v30 = (*(unsigned __int8 *)(v24 + 19) << 16) | 0xF0000;
          *(_WORD *)(v24 + 17) = 65;
          *(_BYTE *)(v24 + 19) = BYTE2(v30);
          *(_WORD *)(v24 + 20) &= 0xFC00u;
          v25 = *(_OWORD *)v29;
          v26 = *(_QWORD *)(v29 + 16);
        }
        else
        {
          v24 = *v12 + 24 * v23;
          v25 = v43;
          v26 = v44;
        }
        *(_QWORD *)(v24 + 16) = v26;
        *(_OWORD *)v24 = v25;
        ++*(_DWORD *)(a1 + 44);
      }
      v8 = *a2 + 4;
      *a2 = v8;
    }
    while (v8 != (unsigned int *)(*(_QWORD *)(a1 + 648) + 16 * *(unsigned int *)(a1 + 660)));
  }
}

#error "198704460: too big function (funcsize=0)"

void JSC::JIT::emit_op_pow(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int8x8_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int8x8_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _DWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  unsigned int v176[3];
  int v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int v180[2];
  char v181;
  __int16 v182;
  char v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  int v192;

  v8 = JSC::BaseInstruction<JSC::JSOpcodeTraits>::as<JSC::OpPushWithScope>(a2);
  v10 = v9;
  v11 = HIDWORD(v8);
  if (SHIDWORD(v8) < 0x40000000)
  {
    v12 = (v11 << 35) | 0x1D;
LABEL_3:
    JSC::MacroAssemblerARM64::load64(a1, v12, 0, v3, v4, v5, v6, v7);
    goto LABEL_4;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), SHIDWORD(v8)))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 0, v153, v154, v155, v156, v157);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000000, 0, v165, v166, v167, v168, v169);
    v12 = v11 << 35;
    goto LABEL_3;
  }
  v158 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v158 <= (HIDWORD(v8) - 0x40000000))
    goto LABEL_31;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v158[2 * (HIDWORD(v8) - 0x40000000) + 2], 0, v153, v154, v155, v156, v157);
LABEL_4:
  if ((int)v10 < 0x40000000)
  {
    v18 = (v10 << 35) | 0x1D;
LABEL_6:
    JSC::MacroAssemblerARM64::load64(a1, v18, 2, v13, v14, v15, v16, v17);
    goto LABEL_7;
  }
  if (!JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(*(_QWORD *)(a1 + 800), v10))
  {
    JSC::MacroAssemblerARM64::load64(a1, 0x100000001DLL, 2, v159, v160, v161, v162, v163);
    JSC::MacroAssemblerARM64::load64(a1, 0xA000000002, 2, v170, v171, v172, v173, v174);
    v18 = (v10 << 35) | 2;
    goto LABEL_6;
  }
  v164 = *(_DWORD **)(*(_QWORD *)(a1 + 808) + 112);
  if (*v164 <= (v10 - 0x40000000))
  {
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x198718018);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(_QWORD *)&v164[2 * (v10 - 0x40000000) + 2], 2, v159, v160, v161, v162, v163);
LABEL_7:
  JSC::MacroAssemblerARM64::branch64(a1, 3, 2, 27, v19, v20, v21, v22, (uint64_t)&v188);
  v27 = v189;
  v28 = *(_DWORD *)(a1 + 640);
  v190 = v188;
  v191 = v189;
  v192 = v28;
  v29 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v29 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v190);
  }
  else
  {
    v30 = *(_QWORD *)(a1 + 648) + 16 * v29;
    *(_DWORD *)v30 = v188;
    *(_QWORD *)(v30 + 4) = v27;
    *(_DWORD *)(v30 + 12) = v28;
    ++*(_DWORD *)(a1 + 660);
  }
  JSC::MacroAssemblerARM64::branchTest32(a1, 4, 2, 2, v23, v24, v25, v26, (uint64_t)&v186);
  v35 = v187;
  v36 = *(_DWORD *)(a1 + 640);
  v190 = v186;
  v191 = v187;
  v192 = v36;
  v37 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v37 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v190);
  }
  else
  {
    v38 = *(_QWORD *)(a1 + 648) + 16 * v37;
    *(_DWORD *)v38 = v186;
    *(_QWORD *)(v38 + 4) = v35;
    *(_DWORD *)(v38 + 12) = v36;
    ++*(_DWORD *)(a1 + 660);
  }
  JSC::MacroAssemblerARM64::branch32(a1, 12, 2, 1000, v31, v32, v33, v34, (uint64_t)&v184);
  v43 = v185;
  v44 = *(_DWORD *)(a1 + 640);
  v190 = v184;
  v191 = v185;
  v192 = v44;
  v45 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v45 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v190);
  }
  else
  {
    v46 = *(_QWORD *)(a1 + 648) + 16 * v45;
    *(_DWORD *)v46 = v184;
    *(_QWORD *)(v46 + 4) = v43;
    *(_DWORD *)(v46 + 12) = v44;
    ++*(_DWORD *)(a1 + 660);
  }
  JSC::MacroAssemblerARM64::branch64(a1, 3, 0, 27, v39, v40, v41, v42, (uint64_t)&v188);
  JSC::MacroAssemblerARM64::convertInt32ToDouble((_DWORD *)a1, 0, 0, v47, v48, v49, v50, v51);
  JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v52, v53, v54, v55, v56, v57, v58, (int *)&v190);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v59, v60, v61, v62, v63, v64);
  if (*(_BYTE *)(a1 + 328))
    v71 = 69;
  else
    v71 = 65;
  v180[0] = v190;
  v180[1] = 0;
  v181 = v71;
  v182 = 15;
  v183 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v188, a1, v65, v66, v67, v68, v69, v70);
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, 0, 27, v72, v73, v74, v75, (uint64_t)&v178);
  v79 = v179;
  v80 = *(_DWORD *)(a1 + 640);
  v190 = v178;
  v191 = v179;
  v192 = v80;
  v81 = *(unsigned int *)(a1 + 660);
  if ((_DWORD)v81 == *(_DWORD *)(a1 + 656))
  {
    WTF::Vector<JSC::SlowCaseEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SlowCaseEntry>(a1 + 648, (unint64_t)&v190);
  }
  else
  {
    v82 = *(_QWORD *)(a1 + 648) + 16 * v81;
    *(_DWORD *)v82 = v178;
    *(_QWORD *)(v82 + 4) = v79;
    *(_DWORD *)(v82 + 12) = v80;
    ++*(_DWORD *)(a1 + 660);
  }
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a1, 0, 4, 0, 1, v76, v77, v78);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v180, a1, v83, v84, v85, v86, v87, v88);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)1, 4, v89, v90, v91, v92, v93);
  JSC::MacroAssemblerARM64::convertInt32ToDouble((_DWORD *)a1, 4, 1, v94, v95, v96, v97, v98);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a1, v99, v100, v101, v102, v103, v104, v105, &v177);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1, 0, 2, v106, v107, v108, v109, (uint64_t)&v190, v110);
  JSC::MacroAssemblerARM64::mulDouble((_DWORD *)a1, 1, v111, v112, v113, v114, v115, v116);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v190, a1, v117, v118, v119, v120, v121, v122);
  JSC::MacroAssemblerARM64::mulDouble((_DWORD *)a1, 0, v123, v124, v125, v126, v127, v128);
  JSC::MacroAssemblerARM64::rshift32((_DWORD *)a1, 1, 2, v129, v130, v131, v132, v133);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, 2, v134, v135, v136, v137, (uint64_t)v176, v138);
  v175 = v177;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo(v176, (unsigned int *)&v175, a1, v139, v140, v141, v142, v143);
  JSC::AssemblyHelpers::boxDouble((_DWORD *)a1, 1, 0, 1, v144, v145, v146, v147);
  JSC::MacroAssemblerARM64::store64(a1, 0, (v8 << 35) | 0x1D, v148, v149, v150, v151, v152);
}

void JSC::JIT::privateCompileSlowCases(JSC::JIT *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  char *jj;
  _DWORD *v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int i;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::AssemblerBuffer *v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  JSC::AssemblerBuffer *v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int mm;
  unsigned int v103;
  unsigned __int8 v104;
  unsigned int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  char v113;
  _BOOL4 v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  JSC::AssemblerBuffer *v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  JSC::AssemblerBuffer *v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  unsigned int v163;
  unsigned __int8 v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int8x8_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  uint64_t v215;
  int v216;
  char v217;
  _BOOL4 v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  JSC::AssemblerBuffer *v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  uint64_t v245;
  JSC::AssemblerBuffer *v246;
  unsigned int v247;
  int v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  unsigned int v267;
  unsigned __int8 v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int8x8_t v306;
  int v307;
  int v308;
  int v309;
  int v310;
  unsigned int v311;
  int v312;
  int v313;
  char v314;
  uint64_t v315;
  uint64_t v316;
  _BOOL4 v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  JSC::AssemblerBuffer *v340;
  unsigned int v341;
  int v342;
  unsigned int v343;
  uint64_t v344;
  JSC::AssemblerBuffer *v345;
  unsigned int v346;
  int v347;
  unsigned int v348;
  _DWORD *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t v360;
  int nn;
  unsigned int v362;
  unsigned __int8 v363;
  int v364;
  int v365;
  int v366;
  int v367;
  unsigned int v368;
  int v369;
  int v370;
  char v371;
  uint64_t v372;
  uint64_t v373;
  _BOOL4 v374;
  uint64_t v375;
  char v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  JSC::AssemblerBuffer *v397;
  unsigned int v398;
  int v399;
  unsigned int v400;
  uint64_t v401;
  JSC::AssemblerBuffer *v402;
  unsigned int v403;
  int v404;
  unsigned int v405;
  _DWORD *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unsigned int v415;
  uint64_t v416;
  uint64_t v417;
  int i1;
  unsigned int v419;
  unsigned __int8 v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unsigned int v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  unsigned int v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  JSC::ARM64LogicalImmediate *v437;
  uint64_t v438;
  unsigned int v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  int i5;
  int v445;
  int v446;
  uint64_t v447;
  int v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  _DWORD *v452;
  _DWORD *v453;
  JSC::ARM64LogicalImmediate *v454;
  unsigned int v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  int v466;
  int v467;
  int v468;
  int v469;
  unsigned int v470;
  int v471;
  int v472;
  char v473;
  uint64_t v474;
  uint64_t v475;
  _BOOL4 v476;
  uint64_t v477;
  char v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  JSC::AssemblerBuffer *v499;
  unsigned int v500;
  int v501;
  unsigned int v502;
  uint64_t v503;
  JSC::AssemblerBuffer *v504;
  unsigned int v505;
  int v506;
  unsigned int v507;
  _DWORD *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t v519;
  int kk;
  unsigned int v521;
  unsigned __int8 v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unsigned int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  unsigned int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  uint64_t v569;
  int v570;
  char v571;
  _BOOL4 v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  JSC::AssemblerBuffer *v595;
  unsigned int v596;
  int v597;
  unsigned int v598;
  uint64_t v599;
  JSC::AssemblerBuffer *v600;
  unsigned int v601;
  int v602;
  unsigned int v603;
  uint64_t v604;
  uint64_t v605;
  unsigned int v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  unsigned int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  unsigned int v621;
  unsigned __int8 v622;
  unsigned int v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  unsigned int v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  int8x8_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  int v665;
  int v666;
  unsigned int v667;
  BOOL v668;
  int v669;
  int v670;
  int v671;
  int v672;
  int v673;
  uint64_t v674;
  int v675;
  char v676;
  _BOOL4 v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  JSC::AssemblerBuffer *v700;
  unsigned int v701;
  int v702;
  unsigned int v703;
  uint64_t v704;
  JSC::AssemblerBuffer *v705;
  unsigned int v706;
  int v707;
  unsigned int v708;
  uint64_t v709;
  uint64_t v710;
  unsigned int v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  unsigned int v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  int v725;
  unsigned int v726;
  unsigned __int8 v727;
  unsigned int v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  unsigned int v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  int8x8_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  _DWORD *v778;
  unsigned __int8 *v779;
  int v780;
  _DWORD *v781;
  _QWORD *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unsigned int v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  int j;
  uint64_t v801;
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  unsigned int v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  __int128 v815;
  uint64_t v816;
  unsigned int *v817;
  unsigned int v818;
  unsigned int v819;
  int k;
  unsigned int v821;
  unsigned __int8 v822;
  unsigned int v823;
  uint64_t v824;
  unsigned int v825;
  unsigned int v826;
  unsigned int v827;
  uint64_t v828;
  int v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  unsigned int v838;
  unint64_t v839;
  unint64_t v840;
  unint64_t v841;
  unsigned int v842;
  uint64_t v843;
  uint64_t v844;
  int v845;
  JSC::ARM64LogicalImmediate *v846;
  uint64_t v847;
  unsigned int v848;
  uint64_t v849;
  uint64_t v850;
  int v851;
  uint64_t v852;
  int i4;
  int v854;
  int v855;
  uint64_t v856;
  int v857;
  int v858;
  int v859;
  uint64_t v860;
  unsigned int v861;
  unsigned int v862;
  int v863;
  BOOL v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  _DWORD *v868;
  _DWORD *v869;
  unint64_t v870;
  int v871;
  unsigned __int8 *v872;
  unsigned __int8 *v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unsigned int v882;
  unint64_t v883;
  unint64_t v884;
  unint64_t v885;
  unsigned int v886;
  uint64_t v887;
  uint64_t v888;
  int v889;
  JSC::ARM64LogicalImmediate *v890;
  uint64_t v891;
  unsigned int v892;
  uint64_t v893;
  uint64_t v894;
  int v895;
  uint64_t v896;
  int i6;
  int v898;
  int v899;
  int v900;
  BOOL v901;
  unsigned int v902;
  JSC::ARM64LogicalImmediate *v903;
  unsigned int v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  unint64_t v910;
  unint64_t v911;
  int v912;
  int v913;
  int v914;
  int v915;
  int v916;
  uint64_t v917;
  int v918;
  char v919;
  _BOOL4 v920;
  unint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  JSC::AssemblerBuffer *v943;
  unsigned int v944;
  int v945;
  unsigned int v946;
  uint64_t v947;
  JSC::AssemblerBuffer *v948;
  unsigned int v949;
  int v950;
  unsigned int v951;
  uint64_t v952;
  uint64_t v953;
  unsigned int v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  unsigned int v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  int v968;
  unsigned int v969;
  unsigned __int8 v970;
  unsigned int v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  unsigned int v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  int8x8_t v1008;
  int v1009;
  int v1010;
  int v1011;
  int v1012;
  int v1013;
  uint64_t v1014;
  int v1015;
  int v1016;
  int v1017;
  int v1018;
  int v1019;
  uint64_t v1020;
  int v1021;
  char v1022;
  _BOOL4 v1023;
  unint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  JSC::AssemblerBuffer *v1046;
  unsigned int v1047;
  int v1048;
  unsigned int v1049;
  uint64_t v1050;
  JSC::AssemblerBuffer *v1051;
  unsigned int v1052;
  int v1053;
  unsigned int v1054;
  uint64_t v1055;
  uint64_t v1056;
  unsigned int v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  unsigned int v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  int v1071;
  unsigned int v1072;
  unsigned __int8 v1073;
  unsigned int v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  unsigned int v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  int8x8_t v1111;
  int v1112;
  int v1113;
  int v1114;
  int v1115;
  int v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  unsigned int v1126;
  unint64_t v1127;
  unint64_t v1128;
  unint64_t v1129;
  unsigned int v1130;
  uint64_t v1131;
  uint64_t v1132;
  int v1133;
  JSC::ARM64LogicalImmediate *v1134;
  uint64_t v1135;
  unsigned int v1136;
  uint64_t v1137;
  uint64_t v1138;
  int v1139;
  uint64_t v1140;
  int i3;
  int v1142;
  uint64_t v1143;
  int v1144;
  int v1145;
  int v1146;
  uint64_t v1147;
  unsigned int v1148;
  unsigned int v1149;
  int v1150;
  BOOL v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  _DWORD *v1155;
  _DWORD *v1156;
  unint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  _DWORD *v1160;
  _DWORD *v1161;
  int v1162;
  unsigned __int8 *v1163;
  unsigned __int8 *v1164;
  uint64_t v1165;
  uint64_t v1166;
  JSC::JIT *v1167;
  uint64_t v1168;
  JSC::ARM64LogicalImmediate *v1169;
  unsigned int v1170;
  void *v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  _DWORD *v1183;
  char v1184;
  unsigned int v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  _DWORD *v1193;
  unsigned __int8 *v1194;
  int v1195;
  _DWORD *v1196;
  _QWORD *v1197;
  int v1198;
  _DWORD *v1199;
  uint64_t v1200;
  uint64_t v1201;
  int n;
  uint64_t v1203;
  unint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  unsigned int v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  __int128 v1217;
  uint64_t v1218;
  unsigned int *v1219;
  unsigned int v1220;
  unsigned int v1221;
  int ii;
  unsigned int v1223;
  unsigned __int8 v1224;
  uint64_t v1225;
  unsigned int v1226;
  unsigned int v1227;
  unsigned int v1228;
  unsigned int v1229;
  uint64_t v1230;
  int v1231;
  int v1232;
  int v1233;
  int v1234;
  uint64_t v1235;
  unint64_t *v1236;
  unint64_t v1237;
  int v1238;
  unsigned int v1239;
  unsigned int v1240;
  unsigned int v1241;
  uint64_t v1242;
  int v1243;
  int v1244;
  int v1245;
  char v1246;
  _BOOL4 v1247;
  unint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  JSC::AssemblerBuffer *v1270;
  unsigned int v1271;
  int v1272;
  unsigned int v1273;
  uint64_t v1274;
  JSC::AssemblerBuffer *v1275;
  unsigned int v1276;
  int v1277;
  unsigned int v1278;
  uint64_t v1279;
  uint64_t v1280;
  unsigned int v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  unsigned int v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  int v1295;
  unsigned int v1296;
  unsigned __int8 v1297;
  unsigned int v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  unsigned int v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  int8x8_t v1335;
  uint64_t v1336;
  uint64_t v1337;
  _DWORD *v1338;
  _DWORD *v1339;
  int v1340;
  JSC::ARM64LogicalImmediate *v1341;
  int v1342;
  int v1343;
  uint64_t v1344;
  unint64_t *v1345;
  unint64_t v1346;
  int v1347;
  unsigned int v1348;
  unsigned int v1349;
  unsigned int v1350;
  uint64_t v1351;
  int v1352;
  int v1353;
  int v1354;
  char v1355;
  _BOOL4 v1356;
  unint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  uint64_t v1363;
  uint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  JSC::AssemblerBuffer *v1379;
  unsigned int v1380;
  int v1381;
  unsigned int v1382;
  uint64_t v1383;
  JSC::AssemblerBuffer *v1384;
  unsigned int v1385;
  int v1386;
  unsigned int v1387;
  uint64_t v1388;
  uint64_t v1389;
  unsigned int v1390;
  uint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  uint64_t v1394;
  uint64_t v1395;
  unsigned int v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  int v1404;
  unsigned int v1405;
  unsigned __int8 v1406;
  unsigned int v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  uint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  unsigned int v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  int8x8_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  _DWORD *v1447;
  _DWORD *v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  _DWORD *v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  _DWORD *v1461;
  int v1462;
  _DWORD *v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  _DWORD *v1480;
  _DWORD *v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  _DWORD *v1485;
  uint64_t v1486;
  uint64_t v1487;
  uint64_t v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  _DWORD *v1494;
  int v1495;
  _DWORD *v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  _DWORD *v1513;
  _DWORD *v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  _DWORD *v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  _DWORD *v1527;
  int v1528;
  _DWORD *v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  _DWORD *v1546;
  _DWORD *v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  _DWORD *v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  _DWORD *v1560;
  int v1561;
  _DWORD *v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  uint64_t v1578;
  _DWORD *v1579;
  _DWORD *v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  _DWORD *v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  _DWORD *v1593;
  int v1594;
  _DWORD *v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  uint64_t v1611;
  _DWORD *v1612;
  _DWORD *v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  _DWORD *v1617;
  uint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  _DWORD *v1626;
  int v1627;
  _DWORD *v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  uint64_t v1644;
  _DWORD *v1645;
  _DWORD *v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  _DWORD *v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  uint64_t v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  _DWORD *v1660;
  _DWORD *v1661;
  uint64_t v1662;
  uint64_t v1663;
  uint64_t v1664;
  _DWORD *v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  uint64_t v1673;
  _DWORD *v1674;
  int v1675;
  _DWORD *v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  _DWORD *v1693;
  _DWORD *v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  _DWORD *v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  _DWORD *v1707;
  int v1708;
  _DWORD *v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  _DWORD *v1723;
  _DWORD *v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  _DWORD *v1728;
  uint64_t v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  _DWORD *v1738;
  _DWORD *v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  _DWORD *v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  uint64_t v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  _DWORD *v1753;
  int v1754;
  _DWORD *v1755;
  uint64_t v1756;
  uint64_t v1757;
  uint64_t v1758;
  uint64_t v1759;
  uint64_t v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  _DWORD *v1766;
  _DWORD *v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  _DWORD *v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  _DWORD *v1780;
  int v1781;
  _DWORD *v1782;
  uint64_t v1783;
  uint64_t v1784;
  uint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  uint64_t v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  _DWORD *v1796;
  _DWORD *v1797;
  uint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  _DWORD *v1801;
  uint64_t v1802;
  _DWORD *v1803;
  int v1804;
  _DWORD *v1805;
  uint64_t v1806;
  uint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  unsigned int v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  int8x8_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  _DWORD *v1824;
  _DWORD *v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  _DWORD *v1829;
  uint64_t v1830;
  uint64_t v1831;
  uint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  _DWORD *v1838;
  int v1839;
  _DWORD *v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  uint64_t v1844;
  uint64_t v1845;
  uint64_t v1846;
  _DWORD *v1847;
  _DWORD *v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  _DWORD *v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  _DWORD *v1861;
  int v1862;
  _DWORD *v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  _DWORD *v1873;
  _DWORD *v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  _DWORD *v1878;
  uint64_t v1879;
  _DWORD *v1880;
  int v1881;
  _DWORD *v1882;
  unsigned int v1883;
  uint64_t v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t v1889;
  uint64_t v1890;
  int8x8_t v1891;
  uint64_t v1892;
  uint64_t v1893;
  _DWORD *v1894;
  _DWORD *v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  _DWORD *v1899;
  uint64_t v1900;
  _DWORD *v1901;
  int v1902;
  _DWORD *v1903;
  unsigned int v1904;
  uint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  uint64_t v1909;
  uint64_t v1910;
  uint64_t v1911;
  int8x8_t v1912;
  uint64_t v1913;
  uint64_t v1914;
  _DWORD *v1915;
  _DWORD *v1916;
  uint64_t v1917;
  uint64_t v1918;
  uint64_t v1919;
  _DWORD *v1920;
  uint64_t v1921;
  _DWORD *v1922;
  int v1923;
  _DWORD *v1924;
  unsigned int v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  uint64_t v1932;
  int8x8_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  _DWORD *v1936;
  _DWORD *v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  _DWORD *v1941;
  uint64_t v1942;
  _DWORD *v1943;
  int v1944;
  _DWORD *v1945;
  unsigned int v1946;
  uint64_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  uint64_t v1950;
  uint64_t v1951;
  uint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  _DWORD *v1956;
  _DWORD *v1957;
  uint64_t v1958;
  uint64_t v1959;
  uint64_t v1960;
  _DWORD *v1961;
  uint64_t v1962;
  _DWORD *v1963;
  int v1964;
  _DWORD *v1965;
  unsigned int v1966;
  uint64_t v1967;
  uint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;
  uint64_t v1972;
  uint64_t v1973;
  uint64_t v1974;
  uint64_t v1975;
  _DWORD *v1976;
  _DWORD *v1977;
  uint64_t v1978;
  uint64_t v1979;
  uint64_t v1980;
  _DWORD *v1981;
  uint64_t v1982;
  _DWORD *v1983;
  int v1984;
  _DWORD *v1985;
  uint64_t v1986;
  uint64_t v1987;
  _DWORD *v1988;
  _DWORD *v1989;
  uint64_t v1990;
  uint64_t v1991;
  uint64_t v1992;
  _DWORD *v1993;
  uint64_t v1994;
  _DWORD *v1995;
  int v1996;
  _DWORD *v1997;
  uint64_t v1998;
  uint64_t v1999;
  _DWORD *v2000;
  _DWORD *v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  _DWORD *v2005;
  uint64_t v2006;
  _DWORD *v2007;
  int v2008;
  _DWORD *v2009;
  unsigned int v2010;
  uint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  uint64_t v2015;
  uint64_t v2016;
  uint64_t v2017;
  uint64_t v2018;
  uint64_t v2019;
  _DWORD *v2020;
  _DWORD *v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  _DWORD *v2025;
  uint64_t v2026;
  _DWORD *v2027;
  int v2028;
  _DWORD *v2029;
  unsigned int v2030;
  uint64_t v2031;
  uint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  uint64_t v2037;
  uint64_t *v2038;
  unint64_t v2039;
  unint64_t v2040;
  const void *v2041;
  void *v2042;
  int v2043;
  int v2044;
  uint64_t v2045;
  uint64_t v2046;
  uint64_t v2047;
  uint64_t v2048;
  uint64_t v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  uint64_t v2053;
  int m;
  uint64_t v2055;
  unint64_t v2056;
  uint64_t v2057;
  unsigned int v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  __int128 v2062;
  uint64_t v2063;
  unsigned int *v2064;
  unsigned int v2065;
  unsigned int v2066;
  unint64_t v2067;
  _DWORD *v2068;
  unint64_t v2069;
  unsigned __int8 *v2070;
  int v2071;
  int v2072;
  unint64_t v2073;
  char v2074;
  _BOOL4 v2075;
  unint64_t v2076;
  uint64_t v2077;
  unint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  uint64_t v2083;
  uint64_t v2084;
  uint64_t v2085;
  uint64_t v2086;
  uint64_t v2087;
  unint64_t v2088;
  unsigned int v2089;
  uint64_t v2090;
  unint64_t *v2091;
  unint64_t v2092;
  int v2093;
  unsigned int v2094;
  unsigned int v2095;
  unsigned int v2096;
  uint64_t v2097;
  int v2098;
  int v2099;
  uint64_t v2100;
  unint64_t *v2101;
  unint64_t v2102;
  int v2103;
  unsigned int v2104;
  unsigned int v2105;
  unsigned int v2106;
  uint64_t v2107;
  int v2108;
  int v2109;
  uint64_t v2110;
  unint64_t *v2111;
  unint64_t v2112;
  int v2113;
  unsigned int v2114;
  unsigned int v2115;
  unsigned int v2116;
  uint64_t v2117;
  int v2118;
  int v2119;
  uint64_t v2120;
  unint64_t *v2121;
  unint64_t v2122;
  int v2123;
  unsigned int v2124;
  unsigned int v2125;
  unsigned int v2126;
  uint64_t v2127;
  int v2128;
  int v2129;
  uint64_t v2130;
  unint64_t *v2131;
  unint64_t v2132;
  int v2133;
  unsigned int v2134;
  unsigned int v2135;
  unsigned int v2136;
  uint64_t v2137;
  int v2138;
  int v2139;
  uint64_t v2140;
  unint64_t *v2141;
  unint64_t v2142;
  int v2143;
  unsigned int v2144;
  unsigned int v2145;
  unsigned int v2146;
  uint64_t v2147;
  int v2148;
  int v2149;
  JSC::ARM64LogicalImmediate *v2150;
  JSC::ARM64LogicalImmediate *v2151;
  unsigned int v2152;
  void *v2153;
  JSC::ARM64LogicalImmediate *v2154;
  uint64_t v2155;
  uint64_t v2156;
  uint64_t v2157;
  uint64_t v2158;
  uint64_t v2159;
  uint64_t v2160;
  unint64_t v2161;
  uint64_t *v2162;
  unint64_t v2163;
  unint64_t v2164;
  unint64_t v2165;
  const void *v2166;
  void *v2167;
  int i2;
  unsigned int v2169;
  unsigned __int8 v2170;
  uint64_t v2171;
  unsigned int v2172;
  unsigned int v2173;
  unsigned int v2174;
  unsigned int v2175;
  uint64_t v2176;
  int v2177;
  int v2178;
  _DWORD *v2179;
  unint64_t v2180;
  unsigned __int8 *v2181;
  int v2182;
  int v2183;
  unint64_t v2184;
  char v2185;
  _BOOL4 v2186;
  unint64_t v2187;
  uint64_t v2188;
  unint64_t v2189;
  int v2190;
  int v2191;
  uint64_t v2192;
  int v2193;
  uint64_t v2194;
  int v2195;
  uint64_t v2196;
  int v2197;
  int v2198;
  uint64_t v2199;
  uint64_t v2200;
  _DWORD *v2201;
  _DWORD *v2202;
  WTF::AtomStringImpl *v2203;
  WTF::StringImpl *v2204;
  int v2205;
  int v2206;
  unint64_t v2207;
  _QWORD *v2208;
  _QWORD *v2209;
  uint64_t v2210;
  uint64_t v2211;
  uint64_t v2212;
  uint64_t v2213;
  int v2214;
  int v2215;
  char v2216;
  _BOOL4 v2217;
  int v2218;
  int v2219;
  JSC::JITPlan *v2220;
  JSC::JITSizeStatistics *v2221;
  int v2222;
  int v2223;
  uint64_t v2224;
  uint64_t v2225;
  _DWORD *v2226;
  int v2227;
  _DWORD *v2228;
  unint64_t v2229;
  BOOL v2230;
  char **v2231;
  unsigned int v2233;
  int v2234;
  unsigned int v2235;
  _DWORD *v2236;
  uint64_t v2237;
  int v2238;
  int v2239;
  int v2240;
  uint64_t v2241;
  uint64_t v2242;
  _DWORD *v2243;
  int v2244;
  _DWORD *v2245;
  unint64_t v2246;
  BOOL v2247;
  char **v2248;
  BOOL v2249;
  unsigned int v2250;
  JSC::ARM64LogicalImmediate *v2251;
  int v2252;
  unsigned int v2253;
  _DWORD *v2254;
  int v2255;
  int v2256;
  int v2257;
  uint64_t v2258;
  uint64_t v2259;
  _DWORD *v2260;
  int v2261;
  _DWORD *v2262;
  unint64_t v2263;
  BOOL v2264;
  char **v2265;
  unsigned int v2267;
  int v2268;
  unsigned int v2269;
  _DWORD *v2270;
  unint64_t v2271;
  void *v2272;
  uint64_t v2273;
  uint64_t v2274;
  uint64_t v2275;
  uint64_t v2276;
  uint64_t v2277;
  uint64_t v2278;
  unint64_t v2279;
  void *v2280;
  uint64_t v2281;
  uint64_t v2282;
  uint64_t v2283;
  uint64_t v2284;
  uint64_t v2285;
  uint64_t v2286;
  unint64_t v2287;
  void *v2288;
  uint64_t v2289;
  uint64_t v2290;
  uint64_t v2291;
  uint64_t v2292;
  uint64_t v2293;
  uint64_t v2294;
  int v2295;
  int v2296;
  int v2297;
  int v2298;
  int v2299;
  int v2300;
  int v2301;
  int v2302;
  int v2303;
  int v2304;
  int v2305;
  int v2306;
  _DWORD *v2307;
  unint64_t v2308;
  char **v2309;
  unsigned int v2310;
  int v2311;
  unsigned int v2312;
  _DWORD *v2313;
  unint64_t v2314;
  char **v2315;
  unsigned int v2316;
  int v2317;
  unsigned int v2318;
  _DWORD *v2319;
  unint64_t v2320;
  char **v2321;
  unsigned int v2322;
  int v2323;
  unsigned int v2324;
  _DWORD *v2325;
  unint64_t v2326;
  char **v2327;
  unsigned int v2329;
  int v2330;
  unsigned int v2331;
  _DWORD *v2332;
  unint64_t v2333;
  char **v2334;
  unsigned int v2335;
  int v2336;
  unsigned int v2337;
  _DWORD *v2338;
  unint64_t v2339;
  char **v2340;
  unsigned int v2341;
  int v2342;
  unsigned int v2343;
  _DWORD *v2344;
  unint64_t v2345;
  char **v2346;
  BOOL v2347;
  unsigned int v2348;
  int v2349;
  unsigned int v2350;
  int v2351;
  int v2352;
  _DWORD *v2353;
  unint64_t v2354;
  char **v2355;
  unsigned int v2356;
  int v2357;
  unsigned int v2358;
  _DWORD *v2359;
  unint64_t v2360;
  char **v2361;
  BOOL v2362;
  unsigned int v2363;
  int v2364;
  unsigned int v2365;
  _DWORD *v2366;
  unint64_t v2367;
  char **v2368;
  BOOL v2369;
  unsigned int v2370;
  int v2371;
  unsigned int v2372;
  _DWORD *v2373;
  unint64_t v2374;
  char **v2375;
  BOOL v2376;
  unsigned int v2377;
  int v2378;
  unsigned int v2379;
  int v2380;
  int v2381;
  _DWORD *v2382;
  unint64_t v2383;
  char **v2384;
  BOOL v2385;
  unsigned int v2386;
  int v2387;
  unsigned int v2388;
  _DWORD *v2389;
  unint64_t v2390;
  char **v2391;
  unsigned int v2393;
  int v2394;
  unsigned int v2395;
  _DWORD *v2396;
  unint64_t v2397;
  char **v2398;
  unsigned int v2400;
  int v2401;
  unsigned int v2402;
  _DWORD *v2403;
  unint64_t v2404;
  char **v2405;
  BOOL v2406;
  unsigned int v2407;
  int v2408;
  unsigned int v2409;
  JSC::ARM64LogicalImmediate *v2410;
  unint64_t v2411;
  void *v2412;
  uint64_t v2413;
  uint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  unint64_t v2419;
  void *v2420;
  uint64_t v2421;
  uint64_t v2422;
  uint64_t v2423;
  uint64_t v2424;
  uint64_t v2425;
  uint64_t v2426;
  _DWORD *v2427;
  unint64_t v2428;
  char **v2429;
  unsigned int v2430;
  int v2431;
  unsigned int v2432;
  _DWORD *v2433;
  unint64_t v2434;
  char **v2435;
  unsigned int v2436;
  int v2437;
  unsigned int v2438;
  _DWORD *v2439;
  unint64_t v2440;
  char **v2441;
  BOOL v2442;
  unsigned int v2443;
  int v2444;
  unsigned int v2445;
  int v2446;
  int v2447;
  uint64_t v2448;
  uint64_t v2449;
  _DWORD *v2450;
  int v2451;
  _DWORD *v2452;
  unint64_t v2453;
  BOOL v2454;
  char **v2455;
  BOOL v2456;
  unsigned int v2457;
  int v2458;
  unsigned int v2459;
  _DWORD *v2460;
  _DWORD *v2461;
  unint64_t v2462;
  char **v2463;
  BOOL v2464;
  unsigned int v2465;
  int v2466;
  unsigned int v2467;
  _DWORD *v2468;
  unint64_t v2469;
  char **v2470;
  BOOL v2471;
  unsigned int v2472;
  int v2473;
  unsigned int v2474;
  _DWORD *v2475;
  unint64_t v2476;
  char **v2477;
  BOOL v2478;
  unsigned int v2479;
  int v2480;
  unsigned int v2481;
  uint64_t v2482;
  _DWORD *v2483;
  int v2484;
  _DWORD *v2485;
  unsigned int v2486;
  uint64_t v2487;
  uint64_t v2488;
  uint64_t v2489;
  uint64_t v2490;
  int8x8_t v2491;
  uint64_t v2492;
  uint64_t v2493;
  uint64_t v2494;
  uint64_t v2495;
  uint64_t v2496;
  unsigned int v2497;
  uint64_t v2498;
  _DWORD *v2499;
  int v2500;
  _DWORD *v2501;
  _DWORD *v2502;
  unint64_t v2503;
  char **v2504;
  BOOL v2505;
  unsigned int v2506;
  int v2507;
  unsigned int v2508;
  _DWORD *v2509;
  unint64_t v2510;
  char **v2511;
  BOOL v2512;
  unsigned int v2513;
  int v2514;
  unsigned int v2515;
  _DWORD *v2516;
  unint64_t v2517;
  char **v2518;
  BOOL v2519;
  unsigned int v2520;
  int v2521;
  unsigned int v2522;
  unint64_t v2523;
  unint64_t v2524;
  unint64_t v2525;
  unint64_t v2526;
  unint64_t v2527;
  unint64_t v2528;
  unint64_t v2529;
  unint64_t v2530;
  unint64_t v2531;
  unint64_t v2532;
  unint64_t v2533;
  unint64_t v2534;
  JSC::ARM64LogicalImmediate *v2535;
  JSC::ARM64LogicalImmediate *v2536;
  JSC::ARM64LogicalImmediate *v2537;
  int v2538;
  uint64_t v2539;
  uint64_t v2540;
  uint64_t v2541;
  uint64_t v2542;
  uint64_t v2543;
  uint64_t v2544;
  uint64_t v2545;
  uint64_t v2546;
  uint64_t v2547;
  _QWORD *v2548;
  JSC::AssemblerBuffer *v2549;
  _DWORD *v2550;
  int *v2551;
  char *v2552;
  unint64_t v2553;
  Marker v2554;

  *(_QWORD *)&v2554.markerName[242] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  v9 = *((_QWORD *)this + 81);
  *(_QWORD *)&v2554.markerName[18] = v9;
  if (*((_DWORD *)this + 165))
  {
    v10 = 0;
    jj = (char *)this + 752;
    v2548 = (_QWORD *)((char *)this + 32);
    v2549 = (JSC::JIT *)((char *)this + 56);
    v2551 = (int *)((char *)this + 200);
    v2552 = (char *)this + 752;
    v12 = (_DWORD *)((char *)this + 192);
    v2550 = (_DWORD *)((char *)this + 192);
    while (2)
    {
      v13 = *(unsigned int *)(v9 + 12);
      *((_DWORD *)this + 160) = v13;
      v14 = *((_DWORD *)this + 50);
      if (v14 < *((_DWORD *)this + 13))
      {
        do
        {
          if ((v14 + 4) > *v12)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v2549, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v14 = *v2551;
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v14) = -721215457;
          v14 = *((_DWORD *)this + 50) + 4;
          *((_DWORD *)this + 50) = v14;
        }
        while (v14 < *((_DWORD *)this + 13));
        v13 = *((unsigned int *)this + 160);
      }
      *((_DWORD *)this + 52) = 0;
      v15 = v13 == 0x3FFFFFFF || v13 == 0xFFFFFFFF;
      if (v15)
      {
        v16 = 0;
        v17 = 2;
      }
      else
      {
        v17 = v13 >> 28;
        if (v13 >> 28)
        {
          v16 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v16 = 0;
          *(_DWORD *)(v16 + 8) = v13;
          v17 = 1;
        }
        else
        {
          v16 = v13 << 36;
        }
      }
      v18 = v16 | v17;
      *(_QWORD *)&v2554.markerName[154] = v16 | v17;
      if (*((_BYTE *)this + 768))
      {
        *(_DWORD *)&v2554.markerName[218] = v14;
        JSC::PCToCodeOriginMapBuilder::appendItemSlow((uint64_t)jj, (unsigned int *)&v2554.markerName[218], (unint64_t *)&v2554.markerName[154]);
      }
      if ((v18 & 1) != 0 && (v16 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v16 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
      v19 = *((unsigned int *)this + 160);
      v20 = **(_QWORD **)(*((_QWORD *)this + 101) + 80);
      v21 = *((_QWORD *)this + 92);
      if (v21)
      {
        for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
        {
          if ((i + 4) > *v12)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v2549, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            i = *v2551;
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
          i = *((_DWORD *)this + 50) + 4;
        }
        *((_DWORD *)this + 52) = 0;
        if (*(_DWORD *)(v21 + 44) <= (v19 >> 2))
        {
          __break(0xC471u);
          JUMPOUT(0x1987247E8);
        }
        *(_DWORD *)(*(_QWORD *)(v21 + 32) + 4 * (v19 >> 2)) = i;
      }
      v23 = v20 + (v19 >> 2);
      v24 = *(unsigned __int8 *)v23;
      if ((v24 | 2) == 0x82)
        v24 = *(unsigned __int8 *)(v23 + 1);
      v25 = BYTE3(qword_1ECF4C780);
      if (!BYTE3(qword_1ECF4C780))
      {
        v2553 &= 0xFFFFFFFFFFFFFF00;
LABEL_27:
        if (byte_1ECF4C729)
        {
          v2207 = (unint64_t)*((unsigned int *)this + 160) >> 2;
          v2208 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v2208 = off_1E3595CE0;
          v2208[1] = v2207 | (v24 << 32);
          v2209 = (_QWORD *)WTF::fastMalloc((WTF *)8);
          *v2209 = v2208;
          JSC::MacroAssembler::probe(this, (uint64_t)JSC::stdFunctionCallback, (uint64_t)v2209, 1, v2210, v2211, v2212, v2213);
        }
        v26 = *(unsigned __int8 *)v23;
        v27 = v26;
        if ((v26 | 2) == 0x82)
          v27 = *(unsigned __int8 *)(v23 + 1);
        switch(v27)
        {
          case 2:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v790 = *((_DWORD *)this + 50);
            if (v790 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v783, v784, v785, v786, v787, v788, v789);
              v790 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v790) = -129989824;
            *((_DWORD *)this + 50) += 4;
            JSC::JIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *),JSC::ARM64Registers::RegisterID>((int *)&v2554.markerName[154], (uint64_t)this, v784, v785, v786, v787, v788, v789);
            v798 = *((unsigned int *)this + 170);
            *((_DWORD *)this + 170) = v798 + 1;
            if (*((_DWORD *)this + 107) <= v798)
            {
              __break(0xC471u);
              JUMPOUT(0x198724BA8);
            }
            v799 = *((_QWORD *)this + 52);
            for (j = *((_DWORD *)this + 50); j < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = j)
            {
              if ((j + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v791, v792, v793, v794, v795, v796, v797);
                j = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + j) = -721215457;
              j = *((_DWORD *)this + 50) + 4;
            }
            v801 = v799 + (v798 << 6);
            *((_DWORD *)this + 52) = 0;
            *(_DWORD *)(v801 + 28) = j;
            v802 = *(char *)(v801 + 16);
            if (v802 >= 0x1F)
            {
              __break(0xC471u);
              JUMPOUT(0x1987242E0);
            }
            JSC::JITThunks::ctiStub(*(_QWORD *)(*((_QWORD *)this + 44) + 90440), *((_QWORD *)this + 44), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3595D98[v802], v793, v794, v795, v796, v797, &v2554.markerName[218]);
            v810 = *(_QWORD *)&v2554.markerName[218];
            *((_DWORD *)this + 52) = 0;
            v811 = *((_DWORD *)this + 50);
            if (v811 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v803, v804, v805, v806, v807, v808, v809);
              v811 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v811) = -1811939328;
            v812 = (*((_DWORD *)this + 50) + 4);
            *((_DWORD *)this + 50) = v812;
            v2554.markerName[170] = -1;
            v2554.markerName[173] = 15;
            strcpy((char *)&v2554.markerName[171], "A");
            *(_QWORD *)&v2554.markerName[154] = v812 - 4;
            *(_QWORD *)&v2554.markerName[162] = v810;
            *(_WORD *)&v2554.markerName[174] = 384;
            v813 = *((unsigned int *)this + 11);
            if ((_DWORD)v813 == *((_DWORD *)this + 10))
            {
              v2192 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2548, v813 + 1, (unint64_t)&v2554.markerName[154], v805, v806, v807, v808, v809);
              v814 = *((_QWORD *)this + 4) + 24 * *((unsigned int *)this + 11);
              *(_QWORD *)v814 = 0;
              *(_QWORD *)(v814 + 8) = 0;
              *(_BYTE *)(v814 + 16) = -1;
              v2193 = (((*(unsigned __int8 *)(v814 + 19) >> 4) & 0xF) << 20) | 0xF0041;
              *(_WORD *)(v814 + 17) = 65;
              *(_BYTE *)(v814 + 19) = BYTE2(v2193);
              *(_WORD *)(v814 + 20) &= 0xFC00u;
              v815 = *(_OWORD *)v2192;
              v816 = *(_QWORD *)(v2192 + 16);
            }
            else
            {
              v814 = *v2548 + 24 * v813;
              v815 = *(_OWORD *)&v2554.markerName[154];
              v816 = *(_QWORD *)&v2554.markerName[170];
            }
            *(_QWORD *)(v814 + 16) = v816;
            *(_OWORD *)v814 = v815;
            ++*((_DWORD *)this + 11);
            v817 = *(unsigned int **)&v2554.markerName[226];
            *(_QWORD *)&v2554.markerName[226] = 0;
            if (v817)
            {
              do
              {
                v818 = __ldaxr(v817);
                v819 = v818 - 1;
              }
              while (__stlxr(v819, v817));
              if (!v819)
              {
                atomic_store(1u, v817);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v817, v803, v804, v805, v806, v807, v808, v809);
                WTF::fastFree(v2411, v2412, v2413, v2414, v2415, v2416, v2417, v2418);
              }
            }
            for (k = *((_DWORD *)this + 50); k < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = k)
            {
              if ((k + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v803, v804, v805, v806, v807, v808, v809);
                k = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + k) = -721215457;
              k = *((_DWORD *)this + 50) + 4;
            }
            v821 = k;
            if ((k + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v803, v804, v805, v806, v807, v808, v809);
              v821 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v821) = 335544320;
            *((_DWORD *)this + 50) += 4;
            if (*((_BYTE *)this + 328))
              v822 = 69;
            else
              v822 = 65;
            *(_DWORD *)&v2554.markerName[130] = k;
            *(_DWORD *)&v2554.markerName[134] = 0;
            v2554.markerName[138] = v822;
            *(_WORD *)&v2554.markerName[139] = 15;
            v2554.markerName[141] = -1;
            v823 = ((*((_DWORD *)this + 160) & 3) + 1) | *((_DWORD *)this + 160) & 0xFFFFFFFC;
            *((_DWORD *)this + 160) = v823;
            v824 = *((_QWORD *)this + 50);
            if (!v824)
            {
              v12 = v2550;
              goto LABEL_1441;
            }
            v825 = *(_DWORD *)(v824 - 8);
            v826 = 9 * ((v823 + ~(v823 << 15)) ^ ((v823 + ~(v823 << 15)) >> 10));
            v827 = (v826 ^ (v826 >> 6)) + ~((v826 ^ (v826 >> 6)) << 11);
            v828 = v825 & (v827 ^ HIWORD(v827));
            v829 = *(_DWORD *)(v824 + 8 * v828);
            if (v829 == v823)
            {
              v12 = v2550;
LABEL_765:
              v824 += 8 * v828;
              goto LABEL_1441;
            }
            v1198 = 1;
            v12 = v2550;
            while (v829 != -1)
            {
              v828 = ((_DWORD)v828 + v1198) & v825;
              v829 = *(_DWORD *)(v824 + 8 * v828);
              ++v1198;
              if (v829 == v823)
                goto LABEL_765;
            }
            v824 += 8 * *(unsigned int *)(v824 - 4);
LABEL_1441:
            if (k != -1)
            {
              *(_DWORD *)&v2554.markerName[154] = *(_DWORD *)(v824 + 4);
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[130], (unsigned int *)&v2554.markerName[154], (uint64_t)this, v805, v806, v807, v808, v809);
            }
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], v804, v805, v806, v807, v808, v809);
            v2052 = *((unsigned int *)this + 170);
            *((_DWORD *)this + 170) = v2052 + 1;
            if (*((_DWORD *)this + 107) <= v2052)
            {
              __break(0xC471u);
              JUMPOUT(0x198724C18);
            }
            v2053 = *((_QWORD *)this + 52);
            for (m = *((_DWORD *)this + 50); m < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = m)
            {
              if ((m + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v2045, v2046, v2047, v2048, v2049, v2050, v2051);
                m = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + m) = -721215457;
              m = *((_DWORD *)this + 50) + 4;
            }
            v2055 = v2053 + (v2052 << 6);
            *((_DWORD *)this + 52) = 0;
            *(_DWORD *)(v2055 + 28) = m;
            v2056 = *(char *)(v2055 + 16);
            if (v2056 >= 0x1F)
            {
              __break(0xC471u);
              JUMPOUT(0x198724300);
            }
            JSC::JITThunks::ctiStub(*(_QWORD *)(*((_QWORD *)this + 44) + 90440), *((_QWORD *)this + 44), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3595D98[v2056], v2047, v2048, v2049, v2050, v2051, &v2554.markerName[218]);
            v2057 = *(_QWORD *)&v2554.markerName[218];
            *((_DWORD *)this + 52) = 0;
            v2058 = *((_DWORD *)this + 50);
            if (v2058 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, (uint64_t)v28, v29, v30, v31, v32, v33, v34);
              v2058 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v2058) = -1811939328;
            v2059 = (*((_DWORD *)this + 50) + 4);
            *((_DWORD *)this + 50) = v2059;
            v2554.markerName[170] = -1;
            v2554.markerName[173] = 15;
            strcpy((char *)&v2554.markerName[171], "A");
            *(_QWORD *)&v2554.markerName[154] = v2059 - 4;
            *(_QWORD *)&v2554.markerName[162] = v2057;
            *(_WORD *)&v2554.markerName[174] = 384;
            v2060 = *((unsigned int *)this + 11);
            if ((_DWORD)v2060 == *((_DWORD *)this + 10))
            {
              v2194 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2548, v2060 + 1, (unint64_t)&v2554.markerName[154], v30, v31, v32, v33, v34);
              v2061 = *((_QWORD *)this + 4) + 24 * *((unsigned int *)this + 11);
              *(_QWORD *)v2061 = 0;
              *(_QWORD *)(v2061 + 8) = 0;
              *(_BYTE *)(v2061 + 16) = -1;
              v2195 = (((*(unsigned __int8 *)(v2061 + 19) >> 4) & 0xF) << 20) | 0xF0041;
              *(_WORD *)(v2061 + 17) = 65;
              *(_BYTE *)(v2061 + 19) = BYTE2(v2195);
              *(_WORD *)(v2061 + 20) &= 0xFC00u;
              v2062 = *(_OWORD *)v2194;
              v2063 = *(_QWORD *)(v2194 + 16);
            }
            else
            {
              v2061 = *v2548 + 24 * v2060;
              v2062 = *(_OWORD *)&v2554.markerName[154];
              v2063 = *(_QWORD *)&v2554.markerName[170];
            }
            *(_QWORD *)(v2061 + 16) = v2063;
            *(_OWORD *)v2061 = v2062;
            jj = v2552;
            ++*((_DWORD *)this + 11);
            v2064 = *(unsigned int **)&v2554.markerName[226];
            *(_QWORD *)&v2554.markerName[226] = 0;
            if (!v2064)
              goto LABEL_1549;
            do
            {
              v2065 = __ldaxr(v2064);
              v2066 = v2065 - 1;
            }
            while (__stlxr(v2066, v2064));
            if (v2066)
              goto LABEL_1549;
            atomic_store(1u, v2064);
            JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v2064, (uint64_t)v28, v29, v30, v31, v32, v33, v34);
            goto LABEL_1477;
          case 4:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            *(_QWORD *)&v2554.markerName[154] = &v2554.markerName[170];
            *(_QWORD *)&v2554.markerName[162] = 2;
            JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, 0, 1, v766, v767, v768, v769, v770, (uint64_t)&v2554.markerName[26]);
            if (*(_DWORD *)&v2554.markerName[26] != -1)
            {
              if (*(_DWORD *)&v2554.markerName[166] == *(_DWORD *)&v2554.markerName[162])
              {
                v778 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2554.markerName[154], (void *)(*(unsigned int *)&v2554.markerName[166] + 1), (unint64_t)&v2554.markerName[26], v773, v774, v775, v776, v777);
                v780 = *v778;
                v779 = (unsigned __int8 *)(v778 + 1);
                v781 = (_DWORD *)(*(_QWORD *)&v2554.markerName[154] + 12 * *(unsigned int *)&v2554.markerName[166]);
                *v781 = v780;
                v782 = v781 + 1;
              }
              else
              {
                v1183 = (_DWORD *)(*(_QWORD *)&v2554.markerName[154] + 12 * *(unsigned int *)&v2554.markerName[166]);
                *v1183 = *(_DWORD *)&v2554.markerName[26];
                v782 = v1183 + 1;
                v779 = &v2554.markerName[30];
              }
              *v782 = *(_QWORD *)v779;
              ++*(_DWORD *)&v2554.markerName[166];
            }
            if (!*((_BYTE *)this + 212))
            {
              __break(0xC471u);
              JUMPOUT(0x1987237BCLL);
            }
            *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
            v1184 = *((_BYTE *)this + 304);
            v1185 = *((_DWORD *)this + 50);
            if (v1185 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v771, v772, v773, v774, v775, v776, v777);
              v1185 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v1185) = v1184 & 0x1F | 0x38405000;
            *((_DWORD *)this + 50) += 4;
            JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v774, v775, v776, v777, (uint64_t)&v2554.markerName[118]);
            if (*(_DWORD *)&v2554.markerName[118] != -1)
            {
              if (*(_DWORD *)&v2554.markerName[166] == *(_DWORD *)&v2554.markerName[162])
              {
                v1193 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2554.markerName[154], (void *)(*(unsigned int *)&v2554.markerName[166] + 1), (unint64_t)&v2554.markerName[118], v1188, v1189, v1190, v1191, v1192);
                v1195 = *v1193;
                v1194 = (unsigned __int8 *)(v1193 + 1);
                v1196 = (_DWORD *)(*(_QWORD *)&v2554.markerName[154] + 12 * *(unsigned int *)&v2554.markerName[166]);
                *v1196 = v1195;
                v1197 = v1196 + 1;
              }
              else
              {
                v1199 = (_DWORD *)(*(_QWORD *)&v2554.markerName[154] + 12 * *(unsigned int *)&v2554.markerName[166]);
                *v1199 = *(_DWORD *)&v2554.markerName[118];
                v1197 = v1199 + 1;
                v1194 = &v2554.markerName[122];
              }
              *v1197 = *(_QWORD *)v1194;
              ++*(_DWORD *)&v2554.markerName[166];
            }
            v1200 = *((unsigned int *)this + 170);
            *((_DWORD *)this + 170) = v1200 + 1;
            if (*((_DWORD *)this + 107) <= v1200)
            {
              __break(0xC471u);
              JUMPOUT(0x198724C48);
            }
            v1201 = *((_QWORD *)this + 52);
            for (n = *((_DWORD *)this + 50); n < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = n)
            {
              if ((n + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v1186, v1187, v1188, v1189, v1190, v1191, v1192);
                n = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + n) = -721215457;
              n = *((_DWORD *)this + 50) + 4;
            }
            v1203 = v1201 + (v1200 << 6);
            *((_DWORD *)this + 52) = 0;
            *(_DWORD *)(v1203 + 28) = n;
            v1204 = *(char *)(v1203 + 16);
            if (v1204 >= 0x1F)
            {
              __break(0xC471u);
              JUMPOUT(0x198724320);
            }
            JSC::JITThunks::ctiStub(*(_QWORD *)(*((_QWORD *)this + 44) + 90440), *((_QWORD *)this + 44), (void (*)(uint64_t *__return_ptr, uint64_t))off_1E3595D98[v1204], v1188, v1189, v1190, v1191, v1192, &v2554.markerName[130]);
            v1212 = *(_QWORD *)&v2554.markerName[130];
            *((_DWORD *)this + 52) = 0;
            v1213 = *((_DWORD *)this + 50);
            if (v1213 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1205, v1206, v1207, v1208, v1209, v1210, v1211);
              v1213 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v1213) = -1811939328;
            v1214 = (*((_DWORD *)this + 50) + 4);
            *((_DWORD *)this + 50) = v1214;
            v2554.markerName[234] = -1;
            v2554.markerName[237] = 15;
            strcpy((char *)&v2554.markerName[235], "A");
            *(_QWORD *)&v2554.markerName[218] = v1214 - 4;
            *(_QWORD *)&v2554.markerName[226] = v1212;
            *(_WORD *)&v2554.markerName[238] = 384;
            v1215 = *((unsigned int *)this + 11);
            if ((_DWORD)v1215 == *((_DWORD *)this + 10))
            {
              v2196 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2548, v1215 + 1, (unint64_t)&v2554.markerName[218], v1207, v1208, v1209, v1210, v1211);
              v1216 = *((_QWORD *)this + 4) + 24 * *((unsigned int *)this + 11);
              *(_QWORD *)v1216 = 0;
              *(_QWORD *)(v1216 + 8) = 0;
              *(_BYTE *)(v1216 + 16) = -1;
              v2197 = (((*(unsigned __int8 *)(v1216 + 19) >> 4) & 0xF) << 20) | 0xF0041;
              *(_WORD *)(v1216 + 17) = 65;
              *(_BYTE *)(v1216 + 19) = BYTE2(v2197);
              *(_WORD *)(v1216 + 20) &= 0xFC00u;
              v1217 = *(_OWORD *)v2196;
              v1218 = *(_QWORD *)(v2196 + 16);
            }
            else
            {
              v1216 = *v2548 + 24 * v1215;
              v1217 = *(_OWORD *)&v2554.markerName[218];
              v1218 = *(_QWORD *)&v2554.markerName[234];
            }
            *(_QWORD *)(v1216 + 16) = v1218;
            *(_OWORD *)v1216 = v1217;
            jj = v2552;
            ++*((_DWORD *)this + 11);
            v1219 = *(unsigned int **)&v2554.markerName[138];
            *(_QWORD *)&v2554.markerName[138] = 0;
            if (v1219)
            {
              do
              {
                v1220 = __ldaxr(v1219);
                v1221 = v1220 - 1;
              }
              while (__stlxr(v1221, v1219));
              if (!v1221)
              {
                atomic_store(1u, v1219);
                JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v1219, v1205, v1206, v1207, v1208, v1209, v1210, v1211);
                WTF::fastFree(v2419, v2420, v2421, v2422, v2423, v2424, v2425, v2426);
              }
            }
            for (ii = *((_DWORD *)this + 50); ii < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = ii)
            {
              if ((ii + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v1205, v1206, v1207, v1208, v1209, v1210, v1211);
                ii = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + ii) = -721215457;
              ii = *((_DWORD *)this + 50) + 4;
            }
            v1223 = ii;
            if ((ii + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1205, v1206, v1207, v1208, v1209, v1210, v1211);
              v1223 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v1223) = 335544320;
            *((_DWORD *)this + 50) += 4;
            if (*((_BYTE *)this + 328))
              v1224 = 69;
            else
              v1224 = 65;
            *(_DWORD *)&v2554.markerName[218] = ii;
            *(_DWORD *)&v2554.markerName[222] = 0;
            v2554.markerName[226] = v1224;
            *(_WORD *)&v2554.markerName[227] = 15;
            v2554.markerName[229] = -1;
            v1225 = *((_QWORD *)this + 51);
            if (!v1225)
            {
              v1227 = *((_DWORD *)this + 160);
              goto LABEL_1457;
            }
            v1226 = *(_DWORD *)(v1225 - 8);
            v1227 = *((_DWORD *)this + 160);
            v1228 = 9 * ((v1227 + ~(v1227 << 15)) ^ ((v1227 + ~(v1227 << 15)) >> 10));
            v1229 = (v1228 ^ (v1228 >> 6)) + ~((v1228 ^ (v1228 >> 6)) << 11);
            v1230 = (v1229 ^ HIWORD(v1229)) & v1226;
            v1231 = *(_DWORD *)(v1225 + 8 * v1230);
            if (v1231 == v1227)
              goto LABEL_1455;
            v1232 = 1;
            while (v1231 != -1)
            {
              v1230 = ((_DWORD)v1230 + v1232) & v1226;
              v1231 = *(_DWORD *)(v1225 + 8 * v1230);
              ++v1232;
              if (v1231 == v1227)
                goto LABEL_1455;
            }
            v1230 = *(unsigned int *)(v1225 - 4);
LABEL_1455:
            if (v1230 != *(_DWORD *)(v1225 - 4))
            {
              v2068 = (_DWORD *)(v1225 + 8 * v1230 + 4);
              goto LABEL_1468;
            }
LABEL_1457:
            v2069 = v1227;
            v2070 = (unsigned __int8 *)(**(_QWORD **)(*((_QWORD *)this + 101) + 80) + ((unint64_t)v1227 >> 2));
            v2071 = *v2070;
            v2072 = v2071;
            if ((v2071 | 2) == 0x82)
              v2072 = v2070[1];
            v2073 = v2069 >> 2;
            v2074 = v2071 == 128;
            if (v2071 == 130)
              v2074 = 2;
            v2075 = v2071 == 128 || v2071 == 130;
            v2076 = (unint64_t)JSC::opcodeLengths[v2072] << v2074;
            v15 = !v2075;
            v2077 = 1;
            if (!v15)
              v2077 = 2;
            v2078 = v2077 + v2073 + v2076;
            if (v2078 >= *((unsigned int *)this + 99))
            {
              __break(0xC471u);
              JUMPOUT(0x198724A30);
            }
            v2068 = (_DWORD *)(*((_QWORD *)this + 48) + 4 * v2078);
LABEL_1468:
            *(_DWORD *)&v2554.markerName[130] = *v2068;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[218], (unsigned int *)&v2554.markerName[130], (uint64_t)this, v1207, v1208, v1209, v1210, v1211);
            v2086 = *(unsigned int *)&v2554.markerName[166];
            if (*(_DWORD *)&v2554.markerName[166])
            {
              v2087 = 0;
              v2088 = 0;
              do
              {
                if (v2088 >= *(unsigned int *)&v2554.markerName[166])
                {
                  __break(0xC471u);
                  JUMPOUT(0x198724838);
                }
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)&v2554.markerName[154] + v2087), (uint64_t)this, v2080, v2081, v2082, v2083, v2084, v2085);
                ++v2088;
                v2087 += 12;
              }
              while (v2086 != v2088);
            }
            v2089 = *v2551;
            if ((*v2551 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v2079, v2080, v2081, v2082, v2083, v2084, v2085);
              v2089 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v2089) = -129989824;
            *((_DWORD *)this + 50) += 4;
            JSC::JIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *),JSC::ARM64Registers::RegisterID>((int *)&v2554.markerName[218], (uint64_t)this, v2080, v2081, v2082, v2083, v2084, v2085);
            v2067 = *(_QWORD *)&v2554.markerName[154];
            if (&v2554.markerName[170] != (unsigned __int8 *)*(Marker **)&v2554.markerName[154]
              && *(_QWORD *)&v2554.markerName[154])
            {
              *(_QWORD *)&v2554.markerName[154] = 0;
              *(_DWORD *)&v2554.markerName[162] = 0;
LABEL_1477:
              WTF::fastFree(v2067, v28, v29, v30, v31, v32, v33, v34);
            }
            goto LABEL_1549;
          case 5:
          case 6:
            JSC::JIT::emitSlow_op_set_private_brand((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 7:
            JSC::JIT::emitSlow_op_put_by_id((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 10:
            JSC::JIT::compileCallDirectEvalSlowCase((uint64_t *)this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 12:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_create_generator;
            goto LABEL_746;
          case 13:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_create_async_generator;
            goto LABEL_746;
          case 14:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_create_promise;
            goto LABEL_746;
          case 18:
          case 19:
          case 45:
            JSC::JIT::emitSlow_op_try_get_by_id((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 25:
            JSC::JIT::emitSlow_op_resolve_scope((uint64_t)this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 26:
            JSC::JIT::emitSlow_op_get_from_scope((uint64_t)this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 27:
            JSC::JIT::emitSlow_op_put_to_scope((uint64_t)this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 28:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_create_this;
            goto LABEL_746;
          case 29:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v665 = *(unsigned __int8 *)v23;
            if (v665 == 128)
            {
              v666 = *(__int16 *)(v23 + 2);
              v667 = v666 + 1073741760;
              v668 = v666 <= 63;
            }
            else
            {
              if (v665 == 130)
              {
                v1177 = *(unsigned int *)(v23 + 2);
                goto LABEL_752;
              }
              v666 = *(char *)(v23 + 1);
              v667 = v666 + 1073741808;
              v668 = v666 <= 15;
            }
            if (v668)
              v1177 = v666;
            else
              v1177 = v667;
LABEL_752:
            JSC::JIT::callOperationNoExceptionCheck<JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,JSC::ARM64Registers::RegisterID>(*((JSC::ARM64LogicalImmediate **)this + 44), (uint64_t)this, (unsigned __int8 *)operationNewObject, 3, v661, v662, v663, v664, (int *)&v2554.markerName[154]);
            JSC::MacroAssemblerARM64::store64((uint64_t)this, 0, (v1177 << 35) | 0x1D, v1178, v1179, v1180, v1181, v1182);
            goto LABEL_1549;
          case 31:
            JSC::JIT::emitSlow_op_get_by_val_with_this((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 32:
            JSC::JIT::emitSlow_op_get_by_val((uint64_t)this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 33:
            JSC::JIT::emitSlow_op_put_private_name((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 34:
            JSC::JIT::generateGetByValSlowCase<JSC::OpGetByVal>((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 35:
            JSC::JIT::emitSlow_op_put_by_val((uint64_t)this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 36:
            JSC::JIT::emitSlow_op_put_by_val_direct((uint64_t)this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 37:
            JSC::JIT::emitSlow_op_in_by_val((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 41:
            if (v26 == 130)
            {
              *(_OWORD *)&v2554.markerName[154] = *(_OWORD *)(v23 + 2);
              *(_QWORD *)&v2554.markerName[170] = *(_QWORD *)(v23 + 18);
              v2554.markerName[178] = *(_DWORD *)(v23 + 26);
              *(_DWORD *)&v2554.markerName[182] = *(_DWORD *)(v23 + 30);
            }
            else
            {
              if (v26 == 128)
                JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal((uint64_t)&v2554.markerName[154], (const unsigned __int16 *)(v23 + 2));
              else
                JSC::OpEnumeratorPutByVal::OpEnumeratorPutByVal((uint64_t)&v2554.markerName[154], (const unsigned __int8 *)(v23 + 1));
              jj = v2552;
              v12 = v2550;
            }
            JSC::JIT::generatePutByValSlowCase<JSC::OpPutByVal>((uint64_t)this, (uint64_t)&v2554.markerName[154], (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 42:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_to_this;
            goto LABEL_746;
          case 43:
            if (v26 == 130)
            {
              *(_OWORD *)&v2554.markerName[154] = *(_OWORD *)(v23 + 2);
              *(_OWORD *)&v2554.markerName[170] = *(_OWORD *)(v23 + 18);
            }
            else
            {
              if (v26 == 128)
                JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal((int *)&v2554.markerName[154], (const unsigned __int16 *)(v23 + 2));
              else
                JSC::OpEnumeratorGetByVal::OpEnumeratorGetByVal((int *)&v2554.markerName[154], (const unsigned __int8 *)(v23 + 1));
              jj = v2552;
              v12 = v2550;
            }
            JSC::JIT::generateGetByValSlowCase<JSC::OpGetByVal>((uint64_t)this, (uint64_t)&v2554.markerName[154], (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 44:
            JSC::JIT::emitSlow_op_get_by_id_direct((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 49:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_get_prototype_of;
            goto LABEL_746;
          case 51:
            JSC::JIT::emitSlow_op_get_by_id_with_this((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 52:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_to_object;
            goto LABEL_746;
          case 53:
            JSC::JIT::emitSlow_op_in_by_id((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 54:
          case 55:
            JSC::JIT::emitHasPrivateSlow((uint64_t)this, 0, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 57:
            JSC::JIT::emitSlow_op_del_by_id((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 59:
            JSC::JIT::emitSlow_op_del_by_val((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 75:
            JSC::JIT::emitSlow_op_jeq((uint64_t)this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 76:
            JSC::JIT::emitSlow_op_jstricteq((uint64_t)this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 77:
            JSC::JIT::emitSlow_op_jneq((uint64_t)this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 78:
            JSC::JIT::emitSlow_op_jnstricteq((uint64_t)this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 79:
            *(_DWORD *)&v2554.markerName[50] = 3;
            v2554.markerName[49] = 0;
            v1009 = *(unsigned __int8 *)v23;
            if (v1009 == 128)
            {
              v1233 = *(__int16 *)(v23 + 2);
              if (v1233 <= 63)
                v1011 = *(__int16 *)(v23 + 2);
              else
                v1011 = v1233 + 1073741760;
              v1234 = *(__int16 *)(v23 + 4);
              if (v1234 <= 63)
                v1013 = *(__int16 *)(v23 + 4);
              else
                v1013 = v1234 + 1073741760;
              LODWORD(v1014) = *(__int16 *)(v23 + 6);
              if (*(_WORD *)(v23 + 6))
                goto LABEL_807;
            }
            else if (v1009 == 130)
            {
              v1011 = *(_DWORD *)(v23 + 2);
              v1013 = *(_DWORD *)(v23 + 6);
              LODWORD(v1014) = *(_DWORD *)(v23 + 10);
              if ((_DWORD)v1014)
                goto LABEL_807;
            }
            else
            {
              v1010 = *(char *)(v23 + 1);
              if (v1010 <= 15)
                v1011 = *(char *)(v23 + 1);
              else
                v1011 = v1010 + 1073741808;
              v1012 = *(char *)(v23 + 2);
              if (v1012 <= 15)
                v1013 = *(char *)(v23 + 2);
              else
                v1013 = v1012 + 1073741808;
              LODWORD(v1014) = *(char *)(v23 + 3);
              if (*(_BYTE *)(v23 + 3))
                goto LABEL_807;
            }
            v1235 = *((_QWORD *)this + 101);
            v1236 = *(unint64_t **)(v1235 + 80);
            v1237 = *v1236;
            if (*v1236 > v23 || v23 >= *((unsigned int *)v1236 + 3) + v1237)
            {
              __break(0xC471u);
              JUMPOUT(0x198723C9CLL);
            }
            v1014 = *(_QWORD *)(v1235 + 144);
            if (v1014)
            {
              v1238 = v23 - v1237;
              v1239 = *(_DWORD *)(v1014 - 8);
              v1240 = 9 * ((~(v1238 << 15) + v1238) ^ ((~(v1238 << 15) + v1238) >> 10));
              v1241 = (v1240 ^ (v1240 >> 6)) + ~((v1240 ^ (v1240 >> 6)) << 11);
              v1242 = v1239 & (v1241 ^ HIWORD(v1241));
              v1243 = *(_DWORD *)(v1014 + 8 * v1242);
              if (v1243 == v1238)
              {
LABEL_806:
                LODWORD(v1014) = *(_DWORD *)(v1014 + 8 * v1242 + 4);
                goto LABEL_807;
              }
              v1244 = 1;
              while (v1243)
              {
                v1242 = ((_DWORD)v1242 + v1244) & v1239;
                v1243 = *(_DWORD *)(v1014 + 8 * v1242);
                ++v1244;
                if (v1243 == v1238)
                  goto LABEL_806;
              }
              LODWORD(v1014) = 0;
            }
LABEL_807:
            *(_DWORD *)&v2554.markerName[42] = v1014;
            *(_QWORD *)&v2554.markerName[218] = this;
            *(_QWORD *)&v2554.markerName[226] = &v2554.markerName[49];
            *(_QWORD *)&v2554.markerName[234] = &v2554.markerName[42];
            *(_QWORD *)&v2554.markerName[130] = this;
            *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[50];
            v1245 = v1009;
            *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[42];
            if ((v1009 | 2) == 0x82)
              v1245 = *(unsigned __int8 *)(v23 + 1);
            v1246 = v1009 == 128;
            if (v1009 == 130)
              v1246 = 2;
            v1247 = v1009 == 128 || v1009 == 130;
            v1248 = (unint64_t)JSC::opcodeLengths[v1245] << v1246;
            v15 = !v1247;
            v1249 = 1;
            if (!v15)
              v1249 = 2;
            *(_QWORD *)&v2554.markerName[106] = v1248 + v1249;
            *(_QWORD *)&v2554.markerName[98] = operationCompareLess;
            if (v1011 >= 0x40000000)
            {
              v1721 = *((_QWORD *)this + 101);
              v1722 = (v1011 - 0x40000000);
              v1723 = *(_DWORD **)(v1721 + 120);
              if (!v1723 || *v1723 <= v1722 || *((_BYTE *)v1723 + v1722 + 4) != 3)
              {
                v1724 = *(_DWORD **)(v1721 + 112);
                if (*v1724 <= v1722)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19872395CLL);
                }
                v1725 = *(_QWORD *)&v1724[2 * v1722 + 2];
                if ((v1725 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1725 + 5) == 2)
                {
                  if (v1723 && *v1723 > v1722 && *((_BYTE *)v1723 + v1722 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723E00);
                  }
                  v1726 = *(_QWORD *)(v1725 + 8);
                  v1727 = v1725 + 16;
                  v1728 = (_DWORD *)((v1726 & 1) != 0 ? v1727 : v1726 + 4);
                  if (*v1728 == 1)
                  {
                    v2546 = v1013;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
LABEL_2180:
                    v2498 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v2499 = *(_DWORD **)(v2498 + 120);
                    if (!v2499 || *v2499 <= v1722)
                      goto LABEL_2216;
                    v2500 = *((unsigned __int8 *)v2499 + v1722 + 4);
                    if ((v2500 - 1) < 2)
                      goto LABEL_2183;
                    if (v2500)
                    {
                      if (v2500 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724C88);
                      }
                    }
                    else
                    {
LABEL_2216:
                      v2509 = *(_DWORD **)(v2498 + 112);
                      if (*v2509 <= v1722)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987247C0);
                      }
                      v2510 = *(_QWORD *)&v2509[2 * v1722 + 2];
                      if (!v2510
                        || (v2510 & 0xFFFE000000000002) != 0
                        || ((v2511 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2510 & 0xFFFFFFFE) + 0x4C)),
                             v2511 != &JSC::SymbolTable::s_info)
                          ? (v2512 = v2511 == &JSC::JSTemplateObjectDescriptor::s_info)
                          : (v2512 = 1),
                            !v2512))
                      {
LABEL_2183:
                        v2501 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                        if (*v2501 <= v1722)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198724700);
                        }
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v2501[2 * v1722 + 2], 1, v1731, v1732, v1733, v1734, v1735);
                        goto LABEL_2185;
                      }
                    }
                    v2513 = *v2551;
                    if ((*v2551 + 4) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1729, v1730, v1731, v1732, v1733, v1734, v1735);
                      v2513 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2513) = -129956959;
                    v2514 = *v2551;
                    v2515 = *v2551 + 4;
                    *v2551 = v2515;
                    if ((v2514 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1729, v1730, v1731, v1732, v1733, v1734, v1735);
                      v2515 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2515) = -129368031;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v1011 << 35) | 1, 1, v1731, v1732, v1733, v1734, v1735);
LABEL_2185:
                    if (v1013 < 0x40000000)
                    {
                      JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2546 << 35) | 0x1D, 2, v1832, v1833, v1834, v1835, v1836);
                      goto LABEL_2187;
                    }
                    v1823 = (v1013 - 0x40000000);
                    v12 = v2550;
LABEL_1185:
                    v1837 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1838 = *(_DWORD **)(v1837 + 120);
                    jj = v2552;
                    if (!v1838 || *v1838 <= v1823)
                      goto LABEL_1886;
                    v1839 = *((unsigned __int8 *)v1838 + v1823 + 4);
                    if ((v1839 - 1) < 2)
                      goto LABEL_1188;
                    if (v1839)
                    {
                      if (v1839 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724918);
                      }
                    }
                    else
                    {
LABEL_1886:
                      v2366 = *(_DWORD **)(v1837 + 112);
                      if (*v2366 <= v1823)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724520);
                      }
                      v2367 = *(_QWORD *)&v2366[2 * v1823 + 2];
                      if (!v2367
                        || (v2367 & 0xFFFE000000000002) != 0
                        || ((v2368 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2367 & 0xFFFFFFFE) + 0x4C)),
                             v2368 != &JSC::SymbolTable::s_info)
                          ? (v2369 = v2368 == &JSC::JSTemplateObjectDescriptor::s_info)
                          : (v2369 = 1),
                            !v2369))
                      {
LABEL_1188:
                        v1840 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                        if (*v1840 <= v1823)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198724240);
                        }
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1840[2 * v1823 + 2], 2, v1832, v1833, v1834, v1835, v1836);
                        goto LABEL_1190;
                      }
                    }
                    v2370 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1830, v1831, v1832, v1833, v1834, v1835, v1836);
                      v2370 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2370) = -129956958;
                    v2371 = *v2551;
                    v2372 = *v2551 + 4;
                    *v2551 = v2372;
                    if ((v2371 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1830, v1831, v1832, v1833, v1834, v1835, v1836);
                      v2372 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2372) = -129367998;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2546 << 35) | 2, 2, v1832, v1833, v1834, v1835, v1836);
LABEL_2187:
                    jj = v2552;
                    v12 = v2550;
LABEL_1190:
                    v1813 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1841, v1842, v1843, v1844, v1810, v1811, v1812);
                      v1813 = *v2551;
                    }
                    goto LABEL_1169;
                  }
                }
              }
            }
            if (v1013 >= 0x40000000)
            {
              v1822 = *((_QWORD *)this + 101);
              v1823 = (v1013 - 0x40000000);
              v1824 = *(_DWORD **)(v1822 + 120);
              if (!v1824 || *v1824 <= v1823 || *((_BYTE *)v1824 + v1823 + 4) != 3)
              {
                v1825 = *(_DWORD **)(v1822 + 112);
                if (*v1825 <= v1823)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198723A5CLL);
                }
                v1826 = *(_QWORD *)&v1825[2 * v1823 + 2];
                if ((v1826 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1826 + 5) == 2)
                {
                  if (v1824 && *v1824 > v1823 && *((_BYTE *)v1824 + v1823 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723E80);
                  }
                  v1827 = *(_QWORD *)(v1826 + 8);
                  v1828 = v1826 + 16;
                  v1829 = (_DWORD *)((v1827 & 1) != 0 ? v1828 : v1827 + 4);
                  if (*v1829 == 1)
                  {
                    v2546 = v1013;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
                    if (v1011 >= 0x40000000)
                    {
                      v1722 = (v1011 - 0x40000000);
                      goto LABEL_2180;
                    }
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v1011 << 35) | 0x1D, 1, v1731, v1732, v1733, v1734, v1735);
                    goto LABEL_1185;
                  }
                }
              }
            }
            *(_QWORD *)&v2554.markerName[90] = this;
            *(_QWORD *)&v2554.markerName[154] = this;
            *(_QWORD *)&v2554.markerName[162] = &v2554.markerName[18];
            *(_QWORD *)&v2554.markerName[170] = &v2554.markerName[90];
            *(_QWORD *)&v2554.markerName[178] = &v2554.markerName[130];
            *(_QWORD *)&v2554.markerName[186] = &v2554.markerName[106];
            *(_QWORD *)&v2554.markerName[194] = &v2554.markerName[98];
            *(_QWORD *)&v2554.markerName[202] = &v2554.markerName[218];
            jj = v2552;
            if ((JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v1011, 0, 0, 2, 1, a7, a8) & 1) != 0|| (JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v1013, 2, 1, 0, 0, v33, v34) & 1) != 0)
            {
              goto LABEL_1549;
            }
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v29, v30, v31, v32, v33, v34);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 0, 27, v1250, v1251, v1252, v1253, (uint64_t)&v2554.markerName[118]);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 2, 27, v1254, v1255, v1256, v1257, (uint64_t)&v2554.markerName[78]);
            JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, 2, 27, v1258, v1259, v1260, v1261, (uint64_t)&v2554.markerName[66]);
            v1269 = *(_QWORD *)&v2554.markerName[90];
            v1270 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v1271 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v1271 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v1262, v1263, v1264, v1265, v1266, v1267, v1268);
              v1271 = *(_DWORD *)(v1269 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1269 + 56) + v1271) = -1962933408;
            v1272 = *(_DWORD *)(v1269 + 200);
            v1273 = v1272 + 4;
            *(_DWORD *)(v1269 + 200) = v1272 + 4;
            if ((v1272 + 8) > *(_DWORD *)(v1269 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v1270, v1262, v1263, v1264, v1265, v1266, v1267, v1268);
              v1273 = *(_DWORD *)(v1269 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1269 + 56) + v1273) = -1637416960;
            *(_DWORD *)(v1269 + 200) += 4;
            v1274 = *(_QWORD *)&v2554.markerName[90];
            v1275 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v1276 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v1276 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v1262, v1263, v1264, v1265, v1266, v1267, v1268);
              v1276 = *(_DWORD *)(v1274 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1274 + 56) + v1276) = -1962802334;
            v1277 = *(_DWORD *)(v1274 + 200);
            v1278 = v1277 + 4;
            *(_DWORD *)(v1274 + 200) = v1277 + 4;
            if ((v1277 + 8) > *(_DWORD *)(v1274 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v1275, v1262, v1263, v1264, v1265, v1266, v1267, v1268);
              v1278 = *(_DWORD *)(v1274 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1274 + 56) + v1278) = -1637416895;
            *(_DWORD *)(v1274 + 200) += 4;
            v1279 = *(_QWORD *)&v2554.markerName[130];
            v1280 = **(_DWORD **)&v2554.markerName[138];
            v1281 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 200);
            if (v1281 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[130] + 56), v1262, v1263, v1264, v1265, v1266, v1267, v1268);
              v1281 = *(_DWORD *)(v1279 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1279 + 56) + v1281) = 509681664;
            *(_DWORD *)(v1279 + 200) += 4;
            JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(v1279, v1280, v1263, v1264, v1265, v1266, v1267, v1268, (uint64_t)&v2554.markerName[26]);
            v1287 = **(_DWORD **)&v2554.markerName[146] + (*(_DWORD *)(v1279 + 640) >> 2);
            if (*(_DWORD *)(v1279 + 396) <= v1287)
            {
              __break(0xC471u);
              JUMPOUT(0x198724CA0);
            }
            *(_DWORD *)&v2554.markerName[114] = *(_DWORD *)(*(_QWORD *)(v1279 + 384) + 4 * v1287);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[26], (unsigned int *)&v2554.markerName[114], v1279, v1282, v1283, v1284, v1285, v1286);
            v1295 = *((_DWORD *)this + 50);
            for (jj = v2552; v1295 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v1295)
            {
              if ((v1295 + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v1288, v1289, v1290, v1291, v1292, v1293, v1294);
                v1295 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v1295) = -721215457;
              v1295 = *((_DWORD *)this + 50) + 4;
            }
            v1296 = v1295;
            if ((v1295 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1288, v1289, v1290, v1291, v1292, v1293, v1294);
              v1296 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v1296) = 335544320;
            *((_DWORD *)this + 50) += 4;
            if (*((_BYTE *)this + 328))
              v1297 = 69;
            else
              v1297 = 65;
            *(_DWORD *)&v2554.markerName[54] = v1295;
            *(_DWORD *)&v2554.markerName[58] = 0;
            v2554.markerName[62] = v1297;
            *(_WORD *)&v2554.markerName[63] = 15;
            v2554.markerName[65] = -1;
            v1298 = *(_DWORD *)&v2554.markerName[106] + (*((_DWORD *)this + 160) >> 2);
            if (*((_DWORD *)this + 99) <= v1298)
            {
              __break(0xC471u);
              JUMPOUT(0x198724A88);
            }
            *(_DWORD *)&v2554.markerName[26] = *(_DWORD *)(*((_QWORD *)this + 48) + 4 * v1298);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[54], (unsigned int *)&v2554.markerName[26], (uint64_t)this, v1290, v1291, v1292, v1293, v1294);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[118], (uint64_t)this, v1299, v1300, v1301, v1302, v1303, v1304);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[78], (uint64_t)this, v1305, v1306, v1307, v1308, v1309, v1310);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[66], (uint64_t)this, v1311, v1312, v1313, v1314, v1315, v1316);
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v1317, v1318, v1319, v1320, v1321, v1322);
            v1330 = *((_DWORD *)this + 50);
            if (v1330 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1323, v1324, v1325, v1326, v1327, v1328, v1329);
              v1330 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v1330) = -129989820;
            *((_DWORD *)this + 50) += 4;
            JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[26], (unsigned __int8 *)this, *(uint64_t *)&v2554.markerName[98], 4, 0, v1327, v1328, v1329);
            v198 = *(_QWORD *)&v2554.markerName[218];
            JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(uint64_t *)&v2554.markerName[218], **(_BYTE **)&v2554.markerName[226] == 0, 0, v1331, v1332, v1333, v1334, (uint64_t)&v2554.markerName[26], v1335);
            v209 = **(_DWORD **)&v2554.markerName[234] + (*(_DWORD *)(v198 + 640) >> 2);
            if (*(_DWORD *)(v198 + 396) <= v209)
            {
              __break(0xC471u);
              JUMPOUT(0x198724AD8);
            }
LABEL_907:
            *(_DWORD *)&v2554.markerName[118] = *(_DWORD *)(*(_QWORD *)(v198 + 384) + 4 * v209);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[26], (unsigned int *)&v2554.markerName[118], v198, v204, v205, v206, v207, v208);
            goto LABEL_1549;
          case 80:
            *(_DWORD *)&v2554.markerName[50] = 9;
            v2554.markerName[49] = 0;
            v1112 = *(unsigned __int8 *)v23;
            if (v1112 == 128)
            {
              v1342 = *(__int16 *)(v23 + 2);
              if (v1342 <= 63)
                v1114 = *(__int16 *)(v23 + 2);
              else
                v1114 = v1342 + 1073741760;
              v1343 = *(__int16 *)(v23 + 4);
              if (v1343 <= 63)
                v1116 = *(__int16 *)(v23 + 4);
              else
                v1116 = v1343 + 1073741760;
              LODWORD(v1117) = *(__int16 *)(v23 + 6);
              if (*(_WORD *)(v23 + 6))
                goto LABEL_873;
            }
            else if (v1112 == 130)
            {
              v1114 = *(_DWORD *)(v23 + 2);
              v1116 = *(_DWORD *)(v23 + 6);
              LODWORD(v1117) = *(_DWORD *)(v23 + 10);
              if ((_DWORD)v1117)
                goto LABEL_873;
            }
            else
            {
              v1113 = *(char *)(v23 + 1);
              if (v1113 <= 15)
                v1114 = *(char *)(v23 + 1);
              else
                v1114 = v1113 + 1073741808;
              v1115 = *(char *)(v23 + 2);
              if (v1115 <= 15)
                v1116 = *(char *)(v23 + 2);
              else
                v1116 = v1115 + 1073741808;
              LODWORD(v1117) = *(char *)(v23 + 3);
              if (*(_BYTE *)(v23 + 3))
                goto LABEL_873;
            }
            v1344 = *((_QWORD *)this + 101);
            v1345 = *(unint64_t **)(v1344 + 80);
            v1346 = *v1345;
            if (*v1345 > v23 || v23 >= *((unsigned int *)v1345 + 3) + v1346)
            {
              __break(0xC471u);
              JUMPOUT(0x198723BDCLL);
            }
            v1117 = *(_QWORD *)(v1344 + 144);
            if (v1117)
            {
              v1347 = v23 - v1346;
              v1348 = *(_DWORD *)(v1117 - 8);
              v1349 = 9 * ((~(v1347 << 15) + v1347) ^ ((~(v1347 << 15) + v1347) >> 10));
              v1350 = (v1349 ^ (v1349 >> 6)) + ~((v1349 ^ (v1349 >> 6)) << 11);
              v1351 = v1348 & (v1350 ^ HIWORD(v1350));
              v1352 = *(_DWORD *)(v1117 + 8 * v1351);
              if (v1352 == v1347)
              {
LABEL_872:
                LODWORD(v1117) = *(_DWORD *)(v1117 + 8 * v1351 + 4);
                goto LABEL_873;
              }
              v1353 = 1;
              while (v1352)
              {
                v1351 = ((_DWORD)v1351 + v1353) & v1348;
                v1352 = *(_DWORD *)(v1117 + 8 * v1351);
                ++v1353;
                if (v1352 == v1347)
                  goto LABEL_872;
              }
              LODWORD(v1117) = 0;
            }
LABEL_873:
            *(_DWORD *)&v2554.markerName[42] = v1117;
            *(_QWORD *)&v2554.markerName[218] = this;
            *(_QWORD *)&v2554.markerName[226] = &v2554.markerName[49];
            *(_QWORD *)&v2554.markerName[234] = &v2554.markerName[42];
            *(_QWORD *)&v2554.markerName[130] = this;
            *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[50];
            v1354 = v1112;
            *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[42];
            if ((v1112 | 2) == 0x82)
              v1354 = *(unsigned __int8 *)(v23 + 1);
            v1355 = v1112 == 128;
            if (v1112 == 130)
              v1355 = 2;
            v1356 = v1112 == 128 || v1112 == 130;
            v1357 = (unint64_t)JSC::opcodeLengths[v1354] << v1355;
            v15 = !v1356;
            v1358 = 1;
            if (!v15)
              v1358 = 2;
            *(_QWORD *)&v2554.markerName[106] = v1357 + v1358;
            *(_QWORD *)&v2554.markerName[98] = operationCompareLessEq;
            if (v1114 >= 0x40000000)
            {
              v1764 = *((_QWORD *)this + 101);
              v1765 = (v1114 - 0x40000000);
              v1766 = *(_DWORD **)(v1764 + 120);
              if (!v1766 || *v1766 <= v1765 || *((_BYTE *)v1766 + v1765 + 4) != 3)
              {
                v1767 = *(_DWORD **)(v1764 + 112);
                if (*v1767 <= v1765)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19872393CLL);
                }
                v1768 = *(_QWORD *)&v1767[2 * v1765 + 2];
                if ((v1768 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1768 + 5) == 2)
                {
                  if (v1766 && *v1766 > v1765 && *((_BYTE *)v1766 + v1765 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723F60);
                  }
                  v1769 = *(_QWORD *)(v1768 + 8);
                  v1770 = v1768 + 16;
                  v1771 = (_DWORD *)((v1769 & 1) != 0 ? v1770 : v1769 + 4);
                  if (*v1771 == 1)
                  {
                    v2547 = v1116;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
LABEL_1140:
                    v1779 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1780 = *(_DWORD **)(v1779 + 120);
                    if (!v1780 || *v1780 <= v1765)
                      goto LABEL_1964;
                    v1781 = *((unsigned __int8 *)v1780 + v1765 + 4);
                    if ((v1781 - 1) < 2)
                      goto LABEL_1143;
                    if (v1781)
                    {
                      if (v1781 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724B10);
                      }
                    }
                    else
                    {
LABEL_1964:
                      v2403 = *(_DWORD **)(v1779 + 112);
                      if (*v2403 <= v1765)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987245E0);
                      }
                      v2404 = *(_QWORD *)&v2403[2 * v1765 + 2];
                      if (!v2404
                        || (v2404 & 0xFFFE000000000002) != 0
                        || ((v2405 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2404 & 0xFFFFFFFE) + 0x4C)),
                             v2405 != &JSC::SymbolTable::s_info)
                          ? (v2406 = v2405 == &JSC::JSTemplateObjectDescriptor::s_info)
                          : (v2406 = 1),
                            !v2406))
                      {
LABEL_1143:
                        v1782 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                        if (*v1782 <= v1765)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198724380);
                        }
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1782[2 * v1765 + 2], 1, v1774, v1775, v1776, v1777, v1778);
                        jj = v2552;
                        goto LABEL_1145;
                      }
                    }
                    v2407 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1772, v1773, v1774, v1775, v1776, v1777, v1778);
                      v2407 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2407) = -129956959;
                    v2408 = *v2551;
                    v2409 = *v2551 + 4;
                    *v2551 = v2409;
                    if ((v2408 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1772, v1773, v1774, v1775, v1776, v1777, v1778);
                      v2409 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2409) = -129368031;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v1114 << 35) | 1, 1, v1774, v1775, v1776, v1777, v1778);
                    jj = v2552;
                    v12 = v2550;
LABEL_1145:
                    if (v1116 < 0x40000000)
                    {
                      JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2547 << 35) | 0x1D, 2, v1785, v1786, v1787, v1788, v1789);
LABEL_1348:
                      v1904 = *v2551;
                      if ((*v2551 + 4) > *v12)
                      {
                        JSC::AssemblerBuffer::outOfLineGrow(v2549, v1790, v1791, v1792, v1793, v1607, v1608, v1609);
                        v1904 = *v2551;
                      }
                      goto LABEL_1258;
                    }
                    v1975 = (v1116 - 0x40000000);
LABEL_1343:
                    v1982 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1983 = *(_DWORD **)(v1982 + 120);
                    jj = v2552;
                    if (!v1983 || *v1983 <= v1975)
                      goto LABEL_1804;
                    v1984 = *((unsigned __int8 *)v1983 + v1975 + 4);
                    if ((v1984 - 1) < 2)
                    {
LABEL_1346:
                      v1985 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                      if (*v1985 <= v1975)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724180);
                      }
                      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1985[2 * v1975 + 2], 2, v1785, v1786, v1787, v1788, v1789);
                      goto LABEL_1348;
                    }
                    if (v1984)
                    {
                      if (v1984 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724878);
                      }
                    }
                    else
                    {
LABEL_1804:
                      v2325 = *(_DWORD **)(v1982 + 112);
                      if (*v2325 <= v1975)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724460);
                      }
                      v2326 = *(_QWORD *)&v2325[2 * v1975 + 2];
                      if (!v2326 || (v2326 & 0xFFFE000000000002) != 0)
                        goto LABEL_1346;
                      v2327 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2326 & 0xFFFFFFFE) + 0x4C));
                      if (v2327 != &JSC::SymbolTable::s_info && v2327 != &JSC::JSTemplateObjectDescriptor::s_info)
                        goto LABEL_1346;
                    }
                    v2329 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1783, v1784, v1785, v1786, v1787, v1788, v1789);
                      v2329 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2329) = -129956958;
                    v2330 = *v2551;
                    v2331 = *v2551 + 4;
                    *v2551 = v2331;
                    if ((v2330 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1783, v1784, v1785, v1786, v1787, v1788, v1789);
                      v2331 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2331) = -129367998;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2547 << 35) | 2, 2, v1785, v1786, v1787, v1788, v1789);
                    jj = v2552;
                    v12 = v2550;
                    goto LABEL_1348;
                  }
                }
              }
            }
            if (v1116 >= 0x40000000)
            {
              v1974 = *((_QWORD *)this + 101);
              v1975 = (v1116 - 0x40000000);
              v1976 = *(_DWORD **)(v1974 + 120);
              if (!v1976 || *v1976 <= v1975 || *((_BYTE *)v1976 + v1975 + 4) != 3)
              {
                v1977 = *(_DWORD **)(v1974 + 112);
                if (*v1977 <= v1975)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198723B3CLL);
                }
                v1978 = *(_QWORD *)&v1977[2 * v1975 + 2];
                if ((v1978 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1978 + 5) == 2)
                {
                  if (v1976 && *v1976 > v1975 && *((_BYTE *)v1976 + v1975 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198724080);
                  }
                  v1979 = *(_QWORD *)(v1978 + 8);
                  v1980 = v1978 + 16;
                  v1981 = (_DWORD *)((v1979 & 1) != 0 ? v1980 : v1979 + 4);
                  if (*v1981 == 1)
                  {
                    v2547 = v1116;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
                    if (v1114 >= 0x40000000)
                    {
                      v1765 = (v1114 - 0x40000000);
                      goto LABEL_1140;
                    }
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v1114 << 35) | 0x1D, 1, v1774, v1775, v1776, v1777, v1778);
                    goto LABEL_1343;
                  }
                }
              }
            }
            *(_QWORD *)&v2554.markerName[90] = this;
            *(_QWORD *)&v2554.markerName[154] = this;
            *(_QWORD *)&v2554.markerName[162] = &v2554.markerName[18];
            *(_QWORD *)&v2554.markerName[170] = &v2554.markerName[90];
            *(_QWORD *)&v2554.markerName[178] = &v2554.markerName[130];
            *(_QWORD *)&v2554.markerName[186] = &v2554.markerName[106];
            *(_QWORD *)&v2554.markerName[194] = &v2554.markerName[98];
            *(_QWORD *)&v2554.markerName[202] = &v2554.markerName[218];
            jj = v2552;
            if ((JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v1114, 0, 0, 2, 1, a7, a8) & 1) != 0|| (JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v1116, 2, 1, 0, 0, v33, v34) & 1) != 0)
            {
              goto LABEL_1549;
            }
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v29, v30, v31, v32, v33, v34);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 0, 27, v1359, v1360, v1361, v1362, (uint64_t)&v2554.markerName[118]);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 2, 27, v1363, v1364, v1365, v1366, (uint64_t)&v2554.markerName[78]);
            JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, 2, 27, v1367, v1368, v1369, v1370, (uint64_t)&v2554.markerName[66]);
            v1378 = *(_QWORD *)&v2554.markerName[90];
            v1379 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v1380 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v1380 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v1371, v1372, v1373, v1374, v1375, v1376, v1377);
              v1380 = *(_DWORD *)(v1378 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1378 + 56) + v1380) = -1962933408;
            v1381 = *(_DWORD *)(v1378 + 200);
            v1382 = v1381 + 4;
            *(_DWORD *)(v1378 + 200) = v1381 + 4;
            if ((v1381 + 8) > *(_DWORD *)(v1378 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v1379, v1371, v1372, v1373, v1374, v1375, v1376, v1377);
              v1382 = *(_DWORD *)(v1378 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1378 + 56) + v1382) = -1637416960;
            *(_DWORD *)(v1378 + 200) += 4;
            v1383 = *(_QWORD *)&v2554.markerName[90];
            v1384 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v1385 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v1385 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v1371, v1372, v1373, v1374, v1375, v1376, v1377);
              v1385 = *(_DWORD *)(v1383 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1383 + 56) + v1385) = -1962802334;
            v1386 = *(_DWORD *)(v1383 + 200);
            v1387 = v1386 + 4;
            *(_DWORD *)(v1383 + 200) = v1386 + 4;
            if ((v1386 + 8) > *(_DWORD *)(v1383 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v1384, v1371, v1372, v1373, v1374, v1375, v1376, v1377);
              v1387 = *(_DWORD *)(v1383 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1383 + 56) + v1387) = -1637416895;
            *(_DWORD *)(v1383 + 200) += 4;
            v1388 = *(_QWORD *)&v2554.markerName[130];
            v1389 = **(_DWORD **)&v2554.markerName[138];
            v1390 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 200);
            if (v1390 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[130] + 56), v1371, v1372, v1373, v1374, v1375, v1376, v1377);
              v1390 = *(_DWORD *)(v1388 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1388 + 56) + v1390) = 509681664;
            *(_DWORD *)(v1388 + 200) += 4;
            JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(v1388, v1389, v1372, v1373, v1374, v1375, v1376, v1377, (uint64_t)&v2554.markerName[26]);
            v1396 = **(_DWORD **)&v2554.markerName[146] + (*(_DWORD *)(v1388 + 640) >> 2);
            if (*(_DWORD *)(v1388 + 396) <= v1396)
            {
              __break(0xC471u);
              JUMPOUT(0x198724B68);
            }
            *(_DWORD *)&v2554.markerName[114] = *(_DWORD *)(*(_QWORD *)(v1388 + 384) + 4 * v1396);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[26], (unsigned int *)&v2554.markerName[114], v1388, v1391, v1392, v1393, v1394, v1395);
            v1404 = *((_DWORD *)this + 50);
            for (jj = v2552; v1404 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v1404)
            {
              if ((v1404 + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v1397, v1398, v1399, v1400, v1401, v1402, v1403);
                v1404 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v1404) = -721215457;
              v1404 = *((_DWORD *)this + 50) + 4;
            }
            v1405 = v1404;
            if ((v1404 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1397, v1398, v1399, v1400, v1401, v1402, v1403);
              v1405 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v1405) = 335544320;
            *((_DWORD *)this + 50) += 4;
            if (*((_BYTE *)this + 328))
              v1406 = 69;
            else
              v1406 = 65;
            *(_DWORD *)&v2554.markerName[54] = v1404;
            *(_DWORD *)&v2554.markerName[58] = 0;
            v2554.markerName[62] = v1406;
            *(_WORD *)&v2554.markerName[63] = 15;
            v2554.markerName[65] = -1;
            v1407 = *(_DWORD *)&v2554.markerName[106] + (*((_DWORD *)this + 160) >> 2);
            if (*((_DWORD *)this + 99) <= v1407)
            {
              __break(0xC471u);
              JUMPOUT(0x198724CA8);
            }
            *(_DWORD *)&v2554.markerName[26] = *(_DWORD *)(*((_QWORD *)this + 48) + 4 * v1407);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[54], (unsigned int *)&v2554.markerName[26], (uint64_t)this, v1399, v1400, v1401, v1402, v1403);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[118], (uint64_t)this, v1408, v1409, v1410, v1411, v1412, v1413);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[78], (uint64_t)this, v1414, v1415, v1416, v1417, v1418, v1419);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[66], (uint64_t)this, v1420, v1421, v1422, v1423, v1424, v1425);
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v1426, v1427, v1428, v1429, v1430, v1431);
            v1439 = *((_DWORD *)this + 50);
            if (v1439 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1432, v1433, v1434, v1435, v1436, v1437, v1438);
              v1439 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v1439) = -129989820;
            *((_DWORD *)this + 50) += 4;
            JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[26], (unsigned __int8 *)this, *(uint64_t *)&v2554.markerName[98], 4, 0, v1436, v1437, v1438);
            v198 = *(_QWORD *)&v2554.markerName[218];
            JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(uint64_t *)&v2554.markerName[218], **(_BYTE **)&v2554.markerName[226] == 0, 0, v1440, v1441, v1442, v1443, (uint64_t)&v2554.markerName[26], v1444);
            v209 = **(_DWORD **)&v2554.markerName[234] + (*(_DWORD *)(v198 + 640) >> 2);
            if (*(_DWORD *)(v198 + 396) <= v209)
            {
              __break(0xC471u);
              JUMPOUT(0x198724BF0);
            }
            goto LABEL_907;
          case 81:
            *(_DWORD *)&v2554.markerName[50] = 12;
            v2554.markerName[49] = 0;
            v210 = *(unsigned __int8 *)v23;
            if (v210 == 128)
            {
              v2043 = *(__int16 *)(v23 + 2);
              if (v2043 <= 63)
                v212 = *(__int16 *)(v23 + 2);
              else
                v212 = v2043 + 1073741760;
              v2044 = *(__int16 *)(v23 + 4);
              if (v2044 <= 63)
                v214 = *(__int16 *)(v23 + 4);
              else
                v214 = v2044 + 1073741760;
              LODWORD(v215) = *(__int16 *)(v23 + 6);
            }
            else if (v210 == 130)
            {
              v212 = *(_DWORD *)(v23 + 2);
              v214 = *(_DWORD *)(v23 + 6);
              LODWORD(v215) = *(_DWORD *)(v23 + 10);
            }
            else
            {
              v211 = *(char *)(v23 + 1);
              if (v211 <= 15)
                v212 = *(char *)(v23 + 1);
              else
                v212 = v211 + 1073741808;
              v213 = *(char *)(v23 + 2);
              if (v213 <= 15)
                v214 = *(char *)(v23 + 2);
              else
                v214 = v213 + 1073741808;
              LODWORD(v215) = *(char *)(v23 + 3);
            }
            if ((_DWORD)v215)
              goto LABEL_136;
            v2100 = *((_QWORD *)this + 101);
            v2101 = *(unint64_t **)(v2100 + 80);
            v2102 = *v2101;
            if (*v2101 > v23 || v23 >= *((unsigned int *)v2101 + 3) + v2102)
            {
              __break(0xC471u);
              JUMPOUT(0x198723C7CLL);
            }
            v215 = *(_QWORD *)(v2100 + 144);
            if (!v215)
              goto LABEL_136;
            v2103 = v23 - v2102;
            v2104 = *(_DWORD *)(v215 - 8);
            v2105 = 9 * ((~(v2103 << 15) + v2103) ^ ((~(v2103 << 15) + v2103) >> 10));
            v2106 = (v2105 ^ (v2105 >> 6)) + ~((v2105 ^ (v2105 >> 6)) << 11);
            v2107 = v2104 & (v2106 ^ HIWORD(v2106));
            v2108 = *(_DWORD *)(v215 + 8 * v2107);
            if (v2108 == v2103)
              goto LABEL_1493;
            v2109 = 1;
            while (v2108)
            {
              v2107 = ((_DWORD)v2107 + v2109) & v2104;
              v2108 = *(_DWORD *)(v215 + 8 * v2107);
              ++v2109;
              if (v2108 == v2103)
              {
LABEL_1493:
                LODWORD(v215) = *(_DWORD *)(v215 + 8 * v2107 + 4);
                goto LABEL_136;
              }
            }
            LODWORD(v215) = 0;
LABEL_136:
            *(_DWORD *)&v2554.markerName[42] = v215;
            *(_QWORD *)&v2554.markerName[218] = this;
            *(_QWORD *)&v2554.markerName[226] = &v2554.markerName[49];
            *(_QWORD *)&v2554.markerName[234] = &v2554.markerName[42];
            *(_QWORD *)&v2554.markerName[130] = this;
            *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[50];
            v216 = v210;
            *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[42];
            if ((v210 | 2) == 0x82)
              v216 = *(unsigned __int8 *)(v23 + 1);
            v217 = v210 == 128;
            if (v210 == 130)
              v217 = 2;
            v218 = v210 == 128 || v210 == 130;
            v219 = (unint64_t)JSC::opcodeLengths[v216] << v217;
            v15 = !v218;
            v220 = 1;
            if (!v15)
              v220 = 2;
            *(_QWORD *)&v2554.markerName[106] = v219 + v220;
            *(_QWORD *)&v2554.markerName[98] = operationCompareGreater;
            if (v212 >= 0x40000000)
            {
              v1610 = *((_QWORD *)this + 101);
              v1611 = (v212 - 0x40000000);
              v1612 = *(_DWORD **)(v1610 + 120);
              if (!v1612 || *v1612 <= v1611 || *((_BYTE *)v1612 + v1611 + 4) != 3)
              {
                v1613 = *(_DWORD **)(v1610 + 112);
                if (*v1613 <= v1611)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19872399CLL);
                }
                v1614 = *(_QWORD *)&v1613[2 * v1611 + 2];
                if ((v1614 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1614 + 5) == 2)
                {
                  if (v1612 && *v1612 > v1611 && *((_BYTE *)v1612 + v1611 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723E40);
                  }
                  v1615 = *(_QWORD *)(v1614 + 8);
                  v1616 = v1614 + 16;
                  v1617 = (_DWORD *)((v1615 & 1) != 0 ? v1616 : v1615 + 4);
                  if (*v1617 == 1)
                  {
                    v2542 = v214;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
LABEL_1028:
                    v1625 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1626 = *(_DWORD **)(v1625 + 120);
                    if (!v1626 || *v1626 <= v1611)
                      goto LABEL_2036;
                    v1627 = *((unsigned __int8 *)v1626 + v1611 + 4);
                    if ((v1627 - 1) < 2)
                      goto LABEL_1031;
                    if (v1627)
                    {
                      if (v1627 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724A50);
                      }
                    }
                    else
                    {
LABEL_2036:
                      v2439 = *(_DWORD **)(v1625 + 112);
                      if (*v2439 <= v1611)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987246A0);
                      }
                      v2440 = *(_QWORD *)&v2439[2 * v1611 + 2];
                      if (!v2440
                        || (v2440 & 0xFFFE000000000002) != 0
                        || ((v2441 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2440 & 0xFFFFFFFE) + 0x4C)),
                             v2441 != &JSC::SymbolTable::s_info)
                          ? (v2442 = v2441 == &JSC::JSTemplateObjectDescriptor::s_info)
                          : (v2442 = 1),
                            !v2442))
                      {
LABEL_1031:
                        v1628 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                        if (*v1628 <= v1611)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198724540);
                        }
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1628[2 * v1611 + 2], 1, v1620, v1621, v1622, v1623, v1624);
                        jj = v2552;
                        goto LABEL_1033;
                      }
                    }
                    v2443 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1618, v1619, v1620, v1621, v1622, v1623, v1624);
                      v2443 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2443) = -129956959;
                    v2444 = *v2551;
                    v2445 = *v2551 + 4;
                    *v2551 = v2445;
                    if ((v2444 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1618, v1619, v1620, v1621, v1622, v1623, v1624);
                      v2445 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2445) = -129368031;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v212 << 35) | 1, 1, v1620, v1621, v1622, v1623, v1624);
                    jj = v2552;
                    v12 = v2550;
LABEL_1033:
                    if (v214 < 0x40000000)
                    {
                      JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2542 << 35) | 0x1D, 2, v1631, v1632, v1633, v1634, v1635);
LABEL_1279:
                      v1925 = *v2551;
                      if ((*v2551 + 4) > *v12)
                      {
                        JSC::AssemblerBuffer::outOfLineGrow(v2549, v1636, v1637, v1638, v1639, v1640, v1641, v1642);
                        v1925 = *v2551;
                      }
                      *(_DWORD *)(*((_QWORD *)this + 7) + v1925) = -129989824;
                      *((_DWORD *)this + 50) += 4;
                      JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[154], (unsigned __int8 *)this, (uint64_t)operationCompareGreater, 0, 1, v1640, v1641, v1642);
                      JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1}::operator()((uint64_t)&v2554.markerName[218], v1933, v1926, v1927, v1928, v1929, v1930, v1931, v1932);
                      goto LABEL_1549;
                    }
                    v1914 = (v214 - 0x40000000);
LABEL_1274:
                    v1921 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1922 = *(_DWORD **)(v1921 + 120);
                    jj = v2552;
                    if (!v1922 || *v1922 <= v1914)
                      goto LABEL_1950;
                    v1923 = *((unsigned __int8 *)v1922 + v1914 + 4);
                    if ((v1923 - 1) < 2)
                    {
LABEL_1277:
                      v1924 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                      if (*v1924 <= v1914)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987242C0);
                      }
                      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1924[2 * v1914 + 2], 2, v1631, v1632, v1633, v1634, v1635);
                      goto LABEL_1279;
                    }
                    if (v1923)
                    {
                      if (v1923 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724A18);
                      }
                    }
                    else
                    {
LABEL_1950:
                      v2396 = *(_DWORD **)(v1921 + 112);
                      if (*v2396 <= v1914)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987245C0);
                      }
                      v2397 = *(_QWORD *)&v2396[2 * v1914 + 2];
                      if (!v2397 || (v2397 & 0xFFFE000000000002) != 0)
                        goto LABEL_1277;
                      v2398 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2397 & 0xFFFFFFFE) + 0x4C));
                      if (v2398 != &JSC::SymbolTable::s_info && v2398 != &JSC::JSTemplateObjectDescriptor::s_info)
                        goto LABEL_1277;
                    }
                    v2400 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1629, v1630, v1631, v1632, v1633, v1634, v1635);
                      v2400 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2400) = -129956958;
                    v2401 = *v2551;
                    v2402 = *v2551 + 4;
                    *v2551 = v2402;
                    if ((v2401 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1629, v1630, v1631, v1632, v1633, v1634, v1635);
                      v2402 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2402) = -129367998;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2542 << 35) | 2, 2, v1631, v1632, v1633, v1634, v1635);
                    jj = v2552;
                    v12 = v2550;
                    goto LABEL_1279;
                  }
                }
              }
            }
            if (v214 >= 0x40000000)
            {
              v1913 = *((_QWORD *)this + 101);
              v1914 = (v214 - 0x40000000);
              v1915 = *(_DWORD **)(v1913 + 120);
              if (!v1915 || *v1915 <= v1914 || *((_BYTE *)v1915 + v1914 + 4) != 3)
              {
                v1916 = *(_DWORD **)(v1913 + 112);
                if (*v1916 <= v1914)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198723ADCLL);
                }
                v1917 = *(_QWORD *)&v1916[2 * v1914 + 2];
                if ((v1917 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1917 + 5) == 2)
                {
                  if (v1915 && *v1915 > v1914 && *((_BYTE *)v1915 + v1914 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723F40);
                  }
                  v1918 = *(_QWORD *)(v1917 + 8);
                  v1919 = v1917 + 16;
                  v1920 = (_DWORD *)((v1918 & 1) != 0 ? v1919 : v1918 + 4);
                  if (*v1920 == 1)
                  {
                    v2542 = v214;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
                    if (v212 >= 0x40000000)
                    {
                      v1611 = (v212 - 0x40000000);
                      goto LABEL_1028;
                    }
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v212 << 35) | 0x1D, 1, v1620, v1621, v1622, v1623, v1624);
                    goto LABEL_1274;
                  }
                }
              }
            }
            *(_QWORD *)&v2554.markerName[90] = this;
            *(_QWORD *)&v2554.markerName[154] = this;
            *(_QWORD *)&v2554.markerName[162] = &v2554.markerName[18];
            *(_QWORD *)&v2554.markerName[170] = &v2554.markerName[90];
            *(_QWORD *)&v2554.markerName[178] = &v2554.markerName[130];
            *(_QWORD *)&v2554.markerName[186] = &v2554.markerName[106];
            *(_QWORD *)&v2554.markerName[194] = &v2554.markerName[98];
            *(_QWORD *)&v2554.markerName[202] = &v2554.markerName[218];
            jj = v2552;
            if ((JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v212, 0, 0, 2, 1, a7, a8) & 1) != 0|| (JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v214, 2, 1, 0, 0, v33, v34) & 1) != 0)
            {
              goto LABEL_1549;
            }
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v29, v30, v31, v32, v33, v34);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 0, 27, v221, v222, v223, v224, (uint64_t)&v2554.markerName[118]);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 2, 27, v225, v226, v227, v228, (uint64_t)&v2554.markerName[78]);
            JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, 2, 27, v229, v230, v231, v232, (uint64_t)&v2554.markerName[66]);
            v240 = *(_QWORD *)&v2554.markerName[90];
            v241 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v242 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v242 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v233, v234, v235, v236, v237, v238, v239);
              v242 = *(_DWORD *)(v240 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v240 + 56) + v242) = -1962933408;
            v243 = *(_DWORD *)(v240 + 200);
            v244 = v243 + 4;
            *(_DWORD *)(v240 + 200) = v243 + 4;
            if ((v243 + 8) > *(_DWORD *)(v240 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v241, v233, v234, v235, v236, v237, v238, v239);
              v244 = *(_DWORD *)(v240 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v240 + 56) + v244) = -1637416960;
            *(_DWORD *)(v240 + 200) += 4;
            v245 = *(_QWORD *)&v2554.markerName[90];
            v246 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v247 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v247 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v233, v234, v235, v236, v237, v238, v239);
              v247 = *(_DWORD *)(v245 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v245 + 56) + v247) = -1962802334;
            v248 = *(_DWORD *)(v245 + 200);
            v249 = v248 + 4;
            *(_DWORD *)(v245 + 200) = v248 + 4;
            if ((v248 + 8) > *(_DWORD *)(v245 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v246, v233, v234, v235, v236, v237, v238, v239);
              v249 = *(_DWORD *)(v245 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v245 + 56) + v249) = -1637416895;
            *(_DWORD *)(v245 + 200) += 4;
            v250 = *(_QWORD *)&v2554.markerName[130];
            v251 = **(_DWORD **)&v2554.markerName[138];
            v252 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 200);
            if (v252 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[130] + 56), v233, v234, v235, v236, v237, v238, v239);
              v252 = *(_DWORD *)(v250 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v250 + 56) + v252) = 509681664;
            *(_DWORD *)(v250 + 200) += 4;
            JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(v250, v251, v234, v235, v236, v237, v238, v239, (uint64_t)&v2554.markerName[26]);
            v258 = **(_DWORD **)&v2554.markerName[146] + (*(_DWORD *)(v250 + 640) >> 2);
            if (*(_DWORD *)(v250 + 396) <= v258)
            {
              __break(0xC471u);
              JUMPOUT(0x198724A98);
            }
            *(_DWORD *)&v2554.markerName[114] = *(_DWORD *)(*(_QWORD *)(v250 + 384) + 4 * v258);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[26], (unsigned int *)&v2554.markerName[114], v250, v253, v254, v255, v256, v257);
            v266 = *((_DWORD *)this + 50);
            for (jj = v2552; v266 < *((_DWORD *)this + 13); v12 = v2550)
            {
              if ((v266 + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v259, v260, v261, v262, v263, v264, v265);
                v266 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v266) = -721215457;
              v266 = *((_DWORD *)this + 50) + 4;
              *((_DWORD *)this + 50) = v266;
              jj = v2552;
            }
            v267 = v266;
            if ((v266 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v259, v260, v261, v262, v263, v264, v265);
              v267 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v267) = 335544320;
            *((_DWORD *)this + 50) += 4;
            if (*((_BYTE *)this + 328))
              v268 = 69;
            else
              v268 = 65;
            *(_DWORD *)&v2554.markerName[54] = v266;
            *(_DWORD *)&v2554.markerName[58] = 0;
            v2554.markerName[62] = v268;
            *(_WORD *)&v2554.markerName[63] = 15;
            v2554.markerName[65] = -1;
            v269 = *(_DWORD *)&v2554.markerName[106] + (*((_DWORD *)this + 160) >> 2);
            if (*((_DWORD *)this + 99) <= v269)
            {
              __break(0xC471u);
              JUMPOUT(0x198724B70);
            }
            *(_DWORD *)&v2554.markerName[26] = *(_DWORD *)(*((_QWORD *)this + 48) + 4 * v269);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[54], (unsigned int *)&v2554.markerName[26], (uint64_t)this, v261, v262, v263, v264, v265);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[118], (uint64_t)this, v270, v271, v272, v273, v274, v275);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[78], (uint64_t)this, v276, v277, v278, v279, v280, v281);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[66], (uint64_t)this, v282, v283, v284, v285, v286, v287);
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v288, v289, v290, v291, v292, v293);
            v301 = *((_DWORD *)this + 50);
            if (v301 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v294, v295, v296, v297, v298, v299, v300);
              v301 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v301) = -129989820;
            *((_DWORD *)this + 50) += 4;
            JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[26], (unsigned __int8 *)this, *(uint64_t *)&v2554.markerName[98], 4, 0, v298, v299, v300);
            v198 = *(_QWORD *)&v2554.markerName[218];
            JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(uint64_t *)&v2554.markerName[218], **(_BYTE **)&v2554.markerName[226] == 0, 0, v302, v303, v304, v305, (uint64_t)&v2554.markerName[26], v306);
            v209 = **(_DWORD **)&v2554.markerName[234] + (*(_DWORD *)(v198 + 640) >> 2);
            if (*(_DWORD *)(v198 + 396) <= v209)
            {
              __break(0xC471u);
              JUMPOUT(0x198724C40);
            }
            goto LABEL_907;
          case 82:
            *(_DWORD *)&v2554.markerName[50] = 10;
            v2554.markerName[49] = 0;
            v669 = *(unsigned __int8 *)v23;
            if (v669 == 128)
            {
              v2190 = *(__int16 *)(v23 + 2);
              if (v2190 <= 63)
                v671 = *(__int16 *)(v23 + 2);
              else
                v671 = v2190 + 1073741760;
              v2191 = *(__int16 *)(v23 + 4);
              if (v2191 <= 63)
                v673 = *(__int16 *)(v23 + 4);
              else
                v673 = v2191 + 1073741760;
              LODWORD(v674) = *(__int16 *)(v23 + 6);
            }
            else if (v669 == 130)
            {
              v671 = *(_DWORD *)(v23 + 2);
              v673 = *(_DWORD *)(v23 + 6);
              LODWORD(v674) = *(_DWORD *)(v23 + 10);
            }
            else
            {
              v670 = *(char *)(v23 + 1);
              if (v670 <= 15)
                v671 = *(char *)(v23 + 1);
              else
                v671 = v670 + 1073741808;
              v672 = *(char *)(v23 + 2);
              if (v672 <= 15)
                v673 = *(char *)(v23 + 2);
              else
                v673 = v672 + 1073741808;
              LODWORD(v674) = *(char *)(v23 + 3);
            }
            if ((_DWORD)v674)
              goto LABEL_417;
            v2120 = *((_QWORD *)this + 101);
            v2121 = *(unint64_t **)(v2120 + 80);
            v2122 = *v2121;
            if (*v2121 > v23 || v23 >= *((unsigned int *)v2121 + 3) + v2122)
            {
              __break(0xC471u);
              JUMPOUT(0x198723BFCLL);
            }
            v674 = *(_QWORD *)(v2120 + 144);
            if (!v674)
              goto LABEL_417;
            v2123 = v23 - v2122;
            v2124 = *(_DWORD *)(v674 - 8);
            v2125 = 9 * ((~(v2123 << 15) + v2123) ^ ((~(v2123 << 15) + v2123) >> 10));
            v2126 = (v2125 ^ (v2125 >> 6)) + ~((v2125 ^ (v2125 >> 6)) << 11);
            v2127 = v2124 & (v2126 ^ HIWORD(v2126));
            v2128 = *(_DWORD *)(v674 + 8 * v2127);
            if (v2128 == v2123)
              goto LABEL_1509;
            v2129 = 1;
            while (v2128)
            {
              v2127 = ((_DWORD)v2127 + v2129) & v2124;
              v2128 = *(_DWORD *)(v674 + 8 * v2127);
              ++v2129;
              if (v2128 == v2123)
              {
LABEL_1509:
                LODWORD(v674) = *(_DWORD *)(v674 + 8 * v2127 + 4);
                goto LABEL_417;
              }
            }
            LODWORD(v674) = 0;
LABEL_417:
            *(_DWORD *)&v2554.markerName[42] = v674;
            *(_QWORD *)&v2554.markerName[218] = this;
            *(_QWORD *)&v2554.markerName[226] = &v2554.markerName[49];
            *(_QWORD *)&v2554.markerName[234] = &v2554.markerName[42];
            *(_QWORD *)&v2554.markerName[130] = this;
            *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[50];
            v675 = v669;
            *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[42];
            if ((v669 | 2) == 0x82)
              v675 = *(unsigned __int8 *)(v23 + 1);
            v676 = v669 == 128;
            if (v669 == 130)
              v676 = 2;
            v677 = v669 == 128 || v669 == 130;
            v678 = (unint64_t)JSC::opcodeLengths[v675] << v676;
            v15 = !v677;
            v679 = 1;
            if (!v15)
              v679 = 2;
            *(_QWORD *)&v2554.markerName[106] = v678 + v679;
            *(_QWORD *)&v2554.markerName[98] = operationCompareGreaterEq;
            if (v671 >= 0x40000000)
            {
              v1658 = *((_QWORD *)this + 101);
              v1659 = (v671 - 0x40000000);
              v1660 = *(_DWORD **)(v1658 + 120);
              if (!v1660 || *v1660 <= v1659 || *((_BYTE *)v1660 + v1659 + 4) != 3)
              {
                v1661 = *(_DWORD **)(v1658 + 112);
                if (*v1661 <= v1659)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198723A1CLL);
                }
                v1662 = *(_QWORD *)&v1661[2 * v1659 + 2];
                if ((v1662 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1662 + 5) == 2)
                {
                  if (v1660 && *v1660 > v1659 && *((_BYTE *)v1660 + v1659 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723F20);
                  }
                  v1663 = *(_QWORD *)(v1662 + 8);
                  v1664 = v1662 + 16;
                  v1665 = (_DWORD *)((v1663 & 1) != 0 ? v1664 : v1663 + 4);
                  if (*v1665 == 1)
                  {
                    v2544 = v673;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
LABEL_1063:
                    v1673 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1674 = *(_DWORD **)(v1673 + 120);
                    if (!v1674 || *v1674 <= v1659)
                      goto LABEL_1922;
                    v1675 = *((unsigned __int8 *)v1674 + v1659 + 4);
                    if ((v1675 - 1) < 2)
                      goto LABEL_1066;
                    if (v1675)
                    {
                      if (v1675 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987249D8);
                      }
                    }
                    else
                    {
LABEL_1922:
                      v2382 = *(_DWORD **)(v1673 + 112);
                      if (*v2382 <= v1659)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724580);
                      }
                      v2383 = *(_QWORD *)&v2382[2 * v1659 + 2];
                      if (!v2383
                        || (v2383 & 0xFFFE000000000002) != 0
                        || ((v2384 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2383 & 0xFFFFFFFE) + 0x4C)),
                             v2384 != &JSC::SymbolTable::s_info)
                          ? (v2385 = v2384 == &JSC::JSTemplateObjectDescriptor::s_info)
                          : (v2385 = 1),
                            !v2385))
                      {
LABEL_1066:
                        v1676 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                        if (*v1676 <= v1659)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198724280);
                        }
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1676[2 * v1659 + 2], 1, v1668, v1669, v1670, v1671, v1672);
                        jj = v2552;
                        goto LABEL_1068;
                      }
                    }
                    v2386 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1666, v1667, v1668, v1669, v1670, v1671, v1672);
                      v2386 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2386) = -129956959;
                    v2387 = *v2551;
                    v2388 = *v2551 + 4;
                    *v2551 = v2388;
                    if ((v2387 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1666, v1667, v1668, v1669, v1670, v1671, v1672);
                      v2388 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2388) = -129368031;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v671 << 35) | 1, 1, v1668, v1669, v1670, v1671, v1672);
                    jj = v2552;
                    v12 = v2550;
LABEL_1068:
                    if (v673 < 0x40000000)
                    {
                      JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2544 << 35) | 0x1D, 2, v1679, v1680, v1681, v1682, v1683);
LABEL_1371:
                      v1883 = *v2551;
                      if ((*v2551 + 4) > *v12)
                      {
                        JSC::AssemblerBuffer::outOfLineGrow(v2549, v1684, v1685, v1686, v1687, v1688, v1689, v1690);
                        v1883 = *v2551;
                      }
                      goto LABEL_1235;
                    }
                    v1987 = (v673 - 0x40000000);
LABEL_1366:
                    v1994 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1995 = *(_DWORD **)(v1994 + 120);
                    jj = v2552;
                    if (!v1995 || *v1995 <= v1987)
                      goto LABEL_1936;
                    v1996 = *((unsigned __int8 *)v1995 + v1987 + 4);
                    if ((v1996 - 1) < 2)
                    {
LABEL_1369:
                      v1997 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                      if (*v1997 <= v1987)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987242A0);
                      }
                      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1997[2 * v1987 + 2], 2, v1679, v1680, v1681, v1682, v1683);
                      goto LABEL_1371;
                    }
                    if (v1996)
                    {
                      if (v1996 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724958);
                      }
                    }
                    else
                    {
LABEL_1936:
                      v2389 = *(_DWORD **)(v1994 + 112);
                      if (*v2389 <= v1987)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987245A0);
                      }
                      v2390 = *(_QWORD *)&v2389[2 * v1987 + 2];
                      if (!v2390 || (v2390 & 0xFFFE000000000002) != 0)
                        goto LABEL_1369;
                      v2391 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2390 & 0xFFFFFFFE) + 0x4C));
                      if (v2391 != &JSC::SymbolTable::s_info && v2391 != &JSC::JSTemplateObjectDescriptor::s_info)
                        goto LABEL_1369;
                    }
                    v2393 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1677, v1678, v1679, v1680, v1681, v1682, v1683);
                      v2393 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2393) = -129956958;
                    v2394 = *v2551;
                    v2395 = *v2551 + 4;
                    *v2551 = v2395;
                    if ((v2394 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1677, v1678, v1679, v1680, v1681, v1682, v1683);
                      v2395 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2395) = -129367998;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2544 << 35) | 2, 2, v1679, v1680, v1681, v1682, v1683);
                    jj = v2552;
                    v12 = v2550;
                    goto LABEL_1371;
                  }
                }
              }
            }
            if (v673 >= 0x40000000)
            {
              v1986 = *((_QWORD *)this + 101);
              v1987 = (v673 - 0x40000000);
              v1988 = *(_DWORD **)(v1986 + 120);
              if (!v1988 || *v1988 <= v1987 || *((_BYTE *)v1988 + v1987 + 4) != 3)
              {
                v1989 = *(_DWORD **)(v1986 + 112);
                if (*v1989 <= v1987)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198723B5CLL);
                }
                v1990 = *(_QWORD *)&v1989[2 * v1987 + 2];
                if ((v1990 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1990 + 5) == 2)
                {
                  if (v1988 && *v1988 > v1987 && *((_BYTE *)v1988 + v1987 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1987240C0);
                  }
                  v1991 = *(_QWORD *)(v1990 + 8);
                  v1992 = v1990 + 16;
                  v1993 = (_DWORD *)((v1991 & 1) != 0 ? v1992 : v1991 + 4);
                  if (*v1993 == 1)
                  {
                    v2544 = v673;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
                    if (v671 >= 0x40000000)
                    {
                      v1659 = (v671 - 0x40000000);
                      goto LABEL_1063;
                    }
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v671 << 35) | 0x1D, 1, v1668, v1669, v1670, v1671, v1672);
                    goto LABEL_1366;
                  }
                }
              }
            }
            *(_QWORD *)&v2554.markerName[90] = this;
            *(_QWORD *)&v2554.markerName[154] = this;
            *(_QWORD *)&v2554.markerName[162] = &v2554.markerName[18];
            *(_QWORD *)&v2554.markerName[170] = &v2554.markerName[90];
            *(_QWORD *)&v2554.markerName[178] = &v2554.markerName[130];
            *(_QWORD *)&v2554.markerName[186] = &v2554.markerName[106];
            *(_QWORD *)&v2554.markerName[194] = &v2554.markerName[98];
            *(_QWORD *)&v2554.markerName[202] = &v2554.markerName[218];
            jj = v2552;
            if ((JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v671, 0, 0, 2, 1, a7, a8) & 1) != 0|| (JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v673, 2, 1, 0, 0, v33, v34) & 1) != 0)
            {
              goto LABEL_1549;
            }
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v29, v30, v31, v32, v33, v34);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 0, 27, v680, v681, v682, v683, (uint64_t)&v2554.markerName[118]);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 2, 27, v684, v685, v686, v687, (uint64_t)&v2554.markerName[78]);
            JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, 2, 27, v688, v689, v690, v691, (uint64_t)&v2554.markerName[66]);
            v699 = *(_QWORD *)&v2554.markerName[90];
            v700 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v701 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v701 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v692, v693, v694, v695, v696, v697, v698);
              v701 = *(_DWORD *)(v699 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v699 + 56) + v701) = -1962933408;
            v702 = *(_DWORD *)(v699 + 200);
            v703 = v702 + 4;
            *(_DWORD *)(v699 + 200) = v702 + 4;
            if ((v702 + 8) > *(_DWORD *)(v699 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v700, v692, v693, v694, v695, v696, v697, v698);
              v703 = *(_DWORD *)(v699 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v699 + 56) + v703) = -1637416960;
            *(_DWORD *)(v699 + 200) += 4;
            v704 = *(_QWORD *)&v2554.markerName[90];
            v705 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v706 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v706 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v692, v693, v694, v695, v696, v697, v698);
              v706 = *(_DWORD *)(v704 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v704 + 56) + v706) = -1962802334;
            v707 = *(_DWORD *)(v704 + 200);
            v708 = v707 + 4;
            *(_DWORD *)(v704 + 200) = v707 + 4;
            if ((v707 + 8) > *(_DWORD *)(v704 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v705, v692, v693, v694, v695, v696, v697, v698);
              v708 = *(_DWORD *)(v704 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v704 + 56) + v708) = -1637416895;
            *(_DWORD *)(v704 + 200) += 4;
            v709 = *(_QWORD *)&v2554.markerName[130];
            v710 = **(_DWORD **)&v2554.markerName[138];
            v711 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 200);
            if (v711 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[130] + 56), v692, v693, v694, v695, v696, v697, v698);
              v711 = *(_DWORD *)(v709 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v709 + 56) + v711) = 509681664;
            *(_DWORD *)(v709 + 200) += 4;
            JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(v709, v710, v693, v694, v695, v696, v697, v698, (uint64_t)&v2554.markerName[26]);
            v717 = **(_DWORD **)&v2554.markerName[146] + (*(_DWORD *)(v709 + 640) >> 2);
            if (*(_DWORD *)(v709 + 396) <= v717)
            {
              __break(0xC471u);
              JUMPOUT(0x198724BD8);
            }
            *(_DWORD *)&v2554.markerName[114] = *(_DWORD *)(*(_QWORD *)(v709 + 384) + 4 * v717);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[26], (unsigned int *)&v2554.markerName[114], v709, v712, v713, v714, v715, v716);
            v725 = *((_DWORD *)this + 50);
            for (jj = v2552; v725 < *((_DWORD *)this + 13); v12 = v2550)
            {
              if ((v725 + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v718, v719, v720, v721, v722, v723, v724);
                v725 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v725) = -721215457;
              v725 = *((_DWORD *)this + 50) + 4;
              *((_DWORD *)this + 50) = v725;
              jj = v2552;
            }
            v726 = v725;
            if ((v725 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v718, v719, v720, v721, v722, v723, v724);
              v726 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v726) = 335544320;
            *((_DWORD *)this + 50) += 4;
            if (*((_BYTE *)this + 328))
              v727 = 69;
            else
              v727 = 65;
            *(_DWORD *)&v2554.markerName[54] = v725;
            *(_DWORD *)&v2554.markerName[58] = 0;
            v2554.markerName[62] = v727;
            *(_WORD *)&v2554.markerName[63] = 15;
            v2554.markerName[65] = -1;
            v728 = *(_DWORD *)&v2554.markerName[106] + (*((_DWORD *)this + 160) >> 2);
            if (*((_DWORD *)this + 99) <= v728)
            {
              __break(0xC471u);
              JUMPOUT(0x198724AC8);
            }
            *(_DWORD *)&v2554.markerName[26] = *(_DWORD *)(*((_QWORD *)this + 48) + 4 * v728);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[54], (unsigned int *)&v2554.markerName[26], (uint64_t)this, v720, v721, v722, v723, v724);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[118], (uint64_t)this, v729, v730, v731, v732, v733, v734);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[78], (uint64_t)this, v735, v736, v737, v738, v739, v740);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[66], (uint64_t)this, v741, v742, v743, v744, v745, v746);
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v747, v748, v749, v750, v751, v752);
            v760 = *((_DWORD *)this + 50);
            if (v760 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v753, v754, v755, v756, v757, v758, v759);
              v760 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v760) = -129989820;
            *((_DWORD *)this + 50) += 4;
            JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[26], (unsigned __int8 *)this, *(uint64_t *)&v2554.markerName[98], 4, 0, v757, v758, v759);
            v198 = *(_QWORD *)&v2554.markerName[218];
            JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(uint64_t *)&v2554.markerName[218], **(_BYTE **)&v2554.markerName[226] == 0, 0, v761, v762, v763, v764, (uint64_t)&v2554.markerName[26], v765);
            v209 = **(_DWORD **)&v2554.markerName[234] + (*(_DWORD *)(v198 + 640) >> 2);
            if (*(_DWORD *)(v198 + 396) <= v209)
            {
              __break(0xC471u);
              JUMPOUT(0x198724B18);
            }
            goto LABEL_907;
          case 83:
            *(_DWORD *)&v2554.markerName[50] = 2;
            v2554.markerName[49] = 1;
            v1015 = *(unsigned __int8 *)v23;
            if (v1015 == 128)
            {
              v2380 = *(__int16 *)(v23 + 2);
              if (v2380 <= 63)
                v1017 = *(__int16 *)(v23 + 2);
              else
                v1017 = v2380 + 1073741760;
              v2381 = *(__int16 *)(v23 + 4);
              if (v2381 <= 63)
                v1019 = *(__int16 *)(v23 + 4);
              else
                v1019 = v2381 + 1073741760;
              LODWORD(v1020) = *(__int16 *)(v23 + 6);
            }
            else if (v1015 == 130)
            {
              v1017 = *(_DWORD *)(v23 + 2);
              v1019 = *(_DWORD *)(v23 + 6);
              LODWORD(v1020) = *(_DWORD *)(v23 + 10);
            }
            else
            {
              v1016 = *(char *)(v23 + 1);
              if (v1016 <= 15)
                v1017 = *(char *)(v23 + 1);
              else
                v1017 = v1016 + 1073741808;
              v1018 = *(char *)(v23 + 2);
              if (v1018 <= 15)
                v1019 = *(char *)(v23 + 2);
              else
                v1019 = v1018 + 1073741808;
              LODWORD(v1020) = *(char *)(v23 + 3);
            }
            if ((_DWORD)v1020)
              goto LABEL_636;
            v2140 = *((_QWORD *)this + 101);
            v2141 = *(unint64_t **)(v2140 + 80);
            v2142 = *v2141;
            if (*v2141 > v23 || v23 >= *((unsigned int *)v2141 + 3) + v2142)
            {
              __break(0xC471u);
              JUMPOUT(0x198723C5CLL);
            }
            v1020 = *(_QWORD *)(v2140 + 144);
            if (!v1020)
              goto LABEL_636;
            v2143 = v23 - v2142;
            v2144 = *(_DWORD *)(v1020 - 8);
            v2145 = 9 * ((~(v2143 << 15) + v2143) ^ ((~(v2143 << 15) + v2143) >> 10));
            v2146 = (v2145 ^ (v2145 >> 6)) + ~((v2145 ^ (v2145 >> 6)) << 11);
            v2147 = v2144 & (v2146 ^ HIWORD(v2146));
            v2148 = *(_DWORD *)(v1020 + 8 * v2147);
            if (v2148 == v2143)
              goto LABEL_1525;
            v2149 = 1;
            while (v2148)
            {
              v2147 = ((_DWORD)v2147 + v2149) & v2144;
              v2148 = *(_DWORD *)(v1020 + 8 * v2147);
              ++v2149;
              if (v2148 == v2143)
              {
LABEL_1525:
                LODWORD(v1020) = *(_DWORD *)(v1020 + 8 * v2147 + 4);
                goto LABEL_636;
              }
            }
            LODWORD(v1020) = 0;
LABEL_636:
            *(_DWORD *)&v2554.markerName[42] = v1020;
            *(_QWORD *)&v2554.markerName[218] = this;
            *(_QWORD *)&v2554.markerName[226] = &v2554.markerName[49];
            *(_QWORD *)&v2554.markerName[234] = &v2554.markerName[42];
            *(_QWORD *)&v2554.markerName[130] = this;
            *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[50];
            v1021 = v1015;
            *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[42];
            if ((v1015 | 2) == 0x82)
              v1021 = *(unsigned __int8 *)(v23 + 1);
            v1022 = v1015 == 128;
            if (v1015 == 130)
              v1022 = 2;
            v1023 = v1015 == 128 || v1015 == 130;
            v1024 = (unint64_t)JSC::opcodeLengths[v1021] << v1022;
            v15 = !v1023;
            v1025 = 1;
            if (!v15)
              v1025 = 2;
            *(_QWORD *)&v2554.markerName[106] = v1024 + v1025;
            *(_QWORD *)&v2554.markerName[98] = operationCompareLess;
            if (v1017 >= 0x40000000)
            {
              v1736 = *((_QWORD *)this + 101);
              v1737 = (v1017 - 0x40000000);
              v1738 = *(_DWORD **)(v1736 + 120);
              if (!v1738 || *v1738 <= v1737 || *((_BYTE *)v1738 + v1737 + 4) != 3)
              {
                v1739 = *(_DWORD **)(v1736 + 112);
                if (*v1739 <= v1737)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1987239BCLL);
                }
                v1740 = *(_QWORD *)&v1739[2 * v1737 + 2];
                if ((v1740 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1740 + 5) == 2)
                {
                  if (v1738 && *v1738 > v1737 && *((_BYTE *)v1738 + v1737 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198724040);
                  }
                  v1741 = *(_QWORD *)(v1740 + 8);
                  v1742 = v1740 + 16;
                  v1743 = (_DWORD *)((v1741 & 1) != 0 ? v1742 : v1741 + 4);
                  if (*v1743 == 1)
                  {
                    v1744 = v1019;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
LABEL_1119:
                    v1752 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1753 = *(_DWORD **)(v1752 + 120);
                    if (!v1753 || *v1753 <= v1737)
                      goto LABEL_2244;
                    v1754 = *((unsigned __int8 *)v1753 + v1737 + 4);
                    if ((v1754 - 1) < 2)
                      goto LABEL_1122;
                    if (v1754)
                    {
                      if (v1754 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724B58);
                      }
                    }
                    else
                    {
LABEL_2244:
                      v2516 = *(_DWORD **)(v1752 + 112);
                      if (*v2516 <= v1737)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724858);
                      }
                      v2517 = *(_QWORD *)&v2516[2 * v1737 + 2];
                      if (!v2517
                        || (v2517 & 0xFFFE000000000002) != 0
                        || ((v2518 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2517 & 0xFFFFFFFE) + 0x4C)),
                             v2518 != &JSC::SymbolTable::s_info)
                          ? (v2519 = v2518 == &JSC::JSTemplateObjectDescriptor::s_info)
                          : (v2519 = 1),
                            !v2519))
                      {
LABEL_1122:
                        v1755 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                        if (*v1755 <= v1737)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1987247E0);
                        }
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1755[2 * v1737 + 2], 1, v1747, v1748, v1749, v1750, v1751);
                        goto LABEL_1124;
                      }
                    }
                    v2520 = *v2551;
                    if ((*v2551 + 4) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1745, v1746, v1747, v1748, v1749, v1750, v1751);
                      v2520 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2520) = -129956959;
                    v2521 = *v2551;
                    v2522 = *v2551 + 4;
                    *v2551 = v2522;
                    if ((v2521 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1745, v1746, v1747, v1748, v1749, v1750, v1751);
                      v2522 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2522) = -129368031;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v1017 << 35) | 1, 1, v1747, v1748, v1749, v1750, v1751);
LABEL_1124:
                    if (v1019 < 0x40000000)
                    {
                      v1763 = 29;
                      goto LABEL_2165;
                    }
                    v1795 = (v1019 - 0x40000000);
LABEL_1162:
                    v1802 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1803 = *(_DWORD **)(v1802 + 120);
                    if (!v1803 || *v1803 <= v1795)
                      goto LABEL_2152;
                    v1804 = *((unsigned __int8 *)v1803 + v1795 + 4);
                    if ((v1804 - 1) < 2)
                      goto LABEL_1165;
                    if (v1804)
                    {
                      if (v1804 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724AC0);
                      }
                    }
                    else
                    {
LABEL_2152:
                      v2475 = *(_DWORD **)(v1802 + 112);
                      if (*v2475 <= v1795)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724740);
                      }
                      v2476 = *(_QWORD *)&v2475[2 * v1795 + 2];
                      if (!v2476
                        || (v2476 & 0xFFFE000000000002) != 0
                        || ((v2477 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2476 & 0xFFFFFFFE) + 0x4C)),
                             v2477 != &JSC::SymbolTable::s_info)
                          ? (v2478 = v2477 == &JSC::JSTemplateObjectDescriptor::s_info)
                          : (v2478 = 1),
                            !v2478))
                      {
LABEL_1165:
                        v1805 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                        if (*v1805 <= v1795)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198724620);
                        }
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1805[2 * v1795 + 2], 2, v1758, v1759, v1760, v1761, v1762);
                        goto LABEL_1167;
                      }
                    }
                    v2479 = *v2551;
                    if ((*v2551 + 4) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1756, v1757, v1758, v1759, v1760, v1761, v1762);
                      v2479 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2479) = -129956958;
                    v2480 = *v2551;
                    v2481 = *v2551 + 4;
                    *v2551 = v2481;
                    if ((v2480 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1756, v1757, v1758, v1759, v1760, v1761, v1762);
                      v2481 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2481) = -129367998;
                    *((_DWORD *)this + 50) += 4;
                    v1763 = 2;
LABEL_2165:
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, v1763 | (v1744 << 35), 2, v1758, v1759, v1760, v1761, v1762);
LABEL_1167:
                    jj = v2552;
                    v12 = v2550;
                    v1813 = *v2551;
                    if ((*v2551 + 4) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1806, v1807, v1808, v1809, v1810, v1811, v1812);
                      v1813 = *v2551;
                    }
LABEL_1169:
                    *(_DWORD *)(*((_QWORD *)this + 7) + v1813) = -129989824;
                    *((_DWORD *)this + 50) += 4;
                    JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[154], (unsigned __int8 *)this, (uint64_t)operationCompareLess, 0, 1, v1810, v1811, v1812);
                    JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1}::operator()((uint64_t)&v2554.markerName[218], v1821, v1814, v1815, v1816, v1817, v1818, v1819, v1820);
                    goto LABEL_1549;
                  }
                }
              }
            }
            if (v1019 >= 0x40000000)
            {
              v1794 = *((_QWORD *)this + 101);
              v1795 = (v1019 - 0x40000000);
              v1796 = *(_DWORD **)(v1794 + 120);
              if (!v1796 || *v1796 <= v1795 || *((_BYTE *)v1796 + v1795 + 4) != 3)
              {
                v1797 = *(_DWORD **)(v1794 + 112);
                if (*v1797 <= v1795)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198723A3CLL);
                }
                v1798 = *(_QWORD *)&v1797[2 * v1795 + 2];
                if ((v1798 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1798 + 5) == 2)
                {
                  if (v1796 && *v1796 > v1795 && *((_BYTE *)v1796 + v1795 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723FA0);
                  }
                  v1799 = *(_QWORD *)(v1798 + 8);
                  v1800 = v1798 + 16;
                  v1801 = (_DWORD *)((v1799 & 1) != 0 ? v1800 : v1799 + 4);
                  if (*v1801 == 1)
                  {
                    v1744 = v1019;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
                    if (v1017 >= 0x40000000)
                    {
                      v1737 = (v1017 - 0x40000000);
                      goto LABEL_1119;
                    }
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v1017 << 35) | 0x1D, 1, v1747, v1748, v1749, v1750, v1751);
                    goto LABEL_1162;
                  }
                }
              }
            }
            *(_QWORD *)&v2554.markerName[90] = this;
            *(_QWORD *)&v2554.markerName[154] = this;
            *(_QWORD *)&v2554.markerName[162] = &v2554.markerName[18];
            *(_QWORD *)&v2554.markerName[170] = &v2554.markerName[90];
            *(_QWORD *)&v2554.markerName[178] = &v2554.markerName[130];
            *(_QWORD *)&v2554.markerName[186] = &v2554.markerName[106];
            *(_QWORD *)&v2554.markerName[194] = &v2554.markerName[98];
            *(_QWORD *)&v2554.markerName[202] = &v2554.markerName[218];
            jj = v2552;
            if ((JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v1017, 0, 0, 2, 1, a7, a8) & 1) != 0|| (JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v1019, 2, 1, 0, 0, v33, v34) & 1) != 0)
            {
              goto LABEL_1549;
            }
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v29, v30, v31, v32, v33, v34);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 0, 27, v1026, v1027, v1028, v1029, (uint64_t)&v2554.markerName[118]);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 2, 27, v1030, v1031, v1032, v1033, (uint64_t)&v2554.markerName[78]);
            JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, 2, 27, v1034, v1035, v1036, v1037, (uint64_t)&v2554.markerName[66]);
            v1045 = *(_QWORD *)&v2554.markerName[90];
            v1046 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v1047 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v1047 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v1038, v1039, v1040, v1041, v1042, v1043, v1044);
              v1047 = *(_DWORD *)(v1045 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1045 + 56) + v1047) = -1962933408;
            v1048 = *(_DWORD *)(v1045 + 200);
            v1049 = v1048 + 4;
            *(_DWORD *)(v1045 + 200) = v1048 + 4;
            if ((v1048 + 8) > *(_DWORD *)(v1045 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v1046, v1038, v1039, v1040, v1041, v1042, v1043, v1044);
              v1049 = *(_DWORD *)(v1045 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1045 + 56) + v1049) = -1637416960;
            *(_DWORD *)(v1045 + 200) += 4;
            v1050 = *(_QWORD *)&v2554.markerName[90];
            v1051 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v1052 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v1052 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v1038, v1039, v1040, v1041, v1042, v1043, v1044);
              v1052 = *(_DWORD *)(v1050 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1050 + 56) + v1052) = -1962802334;
            v1053 = *(_DWORD *)(v1050 + 200);
            v1054 = v1053 + 4;
            *(_DWORD *)(v1050 + 200) = v1053 + 4;
            if ((v1053 + 8) > *(_DWORD *)(v1050 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v1051, v1038, v1039, v1040, v1041, v1042, v1043, v1044);
              v1054 = *(_DWORD *)(v1050 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1050 + 56) + v1054) = -1637416895;
            *(_DWORD *)(v1050 + 200) += 4;
            v1055 = *(_QWORD *)&v2554.markerName[130];
            v1056 = **(_DWORD **)&v2554.markerName[138];
            v1057 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 200);
            if (v1057 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[130] + 56), v1038, v1039, v1040, v1041, v1042, v1043, v1044);
              v1057 = *(_DWORD *)(v1055 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v1055 + 56) + v1057) = 509681664;
            *(_DWORD *)(v1055 + 200) += 4;
            JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(v1055, v1056, v1039, v1040, v1041, v1042, v1043, v1044, (uint64_t)&v2554.markerName[26]);
            v1063 = **(_DWORD **)&v2554.markerName[146] + (*(_DWORD *)(v1055 + 640) >> 2);
            if (*(_DWORD *)(v1055 + 396) <= v1063)
            {
              __break(0xC471u);
              JUMPOUT(0x198724B90);
            }
            *(_DWORD *)&v2554.markerName[114] = *(_DWORD *)(*(_QWORD *)(v1055 + 384) + 4 * v1063);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[26], (unsigned int *)&v2554.markerName[114], v1055, v1058, v1059, v1060, v1061, v1062);
            v1071 = *((_DWORD *)this + 50);
            for (jj = v2552; v1071 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v1071)
            {
              if ((v1071 + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v1064, v1065, v1066, v1067, v1068, v1069, v1070);
                v1071 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v1071) = -721215457;
              v1071 = *((_DWORD *)this + 50) + 4;
            }
            v1072 = v1071;
            if ((v1071 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1064, v1065, v1066, v1067, v1068, v1069, v1070);
              v1072 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v1072) = 335544320;
            *((_DWORD *)this + 50) += 4;
            if (*((_BYTE *)this + 328))
              v1073 = 69;
            else
              v1073 = 65;
            *(_DWORD *)&v2554.markerName[54] = v1071;
            *(_DWORD *)&v2554.markerName[58] = 0;
            v2554.markerName[62] = v1073;
            *(_WORD *)&v2554.markerName[63] = 15;
            v2554.markerName[65] = -1;
            v1074 = *(_DWORD *)&v2554.markerName[106] + (*((_DWORD *)this + 160) >> 2);
            if (*((_DWORD *)this + 99) <= v1074)
            {
              __break(0xC471u);
              JUMPOUT(0x198724BE0);
            }
            *(_DWORD *)&v2554.markerName[26] = *(_DWORD *)(*((_QWORD *)this + 48) + 4 * v1074);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[54], (unsigned int *)&v2554.markerName[26], (uint64_t)this, v1066, v1067, v1068, v1069, v1070);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[118], (uint64_t)this, v1075, v1076, v1077, v1078, v1079, v1080);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[78], (uint64_t)this, v1081, v1082, v1083, v1084, v1085, v1086);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[66], (uint64_t)this, v1087, v1088, v1089, v1090, v1091, v1092);
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v1093, v1094, v1095, v1096, v1097, v1098);
            v1106 = *((_DWORD *)this + 50);
            if (v1106 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1099, v1100, v1101, v1102, v1103, v1104, v1105);
              v1106 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v1106) = -129989820;
            *((_DWORD *)this + 50) += 4;
            JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[26], (unsigned __int8 *)this, *(uint64_t *)&v2554.markerName[98], 4, 0, v1103, v1104, v1105);
            v198 = *(_QWORD *)&v2554.markerName[218];
            JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(uint64_t *)&v2554.markerName[218], **(_BYTE **)&v2554.markerName[226] == 0, 0, v1107, v1108, v1109, v1110, (uint64_t)&v2554.markerName[26], v1111);
            v209 = **(_DWORD **)&v2554.markerName[234] + (*(_DWORD *)(v198 + 640) >> 2);
            if (*(_DWORD *)(v198 + 396) <= v209)
            {
              __break(0xC471u);
              JUMPOUT(0x198724A28);
            }
            goto LABEL_907;
          case 84:
            *(_DWORD *)&v2554.markerName[50] = 8;
            v2554.markerName[49] = 1;
            v106 = *(unsigned __int8 *)v23;
            if (v106 == 128)
            {
              v2351 = *(__int16 *)(v23 + 2);
              if (v2351 <= 63)
                v108 = *(__int16 *)(v23 + 2);
              else
                v108 = v2351 + 1073741760;
              v2352 = *(__int16 *)(v23 + 4);
              if (v2352 <= 63)
                v110 = *(__int16 *)(v23 + 4);
              else
                v110 = v2352 + 1073741760;
              LODWORD(v111) = *(__int16 *)(v23 + 6);
            }
            else if (v106 == 130)
            {
              v108 = *(_DWORD *)(v23 + 2);
              v110 = *(_DWORD *)(v23 + 6);
              LODWORD(v111) = *(_DWORD *)(v23 + 10);
            }
            else
            {
              v107 = *(char *)(v23 + 1);
              if (v107 <= 15)
                v108 = *(char *)(v23 + 1);
              else
                v108 = v107 + 1073741808;
              v109 = *(char *)(v23 + 2);
              if (v109 <= 15)
                v110 = *(char *)(v23 + 2);
              else
                v110 = v109 + 1073741808;
              LODWORD(v111) = *(char *)(v23 + 3);
            }
            if ((_DWORD)v111)
              goto LABEL_91;
            v2090 = *((_QWORD *)this + 101);
            v2091 = *(unint64_t **)(v2090 + 80);
            v2092 = *v2091;
            if (*v2091 > v23 || v23 >= *((unsigned int *)v2091 + 3) + v2092)
            {
              __break(0xC471u);
              JUMPOUT(0x198723C1CLL);
            }
            v111 = *(_QWORD *)(v2090 + 144);
            if (!v111)
              goto LABEL_91;
            v2093 = v23 - v2092;
            v2094 = *(_DWORD *)(v111 - 8);
            v2095 = 9 * ((~(v2093 << 15) + v2093) ^ ((~(v2093 << 15) + v2093) >> 10));
            v2096 = (v2095 ^ (v2095 >> 6)) + ~((v2095 ^ (v2095 >> 6)) << 11);
            v2097 = v2094 & (v2096 ^ HIWORD(v2096));
            v2098 = *(_DWORD *)(v111 + 8 * v2097);
            if (v2098 == v2093)
              goto LABEL_1485;
            v2099 = 1;
            while (v2098)
            {
              v2097 = ((_DWORD)v2097 + v2099) & v2094;
              v2098 = *(_DWORD *)(v111 + 8 * v2097);
              ++v2099;
              if (v2098 == v2093)
              {
LABEL_1485:
                LODWORD(v111) = *(_DWORD *)(v111 + 8 * v2097 + 4);
                goto LABEL_91;
              }
            }
            LODWORD(v111) = 0;
LABEL_91:
            *(_DWORD *)&v2554.markerName[42] = v111;
            *(_QWORD *)&v2554.markerName[218] = this;
            *(_QWORD *)&v2554.markerName[226] = &v2554.markerName[49];
            *(_QWORD *)&v2554.markerName[234] = &v2554.markerName[42];
            *(_QWORD *)&v2554.markerName[130] = this;
            *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[50];
            v112 = v106;
            *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[42];
            if ((v106 | 2) == 0x82)
              v112 = *(unsigned __int8 *)(v23 + 1);
            v113 = v106 == 128;
            if (v106 == 130)
              v113 = 2;
            v114 = v106 == 128 || v106 == 130;
            v115 = (unint64_t)JSC::opcodeLengths[v112] << v113;
            v15 = !v114;
            v116 = 1;
            if (!v15)
              v116 = 2;
            *(_QWORD *)&v2554.markerName[106] = v115 + v116;
            *(_QWORD *)&v2554.markerName[98] = operationCompareLessEq;
            if (v108 >= 0x40000000)
            {
              v1577 = *((_QWORD *)this + 101);
              v1578 = (v108 - 0x40000000);
              v1579 = *(_DWORD **)(v1577 + 120);
              if (!v1579 || *v1579 <= v1578 || *((_BYTE *)v1579 + v1578 + 4) != 3)
              {
                v1580 = *(_DWORD **)(v1577 + 112);
                if (*v1580 <= v1578)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1987239FCLL);
                }
                v1581 = *(_QWORD *)&v1580[2 * v1578 + 2];
                if ((v1581 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1581 + 5) == 2)
                {
                  if (v1579 && *v1579 > v1578 && *((_BYTE *)v1579 + v1578 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723E60);
                  }
                  v1582 = *(_QWORD *)(v1581 + 8);
                  v1583 = v1581 + 16;
                  v1584 = (_DWORD *)((v1582 & 1) != 0 ? v1583 : v1582 + 4);
                  if (*v1584 == 1)
                  {
                    v2541 = v110;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
LABEL_1007:
                    v1592 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1593 = *(_DWORD **)(v1592 + 120);
                    if (!v1593 || *v1593 <= v1578)
                      goto LABEL_2092;
                    v1594 = *((unsigned __int8 *)v1593 + v1578 + 4);
                    if ((v1594 - 1) < 2)
                      goto LABEL_1010;
                    if (v1594)
                    {
                      if (v1594 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724A80);
                      }
                    }
                    else
                    {
LABEL_2092:
                      v2461 = *(_DWORD **)(v1592 + 112);
                      if (*v2461 <= v1578)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987246E0);
                      }
                      v2462 = *(_QWORD *)&v2461[2 * v1578 + 2];
                      if (!v2462
                        || (v2462 & 0xFFFE000000000002) != 0
                        || ((v2463 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2462 & 0xFFFFFFFE) + 0x4C)),
                             v2463 != &JSC::SymbolTable::s_info)
                          ? (v2464 = v2463 == &JSC::JSTemplateObjectDescriptor::s_info)
                          : (v2464 = 1),
                            !v2464))
                      {
LABEL_1010:
                        v1595 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                        if (*v1595 <= v1578)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198724560);
                        }
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1595[2 * v1578 + 2], 1, v1587, v1588, v1589, v1590, v1591);
                        jj = v2552;
                        goto LABEL_1012;
                      }
                    }
                    v2465 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1585, v1586, v1587, v1588, v1589, v1590, v1591);
                      v2465 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2465) = -129956959;
                    v2466 = *v2551;
                    v2467 = *v2551 + 4;
                    *v2551 = v2467;
                    if ((v2466 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1585, v1586, v1587, v1588, v1589, v1590, v1591);
                      v2467 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2467) = -129368031;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v108 << 35) | 1, 1, v1587, v1588, v1589, v1590, v1591);
                    jj = v2552;
                    v12 = v2550;
LABEL_1012:
                    if (v110 < 0x40000000)
                    {
                      JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2541 << 35) | 0x1D, 2, v1598, v1599, v1600, v1601, v1602);
                      goto LABEL_1256;
                    }
                    v1893 = (v110 - 0x40000000);
LABEL_1251:
                    v1900 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1901 = *(_DWORD **)(v1900 + 120);
                    jj = v2552;
                    if (!v1901 || *v1901 <= v1893)
                      goto LABEL_1840;
                    v1902 = *((unsigned __int8 *)v1901 + v1893 + 4);
                    if ((v1902 - 1) < 2)
                      goto LABEL_1254;
                    if (v1902)
                    {
                      if (v1902 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724998);
                      }
                    }
                    else
                    {
LABEL_1840:
                      v2344 = *(_DWORD **)(v1900 + 112);
                      if (*v2344 <= v1893)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987244A0);
                      }
                      v2345 = *(_QWORD *)&v2344[2 * v1893 + 2];
                      if (!v2345
                        || (v2345 & 0xFFFE000000000002) != 0
                        || ((v2346 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2345 & 0xFFFFFFFE) + 0x4C)),
                             v2346 != &JSC::SymbolTable::s_info)
                          ? (v2347 = v2346 == &JSC::JSTemplateObjectDescriptor::s_info)
                          : (v2347 = 1),
                            !v2347))
                      {
LABEL_1254:
                        v1903 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                        if (*v1903 <= v1893)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1987241E0);
                        }
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1903[2 * v1893 + 2], 2, v1598, v1599, v1600, v1601, v1602);
                        goto LABEL_1256;
                      }
                    }
                    v2348 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1596, v1597, v1598, v1599, v1600, v1601, v1602);
                      v2348 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2348) = -129956958;
                    v2349 = *v2551;
                    v2350 = *v2551 + 4;
                    *v2551 = v2350;
                    if ((v2349 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1596, v1597, v1598, v1599, v1600, v1601, v1602);
                      v2350 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2350) = -129367998;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2541 << 35) | 2, 2, v1598, v1599, v1600, v1601, v1602);
                    jj = v2552;
                    v12 = v2550;
LABEL_1256:
                    v1904 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1603, v1604, v1605, v1606, v1607, v1608, v1609);
                      v1904 = *v2551;
                    }
LABEL_1258:
                    *(_DWORD *)(*((_QWORD *)this + 7) + v1904) = -129989824;
                    *((_DWORD *)this + 50) += 4;
                    JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[154], (unsigned __int8 *)this, (uint64_t)operationCompareLessEq, 0, 1, v1607, v1608, v1609);
                    JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1}::operator()((uint64_t)&v2554.markerName[218], v1912, v1905, v1906, v1907, v1908, v1909, v1910, v1911);
                    goto LABEL_1549;
                  }
                }
              }
            }
            if (v110 >= 0x40000000)
            {
              v1892 = *((_QWORD *)this + 101);
              v1893 = (v110 - 0x40000000);
              v1894 = *(_DWORD **)(v1892 + 120);
              if (!v1894 || *v1894 <= v1893 || *((_BYTE *)v1894 + v1893 + 4) != 3)
              {
                v1895 = *(_DWORD **)(v1892 + 112);
                if (*v1895 <= v1893)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198723ABCLL);
                }
                v1896 = *(_QWORD *)&v1895[2 * v1893 + 2];
                if ((v1896 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1896 + 5) == 2)
                {
                  if (v1894 && *v1894 > v1893 && *((_BYTE *)v1894 + v1893 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723FC0);
                  }
                  v1897 = *(_QWORD *)(v1896 + 8);
                  v1898 = v1896 + 16;
                  v1899 = (_DWORD *)((v1897 & 1) != 0 ? v1898 : v1897 + 4);
                  if (*v1899 == 1)
                  {
                    v2541 = v110;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
                    if (v108 >= 0x40000000)
                    {
                      v1578 = (v108 - 0x40000000);
                      goto LABEL_1007;
                    }
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v108 << 35) | 0x1D, 1, v1587, v1588, v1589, v1590, v1591);
                    goto LABEL_1251;
                  }
                }
              }
            }
            *(_QWORD *)&v2554.markerName[90] = this;
            *(_QWORD *)&v2554.markerName[154] = this;
            *(_QWORD *)&v2554.markerName[162] = &v2554.markerName[18];
            *(_QWORD *)&v2554.markerName[170] = &v2554.markerName[90];
            *(_QWORD *)&v2554.markerName[178] = &v2554.markerName[130];
            *(_QWORD *)&v2554.markerName[186] = &v2554.markerName[106];
            *(_QWORD *)&v2554.markerName[194] = &v2554.markerName[98];
            *(_QWORD *)&v2554.markerName[202] = &v2554.markerName[218];
            jj = v2552;
            if ((JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v108, 0, 0, 2, 1, a7, a8) & 1) != 0|| (JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v110, 2, 1, 0, 0, v33, v34) & 1) != 0)
            {
              goto LABEL_1549;
            }
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v29, v30, v31, v32, v33, v34);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 0, 27, v117, v118, v119, v120, (uint64_t)&v2554.markerName[118]);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 2, 27, v121, v122, v123, v124, (uint64_t)&v2554.markerName[78]);
            JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, 2, 27, v125, v126, v127, v128, (uint64_t)&v2554.markerName[66]);
            v136 = *(_QWORD *)&v2554.markerName[90];
            v137 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v138 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v138 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v129, v130, v131, v132, v133, v134, v135);
              v138 = *(_DWORD *)(v136 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v136 + 56) + v138) = -1962933408;
            v139 = *(_DWORD *)(v136 + 200);
            v140 = v139 + 4;
            *(_DWORD *)(v136 + 200) = v139 + 4;
            if ((v139 + 8) > *(_DWORD *)(v136 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v137, v129, v130, v131, v132, v133, v134, v135);
              v140 = *(_DWORD *)(v136 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v136 + 56) + v140) = -1637416960;
            *(_DWORD *)(v136 + 200) += 4;
            v141 = *(_QWORD *)&v2554.markerName[90];
            v142 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v143 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v143 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v129, v130, v131, v132, v133, v134, v135);
              v143 = *(_DWORD *)(v141 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v141 + 56) + v143) = -1962802334;
            v144 = *(_DWORD *)(v141 + 200);
            v145 = v144 + 4;
            *(_DWORD *)(v141 + 200) = v144 + 4;
            if ((v144 + 8) > *(_DWORD *)(v141 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v142, v129, v130, v131, v132, v133, v134, v135);
              v145 = *(_DWORD *)(v141 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v141 + 56) + v145) = -1637416895;
            *(_DWORD *)(v141 + 200) += 4;
            v146 = *(_QWORD *)&v2554.markerName[130];
            v147 = **(_DWORD **)&v2554.markerName[138];
            v148 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 200);
            if (v148 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[130] + 56), v129, v130, v131, v132, v133, v134, v135);
              v148 = *(_DWORD *)(v146 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v146 + 56) + v148) = 509681664;
            *(_DWORD *)(v146 + 200) += 4;
            JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(v146, v147, v130, v131, v132, v133, v134, v135, (uint64_t)&v2554.markerName[26]);
            v154 = **(_DWORD **)&v2554.markerName[146] + (*(_DWORD *)(v146 + 640) >> 2);
            if (*(_DWORD *)(v146 + 396) <= v154)
            {
              __break(0xC471u);
              JUMPOUT(0x198724AD0);
            }
            *(_DWORD *)&v2554.markerName[114] = *(_DWORD *)(*(_QWORD *)(v146 + 384) + 4 * v154);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[26], (unsigned int *)&v2554.markerName[114], v146, v149, v150, v151, v152, v153);
            v162 = *((_DWORD *)this + 50);
            for (jj = v2552; v162 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v162)
            {
              if ((v162 + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v155, v156, v157, v158, v159, v160, v161);
                v162 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v162) = -721215457;
              v162 = *((_DWORD *)this + 50) + 4;
            }
            v163 = v162;
            if ((v162 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v155, v156, v157, v158, v159, v160, v161);
              v163 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v163) = 335544320;
            *((_DWORD *)this + 50) += 4;
            if (*((_BYTE *)this + 328))
              v164 = 69;
            else
              v164 = 65;
            *(_DWORD *)&v2554.markerName[54] = v162;
            *(_DWORD *)&v2554.markerName[58] = 0;
            v2554.markerName[62] = v164;
            *(_WORD *)&v2554.markerName[63] = 15;
            v2554.markerName[65] = -1;
            v165 = *(_DWORD *)&v2554.markerName[106] + (*((_DWORD *)this + 160) >> 2);
            if (*((_DWORD *)this + 99) <= v165)
            {
              __break(0xC471u);
              JUMPOUT(0x198724BA0);
            }
            *(_DWORD *)&v2554.markerName[26] = *(_DWORD *)(*((_QWORD *)this + 48) + 4 * v165);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[54], (unsigned int *)&v2554.markerName[26], (uint64_t)this, v157, v158, v159, v160, v161);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[118], (uint64_t)this, v166, v167, v168, v169, v170, v171);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[78], (uint64_t)this, v172, v173, v174, v175, v176, v177);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[66], (uint64_t)this, v178, v179, v180, v181, v182, v183);
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v184, v185, v186, v187, v188, v189);
            v197 = *((_DWORD *)this + 50);
            if (v197 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v190, v191, v192, v193, v194, v195, v196);
              v197 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v197) = -129989820;
            *((_DWORD *)this + 50) += 4;
            JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[26], (unsigned __int8 *)this, *(uint64_t *)&v2554.markerName[98], 4, 0, v194, v195, v196);
            v198 = *(_QWORD *)&v2554.markerName[218];
            JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(uint64_t *)&v2554.markerName[218], **(_BYTE **)&v2554.markerName[226] == 0, 0, v199, v200, v201, v202, (uint64_t)&v2554.markerName[26], v203);
            v209 = **(_DWORD **)&v2554.markerName[234] + (*(_DWORD *)(v198 + 640) >> 2);
            if (*(_DWORD *)(v198 + 396) <= v209)
            {
              __break(0xC471u);
              JUMPOUT(0x198724C90);
            }
            goto LABEL_907;
          case 85:
            *(_DWORD *)&v2554.markerName[50] = 13;
            v2554.markerName[49] = 1;
            v564 = *(unsigned __int8 *)v23;
            if (v564 == 128)
            {
              v2305 = *(__int16 *)(v23 + 2);
              if (v2305 <= 63)
                v566 = *(__int16 *)(v23 + 2);
              else
                v566 = v2305 + 1073741760;
              v2306 = *(__int16 *)(v23 + 4);
              if (v2306 <= 63)
                v568 = *(__int16 *)(v23 + 4);
              else
                v568 = v2306 + 1073741760;
              LODWORD(v569) = *(__int16 *)(v23 + 6);
            }
            else if (v564 == 130)
            {
              v566 = *(_DWORD *)(v23 + 2);
              v568 = *(_DWORD *)(v23 + 6);
              LODWORD(v569) = *(_DWORD *)(v23 + 10);
            }
            else
            {
              v565 = *(char *)(v23 + 1);
              if (v565 <= 15)
                v566 = *(char *)(v23 + 1);
              else
                v566 = v565 + 1073741808;
              v567 = *(char *)(v23 + 2);
              if (v567 <= 15)
                v568 = *(char *)(v23 + 2);
              else
                v568 = v567 + 1073741808;
              LODWORD(v569) = *(char *)(v23 + 3);
            }
            if ((_DWORD)v569)
              goto LABEL_364;
            v2110 = *((_QWORD *)this + 101);
            v2111 = *(unint64_t **)(v2110 + 80);
            v2112 = *v2111;
            if (*v2111 > v23 || v23 >= *((unsigned int *)v2111 + 3) + v2112)
            {
              __break(0xC471u);
              JUMPOUT(0x198723BBCLL);
            }
            v569 = *(_QWORD *)(v2110 + 144);
            if (!v569)
              goto LABEL_364;
            v2113 = v23 - v2112;
            v2114 = *(_DWORD *)(v569 - 8);
            v2115 = 9 * ((~(v2113 << 15) + v2113) ^ ((~(v2113 << 15) + v2113) >> 10));
            v2116 = (v2115 ^ (v2115 >> 6)) + ~((v2115 ^ (v2115 >> 6)) << 11);
            v2117 = v2114 & (v2116 ^ HIWORD(v2116));
            v2118 = *(_DWORD *)(v569 + 8 * v2117);
            if (v2118 == v2113)
              goto LABEL_1501;
            v2119 = 1;
            while (v2118)
            {
              v2117 = ((_DWORD)v2117 + v2119) & v2114;
              v2118 = *(_DWORD *)(v569 + 8 * v2117);
              ++v2119;
              if (v2118 == v2113)
              {
LABEL_1501:
                LODWORD(v569) = *(_DWORD *)(v569 + 8 * v2117 + 4);
                goto LABEL_364;
              }
            }
            LODWORD(v569) = 0;
LABEL_364:
            *(_DWORD *)&v2554.markerName[42] = v569;
            *(_QWORD *)&v2554.markerName[218] = this;
            *(_QWORD *)&v2554.markerName[226] = &v2554.markerName[49];
            *(_QWORD *)&v2554.markerName[234] = &v2554.markerName[42];
            *(_QWORD *)&v2554.markerName[130] = this;
            *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[50];
            v570 = v564;
            *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[42];
            if ((v564 | 2) == 0x82)
              v570 = *(unsigned __int8 *)(v23 + 1);
            v571 = v564 == 128;
            if (v564 == 130)
              v571 = 2;
            v572 = v564 == 128 || v564 == 130;
            v573 = (unint64_t)JSC::opcodeLengths[v570] << v571;
            v15 = !v572;
            v574 = 1;
            if (!v15)
              v574 = 2;
            *(_QWORD *)&v2554.markerName[106] = v573 + v574;
            *(_QWORD *)&v2554.markerName[98] = operationCompareGreater;
            if (v566 >= 0x40000000)
            {
              v1643 = *((_QWORD *)this + 101);
              v1644 = (v566 - 0x40000000);
              v1645 = *(_DWORD **)(v1643 + 120);
              if (!v1645 || *v1645 <= v1644 || *((_BYTE *)v1645 + v1644 + 4) != 3)
              {
                v1646 = *(_DWORD **)(v1643 + 112);
                if (*v1646 <= v1644)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19872397CLL);
                }
                v1647 = *(_QWORD *)&v1646[2 * v1644 + 2];
                if ((v1647 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1647 + 5) == 2)
                {
                  if (v1645 && *v1645 > v1644 && *((_BYTE *)v1645 + v1644 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723EA0);
                  }
                  v1648 = *(_QWORD *)(v1647 + 8);
                  v1649 = v1647 + 16;
                  v1650 = (_DWORD *)((v1648 & 1) != 0 ? v1649 : v1648 + 4);
                  if (*v1650 == 1)
                  {
                    v2543 = v568;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
LABEL_2167:
                    v2482 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v2483 = *(_DWORD **)(v2482 + 120);
                    if (!v2483 || *v2483 <= v1644)
                      goto LABEL_2196;
                    v2484 = *((unsigned __int8 *)v2483 + v1644 + 4);
                    if ((v2484 - 1) < 2)
                      goto LABEL_2170;
                    if (v2484)
                    {
                      if (v2484 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724C68);
                      }
                    }
                    else
                    {
LABEL_2196:
                      v2502 = *(_DWORD **)(v2482 + 112);
                      if (*v2502 <= v1644)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724760);
                      }
                      v2503 = *(_QWORD *)&v2502[2 * v1644 + 2];
                      if (!v2503
                        || (v2503 & 0xFFFE000000000002) != 0
                        || ((v2504 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2503 & 0xFFFFFFFE) + 0x4C)),
                             v2504 != &JSC::SymbolTable::s_info)
                          ? (v2505 = v2504 == &JSC::JSTemplateObjectDescriptor::s_info)
                          : (v2505 = 1),
                            !v2505))
                      {
LABEL_2170:
                        v2485 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                        if (*v2485 <= v1644)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198724680);
                        }
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v2485[2 * v1644 + 2], 1, v1653, v1654, v1655, v1656, v1657);
                        goto LABEL_2172;
                      }
                    }
                    v2506 = *v2551;
                    if ((*v2551 + 4) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1651, v1652, v1653, v1654, v1655, v1656, v1657);
                      v2506 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2506) = -129956959;
                    v2507 = *v2551;
                    v2508 = *v2551 + 4;
                    *v2551 = v2508;
                    if ((v2507 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1651, v1652, v1653, v1654, v1655, v1656, v1657);
                      v2508 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2508) = -129368031;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v566 << 35) | 1, 1, v1653, v1654, v1655, v1656, v1657);
LABEL_2172:
                    if (v568 < 0x40000000)
                    {
                      JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2543 << 35) | 0x1D, 2, v1855, v1856, v1857, v1858, v1859);
                      goto LABEL_2174;
                    }
                    v1846 = (v568 - 0x40000000);
                    v12 = v2550;
LABEL_1208:
                    v1860 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1861 = *(_DWORD **)(v1860 + 120);
                    jj = v2552;
                    if (!v1861 || *v1861 <= v1846)
                      goto LABEL_1900;
                    v1862 = *((unsigned __int8 *)v1861 + v1846 + 4);
                    if ((v1862 - 1) < 2)
                      goto LABEL_1211;
                    if (v1862)
                    {
                      if (v1862 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987248F8);
                      }
                    }
                    else
                    {
LABEL_1900:
                      v2373 = *(_DWORD **)(v1860 + 112);
                      if (*v2373 <= v1846)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724500);
                      }
                      v2374 = *(_QWORD *)&v2373[2 * v1846 + 2];
                      if (!v2374
                        || (v2374 & 0xFFFE000000000002) != 0
                        || ((v2375 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2374 & 0xFFFFFFFE) + 0x4C)),
                             v2375 != &JSC::SymbolTable::s_info)
                          ? (v2376 = v2375 == &JSC::JSTemplateObjectDescriptor::s_info)
                          : (v2376 = 1),
                            !v2376))
                      {
LABEL_1211:
                        v1863 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                        if (*v1863 <= v1846)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198724260);
                        }
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1863[2 * v1846 + 2], 2, v1855, v1856, v1857, v1858, v1859);
                        goto LABEL_2175;
                      }
                    }
                    v2377 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1853, v1854, v1855, v1856, v1857, v1858, v1859);
                      v2377 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2377) = -129956958;
                    v2378 = *v2551;
                    v2379 = *v2551 + 4;
                    *v2551 = v2379;
                    if ((v2378 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1853, v1854, v1855, v1856, v1857, v1858, v1859);
                      v2379 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2379) = -129367998;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2543 << 35) | 2, 2, v1855, v1856, v1857, v1858, v1859);
LABEL_2174:
                    jj = v2552;
                    v12 = v2550;
LABEL_2175:
                    v2486 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1864, v1865, v1866, v1867, v1868, v1869, v1870);
                      v2486 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2486) = -129989824;
                    *((_DWORD *)this + 50) += 4;
                    JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[154], (unsigned __int8 *)this, (uint64_t)operationCompareGreater, 0, 1, v1868, v1869, v1870);
                    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)this, v2554.markerName[49] == 0, 0, v2487, v2488, v2489, v2490, (uint64_t)&v2554.markerName[154], v2491);
                    v2497 = *(_DWORD *)&v2554.markerName[42] + (*((_DWORD *)this + 160) >> 2);
                    if (*((_DWORD *)this + 99) <= v2497)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198724A90);
                    }
                    *(_DWORD *)&v2554.markerName[26] = *(_DWORD *)(*((_QWORD *)this + 48) + 4 * v2497);
                    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[154], (unsigned int *)&v2554.markerName[26], (uint64_t)this, v2492, v2493, v2494, v2495, v2496);
                    goto LABEL_1549;
                  }
                }
              }
            }
            if (v568 >= 0x40000000)
            {
              v1845 = *((_QWORD *)this + 101);
              v1846 = (v568 - 0x40000000);
              v1847 = *(_DWORD **)(v1845 + 120);
              if (!v1847 || *v1847 <= v1846 || *((_BYTE *)v1847 + v1846 + 4) != 3)
              {
                v1848 = *(_DWORD **)(v1845 + 112);
                if (*v1848 <= v1846)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198723A7CLL);
                }
                v1849 = *(_QWORD *)&v1848[2 * v1846 + 2];
                if ((v1849 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1849 + 5) == 2)
                {
                  if (v1847 && *v1847 > v1846 && *((_BYTE *)v1847 + v1846 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723F00);
                  }
                  v1850 = *(_QWORD *)(v1849 + 8);
                  v1851 = v1849 + 16;
                  v1852 = (_DWORD *)((v1850 & 1) != 0 ? v1851 : v1850 + 4);
                  if (*v1852 == 1)
                  {
                    v2543 = v568;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
                    if (v566 >= 0x40000000)
                    {
                      v1644 = (v566 - 0x40000000);
                      goto LABEL_2167;
                    }
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v566 << 35) | 0x1D, 1, v1653, v1654, v1655, v1656, v1657);
                    goto LABEL_1208;
                  }
                }
              }
            }
            *(_QWORD *)&v2554.markerName[90] = this;
            *(_QWORD *)&v2554.markerName[154] = this;
            *(_QWORD *)&v2554.markerName[162] = &v2554.markerName[18];
            *(_QWORD *)&v2554.markerName[170] = &v2554.markerName[90];
            *(_QWORD *)&v2554.markerName[178] = &v2554.markerName[130];
            *(_QWORD *)&v2554.markerName[186] = &v2554.markerName[106];
            *(_QWORD *)&v2554.markerName[194] = &v2554.markerName[98];
            *(_QWORD *)&v2554.markerName[202] = &v2554.markerName[218];
            jj = v2552;
            if ((JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v566, 0, 0, 2, 1, a7, a8) & 1) != 0|| (JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v568, 2, 1, 0, 0, v33, v34) & 1) != 0)
            {
              goto LABEL_1549;
            }
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v29, v30, v31, v32, v33, v34);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 0, 27, v575, v576, v577, v578, (uint64_t)&v2554.markerName[118]);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 2, 27, v579, v580, v581, v582, (uint64_t)&v2554.markerName[78]);
            JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, 2, 27, v583, v584, v585, v586, (uint64_t)&v2554.markerName[66]);
            v594 = *(_QWORD *)&v2554.markerName[90];
            v595 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v596 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v596 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v587, v588, v589, v590, v591, v592, v593);
              v596 = *(_DWORD *)(v594 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v594 + 56) + v596) = -1962933408;
            v597 = *(_DWORD *)(v594 + 200);
            v598 = v597 + 4;
            *(_DWORD *)(v594 + 200) = v597 + 4;
            if ((v597 + 8) > *(_DWORD *)(v594 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v595, v587, v588, v589, v590, v591, v592, v593);
              v598 = *(_DWORD *)(v594 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v594 + 56) + v598) = -1637416960;
            *(_DWORD *)(v594 + 200) += 4;
            v599 = *(_QWORD *)&v2554.markerName[90];
            v600 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v601 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v601 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v587, v588, v589, v590, v591, v592, v593);
              v601 = *(_DWORD *)(v599 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v599 + 56) + v601) = -1962802334;
            v602 = *(_DWORD *)(v599 + 200);
            v603 = v602 + 4;
            *(_DWORD *)(v599 + 200) = v602 + 4;
            if ((v602 + 8) > *(_DWORD *)(v599 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v600, v587, v588, v589, v590, v591, v592, v593);
              v603 = *(_DWORD *)(v599 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v599 + 56) + v603) = -1637416895;
            *(_DWORD *)(v599 + 200) += 4;
            v604 = *(_QWORD *)&v2554.markerName[130];
            v605 = **(_DWORD **)&v2554.markerName[138];
            v606 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 200);
            if (v606 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[130] + 56), v587, v588, v589, v590, v591, v592, v593);
              v606 = *(_DWORD *)(v604 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v604 + 56) + v606) = 509681664;
            *(_DWORD *)(v604 + 200) += 4;
            JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(v604, v605, v588, v589, v590, v591, v592, v593, (uint64_t)&v2554.markerName[26]);
            v612 = **(_DWORD **)&v2554.markerName[146] + (*(_DWORD *)(v604 + 640) >> 2);
            if (*(_DWORD *)(v604 + 396) <= v612)
            {
              __break(0xC471u);
              JUMPOUT(0x198724BE8);
            }
            *(_DWORD *)&v2554.markerName[114] = *(_DWORD *)(*(_QWORD *)(v604 + 384) + 4 * v612);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[26], (unsigned int *)&v2554.markerName[114], v604, v607, v608, v609, v610, v611);
            v620 = *((_DWORD *)this + 50);
            for (jj = v2552; v620 < *((_DWORD *)this + 13); v12 = v2550)
            {
              if ((v620 + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v613, v614, v615, v616, v617, v618, v619);
                v620 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v620) = -721215457;
              v620 = *((_DWORD *)this + 50) + 4;
              *((_DWORD *)this + 50) = v620;
              jj = v2552;
            }
            v621 = v620;
            if ((v620 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v613, v614, v615, v616, v617, v618, v619);
              v621 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v621) = 335544320;
            *((_DWORD *)this + 50) += 4;
            if (*((_BYTE *)this + 328))
              v622 = 69;
            else
              v622 = 65;
            *(_DWORD *)&v2554.markerName[54] = v620;
            *(_DWORD *)&v2554.markerName[58] = 0;
            v2554.markerName[62] = v622;
            *(_WORD *)&v2554.markerName[63] = 15;
            v2554.markerName[65] = -1;
            v623 = *(_DWORD *)&v2554.markerName[106] + (*((_DWORD *)this + 160) >> 2);
            if (*((_DWORD *)this + 99) <= v623)
            {
              __break(0xC471u);
              JUMPOUT(0x198724AA0);
            }
            *(_DWORD *)&v2554.markerName[26] = *(_DWORD *)(*((_QWORD *)this + 48) + 4 * v623);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[54], (unsigned int *)&v2554.markerName[26], (uint64_t)this, v615, v616, v617, v618, v619);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[118], (uint64_t)this, v624, v625, v626, v627, v628, v629);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[78], (uint64_t)this, v630, v631, v632, v633, v634, v635);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[66], (uint64_t)this, v636, v637, v638, v639, v640, v641);
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v642, v643, v644, v645, v646, v647);
            v655 = *((_DWORD *)this + 50);
            if (v655 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v648, v649, v650, v651, v652, v653, v654);
              v655 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v655) = -129989820;
            *((_DWORD *)this + 50) += 4;
            JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[26], (unsigned __int8 *)this, *(uint64_t *)&v2554.markerName[98], 4, 0, v652, v653, v654);
            v198 = *(_QWORD *)&v2554.markerName[218];
            JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(uint64_t *)&v2554.markerName[218], **(_BYTE **)&v2554.markerName[226] == 0, 0, v656, v657, v658, v659, (uint64_t)&v2554.markerName[26], v660);
            v209 = **(_DWORD **)&v2554.markerName[234] + (*(_DWORD *)(v198 + 640) >> 2);
            if (*(_DWORD *)(v198 + 396) <= v209)
            {
              __break(0xC471u);
              JUMPOUT(0x198724AF0);
            }
            goto LABEL_907;
          case 86:
            *(_DWORD *)&v2554.markerName[50] = 11;
            v2554.markerName[49] = 1;
            v912 = *(unsigned __int8 *)v23;
            if (v912 == 128)
            {
              v2446 = *(__int16 *)(v23 + 2);
              if (v2446 <= 63)
                v914 = *(__int16 *)(v23 + 2);
              else
                v914 = v2446 + 1073741760;
              v2447 = *(__int16 *)(v23 + 4);
              if (v2447 <= 63)
                v916 = *(__int16 *)(v23 + 4);
              else
                v916 = v2447 + 1073741760;
              LODWORD(v917) = *(__int16 *)(v23 + 6);
            }
            else if (v912 == 130)
            {
              v914 = *(_DWORD *)(v23 + 2);
              v916 = *(_DWORD *)(v23 + 6);
              LODWORD(v917) = *(_DWORD *)(v23 + 10);
            }
            else
            {
              v913 = *(char *)(v23 + 1);
              if (v913 <= 15)
                v914 = *(char *)(v23 + 1);
              else
                v914 = v913 + 1073741808;
              v915 = *(char *)(v23 + 2);
              if (v915 <= 15)
                v916 = *(char *)(v23 + 2);
              else
                v916 = v915 + 1073741808;
              LODWORD(v917) = *(char *)(v23 + 3);
            }
            if ((_DWORD)v917)
              goto LABEL_575;
            v2130 = *((_QWORD *)this + 101);
            v2131 = *(unint64_t **)(v2130 + 80);
            v2132 = *v2131;
            if (*v2131 > v23 || v23 >= *((unsigned int *)v2131 + 3) + v2132)
            {
              __break(0xC471u);
              JUMPOUT(0x198723C3CLL);
            }
            v917 = *(_QWORD *)(v2130 + 144);
            if (!v917)
              goto LABEL_575;
            v2133 = v23 - v2132;
            v2134 = *(_DWORD *)(v917 - 8);
            v2135 = 9 * ((~(v2133 << 15) + v2133) ^ ((~(v2133 << 15) + v2133) >> 10));
            v2136 = (v2135 ^ (v2135 >> 6)) + ~((v2135 ^ (v2135 >> 6)) << 11);
            v2137 = v2134 & (v2136 ^ HIWORD(v2136));
            v2138 = *(_DWORD *)(v917 + 8 * v2137);
            if (v2138 == v2133)
              goto LABEL_1517;
            v2139 = 1;
            while (v2138)
            {
              v2137 = ((_DWORD)v2137 + v2139) & v2134;
              v2138 = *(_DWORD *)(v917 + 8 * v2137);
              ++v2139;
              if (v2138 == v2133)
              {
LABEL_1517:
                LODWORD(v917) = *(_DWORD *)(v917 + 8 * v2137 + 4);
                goto LABEL_575;
              }
            }
            LODWORD(v917) = 0;
LABEL_575:
            *(_DWORD *)&v2554.markerName[42] = v917;
            *(_QWORD *)&v2554.markerName[218] = this;
            *(_QWORD *)&v2554.markerName[226] = &v2554.markerName[49];
            *(_QWORD *)&v2554.markerName[234] = &v2554.markerName[42];
            *(_QWORD *)&v2554.markerName[130] = this;
            *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[50];
            v918 = v912;
            *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[42];
            if ((v912 | 2) == 0x82)
              v918 = *(unsigned __int8 *)(v23 + 1);
            v919 = v912 == 128;
            if (v912 == 130)
              v919 = 2;
            v920 = v912 == 128 || v912 == 130;
            v921 = (unint64_t)JSC::opcodeLengths[v918] << v919;
            v15 = !v920;
            v922 = 1;
            if (!v15)
              v922 = 2;
            *(_QWORD *)&v2554.markerName[106] = v921 + v922;
            *(_QWORD *)&v2554.markerName[98] = operationCompareGreaterEq;
            if (v914 >= 0x40000000)
            {
              v1691 = *((_QWORD *)this + 101);
              v1692 = (v914 - 0x40000000);
              v1693 = *(_DWORD **)(v1691 + 120);
              if (!v1693 || *v1693 <= v1692 || *((_BYTE *)v1693 + v1692 + 4) != 3)
              {
                v1694 = *(_DWORD **)(v1691 + 112);
                if (*v1694 <= v1692)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1987239DCLL);
                }
                v1695 = *(_QWORD *)&v1694[2 * v1692 + 2];
                if ((v1695 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1695 + 5) == 2)
                {
                  if (v1693 && *v1693 > v1692 && *((_BYTE *)v1693 + v1692 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198724000);
                  }
                  v1696 = *(_QWORD *)(v1695 + 8);
                  v1697 = v1695 + 16;
                  v1698 = (_DWORD *)((v1696 & 1) != 0 ? v1697 : v1696 + 4);
                  if (*v1698 == 1)
                  {
                    v2545 = v916;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
LABEL_1084:
                    v1706 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1707 = *(_DWORD **)(v1706 + 120);
                    if (!v1707 || *v1707 <= v1692)
                      goto LABEL_2130;
                    v1708 = *((unsigned __int8 *)v1707 + v1692 + 4);
                    if ((v1708 - 1) < 2)
                      goto LABEL_1087;
                    if (v1708)
                    {
                      if (v1708 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724B38);
                      }
                    }
                    else
                    {
LABEL_2130:
                      v2468 = *(_DWORD **)(v1706 + 112);
                      if (*v2468 <= v1692)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724720);
                      }
                      v2469 = *(_QWORD *)&v2468[2 * v1692 + 2];
                      v12 = v2550;
                      if (!v2469
                        || (v2469 & 0xFFFE000000000002) != 0
                        || ((v2470 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2469 & 0xFFFFFFFE) + 0x4C)),
                             v2470 != &JSC::SymbolTable::s_info)
                          ? (v2471 = v2470 == &JSC::JSTemplateObjectDescriptor::s_info)
                          : (v2471 = 1),
                            !v2471))
                      {
LABEL_1087:
                        v1709 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                        if (*v1709 <= v1692)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198724600);
                        }
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1709[2 * v1692 + 2], 1, v1701, v1702, v1703, v1704, v1705);
                        goto LABEL_1089;
                      }
                    }
                    v2472 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1699, v1700, v1701, v1702, v1703, v1704, v1705);
                      v2472 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2472) = -129956959;
                    v2473 = *v2551;
                    v2474 = *v2551 + 4;
                    *v2551 = v2474;
                    if ((v2473 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1699, v1700, v1701, v1702, v1703, v1704, v1705);
                      v2474 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2474) = -129368031;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v914 << 35) | 1, 1, v1701, v1702, v1703, v1704, v1705);
                    v12 = v2550;
LABEL_1089:
                    jj = v2552;
                    if (v916 < 0x40000000)
                    {
                      JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2545 << 35) | 0x1D, 2, v1712, v1713, v1714, v1715, v1716);
                      goto LABEL_1233;
                    }
                    v1872 = (v916 - 0x40000000);
LABEL_1228:
                    v1879 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1880 = *(_DWORD **)(v1879 + 120);
                    jj = v2552;
                    if (!v1880 || *v1880 <= v1872)
                      goto LABEL_1872;
                    v1881 = *((unsigned __int8 *)v1880 + v1872 + 4);
                    if ((v1881 - 1) < 2)
                      goto LABEL_1231;
                    if (v1881)
                    {
                      if (v1881 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987248B8);
                      }
                    }
                    else
                    {
LABEL_1872:
                      v2359 = *(_DWORD **)(v1879 + 112);
                      if (*v2359 <= v1872)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987244E0);
                      }
                      v2360 = *(_QWORD *)&v2359[2 * v1872 + 2];
                      if (!v2360
                        || (v2360 & 0xFFFE000000000002) != 0
                        || ((v2361 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2360 & 0xFFFFFFFE) + 0x4C)),
                             v2361 != &JSC::SymbolTable::s_info)
                          ? (v2362 = v2361 == &JSC::JSTemplateObjectDescriptor::s_info)
                          : (v2362 = 1),
                            !v2362))
                      {
LABEL_1231:
                        v1882 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                        if (*v1882 <= v1872)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x198724220);
                        }
                        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1882[2 * v1872 + 2], 2, v1712, v1713, v1714, v1715, v1716);
                        goto LABEL_1233;
                      }
                    }
                    v2363 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1710, v1711, v1712, v1713, v1714, v1715, v1716);
                      v2363 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2363) = -129956958;
                    v2364 = *v2551;
                    v2365 = *v2551 + 4;
                    *v2551 = v2365;
                    if ((v2364 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1710, v1711, v1712, v1713, v1714, v1715, v1716);
                      v2365 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2365) = -129367998;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v2545 << 35) | 2, 2, v1712, v1713, v1714, v1715, v1716);
                    jj = v2552;
                    v12 = v2550;
LABEL_1233:
                    v1883 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1717, v1718, v1719, v1720, v1688, v1689, v1690);
                      v1883 = *v2551;
                    }
LABEL_1235:
                    *(_DWORD *)(*((_QWORD *)this + 7) + v1883) = -129989824;
                    *((_DWORD *)this + 50) += 4;
                    JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[154], (unsigned __int8 *)this, (uint64_t)operationCompareGreaterEq, 0, 1, v1688, v1689, v1690);
                    JSC::JIT::emit_compareAndJumpSlow<JSC::OpJless,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1}::operator()((uint64_t)&v2554.markerName[218], v1891, v1884, v1885, v1886, v1887, v1888, v1889, v1890);
                    goto LABEL_1549;
                  }
                }
              }
            }
            if (v916 >= 0x40000000)
            {
              v1871 = *((_QWORD *)this + 101);
              v1872 = (v916 - 0x40000000);
              v1873 = *(_DWORD **)(v1871 + 120);
              if (!v1873 || *v1873 <= v1872 || *((_BYTE *)v1873 + v1872 + 4) != 3)
              {
                v1874 = *(_DWORD **)(v1871 + 112);
                if (*v1874 <= v1872)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198723A9CLL);
                }
                v1875 = *(_QWORD *)&v1874[2 * v1872 + 2];
                if ((v1875 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1875 + 5) == 2)
                {
                  if (v1873 && *v1873 > v1872 && *((_BYTE *)v1873 + v1872 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723F80);
                  }
                  v1876 = *(_QWORD *)(v1875 + 8);
                  v1877 = v1875 + 16;
                  v1878 = (_DWORD *)((v1876 & 1) != 0 ? v1877 : v1876 + 4);
                  if (*v1878 == 1)
                  {
                    v2545 = v916;
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
                    if (v914 >= 0x40000000)
                    {
                      v1692 = (v914 - 0x40000000);
                      goto LABEL_1084;
                    }
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v914 << 35) | 0x1D, 1, v1701, v1702, v1703, v1704, v1705);
                    goto LABEL_1228;
                  }
                }
              }
            }
            *(_QWORD *)&v2554.markerName[90] = this;
            *(_QWORD *)&v2554.markerName[154] = this;
            *(_QWORD *)&v2554.markerName[162] = &v2554.markerName[18];
            *(_QWORD *)&v2554.markerName[170] = &v2554.markerName[90];
            *(_QWORD *)&v2554.markerName[178] = &v2554.markerName[130];
            *(_QWORD *)&v2554.markerName[186] = &v2554.markerName[106];
            *(_QWORD *)&v2554.markerName[194] = &v2554.markerName[98];
            *(_QWORD *)&v2554.markerName[202] = &v2554.markerName[218];
            jj = v2552;
            if ((JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v914, 0, 0, 2, 1, a7, a8) & 1) != 0|| (JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareAndJumpSlow<JSC::OpJlesseq,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),BOOL,JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v916, 2, 1, 0, 0, v33, v34) & 1) != 0)
            {
              goto LABEL_1549;
            }
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v29, v30, v31, v32, v33, v34);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 0, 27, v923, v924, v925, v926, (uint64_t)&v2554.markerName[118]);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 2, 27, v927, v928, v929, v930, (uint64_t)&v2554.markerName[78]);
            JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, 2, 27, v931, v932, v933, v934, (uint64_t)&v2554.markerName[66]);
            v942 = *(_QWORD *)&v2554.markerName[90];
            v943 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v944 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v944 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v935, v936, v937, v938, v939, v940, v941);
              v944 = *(_DWORD *)(v942 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v942 + 56) + v944) = -1962933408;
            v945 = *(_DWORD *)(v942 + 200);
            v946 = v945 + 4;
            *(_DWORD *)(v942 + 200) = v945 + 4;
            if ((v945 + 8) > *(_DWORD *)(v942 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v943, v935, v936, v937, v938, v939, v940, v941);
              v946 = *(_DWORD *)(v942 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v942 + 56) + v946) = -1637416960;
            *(_DWORD *)(v942 + 200) += 4;
            v947 = *(_QWORD *)&v2554.markerName[90];
            v948 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v949 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v949 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v935, v936, v937, v938, v939, v940, v941);
              v949 = *(_DWORD *)(v947 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v947 + 56) + v949) = -1962802334;
            v950 = *(_DWORD *)(v947 + 200);
            v951 = v950 + 4;
            *(_DWORD *)(v947 + 200) = v950 + 4;
            if ((v950 + 8) > *(_DWORD *)(v947 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v948, v935, v936, v937, v938, v939, v940, v941);
              v951 = *(_DWORD *)(v947 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v947 + 56) + v951) = -1637416895;
            *(_DWORD *)(v947 + 200) += 4;
            v952 = *(_QWORD *)&v2554.markerName[130];
            v953 = **(_DWORD **)&v2554.markerName[138];
            v954 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 200);
            if (v954 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[130] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[130] + 56), v935, v936, v937, v938, v939, v940, v941);
              v954 = *(_DWORD *)(v952 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v952 + 56) + v954) = 509681664;
            *(_DWORD *)(v952 + 200) += 4;
            JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(v952, v953, v936, v937, v938, v939, v940, v941, (uint64_t)&v2554.markerName[26]);
            v960 = **(_DWORD **)&v2554.markerName[146] + (*(_DWORD *)(v952 + 640) >> 2);
            if (*(_DWORD *)(v952 + 396) <= v960)
            {
              __break(0xC471u);
              JUMPOUT(0x198724B88);
            }
            *(_DWORD *)&v2554.markerName[114] = *(_DWORD *)(*(_QWORD *)(v952 + 384) + 4 * v960);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[26], (unsigned int *)&v2554.markerName[114], v952, v955, v956, v957, v958, v959);
            v968 = *((_DWORD *)this + 50);
            for (jj = v2552; v968 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = v968)
            {
              if ((v968 + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v961, v962, v963, v964, v965, v966, v967);
                v968 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v968) = -721215457;
              v968 = *((_DWORD *)this + 50) + 4;
            }
            v969 = v968;
            if ((v968 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v961, v962, v963, v964, v965, v966, v967);
              v969 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v969) = 335544320;
            *((_DWORD *)this + 50) += 4;
            if (*((_BYTE *)this + 328))
              v970 = 69;
            else
              v970 = 65;
            *(_DWORD *)&v2554.markerName[54] = v968;
            *(_DWORD *)&v2554.markerName[58] = 0;
            v2554.markerName[62] = v970;
            *(_WORD *)&v2554.markerName[63] = 15;
            v2554.markerName[65] = -1;
            v971 = *(_DWORD *)&v2554.markerName[106] + (*((_DWORD *)this + 160) >> 2);
            if (*((_DWORD *)this + 99) <= v971)
            {
              __break(0xC471u);
              JUMPOUT(0x198724BD0);
            }
            *(_DWORD *)&v2554.markerName[26] = *(_DWORD *)(*((_QWORD *)this + 48) + 4 * v971);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[54], (unsigned int *)&v2554.markerName[26], (uint64_t)this, v963, v964, v965, v966, v967);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[118], (uint64_t)this, v972, v973, v974, v975, v976, v977);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[78], (uint64_t)this, v978, v979, v980, v981, v982, v983);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[66], (uint64_t)this, v984, v985, v986, v987, v988, v989);
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v990, v991, v992, v993, v994, v995);
            v1003 = *((_DWORD *)this + 50);
            if (v1003 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v996, v997, v998, v999, v1000, v1001, v1002);
              v1003 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v1003) = -129989820;
            *((_DWORD *)this + 50) += 4;
            JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[26], (unsigned __int8 *)this, *(uint64_t *)&v2554.markerName[98], 4, 0, v1000, v1001, v1002);
            v198 = *(_QWORD *)&v2554.markerName[218];
            JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, *(uint64_t *)&v2554.markerName[218], **(_BYTE **)&v2554.markerName[226] == 0, 0, v1004, v1005, v1006, v1007, (uint64_t)&v2554.markerName[26], v1008);
            v209 = **(_DWORD **)&v2554.markerName[234] + (*(_DWORD *)(v198 + 640) >> 2);
            if (*(_DWORD *)(v198 + 396) <= v209)
            {
              __break(0xC471u);
              JUMPOUT(0x198724A20);
            }
            goto LABEL_907;
          case 89:
            JSC::JIT::emitSlow_op_loop_hint((unsigned int *)this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 104:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_to_primitive;
            goto LABEL_746;
          case 105:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_to_property_key;
            goto LABEL_746;
          case 106:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_to_property_key_or_number;
            goto LABEL_746;
          case 121:
            JSC::JIT::emitSlow_op_check_traps((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 131:
            JSC::JIT::emitSlow_op_enter((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 139:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_check_tdz;
            goto LABEL_746;
          case 144:
            JSC::JIT::emitSlow_op_eq(this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 145:
            JSC::JIT::emitSlow_op_neq(this, (unsigned __int8 *)v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 146:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_stricteq;
            goto LABEL_746;
          case 147:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_nstricteq;
            goto LABEL_746;
          case 148:
            *(_DWORD *)&v2554.markerName[114] = 3;
            v466 = *(unsigned __int8 *)v23;
            if (v466 == 128)
            {
              v2255 = *(__int16 *)(v23 + 2);
              v2256 = v2255 + 1073741760;
              if (v2255 <= 63)
                v2256 = *(__int16 *)(v23 + 2);
              v471 = *(__int16 *)(v23 + 4);
              if (v471 > 63)
                v471 += 1073741760;
              v2257 = *(__int16 *)(v23 + 6);
              v470 = v2257 + 1073741760;
              if (v2257 <= 63)
                v470 = *(__int16 *)(v23 + 6);
              goto LABEL_1707;
            }
            if (v466 == 130)
            {
              v2256 = *(_DWORD *)(v23 + 2);
              v471 = *(_DWORD *)(v23 + 6);
              v470 = *(_DWORD *)(v23 + 10);
LABEL_1707:
              *(_DWORD *)&v2554.markerName[50] = v2256;
              *(_QWORD *)&v2554.markerName[26] = this;
              *(_QWORD *)&v2554.markerName[34] = &v2554.markerName[50];
              *(_QWORD *)&v2554.markerName[130] = this;
              *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[114];
              *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[50];
              v472 = *(unsigned __int8 *)(v23 + 1);
              goto LABEL_309;
            }
            v467 = *(char *)(v23 + 1);
            if (v467 > 15)
              v467 += 1073741808;
            v468 = *(char *)(v23 + 2);
            v469 = *(char *)(v23 + 3);
            v470 = v469 + 1073741808;
            *(_DWORD *)&v2554.markerName[50] = v467;
            if (v469 <= 15)
              v470 = v469;
            *(_QWORD *)&v2554.markerName[26] = this;
            *(_QWORD *)&v2554.markerName[34] = &v2554.markerName[50];
            *(_QWORD *)&v2554.markerName[130] = this;
            *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[114];
            *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[50];
            if (v468 <= 15)
              v471 = v468;
            else
              v471 = v468 + 1073741808;
            v472 = v466;
LABEL_309:
            v473 = v466 == 128;
            if (v466 == 130)
              v473 = 2;
            v474 = v471;
            v475 = v470;
            v476 = v466 == 128 || v466 == 130;
            v15 = !v476;
            v477 = 1;
            if (!v15)
              v477 = 2;
            *(_QWORD *)&v2554.markerName[106] = ((unint64_t)JSC::opcodeLengths[v472] << v473)
                                              + v477;
            *(_QWORD *)&v2554.markerName[98] = operationCompareLess;
            if (v471 >= 0x40000000)
            {
              v1544 = *((_QWORD *)this + 101);
              v1545 = (v471 - 0x40000000);
              v1546 = *(_DWORD **)(v1544 + 120);
              if (!v1546 || *v1546 <= v1545 || *((_BYTE *)v1546 + v1545 + 4) != 3)
              {
                v1547 = *(_DWORD **)(v1544 + 112);
                if (*v1547 <= v1545)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1987238BCLL);
                }
                v1548 = *(_QWORD *)&v1547[2 * v1545 + 2];
                if ((v1548 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1548 + 5) == 2)
                {
                  if (v1546 && *v1546 > v1545 && *((_BYTE *)v1546 + v1545 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723E20);
                  }
                  v1549 = *(_QWORD *)(v1548 + 8);
                  v1550 = v1548 + 16;
                  v1551 = (_DWORD *)((v1549 & 1) != 0 ? v1550 : v1549 + 4);
                  if (*v1551 == 1)
                  {
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
LABEL_986:
                    v1559 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1560 = *(_DWORD **)(v1559 + 120);
                    if (!v1560 || *v1560 <= v1545)
                      goto LABEL_2014;
                    v1561 = *((unsigned __int8 *)v1560 + v1545 + 4);
                    if ((v1561 - 1) < 2)
                      goto LABEL_989;
                    if (v1561)
                    {
                      if (v1561 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724BC8);
                      }
LABEL_2019:
                      v2430 = *v2551;
                      if ((*v2551 + 4) > *v12)
                      {
                        JSC::AssemblerBuffer::outOfLineGrow(v2549, v1552, v1553, v1554, v1555, v1556, v1557, v1558);
                        v2430 = *v2551;
                      }
                      *(_DWORD *)(*(_QWORD *)v2549 + v2430) = -129956959;
                      v2431 = *v2551;
                      v2432 = *v2551 + 4;
                      *v2551 = v2432;
                      if ((v2431 + 8) > *v2550)
                      {
                        JSC::AssemblerBuffer::outOfLineGrow(v2549, v1552, v1553, v1554, v1555, v1556, v1557, v1558);
                        v2432 = *v2551;
                      }
                      *(_DWORD *)(*((_QWORD *)this + 7) + v2432) = -129368031;
                      *((_DWORD *)this + 50) += 4;
                      JSC::MacroAssemblerARM64::load64((uint64_t)this, (v474 << 35) | 1, 1, v1554, v1555, v1556, v1557, v1558);
                      jj = v2552;
                      v12 = v2550;
                    }
                    else
                    {
LABEL_2014:
                      v2427 = *(_DWORD **)(v1559 + 112);
                      if (*v2427 <= v1545)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724640);
                      }
                      v2428 = *(_QWORD *)&v2427[2 * v1545 + 2];
                      if (v2428)
                      {
                        if ((v2428 & 0xFFFE000000000002) == 0)
                        {
                          v2429 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2428 & 0xFFFFFFFE) + 0x4C));
                          if (v2429 == &JSC::SymbolTable::s_info || v2429 == &JSC::JSTemplateObjectDescriptor::s_info)
                            goto LABEL_2019;
                        }
                      }
LABEL_989:
                      v1562 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                      if (*v1562 <= v1545)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987243A0);
                      }
                      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1562[2 * v1545 + 2], 1, v1554, v1555, v1556, v1557, v1558);
                      jj = v2552;
                    }
                    if ((int)v475 < 0x40000000)
                    {
                      JSC::MacroAssemblerARM64::load64((uint64_t)this, (v475 << 35) | 0x1D, 2, v1565, v1566, v1567, v1568, v1569);
LABEL_1302:
                      v1946 = *v2551;
                      if ((*v2551 + 4) > *v12)
                      {
                        JSC::AssemblerBuffer::outOfLineGrow(v2549, v1570, v1571, v1572, v1573, v1574, v1575, v1576);
                        v1946 = *v2551;
                      }
                      *(_DWORD *)(*((_QWORD *)this + 7) + v1946) = -129989824;
                      *((_DWORD *)this + 50) += 4;
                      JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[154], (unsigned __int8 *)this, (uint64_t)operationCompareLess, 0, 1, v1574, v1575, v1576);
                      JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1}::operator()((unsigned int **)&v2554.markerName[26], v1947, v1948, v1949, v1950, v1951, v1952, v1953);
                      goto LABEL_1549;
                    }
                    v1935 = (v475 - 0x40000000);
LABEL_1297:
                    v1942 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                    v1943 = *(_DWORD **)(v1942 + 120);
                    jj = v2552;
                    if (!v1943 || *v1943 <= v1935)
                      goto LABEL_1861;
                    v1944 = *((unsigned __int8 *)v1943 + v1935 + 4);
                    if ((v1944 - 1) < 2)
                    {
LABEL_1300:
                      v1945 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                      if (*v1945 <= v1935)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198724200);
                      }
                      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1945[2 * v1935 + 2], 2, v1565, v1566, v1567, v1568, v1569);
                      goto LABEL_1302;
                    }
                    if (v1944)
                    {
                      if (v1944 != 3)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987248D8);
                      }
                    }
                    else
                    {
LABEL_1861:
                      v2353 = *(_DWORD **)(v1942 + 112);
                      if (*v2353 <= v1935)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1987244C0);
                      }
                      v2354 = *(_QWORD *)&v2353[2 * v1935 + 2];
                      if (!v2354)
                        goto LABEL_1300;
                      if ((v2354 & 0xFFFE000000000002) != 0)
                        goto LABEL_1300;
                      v2355 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2354 & 0xFFFFFFFE) + 0x4C));
                      if (v2355 != &JSC::SymbolTable::s_info && v2355 != &JSC::JSTemplateObjectDescriptor::s_info)
                        goto LABEL_1300;
                    }
                    v2356 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1563, v1564, v1565, v1566, v1567, v1568, v1569);
                      v2356 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2356) = -129956958;
                    v2357 = *v2551;
                    v2358 = *v2551 + 4;
                    *v2551 = v2358;
                    if ((v2357 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1563, v1564, v1565, v1566, v1567, v1568, v1569);
                      v2358 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2358) = -129367998;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v475 << 35) | 2, 2, v1565, v1566, v1567, v1568, v1569);
                    jj = v2552;
                    v12 = v2550;
                    goto LABEL_1302;
                  }
                }
              }
            }
            if ((int)v475 >= 0x40000000)
            {
              v1934 = *((_QWORD *)this + 101);
              v1935 = (v475 - 0x40000000);
              v1936 = *(_DWORD **)(v1934 + 120);
              if (!v1936 || *v1936 <= v1935 || *((_BYTE *)v1936 + v1935 + 4) != 3)
              {
                v1937 = *(_DWORD **)(v1934 + 112);
                if (*v1937 <= v1935)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198723AFCLL);
                }
                v1938 = *(_QWORD *)&v1937[2 * v1935 + 2];
                if ((v1938 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v1938 + 5) == 2)
                {
                  if (v1936 && *v1936 > v1935 && *((_BYTE *)v1936 + v1935 + 4) == 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723EC0);
                  }
                  v1939 = *(_QWORD *)(v1938 + 8);
                  v1940 = v1938 + 16;
                  v1941 = (_DWORD *)((v1939 & 1) != 0 ? v1940 : v1939 + 4);
                  if (*v1941 == 1)
                  {
                    JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
                    if ((int)v474 >= 0x40000000)
                    {
                      v1545 = (v474 - 0x40000000);
                      goto LABEL_986;
                    }
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v474 << 35) | 0x1D, 1, v1554, v1555, v1556, v1557, v1558);
                    goto LABEL_1297;
                  }
                }
              }
            }
            *(_QWORD *)&v2554.markerName[90] = this;
            *(_QWORD *)&v2554.markerName[154] = this;
            *(_QWORD *)&v2554.markerName[162] = &v2554.markerName[18];
            *(_QWORD *)&v2554.markerName[170] = &v2554.markerName[90];
            *(_QWORD *)&v2554.markerName[178] = &v2554.markerName[130];
            *(_QWORD *)&v2554.markerName[186] = &v2554.markerName[106];
            *(_QWORD *)&v2554.markerName[194] = &v2554.markerName[98];
            *(_QWORD *)&v2554.markerName[202] = &v2554.markerName[26];
            v478 = JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v474, 0, 0, 2, 1, a7, a8);
            jj = v2552;
            if ((v478 & 1) != 0
              || (JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v475, 2, 1, 0, 0, v33, v34) & 1) != 0)
            {
              goto LABEL_1549;
            }
            JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v29, v30, v31, v32, v33, v34);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 0, 27, v479, v480, v481, v482, (uint64_t)&v2554.markerName[118]);
            JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 2, 27, v483, v484, v485, v486, (uint64_t)&v2554.markerName[78]);
            JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, 2, 27, v487, v488, v489, v490, (uint64_t)&v2554.markerName[66]);
            v498 = *(_QWORD *)&v2554.markerName[90];
            v499 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v500 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v500 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v491, v492, v493, v494, v495, v496, v497);
              v500 = *(_DWORD *)(v498 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v498 + 56) + v500) = -1962933408;
            v501 = *(_DWORD *)(v498 + 200);
            v502 = v501 + 4;
            *(_DWORD *)(v498 + 200) = v501 + 4;
            if ((v501 + 8) > *(_DWORD *)(v498 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v499, v491, v492, v493, v494, v495, v496, v497);
              v502 = *(_DWORD *)(v498 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v498 + 56) + v502) = -1637416960;
            *(_DWORD *)(v498 + 200) += 4;
            v503 = *(_QWORD *)&v2554.markerName[90];
            v504 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
            v505 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
            if (v505 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v491, v492, v493, v494, v495, v496, v497);
              v505 = *(_DWORD *)(v503 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v503 + 56) + v505) = -1962802334;
            v506 = *(_DWORD *)(v503 + 200);
            v507 = v506 + 4;
            *(_DWORD *)(v503 + 200) = v506 + 4;
            if ((v506 + 8) > *(_DWORD *)(v503 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v504, v491, v492, v493, v494, v495, v496, v497);
              v507 = *(_DWORD *)(v503 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(v503 + 56) + v507) = -1637416895;
            *(_DWORD *)(v503 + 200) += 4;
            v508 = *(_DWORD **)&v2554.markerName[130];
            v509 = **(_DWORD **)&v2554.markerName[138];
            v2554.markerName[42] = 0;
            v2554.markerName[49] = 1;
            *(_QWORD *)&v2554.markerName[218] = *(_QWORD *)&v2554.markerName[130];
            *(_QWORD *)&v2554.markerName[226] = &v2554.markerName[42];
            *(_QWORD *)&v2554.markerName[234] = &v2554.markerName[49];
            JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(*(uint64_t *)&v2554.markerName[130], v509, 0, (char **)&v2554.markerName[218], v494, v495, v496, v497);
            v517 = v508[50];
            if (v517 + 4 > v508[48])
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v508 + 14), v510, v511, v512, v513, v514, v515, v516);
              v517 = v508[50];
            }
            *(_DWORD *)(*((_QWORD *)v508 + 7) + v517) = 285218816;
            v508[50] += 4;
            JSC::MacroAssemblerARM64::store64((uint64_t)v508, 0, ((unint64_t)**(_DWORD **)&v2554.markerName[146] << 35) | 0x1D, v512, v513, v514, v515, v516);
            for (kk = *((_DWORD *)this + 50); kk < *((_DWORD *)this + 13); v12 = v2550)
            {
              if ((kk + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v518, v519, v97, v98, v99, v100, v101);
                kk = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + kk) = -721215457;
              kk = *((_DWORD *)this + 50) + 4;
              *((_DWORD *)this + 50) = kk;
              jj = v2552;
            }
            v521 = kk;
            if ((kk + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v518, v519, v97, v98, v99, v100, v101);
              v521 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v521) = 335544320;
            *((_DWORD *)this + 50) += 4;
            if (*((_BYTE *)this + 328))
              v522 = 69;
            else
              v522 = 65;
            *(_DWORD *)&v2554.markerName[54] = kk;
            *(_DWORD *)&v2554.markerName[58] = 0;
            v2554.markerName[62] = v522;
            *(_WORD *)&v2554.markerName[63] = 15;
            v2554.markerName[65] = -1;
            v105 = *(_DWORD *)&v2554.markerName[106] + (*((_DWORD *)this + 160) >> 2);
            if (*((_DWORD *)this + 99) <= v105)
            {
              __break(0xC471u);
              JUMPOUT(0x198724A60);
            }
            goto LABEL_337;
          case 149:
            *(_DWORD *)&v2554.markerName[114] = 9;
            v43 = *(unsigned __int8 *)v23;
            if (v43 == 128)
            {
              v2296 = *(__int16 *)(v23 + 2);
              v2297 = v2296 + 1073741760;
              if (v2296 <= 63)
                v2297 = *(__int16 *)(v23 + 2);
              v48 = *(__int16 *)(v23 + 4);
              if (v48 > 63)
                v48 += 1073741760;
              v2298 = *(__int16 *)(v23 + 6);
              v47 = v2298 + 1073741760;
              if (v2298 <= 63)
                v47 = *(__int16 *)(v23 + 6);
              goto LABEL_1747;
            }
            if (v43 == 130)
            {
              v2297 = *(_DWORD *)(v23 + 2);
              v48 = *(_DWORD *)(v23 + 6);
              v47 = *(_DWORD *)(v23 + 10);
LABEL_1747:
              *(_DWORD *)&v2554.markerName[50] = v2297;
              *(_QWORD *)&v2554.markerName[26] = this;
              *(_QWORD *)&v2554.markerName[34] = &v2554.markerName[50];
              *(_QWORD *)&v2554.markerName[130] = this;
              *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[114];
              *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[50];
              v49 = *(unsigned __int8 *)(v23 + 1);
              goto LABEL_50;
            }
            v44 = *(char *)(v23 + 1);
            if (v44 > 15)
              v44 += 1073741808;
            v45 = *(char *)(v23 + 2);
            v46 = *(char *)(v23 + 3);
            v47 = v46 + 1073741808;
            *(_DWORD *)&v2554.markerName[50] = v44;
            if (v46 <= 15)
              v47 = v46;
            *(_QWORD *)&v2554.markerName[26] = this;
            *(_QWORD *)&v2554.markerName[34] = &v2554.markerName[50];
            *(_QWORD *)&v2554.markerName[130] = this;
            *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[114];
            *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[50];
            if (v45 <= 15)
              v48 = v45;
            else
              v48 = v45 + 1073741808;
            v49 = v43;
LABEL_50:
            v50 = v43 == 128;
            if (v43 == 130)
              v50 = 2;
            v51 = v48;
            v52 = v47;
            v53 = v43 == 128 || v43 == 130;
            v15 = !v53;
            v54 = 1;
            if (!v15)
              v54 = 2;
            *(_QWORD *)&v2554.markerName[106] = ((unint64_t)JSC::opcodeLengths[v49] << v50) + v54;
            *(_QWORD *)&v2554.markerName[98] = operationCompareLessEq;
            if (v48 < 0x40000000)
              goto LABEL_1386;
            v1445 = *((_QWORD *)this + 101);
            v1446 = (v48 - 0x40000000);
            v1447 = *(_DWORD **)(v1445 + 120);
            if (v1447)
            {
              if (*v1447 > v1446 && *((_BYTE *)v1447 + v1446 + 4) == 3)
                goto LABEL_1386;
            }
            v1448 = *(_DWORD **)(v1445 + 112);
            if (*v1448 <= v1446)
            {
              __break(0xC471u);
              JUMPOUT(0x1987238DCLL);
            }
            v1449 = *(_QWORD *)&v1448[2 * v1446 + 2];
            if ((v1449 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v1449 + 5) != 2)
              goto LABEL_1386;
            if (v1447 && *v1447 > v1446 && *((_BYTE *)v1447 + v1446 + 4) == 3)
            {
              __break(0xC471u);
              JUMPOUT(0x198724020);
            }
            v1450 = *(_QWORD *)(v1449 + 8);
            v1451 = v1449 + 16;
            v1452 = (_DWORD *)((v1450 & 1) != 0 ? v1451 : v1450 + 4);
            if (*v1452 != 1)
            {
LABEL_1386:
              if ((int)v52 < 0x40000000)
                goto LABEL_59;
              v1998 = *((_QWORD *)this + 101);
              v1999 = (v52 - 0x40000000);
              v2000 = *(_DWORD **)(v1998 + 120);
              if (v2000)
              {
                if (*v2000 > v1999 && *((_BYTE *)v2000 + v1999 + 4) == 3)
                  goto LABEL_59;
              }
              v2001 = *(_DWORD **)(v1998 + 112);
              if (*v2001 <= v1999)
              {
                __break(0xC471u);
                JUMPOUT(0x198723B9CLL);
              }
              v2002 = *(_QWORD *)&v2001[2 * v1999 + 2];
              if ((v2002 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v2002 + 5) != 2)
                goto LABEL_59;
              if (v2000 && *v2000 > v1999 && *((_BYTE *)v2000 + v1999 + 4) == 3)
              {
                __break(0xC471u);
                JUMPOUT(0x1987240E0);
              }
              v2003 = *(_QWORD *)(v2002 + 8);
              v2004 = v2002 + 16;
              v2005 = (_DWORD *)((v2003 & 1) != 0 ? v2004 : v2003 + 4);
              if (*v2005 != 1)
              {
LABEL_59:
                *(_QWORD *)&v2554.markerName[90] = this;
                *(_QWORD *)&v2554.markerName[154] = this;
                *(_QWORD *)&v2554.markerName[162] = &v2554.markerName[18];
                *(_QWORD *)&v2554.markerName[170] = &v2554.markerName[90];
                *(_QWORD *)&v2554.markerName[178] = &v2554.markerName[130];
                *(_QWORD *)&v2554.markerName[186] = &v2554.markerName[106];
                *(_QWORD *)&v2554.markerName[194] = &v2554.markerName[98];
                *(_QWORD *)&v2554.markerName[202] = &v2554.markerName[26];
                v55 = JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v51, 0, 0, 2, 1, a7, a8);
                jj = v2552;
                if ((v55 & 1) != 0
                  || (JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v52, 2, 1, 0, 0, v33, v34) & 1) != 0)
                {
                  goto LABEL_1549;
                }
                JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v29, v30, v31, v32, v33, v34);
                JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 0, 27, v56, v57, v58, v59, (uint64_t)&v2554.markerName[118]);
                JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 2, 27, v60, v61, v62, v63, (uint64_t)&v2554.markerName[78]);
                JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, 2, 27, v64, v65, v66, v67, (uint64_t)&v2554.markerName[66]);
                v75 = *(_QWORD *)&v2554.markerName[90];
                v76 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
                v77 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
                if (v77 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v68, v69, v70, v71, v72, v73, v74);
                  v77 = *(_DWORD *)(v75 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v75 + 56) + v77) = -1962933408;
                v78 = *(_DWORD *)(v75 + 200);
                v79 = v78 + 4;
                *(_DWORD *)(v75 + 200) = v78 + 4;
                if ((v78 + 8) > *(_DWORD *)(v75 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v76, v68, v69, v70, v71, v72, v73, v74);
                  v79 = *(_DWORD *)(v75 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v75 + 56) + v79) = -1637416960;
                *(_DWORD *)(v75 + 200) += 4;
                v80 = *(_QWORD *)&v2554.markerName[90];
                v81 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
                v82 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
                if (v82 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v68, v69, v70, v71, v72, v73, v74);
                  v82 = *(_DWORD *)(v80 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v80 + 56) + v82) = -1962802334;
                v83 = *(_DWORD *)(v80 + 200);
                v84 = v83 + 4;
                *(_DWORD *)(v80 + 200) = v83 + 4;
                if ((v83 + 8) > *(_DWORD *)(v80 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v81, v68, v69, v70, v71, v72, v73, v74);
                  v84 = *(_DWORD *)(v80 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v80 + 56) + v84) = -1637416895;
                *(_DWORD *)(v80 + 200) += 4;
                v85 = *(_DWORD **)&v2554.markerName[130];
                v86 = **(_DWORD **)&v2554.markerName[138];
                v2554.markerName[42] = 0;
                v2554.markerName[49] = 1;
                *(_QWORD *)&v2554.markerName[218] = *(_QWORD *)&v2554.markerName[130];
                *(_QWORD *)&v2554.markerName[226] = &v2554.markerName[42];
                *(_QWORD *)&v2554.markerName[234] = &v2554.markerName[49];
                JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(*(uint64_t *)&v2554.markerName[130], v86, 0, (char **)&v2554.markerName[218], v71, v72, v73, v74);
                v94 = v85[50];
                if (v94 + 4 > v85[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v85 + 14), v87, v88, v89, v90, v91, v92, v93);
                  v94 = v85[50];
                }
                *(_DWORD *)(*((_QWORD *)v85 + 7) + v94) = 285218816;
                v85[50] += 4;
                JSC::MacroAssemblerARM64::store64((uint64_t)v85, 0, ((unint64_t)**(_DWORD **)&v2554.markerName[146] << 35) | 0x1D, v89, v90, v91, v92, v93);
                for (mm = *((_DWORD *)this + 50); mm < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = mm)
                {
                  if ((mm + 4) > *v12)
                  {
                    JSC::AssemblerBuffer::outOfLineGrow(v2549, v95, v96, v97, v98, v99, v100, v101);
                    mm = *v2551;
                  }
                  *(_DWORD *)(*((_QWORD *)this + 7) + mm) = -721215457;
                  mm = *((_DWORD *)this + 50) + 4;
                }
                v103 = mm;
                if ((mm + 4) > *v12)
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v2549, v95, v96, v97, v98, v99, v100, v101);
                  v103 = *v2551;
                }
                *(_DWORD *)(*((_QWORD *)this + 7) + v103) = 335544320;
                *((_DWORD *)this + 50) += 4;
                if (*((_BYTE *)this + 328))
                  v104 = 69;
                else
                  v104 = 65;
                *(_DWORD *)&v2554.markerName[54] = mm;
                *(_DWORD *)&v2554.markerName[58] = 0;
                v2554.markerName[62] = v104;
                *(_WORD *)&v2554.markerName[63] = 15;
                v2554.markerName[65] = -1;
                v105 = *(_DWORD *)&v2554.markerName[106] + (*((_DWORD *)this + 160) >> 2);
                if (*((_DWORD *)this + 99) <= v105)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198724AE0);
                }
LABEL_337:
                *(_DWORD *)&v2554.markerName[218] = *(_DWORD *)(*((_QWORD *)this + 48) + 4 * v105);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[54], (unsigned int *)&v2554.markerName[218], (uint64_t)this, v97, v98, v99, v100, v101);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[118], (uint64_t)this, v523, v524, v525, v526, v527, v528);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[78], (uint64_t)this, v529, v530, v531, v532, v533, v534);
                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v2554.markerName[66], (uint64_t)this, v535, v536, v537, v538, v539, v540);
                JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v541, v542, v543, v544, v545, v546);
                v554 = *((_DWORD *)this + 50);
                if (v554 + 4 > *((_DWORD *)this + 48))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v2549, v547, v548, v549, v550, v551, v552, v553);
                  v554 = *v2551;
                }
                *(_DWORD *)(*((_QWORD *)this + 7) + v554) = -129989820;
                *((_DWORD *)this + 50) += 4;
                JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[218], (unsigned __int8 *)this, *(uint64_t *)&v2554.markerName[98], 4, 0, v551, v552, v553);
                v562 = *(_QWORD *)&v2554.markerName[26];
                v563 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[26] + 200);
                if (v563 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[26] + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[26] + 56), v555, v556, v557, v558, v559, v560, v561);
                  v563 = *(_DWORD *)(v562 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v562 + 56) + v563) = 285218816;
                *(_DWORD *)(v562 + 200) += 4;
                JSC::MacroAssemblerARM64::store64(v562, 0, ((unint64_t)**(_DWORD **)&v2554.markerName[34] << 35) | 0x1D, v557, v558, v559, v560, v561);
                goto LABEL_1549;
              }
              JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
              if ((int)v51 < 0x40000000)
              {
                JSC::MacroAssemblerARM64::load64((uint64_t)this, (v51 << 35) | 0x1D, 1, v1455, v1456, v1457, v1458, v1459);
LABEL_1389:
                v2006 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                v2007 = *(_DWORD **)(v2006 + 120);
                jj = v2552;
                if (!v2007 || *v2007 <= v1999)
                  goto LABEL_1829;
                v2008 = *((unsigned __int8 *)v2007 + v1999 + 4);
                if ((v2008 - 1) < 2)
                {
LABEL_1392:
                  v2009 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                  if (*v2009 <= v1999)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1987241C0);
                  }
                  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v2009[2 * v1999 + 2], 2, v1466, v1467, v1468, v1469, v1470);
                  goto LABEL_1394;
                }
                if (v2008)
                {
                  if (v2008 != 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198724938);
                  }
                }
                else
                {
LABEL_1829:
                  v2338 = *(_DWORD **)(v2006 + 112);
                  if (*v2338 <= v1999)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198724480);
                  }
                  v2339 = *(_QWORD *)&v2338[2 * v1999 + 2];
                  if (!v2339)
                    goto LABEL_1392;
                  if ((v2339 & 0xFFFE000000000002) != 0)
                    goto LABEL_1392;
                  v2340 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2339 & 0xFFFFFFFE) + 0x4C));
                  if (v2340 != &JSC::SymbolTable::s_info && v2340 != &JSC::JSTemplateObjectDescriptor::s_info)
                    goto LABEL_1392;
                }
                v2341 = *v2551;
                if ((*v2551 + 4) > *v12)
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v2549, v1464, v1465, v1466, v1467, v1468, v1469, v1470);
                  v2341 = *v2551;
                }
                *(_DWORD *)(*(_QWORD *)v2549 + v2341) = -129956958;
                v2342 = *v2551;
                v2343 = *v2551 + 4;
                *v2551 = v2343;
                if ((v2342 + 8) > *v2550)
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v2549, v1464, v1465, v1466, v1467, v1468, v1469, v1470);
                  v2343 = *v2551;
                }
                *(_DWORD *)(*((_QWORD *)this + 7) + v2343) = -129367998;
                *((_DWORD *)this + 50) += 4;
                JSC::MacroAssemblerARM64::load64((uint64_t)this, (v52 << 35) | 2, 2, v1466, v1467, v1468, v1469, v1470);
                jj = v2552;
                v12 = v2550;
                goto LABEL_1394;
              }
              v1446 = (v51 - 0x40000000);
            }
            else
            {
              JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            }
            v1460 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
            v1461 = *(_DWORD **)(v1460 + 120);
            if (!v1461 || *v1461 <= v1446)
              goto LABEL_1782;
            v1462 = *((unsigned __int8 *)v1461 + v1446 + 4);
            if ((v1462 - 1) < 2)
              goto LABEL_926;
            if (v1462)
            {
              if (v1462 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x1987249B8);
              }
            }
            else
            {
LABEL_1782:
              v2313 = *(_DWORD **)(v1460 + 112);
              if (*v2313 <= v1446)
              {
                __break(0xC471u);
                JUMPOUT(0x198724400);
              }
              v2314 = *(_QWORD *)&v2313[2 * v1446 + 2];
              if (!v2314
                || (v2314 & 0xFFFE000000000002) != 0
                || (v2315 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2314 & 0xFFFFFFFE) + 0x4C)),
                    v2315 != &JSC::SymbolTable::s_info)
                && v2315 != &JSC::JSTemplateObjectDescriptor::s_info)
              {
LABEL_926:
                v1463 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                if (*v1463 <= v1446)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198724120);
                }
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1463[2 * v1446 + 2], 1, v1455, v1456, v1457, v1458, v1459);
                jj = v2552;
LABEL_928:
                if ((int)v52 < 0x40000000)
                {
                  JSC::MacroAssemblerARM64::load64((uint64_t)this, (v52 << 35) | 0x1D, 2, v1466, v1467, v1468, v1469, v1470);
LABEL_1394:
                  v2010 = *v2551;
                  if ((*v2551 + 4) > *v12)
                  {
                    JSC::AssemblerBuffer::outOfLineGrow(v2549, v1471, v1472, v1473, v1474, v1475, v1476, v1477);
                    v2010 = *v2551;
                  }
                  *(_DWORD *)(*((_QWORD *)this + 7) + v2010) = -129989824;
                  *((_DWORD *)this + 50) += 4;
                  JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[154], (unsigned __int8 *)this, (uint64_t)operationCompareLessEq, 0, 1, v1475, v1476, v1477);
                  JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1}::operator()((unsigned int **)&v2554.markerName[26], v2011, v2012, v2013, v2014, v2015, v2016, v2017);
                  goto LABEL_1549;
                }
                v1999 = (v52 - 0x40000000);
                goto LABEL_1389;
              }
            }
            v2316 = *v2551;
            if ((*v2551 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1453, v1454, v1455, v1456, v1457, v1458, v1459);
              v2316 = *v2551;
            }
            *(_DWORD *)(*(_QWORD *)v2549 + v2316) = -129956959;
            v2317 = *v2551;
            v2318 = *v2551 + 4;
            *v2551 = v2318;
            if ((v2317 + 8) > *v2550)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1453, v1454, v1455, v1456, v1457, v1458, v1459);
              v2318 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v2318) = -129368031;
            *((_DWORD *)this + 50) += 4;
            JSC::MacroAssemblerARM64::load64((uint64_t)this, (v51 << 35) | 1, 1, v1455, v1456, v1457, v1458, v1459);
            jj = v2552;
            v12 = v2550;
            goto LABEL_928;
          case 150:
            *(_DWORD *)&v2554.markerName[114] = 12;
            v307 = *(unsigned __int8 *)v23;
            if (v307 == 128)
            {
              v2302 = *(__int16 *)(v23 + 2);
              v2303 = v2302 + 1073741760;
              if (v2302 <= 63)
                v2303 = *(__int16 *)(v23 + 2);
              v312 = *(__int16 *)(v23 + 4);
              if (v312 > 63)
                v312 += 1073741760;
              v2304 = *(__int16 *)(v23 + 6);
              v311 = v2304 + 1073741760;
              if (v2304 <= 63)
                v311 = *(__int16 *)(v23 + 6);
              goto LABEL_1762;
            }
            if (v307 == 130)
            {
              v2303 = *(_DWORD *)(v23 + 2);
              v312 = *(_DWORD *)(v23 + 6);
              v311 = *(_DWORD *)(v23 + 10);
LABEL_1762:
              *(_DWORD *)&v2554.markerName[50] = v2303;
              *(_QWORD *)&v2554.markerName[26] = this;
              *(_QWORD *)&v2554.markerName[34] = &v2554.markerName[50];
              *(_QWORD *)&v2554.markerName[130] = this;
              *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[114];
              *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[50];
              v313 = *(unsigned __int8 *)(v23 + 1);
              goto LABEL_182;
            }
            v308 = *(char *)(v23 + 1);
            if (v308 > 15)
              v308 += 1073741808;
            v309 = *(char *)(v23 + 2);
            v310 = *(char *)(v23 + 3);
            v311 = v310 + 1073741808;
            *(_DWORD *)&v2554.markerName[50] = v308;
            if (v310 <= 15)
              v311 = v310;
            *(_QWORD *)&v2554.markerName[26] = this;
            *(_QWORD *)&v2554.markerName[34] = &v2554.markerName[50];
            *(_QWORD *)&v2554.markerName[130] = this;
            *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[114];
            *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[50];
            if (v309 <= 15)
              v312 = v309;
            else
              v312 = v309 + 1073741808;
            v313 = v307;
LABEL_182:
            v314 = v307 == 128;
            if (v307 == 130)
              v314 = 2;
            v315 = v312;
            v316 = v311;
            v317 = v307 == 128 || v307 == 130;
            v15 = !v317;
            v318 = 1;
            if (!v15)
              v318 = 2;
            *(_QWORD *)&v2554.markerName[106] = ((unint64_t)JSC::opcodeLengths[v313] << v314)
                                              + v318;
            *(_QWORD *)&v2554.markerName[98] = operationCompareGreater;
            if (v312 < 0x40000000)
              goto LABEL_1317;
            v1478 = *((_QWORD *)this + 101);
            v1479 = (v312 - 0x40000000);
            v1480 = *(_DWORD **)(v1478 + 120);
            if (v1480)
            {
              if (*v1480 > v1479 && *((_BYTE *)v1480 + v1479 + 4) == 3)
                goto LABEL_1317;
            }
            v1481 = *(_DWORD **)(v1478 + 112);
            if (*v1481 <= v1479)
            {
              __break(0xC471u);
              JUMPOUT(0x19872391CLL);
            }
            v1482 = *(_QWORD *)&v1481[2 * v1479 + 2];
            if ((v1482 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v1482 + 5) != 2)
              goto LABEL_1317;
            if (v1480 && *v1480 > v1479 && *((_BYTE *)v1480 + v1479 + 4) == 3)
            {
              __break(0xC471u);
              JUMPOUT(0x198723EE0);
            }
            v1483 = *(_QWORD *)(v1482 + 8);
            v1484 = v1482 + 16;
            v1485 = (_DWORD *)((v1483 & 1) != 0 ? v1484 : v1483 + 4);
            if (*v1485 != 1)
            {
LABEL_1317:
              if ((int)v316 < 0x40000000)
                goto LABEL_191;
              v1954 = *((_QWORD *)this + 101);
              v1955 = (v316 - 0x40000000);
              v1956 = *(_DWORD **)(v1954 + 120);
              if (v1956)
              {
                if (*v1956 > v1955 && *((_BYTE *)v1956 + v1955 + 4) == 3)
                  goto LABEL_191;
              }
              v1957 = *(_DWORD **)(v1954 + 112);
              if (*v1957 <= v1955)
              {
                __break(0xC471u);
                JUMPOUT(0x198723B1CLL);
              }
              v1958 = *(_QWORD *)&v1957[2 * v1955 + 2];
              if ((v1958 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v1958 + 5) != 2)
                goto LABEL_191;
              if (v1956 && *v1956 > v1955 && *((_BYTE *)v1956 + v1955 + 4) == 3)
              {
                __break(0xC471u);
                JUMPOUT(0x198724060);
              }
              v1959 = *(_QWORD *)(v1958 + 8);
              v1960 = v1958 + 16;
              v1961 = (_DWORD *)((v1959 & 1) != 0 ? v1960 : v1959 + 4);
              if (*v1961 != 1)
              {
LABEL_191:
                *(_QWORD *)&v2554.markerName[90] = this;
                *(_QWORD *)&v2554.markerName[154] = this;
                *(_QWORD *)&v2554.markerName[162] = &v2554.markerName[18];
                *(_QWORD *)&v2554.markerName[170] = &v2554.markerName[90];
                *(_QWORD *)&v2554.markerName[178] = &v2554.markerName[130];
                *(_QWORD *)&v2554.markerName[186] = &v2554.markerName[106];
                *(_QWORD *)&v2554.markerName[194] = &v2554.markerName[98];
                *(_QWORD *)&v2554.markerName[202] = &v2554.markerName[26];
                v319 = JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v315, 0, 0, 2, 1, a7, a8);
                jj = v2552;
                if ((v319 & 1) != 0
                  || (JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v316, 2, 1, 0, 0, v33, v34) & 1) != 0)
                {
                  goto LABEL_1549;
                }
                JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v29, v30, v31, v32, v33, v34);
                JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 0, 27, v320, v321, v322, v323, (uint64_t)&v2554.markerName[118]);
                JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 2, 27, v324, v325, v326, v327, (uint64_t)&v2554.markerName[78]);
                JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, 2, 27, v328, v329, v330, v331, (uint64_t)&v2554.markerName[66]);
                v339 = *(_QWORD *)&v2554.markerName[90];
                v340 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
                v341 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
                if (v341 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v332, v333, v334, v335, v336, v337, v338);
                  v341 = *(_DWORD *)(v339 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v339 + 56) + v341) = -1962933408;
                v342 = *(_DWORD *)(v339 + 200);
                v343 = v342 + 4;
                *(_DWORD *)(v339 + 200) = v342 + 4;
                if ((v342 + 8) > *(_DWORD *)(v339 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v340, v332, v333, v334, v335, v336, v337, v338);
                  v343 = *(_DWORD *)(v339 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v339 + 56) + v343) = -1637416960;
                *(_DWORD *)(v339 + 200) += 4;
                v344 = *(_QWORD *)&v2554.markerName[90];
                v345 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
                v346 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
                if (v346 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v332, v333, v334, v335, v336, v337, v338);
                  v346 = *(_DWORD *)(v344 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v344 + 56) + v346) = -1962802334;
                v347 = *(_DWORD *)(v344 + 200);
                v348 = v347 + 4;
                *(_DWORD *)(v344 + 200) = v347 + 4;
                if ((v347 + 8) > *(_DWORD *)(v344 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v345, v332, v333, v334, v335, v336, v337, v338);
                  v348 = *(_DWORD *)(v344 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v344 + 56) + v348) = -1637416895;
                *(_DWORD *)(v344 + 200) += 4;
                v349 = *(_DWORD **)&v2554.markerName[130];
                v350 = **(_DWORD **)&v2554.markerName[138];
                v2554.markerName[42] = 0;
                v2554.markerName[49] = 1;
                *(_QWORD *)&v2554.markerName[218] = *(_QWORD *)&v2554.markerName[130];
                *(_QWORD *)&v2554.markerName[226] = &v2554.markerName[42];
                *(_QWORD *)&v2554.markerName[234] = &v2554.markerName[49];
                JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(*(uint64_t *)&v2554.markerName[130], v350, 0, (char **)&v2554.markerName[218], v335, v336, v337, v338);
                v358 = v349[50];
                if (v358 + 4 > v349[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v349 + 14), v351, v352, v353, v354, v355, v356, v357);
                  v358 = v349[50];
                }
                *(_DWORD *)(*((_QWORD *)v349 + 7) + v358) = 285218816;
                v349[50] += 4;
                JSC::MacroAssemblerARM64::store64((uint64_t)v349, 0, ((unint64_t)**(_DWORD **)&v2554.markerName[146] << 35) | 0x1D, v353, v354, v355, v356, v357);
                for (nn = *((_DWORD *)this + 50); nn < *((_DWORD *)this + 13); v12 = v2550)
                {
                  if ((nn + 4) > *v12)
                  {
                    JSC::AssemblerBuffer::outOfLineGrow(v2549, v359, v360, v97, v98, v99, v100, v101);
                    nn = *v2551;
                  }
                  *(_DWORD *)(*((_QWORD *)this + 7) + nn) = -721215457;
                  nn = *((_DWORD *)this + 50) + 4;
                  *((_DWORD *)this + 50) = nn;
                  jj = v2552;
                }
                v362 = nn;
                if ((nn + 4) > *v12)
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v2549, v359, v360, v97, v98, v99, v100, v101);
                  v362 = *v2551;
                }
                *(_DWORD *)(*((_QWORD *)this + 7) + v362) = 335544320;
                *((_DWORD *)this + 50) += 4;
                if (*((_BYTE *)this + 328))
                  v363 = 69;
                else
                  v363 = 65;
                *(_DWORD *)&v2554.markerName[54] = nn;
                *(_DWORD *)&v2554.markerName[58] = 0;
                v2554.markerName[62] = v363;
                *(_WORD *)&v2554.markerName[63] = 15;
                v2554.markerName[65] = -1;
                v105 = *(_DWORD *)&v2554.markerName[106] + (*((_DWORD *)this + 160) >> 2);
                if (*((_DWORD *)this + 99) <= v105)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198724B80);
                }
                goto LABEL_337;
              }
              JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
              if ((int)v315 < 0x40000000)
              {
                JSC::MacroAssemblerARM64::load64((uint64_t)this, (v315 << 35) | 0x1D, 1, v1488, v1489, v1490, v1491, v1492);
LABEL_1320:
                v1962 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                v1963 = *(_DWORD **)(v1962 + 120);
                jj = v2552;
                if (!v1963 || *v1963 <= v1955)
                  goto LABEL_1793;
                v1964 = *((unsigned __int8 *)v1963 + v1955 + 4);
                if ((v1964 - 1) < 2)
                {
LABEL_1323:
                  v1965 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                  if (*v1965 <= v1955)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198724160);
                  }
                  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1965[2 * v1955 + 2], 2, v1499, v1500, v1501, v1502, v1503);
                  goto LABEL_1325;
                }
                if (v1964)
                {
                  if (v1964 != 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1987249F8);
                  }
                }
                else
                {
LABEL_1793:
                  v2319 = *(_DWORD **)(v1962 + 112);
                  if (*v2319 <= v1955)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198724420);
                  }
                  v2320 = *(_QWORD *)&v2319[2 * v1955 + 2];
                  if (!v2320)
                    goto LABEL_1323;
                  if ((v2320 & 0xFFFE000000000002) != 0)
                    goto LABEL_1323;
                  v2321 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2320 & 0xFFFFFFFE) + 0x4C));
                  if (v2321 != &JSC::SymbolTable::s_info && v2321 != &JSC::JSTemplateObjectDescriptor::s_info)
                    goto LABEL_1323;
                }
                v2322 = *v2551;
                if ((*v2551 + 4) > *v12)
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v2549, v1497, v1498, v1499, v1500, v1501, v1502, v1503);
                  v2322 = *v2551;
                }
                *(_DWORD *)(*(_QWORD *)v2549 + v2322) = -129956958;
                v2323 = *v2551;
                v2324 = *v2551 + 4;
                *v2551 = v2324;
                if ((v2323 + 8) > *v2550)
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v2549, v1497, v1498, v1499, v1500, v1501, v1502, v1503);
                  v2324 = *v2551;
                }
                *(_DWORD *)(*((_QWORD *)this + 7) + v2324) = -129367998;
                *((_DWORD *)this + 50) += 4;
                JSC::MacroAssemblerARM64::load64((uint64_t)this, (v316 << 35) | 2, 2, v1499, v1500, v1501, v1502, v1503);
                jj = v2552;
                v12 = v2550;
                goto LABEL_1325;
              }
              v1479 = (v315 - 0x40000000);
            }
            else
            {
              JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            }
            v1493 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
            v1494 = *(_DWORD **)(v1493 + 120);
            if (!v1494 || *v1494 <= v1479)
              goto LABEL_2025;
            v1495 = *((unsigned __int8 *)v1494 + v1479 + 4);
            if ((v1495 - 1) < 2)
              goto LABEL_947;
            if (v1495)
            {
              if (v1495 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x198724C10);
              }
            }
            else
            {
LABEL_2025:
              v2433 = *(_DWORD **)(v1493 + 112);
              if (*v2433 <= v1479)
              {
                __break(0xC471u);
                JUMPOUT(0x198724660);
              }
              v2434 = *(_QWORD *)&v2433[2 * v1479 + 2];
              if (!v2434
                || (v2434 & 0xFFFE000000000002) != 0
                || (v2435 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2434 & 0xFFFFFFFE) + 0x4C)),
                    v2435 != &JSC::SymbolTable::s_info)
                && v2435 != &JSC::JSTemplateObjectDescriptor::s_info)
              {
LABEL_947:
                v1496 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                if (*v1496 <= v1479)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1987243C0);
                }
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1496[2 * v1479 + 2], 1, v1488, v1489, v1490, v1491, v1492);
                jj = v2552;
LABEL_949:
                if ((int)v316 < 0x40000000)
                {
                  JSC::MacroAssemblerARM64::load64((uint64_t)this, (v316 << 35) | 0x1D, 2, v1499, v1500, v1501, v1502, v1503);
LABEL_1325:
                  v1966 = *v2551;
                  if ((*v2551 + 4) > *v12)
                  {
                    JSC::AssemblerBuffer::outOfLineGrow(v2549, v1504, v1505, v1506, v1507, v1508, v1509, v1510);
                    v1966 = *v2551;
                  }
                  *(_DWORD *)(*((_QWORD *)this + 7) + v1966) = -129989824;
                  *((_DWORD *)this + 50) += 4;
                  JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[154], (unsigned __int8 *)this, (uint64_t)operationCompareGreater, 0, 1, v1508, v1509, v1510);
                  JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1}::operator()((unsigned int **)&v2554.markerName[26], v1967, v1968, v1969, v1970, v1971, v1972, v1973);
                  goto LABEL_1549;
                }
                v1955 = (v316 - 0x40000000);
                goto LABEL_1320;
              }
            }
            v2436 = *v2551;
            if ((*v2551 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1486, v1487, v1488, v1489, v1490, v1491, v1492);
              v2436 = *v2551;
            }
            *(_DWORD *)(*(_QWORD *)v2549 + v2436) = -129956959;
            v2437 = *v2551;
            v2438 = *v2551 + 4;
            *v2551 = v2438;
            if ((v2437 + 8) > *v2550)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1486, v1487, v1488, v1489, v1490, v1491, v1492);
              v2438 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v2438) = -129368031;
            *((_DWORD *)this + 50) += 4;
            JSC::MacroAssemblerARM64::load64((uint64_t)this, (v315 << 35) | 1, 1, v1488, v1489, v1490, v1491, v1492);
            jj = v2552;
            v12 = v2550;
            goto LABEL_949;
          case 151:
            *(_DWORD *)&v2554.markerName[114] = 10;
            v364 = *(unsigned __int8 *)v23;
            if (v364 == 128)
            {
              v2299 = *(__int16 *)(v23 + 2);
              v2300 = v2299 + 1073741760;
              if (v2299 <= 63)
                v2300 = *(__int16 *)(v23 + 2);
              v369 = *(__int16 *)(v23 + 4);
              if (v369 > 63)
                v369 += 1073741760;
              v2301 = *(__int16 *)(v23 + 6);
              v368 = v2301 + 1073741760;
              if (v2301 <= 63)
                v368 = *(__int16 *)(v23 + 6);
              goto LABEL_1754;
            }
            if (v364 == 130)
            {
              v2300 = *(_DWORD *)(v23 + 2);
              v369 = *(_DWORD *)(v23 + 6);
              v368 = *(_DWORD *)(v23 + 10);
LABEL_1754:
              *(_DWORD *)&v2554.markerName[50] = v2300;
              *(_QWORD *)&v2554.markerName[26] = this;
              *(_QWORD *)&v2554.markerName[34] = &v2554.markerName[50];
              *(_QWORD *)&v2554.markerName[130] = this;
              *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[114];
              *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[50];
              v370 = *(unsigned __int8 *)(v23 + 1);
              goto LABEL_221;
            }
            v365 = *(char *)(v23 + 1);
            if (v365 > 15)
              v365 += 1073741808;
            v366 = *(char *)(v23 + 2);
            v367 = *(char *)(v23 + 3);
            v368 = v367 + 1073741808;
            *(_DWORD *)&v2554.markerName[50] = v365;
            if (v367 <= 15)
              v368 = v367;
            *(_QWORD *)&v2554.markerName[26] = this;
            *(_QWORD *)&v2554.markerName[34] = &v2554.markerName[50];
            *(_QWORD *)&v2554.markerName[130] = this;
            *(_QWORD *)&v2554.markerName[138] = &v2554.markerName[114];
            *(_QWORD *)&v2554.markerName[146] = &v2554.markerName[50];
            if (v366 <= 15)
              v369 = v366;
            else
              v369 = v366 + 1073741808;
            v370 = v364;
LABEL_221:
            v371 = v364 == 128;
            if (v364 == 130)
              v371 = 2;
            v372 = v369;
            v373 = v368;
            v374 = v364 == 128 || v364 == 130;
            v15 = !v374;
            v375 = 1;
            if (!v15)
              v375 = 2;
            *(_QWORD *)&v2554.markerName[106] = ((unint64_t)JSC::opcodeLengths[v370] << v371)
                                              + v375;
            *(_QWORD *)&v2554.markerName[98] = operationCompareGreaterEq;
            if (v369 < 0x40000000)
              goto LABEL_1409;
            v1511 = *((_QWORD *)this + 101);
            v1512 = (v369 - 0x40000000);
            v1513 = *(_DWORD **)(v1511 + 120);
            if (v1513)
            {
              if (*v1513 > v1512 && *((_BYTE *)v1513 + v1512 + 4) == 3)
                goto LABEL_1409;
            }
            v1514 = *(_DWORD **)(v1511 + 112);
            if (*v1514 <= v1512)
            {
              __break(0xC471u);
              JUMPOUT(0x1987238FCLL);
            }
            v1515 = *(_QWORD *)&v1514[2 * v1512 + 2];
            if ((v1515 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v1515 + 5) != 2)
              goto LABEL_1409;
            if (v1513 && *v1513 > v1512 && *((_BYTE *)v1513 + v1512 + 4) == 3)
            {
              __break(0xC471u);
              JUMPOUT(0x198723FE0);
            }
            v1516 = *(_QWORD *)(v1515 + 8);
            v1517 = v1515 + 16;
            v1518 = (_DWORD *)((v1516 & 1) != 0 ? v1517 : v1516 + 4);
            if (*v1518 != 1)
            {
LABEL_1409:
              if ((int)v373 < 0x40000000)
                goto LABEL_230;
              v2018 = *((_QWORD *)this + 101);
              v2019 = (v373 - 0x40000000);
              v2020 = *(_DWORD **)(v2018 + 120);
              if (v2020)
              {
                if (*v2020 > v2019 && *((_BYTE *)v2020 + v2019 + 4) == 3)
                  goto LABEL_230;
              }
              v2021 = *(_DWORD **)(v2018 + 112);
              if (*v2021 <= v2019)
              {
                __break(0xC471u);
                JUMPOUT(0x198723B7CLL);
              }
              v2022 = *(_QWORD *)&v2021[2 * v2019 + 2];
              if ((v2022 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v2022 + 5) != 2)
                goto LABEL_230;
              if (v2020 && *v2020 > v2019 && *((_BYTE *)v2020 + v2019 + 4) == 3)
              {
                __break(0xC471u);
                JUMPOUT(0x1987240A0);
              }
              v2023 = *(_QWORD *)(v2022 + 8);
              v2024 = v2022 + 16;
              v2025 = (_DWORD *)((v2023 & 1) != 0 ? v2024 : v2023 + 4);
              if (*v2025 != 1)
              {
LABEL_230:
                *(_QWORD *)&v2554.markerName[90] = this;
                *(_QWORD *)&v2554.markerName[154] = this;
                *(_QWORD *)&v2554.markerName[162] = &v2554.markerName[18];
                *(_QWORD *)&v2554.markerName[170] = &v2554.markerName[90];
                *(_QWORD *)&v2554.markerName[178] = &v2554.markerName[130];
                *(_QWORD *)&v2554.markerName[186] = &v2554.markerName[106];
                *(_QWORD *)&v2554.markerName[194] = &v2554.markerName[98];
                *(_QWORD *)&v2554.markerName[202] = &v2554.markerName[26];
                v376 = JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v372, 0, 0, 2, 1, a7, a8);
                jj = v2552;
                if ((v376 & 1) != 0
                  || (JSC::JIT::emit_compareSlowImpl<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1},void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1}>(JSC::VirtualRegister,JSC::VirtualRegister,unsigned long,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long) const&,void JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID)#1} const&)::{lambda(JSC::VirtualRegister,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID,JSC::JSValueRegs,JSC::ARM64Registers::FPRegisterID)#1}::operator()((uint64_t)&v2554.markerName[154], v373, 2, 1, 0, 0, v33, v34) & 1) != 0)
                {
                  goto LABEL_1549;
                }
                JSC::JIT::linkSlowCase((uint64_t)this, (unsigned int **)&v2554.markerName[18], v29, v30, v31, v32, v33, v34);
                JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 0, 27, v377, v378, v379, v380, (uint64_t)&v2554.markerName[118]);
                JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, 2, 27, v381, v382, v383, v384, (uint64_t)&v2554.markerName[78]);
                JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, 2, 27, v385, v386, v387, v388, (uint64_t)&v2554.markerName[66]);
                v396 = *(_QWORD *)&v2554.markerName[90];
                v397 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
                v398 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
                if (v398 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v389, v390, v391, v392, v393, v394, v395);
                  v398 = *(_DWORD *)(v396 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v396 + 56) + v398) = -1962933408;
                v399 = *(_DWORD *)(v396 + 200);
                v400 = v399 + 4;
                *(_DWORD *)(v396 + 200) = v399 + 4;
                if ((v399 + 8) > *(_DWORD *)(v396 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v397, v389, v390, v391, v392, v393, v394, v395);
                  v400 = *(_DWORD *)(v396 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v396 + 56) + v400) = -1637416960;
                *(_DWORD *)(v396 + 200) += 4;
                v401 = *(_QWORD *)&v2554.markerName[90];
                v402 = (JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56);
                v403 = *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 200);
                if (v403 + 4 > *(_DWORD *)(*(_QWORD *)&v2554.markerName[90] + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*(_QWORD *)&v2554.markerName[90] + 56), v389, v390, v391, v392, v393, v394, v395);
                  v403 = *(_DWORD *)(v401 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v401 + 56) + v403) = -1962802334;
                v404 = *(_DWORD *)(v401 + 200);
                v405 = v404 + 4;
                *(_DWORD *)(v401 + 200) = v404 + 4;
                if ((v404 + 8) > *(_DWORD *)(v401 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v402, v389, v390, v391, v392, v393, v394, v395);
                  v405 = *(_DWORD *)(v401 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(v401 + 56) + v405) = -1637416895;
                *(_DWORD *)(v401 + 200) += 4;
                v406 = *(_DWORD **)&v2554.markerName[130];
                v407 = **(_DWORD **)&v2554.markerName[138];
                v2554.markerName[42] = 0;
                v2554.markerName[49] = 1;
                *(_QWORD *)&v2554.markerName[218] = *(_QWORD *)&v2554.markerName[130];
                *(_QWORD *)&v2554.markerName[226] = &v2554.markerName[42];
                *(_QWORD *)&v2554.markerName[234] = &v2554.markerName[49];
                JSC::MacroAssemblerARM64::floatingPointCompare<JSC::MacroAssemblerARM64::compareDouble(JSC::MacroAssemblerARM64::DoubleCondition,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID)::{lambda(void)#1}>(*(uint64_t *)&v2554.markerName[130], v407, 0, (char **)&v2554.markerName[218], v392, v393, v394, v395);
                v415 = v406[50];
                if (v415 + 4 > v406[48])
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v406 + 14), v408, v409, v410, v411, v412, v413, v414);
                  v415 = v406[50];
                }
                *(_DWORD *)(*((_QWORD *)v406 + 7) + v415) = 285218816;
                v406[50] += 4;
                JSC::MacroAssemblerARM64::store64((uint64_t)v406, 0, ((unint64_t)**(_DWORD **)&v2554.markerName[146] << 35) | 0x1D, v410, v411, v412, v413, v414);
                for (i1 = *((_DWORD *)this + 50); i1 < *((_DWORD *)this + 13); v12 = v2550)
                {
                  if ((i1 + 4) > *v12)
                  {
                    JSC::AssemblerBuffer::outOfLineGrow(v2549, v416, v417, v97, v98, v99, v100, v101);
                    i1 = *v2551;
                  }
                  *(_DWORD *)(*((_QWORD *)this + 7) + i1) = -721215457;
                  i1 = *((_DWORD *)this + 50) + 4;
                  *((_DWORD *)this + 50) = i1;
                  jj = v2552;
                }
                v419 = i1;
                if ((i1 + 4) > *v12)
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v2549, v416, v417, v97, v98, v99, v100, v101);
                  v419 = *v2551;
                }
                *(_DWORD *)(*((_QWORD *)this + 7) + v419) = 335544320;
                *((_DWORD *)this + 50) += 4;
                if (*((_BYTE *)this + 328))
                  v420 = 69;
                else
                  v420 = 65;
                *(_DWORD *)&v2554.markerName[54] = i1;
                *(_DWORD *)&v2554.markerName[58] = 0;
                v2554.markerName[62] = v420;
                *(_WORD *)&v2554.markerName[63] = 15;
                v2554.markerName[65] = -1;
                v105 = *(_DWORD *)&v2554.markerName[106] + (*((_DWORD *)this + 160) >> 2);
                if (*((_DWORD *)this + 99) <= v105)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198724C98);
                }
                goto LABEL_337;
              }
              JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
              if ((int)v372 < 0x40000000)
              {
                JSC::MacroAssemblerARM64::load64((uint64_t)this, (v372 << 35) | 0x1D, 1, v1521, v1522, v1523, v1524, v1525);
LABEL_1412:
                v2026 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                v2027 = *(_DWORD **)(v2026 + 120);
                jj = v2552;
                if (v2027 && *v2027 > v2019)
                {
                  v2028 = *((unsigned __int8 *)v2027 + v2019 + 4);
                  if ((v2028 - 1) < 2)
                  {
LABEL_1415:
                    v2029 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                    if (*v2029 <= v2019)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1987241A0);
                    }
                    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v2029[2 * v2019 + 2], 2, v1532, v1533, v1534, v1535, v1536);
                    goto LABEL_1417;
                  }
                  if (v2028)
                  {
                    if (v2028 != 3)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198724978);
                    }
LABEL_1823:
                    v2335 = *v2551;
                    if ((*v2551 + 4) > *v12)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1530, v1531, v1532, v1533, v1534, v1535, v1536);
                      v2335 = *v2551;
                    }
                    *(_DWORD *)(*(_QWORD *)v2549 + v2335) = -129956958;
                    v2336 = *v2551;
                    v2337 = *v2551 + 4;
                    *v2551 = v2337;
                    if ((v2336 + 8) > *v2550)
                    {
                      JSC::AssemblerBuffer::outOfLineGrow(v2549, v1530, v1531, v1532, v1533, v1534, v1535, v1536);
                      v2337 = *v2551;
                    }
                    *(_DWORD *)(*((_QWORD *)this + 7) + v2337) = -129367998;
                    *((_DWORD *)this + 50) += 4;
                    JSC::MacroAssemblerARM64::load64((uint64_t)this, (v373 << 35) | 2, 2, v1532, v1533, v1534, v1535, v1536);
                    jj = v2552;
                    v12 = v2550;
                    goto LABEL_1417;
                  }
                }
                v2332 = *(_DWORD **)(v2026 + 112);
                if (*v2332 <= v2019)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198724440);
                }
                v2333 = *(_QWORD *)&v2332[2 * v2019 + 2];
                if (v2333)
                {
                  if ((v2333 & 0xFFFE000000000002) == 0)
                  {
                    v2334 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2333 & 0xFFFFFFFE) + 0x4C));
                    if (v2334 == &JSC::SymbolTable::s_info || v2334 == &JSC::JSTemplateObjectDescriptor::s_info)
                      goto LABEL_1823;
                  }
                }
                goto LABEL_1415;
              }
              v1512 = (v372 - 0x40000000);
            }
            else
            {
              JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            }
            v1526 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
            v1527 = *(_DWORD **)(v1526 + 120);
            if (!v1527 || *v1527 <= v1512)
              goto LABEL_1771;
            v1528 = *((unsigned __int8 *)v1527 + v1512 + 4);
            if ((v1528 - 1) < 2)
              goto LABEL_968;
            if (v1528)
            {
              if (v1528 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x198724898);
              }
            }
            else
            {
LABEL_1771:
              v2307 = *(_DWORD **)(v1526 + 112);
              if (*v2307 <= v1512)
              {
                __break(0xC471u);
                JUMPOUT(0x1987243E0);
              }
              v2308 = *(_QWORD *)&v2307[2 * v1512 + 2];
              if (!v2308
                || (v2308 & 0xFFFE000000000002) != 0
                || (v2309 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2308 & 0xFFFFFFFE) + 0x4C)),
                    v2309 != &JSC::SymbolTable::s_info)
                && v2309 != &JSC::JSTemplateObjectDescriptor::s_info)
              {
LABEL_968:
                v1529 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                if (*v1529 <= v1512)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198724140);
                }
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v1529[2 * v1512 + 2], 1, v1521, v1522, v1523, v1524, v1525);
                jj = v2552;
                goto LABEL_970;
              }
            }
            v2310 = *v2551;
            if ((*v2551 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1519, v1520, v1521, v1522, v1523, v1524, v1525);
              v2310 = *v2551;
            }
            *(_DWORD *)(*(_QWORD *)v2549 + v2310) = -129956959;
            v2311 = *v2551;
            v2312 = *v2551 + 4;
            *v2551 = v2312;
            if ((v2311 + 8) > *v2550)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1519, v1520, v1521, v1522, v1523, v1524, v1525);
              v2312 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v2312) = -129368031;
            *((_DWORD *)this + 50) += 4;
            JSC::MacroAssemblerARM64::load64((uint64_t)this, (v372 << 35) | 1, 1, v1521, v1522, v1523, v1524, v1525);
            jj = v2552;
            v12 = v2550;
LABEL_970:
            if ((int)v373 >= 0x40000000)
            {
              v2019 = (v373 - 0x40000000);
              goto LABEL_1412;
            }
            JSC::MacroAssemblerARM64::load64((uint64_t)this, (v373 << 35) | 0x1D, 2, v1532, v1533, v1534, v1535, v1536);
LABEL_1417:
            v2030 = *v2551;
            if ((*v2551 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1537, v1538, v1539, v1540, v1541, v1542, v1543);
              v2030 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v2030) = -129989824;
            *((_DWORD *)this + 50) += 4;
            JSC::JIT::callOperation<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v2554.markerName[154], (unsigned __int8 *)this, (uint64_t)operationCompareGreaterEq, 0, 1, v1541, v1542, v1543);
            JSC::JIT::emit_compareSlow<JSC::OpLess,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::BaseInstruction<JSC::JSOpcodeTraits> const*,JSC::MacroAssemblerARM64::DoubleCondition,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::SlowCaseEntry *&)::{lambda(void)#1}::operator()((unsigned int **)&v2554.markerName[26], v2031, v2032, v2033, v2034, v2035, v2036, v2037);
LABEL_1549:
            if (*(_QWORD *)&v2554.markerName[18] != *((_QWORD *)this + 81) + 16 * *((unsigned int *)this + 165)
              && (*(_DWORD *)(*(_QWORD *)&v2554.markerName[18] + 12) ^ v19) <= 3)
            {
              __break(0xC471u);
              JUMPOUT(0x19872367CLL);
            }
            if ((*(_DWORD *)(*(_QWORD *)&v2554.markerName[18] - 4) ^ v19) >= 4)
            {
              __break(0xC471u);
              JUMPOUT(0x19872365CLL);
            }
            for (i2 = *((_DWORD *)this + 50); i2 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i2)
            {
              if ((i2 + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, (uint64_t)v28, v29, v30, v31, v32, v33, v34);
                i2 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + i2) = -721215457;
              i2 = *((_DWORD *)this + 50) + 4;
            }
            v2169 = i2;
            if ((i2 + 4) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, (uint64_t)v28, v29, v30, v31, v32, v33, v34);
              v2169 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v2169) = 335544320;
            *((_DWORD *)this + 50) += 4;
            if (*((_BYTE *)this + 328))
              v2170 = 69;
            else
              v2170 = 65;
            *(_DWORD *)&v2554.markerName[154] = i2;
            *(_DWORD *)&v2554.markerName[158] = 0;
            v2554.markerName[162] = v2170;
            *(_WORD *)&v2554.markerName[163] = 15;
            v2554.markerName[165] = -1;
            v2171 = *((_QWORD *)this + 51);
            if (!v2171)
            {
              v2173 = *((_DWORD *)this + 160);
LABEL_1568:
              v2180 = v2173;
              v2181 = (unsigned __int8 *)(**(_QWORD **)(*((_QWORD *)this + 101) + 80) + ((unint64_t)v2173 >> 2));
              v2182 = *v2181;
              v2183 = v2182;
              if ((v2182 | 2) == 0x82)
                v2183 = v2181[1];
              v2184 = v2180 >> 2;
              v2185 = v2182 == 128;
              if (v2182 == 130)
                v2185 = 2;
              v2186 = v2182 == 128 || v2182 == 130;
              v2187 = (unint64_t)JSC::opcodeLengths[v2183] << v2185;
              v15 = !v2186;
              v2188 = 1;
              if (!v15)
                v2188 = 2;
              v2189 = v2188 + v2184 + v2187;
              if (v2189 >= *((unsigned int *)this + 99))
              {
                __break(0xC471u);
                JUMPOUT(0x1987247F0);
              }
              v2179 = (_DWORD *)(*((_QWORD *)this + 48) + 4 * v2189);
              goto LABEL_1579;
            }
            v2172 = *(_DWORD *)(v2171 - 8);
            v2173 = *((_DWORD *)this + 160);
            v2174 = 9 * ((v2173 + ~(v2173 << 15)) ^ ((v2173 + ~(v2173 << 15)) >> 10));
            v2175 = (v2174 ^ (v2174 >> 6)) + ~((v2174 ^ (v2174 >> 6)) << 11);
            v2176 = (v2175 ^ HIWORD(v2175)) & v2172;
            v2177 = *(_DWORD *)(v2171 + 8 * v2176);
            if (v2177 != v2173)
            {
              v2178 = 1;
              while (v2177 != -1)
              {
                v2176 = ((_DWORD)v2176 + v2178) & v2172;
                v2177 = *(_DWORD *)(v2171 + 8 * v2176);
                ++v2178;
                if (v2177 == v2173)
                  goto LABEL_1566;
              }
              v2176 = *(unsigned int *)(v2171 - 4);
            }
LABEL_1566:
            if (v2176 == *(_DWORD *)(v2171 - 4))
              goto LABEL_1568;
            v2179 = (_DWORD *)(v2171 + 8 * v2176 + 4);
LABEL_1579:
            *(_DWORD *)&v2554.markerName[14] = *v2179;
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v2554.markerName[154], (unsigned int *)&v2554.markerName[14], (uint64_t)this, v30, v31, v32, v33, v34);
            if (v25)
            {
              v2214 = *(unsigned __int8 *)v23;
              v2215 = v2214;
              if ((v2214 | 2) == 0x82)
                v2215 = *(unsigned __int8 *)(v23 + 1);
              v2216 = v2214 == 128;
              v2217 = v2214 == 130;
              if (v2214 == 130)
                v2216 = 2;
              if (v2214 == 128)
                v2217 = 1;
              v2218 = JSC::opcodeLengths[v2215] << v2216;
              if (v2217)
                v2219 = 2;
              else
                v2219 = 1;
              *((_DWORD *)this + 160) = (*((_DWORD *)this + 160) + 4 * (v2218 + v2219)) & 0xFFFFFFFC;
              v2220 = (JSC::JITPlan *)*((_QWORD *)this + 45);
              v2221 = *(JSC::JITSizeStatistics **)(*((_QWORD *)this + 44) + 41440);
              *(_QWORD *)&v2554.id = v2553;
              *(_DWORD *)&v2554.markerName[2] = v2538;
              JSC::JITSizeStatistics::markEnd(v2221, &v2554, this, v2220);
              *(_QWORD *)&v2554.id = 0;
              if (v2553)
              {
                if (*(_DWORD *)v2553 == 2)
                {
                  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v2553, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v2287, v2288, v2289, v2290, v2291, v2292, v2293, v2294);
                }
                else
                {
                  *(_DWORD *)v2553 -= 2;
                }
              }
              v2553 = 0;
            }
            ++v10;
            v9 = *(_QWORD *)&v2554.markerName[18];
            if (*(_QWORD *)&v2554.markerName[18] == *((_QWORD *)this + 81) + 16 * *((unsigned int *)this + 165))
              goto LABEL_2370;
            continue;
          case 154:
            __break(0xC471u);
            JUMPOUT(0x198724340);
          case 155:
            JSC::JIT::emitSlow_op_pow((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 156:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_urshift;
            goto LABEL_746;
          case 157:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v1125 = *((_QWORD *)this + 97);
            if (v1125)
            {
              v1126 = *(_DWORD *)(v1125 - 8);
              v1127 = (~(v23 << 32) + v23) ^ ((~(v23 << 32) + v23) >> 22);
              v1128 = 9 * ((v1127 + ~(v1127 << 13)) ^ ((v1127 + ~(v1127 << 13)) >> 8));
              v1129 = (v1128 ^ (v1128 >> 15)) + ~((v1128 ^ (v1128 >> 15)) << 27);
              v1130 = (v1129 >> 31) ^ v1129;
              v1131 = v1126 & v1130;
              v1132 = *(_QWORD *)(v1125 + 16 * v1131);
              if (v1132 == v23)
              {
LABEL_691:
                v1134 = *(JSC::ARM64LogicalImmediate **)(v1125 + 16 * v1131 + 8);
                goto LABEL_692;
              }
              v1133 = 1;
              while (v1132)
              {
                v1131 = ((_DWORD)v1131 + v1133) & v1126;
                v1132 = *(_QWORD *)(v1125 + 16 * v1131);
                ++v1133;
                if (v1132 == v23)
                  goto LABEL_691;
              }
              v1134 = 0;
            }
            else
            {
              v1134 = 0;
              v2532 = (~(v23 << 32) + v23) ^ ((~(v23 << 32) + v23) >> 22);
              v2533 = 9 * ((v2532 + ~(v2532 << 13)) ^ ((v2532 + ~(v2532 << 13)) >> 8));
              v2534 = (v2533 ^ (v2533 >> 15)) + ~((v2533 ^ (v2533 >> 15)) << 27);
              v1130 = (v2534 >> 31) ^ v2534;
            }
LABEL_692:
            v1135 = *((_QWORD *)this + 98);
            v1136 = *(_DWORD *)(v1135 - 8);
            v1137 = v1136 & v1130;
            v1138 = *(_QWORD *)(v1135 + 16 * v1137);
            if (v1138 != v23)
            {
              v1139 = 1;
              while (v1138)
              {
                v1137 = ((_DWORD)v1137 + v1139) & v1136;
                v1138 = *(_QWORD *)(v1135 + 16 * v1137);
                ++v1139;
                if (v1138 == v23)
                  goto LABEL_696;
              }
              v1137 = *(unsigned int *)(v1135 - 4);
            }
LABEL_696:
            v1140 = *(_QWORD *)(v1135 + 16 * v1137 + 8);
            for (i3 = *((_DWORD *)this + 50); i3 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i3)
            {
              if ((i3 + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v1118, v1119, v1120, v1121, v1122, v1123, v1124);
                i3 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + i3) = -721215457;
              i3 = *((_DWORD *)this + 50) + 4;
            }
            *((_DWORD *)this + 52) = 0;
            *(_DWORD *)(v1140 + 8) = i3;
            v1142 = *(unsigned __int8 *)v23;
            if (v1142 == 128)
            {
              LODWORD(v2237) = *(__int16 *)(v23 + 2);
              if ((int)v2237 <= 63)
                v2237 = v2237;
              else
                v2237 = (v2237 + 1073741760);
              v2539 = v2237;
              v1144 = *(__int16 *)(v23 + 4);
              v1145 = v1144 + 1073741760;
              v2238 = *(__int16 *)(v23 + 6);
              if (v2238 <= 63)
                v1147 = v2238;
              else
                v1147 = (v2238 + 1073741760);
              LOBYTE(v1149) = *(_WORD *)(v23 + 10);
              v1150 = HIBYTE(*(unsigned __int16 *)(v23 + 10));
              v1151 = v1144 <= 63;
            }
            else
            {
              if (v1142 == 130)
              {
                v2539 = *(unsigned int *)(v23 + 2);
                v1144 = *(_DWORD *)(v23 + 6);
                v1147 = *(unsigned int *)(v23 + 10);
                LOBYTE(v1149) = *(_DWORD *)(v23 + 18);
                LOBYTE(v1150) = BYTE1(*(_DWORD *)(v23 + 18));
                goto LABEL_712;
              }
              LODWORD(v1143) = *(char *)(v23 + 1);
              if ((int)v1143 <= 15)
                v1143 = v1143;
              else
                v1143 = (v1143 + 1073741808);
              v2539 = v1143;
              v1144 = *(char *)(v23 + 2);
              v1145 = v1144 + 1073741808;
              v1146 = *(char *)(v23 + 3);
              if (v1146 <= 15)
                v1147 = v1146;
              else
                v1147 = (v1146 + 1073741808);
              v1148 = *(unsigned __int8 *)(v23 + 5);
              v1149 = v1148 >> 4;
              if (v1148 < 0x10)
                LOBYTE(v1149) = 126;
              v1150 = v1148 & 0xF;
              if (!v1150)
                LOBYTE(v1150) = 126;
              v1151 = v1144 <= 15;
            }
            if (!v1151)
              v1144 = v1145;
LABEL_712:
            v2554.markerName[218] = v1149;
            v2554.markerName[219] = 0;
            *(_QWORD *)&v2554.markerName[220] = 0;
            v2554.markerName[130] = v1150;
            v2554.markerName[131] = 0;
            v1152 = v1144;
            *(_QWORD *)&v2554.markerName[132] = 0;
            if (v1144 >= 0x40000000)
            {
              v1153 = *((_QWORD *)this + 101);
              v1154 = (v1152 - 0x40000000);
              v1155 = *(_DWORD **)(v1153 + 120);
              if (!v1155 || *v1155 <= v1154 || *((_BYTE *)v1155 + v1154 + 4) != 3)
              {
                v1156 = *(_DWORD **)(v1153 + 112);
                if (*v1156 <= v1154)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1987237DCLL);
                }
                v1157 = *(_QWORD *)&v1156[2 * v1154 + 2];
                if (v1157 >= 0xFFFE000000000000)
                {
                  if (v1155 && *v1155 > v1154)
                  {
                    v2295 = *((unsigned __int8 *)v1155 + v1154 + 4);
                    v1164 = &v2554.markerName[220];
                    v1163 = &v2554.markerName[219];
                    if (v2295 == 3)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198723DC0);
                    }
                  }
                  else
                  {
                    v1164 = &v2554.markerName[220];
                    v1163 = &v2554.markerName[219];
                  }
                  goto LABEL_727;
                }
              }
            }
            if ((int)v1147 >= 0x40000000)
            {
              v1158 = *((_QWORD *)this + 101);
              v1159 = (v1147 - 0x40000000);
              v1160 = *(_DWORD **)(v1158 + 120);
              if (!v1160 || *v1160 <= v1159 || *((_BYTE *)v1160 + v1159 + 4) != 3)
              {
                v1161 = *(_DWORD **)(v1158 + 112);
                if (*v1161 <= v1159)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19872381CLL);
                }
                v1157 = *(_QWORD *)&v1161[2 * v1159 + 2];
                if (v1157 >= 0xFFFE000000000000)
                {
                  if (v1160 && *v1160 > v1159)
                  {
                    v1162 = *((unsigned __int8 *)v1160 + v1159 + 4);
                    v1164 = &v2554.markerName[132];
                    v1163 = &v2554.markerName[131];
                    if (v1162 == 3)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19872383CLL);
                    }
                  }
                  else
                  {
                    v1164 = &v2554.markerName[132];
                    v1163 = &v2554.markerName[131];
                  }
LABEL_727:
                  *v1163 = 1;
                  *(_QWORD *)v1164 = v1157;
                }
              }
            }
            *(_QWORD *)&v2554.markerName[154] = *(_QWORD *)&v2554.markerName[218];
            if ((*(_WORD *)&v2554.markerName[218] & 0xFF00) != 0x100 || *(int *)&v2554.markerName[156] < 1)
            {
              *(_QWORD *)&v2554.markerName[154] = *(_QWORD *)&v2554.markerName[130];
              if ((*(_WORD *)&v2554.markerName[130] & 0xFF00) != 0x100 || *(int *)&v2554.markerName[156] < 1)
                goto LABEL_736;
              if ((int)v1147 < 0x40000000)
              {
                v1165 = 29;
LABEL_734:
                v1166 = v1165 | (v1147 << 35);
                v1167 = this;
                v1168 = 2;
LABEL_735:
                JSC::MacroAssemblerARM64::load64((uint64_t)v1167, v1166, v1168, v1120, v1121, v1122, v1123, v1124);
                goto LABEL_736;
              }
              v2224 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
              v2225 = (v1147 - 0x40000000);
              v2226 = *(_DWORD **)(v2224 + 120);
              if (!v2226 || *v2226 <= v2225)
                goto LABEL_1639;
              v2227 = *((unsigned __int8 *)v2226 + v2225 + 4);
              if ((v2227 - 1) < 2)
              {
LABEL_1656:
                v2236 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                if (*v2236 <= v2225)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198723D1CLL);
                }
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v2236[2 * v2225 + 2], 2, v1120, v1121, v1122, v1123, v1124);
LABEL_736:
                v1169 = *(JSC::ARM64LogicalImmediate **)v1134;
                v1170 = *v2551;
                if ((*v2551 + 4) > *v12)
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v2549, v1118, v1119, v1120, v1121, v1122, v1123, v1124);
                  v1170 = *v2551;
                }
                *(_DWORD *)(*(_QWORD *)v2549 + v1170) = -129989824;
                *v2551 += 4;
                if (v1169 && *((_BYTE *)this + 793))
                {
                  if (!*(_BYTE *)(v1140 + 64))
                  {
                    JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((int *)&v2554.markerName[154], (uint64_t)this, (uint64_t)operationValueAddProfiled, v1169, v1121, v1122, v1123, v1124);
                    goto LABEL_1421;
                  }
                  v1171 = operationValueAddProfiledOptimize;
                }
                else
                {
                  v1171 = operationValueAddOptimize;
                }
                JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((int *)&v2554.markerName[154], (uint64_t)this, (uint64_t)v1171, v1134, v1121, v1122, v1123, v1124);
LABEL_1421:
                *(_QWORD *)(v1140 + 12) = *(_QWORD *)&v2554.markerName[154];
                JSC::MacroAssemblerARM64::store64((uint64_t)this, 0, (v2539 << 35) | 0x1D, v1172, v1173, v1174, v1175, v1176);
                v461 = WTF::fastMalloc((WTF *)0x28);
                *(_DWORD *)(v461 + 8) = 1;
                *(_QWORD *)v461 = off_1E3595D30;
                *(_QWORD *)(v461 + 16) = this;
                *(_QWORD *)(v461 + 24) = v23;
                *(_QWORD *)(v461 + 32) = v1134;
                v462 = *((unsigned int *)this + 61);
                if ((_DWORD)v462 == *((_DWORD *)this + 60))
                {
                  v2039 = v462 + (v462 >> 2);
                  if (v2039 >= 0x10)
                    v2040 = v2039 + 1;
                  else
                    v2040 = 16;
                  if (v2040 <= v462 + 1)
                    v465 = v462 + 1;
                  else
                    v465 = v2040;
                  if (v465 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198724B98);
                  }
LABEL_1430:
                  v2041 = (const void *)*((_QWORD *)this + 29);
                  v2042 = (void *)WTF::fastMalloc((WTF *)(8 * v465));
                  *((_DWORD *)this + 60) = v465;
                  *((_QWORD *)this + 29) = v2042;
                  memcpy(v2042, v2041, 8 * v462);
                  if (v2041)
                  {
                    if (*((const void **)this + 29) == v2041)
                    {
                      *((_QWORD *)this + 29) = 0;
                      *((_DWORD *)this + 60) = 0;
                    }
                    WTF::fastFree((unint64_t)v2041, v28, v29, v30, v31, v32, v33, v34);
                  }
                  v462 = *((unsigned int *)this + 61);
                  v2038 = (uint64_t *)(*((_QWORD *)this + 29) + 8 * v462);
                }
                else
                {
LABEL_1422:
                  v2038 = (uint64_t *)(*((_QWORD *)this + 29) + 8 * v462);
                }
                *v2038 = v461;
                *((_DWORD *)this + 61) = v462 + 1;
                goto LABEL_1548;
              }
              if (v2227)
              {
                if (v2227 != 3)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1987247A0);
                }
              }
              else
              {
LABEL_1639:
                v2228 = *(_DWORD **)(v2224 + 112);
                if (*v2228 <= v2225)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198723D5CLL);
                }
                v2229 = *(_QWORD *)&v2228[2 * v2225 + 2];
                if (v2229)
                  v2230 = (v2229 & 0xFFFE000000000002) == 0;
                else
                  v2230 = 0;
                if (!v2230)
                  goto LABEL_1656;
                v2231 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2229 & 0xFFFFFFFE) + 0x4C));
                if (v2231 != &JSC::SymbolTable::s_info && v2231 != &JSC::JSTemplateObjectDescriptor::s_info)
                  goto LABEL_1656;
              }
              v2233 = *v2551;
              if ((*v2551 + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v1118, v1119, v1120, v1121, v1122, v1123, v1124);
                v2233 = *v2551;
              }
              *(_DWORD *)(*(_QWORD *)v2549 + v2233) = -129956958;
              v2234 = *v2551;
              v2235 = *v2551 + 4;
              *v2551 = v2235;
              if ((v2234 + 8) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v1118, v1119, v1120, v1121, v1122, v1123, v1124);
                v2235 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + v2235) = -129367998;
              *((_DWORD *)this + 50) += 4;
              v1165 = 2;
              goto LABEL_734;
            }
            if ((int)v1152 < 0x40000000)
            {
              v1166 = (v1152 << 35) | 0x1D;
              v1167 = this;
              v1168 = 1;
              goto LABEL_735;
            }
            v2448 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
            v2449 = (v1152 - 0x40000000);
            v2450 = *(_DWORD **)(v2448 + 120);
            if (!v2450 || *v2450 <= v2449)
              goto LABEL_2064;
            v2451 = *((unsigned __int8 *)v2450 + v2449 + 4);
            if ((v2451 - 1) < 2)
              goto LABEL_2088;
            if (v2451)
            {
              if (v2451 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x198724C38);
              }
            }
            else
            {
LABEL_2064:
              v2452 = *(_DWORD **)(v2448 + 112);
              if (*v2452 <= v2449)
              {
                __break(0xC471u);
                JUMPOUT(0x198724780);
              }
              v2453 = *(_QWORD *)&v2452[2 * v2449 + 2];
              if (v2453)
                v2454 = (v2453 & 0xFFFE000000000002) == 0;
              else
                v2454 = 0;
              if (!v2454
                || ((v2455 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2453 & 0xFFFFFFFE) + 0x4C)),
                     v2455 != &JSC::SymbolTable::s_info)
                  ? (v2456 = v2455 == &JSC::JSTemplateObjectDescriptor::s_info)
                  : (v2456 = 1),
                    !v2456))
              {
LABEL_2088:
                v2460 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                if (*v2460 <= v2449)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1987246C0);
                }
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v2460[2 * v2449 + 2], 1, v1120, v1121, v1122, v1123, v1124);
LABEL_2090:
                v12 = v2550;
                goto LABEL_736;
              }
            }
            v2457 = *v2551;
            if ((*v2551 + 4) > *v2550)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1118, v1119, v1120, v1121, v1122, v1123, v1124);
              v2457 = *v2551;
            }
            *(_DWORD *)(*(_QWORD *)v2549 + v2457) = -129956959;
            v2458 = *v2551;
            v2459 = *v2551 + 4;
            *v2551 = v2459;
            if ((v2458 + 8) > *v2550)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v1118, v1119, v1120, v1121, v1122, v1123, v1124);
              v2459 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v2459) = -129368031;
            *((_DWORD *)this + 50) += 4;
            JSC::MacroAssemblerARM64::load64((uint64_t)this, (v1152 << 35) | 1, 1, v1120, v1121, v1122, v1123, v1124);
            goto LABEL_2090;
          case 158:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v837 = *((_QWORD *)this + 97);
            if (v837)
            {
              v838 = *(_DWORD *)(v837 - 8);
              v839 = (~(v23 << 32) + v23) ^ ((~(v23 << 32) + v23) >> 22);
              v840 = 9 * ((v839 + ~(v839 << 13)) ^ ((v839 + ~(v839 << 13)) >> 8));
              v841 = (v840 ^ (v840 >> 15)) + ~((v840 ^ (v840 >> 15)) << 27);
              v842 = (v841 >> 31) ^ v841;
              v843 = v838 & v842;
              v844 = *(_QWORD *)(v837 + 16 * v843);
              if (v844 == v23)
              {
LABEL_491:
                v846 = *(JSC::ARM64LogicalImmediate **)(v837 + 16 * v843 + 8);
                goto LABEL_492;
              }
              v845 = 1;
              while (v844)
              {
                v843 = ((_DWORD)v843 + v845) & v838;
                v844 = *(_QWORD *)(v837 + 16 * v843);
                ++v845;
                if (v844 == v23)
                  goto LABEL_491;
              }
              v846 = 0;
            }
            else
            {
              v846 = 0;
              v2526 = (~(v23 << 32) + v23) ^ ((~(v23 << 32) + v23) >> 22);
              v2527 = 9 * ((v2526 + ~(v2526 << 13)) ^ ((v2526 + ~(v2526 << 13)) >> 8));
              v2528 = (v2527 ^ (v2527 >> 15)) + ~((v2527 ^ (v2527 >> 15)) << 27);
              v842 = (v2528 >> 31) ^ v2528;
            }
LABEL_492:
            v847 = *((_QWORD *)this + 98);
            v848 = *(_DWORD *)(v847 - 8);
            v849 = v848 & v842;
            v850 = *(_QWORD *)(v847 + 16 * v849);
            if (v850 != v23)
            {
              v851 = 1;
              while (v850)
              {
                v849 = ((_DWORD)v849 + v851) & v848;
                v850 = *(_QWORD *)(v847 + 16 * v849);
                ++v851;
                if (v850 == v23)
                  goto LABEL_496;
              }
              v849 = *(unsigned int *)(v847 - 4);
            }
LABEL_496:
            v852 = *(_QWORD *)(v847 + 16 * v849 + 8);
            for (i4 = *((_DWORD *)this + 50); i4 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i4)
            {
              if ((i4 + 4) > *v12)
              {
                v2410 = v846;
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v830, v831, v832, v833, v834, v835, v836);
                v846 = v2410;
                i4 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + i4) = -721215457;
              i4 = *((_DWORD *)this + 50) + 4;
            }
            *((_DWORD *)this + 52) = 0;
            *(_DWORD *)(v852 + 8) = i4;
            v854 = *(unsigned __int8 *)v23;
            if (v854 == 128)
            {
              v2239 = *(__int16 *)(v23 + 2);
              if (v2239 <= 63)
                v856 = v2239;
              else
                v856 = (v2239 + 1073741760);
              v857 = *(__int16 *)(v23 + 4);
              v858 = v857 + 1073741760;
              v2240 = *(__int16 *)(v23 + 6);
              if (v2240 <= 63)
                v860 = v2240;
              else
                v860 = (v2240 + 1073741760);
              LOBYTE(v862) = *(_WORD *)(v23 + 10);
              v863 = HIBYTE(*(unsigned __int16 *)(v23 + 10));
              v864 = v857 <= 63;
            }
            else
            {
              if (v854 == 130)
              {
                v856 = *(unsigned int *)(v23 + 2);
                v857 = *(_DWORD *)(v23 + 6);
                v860 = *(unsigned int *)(v23 + 10);
                LOBYTE(v862) = *(_DWORD *)(v23 + 18);
                LOBYTE(v863) = BYTE1(*(_DWORD *)(v23 + 18));
                goto LABEL_512;
              }
              v855 = *(char *)(v23 + 1);
              if (v855 <= 15)
                v856 = v855;
              else
                v856 = (v855 + 1073741808);
              v857 = *(char *)(v23 + 2);
              v858 = v857 + 1073741808;
              v859 = *(char *)(v23 + 3);
              if (v859 <= 15)
                v860 = v859;
              else
                v860 = (v859 + 1073741808);
              v861 = *(unsigned __int8 *)(v23 + 5);
              v862 = v861 >> 4;
              if (v861 < 0x10)
                LOBYTE(v862) = 126;
              v863 = v861 & 0xF;
              if (!v863)
                LOBYTE(v863) = 126;
              v864 = v857 <= 15;
            }
            if (!v864)
              v857 = v858;
LABEL_512:
            v2554.markerName[218] = v862;
            v2554.markerName[219] = 0;
            *(_QWORD *)&v2554.markerName[220] = 0;
            v2554.markerName[130] = v863;
            v2554.markerName[131] = 0;
            v865 = v857;
            *(_QWORD *)&v2554.markerName[132] = 0;
            if (v857 >= 0x40000000)
            {
              v1336 = *((_QWORD *)this + 101);
              v1337 = (v865 - 0x40000000);
              v1338 = *(_DWORD **)(v1336 + 120);
              if (!v1338 || *v1338 <= v1337 || *((_BYTE *)v1338 + v1337 + 4) != 3)
              {
                v1339 = *(_DWORD **)(v1336 + 112);
                if (*v1339 <= v1337)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1987237FCLL);
                }
                v870 = *(_QWORD *)&v1339[2 * v1337 + 2];
                if (v870 >= 0xFFFE000000000000)
                {
                  if (v1338 && *v1338 > v1337)
                  {
                    v1340 = *((unsigned __int8 *)v1338 + v1337 + 4);
                    v873 = &v2554.markerName[220];
                    v872 = &v2554.markerName[219];
                    if (v1340 == 3)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198723CBCLL);
                    }
                  }
                  else
                  {
                    v873 = &v2554.markerName[220];
                    v872 = &v2554.markerName[219];
                  }
LABEL_850:
                  *v872 = 1;
                  *(_QWORD *)v873 = v870;
                  goto LABEL_851;
                }
              }
            }
            if ((int)v860 >= 0x40000000)
            {
              v866 = *((_QWORD *)this + 101);
              v867 = (v860 - 0x40000000);
              v868 = *(_DWORD **)(v866 + 120);
              if (!v868 || *v868 <= v867 || *((_BYTE *)v868 + v867 + 4) != 3)
              {
                v869 = *(_DWORD **)(v866 + 112);
                if (*v869 <= v867)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19872389CLL);
                }
                v870 = *(_QWORD *)&v869[2 * v867 + 2];
                if (v870 >= 0xFFFE000000000000)
                {
                  if (v868 && *v868 > v867)
                  {
                    v871 = *((unsigned __int8 *)v868 + v867 + 4);
                    v873 = &v2554.markerName[132];
                    v872 = &v2554.markerName[131];
                    if (v871 == 3)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198723CDCLL);
                    }
                  }
                  else
                  {
                    v873 = &v2554.markerName[132];
                    v872 = &v2554.markerName[131];
                  }
                  goto LABEL_850;
                }
              }
            }
LABEL_851:
            *(_QWORD *)&v2554.markerName[154] = *(_QWORD *)&v2554.markerName[218];
            v2540 = v856;
            if ((*(_WORD *)&v2554.markerName[218] & 0xFF00) != 0x100 || *(int *)&v2554.markerName[156] < 1)
            {
              *(_QWORD *)&v2554.markerName[154] = *(_QWORD *)&v2554.markerName[130];
              if ((*(_WORD *)&v2554.markerName[130] & 0xFF00) == 0x100 && *(int *)&v2554.markerName[156] >= 1)
              {
                if ((int)v860 < 0x40000000)
                {
                  v1341 = v846;
                  JSC::MacroAssemblerARM64::load64((uint64_t)this, (v860 << 35) | 0x1D, 2, v832, v833, v834, v835, v836);
LABEL_857:
                  v846 = v1341;
                  goto LABEL_1528;
                }
                v2258 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
                v2259 = (v860 - 0x40000000);
                v2260 = *(_DWORD **)(v2258 + 120);
                if (!v2260 || *v2260 <= v2259)
                  goto LABEL_1712;
                v2261 = *((unsigned __int8 *)v2260 + v2259 + 4);
                if ((v2261 - 1) < 2)
                {
LABEL_1729:
                  v2270 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                  if (*v2270 <= v2259)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198723DA0);
                  }
                  v1341 = v846;
                  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v2270[2 * v2259 + 2], 2, v832, v833, v834, v835, v836);
                  goto LABEL_857;
                }
                if (v2261)
                {
                  if (v2261 != 3)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198724830);
                  }
                }
                else
                {
LABEL_1712:
                  v2262 = *(_DWORD **)(v2258 + 112);
                  if (*v2262 <= v2259)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198724100);
                  }
                  v2263 = *(_QWORD *)&v2262[2 * v2259 + 2];
                  if (v2263)
                    v2264 = (v2263 & 0xFFFE000000000002) == 0;
                  else
                    v2264 = 0;
                  if (!v2264)
                    goto LABEL_1729;
                  v2265 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2263 & 0xFFFFFFFE) + 0x4C));
                  if (v2265 != &JSC::SymbolTable::s_info && v2265 != &JSC::JSTemplateObjectDescriptor::s_info)
                    goto LABEL_1729;
                }
                v2267 = *v2551;
                v2536 = v846;
                if ((*v2551 + 4) > *v12)
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v2549, v830, v831, v832, v833, v834, v835, v836);
                  v2267 = *v2551;
                }
                *(_DWORD *)(*(_QWORD *)v2549 + v2267) = -129956958;
                v2268 = *v2551;
                v2269 = *v2551 + 4;
                *v2551 = v2269;
                if ((v2268 + 8) > *v12)
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v2549, v830, v831, v832, v833, v834, v835, v836);
                  v2269 = *v2551;
                }
                *(_DWORD *)(*((_QWORD *)this + 7) + v2269) = -129367998;
                *((_DWORD *)this + 50) += 4;
                JSC::MacroAssemblerARM64::load64((uint64_t)this, (v860 << 35) | 2, 2, v832, v833, v834, v835, v836);
                v846 = v2536;
              }
LABEL_1528:
              v2151 = *(JSC::ARM64LogicalImmediate **)v846;
              v2152 = *v2551;
              if ((*v2551 + 4) > *v12)
              {
                v2537 = v846;
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v830, v831, v832, v833, v834, v835, v836);
                v846 = v2537;
                v2152 = *v2551;
              }
              *(_DWORD *)(*(_QWORD *)v2549 + v2152) = -129989824;
              *v2551 += 4;
              if (v2151 && *((_BYTE *)this + 793))
              {
                if (!*(_BYTE *)(v852 + 64))
                {
                  v2154 = v846;
                  JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((int *)&v2554.markerName[154], (uint64_t)this, (uint64_t)operationValueMulProfiled, v2151, v833, v834, v835, v836);
                  goto LABEL_1536;
                }
                v2153 = operationValueMulProfiledOptimize;
              }
              else
              {
                v2153 = operationValueMulOptimize;
              }
              v2154 = v846;
              JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((int *)&v2554.markerName[154], (uint64_t)this, (uint64_t)v2153, v846, v833, v834, v835, v836);
LABEL_1536:
              *(_QWORD *)(v852 + 12) = *(_QWORD *)&v2554.markerName[154];
              JSC::MacroAssemblerARM64::store64((uint64_t)this, 0, (v2540 << 35) | 0x1D, v2155, v2156, v2157, v2158, v2159);
              v2160 = WTF::fastMalloc((WTF *)0x28);
              *(_DWORD *)(v2160 + 8) = 1;
              *(_QWORD *)v2160 = off_1E3595D58;
              *(_QWORD *)(v2160 + 16) = this;
              *(_QWORD *)(v2160 + 24) = v23;
              *(_QWORD *)(v2160 + 32) = v2154;
              v2161 = *((unsigned int *)this + 61);
              if ((_DWORD)v2161 == *((_DWORD *)this + 60))
              {
                v2163 = v2161 + (v2161 >> 2);
                if (v2163 >= 0x10)
                  v2164 = v2163 + 1;
                else
                  v2164 = 16;
                if (v2164 <= v2161 + 1)
                  v2165 = v2161 + 1;
                else
                  v2165 = v2164;
                if (v2165 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198724B60);
                }
                v2166 = (const void *)*((_QWORD *)this + 29);
                v2167 = (void *)WTF::fastMalloc((WTF *)(8 * v2165));
                *((_DWORD *)this + 60) = v2165;
                *((_QWORD *)this + 29) = v2167;
                memcpy(v2167, v2166, 8 * v2161);
                if (v2166)
                {
                  if (*((const void **)this + 29) == v2166)
                  {
                    *((_QWORD *)this + 29) = 0;
                    *((_DWORD *)this + 60) = 0;
                  }
                  WTF::fastFree((unint64_t)v2166, v28, v29, v30, v31, v32, v33, v34);
                }
                v2161 = *((unsigned int *)this + 61);
                v2162 = (uint64_t *)(*((_QWORD *)this + 29) + 8 * v2161);
              }
              else
              {
                v2162 = (uint64_t *)(*((_QWORD *)this + 29) + 8 * v2161);
              }
              *v2162 = v2160;
              *((_DWORD *)this + 61) = v2161 + 1;
LABEL_1548:
              jj = v2552;
              goto LABEL_1549;
            }
            if ((int)v865 < 0x40000000)
            {
              v2150 = v846;
              JSC::MacroAssemblerARM64::load64((uint64_t)this, (v865 << 35) | 0x1D, 1, v832, v833, v834, v835, v836);
              v846 = v2150;
              goto LABEL_1528;
            }
            v2241 = *(_QWORD *)(*((_QWORD *)this + 100) + 56);
            v2242 = (v865 - 0x40000000);
            v2243 = *(_DWORD **)(v2241 + 120);
            if (!v2243 || *v2243 <= v2242)
              goto LABEL_1683;
            v2244 = *((unsigned __int8 *)v2243 + v2242 + 4);
            if ((v2244 - 1) < 2)
              goto LABEL_1699;
            if (v2244)
            {
              if (v2244 != 3)
              {
                __break(0xC471u);
                JUMPOUT(0x198724810);
              }
            }
            else
            {
LABEL_1683:
              v2245 = *(_DWORD **)(v2241 + 112);
              if (*v2245 <= v2242)
              {
                __break(0xC471u);
                JUMPOUT(0x198723DE0);
              }
              v2246 = *(_QWORD *)&v2245[2 * v2242 + 2];
              if (v2246)
                v2247 = (v2246 & 0xFFFE000000000002) == 0;
              else
                v2247 = 0;
              if (!v2247
                || ((v2248 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v2246 & 0xFFFFFFFE) + 0x4C)),
                     v2248 != &JSC::SymbolTable::s_info)
                  ? (v2249 = v2248 == &JSC::JSTemplateObjectDescriptor::s_info)
                  : (v2249 = 1),
                    !v2249))
              {
LABEL_1699:
                v2254 = *(_DWORD **)(*((_QWORD *)this + 101) + 112);
                if (*v2254 <= v2242)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198723D7CLL);
                }
                v1341 = v846;
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, *(_QWORD *)&v2254[2 * v2242 + 2], 1, v832, v833, v834, v835, v836);
                goto LABEL_857;
              }
            }
            v2250 = *v2551;
            if ((*v2551 + 4) > *v12)
            {
              v2535 = v846;
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v830, v831, v832, v833, v834, v835, v836);
              v846 = v2535;
              v2250 = *v2551;
            }
            v2251 = v846;
            *(_DWORD *)(*(_QWORD *)v2549 + v2250) = -129956959;
            v2252 = *v2551;
            v2253 = *v2551 + 4;
            *v2551 = v2253;
            if ((v2252 + 8) > *v12)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v830, v831, v832, v833, v834, v835, v836);
              v2253 = *v2551;
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v2253) = -129368031;
            *((_DWORD *)this + 50) += 4;
            JSC::MacroAssemblerARM64::load64((uint64_t)this, (v865 << 35) | 1, 1, v832, v833, v834, v835, v836);
            v846 = v2251;
            goto LABEL_1528;
          case 159:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_div;
            goto LABEL_746;
          case 160:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v428 = *((_QWORD *)this + 97);
            if (v428)
            {
              v429 = *(_DWORD *)(v428 - 8);
              v430 = (~(v23 << 32) + v23) ^ ((~(v23 << 32) + v23) >> 22);
              v431 = 9 * ((v430 + ~(v430 << 13)) ^ ((v430 + ~(v430 << 13)) >> 8));
              v432 = (v431 ^ (v431 >> 15)) + ~((v431 ^ (v431 >> 15)) << 27);
              v433 = (v432 >> 31) ^ v432;
              v434 = v429 & v433;
              v435 = *(_QWORD *)(v428 + 16 * v434);
              if (v435 == v23)
              {
LABEL_255:
                v437 = *(JSC::ARM64LogicalImmediate **)(v428 + 16 * v434 + 8);
                goto LABEL_256;
              }
              v436 = 1;
              while (v435)
              {
                v434 = ((_DWORD)v434 + v436) & v429;
                v435 = *(_QWORD *)(v428 + 16 * v434);
                ++v436;
                if (v435 == v23)
                  goto LABEL_255;
              }
              v437 = 0;
            }
            else
            {
              v437 = 0;
              v2523 = (~(v23 << 32) + v23) ^ ((~(v23 << 32) + v23) >> 22);
              v2524 = 9 * ((v2523 + ~(v2523 << 13)) ^ ((v2523 + ~(v2523 << 13)) >> 8));
              v2525 = (v2524 ^ (v2524 >> 15)) + ~((v2524 ^ (v2524 >> 15)) << 27);
              v433 = (v2525 >> 31) ^ v2525;
            }
LABEL_256:
            v438 = *((_QWORD *)this + 98);
            v439 = *(_DWORD *)(v438 - 8);
            v440 = v439 & v433;
            v441 = *(_QWORD *)(v438 + 16 * v440);
            if (v441 != v23)
            {
              v442 = 1;
              while (v441)
              {
                v440 = ((_DWORD)v440 + v442) & v439;
                v441 = *(_QWORD *)(v438 + 16 * v440);
                ++v442;
                if (v441 == v23)
                  goto LABEL_260;
              }
              v440 = *(unsigned int *)(v438 - 4);
            }
LABEL_260:
            v443 = *(_QWORD *)(v438 + 16 * v440 + 8);
            for (i5 = *((_DWORD *)this + 50); i5 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i5)
            {
              if ((i5 + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v421, v422, v423, v424, v425, v426, v427);
                i5 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + i5) = -721215457;
              i5 = *((_DWORD *)this + 50) + 4;
            }
            *((_DWORD *)this + 52) = 0;
            *(_DWORD *)(v443 + 8) = i5;
            v445 = *(unsigned __int8 *)v23;
            if (v445 == 128)
            {
              v2222 = *(__int16 *)(v23 + 2);
              if (v2222 <= 63)
                v447 = v2222;
              else
                v447 = (v2222 + 1073741760);
              v2223 = *(__int16 *)(v23 + 4);
              v449 = *(__int16 *)(v23 + 6);
              if (v449 > 63)
                v449 += 1073741760;
              if (v2223 <= 63)
              {
LABEL_269:
                if (v449 >= 0x40000000)
                {
                  v450 = *((_QWORD *)this + 101);
                  v451 = (v449 - 0x40000000);
                  v452 = *(_DWORD **)(v450 + 120);
                  if (!v452 || *v452 <= v451 || *((_BYTE *)v452 + v451 + 4) != 3)
                  {
                    v453 = *(_DWORD **)(v450 + 112);
                    if (*v453 <= v451)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19872385CLL);
                    }
                    if (v452
                      && *(_QWORD *)&v453[2 * v451 + 2] >= 0xFFFE000000000000
                      && *v452 > v451
                      && *((_BYTE *)v452 + v451 + 4) == 3)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19872387CLL);
                    }
                  }
                }
                goto LABEL_278;
              }
              v2198 = (unsigned __int16)v2223 + 1073741760;
            }
            else if (v445 == 130)
            {
              v447 = *(unsigned int *)(v23 + 2);
              v2198 = *(_DWORD *)(v23 + 6);
              v449 = *(_DWORD *)(v23 + 10);
            }
            else
            {
              v446 = *(char *)(v23 + 1);
              if (v446 <= 15)
                v447 = v446;
              else
                v447 = (v446 + 1073741808);
              v448 = *(char *)(v23 + 2);
              v449 = *(char *)(v23 + 3);
              if (v449 > 15)
                v449 += 1073741808;
              if (v448 < 16)
                goto LABEL_269;
              v2198 = v448 + 1073741808;
            }
            if (v2198 < 0x40000000)
              goto LABEL_269;
            v2199 = *((_QWORD *)this + 101);
            v2200 = (v2198 - 0x40000000);
            v2201 = *(_DWORD **)(v2199 + 120);
            if (v2201)
            {
              if (*v2201 > v2200 && *((_BYTE *)v2201 + v2200 + 4) == 3)
                goto LABEL_269;
            }
            v2202 = *(_DWORD **)(v2199 + 112);
            if (*v2202 <= v2200)
            {
              __break(0xC471u);
              JUMPOUT(0x198723CFCLL);
            }
            if (*(_QWORD *)&v2202[2 * v2200 + 2] < 0xFFFE000000000000)
              goto LABEL_269;
            if (v2201 && *v2201 > v2200 && *((_BYTE *)v2201 + v2200 + 4) == 3)
            {
              __break(0xC471u);
              JUMPOUT(0x198723D3CLL);
            }
LABEL_278:
            v454 = *(JSC::ARM64LogicalImmediate **)v437;
            v455 = *v2551;
            if ((*v2551 + 4) > *v2550)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v421, v422, v423, v424, v425, v426, v427);
              v455 = *v2551;
            }
            *(_DWORD *)(*(_QWORD *)v2549 + v455) = -129989824;
            *v2551 += 4;
            if (v454 && *((_BYTE *)this + 793))
            {
              v12 = v2550;
              if (*(_BYTE *)(v443 + 64))
                JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((int *)&v2554.markerName[154], (uint64_t)this, (uint64_t)operationValueSubProfiledOptimize, v437, v424, v425, v426, v427);
              else
                JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((int *)&v2554.markerName[154], (uint64_t)this, (uint64_t)operationValueSubProfiled, v454, v424, v425, v426, v427);
              *(_QWORD *)(v443 + 12) = *(_QWORD *)&v2554.markerName[154];
            }
            else
            {
              JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::BinaryArithProfile *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((int *)&v2554.markerName[154], (uint64_t)this, (uint64_t)operationValueSubOptimize, v437, v424, v425, v426, v427);
              *(_QWORD *)(v443 + 12) = *(_QWORD *)&v2554.markerName[154];
              v12 = v2550;
            }
            JSC::MacroAssemblerARM64::store64((uint64_t)this, 0, (v447 << 35) | 0x1D, v456, v457, v458, v459, v460);
            v461 = WTF::fastMalloc((WTF *)0x28);
            *(_DWORD *)(v461 + 8) = 1;
            *(_QWORD *)v461 = off_1E3595D80;
            *(_QWORD *)(v461 + 16) = this;
            *(_QWORD *)(v461 + 24) = v23;
            *(_QWORD *)(v461 + 32) = v437;
            v462 = *((unsigned int *)this + 61);
            if ((_DWORD)v462 != *((_DWORD *)this + 60))
              goto LABEL_1422;
            v463 = v462 + (v462 >> 2);
            if (v463 >= 0x10)
              v464 = v463 + 1;
            else
              v464 = 16;
            if (v464 <= v462 + 1)
              v465 = v462 + 1;
            else
              v465 = v464;
            if (v465 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x198724B78);
            }
            goto LABEL_1430;
          case 161:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_bitand;
            goto LABEL_746;
          case 162:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_bitor;
            goto LABEL_746;
          case 163:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_bitxor;
            goto LABEL_746;
          case 164:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_lshift;
            goto LABEL_746;
          case 165:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_rshift;
            goto LABEL_746;
          case 168:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_to_string;
            goto LABEL_746;
          case 169:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_unsigned;
            goto LABEL_746;
          case 173:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_typeof_is_function;
            goto LABEL_746;
          case 181:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_inc;
            goto LABEL_746;
          case 182:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_dec;
            goto LABEL_746;
          case 183:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v881 = *((_QWORD *)this + 97);
            if (v881)
            {
              v882 = *(_DWORD *)(v881 - 8);
              v883 = (~(v23 << 32) + v23) ^ ((~(v23 << 32) + v23) >> 22);
              v884 = 9 * ((v883 + ~(v883 << 13)) ^ ((v883 + ~(v883 << 13)) >> 8));
              v885 = (v884 ^ (v884 >> 15)) + ~((v884 ^ (v884 >> 15)) << 27);
              v886 = (v885 >> 31) ^ v885;
              v887 = v882 & v886;
              v888 = *(_QWORD *)(v881 + 16 * v887);
              if (v888 == v23)
              {
LABEL_537:
                v890 = *(JSC::ARM64LogicalImmediate **)(v881 + 16 * v887 + 8);
                goto LABEL_538;
              }
              v889 = 1;
              while (v888)
              {
                v887 = ((_DWORD)v887 + v889) & v882;
                v888 = *(_QWORD *)(v881 + 16 * v887);
                ++v889;
                if (v888 == v23)
                  goto LABEL_537;
              }
              v890 = 0;
            }
            else
            {
              v890 = 0;
              v2529 = (~(v23 << 32) + v23) ^ ((~(v23 << 32) + v23) >> 22);
              v2530 = 9 * ((v2529 + ~(v2529 << 13)) ^ ((v2529 + ~(v2529 << 13)) >> 8));
              v2531 = (v2530 ^ (v2530 >> 15)) + ~((v2530 ^ (v2530 >> 15)) << 27);
              v886 = (v2531 >> 31) ^ v2531;
            }
LABEL_538:
            v891 = *((_QWORD *)this + 98);
            v892 = *(_DWORD *)(v891 - 8);
            v893 = v892 & v886;
            v894 = *(_QWORD *)(v891 + 16 * v893);
            if (v894 != v23)
            {
              v895 = 1;
              while (v894)
              {
                v893 = ((_DWORD)v893 + v895) & v892;
                v894 = *(_QWORD *)(v891 + 16 * v893);
                ++v895;
                if (v894 == v23)
                  goto LABEL_542;
              }
              v893 = *(unsigned int *)(v891 - 4);
            }
LABEL_542:
            v896 = *(_QWORD *)(v891 + 16 * v893 + 8);
            for (i6 = *((_DWORD *)this + 50); i6 < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i6)
            {
              if ((i6 + 4) > *v12)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v2549, v874, v875, v876, v877, v878, v879, v880);
                i6 = *v2551;
              }
              *(_DWORD *)(*((_QWORD *)this + 7) + i6) = -721215457;
              i6 = *((_DWORD *)this + 50) + 4;
            }
            *((_DWORD *)this + 52) = 0;
            *(_DWORD *)(v896 + 8) = i6;
            v898 = *(unsigned __int8 *)v23;
            if (v898 == 128)
            {
              v899 = *(__int16 *)(v23 + 2);
              v900 = v899 + 1073741760;
              v901 = v899 <= 63;
            }
            else
            {
              if (v898 == 130)
              {
                v902 = *(_DWORD *)(v23 + 2);
                goto LABEL_549;
              }
              v899 = *(char *)(v23 + 1);
              v900 = v899 + 1073741808;
              v901 = v899 <= 15;
            }
            if (v901)
              v902 = v899;
            else
              v902 = v900;
LABEL_549:
            v903 = *(JSC::ARM64LogicalImmediate **)v890;
            v904 = *v2551;
            if ((*v2551 + 4) > *v2550)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v2549, v874, v875, v876, v877, v878, v879, v880);
              v904 = *v2551;
            }
            *(_DWORD *)(*(_QWORD *)v2549 + v904) = -129989824;
            *v2551 += 4;
            if (v903 && *((_BYTE *)this + 793))
            {
              v12 = v2550;
              if (*(_BYTE *)(v896 + 64))
                JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,void *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((int *)&v2554.markerName[154], (uint64_t)this, (uint64_t)operationArithNegateProfiledOptimize, v890, v877, v878, v879, v880);
              else
                JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::UnaryArithProfile *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((int *)&v2554.markerName[154], (uint64_t)this, 0, v903, v877, v878, v879, v880);
              *(_QWORD *)(v896 + 12) = *(_QWORD *)&v2554.markerName[154];
            }
            else
            {
              JSC::JIT::callOperationWithResult<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,void *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr>((int *)&v2554.markerName[154], (uint64_t)this, (uint64_t)operationArithNegateOptimize, v890, v877, v878, v879, v880);
              *(_QWORD *)(v896 + 12) = *(_QWORD *)&v2554.markerName[154];
              v12 = v2550;
            }
            JSC::MacroAssemblerARM64::store64((uint64_t)this, 0, ((unint64_t)v902 << 35) | 0x1D, v905, v906, v907, v908, v909);
            v461 = WTF::fastMalloc((WTF *)0x28);
            *(_DWORD *)(v461 + 8) = 1;
            *(_QWORD *)v461 = off_1E3595D08;
            *(_QWORD *)(v461 + 16) = this;
            *(_QWORD *)(v461 + 24) = v23;
            *(_QWORD *)(v461 + 32) = v890;
            v462 = *((unsigned int *)this + 61);
            if ((_DWORD)v462 != *((_DWORD *)this + 60))
              goto LABEL_1422;
            v910 = v462 + (v462 >> 2);
            if (v910 >= 0x10)
              v911 = v910 + 1;
            else
              v911 = 16;
            if (v911 <= v462 + 1)
              v465 = v462 + 1;
            else
              v465 = v911;
            if (v465 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x198724A58);
            }
            goto LABEL_1430;
          case 184:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_not;
            goto LABEL_746;
          case 187:
            JSC::JIT::emitSlow_op_instanceof((uint64_t)this, v23, (unsigned int **)&v2554.markerName[18], a4, a5, a6, a7, a8);
            goto LABEL_1549;
          case 192:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_to_number;
            goto LABEL_746;
          case 193:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_to_numeric;
            goto LABEL_746;
          case 194:
            JSC::JIT::linkAllSlowCases((uint64_t)this, (unsigned int **)&v2554.markerName[18], a3, a4, a5, a6, a7, a8);
            v42 = slow_path_bitnot;
LABEL_746:
            *(_QWORD *)&v2554.markerName[154] = this;
            *(_QWORD *)&v2554.markerName[162] = v42;
            JSC::JITSlowPathCall::call((JSC::JITSlowPathCall *)&v2554.markerName[154], v35, v36, v37, v38, v39, v40, v41);
            goto LABEL_1549;
          default:
            __break(0xC471u);
            JUMPOUT(0x198724360);
        }
      }
      break;
    }
    *(_QWORD *)&v2554.markerName[154] = "Baseline_slow_";
    *(_QWORD *)&v2554.markerName[162] = 15;
    *(_OWORD *)&v2554.markerName[218] = *(_OWORD *)&(&JSC::opcodeNames)[2 * v24];
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&v2554.markerName[154], (uint64_t)&v2554.markerName[218], (int **)&v2554.markerName[130]);
    v2204 = *(WTF::StringImpl **)&v2554.markerName[130];
    if (!*(_QWORD *)&v2554.markerName[130])
    {
      __break(0xC471u);
      JUMPOUT(0x198724AE8);
    }
    v2205 = **(_DWORD **)&v2554.markerName[130];
    **(_DWORD **)&v2554.markerName[130] += 4;
    v2538 = *v2551;
    v2206 = v2205 + 2;
    v2553 = (unint64_t)v2204;
    if (v2206)
    {
      *(_DWORD *)v2204 = v2206;
      *(_QWORD *)&v2554.markerName[130] = 0;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v2204, v2203, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2271, v2272, v2273, v2274, v2275, v2276, v2277, v2278);
      v2204 = *(WTF::StringImpl **)&v2554.markerName[130];
      *(_QWORD *)&v2554.markerName[130] = 0;
      if (!v2204)
        goto LABEL_27;
    }
    if (*(_DWORD *)v2204 == 2)
    {
      WTF::StringImpl::~StringImpl(v2204, v2203, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v2279, v2280, v2281, v2282, v2283, v2284, v2285, v2286);
    }
    else
    {
      *(_DWORD *)v2204 -= 2;
    }
    goto LABEL_27;
  }
  v10 = 0;
LABEL_2370:
  if (v10 != *((_DWORD *)this + 182))
  {
    __break(0xC471u);
    JUMPOUT(0x19872369CLL);
  }
  if (*((_DWORD *)this + 107) != *((_DWORD *)this + 170))
  {
    __break(0xC471u);
    JUMPOUT(0x1987236BCLL);
  }
  if (*((_DWORD *)this + 115) != *((_DWORD *)this + 172))
  {
    __break(0xC471u);
    JUMPOUT(0x1987236DCLL);
  }
  if (*((_DWORD *)this + 119) != *((_DWORD *)this + 173))
  {
    __break(0xC471u);
    JUMPOUT(0x1987236FCLL);
  }
  if (*((_DWORD *)this + 123) != *((_DWORD *)this + 174))
  {
    __break(0xC471u);
    JUMPOUT(0x19872371CLL);
  }
  if (*((_DWORD *)this + 127) != *((_DWORD *)this + 175))
  {
    __break(0xC471u);
    JUMPOUT(0x19872373CLL);
  }
  if (*((_DWORD *)this + 131) != *((_DWORD *)this + 176))
  {
    __break(0xC471u);
    JUMPOUT(0x19872375CLL);
  }
  if (*((_DWORD *)this + 147) != *((_DWORD *)this + 180))
  {
    __break(0xC471u);
    JUMPOUT(0x19872377CLL);
  }
  if (*((_DWORD *)this + 151) != *((_DWORD *)this + 181))
  {
    __break(0xC471u);
    JUMPOUT(0x19872379CLL);
  }
}

