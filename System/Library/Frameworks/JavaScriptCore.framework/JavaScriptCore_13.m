uint64_t JSC::B3::eliminateDeadCodeImpl(JSC::B3 *this, JSC::B3::Procedure *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  _QWORD *v63;
  int v64;
  unint64_t StatusReg;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *casual;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  JSC::B3 *v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  WTF *v136;
  unint64_t v138;
  uint64_t v140;
  unsigned int v141;
  unint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v147;
  int v148;
  uint64_t *__src;
  void *__srca;
  unint64_t v151;
  unsigned int v152;
  unint64_t v154;
  WTF *v155;
  uint64_t v156;
  _BYTE v157[1024];
  uint64_t v158;
  _BYTE *v159;
  uint64_t v160;
  _BYTE v161[128];
  _QWORD v162[2];

  v8 = this;
  v158 = 0x8000000000000000;
  v159 = v161;
  v160 = 16;
  v155 = (WTF *)v157;
  v156 = 128;
  v9 = *((unsigned int *)this + 15);
  if ((_DWORD)v9)
  {
    v10 = 0;
    while (!*(_QWORD *)(*((_QWORD *)this + 6) + 8 * v10))
    {
      if (v9 == ++v10)
        goto LABEL_118;
    }
    if ((_DWORD)v9 == (_DWORD)v10)
      goto LABEL_118;
    v11 = *((_DWORD *)this + 15);
    while (1)
    {
      if (v11 <= v10)
      {
        __break(0xC471u);
        JUMPOUT(0x197F8B5E8);
      }
      v12 = *(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v10);
      v13 = *(unsigned int *)(v12 + 20);
      if ((_DWORD)v13)
      {
        v14 = *(uint64_t **)(v12 + 8);
        v15 = 8 * v13;
        do
        {
          v16 = *v14;
          v17 = *(unsigned __int16 *)(*v14 + 12);
          if ((v17 & 0xFE) != 0x98)
          {
            v162[0] = 0;
            v18 = 0;
            v19 = 0;
            v20 = 0;
            v21 = 0;
            v22 = 0;
            switch((char)v17)
            {
              case 9:
              case -104:
                v18 = 0;
                v19 = 0;
                v21 = 0;
                v22 = 0;
                v20 = 1;
                goto LABEL_14;
              case 10:
              case 17:
              case 18:
              case 19:
              case 20:
              case 80:
              case -103:
                goto LABEL_14;
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
                v31 = (unint64_t *)(v16 + 52);
                v32 = *(_DWORD *)(v16 + 52);
                v154 = *(_QWORD *)(v16 + 44);
                if (v32 == *(_DWORD *)(v16 + 56))
                  goto LABEL_39;
                v44 = v162;
                goto LABEL_84;
              case 68:
              case 69:
              case 70:
                v31 = (unint64_t *)(v16 + 52);
                v35 = *(_DWORD *)(v16 + 52);
                v162[0] = *(_QWORD *)(v16 + 44);
                if (v35 == *(_DWORD *)(v16 + 56))
                {
LABEL_39:
                  v22 = 0;
                }
                else
                {
                  v44 = &v154;
LABEL_84:
                  *v44 = *v31;
LABEL_85:
                  v22 = 1;
LABEL_86:
                  v8 = this;
                }
LABEL_40:
                v18 = 0;
                v20 = 0;
                v21 = 0;
                v19 = (v17 >> 9) & 1;
LABEL_14:
                if (v18 || v19 || v20 || LODWORD(v162[0]) != HIDWORD(v162[0]) || v21 || v22)
                {
LABEL_26:
                  v162[0] = v16;
                  v24 = v158;
                  if (v158 < 0)
                    v25 = 63;
                  else
                    v25 = *(_QWORD *)(2 * v158);
                  v26 = *(unsigned int *)(v16 + 8);
                  if (v25 <= v26)
                  {
                    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v158, v26 + 1, 0);
                    v8 = this;
                    v24 = v158;
                  }
                  if (v24 >= 0)
                    v27 = (uint64_t *)(2 * v24 + 8);
                  else
                    v27 = &v158;
                  v28 = (v26 >> 3) & 0x1FFFFFF8;
                  v29 = *(uint64_t *)((char *)v27 + v28);
                  *(uint64_t *)((char *)v27 + v28) = v29 | (1 << v26);
                  if ((v29 & (1 << v26)) == 0)
                  {
                    v30 = HIDWORD(v160);
                    if (HIDWORD(v160) == (_DWORD)v160)
                    {
                      v38 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v159, HIDWORD(v160) + 1, (unint64_t)v162);
                      v8 = this;
                      v30 = HIDWORD(v160);
                      *(_QWORD *)&v159[8 * HIDWORD(v160)] = *v38;
                    }
                    else
                    {
                      *(_QWORD *)&v159[8 * HIDWORD(v160)] = v16;
                    }
                    HIDWORD(v160) = v30 + 1;
                  }
                  LOWORD(v17) = *(_WORD *)(v16 + 12);
                }
                break;
              case 71:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
                v41 = *(_DWORD *)(v16 + 44);
                LODWORD(v40) = *(_DWORD *)(v16 + 48);
                if (v41 == (_DWORD)v40)
                {
                  v42 = *(_QWORD *)(v16 + 52);
                  v154 = v42;
                  v43 = HIDWORD(v42);
                  v40 = HIDWORD(v42);
                }
                else
                {
                  LODWORD(v42) = *(_DWORD *)(v16 + 52);
                  LODWORD(v43) = *(_DWORD *)(v16 + 56);
                  if ((_DWORD)v42 == (_DWORD)v43)
                  {
                    v154 = *(_QWORD *)(v16 + 44);
                    v40 = HIDWORD(v154);
                    LODWORD(v43) = v42;
                    LODWORD(v42) = v154;
                  }
                  else
                  {
                    if (v42 >= v41)
                      v42 = v41;
                    else
                      v42 = v42;
                    if (v40 <= v43)
                      v40 = v43;
                    else
                      v40 = v40;
                    if ((_DWORD)v42 == (_DWORD)v40)
                    {
                      v40 = 0;
                      LODWORD(v42) = 0;
                    }
                    else
                    {
                      v154 = v42 | (v40 << 32);
                    }
                  }
                }
                v162[0] = v42 | (v40 << 32);
                if (*(_DWORD *)(v16 + 52) != (_DWORD)v43)
                  goto LABEL_85;
                v22 = 0;
                goto LABEL_86;
              case 81:
                v18 = 0;
                v19 = 0;
                v20 = 0;
                v21 = 0;
                if ((v17 & 0xFFF) == 0x51)
                  v37 = v16;
                else
                  v37 = 0;
                v162[0] = *(_QWORD *)(v37 + 48);
                v22 = 1;
                goto LABEL_14;
              case 82:
                if ((v17 & 0xFFF) == 0x52)
                  v36 = v16;
                else
                  v36 = 0;
                v18 = *(unsigned __int8 *)(v36 + 40);
                v19 = *(unsigned __int8 *)(v36 + 41);
                v20 = *(unsigned __int8 *)(v36 + 43);
                v21 = *(unsigned __int8 *)(v36 + 46);
                v22 = *(unsigned __int8 *)(v36 + 47);
                v162[0] = *(_QWORD *)(v36 + 48);
                goto LABEL_14;
              case 83:
                if (v17 == 83)
                  v34 = v16;
                else
                  v34 = 0;
                v18 = *(unsigned __int8 *)(v34 + 112);
                v19 = *(unsigned __int8 *)(v34 + 113);
                v20 = *(unsigned __int8 *)(v34 + 115);
                v21 = *(unsigned __int8 *)(v34 + 118);
                v22 = *(unsigned __int8 *)(v34 + 119);
                v162[0] = *(_QWORD *)(v34 + 120);
                goto LABEL_14;
              case 85:
              case 86:
              case 87:
              case 88:
              case 89:
                v18 = 0;
                v20 = 0;
                v21 = 0;
                v22 = 0;
                v19 = 1;
                goto LABEL_14;
              case -102:
              case -101:
              case -100:
              case -99:
              case -98:
              case -97:
                goto LABEL_26;
              default:
                v22 = 0;
                v18 = 0;
                v19 = 0;
                v20 = 0;
                v21 = 0;
                if (v17 - 63 >= 0x10)
                  goto LABEL_14;
                goto LABEL_40;
            }
          }
          if ((v17 & 0xFFF) == 0x98)
            v23 = v16;
          else
            v23 = 0;
          v162[0] = v23;
          if (v23)
          {
            v33 = HIDWORD(v156);
            if (HIDWORD(v156) == (_DWORD)v156)
            {
              v39 = (_QWORD *)WTF::Vector<JSC::B3::UpsilonValue *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v155, HIDWORD(v156) + 1, (unint64_t)v162);
              v8 = this;
              v33 = HIDWORD(v156);
              *((_QWORD *)v155 + HIDWORD(v156)) = *v39;
            }
            else
            {
              *((_QWORD *)v155 + HIDWORD(v156)) = v23;
            }
            HIDWORD(v156) = v33 + 1;
          }
          ++v14;
          v15 -= 8;
        }
        while (v15);
        v11 = *((_DWORD *)v8 + 15);
      }
      v10 = (v10 + 1);
      if (v11 > v10)
      {
        do
        {
          if (*(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v10))
            goto LABEL_57;
          ++v10;
        }
        while (v11 != v10);
        LODWORD(v10) = v11;
      }
LABEL_57:
      if ((_DWORD)v9 == (_DWORD)v10)
        goto LABEL_118;
    }
  }
  do
  {
LABEL_118:
    v64 = HIDWORD(v160);
    if (HIDWORD(v160))
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v151 = StatusReg;
      do
      {
        v66 = *(_QWORD *)&v159[8 * v64-- - 8];
        HIDWORD(v160) = v64;
        if (!v66)
          break;
        v67 = *(unsigned __int8 *)(v66 + 20);
        if (v67 != 4)
        {
          v68 = 40;
          switch(*(_WORD *)(v66 + 12))
          {
            case 0u:
            case 1u:
            case 2u:
            case 8u:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x4Fu:
            case 0x99u:
            case 0x9Au:
            case 0x9Bu:
            case 0x9Du:
            case 0x9Eu:
            case 0x9Fu:
              goto LABEL_124;
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0x50u:
            case 0x54u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
            case 0x67u:
            case 0x68u:
            case 0x69u:
            case 0x6Au:
            case 0x6Bu:
            case 0x6Cu:
            case 0x6Du:
            case 0x6Eu:
            case 0x6Fu:
            case 0x70u:
            case 0x71u:
            case 0x72u:
            case 0x73u:
            case 0x74u:
            case 0x75u:
            case 0x76u:
            case 0x77u:
            case 0x78u:
            case 0x79u:
            case 0x7Au:
            case 0x7Bu:
            case 0x7Cu:
            case 0x7Du:
            case 0x7Eu:
            case 0x7Fu:
            case 0x80u:
            case 0x81u:
            case 0x82u:
            case 0x83u:
            case 0x84u:
            case 0x85u:
            case 0x86u:
            case 0x87u:
            case 0x88u:
            case 0x89u:
            case 0x8Au:
            case 0x8Bu:
            case 0x8Cu:
            case 0x8Du:
            case 0x8Eu:
            case 0x8Fu:
            case 0x90u:
            case 0x91u:
            case 0x92u:
            case 0x93u:
            case 0x94u:
            case 0x95u:
            case 0x96u:
            case 0x97u:
            case 0x98u:
              v69 = (uint64_t *)(v66 + 48);
              v70 = v66 + 48 + 8 * v67;
              if (v66 + 48 == v70)
                continue;
              goto LABEL_125;
            case 7u:
            case 0x51u:
            case 0x59u:
            case 0x9Cu:
              v68 = 56;
              goto LABEL_124;
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x43u:
            case 0x44u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x52u:
              v69 = (uint64_t *)(v66 + 64);
              v70 = v66 + 64 + 8 * v67;
              if (v66 + 64 == v70)
                continue;
              goto LABEL_125;
            case 0x53u:
              v69 = (uint64_t *)(v66 + 176);
              v70 = v66 + 176 + 8 * v67;
              if (v66 + 176 == v70)
                continue;
              goto LABEL_125;
            case 0x55u:
            case 0x56u:
            case 0x57u:
            case 0x58u:
              v68 = 112;
LABEL_124:
              v69 = (uint64_t *)(v66 + v68);
              v70 = v66 + v68 + 8 * v67;
              if (v66 + v68 != v70)
                goto LABEL_125;
              continue;
            default:
              __break(0xC471u);
              JUMPOUT(0x197F8C0D0);
          }
        }
        v47 = 40;
        switch(*(_WORD *)(v66 + 12))
        {
          case 0u:
          case 1u:
          case 2u:
          case 8u:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Bu:
          case 0x2Cu:
          case 0x2Du:
          case 0x2Eu:
          case 0x2Fu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
          case 0x3Cu:
          case 0x3Du:
          case 0x3Eu:
          case 0x4Fu:
          case 0x99u:
          case 0x9Au:
          case 0x9Bu:
          case 0x9Du:
          case 0x9Eu:
          case 0x9Fu:
            break;
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0x50u:
          case 0x54u:
          case 0x5Au:
          case 0x5Bu:
          case 0x5Cu:
          case 0x5Du:
          case 0x5Eu:
          case 0x5Fu:
          case 0x60u:
          case 0x61u:
          case 0x62u:
          case 0x63u:
          case 0x64u:
          case 0x65u:
          case 0x66u:
          case 0x67u:
          case 0x68u:
          case 0x69u:
          case 0x6Au:
          case 0x6Bu:
          case 0x6Cu:
          case 0x6Du:
          case 0x6Eu:
          case 0x6Fu:
          case 0x70u:
          case 0x71u:
          case 0x72u:
          case 0x73u:
          case 0x74u:
          case 0x75u:
          case 0x76u:
          case 0x77u:
          case 0x78u:
          case 0x79u:
          case 0x7Au:
          case 0x7Bu:
          case 0x7Cu:
          case 0x7Du:
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x82u:
          case 0x83u:
          case 0x84u:
          case 0x85u:
          case 0x86u:
          case 0x87u:
          case 0x88u:
          case 0x89u:
          case 0x8Au:
          case 0x8Bu:
          case 0x8Cu:
          case 0x8Du:
          case 0x8Eu:
          case 0x8Fu:
          case 0x90u:
          case 0x91u:
          case 0x92u:
          case 0x93u:
          case 0x94u:
          case 0x95u:
          case 0x96u:
          case 0x97u:
          case 0x98u:
            v47 = 48;
            break;
          case 7u:
          case 0x51u:
          case 0x59u:
          case 0x9Cu:
            v47 = 56;
            break;
          case 0x3Fu:
          case 0x40u:
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
          case 0x45u:
          case 0x46u:
          case 0x47u:
          case 0x48u:
          case 0x49u:
          case 0x4Au:
          case 0x4Bu:
          case 0x4Cu:
          case 0x4Du:
          case 0x4Eu:
          case 0x52u:
            v47 = 64;
            break;
          case 0x53u:
            v47 = 176;
            break;
          case 0x55u:
          case 0x56u:
          case 0x57u:
          case 0x58u:
            v47 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197F8C0F8);
        }
        v83 = v66 + v47;
        v69 = *(uint64_t **)v83;
        v70 = *(_QWORD *)v83 + 8 * *(unsigned int *)(v83 + 12);
        if (*(_QWORD *)v83 != v70)
        {
          while (1)
          {
LABEL_125:
            v71 = *v69;
            v162[0] = *v69;
            v72 = v158;
            if (v158 < 0)
            {
              v73 = *(unsigned int *)(v71 + 8);
              if (v73 >= 0x3F)
              {
LABEL_137:
                v78 = v73 + 64;
                v79 = ((v73 + 64) >> 3) & 0x3FFFFFF8;
                v80 = *(_QWORD *)(StatusReg + 752);
                if (!v80)
                  goto LABEL_288;
                v81 = (v79 + 23) >> 4;
                if (v79 <= 0x198)
                {
                  v82 = 23 * v81 + 7;
                }
                else
                {
                  if (v79 > 0x2708)
                    goto LABEL_288;
                  v82 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v81 + 626);
                  if (*(_DWORD *)(v80 + 8052) <= v82)
                    goto LABEL_288;
                }
                v85 = v80 + 8 * v82;
                v86 = v85 + 8064;
                *(_BYTE *)(v85 + 8064) = 1;
                v87 = *(unsigned int *)(v85 + 8080);
                if ((_DWORD)v87)
                {
                  *(_DWORD *)(v86 + 16) = v87 - *(_DWORD *)(v86 + 20);
                  casual = (uint64_t *)(*(_QWORD *)(v86 + 8) - v87);
                  goto LABEL_160;
                }
                v93 = *(_QWORD *)(v86 + 40);
                v94 = *(_QWORD *)(v86 + 24);
                if (v93)
                {
LABEL_166:
                  v95 = __clz(v93);
                  *(_QWORD *)(v86 + 40) = v93 & ~(0x8000000000000000 >> v95);
                  casual = (uint64_t *)(v94 + 16 * v95);
LABEL_160:
                  *(_BYTE *)v86 = 0;
                }
                else
                {
                  if (*(_BYTE *)(v86 + 5) == 6)
                  {
                    v140 = *(unsigned int *)(v86 + 32);
                    v141 = *(_DWORD *)(v86 + 36);
                    if (v140 < v141)
                    {
                      *(_QWORD *)(v86 + 8 * v140 + 56) = 0;
                      v142 = (unint64_t *)(v80 + 8128 + 8 * v82 + 8 * v140);
                      v143 = v141 - 1 - v140;
                      while (v143)
                      {
                        v94 += 1024;
                        v145 = *v142++;
                        v144 = v145;
                        LODWORD(v140) = v140 + 1;
                        --v143;
                        if (v145)
                        {
                          v93 = __rbit64(v144);
                          *(_DWORD *)(v86 + 32) = v140;
                          *(_QWORD *)(v86 + 24) = v94;
                          goto LABEL_166;
                        }
                      }
                      *(_DWORD *)(v86 + 32) = v141;
                    }
                  }
                  *(_BYTE *)v86 = 0;
LABEL_288:
                  casual = (uint64_t *)bmalloc_allocate_casual(v79 + 8, 1);
                }
                *casual = v78 & 0x1FFFFFFC0;
                v89 = v78 >> 6;
                if (v158 < 0)
                {
                  casual[1] = v158 & 0x7FFFFFFFFFFFFFFFLL;
                  v92 = casual;
                  bzero(casual + 2, 8 * v89 - 8);
                  StatusReg = v151;
                }
                else
                {
                  v90 = 2 * v158;
                  v91 = *(_QWORD *)(2 * v158);
                  __src = casual;
                  if (v91 <= v73)
                  {
                    v147 = v91 + 63;
                    v96 = (v91 + 63) >> 6;
                    v97 = casual + 1;
                    memcpy(casual + 1, (const void *)(v90 + 8), 8 * v96);
                    if (v89 < v147 >> 6)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197F8C060);
                    }
                    bzero(&v97[v96], 8 * (v89 - v96));
                    v90 = 2 * v158;
                  }
                  else
                  {
                    memcpy(casual + 1, (const void *)(v90 + 8), 8 * v89);
                  }
                  StatusReg = v151;
                  v98 = *(_QWORD *)(v151 + 752);
                  if (v98)
                  {
                    if (v90 >> 43
                      || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v90 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v90)) & 1) == 0)
                    {
                      if (v90 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v90 >> 24)
                      {
                        a4 = 0;
                      }
                      else
                      {
                        a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                        + ((((v90 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                        + 24) >> (2 * ((BYTE3(v90) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                        if ((_DWORD)a4 == 1)
                          goto LABEL_172;
                      }
                      bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v98, v90, 1, a4, a5, a6, a7, a8);
                    }
                    else
                    {
LABEL_172:
                      v99 = *(unsigned int *)(v98 + 8000);
                      if (v99 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v98, v90, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                      }
                      else
                      {
                        *(_QWORD *)(v98 + 8 * v99) = v90 | 0x5000000000000;
                        *(_DWORD *)(v98 + 8000) = v99 + 1;
                      }
                    }
                  }
                  else
                  {
                    pas_try_deallocate_slow_no_cache(v90, (uint64_t)&bmalloc_heap_config, 1);
                  }
                  v92 = __src;
                }
                v72 = (unint64_t)v92 >> 1;
                v158 = (unint64_t)v92 >> 1;
                v8 = this;
              }
            }
            else
            {
              v73 = *(unsigned int *)(v71 + 8);
              if (*(_QWORD *)(2 * v158) <= v73)
                goto LABEL_137;
            }
            if (v72 >= 0)
              v74 = (uint64_t *)(2 * v72 + 8);
            else
              v74 = &v158;
            v75 = (v73 >> 3) & 0x1FFFFFF8;
            v76 = *(uint64_t *)((char *)v74 + v75);
            *(uint64_t *)((char *)v74 + v75) = v76 | (1 << v73);
            if ((v76 & (1 << v73)) == 0)
            {
              v77 = HIDWORD(v160);
              if (HIDWORD(v160) == (_DWORD)v160)
              {
                v84 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v159, HIDWORD(v160) + 1, (unint64_t)v162);
                v8 = this;
                v77 = HIDWORD(v160);
                *(_QWORD *)&v159[8 * HIDWORD(v160)] = *v84;
              }
              else
              {
                *(_QWORD *)&v159[8 * HIDWORD(v160)] = v71;
              }
              HIDWORD(v160) = v77 + 1;
            }
            if (++v69 == (uint64_t *)v70)
            {
              v64 = HIDWORD(v160);
              break;
            }
          }
        }
      }
      while (v64);
    }
    v48 = HIDWORD(v156);
    if (!HIDWORD(v156))
      break;
    v45 = 0;
    v46 = 0;
    do
    {
      v49 = *((_QWORD *)v155 + v45);
      v50 = *(_QWORD *)(v49 + 40);
      if (v50)
      {
        v51 = v158;
        v52 = (_QWORD *)(2 * v158);
        v53 = v158 < 0 ? 63 : *v52;
        v54 = *(unsigned int *)(v50 + 8);
        if (v53 > v54)
        {
          v55 = v52 + 1;
          if (v158 < 0)
            v55 = &v158;
          if (((*(unint64_t *)((char *)v55 + ((v54 >> 3) & 0x1FFFFFF8)) >> v54) & 1) != 0)
          {
            v162[0] = *((_QWORD *)v155 + v45);
            if (v158 < 0)
              v56 = 63;
            else
              v56 = *v52;
            v57 = *(unsigned int *)(v49 + 8);
            if (v56 <= v57)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v158, v57 + 1, 0);
              v8 = this;
              v51 = v158;
              v52 = (_QWORD *)(2 * v158);
            }
            v58 = v52 + 1;
            if (v51 < 0)
              v58 = &v158;
            v59 = (v57 >> 3) & 0x1FFFFFF8;
            v60 = *(uint64_t *)((char *)v58 + v59);
            *(uint64_t *)((char *)v58 + v59) = v60 | (1 << v57);
            if ((v60 & (1 << v57)) == 0)
            {
              v61 = HIDWORD(v160);
              if (HIDWORD(v160) == (_DWORD)v160)
              {
                v63 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v159, HIDWORD(v160) + 1, (unint64_t)v162);
                v8 = this;
                v61 = HIDWORD(v160);
                *(_QWORD *)&v159[8 * HIDWORD(v160)] = *v63;
              }
              else
              {
                *(_QWORD *)&v159[8 * HIDWORD(v160)] = v49;
              }
              HIDWORD(v160) = v61 + 1;
            }
            v62 = HIDWORD(v156);
            if (!HIDWORD(v156))
            {
              __break(0xC471u);
              JUMPOUT(0x197F8C100);
            }
            if (v45 >= HIDWORD(v156))
            {
              __break(0xC471u);
              JUMPOUT(0x197F8C108);
            }
            *((_QWORD *)v155 + v45--) = *((_QWORD *)v155 + HIDWORD(v156) - 1);
            v48 = v62 - 1;
            HIDWORD(v156) = v48;
            v46 = 1;
          }
        }
      }
      ++v45;
    }
    while (v45 < v48);
  }
  while ((v46 & 1) != 0);
  v162[0] = 0x8000000000000000;
  v100 = *((unsigned int *)v8 + 15);
  if ((_DWORD)v100)
  {
    v101 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v101))
    {
      if (v100 == ++v101)
        goto LABEL_182;
    }
    if ((_DWORD)v100 != (_DWORD)v101)
    {
      v102 = 0;
      v106 = *((_DWORD *)v8 + 15);
      v152 = v106;
      while (1)
      {
        if (v106 <= v101)
        {
          __break(0xC471u);
          JUMPOUT(0x197F8C118);
        }
        v107 = *(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v101);
        v108 = *(unsigned int *)(v107 + 20);
        if ((_DWORD)v108)
          break;
        LODWORD(v109) = 0;
LABEL_223:
        *(_DWORD *)(v107 + 20) = v109;
        v101 = (v101 + 1);
        if (v106 > v101)
        {
          while (!*(_QWORD *)(*((_QWORD *)v8 + 6) + 8 * v101))
          {
            if (v106 == ++v101)
            {
              LODWORD(v101) = v106;
              break;
            }
          }
        }
        if ((_DWORD)v100 == (_DWORD)v101)
          goto LABEL_183;
      }
      v109 = 0;
      v110 = 0;
      while (1)
      {
        v111 = *(_QWORD *)(*(_QWORD *)(v107 + 8) + 8 * v110);
        if (!v111)
        {
          v114 = MEMORY[8];
LABEL_217:
          v122 = *((_QWORD *)v8 + 8);
          if (*(_QWORD *)(v122 + 8 * v114) != v111)
          {
            __break(0xC471u);
            JUMPOUT(0x197F8BFB4);
          }
          v123 = *((unsigned int *)v8 + 23);
          if ((_DWORD)v123 == *((_DWORD *)v8 + 22))
          {
            v126 = v123 + (v123 >> 2);
            if (v126 >= 0x10)
              v127 = v126 + 1;
            else
              v127 = 16;
            if (v127 <= v123 + 1)
              v127 = v123 + 1;
            if (v127 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x197F8C110);
            }
            v148 = v127;
            __srca = (void *)*((_QWORD *)v8 + 10);
            v128 = v8;
            v129 = (void *)WTF::fastMalloc((WTF *)(8 * v127));
            *((_DWORD *)v128 + 22) = v148;
            *((_QWORD *)v128 + 10) = v129;
            memcpy(v129, __srca, 8 * v123);
            if (__srca)
            {
              if (*((void **)v128 + 10) == __srca)
              {
                *((_QWORD *)v128 + 10) = 0;
                *((_DWORD *)v128 + 22) = 0;
              }
              WTF::fastFree((unint64_t)__srca, a2, v130, a4, a5, a6, a7, a8);
            }
            v123 = *((unsigned int *)v128 + 23);
            *(_QWORD *)(*((_QWORD *)v128 + 10) + 8 * v123) = *(unsigned int *)(v111 + 8);
            v122 = *((_QWORD *)v128 + 8);
            v8 = v128;
            LODWORD(v100) = v152;
          }
          else
          {
            *(_QWORD *)(*((_QWORD *)v8 + 10) + 8 * v123) = v114;
          }
          *((_DWORD *)v8 + 23) = v123 + 1;
          v124 = *(unsigned int *)(v111 + 8);
          v125 = *(_QWORD *)(v122 + 8 * v124);
          *(_QWORD *)(v122 + 8 * v124) = 0;
          if (v125)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
            LODWORD(v100) = v152;
            v8 = this;
          }
          v108 = *(unsigned int *)(v107 + 20);
          v102 = 1;
          goto LABEL_213;
        }
        v112 = (_QWORD *)(2 * v158);
        if (v158 < 0)
          v113 = 63;
        else
          v113 = *v112;
        v114 = *(unsigned int *)(v111 + 8);
        if (v113 <= v114)
          goto LABEL_217;
        v115 = v112 + 1;
        v116 = v158 >= 0 ? v115 : &v158;
        if (((*(unint64_t *)((char *)v116 + ((v114 >> 3) & 0x1FFFFFF8)) >> v114) & 1) == 0)
          goto LABEL_217;
        v117 = *(_WORD *)(v111 + 12);
        if (v117 == 10)
        {
          if ((*(_WORD *)(v111 + 12) & 0xF00) == 0)
            goto LABEL_203;
        }
        else if (v117 == 9 && (*(_WORD *)(v111 + 12) & 0xF00) == 0)
        {
LABEL_203:
          v118 = v162[0];
          if ((v162[0] & 0x8000000000000000) != 0)
            v119 = 63;
          else
            v119 = *(_QWORD *)(2 * v162[0]);
          v120 = **(unsigned int **)(v111 + 40);
          if (v119 <= v120)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v162, v120 + 1, 0);
            LODWORD(v100) = v152;
            v8 = this;
            v118 = v162[0];
            v108 = *(unsigned int *)(v107 + 20);
          }
          if (v118 >= 0)
            v121 = (_QWORD *)(2 * v118 + 8);
          else
            v121 = v162;
          *(_QWORD *)((char *)v121 + ((v120 >> 3) & 0x1FFFFFF8)) |= 1 << v120;
        }
        if (v109 >= v108)
        {
          __break(0xC471u);
          JUMPOUT(0x197F8C0D8);
        }
        *(_QWORD *)(*(_QWORD *)(v107 + 8) + 8 * v109++) = v111;
LABEL_213:
        if (++v110 >= v108)
        {
          v106 = *((_DWORD *)v8 + 15);
          goto LABEL_223;
        }
      }
    }
  }
LABEL_182:
  v102 = 0;
LABEL_183:
  v103 = v102;
  v104 = *((unsigned int *)v8 + 3);
  if ((_DWORD)v104)
  {
    v105 = 0;
    while (!*(_QWORD *)(*(_QWORD *)v8 + 8 * v105))
    {
      if (v104 == ++v105)
        goto LABEL_259;
    }
    if ((_DWORD)v104 != (_DWORD)v105)
    {
      v131 = v162[0];
      if (v162[0] >= 0)
        v132 = (_QWORD *)(2 * v162[0] + 8);
      else
        v132 = v162;
      v133 = *((_DWORD *)v8 + 3);
      do
      {
        a2 = *(JSC::B3::Procedure **)(*(_QWORD *)v8 + 8 * v105);
        if (!a2
          || (v131 < 0 ? (v134 = 63) : (v134 = *(_QWORD *)(2 * v131)),
              (v135 = *(unsigned int *)a2, v134 <= v135)
           || ((*(_QWORD *)((char *)v132 + ((v135 >> 3) & 0x1FFFFFF8)) >> v135) & 1) == 0))
        {
          JSC::B3::SparseCollection<JSC::B3::Variable>::remove((uint64_t *)v8, (unsigned int *)a2, (uint64_t)v8, a4, a5, a6, a7, a8);
          v8 = this;
          v133 = *((_DWORD *)this + 3);
        }
        v105 = (v105 + 1);
        if (v133 > v105)
        {
          while (!*(_QWORD *)(*(_QWORD *)v8 + 8 * v105))
          {
            if (v133 == ++v105)
            {
              LODWORD(v105) = v133;
              break;
            }
          }
        }
      }
      while ((_DWORD)v104 != (_DWORD)v105);
    }
  }
LABEL_259:
  if ((v162[0] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v162[0], a2, (uint64_t)v8, a4, a5, a6, a7, a8);
  v136 = v155;
  if (v157 != (_BYTE *)v155 && v155 != 0)
  {
    v155 = 0;
    LODWORD(v156) = 0;
    WTF::fastFree((unint64_t)v136, a2, (uint64_t)v8, a4, a5, a6, a7, a8);
  }
  v138 = (unint64_t)v159;
  if (v161 != v159 && v159)
  {
    v159 = 0;
    LODWORD(v160) = 0;
    WTF::fastFree(v138, a2, (uint64_t)v8, a4, a5, a6, a7, a8);
  }
  if ((v158 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v158, a2, (uint64_t)v8, a4, a5, a6, a7, a8);
  return v103 & 1;
}

uint64_t JSC::B3::eliminateDeadCode(WTF **this, JSC::B3::Procedure *a2)
{
  JSC::B3::Procedure *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  WTF *v19;
  const char *v21;
  _QWORD v22[3];
  uint64_t v23;
  WTF *v24;
  const char *v25[2];

  JSC::B3::PhaseScope::PhaseScope((uint64_t)v22, this, (uint64_t)"eliminateDeadCode", 18);
  v17 = JSC::B3::eliminateDeadCodeImpl((JSC::B3 *)this, v3, v4, v5, v6, v7, v8, v9);
  v18 = (const char *)v22[0];
  *(_QWORD *)(v22[0] + 144) = v22[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v24)
      v21 = (char *)v24 + 16;
    else
      v21 = 0;
    v25[0] = v18;
    v25[1] = v21;
  }
  v19 = v24;
  v24 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
      WTF::fastFree((unint64_t)v19, v10, v11, v12, v13, v14, v15, v16);
    else
      --*(_DWORD *)v19;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v23);
  return v17;
}

BOOL JSC::B3::ensureLoopPreHeaders(JSC::B3 *this, JSC::B3::Procedure *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int **v19;
  unsigned int **v20;
  uint64_t v21;
  unsigned int *v22;
  _QWORD *v23;
  double v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char **v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  _QWORD **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unsigned int *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  WTF *v72;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  _QWORD *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL8 v88;
  void *__src;
  JSC::B3::Procedure *v91;
  WTF *v92;
  uint64_t v93;
  _BYTE v94[32];
  char *v95;
  _QWORD v96[2];
  _QWORD v97[17];
  _QWORD v98[2];

  v3 = JSC::B3::Procedure::naturalLoops(this);
  v95 = (char *)this + 48;
  v96[0] = v97;
  v96[1] = 8;
  v91 = this;
  v97[16] = this;
  v11 = *(_DWORD *)(v3 + 20);
  if (!v11)
    goto LABEL_96;
  v12 = v3;
  do
  {
LABEL_3:
    if (*(_DWORD *)(v12 + 20) <= --v11)
    {
      __break(0xC471u);
      JUMPOUT(0x197F8CF24);
    }
    v13 = *(_QWORD *)(v12 + 8);
    v14 = v13 + 72 * v11;
    v92 = (WTF *)v94;
    v93 = 4;
    v16 = (unsigned int **)(v14 + 8);
    v15 = *(_QWORD *)(v14 + 8);
    v17 = *(unsigned int *)(v15 + 36);
    if (!(_DWORD)v17)
      goto LABEL_70;
    v18 = 0;
    v19 = *(unsigned int ***)(v15 + 24);
    v20 = &v19[v17];
    v21 = v13 + 72 * v11;
    v22 = (unsigned int *)(v21 + 28);
    v23 = (_QWORD *)(v21 + 16);
    v24 = 0.0;
    do
    {
      v98[0] = 0;
      v25 = *v19;
      v98[0] = *v19;
      v26 = *v22;
      if (v26 > 3)
      {
        v29 = *(unsigned int *)(*(_QWORD *)(v12 + 312) + 8 * *v25);
        if ((_DWORD)v29 != -1)
        {
          v30 = *(_DWORD *)(v12 + 20);
          if (v30 <= v29)
            goto LABEL_103;
          v31 = *(_QWORD *)(v12 + 8);
          if (!v31 || v31 + 72 * v29 == v14)
          {
            if (v31)
              goto LABEL_23;
          }
          else
          {
            while (1)
            {
              LODWORD(v29) = *(_DWORD *)(v31 + 72 * v29 + 64);
              if ((_DWORD)v29 == -1)
                break;
              if (v30 <= v29)
              {
                __break(0xC471u);
                JUMPOUT(0x197F8CF1CLL);
              }
              if (v31 + 72 * v29 == v14)
                goto LABEL_23;
            }
          }
        }
      }
      else
      {
        v27 = 8 * v26;
        while (v27)
        {
          v28 = *(unsigned int **)(*v23 - 8 + v27);
          v27 -= 8;
          if (v28 == v25)
            goto LABEL_23;
        }
      }
      if (v18 == (_DWORD)v93)
      {
        v32 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v92, v18 + 1, (unint64_t)v98);
        v18 = HIDWORD(v93);
        *((_QWORD *)v92 + HIDWORD(v93)) = *v32;
      }
      else
      {
        *((_QWORD *)v92 + v18) = v25;
      }
      HIDWORD(v93) = ++v18;
      v24 = v24 + *(double *)(v98[0] + 104);
LABEL_23:
      ++v19;
    }
    while (v19 != v20);
    if (v18 >= 2)
    {
      v33 = JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert((uint64_t)&v95, **v16, v24);
      if (!(*v16)[5])
      {
        __break(0xC471u);
        JUMPOUT(0x197F8CF2CLL);
      }
      v34 = v33;
      v35 = *(_QWORD *)(**((_QWORD **)*v16 + 1) + 24);
      v36 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v36 = off_1E357F5F0;
      *(_DWORD *)(v36 + 8) = -1;
      *(_WORD *)(v36 + 12) = 154;
      *(_DWORD *)(v36 + 16) = 0;
      *(_BYTE *)(v36 + 20) = 0;
      *(_QWORD *)(v36 + 24) = v35;
      *(_QWORD *)(v36 + 32) = 0;
      v37 = *((unsigned int *)v91 + 23);
      if ((_DWORD)v37)
      {
        v38 = *(_QWORD *)(*((_QWORD *)v91 + 10) + 8 * v37 - 8);
        *((_DWORD *)v91 + 23) = v37 - 1;
        v39 = *((_QWORD *)v91 + 8);
      }
      else
      {
        v38 = *((unsigned int *)v91 + 19);
        if ((_DWORD)v38 == *((_DWORD *)v91 + 18))
        {
          v75 = v38 + (v38 >> 2);
          if (v75 >= 0x10)
            v76 = v75 + 1;
          else
            v76 = 16;
          if (v76 <= v38 + 1)
            v77 = v38 + 1;
          else
            v77 = v76;
          if (v77 >> 29)
          {
LABEL_103:
            __break(0xC471u);
            JUMPOUT(0x197F8CF14);
          }
          __src = (void *)*((_QWORD *)v91 + 8);
          v78 = (void *)WTF::fastMalloc((WTF *)(8 * v77));
          *((_DWORD *)v91 + 18) = v77;
          *((_QWORD *)v91 + 8) = v78;
          memcpy(v78, __src, 8 * v38);
          if (__src)
          {
            if (*((void **)v91 + 8) == __src)
            {
              *((_QWORD *)v91 + 8) = 0;
              *((_DWORD *)v91 + 18) = 0;
            }
            WTF::fastFree((unint64_t)__src, v4, v5, v6, v7, v8, v9, v10);
          }
          v79 = *((unsigned int *)v91 + 19);
          v39 = *((_QWORD *)v91 + 8);
          *(_QWORD *)(v39 + 8 * v79) = 0;
          *((_DWORD *)v91 + 19) = v79 + 1;
        }
        else
        {
          v39 = *((_QWORD *)v91 + 8);
          *(_QWORD *)(v39 + 8 * v38) = 0;
          *((_DWORD *)v91 + 19) = v38 + 1;
        }
      }
      *(_DWORD *)(v36 + 8) = v38;
      *(_QWORD *)(v39 + 8 * v38) = v36;
      v98[0] = v36;
      v40 = (char **)(v34 + 8);
      v41 = *(unsigned int *)(v34 + 20);
      if ((_DWORD)v41 == *(_DWORD *)(v34 + 16))
      {
        v74 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v40, v41 + 1, (unint64_t)v98);
        v41 = *(unsigned int *)(v34 + 20);
        *(_QWORD *)(*(_QWORD *)(v34 + 8) + 8 * v41) = *(_QWORD *)v74;
        v36 = v98[0];
      }
      else
      {
        *(_QWORD *)&(*v40)[8 * v41] = v36;
      }
      *(_DWORD *)(v34 + 20) = v41 + 1;
      *(_QWORD *)(v36 + 32) = v34;
      v42 = *v16;
      v43 = (uint64_t *)(v34 + 56);
      if (*(_DWORD *)(v34 + 68))
      {
        v45 = *v43;
      }
      else if (*(_DWORD *)(v34 + 64))
      {
        v44 = 0;
        v45 = *v43;
LABEL_37:
        v46 = 16 * v44;
        do
        {
          v47 = v46;
          v48 = v45 + v46;
          *(_QWORD *)v48 = 0;
          *(_BYTE *)(v48 + 8) = 0;
          v46 = v47 + 16;
        }
        while (v47);
      }
      else
      {
        WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v43, (void *)1, v5, v6, v7, v8, v9, v10);
        v44 = *(unsigned int *)(v34 + 68);
        v45 = *(_QWORD *)(v34 + 56);
        if ((_DWORD)v44 != 1)
          goto LABEL_37;
      }
      *(_DWORD *)(v34 + 68) = 1;
      *(_QWORD *)v45 = v42;
      *(_BYTE *)(v45 + 8) = 0;
      if (HIDWORD(v93))
      {
        v49 = v92;
        v50 = (WTF *)((char *)v92 + 8 * HIDWORD(v93));
        v51 = (_QWORD **)(v34 + 24);
        do
        {
          v52 = *(_QWORD *)v49;
          v53 = *(unsigned int *)(*(_QWORD *)v49 + 68);
          if ((_DWORD)v53)
          {
            v54 = 0;
            v55 = *v16;
            v56 = 16 * v53;
            do
            {
              v57 = *(_QWORD *)(v52 + 56);
              if (*(unsigned int **)(v57 + v54) == v55)
                *(_QWORD *)(v57 + v54) = v34;
              v54 += 16;
            }
            while (v56 != v54);
          }
          v98[0] = v52;
          v58 = *(unsigned int *)(v34 + 36);
          if ((_DWORD)v58)
          {
            v59 = *v51;
            v60 = *(unsigned int *)(v34 + 36);
            while (*v59 != v52)
            {
              ++v59;
              if (!--v60)
                goto LABEL_50;
            }
          }
          else
          {
LABEL_50:
            if ((_DWORD)v58 == *(_DWORD *)(v34 + 32))
            {
              v66 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v34 + 24, v58 + 1, (unint64_t)v98);
              v58 = *(unsigned int *)(v34 + 36);
              *(_QWORD *)(*(_QWORD *)(v34 + 24) + 8 * v58) = *v66;
            }
            else
            {
              (*v51)[v58] = v52;
            }
            *(_DWORD *)(v34 + 36) = v58 + 1;
          }
          v61 = *v16;
          v62 = (*v16)[9];
          if ((_DWORD)v62)
          {
            v63 = (_QWORD *)*((_QWORD *)v61 + 3);
            if (*v63 == v52)
            {
              v64 = 0;
LABEL_58:
              v63[v64] = v63[v62 - 1];
              v61[9] = v62 - 1;
            }
            else
            {
              v64 = 0;
              while (v62 - 1 != v64)
              {
                v65 = v63[++v64];
                if (v65 == v52)
                  goto LABEL_58;
              }
            }
          }
          v49 = (WTF *)((char *)v49 + 8);
        }
        while (v49 != v50);
      }
      v67 = *v16;
      v98[0] = v34;
      v68 = v67 + 6;
      v69 = v67[9];
      if ((_DWORD)v69)
      {
        v70 = (_QWORD *)*v68;
        v71 = v67[9];
        while (*v70 != v34)
        {
          ++v70;
          if (!--v71)
            goto LABEL_67;
        }
      }
      else
      {
LABEL_67:
        if ((_DWORD)v69 == v67[8])
        {
          v80 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v68, v69 + 1, (unint64_t)v98);
          v69 = v67[9];
          *(_QWORD *)(*((_QWORD *)v67 + 3) + 8 * v69) = *v80;
        }
        else
        {
          *(_QWORD *)(*v68 + 8 * v69) = v34;
        }
        v67[9] = v69 + 1;
      }
    }
LABEL_70:
    v72 = v92;
    if (v94 == (_BYTE *)v92 || v92 == 0)
    {
      if (!v11)
        break;
      goto LABEL_3;
    }
    v92 = 0;
    LODWORD(v93) = 0;
    WTF::fastFree((unint64_t)v72, v4, v5, v6, v7, v8, v9, v10);
  }
  while (v11);
LABEL_96:
  v88 = JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::execute((unsigned int *)&v95, (uint64_t)v4, v5, v6, v7, v8, v9, v10);
  if (v88)
    JSC::B3::Procedure::invalidateCFG(v91, (unint64_t)v81, v82, v83, v84, v85, v86, v87);
  WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v96, v81, v82, v83, v84, v85, v86, v87);
  return v88;
}

uint64_t JSC::B3::estimateStaticExecutionCounts(JSC::B3 *this, JSC::B3::Procedure *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v3 = JSC::B3::Procedure::naturalLoops(this);
  v4 = *((unsigned int *)this + 15);
  if ((_DWORD)v4)
  {
    v5 = v3;
    v6 = 0;
    while (!*(_QWORD *)(*((_QWORD *)this + 6) + 8 * v6))
    {
      if (v4 == ++v6)
        return 1;
    }
    if ((_DWORD)v4 != (_DWORD)v6)
    {
      v7 = v6;
      do
      {
        if (v4 <= v7)
        {
LABEL_15:
          __break(0xC471u);
          JUMPOUT(0x197F8D054);
        }
        v8 = *((_QWORD *)this + 6);
        v9 = *(double **)(v8 + 8 * v7);
        v10 = *(unsigned int *)(*(_QWORD *)(v5 + 312) + 8 * *(unsigned int *)v9);
        if ((_DWORD)v10 == -1)
          goto LABEL_16;
        v11 = *(unsigned int *)(v5 + 20);
        if (v11 <= v10)
        {
          __break(0xC471u);
          JUMPOUT(0x197F8D05CLL);
        }
        v12 = *(_QWORD *)(v5 + 8);
        if (!v12)
        {
LABEL_16:
          v13 = 0;
        }
        else
        {
          v13 = 1;
          while (1)
          {
            v10 = *(unsigned int *)(v12 + 72 * v10 + 64);
            if ((_DWORD)v10 == -1)
              break;
            ++v13;
            if (v11 <= v10)
              goto LABEL_15;
          }
        }
        v9[13] = __exp10((double)v13);
        if (v4 > ++v7)
        {
          while (!*(_QWORD *)(v8 + 8 * v7))
          {
            if (v4 == ++v7)
              return 1;
          }
          v7 = v7;
        }
      }
      while (v4 != v7);
    }
  }
  return 1;
}

void JSC::B3::ExtractValue::~ExtractValue(JSC::B3::ExtractValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::ExtractValue::~ExtractValue(JSC::B3::ExtractValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::ExtractValue::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v21;
  int v22;
  char v23;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v7 = (WTF::PrintStream *)v6;
  if (*(_BYTE *)(a2 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = *(char **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v9)
    {
      v13 = v10 - 1;
      if (!v10)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v21, v12);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v15 = *(char **)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v15)
    {
      v19 = v16 - 1;
      if (!v16)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v21, v18);
    }
    else
    {
      WTF::CString::CString(&v21, &str_25, 0);
      v22 = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v21);
    if (v22 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v22])(&v23, &v21);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(a2 + 32) = 1;
  }
  WTF::PrintStream::printf(v7, "%s", "<<");
  WTF::PrintStream::printf(v7, "%d", *(_DWORD *)(a1 + 40));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
}

void JSC::B3::FenceValue::~FenceValue(JSC::B3::FenceValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::FenceValue::~FenceValue(JSC::B3::FenceValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::FenceValue::FenceValue(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 81;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DF80;
  *(_QWORD *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = a4;
  return result;
}

{
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 81;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357DF80;
  *(_QWORD *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = a4;
  return result;
}

__n128 JSC::B3::FenceValue::FenceValue(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 81;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_1E357DF80;
  result.n128_u64[0] = 0xFFFFFFFF00000000;
  result.n128_u64[1] = 0xFFFFFFFF00000000;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

{
  __n128 result;

  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 81;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = off_1E357DF80;
  result.n128_u64[0] = 0xFFFFFFFF00000000;
  result.n128_u64[1] = 0xFFFFFFFF00000000;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void JSC::B3::demoteValues(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  unsigned int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  int v170;
  uint64_t v171;
  int v172;
  __int16 v173;
  unint64_t v174;
  unint64_t v175;
  void *v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  const void *v186;
  void *v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  __int128 *v191;
  __int128 *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  const void *v196;
  void *v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  __int128 *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  const void *v205;
  void *v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  __int128 *v210;
  int v211;
  WTF *v212;
  int v213;
  uint64_t v214;
  int v216;
  __int128 v217;
  uint64_t v218;
  _BYTE v219[176];
  uint64_t v220;
  _DWORD *v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;

  v222 = 0;
  v223 = 0;
  v9 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    v50 = __clz(__rbit64(v9));
    v10 = 63;
    if (v50 >= 0x3F)
      v14 = 63;
    else
      v14 = v50;
LABEL_7:
    if (v14 != v10)
    {
      while (1)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v14);
        *(_QWORD *)&v224 = v15;
        v16 = *(_DWORD *)(v15 + 16);
        v17 = WTF::fastMalloc((WTF *)8);
        *(_DWORD *)(v17 + 4) = v16;
        *(_QWORD *)&v217 = v17;
        v25 = JSC::B3::SparseCollection<JSC::B3::Variable>::add((_DWORD *)a1, &v217);
        v26 = v217;
        *(_QWORD *)&v217 = 0;
        if (v26)
          WTF::fastFree(v26, v18, v19, v20, v21, v22, v23, v24);
        v221 = v25;
        WTF::HashMap<JSC::B3::Value *,JSC::B3::Variable *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTableTraits>::add<JSC::B3::Variable *>(&v217, &v223, (uint64_t *)&v224, &v221, v21, v22, v23, v24);
        if (*(unsigned __int8 *)(v15 + 12) == 153)
        {
          v27 = *(_DWORD *)(v15 + 16);
          v28 = WTF::fastMalloc((WTF *)8);
          *(_DWORD *)(v28 + 4) = v27;
          *(_QWORD *)&v217 = v28;
          v36 = JSC::B3::SparseCollection<JSC::B3::Variable>::add((_DWORD *)a1, &v217);
          v37 = v217;
          *(_QWORD *)&v217 = 0;
          if (v37)
            WTF::fastFree(v37, v29, v30, v31, v32, v33, v34, v35);
          v221 = v36;
          WTF::HashMap<JSC::B3::Value *,JSC::B3::Variable *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTableTraits>::add<JSC::B3::Variable *>(&v217, &v222, (uint64_t *)&v224, &v221, v32, v33, v34, v35);
        }
        v38 = v14 + 1;
        v39 = *a2;
        if ((*a2 & 0x8000000000000000) != 0)
        {
          v47 = __clz(__rbit64(v39 >> v38)) + v38;
          if (v47 >= 0x3F)
            v14 = 63;
          else
            v14 = v47;
          goto LABEL_19;
        }
        v40 = 2 * v39;
        v14 = *(_QWORD *)(2 * v39);
        v41 = v14 + 63;
        v42 = v38 >> 6;
        if (v38 >> 6 < (unint64_t)(v14 + 63) >> 6)
        {
          v43 = *(_QWORD *)(v40 + 8 * v42 + 8);
          if (!v43 || (v44 = __clz(__rbit64(v43 >> v38)) + (v38 & 0x3F), v44 >= 0x40))
          {
            if (v42 + 1 == v41 >> 6)
              goto LABEL_19;
            v45 = v40 + 16;
            while (1)
            {
              v46 = *(_QWORD *)(v45 + 8 * v42);
              if (v46)
              {
                v44 = __clz(__rbit64(v46));
                if (v44 <= 0x3F)
                  break;
              }
              if ((v41 >> 6) - 1 == ++v42)
                goto LABEL_19;
            }
            ++v42;
          }
          v14 = v44 + (v42 << 6);
        }
LABEL_19:
        if (v14 == v10)
          goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  v10 = *(_QWORD *)(2 * v9);
  if ((unint64_t)(v10 + 63) >= 0x40)
  {
    v11 = *(_QWORD *)(2 * v9 + 8);
    if (v11)
    {
      v12 = __clz(__rbit64(v11));
      if (v12 < 0x40)
      {
        v13 = 0;
LABEL_6:
        v14 = v12 + (v13 << 6);
        goto LABEL_7;
      }
    }
    if ((unint64_t)(v10 + 63) >> 6 != 1)
    {
      v48 = 0;
      while (1)
      {
        v49 = *(_QWORD *)(2 * v9 + 0x10 + 8 * v48);
        if (v49)
        {
          v12 = __clz(__rbit64(v49));
          if (v12 <= 0x3F)
            break;
        }
        if (((unint64_t)(v10 + 63) >> 6) - 1 == ++v48)
          goto LABEL_40;
      }
      v13 = v48 + 1;
      goto LABEL_6;
    }
  }
LABEL_40:
  v51 = a1;
  *(_QWORD *)&v217 = a1;
  *((_QWORD *)&v217 + 1) = v219;
  v218 = 8;
  memset(&v219[128], 0, 48);
  v220 = 0;
  v52 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v52)
    goto LABEL_156;
  v53 = 0;
  while (!*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v53))
  {
    if (v52 == ++v53)
      goto LABEL_156;
  }
  if ((_DWORD)v52 == (_DWORD)v53)
    goto LABEL_156;
  LODWORD(v54) = *(_DWORD *)(a1 + 60);
  LODWORD(v55) = v53;
  v213 = v54;
  do
  {
    if (v54 <= v55)
    {
      __break(0xC471u);
      JUMPOUT(0x197F8E4C8);
    }
    v56 = *(_QWORD *)(*(_QWORD *)(v51 + 48) + 8 * v55);
    v57 = *(_DWORD *)(v56 + 36);
    if (v57)
    {
      v58 = *(_QWORD *)(v56 + 24);
      v59 = *(unsigned int *)(*(_QWORD *)v58 + 20);
      if (!(_DWORD)v59)
      {
        __break(0xC471u);
        JUMPOUT(0x197F8E4D0);
      }
      if (v223)
      {
        v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v58 + 8) + 8 * v59 - 8);
        v61 = *(_DWORD *)(v223 - 8);
        v62 = (~(v60 << 32) + v60) ^ ((unint64_t)(~(v60 << 32) + v60) >> 22);
        v63 = 9 * ((v62 + ~(v62 << 13)) ^ ((v62 + ~(v62 << 13)) >> 8));
        v64 = (v63 ^ (v63 >> 15)) + ~((v63 ^ (v63 >> 15)) << 27);
        v65 = v61 & ((v64 >> 31) ^ v64);
        v66 = *(_QWORD *)(v223 + 16 * v65);
        if (v66 == v60)
        {
LABEL_55:
          v68 = *(_QWORD *)(v223 + 16 * v65 + 8);
          if (v68)
          {
            if (v57 != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x197F8E4A0);
            }
            JSC::B3::InsertionSet::insert<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *,JSC::B3::Value *>((uint64_t)&v217, *(_QWORD *)(v60 + 24), v68, v60);
          }
        }
        else
        {
          v67 = 1;
          while (v66)
          {
            v65 = ((_DWORD)v65 + v67) & v61;
            v66 = *(_QWORD *)(v223 + 16 * v65);
            ++v67;
            if (v66 == v60)
              goto LABEL_55;
          }
        }
      }
    }
    v216 = v55;
    if (*(_DWORD *)(v56 + 20))
    {
      v69 = 0;
      while (1)
      {
        v70 = *(_QWORD *)(*(_QWORD *)(v56 + 8) + 8 * v69);
        v71 = *(_WORD *)(v70 + 12);
        if (v71 != 153)
          break;
        if (v222)
        {
          v117 = *(_DWORD *)(v222 - 8);
          v118 = (~(v70 << 32) + v70) ^ ((unint64_t)(~(v70 << 32) + v70) >> 22);
          v119 = 9 * ((v118 + ~(v118 << 13)) ^ ((v118 + ~(v118 << 13)) >> 8));
          v120 = (v119 ^ (v119 >> 15)) + ~((v119 ^ (v119 >> 15)) << 27);
          v101 = v117 & ((v120 >> 31) ^ v120);
          v102 = *(_QWORD *)(v222 + 16 * v101);
          if (v102 != v70)
          {
            v103 = 1;
            do
            {
              if (!v102)
                goto LABEL_71;
              v101 = ((_DWORD)v101 + v103) & v117;
              v102 = *(_QWORD *)(v222 + 16 * v101);
              ++v103;
            }
            while (v102 != v70);
          }
          v154 = *(_QWORD *)(v222 + 16 * v101 + 8);
          if (v154)
          {
            v155 = *(_QWORD *)(v70 + 24);
            v156 = v217;
            v162 = WTF::fastMalloc((WTF *)0x30);
            v163 = *(_DWORD *)(v154 + 4);
            *(_DWORD *)(v162 + 8) = -1;
            *(_WORD *)(v162 + 12) = 10;
            *(_DWORD *)(v162 + 16) = v163;
            *(_BYTE *)(v162 + 20) = 0;
            *(_QWORD *)(v162 + 24) = v155;
            *(_QWORD *)(v162 + 32) = 0;
            *(_QWORD *)v162 = off_1E357F0F8;
            *(_QWORD *)(v162 + 40) = v154;
            v164 = *(unsigned int *)(v156 + 92);
            if ((_DWORD)v164)
            {
              v165 = *(_QWORD *)(*(_QWORD *)(v156 + 80) + 8 * v164 - 8);
              *(_DWORD *)(v156 + 92) = v164 - 1;
              v166 = *(_QWORD *)(v156 + 64);
            }
            else
            {
              v165 = *(unsigned int *)(v156 + 76);
              if ((_DWORD)v165 == *(_DWORD *)(v156 + 72))
              {
                v202 = v165 + (v165 >> 2);
                if (v202 >= 0x10)
                  v203 = v202 + 1;
                else
                  v203 = 16;
                if (v203 <= v165 + 1)
                  v204 = v165 + 1;
                else
                  v204 = v203;
                if (v204 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F8E4E8);
                }
                v205 = *(const void **)(v156 + 64);
                v206 = (void *)WTF::fastMalloc((WTF *)(8 * v204));
                *(_DWORD *)(v156 + 72) = v204;
                *(_QWORD *)(v156 + 64) = v206;
                memcpy(v206, v205, 8 * v165);
                if (v205)
                {
                  if (*(const void **)(v156 + 64) == v205)
                  {
                    *(_QWORD *)(v156 + 64) = 0;
                    *(_DWORD *)(v156 + 72) = 0;
                  }
                  WTF::fastFree((unint64_t)v205, v207, v208, v157, v158, v159, v160, v161);
                }
                v209 = *(unsigned int *)(v156 + 76);
                v166 = *(_QWORD *)(v156 + 64);
                *(_QWORD *)(v166 + 8 * v209) = 0;
                *(_DWORD *)(v156 + 76) = v209 + 1;
              }
              else
              {
                v166 = *(_QWORD *)(v156 + 64);
                *(_QWORD *)(v166 + 8 * v165) = 0;
                *(_DWORD *)(v156 + 76) = v165 + 1;
              }
            }
            *(_DWORD *)(v162 + 8) = v165;
            *(_QWORD *)(v166 + 8 * v165) = v162;
            *(_QWORD *)&v224 = v69;
            *((_QWORD *)&v224 + 1) = v162;
            v167 = HIDWORD(v218);
            if (HIDWORD(v218) == (_DWORD)v218)
            {
              v210 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v217 + 8, (void *)(HIDWORD(v218) + 1), (unint64_t)&v224, v157, v158, v159, v160, v161);
              v167 = HIDWORD(v218);
              v168 = *((_QWORD *)&v217 + 1);
              v169 = *v210;
            }
            else
            {
              v168 = *((_QWORD *)&v217 + 1);
              v169 = v224;
            }
            *(_OWORD *)(v168 + 16 * v167) = v169;
            ++HIDWORD(v218);
            v170 = *(_DWORD *)(v70 + 16);
            if (v170 != *(_DWORD *)(v162 + 16))
            {
              __break(0xC471u);
              JUMPOUT(0x197F8E460);
            }
            v171 = *(_QWORD *)(v70 + 32);
            v172 = *(_DWORD *)(v70 + 8);
            (**(void (***)(uint64_t))v70)(v70);
            *(_QWORD *)v70 = off_1E357F5F0;
            if (v170)
            {
              *(_QWORD *)(v70 + 40) = v162;
              v173 = 1;
            }
            else
            {
              v173 = 0;
            }
            v51 = a1;
            *(_WORD *)(v70 + 12) = v173;
            *(_DWORD *)(v70 + 16) = v170;
            *(_BYTE *)(v70 + 20) = v173;
            *(_DWORD *)(v70 + 8) = v172;
            *(_QWORD *)(v70 + 32) = v171;
            LODWORD(v52) = v213;
          }
        }
LABEL_71:
        if (v223)
        {
          v83 = *(_DWORD *)(v223 - 8);
          v84 = (~(v70 << 32) + v70) ^ ((unint64_t)(~(v70 << 32) + v70) >> 22);
          v85 = 9 * ((v84 + ~(v84 << 13)) ^ ((v84 + ~(v84 << 13)) >> 8));
          v86 = (v85 ^ (v85 >> 15)) + ~((v85 ^ (v85 >> 15)) << 27);
          v87 = v83 & ((v86 >> 31) ^ v86);
          v88 = *(_QWORD *)(v223 + 16 * v87);
          if (v88 == v70)
          {
LABEL_76:
            v90 = *(_QWORD *)(v223 + 16 * v87 + 8);
            if (v90 && v69 + 1 < (unint64_t)*(unsigned int *)(v56 + 20))
            {
              v121 = *(_QWORD *)(v70 + 24);
              v122 = v217;
              v128 = WTF::fastMalloc((WTF *)0x38);
              *(_DWORD *)(v128 + 8) = -1;
              *(_WORD *)(v128 + 12) = 9;
              *(_DWORD *)(v128 + 16) = 0;
              *(_BYTE *)(v128 + 20) = 1;
              *(_QWORD *)(v128 + 24) = v121;
              *(_QWORD *)(v128 + 32) = 0;
              *(_QWORD *)v128 = off_1E357F0F8;
              *(_QWORD *)(v128 + 40) = v90;
              *(_QWORD *)(v128 + 48) = v70;
              v129 = *(unsigned int *)(v122 + 92);
              if ((_DWORD)v129)
              {
                v130 = *(_QWORD *)(*(_QWORD *)(v122 + 80) + 8 * v129 - 8);
                *(_DWORD *)(v122 + 92) = v129 - 1;
                v131 = *(_QWORD *)(v122 + 64);
              }
              else
              {
                v130 = *(unsigned int *)(v122 + 76);
                if ((_DWORD)v130 == *(_DWORD *)(v122 + 72))
                {
                  v183 = v130 + (v130 >> 2);
                  if (v183 >= 0x10)
                    v184 = v183 + 1;
                  else
                    v184 = 16;
                  if (v184 <= v130 + 1)
                    v185 = v130 + 1;
                  else
                    v185 = v184;
                  if (v185 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197F8E4F0);
                  }
                  v186 = *(const void **)(v122 + 64);
                  v187 = (void *)WTF::fastMalloc((WTF *)(8 * v185));
                  *(_DWORD *)(v122 + 72) = v185;
                  *(_QWORD *)(v122 + 64) = v187;
                  memcpy(v187, v186, 8 * v130);
                  if (v186)
                  {
                    if (*(const void **)(v122 + 64) == v186)
                    {
                      *(_QWORD *)(v122 + 64) = 0;
                      *(_DWORD *)(v122 + 72) = 0;
                    }
                    WTF::fastFree((unint64_t)v186, v188, v189, v123, v124, v125, v126, v127);
                  }
                  v190 = *(unsigned int *)(v122 + 76);
                  v131 = *(_QWORD *)(v122 + 64);
                  *(_QWORD *)(v131 + 8 * v190) = 0;
                  *(_DWORD *)(v122 + 76) = v190 + 1;
                }
                else
                {
                  v131 = *(_QWORD *)(v122 + 64);
                  *(_QWORD *)(v131 + 8 * v130) = 0;
                  *(_DWORD *)(v122 + 76) = v130 + 1;
                }
              }
              *(_DWORD *)(v128 + 8) = v130;
              *(_QWORD *)(v131 + 8 * v130) = v128;
              *(_QWORD *)&v224 = v69 + 1;
              *((_QWORD *)&v224 + 1) = v128;
              v132 = HIDWORD(v218);
              LODWORD(v52) = v213;
              if (HIDWORD(v218) == (_DWORD)v218)
              {
                v192 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v217 + 8, (void *)(HIDWORD(v218) + 1), (unint64_t)&v224, v123, v124, v125, v126, v127);
                v132 = HIDWORD(v218);
                v133 = *((_QWORD *)&v217 + 1);
                v134 = *v192;
              }
              else
              {
                v133 = *((_QWORD *)&v217 + 1);
                v134 = v224;
              }
              *(_OWORD *)(v133 + 16 * v132) = v134;
              v51 = a1;
              ++HIDWORD(v218);
            }
          }
          else
          {
            v89 = 1;
            while (v88)
            {
              v87 = ((_DWORD)v87 + v89) & v83;
              v88 = *(_QWORD *)(v223 + 16 * v87);
              ++v89;
              if (v88 == v70)
                goto LABEL_76;
            }
          }
        }
        if (++v69 >= (unint64_t)*(unsigned int *)(v56 + 20))
          goto LABEL_101;
      }
      v72 = *(unsigned __int8 *)(v70 + 20);
      if (v72 == 4)
      {
        v91 = 40;
        switch(*(_WORD *)(v70 + 12))
        {
          case 0u:
          case 1u:
          case 2u:
          case 8u:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Bu:
          case 0x2Cu:
          case 0x2Du:
          case 0x2Eu:
          case 0x2Fu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
          case 0x3Cu:
          case 0x3Du:
          case 0x3Eu:
          case 0x4Fu:
          case 0x9Au:
          case 0x9Bu:
          case 0x9Du:
          case 0x9Eu:
          case 0x9Fu:
            break;
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0x50u:
          case 0x54u:
          case 0x5Au:
          case 0x5Bu:
          case 0x5Cu:
          case 0x5Du:
          case 0x5Eu:
          case 0x5Fu:
          case 0x60u:
          case 0x61u:
          case 0x62u:
          case 0x63u:
          case 0x64u:
          case 0x65u:
          case 0x66u:
          case 0x67u:
          case 0x68u:
          case 0x69u:
          case 0x6Au:
          case 0x6Bu:
          case 0x6Cu:
          case 0x6Du:
          case 0x6Eu:
          case 0x6Fu:
          case 0x70u:
          case 0x71u:
          case 0x72u:
          case 0x73u:
          case 0x74u:
          case 0x75u:
          case 0x76u:
          case 0x77u:
          case 0x78u:
          case 0x79u:
          case 0x7Au:
          case 0x7Bu:
          case 0x7Cu:
          case 0x7Du:
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x82u:
          case 0x83u:
          case 0x84u:
          case 0x85u:
          case 0x86u:
          case 0x87u:
          case 0x88u:
          case 0x89u:
          case 0x8Au:
          case 0x8Bu:
          case 0x8Cu:
          case 0x8Du:
          case 0x8Eu:
          case 0x8Fu:
          case 0x90u:
          case 0x91u:
          case 0x92u:
          case 0x93u:
          case 0x94u:
          case 0x95u:
          case 0x96u:
          case 0x97u:
          case 0x98u:
            v91 = 48;
            break;
          case 7u:
          case 0x51u:
          case 0x59u:
          case 0x9Cu:
            v91 = 56;
            break;
          case 0x3Fu:
          case 0x40u:
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
          case 0x45u:
          case 0x46u:
          case 0x47u:
          case 0x48u:
          case 0x49u:
          case 0x4Au:
          case 0x4Bu:
          case 0x4Cu:
          case 0x4Du:
          case 0x4Eu:
          case 0x52u:
            v91 = 64;
            break;
          case 0x53u:
            v91 = 176;
            break;
          case 0x55u:
          case 0x56u:
          case 0x57u:
          case 0x58u:
            v91 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197F8E4C0);
        }
        v92 = v70 + v91;
        v73 = *(uint64_t **)v92;
        v72 = *(unsigned int *)(v92 + 12);
      }
      else
      {
        v73 = (uint64_t *)(v70 + 40);
      }
      v74 = &v73[v72];
      if (v73 == v74)
        goto LABEL_70;
      v75 = v223;
      if (!v223)
        goto LABEL_70;
      while (1)
      {
        v76 = *(_DWORD *)(v75 - 8);
        v77 = ~(*v73 << 32) + *v73;
        v78 = (v77 ^ (v77 >> 22)) + ~((v77 ^ (v77 >> 22)) << 13);
        v79 = (9 * (v78 ^ (v78 >> 8))) ^ ((9 * (v78 ^ (v78 >> 8))) >> 15);
        v80 = v76 & (((v79 + ~(v79 << 27)) >> 31) ^ ((_DWORD)v79 + ~((_DWORD)v79 << 27)));
        v81 = *(_QWORD *)(v75 + 16 * v80);
        if (v81 != *v73)
        {
          v82 = 1;
          while (v81)
          {
            v80 = ((_DWORD)v80 + v82) & v76;
            v81 = *(_QWORD *)(v75 + 16 * v80);
            ++v82;
            if (v81 == *v73)
              goto LABEL_90;
          }
          goto LABEL_68;
        }
LABEL_90:
        v104 = *(_QWORD *)(v75 + 16 * v80 + 8);
        if (v104)
          break;
LABEL_68:
        if (++v73 == v74)
        {
          v71 = *(_WORD *)(v70 + 12);
LABEL_70:
          if ((v71 & 0xFFF) == 0x98 && v222)
          {
            v93 = *(_QWORD *)(v70 + 40);
            v94 = *(_DWORD *)(v222 - 8);
            v95 = (~(v93 << 32) + v93) ^ ((unint64_t)(~(v93 << 32) + v93) >> 22);
            v96 = 9 * ((v95 + ~(v95 << 13)) ^ ((v95 + ~(v95 << 13)) >> 8));
            v97 = (v96 ^ (v96 >> 15)) + ~((v96 ^ (v96 >> 15)) << 27);
            v98 = v94 & ((v97 >> 31) ^ v97);
            v99 = *(_QWORD *)(v222 + 16 * v98);
            if (v99 == v93)
            {
LABEL_121:
              v137 = *(_QWORD *)(v222 + 16 * v98 + 8);
              if (v137)
              {
                v138 = *(_QWORD *)(v70 + 24);
                v139 = *(_QWORD *)(v70 + 48);
                v140 = v217;
                v146 = WTF::fastMalloc((WTF *)0x38);
                *(_DWORD *)(v146 + 8) = -1;
                *(_WORD *)(v146 + 12) = 9;
                *(_DWORD *)(v146 + 16) = 0;
                *(_BYTE *)(v146 + 20) = 1;
                *(_QWORD *)(v146 + 24) = v138;
                *(_QWORD *)(v146 + 32) = 0;
                *(_QWORD *)v146 = off_1E357F0F8;
                *(_QWORD *)(v146 + 40) = v137;
                *(_QWORD *)(v146 + 48) = v139;
                v147 = *(unsigned int *)(v140 + 92);
                if ((_DWORD)v147)
                {
                  v148 = *(_QWORD *)(*(_QWORD *)(v140 + 80) + 8 * v147 - 8);
                  *(_DWORD *)(v140 + 92) = v147 - 1;
                  v149 = *(_QWORD *)(v140 + 64);
                }
                else
                {
                  v148 = *(unsigned int *)(v140 + 76);
                  if ((_DWORD)v148 == *(_DWORD *)(v140 + 72))
                  {
                    v193 = v148 + (v148 >> 2);
                    if (v193 >= 0x10)
                      v194 = v193 + 1;
                    else
                      v194 = 16;
                    if (v194 <= v148 + 1)
                      v195 = v148 + 1;
                    else
                      v195 = v194;
                    if (v195 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197F8E4E0);
                    }
                    v196 = *(const void **)(v140 + 64);
                    v197 = (void *)WTF::fastMalloc((WTF *)(8 * v195));
                    *(_DWORD *)(v140 + 72) = v195;
                    *(_QWORD *)(v140 + 64) = v197;
                    memcpy(v197, v196, 8 * v148);
                    if (v196)
                    {
                      if (*(const void **)(v140 + 64) == v196)
                      {
                        *(_QWORD *)(v140 + 64) = 0;
                        *(_DWORD *)(v140 + 72) = 0;
                      }
                      WTF::fastFree((unint64_t)v196, v198, v199, v141, v142, v143, v144, v145);
                    }
                    v200 = *(unsigned int *)(v140 + 76);
                    v149 = *(_QWORD *)(v140 + 64);
                    *(_QWORD *)(v149 + 8 * v200) = 0;
                    *(_DWORD *)(v140 + 76) = v200 + 1;
                  }
                  else
                  {
                    v149 = *(_QWORD *)(v140 + 64);
                    *(_QWORD *)(v149 + 8 * v148) = 0;
                    *(_DWORD *)(v140 + 76) = v148 + 1;
                  }
                }
                *(_DWORD *)(v146 + 8) = v148;
                *(_QWORD *)(v149 + 8 * v148) = v146;
                *(_QWORD *)&v224 = v69;
                *((_QWORD *)&v224 + 1) = v146;
                v150 = HIDWORD(v218);
                if (HIDWORD(v218) == (_DWORD)v218)
                {
                  v201 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v217 + 8, (void *)(HIDWORD(v218) + 1), (unint64_t)&v224, v141, v142, v143, v144, v145);
                  v150 = HIDWORD(v218);
                  v151 = *((_QWORD *)&v217 + 1);
                  v152 = *v201;
                }
                else
                {
                  v151 = *((_QWORD *)&v217 + 1);
                  v152 = v224;
                }
                *(_OWORD *)(v151 + 16 * v150) = v152;
                v51 = a1;
                ++HIDWORD(v218);
                if (*(_DWORD *)(v70 + 16))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F8E418);
                }
                v52 = *(_QWORD *)(v70 + 32);
                v153 = *(_DWORD *)(v70 + 8);
                (**(void (***)(uint64_t))v70)(v70);
                *(_QWORD *)v70 = off_1E357F5F0;
                *(_WORD *)(v70 + 12) = 0;
                *(_DWORD *)(v70 + 16) = 0;
                *(_BYTE *)(v70 + 20) = 0;
                *(_DWORD *)(v70 + 8) = v153;
                *(_QWORD *)(v70 + 32) = v52;
                LODWORD(v52) = v213;
              }
            }
            else
            {
              v100 = 1;
              while (v99)
              {
                v98 = ((_DWORD)v98 + v100) & v94;
                v99 = *(_QWORD *)(v222 + 16 * v98);
                ++v100;
                if (v99 == v93)
                  goto LABEL_121;
              }
            }
          }
          goto LABEL_71;
        }
      }
      v105 = *(_QWORD *)(v70 + 24);
      v214 = v217;
      v111 = WTF::fastMalloc((WTF *)0x30);
      v112 = *(_DWORD *)(v104 + 4);
      *(_DWORD *)(v111 + 8) = -1;
      *(_WORD *)(v111 + 12) = 10;
      *(_DWORD *)(v111 + 16) = v112;
      *(_BYTE *)(v111 + 20) = 0;
      *(_QWORD *)(v111 + 24) = v105;
      *(_QWORD *)(v111 + 32) = 0;
      *(_QWORD *)v111 = off_1E357F0F8;
      *(_QWORD *)(v111 + 40) = v104;
      v113 = *(unsigned int *)(v214 + 92);
      if ((_DWORD)v113)
      {
        v135 = *(_QWORD *)(*(_QWORD *)(v214 + 80) + 8 * v113 - 8);
        *(_DWORD *)(v214 + 92) = v113 - 1;
        v136 = *(_QWORD *)(v214 + 64);
      }
      else
      {
        v135 = *(unsigned int *)(v214 + 76);
        if ((_DWORD)v135 == *(_DWORD *)(v214 + 72))
        {
          v174 = v135 + (v135 >> 2);
          if (v174 >= 0x10)
            v175 = v174 + 1;
          else
            v175 = 16;
          if (v175 <= v135 + 1)
            v175 = v135 + 1;
          if (v175 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x197F8E4D8);
          }
          v211 = v175;
          v212 = *(WTF **)(v214 + 64);
          v176 = (void *)WTF::fastMalloc((WTF *)(8 * v175));
          *(_DWORD *)(v214 + 72) = v211;
          *(_QWORD *)(v214 + 64) = v176;
          memcpy(v176, v212, 8 * v135);
          v179 = v214;
          LODWORD(v52) = v213;
          if (v212)
          {
            if (*(WTF **)(v214 + 64) == v212)
            {
              *(_QWORD *)(v214 + 64) = 0;
              *(_DWORD *)(v214 + 72) = 0;
            }
            WTF::fastFree((unint64_t)v212, v177, v178, v106, v107, v108, v109, v110);
            v179 = v214;
          }
          v180 = *(unsigned int *)(v179 + 76);
          v136 = *(_QWORD *)(v179 + 64);
          *(_QWORD *)(v136 + 8 * v180) = 0;
          *(_DWORD *)(v179 + 76) = v180 + 1;
          goto LABEL_94;
        }
        v136 = *(_QWORD *)(v214 + 64);
        *(_QWORD *)(v136 + 8 * v135) = 0;
        *(_DWORD *)(v214 + 76) = v135 + 1;
      }
      LODWORD(v52) = v213;
LABEL_94:
      *(_DWORD *)(v111 + 8) = v135;
      *(_QWORD *)(v136 + 8 * v135) = v111;
      *(_QWORD *)&v224 = v69;
      *((_QWORD *)&v224 + 1) = v111;
      v114 = HIDWORD(v218);
      if (HIDWORD(v218) == (_DWORD)v218)
      {
        v191 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v217 + 8, (void *)(HIDWORD(v218) + 1), (unint64_t)&v224, v106, v107, v108, v109, v110);
        v114 = HIDWORD(v218);
        v115 = *((_QWORD *)&v217 + 1);
        v116 = *v191;
      }
      else
      {
        v115 = *((_QWORD *)&v217 + 1);
        v116 = v224;
      }
      *(_OWORD *)(v115 + 16 * v114) = v116;
      ++HIDWORD(v218);
      *v73 = v111;
      v51 = a1;
      goto LABEL_68;
    }
LABEL_101:
    JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v217, (JSC::B3::BasicBlock *)v56);
    v55 = (v216 + 1);
    v54 = *(unsigned int *)(v51 + 60);
    if (v54 > v55)
    {
      while (!*(_QWORD *)(*(_QWORD *)(v51 + 48) + 8 * v55))
      {
        if (v54 == ++v55)
        {
          LODWORD(v55) = *(_DWORD *)(v51 + 60);
          break;
        }
      }
    }
  }
  while ((_DWORD)v52 != (_DWORD)v55);
  v181 = *((_QWORD *)&v217 + 1);
  if (v219 != *((_BYTE **)&v217 + 1) && *((_QWORD *)&v217 + 1) != 0)
  {
    *((_QWORD *)&v217 + 1) = 0;
    LODWORD(v218) = 0;
    WTF::fastFree(v181, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_156:
  if (v222)
    WTF::fastFree(v222 - 16, a2, a3, a4, a5, a6, a7, a8);
  if (v223)
    WTF::fastFree(v223 - 16, a2, a3, a4, a5, a6, a7, a8);
}

_OWORD *WTF::HashMap<JSC::B3::Value *,JSC::B3::Variable *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTableTraits>::add<JSC::B3::Variable *>(_OWORD *result, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (_QWORD *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v33 = 0;
        else
          v33 = *(unsigned int *)(v12 - 4);
        v29 = 0;
        v28 = v12 + 16 * v33;
        goto LABEL_11;
      }
      if (v21 == -1)
        v30 = v20;
      v19 = (v19 + v31) & v14;
      v20 = (_QWORD *)(v12 + 16 * v19);
      v21 = *v20;
      ++v31;
    }
    while (*v20);
    if (v30)
    {
      *v30 = 0;
      v30[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v30;
    }
  }
  *v20 = v15;
  v20[1] = *a4;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_10;
    goto LABEL_28;
  }
  if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v32 = 8;
      goto LABEL_25;
    }
LABEL_28:
    v32 = ((_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27)));
LABEL_25:
    result = WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(a2, v32, (uint64_t)v20, (uint64_t)a4, a5, a6, a7, a8);
    v20 = result;
    v24 = *a2;
    if (*a2)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
  }
LABEL_10:
  v28 = v24 + 16 * v27;
  v29 = 1;
LABEL_11:
  *(_QWORD *)v11 = v20;
  *((_QWORD *)v11 + 1) = v28;
  *((_BYTE *)v11 + 16) = v29;
  return result;
}

__int128 *JSC::B3::InsertionSet::insert<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  JSC::B3::Value *v8;
  uint64_t Space;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *result;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v8 = *(JSC::B3::Value **)a1;
  Space = JSC::B3::Value::allocateSpace(9, 48);
  *(_DWORD *)(Space + 8) = -1;
  *(_WORD *)(Space + 12) = 9;
  *(_DWORD *)(Space + 16) = 0;
  *(_BYTE *)(Space + 20) = 1;
  *(_QWORD *)(Space + 24) = a2;
  *(_QWORD *)(Space + 32) = 0;
  *(_QWORD *)Space = off_1E357F0F8;
  *(_QWORD *)(Space + 40) = a3;
  *(_QWORD *)(Space + 48) = a4;
  JSC::B3::Procedure::addValueImpl(v8, (JSC::B3::Value *)Space);
  *(_QWORD *)&v19 = 0;
  *((_QWORD *)&v19 + 1) = Space;
  result = (__int128 *)(a1 + 8);
  v16 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(a1 + 16))
  {
    result = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, (void *)(v16 + 1), (unint64_t)&v19, v10, v11, v12, v13, v14);
    v16 = *(unsigned int *)(a1 + 20);
    v17 = *(_QWORD *)(a1 + 8);
    v18 = *result;
  }
  else
  {
    v17 = *(_QWORD *)result;
    v18 = v19;
  }
  *(_OWORD *)(v17 + 16 * v16) = v18;
  ++*(_DWORD *)(a1 + 20);
  return result;
}

uint64_t JSC::B3::InsertionSet::insert<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  JSC::B3::Value *v8;
  uint64_t Space;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 *v21;
  __int128 v22;

  v8 = *(JSC::B3::Value **)a1;
  Space = JSC::B3::Value::allocateSpace(10, 48);
  v10 = *(_DWORD *)(a4 + 4);
  *(_DWORD *)(Space + 8) = -1;
  *(_WORD *)(Space + 12) = 10;
  *(_DWORD *)(Space + 16) = v10;
  *(_BYTE *)(Space + 20) = 0;
  *(_QWORD *)(Space + 24) = a3;
  *(_QWORD *)(Space + 32) = 0;
  *(_QWORD *)Space = off_1E357F0F8;
  *(_QWORD *)(Space + 40) = a4;
  JSC::B3::Procedure::addValueImpl(v8, (JSC::B3::Value *)Space);
  *(_QWORD *)&v22 = a2;
  *((_QWORD *)&v22 + 1) = Space;
  v16 = (uint64_t *)(a1 + 8);
  v17 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(a1 + 16))
  {
    v21 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, (void *)(v17 + 1), (unint64_t)&v22, v11, v12, v13, v14, v15);
    v17 = *(unsigned int *)(a1 + 20);
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *v21;
  }
  else
  {
    v18 = *v16;
    v19 = v22;
  }
  *(_OWORD *)(v18 + 16 * v17) = v19;
  ++*(_DWORD *)(a1 + 20);
  return Space;
}

uint64_t JSC::B3::fixSSA(WTF **this, JSC::B3::Procedure *a2)
{
  uint64_t v2;
  JSC::B3 *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t *v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  JSC::B3::Value **v35;
  JSC::B3::Value **v36;
  JSC::B3::Value *v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  JSC::B3::Value *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _OWORD *v64;
  WTF *v65;
  WTF *v66;
  WTF *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  WTF *v77;
  unint64_t v78;
  unint64_t v79;
  WTF **v80;
  WTF *v81;
  unint64_t *v82;
  WTF **v83;
  uint64_t v84;
  unsigned int *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  WTF *v90;
  unint64_t *v91;
  WTF **v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  _DWORD *v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  int v131;
  uint64_t *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  WTF *v140;
  uint64_t v141;
  WTF *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t **v148;
  uint64_t v149;
  uint64_t v150;
  WTF **v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  WTF *v163;
  unsigned int v164;
  unsigned int *v165;
  uint64_t v166;
  unint64_t v167;
  unsigned int *v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t *v172;
  WTF *v173;
  unint64_t v174;
  uint64_t v175;
  BOOL v176;
  WTF **v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int *v181;
  uint64_t v182;
  unint64_t v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  WTF *v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  unint64_t v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  const void *v209;
  unint64_t v210;
  uint64_t v211;
  unsigned int v212;
  unint64_t v213;
  unint64_t v214;
  _QWORD *v215;
  int v216;
  WTF *v217;
  WTF **v219;
  unint64_t v220;
  unint64_t v221;
  JSC::B3 *v222;
  void *v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  WTF *v236;
  WTF *v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  WTF *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  WTF *v262;
  WTF *v263;
  JSC::B3::BasicBlock *v264;
  uint64_t *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  __int16 v270;
  uint64_t v271;
  JSC::B3::Value **v272;
  JSC::B3::Value **v273;
  JSC::B3::Value *v274;
  _BYTE *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  JSC::B3::Value *v279;
  int v280;
  JSC::B3::Value *v281;
  uint64_t v282;
  unint64_t v283;
  __int16 v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unsigned __int8 *v298;
  int i;
  unsigned __int8 **v300;
  WTF *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  WTF *v308;
  __int128 v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int *v321;
  uint64_t v322;
  uint64_t v323;
  WTF *v324;
  __int128 v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  _QWORD *v330;
  _QWORD *v331;
  uint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  void *v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  _OWORD *v340;
  uint64_t v341;
  uint64_t v342;
  WTF *v343;
  WTF *v344;
  WTF *v345;
  void *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  WTF *v353;
  WTF *v354;
  void *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  WTF *v362;
  WTF *v363;
  unsigned int v365;
  uint64_t v366;
  uint64_t v367;
  unsigned int ***v368;
  uint64_t v369;
  unsigned int **v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t v374;
  char *v375;
  uint64_t v376;
  char *v377;
  int v378;
  uint64_t v379;
  char *v380;
  char *v381;
  unint64_t *v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t *v385;
  uint64_t *v386;
  char *v387;
  char *v388;
  void *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char v396;
  unint64_t v397;
  uint64_t v398;
  WTF *v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  _QWORD *v403;
  __int128 *v404;
  _OWORD *v405;
  __int128 *v406;
  _DWORD *v407;
  uint64_t v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  WTF *v414;
  uint64_t v415;
  WTF *v416;
  uint64_t v417;
  uint64_t v418;
  WTF *v419;
  uint64_t v420;
  uint64_t v421;
  void *__src;
  int v423;
  WTF *v424;
  uint64_t v425;
  uint64_t v426;
  WTF *v427;
  unint64_t v428;
  WTF *v429;
  unsigned int v430;
  uint64_t v431;
  uint64_t v432;
  WTF *v433;
  uint64_t v434;
  WTF *v435;
  int v436;
  unsigned int v437;
  uint64_t v438;
  JSC::B3 *v439;
  _QWORD v440[3];
  uint64_t v441;
  WTF *v442;
  JSC::B3::BasicBlock *v443;
  WTF *v444;
  int v445;
  unsigned int v446;
  uint64_t v447;
  WTF *v448[2];
  WTF *v449[2];
  WTF *v450;
  WTF *v451;
  WTF *v452;
  _QWORD v453[3];
  int v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  uint64_t v458;
  WTF **v459;
  uint64_t v460;
  const char *v461;
  uint64_t v462;
  double v463;
  WTF *v464;
  int v465;
  unsigned int v466;
  WTF *v467;
  uint64_t v468;
  __int128 v469;
  __int128 v470;
  WTF *v471;
  uint64_t *v472;
  unsigned int v473;
  unsigned int v474;
  uint64_t **v475;
  JSC::B3::Procedure *v476;
  __int128 v477;
  uint64_t v478;
  uint64_t v479;
  int v480;
  unsigned int v481;
  uint64_t v482;
  uint64_t v483;
  WTF **v484;
  uint64_t v485;
  _QWORD v486[2];
  double v487;
  _OWORD v488[2];

  v3 = (JSC::B3 *)this;
  JSC::B3::PhaseScope::PhaseScope((uint64_t)v440, this, (uint64_t)"fixSSA", 7);
  v11 = *((unsigned int *)v3 + 3);
  if (!(_DWORD)v11)
    goto LABEL_181;
  v452 = 0;
  v453[0] = 0;
  if (v11 >> 30)
  {
    __break(0xC471u);
    JUMPOUT(0x197F91228);
  }
  v12 = v11;
  v13 = (WTF *)WTF::fastMalloc((WTF *)(4 * v11));
  v450 = v13;
  LODWORD(v451) = v12;
  HIDWORD(v451) = v12;
  if (!*((_DWORD *)v3 + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x197F91230);
  }
  v21 = v13;
  v22 = v12;
  JSC::B3::blocksInPreOrder<JSC::B3::BasicBlock>(**((unsigned int ***)v3 + 6), v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v469);
  v23 = (uint64_t *)v469;
  v439 = v3;
  if (HIDWORD(v469))
  {
    v24 = 0;
    v433 = 0;
    v435 = 0;
    v25 = v469 + 8 * HIDWORD(v469);
    v26 = v21;
    v27 = v22;
    do
    {
      v28 = *v23;
      HIDWORD(v453[0]) = 0;
      if (*(_DWORD *)(v28 + 20))
      {
        v29 = 0;
        v30 = 0;
        do
        {
          v31 = *(_QWORD *)(*(_QWORD *)(v28 + 8) + 8 * v30);
          v32 = *(unsigned __int8 *)(v31 + 20);
          v33 = *(_WORD *)(v31 + 12);
          if (v32 == 4)
          {
            v39 = 40;
            switch(*(_WORD *)(v31 + 12))
            {
              case 0u:
              case 1u:
              case 2u:
              case 8u:
              case 0xDu:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
              case 0x18u:
              case 0x19u:
              case 0x1Au:
              case 0x1Bu:
              case 0x1Cu:
              case 0x1Du:
              case 0x1Eu:
              case 0x1Fu:
              case 0x20u:
              case 0x21u:
              case 0x22u:
              case 0x23u:
              case 0x24u:
              case 0x25u:
              case 0x26u:
              case 0x27u:
              case 0x28u:
              case 0x29u:
              case 0x2Au:
              case 0x2Bu:
              case 0x2Cu:
              case 0x2Du:
              case 0x2Eu:
              case 0x2Fu:
              case 0x30u:
              case 0x31u:
              case 0x32u:
              case 0x33u:
              case 0x34u:
              case 0x35u:
              case 0x36u:
              case 0x37u:
              case 0x38u:
              case 0x39u:
              case 0x3Au:
              case 0x3Bu:
              case 0x3Cu:
              case 0x3Du:
              case 0x3Eu:
              case 0x4Fu:
              case 0x99u:
              case 0x9Au:
              case 0x9Bu:
              case 0x9Du:
              case 0x9Eu:
              case 0x9Fu:
                break;
              case 3u:
              case 4u:
              case 5u:
              case 6u:
              case 9u:
              case 0xAu:
              case 0xBu:
              case 0xCu:
              case 0x50u:
              case 0x54u:
              case 0x5Au:
              case 0x5Bu:
              case 0x5Cu:
              case 0x5Du:
              case 0x5Eu:
              case 0x5Fu:
              case 0x60u:
              case 0x61u:
              case 0x62u:
              case 0x63u:
              case 0x64u:
              case 0x65u:
              case 0x66u:
              case 0x67u:
              case 0x68u:
              case 0x69u:
              case 0x6Au:
              case 0x6Bu:
              case 0x6Cu:
              case 0x6Du:
              case 0x6Eu:
              case 0x6Fu:
              case 0x70u:
              case 0x71u:
              case 0x72u:
              case 0x73u:
              case 0x74u:
              case 0x75u:
              case 0x76u:
              case 0x77u:
              case 0x78u:
              case 0x79u:
              case 0x7Au:
              case 0x7Bu:
              case 0x7Cu:
              case 0x7Du:
              case 0x7Eu:
              case 0x7Fu:
              case 0x80u:
              case 0x81u:
              case 0x82u:
              case 0x83u:
              case 0x84u:
              case 0x85u:
              case 0x86u:
              case 0x87u:
              case 0x88u:
              case 0x89u:
              case 0x8Au:
              case 0x8Bu:
              case 0x8Cu:
              case 0x8Du:
              case 0x8Eu:
              case 0x8Fu:
              case 0x90u:
              case 0x91u:
              case 0x92u:
              case 0x93u:
              case 0x94u:
              case 0x95u:
              case 0x96u:
              case 0x97u:
              case 0x98u:
                v39 = 48;
                break;
              case 7u:
              case 0x51u:
              case 0x59u:
              case 0x9Cu:
                v39 = 56;
                break;
              case 0x3Fu:
              case 0x40u:
              case 0x41u:
              case 0x42u:
              case 0x43u:
              case 0x44u:
              case 0x45u:
              case 0x46u:
              case 0x47u:
              case 0x48u:
              case 0x49u:
              case 0x4Au:
              case 0x4Bu:
              case 0x4Cu:
              case 0x4Du:
              case 0x4Eu:
              case 0x52u:
                v39 = 64;
                break;
              case 0x53u:
                v39 = 176;
                break;
              case 0x55u:
              case 0x56u:
              case 0x57u:
              case 0x58u:
                v39 = 112;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x197F91190);
            }
            v40 = v31 + v39;
            v35 = *(JSC::B3::Value ***)v40;
            v32 = *(unsigned int *)(v40 + 12);
          }
          else
          {
            v34 = 40;
            switch(*(_WORD *)(v31 + 12))
            {
              case 0u:
              case 1u:
              case 2u:
              case 8u:
              case 0xDu:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
              case 0x18u:
              case 0x19u:
              case 0x1Au:
              case 0x1Bu:
              case 0x1Cu:
              case 0x1Du:
              case 0x1Eu:
              case 0x1Fu:
              case 0x20u:
              case 0x21u:
              case 0x22u:
              case 0x23u:
              case 0x24u:
              case 0x25u:
              case 0x26u:
              case 0x27u:
              case 0x28u:
              case 0x29u:
              case 0x2Au:
              case 0x2Bu:
              case 0x2Cu:
              case 0x2Du:
              case 0x2Eu:
              case 0x2Fu:
              case 0x30u:
              case 0x31u:
              case 0x32u:
              case 0x33u:
              case 0x34u:
              case 0x35u:
              case 0x36u:
              case 0x37u:
              case 0x38u:
              case 0x39u:
              case 0x3Au:
              case 0x3Bu:
              case 0x3Cu:
              case 0x3Du:
              case 0x3Eu:
              case 0x4Fu:
              case 0x99u:
              case 0x9Au:
              case 0x9Bu:
              case 0x9Du:
              case 0x9Eu:
              case 0x9Fu:
                break;
              case 3u:
              case 4u:
              case 5u:
              case 6u:
              case 9u:
              case 0xAu:
              case 0xBu:
              case 0xCu:
              case 0x50u:
              case 0x54u:
              case 0x5Au:
              case 0x5Bu:
              case 0x5Cu:
              case 0x5Du:
              case 0x5Eu:
              case 0x5Fu:
              case 0x60u:
              case 0x61u:
              case 0x62u:
              case 0x63u:
              case 0x64u:
              case 0x65u:
              case 0x66u:
              case 0x67u:
              case 0x68u:
              case 0x69u:
              case 0x6Au:
              case 0x6Bu:
              case 0x6Cu:
              case 0x6Du:
              case 0x6Eu:
              case 0x6Fu:
              case 0x70u:
              case 0x71u:
              case 0x72u:
              case 0x73u:
              case 0x74u:
              case 0x75u:
              case 0x76u:
              case 0x77u:
              case 0x78u:
              case 0x79u:
              case 0x7Au:
              case 0x7Bu:
              case 0x7Cu:
              case 0x7Du:
              case 0x7Eu:
              case 0x7Fu:
              case 0x80u:
              case 0x81u:
              case 0x82u:
              case 0x83u:
              case 0x84u:
              case 0x85u:
              case 0x86u:
              case 0x87u:
              case 0x88u:
              case 0x89u:
              case 0x8Au:
              case 0x8Bu:
              case 0x8Cu:
              case 0x8Du:
              case 0x8Eu:
              case 0x8Fu:
              case 0x90u:
              case 0x91u:
              case 0x92u:
              case 0x93u:
              case 0x94u:
              case 0x95u:
              case 0x96u:
              case 0x97u:
              case 0x98u:
                v34 = 48;
                break;
              case 7u:
              case 0x51u:
              case 0x59u:
              case 0x9Cu:
                v34 = 56;
                break;
              case 0x3Fu:
              case 0x40u:
              case 0x41u:
              case 0x42u:
              case 0x43u:
              case 0x44u:
              case 0x45u:
              case 0x46u:
              case 0x47u:
              case 0x48u:
              case 0x49u:
              case 0x4Au:
              case 0x4Bu:
              case 0x4Cu:
              case 0x4Du:
              case 0x4Eu:
              case 0x52u:
                v34 = 64;
                break;
              case 0x53u:
                v34 = 176;
                break;
              case 0x55u:
              case 0x56u:
              case 0x57u:
              case 0x58u:
                v34 = 112;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x197F91108);
            }
            v35 = (JSC::B3::Value **)(v31 + v34);
          }
          v36 = &v35[v32];
          if (v35 != v36)
          {
            do
            {
              v37 = *v35;
              if (*((_BYTE *)*v35 + 12) == 1)
              {
                do
                {
                  if (*((_BYTE *)v37 + 20) == 4)
                  {
                    v430 = v29;
                    v416 = v24;
                    v432 = v25;
                    v417 = v2;
                    v418 = v27;
                    v419 = v26;
                    v420 = JSC::B3::Value::childrenVector(v37);
                    if (!*(_DWORD *)(v420 + 12))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197F91130);
                    }
                    v38 = *(_BYTE **)v420;
                    v26 = v419;
                    v27 = v418;
                    v2 = v417;
                    v25 = v432;
                    v24 = v416;
                    v29 = v430;
                  }
                  else
                  {
                    v38 = (char *)v37 + 40;
                  }
                  v37 = *(JSC::B3::Value **)v38;
                }
                while (*(_BYTE *)(*(_QWORD *)v38 + 12) == 1);
                *v35 = v37;
              }
              ++v35;
            }
            while (v35 != v36);
            v33 = *(_WORD *)(v31 + 12);
          }
          if (v33 == 10)
          {
            v41 = **(unsigned int **)(v31 + 40);
            if (v27 <= v41)
            {
              __break(0xC471u);
              JUMPOUT(0x197F91198);
            }
            v42 = *((unsigned int *)v26 + v41);
            v29 = HIDWORD(v453[0]);
            if (HIDWORD(v453[0]) > v42)
            {
              if (*((_DWORD *)v24 + 4 * v42) == (_DWORD)v41)
              {
                v43 = *((_QWORD *)v24 + 2 * v42 + 1);
                v44 = *(_DWORD *)(v31 + 16);
                if (v44 != *(_DWORD *)(v43 + 16))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F90E94);
                }
                v45 = v25;
                v46 = v2;
                v47 = HIDWORD(v453[0]);
                v48 = v24;
                v427 = v26;
                v431 = v27;
                v425 = *(_QWORD *)(v31 + 32);
                v436 = *(_DWORD *)(v31 + 8);
                (**(void (***)(uint64_t))v31)(v31);
                *(_QWORD *)v31 = off_1E357F5F0;
                if (v44)
                {
                  *(_QWORD *)(v31 + 40) = v43;
                  v49 = 1;
                }
                else
                {
                  v49 = 0;
                }
                v50 = v46;
                v24 = v48;
                v29 = v47;
                *(_WORD *)(v31 + 12) = v49;
                *(_DWORD *)(v31 + 16) = v44;
                *(_BYTE *)(v31 + 20) = v49;
                *(_DWORD *)(v31 + 8) = v436;
                v433 = v48;
                v435 = v48;
                v26 = v427;
                *(_QWORD *)(v31 + 32) = v425;
                v27 = v431;
                v25 = v45;
                v2 = v50;
              }
              else
              {
                v433 = v24;
                v435 = v24;
              }
            }
          }
          else if (v33 == 9)
          {
            v51 = v29;
            v52 = v26;
            v53 = v24;
            v54 = **(unsigned int **)(v31 + 40);
            v55 = (JSC::B3::Value *)v31;
            v56 = v27;
            v57 = (uint64_t *)JSC::B3::Value::child(v55, 0);
            v27 = v56;
            if (v56 <= v54)
            {
              __break(0xC471u);
              JUMPOUT(0x197F911A0);
            }
            v58 = *((unsigned int *)v52 + v54);
            v29 = v51;
            v24 = v53;
            if (v51 > v58
              && (v62 = (_QWORD *)((char *)v433 + 16 * v58), *(_DWORD *)v62 == (_DWORD)v54))
            {
              v26 = v52;
              v63 = *v57;
              *v62 = v54;
              v62[1] = v63;
            }
            else
            {
              v59 = *v57;
              *(_QWORD *)&v477 = v54;
              *((_QWORD *)&v477 + 1) = v59;
              if ((_DWORD)v51 == LODWORD(v453[0]))
              {
                v64 = (_OWORD *)WTF::Vector<JSC::JSTokenLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v452, v51 + 1, (unint64_t)&v477);
                LODWORD(v29) = v51;
                v60 = HIDWORD(v453[0]);
                v24 = v452;
                *((_OWORD *)v452 + HIDWORD(v453[0])) = *v64;
                v435 = v24;
              }
              else
              {
                *((_OWORD *)v435 + v51) = v477;
                v60 = HIDWORD(v453[0]);
              }
              v61 = (v60 + 1);
              HIDWORD(v453[0]) = v61;
              v27 = HIDWORD(v451);
              if (HIDWORD(v451) <= v54)
              {
                __break(0xC471u);
                JUMPOUT(0x197F911A8);
              }
              v26 = v450;
              *((_DWORD *)v450 + v54) = v29;
              v433 = v435;
              v29 = v61;
            }
          }
          ++v30;
        }
        while (v30 < *(unsigned int *)(v28 + 20));
      }
      ++v23;
    }
    while (v23 != (uint64_t *)v25);
    v23 = (uint64_t *)v469;
    v3 = v439;
  }
  else
  {
    v26 = v21;
  }
  if (v23)
  {
    *(_QWORD *)&v469 = 0;
    DWORD2(v469) = 0;
    v65 = v26;
    WTF::fastFree((unint64_t)v23, v4, v5, v6, v7, v8, v9, v10);
    v26 = v65;
  }
  v66 = v452;
  if (v452)
  {
    v452 = 0;
    LODWORD(v453[0]) = 0;
    v67 = v26;
    WTF::fastFree((unint64_t)v66, v4, v5, v6, v7, v8, v9, v10);
    v26 = v67;
  }
  if (v26)
  {
    v450 = 0;
    LODWORD(v451) = 0;
    WTF::fastFree((unint64_t)v26, v4, v5, v6, v7, v8, v9, v10);
  }
  v450 = (WTF *)0x8000000000000000;
  v68 = *((unsigned int *)v3 + 19);
  if ((_DWORD)v68)
  {
    v69 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v3 + 8) + 8 * v69))
    {
      if (v68 == ++v69)
        goto LABEL_63;
    }
    if ((_DWORD)v68 == (_DWORD)v69)
    {
LABEL_63:
      v70 = *((_DWORD *)v3 + 19);
      goto LABEL_64;
    }
    v70 = *((_DWORD *)v3 + 19);
    do
    {
      v76 = *(_QWORD *)(*((_QWORD *)v3 + 8) + 8 * v69);
      if (*(_WORD *)(v76 + 12) == 10)
      {
        v77 = v450;
        if (((unint64_t)v450 & 0x8000000000000000) != 0)
          v78 = 63;
        else
          v78 = *(_QWORD *)(2 * (_QWORD)v450);
        v79 = **(unsigned int **)(v76 + 40);
        if (v78 <= v79)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v450, v79 + 1, 0);
          v77 = v450;
          v70 = *((_DWORD *)v3 + 19);
        }
        if ((uint64_t)v77 >= 0)
          v80 = (WTF **)(2 * (_QWORD)v77 + 8);
        else
          v80 = &v450;
        *(WTF **)((char *)v80 + ((v79 >> 3) & 0x1FFFFFF8)) = (WTF *)(*(unint64_t *)((char *)v80
                                                                                         + ((v79 >> 3) & 0x1FFFFFF8)) | (1 << v79));
      }
      v69 = (v69 + 1);
      if (v70 > v69)
      {
        while (!*(_QWORD *)(*((_QWORD *)v3 + 8) + 8 * v69))
        {
          if (v70 == ++v69)
          {
            LODWORD(v69) = v70;
            break;
          }
        }
      }
    }
    while ((_DWORD)v68 != (_DWORD)v69);
LABEL_64:
    if (v70)
    {
      v71 = 0;
      v72 = v70;
      while (!*(_QWORD *)(*((_QWORD *)v3 + 8) + 8 * v71))
      {
        if (v70 == ++v71)
          goto LABEL_68;
      }
      if (v70 != (_DWORD)v71)
      {
        v81 = v450;
        v82 = (unint64_t *)(2 * (_QWORD)v450);
        if ((uint64_t)v450 >= 0)
          v83 = (WTF **)(2 * (_QWORD)v450 + 8);
        else
          v83 = &v450;
        do
        {
          v84 = *(_QWORD *)(*((_QWORD *)v3 + 8) + 8 * v71);
          if (*(_WORD *)(v84 + 12) == 9)
          {
            v85 = *(unsigned int **)(v84 + 40);
            if (!v85
              || (((unint64_t)v81 & 0x8000000000000000) != 0 ? (v86 = 63) : (v86 = *v82),
                  (v87 = *v85, v86 <= v87)
               || ((*(unint64_t *)((char *)v83 + ((v87 >> 3) & 0x1FFFFFF8)) >> v87) & 1) == 0))
            {
              if (*(_DWORD *)(v84 + 16))
              {
                __break(0xC471u);
                JUMPOUT(0x197F90E74);
              }
              v88 = *(_QWORD *)(v84 + 32);
              v89 = *(_DWORD *)(v84 + 8);
              (**(void (***)(uint64_t))v84)(v84);
              *(_QWORD *)v84 = off_1E357F5F0;
              *(_WORD *)(v84 + 12) = 0;
              *(_DWORD *)(v84 + 16) = 0;
              *(_BYTE *)(v84 + 20) = 0;
              *(_DWORD *)(v84 + 8) = v89;
              v3 = v439;
              *(_QWORD *)(v84 + 32) = v88;
              v70 = *((_DWORD *)v439 + 19);
            }
          }
          v71 = (v71 + 1);
          if (v70 > v71)
          {
            while (!*(_QWORD *)(*((_QWORD *)v3 + 8) + 8 * v71))
            {
              if (v70 == ++v71)
              {
                LODWORD(v71) = v70;
                break;
              }
            }
          }
        }
        while (v72 != (_DWORD)v71);
      }
    }
  }
LABEL_68:
  v73 = *((unsigned int *)v3 + 3);
  if ((_DWORD)v73)
  {
    v74 = 0;
    while (!*(_QWORD *)(*(_QWORD *)v3 + 8 * v74))
    {
      if (v73 == ++v74)
        goto LABEL_72;
    }
    if ((_DWORD)v73 == (_DWORD)v74)
    {
LABEL_72:
      v75 = *((_DWORD *)v3 + 3);
      goto LABEL_129;
    }
    v90 = v450;
    v91 = (unint64_t *)(2 * (_QWORD)v450);
    v92 = (uint64_t)v450 >= 0 ? (WTF **)(2 * (_QWORD)v450 + 8) : &v450;
    v75 = *((_DWORD *)v3 + 3);
    do
    {
      v4 = *(unsigned int **)(*(_QWORD *)v3 + 8 * v74);
      if (!v4
        || (((unint64_t)v90 & 0x8000000000000000) != 0 ? (v93 = 63) : (v93 = *v91),
            (v94 = *v4, v93 <= v94)
         || ((*(unint64_t *)((char *)v92 + ((v94 >> 3) & 0x1FFFFFF8)) >> v94) & 1) == 0))
      {
        JSC::B3::SparseCollection<JSC::B3::Variable>::remove((uint64_t *)v3, v4, v5, v6, v7, v8, v9, v10);
        v75 = *((_DWORD *)v3 + 3);
      }
      v74 = (v74 + 1);
      if (v75 > v74)
      {
        while (!*(_QWORD *)(*(_QWORD *)v3 + 8 * v74))
        {
          if (v75 == ++v74)
          {
            LODWORD(v74) = v75;
            break;
          }
        }
      }
    }
    while ((_DWORD)v73 != (_DWORD)v74);
  }
  else
  {
    v75 = 0;
  }
LABEL_129:
  if (((unint64_t)v450 & 0x8000000000000000) == 0)
  {
    WTF::fastFree(2 * (_QWORD)v450, v4, v5, v6, v7, v8, v9, v10);
    v75 = *((_DWORD *)v3 + 3);
  }
  if (v75)
  {
    JSC::B3::breakCriticalEdges(v3, (JSC::B3::Procedure *)v4, v5, v6, v7, v8, v9, v10);
    JSC::B3::VariableLiveness::VariableLiveness((uint64_t)&v477, v3);
    v95 = *((unsigned int *)v3 + 15);
    if ((_DWORD)v95)
    {
      v96 = 0;
      while (!*(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v96))
      {
        if (v95 == ++v96)
          goto LABEL_136;
      }
      if ((_DWORD)v95 == (_DWORD)v96)
      {
LABEL_136:
        LODWORD(v97) = *((_DWORD *)v3 + 15);
        goto LABEL_184;
      }
      LODWORD(v97) = *((_DWORD *)v3 + 15);
      do
      {
        if (v97 <= v96)
        {
          __break(0xC471u);
          JUMPOUT(0x197F911C8);
        }
        v98 = *(unsigned int **)(*((_QWORD *)v3 + 6) + 8 * v96);
        v481 = 0;
        v99 = v483 + 32 * *v98;
        v100 = *(unsigned int *)(v99 + 12);
        if ((_DWORD)v100)
        {
          v101 = *(_DWORD **)v99;
          v102 = v478;
          v103 = 4 * v100;
          do
          {
            v104 = *v101;
            v105 = *(unsigned int *)(v102 + 4 * v104);
            v106 = v481;
            if (v481 <= v105 || *(_DWORD *)(v479 + 4 * v105) != (_DWORD)v104)
            {
              LODWORD(v450) = *v101;
              if (v481 == v480)
              {
                v126 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v479, v481 + 1, (unint64_t)&v450);
                *(_DWORD *)(v479 + 4 * v481) = *v126;
                v102 = v478;
              }
              else
              {
                *(_DWORD *)(v479 + 4 * v481) = v104;
              }
              ++v481;
              *(_DWORD *)(v102 + 4 * v104) = v106;
            }
            ++v101;
            v103 -= 4;
          }
          while (v103);
        }
        v107 = v98[5];
        if (v107)
        {
          v108 = v107 - 1;
          v109 = 8 * (v107 - 1);
          do
          {
            v110 = v98[5];
            if (v110 <= v108)
            {
              __break(0xC471u);
              JUMPOUT(0x197F910C8);
            }
            v111 = *(_QWORD *)(*((_QWORD *)v98 + 1) + v109);
            if (*(_WORD *)(v111 + 12) == 9)
            {
              v121 = **(unsigned int **)(v111 + 40);
              v122 = *(unsigned int *)(v478 + 4 * v121);
              if (v481 <= v122 || *(_DWORD *)(v479 + 4 * v122) != (_DWORD)v121)
              {
                if (*(_DWORD *)(v111 + 16))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F90ED4);
                }
                v123 = *(_QWORD *)(v111 + 32);
                v124 = *(_DWORD *)(v111 + 8);
                (**(void (***)(_QWORD))v111)(*(_QWORD *)(*((_QWORD *)v98 + 1) + v109));
                *(_QWORD *)v111 = off_1E357F5F0;
                *(_WORD *)(v111 + 12) = 0;
                *(_DWORD *)(v111 + 16) = 0;
                *(_BYTE *)(v111 + 20) = 0;
                *(_DWORD *)(v111 + 8) = v124;
                *(_QWORD *)(v111 + 32) = v123;
                v110 = v98[5];
              }
            }
            if (v110 > v108)
            {
              v112 = *(_QWORD *)(*((_QWORD *)v98 + 1) + v109);
              if (v112)
              {
                if (*(_WORD *)(v112 + 12) == 9)
                {
                  v118 = **(unsigned int **)(v112 + 40);
                  v119 = v478;
                  v120 = *(unsigned int *)(v478 + 4 * v118);
                  if (v481 > v120 && *(_DWORD *)(v479 + 4 * v120) == (_DWORD)v118)
                  {
                    v125 = *(unsigned int *)(v479 + 4 * v481 - 4);
                    *(_DWORD *)(v479 + 4 * v120) = v125;
                    *(_DWORD *)(v119 + 4 * v125) = v120;
                    --v481;
                    v110 = v98[5];
                  }
                }
              }
            }
            if (v110 > v108)
            {
              v113 = *(_QWORD *)(*((_QWORD *)v98 + 1) + v109);
              if (v113)
              {
                if (*(_WORD *)(v113 + 12) == 10)
                {
                  v114 = **(unsigned int **)(v113 + 40);
                  v115 = v478;
                  v116 = *(unsigned int *)(v478 + 4 * v114);
                  v117 = v481;
                  if (v481 <= v116 || *(_DWORD *)(v479 + 4 * v116) != (_DWORD)v114)
                  {
                    LODWORD(v450) = v114;
                    if (v481 == v480)
                    {
                      v407 = (_DWORD *)WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v479, v481 + 1, (unint64_t)&v450);
                      *(_DWORD *)(v479 + 4 * v481) = *v407;
                      v115 = v478;
                    }
                    else
                    {
                      *(_DWORD *)(v479 + 4 * v481) = v114;
                    }
                    ++v481;
                    *(_DWORD *)(v115 + 4 * v114) = v117;
                  }
                }
              }
            }
            v109 -= 8;
            --v108;
          }
          while (v108 != -1);
        }
        v96 = (v96 + 1);
        v3 = v439;
        v97 = *((unsigned int *)v439 + 15);
        if (v97 > v96)
        {
          while (!*(_QWORD *)(*((_QWORD *)v439 + 6) + 8 * v96))
          {
            if (v97 == ++v96)
            {
              LODWORD(v96) = *((_DWORD *)v439 + 15);
              break;
            }
          }
        }
      }
      while ((_DWORD)v95 != (_DWORD)v96);
    }
    else
    {
      LODWORD(v97) = 0;
    }
LABEL_184:
    v128 = *(_DWORD *)(**((_QWORD **)&v477 + 1) + 60);
    if (v128)
    {
      v129 = v128 - 1;
      v130 = 8 * (v128 - 1);
      do
      {
        if (*(_DWORD *)(**((_QWORD **)&v477 + 1) + 60) <= v129)
        {
          __break(0xC471u);
          JUMPOUT(0x197F911B8);
        }
        if (*(_QWORD *)(*(_QWORD *)(**((_QWORD **)&v477 + 1) + 48) + v130))
          std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v130 -= 8;
        --v129;
      }
      while (v129 != -1);
      LODWORD(v97) = *((_DWORD *)v3 + 15);
    }
    v472 = 0;
    v471 = 0;
    v469 = 0u;
    v470 = 0u;
    v450 = 0;
    v451 = 0;
    v452 = 0;
    v473 = 0;
    v474 = v97;
    if ((_DWORD)v97)
    {
      if (v97 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x197F91238);
      }
      v131 = 24 * v97;
      v132 = (uint64_t *)WTF::fastMalloc((WTF *)(24 * v97));
      v473 = (v131 & 0xFFFFFFF8) / 0x18;
      v472 = v132;
      WTF::VectorFiller<false,JSC::B3::SSACalculator::BlockData>::uninitializedFill(v132, &v132[3 * v474], (uint64_t *)&v450);
      v140 = v451;
      if (v451)
      {
        v451 = 0;
        LODWORD(v452) = 0;
        WTF::fastFree((unint64_t)v140, v133, v134, v135, v136, v137, v138, v139);
      }
      if (v450)
        WTF::fastFree((unint64_t)v450 - 16, v133, v134, v135, v136, v137, v138, v139);
    }
    v475 = 0;
    v476 = v3;
    v467 = 0;
    v468 = 0;
    v141 = *((unsigned int *)v3 + 3);
    v464 = 0;
    v465 = 0;
    v466 = v141;
    if ((_DWORD)v141)
    {
      if (v141 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x197F91240);
      }
      v142 = (WTF *)WTF::fastMalloc((WTF *)(8 * v141));
      v465 = v141;
      v464 = v142;
      if (v466)
        bzero(v142, 8 * v466);
    }
    v143 = *((unsigned int *)v3 + 3);
    if ((_DWORD)v143)
    {
      v144 = 0;
      while (!*(_QWORD *)(*(_QWORD *)v3 + 8 * v144))
      {
        if (v143 == ++v144)
          goto LABEL_205;
      }
      while ((_DWORD)v143 != (_DWORD)v144)
      {
        v484 = 0;
        v484 = *(WTF ***)(*(_QWORD *)v3 + 8 * v144);
        v450 = (WTF *)&v452;
        v451 = (WTF *)4;
        v454 = v469;
        WTF::SegmentedVector<JSC::B3::SSACalculator::Variable,8ul>::append<JSC::B3::SSACalculator::Variable>(&v469, (uint64_t)&v450);
        v396 = v469 - 1;
        v397 = (unint64_t)(v469 - 1) >> 3;
        if (v397 >= DWORD1(v470))
        {
          __break(0xC471u);
          JUMPOUT(0x197F91220);
        }
        v398 = *(_QWORD *)(*((_QWORD *)&v469 + 1) + 8 * v397);
        v399 = v450;
        if (&v452 != (WTF **)v450 && v450)
        {
          v450 = 0;
          LODWORD(v451) = 0;
          WTF::fastFree((unint64_t)v399, v389, v390, v391, v392, v393, v394, v395);
        }
        v400 = v398 + 56 * (v396 & 7);
        v401 = *(_DWORD *)(v400 + 48);
        if (HIDWORD(v468) != v401)
        {
          __break(0xC471u);
          JUMPOUT(0x197F90EF4);
        }
        if (v401 == (_DWORD)v468)
        {
          v403 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v467, HIDWORD(v468) + 1, (unint64_t)&v484);
          v401 = HIDWORD(v468);
          *((_QWORD *)v467 + HIDWORD(v468)) = *v403;
        }
        else
        {
          *((_QWORD *)v467 + HIDWORD(v468)) = v484;
        }
        HIDWORD(v468) = v401 + 1;
        *((_QWORD *)v464 + *(unsigned int *)v484) = v400;
        v144 = (v144 + 1);
        v402 = *((unsigned int *)v3 + 3);
        if (v402 > v144)
        {
          while (!*(_QWORD *)(*(_QWORD *)v3 + 8 * v144))
          {
            if (v402 == ++v144)
            {
              LODWORD(v144) = *((_DWORD *)v3 + 3);
              break;
            }
          }
        }
      }
    }
LABEL_205:
    v145 = *((unsigned int *)v3 + 15);
    if ((_DWORD)v145)
    {
      v146 = 0;
      while (!*(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v146))
      {
        if (v145 == ++v146)
          goto LABEL_209;
      }
      if ((_DWORD)v145 != (_DWORD)v146)
      {
        v365 = *((_DWORD *)v3 + 15);
        do
        {
          if (v365 <= v146)
          {
            __break(0xC471u);
            JUMPOUT(0x197F911C0);
          }
          v366 = *(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v146);
          v367 = *(unsigned int *)(v366 + 20);
          if ((_DWORD)v367)
          {
            v368 = *(unsigned int ****)(v366 + 8);
            v369 = 8 * v367;
            do
            {
              v370 = *v368;
              if (*((_WORD *)*v368 + 6) == 9)
              {
                v371 = *((_QWORD *)v464 + *v370[5]);
                if (v371)
                {
                  v372 = (uint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v370, 0);
                  JSC::B3::SSACalculator::newDef((uint64_t)&v469, v371, (unsigned int *)v366, *v372);
                }
              }
              ++v368;
              v369 -= 8;
            }
            while (v369);
            v365 = *((_DWORD *)v3 + 15);
          }
          v146 = (v146 + 1);
          if (v365 > v146)
          {
            while (!*(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v146))
            {
              if (v365 == ++v146)
              {
                LODWORD(v146) = v365;
                break;
              }
            }
          }
        }
        while ((_DWORD)v145 != (_DWORD)v146);
      }
    }
LABEL_209:
    v459 = (WTF **)"B3";
    v460 = 3;
    v461 = "fixSSA: computePhis";
    v462 = 20;
    v463 = 0.0;
    if (byte_1ECF4C67A | byte_1ECF4C33D)
    {
      v408 = mach_absolute_time();
      v410 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v410 != -1)
      {
        v450 = (WTF *)v448;
        v484 = &v450;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v484, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v409) = dword_1ECF4400C;
      v463 = (double)(v408 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v409 * 1000000000.0);
    }
    v475 = JSC::B3::Procedure::dominators(v476);
    v426 = v469;
    if ((_QWORD)v469)
    {
      v147 = 0;
      while (1)
      {
        if (v147 >> 3 >= DWORD1(v470))
        {
          __break(0xC471u);
          JUMPOUT(0x197F91200);
        }
        v148 = v475;
        v149 = *(_QWORD *)(*((_QWORD *)&v469 + 1) + 8 * (v147 >> 3)) + 56 * (v147 & 7);
        v444 = (WTF *)0x8000000000000000;
        v150 = *(unsigned int *)(v149 + 12);
        v484 = (WTF **)v486;
        LODWORD(v485) = 4;
        HIDWORD(v485) = v150;
        v428 = v147;
        if (v150 >= 5)
        {
          if (v150 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x197F91258);
          }
          v151 = (WTF **)WTF::fastMalloc((WTF *)(8 * v150));
          LODWORD(v485) = v150;
          v484 = v151;
          v150 = *(unsigned int *)(v149 + 12);
        }
        else
        {
          v151 = (WTF **)v486;
        }
        memcpy(v151, *(const void **)v149, 8 * v150);
        v159 = HIDWORD(v485);
        if (HIDWORD(v485))
          break;
LABEL_302:
        v232 = (unint64_t)v484;
        if (v486 != v484 && v484)
        {
          v484 = 0;
          LODWORD(v485) = 0;
          WTF::fastFree(v232, v152, v153, v154, v155, v156, v157, v158);
        }
        v3 = v439;
        if (((unint64_t)v444 & 0x8000000000000000) == 0)
          WTF::fastFree(2 * (_QWORD)v444, v152, v153, v154, v155, v156, v157, v158);
        v147 = v428 + 1;
        if (v428 + 1 == v426)
          goto LABEL_326;
      }
      v160 = (~(v149 << 32) + v149) ^ ((unint64_t)(~(v149 << 32) + v149) >> 22);
      v161 = 9 * ((v160 + ~(v160 << 13)) ^ ((v160 + ~(v160 << 13)) >> 8));
      v162 = (v161 ^ (v161 >> 15)) + ~((v161 ^ (v161 >> 15)) << 27);
      v437 = (v162 >> 31) ^ v162;
LABEL_217:
      v163 = v484[v159 - 1];
      HIDWORD(v485) = v159 - 1;
      v450 = (WTF *)&v452;
      LODWORD(v451) = 16;
      v452 = v163;
      v164 = 1;
LABEL_218:
      v165 = (unsigned int *)*((_QWORD *)v450 + --v164);
      HIDWORD(v451) = v164;
      v166 = v165[17];
      if (!(_DWORD)v166)
        goto LABEL_256;
      v167 = 0;
      while (1)
      {
        if (v167 >= v165[17])
        {
          __break(0xC471u);
          JUMPOUT(0x197F910C0);
        }
        v168 = *(unsigned int **)(*((_QWORD *)v165 + 7) + 16 * v167);
        v169 = *v168;
        v170 = v148[1];
        v171 = &v170[4 * v169];
        v172 = &v170[4 * *(unsigned int *)v163];
        if (*((_DWORD *)v171 + 6) > *((_DWORD *)v172 + 6) && *((_DWORD *)v171 + 7) < *((_DWORD *)v172 + 7))
          goto LABEL_223;
        *(_QWORD *)&v488[0] = *(_QWORD *)(*((_QWORD *)v165 + 7) + 16 * v167);
        v173 = v444;
        if (((unint64_t)v444 & 0x8000000000000000) != 0)
          v174 = 63;
        else
          v174 = *(_QWORD *)(2 * (_QWORD)v444);
        if (v174 <= v169)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v444, v169 + 1, 0);
          v173 = v444;
        }
        v175 = 2 * (_QWORD)v173 + 8;
        v176 = (uint64_t)v173 < 0;
        v177 = &v444;
        if (!v176)
          v177 = (WTF **)v175;
        v178 = (v169 >> 3) & 0x1FFFFFF8;
        v179 = *(uint64_t *)((char *)v177 + v178);
        *(WTF **)((char *)v177 + v178) = (WTF *)(v179 | (1 << v169));
        if ((v179 & (1 << v169)) != 0)
          goto LABEL_223;
        v180 = *(unsigned int *)(v149 + 48);
        if (HIDWORD(v468) <= v180)
        {
          __break(0xC471u);
          JUMPOUT(0x197F91110);
        }
        v181 = (unsigned int *)*((_QWORD *)v467 + v180);
        v182 = v482 + 32 * *v168;
        v183 = *(unsigned int *)(v182 + 12);
        v184 = *v181;
        if (v183 < 2)
        {
          v211 = 0;
LABEL_235:
          if (!v183 || *(_DWORD *)(*(_QWORD *)v182 + 4 * v211) != v184)
            goto LABEL_223;
        }
        else
        {
          v211 = 0;
          while (1)
          {
            v212 = *(_DWORD *)(*(_QWORD *)v182 + 4 * (v211 + ((v183 - 1) >> 1)));
            if (v212 == v184)
              break;
            v213 = (v183 - 1) >> 1;
            v183 -= v213 + 1;
            if (v212 <= v184)
            {
              v214 = v213 + 1;
            }
            else
            {
              v183 = v213;
              v214 = 0;
            }
            v211 += v214;
            if (v183 <= 1)
              goto LABEL_235;
          }
        }
        if (!v168[5])
        {
          __break(0xC471u);
          JUMPOUT(0x197F91118);
        }
        v185 = v181[1];
        v186 = *(_QWORD *)(**((_QWORD **)v168 + 1) + 24);
        v187 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)v187 = off_1E357F5F0;
        *(_DWORD *)(v187 + 8) = -1;
        *(_WORD *)(v187 + 12) = 153;
        *(_DWORD *)(v187 + 16) = v185;
        *(_BYTE *)(v187 + 20) = 0;
        *(_QWORD *)(v187 + 24) = v186;
        *(_QWORD *)(v187 + 32) = 0;
        v188 = *((unsigned int *)v439 + 23);
        if ((_DWORD)v188)
        {
          v189 = *(_QWORD *)(*((_QWORD *)v439 + 10) + 8 * v188 - 8);
          *((_DWORD *)v439 + 23) = v188 - 1;
          v190 = *((_QWORD *)v439 + 8);
        }
        else
        {
          v189 = *((unsigned int *)v439 + 19);
          if ((_DWORD)v189 == *((_DWORD *)v439 + 18))
          {
            v220 = v189 + (v189 >> 2);
            if (v220 >= 0x10)
              v221 = v220 + 1;
            else
              v221 = 16;
            if (v221 <= v189 + 1)
              v221 = v189 + 1;
            if (v221 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x197F91120);
            }
            v222 = v439;
            v423 = v221;
            v424 = (WTF *)*((_QWORD *)v439 + 8);
            v223 = (void *)WTF::fastMalloc((WTF *)(8 * v221));
            *((_DWORD *)v439 + 18) = v423;
            *((_QWORD *)v439 + 8) = v223;
            memcpy(v223, v424, 8 * v189);
            if (v424)
            {
              if (*((WTF **)v439 + 8) == v424)
              {
                *((_QWORD *)v439 + 8) = 0;
                *((_DWORD *)v439 + 18) = 0;
              }
              WTF::fastFree((unint64_t)v424, v224, v225, v226, v227, v228, v229, v230);
              v222 = v439;
            }
            v231 = *((unsigned int *)v222 + 19);
            v190 = *((_QWORD *)v222 + 8);
            *(_QWORD *)(v190 + 8 * v231) = 0;
            *((_DWORD *)v222 + 19) = v231 + 1;
          }
          else
          {
            v190 = *((_QWORD *)v439 + 8);
            *(_QWORD *)(v190 + 8 * v189) = 0;
            *((_DWORD *)v439 + 19) = v189 + 1;
          }
        }
        *(_DWORD *)(v187 + 8) = v189;
        *(_QWORD *)(v190 + 8 * v189) = v187;
        v191 = &v472[3 * *v168];
        v192 = (WTF *)WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v192 = v149;
        *((_QWORD *)v192 + 1) = v168;
        *((_QWORD *)v192 + 2) = v187;
        *((_QWORD *)v192 + 3) = 0;
        *((_QWORD *)v192 + 3) = v471;
        v471 = v192;
        v448[0] = v192;
        v193 = v191 + 1;
        v194 = *((unsigned int *)v191 + 5);
        if ((_DWORD)v194 == *((_DWORD *)v191 + 4))
        {
          v195 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v191 + 1), v194 + 1, (unint64_t)v448);
          v194 = *((unsigned int *)v191 + 5);
          *(_QWORD *)(*v193 + 8 * v194) = *v195;
        }
        else
        {
          *(_QWORD *)(*v193 + 8 * v194) = v192;
        }
        *((_DWORD *)v191 + 5) = v194 + 1;
        v196 = *v191;
        if (*v191
          || (WTF::HashTable<JSC::B3::SSACalculator::Variable *,WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>>,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>>::rehash(v191, 8uLL, 0, v154, v155, v156, v157, v158), (v196 = *v191) != 0))
        {
          v197 = *(_DWORD *)(v196 - 8);
        }
        else
        {
          v197 = 0;
        }
        v198 = v197 & v437;
        v153 = v196 + 16 * (v197 & v437);
        v199 = *(_QWORD *)v153;
        if (*(_QWORD *)v153)
        {
          v215 = 0;
          v216 = 1;
          while (v199 != v149)
          {
            if (v199 == -1)
              v215 = (_QWORD *)v153;
            v198 = (v198 + v216) & v197;
            v153 = v196 + 16 * v198;
            v199 = *(_QWORD *)v153;
            ++v216;
            if (!*(_QWORD *)v153)
            {
              if (v215)
              {
                *v215 = 0;
                v215[1] = 0;
                --*(_DWORD *)(*v191 - 16);
                v153 = (uint64_t)v215;
              }
              goto LABEL_247;
            }
          }
          goto LABEL_253;
        }
LABEL_247:
        *(_QWORD *)v153 = v149;
        *(WTF **)(v153 + 8) = v448[0];
        v200 = *v191;
        if (*v191)
          v201 = *(_DWORD *)(v200 - 12) + 1;
        else
          v201 = 1;
        *(_DWORD *)(v200 - 12) = v201;
        v202 = *v191;
        if (*v191)
          v203 = *(_DWORD *)(v202 - 12);
        else
          v203 = 0;
        v204 = (*(_DWORD *)(v202 - 16) + v203);
        v205 = *(unsigned int *)(v202 - 4);
        if (v205 > 0x400)
        {
          if (v205 <= 2 * v204)
            goto LABEL_533;
        }
        else if (3 * v205 <= 4 * v204)
        {
          if ((_DWORD)v205)
LABEL_533:
            v245 = ((_DWORD)v205 << (6 * *(_DWORD *)(v202 - 12) >= (2 * v205)));
          else
            v245 = 8;
          WTF::HashTable<JSC::B3::SSACalculator::Variable *,WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>>,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>>::rehash(v191, v245, v153, v154, v155, v156, v157, v158);
        }
LABEL_253:
        v206 = HIDWORD(v485);
        if (HIDWORD(v485) == (_DWORD)v485)
        {
          v219 = (WTF **)WTF::Vector<JSC::B3::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v484, HIDWORD(v485) + 1, (unint64_t)v488);
          v206 = HIDWORD(v485);
          v484[HIDWORD(v485)] = *v219;
        }
        else
        {
          v484[HIDWORD(v485)] = (WTF *)v168;
        }
        HIDWORD(v485) = v206 + 1;
LABEL_223:
        if (++v167 == v166)
        {
          v164 = HIDWORD(v451);
LABEL_256:
          v207 = (uint64_t)&v148[1][4 * *v165];
          v208 = *(unsigned int *)(v207 + 12);
          if ((_DWORD)v208)
          {
            v209 = *(const void **)v207;
            v210 = v208 + v164;
            if (v210 > v451)
            {
              v233 = v451 + ((unint64_t)v451 >> 2);
              if (v233 >= 0x10)
                v234 = v233 + 1;
              else
                v234 = 16;
              if (v234 <= v210)
                v235 = v208 + v164;
              else
                v235 = v234;
              v236 = v450;
              if (v235 < 0x11)
              {
                v237 = (WTF *)&v452;
                v450 = (WTF *)&v452;
                LODWORD(v451) = 16;
              }
              else
              {
                if (v235 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F911F0);
                }
                v237 = (WTF *)WTF::fastMalloc((WTF *)(8 * v235));
                LODWORD(v451) = v235;
                v450 = v237;
              }
              memcpy(v237, v236, 8 * v164);
              if (&v452 != (WTF **)v236 && v236)
              {
                if (v450 == v236)
                {
                  v450 = 0;
                  LODWORD(v451) = 0;
                }
                WTF::fastFree((unint64_t)v236, v238, v239, v240, v241, v242, v243, v244);
              }
            }
            if (v210 < HIDWORD(v451))
            {
              __break(0xC471u);
              JUMPOUT(0x197F91138);
            }
            memcpy((char *)v450 + 8 * HIDWORD(v451), v209, 8 * v208);
            HIDWORD(v451) = v208 + v164;
            v164 += v208;
          }
          if (!v164)
          {
            v217 = v450;
            if (&v452 != (WTF **)v450 && v450 != 0)
            {
              v450 = 0;
              LODWORD(v451) = 0;
              WTF::fastFree((unint64_t)v217, v152, v153, v154, v155, v156, v157, v158);
            }
            v159 = HIDWORD(v485);
            if (!HIDWORD(v485))
              goto LABEL_302;
            goto LABEL_217;
          }
          goto LABEL_218;
        }
      }
    }
LABEL_326:
    JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v459);
    v484 = (WTF **)"B3";
    v485 = 3;
    v486[0] = "fixSSA: convert";
    v486[1] = 16;
    v487 = 0.0;
    if (byte_1ECF4C67A | byte_1ECF4C33D)
    {
      v411 = mach_absolute_time();
      v413 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v413 != -1)
      {
        v450 = (WTF *)v448;
        v459 = &v450;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v459, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v412) = dword_1ECF4400C;
      v487 = (double)(v411 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v412 * 1000000000.0);
    }
    v450 = v3;
    v451 = (WTF *)v453;
    v452 = (WTF *)8;
    v455 = 0u;
    v456 = 0u;
    v457 = 0u;
    v458 = 0;
    v253 = *((unsigned int *)v3 + 3);
    *(_OWORD *)v448 = 0u;
    *(_OWORD *)v449 = 0u;
    if ((_DWORD)v253)
    {
      if (v253 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x197F91248);
      }
      v254 = (WTF *)WTF::fastMalloc((WTF *)(4 * v253));
      LODWORD(v448[1]) = v253;
      v448[0] = v254;
    }
    HIDWORD(v448[1]) = v253;
    v447 = 0x8000000000000000;
    if (!*((_DWORD *)v3 + 15))
    {
      __break(0xC471u);
      JUMPOUT(0x197F91250);
    }
    JSC::B3::blocksInPreOrder<JSC::B3::BasicBlock>(**((unsigned int ***)v3 + 6), v246, v247, v248, v249, v250, v251, v252, (uint64_t)&v444);
    v262 = v444;
    if (v446)
    {
      v263 = (WTF *)((char *)v444 + 8 * v446);
      v429 = v263;
      do
      {
        v443 = 0;
        v264 = *(JSC::B3::BasicBlock **)v262;
        v443 = v264;
        HIDWORD(v449[1]) = 0;
        v459 = v448;
        v460 = (uint64_t)&v464;
        v461 = (const char *)&v469;
        v462 = (uint64_t)&v443;
        v463 = COERCE_DOUBLE(&v450);
        v265 = &v472[3 * *(unsigned int *)v264];
        v266 = *((unsigned int *)v265 + 5);
        if ((_DWORD)v266)
        {
          v317 = (uint64_t *)v265[1];
          v318 = 8 * v266;
          do
          {
            v319 = *v317;
            v320 = *(unsigned int *)(*(_QWORD *)*v317 + 48);
            if (HIDWORD(v468) <= v320)
            {
              __break(0xC471u);
              JUMPOUT(0x197F91208);
            }
            v321 = (unsigned int *)*((_QWORD *)v467 + v320);
            v322 = *(_QWORD *)(v319 + 16);
            *(_QWORD *)&v488[0] = 0;
            *((_QWORD *)&v488[0] + 1) = v322;
            v323 = HIDWORD(v452);
            if (HIDWORD(v452) == (_DWORD)v452)
            {
              v406 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v451, (void *)(HIDWORD(v452) + 1), (unint64_t)v488, v257, v258, v259, v260, v261);
              v323 = HIDWORD(v452);
              v324 = v451;
              v325 = *v406;
            }
            else
            {
              v324 = v451;
              v325 = v488[0];
            }
            *((_OWORD *)v324 + v323) = v325;
            ++HIDWORD(v452);
            v326 = *v321;
            if (HIDWORD(v448[1]) <= v326)
            {
              __break(0xC471u);
              JUMPOUT(0x197F91210);
            }
            v327 = *(_QWORD *)(v319 + 16);
            v328 = *((unsigned int *)v448[0] + v326);
            v329 = HIDWORD(v449[1]);
            if (HIDWORD(v449[1]) > v328
              && (v330 = (_QWORD *)((char *)v449[0] + 16 * v328), *(_DWORD *)v330 == (_DWORD)v326))
            {
              *v330 = v326;
              v330[1] = v327;
            }
            else
            {
              *(_QWORD *)&v488[0] = v326;
              *((_QWORD *)&v488[0] + 1) = v327;
              if (HIDWORD(v449[1]) == LODWORD(v449[1]))
              {
                v405 = (_OWORD *)WTF::Vector<JSC::JSTokenLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v449, HIDWORD(v449[1]) + 1, (unint64_t)v488);
                *((_OWORD *)v449[0] + HIDWORD(v449[1])) = *v405;
              }
              else
              {
                *((_OWORD *)v449[0] + HIDWORD(v449[1])) = v488[0];
              }
              ++HIDWORD(v449[1]);
              if (HIDWORD(v448[1]) <= v326)
              {
                __break(0xC471u);
                JUMPOUT(0x197F91218);
              }
              *((_DWORD *)v448[0] + v326) = v329;
            }
            ++v317;
            v318 -= 8;
          }
          while (v318);
          v264 = v443;
        }
        if (!*((_DWORD *)v264 + 5))
          goto LABEL_569;
        v267 = 0;
        do
        {
          v268 = *(_QWORD *)(*((_QWORD *)v264 + 1) + 8 * v267);
          v269 = *(unsigned __int8 *)(v268 + 20);
          v270 = *(_WORD *)(v268 + 12);
          if (v269 == 4)
          {
            v277 = 40;
            switch(*(_WORD *)(v268 + 12))
            {
              case 0u:
              case 1u:
              case 2u:
              case 8u:
              case 0xDu:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
              case 0x18u:
              case 0x19u:
              case 0x1Au:
              case 0x1Bu:
              case 0x1Cu:
              case 0x1Du:
              case 0x1Eu:
              case 0x1Fu:
              case 0x20u:
              case 0x21u:
              case 0x22u:
              case 0x23u:
              case 0x24u:
              case 0x25u:
              case 0x26u:
              case 0x27u:
              case 0x28u:
              case 0x29u:
              case 0x2Au:
              case 0x2Bu:
              case 0x2Cu:
              case 0x2Du:
              case 0x2Eu:
              case 0x2Fu:
              case 0x30u:
              case 0x31u:
              case 0x32u:
              case 0x33u:
              case 0x34u:
              case 0x35u:
              case 0x36u:
              case 0x37u:
              case 0x38u:
              case 0x39u:
              case 0x3Au:
              case 0x3Bu:
              case 0x3Cu:
              case 0x3Du:
              case 0x3Eu:
              case 0x4Fu:
              case 0x99u:
              case 0x9Au:
              case 0x9Bu:
              case 0x9Du:
              case 0x9Eu:
              case 0x9Fu:
                break;
              case 3u:
              case 4u:
              case 5u:
              case 6u:
              case 9u:
              case 0xAu:
              case 0xBu:
              case 0xCu:
              case 0x50u:
              case 0x54u:
              case 0x5Au:
              case 0x5Bu:
              case 0x5Cu:
              case 0x5Du:
              case 0x5Eu:
              case 0x5Fu:
              case 0x60u:
              case 0x61u:
              case 0x62u:
              case 0x63u:
              case 0x64u:
              case 0x65u:
              case 0x66u:
              case 0x67u:
              case 0x68u:
              case 0x69u:
              case 0x6Au:
              case 0x6Bu:
              case 0x6Cu:
              case 0x6Du:
              case 0x6Eu:
              case 0x6Fu:
              case 0x70u:
              case 0x71u:
              case 0x72u:
              case 0x73u:
              case 0x74u:
              case 0x75u:
              case 0x76u:
              case 0x77u:
              case 0x78u:
              case 0x79u:
              case 0x7Au:
              case 0x7Bu:
              case 0x7Cu:
              case 0x7Du:
              case 0x7Eu:
              case 0x7Fu:
              case 0x80u:
              case 0x81u:
              case 0x82u:
              case 0x83u:
              case 0x84u:
              case 0x85u:
              case 0x86u:
              case 0x87u:
              case 0x88u:
              case 0x89u:
              case 0x8Au:
              case 0x8Bu:
              case 0x8Cu:
              case 0x8Du:
              case 0x8Eu:
              case 0x8Fu:
              case 0x90u:
              case 0x91u:
              case 0x92u:
              case 0x93u:
              case 0x94u:
              case 0x95u:
              case 0x96u:
              case 0x97u:
              case 0x98u:
                v277 = 48;
                break;
              case 7u:
              case 0x51u:
              case 0x59u:
              case 0x9Cu:
                v277 = 56;
                break;
              case 0x3Fu:
              case 0x40u:
              case 0x41u:
              case 0x42u:
              case 0x43u:
              case 0x44u:
              case 0x45u:
              case 0x46u:
              case 0x47u:
              case 0x48u:
              case 0x49u:
              case 0x4Au:
              case 0x4Bu:
              case 0x4Cu:
              case 0x4Du:
              case 0x4Eu:
              case 0x52u:
                v277 = 64;
                break;
              case 0x53u:
                v277 = 176;
                break;
              case 0x55u:
              case 0x56u:
              case 0x57u:
              case 0x58u:
                v277 = 112;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x197F91158);
            }
            v278 = v268 + v277;
            v272 = *(JSC::B3::Value ***)v278;
            v269 = *(unsigned int *)(v278 + 12);
          }
          else
          {
            v271 = 40;
            switch(*(_WORD *)(v268 + 12))
            {
              case 0u:
              case 1u:
              case 2u:
              case 8u:
              case 0xDu:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
              case 0x18u:
              case 0x19u:
              case 0x1Au:
              case 0x1Bu:
              case 0x1Cu:
              case 0x1Du:
              case 0x1Eu:
              case 0x1Fu:
              case 0x20u:
              case 0x21u:
              case 0x22u:
              case 0x23u:
              case 0x24u:
              case 0x25u:
              case 0x26u:
              case 0x27u:
              case 0x28u:
              case 0x29u:
              case 0x2Au:
              case 0x2Bu:
              case 0x2Cu:
              case 0x2Du:
              case 0x2Eu:
              case 0x2Fu:
              case 0x30u:
              case 0x31u:
              case 0x32u:
              case 0x33u:
              case 0x34u:
              case 0x35u:
              case 0x36u:
              case 0x37u:
              case 0x38u:
              case 0x39u:
              case 0x3Au:
              case 0x3Bu:
              case 0x3Cu:
              case 0x3Du:
              case 0x3Eu:
              case 0x4Fu:
              case 0x99u:
              case 0x9Au:
              case 0x9Bu:
              case 0x9Du:
              case 0x9Eu:
              case 0x9Fu:
                break;
              case 3u:
              case 4u:
              case 5u:
              case 6u:
              case 9u:
              case 0xAu:
              case 0xBu:
              case 0xCu:
              case 0x50u:
              case 0x54u:
              case 0x5Au:
              case 0x5Bu:
              case 0x5Cu:
              case 0x5Du:
              case 0x5Eu:
              case 0x5Fu:
              case 0x60u:
              case 0x61u:
              case 0x62u:
              case 0x63u:
              case 0x64u:
              case 0x65u:
              case 0x66u:
              case 0x67u:
              case 0x68u:
              case 0x69u:
              case 0x6Au:
              case 0x6Bu:
              case 0x6Cu:
              case 0x6Du:
              case 0x6Eu:
              case 0x6Fu:
              case 0x70u:
              case 0x71u:
              case 0x72u:
              case 0x73u:
              case 0x74u:
              case 0x75u:
              case 0x76u:
              case 0x77u:
              case 0x78u:
              case 0x79u:
              case 0x7Au:
              case 0x7Bu:
              case 0x7Cu:
              case 0x7Du:
              case 0x7Eu:
              case 0x7Fu:
              case 0x80u:
              case 0x81u:
              case 0x82u:
              case 0x83u:
              case 0x84u:
              case 0x85u:
              case 0x86u:
              case 0x87u:
              case 0x88u:
              case 0x89u:
              case 0x8Au:
              case 0x8Bu:
              case 0x8Cu:
              case 0x8Du:
              case 0x8Eu:
              case 0x8Fu:
              case 0x90u:
              case 0x91u:
              case 0x92u:
              case 0x93u:
              case 0x94u:
              case 0x95u:
              case 0x96u:
              case 0x97u:
              case 0x98u:
                v271 = 48;
                break;
              case 7u:
              case 0x51u:
              case 0x59u:
              case 0x9Cu:
                v271 = 56;
                break;
              case 0x3Fu:
              case 0x40u:
              case 0x41u:
              case 0x42u:
              case 0x43u:
              case 0x44u:
              case 0x45u:
              case 0x46u:
              case 0x47u:
              case 0x48u:
              case 0x49u:
              case 0x4Au:
              case 0x4Bu:
              case 0x4Cu:
              case 0x4Du:
              case 0x4Eu:
              case 0x52u:
                v271 = 64;
                break;
              case 0x53u:
                v271 = 176;
                break;
              case 0x55u:
              case 0x56u:
              case 0x57u:
              case 0x58u:
                v271 = 112;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x197F910E8);
            }
            v272 = (JSC::B3::Value **)(v268 + v271);
          }
          v273 = &v272[v269];
          if (v272 != v273)
          {
            do
            {
              v274 = *v272;
              if (*((_BYTE *)*v272 + 12) == 1)
              {
                do
                {
                  if (*((_BYTE *)v274 + 20) == 4)
                  {
                    v415 = JSC::B3::Value::childrenVector(v274);
                    if (!*(_DWORD *)(v415 + 12))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197F91128);
                    }
                    v275 = *(_BYTE **)v415;
                    v3 = v439;
                  }
                  else
                  {
                    v275 = (char *)v274 + 40;
                  }
                  v274 = *(JSC::B3::Value **)v275;
                }
                while (*(_BYTE *)(*(_QWORD *)v275 + 12) == 1);
                *v272 = v274;
              }
              ++v272;
            }
            while (v272 != v273);
            v270 = *(_WORD *)(v268 + 12);
          }
          if (v270 == 10)
          {
            v280 = *(_DWORD *)(v268 + 16);
            if (v280 != *((_DWORD *)v279 + 4))
            {
              __break(0xC471u);
              JUMPOUT(0x197F90E4CLL);
            }
            v281 = v279;
            v282 = *(_QWORD *)(v268 + 32);
            v283 = *(unsigned int *)(v268 + 8);
            (**(void (***)(uint64_t))v268)(v268);
            *(_QWORD *)v268 = off_1E357F5F0;
            if (v280)
            {
              *(_QWORD *)(v268 + 40) = v281;
              v284 = 1;
            }
            else
            {
              v284 = 0;
            }
            *(_WORD *)(v268 + 12) = v284;
            *(_DWORD *)(v268 + 16) = v280;
            *(_BYTE *)(v268 + 20) = v284;
            *(_DWORD *)(v268 + 8) = v283;
            *(_QWORD *)(v268 + 32) = v282;
            v285 = v447;
            if (v447 < 0)
              v286 = 63;
            else
              v286 = *(_QWORD *)(2 * v447);
            if (v286 <= v283)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v447, v283 + 1, 0);
              v285 = v447;
            }
            v287 = 2 * v285 + 8;
            v176 = v285 < 0;
            v288 = &v447;
            if (!v176)
              v288 = (uint64_t *)v287;
            *(uint64_t *)((char *)v288 + ((v283 >> 3) & 0x1FFFFFF8)) |= 1 << v283;
          }
          else if (v270 == 9)
          {
            v310 = **(unsigned int **)(v268 + 40);
            v311 = (uint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v268, 0);
            if (HIDWORD(v448[1]) <= v310)
            {
              __break(0xC471u);
              JUMPOUT(0x197F91168);
            }
            v312 = *((unsigned int *)v448[0] + v310);
            v313 = HIDWORD(v449[1]);
            if (HIDWORD(v449[1]) > v312
              && (v331 = (_QWORD *)((char *)v449[0] + 16 * v312), *(_DWORD *)v331 == (_DWORD)v310))
            {
              v332 = *v311;
              *v331 = v310;
              v331[1] = v332;
            }
            else
            {
              v314 = *v311;
              *(_QWORD *)&v488[0] = v310;
              *((_QWORD *)&v488[0] + 1) = v314;
              if (HIDWORD(v449[1]) == LODWORD(v449[1]))
              {
                v340 = (_OWORD *)WTF::Vector<JSC::JSTokenLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v449, HIDWORD(v449[1]) + 1, (unint64_t)v488);
                *((_OWORD *)v449[0] + HIDWORD(v449[1])) = *v340;
              }
              else
              {
                *((_OWORD *)v449[0] + HIDWORD(v449[1])) = v488[0];
              }
              ++HIDWORD(v449[1]);
              if (HIDWORD(v448[1]) <= v310)
              {
                __break(0xC471u);
                JUMPOUT(0x197F91170);
              }
              *((_DWORD *)v448[0] + v310) = v313;
            }
            if (*(_DWORD *)(v268 + 16))
            {
              __break(0xC471u);
              JUMPOUT(0x197F90EB4);
            }
            v315 = *(_QWORD *)(v268 + 32);
            v316 = *(_DWORD *)(v268 + 8);
            (**(void (***)(uint64_t))v268)(v268);
            *(_QWORD *)v268 = off_1E357F5F0;
            *(_WORD *)(v268 + 12) = 0;
            *(_DWORD *)(v268 + 16) = 0;
            *(_BYTE *)(v268 + 20) = 0;
            *(_DWORD *)(v268 + 8) = v316;
            *(_QWORD *)(v268 + 32) = v315;
          }
          ++v267;
          v264 = v443;
          v276 = *((unsigned int *)v443 + 5);
        }
        while (v267 < v276);
        if (!(_DWORD)v276)
        {
LABEL_569:
          __break(0xC471u);
          JUMPOUT(0x197F91160);
        }
        v289 = *((unsigned int *)v443 + 17);
        if ((_DWORD)v289)
        {
          v290 = 0;
          v291 = (v276 - 1);
          v292 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v443 + 1) + 8 * v276 - 8) + 24);
          do
          {
            if (v290 >= *((unsigned int *)v264 + 17))
            {
              __break(0xC471u);
              JUMPOUT(0x197F911B0);
            }
            v293 = &v472[3 * **(unsigned int **)(*((_QWORD *)v264 + 7) + 16 * v290)];
            v294 = *((unsigned int *)v293 + 5);
            if ((_DWORD)v294)
            {
              v295 = v293[1];
              v434 = v295 + 8 * v294;
              v438 = v291;
              do
              {
                v296 = *(unsigned int *)(**(_QWORD **)v295 + 48);
                if (HIDWORD(v468) <= v296)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F911D8);
                }
                v297 = *(_QWORD *)(*(_QWORD *)v295 + 16);
                for (i = v298[12]; i == 1; i = (*v300)[12])
                {
                  if (v298[20] == 4)
                  {
                    v421 = JSC::B3::Value::childrenVector((JSC::B3::Value *)v298);
                    if (!*(_DWORD *)(v421 + 12))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197F911E8);
                    }
                    v300 = *(unsigned __int8 ***)v421;
                  }
                  else
                  {
                    v300 = (unsigned __int8 **)(v298 + 40);
                  }
                  v298 = *v300;
                }
                v301 = v450;
                v303 = WTF::fastMalloc((WTF *)0x38);
                *(_DWORD *)(v303 + 8) = -1;
                *(_WORD *)(v303 + 12) = 152;
                *(_DWORD *)(v303 + 16) = 0;
                *(_BYTE *)(v303 + 20) = 1;
                *(_QWORD *)(v303 + 24) = v292;
                *(_QWORD *)(v303 + 32) = 0;
                *(_QWORD *)v303 = &unk_1E357EDA0;
                *(_QWORD *)(v303 + 40) = v297;
                *(_QWORD *)(v303 + 48) = v298;
                v304 = *((unsigned int *)v301 + 23);
                if ((_DWORD)v304)
                {
                  v305 = *(_QWORD *)(*((_QWORD *)v301 + 10) + 8 * v304 - 8);
                  *((_DWORD *)v301 + 23) = v304 - 1;
                  v306 = *((_QWORD *)v301 + 8);
                }
                else
                {
                  v305 = *((unsigned int *)v301 + 19);
                  if ((_DWORD)v305 == *((_DWORD *)v301 + 18))
                  {
                    v333 = v305 + (v305 >> 2);
                    if (v333 >= 0x10)
                      v334 = v333 + 1;
                    else
                      v334 = 16;
                    if (v334 <= v305 + 1)
                      v335 = v305 + 1;
                    else
                      v335 = v334;
                    if (v335 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197F911E0);
                    }
                    __src = (void *)*((_QWORD *)v301 + 8);
                    v336 = (void *)WTF::fastMalloc((WTF *)(8 * v335));
                    *((_DWORD *)v301 + 18) = v335;
                    *((_QWORD *)v301 + 8) = v336;
                    memcpy(v336, __src, 8 * v305);
                    if (__src)
                    {
                      if (*((void **)v301 + 8) == __src)
                      {
                        *((_QWORD *)v301 + 8) = 0;
                        *((_DWORD *)v301 + 18) = 0;
                      }
                      WTF::fastFree((unint64_t)__src, v337, v338, v302, v258, v259, v260, v261);
                    }
                    v339 = *((unsigned int *)v301 + 19);
                    v306 = *((_QWORD *)v301 + 8);
                    *(_QWORD *)(v306 + 8 * v339) = 0;
                    *((_DWORD *)v301 + 19) = v339 + 1;
                  }
                  else
                  {
                    v306 = *((_QWORD *)v301 + 8);
                    *(_QWORD *)(v306 + 8 * v305) = 0;
                    *((_DWORD *)v301 + 19) = v305 + 1;
                  }
                }
                *(_DWORD *)(v303 + 8) = v305;
                *(_QWORD *)(v306 + 8 * v305) = v303;
                v291 = v438;
                *(_QWORD *)&v488[0] = v438;
                *((_QWORD *)&v488[0] + 1) = v303;
                v307 = HIDWORD(v452);
                if (HIDWORD(v452) == (_DWORD)v452)
                {
                  v404 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v451, (void *)(HIDWORD(v452) + 1), (unint64_t)v488, v302, v258, v259, v260, v261);
                  v307 = HIDWORD(v452);
                  v308 = v451;
                  v309 = *v404;
                }
                else
                {
                  v308 = v451;
                  v309 = v488[0];
                }
                *((_OWORD *)v308 + v307) = v309;
                v3 = v439;
                v263 = v429;
                ++HIDWORD(v452);
                v295 += 8;
              }
              while (v295 != v434);
            }
            ++v290;
          }
          while (v290 != v289);
          v264 = v443;
        }
        JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v450, v264);
        v262 = (WTF *)((char *)v262 + 8);
      }
      while (v262 != v263);
      v262 = v444;
    }
    if (v262)
    {
      v444 = 0;
      v445 = 0;
      WTF::fastFree((unint64_t)v262, (void *)v255, v256, v257, v258, v259, v260, v261);
    }
    v341 = *((unsigned int *)v3 + 15);
    if ((_DWORD)v341)
    {
      v342 = 0;
      while (!*(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v342))
      {
        if (v341 == ++v342)
          goto LABEL_441;
      }
      if ((_DWORD)v341 != (_DWORD)v342)
      {
        LODWORD(v373) = *((_DWORD *)v3 + 15);
        do
        {
          if (v373 <= v342)
          {
            __break(0xC471u);
            JUMPOUT(0x197F911D0);
          }
          v374 = *(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v342);
          v375 = *(char **)(v374 + 8);
          v376 = *(unsigned int *)(v374 + 20);
          v377 = &v375[8 * v376];
          v378 = 0;
          if ((_DWORD)v376)
          {
            v379 = *(_QWORD *)(v374 + 8);
            v380 = &v375[8 * v376];
            v381 = v380;
            do
            {
              v255 = *(_QWORD *)v375;
              if (*(_QWORD *)v375
                && ((v382 = (unint64_t *)(2 * v447), v447 < 0) ? (v383 = 63) : (v383 = *v382),
                    (v384 = *(unsigned int *)(v255 + 8), v383 > v384)
                 && ((v385 = (uint64_t *)(v382 + 1), v447 >= 0) ? (v386 = v385) : (v386 = &v447),
                     ((*(unint64_t *)((char *)v386 + ((v384 >> 3) & 0x1FFFFFF8)) >> v384) & 1) != 0))
                || !*(_BYTE *)(v255 + 12))
              {
                JSC::B3::Procedure::deleteValue(v439, (JSC::B3::Value *)v255);
                v387 = v375;
                if (v381 != (char *)(*(_QWORD *)(v374 + 8) + 8 * *(unsigned int *)(v374 + 20)))
                {
                  if (v375 == v380)
                  {
                    v387 = v381;
                  }
                  else
                  {
                    memmove(v381, v380, v379 - (_QWORD)v380);
                    v387 = &v381[v379 - (_QWORD)v380];
                  }
                }
                v380 = v375 + 8;
                ++v378;
                v381 = v387;
              }
              v375 += 8;
              v379 += 8;
            }
            while (v375 < v377);
            v375 = *(char **)(v374 + 8);
            LODWORD(v376) = *(_DWORD *)(v374 + 20);
            v377 = v381;
          }
          else
          {
            v380 = &v375[8 * v376];
          }
          v388 = &v375[8 * v376];
          if (v380 != v388)
          {
            memmove(v377, v380, v388 - v380);
            LODWORD(v376) = *(_DWORD *)(v374 + 20);
          }
          *(_DWORD *)(v374 + 20) = v376 - v378;
          v342 = (v342 + 1);
          v3 = v439;
          v373 = *((unsigned int *)v439 + 15);
          if (v373 > v342)
          {
            while (!*(_QWORD *)(*((_QWORD *)v439 + 6) + 8 * v342))
            {
              if (v373 == ++v342)
              {
                LODWORD(v342) = *((_DWORD *)v439 + 15);
                break;
              }
            }
          }
        }
        while ((_DWORD)v341 != (_DWORD)v342);
      }
    }
LABEL_441:
    if ((v447 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v447, (void *)v255, v256, v257, v258, v259, v260, v261);
    v343 = v449[0];
    if (v449[0])
    {
      v449[0] = 0;
      LODWORD(v449[1]) = 0;
      WTF::fastFree((unint64_t)v343, (void *)v255, v256, v257, v258, v259, v260, v261);
    }
    v344 = v448[0];
    if (v448[0])
    {
      v448[0] = 0;
      LODWORD(v448[1]) = 0;
      WTF::fastFree((unint64_t)v344, (void *)v255, v256, v257, v258, v259, v260, v261);
    }
    v345 = v451;
    if (v453 != (_QWORD *)v451 && v451)
    {
      v451 = 0;
      LODWORD(v452) = 0;
      WTF::fastFree((unint64_t)v345, (void *)v255, v256, v257, v258, v259, v260, v261);
    }
    JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v484);
    v353 = v464;
    if (v464)
    {
      v464 = 0;
      v465 = 0;
      WTF::fastFree((unint64_t)v353, v346, v347, v348, v349, v350, v351, v352);
    }
    v354 = v467;
    if (v467)
    {
      v467 = 0;
      LODWORD(v468) = 0;
      WTF::fastFree((unint64_t)v354, v346, v347, v348, v349, v350, v351, v352);
    }
    JSC::B3::SSACalculator::~SSACalculator((JSC::B3::SSACalculator *)&v469, v346, v347, v348, v349, v350, v351, v352);
    WTF::Liveness<JSC::B3::VariableLivenessAdapter>::~Liveness((uint64_t)&v477, v355, v356, v357, v358, v359, v360, v361);
    v127 = 1;
  }
  else
  {
LABEL_181:
    v127 = 0;
  }
  v362 = (WTF *)v440[0];
  *(_QWORD *)(v440[0] + 144) = v440[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v442)
      v414 = (WTF *)((char *)v442 + 16);
    else
      v414 = 0;
    v450 = v362;
    v451 = v414;
  }
  v363 = v442;
  v442 = 0;
  if (v363)
  {
    if (*(_DWORD *)v363 == 1)
      WTF::fastFree((unint64_t)v363, v4, v5, v6, v7, v8, v9, v10);
    else
      --*(_DWORD *)v363;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v441);
  return v127;
}

void JSC::B3::foldPathConstants(WTF **this, JSC::B3::Procedure *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  int v19;
  int v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::B3::Procedure *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unint64_t i;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  char v73;
  int v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int *v84;
  int v85;
  int v86;
  unsigned int **v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  BOOL v98;
  BOOL v99;
  uint64_t v100;
  uint64_t *v101;
  BOOL v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  BOOL v107;
  BOOL v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  WTF *v117;
  JSC::B3::Procedure *v119;
  _DWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  JSC::B3::Value *inserted;
  uint64_t v145;
  JSC::B3::Value *v146;
  uint64_t v147;
  JSC::B3::Value *v148;
  int v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t **v159;
  JSC::B3::Procedure *v160;
  JSC::B3::Value *v161;
  WTF *v162;
  uint64_t v163;
  _BYTE v164[176];
  uint64_t v165;
  _QWORD v166[3];
  uint64_t v167;
  _DWORD *v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD v175[2];

  JSC::B3::PhaseScope::PhaseScope((uint64_t)v166, this, (uint64_t)"foldPathConstants", 18);
  v160 = (JSC::B3::Procedure *)this;
  v161 = (JSC::B3::Value *)this;
  v162 = (WTF *)v164;
  v163 = 8;
  memset(&v164[128], 0, 48);
  v165 = 0;
  v175[0] = 0;
  v159 = JSC::B3::Procedure::dominators((JSC::B3::Procedure *)this);
  v10 = this;
  v11 = *((unsigned int *)this + 15);
  if (!(_DWORD)v11)
  {
LABEL_5:
    v13 = 0;
LABEL_6:
    v14 = 1;
    goto LABEL_59;
  }
  v12 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v160 + 6) + 8 * v12))
  {
    if (v11 == ++v12)
      goto LABEL_5;
  }
  v14 = 1;
  if ((_DWORD)v11 == (_DWORD)v12)
  {
    v13 = 0;
    goto LABEL_59;
  }
  LODWORD(v15) = *((_DWORD *)v160 + 15);
  do
  {
    if (v15 <= v12)
    {
      __break(0xC471u);
      JUMPOUT(0x197F927FCLL);
    }
    v16 = *((_QWORD *)v10[6] + v12);
    v17 = *(unsigned int *)(v16 + 20);
    if (!(_DWORD)v17)
    {
      __break(0xC471u);
      JUMPOUT(0x197F92804);
    }
    v18 = *(JSC::B3::Value **)(*(_QWORD *)(v16 + 8) + 8 * v17 - 8);
    v19 = *((_WORD *)v18 + 6);
    if (v19 == 155)
    {
      v20 = *(_DWORD *)(v16 + 68);
      if (!v20)
      {
        __break(0xC471u);
        JUMPOUT(0x197F92844);
      }
      if (v20 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197F9284CLL);
      }
      if (**(_QWORD **)(v16 + 56) != *(_QWORD *)(*(_QWORD *)(v16 + 56) + 16))
      {
        v21 = (void **)JSC::B3::Value::child(v18, 0);
        if (!*(_DWORD *)(v16 + 68))
        {
          __break(0xC471u);
          JUMPOUT(0x197F92854);
        }
        v27 = *v21;
        v28 = **(_QWORD **)(v16 + 56);
        WORD4(v172) = 256;
        v173 = 0;
        v174 = 0;
        *(_QWORD *)&v172 = v28;
        v29 = (void **)JSC::B3::Value::child(v18, 0);
        if (*(_DWORD *)(v16 + 68) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x197F9285CLL);
        }
        v35 = *v29;
        *(_QWORD *)&v172 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 16);
        WORD4(v172) = 1;
        v173 = 0;
        v174 = 0;
      }
    }
    else
    {
      if (v19 != 156)
        goto LABEL_13;
      if ((*((_WORD *)v18 + 6) & 0xFFF) == 0x9C)
        v36 = *(_QWORD *)(*(_QWORD *)(v16 + 8) + 8 * v17 - 8);
      else
        v36 = 0;
      v171 = 0;
      v157 = v36;
      v37 = *(_DWORD *)(v36 + 52);
      if (v37)
      {
        v38 = 0;
        v39 = 0;
        do
        {
          if (*(_DWORD *)(v157 + 52) <= v38)
          {
            __break(0xC471u);
            JUMPOUT(0x197F92864);
          }
          if (*(_DWORD *)(v16 + 68) <= v38)
          {
            __break(0xC471u);
            JUMPOUT(0x197F9286CLL);
          }
          v170 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 16 * v39);
          v169 = 0;
          WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&v172, &v171, &v170, &v169, v6, v7, v8, v9);
          ++*(_DWORD *)(v172 + 8);
          v38 = v39 + 1;
          v39 = (v39 + 1);
        }
        while (v37 != v38);
      }
      v40 = *(_DWORD *)(v16 + 68);
      if (!v40)
      {
        __break(0xC471u);
        JUMPOUT(0x197F92874);
      }
      v170 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 16 * (v40 - 1));
      v169 = 0;
      WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(&v172, &v171, &v170, &v169, v6, v7, v8, v9);
      v41 = v171;
      ++*(_DWORD *)(v172 + 8);
      v154 = *(_DWORD *)(v157 + 52);
      if (v154)
      {
        v42 = 0;
        v43 = 0;
        v153 = v41;
        do
        {
          if (*(_DWORD *)(v157 + 52) <= v42)
          {
            __break(0xC471u);
            JUMPOUT(0x197F9287CLL);
          }
          if (*(_DWORD *)(v16 + 68) <= v42)
          {
            __break(0xC471u);
            JUMPOUT(0x197F92884);
          }
          v44 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 16 * v43);
          v45 = *(_DWORD *)(v41 - 8);
          v46 = (~(v44 << 32) + v44) ^ ((unint64_t)(~(v44 << 32) + v44) >> 22);
          v47 = 9 * ((v46 + ~(v46 << 13)) ^ ((v46 + ~(v46 << 13)) >> 8));
          v48 = (v47 ^ (v47 >> 15)) + ~((v47 ^ (v47 >> 15)) << 27);
          v49 = v45 & ((v48 >> 31) ^ v48);
          v50 = *(_QWORD *)(v41 + 16 * v49);
          if (v50 != v44)
          {
            v58 = 1;
            while (v50)
            {
              v49 = ((_DWORD)v49 + v58) & v45;
              v50 = *(_QWORD *)(v41 + 16 * v49);
              ++v58;
              if (v50 == v44)
                goto LABEL_39;
            }
            v49 = *(unsigned int *)(v41 - 4);
          }
LABEL_39:
          if (*(_DWORD *)(v41 + 16 * v49 + 8) == 1)
          {
            v51 = *(_QWORD *)(*(_QWORD *)(v157 + 40) + 8 * v43);
            v52 = *(void **)JSC::B3::Value::child(v18, 0);
            *(_QWORD *)&v172 = v44;
            WORD4(v172) = 1;
            v173 = v51;
            v174 = 0;
            if (v51)
              BYTE9(v172) = 1;
            v41 = v153;
          }
          v42 = v43 + 1;
          v43 = (v43 + 1);
        }
        while (v154 != v42);
      }
      else if (!v41)
      {
        goto LABEL_13;
      }
      WTF::fastFree(v41 - 16, v3, v4, v5, v6, v7, v8, v9);
    }
LABEL_13:
    v12 = (v12 + 1);
    v15 = *((unsigned int *)v10 + 15);
    if (v15 > v12)
    {
      while (!*((_QWORD *)v10[6] + v12))
      {
        if (v15 == ++v12)
        {
          LODWORD(v12) = *((_DWORD *)v10 + 15);
          break;
        }
      }
    }
  }
  while ((_DWORD)v11 != (_DWORD)v12);
  v13 = v175[0];
  if (!v175[0])
    goto LABEL_6;
  if (*(_DWORD *)(v175[0] - 12))
  {
    v59 = *(unsigned int *)(v175[0] - 4);
    v60 = v175[0];
    if ((_DWORD)v59)
    {
      v61 = 0;
      while ((unint64_t)(*(_QWORD *)(v175[0] + v61) + 1) <= 1)
      {
        v61 += 24;
        if (24 * v59 == v61)
          goto LABEL_58;
      }
      v60 = v175[0] + v61;
    }
    v121 = v175[0] + 24 * v59;
    if (v121 != v60)
    {
LABEL_179:
      v122 = *(unsigned int *)(v60 + 20);
      if ((_DWORD)v122)
      {
        v123 = 32 * v122;
        v124 = (uint64_t *)(*(_QWORD *)(v60 + 8) + 16);
        do
        {
          if (*((_BYTE *)v124 - 8))
          {
            v124[1] = JSC::B3::InsertionSet::insertIntConstant(&v161, 0, *(JSC::B3::Value **)v60, *v124);
            JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v161, (JSC::B3::BasicBlock *)*(v124 - 2));
          }
          v124 += 4;
          v123 -= 32;
        }
        while (v123);
      }
      while (1)
      {
        v60 += 24;
        if (v60 == v121)
          break;
        if ((unint64_t)(*(_QWORD *)v60 + 1) > 1)
        {
          if (v60 != v121)
            goto LABEL_179;
          break;
        }
      }
    }
  }
LABEL_58:
  v14 = 0;
LABEL_59:
  v62 = v160;
  v158 = *((unsigned int *)v160 + 15);
  if (!(_DWORD)v158)
    goto LABEL_159;
  v63 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v160 + 6) + 8 * v63))
  {
    if (v158 == ++v63)
      goto LABEL_159;
  }
  if ((_DWORD)v158 == (_DWORD)v63)
    goto LABEL_159;
  v155 = 0;
  LODWORD(v64) = *((_DWORD *)v160 + 15);
  while (2)
  {
    if (v64 <= v63)
    {
      __break(0xC471u);
      JUMPOUT(0x197F9280CLL);
    }
    v65 = *(unsigned int **)(*((_QWORD *)v62 + 6) + 8 * v63);
    if (v65[5])
    {
      for (i = 0; i < v65[5]; ++i)
      {
        v67 = *(_QWORD *)(*((_QWORD *)v65 + 1) + 8 * i);
        v68 = *(unsigned __int8 *)(v67 + 12);
        switch(v68)
        {
          case 155:
            v94 = (uint64_t *)JSC::B3::Value::child(*(JSC::B3::Value **)(*((_QWORD *)v65 + 1) + 8 * i), 0);
            if (!BYTE9(v172))
              break;
            if (!v65[17])
            {
              __break(0xC471u);
              JUMPOUT(0x197F92834);
            }
            v125 = v65[5];
            if (!(_DWORD)v125)
            {
              __break(0xC471u);
              JUMPOUT(0x197F9283CLL);
            }
            if (*(_QWORD *)(*((_QWORD *)v65 + 1) + 8 * v125 - 8) != v67)
            {
              __break(0xC471u);
              JUMPOUT(0x197F9278CLL);
            }
            v126 = (uint64_t *)*((_QWORD *)v65 + 7);
            v151 = (uint64_t *)(v65 + 14);
            v152 = *v126;
            v156 = v126[1];
            v150 = *(_QWORD *)(v67 + 32);
            v149 = *(_DWORD *)(v67 + 8);
            (**(void (***)(uint64_t))v67)(v67);
            *(_QWORD *)v67 = off_1E357F5F0;
            *(_WORD *)(v67 + 12) = 154;
            *(_DWORD *)(v67 + 16) = 0;
            *(_BYTE *)(v67 + 20) = 0;
            *(_DWORD *)(v67 + 8) = v149;
            *(_QWORD *)(v67 + 32) = v150;
            if (v65[17])
            {
              v134 = v152;
              v135 = *v151;
              v136 = v156;
            }
            else if (v65[16])
            {
              v133 = 0;
              v134 = v152;
              v135 = *v151;
              v136 = v156;
LABEL_196:
              v113 = 16 * v133;
              do
              {
                v111 = v113;
                v112 = v135 + v113;
                *(_QWORD *)v112 = 0;
                *(_BYTE *)(v112 + 8) = 0;
                v113 = v111 + 16;
              }
              while (v111);
            }
            else
            {
              WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v151, (void *)1, v127, v128, v129, v130, v131, v132);
              v133 = v65[17];
              v135 = *((_QWORD *)v65 + 7);
              v136 = v156;
              v134 = v152;
              if ((_DWORD)v133 != 1)
                goto LABEL_196;
            }
            v155 = 1;
            v65[17] = 1;
            *(_QWORD *)v135 = v134;
            *(_BYTE *)(v135 + 8) = v136;
            break;
          case 52:
            v95 = JSC::B3::Value::child(*(JSC::B3::Value **)(*((_QWORD *)v65 + 1) + 8 * i), 1u);
            v96 = *(_QWORD *)v95;
            v97 = *(_WORD *)(*(_QWORD *)v95 + 12) & 0xFFF;
            if (*(_QWORD *)v95)
              v98 = v97 == 3;
            else
              v98 = 0;
            if (v98)
            {
              v100 = *(int *)(v96 + 40);
            }
            else
            {
              if (v96)
                v99 = v97 == 4;
              else
                v99 = 0;
              if (!v99)
                break;
              v100 = *(_QWORD *)(v96 + 40);
            }
            if (!v100)
            {
              v101 = (uint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v67, 0);
              if (BYTE9(v172))
              {
                v145 = i;
                v146 = (JSC::B3::Value *)v67;
                v147 = 1;
LABEL_197:
                inserted = (JSC::B3::Value *)JSC::B3::InsertionSet::insertIntConstant(&v161, v145, v146, v147);
                JSC::B3::Value::replaceWithIdentity((JSC::B3::Value *)v67, inserted);
              }
            }
            break;
          case 51:
            v104 = JSC::B3::Value::child(*(JSC::B3::Value **)(*((_QWORD *)v65 + 1) + 8 * i), 1u);
            v105 = *(_QWORD *)v104;
            v106 = *(_WORD *)(*(_QWORD *)v104 + 12) & 0xFFF;
            if (*(_QWORD *)v104)
              v107 = v106 == 3;
            else
              v107 = 0;
            if (v107)
            {
              v109 = *(int *)(v105 + 40);
            }
            else
            {
              if (v105)
                v108 = v106 == 4;
              else
                v108 = 0;
              if (!v108)
                break;
              v109 = *(_QWORD *)(v105 + 40);
            }
            if (!v109)
            {
              v110 = (uint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v67, 0);
              if (BYTE9(v172))
              {
                v145 = i;
                v146 = (JSC::B3::Value *)v67;
                v147 = 0;
                goto LABEL_197;
              }
            }
            break;
          default:
            break;
        }
        v69 = *(unsigned __int8 *)(v67 + 20);
        if (v69 == 4)
        {
          v92 = 40;
          switch(*(_WORD *)(v67 + 12))
          {
            case 0u:
            case 1u:
            case 2u:
            case 8u:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x4Fu:
            case 0x99u:
            case 0x9Au:
            case 0x9Bu:
            case 0x9Du:
            case 0x9Eu:
            case 0x9Fu:
              break;
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0x50u:
            case 0x54u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
            case 0x67u:
            case 0x68u:
            case 0x69u:
            case 0x6Au:
            case 0x6Bu:
            case 0x6Cu:
            case 0x6Du:
            case 0x6Eu:
            case 0x6Fu:
            case 0x70u:
            case 0x71u:
            case 0x72u:
            case 0x73u:
            case 0x74u:
            case 0x75u:
            case 0x76u:
            case 0x77u:
            case 0x78u:
            case 0x79u:
            case 0x7Au:
            case 0x7Bu:
            case 0x7Cu:
            case 0x7Du:
            case 0x7Eu:
            case 0x7Fu:
            case 0x80u:
            case 0x81u:
            case 0x82u:
            case 0x83u:
            case 0x84u:
            case 0x85u:
            case 0x86u:
            case 0x87u:
            case 0x88u:
            case 0x89u:
            case 0x8Au:
            case 0x8Bu:
            case 0x8Cu:
            case 0x8Du:
            case 0x8Eu:
            case 0x8Fu:
            case 0x90u:
            case 0x91u:
            case 0x92u:
            case 0x93u:
            case 0x94u:
            case 0x95u:
            case 0x96u:
            case 0x97u:
            case 0x98u:
              v92 = 48;
              break;
            case 7u:
            case 0x51u:
            case 0x59u:
            case 0x9Cu:
              v92 = 56;
              break;
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x43u:
            case 0x44u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x52u:
              v92 = 64;
              break;
            case 0x53u:
              v92 = 176;
              break;
            case 0x55u:
            case 0x56u:
            case 0x57u:
            case 0x58u:
              v92 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197F9282CLL);
          }
          v93 = v67 + v92;
          v71 = *(_QWORD **)(v67 + v92);
          v69 = *(unsigned int *)(v93 + 12);
        }
        else
        {
          v70 = 40;
          switch(*(_WORD *)(v67 + 12))
          {
            case 0u:
            case 1u:
            case 2u:
            case 8u:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x4Fu:
            case 0x99u:
            case 0x9Au:
            case 0x9Bu:
            case 0x9Du:
            case 0x9Eu:
            case 0x9Fu:
              break;
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0x50u:
            case 0x54u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
            case 0x67u:
            case 0x68u:
            case 0x69u:
            case 0x6Au:
            case 0x6Bu:
            case 0x6Cu:
            case 0x6Du:
            case 0x6Eu:
            case 0x6Fu:
            case 0x70u:
            case 0x71u:
            case 0x72u:
            case 0x73u:
            case 0x74u:
            case 0x75u:
            case 0x76u:
            case 0x77u:
            case 0x78u:
            case 0x79u:
            case 0x7Au:
            case 0x7Bu:
            case 0x7Cu:
            case 0x7Du:
            case 0x7Eu:
            case 0x7Fu:
            case 0x80u:
            case 0x81u:
            case 0x82u:
            case 0x83u:
            case 0x84u:
            case 0x85u:
            case 0x86u:
            case 0x87u:
            case 0x88u:
            case 0x89u:
            case 0x8Au:
            case 0x8Bu:
            case 0x8Cu:
            case 0x8Du:
            case 0x8Eu:
            case 0x8Fu:
            case 0x90u:
            case 0x91u:
            case 0x92u:
            case 0x93u:
            case 0x94u:
            case 0x95u:
            case 0x96u:
            case 0x97u:
            case 0x98u:
              v70 = 48;
              break;
            case 7u:
            case 0x51u:
            case 0x59u:
            case 0x9Cu:
              v70 = 56;
              break;
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x43u:
            case 0x44u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x52u:
              v70 = 64;
              break;
            case 0x53u:
              v70 = 176;
              break;
            case 0x55u:
            case 0x56u:
            case 0x57u:
            case 0x58u:
              v70 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197F927F4);
          }
          v71 = (_QWORD *)(v67 + v70);
        }
        v72 = &v71[v69];
        if (v71 == v72)
          v73 = 1;
        else
          v73 = v14;
        if ((v73 & 1) == 0)
        {
          v74 = *(_DWORD *)(v13 - 8);
          v75 = *(_DWORD *)(v13 - 4);
          while (1)
          {
            v76 = ~(*v71 << 32) + *v71;
            v77 = (v76 ^ (v76 >> 22)) + ~((v76 ^ (v76 >> 22)) << 13);
            v78 = (9 * (v77 ^ (v77 >> 8))) ^ ((9 * (v77 ^ (v77 >> 8))) >> 15);
            v79 = v74 & (((v78 + ~(v78 << 27)) >> 31) ^ (v78 + ~((_DWORD)v78 << 27)));
            v80 = v13 + 24 * v79;
            v81 = *(_QWORD *)v80;
            if (*(_QWORD *)v80 != *v71)
            {
              v82 = 1;
              do
              {
                if (!v81)
                  goto LABEL_93;
                v79 = (v79 + v82) & v74;
                v80 = v13 + 24 * v79;
                v81 = *(_QWORD *)v80;
                ++v82;
              }
              while (*(_QWORD *)v80 != *v71);
            }
            if (v80 != v13 + 24 * v75)
            {
              v83 = *(unsigned int *)(v80 + 20);
              if ((_DWORD)v83)
                break;
            }
LABEL_93:
            if (++v71 == v72)
              goto LABEL_94;
          }
          v84 = 0;
          v85 = 0;
          v86 = 0;
          v87 = *(unsigned int ***)(v80 + 8);
          v88 = v159[1];
          v89 = 32 * v83;
          while (2)
          {
            if (*v87 != v65)
            {
              v90 = &v88[4 * *v65];
              v91 = &v88[4 * **v87];
              if (*((_DWORD *)v90 + 6) <= *((_DWORD *)v91 + 6) || *((_DWORD *)v90 + 7) >= *((_DWORD *)v91 + 7))
              {
LABEL_90:
                v87 += 4;
                v89 -= 32;
                if (!v89)
                {
                  if (v84)
                    *v71 = v84;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*((_BYTE *)v87 + 8))
            v102 = v86 == 0;
          else
            v102 = 0;
          if (v102)
          {
            v85 = *((unsigned __int8 *)v87 + 9);
          }
          else
          {
            if (*((_BYTE *)v87 + 9))
              v103 = v85 == 0;
            else
              v103 = 0;
            if (!v103)
              goto LABEL_90;
            v85 = 1;
          }
          v84 = v87[3];
          v86 = *((unsigned __int8 *)v87 + 8);
          goto LABEL_90;
        }
LABEL_94:
        ;
      }
    }
    JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v161, (JSC::B3::BasicBlock *)v65);
    v63 = (v63 + 1);
    v64 = *((unsigned int *)v62 + 15);
    if (v64 > v63)
    {
      while (!*(_QWORD *)(*((_QWORD *)v62 + 6) + 8 * v63))
      {
        if (v64 == ++v63)
        {
          LODWORD(v63) = *((_DWORD *)v62 + 15);
          break;
        }
      }
    }
    if ((_DWORD)v158 != (_DWORD)v63)
      continue;
    break;
  }
  if ((v155 & 1) != 0)
  {
    JSC::B3::Procedure::resetReachability(v160, v3, v4, v5, v6, v7, v8, v9);
    JSC::B3::Procedure::invalidateCFG(v160, v137, v138, v139, v140, v141, v142, v143);
  }
LABEL_159:
  if ((v14 & 1) == 0)
  {
    v114 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v114)
    {
      v115 = v13 + 8;
      do
      {
        if (*(_QWORD *)(v115 - 8) != -1)
        {
          v116 = *(_QWORD *)v115;
          if (*(_QWORD *)v115)
          {
            *(_QWORD *)v115 = 0;
            *(_DWORD *)(v115 + 8) = 0;
            WTF::fastFree(v116, v3, v4, v5, v6, v7, v8, v9);
          }
        }
        v115 += 24;
        --v114;
      }
      while (v114);
    }
    WTF::fastFree(v13 - 16, v3, v4, v5, v6, v7, v8, v9);
  }
  v117 = v162;
  if (v164 != (_BYTE *)v162 && v162 != 0)
  {
    v162 = 0;
    LODWORD(v163) = 0;
    WTF::fastFree((unint64_t)v117, v3, v4, v5, v6, v7, v8, v9);
  }
  v119 = (JSC::B3::Procedure *)v166[0];
  *(_QWORD *)(v166[0] + 144) = v166[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v168)
      v148 = (JSC::B3::Value *)(v168 + 4);
    else
      v148 = 0;
    v160 = v119;
    v161 = v148;
  }
  v120 = v168;
  v168 = 0;
  if (v120)
  {
    if (*v120 == 1)
      WTF::fastFree((unint64_t)v120, v3, v4, v5, v6, v7, v8, v9);
    else
      --*v120;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v167);
}

void JSC::B3::`anonymous namespace'::ImpureBlockData::~ImpureBlockData(JSC::B3::_anonymous_namespace_::ImpureBlockData *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::B3::_anonymous_namespace_::ImpureBlockData *v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v9 = *((_QWORD *)this + 25);
  if (v9)
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((_QWORD *)this + 24);
  if (v10)
  {
    v15 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v15)
    {
      v16 = v10 + 24;
      do
      {
        if (*(_QWORD *)(v16 - 24) != -1)
        {
          v17 = *(_QWORD *)(v16 - 16);
          if (v16 != v17 && v17 != 0)
          {
            *(_QWORD *)(v16 - 16) = 0;
            *(_DWORD *)(v16 - 8) = 0;
            WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v16 += 32;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 23);
  if (v11)
  {
    v19 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v19)
    {
      v20 = v11 + 24;
      do
      {
        if (*(_QWORD *)(v20 - 24) != -1)
        {
          v21 = *(_QWORD *)(v20 - 16);
          if (v20 != v21 && v21 != 0)
          {
            *(_QWORD *)(v20 - 16) = 0;
            *(_DWORD *)(v20 - 8) = 0;
            WTF::fastFree(v21, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v20 += 32;
        --v19;
      }
      while (v19);
    }
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = (JSC::B3::_anonymous_namespace_::ImpureBlockData *)*((_QWORD *)this + 11);
  if ((JSC::B3::_anonymous_namespace_::ImpureBlockData *)((char *)this + 104) != v12 && v12 != 0)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = *(_QWORD *)this;
  if ((JSC::B3::_anonymous_namespace_::ImpureBlockData *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::ImpureBlockData **)this)
  {
    if (v14)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t *WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v3)
    return a1;
  v6 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  v8 = (v7 | HIWORD(v7)) + 1;
  if (v8 > 0x400)
  {
    if (v8 > 2 * v3)
      goto LABEL_40;
  }
  else if (3 * v8 > 4 * v3)
  {
LABEL_7:
    v9 = (double)v3;
    v10 = (double)v8;
    v11 = 0.604166667;
    goto LABEL_8;
  }
  LODWORD(v8) = 2 * v8;
  if (v8 <= 0x400)
    goto LABEL_7;
LABEL_40:
  v9 = (double)v3;
  v10 = (double)v8;
  v11 = 0.416666667;
LABEL_8:
  if (v10 * v11 <= v9)
    LODWORD(v8) = 2 * v8;
  if (v8 <= 8)
    v12 = 8;
  else
    v12 = v8;
  v13 = WTF::fastMalloc((WTF *)((32 * v12) | 0x10));
  v20 = v13 + 40;
  v21 = v12;
  do
  {
    *(_QWORD *)(v20 - 24) = 0;
    *(_QWORD *)(v20 - 16) = v20;
    *(_QWORD *)(v20 - 8) = 1;
    v20 += 32;
    --v21;
  }
  while (v21);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(*a1 - 8) = v12 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v22 = (_QWORD *)*a2;
  if (*a2)
  {
    v24 = *((unsigned int *)v22 - 1);
    v25 = &v22[4 * v24];
    if (*((_DWORD *)v22 - 3))
    {
      v23 = v22;
      if ((_DWORD)v24)
      {
        v38 = 32 * v24;
        v23 = v22;
        while ((unint64_t)(*v23 + 1) <= 1)
        {
          v23 += 4;
          v38 -= 32;
          if (!v38)
          {
            v23 = v25;
            goto LABEL_18;
          }
        }
      }
      goto LABEL_18;
    }
    v23 = &v22[4 * v24];
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  v25 = &v22[4 * v24];
LABEL_18:
  if (v22)
    v26 = &v22[4 * *((unsigned int *)v22 - 1)];
  else
    v26 = 0;
  while (v23 != v26)
  {
    v27 = *a1;
    if (*a1)
      v28 = *(_DWORD *)(v27 - 8);
    else
      v28 = 0;
    v29 = ~(*v23 << 32) + *v23;
    v30 = (v29 ^ (v29 >> 22)) + ~((v29 ^ (v29 >> 22)) << 13);
    v31 = (9 * (v30 ^ (v30 >> 8))) ^ ((9 * (v30 ^ (v30 >> 8))) >> 15);
    v32 = v28 & (((v31 + ~(v31 << 27)) >> 31) ^ (v31 + ~((_DWORD)v31 << 27)));
    v33 = 1;
    do
    {
      v34 = v32;
      v35 = *(_QWORD *)(v27 + 32 * v32);
      v32 = (v32 + v33++) & v28;
    }
    while (v35);
    v36 = (_QWORD *)(v27 + 32 * v34);
    *v36 = *v23;
    WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)(v36 + 1), (uint64_t)(v23 + 1), v14, v15, v16, v17, v18, v19);
    v37 = v23 + 4;
    v23 = v25;
    if (v37 != v25)
    {
      v23 = v37;
      while ((unint64_t)(*v23 + 1) <= 1)
      {
        v23 += 4;
        if (v23 == v25)
        {
          v23 = v25;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1)
      goto LABEL_11;
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_4:
    v4 = (double)a1;
    v5 = (double)v3;
    v6 = 0.604166667;
    goto LABEL_5;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400)
    goto LABEL_4;
LABEL_11:
  v4 = (double)a1;
  v5 = (double)v3;
  v6 = 0.416666667;
LABEL_5:
  if (v5 * v6 <= v4)
    LODWORD(v3) = 2 * v3;
  if (v3 <= 8)
    return 8;
  else
    return v3;
}

unint64_t WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = result;
  if (a2 == result)
    return v8;
  v10 = *(_DWORD *)(result + 12);
  v11 = *(_DWORD *)(a2 + 12);
  if (v10 > v11)
  {
    *(_DWORD *)(result + 12) = v11;
    goto LABEL_5;
  }
  v12 = *(_DWORD *)(result + 8);
  if (v11 <= v12)
  {
LABEL_4:
    v11 = *(_DWORD *)(v8 + 12);
LABEL_5:
    v13 = *(char **)v8;
    if (v11)
    {
      memmove(v13, *(const void **)a2, 8 * v11);
      v14 = *(unsigned int *)(v8 + 12);
      v13 = *(char **)v8;
    }
    else
    {
      v14 = 0;
    }
    memcpy(&v13[8 * v14], (const void *)(*(_QWORD *)a2 + 8 * v14), *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 12) - (*(_QWORD *)a2 + 8 * v14));
    *(_DWORD *)(v8 + 12) = *(_DWORD *)(a2 + 12);
    return v8;
  }
  if (v12)
  {
    if (v10)
      *(_DWORD *)(result + 12) = 0;
    result = *(_QWORD *)result;
    if (v8 + 16 != *(_QWORD *)v8)
    {
      if (!result)
      {
LABEL_27:
        *(_QWORD *)v8 = v8 + 16;
        v15 = 1;
        *(_DWORD *)(v8 + 8) = 1;
        goto LABEL_16;
      }
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(v8 + 8) = 0;
      WTF::fastFree(result, (void *)a2, a3, a4, a5, a6, a7, a8);
      result = *(_QWORD *)v8;
    }
    if (result)
    {
      v15 = *(_DWORD *)(v8 + 8);
      goto LABEL_16;
    }
    goto LABEL_27;
  }
  v15 = 0;
LABEL_16:
  v16 = *(unsigned int *)(a2 + 12);
  if (v15 >= v16)
    goto LABEL_4;
  v17 = *(const void **)v8;
  v18 = *(unsigned int *)(v8 + 12);
  if (v16 < 2)
  {
    v19 = (void *)(v8 + 16);
    *(_QWORD *)v8 = v8 + 16;
    *(_DWORD *)(v8 + 8) = 1;
    goto LABEL_20;
  }
  if (!(v16 >> 29))
  {
    v19 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
    *(_DWORD *)(v8 + 8) = v16;
    *(_QWORD *)v8 = v19;
LABEL_20:
    memcpy(v19, v17, 8 * v18);
    if ((const void *)(v8 + 16) != v17 && v17)
    {
      if (*(const void **)v8 == v17)
      {
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v17, v20, v21, v22, v23, v24, v25, v26);
    }
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

uint64_t *WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  double v15;
  double v16;
  double v17;
  unsigned int v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  *a1 = 0;
  if (!*a2)
    return a1;
  v10 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v10)
    return a1;
  v12 = (v10 - 1) | ((v10 - 1) >> 1) | ((((_DWORD)v10 - 1) | ((v10 - 1) >> 1)) >> 2);
  v13 = v12 | (v12 >> 4) | ((v12 | (v12 >> 4)) >> 8);
  v14 = (v13 | HIWORD(v13)) + 1;
  if (v14 > 0x400)
  {
    if (v14 > 2 * v10)
      goto LABEL_37;
  }
  else if (3 * v14 > 4 * v10)
  {
LABEL_7:
    v15 = (double)v10;
    v16 = (double)v14;
    v17 = 0.604166667;
    goto LABEL_8;
  }
  LODWORD(v14) = 2 * v14;
  if (v14 <= 0x400)
    goto LABEL_7;
LABEL_37:
  v15 = (double)v10;
  v16 = (double)v14;
  v17 = 0.416666667;
LABEL_8:
  if (v16 * v17 <= v15)
    LODWORD(v14) = 2 * v14;
  if (v14 <= 8)
    v18 = 8;
  else
    v18 = v14;
  v19 = WTF::fastZeroedMalloc(16 * v18 + 16, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
  *a1 = v19 + 16;
  *(_DWORD *)(v19 + 12) = v18;
  *(_DWORD *)(*a1 - 8) = v18 - 1;
  *(_DWORD *)(*a1 - 12) = v10;
  *(_DWORD *)(*a1 - 16) = 0;
  v20 = (_QWORD *)*a2;
  if (*a2)
  {
    v22 = *((unsigned int *)v20 - 1);
    v23 = &v20[2 * v22];
    if (*((_DWORD *)v20 - 3))
    {
      v21 = (_QWORD *)*a2;
      if ((_DWORD)v22)
      {
        v34 = 16 * v22;
        v21 = (_QWORD *)*a2;
        while ((unint64_t)(*v21 + 1) <= 1)
        {
          v21 += 2;
          v34 -= 16;
          if (!v34)
          {
            v21 = v23;
            goto LABEL_16;
          }
        }
      }
      goto LABEL_16;
    }
    v21 = &v20[2 * v22];
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  v23 = &v20[2 * v22];
LABEL_16:
  if (v20)
    v20 += 2 * *((unsigned int *)v20 - 1);
  while (v21 != v20)
  {
    v24 = *a1;
    if (*a1)
      v25 = *(_DWORD *)(v24 - 8);
    else
      v25 = 0;
    v26 = ~(*v21 << 32) + *v21;
    v27 = (v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13);
    v28 = (9 * (v27 ^ (v27 >> 8))) ^ ((9 * (v27 ^ (v27 >> 8))) >> 15);
    v29 = v25 & (((v28 + ~(v28 << 27)) >> 31) ^ (v28 + ~((_DWORD)v28 << 27)));
    v30 = 1;
    do
    {
      v31 = v29;
      v32 = *(_QWORD *)(v24 + 16 * v29);
      v29 = (v29 + v30++) & v25;
    }
    while (v32);
    *(_OWORD *)(v24 + 16 * v31) = *(_OWORD *)v21;
    v33 = v21 + 2;
    v21 = v23;
    if (v33 != v23)
    {
      v21 = v33;
      while ((unint64_t)(*v21 + 1) <= 1)
      {
        v21 += 2;
        if (v21 == v23)
        {
          v21 = v23;
          break;
        }
      }
    }
  }
  return a1;
}

BOOL WTF::RangeSet<WTF::Range<unsigned int>>::overlaps(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  _BOOL8 result;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v9;
  int8x16_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;

  if (*a2 == a2[1])
    return 0;
  v4 = *(unsigned int *)(a1 + 12);
  if (!*(_BYTE *)(a1 + 80))
  {
    if (*(_DWORD *)(a1 + 12))
    {
      std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,false>(*(int8x16_t **)a1, (int8x16_t *)(*(_QWORD *)a1 + 8 * v4), (uint64_t)&v16, 126 - 2 * __clz(v4), 1);
      v9 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v9 == 1)
      {
        v4 = *(unsigned int *)(a1 + 12);
      }
      else
      {
        if (!*(_DWORD *)(a1 + 12))
        {
LABEL_30:
          __break(0xC471u);
          JUMPOUT(0x197F936C8);
        }
        v10 = *(int8x16_t **)a1;
        v11 = 1;
        v4 = 1;
        do
        {
          v12 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v11);
          v13 = v10->u32[1];
          if (v13 < HIDWORD(v12))
          {
            if (v13 >= v12)
            {
              v14 = HIDWORD(v12);
              v15 = v10->u32[0];
              if (v15 == v14)
              {
                v14 = 0;
                v15 = 0;
              }
              v10->i64[0] = v15 | (v14 << 32);
            }
            else
            {
              if (v9 <= v4)
                goto LABEL_30;
              v10 = (int8x16_t *)(*(_QWORD *)a1 + 8 * v4++);
              v10->i64[0] = v12;
            }
          }
          ++v11;
          v9 = *(unsigned int *)(a1 + 12);
        }
        while (v11 < v9);
      }
      *(_DWORD *)(a1 + 12) = v4;
    }
    *(_BYTE *)(a1 + 80) = 1;
  }
  if (!v4)
    return 0;
  v6 = (_DWORD *)(*(_QWORD *)a1 + 4);
  v7 = 0xFFFFFFFFLL;
  while (a2[1] <= *(v6 - 1) || *v6 <= *a2)
  {
    result = 0;
    v6 += 2;
    --v7;
    if (!--v4)
      return result;
  }
  return v7 != 0;
}

void JSC::B3::`anonymous namespace'::MemoryValueMap::add(JSC::B3::_anonymous_namespace_::MemoryValueMap *this, JSC::B3::MemoryValue *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  JSC::B3::MemoryValue **v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;

  v10 = 40;
  switch(*((_BYTE *)a2 + 12))
  {
    case 0:
    case 1:
    case 2:
    case 8:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x4F:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x50:
    case 0x54:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
      v10 = 48;
      break;
    case 7:
    case 0x51:
    case 0x59:
    case 0x9C:
      v10 = 56;
      break;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x52:
      v10 = 64;
      break;
    case 0x53:
      v10 = 176;
      break;
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      v10 = 112;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197F93A8CLL);
  }
  v11 = (char *)a2 + v10;
  v12 = *((unsigned __int8 *)a2 + 20) - 1;
  v13 = *(_QWORD *)this;
  if (*(_QWORD *)this
    || (WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash((uint64_t *)this, 8u, 0), (v13 = *(_QWORD *)this) != 0))
  {
    v14 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v14 = 0;
  }
  v15 = *(_QWORD *)&v11[8 * v12];
  v16 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = v13 + 32 * v19;
  v21 = *(_QWORD *)v20;
  if (!*(_QWORD *)v20)
  {
LABEL_6:
    v22 = *(_QWORD *)(v20 + 8);
    v23 = v20;
LABEL_7:
    *(_QWORD *)v23 = v15;
    if (v22 != v23 + 24)
    {
      if (v22)
      {
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 16) = 0;
        WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
      }
      *(_QWORD *)(v23 + 8) = v23 + 24;
    }
    *(_DWORD *)(v23 + 16) = 1;
    *(_DWORD *)(v23 + 20) = 0;
    v24 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v26 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_14;
    }
    else
    {
      if (3 * v29 > 4 * v28)
      {
LABEL_14:
        v20 = v23;
        goto LABEL_15;
      }
      if (!(_DWORD)v29)
      {
        v47 = 8;
        goto LABEL_52;
      }
    }
    v47 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
LABEL_52:
    v20 = WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash((uint64_t *)this, v47, v23);
    goto LABEL_15;
  }
  v23 = 0;
  v34 = 1;
  while (v21 != v15)
  {
    if (v21 == -1)
      v23 = v20;
    v19 = ((_DWORD)v19 + v34) & v14;
    v20 = v13 + 32 * v19;
    v21 = *(_QWORD *)v20;
    ++v34;
    if (!*(_QWORD *)v20)
    {
      if (!v23)
        goto LABEL_6;
      v22 = v23 + 24;
      *(_QWORD *)v23 = 0;
      *(_QWORD *)(v23 + 8) = v23 + 24;
      *(_QWORD *)(v23 + 16) = 1;
      --*(_DWORD *)(*(_QWORD *)this - 16);
      v15 = *(_QWORD *)&v11[8 * v12];
      goto LABEL_7;
    }
  }
LABEL_15:
  v30 = *(unsigned int *)(v20 + 20);
  if ((_DWORD)v30)
  {
    v32 = *(JSC::B3::MemoryValue ***)(v20 + 8);
    v33 = *(unsigned int *)(v20 + 20);
    while (*v32 != a2)
    {
      ++v32;
      if (!--v33)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    if ((_DWORD)v30 == *(_DWORD *)(v20 + 16))
    {
      v35 = v30 + (v30 >> 2);
      if (v35 >= 0x10)
        v36 = v35 + 1;
      else
        v36 = 16;
      if (v36 <= v30 + 1)
        v37 = v30 + 1;
      else
        v37 = v36;
      v38 = *(const void **)(v20 + 8);
      if (v37 < 2)
      {
        v39 = (void *)(v20 + 24);
        *(_QWORD *)(v20 + 8) = v20 + 24;
        *(_DWORD *)(v20 + 16) = 1;
      }
      else
      {
        if (v37 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x197F93A94);
        }
        v39 = (void *)WTF::fastMalloc((WTF *)(8 * v37));
        *(_DWORD *)(v20 + 16) = v37;
        *(_QWORD *)(v20 + 8) = v39;
      }
      memcpy(v39, v38, 8 * v30);
      if ((const void *)(v20 + 24) != v38 && v38)
      {
        if (*(const void **)(v20 + 8) == v38)
        {
          *(_QWORD *)(v20 + 8) = 0;
          *(_DWORD *)(v20 + 16) = 0;
        }
        WTF::fastFree((unint64_t)v38, v40, v41, v42, v43, v44, v45, v46);
      }
      v30 = *(unsigned int *)(v20 + 20);
      v31 = (_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v30);
    }
    else
    {
      v31 = (_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v30);
    }
    *v31 = a2;
    *(_DWORD *)(v20 + 20) = v30 + 1;
  }
}

void JSC::B3::`anonymous namespace'::CSE::clobber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  char *v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  char *v30;
  unsigned int v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  char *v51;
  uint64_t v52;
  char *v53;
  int v54;
  int8x16_t *v55;
  uint64_t v56;

  v56 = a2;
  if ((_DWORD)a2 == HIDWORD(a2))
    goto LABEL_2;
  v40 = (_QWORD *)(a1 + 88);
  v41 = *(unsigned int *)(a1 + 100);
  if (!(_DWORD)v41)
  {
    v46 = 0;
LABEL_59:
    *(_BYTE *)(a1 + 168) = 0;
    v49 = *(unsigned int *)(a1 + 96);
    if (v46 + 1 >= v49)
    {
      v55 = (int8x16_t *)(a1 + 88);
      if ((_DWORD)v41 == (_DWORD)v49)
      {
        WTF::Vector<WTF::Range<unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Range<unsigned int> const&>((uint64_t)v55, (unint64_t)&v56, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v46) = a2;
        ++*(_DWORD *)(a1 + 100);
      }
      WTF::RangeSet<WTF::Range<unsigned int>>::compact(v55);
    }
    else if ((_DWORD)v41 == (_DWORD)v49)
    {
      WTF::Vector<WTF::Range<unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Range<unsigned int> const&>((uint64_t)v40, (unint64_t)&v56, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v46) = a2;
      ++*(_DWORD *)(a1 + 100);
    }
    goto LABEL_2;
  }
  v42 = *v40 + 8 * v41;
  v44 = *(_DWORD *)(v42 - 8);
  v43 = *(_DWORD *)(v42 - 4);
  v45 = v44 <= a2 && v43 >= HIDWORD(a2);
  v46 = *(unsigned int *)(a1 + 100);
  if (!v45)
    goto LABEL_59;
LABEL_2:
  v11 = *(_QWORD *)(a1 + 192);
  v9 = (uint64_t *)(a1 + 192);
  v10 = v11;
  if (v11)
  {
    v12 = *(_DWORD *)(v10 - 4);
    if (v12)
    {
      v54 = 0;
      do
      {
        v13 = v10 + 32 * --v12;
        if ((unint64_t)(*(_QWORD *)v13 + 1) >= 2)
        {
          v15 = (unint64_t *)(v13 + 8);
          v14 = *(_QWORD *)(v13 + 8);
          v17 = (unsigned int *)(v13 + 20);
          v16 = *(unsigned int *)(v13 + 20);
          v18 = (char *)(v14 + 8 * v16);
          if ((_DWORD)v16)
          {
            v19 = 0;
            v20 = *(_QWORD *)(v13 + 8);
            v21 = (char *)(v14 + 8 * v16);
            v22 = v21;
            do
            {
              v23 = *(_QWORD *)v14;
              if (*(_QWORD *)v14)
                v24 = *(unsigned __int8 *)(*(_QWORD *)v14 + 12) - 79 >= 0xFFFFFFF0;
              else
                v24 = 0;
              if (!v24
                || ((v26 = *(_DWORD *)(v23 + 44), v25 = *(_DWORD *)(v23 + 48), v26 != v25)
                  ? (v27 = (_DWORD)v56 == HIDWORD(v56))
                  : (v27 = 1),
                    !v27 ? (v28 = v25 > v56) : (v28 = 0),
                    v28 ? (v29 = HIDWORD(v56) > v26) : (v29 = 0),
                    v29))
              {
                v30 = (char *)v14;
                if (v22 != (char *)(*v15 + 8 * *v17))
                {
                  if ((char *)v14 == v21)
                  {
                    v30 = v22;
                  }
                  else
                  {
                    v52 = v20 - (_QWORD)v21;
                    v53 = v18;
                    v51 = v22;
                    memmove(v22, v21, v20 - (_QWORD)v21);
                    v18 = v53;
                    v30 = &v51[v52];
                  }
                }
                v21 = (char *)(v14 + 8);
                ++v19;
                v22 = v30;
              }
              v14 += 8;
              v20 += 8;
            }
            while (v14 < (unint64_t)v18);
            v14 = *v15;
            v31 = *v17;
            v18 = v22;
          }
          else
          {
            v31 = 0;
            v19 = 0;
            v21 = (char *)(v14 + 8 * v16);
          }
          v32 = (char *)(v14 + 8 * v31);
          if (v21 != v32)
          {
            memmove(v18, v21, v32 - v21);
            v31 = *v17;
          }
          *v17 = v31 - v19;
          if (v31 == v19)
          {
            *(_QWORD *)v13 = -1;
            v33 = *v15;
            v34 = v10 + 32 * v12;
            if (v34 + 24 != *v15 && v33 != 0)
            {
              *v15 = 0;
              *(_DWORD *)(v34 + 16) = 0;
              WTF::fastFree(v33, v21, a3, a4, a5, a6, a7, a8);
            }
            ++v54;
          }
        }
      }
      while (v12);
      v36 = *v9;
      if (v54)
      {
        *(_DWORD *)(v36 - 16) += v54;
        v47 = *v9;
        if (*v9)
          v48 = *(_DWORD *)(v47 - 12);
        else
          v48 = 0;
        *(_DWORD *)(v47 - 12) = v48 - v54;
        v36 = *v9;
      }
      if (v36)
      {
        v37 = *(_DWORD *)(v36 - 4);
        v38 = *(_DWORD *)(v36 - 12);
        if (v37 >= 9 && 6 * v38 < v37)
        {
          v50 = WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::computeBestTableSize(v38);
          WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(v9, v50, 0);
        }
      }
    }
  }
}

_OWORD *WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::WasmAddressValue *&>(_OWORD *result, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (_QWORD *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v12 - 4);
        v29 = 0;
        v28 = v12 + 16 * v32;
        goto LABEL_12;
      }
      if (v21 == -1)
        v30 = v20;
      v19 = (v19 + v31) & v14;
      v20 = (_QWORD *)(v12 + 16 * v19);
      v21 = *v20;
      ++v31;
    }
    while (*v20);
    if (v30)
    {
      *v30 = 0;
      v30[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v30;
    }
  }
  *v20 = v15;
  v20[1] = *a4;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_11;
    goto LABEL_26;
  }
  if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v33 = 8;
LABEL_30:
      result = WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(a2, v33, (uint64_t)v20, (uint64_t)a4, a5, a6, a7, a8);
      v20 = result;
      v24 = *a2;
      if (*a2)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
      goto LABEL_11;
    }
LABEL_26:
    v33 = ((_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27)));
    goto LABEL_30;
  }
LABEL_11:
  v28 = v24 + 16 * v27;
  v29 = 1;
LABEL_12:
  *(_QWORD *)v11 = v20;
  *((_QWORD *)v11 + 1) = v28;
  *((_BYTE *)v11 + 16) = v29;
  return result;
}

int8x16_t *WTF::RangeSet<WTF::Range<unsigned int>>::compact(int8x16_t *result)
{
  int8x16_t *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;

  if (!result[5].i8[0])
  {
    v1 = result;
    v2 = result->u32[3];
    if ((_DWORD)v2)
    {
      result = std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,false>((int8x16_t *)result->i64[0], (int8x16_t *)(result->i64[0] + 8 * v2), (uint64_t)&v11, 126 - 2 * __clz(v2), 1);
      v3 = v1->u32[3];
      if ((_DWORD)v3 == 1)
      {
        LODWORD(v4) = 1;
      }
      else
      {
        if (!v1->i32[3])
        {
LABEL_18:
          __break(0xC471u);
          JUMPOUT(0x197F942ECLL);
        }
        v5 = (unsigned int *)v1->i64[0];
        v6 = 1;
        v4 = 1;
        do
        {
          v7 = *(_QWORD *)(v1->i64[0] + 8 * v6);
          v8 = v5[1];
          if (v8 < HIDWORD(v7))
          {
            if (v8 >= v7)
            {
              v9 = HIDWORD(v7);
              v10 = *v5;
              if (v10 == v9)
              {
                v9 = 0;
                v10 = 0;
              }
              *(_QWORD *)v5 = v10 | (v9 << 32);
            }
            else
            {
              if (v3 <= v4)
                goto LABEL_18;
              v5 = (unsigned int *)(v1->i64[0] + 8 * v4++);
              *(_QWORD *)v5 = v7;
            }
          }
          ++v6;
          v3 = v1->u32[3];
        }
        while (v6 < v3);
      }
      v1->i32[3] = v4;
    }
    v1[5].i8[0] = 1;
  }
  return result;
}

int8x16_t *std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,false>(int8x16_t *result, int8x16_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int32 v11;
  unsigned __int32 v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  int8x16_t *v29;
  int8x16_t *v30;
  char v31;
  BOOL v32;
  uint64_t v33;
  int8x16_t *v34;
  int8x16_t *v35;

uint64_t std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>(uint64_t result, _DWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;

  if ((_DWORD *)result != a2)
  {
    v2 = (_QWORD *)(result + 8);
    if ((_DWORD *)(result + 8) != a2)
    {
      v3 = 0;
      v4 = (_DWORD *)result;
      do
      {
        v5 = v4[2];
        v6 = *v4;
        v4 = v2;
        if (v5 < v6)
        {
          v7 = *v2;
          v8 = v3;
          while (1)
          {
            *(_QWORD *)(result + v8 + 8) = *(_QWORD *)(result + v8);
            if (!v8)
              break;
            v9 = *(_DWORD *)(result + v8 - 8);
            v8 -= 8;
            if (v9 <= v7)
            {
              v10 = (_QWORD *)(result + v8 + 8);
              goto LABEL_10;
            }
          }
          v10 = (_QWORD *)result;
LABEL_10:
          *v10 = v7;
        }
        v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = -1;
      v5 = 1;
      while (1)
      {
        v6 = 2 * v3;
        v3 = v5;
        if (*v2 < result[v6])
          break;
LABEL_9:
        v5 = v3 + 1;
        v2 += 2;
        --v4;
        if (v2 == a2)
          return result;
      }
      v7 = *(_QWORD *)v2;
      v8 = v4;
      v9 = v2;
      while (1)
      {
        *v9 = *(v9 - 1);
        if (!v8)
          break;
        v10 = *((_DWORD *)v9-- - 4);
        ++v8;
        if (v10 <= v7)
        {
          *v9 = v7;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>(uint64_t *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_DWORD *)a1)
  {
    v5 = *a1;
    if (v4 < v3)
    {
      *a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v5;
      return 1;
    }
    *a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v5;
    if (*a3 >= v5)
      return 1;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v5;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v6;
    if (*a2 >= *(_DWORD *)a1)
      return 1;
    v7 = *a1;
    *a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Range<unsigned int> *,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &>(unsigned int *result, unsigned int *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)result;
  if (*(a2 - 2) > *(_QWORD *)result)
  {
    v3 = result + 2;
    while (v3 != a2)
    {
      v4 = *v3;
      v3 += 2;
      if (v4 > v2)
      {
        v5 = v3 - 2;
        goto LABEL_9;
      }
    }
    goto LABEL_24;
  }
  v6 = result + 2;
  do
  {
    v5 = v6;
    if (v6 >= a2)
      break;
    v6 += 2;
  }
  while (*v5 <= v2);
LABEL_9:
  v7 = a2;
  if (v5 < a2)
  {
    v7 = a2;
    while (v7 != result)
    {
      v8 = *(v7 - 2);
      v7 -= 2;
      if (v8 <= v2)
        goto LABEL_20;
    }
    goto LABEL_24;
  }
LABEL_20:
  if (v5 < v7)
  {
    v9 = *(_QWORD *)v5;
    *(_QWORD *)v5 = *(_QWORD *)v7;
    v10 = v5 + 2;
    *(_QWORD *)v7 = v9;
    while (v10 != a2)
    {
      v11 = *v10;
      v10 += 2;
      if (v11 > v2)
      {
        v5 = v10 - 2;
        while (v7 != result)
        {
          v12 = *(v7 - 2);
          v7 -= 2;
          if (v12 <= v2)
            goto LABEL_20;
        }
        break;
      }
    }
LABEL_24:
    __break(1u);
    return result;
  }
  if (v5 - 2 != result)
    *(_QWORD *)result = *((_QWORD *)v5 - 1);
  *((_QWORD *)v5 - 1) = v2;
  return v5;
}

unsigned int *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WTF::Range<unsigned int> *,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &>(unsigned int *result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;

  v2 = 0;
  v3 = *(_QWORD *)result;
  do
  {
    v4 = &result[v2 + 2];
    if (v4 == a2)
      goto LABEL_24;
    v2 += 2;
  }
  while (*v4 < v3);
  v5 = &result[v2];
  v6 = a2;
  if (v2 != 2)
  {
    while (v6 != result)
    {
      v7 = *(v6 - 2);
      v6 -= 2;
      if (v7 < v3)
        goto LABEL_10;
    }
    goto LABEL_24;
  }
  do
  {
    if (v5 >= v6)
      break;
    v8 = *(v6 - 2);
    v6 -= 2;
  }
  while (v8 >= v3);
LABEL_10:
  if (v5 < v6)
  {
    v9 = &result[v2];
    v10 = v6;
LABEL_12:
    v11 = *(_QWORD *)v9;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *(_QWORD *)v10 = v11;
    v12 = v9 + 2;
    while (v12 != a2)
    {
      v13 = *v12;
      v12 += 2;
      if (v13 >= v3)
      {
        v9 = v12 - 2;
        while (v10 != result)
        {
          v14 = *(v10 - 2);
          v10 -= 2;
          if (v14 < v3)
          {
            if (v9 < v10)
              goto LABEL_12;
            v15 = v12 - 4;
            goto LABEL_21;
          }
        }
        break;
      }
    }
LABEL_24:
    __break(1u);
    return result;
  }
  v15 = v5 - 2;
LABEL_21:
  if (v15 != result)
    *(_QWORD *)result = *(_QWORD *)v15;
  *(_QWORD *)v15 = v3;
  return v15;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int8x16_t *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int32 v9;
  unsigned __int32 v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = 1;
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      if (a2[-1].i32[2] >= (unsigned __int32)a1->i32[0])
        return 1;
      v3 = a1->i64[0];
      goto LABEL_9;
    case 3:
      v9 = a1->u32[2];
      v10 = a2[-1].u32[2];
      if (v9 >= a1->i32[0])
      {
        if (v10 < v9)
        {
          v18 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v18;
          if (a1->i32[2] < (unsigned __int32)a1->i32[0])
            *a1 = vextq_s8(*a1, *a1, 8uLL);
        }
      }
      else
      {
        v3 = a1->i64[0];
        if (v10 < v9)
        {
LABEL_9:
          a1->i64[0] = a2[-1].i64[1];
LABEL_10:
          a2[-1].i64[1] = v3;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v3;
        if (a2[-1].i32[2] < v3)
        {
          a1->i64[1] = a2[-1].i64[1];
          goto LABEL_10;
        }
      }
      return 1;
    case 4:
      v11 = a1->u32[2];
      v12 = a1->i32[0];
      LODWORD(v13) = a1[1].i32[0];
      if (v11 >= a1->i32[0])
      {
        if (v13 < v11)
        {
          v13 = a1->i64[1];
          v19 = a1[1].i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v13;
          if (v12 > v19)
          {
            v20 = a1->i64[0];
            a1->i64[0] = v19;
            a1->i64[1] = v20;
          }
        }
      }
      else
      {
        v14 = a1->i64[0];
        if (v13 >= v11)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v14;
          if (v13 >= v14)
            goto LABEL_43;
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v14;
        LODWORD(v13) = v14;
      }
LABEL_43:
      if (a2[-1].i32[2] < v13)
      {
        v28 = a1[1].i64[0];
        a1[1].i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v28;
        if (a1[1].i32[0] < (unsigned __int32)a1->i32[2])
        {
          v30 = a1->i64[1];
          v29 = a1[1].i64[0];
          a1->i64[1] = v29;
          a1[1].i64[0] = v30;
          if (a1->i32[0] > v29)
          {
            v31 = a1->i64[0];
            a1->i64[0] = v29;
            a1->i64[1] = v31;
          }
        }
      }
      return 1;
    case 5:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>(a1->i64, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].i64[1], &a2[-1].i64[1]);
      return 1;
    default:
      v4 = a1 + 1;
      v5 = a1[1].u32[0];
      v6 = a1->u32[2];
      v7 = a1->i32[0];
      if (v6 >= a1->i32[0])
      {
        if (v5 < v6)
        {
          v16 = a1->i64[1];
          v15 = a1[1].i64[0];
          a1->i64[1] = v15;
          a1[1].i64[0] = v16;
          if (v7 > v15)
          {
            v17 = a1->i64[0];
            a1->i64[0] = v15;
            a1->i64[1] = v17;
          }
        }
      }
      else
      {
        v8 = a1->i64[0];
        if (v5 >= v6)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v8;
          if (v5 >= v8)
            goto LABEL_27;
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v8;
      }
LABEL_27:
      v21 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v22 = 0;
      v23 = 0;
      while (1)
      {
        if (*(_DWORD *)v21 < v4->i32[0])
        {
          v24 = *v21;
          v25 = v22;
          while (1)
          {
            *(uint64_t *)((char *)&a1[1].i64[1] + v25) = *(uint64_t *)((char *)a1[1].i64 + v25);
            if (v25 == -16)
              break;
            v26 = *(unsigned __int32 *)((char *)&a1->u32[2] + v25);
            v25 -= 8;
            if (v26 <= v24)
            {
              v27 = (uint64_t *)((char *)&a1[1].i64[1] + v25);
              goto LABEL_35;
            }
          }
          v27 = (uint64_t *)a1;
LABEL_35:
          *v27 = v24;
          if (++v23 == 8)
            return v21 + 1 == (uint64_t *)a2;
        }
        v4 = (int8x16_t *)v21;
        v22 += 8;
        if (++v21 == (uint64_t *)a2)
          return 1;
      }
  }
}

uint64_t *std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*>(uint64_t *result, unsigned int *a2, unsigned int *a3, _QWORD *a4, _QWORD *a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  LODWORD(v6) = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v6 < v5)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v6;
      if (*a2 < *(_DWORD *)result)
      {
        v6 = *result;
        *result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v6;
        LODWORD(v6) = *a3;
      }
    }
  }
  else
  {
    v7 = *result;
    if (v6 < v5)
    {
      *result = *(_QWORD *)a3;
LABEL_9:
      *(_QWORD *)a3 = v7;
      LODWORD(v6) = v7;
      goto LABEL_10;
    }
    *result = *(_QWORD *)a2;
    *(_QWORD *)a2 = v7;
    LODWORD(v6) = *a3;
    if (*a3 < v7)
    {
      *(_QWORD *)a2 = *(_QWORD *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 < v6)
  {
    v8 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v8;
    if (*a3 < *a2)
    {
      v9 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v9;
      if (*a2 < *(_DWORD *)result)
      {
        v10 = *result;
        *result = *(_QWORD *)a2;
        *(_QWORD *)a2 = v10;
      }
    }
  }
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(_DWORD *)a4 < *a3)
    {
      v12 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        v13 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v13;
        if (*a2 < *(_DWORD *)result)
        {
          v14 = *result;
          *result = *(_QWORD *)a2;
          *(_QWORD *)a2 = v14;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,WTF::Range<unsigned int>*>(char *a1, char *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;

  if (a1 != a2)
  {
    v3 = a2 - a1;
    v4 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9 && (unint64_t)v3 >= 0x10)
    {
      v5 = (unint64_t)(v4 - 2) >> 1;
      v6 = v5;
      do
      {
        if (v5 >= v6)
        {
          v7 = (2 * v6) | 1;
          v8 = (uint64_t *)&a1[8 * v7];
          if (2 * v6 + 2 >= v4)
          {
            v9 = *(_DWORD *)v8;
          }
          else
          {
            v9 = *(_DWORD *)v8;
            v10 = *((_DWORD *)v8 + 2);
            if (*(_DWORD *)v8 <= v10)
              v9 = *((_DWORD *)v8 + 2);
            if (*(_DWORD *)v8 < v10)
            {
              ++v8;
              v7 = 2 * v6 + 2;
            }
          }
          v11 = (uint64_t *)&a1[8 * v6];
          if (v9 >= *(_DWORD *)v11)
          {
            v12 = *v11;
            do
            {
              v13 = v11;
              v11 = v8;
              *v13 = *v8;
              if (v5 < v7)
                break;
              v14 = (2 * v7) | 1;
              v8 = (uint64_t *)&a1[8 * v14];
              v7 = 2 * v7 + 2;
              if (v7 >= v4)
              {
                v15 = *(_DWORD *)v8;
                v7 = v14;
              }
              else
              {
                v15 = *(_DWORD *)v8;
                v16 = *((_DWORD *)v8 + 2);
                if (*(_DWORD *)v8 <= v16)
                  v15 = *((_DWORD *)v8 + 2);
                if (*(_DWORD *)v8 >= v16)
                  v7 = v14;
                else
                  ++v8;
              }
            }
            while (v15 >= v12);
            *v11 = v12;
          }
        }
        v17 = v6-- <= 0;
      }
      while (!v17);
    }
    v18 = a2;
    if (a2 != a3)
    {
      if (v3 >= 16)
      {
        v21 = (uint64_t *)a2;
        do
        {
          if (*(_DWORD *)v21 < *(_DWORD *)a1)
          {
            v22 = *v21;
            *v21 = *(_QWORD *)a1;
            *(_QWORD *)a1 = v22;
            v23 = *((_DWORD *)a1 + 2);
            if (v3 == 16)
            {
              v24 = (uint64_t *)(a1 + 8);
              v25 = 1;
            }
            else
            {
              v26 = *((_DWORD *)a1 + 4);
              v27 = v23 >= v26;
              if (v23 <= v26)
                v23 = *((_DWORD *)a1 + 4);
              if (v27)
                v24 = (uint64_t *)(a1 + 8);
              else
                v24 = (uint64_t *)(a1 + 16);
              if (v27)
                v25 = 1;
              else
                v25 = 2;
            }
            if (v23 >= v22)
            {
              v28 = (uint64_t *)a1;
              do
              {
                v29 = v28;
                v28 = v24;
                *v29 = *v24;
                if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v25)
                  break;
                v30 = (2 * v25) | 1;
                v24 = (uint64_t *)&a1[8 * v30];
                v25 = 2 * v25 + 2;
                if (v25 >= v4)
                {
                  v31 = *(_DWORD *)v24;
                  v25 = v30;
                }
                else
                {
                  v31 = *(_DWORD *)v24;
                  v32 = *((_DWORD *)v24 + 2);
                  if (*(_DWORD *)v24 <= v32)
                    v31 = *((_DWORD *)v24 + 2);
                  if (*(_DWORD *)v24 >= v32)
                    v25 = v30;
                  else
                    ++v24;
                }
              }
              while (v31 >= v22);
              *v28 = v22;
            }
          }
          ++v21;
        }
        while (v21 != (uint64_t *)a3);
      }
      else
      {
        LODWORD(v19) = *(_DWORD *)a1;
        v20 = (uint64_t *)a2;
        do
        {
          if (*(_DWORD *)v20 < v19)
          {
            v19 = *v20;
            *v20 = *(_QWORD *)a1;
            *(_QWORD *)a1 = v19;
          }
          ++v20;
        }
        while (v20 != (uint64_t *)a3);
      }
      v18 = a3;
    }
    if (v3 >= 9)
    {
      v33 = (unint64_t)v3 >> 3;
      do
      {
        v34 = 0;
        v35 = *(_QWORD *)a1;
        v36 = a1;
        do
        {
          v37 = (uint64_t *)&v36[8 * v34 + 8];
          v38 = (2 * v34) | 1;
          v39 = 2 * v34 + 2;
          if (v39 < v33 && *(_DWORD *)v37 < *((_DWORD *)v37 + 2))
          {
            ++v37;
            v38 = v39;
          }
          *(_QWORD *)v36 = *v37;
          v36 = (char *)v37;
          v34 = v38;
        }
        while (v38 <= (uint64_t)((unint64_t)(v33 - 2) >> 1));
        a2 -= 8;
        if (v37 == (uint64_t *)a2)
        {
          *v37 = v35;
        }
        else
        {
          *v37 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v35;
          v40 = (char *)v37 - a1 + 8;
          if (v40 >= 9)
          {
            v41 = (((unint64_t)v40 >> 3) - 2) >> 1;
            v42 = (uint64_t *)&a1[8 * v41];
            if (*(_DWORD *)v42 < *(_DWORD *)v37)
            {
              v43 = *v37;
              do
              {
                v44 = v37;
                v37 = v42;
                *v44 = *v42;
                if (!v41)
                  break;
                v41 = (v41 - 1) >> 1;
                v42 = (uint64_t *)&a1[8 * v41];
              }
              while (*(_DWORD *)v42 < v43);
              *v37 = v43;
            }
          }
        }
        v17 = v33-- <= 2;
      }
      while (!v17);
    }
    return v18;
  }
  return a3;
}

uint64_t WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v18 = v10 + 40;
    do
    {
      *(_QWORD *)(v18 - 24) = 0;
      *(_QWORD *)(v18 - 16) = v18;
      *(_QWORD *)(v18 - 8) = 1;
      v18 += 32;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v21 = 0;
    v19 = 0;
    v22 = v7;
    do
    {
      v23 = (uint64_t *)(v6 + 32 * v21);
      v24 = *v23;
      if (*v23)
      {
        if (v24 != -1)
        {
          v25 = *a1;
          if (*a1)
            v26 = *(_DWORD *)(v25 - 8);
          else
            v26 = 0;
          v53 = v22;
          v27 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
          v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
          v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
          v30 = v26 & ((v29 >> 31) ^ v29);
          v31 = 1;
          do
          {
            v32 = v30;
            v33 = *(_QWORD *)(v25 + 32 * v30);
            v30 = (v30 + v31++) & v26;
          }
          while (v33);
          v34 = v25 + 32 * v32;
          v36 = (_QWORD *)(v34 + 8);
          v35 = *(_QWORD *)(v34 + 8);
          v37 = (void *)(v34 + 24);
          if (v34 + 24 != v35 && v35 != 0)
          {
            *v36 = 0;
            *(_DWORD *)(v34 + 16) = 0;
            WTF::fastFree(v35, v11, v12, v13, v14, v15, v16, v17);
            v24 = *v23;
          }
          v52 = v34;
          *(_QWORD *)v34 = v24;
          v39 = v6 + 32 * v21;
          *v36 = v37;
          v41 = (unint64_t *)(v39 + 8);
          v40 = *(_QWORD *)(v39 + 8);
          *(_QWORD *)(v34 + 16) = 1;
          v42 = (_DWORD *)(v34 + 16);
          v43 = v39 + 24;
          if (v40 == v39 + 24)
          {
            memcpy(v37, (const void *)(v39 + 24), 8 * *(unsigned int *)(v39 + 20));
          }
          else
          {
            *v41 = v43;
            *v36 = v40;
            v51 = *(_DWORD *)(v39 + 16);
            *(_DWORD *)(v39 + 16) = 1;
            *v42 = v51;
          }
          v22 = v53;
          v44 = v6 + 32 * v21;
          v45 = *(_DWORD *)(v44 + 20);
          *(_DWORD *)(v44 + 20) = 0;
          v42[1] = v45;
          v46 = *v41;
          if (v43 != *v41 && v46)
          {
            *v41 = 0;
            *(_DWORD *)(v6 + 32 * v21 + 16) = 0;
            WTF::fastFree(v46, v11, v12, v13, v14, v15, v16, v17);
          }
          if (v6 + 32 * v21 == a3)
            v19 = v52;
        }
      }
      else
      {
        v49 = (_QWORD *)v23[1];
        v48 = v23 + 1;
        v47 = (unint64_t)v49;
        if (v48 + 2 != v49 && v47 != 0)
        {
          *v48 = 0;
          *(_DWORD *)(v6 + 32 * v21 + 16) = 0;
          WTF::fastFree(v47, v11, v12, v13, v14, v15, v16, v17);
        }
      }
      ++v21;
    }
    while (v21 != v22);
    goto LABEL_34;
  }
  v19 = 0;
  result = 0;
  if (v6)
  {
LABEL_34:
    WTF::fastFree(v6 - 16, v11, v12, v13, v14, v15, v16, v17);
    return v19;
  }
  return result;
}

_QWORD *WTF::Vector<WTF::Range<unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Range<unsigned int> const&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;

  result = (_QWORD *)WTF::Vector<WTF::Range<unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<WTF::Range<unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v11 = *(unsigned int *)(a1 + 12);
    if (v10 + 8 * v11 > a3)
    {
      v12 = *(unsigned int *)(a1 + 8);
      v13 = v12 + (v12 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= (unint64_t)a2)
        v15 = (unint64_t)a2;
      else
        v15 = v14;
      if (v15 <= v12)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v8 - v10) >> 3);
      if (v15 < 9)
      {
        v16 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 8;
        goto LABEL_33;
      }
      if (!(v15 >> 29))
      {
        v16 = WTF::fastMalloc((WTF *)(8 * v15));
        *(_DWORD *)(a1 + 8) = v15;
        *(_QWORD *)a1 = v16;
LABEL_33:
        v26 = 0;
        do
        {
          *(_QWORD *)(v16 + v26) = *(_QWORD *)(v10 + v26);
          v26 += 8;
        }
        while (8 * v11 != v26);
        if (a1 + 16 != v10 && v10)
        {
          if (*(_QWORD *)a1 == v10)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v8 - v10) >> 3);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x197F956ACLL);
    }
  }
  v17 = *(unsigned int *)(a1 + 8);
  v18 = v17 + (v17 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= (unint64_t)a2)
    v20 = (unint64_t)a2;
  else
    v20 = v19;
  if (v20 > v17)
  {
    v21 = *(unsigned int *)(a1 + 12);
    if (v20 < 9)
    {
      v22 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 8;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    else
    {
      if (v20 >> 29)
        goto LABEL_42;
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v20));
      *(_DWORD *)(a1 + 8) = v20;
      *(_QWORD *)a1 = v22;
      if (!(_DWORD)v21)
        goto LABEL_27;
    }
    v23 = 8 * v21;
    v24 = (uint64_t *)v10;
    do
    {
      v25 = *v24++;
      *v22++ = v25;
      v23 -= 8;
    }
    while (v23);
LABEL_27:
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return v8;
}

_DWORD *WTF::RangeSet<WTF::Range<unsigned int>>::operator=(_DWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v9 = result;
  if (a2 == (_QWORD *)result)
  {
LABEL_15:
    *((_BYTE *)v9 + 80) = *((_BYTE *)a2 + 80);
    return v9;
  }
  v10 = result[3];
  v11 = *((_DWORD *)a2 + 3);
  if (v10 > v11)
  {
    result[3] = v11;
    v10 = v11;
LABEL_11:
    if (!v10)
    {
LABEL_13:
      v14 = *((unsigned int *)a2 + 3);
      if (v10 != (_DWORD)v14)
      {
        v15 = (_QWORD *)(*(_QWORD *)v9 + 8 * v10);
        v16 = (uint64_t *)(*a2 + 8 * v10);
        v17 = 8 * v14 - 8 * v10;
        do
        {
          v18 = *v16++;
          *v15++ = v18;
          v17 -= 8;
        }
        while (v17);
        v10 = *((_DWORD *)a2 + 3);
      }
      v9[3] = v10;
      goto LABEL_15;
    }
LABEL_12:
    memmove(*(void **)v9, (const void *)*a2, 8 * v10);
    v10 = v9[3];
    goto LABEL_13;
  }
  v12 = result[2];
  if (v11 <= v12)
    goto LABEL_11;
  if (v12)
  {
    if (v10)
      result[3] = 0;
    result = *(_DWORD **)result;
    if (v9 + 4 == *(_DWORD **)v9)
    {
      if (result)
      {
LABEL_9:
        v13 = v9[2];
        goto LABEL_23;
      }
    }
    else if (result)
    {
      *(_QWORD *)v9 = 0;
      v9[2] = 0;
      WTF::fastFree((unint64_t)result, a2, a3, a4, a5, a6, a7, a8);
      result = *(_DWORD **)v9;
      if (*(_QWORD *)v9)
        goto LABEL_9;
    }
    *(_QWORD *)v9 = v9 + 4;
    v13 = 8;
    v9[2] = 8;
  }
  else
  {
    v13 = 0;
  }
LABEL_23:
  v19 = *((unsigned int *)a2 + 3);
  if (v13 >= v19)
    goto LABEL_32;
  v20 = *(uint64_t **)v9;
  v21 = v9[3];
  if (v19 < 9)
  {
    v22 = v9 + 4;
    *(_QWORD *)v9 = v9 + 4;
    v9[2] = 8;
    goto LABEL_28;
  }
  if (!(v19 >> 29))
  {
    v22 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v19));
    v9[2] = v19;
    *(_QWORD *)v9 = v22;
LABEL_28:
    if ((_DWORD)v21)
    {
      v23 = 8 * v21;
      v24 = v20;
      do
      {
        v25 = *v24++;
        *v22++ = v25;
        v23 -= 8;
      }
      while (v23);
    }
    if (v9 + 4 != (_DWORD *)v20 && v20)
    {
      if (*(uint64_t **)v9 == v20)
      {
        *(_QWORD *)v9 = 0;
        v9[2] = 0;
      }
      WTF::fastFree((unint64_t)v20, a2, a3, a4, a5, a6, a7, a8);
    }
LABEL_32:
    v10 = v9[3];
    if (!v10)
      goto LABEL_13;
    goto LABEL_12;
  }
  __break(0xC471u);
  return result;
}

void JSC::B3::`anonymous namespace'::CSE::processMemoryAfterClobber(JSC::B3::_anonymous_namespace_::CSE *this, JSC::B3::MemoryValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  JSC::B3::MemoryValue *v13;
  WTF *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  WTF **v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  WTF **v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  JSC::B3::MemoryValue **v49;
  uint64_t v50;
  int *v51;
  int *v52;
  JSC::B3::MemoryValue *v53;
  int v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  WTF *v58;
  unint64_t v59;
  int8x16_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  WTF *v68;
  BOOL v69;
  WTF *v70;
  int v71;
  JSC::B3::MemoryValue *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  unint64_t v81;
  unsigned int v82;
  unsigned __int8 v83;
  uint64_t v84;
  __int16 v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  void *v92;
  unsigned int v93;
  int v94;
  WTF **v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  WTF **v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  _DWORD *v127;
  uint64_t v128;
  _DWORD *v130;
  uint64_t v131;
  uint64_t v133;
  WTF **v134;
  unint64_t v135;
  uint64_t v136;
  WTF **v137;
  unint64_t v138;
  WTF *v139;
  JSC::B3::MemoryValue *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  WTF **v147;
  uint64_t v148;
  WTF *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  WTF **v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unsigned int v162;
  int *v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  unint64_t v174;
  uint64_t v175;
  WTF **v176;
  uint64_t v177;
  WTF *v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  WTF **v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  _DWORD *v186;
  uint64_t v187;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  BOOL v196;
  int8x16_t *v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  WTF *v203;
  BOOL v204;
  int v205;
  WTF *v206;
  uint64_t v207;
  _QWORD *v208;
  WTF *v209;
  unsigned int v210;
  unsigned int v211;
  WTF *v212;
  int v213;
  JSC::B3::MemoryValue *v214;
  WTF *v215;
  unsigned __int8 *v216;
  unsigned int *v217;
  unsigned int *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  int v231;
  __int16 v232;
  WTF *v233;
  int8x16_t *v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  int8x16_t *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  WTF *v246;
  uint64_t v247;
  _QWORD *v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  WTF *v256;
  void *v257;
  unsigned int v258;
  int *v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  WTF *v270;
  WTF *v271;
  int v272;
  unsigned __int8 *v273;
  unsigned int *v274;
  unsigned int *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  JSC::B3::Value *v285;
  JSC::B3::Value **v286;
  uint64_t v287;
  JSC::B3::Value *v288;
  WTF *v289;
  _DWORD *v290;
  int v291;
  WTF *v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  WTF *v300;
  JSC::B3::_anonymous_namespace_::CSE *v301;
  WTF *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  __int128 v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  int v322;
  __int16 v323;
  JSC::B3::_anonymous_namespace_::CSE *v324;
  uint64_t v325;
  unsigned __int8 *v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  WTF *v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  WTF **v344;
  uint64_t v345;
  _QWORD *v346;
  unsigned __int8 *v347;
  unsigned int *v348;
  unsigned int *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  JSC::B3::Value *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  uint64_t v361;
  int v362;
  __int16 v363;
  WTF *v364;
  uint64_t v366;
  uint64_t v367;
  uint64_t *v368;
  WTF *v369;
  unsigned int v370;
  uint64_t v371;
  WTF *v372;
  int v373;
  uint64_t v374;
  __int16 v375;
  int v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  BOOL v380;
  uint64_t v381;
  WTF *v382;
  void *v383;
  unsigned int v384;
  int *v385;
  uint64_t v386;
  unsigned int v387;
  uint64_t v388;
  int v389;
  _QWORD *v390;
  uint64_t v391;
  __int16 v392;
  int v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  BOOL v397;
  WTF *v398;
  WTF *v399;
  unsigned int v400;
  uint64_t v401;
  BOOL v402;
  BOOL v405;
  BOOL v406;
  void *v407;
  unsigned int v408;
  unint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unsigned int v412;
  unsigned int *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t v419;
  int v420;
  int v421;
  WTF *v422;
  BOOL v423;
  WTF *v424;
  unsigned int v425;
  int v426;
  unsigned int *v427;
  unsigned int *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  JSC::B3::Value **v438;
  uint64_t v439;
  JSC::B3::Value *v440;
  unsigned int v441;
  uint64_t v442;
  BOOL v443;
  BOOL v446;
  BOOL v447;
  void *v448;
  unsigned int v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  unsigned int v453;
  unsigned int *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unsigned int v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  WTF *v468;
  void *v469;
  unsigned int v470;
  int *v471;
  uint64_t v472;
  unsigned int v473;
  uint64_t v474;
  WTF *v475;
  unsigned int v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  void *v480;
  uint64_t v481;
  WTF *v482;
  WTF *v483;
  int v484;
  WTF *v485;
  int v487;
  unsigned int *v488;
  unsigned int *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  JSC::B3::Value **v499;
  uint64_t v500;
  JSC::B3::Value *v501;
  JSC::B3::Value *v502;
  JSC::B3::Value *v503;
  uint64_t v504;
  uint64_t v505;
  unsigned int v506;
  unsigned int v507;
  unint64_t v508;
  unint64_t v509;
  unint64_t v510;
  const void *v511;
  void *v512;
  void *v513;
  uint64_t v514;
  uint64_t v515;
  WTF *v516;
  unsigned int v517;
  JSC::B3::Value **v518;
  __int128 *v519;
  int v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  _DWORD *v526;
  JSC::B3::Value *v527;
  uint64_t v528;
  unsigned __int8 *v529;
  void *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  WTF *v537;
  JSC::B3::Value *v538;
  WTF *v539;
  uint64_t v540;
  int v541;
  _QWORD *v542;
  JSC::B3::Value **v543;
  uint64_t v544;
  JSC::B3::Value *v545;
  JSC::B3::MemoryValue *v546;
  _DWORD *v547;
  JSC::B3::Value *v548;
  uint64_t v549;
  unsigned __int8 *v550;
  void *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  WTF *v558;
  uint64_t v559;
  WTF *v560;
  uint64_t v561;
  _DWORD *v562;
  JSC::B3::Value *v563;
  uint64_t v564;
  unsigned __int8 *v565;
  void *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  WTF *v573;
  uint64_t *v574;
  WTF *v575;
  uint64_t v576;
  _DWORD *v577;
  JSC::B3::Value *v578;
  uint64_t v579;
  unsigned __int8 *v580;
  void *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  WTF *v588;
  uint64_t *v589;
  WTF *v590;
  uint64_t v591;
  int *v592;
  uint64_t v593;
  unsigned int v594;
  unsigned int v595;
  unsigned int v596;
  WTF **v597;
  WTF *v598;
  WTF **v599;
  unsigned __int8 v600;
  void *__src;
  uint64_t v602;
  _DWORD *v603;
  JSC::B3::_anonymous_namespace_::CSE *v604;
  _QWORD v605[2];
  int *v606;
  int *v607;
  int v608;
  int v609;
  WTF *v610;
  uint64_t v611;
  uint64_t v612;
  JSC::B3::MemoryValue *v613;
  WTF *v614;
  uint64_t v615;
  uint64_t v616;
  unsigned __int8 *v617;
  WTF *v618[2];
  uint64_t v619;
  _QWORD v620[18];

  v620[16] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)JSC::B3::MemoryValue::lastChild(a2);
  v10 = *(int **)((char *)a2 + 44);
  v11 = *((unsigned int *)a2 + 10);
  v608 = *((_DWORD *)a2 + 4);
  v609 = v11;
  v602 = v9;
  v604 = this;
  switch(*((_BYTE *)a2 + 12))
  {
    case '?':
      v606 = v10;
      v142 = *((_QWORD *)this + 33);
      if (*(unsigned __int8 *)(v142 + 12) - 63 >= 0x10)
        v142 = 0;
      if (*(_DWORD *)(v142 + 52) != *(_DWORD *)(v142 + 56))
        goto LABEL_311;
      if (v143)
      {
        v347 = (unsigned __int8 *)v143;
        v610 = (WTF *)&v612;
        v612 = v143;
        v611 = 0x100000001;
        *((_BYTE *)this + 488) = 1;
        goto LABEL_456;
      }
      if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps((uint64_t)this + 128, &v606))
      {
LABEL_311:
        v610 = (WTF *)&v612;
        v611 = 1;
        goto LABEL_325;
      }
      v618[0] = (WTF *)0x8000000000000000;
      v618[1] = (WTF *)v620;
      v619 = 16;
      v145 = *((_QWORD *)this + 31);
      v146 = *(unsigned int *)(v145 + 36);
      if ((_DWORD)v146)
      {
        v147 = *(WTF ***)(v145 + 24);
        v148 = 8 * v146;
        do
        {
          v149 = *v147;
          v614 = *v147;
          v150 = (uint64_t)v618[0];
          if (((unint64_t)v618[0] & 0x8000000000000000) != 0)
            v151 = 63;
          else
            v151 = *(_QWORD *)(2 * (uint64_t)v618[0]);
          v152 = *(unsigned int *)v149;
          if (v151 <= v152)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v618, v152 + 1, 0);
            v150 = (uint64_t)v618[0];
          }
          if (v150 >= 0)
            v153 = (WTF **)(2 * v150 + 8);
          else
            v153 = v618;
          v154 = (v152 >> 3) & 0x1FFFFFF8;
          v155 = *(uint64_t *)((char *)v153 + v154);
          *(WTF **)((char *)v153 + v154) = (WTF *)(v155 | (1 << v152));
          if ((v155 & (1 << v152)) == 0)
          {
            v156 = HIDWORD(v619);
            if (HIDWORD(v619) == (_DWORD)v619)
            {
              v390 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v618[1], HIDWORD(v619) + 1, (unint64_t)&v614);
              v156 = HIDWORD(v619);
              *((_QWORD *)v618[1] + HIDWORD(v619)) = *v390;
            }
            else
            {
              *((_QWORD *)v618[1] + HIDWORD(v619)) = v149;
            }
            HIDWORD(v619) = v156 + 1;
          }
          ++v147;
          v148 -= 8;
        }
        while (v148);
        v157 = HIDWORD(v619);
        v614 = (WTF *)&v616;
        v615 = 1;
        if (HIDWORD(v619))
        {
          v158 = v602;
          v159 = (~(v602 << 32) + v602) ^ ((unint64_t)(~(v602 << 32) + v602) >> 22);
          v160 = 9 * ((v159 + ~(v159 << 13)) ^ ((v159 + ~(v159 << 13)) >> 8));
          v161 = (v160 ^ (v160 >> 15)) + ~((v160 ^ (v160 >> 15)) << 27);
          v162 = (v161 >> 31) ^ v161;
          do
          {
            v163 = (int *)*((_QWORD *)v618[1] + v157 - 1);
            HIDWORD(v619) = v157 - 1;
            if (!v163)
              break;
            v164 = *((_QWORD *)v604 + 3);
            v165 = *v163;
            v605[0] = 0;
            v166 = *(_QWORD *)(v164 + 208 * v165 + 192);
            if (!v166)
              goto LABEL_244;
            v167 = *(_DWORD *)(v166 - 8);
            v168 = v167 & v162;
            v169 = *(_QWORD *)(v166 + 32 * v168);
            if (v169 != v158)
            {
              v170 = 1;
              while (v169)
              {
                v168 = ((_DWORD)v168 + v170) & v167;
                v169 = *(_QWORD *)(v166 + 32 * v168);
                ++v170;
                if (v169 == v158)
                  goto LABEL_243;
              }
              v168 = *(unsigned int *)(v166 - 4);
            }
LABEL_243:
            if (v168 == *(_DWORD *)(v166 - 4))
              goto LABEL_244;
            v190 = v166 + 32 * v168;
            v191 = *(unsigned int *)(v190 + 20);
            if (!(_DWORD)v191)
              goto LABEL_244;
            v192 = *(uint64_t **)(v190 + 8);
            v193 = 8 * v191;
            while (1)
            {
              v194 = *v192;
              v195 = *(unsigned __int8 *)(*v192 + 12);
              v196 = *v192 && (v195 - 79) >= 0xFFFFFFF0;
              if (v196 && *(_DWORD *)(v194 + 40) == v609 && (v195 == 63 || v195 == 68))
                break;
              ++v192;
              v193 -= 8;
              if (!v193)
                goto LABEL_244;
            }
            v605[0] = *v192;
            if (v194 == *((_QWORD *)v604 + 33))
            {
LABEL_244:
              if ((_DWORD)v606 != HIDWORD(v606))
              {
                v171 = v164 + 208 * v165;
                v172 = v171 + 88;
                v173 = (_BYTE *)(v171 + 168);
                v174 = *(unsigned int *)(v171 + 100);
                if (!*(_BYTE *)(v171 + 168))
                {
                  if (*(_DWORD *)(v171 + 100))
                  {
                    std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,false>(*(int8x16_t **)v172, (int8x16_t *)(*(_QWORD *)v172 + 8 * v174), (uint64_t)&v610, 126 - 2 * __clz(v174), 1);
                    v189 = *(unsigned int *)(v172 + 12);
                    if ((_DWORD)v189 == 1)
                    {
                      v174 = *(unsigned int *)(v172 + 12);
                    }
                    else
                    {
                      if (!*(_DWORD *)(v172 + 12))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197F98BF4);
                      }
                      v197 = *(int8x16_t **)v172;
                      v198 = 1;
                      v174 = 1;
                      do
                      {
                        v199 = *(_QWORD *)(*(_QWORD *)v172 + 8 * v198);
                        v200 = v197->u32[1];
                        if (v200 < HIDWORD(v199))
                        {
                          if (v200 >= v199)
                          {
                            v201 = HIDWORD(v199);
                            v202 = v197->u32[0];
                            if (v202 == v201)
                            {
                              v201 = 0;
                              v202 = 0;
                            }
                            v197->i64[0] = v202 | (v201 << 32);
                          }
                          else
                          {
                            if (v189 <= v174)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x197F98BFCLL);
                            }
                            v197 = (int8x16_t *)(*(_QWORD *)v172 + 8 * v174++);
                            v197->i64[0] = v199;
                          }
                        }
                        ++v198;
                        v189 = *(unsigned int *)(v172 + 12);
                      }
                      while (v198 < v189);
                    }
                    *(_DWORD *)(v172 + 12) = v174;
                  }
                  *v173 = 1;
                }
                if (v174)
                {
                  v186 = (_DWORD *)(*(_QWORD *)v172 + 4);
                  v187 = 0xFFFFFFFFLL;
                  while (HIDWORD(v606) <= *(v186 - 1) || *v186 <= v606)
                  {
                    v186 += 2;
                    --v187;
                    if (!--v174)
                      goto LABEL_247;
                  }
                  if (v187)
                  {
LABEL_302:
                    v610 = (WTF *)&v612;
                    v611 = 1;
                    v203 = v614;
                    v204 = &v616 == (uint64_t *)v614 || v614 == 0;
                    this = v604;
                    if (!v204)
                    {
                      v614 = 0;
                      LODWORD(v615) = 0;
                      WTF::fastFree((unint64_t)v203, v144, v11, v4, v5, v6, v7, v8);
                    }
LABEL_319:
                    v212 = v618[1];
                    if (v620 != (_QWORD *)v618[1] && v618[1])
                    {
                      v618[1] = 0;
                      LODWORD(v619) = 0;
                      WTF::fastFree((unint64_t)v212, v144, v11, v4, v5, v6, v7, v8);
                    }
                    if (((unint64_t)v618[0] & 0x8000000000000000) == 0)
                      WTF::fastFree(2 * (uint64_t)v618[0], v144, v11, v4, v5, v6, v7, v8);
                    v213 = HIDWORD(v611);
                    if (!HIDWORD(v611))
                      goto LABEL_325;
                    *((_BYTE *)this + 488) = 1;
                    if (v213 != 1)
                    {
                      v526 = JSC::B3::Procedure::addVariable(*(_DWORD **)this, *(_DWORD *)(*((_QWORD *)this + 33) + 16));
                      v527 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *>((uint64_t)this + 280, *((unsigned int *)this + 64), *(_QWORD *)(*((_QWORD *)this + 33) + 24), (uint64_t)v526);
                      JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)this + 33), v527);
                      v215 = v610;
                      if (!HIDWORD(v611))
                        goto LABEL_330;
                      v528 = 8 * HIDWORD(v611);
                      do
                      {
                        v529 = *(unsigned __int8 **)v215;
                        v606 = *(int **)v215;
                        v614 = 0;
                        v615 = 0;
                        WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v618, (uint64_t *)v604 + 34, (uint64_t *)&v606, (uint64_t)&v614, v76, v77, v78, v79);
                        v537 = v618[0];
                        if (v614)
                          WTF::fastFree((unint64_t)v614, v530, v531, v532, v533, v534, v535, v536);
                        if (v538)
                        {
                          v529 = (unsigned __int8 *)v538;
                        }
                        else if (v529[12] - 68 <= 2)
                        {
                          v529 = *(unsigned __int8 **)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v529, 0);
                        }
                        v618[0] = 0;
                        v539 = (WTF *)JSC::B3::Procedure::add<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *,JSC::B3::Value *>(*(_QWORD *)v604, *(_QWORD *)(*((_QWORD *)v604 + 33) + 24), (uint64_t)v526, (uint64_t)v529);
                        v618[0] = v539;
                        v540 = *((unsigned int *)v537 + 5);
                        if ((_DWORD)v540 == *((_DWORD *)v537 + 4))
                        {
                          WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>((uint64_t)v537 + 8, (unint64_t)v618);
                        }
                        else
                        {
                          *(_QWORD *)(*((_QWORD *)v537 + 1) + 8 * v540) = v539;
                          *((_DWORD *)v537 + 5) = v540 + 1;
                        }
                        v215 = (WTF *)((char *)v215 + 8);
                        v528 -= 8;
                      }
                      while (v528);
                      goto LABEL_329;
                    }
                    v347 = *(unsigned __int8 **)v610;
LABEL_456:
                    v348 = (unsigned int *)*((_QWORD *)v347 + 4);
                    v349 = (unsigned int *)*((_QWORD *)this + 31);
                    if (v348 != v349)
                    {
                      v350 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
                      v351 = v350 + 32 * *v349;
                      v352 = v350 + 32 * *v348;
                      if (*(_DWORD *)(v351 + 24) <= *(_DWORD *)(v352 + 24)
                        || *(_DWORD *)(v351 + 28) >= *(_DWORD *)(v352 + 28))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197F977ACLL);
                      }
                    }
                    v618[0] = 0;
                    v618[1] = 0;
                    if (v353)
                    {
                      v273 = (unsigned __int8 *)v353;
                      if (HIDWORD(v618[1]))
                      {
                        v543 = (JSC::B3::Value **)v618[0];
                        v544 = 8 * HIDWORD(v618[1]);
                        do
                        {
                          v545 = *v543++;
                          JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::CSE *)((char *)v604 + 280), *((unsigned int *)v604 + 64), v545, v354, v355, v356, v357, v358);
                          v544 -= 8;
                        }
                        while (v544);
                      }
                      v502 = (JSC::B3::Value *)*((_QWORD *)v604 + 33);
                      goto LABEL_812;
                    }
                    v359 = *((_QWORD *)this + 33);
                    if (v347[12] - 68 <= 2)
                    {
                      v546 = (JSC::B3::MemoryValue *)v347;
                      goto LABEL_814;
                    }
                    v360 = *(_DWORD *)(v359 + 16);
                    if (v360 != *((_DWORD *)v347 + 4))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197F986E4);
                    }
                    v361 = *(_QWORD *)(v359 + 32);
                    v362 = *(_DWORD *)(v359 + 8);
                    (**(void (***)(_QWORD))v359)(*((_QWORD *)this + 33));
                    *(_QWORD *)v359 = off_1E357F5F0;
                    if (v360)
                    {
                      *(_QWORD *)(v359 + 40) = v347;
                      v363 = 1;
                    }
                    else
                    {
                      v363 = 0;
                    }
                    *(_WORD *)(v359 + 12) = v363;
                    *(_DWORD *)(v359 + 16) = v360;
                    *(_BYTE *)(v359 + 20) = v363;
                    *(_DWORD *)(v359 + 8) = v362;
                    *(_QWORD *)(v359 + 32) = v361;
LABEL_465:
                    v364 = v618[0];
                    if (v618[0])
                    {
                      v618[0] = 0;
                      LODWORD(v618[1]) = 0;
                      WTF::fastFree((unint64_t)v364, v73, v74, v75, v76, v77, v78, v79);
                    }
LABEL_329:
                    v215 = v610;
                    goto LABEL_330;
                  }
                }
              }
LABEL_247:
              v175 = v163[9];
              if (!(_DWORD)v175)
                goto LABEL_302;
              v176 = (WTF **)*((_QWORD *)v163 + 3);
              v177 = 8 * v175;
              do
              {
                v178 = *v176;
                v610 = *v176;
                v179 = (uint64_t)v618[0];
                if (((unint64_t)v618[0] & 0x8000000000000000) != 0)
                  v180 = 63;
                else
                  v180 = *(_QWORD *)(2 * (uint64_t)v618[0]);
                v181 = *(unsigned int *)v178;
                if (v180 <= v181)
                {
                  WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v618, v181 + 1, 0);
                  v179 = (uint64_t)v618[0];
                }
                if (v179 >= 0)
                  v182 = (WTF **)(2 * v179 + 8);
                else
                  v182 = v618;
                v183 = (v181 >> 3) & 0x1FFFFFF8;
                v184 = *(uint64_t *)((char *)v182 + v183);
                *(WTF **)((char *)v182 + v183) = (WTF *)(v184 | (1 << v181));
                if ((v184 & (1 << v181)) == 0)
                {
                  v185 = HIDWORD(v619);
                  if (HIDWORD(v619) == (_DWORD)v619)
                  {
                    v269 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v618[1], HIDWORD(v619) + 1, (unint64_t)&v610);
                    v185 = HIDWORD(v619);
                    *((_QWORD *)v618[1] + HIDWORD(v619)) = *v269;
                  }
                  else
                  {
                    *((_QWORD *)v618[1] + HIDWORD(v619)) = v178;
                  }
                  HIDWORD(v619) = v185 + 1;
                }
                ++v176;
                v177 -= 8;
              }
              while (v177);
            }
            else
            {
              v541 = HIDWORD(v615);
              if (HIDWORD(v615) == (_DWORD)v615)
              {
                v542 = (_QWORD *)WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v614, HIDWORD(v615) + 1, (unint64_t)v605);
                v541 = HIDWORD(v615);
                *((_QWORD *)v614 + HIDWORD(v615)) = *v542;
              }
              else
              {
                *((_QWORD *)v614 + HIDWORD(v615)) = v194;
              }
              HIDWORD(v615) = v541 + 1;
            }
            v157 = HIDWORD(v619);
            v158 = v602;
          }
          while (HIDWORD(v619));
          v289 = v614;
          v610 = (WTF *)&v612;
          v611 = 1;
          if (v614 != (WTF *)&v616)
          {
            v614 = (WTF *)&v616;
            v610 = v289;
            v211 = HIDWORD(v615);
            LODWORD(v611) = v615;
            this = v604;
            goto LABEL_318;
          }
          v211 = HIDWORD(v615);
          this = v604;
LABEL_317:
          memcpy(&v612, &v616, 8 * v211);
LABEL_318:
          HIDWORD(v615) = 0;
          HIDWORD(v611) = v211;
          goto LABEL_319;
        }
      }
      else
      {
        v614 = (WTF *)&v616;
        v615 = 1;
      }
      v211 = 0;
      v610 = (WTF *)&v612;
      v611 = 1;
      goto LABEL_317;
    case '@':
      v606 = v10;
      v381 = *((_QWORD *)this + 33);
      if (*(unsigned __int8 *)(v381 + 12) - 63 >= 0x10)
        v381 = 0;
      if (*(_DWORD *)(v381 + 52) != *(_DWORD *)(v381 + 56))
        goto LABEL_599;
      if (v382)
      {
        v618[0] = v382;
        WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v610, (uint64_t *)v618, 1uLL);
        goto LABEL_600;
      }
      if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps((uint64_t)this + 128, &v606))
      {
LABEL_599:
        v610 = (WTF *)&v612;
        v611 = 1;
        goto LABEL_600;
      }
      v618[0] = (WTF *)0x8000000000000000;
      v618[1] = (WTF *)v620;
      v619 = 16;
      WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::BitVector *)v618, *(unsigned int ***)(*((_QWORD *)this + 31) + 24), *(_DWORD *)(*((_QWORD *)this + 31) + 36));
      v614 = (WTF *)&v616;
      v615 = 1;
      v384 = HIDWORD(v619);
      if (HIDWORD(v619))
      {
        do
        {
          v385 = (int *)*((_QWORD *)v618[1] + v384 - 1);
          HIDWORD(v619) = v384 - 1;
          if (!v385)
            break;
          v386 = *((_QWORD *)this + 3);
          v387 = *v385;
          v605[0] = 0;
          v605[0] = v388;
          if (!v388 || v388 == *((_QWORD *)v604 + 33))
          {
            if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps(v386 + 208 * v387 + 88, &v606)
              || (v11 = v385[9], !(_DWORD)v11))
            {
              v610 = (WTF *)&v612;
              v611 = 1;
              v398 = v614;
              this = v604;
              if (&v616 != (uint64_t *)v614 && v614)
              {
                v614 = 0;
                LODWORD(v615) = 0;
                WTF::fastFree((unint64_t)v398, v383, v11, v4, v5, v6, v7, v8);
              }
LABEL_540:
              v399 = v618[1];
              if (v620 != (_QWORD *)v618[1] && v618[1])
              {
                v618[1] = 0;
                LODWORD(v619) = 0;
                WTF::fastFree((unint64_t)v399, v383, v11, v4, v5, v6, v7, v8);
              }
              if (((unint64_t)v618[0] & 0x8000000000000000) == 0)
                WTF::fastFree(2 * (uint64_t)v618[0], v383, v11, v4, v5, v6, v7, v8);
LABEL_600:
              v426 = HIDWORD(v611);
              if (HIDWORD(v611))
              {
                *((_BYTE *)this + 488) = 1;
                if (v426 != 1)
                {
                  v562 = JSC::B3::Procedure::addVariable(*(_DWORD **)v604, *(_DWORD *)(*((_QWORD *)v604 + 33) + 16));
                  v563 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *>((uint64_t)v604 + 280, *((unsigned int *)v604 + 64), *(_QWORD *)(*((_QWORD *)v604 + 33) + 24), (uint64_t)v562);
                  JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v604 + 33), v563);
                  v215 = v610;
                  if (HIDWORD(v611))
                  {
                    v564 = 8 * HIDWORD(v611);
                    do
                    {
                      v565 = *(unsigned __int8 **)v215;
                      v606 = *(int **)v215;
                      v614 = 0;
                      v615 = 0;
                      WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v618, (uint64_t *)v604 + 34, (uint64_t *)&v606, (uint64_t)&v614, v76, v77, v78, v79);
                      v573 = v618[0];
                      if (v614)
                        WTF::fastFree((unint64_t)v614, v566, v567, v568, v569, v570, v571, v572);
                      if (!v574)
                      {
                        if (v565[12] - 68 > 2)
                          v574 = (uint64_t *)v565;
                        else
                          v574 = *(uint64_t **)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v565, 0);
                      }
                      v618[0] = 0;
                      v575 = (WTF *)JSC::B3::Procedure::add<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *,JSC::B3::Value *>(*(_QWORD *)v604, *(_QWORD *)(*((_QWORD *)v604 + 33) + 24), (uint64_t)v562, (uint64_t)v574);
                      v618[0] = v575;
                      v576 = *((unsigned int *)v573 + 5);
                      if ((_DWORD)v576 == *((_DWORD *)v573 + 4))
                      {
                        WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>((uint64_t)v573 + 8, (unint64_t)v618);
                      }
                      else
                      {
                        *(_QWORD *)(*((_QWORD *)v573 + 1) + 8 * v576) = v575;
                        *((_DWORD *)v573 + 5) = v576 + 1;
                      }
                      v215 = (WTF *)((char *)v215 + 8);
                      v564 -= 8;
                    }
                    while (v564);
                    goto LABEL_329;
                  }
                  goto LABEL_330;
                }
                v273 = *(unsigned __int8 **)v610;
                v427 = *(unsigned int **)(*(_QWORD *)v610 + 32);
                v428 = (unsigned int *)*((_QWORD *)v604 + 31);
                if (v427 != v428)
                {
                  v429 = *(_QWORD *)(*((_QWORD *)v604 + 1) + 8);
                  v430 = v429 + 32 * *v428;
                  v431 = v429 + 32 * *v427;
                  if (*(_DWORD *)(v430 + 24) <= *(_DWORD *)(v431 + 24)
                    || *(_DWORD *)(v430 + 28) >= *(_DWORD *)(v431 + 28))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197F98B6CLL);
                  }
                }
                v618[0] = 0;
                v618[1] = 0;
                if (v432)
                {
                  v285 = (JSC::B3::Value *)v432;
                  if (HIDWORD(v618[1]))
                  {
                    v438 = (JSC::B3::Value **)v618[0];
                    v439 = 8 * HIDWORD(v618[1]);
                    do
                    {
                      v440 = *v438++;
                      JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::CSE *)((char *)v604 + 280), *((unsigned int *)v604 + 64), v440, v433, v434, v435, v436, v437);
                      v439 -= 8;
                    }
                    while (v439);
                  }
                  goto LABEL_715;
                }
LABEL_858:
                v359 = *((_QWORD *)v604 + 33);
                if (v273[12] - 68 > 2)
                {
                  v502 = (JSC::B3::Value *)*((_QWORD *)v604 + 33);
LABEL_812:
                  v503 = (JSC::B3::Value *)v273;
                }
                else
                {
                  v546 = (JSC::B3::MemoryValue *)v273;
LABEL_814:
                  v503 = *(JSC::B3::Value **)JSC::B3::MemoryValue::child(v546, 0);
                  v502 = (JSC::B3::Value *)v359;
                }
LABEL_815:
                JSC::B3::Value::replaceWithIdentity(v502, v503);
                goto LABEL_465;
              }
LABEL_325:
              if (*(unsigned __int8 *)(*((_QWORD *)this + 33) + 12) - 63 >= 0x10)
                v214 = 0;
              else
                v214 = (JSC::B3::MemoryValue *)*((_QWORD *)this + 33);
              goto LABEL_329;
            }
            WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::BitVector *)v618, *((unsigned int ***)v385 + 3), v11);
          }
          else
          {
            v389 = HIDWORD(v615);
            if (HIDWORD(v615) == (_DWORD)v615)
            {
              WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::MemoryValue *&>((uint64_t)&v614, (unint64_t)v605);
            }
            else
            {
              *((_QWORD *)v614 + HIDWORD(v615)) = v388;
              HIDWORD(v615) = v389 + 1;
            }
          }
          this = v604;
          v384 = HIDWORD(v619);
        }
        while (HIDWORD(v619));
        v516 = v614;
        v610 = (WTF *)&v612;
        v611 = 1;
        v517 = HIDWORD(v615);
        if (v614 != (WTF *)&v616)
        {
          v614 = (WTF *)&v616;
          v610 = v516;
          LODWORD(v611) = v615;
          goto LABEL_744;
        }
      }
      else
      {
        v517 = 0;
        v610 = (WTF *)&v612;
        v611 = 1;
      }
      memcpy(&v612, &v616, 8 * v517);
LABEL_744:
      HIDWORD(v611) = v517;
      this = v604;
      goto LABEL_540;
    case 'A':
      v606 = v10;
      v255 = *((_QWORD *)this + 33);
      if (*(unsigned __int8 *)(v255 + 12) - 63 >= 0x10)
        v255 = 0;
      if (*(_DWORD *)(v255 + 52) != *(_DWORD *)(v255 + 56))
        goto LABEL_675;
      if (v256)
      {
        v618[0] = v256;
        WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v610, (uint64_t *)v618, 1uLL);
        goto LABEL_415;
      }
      if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps((uint64_t)this + 128, &v606))
      {
LABEL_675:
        v610 = (WTF *)&v612;
        v611 = 1;
        goto LABEL_415;
      }
      v618[0] = (WTF *)0x8000000000000000;
      v618[1] = (WTF *)v620;
      v619 = 16;
      WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::BitVector *)v618, *(unsigned int ***)(*((_QWORD *)this + 31) + 24), *(_DWORD *)(*((_QWORD *)this + 31) + 36));
      v614 = (WTF *)&v616;
      v615 = 1;
      v258 = HIDWORD(v619);
      if (HIDWORD(v619))
      {
        do
        {
          v259 = (int *)*((_QWORD *)v618[1] + v258 - 1);
          HIDWORD(v619) = v258 - 1;
          if (!v259)
            break;
          v260 = *((_QWORD *)this + 3);
          v261 = *v259;
          v605[0] = 0;
          v605[0] = v262;
          if (!v262 || v262 == *((_QWORD *)v604 + 33))
          {
            if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps(v260 + 208 * v261 + 88, &v606)
              || (v11 = v259[9], !(_DWORD)v11))
            {
              v610 = (WTF *)&v612;
              v611 = 1;
              v270 = v614;
              this = v604;
              if (&v616 != (uint64_t *)v614 && v614)
              {
                v614 = 0;
                LODWORD(v615) = 0;
                WTF::fastFree((unint64_t)v270, v257, v11, v4, v5, v6, v7, v8);
              }
LABEL_410:
              v271 = v618[1];
              if (v620 != (_QWORD *)v618[1] && v618[1])
              {
                v618[1] = 0;
                LODWORD(v619) = 0;
                WTF::fastFree((unint64_t)v271, v257, v11, v4, v5, v6, v7, v8);
              }
              if (((unint64_t)v618[0] & 0x8000000000000000) == 0)
                WTF::fastFree(2 * (uint64_t)v618[0], v257, v11, v4, v5, v6, v7, v8);
LABEL_415:
              v272 = HIDWORD(v611);
              if (!HIDWORD(v611))
                goto LABEL_325;
              *((_BYTE *)this + 488) = 1;
              if (v272 != 1)
              {
                v547 = JSC::B3::Procedure::addVariable(*(_DWORD **)v604, *(_DWORD *)(*((_QWORD *)v604 + 33) + 16));
                v548 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *>((uint64_t)v604 + 280, *((unsigned int *)v604 + 64), *(_QWORD *)(*((_QWORD *)v604 + 33) + 24), (uint64_t)v547);
                JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v604 + 33), v548);
                v215 = v610;
                if (HIDWORD(v611))
                {
                  v549 = 8 * HIDWORD(v611);
                  do
                  {
                    v550 = *(unsigned __int8 **)v215;
                    v606 = *(int **)v215;
                    v614 = 0;
                    v615 = 0;
                    WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v618, (uint64_t *)v604 + 34, (uint64_t *)&v606, (uint64_t)&v614, v76, v77, v78, v79);
                    v558 = v618[0];
                    if (v614)
                      WTF::fastFree((unint64_t)v614, v551, v552, v553, v554, v555, v556, v557);
                    if (!v559)
                    {
                      if (v550[12] - 68 > 2)
                        v559 = (uint64_t)v550;
                      else
                        v559 = *(_QWORD *)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v550, 0);
                    }
                    v618[0] = 0;
                    v560 = (WTF *)JSC::B3::Procedure::add<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *,JSC::B3::Value *>(*(_QWORD *)v604, *(_QWORD *)(*((_QWORD *)v604 + 33) + 24), (uint64_t)v547, v559);
                    v618[0] = v560;
                    v561 = *((unsigned int *)v558 + 5);
                    if ((_DWORD)v561 == *((_DWORD *)v558 + 4))
                    {
                      WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>((uint64_t)v558 + 8, (unint64_t)v618);
                    }
                    else
                    {
                      *(_QWORD *)(*((_QWORD *)v558 + 1) + 8 * v561) = v560;
                      *((_DWORD *)v558 + 5) = v561 + 1;
                    }
                    v215 = (WTF *)((char *)v215 + 8);
                    v549 -= 8;
                  }
                  while (v549);
                  goto LABEL_329;
                }
                goto LABEL_330;
              }
              v273 = *(unsigned __int8 **)v610;
              v274 = *(unsigned int **)(*(_QWORD *)v610 + 32);
              v275 = (unsigned int *)*((_QWORD *)v604 + 31);
              if (v274 != v275)
              {
                v276 = *(_QWORD *)(*((_QWORD *)v604 + 1) + 8);
                v277 = v276 + 32 * *v275;
                v278 = v276 + 32 * *v274;
                if (*(_DWORD *)(v277 + 24) <= *(_DWORD *)(v278 + 24)
                  || *(_DWORD *)(v277 + 28) >= *(_DWORD *)(v278 + 28))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F98B4CLL);
                }
              }
              v618[0] = 0;
              v618[1] = 0;
              if (!v279)
                goto LABEL_858;
              v285 = (JSC::B3::Value *)v279;
              if (HIDWORD(v618[1]))
              {
                v286 = (JSC::B3::Value **)v618[0];
                v287 = 8 * HIDWORD(v618[1]);
                do
                {
                  v288 = *v286++;
                  JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::CSE *)((char *)v604 + 280), *((unsigned int *)v604 + 64), v288, v280, v281, v282, v283, v284);
                  v287 -= 8;
                }
                while (v287);
              }
LABEL_715:
              v502 = (JSC::B3::Value *)*((_QWORD *)v604 + 33);
              v503 = v285;
              goto LABEL_815;
            }
            WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::BitVector *)v618, *((unsigned int ***)v259 + 3), v11);
          }
          else
          {
            v263 = HIDWORD(v615);
            if (HIDWORD(v615) == (_DWORD)v615)
            {
              WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::MemoryValue *&>((uint64_t)&v614, (unint64_t)v605);
            }
            else
            {
              *((_QWORD *)v614 + HIDWORD(v615)) = v262;
              HIDWORD(v615) = v263 + 1;
            }
          }
          this = v604;
          v258 = HIDWORD(v619);
        }
        while (HIDWORD(v619));
        v424 = v614;
        v610 = (WTF *)&v612;
        v611 = 1;
        v425 = HIDWORD(v615);
        if (v614 != (WTF *)&v616)
        {
          v614 = (WTF *)&v616;
          v610 = v424;
          LODWORD(v611) = v615;
          goto LABEL_598;
        }
      }
      else
      {
        v425 = 0;
        v610 = (WTF *)&v612;
        v611 = 1;
      }
      memcpy(&v612, &v616, 8 * v425);
LABEL_598:
      HIDWORD(v611) = v425;
      goto LABEL_410;
    case 'B':
      v606 = v10;
      v467 = *((_QWORD *)this + 33);
      if (*(unsigned __int8 *)(v467 + 12) - 63 >= 0x10)
        v467 = 0;
      if (*(_DWORD *)(v467 + 52) != *(_DWORD *)(v467 + 56))
        goto LABEL_705;
      if (v468)
      {
        v618[0] = v468;
        WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v610, (uint64_t *)v618, 1uLL);
        goto LABEL_706;
      }
      if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps((uint64_t)this + 128, &v606))
      {
LABEL_705:
        v610 = (WTF *)&v612;
        v611 = 1;
        goto LABEL_706;
      }
      v618[0] = (WTF *)0x8000000000000000;
      v618[1] = (WTF *)v620;
      v619 = 16;
      WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::BitVector *)v618, *(unsigned int ***)(*((_QWORD *)this + 31) + 24), *(_DWORD *)(*((_QWORD *)this + 31) + 36));
      v614 = (WTF *)&v616;
      v615 = 1;
      v470 = HIDWORD(v619);
      if (HIDWORD(v619))
      {
        do
        {
          v471 = (int *)*((_QWORD *)v618[1] + v470 - 1);
          HIDWORD(v619) = v470 - 1;
          if (!v471)
            break;
          v472 = *((_QWORD *)this + 3);
          v473 = *v471;
          v605[0] = 0;
          v605[0] = v474;
          if (!v474 || v474 == *((_QWORD *)v604 + 33))
          {
            if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps(v472 + 208 * v473 + 88, &v606)
              || (v11 = v471[9], !(_DWORD)v11))
            {
              v610 = (WTF *)&v612;
              v611 = 1;
              v482 = v614;
              this = v604;
              if (&v616 != (uint64_t *)v614 && v614)
              {
                v614 = 0;
                LODWORD(v615) = 0;
                WTF::fastFree((unint64_t)v482, v469, v11, v4, v5, v6, v7, v8);
              }
LABEL_689:
              v483 = v618[1];
              if (v620 != (_QWORD *)v618[1] && v618[1])
              {
                v618[1] = 0;
                LODWORD(v619) = 0;
                WTF::fastFree((unint64_t)v483, v469, v11, v4, v5, v6, v7, v8);
              }
              if (((unint64_t)v618[0] & 0x8000000000000000) == 0)
                WTF::fastFree(2 * (uint64_t)v618[0], v469, v11, v4, v5, v6, v7, v8);
LABEL_706:
              v487 = HIDWORD(v611);
              if (!HIDWORD(v611))
                goto LABEL_325;
              *((_BYTE *)this + 488) = 1;
              if (v487 == 1)
              {
                v273 = *(unsigned __int8 **)v610;
                v488 = *(unsigned int **)(*(_QWORD *)v610 + 32);
                v489 = (unsigned int *)*((_QWORD *)v604 + 31);
                if (v488 != v489)
                {
                  v490 = *(_QWORD *)(*((_QWORD *)v604 + 1) + 8);
                  v491 = v490 + 32 * *v489;
                  v492 = v490 + 32 * *v488;
                  if (*(_DWORD *)(v491 + 24) <= *(_DWORD *)(v492 + 24)
                    || *(_DWORD *)(v491 + 28) >= *(_DWORD *)(v492 + 28))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197F98B8CLL);
                  }
                }
                v618[0] = 0;
                v618[1] = 0;
                if (!v493)
                  goto LABEL_858;
                v285 = (JSC::B3::Value *)v493;
                if (HIDWORD(v618[1]))
                {
                  v499 = (JSC::B3::Value **)v618[0];
                  v500 = 8 * HIDWORD(v618[1]);
                  do
                  {
                    v501 = *v499++;
                    JSC::B3::InsertionSet::insertValue((JSC::B3::_anonymous_namespace_::CSE *)((char *)v604 + 280), *((unsigned int *)v604 + 64), v501, v494, v495, v496, v497, v498);
                    v500 -= 8;
                  }
                  while (v500);
                }
                goto LABEL_715;
              }
              v577 = JSC::B3::Procedure::addVariable(*(_DWORD **)v604, *(_DWORD *)(*((_QWORD *)v604 + 33) + 16));
              v578 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *>((uint64_t)v604 + 280, *((unsigned int *)v604 + 64), *(_QWORD *)(*((_QWORD *)v604 + 33) + 24), (uint64_t)v577);
              JSC::B3::Value::replaceWithIdentity(*((JSC::B3::Value **)v604 + 33), v578);
              v215 = v610;
              if (HIDWORD(v611))
              {
                v579 = 8 * HIDWORD(v611);
                do
                {
                  v580 = *(unsigned __int8 **)v215;
                  v606 = *(int **)v215;
                  v614 = 0;
                  v615 = 0;
                  WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v618, (uint64_t *)v604 + 34, (uint64_t *)&v606, (uint64_t)&v614, v76, v77, v78, v79);
                  v588 = v618[0];
                  if (v614)
                    WTF::fastFree((unint64_t)v614, v581, v582, v583, v584, v585, v586, v587);
                  if (!v589)
                  {
                    if (v580[12] - 68 > 2)
                      v589 = (uint64_t *)v580;
                    else
                      v589 = *(uint64_t **)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v580, 0);
                  }
                  v618[0] = 0;
                  v590 = (WTF *)JSC::B3::Procedure::add<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *,JSC::B3::Value *>(*(_QWORD *)v604, *(_QWORD *)(*((_QWORD *)v604 + 33) + 24), (uint64_t)v577, (uint64_t)v589);
                  v618[0] = v590;
                  v591 = *((unsigned int *)v588 + 5);
                  if ((_DWORD)v591 == *((_DWORD *)v588 + 4))
                  {
                    WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>((uint64_t)v588 + 8, (unint64_t)v618);
                  }
                  else
                  {
                    *(_QWORD *)(*((_QWORD *)v588 + 1) + 8 * v591) = v590;
                    *((_DWORD *)v588 + 5) = v591 + 1;
                  }
                  v215 = (WTF *)((char *)v215 + 8);
                  v579 -= 8;
                }
                while (v579);
                goto LABEL_329;
              }
LABEL_330:
              if (&v612 != (uint64_t *)v215 && v215)
              {
                v610 = 0;
                LODWORD(v611) = 0;
                v81 = (unint64_t)v215;
LABEL_98:
                WTF::fastFree(v81, v73, v74, v75, v76, v77, v78, v79);
              }
              return;
            }
            WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::BitVector *)v618, *((unsigned int ***)v471 + 3), v11);
          }
          else
          {
            v520 = HIDWORD(v615);
            if (HIDWORD(v615) == (_DWORD)v615)
            {
              WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::MemoryValue *&>((uint64_t)&v614, (unint64_t)v605);
            }
            else
            {
              *((_QWORD *)v614 + HIDWORD(v615)) = v474;
              HIDWORD(v615) = v520 + 1;
            }
          }
          this = v604;
          v470 = HIDWORD(v619);
        }
        while (HIDWORD(v619));
        v475 = v614;
        v610 = (WTF *)&v612;
        v611 = 1;
        v476 = HIDWORD(v615);
        if (v614 != (WTF *)&v616)
        {
          v614 = (WTF *)&v616;
          v610 = v475;
          LODWORD(v611) = v615;
          goto LABEL_673;
        }
      }
      else
      {
        v476 = 0;
        v610 = (WTF *)&v612;
        v611 = 1;
      }
      memcpy(&v612, &v616, 8 * v476);
LABEL_673:
      HIDWORD(v611) = v476;
      this = v604;
      goto LABEL_689;
    case 'C':
      v606 = &v609;
      v607 = &v608;
      v605[0] = &v608;
      v605[1] = this;
      v617 = (unsigned __int8 *)v10;
      v12 = *((_QWORD *)this + 33);
      if (*(unsigned __int8 *)(v12 + 12) - 63 >= 0x10)
        v12 = 0;
      if (*(_DWORD *)(v12 + 52) != *(_DWORD *)(v12 + 56))
        goto LABEL_232;
      if (v13)
      {
        v216 = (unsigned __int8 *)v13;
        v610 = (WTF *)&v612;
        v612 = (uint64_t)v13;
        v611 = 0x100000001;
        *((_BYTE *)this + 488) = 1;
        goto LABEL_335;
      }
      if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps((uint64_t)this + 128, &v617))
      {
LABEL_232:
        v610 = (WTF *)&v612;
        v611 = 1;
        goto LABEL_90;
      }
      v618[0] = (WTF *)0x8000000000000000;
      v618[1] = (WTF *)v620;
      v619 = 16;
      WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::BitVector *)v618, *(unsigned int ***)(*((_QWORD *)this + 31) + 24), *(_DWORD *)(*((_QWORD *)this + 31) + 36));
      v14 = (WTF *)&v616;
      v614 = (WTF *)&v616;
      v615 = 1;
      v15 = HIDWORD(v619);
      if (!HIDWORD(v619))
      {
        v210 = 0;
        v610 = (WTF *)&v612;
        v611 = 1;
LABEL_313:
        memcpy(&v612, v14, 8 * v210);
LABEL_314:
        HIDWORD(v611) = v210;
        goto LABEL_84;
      }
      v16 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
      v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
      v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
      v19 = (v18 >> 31) ^ v18;
      while (2)
      {
        v20 = (int *)*((_QWORD *)v618[1] + v15 - 1);
        HIDWORD(v619) = v15 - 1;
        if (!v20)
          goto LABEL_312;
        v21 = *((_QWORD *)this + 3);
        v22 = *v20;
        v613 = 0;
        v23 = *(_QWORD *)(v21 + 208 * v22 + 192);
        if (!v23)
          goto LABEL_18;
        v24 = *(_DWORD *)(v23 - 8);
        v25 = v24 & v19;
        v26 = *(_QWORD *)(v23 + 32 * v25);
        if (v26 != v602)
        {
          v27 = 1;
          while (v26)
          {
            v25 = ((_DWORD)v25 + v27) & v24;
            v26 = *(_QWORD *)(v23 + 32 * v25);
            ++v27;
            if (v26 == v602)
              goto LABEL_17;
          }
          v25 = *(unsigned int *)(v23 - 4);
        }
LABEL_17:
        if (v25 == *(_DWORD *)(v23 - 4) || (v47 = v23 + 32 * v25, v48 = *(unsigned int *)(v47 + 20), !(_DWORD)v48))
        {
LABEL_18:
          v613 = 0;
          goto LABEL_19;
        }
        v49 = *(JSC::B3::MemoryValue ***)(v47 + 8);
        v50 = 8 * v48;
        v52 = v606;
        v51 = v607;
        while (2)
        {
          v53 = *v49;
          v54 = *((unsigned __int8 *)*v49 + 12);
          if (*v49)
            v55 = (v54 - 79) >= 0xFFFFFFF0;
          else
            v55 = 0;
          if (!v55 || *((_DWORD *)v53 + 10) != *v52)
            goto LABEL_57;
          if (v54 != 67)
          {
            if (v54 == 70)
            {
              v598 = v14;
              v595 = v19;
              v592 = v51;
              v366 = JSC::B3::MemoryValue::child(*v49, 0);
              v19 = v595;
              v14 = v598;
              if (*(_DWORD *)(*(_QWORD *)v366 + 16) == *v592)
                break;
              v367 = JSC::B3::MemoryValue::child(v53, 0);
              v51 = v592;
              v19 = v595;
              v14 = v598;
              if (*(_DWORD *)(*(_QWORD *)v367 + 16) == 2 && *v592 == 1)
                break;
            }
            goto LABEL_57;
          }
          v56 = *((_DWORD *)v53 + 4);
          if (v56 != *v51 && (v56 != 2 || *v51 != 1))
          {
LABEL_57:
            ++v49;
            v50 -= 8;
            if (!v50)
              goto LABEL_18;
            continue;
          }
          break;
        }
        v613 = v53;
        if (v53 != *((JSC::B3::MemoryValue **)v604 + 33))
        {
          v205 = HIDWORD(v615);
          if (HIDWORD(v615) == (_DWORD)v615)
          {
            v246 = v14;
            v247 = v19;
            v248 = (_QWORD *)WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v614, HIDWORD(v615) + 1, (unint64_t)&v613);
            v19 = v247;
            v14 = v246;
            v205 = HIDWORD(v615);
            *((_QWORD *)v614 + HIDWORD(v615)) = *v248;
          }
          else
          {
            *((_QWORD *)v614 + HIDWORD(v615)) = v53;
          }
          this = v604;
          HIDWORD(v615) = v205 + 1;
          goto LABEL_38;
        }
LABEL_19:
        if ((_DWORD)v617 == HIDWORD(v617))
          goto LABEL_22;
        v28 = v21 + 208 * v22 + 88;
        v29 = v21 + 208 * v22;
        v31 = *(unsigned __int8 *)(v29 + 168);
        v30 = (_BYTE *)(v29 + 168);
        v32 = *(unsigned int *)(v28 + 12);
        if (!v31)
        {
          v57 = v19;
          v58 = v14;
          if (*(_DWORD *)(v28 + 12))
          {
            std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,false>(*(int8x16_t **)v28, (int8x16_t *)(*(_QWORD *)v28 + 8 * v32), (uint64_t)&v610, 126 - 2 * __clz(v32), 1);
            v59 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v59 == 1)
            {
              v32 = *(unsigned int *)(v28 + 12);
              v14 = v58;
              v19 = v57;
            }
            else
            {
              if (!*(_DWORD *)(v28 + 12))
              {
                __break(0xC471u);
                JUMPOUT(0x197F98BB4);
              }
              v60 = *(int8x16_t **)v28;
              v61 = 1;
              v32 = 1;
              v14 = v58;
              v19 = v57;
              do
              {
                v62 = *(_QWORD *)(*(_QWORD *)v28 + 8 * v61);
                v63 = v60->u32[1];
                if (v63 < HIDWORD(v62))
                {
                  if (v63 >= v62)
                  {
                    v64 = HIDWORD(v62);
                    v65 = v60->u32[0];
                    if (v65 == v64)
                    {
                      v64 = 0;
                      v65 = 0;
                    }
                    v60->i64[0] = v65 | (v64 << 32);
                  }
                  else
                  {
                    if (v59 <= v32)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197F98BBCLL);
                    }
                    v60 = (int8x16_t *)(*(_QWORD *)v28 + 8 * v32++);
                    v60->i64[0] = v62;
                  }
                }
                ++v61;
                v59 = *(unsigned int *)(v28 + 12);
              }
              while (v61 < v59);
            }
            *(_DWORD *)(v28 + 12) = v32;
          }
          *v30 = 1;
        }
        if (!v32)
          goto LABEL_22;
        v44 = (_DWORD *)(*(_QWORD *)v28 + 4);
        v45 = 0xFFFFFFFFLL;
        while (HIDWORD(v617) <= *(v44 - 1) || *v44 <= v617)
        {
          v44 += 2;
          --v45;
          if (!--v32)
            goto LABEL_22;
        }
        if (!v45)
        {
LABEL_22:
          v33 = v20[9];
          if ((_DWORD)v33)
          {
            v34 = (WTF **)*((_QWORD *)v20 + 3);
            v35 = 8 * v33;
            this = v604;
            do
            {
              v36 = *v34;
              v610 = *v34;
              v37 = (uint64_t)v618[0];
              if (((unint64_t)v618[0] & 0x8000000000000000) != 0)
                v38 = 63;
              else
                v38 = *(_QWORD *)(2 * (uint64_t)v618[0]);
              v39 = *(unsigned int *)v36;
              if (v38 <= v39)
              {
                v66 = v14;
                v67 = v19;
                WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v618, v39 + 1, 0);
                v19 = v67;
                v14 = v66;
                v37 = (uint64_t)v618[0];
              }
              if (v37 >= 0)
                v40 = (WTF **)(2 * v37 + 8);
              else
                v40 = v618;
              v41 = (v39 >> 3) & 0x1FFFFFF8;
              v42 = *(uint64_t *)((char *)v40 + v41);
              *(WTF **)((char *)v40 + v41) = (WTF *)(v42 | (1 << v39));
              if ((v42 & (1 << v39)) == 0)
              {
                v43 = HIDWORD(v619);
                if (HIDWORD(v619) == (_DWORD)v619)
                {
                  v206 = v14;
                  v207 = v19;
                  v208 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v618[1], HIDWORD(v619) + 1, (unint64_t)&v610);
                  v19 = v207;
                  v14 = v206;
                  v43 = HIDWORD(v619);
                  *((_QWORD *)v618[1] + HIDWORD(v619)) = *v208;
                }
                else
                {
                  *((_QWORD *)v618[1] + HIDWORD(v619)) = v36;
                }
                HIDWORD(v619) = v43 + 1;
              }
              ++v34;
              v35 -= 8;
            }
            while (v35);
LABEL_38:
            v15 = HIDWORD(v619);
            if (!HIDWORD(v619))
            {
LABEL_312:
              v209 = v614;
              v610 = (WTF *)&v612;
              v611 = 1;
              v210 = HIDWORD(v615);
              if (v614 == v14)
                goto LABEL_313;
              v614 = v14;
              v610 = v209;
              LODWORD(v611) = v615;
              goto LABEL_314;
            }
            continue;
          }
        }
        break;
      }
      v610 = (WTF *)&v612;
      v611 = 1;
      v68 = v614;
      v69 = v14 == v614 || v614 == 0;
      this = v604;
      if (!v69)
      {
        v614 = 0;
        LODWORD(v615) = 0;
        WTF::fastFree((unint64_t)v68, v14, v11, v4, v5, v6, v7, v8);
      }
LABEL_84:
      v70 = v618[1];
      if (v620 != (_QWORD *)v618[1] && v618[1])
      {
        v618[1] = 0;
        LODWORD(v619) = 0;
        WTF::fastFree((unint64_t)v70, v14, v11, v4, v5, v6, v7, v8);
      }
      if (((unint64_t)v618[0] & 0x8000000000000000) == 0)
        WTF::fastFree(2 * (uint64_t)v618[0], v14, v11, v4, v5, v6, v7, v8);
      v71 = HIDWORD(v611);
      if (!HIDWORD(v611))
      {
LABEL_90:
        if (*(unsigned __int8 *)(*((_QWORD *)this + 33) + 12) - 63 >= 0x10)
          v72 = 0;
        else
          v72 = (JSC::B3::MemoryValue *)*((_QWORD *)this + 33);
LABEL_94:
        v80 = v610;
        goto LABEL_95;
      }
      *((_BYTE *)this + 488) = 1;
      if (v71 == 1)
      {
        v216 = *(unsigned __int8 **)v610;
LABEL_335:
        v217 = (unsigned int *)*((_QWORD *)v216 + 4);
        v218 = (unsigned int *)*((_QWORD *)this + 31);
        if (v217 != v218)
        {
          v219 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
          v220 = v219 + 32 * *v218;
          v221 = v219 + 32 * *v217;
          if (*(_DWORD *)(v220 + 24) <= *(_DWORD *)(v221 + 24) || *(_DWORD *)(v220 + 28) >= *(_DWORD *)(v221 + 28))
          {
            __break(0xC471u);
            JUMPOUT(0x197F96AFCLL);
          }
        }
        v614 = 0;
        v615 = 0;
        if (v222)
        {
          v368 = v222;
          if (HIDWORD(v615))
          {
            v369 = v614;
            v370 = *((_DWORD *)this + 75);
            v371 = 8 * HIDWORD(v615);
            do
            {
              v372 = *(WTF **)v369;
              v618[0] = (WTF *)*((unsigned int *)this + 64);
              v618[1] = v372;
              if (v370 == *((_DWORD *)this + 74))
                *(_OWORD *)(*((_QWORD *)this + 36) + 16 * *((unsigned int *)this + 75)) = *(_OWORD *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 288, (void *)(v370 + 1), (unint64_t)v618, v223, v224, v225, v226, v227);
              else
                *(_OWORD *)(*((_QWORD *)this + 36) + 16 * v370) = *(_OWORD *)v618;
              v370 = *((_DWORD *)this + 75) + 1;
              *((_DWORD *)this + 75) = v370;
              v369 = (WTF *)((char *)v369 + 8);
              v371 -= 8;
            }
            while (v371);
          }
          v228 = *((_QWORD *)this + 33);
          v373 = *(_DWORD *)(v228 + 16);
          if (v373 != *((_DWORD *)v368 + 4))
          {
            __break(0xC471u);
            JUMPOUT(0x197F986C4);
          }
          v230 = *(_QWORD *)(v228 + 32);
          v231 = *(_DWORD *)(v228 + 8);
          (**(void (***)(_QWORD))v228)(*((_QWORD *)this + 33));
          *(_QWORD *)v228 = off_1E357F5F0;
          if (v373)
          {
            *(_QWORD *)(v228 + 40) = v368;
            v232 = 1;
          }
          else
          {
            v232 = 0;
          }
          *(_WORD *)(v228 + 12) = v232;
          *(_DWORD *)(v228 + 16) = v373;
        }
        else
        {
          v228 = *((_QWORD *)this + 33);
          if (v216[12] - 68 <= 2)
          {
            v518 = (JSC::B3::Value **)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v216, 0);
            JSC::B3::Value::replaceWithIdentity((JSC::B3::Value *)v228, *v518);
LABEL_345:
            v233 = v614;
            if (v614)
            {
              v614 = 0;
              LODWORD(v615) = 0;
              WTF::fastFree((unint64_t)v233, v73, v74, v75, v76, v77, v78, v79);
            }
            goto LABEL_94;
          }
          v229 = *(_DWORD *)(v228 + 16);
          if (v229 != *((_DWORD *)v216 + 4))
          {
            __break(0xC471u);
            JUMPOUT(0x197F98360);
          }
          v230 = *(_QWORD *)(v228 + 32);
          v231 = *(_DWORD *)(v228 + 8);
          (**(void (***)(_QWORD))v228)(*((_QWORD *)this + 33));
          *(_QWORD *)v228 = off_1E357F5F0;
          if (v229)
          {
            *(_QWORD *)(v228 + 40) = v216;
            v232 = 1;
          }
          else
          {
            v232 = 0;
          }
          *(_WORD *)(v228 + 12) = v232;
          *(_DWORD *)(v228 + 16) = v229;
        }
        *(_BYTE *)(v228 + 20) = v232;
        *(_DWORD *)(v228 + 8) = v231;
        *(_QWORD *)(v228 + 32) = v230;
        goto LABEL_345;
      }
      v290 = *(_DWORD **)this;
      v291 = *(_DWORD *)(*((_QWORD *)this + 33) + 16);
      v292 = (WTF *)WTF::fastMalloc((WTF *)8);
      *((_DWORD *)v292 + 1) = v291;
      v618[0] = v292;
      v603 = JSC::B3::SparseCollection<JSC::B3::Variable>::add(v290, v618);
      v300 = v618[0];
      v618[0] = 0;
      if (v300)
        WTF::fastFree((unint64_t)v300, v293, v294, v295, v296, v297, v298, v299);
      v301 = this;
      v302 = (WTF *)*((unsigned int *)this + 64);
      v303 = *(_QWORD *)(*((_QWORD *)v301 + 33) + 24);
      v304 = *((_QWORD *)v301 + 35);
      v310 = WTF::fastMalloc((WTF *)0x30);
      v311 = v603[1];
      *(_DWORD *)(v310 + 8) = -1;
      *(_WORD *)(v310 + 12) = 10;
      *(_DWORD *)(v310 + 16) = v311;
      *(_BYTE *)(v310 + 20) = 0;
      *(_QWORD *)(v310 + 24) = v303;
      *(_QWORD *)(v310 + 32) = 0;
      *(_QWORD *)v310 = off_1E357F0F8;
      *(_QWORD *)(v310 + 40) = v603;
      v312 = *(unsigned int *)(v304 + 92);
      if ((_DWORD)v312)
      {
        v313 = *(_QWORD *)(*(_QWORD *)(v304 + 80) + 8 * v312 - 8);
        *(_DWORD *)(v304 + 92) = v312 - 1;
        v314 = *(_QWORD *)(v304 + 64);
      }
      else
      {
        v313 = *(unsigned int *)(v304 + 76);
        if ((_DWORD)v313 == *(_DWORD *)(v304 + 72))
        {
          v508 = v313 + (v313 >> 2);
          if (v508 >= 0x10)
            v509 = v508 + 1;
          else
            v509 = 16;
          if (v509 <= v313 + 1)
            v510 = v313 + 1;
          else
            v510 = v509;
          if (v510 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x197F98C30);
          }
          v511 = *(const void **)(v304 + 64);
          v512 = (void *)WTF::fastMalloc((WTF *)(8 * v510));
          *(_DWORD *)(v304 + 72) = v510;
          *(_QWORD *)(v304 + 64) = v512;
          memcpy(v512, v511, 8 * v313);
          if (v511)
          {
            if (*(const void **)(v304 + 64) == v511)
            {
              *(_QWORD *)(v304 + 64) = 0;
              *(_DWORD *)(v304 + 72) = 0;
            }
            WTF::fastFree((unint64_t)v511, v513, v514, v305, v306, v307, v308, v309);
          }
          v515 = *(unsigned int *)(v304 + 76);
          v314 = *(_QWORD *)(v304 + 64);
          *(_QWORD *)(v314 + 8 * v515) = 0;
          *(_DWORD *)(v304 + 76) = v515 + 1;
        }
        else
        {
          v314 = *(_QWORD *)(v304 + 64);
          *(_QWORD *)(v314 + 8 * v313) = 0;
          *(_DWORD *)(v304 + 76) = v313 + 1;
        }
      }
      *(_DWORD *)(v310 + 8) = v313;
      *(_QWORD *)(v314 + 8 * v313) = v310;
      v618[0] = v302;
      v618[1] = (WTF *)v310;
      v315 = (uint64_t *)((char *)v604 + 288);
      v316 = *((unsigned int *)v604 + 75);
      if ((_DWORD)v316 == *((_DWORD *)v604 + 74))
      {
        v519 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v315, (void *)(v316 + 1), (unint64_t)v618, v305, v306, v307, v308, v309);
        v316 = *((unsigned int *)v604 + 75);
        v317 = *((_QWORD *)v604 + 36);
        v318 = *v519;
      }
      else
      {
        v317 = *v315;
        v318 = *(_OWORD *)v618;
      }
      *(_OWORD *)(v317 + 16 * v316) = v318;
      ++*((_DWORD *)v604 + 75);
      v319 = *((_QWORD *)v604 + 33);
      v320 = *(_DWORD *)(v319 + 16);
      if (v320 != *(_DWORD *)(v310 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x197F98608);
      }
      v321 = *(_QWORD *)(v319 + 32);
      v322 = *(_DWORD *)(v319 + 8);
      (**(void (***)(uint64_t))v319)(v319);
      *(_QWORD *)v319 = off_1E357F5F0;
      if (v320)
      {
        *(_QWORD *)(v319 + 40) = v310;
        v323 = 1;
      }
      else
      {
        v323 = 0;
      }
      *(_WORD *)(v319 + 12) = v323;
      *(_DWORD *)(v319 + 16) = v320;
      *(_BYTE *)(v319 + 20) = v323;
      *(_DWORD *)(v319 + 8) = v322;
      *(_QWORD *)(v319 + 32) = v321;
      v80 = v610;
      if (HIDWORD(v611))
      {
        v324 = v604;
        v325 = 8 * HIDWORD(v611);
        do
        {
          v326 = *(unsigned __int8 **)v80;
          v617 = *(unsigned __int8 **)v80;
          v614 = 0;
          v615 = 0;
          WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v618, (uint64_t *)v604 + 34, (uint64_t *)&v617, (uint64_t)&v614, v76, v77, v78, v79);
          v334 = v618[0];
          if (v614)
            WTF::fastFree((unint64_t)v614, v327, v328, v329, v330, v331, v332, v333);
          if (v335)
          {
            v326 = (unsigned __int8 *)v335;
          }
          else if (v326[12] - 68 <= 2)
          {
            v326 = *(unsigned __int8 **)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v326, 0);
          }
          v618[0] = 0;
          v336 = *(_QWORD *)v324;
          v337 = *(_QWORD *)(*((_QWORD *)v324 + 33) + 24);
          v338 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)(v338 + 8) = -1;
          *(_WORD *)(v338 + 12) = 9;
          *(_DWORD *)(v338 + 16) = 0;
          *(_BYTE *)(v338 + 20) = 1;
          *(_QWORD *)(v338 + 24) = v337;
          *(_QWORD *)(v338 + 32) = 0;
          *(_QWORD *)v338 = off_1E357F0F8;
          *(_QWORD *)(v338 + 40) = v603;
          *(_QWORD *)(v338 + 48) = v326;
          v339 = *(unsigned int *)(v336 + 92);
          if ((_DWORD)v339)
          {
            v340 = *(_QWORD *)(*(_QWORD *)(v336 + 80) + 8 * v339 - 8);
            *(_DWORD *)(v336 + 92) = v339 - 1;
            v341 = *(_QWORD *)(v336 + 64);
          }
          else
          {
            v340 = *(unsigned int *)(v336 + 76);
            if ((_DWORD)v340 == *(_DWORD *)(v336 + 72))
            {
              v477 = v340 + (v340 >> 2);
              if (v477 >= 0x10)
                v478 = v477 + 1;
              else
                v478 = 16;
              if (v478 <= v340 + 1)
                v479 = v340 + 1;
              else
                v479 = v478;
              if (v479 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x197F98C1CLL);
              }
              __src = *(void **)(v336 + 64);
              v480 = (void *)WTF::fastMalloc((WTF *)(8 * v479));
              *(_DWORD *)(v336 + 72) = v479;
              *(_QWORD *)(v336 + 64) = v480;
              memcpy(v480, __src, 8 * v340);
              if (__src)
              {
                if (*(void **)(v336 + 64) == __src)
                {
                  *(_QWORD *)(v336 + 64) = 0;
                  *(_DWORD *)(v336 + 72) = 0;
                }
                WTF::fastFree((unint64_t)__src, v73, v74, v75, v76, v77, v78, v79);
              }
              v481 = *(unsigned int *)(v336 + 76);
              v341 = *(_QWORD *)(v336 + 64);
              *(_QWORD *)(v341 + 8 * v481) = 0;
              *(_DWORD *)(v336 + 76) = v481 + 1;
            }
            else
            {
              v341 = *(_QWORD *)(v336 + 64);
              *(_QWORD *)(v341 + 8 * v340) = 0;
              *(_DWORD *)(v336 + 76) = v340 + 1;
            }
          }
          *(_DWORD *)(v338 + 8) = v340;
          *(_QWORD *)(v341 + 8 * v340) = v338;
          v618[0] = (WTF *)v338;
          v342 = *((unsigned int *)v334 + 5);
          if ((_DWORD)v342 == *((_DWORD *)v334 + 4))
          {
            v343 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v334 + 1, v342 + 1, (unint64_t)v618);
            v342 = *((unsigned int *)v334 + 5);
            *(_QWORD *)(*((_QWORD *)v334 + 1) + 8 * v342) = *(_QWORD *)v343;
          }
          else
          {
            *(_QWORD *)(*((_QWORD *)v334 + 1) + 8 * v342) = v338;
          }
          v324 = v604;
          *((_DWORD *)v334 + 5) = v342 + 1;
          v80 = (WTF *)((char *)v80 + 8);
          v325 -= 8;
        }
        while (v325);
        goto LABEL_94;
      }
LABEL_95:
      if (&v612 != (uint64_t *)v80 && v80)
      {
        v610 = 0;
        LODWORD(v611) = 0;
        v81 = (unint64_t)v80;
        goto LABEL_98;
      }
      return;
    case 'D':
      v374 = *((_QWORD *)this + 33);
      v375 = *(_WORD *)(v374 + 12);
      if ((v375 & 0x200) != 0)
        goto LABEL_206;
      v614 = (WTF *)v10;
      if ((((_BYTE)v375 - 63) & 0xF0) != 0)
        v374 = 0;
      if (*(_DWORD *)(v374 + 52) != *(_DWORD *)(v374 + 56))
        goto LABEL_206;
      v376 = *((_DWORD *)this + 64);
      if ((_DWORD)v10 == HIDWORD(v10))
      {
        v377 = (v376 + 1);
        v378 = *((_QWORD *)this + 31);
        if (*(_DWORD *)(v378 + 20) > v377)
        {
          do
          {
            v379 = *(_QWORD *)(*(_QWORD *)(v378 + 8) + 8 * v377);
            if (v379)
              v380 = *(unsigned __int8 *)(v379 + 12) - 79 >= 0xFFFFFFF0;
            else
              v380 = 0;
            if (v380
              && *(_QWORD *)JSC::B3::MemoryValue::lastChild((JSC::B3::MemoryValue *)v379) == v602
              && *(_BYTE *)(v379 + 12) == 68
              && *(_DWORD *)(v379 + 40) == v609)
            {
              goto LABEL_595;
            }
            JSC::B3::Value::effects(v379, (uint64_t)v618);
            ++v377;
            v378 = *((_QWORD *)this + 31);
          }
          while (v377 < *(unsigned int *)(v378 + 20));
        }
      }
      else
      {
        v400 = v376 + 1;
        while (1)
        {
          v378 = *((_QWORD *)this + 31);
          if (*(_DWORD *)(v378 + 20) <= v400)
            break;
          v401 = *(_QWORD *)(*(_QWORD *)(v378 + 8) + 8 * v400);
          if (v401)
            v402 = *(unsigned __int8 *)(v401 + 12) - 79 >= 0xFFFFFFF0;
          else
            v402 = 0;
          if (v402
            && *(_QWORD *)JSC::B3::MemoryValue::lastChild((JSC::B3::MemoryValue *)v401) == v9
            && *(_BYTE *)(v401 + 12) == 68
            && *(_DWORD *)(v401 + 40) == v609)
          {
            goto LABEL_595;
          }
          JSC::B3::Value::effects(v401, (uint64_t)v618);
          if ((_DWORD)v619 == HIDWORD(v619) || v619 >= HIDWORD(v10) || HIDWORD(v619) <= v10)
          {
            v405 = LODWORD(v618[1]) < HIDWORD(v10) && HIDWORD(v618[1]) > v10;
            v406 = v405;
            ++v400;
            if (LODWORD(v618[1]) == HIDWORD(v618[1]) || !v406)
              continue;
          }
          goto LABEL_206;
        }
      }
      if (!*(_DWORD *)(v378 + 68))
        goto LABEL_206;
      v618[0] = (WTF *)0x8000000000000000;
      v618[1] = (WTF *)v620;
      v619 = 16;
      v610 = (WTF *)(v378 + 56);
      WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<JSC::B3::SuccessorCollection<JSC::B3::BasicBlock,WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::BitVector *)v618, (uint64_t)&v610);
      v408 = HIDWORD(v619);
      if (!HIDWORD(v619))
      {
LABEL_585:
        v421 = 1;
        goto LABEL_587;
      }
      v409 = (~(v602 << 32) + v602) ^ ((unint64_t)(~(v602 << 32) + v602) >> 22);
      v410 = 9 * ((v409 + ~(v409 << 13)) ^ ((v409 + ~(v409 << 13)) >> 8));
      v411 = (v410 ^ (v410 >> 15)) + ~((v410 ^ (v410 >> 15)) << 27);
      v412 = (v411 >> 31) ^ v411;
      while (1)
      {
        v413 = (unsigned int *)*((_QWORD *)v618[1] + --v408);
        HIDWORD(v619) = v408;
        if (!v413)
          goto LABEL_585;
        v414 = *((_QWORD *)v604 + 3);
        v415 = v414 + 208 * *v413;
        v416 = *(_QWORD *)(v415 + 184);
        if (!v416)
          goto LABEL_580;
        v417 = *(_DWORD *)(v416 - 8);
        v418 = v417 & v412;
        v419 = *(_QWORD *)(v416 + 32 * v418);
        if (v419 != v602)
        {
          v420 = 1;
          while (v419)
          {
            v418 = ((_DWORD)v418 + v420) & v417;
            v419 = *(_QWORD *)(v416 + 32 * v418);
            ++v420;
            if (v419 == v602)
              goto LABEL_579;
          }
          v418 = *(unsigned int *)(v416 - 4);
        }
LABEL_579:
        if (v418 == *(_DWORD *)(v416 - 4))
          goto LABEL_580;
        v521 = v416 + 32 * v418;
        v522 = *(unsigned int *)(v521 + 20);
        if (!(_DWORD)v522)
          goto LABEL_580;
        v523 = *(uint64_t **)(v521 + 8);
        v524 = 8 * v522;
        while (1)
        {
          v525 = *v523;
          if (*v523)
          {
            if (*(_BYTE *)(v525 + 12) == 68 && *(_DWORD *)(v525 + 40) == v609)
              break;
          }
          ++v523;
          v524 -= 8;
          if (!v524)
            goto LABEL_580;
        }
        if (v525 == *((_QWORD *)v604 + 33))
        {
LABEL_580:
          if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps(v414 + 208 * *v413 + 88, &v614)
            || WTF::RangeSet<WTF::Range<unsigned int>>::overlaps(v415, &v614)
            || !v413[17])
          {
            v421 = 0;
LABEL_587:
            v422 = v618[1];
            v423 = v620 == (_QWORD *)v618[1] || v618[1] == 0;
            this = v604;
            if (!v423)
            {
              v618[1] = 0;
              LODWORD(v619) = 0;
              WTF::fastFree((unint64_t)v422, v407, v11, v4, v5, v6, v7, v8);
            }
            if (((unint64_t)v618[0] & 0x8000000000000000) == 0)
              WTF::fastFree(2 * (uint64_t)v618[0], v407, v11, v4, v5, v6, v7, v8);
            if (v421)
            {
LABEL_595:
              JSC::B3::Value::replaceWithNop(*((JSC::B3::Value **)this + 33));
              goto LABEL_383;
            }
LABEL_206:
            if (*(unsigned __int8 *)(*((_QWORD *)this + 33) + 12) - 63 >= 0x10)
              v141 = 0;
            else
              v141 = (JSC::B3::MemoryValue *)*((_QWORD *)this + 33);
            return;
          }
          v610 = (WTF *)(v413 + 14);
          WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<JSC::B3::SuccessorCollection<JSC::B3::BasicBlock,WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::BitVector *)v618, (uint64_t)&v610);
          v408 = HIDWORD(v619);
        }
        if (!v408)
          goto LABEL_585;
      }
    case 'E':
      v391 = *((_QWORD *)this + 33);
      v392 = *(_WORD *)(v391 + 12);
      if ((v392 & 0x200) != 0)
        goto LABEL_206;
      v614 = (WTF *)v10;
      if ((((_BYTE)v392 - 63) & 0xF0) != 0)
        v391 = 0;
      if (*(_DWORD *)(v391 + 52) != *(_DWORD *)(v391 + 56))
        goto LABEL_206;
      v393 = *((_DWORD *)this + 64);
      if ((_DWORD)v10 == HIDWORD(v10))
      {
        v394 = (v393 + 1);
        v395 = *((_QWORD *)this + 31);
        if (*(_DWORD *)(v395 + 20) > v394)
        {
          do
          {
            v396 = *(_QWORD *)(*(_QWORD *)(v395 + 8) + 8 * v394);
            if (v396)
              v397 = *(unsigned __int8 *)(v396 + 12) - 79 >= 0xFFFFFFF0;
            else
              v397 = 0;
            if (v397
              && *(_QWORD *)JSC::B3::MemoryValue::lastChild((JSC::B3::MemoryValue *)v396) == v602
              && *(_BYTE *)(v396 + 12) == 69
              && *(_DWORD *)(v396 + 40) == v609)
            {
              goto LABEL_703;
            }
            JSC::B3::Value::effects(v396, (uint64_t)v618);
            ++v394;
            v395 = *((_QWORD *)this + 31);
          }
          while (v394 < *(unsigned int *)(v395 + 20));
        }
      }
      else
      {
        v441 = v393 + 1;
        while (1)
        {
          v395 = *((_QWORD *)this + 31);
          if (*(_DWORD *)(v395 + 20) <= v441)
            break;
          v442 = *(_QWORD *)(*(_QWORD *)(v395 + 8) + 8 * v441);
          if (v442)
            v443 = *(unsigned __int8 *)(v442 + 12) - 79 >= 0xFFFFFFF0;
          else
            v443 = 0;
          if (v443
            && *(_QWORD *)JSC::B3::MemoryValue::lastChild((JSC::B3::MemoryValue *)v442) == v9
            && *(_BYTE *)(v442 + 12) == 69
            && *(_DWORD *)(v442 + 40) == v609)
          {
            goto LABEL_703;
          }
          JSC::B3::Value::effects(v442, (uint64_t)v618);
          if ((_DWORD)v619 == HIDWORD(v619) || v619 >= HIDWORD(v10) || HIDWORD(v619) <= v10)
          {
            v446 = LODWORD(v618[1]) < HIDWORD(v10) && HIDWORD(v618[1]) > v10;
            v447 = v446;
            ++v441;
            if (LODWORD(v618[1]) == HIDWORD(v618[1]) || !v447)
              continue;
          }
          goto LABEL_206;
        }
      }
      if (!*(_DWORD *)(v395 + 68))
        goto LABEL_206;
      v618[0] = (WTF *)0x8000000000000000;
      v618[1] = (WTF *)v620;
      v619 = 16;
      v610 = (WTF *)(v395 + 56);
      WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<JSC::B3::SuccessorCollection<JSC::B3::BasicBlock,WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::BitVector *)v618, (uint64_t)&v610);
      v449 = HIDWORD(v619);
      if (!HIDWORD(v619))
      {
LABEL_741:
        v484 = 1;
        goto LABEL_695;
      }
      v450 = (~(v602 << 32) + v602) ^ ((unint64_t)(~(v602 << 32) + v602) >> 22);
      v451 = 9 * ((v450 + ~(v450 << 13)) ^ ((v450 + ~(v450 << 13)) >> 8));
      v452 = (v451 ^ (v451 >> 15)) + ~((v451 ^ (v451 >> 15)) << 27);
      v453 = (v452 >> 31) ^ v452;
      while (1)
      {
        v454 = (unsigned int *)*((_QWORD *)v618[1] + --v449);
        HIDWORD(v619) = v449;
        if (!v454)
          goto LABEL_741;
        v455 = *((_QWORD *)v604 + 3);
        v456 = v455 + 208 * *v454;
        v457 = *(_QWORD *)(v456 + 184);
        if (!v457)
          goto LABEL_644;
        v458 = *(_DWORD *)(v457 - 8);
        v459 = v458 & v453;
        v460 = *(_QWORD *)(v457 + 32 * v459);
        if (v460 != v602)
        {
          v461 = 1;
          while (v460)
          {
            v459 = ((_DWORD)v459 + v461) & v458;
            v460 = *(_QWORD *)(v457 + 32 * v459);
            ++v461;
            if (v460 == v602)
              goto LABEL_643;
          }
          v459 = *(unsigned int *)(v457 - 4);
        }
LABEL_643:
        if (v459 == *(_DWORD *)(v457 - 4))
          goto LABEL_644;
        v462 = v457 + 32 * v459;
        v463 = *(unsigned int *)(v462 + 20);
        if (!(_DWORD)v463)
          goto LABEL_644;
        v464 = *(uint64_t **)(v462 + 8);
        v465 = 8 * v463;
        while (1)
        {
          v466 = *v464;
          if (*v464)
          {
            if (*(_BYTE *)(v466 + 12) == 69 && *(_DWORD *)(v466 + 40) == v609)
              break;
          }
          ++v464;
          v465 -= 8;
          if (!v465)
            goto LABEL_644;
        }
        if (v466 == *((_QWORD *)v604 + 33))
        {
LABEL_644:
          if (WTF::RangeSet<WTF::Range<unsigned int>>::overlaps(v455 + 208 * *v454 + 88, &v614)
            || WTF::RangeSet<WTF::Range<unsigned int>>::overlaps(v456, &v614)
            || !v454[17])
          {
            v484 = 0;
LABEL_695:
            this = v604;
            v485 = v618[1];
            if (v620 != (_QWORD *)v618[1] && v618[1] != 0)
            {
              v618[1] = 0;
              LODWORD(v619) = 0;
              WTF::fastFree((unint64_t)v485, v448, v11, v4, v5, v6, v7, v8);
            }
            if (((unint64_t)v618[0] & 0x8000000000000000) == 0)
              WTF::fastFree(2 * (uint64_t)v618[0], v448, v11, v4, v5, v6, v7, v8);
            if (!v484)
              goto LABEL_206;
LABEL_703:
            v252 = *((_QWORD *)this + 33);
            if (*(_DWORD *)(v252 + 16))
            {
              __break(0xC471u);
              JUMPOUT(0x197F97F6CLL);
            }
            goto LABEL_382;
          }
          v610 = (WTF *)(v454 + 14);
          WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<JSC::B3::SuccessorCollection<JSC::B3::BasicBlock,WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::BitVector *)v618, (uint64_t)&v610);
          v449 = HIDWORD(v619);
        }
        if (!v449)
          goto LABEL_741;
      }
    case 'F':
      v82 = *(_DWORD *)(JSC::B3::MemoryValue::child(a2, 0) + 16);
      if (v82 >= 0x80000000)
        v82 = 0x80000000;
      if (v82 >= 6)
        v83 = 0;
      else
        v83 = 0x40302030200uLL >> (8 * v82);
      v84 = *((_QWORD *)this + 33);
      v85 = *(_WORD *)(v84 + 12);
      if ((v85 & 0x200) != 0)
        goto LABEL_206;
      if ((((_BYTE)v85 - 63) & 0xF0) != 0)
        v84 = 0;
      if (*(_DWORD *)(v84 + 52) != *(_DWORD *)(v84 + 56))
        goto LABEL_206;
      v86 = *((_DWORD *)this + 64) + 1;
      while (1)
      {
        v87 = *((_QWORD *)this + 31);
        if (*(_DWORD *)(v87 + 20) <= v86)
          break;
        v88 = *(_QWORD *)(*(_QWORD *)(v87 + 8) + 8 * v86);
        if (v88)
          v89 = *(unsigned __int8 *)(v88 + 12) - 79 >= 0xFFFFFFF0;
        else
          v89 = 0;
        if (v89
          && *(_QWORD *)JSC::B3::MemoryValue::lastChild((JSC::B3::MemoryValue *)v88) == v9
          && *(_BYTE *)(v88 + 12) == 70
          && *(_DWORD *)(v88 + 40) == v609)
        {
          v249 = *(_DWORD *)(JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v88, 0) + 16);
          if (v249 >= 0x80000000)
            v250 = 0x80000000;
          else
            v250 = v249;
          if (v250 != 2)
          {
            v251 = 0;
            switch(v250)
            {
              case 1u:
              case 3u:
                v251 = 2;
                goto LABEL_380;
              case 4u:
                break;
              case 5u:
                goto LABEL_381;
              default:
                goto LABEL_380;
            }
          }
          v251 = 3;
LABEL_380:
          if (v251 >= v83)
            goto LABEL_381;
        }
        JSC::B3::Value::effects(v88, (uint64_t)v618);
        if ((_DWORD)v10 == HIDWORD(v10)
          || (_DWORD)v619 == HIDWORD(v619)
          || v619 >= HIDWORD(v10)
          || HIDWORD(v619) <= v10)
        {
          v90 = LODWORD(v618[1]) < HIDWORD(v10) && HIDWORD(v618[1]) > v10;
          v91 = v90;
          ++v86;
          if ((_DWORD)v10 == HIDWORD(v10) || LODWORD(v618[1]) == HIDWORD(v618[1]) || !v91)
            continue;
        }
        goto LABEL_206;
      }
      if (!*(_DWORD *)(v87 + 68))
        goto LABEL_206;
      v618[0] = (WTF *)0x8000000000000000;
      v618[1] = (WTF *)v620;
      v619 = 16;
      v614 = (WTF *)(v87 + 56);
      WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<JSC::B3::SuccessorCollection<JSC::B3::BasicBlock,WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((WTF::BitVector *)v618, (uint64_t)&v614);
      v93 = HIDWORD(v619);
      v94 = 1;
      if (HIDWORD(v619))
      {
        v600 = v83;
        v95 = &v618[1];
        v96 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
        v97 = 9 * ((v96 + ~(v96 << 13)) ^ ((v96 + ~(v96 << 13)) >> 8));
        v98 = (v97 ^ (v97 >> 15)) + ~((v97 ^ (v97 >> 15)) << 27);
        v99 = (v98 >> 31) ^ v98;
        v11 = 126;
        do
        {
          v100 = (unsigned int *)*((_QWORD *)v618[1] + v93 - 1);
          HIDWORD(v619) = v93 - 1;
          if (!v100)
            break;
          v101 = *((_QWORD *)v604 + 3);
          v102 = *v100;
          v103 = v101 + 208 * *v100;
          v104 = *(_QWORD *)(v103 + 184);
          if (!v104)
            goto LABEL_144;
          v105 = *(_DWORD *)(v104 - 8);
          v106 = v105 & v99;
          v107 = *(_QWORD *)(v104 + 32 * v106);
          if (v107 != v602)
          {
            v108 = 1;
            while (v107)
            {
              v106 = ((_DWORD)v106 + v108) & v105;
              v107 = *(_QWORD *)(v104 + 32 * v106);
              ++v108;
              if (v107 == v602)
                goto LABEL_143;
            }
            v106 = *(unsigned int *)(v104 - 4);
          }
LABEL_143:
          if (v106 == *(_DWORD *)(v104 - 4))
            goto LABEL_144;
          v264 = v104 + 32 * v106;
          v265 = *(unsigned int *)(v264 + 20);
          if (!(_DWORD)v265)
            goto LABEL_144;
          v266 = *(uint64_t **)(v264 + 8);
          v267 = 8 * v265;
          while (1)
          {
            v268 = *v266;
            if (*v266 && *(_BYTE *)(v268 + 12) == 70 && *(_DWORD *)(v268 + 40) == v609)
            {
              v599 = v95;
              v593 = *v266;
              v596 = v99;
              v504 = JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v268, 0);
              v11 = 126;
              v99 = v596;
              v505 = v593;
              v95 = v599;
              if (*(_DWORD *)(v504 + 16) >= 0x80000000)
                v506 = 0x80000000;
              else
                v506 = *(_DWORD *)(v504 + 16);
              if (v506 != 2)
              {
                v507 = 0;
                v95 = v599;
                v99 = v596;
                v11 = 126;
                v505 = v593;
                switch(v506)
                {
                  case 1u:
                  case 3u:
                    v507 = 2;
                    goto LABEL_721;
                  case 2u:
                    goto LABEL_721;
                  case 4u:
                    break;
                  case 5u:
                    goto LABEL_722;
                  default:
                    v95 = v599;
                    v99 = v596;
                    v11 = 126;
                    v505 = v593;
                    goto LABEL_721;
                }
              }
              v507 = 3;
LABEL_721:
              if (v507 >= v600)
                break;
            }
            ++v266;
            v267 -= 8;
            if (!v267)
              goto LABEL_144;
          }
LABEL_722:
          if (v505 == *((_QWORD *)v604 + 33))
          {
LABEL_144:
            if ((_DWORD)v10 != HIDWORD(v10))
            {
              v109 = v101 + 208 * v102 + 88;
              v110 = v101 + 208 * v102;
              v112 = *(unsigned __int8 *)(v110 + 168);
              v111 = (_BYTE *)(v110 + 168);
              v113 = *(unsigned int *)(v109 + 12);
              if (!v112)
              {
                v133 = v99;
                v134 = v95;
                if (*(_DWORD *)(v109 + 12))
                {
                  std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,false>(*(int8x16_t **)v109, (int8x16_t *)(*(_QWORD *)v109 + 8 * v113), (uint64_t)&v614, 126 - 2 * __clz(v113), 1);
                  v135 = *(unsigned int *)(v109 + 12);
                  if ((_DWORD)v135 == 1)
                  {
                    v113 = *(unsigned int *)(v109 + 12);
                    v95 = v134;
                    v99 = v133;
                    v11 = 126;
                  }
                  else
                  {
                    if (!*(_DWORD *)(v109 + 12))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197F98BCCLL);
                    }
                    v234 = *(int8x16_t **)v109;
                    v235 = 1;
                    v113 = 1;
                    v95 = v134;
                    v99 = v133;
                    v11 = 126;
                    do
                    {
                      v236 = *(_QWORD *)(*(_QWORD *)v109 + 8 * v235);
                      v237 = v234->u32[1];
                      if (v237 < HIDWORD(v236))
                      {
                        if (v237 >= v236)
                        {
                          v238 = HIDWORD(v236);
                          v239 = v234->u32[0];
                          if (v239 == v238)
                          {
                            v238 = 0;
                            v239 = 0;
                          }
                          v234->i64[0] = v239 | (v238 << 32);
                        }
                        else
                        {
                          if (v135 <= v113)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x197F98BD4);
                          }
                          v234 = (int8x16_t *)(*(_QWORD *)v109 + 8 * v113++);
                          v234->i64[0] = v236;
                        }
                      }
                      ++v235;
                      v135 = *(unsigned int *)(v109 + 12);
                    }
                    while (v235 < v135);
                  }
                  *(_DWORD *)(v109 + 12) = v113;
                }
                *v111 = 1;
              }
              if (v113)
              {
                v127 = (_DWORD *)(*(_QWORD *)v109 + 4);
                v128 = 0xFFFFFFFFLL;
                while (*(v127 - 1) >= HIDWORD(v10) || *v127 <= v10)
                {
                  v127 += 2;
                  --v128;
                  if (!--v113)
                    goto LABEL_147;
                }
                if (v128)
                {
LABEL_196:
                  v94 = 0;
                  goto LABEL_197;
                }
              }
LABEL_147:
              v114 = *(unsigned int *)(v103 + 12);
              if (!*(_BYTE *)(v103 + 80))
              {
                v136 = v99;
                v137 = v95;
                if (*(_DWORD *)(v103 + 12))
                {
                  std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,false>(*(int8x16_t **)v103, (int8x16_t *)(*(_QWORD *)v103 + 8 * v114), (uint64_t)&v614, 126 - 2 * __clz(v114), 1);
                  v138 = *(unsigned int *)(v103 + 12);
                  if ((_DWORD)v138 == 1)
                  {
                    v114 = *(unsigned int *)(v103 + 12);
                    v95 = v137;
                    v99 = v136;
                    v11 = 126;
                  }
                  else
                  {
                    if (!*(_DWORD *)(v103 + 12))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197F98BDCLL);
                    }
                    v240 = *(int8x16_t **)v103;
                    v241 = 1;
                    v114 = 1;
                    v95 = v137;
                    v99 = v136;
                    v11 = 126;
                    do
                    {
                      v242 = *(_QWORD *)(*(_QWORD *)v103 + 8 * v241);
                      v243 = v240->u32[1];
                      if (v243 < HIDWORD(v242))
                      {
                        if (v243 >= v242)
                        {
                          v244 = HIDWORD(v242);
                          v245 = v240->u32[0];
                          if (v245 == v244)
                          {
                            v244 = 0;
                            v245 = 0;
                          }
                          v240->i64[0] = v245 | (v244 << 32);
                        }
                        else
                        {
                          if (v138 <= v114)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x197F98BE4);
                          }
                          v240 = (int8x16_t *)(*(_QWORD *)v103 + 8 * v114++);
                          v240->i64[0] = v242;
                        }
                      }
                      ++v241;
                      v138 = *(unsigned int *)(v103 + 12);
                    }
                    while (v241 < v138);
                  }
                  *(_DWORD *)(v103 + 12) = v114;
                }
                *(_BYTE *)(v103 + 80) = 1;
              }
              if (v114)
              {
                v130 = (_DWORD *)(*(_QWORD *)v103 + 4);
                v131 = 0xFFFFFFFFLL;
                while (*(v130 - 1) >= HIDWORD(v10) || *v130 <= v10)
                {
                  v130 += 2;
                  --v131;
                  if (!--v114)
                    goto LABEL_149;
                }
                if (v131)
                  goto LABEL_196;
              }
            }
LABEL_149:
            v115 = v100[17];
            if (!(_DWORD)v115)
              goto LABEL_196;
            v116 = 0;
            v117 = 0;
            v118 = 16 * v115;
            do
            {
              if (v117 >= v100[17])
              {
                __break(0xC471u);
                JUMPOUT(0x197F98BC4);
              }
              v119 = *(WTF **)(*((_QWORD *)v100 + 7) + v116);
              v614 = v119;
              v120 = (uint64_t)v618[0];
              if (((unint64_t)v618[0] & 0x8000000000000000) != 0)
                v121 = 63;
              else
                v121 = *(_QWORD *)(2 * (uint64_t)v618[0]);
              v122 = *(unsigned int *)v119;
              if (v121 <= v122)
              {
                v597 = v95;
                v594 = v99;
                WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v618, v122 + 1, 0);
                v11 = 126;
                v99 = v594;
                v95 = v597;
                v120 = (uint64_t)v618[0];
              }
              if (v120 >= 0)
                v123 = (WTF **)(2 * v120 + 8);
              else
                v123 = v618;
              v124 = (v122 >> 3) & 0x1FFFFFF8;
              v125 = *(uint64_t *)((char *)v123 + v124);
              *(WTF **)((char *)v123 + v124) = (WTF *)(v125 | (1 << v122));
              if ((v125 & (1 << v122)) == 0)
              {
                v126 = HIDWORD(v619);
                if (HIDWORD(v619) == (_DWORD)v619)
                {
                  v344 = v95;
                  v345 = v99;
                  v346 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v95, HIDWORD(v619) + 1, (unint64_t)&v614);
                  v11 = 126;
                  v99 = v345;
                  v126 = HIDWORD(v619);
                  v95 = v344;
                  *((_QWORD *)v618[1] + HIDWORD(v619)) = *v346;
                }
                else
                {
                  *((_QWORD *)v618[1] + HIDWORD(v619)) = v119;
                }
                HIDWORD(v619) = v126 + 1;
              }
              ++v117;
              v116 += 16;
            }
            while (v118 != v116);
          }
          v93 = HIDWORD(v619);
        }
        while (HIDWORD(v619));
        v94 = 1;
LABEL_197:
        this = v604;
      }
      v139 = v618[1];
      if (v620 != (_QWORD *)v618[1] && v618[1] != 0)
      {
        v618[1] = 0;
        LODWORD(v619) = 0;
        WTF::fastFree((unint64_t)v139, v92, v11, v4, v5, v6, v7, v8);
      }
      if (((unint64_t)v618[0] & 0x8000000000000000) == 0)
        WTF::fastFree(2 * (uint64_t)v618[0], v92, v11, v4, v5, v6, v7, v8);
      if (!v94)
        goto LABEL_206;
LABEL_381:
      v252 = *((_QWORD *)this + 33);
      if (*(_DWORD *)(v252 + 16))
      {
        __break(0xC471u);
        JUMPOUT(0x197F985D8);
      }
LABEL_382:
      v253 = *(_QWORD *)(v252 + 32);
      v254 = *(_DWORD *)(v252 + 8);
      (**(void (***)(uint64_t))v252)(v252);
      *(_QWORD *)v252 = off_1E357F5F0;
      *(_WORD *)(v252 + 12) = 0;
      *(_DWORD *)(v252 + 16) = 0;
      *(_BYTE *)(v252 + 20) = 0;
      *(_DWORD *)(v252 + 8) = v254;
      *(_QWORD *)(v252 + 32) = v253;
LABEL_383:
      *((_BYTE *)this + 488) = 1;
      return;
    default:
      return;
  }
}

void WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<WTF::Vector<JSC::B3::BasicBlock *,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::BitVector *this, unsigned int **a2, unsigned int a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  WTF::BitVector *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int *v16;

  if (a3)
  {
    v5 = (_QWORD *)((char *)this + 8);
    v6 = 8 * a3;
    do
    {
      v7 = *a2;
      v16 = *a2;
      v8 = *(_QWORD *)this;
      if ((*(_QWORD *)this & 0x8000000000000000) != 0)
        v9 = 63;
      else
        v9 = *(_QWORD *)(2 * v8);
      v10 = *v7;
      if (v9 <= v10)
      {
        WTF::BitVector::resizeOutOfLine(this, v10 + 1, 0);
        v8 = *(_QWORD *)this;
      }
      if (v8 >= 0)
        v11 = (WTF::BitVector *)(2 * v8 + 8);
      else
        v11 = this;
      v12 = (v10 >> 3) & 0x1FFFFFF8;
      v13 = *(_QWORD *)((char *)v11 + v12);
      *(_QWORD *)((char *)v11 + v12) = v13 | (1 << v10);
      if ((v13 & (1 << v10)) == 0)
      {
        v14 = *((unsigned int *)this + 5);
        if ((_DWORD)v14 == *((_DWORD *)this + 4))
        {
          v15 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, v14 + 1, (unint64_t)&v16);
          v14 = *((unsigned int *)this + 5);
          *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v14) = *v15;
        }
        else
        {
          *(_QWORD *)(*v5 + 8 * v14) = v7;
        }
        *((_DWORD *)this + 5) = v14 + 1;
      }
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
}

JSC::B3::MemoryValue *JSC::B3::`anonymous namespace'::MemoryValueMap::find<JSC::B3::`anonymous namespace'::CSE::processMemoryBeforeClobber(JSC::B3::MemoryValue *)::{lambda(JSC::B3::MemoryValue *)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  JSC::B3::MemoryValue *v11;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::MemoryValue **v15;
  uint64_t i;
  int v17;
  BOOL v18;

  if (!a1)
    return 0;
  v4 = *(_DWORD *)(a1 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(a1 + 32 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(a1 + 32 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(a1 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(a1 - 4))
    return 0;
  v13 = a1 + 32 * v8;
  v14 = *(unsigned int *)(v13 + 20);
  if (!(_DWORD)v14)
    return 0;
  v15 = *(JSC::B3::MemoryValue ***)(v13 + 8);
  for (i = 8 * v14; i; i -= 8)
  {
    v11 = *v15;
    v17 = *((unsigned __int8 *)*v15 + 12);
    v18 = *v15 && (v17 - 79) >= 0xFFFFFFF0;
    if (v18 && *((_DWORD *)v11 + 10) == **(_DWORD **)a3)
    {
      if (v17 == 68)
      {
        if (*(_QWORD *)JSC::B3::MemoryValue::child(*v15, 0) == **(_QWORD **)(a3 + 8))
          return v11;
        v17 = *((unsigned __int8 *)v11 + 12);
      }
      if ((v17 - 63) <= 1 && **(JSC::B3::MemoryValue ***)(a3 + 8) == v11)
        break;
    }
    v11 = 0;
    ++v15;
  }
  return v11;
}

uint64_t WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 1;
  if (a3 >= 2)
  {
    v9 = a2;
    v8 = result;
    if (a3 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v7 = a3;
    v6 = WTF::fastMalloc((WTF *)(8 * a3));
    a3 = v7;
    result = v8;
    *(_DWORD *)(v8 + 8) = v7;
    *(_QWORD *)v8 = v6;
    v3 = *(_DWORD *)(v8 + 12);
    a2 = v9;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  v4 = 8 * a3;
  do
  {
    v5 = *a2++;
    *(_QWORD *)(*(_QWORD *)result + 8 * v3++) = v5;
    v4 -= 8;
  }
  while (v4);
  *(_DWORD *)(result + 12) = v3;
  return result;
}

_QWORD *WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::MemoryValue *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 2)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 1;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::B3::MemoryValue *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 2)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

JSC::B3::MemoryValue *JSC::B3::`anonymous namespace'::MemoryValueMap::find<JSC::B3::`anonymous namespace'::CSE::processMemoryBeforeClobber(JSC::B3::MemoryValue *)::{lambda(JSC::B3::MemoryValue *)#2}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  JSC::B3::MemoryValue *v11;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::MemoryValue **v15;
  uint64_t i;
  int v17;
  BOOL v18;

  if (!a1)
    return 0;
  v4 = *(_DWORD *)(a1 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(a1 + 32 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(a1 + 32 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(a1 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(a1 - 4))
    return 0;
  v13 = a1 + 32 * v8;
  v14 = *(unsigned int *)(v13 + 20);
  if (!(_DWORD)v14)
    return 0;
  v15 = *(JSC::B3::MemoryValue ***)(v13 + 8);
  for (i = 8 * v14; i; i -= 8)
  {
    v11 = *v15;
    v17 = *((unsigned __int8 *)*v15 + 12);
    v18 = *v15 && (v17 - 79) >= 0xFFFFFFF0;
    if (v18 && *((_DWORD *)v11 + 10) == **(_DWORD **)a3)
    {
      if (v17 == 69)
      {
        if (*(_QWORD *)JSC::B3::MemoryValue::child(*v15, 0) == **(_QWORD **)(a3 + 8))
          return v11;
        v17 = *((unsigned __int8 *)v11 + 12);
      }
      if ((v17 - 65) <= 1 && **(JSC::B3::MemoryValue ***)(a3 + 8) == v11)
        break;
    }
    v11 = 0;
    ++v15;
  }
  return v11;
}

JSC::B3::MemoryValue *JSC::B3::`anonymous namespace'::MemoryValueMap::find<JSC::B3::`anonymous namespace'::CSE::processMemoryBeforeClobber(JSC::B3::MemoryValue *)::{lambda(JSC::B3::MemoryValue *)#3}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  JSC::B3::MemoryValue *v11;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::MemoryValue **v15;
  uint64_t i;
  int v17;
  BOOL v18;

  if (!a1)
    return 0;
  v4 = *(_DWORD *)(a1 - 8);
  v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(a1 + 32 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(_QWORD *)(a1 + 32 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_8;
    }
    v8 = *(unsigned int *)(a1 - 4);
  }
LABEL_8:
  if (v8 == *(_DWORD *)(a1 - 4))
    return 0;
  v13 = a1 + 32 * v8;
  v14 = *(unsigned int *)(v13 + 20);
  if (!(_DWORD)v14)
    return 0;
  v15 = *(JSC::B3::MemoryValue ***)(v13 + 8);
  for (i = 8 * v14; i; i -= 8)
  {
    v11 = *v15;
    v17 = *((unsigned __int8 *)*v15 + 12);
    v18 = *v15 && (v17 - 79) >= 0xFFFFFFF0;
    if (v18 && *((_DWORD *)v11 + 10) == **(_DWORD **)a3)
    {
      if (v17 == 70)
      {
        if (*(_QWORD *)JSC::B3::MemoryValue::child(*v15, 0) == **(_QWORD **)(a3 + 8))
          return v11;
        v17 = *((unsigned __int8 *)v11 + 12);
      }
      if (v17 == 67 && **(JSC::B3::MemoryValue ***)(a3 + 8) == v11)
        break;
    }
    v11 = 0;
    ++v15;
  }
  return v11;
}

uint64_t JSC::B3::`anonymous namespace'::MemoryValueMap::find<JSC::B3::`anonymous namespace'::CSE::processMemoryAfterClobber(JSC::B3::MemoryValue *)::{lambda(JSC::B3::MemoryValue *)#1}>(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  BOOL v15;

  if (result)
  {
    v3 = *(_DWORD *)(result - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(result + 32 * v7);
    if (v8 != a2)
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(_QWORD *)(result + 32 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_8;
      }
      v7 = *(unsigned int *)(result - 4);
    }
LABEL_8:
    if (v7 == *(_DWORD *)(result - 4))
      return 0;
    v10 = result + 32 * v7;
    v11 = *(unsigned int *)(v10 + 20);
    if (!(_DWORD)v11)
    {
      return 0;
    }
    else
    {
      v12 = *(uint64_t **)(v10 + 8);
      v13 = 8 * v11;
      do
      {
        result = *v12;
        v14 = *(unsigned __int8 *)(*v12 + 12);
        if (*v12)
          v15 = (v14 - 79) >= 0xFFFFFFF0;
        else
          v15 = 0;
        if (v15 && *(_DWORD *)(result + 40) == a3 && (v14 == 63 || v14 == 68))
          break;
        result = 0;
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return result;
}

JSC::B3::Value *JSC::B3::`anonymous namespace'::CSE::processMemoryAfterClobber(JSC::B3::MemoryValue *)::{lambda(JSC::B3::MemoryValue *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#1}::operator()(uint64_t *a1, JSC::B3::MemoryValue *a2, uint64_t a3)
{
  JSC::B3::Value *v3;
  uint64_t v8;
  uint64_t v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  JSC::B3::Value *v14;
  uint64_t v15;

  if (*((_BYTE *)a2 + 12) != 68)
    return 0;
  v8 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>(*a1, *(_QWORD *)(a1[33] + 24), 255);
  v15 = v8;
  v9 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v9 == *(_DWORD *)(a3 + 8))
  {
    WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>(a3, (unint64_t)&v15);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
    *(_DWORD *)(a3 + 12) = v9 + 1;
  }
  v10 = (JSC::B3::Value *)*a1;
  v11 = *(_QWORD *)(a1[33] + 24);
  v12 = (uint64_t *)JSC::B3::MemoryValue::child(a2, 0);
  v3 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v11, *v12, v15);
  JSC::B3::Procedure::addValueImpl(v10, v3);
  v14 = v3;
  v13 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v13 == *(_DWORD *)(a3 + 8))
  {
    WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>(a3, (unint64_t)&v14);
    return v14;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v13) = v3;
    *(_DWORD *)(a3 + 12) = v13 + 1;
  }
  return v3;
}

void WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  unint64_t v35;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
  v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
  v19 = v14 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
  v20 = (_QWORD *)(v12 + 24 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v34 = 0;
        else
          v34 = *(_DWORD *)(v12 - 4);
        v33 = 0;
        v32 = v12 + 24 * v34;
        goto LABEL_20;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (_QWORD *)(v12 + 24 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v22;
    }
  }
  *v20 = v15;
  v24 = v20[1];
  if (v24)
  {
    v20[1] = 0;
    *((_DWORD *)v20 + 4) = 0;
    WTF::fastFree(v24, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v25 = *(_QWORD *)a4;
  *(_QWORD *)a4 = 0;
  v20[1] = v25;
  LODWORD(v25) = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(a4 + 8) = 0;
  *((_DWORD *)v20 + 4) = v25;
  LODWORD(v25) = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a4 + 12) = 0;
  *((_DWORD *)v20 + 5) = v25;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12) + 1;
  else
    v27 = 1;
  *(_DWORD *)(v26 - 12) = v27;
  v28 = *a2;
  if (*a2)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 > 2 * v30)
      goto LABEL_19;
    goto LABEL_33;
  }
  if (3 * v31 <= 4 * v30)
  {
    if (!(_DWORD)v31)
    {
      v35 = 8;
      goto LABEL_34;
    }
LABEL_33:
    v35 = ((_DWORD)v31 << (6 * *(_DWORD *)(v28 - 12) >= (2 * v31)));
LABEL_34:
    v20 = WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(a2, v35, (uint64_t)v20, a4, a5, a6, a7, a8);
    v28 = *a2;
    if (*a2)
      LODWORD(v31) = *(_DWORD *)(v28 - 4);
    else
      LODWORD(v31) = 0;
  }
LABEL_19:
  v32 = v28 + 24 * v31;
  v33 = 1;
LABEL_20:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v33;
}

uint64_t JSC::B3::Procedure::add<JSC::B3::VariableValue,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Variable *,JSC::B3::Value *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v7 = result;
  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v8)
  {
    v9 = (_BYTE *)(v8 + 8856);
    *(_BYTE *)(v8 + 8856) = 1;
    v10 = *(unsigned int *)(v8 + 8872);
    if ((_DWORD)v10)
    {
      *(_DWORD *)(v8 + 8872) = v10 - *(_DWORD *)(v8 + 8876);
      v11 = *(_QWORD *)(v8 + 8864) - v10;
LABEL_4:
      *v9 = 0;
      goto LABEL_5;
    }
    v15 = *(_QWORD *)(v8 + 8896);
    v16 = *(_QWORD *)(v8 + 8880);
    if (v15)
    {
LABEL_10:
      v17 = __clz(v15);
      *(_QWORD *)(v8 + 8896) = v15 & ~(0x8000000000000000 >> v17);
      v11 = v16 + 16 * v17;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v8 + 8861) == 6)
    {
      v31 = *(_DWORD *)(v8 + 8892);
      v32 = *(unsigned int *)(v8 + 8888);
      if (v32 < v31)
      {
        *(_QWORD *)&v9[8 * v32 + 56] = 0;
        v33 = (unint64_t *)(v8 + 8 * v32 + 8920);
        v34 = v31 - 1 - v32;
        while (v34)
        {
          v16 += 1024;
          v36 = *v33++;
          v35 = v36;
          LODWORD(v32) = v32 + 1;
          --v34;
          if (v36)
          {
            v15 = __rbit64(v35);
            *(_DWORD *)(v8 + 8888) = v32;
            *(_QWORD *)(v8 + 8880) = v16;
            goto LABEL_10;
          }
        }
        *(_DWORD *)(v8 + 8888) = v31;
      }
    }
    *v9 = 0;
  }
  result = bmalloc_allocate_casual(56, 1);
  v11 = result;
LABEL_5:
  *(_DWORD *)(v11 + 8) = -1;
  *(_WORD *)(v11 + 12) = 9;
  *(_DWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 20) = 1;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)v11 = off_1E357F0F8;
  *(_QWORD *)(v11 + 40) = a3;
  *(_QWORD *)(v11 + 48) = a4;
  v12 = *(unsigned int *)(v7 + 92);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 8 * v12 - 8);
    *(_DWORD *)(v7 + 92) = v12 - 1;
    v14 = *(_QWORD *)(v7 + 64);
    goto LABEL_8;
  }
  v13 = *(unsigned int *)(v7 + 76);
  if ((_DWORD)v13 != *(_DWORD *)(v7 + 72))
  {
    v14 = *(_QWORD *)(v7 + 64);
    *(_QWORD *)(v14 + 8 * v13) = 0;
    *(_DWORD *)(v7 + 76) = v13 + 1;
LABEL_8:
    *(_DWORD *)(v11 + 8) = v13;
    *(_QWORD *)(v14 + 8 * v13) = v11;
    return v11;
  }
  v18 = v13 + (v13 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= v13 + 1)
    v20 = v13 + 1;
  else
    v20 = v19;
  if (!(v20 >> 29))
  {
    v21 = *(const void **)(v7 + 64);
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(v7 + 72) = v20;
    *(_QWORD *)(v7 + 64) = v22;
    memcpy(v22, v21, 8 * v13);
    if (v21)
    {
      if (*(const void **)(v7 + 64) == v21)
      {
        *(_QWORD *)(v7 + 64) = 0;
        *(_DWORD *)(v7 + 72) = 0;
      }
      WTF::fastFree((unint64_t)v21, v23, v24, v25, v26, v27, v28, v29);
    }
    v30 = *(unsigned int *)(v7 + 76);
    v14 = *(_QWORD *)(v7 + 64);
    *(_QWORD *)(v14 + 8 * v30) = 0;
    *(_DWORD *)(v7 + 76) = v30 + 1;
    goto LABEL_8;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  _QWORD *v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *result;
  uint64_t *v52;
  uint64_t v53;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    v52 = (uint64_t *)a3;
    v53 = v12;
    do
    {
      v24 = (uint64_t *)(v11 + 24 * v22);
      v25 = *v24;
      if (*v24)
      {
        if (v25 != -1)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
          v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
          v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
          v31 = v27 & ((v30 >> 31) ^ v30);
          v32 = 1;
          do
          {
            v33 = v31;
            v34 = (_QWORD *)(v26 + 24 * v31);
            v31 = (v31 + v32++) & v27;
          }
          while (*v34);
          v35 = v33;
          v36 = v26 + 24 * v33;
          v39 = *(_QWORD *)(v36 + 8);
          v38 = (_QWORD *)(v36 + 8);
          v37 = v39;
          if (v39)
          {
            *v38 = 0;
            *(_DWORD *)(v26 + 24 * v33 + 16) = 0;
            WTF::fastFree(v37, v15, v16, v17, v18, v19, v20, v21);
            v25 = *v24;
          }
          *v34 = v25;
          v40 = v11 + 24 * v22;
          *v38 = 0;
          v38[1] = 0;
          v42 = *(_QWORD *)(v40 + 8);
          v41 = v40 + 8;
          *(_QWORD *)v41 = 0;
          *v38 = v42;
          v43 = *(_DWORD *)(v41 + 8);
          *(_DWORD *)(v41 + 8) = 0;
          v44 = v26 + 24 * v35;
          *(_DWORD *)(v44 + 16) = v43;
          v45 = *(_DWORD *)(v41 + 12);
          *(_DWORD *)(v41 + 12) = 0;
          *(_DWORD *)(v44 + 20) = v45;
          v46 = *(_QWORD *)v41;
          if (*(_QWORD *)v41)
          {
            *(_QWORD *)v41 = 0;
            *(_DWORD *)(v41 + 8) = 0;
            WTF::fastFree(v46, v15, v16, v17, v18, v19, v20, v21);
          }
          if (v24 == v52)
            v23 = v34;
        }
      }
      else
      {
        v47 = v11 + 24 * v22;
        v50 = *(_QWORD *)(v47 + 8);
        v49 = (_QWORD *)(v47 + 8);
        v48 = v50;
        if (v50)
        {
          *v49 = 0;
          *(_DWORD *)(v11 + 24 * v22 + 16) = 0;
          WTF::fastFree(v48, v15, v16, v17, v18, v19, v20, v21);
        }
      }
      ++v22;
    }
    while (v22 != v53);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

char *WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  result = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *(_QWORD *)result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::MemoryValueMap::find<JSC::B3::`anonymous namespace'::CSE::processMemoryAfterClobber(JSC::B3::MemoryValue *)::{lambda(JSC::B3::MemoryValue *)#2}>(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  BOOL v15;

  if (result)
  {
    v3 = *(_DWORD *)(result - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(result + 32 * v7);
    if (v8 != a2)
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(_QWORD *)(result + 32 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_8;
      }
      v7 = *(unsigned int *)(result - 4);
    }
LABEL_8:
    if (v7 == *(_DWORD *)(result - 4))
      return 0;
    v10 = result + 32 * v7;
    v11 = *(unsigned int *)(v10 + 20);
    if (!(_DWORD)v11)
    {
      return 0;
    }
    else
    {
      v12 = *(uint64_t **)(v10 + 8);
      v13 = 8 * v11;
      do
      {
        result = *v12;
        v14 = *(unsigned __int8 *)(*v12 + 12);
        if (*v12)
          v15 = (v14 - 79) >= 0xFFFFFFF0;
        else
          v15 = 0;
        if (v15 && *(_DWORD *)(result + 40) == a3 && (v14 == 64 || v14 == 68))
          break;
        result = 0;
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t *JSC::B3::`anonymous namespace'::CSE::processMemoryAfterClobber(JSC::B3::MemoryValue *)::{lambda(JSC::B3::MemoryValue *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#2}::operator()(uint64_t *a1, JSC::B3::MemoryValue *this, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*((_BYTE *)this + 12) != 68)
    return 0;
  v4 = *a1;
  v5 = *(_QWORD *)(a1[33] + 24);
  v6 = *(_QWORD *)JSC::B3::MemoryValue::child(this, 0);
  v7 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v7 = off_1E357F5F0;
  *(_DWORD *)(v7 + 8) = -1;
  *(_WORD *)(v7 + 12) = 38;
  *(_DWORD *)(v7 + 16) = 1;
  *(_BYTE *)(v7 + 20) = 1;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(v7 + 32) = 0;
  result = JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v7, 1, v6);
  v9 = *(unsigned int *)(v4 + 92);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 80) + 8 * v9 - 8);
    *(_DWORD *)(v4 + 92) = v9 - 1;
    v11 = *(_QWORD *)(v4 + 64);
    goto LABEL_7;
  }
  v10 = *(unsigned int *)(v4 + 76);
  if ((_DWORD)v10 != *(_DWORD *)(v4 + 72))
  {
    v11 = *(_QWORD *)(v4 + 64);
    *(_QWORD *)(v11 + 8 * v10) = 0;
    *(_DWORD *)(v4 + 76) = v10 + 1;
LABEL_7:
    *(_DWORD *)(v7 + 8) = v10;
    *(_QWORD *)(v11 + 8 * v10) = v7;
    v27 = v7;
    v12 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v12 == *(_DWORD *)(a3 + 8))
    {
      v13 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v12 + 1, (unint64_t)&v27);
      v12 = *(unsigned int *)(a3 + 12);
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = *(_QWORD *)v13;
      v7 = v27;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v7;
    }
    *(_DWORD *)(a3 + 12) = v12 + 1;
    return (uint64_t *)v7;
  }
  v14 = v10 + (v10 >> 2);
  if (v14 >= 0x10)
    v15 = v14 + 1;
  else
    v15 = 16;
  if (v15 <= v10 + 1)
    v16 = v10 + 1;
  else
    v16 = v15;
  if (!(v16 >> 29))
  {
    v17 = *(const void **)(v4 + 64);
    v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
    *(_DWORD *)(v4 + 72) = v16;
    *(_QWORD *)(v4 + 64) = v18;
    memcpy(v18, v17, 8 * v10);
    if (v17)
    {
      if (*(const void **)(v4 + 64) == v17)
      {
        *(_QWORD *)(v4 + 64) = 0;
        *(_DWORD *)(v4 + 72) = 0;
      }
      WTF::fastFree((unint64_t)v17, v19, v20, v21, v22, v23, v24, v25);
    }
    v26 = *(unsigned int *)(v4 + 76);
    v11 = *(_QWORD *)(v4 + 64);
    *(_QWORD *)(v11 + 8 * v26) = 0;
    *(_DWORD *)(v4 + 76) = v26 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t *JSC::B3::Procedure::add<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t casual;
  int v10;
  uint64_t *result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v6)
  {
    v7 = (_BYTE *)(v6 + 8672);
    *(_BYTE *)(v6 + 8672) = 1;
    v8 = *(unsigned int *)(v6 + 8688);
    if ((_DWORD)v8)
    {
      *(_DWORD *)(v6 + 8688) = v8 - *(_DWORD *)(v6 + 8692);
      casual = *(_QWORD *)(v6 + 8680) - v8;
LABEL_4:
      *v7 = 0;
      goto LABEL_5;
    }
    v15 = *(_QWORD *)(v6 + 8712);
    v16 = *(_QWORD *)(v6 + 8696);
    if (v15)
    {
LABEL_13:
      v17 = __clz(v15);
      *(_QWORD *)(v6 + 8712) = v15 & ~(0x8000000000000000 >> v17);
      casual = v16 + 16 * v17;
      goto LABEL_4;
    }
    if (*(_BYTE *)(v6 + 8677) == 6)
    {
      v31 = *(_DWORD *)(v6 + 8708);
      v32 = *(unsigned int *)(v6 + 8704);
      if (v32 < v31)
      {
        *(_QWORD *)&v7[8 * v32 + 56] = 0;
        v33 = (unint64_t *)(v6 + 8 * v32 + 8736);
        v34 = v31 - 1 - v32;
        while (v34)
        {
          v16 += 1024;
          v36 = *v33++;
          v35 = v36;
          LODWORD(v32) = v32 + 1;
          --v34;
          if (v36)
          {
            v15 = __rbit64(v35);
            *(_DWORD *)(v6 + 8704) = v32;
            *(_QWORD *)(v6 + 8696) = v16;
            goto LABEL_13;
          }
        }
        *(_DWORD *)(v6 + 8704) = v31;
      }
    }
    *v7 = 0;
  }
  casual = bmalloc_allocate_casual(48, 1);
LABEL_5:
  *(_QWORD *)casual = off_1E357F5F0;
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 44;
  if (*(_DWORD *)(a3 + 16) == 2)
    v10 = 1;
  else
    v10 = 3;
  *(_DWORD *)(casual + 16) = v10;
  *(_BYTE *)(casual + 20) = 1;
  *(_QWORD *)(casual + 24) = a2;
  *(_QWORD *)(casual + 32) = 0;
  result = JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)casual, 1, a3);
  v12 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v12 - 8);
    *(_DWORD *)(a1 + 92) = v12 - 1;
    v14 = *(_QWORD *)(a1 + 64);
    goto LABEL_11;
  }
  v13 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v13 != *(_DWORD *)(a1 + 72))
  {
    v14 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v14 + 8 * v13) = 0;
    *(_DWORD *)(a1 + 76) = v13 + 1;
LABEL_11:
    *(_DWORD *)(casual + 8) = v13;
    *(_QWORD *)(v14 + 8 * v13) = casual;
    return (uint64_t *)casual;
  }
  v18 = v13 + (v13 >> 2);
  if (v18 >= 0x10)
    v19 = v18 + 1;
  else
    v19 = 16;
  if (v19 <= v13 + 1)
    v20 = v13 + 1;
  else
    v20 = v19;
  if (!(v20 >> 29))
  {
    v21 = *(const void **)(a1 + 64);
    v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
    *(_DWORD *)(a1 + 72) = v20;
    *(_QWORD *)(a1 + 64) = v22;
    memcpy(v22, v21, 8 * v13);
    if (v21)
    {
      if (*(const void **)(a1 + 64) == v21)
      {
        *(_QWORD *)(a1 + 64) = 0;
        *(_DWORD *)(a1 + 72) = 0;
      }
      WTF::fastFree((unint64_t)v21, v23, v24, v25, v26, v27, v28, v29);
    }
    v30 = *(unsigned int *)(a1 + 76);
    v14 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v14 + 8 * v30) = 0;
    *(_DWORD *)(a1 + 76) = v30 + 1;
    goto LABEL_11;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::MemoryValueMap::find<JSC::B3::`anonymous namespace'::CSE::processMemoryAfterClobber(JSC::B3::MemoryValue *)::{lambda(JSC::B3::MemoryValue *)#3}>(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;

  if (result)
  {
    v3 = *(_DWORD *)(result - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(result + 32 * v7);
    if (v8 != a2)
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(_QWORD *)(result + 32 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_8;
      }
      v7 = *(unsigned int *)(result - 4);
    }
LABEL_8:
    if (v7 == *(_DWORD *)(result - 4))
      return 0;
    v10 = result + 32 * v7;
    v11 = *(unsigned int *)(v10 + 20);
    if (!(_DWORD)v11)
    {
      return 0;
    }
    else
    {
      v12 = *(uint64_t **)(v10 + 8);
      v13 = 8 * v11;
      do
      {
        result = *v12;
        if (*v12)
          v14 = *(_WORD *)(*v12 + 12) - 79 >= 0xFFFFFFF0;
        else
          v14 = 0;
        if (v14 && (*(_WORD *)(*v12 + 12) & 0xFB) == 0x41 && *(_DWORD *)(result + 40) == a3)
          break;
        result = 0;
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::CSE::processMemoryAfterClobber(JSC::B3::MemoryValue *)::{lambda(JSC::B3::MemoryValue *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#3}::operator()(uint64_t *a1, JSC::B3::MemoryValue *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  const void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  const void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  if (*((_BYTE *)a2 + 12) != 69)
    return 0;
  v6 = *a1;
  v7 = *(_QWORD *)(a1[33] + 24);
  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 3;
  *(_DWORD *)(v8 + 16) = 1;
  *(_BYTE *)(v8 + 20) = 0;
  *(_QWORD *)(v8 + 24) = v7;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E357D8E0;
  *(_DWORD *)(v8 + 40) = 0xFFFF;
  v9 = *(unsigned int *)(v6 + 92);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 8 * v9 - 8);
    *(_DWORD *)(v6 + 92) = v9 - 1;
    v11 = *(_QWORD *)(v6 + 64);
  }
  else
  {
    v10 = *(unsigned int *)(v6 + 76);
    if ((_DWORD)v10 == *(_DWORD *)(v6 + 72))
    {
      v24 = v10 + (v10 >> 2);
      if (v24 >= 0x10)
        v25 = v24 + 1;
      else
        v25 = 16;
      if (v25 <= v10 + 1)
        v26 = v10 + 1;
      else
        v26 = v25;
      if (v26 >> 29)
      {
        __break(0xC471u);
        goto LABEL_45;
      }
      v27 = *(const void **)(v6 + 64);
      v28 = (void *)WTF::fastMalloc((WTF *)(8 * v26));
      *(_DWORD *)(v6 + 72) = v26;
      *(_QWORD *)(v6 + 64) = v28;
      memcpy(v28, v27, 8 * v10);
      if (v27)
      {
        if (*(const void **)(v6 + 64) == v27)
        {
          *(_QWORD *)(v6 + 64) = 0;
          *(_DWORD *)(v6 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v27, v29, v30, v31, v32, v33, v34, v35);
      }
      v36 = *(unsigned int *)(v6 + 76);
      v11 = *(_QWORD *)(v6 + 64);
      *(_QWORD *)(v11 + 8 * v36) = 0;
      *(_DWORD *)(v6 + 76) = v36 + 1;
    }
    else
    {
      v11 = *(_QWORD *)(v6 + 64);
      *(_QWORD *)(v11 + 8 * v10) = 0;
      *(_DWORD *)(v6 + 76) = v10 + 1;
    }
  }
  *(_DWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v11 + 8 * v10) = v8;
  v51 = v8;
  v13 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v13 == *(_DWORD *)(a3 + 8))
  {
    v22 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v13 + 1, (unint64_t)&v51);
    v13 = *(unsigned int *)(a3 + 12);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v13) = *(_QWORD *)v22;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v13) = v8;
  }
  *(_DWORD *)(a3 + 12) = v13 + 1;
  v14 = *a1;
  v15 = *(_QWORD *)(a1[33] + 24);
  v16 = (uint64_t *)JSC::B3::MemoryValue::child(a2, 0);
  v12 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(22, v15, *v16, v51);
  v17 = *(unsigned int *)(v14 + 92);
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v14 + 80) + 8 * v17 - 8);
    *(_DWORD *)(v14 + 92) = v17 - 1;
    v19 = *(_QWORD *)(v14 + 64);
    goto LABEL_13;
  }
  v18 = *(unsigned int *)(v14 + 76);
  if ((_DWORD)v18 == *(_DWORD *)(v14 + 72))
  {
    v37 = v18 + (v18 >> 2);
    if (v37 >= 0x10)
      v38 = v37 + 1;
    else
      v38 = 16;
    if (v38 <= v18 + 1)
      v39 = v18 + 1;
    else
      v39 = v38;
    if (!(v39 >> 29))
    {
      v40 = *(const void **)(v14 + 64);
      v41 = (void *)WTF::fastMalloc((WTF *)(8 * v39));
      *(_DWORD *)(v14 + 72) = v39;
      *(_QWORD *)(v14 + 64) = v41;
      memcpy(v41, v40, 8 * v18);
      if (v40)
      {
        if (*(const void **)(v14 + 64) == v40)
        {
          *(_QWORD *)(v14 + 64) = 0;
          *(_DWORD *)(v14 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v40, v42, v43, v44, v45, v46, v47, v48);
      }
      v49 = *(unsigned int *)(v14 + 76);
      v19 = *(_QWORD *)(v14 + 64);
      *(_QWORD *)(v19 + 8 * v49) = 0;
      *(_DWORD *)(v14 + 76) = v49 + 1;
      goto LABEL_13;
    }
    __break(0xC471u);
LABEL_45:
    JUMPOUT(0x197F9A5A4);
  }
  v19 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v19 + 8 * v18) = 0;
  *(_DWORD *)(v14 + 76) = v18 + 1;
LABEL_13:
  *(_DWORD *)(v12 + 8) = v18;
  *(_QWORD *)(v19 + 8 * v18) = v12;
  v50 = v12;
  v20 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v20 == *(_DWORD *)(a3 + 8))
  {
    v23 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v20 + 1, (unint64_t)&v50);
    v20 = *(unsigned int *)(a3 + 12);
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = *(_QWORD *)v23;
    v12 = v50;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v12;
  }
  *(_DWORD *)(a3 + 12) = v20 + 1;
  return v12;
}

uint64_t JSC::B3::`anonymous namespace'::MemoryValueMap::find<JSC::B3::`anonymous namespace'::CSE::processMemoryAfterClobber(JSC::B3::MemoryValue *)::{lambda(JSC::B3::MemoryValue *)#4}>(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  BOOL v15;

  if (result)
  {
    v3 = *(_DWORD *)(result - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(result + 32 * v7);
    if (v8 != a2)
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(_QWORD *)(result + 32 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_8;
      }
      v7 = *(unsigned int *)(result - 4);
    }
LABEL_8:
    if (v7 == *(_DWORD *)(result - 4))
      return 0;
    v10 = result + 32 * v7;
    v11 = *(unsigned int *)(v10 + 20);
    if (!(_DWORD)v11)
    {
      return 0;
    }
    else
    {
      v12 = *(uint64_t **)(v10 + 8);
      v13 = 8 * v11;
      do
      {
        result = *v12;
        v14 = *(unsigned __int8 *)(*v12 + 12);
        if (*v12)
          v15 = (v14 - 79) >= 0xFFFFFFF0;
        else
          v15 = 0;
        if (v15 && *(_DWORD *)(result + 40) == a3 && (v14 == 66 || v14 == 69))
          break;
        result = 0;
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t *JSC::B3::`anonymous namespace'::CSE::processMemoryAfterClobber(JSC::B3::MemoryValue *)::{lambda(JSC::B3::MemoryValue *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#4}::operator()(uint64_t *a1, JSC::B3::MemoryValue *this, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*((_BYTE *)this + 12) != 69)
    return 0;
  v4 = *a1;
  v5 = *(_QWORD *)(a1[33] + 24);
  v6 = *(_QWORD *)JSC::B3::MemoryValue::child(this, 0);
  v7 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v7 = off_1E357F5F0;
  *(_DWORD *)(v7 + 8) = -1;
  *(_WORD *)(v7 + 12) = 39;
  *(_DWORD *)(v7 + 16) = 1;
  *(_BYTE *)(v7 + 20) = 1;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(v7 + 32) = 0;
  result = JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v7, 1, v6);
  v9 = *(unsigned int *)(v4 + 92);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 80) + 8 * v9 - 8);
    *(_DWORD *)(v4 + 92) = v9 - 1;
    v11 = *(_QWORD *)(v4 + 64);
    goto LABEL_7;
  }
  v10 = *(unsigned int *)(v4 + 76);
  if ((_DWORD)v10 != *(_DWORD *)(v4 + 72))
  {
    v11 = *(_QWORD *)(v4 + 64);
    *(_QWORD *)(v11 + 8 * v10) = 0;
    *(_DWORD *)(v4 + 76) = v10 + 1;
LABEL_7:
    *(_DWORD *)(v7 + 8) = v10;
    *(_QWORD *)(v11 + 8 * v10) = v7;
    v27 = v7;
    v12 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v12 == *(_DWORD *)(a3 + 8))
    {
      v13 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v12 + 1, (unint64_t)&v27);
      v12 = *(unsigned int *)(a3 + 12);
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = *(_QWORD *)v13;
      v7 = v27;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v7;
    }
    *(_DWORD *)(a3 + 12) = v12 + 1;
    return (uint64_t *)v7;
  }
  v14 = v10 + (v10 >> 2);
  if (v14 >= 0x10)
    v15 = v14 + 1;
  else
    v15 = 16;
  if (v15 <= v10 + 1)
    v16 = v10 + 1;
  else
    v16 = v15;
  if (!(v16 >> 29))
  {
    v17 = *(const void **)(v4 + 64);
    v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
    *(_DWORD *)(v4 + 72) = v16;
    *(_QWORD *)(v4 + 64) = v18;
    memcpy(v18, v17, 8 * v10);
    if (v17)
    {
      if (*(const void **)(v4 + 64) == v17)
      {
        *(_QWORD *)(v4 + 64) = 0;
        *(_DWORD *)(v4 + 72) = 0;
      }
      WTF::fastFree((unint64_t)v17, v19, v20, v21, v22, v23, v24, v25);
    }
    v26 = *(unsigned int *)(v4 + 76);
    v11 = *(_QWORD *)(v4 + 64);
    *(_QWORD *)(v11 + 8 * v26) = 0;
    *(_DWORD *)(v4 + 76) = v26 + 1;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

JSC::B3::MemoryValue *JSC::B3::`anonymous namespace'::MemoryValueMap::find<JSC::B3::`anonymous namespace'::CSE::processMemoryAfterClobber(JSC::B3::MemoryValue *)::{lambda(JSC::B3::MemoryValue *)#5}>(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  JSC::B3::MemoryValue *v11;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::MemoryValue **v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;

  if (a1)
  {
    v4 = *(_DWORD *)(a1 - 8);
    v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(_QWORD *)(a1 + 32 * v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(_QWORD *)(a1 + 32 * v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(a1 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(a1 - 4))
    {
      v13 = a1 + 32 * v8;
      v14 = *(unsigned int *)(v13 + 20);
      if ((_DWORD)v14)
      {
        v15 = *(JSC::B3::MemoryValue ***)(v13 + 8);
        v16 = 8 * v14;
        while (1)
        {
          v11 = *v15;
          v17 = *((unsigned __int8 *)*v15 + 12);
          if (*v15)
            v18 = (v17 - 79) >= 0xFFFFFFF0;
          else
            v18 = 0;
          if (v18 && *((_DWORD *)v11 + 10) == **a3)
          {
            if (v17 == 67)
            {
              v19 = *((_DWORD *)v11 + 4);
              v20 = *a3[1];
              if (v19 == v20)
                return v11;
              if (v19 == 2 && v20 == 1)
                return v11;
            }
            else if (v17 == 70
                   && (*(_DWORD *)(*(_QWORD *)JSC::B3::MemoryValue::child(*v15, 0) + 16) == *a3[1]
                    || *(_DWORD *)(*(_QWORD *)JSC::B3::MemoryValue::child(v11, 0) + 16) == 2 && *a3[1] == 1))
            {
              return v11;
            }
          }
          v11 = 0;
          ++v15;
          v16 -= 8;
          if (!v16)
            return v11;
        }
      }
    }
  }
  return 0;
}

uint64_t *JSC::B3::`anonymous namespace'::CSE::processMemoryAfterClobber(JSC::B3::MemoryValue *)::{lambda(JSC::B3::MemoryValue *,WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)#5}::operator()(uint64_t a1, JSC::B3::MemoryValue *this, uint64_t a3)
{
  uint64_t *v6;
  int v7;
  uint64_t v9;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;

  v6 = *(uint64_t **)(a1 + 8);
  v7 = *((unsigned __int8 *)this + 12);
  if (v7 != 67)
  {
    if (v7 == 70
      && *(_DWORD *)(*(_QWORD *)JSC::B3::MemoryValue::child(this, 0) + 16) != **(_DWORD **)a1
      && *(_DWORD *)(*(_QWORD *)JSC::B3::MemoryValue::child(this, 0) + 16) == 2
      && **(_DWORD **)a1 == 1)
    {
      v19 = *v6;
      v20 = *(_QWORD *)(v6[33] + 24);
      v21 = (uint64_t *)JSC::B3::MemoryValue::child(this, 0);
      v22 = JSC::B3::Procedure::add<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v19, v20, *v21);
      v38 = v22;
      v23 = *(unsigned int *)(a3 + 12);
      if ((_DWORD)v23 == *(_DWORD *)(a3 + 8))
      {
        WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *&>(a3, (unint64_t)&v38);
        return v38;
      }
      else
      {
        v9 = (uint64_t)v22;
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v23) = v22;
        *(_DWORD *)(a3 + 12) = v23 + 1;
      }
      return (uint64_t *)v9;
    }
    return 0;
  }
  if (*((_DWORD *)this + 4) != 2 || **(_DWORD **)a1 != 1)
    return 0;
  v11 = *v6;
  v12 = *(_QWORD *)(v6[33] + 24);
  v13 = WTF::fastMalloc((WTF *)0x30);
  v9 = v13;
  *(_QWORD *)v13 = off_1E357F5F0;
  *(_DWORD *)(v13 + 8) = -1;
  *(_WORD *)(v13 + 12) = 44;
  if (*((_DWORD *)this + 4) == 2)
    v14 = 1;
  else
    v14 = 3;
  *(_DWORD *)(v13 + 16) = v14;
  *(_BYTE *)(v13 + 20) = 1;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = 0;
  result = JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v13, 1, (uint64_t)this);
  v15 = *(unsigned int *)(v11 + 92);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v11 + 80) + 8 * v15 - 8);
    *(_DWORD *)(v11 + 92) = v15 - 1;
    v17 = *(_QWORD *)(v11 + 64);
    goto LABEL_14;
  }
  v16 = *(unsigned int *)(v11 + 76);
  if ((_DWORD)v16 != *(_DWORD *)(v11 + 72))
  {
    v17 = *(_QWORD *)(v11 + 64);
    *(_QWORD *)(v17 + 8 * v16) = 0;
    *(_DWORD *)(v11 + 76) = v16 + 1;
LABEL_14:
    *(_DWORD *)(v9 + 8) = v16;
    *(_QWORD *)(v17 + 8 * v16) = v9;
    v38 = (uint64_t *)v9;
    v18 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v18 == *(_DWORD *)(a3 + 8))
    {
      v24 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, v18 + 1, (unint64_t)&v38);
      v18 = *(unsigned int *)(a3 + 12);
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = *(_QWORD *)v24;
      v9 = (uint64_t)v38;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v18) = v9;
    }
    *(_DWORD *)(a3 + 12) = v18 + 1;
    return (uint64_t *)v9;
  }
  v25 = v16 + (v16 >> 2);
  if (v25 >= 0x10)
    v26 = v25 + 1;
  else
    v26 = 16;
  if (v26 <= v16 + 1)
    v27 = v16 + 1;
  else
    v27 = v26;
  if (!(v27 >> 29))
  {
    v28 = *(const void **)(v11 + 64);
    v29 = (void *)WTF::fastMalloc((WTF *)(8 * v27));
    *(_DWORD *)(v11 + 72) = v27;
    *(_QWORD *)(v11 + 64) = v29;
    memcpy(v29, v28, 8 * v16);
    if (v28)
    {
      if (*(const void **)(v11 + 64) == v28)
      {
        *(_QWORD *)(v11 + 64) = 0;
        *(_DWORD *)(v11 + 72) = 0;
      }
      WTF::fastFree((unint64_t)v28, v30, v31, v32, v33, v34, v35, v36);
    }
    v37 = *(unsigned int *)(v11 + 76);
    v17 = *(_QWORD *)(v11 + 64);
    *(_QWORD *)(v17 + 8 * v37) = 0;
    *(_DWORD *)(v11 + 76) = v37 + 1;
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

void WTF::GraphNodeWorklist<JSC::B3::BasicBlock *,WTF::IndexSet<JSC::B3::BasicBlock *>>::pushAll<JSC::B3::SuccessorCollection<JSC::B3::BasicBlock,WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(WTF::BitVector *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF::BitVector *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int *v18;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 12);
  if ((_DWORD)v2)
  {
    v5 = 0;
    v6 = 0;
    v7 = (_QWORD *)((char *)this + 8);
    v8 = 16 * v2;
    while (v6 < *(unsigned int *)(*(_QWORD *)a2 + 12))
    {
      v9 = *(unsigned int **)(**(_QWORD **)a2 + v5);
      v18 = v9;
      v10 = *(_QWORD *)this;
      if ((*(_QWORD *)this & 0x8000000000000000) != 0)
        v11 = 63;
      else
        v11 = *(_QWORD *)(2 * v10);
      v12 = *v9;
      if (v11 <= v12)
      {
        WTF::BitVector::resizeOutOfLine(this, v12 + 1, 0);
        v10 = *(_QWORD *)this;
      }
      if (v10 >= 0)
        v13 = (WTF::BitVector *)(2 * v10 + 8);
      else
        v13 = this;
      v14 = (v12 >> 3) & 0x1FFFFFF8;
      v15 = *(_QWORD *)((char *)v13 + v14);
      *(_QWORD *)((char *)v13 + v14) = v15 | (1 << v12);
      if ((v15 & (1 << v12)) == 0)
      {
        v16 = *((unsigned int *)this + 5);
        if ((_DWORD)v16 == *((_DWORD *)this + 4))
        {
          v17 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v16 + 1, (unint64_t)&v18);
          v16 = *((unsigned int *)this + 5);
          *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v16) = *v17;
        }
        else
        {
          *(_QWORD *)(*v7 + 8 * v16) = v9;
        }
        *((_DWORD *)this + 5) = v16 + 1;
      }
      ++v6;
      v5 += 16;
      if (v8 == v5)
        return;
    }
    __break(0xC471u);
  }
}

uint64_t *WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::operator=(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;

  if (!*a2 || (v9 = *(unsigned int *)(*a2 - 12), !(_DWORD)v9))
  {
    v10 = 0;
    goto LABEL_4;
  }
  v18 = (v9 - 1) | ((v9 - 1) >> 1) | ((((_DWORD)v9 - 1) | ((v9 - 1) >> 1)) >> 2);
  v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
  v20 = (v19 | HIWORD(v19)) + 1;
  if (v20 > 0x400)
  {
    if (v20 > 2 * v9)
      goto LABEL_50;
  }
  else if (3 * v20 > 4 * v9)
  {
LABEL_19:
    v21 = (double)v9;
    v22 = (double)v20;
    v23 = 0.604166667;
    goto LABEL_20;
  }
  LODWORD(v20) = 2 * v20;
  if (v20 <= 0x400)
    goto LABEL_19;
LABEL_50:
  v21 = (double)v9;
  v22 = (double)v20;
  v23 = 0.416666667;
LABEL_20:
  if (v22 * v23 <= v21)
    LODWORD(v20) = 2 * v20;
  if (v20 <= 8)
    v24 = 8;
  else
    v24 = v20;
  v25 = (_DWORD *)WTF::fastMalloc((WTF *)((32 * v24) | 0x10));
  v26 = v25;
  v27 = 0;
  v10 = v25 + 4;
  do
  {
    v28 = &v25[v27];
    v28[2] = 0;
    v28[3] = &v25[v27 + 10];
    v28[4] = 1;
    v27 += 8;
  }
  while (8 * v24 != v27);
  v25[2] = v24 - 1;
  v25[3] = v24;
  *v25 = 0;
  v25[1] = v9;
  v29 = (_QWORD *)*a2;
  if (*a2)
  {
    v31 = *((unsigned int *)v29 - 1);
    v32 = &v29[4 * v31];
    if (*((_DWORD *)v29 - 3))
    {
      v30 = v29;
      if ((_DWORD)v31)
      {
        v44 = 32 * v31;
        v30 = v29;
        while ((unint64_t)(*v30 + 1) <= 1)
        {
          v30 += 4;
          v44 -= 32;
          if (!v44)
          {
            v30 = v32;
            goto LABEL_30;
          }
        }
      }
      goto LABEL_30;
    }
    v30 = &v29[4 * v31];
  }
  else
  {
    v30 = 0;
    v31 = 0;
  }
  v32 = &v29[4 * v31];
LABEL_30:
  if (v29)
    v33 = &v29[4 * *((unsigned int *)v29 - 1)];
  else
    v33 = 0;
  while (v30 != v33)
  {
    v34 = v26[2];
    v35 = ~(*v30 << 32) + *v30;
    v36 = (v35 ^ (v35 >> 22)) + ~((v35 ^ (v35 >> 22)) << 13);
    v37 = (9 * (v36 ^ (v36 >> 8))) ^ ((9 * (v36 ^ (v36 >> 8))) >> 15);
    v38 = v34 & (((v37 + ~(v37 << 27)) >> 31) ^ (v37 + ~((_DWORD)v37 << 27)));
    v39 = 1;
    do
    {
      v40 = v38;
      v41 = *(_QWORD *)&v10[8 * v38];
      v38 = (v38 + v39++) & v34;
    }
    while (v41);
    v42 = &v10[8 * v40];
    *v42 = *v30;
    WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unint64_t)(v42 + 1), (uint64_t)(v30 + 1), a3, a4, a5, a6, a7, a8);
    v43 = v30 + 4;
    v30 = v32;
    if (v43 != v32)
    {
      v30 = v43;
      while ((unint64_t)(*v30 + 1) <= 1)
      {
        v30 += 4;
        if (v30 == v32)
        {
          v30 = v32;
          break;
        }
      }
    }
  }
LABEL_4:
  v11 = *a1;
  *a1 = (uint64_t)v10;
  if (v11)
  {
    v13 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v13)
    {
      v14 = v11 + 24;
      do
      {
        if (*(_QWORD *)(v14 - 24) != -1)
        {
          v15 = *(_QWORD *)(v14 - 16);
          if (v14 != v15 && v15 != 0)
          {
            *(_QWORD *)(v14 - 16) = 0;
            *(_DWORD *)(v14 - 8) = 0;
            WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v14 += 32;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

JSC::B3::Value *JSC::B3::`anonymous namespace'::fixSSAGlobally(JSC::B3::Procedure &)::$_2::operator()(uint64_t *a1, unsigned int *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;

  v8 = *a1;
  v9 = *a2;
  if (*(_DWORD *)(*a1 + 12) <= v9)
  {
    __break(0xC471u);
    goto LABEL_21;
  }
  v14 = *(unsigned int *)(*(_QWORD *)v8 + 4 * v9);
  if (*(_DWORD *)(v8 + 28) > v14)
  {
    v24 = *(_QWORD *)(v8 + 16);
    if (*(_DWORD *)(v24 + 16 * v14) == (_DWORD)v9)
      return *(JSC::B3::Value **)(v24 + 16 * v14 + 8);
  }
  v15 = JSC::B3::SSACalculator::reachingDefAtTail(a1[2], *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1[2] + 56) + 8) + 32 * **(unsigned int **)a1[3] + 16), *(_QWORD *)(*(_QWORD *)a1[1] + 8 * v9), a4, a5, a6, a7, a8);
  if (!v15)
    return JSC::B3::InsertionSet::insertBottom((JSC::B3::Value **)a1[4], a3, a4, a2[1]);
  v16 = *a1;
  v17 = *a2;
  if (*(_DWORD *)(*a1 + 12) <= v17)
  {
    __break(0xC471u);
    JUMPOUT(0x197F9B530);
  }
  v18 = v15;
  v19 = *(_QWORD *)(v15 + 16);
  v20 = *(unsigned int *)(*(_QWORD *)v16 + 4 * v17);
  v21 = *(unsigned int *)(v16 + 28);
  if (v21 > v20)
  {
    v25 = (_QWORD *)(*(_QWORD *)(v16 + 16) + 16 * v20);
    if (*(_DWORD *)v25 == (_DWORD)v17)
    {
      *v25 = v17;
      v25[1] = v19;
      return *(JSC::B3::Value **)(v18 + 16);
    }
  }
  v22 = (_QWORD *)(v16 + 16);
  *(_QWORD *)&v26 = v17;
  *((_QWORD *)&v26 + 1) = v19;
  if ((_DWORD)v21 == *(_DWORD *)(v16 + 24))
    *(_OWORD *)(*(_QWORD *)(v16 + 16) + 16 * *(unsigned int *)(v16 + 28)) = *(_OWORD *)WTF::Vector<JSC::JSTokenLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v22, v21 + 1, (unint64_t)&v26);
  else
    *(_OWORD *)(*v22 + 16 * v21) = v26;
  ++*(_DWORD *)(v16 + 28);
  if (*(_DWORD *)(v16 + 12) <= v17)
  {
    __break(0xC471u);
LABEL_21:
    JUMPOUT(0x197F9B528);
  }
  *(_DWORD *)(*(_QWORD *)v16 + 4 * v17) = v21;
  return *(JSC::B3::Value **)(v18 + 16);
}

_OWORD *WTF::HashTable<JSC::B3::SSACalculator::Variable *,WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *>>,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashMap<JSC::B3::SSACalculator::Variable *,JSC::B3::SSACalculator::Def *,WTF::DefaultHash<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>,WTF::HashTraits<JSC::B3::SSACalculator::Def *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::SSACalculator::Variable *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *result;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _OWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v24 = 0;
    v22 = 0;
    do
    {
      v25 = (_QWORD *)(v11 + 16 * v24);
      if ((unint64_t)(*v25 + 1) >= 2)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = (~(*v25 << 32) + *v25) ^ ((~(*v25 << 32) + *v25) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((unint64_t)(v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 16 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34);
        v35 = (_OWORD *)(v26 + 16 * v33);
        *v35 = *(_OWORD *)v25;
        if (v25 == (_QWORD *)a3)
          v22 = v35;
      }
      ++v24;
    }
    while (v24 != v12);
    goto LABEL_16;
  }
  v22 = 0;
  result = 0;
  if (v11)
  {
LABEL_16:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::FoldPathConstants::run(void)::{lambda(JSC::B3::BasicBlock *,JSC::B3::Value *,JSC::B3::`anonymous namespace'::FoldPathConstants::Override const&)#1}::operator()(uint64_t result, void *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;

  if (*(_DWORD *)(*(_QWORD *)a3 + 36) != 1)
    return result;
  v10 = (uint64_t *)result;
  v11 = *(_QWORD *)result;
  if (*(_QWORD *)result
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = (_QWORD *)(v11 + 24 * v16);
  v18 = (void *)*v17;
  if (*v17)
  {
    v19 = 0;
    v20 = 1;
    while (v18 != a2)
    {
      if (v18 == (void *)-1)
        v19 = v17;
      v16 = (v16 + v20) & v12;
      v17 = (_QWORD *)(v11 + 24 * v16);
      v18 = (void *)*v17;
      ++v20;
      if (!*v17)
      {
        if (v19)
        {
          *v19 = 0;
          v19[1] = 0;
          v19[2] = 0;
          --*(_DWORD *)(*v10 - 16);
          v17 = v19;
        }
        goto LABEL_12;
      }
    }
    goto LABEL_20;
  }
LABEL_12:
  *v17 = a2;
  v21 = v17[1];
  if (v21)
  {
    v17[1] = 0;
    *((_DWORD *)v17 + 4) = 0;
    WTF::fastFree(v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v17[1] = 0;
  v17[2] = 0;
  v22 = *v10;
  if (*v10)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v10;
  if (*v10)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_20;
LABEL_26:
    goto LABEL_20;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_26;
LABEL_20:
  result = (uint64_t)(v17 + 1);
  v28 = *((unsigned int *)v17 + 5);
  if ((_DWORD)v28 == *((_DWORD *)v17 + 4))
  {
    v29 = (_OWORD *)(v17[1] + 32 * *((unsigned int *)v17 + 5));
    v30 = *(_OWORD *)result;
    v31 = *(_OWORD *)(result + 16);
  }
  else
  {
    v29 = (_OWORD *)(*(_QWORD *)result + 32 * v28);
    v30 = *a3;
    v31 = a3[1];
  }
  *v29 = v30;
  v29[1] = v31;
  ++*((_DWORD *)v17 + 5);
  return result;
}

_OWORD *WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>(_OWORD *result, uint64_t *a2, uint64_t *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = v12 + 16 * v19;
  v21 = *(_QWORD *)v20;
  if (*(_QWORD *)v20)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v12 - 4);
        v29 = 0;
        v28 = v12 + 16 * v32;
        goto LABEL_11;
      }
      if (v21 == -1)
        v30 = (_QWORD *)v20;
      v19 = (v19 + v31) & v14;
      v20 = v12 + 16 * v19;
      v21 = *(_QWORD *)v20;
      ++v31;
    }
    while (*(_QWORD *)v20);
    if (v30)
    {
      *v30 = 0;
      v30[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = (uint64_t)v30;
    }
  }
  *(_QWORD *)v20 = v15;
  *(_DWORD *)(v20 + 8) = *a4;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_10;
    goto LABEL_27;
  }
  if (3 * v27 <= 4 * v26)
  {
    if (!(_DWORD)v27)
    {
      v33 = 8;
LABEL_31:
      result = WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(a2, v33, v20, (uint64_t)a4, a5, a6, a7, a8);
      v20 = (uint64_t)result;
      v24 = *a2;
      if (*a2)
        v27 = *(unsigned int *)(v24 - 4);
      else
        v27 = 0;
      goto LABEL_10;
    }
LABEL_27:
    v33 = ((_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27)));
    goto LABEL_31;
  }
LABEL_10:
  v28 = v24 + 16 * v27;
  v29 = 1;
LABEL_11:
  *(_QWORD *)v11 = v20;
  *((_QWORD *)v11 + 1) = v28;
  *((_BYTE *)v11 + 16) = v29;
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::FoldPathConstants::run(void)::{lambda(JSC::B3::BasicBlock *,JSC::B3::Value *)#1}::operator()(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  __int128 v20;

  if (!a2)
    goto LABEL_9;
  v5 = *(_DWORD *)(a2 - 8);
  v6 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  v10 = (uint64_t *)(a2 + 24 * v9);
  v11 = *v10;
  if (*v10 != a5)
  {
    v12 = 1;
    while (v11)
    {
      v9 = (v9 + v12) & v5;
      v10 = (uint64_t *)(a2 + 24 * v9);
      v11 = *v10;
      ++v12;
      if (*v10 == a5)
        goto LABEL_8;
    }
    v10 = (uint64_t *)(a2 + 24 * *(unsigned int *)(a2 - 4));
  }
LABEL_8:
  if (v10 != (uint64_t *)(a2 + 24 * *(unsigned int *)(a2 - 4)))
  {
    *(_QWORD *)result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    v13 = *((unsigned int *)v10 + 5);
    if ((_DWORD)v13)
    {
      v14 = (unsigned int **)v10[1];
      v15 = 32 * v13;
      do
      {
        if (*v14 == a4
          || (v16 = a3 + 32 * *a4, v17 = a3 + 32 * **v14, *(_DWORD *)(v16 + 24) > *(_DWORD *)(v17 + 24))
          && *(_DWORD *)(v16 + 28) < *(_DWORD *)(v17 + 28))
        {
          v18 = *((_BYTE *)v14 + 8) && *(_BYTE *)(result + 8) == 0;
          if (v18 || (*((_BYTE *)v14 + 9) ? (v19 = *(_BYTE *)(result + 9) == 0) : (v19 = 0), v19))
          {
            v20 = *((_OWORD *)v14 + 1);
            *(_OWORD *)result = *(_OWORD *)v14;
            *(_OWORD *)(result + 16) = v20;
          }
        }
        v14 += 4;
        v15 -= 32;
      }
      while (v15);
    }
  }
  else
  {
LABEL_9:
    *(_QWORD *)result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::`anonymous namespace'::FoldPathConstants::Override,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::`anonymous namespace'::FoldPathConstants::Override,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::`anonymous namespace'::FoldPathConstants::Override,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::`anonymous namespace'::FoldPathConstants::Override,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *result;
  uint64_t v53;

  v8 = *a1;
  if (*a1)
  {
    v9 = *(_DWORD *)(v8 - 4);
    v10 = *(_DWORD *)(v8 - 12);
    if (v9)
    {
      v11 = v9 << (6 * v10 >= 2 * v9);
      goto LABEL_4;
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v11 = 8;
LABEL_4:
  v12 = WTF::fastZeroedMalloc(24 * v11 + 16, a2, a3, a4, a5, a6, a7, a8);
  v20 = a1;
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v10;
  if (v9)
  {
    v21 = 0;
    v22 = 0;
    v23 = v9;
    v24 = (uint64_t *)a2;
    v53 = v9;
    do
    {
      v25 = (uint64_t *)(v8 + 24 * v21);
      v26 = *v25;
      if (*v25)
      {
        if (v26 != -1)
        {
          v27 = *v20;
          if (*v20)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
          v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
          v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
          v32 = v28 & ((v31 >> 31) ^ v31);
          v33 = 1;
          do
          {
            v34 = v32;
            v35 = (_QWORD *)(v27 + 24 * v32);
            v32 = (v32 + v33++) & v28;
          }
          while (*v35);
          v36 = v34;
          v37 = v27 + 24 * v34;
          v40 = *(_QWORD *)(v37 + 8);
          v39 = (_QWORD *)(v37 + 8);
          v38 = v40;
          if (v40)
          {
            *v39 = 0;
            *(_DWORD *)(v27 + 24 * v34 + 16) = 0;
            WTF::fastFree(v38, v13, v14, v15, v16, v17, v18, v19);
            v23 = v53;
            v24 = (uint64_t *)a2;
            v20 = a1;
            v26 = *v25;
          }
          *v35 = v26;
          v41 = v8 + 24 * v21;
          *v39 = 0;
          v39[1] = 0;
          v43 = *(_QWORD *)(v41 + 8);
          v42 = v41 + 8;
          *(_QWORD *)v42 = 0;
          *v39 = v43;
          v44 = *(_DWORD *)(v42 + 8);
          *(_DWORD *)(v42 + 8) = 0;
          v45 = v27 + 24 * v36;
          *(_DWORD *)(v45 + 16) = v44;
          v46 = *(_DWORD *)(v42 + 12);
          *(_DWORD *)(v42 + 12) = 0;
          *(_DWORD *)(v45 + 20) = v46;
          v47 = *(_QWORD *)v42;
          if (*(_QWORD *)v42)
          {
            *(_QWORD *)v42 = 0;
            *(_DWORD *)(v42 + 8) = 0;
            WTF::fastFree(v47, v13, v14, v15, v16, v17, v18, v19);
            v23 = v53;
            v24 = (uint64_t *)a2;
            v20 = a1;
          }
          if (v25 == v24)
            v22 = v35;
        }
      }
      else
      {
        v48 = v8 + 24 * v21;
        v51 = *(_QWORD *)(v48 + 8);
        v50 = (_QWORD *)(v48 + 8);
        v49 = v51;
        if (v51)
        {
          *v50 = 0;
          *(_DWORD *)(v8 + 24 * v21 + 16) = 0;
          WTF::fastFree(v49, v13, v14, v15, v16, v17, v18, v19);
          v23 = v53;
          v24 = (uint64_t *)a2;
          v20 = a1;
        }
      }
      ++v21;
    }
    while (v21 != v23);
  }
  else
  {
    v22 = 0;
    result = 0;
    if (!v8)
      return result;
  }
  WTF::fastFree(v8 - 16, v13, v14, v15, v16, v17, v18, v19);
  return v22;
}

uint64_t WTF::Vector<JSC::B3::`anonymous namespace'::FoldPathConstants::Override,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 32 * *(unsigned int *)(result + 12) > a3)
  {
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 27))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 32 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20;
        v22 = v20[1];
        v20 += 2;
        *v11 = v21;
        v11[1] = v22;
        v11 += 2;
        v19 -= 32;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::B3::`anonymous namespace'::FoldPathConstants::Override,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 32 * v8;
        v18 = (__int128 *)v7;
        do
        {
          v19 = *v18;
          v20 = v18[1];
          v18 += 2;
          *v9 = v19;
          v9[1] = v20;
          v9 += 2;
          v17 -= 32;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

_OWORD *WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _OWORD *v34;
  _OWORD *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (_QWORD *)(v11 + 16 * v22);
      if ((unint64_t)(*v24 + 1) >= 2)
      {
        v25 = *a1;
        if (*a1)
          v26 = *(_DWORD *)(v25 - 8);
        else
          v26 = 0;
        v27 = (~(*v24 << 32) + *v24) ^ ((~(*v24 << 32) + *v24) >> 22);
        v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((unint64_t)(v27 + ~(v27 << 13)) >> 8));
        v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
        v30 = v26 & ((v29 >> 31) ^ v29);
        v31 = 1;
        do
        {
          v32 = v30;
          v33 = *(_QWORD *)(v25 + 16 * v30);
          v30 = (v30 + v31++) & v26;
        }
        while (v33);
        v34 = (_OWORD *)(v25 + 16 * v32);
        *v34 = *(_OWORD *)v24;
        if (v24 == (_QWORD *)a3)
          v23 = v34;
      }
      ++v22;
    }
    while (v22 != v12);
    goto LABEL_13;
  }
  v23 = 0;
  result = 0;
  if (v11)
  {
LABEL_13:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v23;
  }
  return result;
}

uint64_t WTF::Vector<JSC::B3::UpsilonValue *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::UpsilonValue *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x81)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 128;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::B3::UpsilonValue *,128ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 0x81)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 128;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

uint64_t WTF::Vector<JSC::B3::BasicBlock *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 5)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 4;
    goto LABEL_13;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_13:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void JSC::B3::prepareForGeneration(JSC::B3::Procedure **this, JSC::B3::Procedure *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Air::Code *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[4];
  double v20;
  char v21;
  char **v22;
  char *v23;

  v19[0] = "Total B3+Air";
  v19[1] = 13;
  v19[2] = "prepareForGeneration";
  v19[3] = 21;
  v20 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v16 = mach_absolute_time();
    v18 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v18 != -1)
    {
      v23 = &v21;
      v22 = &v23;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v22, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v17) = dword_1ECF4400C;
    v20 = (double)(v16 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v17 * 1000000000.0);
  }
  JSC::B3::generateToAir(this, a2, a3, a4, a5, a6, a7, a8);
  JSC::B3::Air::prepareForGeneration(this[20], v9, v10, v11, v12, v13, v14, v15);
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v19);
}

void JSC::B3::generateToAir(JSC::B3::Procedure **this, JSC::B3::Procedure *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9;
  BOOL v10;
  int v11;
  BOOL v12;
  JSC::B3::Procedure *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  JSC::B3::Procedure *v21;
  JSC::B3::Procedure *v22;
  JSC::B3::Procedure *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  JSC::B3::Procedure *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v42;
  JSC::B3::Value **v43;
  uint64_t v44;
  JSC::B3::Value *v45;
  BOOL v46;
  unint64_t v48;
  WTF *v49;
  WTF *v51;
  WTF *v52;
  JSC::B3::Procedure *v54;
  WTF *v55;
  JSC::B3::Procedure *v56;
  JSC::B3::Procedure *v57;
  JSC::B3::Procedure *v58;
  JSC::B3::Procedure *v59;
  JSC::B3::Procedure *v60;
  JSC::B3::Procedure *v61;
  JSC::B3::Procedure *v62;
  JSC::B3::Procedure *v63;
  JSC::B3::Procedure *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  JSC::B3::Procedure **v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v102;
  JSC::B3::Value **v103;
  unint64_t v104;
  unint64_t v105;
  JSC::B3::Value *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t i;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  WTF *v137;
  uint64_t v138;
  __int128 v139;
  int v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  WTF *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  JSC::B3::Procedure **v148;
  _QWORD v149[4];
  double v150;
  JSC::B3::Procedure *v151;
  JSC::B3::Procedure **v152;
  WTF *v153;
  uint64_t v154;
  _BYTE v155[176];
  uint64_t v156;
  WTF *v157;
  int v158;
  _QWORD v159[3];
  uint64_t v160;
  WTF *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  WTF *v165;
  uint64_t v166;
  _QWORD v167[4];
  WTF *v168;
  int v169;
  unsigned int v170;
  _QWORD v171[5];
  JSC::B3::Procedure **v172;
  uint64_t *v173;
  JSC::B3::Value *v174;
  uint64_t v175;
  uint64_t *v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180[4];

  v149[0] = "Total B3";
  v149[1] = 9;
  v149[2] = "generateToAir";
  v149[3] = 14;
  v150 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v92 = mach_absolute_time();
    v94 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v94 != -1)
    {
      v151 = (JSC::B3::Procedure *)v167;
      v172 = &v151;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v172, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v93) = dword_1ECF4400C;
    v150 = (double)(v92 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v93 * 1000000000.0);
  }
  if (!*((_BYTE *)this + 211)
    && (!(_BYTE)qword_1ECF4C32A ? (v9 = byte_1ECF4C323 == 0) : (v9 = 0),
        v9 ? (v10 = BYTE1(qword_1ECF4C32A) == 0) : (v10 = 0),
        v10))
  {
    v11 = byte_1ECF4C326;
    if (byte_1ECF4C326)
      v12 = 0;
    else
      v12 = byte_1ECF4C322 == 0;
    if (!v12)
    {
LABEL_15:
      if (!v11)
      {
        WTF::dataLog<char const*,char [13]>();
        WTF::dataLog<JSC::B3::Procedure>((JSC::B3::Procedure *)this);
      }
    }
  }
  else if (!byte_1ECF4C323)
  {
    v11 = byte_1ECF4C326;
    goto LABEL_15;
  }
  JSC::B3::Procedure::resetReachability((JSC::B3::Procedure *)this, a2, a3, a4, a5, a6, a7, a8);
  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
  {
    v151 = (JSC::B3::Procedure *)this;
    v152 = 0;
  }
  v20 = *((_DWORD *)this + 51);
  if (v20 < 2)
  {
    if (v20)
      JSC::B3::reduceStrength(this, v13);
    goto LABEL_87;
  }
  JSC::B3::reduceDoubleToFloat(this, v13);
  JSC::B3::reduceStrength(this, v21);
  if ((_BYTE)word_1ECF4C6A4)
    JSC::B3::hoistLoopInvariantValues(this, v22);
  if (JSC::B3::eliminateCommonSubexpressions(this, v22))
    JSC::B3::eliminateCommonSubexpressions(this, v23);
  JSC::B3::eliminateDeadCode(this, v23);
  JSC::B3::PhaseScope::PhaseScope((uint64_t)v159, this, (uint64_t)"inferSwitches", 14);
  v151 = (JSC::B3::Procedure *)this;
  v152 = this;
  v153 = (WTF *)v155;
  v154 = 8;
  memset(&v155[128], 0, 48);
  v156 = 0;
  JSC::B3::UseCounts::UseCounts((JSC::B3::UseCounts *)&v157, (JSC::B3::Procedure *)this);
  v31 = 0;
  do
  {
    v32 = v31;
    v33 = v151;
    v34 = *((unsigned int *)v151 + 15);
    if (!(_DWORD)v34)
      goto LABEL_102;
    v35 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v151 + 6) + 8 * v35))
    {
      if (v34 == ++v35)
        goto LABEL_102;
    }
    if ((_DWORD)v34 == (_DWORD)v35)
    {
LABEL_102:
      if ((v31 & 1) != 0)
        goto LABEL_100;
      goto LABEL_73;
    }
    v36 = 0;
    v37 = *((_DWORD *)v151 + 15);
    do
    {
      if (v37 <= v35)
      {
        __break(0xC471u);
        JUMPOUT(0x197F9CA8CLL);
      }
      v38 = *(_QWORD *)(*((_QWORD *)v33 + 6) + 8 * v35);
      if (*(_DWORD *)(v38 + 36) != 1)
      {
        v39 = 0;
        goto LABEL_42;
      }
      if (!v172)
        goto LABEL_35;
      v42 = *(unsigned int *)(v38 + 20);
      if (!(_DWORD)v42)
      {
LABEL_60:
        if (!*(_DWORD *)(v38 + 36))
        {
          __break(0xC471u);
          JUMPOUT(0x197F9CA94);
        }
        v48 = **(_QWORD **)(v38 + 24);
        if (!v167[0])
          goto LABEL_65;
        v39 = 0;
        if (v175 == v167[3] && v171[3] == v38)
        {
          if (v180[0] == v38 || v180[0] == v48)
            goto LABEL_65;
          if (v178)
          {
            v96 = 24 * v178;
            v97 = v176 + 1;
            while (*v97 != v38 && *v97 != v48)
            {
              v97 += 3;
              v96 -= 24;
              if (!v96)
                goto LABEL_130;
            }
LABEL_65:
            v39 = 0;
          }
          else
          {
LABEL_130:
            if (v170)
            {
              v99 = 24 * v170;
              v100 = (_QWORD *)((char *)v168 + 8);
              while (*v100 != v38 && *v100 != v48)
              {
                v100 += 3;
                v99 -= 24;
                if (!v99)
                  goto LABEL_137;
              }
              goto LABEL_65;
            }
LABEL_137:
            v102 = *(unsigned int *)(v48 + 20);
            if ((_DWORD)v102)
            {
              v103 = *(JSC::B3::Value ***)(v48 + 8);
              v147 = 8 * v102;
              do
              {
                if (*v103 == (JSC::B3::Value *)v167[2])
                  JSC::B3::Value::replaceWithNopIgnoringType(*v103);
                ++v103;
                v147 -= 8;
              }
              while (v147);
            }
            v104 = *(unsigned int *)(v38 + 20);
            if ((_DWORD)v104 != 1)
            {
              v105 = 0;
              do
              {
                if (v105 >= v104)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F9CCE0);
                }
                v106 = *(JSC::B3::Value **)(*(_QWORD *)(v38 + 8) + 8 * v105);
                if (v106 != v174 && *((_BYTE *)v106 + 12))
                {
                  JSC::B3::InsertionSet::insertValue((JSC::B3::InsertionSet *)&v152, *(unsigned int *)(v48 + 20) - 1, v106, v26, v27, v28, v29, v30);
                  v104 = *(unsigned int *)(v38 + 20);
                }
                ++v105;
              }
              while (v104 - 1 > v105);
            }
            JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v152, (JSC::B3::BasicBlock *)v48);
            *(_DWORD *)(v38 + 20) = 0;
            JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin>(v38, (uint64_t)v151, 159, v173[3]);
            JSC::B3::BasicBlock::removePredecessor(v38, v48);
            v148 = v172;
            v145 = *((unsigned int *)v172 + 17);
            if ((_DWORD)v145)
            {
              v114 = 0;
              for (i = 0; i != v145; ++i)
              {
                if (i >= *((unsigned int *)v148 + 17))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197F9CCE8);
                }
                v146 = v114;
                JSC::B3::BasicBlock::replacePredecessor(*(JSC::B3::BasicBlock **)((char *)v148[7] + v114), (JSC::B3::BasicBlock *)v38, (JSC::B3::BasicBlock *)v48);
                v114 = v146 + 16;
              }
            }
            JSC::B3::BasicBlock::clearSuccessors(v38, v107, v108, v109, v110, v111, v112, v113);
            v116 = *(unsigned int *)(v48 + 20);
            if (!(_DWORD)v116)
            {
              __break(0xC471u);
              JUMPOUT(0x197F9CCF0);
            }
            v117 = JSC::B3::BasicBlock::replaceLastWithNew<JSC::B3::SwitchValue,JSC::B3::Origin,JSC::B3::Value *>(v48, (uint64_t)v151, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 8) + 8 * v116 - 8) + 24), v175);
            JSC::B3::BasicBlock::clearSuccessors(v48, v118, v119, v120, v121, v122, v123, v124);
            JSC::B3::SwitchValue::setFallThrough(v117, (unint64_t)v180, v125, v126, v127, v128, v129, v130);
            v165 = 0;
            v166 = 0;
            if (v170)
            {
              v137 = v168;
              v138 = 24 * v170;
              do
              {
                v139 = *(_OWORD *)v137;
                v164 = *((_QWORD *)v137 + 2);
                v163 = v139;
                JSC::B3::SwitchValue::appendCase(v117, &v163, v131, v132, v133, v134, v135, v136);
                v162 = v163;
                v140 = HIDWORD(v166);
                if (HIDWORD(v166) == (_DWORD)v166)
                {
                  WTF::Vector<long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,long long>((uint64_t)&v165, (unint64_t)&v162);
                }
                else
                {
                  *((_QWORD *)v165 + HIDWORD(v166)) = v163;
                  HIDWORD(v166) = v140 + 1;
                }
                v137 = (WTF *)((char *)v137 + 24);
                v138 -= 24;
              }
              while (v138);
            }
            std::__sort<std::__less<long long,long long> &,long long *>();
            if (v178)
            {
              v141 = v176;
              v142 = 24 * v178;
              do
              {
                v143 = v141[2];
                v163 = *(_OWORD *)v141;
                v164 = v143;
                v141 += 3;
                v142 -= 24;
              }
              while (v142);
            }
            v144 = v165;
            if (v165)
            {
              v165 = 0;
              LODWORD(v166) = 0;
              WTF::fastFree((unint64_t)v144, v24, v25, v26, v27, v28, v29, v30);
            }
            v39 = 1;
          }
        }
        v49 = v168;
        if (v171 != (_QWORD *)v168 && v168 != 0)
        {
          v168 = 0;
          v169 = 0;
          WTF::fastFree((unint64_t)v49, v24, v25, v26, v27, v28, v29, v30);
        }
        goto LABEL_36;
      }
      v43 = *(JSC::B3::Value ***)(v38 + 8);
      v44 = 8 * v42;
      while (1)
      {
        v45 = *v43;
        v46 = *((unsigned __int8 *)*v43 + 12) < 7u || v45 == v174;
        if (!v46 && v45 != (JSC::B3::Value *)v173)
          break;
        ++v43;
        v44 -= 8;
        if (!v44)
          goto LABEL_60;
      }
LABEL_35:
      v39 = 0;
LABEL_36:
      v40 = (unint64_t)v176;
      if (&v179 != v176 && v176 != 0)
      {
        v176 = 0;
        v177 = 0;
        WTF::fastFree(v40, v24, v25, v26, v27, v28, v29, v30);
      }
      v37 = *((_DWORD *)v33 + 15);
LABEL_42:
      v35 = (v35 + 1);
      if (v37 > v35)
      {
        while (!*(_QWORD *)(*((_QWORD *)v33 + 6) + 8 * v35))
        {
          if (v37 == ++v35)
          {
            LODWORD(v35) = v37;
            break;
          }
        }
      }
      v36 |= v39;
    }
    while ((_DWORD)v34 != (_DWORD)v35);
    v31 = 1;
  }
  while ((v36 & 1) != 0);
  if ((v32 & 1) == 0)
    goto LABEL_73;
  v33 = v151;
LABEL_100:
  JSC::B3::Procedure::resetReachability(v33, v24, v25, v26, v27, v28, v29, v30);
  JSC::B3::Procedure::invalidateCFG(v151, v78, v79, v80, v81, v82, v83, v84);
  JSC::B3::Procedure::deleteOrphans(v151, v85, v86, v87, v88, v89, v90, v91);
LABEL_73:
  v51 = v157;
  if (v157)
  {
    v157 = 0;
    v158 = 0;
    WTF::fastFree((unint64_t)v51, v24, v25, v26, v27, v28, v29, v30);
  }
  v52 = v153;
  if (v155 != (_BYTE *)v153 && v153 != 0)
  {
    v153 = 0;
    LODWORD(v154) = 0;
    WTF::fastFree((unint64_t)v52, v24, v25, v26, v27, v28, v29, v30);
  }
  v54 = (JSC::B3::Procedure *)v159[0];
  *(_QWORD *)(v159[0] + 144) = v159[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v161)
      v95 = (JSC::B3::Procedure **)((char *)v161 + 16);
    else
      v95 = 0;
    v151 = v54;
    v152 = v95;
  }
  v55 = v161;
  v161 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 1)
      WTF::fastFree((unint64_t)v55, v24, v25, v26, v27, v28, v29, v30);
    else
      --*(_DWORD *)v55;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v160);
  if (byte_1ECF4C69A)
    JSC::B3::duplicateTails(this, v56);
  JSC::B3::fixSSA(this, v56);
  JSC::B3::foldPathConstants(this, v57);
LABEL_87:
  JSC::B3::lowerMacros(this, v13);
  if (*((_DWORD *)this + 51) >= 2u)
  {
    JSC::B3::optimizeAssociativeExpressionTrees(this, v58);
    JSC::B3::reduceStrength(this, v59);
  }
  JSC::B3::lowerMacrosAfterOptimizations(this, v58);
  JSC::B3::legalizeMemoryOffsets(this, v60);
  JSC::B3::moveConstants(this, v61);
  JSC::B3::legalizeMemoryOffsets(this, v62);
  if (HIBYTE(word_1ECF4C6A4) && *((_DWORD *)this + 51) >= 2u)
    JSC::B3::canonicalizePrePostIncrements((JSC::B3 *)this, v63);
  JSC::B3::eliminateDeadCode(this, v63);
  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
  {
    v151 = (JSC::B3::Procedure *)this;
    v152 = 0;
  }
  if (*((unsigned __int8 *)this + 211) | qword_1ECF4C32A | byte_1ECF4C323 | BYTE1(qword_1ECF4C32A)
    && !byte_1ECF4C323
    && !byte_1ECF4C326)
  {
    v151 = this[18];
    WTF::dataLog<char [10],char const*,char [22]>((const char **)&v151);
    WTF::dataLog<JSC::B3::Procedure>((JSC::B3::Procedure *)this);
  }
  JSC::B3::lowerToAir(this, v64);
  if (*((_BYTE *)this + 211)
    || (_BYTE)qword_1ECF4C32A
    || __PAIR16__(BYTE1(qword_1ECF4C32A), 0) != byte_1ECF4C323
    || byte_1ECF4C326)
  {
    JSC::B3::Procedure::setShouldDumpIR((uint64_t)this);
  }
  JSC::B3::Procedure::freeUnneededB3ValuesAfterLowering((JSC::B3::Procedure *)this, v71, v72, v73, v74, v75, v76, v77);
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v149);
}

void JSC::B3::generate(JSC::B3::Air::GenerateAndAllocateRegisters ***this, JSC::B3::Procedure *a2, JSC::CCallHelpers *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Air::generate(this[20], a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::dataLog<char const*,char [13]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "b3  ");
  WTF::PrintStream::printf(v2, "%s", "Initial B3:\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<JSC::B3::Procedure>(JSC::B3::Procedure *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::B3::Procedure::dump(a1, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::B3::hoistLoopInvariantValues(WTF **this, JSC::B3::Procedure *a2)
{
  JSC::B3::Procedure *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  unsigned int **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int **v45;
  unsigned int **v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int **v58;
  unsigned int **v59;
  WTF **v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  uint64_t *v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  int8x16_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF **v103;
  uint64_t v104;
  WTF *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  int8x16_t *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  _BYTE *v124;
  unsigned int v125;
  uint64_t v126;
  WTF *v127;
  unsigned int *v128;
  unsigned int v129;
  uint64_t v130;
  WTF *v131;
  unsigned int v132;
  char *v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  BOOL v138;
  unsigned int v140;
  BOOL v141;
  BOOL v142;
  unint64_t v144;
  unint64_t v145;
  int8x16_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _DWORD *v152;
  uint64_t v153;
  unint64_t v155;
  unint64_t v156;
  WTF *v157;
  uint64_t v158;
  WTF *v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  uint64_t *v163;
  unsigned int *v164;
  uint64_t *v165;
  uint64_t *v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int v169;
  WTF *v170;
  unsigned int v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  char *v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  WTF *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  WTF *v188;
  WTF *v189;
  char *v190;
  int v191;
  unsigned int v192;
  WTF *__src;
  WTF *v194;
  uint64_t v195;
  WTF **v196;
  WTF **v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  WTF *v201;
  uint64_t v202;
  WTF *v203;
  int v204;
  unsigned int v205;
  _QWORD v206[3];
  uint64_t v207;
  WTF *v208;
  WTF *v209;
  uint64_t v210;
  _BYTE v211[95];
  char v212[9];

  JSC::B3::PhaseScope::PhaseScope((uint64_t)v206, this, (uint64_t)"hoistLoopInvariantValues", 25);
  JSC::B3::ensureLoopPreHeaders((JSC::B3 *)this, v3);
  v4 = JSC::B3::Procedure::naturalLoops((JSC::B3::Procedure *)this);
  if (!*(_DWORD *)(v4 + 20))
    goto LABEL_279;
  v12 = v4;
  v13 = *((unsigned int *)this + 15);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = this[6];
    while (!*((_QWORD *)v15 + v14))
    {
      if (v13 == ++v14)
        goto LABEL_19;
    }
    if ((_DWORD)v13 != (_DWORD)v14)
    {
      v14 = v14;
      do
      {
        if (v13 <= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x197F9DE6CLL);
        }
        v16 = *((_QWORD *)v15 + v14);
        v17 = *(unsigned int *)(v16 + 20);
        if ((_DWORD)v17)
        {
          v18 = *(uint64_t **)(v16 + 8);
          v19 = 8 * v17;
          do
          {
            v20 = *v18++;
            *(_QWORD *)(v20 + 32) = v16;
            v19 -= 8;
          }
          while (v19);
        }
        if (v13 > ++v14)
        {
          while (!*((_QWORD *)v15 + v14))
          {
            if (v13 == ++v14)
              goto LABEL_19;
          }
          v14 = v14;
        }
      }
      while (v13 != v14);
    }
  }
LABEL_19:
  v21 = JSC::B3::Procedure::dominators((JSC::B3::Procedure *)this);
  v196 = this;
  v197 = JSC::B3::Procedure::backwardsDominators((JSC::B3::Procedure *)this);
  v29 = *(_DWORD *)(v12 + 20);
  memset(&v211[64], 0, 24);
  memset(v211, 0, 64);
  v209 = (WTF *)v211;
  v210 = 8;
  v211[64] = 1;
  v195 = v12;
  v192 = v29;
  if (v29)
  {
    if (v29 >= 0x2762763)
      goto LABEL_313;
    v30 = v29;
    v31 = WTF::fastMalloc((WTF *)(104 * v29));
    v32 = v31;
    do
    {
      v33 = HIDWORD(v210);
      v34 = (_QWORD *)(v32 + 16);
      *(_QWORD *)v32 = v32 + 16;
      *(_DWORD *)(v32 + 8) = 8;
      *(_DWORD *)(v32 + 12) = v33;
      if (v33 >= 9)
      {
        if (v33 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x197F9DEF4);
        }
        v34 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v33));
        *(_DWORD *)(v32 + 8) = v33;
        *(_QWORD *)v32 = v34;
      }
      if (HIDWORD(v210))
      {
        v35 = v209;
        v36 = 8 * HIDWORD(v210);
        do
        {
          v37 = *(_QWORD *)v35;
          v35 = (WTF *)((char *)v35 + 8);
          *v34++ = v37;
          v36 -= 8;
        }
        while (v36);
      }
      *(_BYTE *)(v32 + 80) = v211[64];
      *(_OWORD *)(v32 + 88) = *(_OWORD *)&v211[72];
      v32 += 104;
    }
    while (v32 != v31 + 104 * v30);
    v38 = v209;
    if (v211 != (_BYTE *)v209 && v209 != 0)
    {
      v209 = 0;
      LODWORD(v210) = 0;
      WTF::fastFree((unint64_t)v38, v22, v23, v24, v25, v26, v27, v28);
    }
    v12 = v195;
  }
  else
  {
    v31 = 0;
  }
  v40 = *(unsigned int *)(v12 + 20);
  if ((_DWORD)v40)
  {
    v41 = *(_QWORD *)(v12 + 8);
    v42 = *(_DWORD *)(v12 + 20);
    do
    {
      v43 = *(_QWORD *)(v41 + 72 * --v42 + 8);
      v44 = *(unsigned int *)(v43 + 36);
      if ((_DWORD)v44)
      {
        v45 = *(unsigned int ***)(v43 + 24);
        v46 = &v45[v44];
        v47 = v41 + 72 * v42;
        v48 = *(unsigned int *)(v47 + 28);
        v49 = (unsigned int *)(v47 + 68);
        if (v48 < 4)
        {
          v50 = (_QWORD *)(v47 + 16);
          v51 = 8 * v48;
          while (1)
          {
            v52 = *v45;
            v22 = (unsigned int **)(*v50 - 8);
            v23 = v51;
            while (v23)
            {
              v24 = *(uint64_t *)((char *)v22 + v23);
              v23 -= 8;
              if ((unsigned int *)v24 == v52)
                goto LABEL_49;
            }
            v53 = v31 + 104 * *v49;
            v54 = *(_QWORD *)(v53 + 96);
            v22 = (unsigned int **)(v53 + 96);
            v23 = v54;
            if (v54)
              break;
            *v22 = v52;
LABEL_49:
            if (++v45 == v46)
              goto LABEL_61;
          }
LABEL_313:
          __break(0xC471u);
          JUMPOUT(0x197F9DE10);
        }
        v55 = *(_QWORD *)(v12 + 312);
        do
        {
          v56 = *(unsigned int *)(v55 + 8 * **v45);
          if ((_DWORD)v56 == -1)
          {
LABEL_58:
            v57 = v31 + 104 * *v49;
            v59 = *(unsigned int ***)(v57 + 96);
            v58 = (unsigned int **)(v57 + 96);
            v22 = v59;
            if (v59)
              goto LABEL_313;
            *v58 = *v45;
          }
          else
          {
            if (v40 <= v56)
            {
              __break(0xC471u);
              JUMPOUT(0x197F9DE5CLL);
            }
            while (v56 != v42)
            {
              v56 = *(unsigned int *)(v41 + 72 * v56 + 64);
              if ((_DWORD)v56 == -1)
                goto LABEL_58;
              if (v40 <= v56)
              {
                __break(0xC471u);
                JUMPOUT(0x197F9DE64);
              }
            }
          }
          ++v45;
        }
        while (v45 != v46);
      }
LABEL_61:
      ;
    }
    while (v42);
  }
  v60 = this;
  v61 = *((unsigned int *)this + 15);
  if (!(_DWORD)v61)
  {
    v63 = 0;
    if (!v40)
      goto LABEL_162;
    while (1)
    {
LABEL_116:
      LODWORD(v40) = v40 - 1;
      v91 = *(_DWORD *)(v12 + 20);
      if (v91 <= v40)
      {
        __break(0xC471u);
        JUMPOUT(0x197F9DE9CLL);
      }
      v92 = *(_QWORD *)(v12 + 8);
      v93 = *(_DWORD *)(v92 + 72 * v40 + 64);
      if (v93 != -1)
        break;
LABEL_118:
      if (!(_DWORD)v40)
      {
        v63 = *((_DWORD *)v60 + 15);
        goto LABEL_162;
      }
    }
    if (v91 <= v93)
    {
      __break(0xC471u);
      JUMPOUT(0x197F9DED4);
    }
    v94 = v92 + 72 * v93;
    v95 = v92 + 72 * v40;
    v98 = *(_DWORD *)(v95 + 68);
    v97 = (unsigned int *)(v95 + 68);
    v96 = v98;
    while (1)
    {
      v99 = *(_DWORD *)(v94 + 68);
      v100 = v31 + 104 * v96;
      v101 = *(unsigned int *)(v100 + 12);
      if ((_DWORD)v101)
        break;
LABEL_158:
      v123 = (_BYTE *)(v31 + 104 * v96);
      v124 = (_BYTE *)(v31 + 104 * v99);
      v124[88] |= v123[88];
      v124[89] |= v123[89];
      v124[90] |= v123[90];
      v125 = *(_DWORD *)(v94 + 64);
      if (v125 != -1)
      {
        if (*(_DWORD *)(v12 + 20) <= v125)
        {
          __break(0xC471u);
          JUMPOUT(0x197F9DEECLL);
        }
        v126 = *(_QWORD *)(v12 + 8);
        v94 = v126 + 72 * v125;
        if (v126)
          continue;
      }
      goto LABEL_118;
    }
    v102 = v31 + 104 * v99;
    v103 = *(WTF ***)v100;
    v104 = *(_QWORD *)v100 + 8 * v101;
    while (1)
    {
      v105 = *v103;
      v209 = v105;
      if ((_DWORD)v105 != HIDWORD(v105))
      {
        v106 = *(unsigned int *)(v102 + 12);
        if (!(_DWORD)v106)
        {
          v111 = 0;
LABEL_132:
          *(_BYTE *)(v102 + 80) = 0;
          v112 = *(unsigned int *)(v102 + 8);
          if (v111 + 1 >= v112)
          {
            if ((_DWORD)v106 == (_DWORD)v112)
              *(_QWORD *)(*(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 12)) = *(_QWORD *)WTF::Vector<WTF::Range<unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v102, (void *)(v106 + 1), (unint64_t)&v209, v24, v25, v26, v27, v28);
            else
              *(_QWORD *)(*(_QWORD *)v102 + 8 * v111) = v105;
            v114 = (*(_DWORD *)(v102 + 12) + 1);
            *(_DWORD *)(v102 + 12) = v114;
            v60 = v196;
            if (!*(_BYTE *)(v102 + 80))
            {
              if ((_DWORD)v114)
              {
                std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,false>(*(int8x16_t **)v102, (int8x16_t *)(*(_QWORD *)v102 + 8 * v114), (uint64_t)&v203, 126 - 2 * __clz(v114), 1);
                v115 = *(unsigned int *)(v102 + 12);
                if ((_DWORD)v115 == 1)
                {
                  LODWORD(v116) = 1;
                }
                else
                {
                  if (!*(_DWORD *)(v102 + 12))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197F9DEDCLL);
                  }
                  v117 = *(int8x16_t **)v102;
                  v118 = 1;
                  v116 = 1;
                  do
                  {
                    v119 = *(_QWORD *)(*(_QWORD *)v102 + 8 * v118);
                    v120 = v117->u32[1];
                    if (v120 < HIDWORD(v119))
                    {
                      if (v120 >= v119)
                      {
                        v121 = HIDWORD(v119);
                        v122 = v117->u32[0];
                        if (v122 == v121)
                        {
                          v121 = 0;
                          v122 = 0;
                        }
                        v117->i64[0] = v122 | (v121 << 32);
                      }
                      else
                      {
                        if (v115 <= v116)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x197F9DEE4);
                        }
                        v117 = (int8x16_t *)(*(_QWORD *)v102 + 8 * v116++);
                        v117->i64[0] = v119;
                      }
                    }
                    ++v118;
                    v115 = *(unsigned int *)(v102 + 12);
                  }
                  while (v118 < v115);
                }
                *(_DWORD *)(v102 + 12) = v116;
              }
              *(_BYTE *)(v102 + 80) = 1;
              v60 = v196;
            }
          }
          else
          {
            if ((_DWORD)v106 == (_DWORD)v112)
            {
              v113 = (_QWORD *)WTF::Vector<WTF::Range<unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v102, (void *)(v106 + 1), (unint64_t)&v209, v24, v25, v26, v27, v28);
              v60 = v196;
              *(_QWORD *)(*(_QWORD *)v102 + 8 * *(unsigned int *)(v102 + 12)) = *v113;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v102 + 8 * v111) = v105;
            }
            ++*(_DWORD *)(v102 + 12);
          }
          goto LABEL_136;
        }
        v107 = *(_QWORD *)v102 + 8 * v106;
        v109 = *(_DWORD *)(v107 - 8);
        v108 = *(_DWORD *)(v107 - 4);
        if (v109 > v105 || v108 < HIDWORD(v105))
        {
          v111 = *(unsigned int *)(v102 + 12);
          goto LABEL_132;
        }
      }
LABEL_136:
      if (++v103 == (WTF **)v104)
      {
        v96 = *v97;
        v99 = *(_DWORD *)(v94 + 68);
        v12 = v195;
        goto LABEL_158;
      }
    }
  }
  v62 = 0;
  while (!*((_QWORD *)v196[6] + v62))
  {
    if (v61 == ++v62)
      goto LABEL_68;
  }
  if ((_DWORD)v61 == (_DWORD)v62)
  {
LABEL_68:
    v63 = *((_DWORD *)v196 + 15);
    if (v40)
      goto LABEL_116;
    goto LABEL_162;
  }
  v63 = *((_DWORD *)v196 + 15);
  do
  {
    if (v63 <= v62)
    {
      __break(0xC471u);
      JUMPOUT(0x197F9DEA4);
    }
    v64 = (unsigned int *)*((_QWORD *)v60[6] + v62);
    v65 = *(_DWORD *)(*(_QWORD *)(v12 + 312) + 8 * *v64);
    if (v65 != -1)
    {
      if (*(_DWORD *)(v12 + 20) <= v65)
      {
        __break(0xC471u);
        JUMPOUT(0x197F9DEB4);
      }
      v66 = *(_QWORD *)(v12 + 8);
      if (v66)
      {
        v67 = v64[5];
        if ((_DWORD)v67)
        {
          v68 = (uint64_t *)*((_QWORD *)v64 + 1);
          v69 = &v68[v67];
          v70 = (unsigned int *)(v66 + 72 * v65 + 68);
          while (1)
          {
            JSC::B3::Value::effects(*v68, (uint64_t)&v209);
            if ((_DWORD)v210 != HIDWORD(v210))
            {
              v71 = v31 + 104 * *v70;
              v72 = *(unsigned int *)(v71 + 12);
              if (!(_DWORD)v72)
              {
                v77 = 0;
LABEL_85:
                *(_BYTE *)(v71 + 80) = 0;
                v78 = *(unsigned int *)(v71 + 8);
                if (v77 + 1 >= v78)
                {
                  v199 = v71;
                  if ((_DWORD)v72 == (_DWORD)v78)
                  {
                    v81 = (uint64_t *)WTF::Vector<WTF::Range<unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v71, (void *)(v72 + 1), (unint64_t)&v210, v24, v25, v26, v27, v28);
                    v80 = (uint64_t *)(*(_QWORD *)v199 + 8 * *(unsigned int *)(v199 + 12));
                  }
                  else
                  {
                    v80 = (uint64_t *)(*(_QWORD *)v71 + 8 * v77);
                    v81 = &v210;
                  }
                  *v80 = *v81;
                  v82 = (*(_DWORD *)(v199 + 12) + 1);
                  *(_DWORD *)(v199 + 12) = v82;
                  if (!*(_BYTE *)(v199 + 80))
                  {
                    if ((_DWORD)v82)
                    {
                      std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,false>(*(int8x16_t **)v199, (int8x16_t *)(*(_QWORD *)v199 + 8 * v82), (uint64_t)&v203, 126 - 2 * __clz(v82), 1);
                      v83 = *(unsigned int *)(v199 + 12);
                      if ((_DWORD)v83 == 1)
                      {
                        LODWORD(v84) = 1;
                      }
                      else
                      {
                        if (!*(_DWORD *)(v199 + 12))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x197F9DEC4);
                        }
                        v85 = *(int8x16_t **)v199;
                        v86 = 1;
                        v84 = 1;
                        do
                        {
                          v87 = *(_QWORD *)(*(_QWORD *)v199 + 8 * v86);
                          v88 = v85->u32[1];
                          if (v88 < HIDWORD(v87))
                          {
                            if (v88 >= v87)
                            {
                              v89 = HIDWORD(v87);
                              v90 = v85->u32[0];
                              if (v90 == v89)
                              {
                                v89 = 0;
                                v90 = 0;
                              }
                              v85->i64[0] = v90 | (v89 << 32);
                            }
                            else
                            {
                              if (v83 <= v84)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x197F9DECCLL);
                              }
                              v85 = (int8x16_t *)(*(_QWORD *)v199 + 8 * v84++);
                              v85->i64[0] = v87;
                            }
                          }
                          ++v86;
                          v83 = *(unsigned int *)(v199 + 12);
                        }
                        while (v86 < v83);
                      }
                      *(_DWORD *)(v199 + 12) = v84;
                    }
                    *(_BYTE *)(v199 + 80) = 1;
                  }
                }
                else if ((_DWORD)v72 == (_DWORD)v78)
                {
                  v198 = v71;
                  *(_QWORD *)(*(_QWORD *)v71 + 8 * *(unsigned int *)(v71 + 12)) = *(_QWORD *)WTF::Vector<WTF::Range<unsigned int>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v71, (void *)(v72 + 1), (unint64_t)&v210, v24, v25, v26, v27, v28);
                  ++*(_DWORD *)(v198 + 12);
                }
                else
                {
                  *(_QWORD *)(*(_QWORD *)v71 + 8 * v77) = v210;
                  ++*(_DWORD *)(v71 + 12);
                }
                goto LABEL_88;
              }
              v73 = *(_QWORD *)v71 + 8 * v72;
              v75 = *(_DWORD *)(v73 - 8);
              v74 = *(_DWORD *)(v73 - 4);
              if (v75 > v210 || v74 < HIDWORD(v210))
              {
                v77 = *(unsigned int *)(v71 + 12);
                goto LABEL_85;
              }
            }
LABEL_88:
            v79 = (_BYTE *)(v31 + 104 * *v70);
            v79[88] |= BYTE3(v209);
            v79[89] |= BYTE6(v209);
            v79[90] |= BYTE1(v209);
            if (++v68 == v69)
            {
              v60 = v196;
              v63 = *((_DWORD *)v196 + 15);
              v12 = v195;
              break;
            }
          }
        }
      }
    }
    v62 = (v62 + 1);
    if (v63 > v62)
    {
      while (!*((_QWORD *)v60[6] + v62))
      {
        if (v63 == ++v62)
        {
          LODWORD(v62) = v63;
          break;
        }
      }
    }
  }
  while ((_DWORD)v61 != (_DWORD)v62);
  LODWORD(v40) = *(_DWORD *)(v12 + 20);
  if ((_DWORD)v40)
    goto LABEL_116;
LABEL_162:
  if (!v63)
  {
    __break(0xC471u);
    JUMPOUT(0x197F9DEFCLL);
  }
  JSC::B3::blocksInPreOrder<JSC::B3::BasicBlock>(*(unsigned int **)v60[6], v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v203);
  v127 = v203;
  if (v205)
  {
    v194 = (WTF *)((char *)v203 + 8 * v205);
    while (1)
    {
      v128 = *(unsigned int **)v127;
      v201 = 0;
      v202 = 0;
      v129 = *(_DWORD *)(*(_QWORD *)(v12 + 312) + 8 * *v128);
      if (v129 != -1)
      {
        if (*(_DWORD *)(v12 + 20) <= v129)
        {
          __break(0xC471u);
          JUMPOUT(0x197F9DEACLL);
        }
        v130 = *(_QWORD *)(v12 + 8);
        v131 = (WTF *)(v130 + 72 * v129);
        v209 = v131;
        if (v130)
        {
          v132 = 0;
          do
          {
            if (v132 == (_DWORD)v202)
            {
              v133 = WTF::Vector<JSC::B3::MemoryValue *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v201, v132 + 1, (unint64_t)&v209);
              v132 = HIDWORD(v202);
              *((_QWORD *)v201 + HIDWORD(v202)) = *(_QWORD *)v133;
            }
            else
            {
              *((_QWORD *)v201 + v132) = v131;
            }
            HIDWORD(v202) = ++v132;
            v134 = *((_DWORD *)v209 + 16);
            if (v134 == -1)
              break;
            if (*(_DWORD *)(v12 + 20) <= v134)
            {
              __break(0xC471u);
              JUMPOUT(0x197F9DEBCLL);
            }
            v135 = *(_QWORD *)(v12 + 8);
            v131 = (WTF *)(v135 + 72 * v134);
            v209 = v131;
          }
          while (v135);
          if (v132)
          {
            v136 = v128[5];
            if ((_DWORD)v136)
              break;
          }
        }
      }
LABEL_262:
      v183 = v201;
      if (v201)
      {
        v201 = 0;
        LODWORD(v202) = 0;
        WTF::fastFree((unint64_t)v183, v5, v6, v7, v8, v9, v10, v11);
      }
      v127 = (WTF *)((char *)v127 + 8);
      v12 = v195;
      if (v127 == v194)
      {
        v127 = v203;
        goto LABEL_266;
      }
    }
    v137 = (uint64_t *)*((_QWORD *)v128 + 1);
    v200 = &v137[v136];
    while (1)
    {
      JSC::B3::Value::effects(*v137, (uint64_t)&v209);
      v138 = !(_BYTE)v209 && BYTE1(v209) == 0;
      if (v138 && BYTE3(v209) == 0)
      {
        v140 = HIDWORD(v202);
        v141 = (_DWORD)v210 == HIDWORD(v210) && BYTE6(v209) == 0;
        v142 = v141 && HIBYTE(v209) == 0;
        if (v142 && HIDWORD(v202) != 0)
          break;
      }
LABEL_261:
      if (++v137 == v200)
        goto LABEL_262;
    }
    while (2)
    {
      if (HIDWORD(v202) <= --v140)
      {
        __break(0xC471u);
        JUMPOUT(0x197F9DE54);
      }
      v160 = *((_QWORD *)v201 + v140);
      v161 = JSC::B3::Value::children((JSC::B3::Value *)*v137);
      if ((void *)v161 != v5)
      {
        v162 = *(unsigned int **)(v31 + 104 * *(unsigned int *)(v160 + 68) + 96);
        v163 = v21[1];
        while (1)
        {
          v164 = *(unsigned int **)(*(_QWORD *)v161 + 32);
          if (v164 != v162)
          {
            v165 = &v163[4 * *v162];
            v166 = &v163[4 * *v164];
            if (*((_DWORD *)v165 + 6) <= *((_DWORD *)v166 + 6) || *((_DWORD *)v165 + 7) >= *((_DWORD *)v166 + 7))
              break;
          }
          v161 += 8;
          if ((void *)v161 == v5)
            goto LABEL_239;
        }
LABEL_260:
        if (!v140)
          goto LABEL_261;
        continue;
      }
      break;
    }
LABEL_239:
    if (BYTE2(v209))
    {
      v167 = *(_DWORD *)(v160 + 68);
      v168 = *(unsigned int **)(v31 + 104 * v167 + 96);
      if (v128 != v168)
      {
        v169 = *v168;
        v170 = v197[1];
        if (*((_DWORD *)v170 + 10 * v169 + 8) <= *((_DWORD *)v170 + 10 * *v128 + 8)
          || *((_DWORD *)v170 + 10 * v169 + 9) >= *((_DWORD *)v170 + 10 * *v128 + 9))
        {
          goto LABEL_260;
        }
      }
      if (*(_BYTE *)(v31 + 104 * v167 + 90))
        goto LABEL_260;
    }
    v171 = *(_DWORD *)(v160 + 68);
    if (BYTE5(v209))
    {
      if (*(_BYTE *)(v31 + 104 * v171 + 89))
        goto LABEL_260;
    }
    if (BYTE4(v209) && *(_BYTE *)(v31 + 104 * v171 + 88))
      goto LABEL_260;
    if (*(_DWORD *)v211 != *(_DWORD *)&v211[4])
    {
      v172 = v31 + 104 * v171;
      v145 = *(unsigned int *)(v172 + 12);
      if (*(_BYTE *)(v172 + 80))
      {
        if (!*(_DWORD *)(v172 + 12))
          goto LABEL_251;
      }
      else
      {
        if (*(_DWORD *)(v172 + 12))
        {
          std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned int>>::compact(void)::{lambda(WTF::Range<unsigned int> const&,WTF::Range<unsigned int> const&)#1} &,WTF::Range<unsigned int>*,false>(*(int8x16_t **)v172, (int8x16_t *)(*(_QWORD *)v172 + 8 * v145), (uint64_t)v212, 126 - 2 * __clz(v145), 1);
          v144 = *(unsigned int *)(v172 + 12);
          if ((_DWORD)v144 == 1)
          {
            v145 = *(unsigned int *)(v172 + 12);
          }
          else
          {
            if (!*(_DWORD *)(v172 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x197F9DE74);
            }
            v146 = *(int8x16_t **)v172;
            v147 = 1;
            v145 = 1;
            do
            {
              v148 = *(_QWORD *)(*(_QWORD *)v172 + 8 * v147);
              v149 = v146->u32[1];
              if (v149 < HIDWORD(v148))
              {
                if (v149 >= v148)
                {
                  v150 = HIDWORD(v148);
                  v151 = v146->u32[0];
                  if (v151 == v150)
                  {
                    v150 = 0;
                    v151 = 0;
                  }
                  v146->i64[0] = v151 | (v150 << 32);
                }
                else
                {
                  if (v144 <= v145)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197F9DE7CLL);
                  }
                  v146 = (int8x16_t *)(*(_QWORD *)v172 + 8 * v145++);
                  v146->i64[0] = v148;
                }
              }
              ++v147;
              v144 = *(unsigned int *)(v172 + 12);
            }
            while (v147 < v144);
          }
          *(_DWORD *)(v172 + 12) = v145;
        }
        *(_BYTE *)(v172 + 80) = 1;
        if (!v145)
          goto LABEL_251;
      }
      v152 = (_DWORD *)(*(_QWORD *)v172 + 4);
      v153 = 0xFFFFFFFFLL;
      while (*(_DWORD *)&v211[4] <= *(v152 - 1) || *v152 <= *(_DWORD *)v211)
      {
        v152 += 2;
        --v153;
        if (!--v145)
          goto LABEL_251;
      }
      if (v153)
        goto LABEL_260;
    }
LABEL_251:
    v173 = *(_QWORD *)(v31 + 104 * *(unsigned int *)(v160 + 68) + 96);
    v174 = *(unsigned int *)(v173 + 20);
    if (!(_DWORD)v174)
    {
      __break(0xC471u);
      JUMPOUT(0x197F9DE8CLL);
    }
    v175 = *v137;
    v176 = (_QWORD *)(*(_QWORD *)(v173 + 8) + 8 * v174);
    v177 = (char *)(v176 - 1);
    if ((_DWORD)v174 == *(_DWORD *)(v173 + 16))
    {
      v177 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v173 + 8), v174 + 1, (unint64_t)v177);
      v174 = *(unsigned int *)(v173 + 20);
      v176 = (_QWORD *)(*(_QWORD *)(v173 + 8) + 8 * v174);
    }
    *v176 = *(_QWORD *)v177;
    v178 = v174 + 1;
    *(_DWORD *)(v173 + 20) = v178;
    if (v178 <= 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197F9DE94);
    }
    *(_QWORD *)(*(_QWORD *)(v173 + 8) + 8 * v178 - 16) = v175;
    *(_QWORD *)(v175 + 32) = v173;
    v179 = *(_QWORD *)(*v137 + 24);
    v180 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v180 = off_1E357F5F0;
    *(_DWORD *)(v180 + 8) = -1;
    *(_WORD *)(v180 + 12) = 0;
    *(_DWORD *)(v180 + 16) = 0;
    *(_BYTE *)(v180 + 20) = 0;
    *(_QWORD *)(v180 + 24) = v179;
    *(_QWORD *)(v180 + 32) = 0;
    v181 = *((unsigned int *)v196 + 23);
    if ((_DWORD)v181)
    {
      v182 = *((_QWORD *)v196[10] + v181 - 1);
      *((_DWORD *)v196 + 23) = v181 - 1;
      v159 = v196[8];
    }
    else
    {
      v182 = *((unsigned int *)v196 + 19);
      if ((_DWORD)v182 == *((_DWORD *)v196 + 18))
      {
        v155 = v182 + (v182 >> 2);
        if (v155 >= 0x10)
          v156 = v155 + 1;
        else
          v156 = 16;
        if (v156 <= v182 + 1)
          v156 = v182 + 1;
        if (v156 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x197F9DE84);
        }
        __src = v196[8];
        v191 = v156;
        v157 = (WTF *)WTF::fastMalloc((WTF *)(8 * v156));
        *((_DWORD *)v196 + 18) = v191;
        v196[8] = v157;
        memcpy(v157, __src, 8 * v182);
        if (__src)
        {
          if (v196[8] == __src)
          {
            v196[8] = 0;
            *((_DWORD *)v196 + 18) = 0;
          }
          WTF::fastFree((unint64_t)__src, v5, v6, v7, v8, v9, v10, v11);
        }
        v158 = *((unsigned int *)v196 + 19);
        v159 = v196[8];
        *((_QWORD *)v159 + v158) = 0;
        *((_DWORD *)v196 + 19) = v158 + 1;
      }
      else
      {
        v159 = v196[8];
        *((_QWORD *)v159 + v182) = 0;
        *((_DWORD *)v196 + 19) = v182 + 1;
      }
    }
    *(_DWORD *)(v180 + 8) = v182;
    *((_QWORD *)v159 + v182) = v180;
    *v137 = v180;
    goto LABEL_260;
  }
LABEL_266:
  if (v127)
  {
    v203 = 0;
    v204 = 0;
    WTF::fastFree((unint64_t)v127, v5, v6, v7, v8, v9, v10, v11);
    if (v192)
      goto LABEL_270;
  }
  else
  {
    if (!v192)
      goto LABEL_277;
LABEL_270:
    v184 = 104 * v192;
    v185 = v31 + 16;
    do
    {
      v186 = *(_QWORD *)(v185 - 16);
      if (v185 != v186 && v186 != 0)
      {
        *(_QWORD *)(v185 - 16) = 0;
        *(_DWORD *)(v185 - 8) = 0;
        WTF::fastFree(v186, v5, v6, v7, v8, v9, v10, v11);
      }
      v185 += 104;
      v184 -= 104;
    }
    while (v184);
  }
LABEL_277:
  if (v31)
    WTF::fastFree(v31, v5, v6, v7, v8, v9, v10, v11);
LABEL_279:
  v188 = (WTF *)v206[0];
  *(_QWORD *)(v206[0] + 144) = v206[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v208)
      v190 = (char *)v208 + 16;
    else
      v190 = 0;
    v209 = v188;
    v210 = (uint64_t)v190;
  }
  v189 = v208;
  v208 = 0;
  if (v189)
  {
    if (*(_DWORD *)v189 == 1)
      WTF::fastFree((unint64_t)v189, v5, v6, v7, v8, v9, v10, v11);
    else
      --*(_DWORD *)v189;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v207);
}

void JSC::B3::legalizeMemoryOffsets(WTF **this, JSC::B3::Procedure *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t i;
  uint64_t v15;
  BOOL v16;
  WTF *v17;
  const char *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  __int128 v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  __int128 *v50;
  JSC::B3 *v51;
  int v52;
  WTF *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  JSC::B3 *v58;
  WTF *v59;
  uint64_t v60;
  _BYTE v61[176];
  uint64_t v62;
  _QWORD v63[3];
  uint64_t v64;
  _DWORD *v65;
  __int128 v66;

  JSC::B3::PhaseScope::PhaseScope((uint64_t)v63, this, (uint64_t)"legalizeMemoryOffsets", 22);
  v57 = (const char *)this;
  v58 = (JSC::B3 *)this;
  v59 = (WTF *)v61;
  v60 = 8;
  memset(&v61[128], 0, 48);
  v62 = 0;
  v10 = *((unsigned int *)this + 15);
  if ((_DWORD)v10)
  {
    v11 = 0;
    while (!*((_QWORD *)this[6] + v11))
    {
      if (v10 == ++v11)
        goto LABEL_29;
    }
    if ((_DWORD)v10 != (_DWORD)v11)
    {
      LODWORD(v12) = *((_DWORD *)this + 15);
      do
      {
        if (v12 <= v11)
        {
LABEL_61:
          __break(0xC471u);
          JUMPOUT(0x197F9E2BCLL);
        }
        v13 = *((_QWORD *)this[6] + v11);
        if (*(_DWORD *)(v13 + 20))
        {
          for (i = 0; i < *(unsigned int *)(v13 + 20); ++i)
          {
            v15 = *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * i);
            if (v15)
              v16 = *(unsigned __int8 *)(v15 + 12) - 79 >= 0xFFFFFFF0;
            else
              v16 = 0;
            if (v16
              && (JSC::B3::MemoryValue::isLegalOffset<int,void,void>(*(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * i), *(_DWORD *)(v15 + 40)) & 1) == 0)
            {
              v55 = *(_QWORD *)JSC::B3::MemoryValue::lastChild((JSC::B3::MemoryValue *)v15);
              v21 = JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>((uint64_t)v58, *(_QWORD *)(v15 + 24), *(int *)(v15 + 40));
              v26 = v21;
              *(_QWORD *)&v66 = i;
              *((_QWORD *)&v66 + 1) = v21;
              v27 = HIDWORD(v60);
              if (HIDWORD(v60) == (_DWORD)v60)
              {
                v48 = v21;
                v49 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v59, (void *)(HIDWORD(v60) + 1), (unint64_t)&v66, v21, v22, v23, v24, v25);
                v26 = v48;
                v27 = HIDWORD(v60);
                v28 = v59;
                v29 = *v49;
              }
              else
              {
                v28 = v59;
                v29 = v66;
              }
              *((_OWORD *)v28 + v27) = v29;
              ++HIDWORD(v60);
              v30 = v57;
              v56 = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(14, *(_QWORD *)(v15 + 24), v55, v26);
              v36 = *((unsigned int *)v57 + 23);
              if ((_DWORD)v36)
              {
                v37 = *(_QWORD *)(*((_QWORD *)v57 + 10) + 8 * v36 - 8);
                *((_DWORD *)v57 + 23) = v36 - 1;
                v38 = *((_QWORD *)v30 + 8);
              }
              else
              {
                v37 = *((unsigned int *)v57 + 19);
                if ((_DWORD)v37 == *((_DWORD *)v57 + 18))
                {
                  v42 = v37 + (v37 >> 2);
                  if (v42 >= 0x10)
                    v43 = v42 + 1;
                  else
                    v43 = 16;
                  if (v43 <= v37 + 1)
                    v43 = v37 + 1;
                  v54 = *((unsigned int *)v57 + 19);
                  if (v43 >> 29)
                    goto LABEL_61;
                  v52 = v43;
                  v53 = (WTF *)*((_QWORD *)v57 + 8);
                  v44 = (void *)WTF::fastMalloc((WTF *)(8 * v43));
                  *((_DWORD *)v57 + 18) = v52;
                  *((_QWORD *)v30 + 8) = v44;
                  memcpy(v44, v53, 8 * v54);
                  if (v53)
                  {
                    if (*((WTF **)v30 + 8) == v53)
                    {
                      *((_QWORD *)v30 + 8) = 0;
                      *((_DWORD *)v30 + 18) = 0;
                    }
                    WTF::fastFree((unint64_t)v53, v45, v46, v31, v32, v33, v34, v35);
                  }
                  v47 = *((unsigned int *)v30 + 19);
                  v38 = *((_QWORD *)v30 + 8);
                  *(_QWORD *)(v38 + 8 * v47) = 0;
                  *((_DWORD *)v30 + 19) = v47 + 1;
                  v37 = v54;
                }
                else
                {
                  v38 = *((_QWORD *)v57 + 8);
                  *(_QWORD *)(v38 + 8 * v37) = 0;
                  *((_DWORD *)v30 + 19) = v37 + 1;
                }
              }
              *(_DWORD *)(v56 + 8) = v37;
              *(_QWORD *)(v38 + 8 * v37) = v56;
              *(_QWORD *)&v66 = i;
              *((_QWORD *)&v66 + 1) = v56;
              v39 = HIDWORD(v60);
              if (HIDWORD(v60) == (_DWORD)v60)
              {
                v50 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v59, (void *)(HIDWORD(v60) + 1), (unint64_t)&v66, v31, v32, v33, v34, v35);
                v39 = HIDWORD(v60);
                v40 = v59;
                v41 = *v50;
              }
              else
              {
                v40 = v59;
                v41 = v66;
              }
              *((_OWORD *)v40 + v39) = v41;
              ++HIDWORD(v60);
              *(_QWORD *)JSC::B3::MemoryValue::lastChild((JSC::B3::MemoryValue *)v15) = v56;
              *(_DWORD *)(v15 + 40) = 0;
            }
          }
        }
        JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v58, (JSC::B3::BasicBlock *)v13);
        v11 = (v11 + 1);
        v12 = *((unsigned int *)this + 15);
        if (v12 > v11)
        {
          while (!*((_QWORD *)this[6] + v11))
          {
            if (v12 == ++v11)
            {
              LODWORD(v11) = *((_DWORD *)this + 15);
              break;
            }
          }
        }
      }
      while ((_DWORD)v10 != (_DWORD)v11);
      v17 = v59;
      if (v61 != (_BYTE *)v59 && v59 != 0)
      {
        v59 = 0;
        LODWORD(v60) = 0;
        WTF::fastFree((unint64_t)v17, v3, v4, v5, v6, v7, v8, v9);
      }
    }
  }
LABEL_29:
  v19 = (const char *)v63[0];
  *(_QWORD *)(v63[0] + 144) = v63[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v65)
      v51 = (JSC::B3 *)(v65 + 4);
    else
      v51 = 0;
    v57 = v19;
    v58 = v51;
  }
  v20 = v65;
  v65 = 0;
  if (v20)
  {
    if (*v20 == 1)
      WTF::fastFree((unint64_t)v20, v3, v4, v5, v6, v7, v8, v9);
    else
      --*v20;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v64);
}

uint64_t WTF::dataLog<char [10],char const*,char [22]>(const char **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "B3 after ");
  WTF::PrintStream::printf(v4, "%s", *a1);
  WTF::PrintStream::printf(v4, "%s", ", before generation:\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t JSC::B3::InsertionSet::insertIntConstant(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  JSC::B3::Value *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t result;
  __int128 *v21;
  __int128 v22;

  v7 = *(JSC::B3::Value **)a1;
  if (a4 >= 0x80000000)
    v8 = 0x80000000;
  else
    v8 = a4;
  switch(v8)
  {
    case 1u:
      v9 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v7, a3, a5);
      break;
    case 2u:
      v9 = JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>((uint64_t)v7, a3, a5);
      break;
    case 3u:
      v9 = (uint64_t)JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(v7, a3, (float)a5);
      break;
    case 4u:
      v9 = JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)v7, a3, (double)a5);
      break;
    default:
      result = 129;
      __break(0xC471u);
      return result;
  }
  v15 = v9;
  *(_QWORD *)&v22 = a2;
  *((_QWORD *)&v22 + 1) = v9;
  v16 = (uint64_t *)(a1 + 8);
  v17 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v17 == *(_DWORD *)(a1 + 16))
  {
    v21 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, (void *)(v17 + 1), (unint64_t)&v22, v10, v11, v12, v13, v14);
    v17 = *(unsigned int *)(a1 + 20);
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *v21;
  }
  else
  {
    v18 = *v16;
    v19 = v22;
  }
  *(_OWORD *)(v18 + 16 * v17) = v19;
  ++*(_DWORD *)(a1 + 20);
  return v15;
}

uint64_t JSC::B3::InsertionSet::insertIntConstant(JSC::B3::Value **this, uint64_t a2, JSC::B3::Value *a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  JSC::B3::Value *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::B3::Value **v16;
  uint64_t v17;
  JSC::B3::Value *v18;
  __int128 v19;
  uint64_t result;
  __int128 *v21;
  __int128 v22;

  v6 = *((_QWORD *)a3 + 3);
  v7 = *((_DWORD *)a3 + 4);
  v8 = *this;
  if (v7 >= 0x80000000)
    v7 = 0x80000000;
  switch(v7)
  {
    case 1u:
      v9 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v8, v6, a4);
      break;
    case 2u:
      v9 = JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>((uint64_t)v8, v6, a4);
      break;
    case 3u:
      v9 = (uint64_t)JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(v8, v6, (float)a4);
      break;
    case 4u:
      v9 = JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)v8, v6, (double)a4);
      break;
    default:
      result = 129;
      __break(0xC471u);
      return result;
  }
  v15 = v9;
  *(_QWORD *)&v22 = a2;
  *((_QWORD *)&v22 + 1) = v9;
  v16 = this + 1;
  v17 = *((unsigned int *)this + 5);
  if ((_DWORD)v17 == *((_DWORD *)this + 4))
  {
    v21 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, (void *)(v17 + 1), (unint64_t)&v22, v10, v11, v12, v13, v14);
    v17 = *((unsigned int *)this + 5);
    v18 = this[1];
    v19 = *v21;
  }
  else
  {
    v18 = *v16;
    v19 = v22;
  }
  *((_OWORD *)v18 + v17) = v19;
  ++*((_DWORD *)this + 5);
  return v15;
}

JSC::B3::Value *JSC::B3::InsertionSet::insertBottom(JSC::B3::Value **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  JSC::B3::Value *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a4 & 0x80000000) == 0)
    __asm { BR              X10 }
  v6 = (JSC::B3::Value *)JSC::B3::Procedure::addBottom(*a1, a3, a4);
  return JSC::B3::InsertionSet::insertValue((JSC::B3::InsertionSet *)a1, a2, v6, v7, v8, v9, v10, v11);
}

void sub_197F9E6CC()
{
  JUMPOUT(0x197F9E5FCLL);
}

uint64_t JSC::B3::InsertionSet::insertClone(JSC::B3::Procedure **this, uint64_t a2, JSC::B3::Value *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  JSC::B3::Procedure **v11;
  uint64_t v12;
  JSC::B3::Procedure *v13;
  __int128 v14;
  __int128 *v16;
  __int128 v17;

  v10 = JSC::B3::Procedure::clone(*this, a3);
  *(_QWORD *)&v17 = a2;
  *((_QWORD *)&v17 + 1) = v10;
  v11 = this + 1;
  v12 = *((unsigned int *)this + 5);
  if ((_DWORD)v12 == *((_DWORD *)this + 4))
  {
    v16 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, (void *)(v12 + 1), (unint64_t)&v17, v5, v6, v7, v8, v9);
    v12 = *((unsigned int *)this + 5);
    v13 = this[1];
    v14 = *v16;
  }
  else
  {
    v13 = *v11;
    v14 = v17;
  }
  *((_OWORD *)v13 + v12) = v14;
  ++*((_DWORD *)this + 5);
  return v10;
}

double JSC::B3::InsertionSet::execute(JSC::B3::InsertionSet *this, JSC::B3::BasicBlock *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  const void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;

  v4 = *((_QWORD *)this + 1);
  v5 = *((unsigned int *)this + 5);
  v6 = v4 + 16 * v5;
  if ((_DWORD)v5)
  {
    v10 = 16 * v5;
    v11 = (uint64_t *)(v4 + 8);
    do
    {
      v12 = *v11;
      v11 += 2;
      *(_QWORD *)(v12 + 32) = a2;
      v10 -= 16;
    }
    while (v10);
  }
  v7 = (_OWORD *)(v4 + 32);
  do
  {
    if ((unint64_t)(v6 - v4) < 0x11)
      break;
    v22 = 0;
    v23 = (v6 - v4) >> 4;
LABEL_21:
    v24 = 16 * v23;
    do
    {
      --v23;
      v25 = v4 + v24;
      if (*(_QWORD *)(v4 + v24 - 16) < *(_QWORD *)(v4 + v24 - 32))
      {
        v45 = *(_OWORD *)(v25 - 32);
        *(_OWORD *)(v25 - 32) = *(_OWORD *)(v25 - 16);
        *(_OWORD *)(v25 - 16) = v45;
        v22 = 1;
        if (v23 <= 1)
          goto LABEL_25;
        goto LABEL_21;
      }
      v24 -= 16;
    }
    while (v23 > 1);
    if ((v22 & 1) == 0)
      break;
LABEL_25:
    v4 += 16;
    v26 = v6 - v4;
    if ((unint64_t)(v6 - v4) < 0x11)
      break;
    v27 = 0;
    v28 = 1;
    v29 = v7;
    do
    {
      v30 = v29 - 1;
      if (*(_QWORD *)v29 < *((_QWORD *)v29 - 2))
      {
        v31 = *v29;
        *v29 = *v30;
        *v30 = v31;
        v27 = 1;
      }
      v32 = v26 >> 4;
      if ((unint64_t)(v26 >> 4) <= 2)
        v32 = 2;
      ++v28;
      ++v29;
    }
    while (v28 != v32);
    v6 -= 16;
    ++v7;
  }
  while ((v27 & 1) != 0);
  v8 = *((unsigned int *)this + 5);
  if ((_DWORD)v8)
  {
    v13 = *((unsigned int *)a2 + 4);
    v14 = *((unsigned int *)a2 + 5);
    v15 = v14 + v8;
    if (v14 + v8 > v13)
    {
      v33 = v13 + (v13 >> 2);
      if (v33 >= 0x10)
        v34 = v33 + 1;
      else
        v34 = 16;
      if (v34 <= v15)
        v35 = v14 + v8;
      else
        v35 = v34;
      if (v35 >> 29)
        goto LABEL_51;
      v36 = (const void *)*((_QWORD *)a2 + 1);
      v37 = (void *)WTF::fastMalloc((WTF *)(8 * v35));
      *((_DWORD *)a2 + 4) = v35;
      *((_QWORD *)a2 + 1) = v37;
      memcpy(v37, v36, 8 * v14);
      if (v36)
      {
        if (*((const void **)a2 + 1) == v36)
        {
          *((_QWORD *)a2 + 1) = 0;
          *((_DWORD *)a2 + 4) = 0;
        }
        WTF::fastFree((unint64_t)v36, v38, v39, v40, v41, v42, v43, v44);
      }
    }
    *((_DWORD *)a2 + 5) = v15;
    if (v8 - 1 >= (unint64_t)*((unsigned int *)this + 5))
    {
      __break(0xC471u);
      JUMPOUT(0x197F9E9F0);
    }
    v16 = (v14 + v8);
    v17 = ~v8;
    v18 = v16;
    while (1)
    {
      --v8;
      v19 = *(_QWORD *)(*((_QWORD *)this + 1) + 16 * v8) + v8;
      v20 = v18 - 1;
      if (v18 - 1 > v19)
        break;
LABEL_17:
      if (v16 <= v19)
      {
        __break(0xC471u);
        JUMPOUT(0x197F9E9E8);
      }
      *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v19) = *(_QWORD *)(*((_QWORD *)this + 1) + 16 * v8 + 8);
      ++v17;
      v18 = v19;
      if (!v8)
      {
        *((_DWORD *)this + 5) = 0;
        goto LABEL_5;
      }
    }
    v21 = v18 + v17;
    while (v16 > v21)
    {
      if (v16 <= v20)
      {
        __break(0xC471u);
        JUMPOUT(0x197F9E9E0);
      }
      *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v20--) = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v21--);
      if (v20 <= v19)
        goto LABEL_17;
    }
LABEL_51:
    __break(0xC471u);
    JUMPOUT(0x197F9E9D8);
  }
LABEL_5:
  *((_QWORD *)this + 25) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  return result;
}

uint64_t JSC::B3::Kind::dump(JSC::B3::Kind *this, WTF::PrintStream *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  WTF::PrintStream *v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  char *v19;
  size_t v20;
  WTF::PrintStream *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  WTF::PrintStream *v25;
  float v26;
  char *v27;
  size_t v28;
  WTF::PrintStream *v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  float v34;
  char *v35;
  size_t v36;
  WTF::PrintStream *v37;
  float v38;
  uint64_t v39;
  WTF::PrintStream *v40;
  float v41;
  int v42;
  int v43;
  char v44;

  v4 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::printInternal(v4, *(unsigned __int8 *)this);
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v6 = *((_BYTE *)this + 1);
  if ((v6 & 1) != 0)
  {
    v9 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    WTF::StringImpl::utf8ForCharacters("<", 1uLL, (uint64_t)&v42, v12);
    WTF::printExpectedCStringHelper(v11, "StringView", &v42);
    if (v43 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    v13 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    WTF::StringImpl::utf8ForCharacters("Chill", 5uLL, (uint64_t)&v42, v14);
    WTF::printExpectedCStringHelper(v13, "StringView", &v42);
    if (v43 != -1)
      ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v8 = *((_BYTE *)this + 1);
    v7 = 1;
    if ((v8 & 2) == 0)
    {
LABEL_3:
      if ((v8 & 4) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else
  {
    v7 = 0;
    v8 = *((_BYTE *)this + 1);
    if ((v8 & 2) == 0)
      goto LABEL_3;
  }
  v15 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
  if ((v6 & 1) != 0)
  {
    v19 = ", ";
    v20 = 2;
  }
  else
  {
    v19 = "<";
    v20 = 1;
  }
  WTF::StringImpl::utf8ForCharacters(v19, v20, (uint64_t)&v42, v18);
  WTF::printExpectedCStringHelper(v17, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
  WTF::StringImpl::utf8ForCharacters("Traps", 5uLL, (uint64_t)&v42, v22);
  WTF::printExpectedCStringHelper(v21, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  result = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v8 = *((_BYTE *)this + 1);
  v7 = 1;
  if ((v8 & 4) == 0)
  {
LABEL_4:
    if ((v8 & 8) == 0)
    {
      if (!v7)
        return result;
      goto LABEL_37;
    }
    goto LABEL_29;
  }
LABEL_20:
  v23 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
  v25 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
  if (v7)
  {
    v27 = ", ";
    v28 = 2;
  }
  else
  {
    v27 = "<";
    v28 = 1;
  }
  WTF::StringImpl::utf8ForCharacters(v27, v28, (uint64_t)&v42, v26);
  WTF::printExpectedCStringHelper(v25, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
  v29 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
  WTF::StringImpl::utf8ForCharacters("SensitiveToNaN", 0xEuLL, (uint64_t)&v42, v30);
  WTF::printExpectedCStringHelper(v29, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  if ((*((_BYTE *)this + 1) & 8) == 0)
    goto LABEL_37;
  v7 = 1;
LABEL_29:
  v31 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
  v33 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
  if (v7)
  {
    v35 = ", ";
    v36 = 2;
  }
  else
  {
    v35 = "<";
    v36 = 1;
  }
  WTF::StringImpl::utf8ForCharacters(v35, v36, (uint64_t)&v42, v34);
  WTF::printExpectedCStringHelper(v33, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
  v37 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
  WTF::StringImpl::utf8ForCharacters("CloningForbidden", 0x10uLL, (uint64_t)&v42, v38);
  WTF::printExpectedCStringHelper(v37, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
LABEL_37:
  v39 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  v40 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
  WTF::StringImpl::utf8ForCharacters(">", 1uLL, (uint64_t)&v42, v41);
  WTF::printExpectedCStringHelper(v40, "StringView", &v42);
  if (v43 != -1)
    ((void (*)(char *, int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v43])(&v44, &v42);
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::B3::`anonymous namespace'::InferSwitches::describe(JSC::B3::_anonymous_namespace_::InferSwitches *this, JSC::B3::BasicBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  JSC::B3::Value **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  JSC::B3::Value *v14;
  int v15;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  __int128 v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  __int128 v48;
  JSC::B3::Value *v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  _BYTE v68[24];
  __int128 v69;
  __int128 v70;

  *((_QWORD *)this + 4) = (char *)this + 48;
  v8 = (_QWORD *)((char *)this + 32);
  *((_QWORD *)this + 1) = 0;
  v9 = (JSC::B3::Value **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 1;
  *((_QWORD *)this + 9) = 0;
  v10 = (char *)this + 72;
  *((_BYTE *)this + 80) = 0;
  *(_QWORD *)this = a3;
  v11 = *(unsigned int *)(a3 + 20);
  if (!(_DWORD)v11)
  {
    __break(0xC471u);
    goto LABEL_63;
  }
  v12 = a3;
  v14 = *(JSC::B3::Value **)(*(_QWORD *)(a3 + 8) + 8 * v11 - 8);
  *v9 = v14;
  v15 = *((_WORD *)v14 + 6);
  if (v15 == 155)
  {
    v17 = (uint64_t *)JSC::B3::Value::child(v14, 0);
    v18 = *(_DWORD *)(*(_QWORD *)this + 68);
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x197F9F37CLL);
    }
    v19 = *v17;
    v20 = *(__int128 **)(*(_QWORD *)this + 56);
    v70 = *v20;
    if (v18 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197F9F384);
    }
    v69 = v20[1];
    if (JSC::B3::Value::numChildren((JSC::B3::Value *)v19) != 2)
      goto LABEL_16;
    v27 = JSC::B3::Value::child((JSC::B3::Value *)v19, 1u);
    v28 = !*(_QWORD *)v27 || (*(_WORD *)(*(_QWORD *)v27 + 12) & 0xFFFu) - 3 > 1;
    if (v28 || *(_DWORD *)(*((_QWORD *)a2 + 27) + 8 * *(unsigned int *)(v19 + 8)) != 1)
      goto LABEL_16;
    v29 = *(unsigned __int8 *)(v19 + 12);
    if (v29 == 51)
    {
      v34 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v19, 0);
      *((_QWORD *)this + 2) = v19;
      *((_QWORD *)this + 3) = v34;
      v35 = JSC::B3::Value::child((JSC::B3::Value *)v19, 1u);
      v42 = *(_QWORD *)v35;
      v43 = *(_WORD *)(*(_QWORD *)v35 + 12) & 0xFFF;
      if (*(_QWORD *)v35)
        v44 = v43 == 3;
      else
        v44 = 0;
      if (v44)
      {
        v45 = *(int *)(v42 + 40);
      }
      else
      {
        if (v43 != 4)
          v42 = 0;
        v45 = *(_QWORD *)(v42 + 40);
      }
      *(_QWORD *)v68 = v45;
      *(_OWORD *)&v68[8] = v70;
      v46 = *((_DWORD *)this + 11);
      if (v46 == *((_DWORD *)this + 10))
      {
        WTF::Vector<JSC::B3::SwitchCase,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::SwitchCase>((uint64_t)v8, (unint64_t)v68, v36, v37, v38, v39, v40, v41);
      }
      else
      {
        v47 = *((_QWORD *)this + 4) + 24 * v46;
        v48 = *(_OWORD *)v68;
        *(_QWORD *)(v47 + 16) = *(_QWORD *)&v68[16];
        *(_OWORD *)v47 = v48;
        ++*((_DWORD *)this + 11);
      }
      v33 = &v69;
      goto LABEL_20;
    }
    if (v29 == 52)
    {
      v62 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v19, 0);
      *((_QWORD *)this + 2) = v19;
      *((_QWORD *)this + 3) = v62;
      v63 = JSC::B3::Value::child((JSC::B3::Value *)v19, 1u);
      v64 = *(_QWORD *)v63;
      v65 = *(_WORD *)(*(_QWORD *)v63 + 12) & 0xFFF;
      if (*(_QWORD *)v63)
        v66 = v65 == 3;
      else
        v66 = 0;
      if (v66)
      {
        v67 = *(int *)(v64 + 40);
      }
      else
      {
        if (v65 != 4)
          v64 = 0;
        v67 = *(_QWORD *)(v64 + 40);
      }
      *(_QWORD *)v68 = v67;
    }
    else
    {
LABEL_16:
      *((_QWORD *)this + 3) = v19;
      *(_QWORD *)v68 = 0;
    }
    *(_OWORD *)&v68[8] = v69;
    v30 = *((_DWORD *)this + 11);
    if (v30 == *((_DWORD *)this + 10))
    {
      WTF::Vector<JSC::B3::SwitchCase,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::SwitchCase>((uint64_t)v8, (unint64_t)v68, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      v31 = *((_QWORD *)this + 4) + 24 * v30;
      v32 = *(_OWORD *)v68;
      *(_QWORD *)(v31 + 16) = *(_QWORD *)&v68[16];
      *(_OWORD *)v31 = v32;
      ++*((_DWORD *)this + 11);
    }
    v33 = &v70;
LABEL_20:
    *(_QWORD *)v10 = *(_QWORD *)v33;
    v10[8] = *((_BYTE *)v33 + 8);
    return;
  }
  if (v15 == 156)
  {
    if ((*((_WORD *)v14 + 6) & 0xFFF) == 0x9C)
      v49 = v14;
    else
      v49 = 0;
    *((_QWORD *)this + 3) = *((_QWORD *)v49 + 7);
    v50 = *((_DWORD *)v49 + 13);
    if (v50)
    {
      v51 = 0;
      v52 = 0;
      v53 = 0;
      do
      {
        if (*((_DWORD *)v49 + 13) <= v52)
        {
          __break(0xC471u);
          JUMPOUT(0x197F9F38CLL);
        }
        if (*(_DWORD *)(v12 + 68) <= v52)
        {
          __break(0xC471u);
          JUMPOUT(0x197F9F394);
        }
        v54 = *(_QWORD *)(v12 + 56);
        *(_QWORD *)v68 = *(_QWORD *)(*((_QWORD *)v49 + 5) + 8 * v53);
        *(_OWORD *)&v68[8] = *(_OWORD *)(v54 + 16 * v53);
        if (v51 == *((_DWORD *)this + 10))
        {
          v58 = WTF::Vector<JSC::B3::SwitchCase,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v8, (void *)(v51 + 1), (unint64_t)v68, a4, a5, a6, a7, a8);
          v55 = *((_QWORD *)this + 4) + 24 * *((unsigned int *)this + 11);
          v56 = *(_OWORD *)v58;
          v57 = *(_QWORD *)(v58 + 16);
        }
        else
        {
          v55 = *v8 + 24 * v51;
          v56 = *(_OWORD *)v68;
          v57 = *(_QWORD *)&v68[16];
        }
        *(_QWORD *)(v55 + 16) = v57;
        *(_OWORD *)v55 = v56;
        v51 = *((_DWORD *)this + 11) + 1;
        *((_DWORD *)this + 11) = v51;
        v52 = v53 + 1;
        v53 = (v53 + 1);
      }
      while (v50 != v52);
      v12 = *(_QWORD *)this;
    }
    v59 = *(unsigned int *)(v12 + 68);
    if ((_DWORD)v59)
    {
      v60 = *(_QWORD *)(v12 + 56) + 16 * v59;
      v61 = *(_QWORD *)(v60 - 16);
      v10[8] = *(_BYTE *)(v60 - 8);
      *(_QWORD *)v10 = v61;
      return;
    }
    __break(0xC471u);
LABEL_63:
    JUMPOUT(0x197F9F374);
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin>(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __int16 v7;
  uint64_t Space;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v7 = a3;
  Space = JSC::B3::Value::allocateSpace(a3, 40);
  result = JSC::B3::Value::Value<>(Space, v7, a4);
  v10 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v10 - 8);
    *(_DWORD *)(a2 + 92) = v10 - 1;
    v12 = *(_QWORD *)(a2 + 64);
  }
  else
  {
    v11 = *(unsigned int *)(a2 + 76);
    if ((_DWORD)v11 == *(_DWORD *)(a2 + 72))
    {
      v17 = v11 + (v11 >> 2);
      if (v17 >= 0x10)
        v18 = v17 + 1;
      else
        v18 = 16;
      if (v18 <= v11 + 1)
        v19 = v11 + 1;
      else
        v19 = v18;
      if (v19 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v20 = *(const void **)(a2 + 64);
      v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
      *(_DWORD *)(a2 + 72) = v19;
      *(_QWORD *)(a2 + 64) = v21;
      memcpy(v21, v20, 8 * v11);
      if (v20)
      {
        if (*(const void **)(a2 + 64) == v20)
        {
          *(_QWORD *)(a2 + 64) = 0;
          *(_DWORD *)(a2 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
      }
      v29 = *(unsigned int *)(a2 + 76);
      v12 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(v12 + 8 * v29) = 0;
      *(_DWORD *)(a2 + 76) = v29 + 1;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(v12 + 8 * v11) = 0;
      *(_DWORD *)(a2 + 76) = v11 + 1;
    }
  }
  *(_QWORD *)(v12 + 8 * v11) = Space;
  *(_DWORD *)(Space + 8) = v11;
  v30 = Space;
  v13 = (char **)(a1 + 8);
  v14 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 16))
  {
    v16 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v30);
    v14 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = *(_QWORD *)v16;
    v15 = v30;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = Space;
    v15 = Space;
  }
  *(_DWORD *)(a1 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = a1;
  return Space;
}

uint64_t JSC::B3::BasicBlock::replaceLastWithNew<JSC::B3::SwitchValue,JSC::B3::Origin,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 156;
  *(_DWORD *)(v8 + 16) = 0;
  *(_BYTE *)(v8 + 20) = 1;
  *(_QWORD *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = a4;
  *(_QWORD *)v8 = off_1E357EBF8;
  *(_QWORD *)(v8 + 40) = 0;
  v9 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v9)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v9 - 8);
    *(_DWORD *)(a2 + 92) = v9 - 1;
    v11 = *(_QWORD *)(a2 + 64);
  }
  else
  {
    v10 = *(unsigned int *)(a2 + 76);
    if ((_DWORD)v10 == *(_DWORD *)(a2 + 72))
    {
      v18 = v10 + (v10 >> 2);
      if (v18 >= 0x10)
        v19 = v18 + 1;
      else
        v19 = 16;
      if (v19 <= v10 + 1)
        v20 = v10 + 1;
      else
        v20 = v19;
      if (v20 >> 29)
      {
LABEL_22:
        __break(0xC471u);
        JUMPOUT(0x197F9F6E8);
      }
      v21 = *(const void **)(a2 + 64);
      v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
      *(_DWORD *)(a2 + 72) = v20;
      *(_QWORD *)(a2 + 64) = v22;
      memcpy(v22, v21, 8 * v10);
      if (v21)
      {
        if (*(const void **)(a2 + 64) == v21)
        {
          *(_QWORD *)(a2 + 64) = 0;
          *(_DWORD *)(a2 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v21, v23, v24, v25, v26, v27, v28, v29);
      }
      v30 = *(unsigned int *)(a2 + 76);
      v11 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(v11 + 8 * v30) = 0;
      *(_DWORD *)(a2 + 76) = v30 + 1;
    }
    else
    {
      v11 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(v11 + 8 * v10) = 0;
      *(_DWORD *)(a2 + 76) = v10 + 1;
    }
  }
  *(_DWORD *)(v8 + 8) = v10;
  *(_QWORD *)(v11 + 8 * v10) = v8;
  v12 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v12)
    goto LABEL_22;
  v13 = *(JSC::B3::Value **)(*(_QWORD *)(a1 + 8) + 8 * v12 - 8);
  *(_DWORD *)(a1 + 20) = v12 - 1;
  JSC::B3::Procedure::deleteValue((JSC::B3::Procedure *)a2, v13);
  v31 = v8;
  v14 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 16))
  {
    v17 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a1 + 8), v14 + 1, (unint64_t)&v31);
    v14 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = *(_QWORD *)v17;
    v15 = v31;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = v8;
    v15 = v8;
  }
  *(_DWORD *)(a1 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = a1;
  return v8;
}

BOOL JSC::B3::`anonymous namespace'::InferSwitches::attemptToMergeWithPredecessor(JSC::B3::BasicBlock *)::{lambda(long long)#1}::operator()(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (a2 >= 2)
  {
    v3 = 0;
    v4 = a2;
    while (1)
    {
      v6 = v3 + ((v4 - 1) >> 1);
      if (v6 >= a2)
        goto LABEL_16;
      v7 = *(_QWORD *)(a1 + 8 * v6);
      if (v7 == a3)
        return 1;
      v8 = (v4 - 1) >> 1;
      v4 -= v8 + 1;
      if (v7 <= a3)
      {
        v9 = v8 + 1;
      }
      else
      {
        v4 = v8;
        v9 = 0;
      }
      v3 += v9;
      if (v4 <= 1)
        goto LABEL_3;
    }
  }
  else
  {
    v3 = 0;
    v4 = a2;
LABEL_3:
    if (v4)
    {
      if (v3 >= a2)
      {
LABEL_16:
        __break(0xC471u);
        JUMPOUT(0x197F9F784);
      }
      return *(_QWORD *)(a1 + 8 * v3) == a3;
    }
    else
    {
      return 0;
    }
  }
}

__n128 WTF::Vector<JSC::B3::SwitchCase,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::SwitchCase>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 *v10;
  __n128 result;

  v9 = (__n128 *)WTF::Vector<JSC::B3::SwitchCase,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v9;
  v10[1].n128_u64[0] = v9[1].n128_u64[0];
  *v10 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::B3::SwitchCase,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::SwitchCase,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v13 = (unint64_t)a2;
  if (v13 <= v11)
    return v8;
  v14 = *(unsigned int *)(result + 12);
  if (v13 < 2)
  {
    v16 = result + 16;
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 1;
    goto LABEL_11;
  }
  if (v13 < 0xAAAAAAB)
  {
    v15 = 24 * v13;
    v16 = WTF::fastMalloc((WTF *)(24 * v13));
    *(_DWORD *)(v9 + 8) = (v15 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v9 = v16;
LABEL_11:
    if ((_DWORD)v14)
    {
      v17 = 24 * v14;
      v18 = v10;
      do
      {
        v19 = *(_OWORD *)v18;
        *(_QWORD *)(v16 + 16) = *(_QWORD *)(v18 + 16);
        *(_OWORD *)v16 = v19;
        v16 += 24;
        v18 += 24;
        v17 -= 24;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::B3::SwitchCase,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v10 = (unint64_t)a2;
  if (v10 > v8)
  {
    v12 = *(_QWORD *)a1;
    v13 = *(unsigned int *)(a1 + 12);
    if (v10 < 2)
    {
      v15 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (v10 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return;
      }
      v14 = 24 * v10;
      v15 = WTF::fastMalloc((WTF *)(24 * v10));
      *(_DWORD *)(a1 + 8) = (v14 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v13)
    {
      v16 = 24 * v13;
      v17 = v12;
      do
      {
        v18 = *(_OWORD *)v17;
        *(_QWORD *)(v15 + 16) = *(_QWORD *)(v17 + 16);
        *(_OWORD *)v15 = v18;
        v15 += 24;
        v17 += 24;
        v16 -= 24;
      }
      while (v16);
    }
    if (a1 + 16 != v12 && v12)
    {
      if (*(_QWORD *)a1 == v12)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

_QWORD *WTF::Vector<long long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,long long>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t JSC::B3::MemoryValue::isLegalOffset<int,void,void>(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t result;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;

  if (*(_DWORD *)(a1 + 52) != *(_DWORD *)(a1 + 56))
    return a2 == 0;
  LODWORD(v3) = *(unsigned __int8 *)(a1 + 12);
  if ((v3 - 71) <= 7)
    return a2 == 0;
  v4 = v3 - 63;
  LOBYTE(v3) = 0;
  switch(v4)
  {
    case 0:
    case 1:
    case 5:
      goto LABEL_10;
    case 2:
    case 3:
    case 6:
      LOBYTE(v3) = 1;
      goto LABEL_10;
    case 4:
      goto LABEL_5;
    case 7:
      a1 = JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)a1, 0);
LABEL_5:
      v5 = *(_DWORD *)(a1 + 16);
      if (v5 >= 0x80000000)
        v5 = 0x80000000;
      v6 = v5 >= 6;
      v3 = 0x40302030200uLL >> (8 * v5);
      if (v6)
        LOBYTE(v3) = 0;
LABEL_10:
      if (a2 + 256 >= 0x200)
      {
        switch((char)v3)
        {
          case 0:
            return a2 < 0x1000;
          case 1:
            v8 = 8190;
            v9 = (a2 & 1) == 0;
            goto LABEL_15;
          case 2:
            v8 = 16380;
            v9 = (a2 & 3) == 0;
            goto LABEL_15;
          case 3:
            v8 = 32760;
            v9 = (a2 & 7) == 0;
            goto LABEL_15;
          case 4:
            v8 = 65520;
            v9 = (a2 & 0xF) == 0;
LABEL_15:
            v10 = v9;
            if (a2 <= v8)
              result = v10;
            else
              result = 0;
            break;
          default:
            result = 0;
            break;
        }
      }
      else
      {
        result = 1;
      }
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197F9FBDCLL);
  }
  return result;
}

BOOL JSC::B3::lowerMacros(WTF **this, JSC::B3::Procedure *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  WTF **v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  WTF *v24;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::B3::Procedure *v33;
  _DWORD *v34;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  JSC::B3::Value *v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  WTF *v44;
  JSC::B3::Value *v45;
  int v46;
  uint64_t *v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  __n128 *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  JSC::B3::Procedure *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  JSC::B3::Value *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  JSC::B3::Value *v108;
  JSC::B3::Value *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  JSC::B3::Value *v121;
  JSC::B3::Value *v122;
  WTF *v123;
  JSC::B3::Value *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t inserted;
  WTF *v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  JSC::B3::Value *v139;
  WTF *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  WTF *v145;
  int v146;
  unsigned int v147;
  JSC::B3::Value *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t *v167;
  JSC::B3::Value *v168;
  uint64_t v169;
  uint64_t v170;
  JSC::B3::Value *v171;
  JSC::B3::BasicBlock *v172;
  JSC::B3::BasicBlock *v173;
  uint64_t v174;
  JSC::B3::Procedure *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  JSC::B3::Value *v182;
  uint64_t v183;
  uint64_t *v184;
  JSC::B3::Value *v185;
  uint64_t v186;
  JSC::B3::Procedure *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  JSC::B3::Procedure *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  JSC::B3::Procedure *v201;
  uint64_t appended;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  JSC::B3::Value *v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  JSC::B3::Value *v227;
  JSC::B3::Value *v228;
  JSC::B3::Value *v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  unint64_t v234;
  int v235;
  JSC::B3::BasicBlock *v236;
  unint64_t v237;
  int v238;
  void *__srca;
  WTF *__srcb;
  WTF *__src;
  WTF *__srcc;
  JSC::B3::Procedure *v243;
  char *v244;
  _QWORD v245[2];
  _QWORD v246[17];
  WTF **v247;
  WTF *v248;
  uint64_t v249;
  _BYTE v250[176];
  uint64_t v251;
  WTF *v252;
  int v253;
  uint64_t v254;
  unint64_t v255;
  JSC::B3::Value *v256;
  uint64_t v257;
  char v258;
  _QWORD v259[3];
  uint64_t v260;
  _DWORD *v261;
  _BYTE v262[24];
  uint64_t *v263;
  uint64_t v264;
  __int128 v265;
  uint64_t v266;
  __int128 v267;
  uint64_t v268;

  JSC::B3::PhaseScope::PhaseScope((uint64_t)v259, this, (uint64_t)"B3::lowerMacros", 16);
  v243 = (JSC::B3::Procedure *)this;
  v244 = (char *)(this + 6);
  v245[0] = v246;
  v245[1] = 8;
  v246[16] = this;
  v247 = this;
  v3 = (WTF *)v250;
  v248 = (WTF *)v250;
  v249 = 8;
  memset(&v250[128], 0, 48);
  v251 = 0;
  JSC::B3::UseCounts::UseCounts((JSC::B3::UseCounts *)&v252, (JSC::B3::Procedure *)this);
  v257 = 0;
  v258 = 0;
  v12 = this;
  if (*((_BYTE *)this + 209))
  {
    __break(0xC471u);
    goto LABEL_132;
  }
  v13 = *((unsigned int *)v243 + 15);
  if ((_DWORD)v13)
  {
    v14 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v243 + 6) + 8 * v14))
    {
      if (v13 == ++v14)
        goto LABEL_6;
    }
    if ((_DWORD)v13 != (_DWORD)v14)
    {
      LODWORD(v36) = *((_DWORD *)v243 + 15);
      while (v36 > v14)
      {
        v37 = *((_QWORD *)v12[6] + v14);
        v254 = v37;
        LODWORD(v255) = 0;
        if (*(_DWORD *)(v37 + 20))
        {
          v38 = 0;
          v39 = 0;
          do
          {
            v40 = *(JSC::B3::Value **)(*(_QWORD *)(v37 + 8) + 8 * v39);
            v256 = v40;
            v41 = *((_QWORD *)v40 + 3);
            v257 = v41;
            v42 = *((_WORD *)v40 + 6);
            if (v42 > 0x40)
            {
              if (v42 == 156)
              {
                v44 = v3;
                if ((*((_WORD *)v40 + 6) & 0xFFF) == 0x9C)
                  v45 = v40;
                else
                  v45 = 0;
                v263 = 0;
                v264 = 0;
                v46 = *((_DWORD *)v45 + 13);
                if (v46)
                {
                  v47 = 0;
                  LODWORD(v48) = 0;
                  v49 = 0;
                  v50 = 0;
                  do
                  {
                    if (*((_DWORD *)v45 + 13) <= v49)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FA0A60);
                    }
                    if (*(_DWORD *)(v37 + 68) <= v49)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FA0A68);
                    }
                    v51 = *(_QWORD *)(v37 + 56);
                    *(_QWORD *)v262 = *(_QWORD *)(*((_QWORD *)v45 + 5) + 8 * v50);
                    *(_OWORD *)&v262[8] = *(_OWORD *)(v51 + 16 * v50);
                    if ((_DWORD)v48 == (_DWORD)v264)
                    {
                      v53 = WTF::Vector<JSC::FTL::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v263, v48 + 1, (unint64_t)v262);
                      LODWORD(v48) = HIDWORD(v264);
                      v47 = v263;
                      v54 = &v263[3 * HIDWORD(v264)];
                      v55 = *(_QWORD *)(v53 + 16);
                      v11 = *(__n128 *)v53;
                      *(_OWORD *)v54 = *(_OWORD *)v53;
                      v54[2] = v55;
                    }
                    else
                    {
                      v11 = *(__n128 *)v262;
                      v52 = (__n128 *)&v47[3 * v48];
                      v52[1].n128_u64[0] = *(_QWORD *)&v262[16];
                      *v52 = v11;
                    }
                    v48 = (v48 + 1);
                    HIDWORD(v264) = v48;
                    v49 = v50 + 1;
                    v50 = (v50 + 1);
                  }
                  while (v46 != v49);
                  v56 = (char *)&v47[3 * v48];
                  if ((_DWORD)v48)
                  {
                    v57 = 126 - 2 * __clz(v48);
LABEL_60:
                    v58 = v254;
                    v59 = *(unsigned int *)(v254 + 68);
                    if (!(_DWORD)v59)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FA0A70);
                    }
                    v60 = *(_DWORD *)(v254 + 20);
                    if (!v60)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FA0A78);
                    }
                    v61 = *(_QWORD *)(v254 + 56) + 16 * v59;
                    v62 = *(_QWORD *)(v61 - 16);
                    v63 = *(_QWORD *)(v61 - 8);
                    *(_DWORD *)(v254 + 20) = v60 - 1;
                    v71 = v243;
                    v72 = *((unsigned int *)v45 + 2);
                    v73 = *((_QWORD *)v243 + 8);
                    if (*(JSC::B3::Value **)(v73 + 8 * v72) != v45)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FA04A4);
                    }
                    v74 = *((unsigned int *)v243 + 23);
                    if ((_DWORD)v74 == *((_DWORD *)v243 + 22))
                    {
                      v92 = v74 + (v74 >> 2);
                      if (v92 >= 0x10)
                        v93 = v92 + 1;
                      else
                        v93 = 16;
                      if (v93 <= v74 + 1)
                        v94 = v74 + 1;
                      else
                        v94 = v93;
                      if (v94 >> 29)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197FA0A80);
                      }
                      __srca = (void *)*((_QWORD *)v243 + 10);
                      v95 = (void *)WTF::fastMalloc((WTF *)(8 * v94));
                      *((_DWORD *)v71 + 22) = v94;
                      *((_QWORD *)v71 + 10) = v95;
                      memcpy(v95, __srca, 8 * v74);
                      if (__srca)
                      {
                        if (*((void **)v71 + 10) == __srca)
                        {
                          *((_QWORD *)v71 + 10) = 0;
                          *((_DWORD *)v71 + 22) = 0;
                        }
                        WTF::fastFree((unint64_t)__srca, v64, v65, v66, v67, v68, v69, v70);
                      }
                      v74 = *((unsigned int *)v71 + 23);
                      *(_QWORD *)(*((_QWORD *)v71 + 10) + 8 * v74) = *((unsigned int *)v45 + 2);
                      v73 = *((_QWORD *)v71 + 8);
                    }
                    else
                    {
                      *(_QWORD *)(*((_QWORD *)v243 + 10) + 8 * v74) = v72;
                    }
                    *((_DWORD *)v71 + 23) = v74 + 1;
                    v75 = *((unsigned int *)v45 + 2);
                    v76 = *(_QWORD *)(v73 + 8 * v75);
                    *(_QWORD *)(v73 + 8 * v75) = 0;
                    if (v76)
                      (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
                    JSC::B3::updatePredecessorsAfter<JSC::B3::BasicBlock>(v254, v64, v65, v66, v67, v68, v69, v70);
                    v258 = 1;
                    v84 = (unint64_t)v263;
                    v3 = v44;
                    if (v263)
                    {
                      v263 = 0;
                      LODWORD(v264) = 0;
                      WTF::fastFree(v84, v77, v78, v79, v80, v81, v82, v83);
                    }
                    goto LABEL_27;
                  }
                }
                else
                {
                  v56 = 0;
                  v47 = 0;
                }
                v57 = 0;
                goto LABEL_60;
              }
              if (v42 == 65)
              {
LABEL_42:
                if (*((_DWORD *)v40 + 13) != *((_DWORD *)v40 + 14))
                {
                  inserted = JSC::B3::InsertionSet::insertClone((JSC::B3::Procedure **)&v247, v39, v40);
                  v131 = v3;
                  v132 = inserted;
                  if (*((_BYTE *)v40 + 12) == 63)
                    v133 = 64;
                  else
                    v133 = 66;
                  *(_BYTE *)(inserted + 12) = v133;
                  v134 = v255;
                  v135 = v257;
                  JSC::B3::MemoryValue::accessWidth(v40);
                  JSC::mask();
                  v137 = JSC::B3::InsertionSet::insertIntConstant((uint64_t)&v247, v134, v135, 1u, v136);
                  v138 = v132;
                  v3 = v131;
                  v139 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)&v247, v134, 22, v135, v138, v137);
                  JSC::B3::Value::replaceWithIdentity(v256, v139);
                  v258 = 1;
                }
                goto LABEL_27;
              }
              v43 = v42 - 71;
              if (v42 - 71 <= 0x33)
              {
                if (((1 << v43) & 0xFC) != 0)
                {
                  if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
                  {
                    if (v42 == 76)
                    {
                      *((_BYTE *)v40 + 12) = 73;
                      v140 = v3;
                      v141 = v38;
                      v142 = (uint64_t *)JSC::B3::Value::child(v40, 0);
                      v143 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)&v247, v141, 21, v41, *v142);
                      *(_QWORD *)JSC::B3::Value::child(v256, 0) = v143;
                      v3 = v140;
                      v40 = v256;
                      v42 = *((unsigned __int8 *)v256 + 12);
                    }
                  }
                  else if (!JSC::MacroAssemblerARM64::s_lseCheckState)
                  {
                    JSC::MacroAssemblerARM64::s_lseCheckState = 1;
                    if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
                      JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
                  }
                  if (v42 - 71 >= 8)
                    v40 = 0;
                  if (*((unsigned __int8 *)v40 + 60) <= 1u)
                  {
                    v144 = v255;
                    v145 = v3;
                    if (*((_BYTE *)v40 + 60))
                      v146 = 39;
                    else
                      v146 = 38;
                    v169 = v257;
                    v170 = JSC::B3::InsertionSet::insertClone((JSC::B3::Procedure **)&v247, v255, v40);
                    v171 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)&v247, v144, v146, v169, v170);
                    JSC::B3::Value::replaceWithIdentity(v40, v171);
                    v258 = 1;
                    v3 = v145;
                  }
                  goto LABEL_27;
                }
                if (((1 << v43) & 3) != 0)
                {
                  v147 = *((unsigned __int8 *)v40 + 60);
                  if (v147 > 1)
                    goto LABEL_27;
                  __src = v3;
                  v148 = *(JSC::B3::Value **)JSC::B3::MemoryValue::child(v40, 0);
                  v149 = v255;
                  v150 = v257;
                  JSC::mask();
                  v152 = JSC::B3::InsertionSet::insertIntConstant((JSC::B3::Value **)&v247, v149, v148, v151);
                  v153 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)&v247, v149, 22, v150, (uint64_t)v148, v152);
                  *(_QWORD *)JSC::B3::MemoryValue::child(v40, 0) = v153;
                  v258 = 1;
                  if (*((_BYTE *)v40 + 12) == 72)
                  {
                    v154 = v255;
                    if (v147)
                      v155 = 39;
                    else
                      v155 = 38;
                    v230 = v257;
                    v231 = JSC::B3::InsertionSet::insertClone((JSC::B3::Procedure **)&v247, v255, v40);
                    v108 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)&v247, v154, v155, v230, v231);
                    v109 = v40;
LABEL_87:
                    JSC::B3::Value::replaceWithIdentity(v109, v108);
                    v258 = 1;
                  }
LABEL_88:
                  v3 = __src;
                  goto LABEL_27;
                }
                if (((1 << v43) & 0xC000000000000) != 0)
                {
                  __src = v3;
                  v156 = 8 * JSC::elementByteSize(*((_BYTE *)v40 + 40) & 0x3F) - 1;
                  v157 = v255;
                  v158 = v257;
                  v159 = *(_QWORD *)JSC::B3::Value::child(v40, 1u);
                  v160 = JSC::B3::InsertionSet::insertIntConstant((uint64_t)&v247, v255, v257, 1u, v156);
                  v161 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)&v247, v157, 22, v158, v159, v160);
                  v162 = v161;
                  if (*((_BYTE *)v40 + 12) == 122)
                    v162 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)&v247, v255, 21, v257, v161);
                  v163 = JSC::B3::InsertionSet::insert<JSC::B3::SIMDValue,JSC::B3::Origin,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Value *>((uint64_t)&v247, v255, v257, v162);
                  v164 = v255;
                  v165 = v257;
                  v166 = *((_BYTE *)v40 + 40);
                  v167 = (uint64_t *)JSC::B3::Value::child(v40, 0);
                  v168 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::SIMDValue,JSC::B3::Origin,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::SIMDInfo,JSC::B3::Value *,JSC::B3::Value *>((uint64_t)&v247, v164, v165, v166, *v167, v163);
                  JSC::B3::Value::replaceWithIdentity(v256, v168);
                  v258 = 1;
                  goto LABEL_88;
                }
              }
            }
            else
            {
              switch(v42)
              {
                case 0x3Fu:
                  goto LABEL_42;
                case 0x13u:
                  if ((*((_WORD *)v40 + 6) & 0x100) != 0)
                  {
                    v172 = (JSC::B3::BasicBlock *)JSC::B3::BlockInsertionSet::splitForward((uint64_t)&v244, v37, &v255, (JSC::B3::InsertionSet *)&v247, NAN);
                    v236 = (JSC::B3::BasicBlock *)JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert((uint64_t)&v244, *(_DWORD *)v254, *(double *)(v254 + 104));
                    v173 = (JSC::B3::BasicBlock *)JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert((uint64_t)&v244, *(_DWORD *)v254, *(double *)(v254 + 104));
                    v174 = v257;
                    __srcc = v3;
                    v175 = v243;
                    v176 = (uint64_t *)JSC::B3::Value::child(v256, 1u);
                    v233 = (uint64_t)v172;
                    JSC::B3::BasicBlock::replaceLastWithNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v172, (uint64_t)v175, v174, *v176);
                    JSC::B3::BasicBlock::setSuccessors((uint64_t)v172, (uint64_t)v173, 0, (uint64_t)v236, 1, v177, v178, v179);
                    v235 &= 0xFFFFFFF0;
                    v180 = v235 | 1u;
                    v181 = v257;
                    v182 = v243;
                    v183 = *(_QWORD *)JSC::B3::Value::child(v256, 0);
                    v184 = (uint64_t *)JSC::B3::Value::child(v256, 1u);
                    v234 = v234 & 0xFFFFFFFFFFFF0000 | (v180 << 8) | 0x11;
                    v185 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v173, v182, ((_WORD)v180 << 8) | 0x11u, v181, v183, *v184);
                    v186 = v257;
                    v187 = v243;
                    v188 = (uint64_t *)JSC::B3::Value::child(v256, 1u);
                    v189 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t)v173, (uint64_t)v187, 16, v186, (uint64_t)v185, *v188);
                    v190 = v257;
                    v191 = v243;
                    v192 = (uint64_t *)JSC::B3::Value::child(v256, 0);
                    v193 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t)v173, (uint64_t)v191, 15, v190, *v192, v189);
                    v194 = JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *>((uint64_t)v173, (uint64_t)v243, v257, v193);
                    JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin>((uint64_t)v173, (uint64_t)v243, 154, v257);
                    JSC::B3::BasicBlock::setSuccessors((uint64_t)v173, v254, 0, v195, v196, v197, v198, v199);
                    v200 = v257;
                    v201 = v243;
                    appended = JSC::B3::BasicBlock::appendIntConstant(v236, v243, v256, 0);
                    v203 = JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *>((uint64_t)v236, (uint64_t)v201, v200, appended);
                    JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin>((uint64_t)v236, (uint64_t)v243, 154, v257);
                    JSC::B3::BasicBlock::setSuccessors((uint64_t)v236, v254, 0, v204, v205, v206, v207, v208);
                    v213 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin>(&v247, v255, *((_DWORD *)v256 + 4), v257, v209, v210, v211, v212);
                    *(_QWORD *)(v194 + 40) = v213;
                    *(_QWORD *)(v203 + 40) = v213;
                    v3 = __srcc;
                    JSC::B3::Value::replaceWithIdentity(v256, v213);
                    JSC::B3::updatePredecessorsAfter<JSC::B3::BasicBlock>(v233, v214, v215, v216, v217, v218, v219, v220);
                    v258 = 1;
                    break;
                  }
                  v96 = *((_DWORD *)v40 + 4);
                  if (v96 == 4)
                  {
                    v122 = JSC::B3::InsertionSet::insert<JSC::B3::ConstPtrValue,JSC::B3::Origin,double (*)(double,double)>((JSC::B3::Value **)&v247, v39, v41);
                    v123 = v3;
                    v124 = v122;
                    v125 = v255;
                    v268 = 0;
                    v267 = 0uLL;
                    v126 = v257;
                    v127 = *(_QWORD *)JSC::B3::Value::child(v256, 0);
                    v128 = (uint64_t *)JSC::B3::Value::child(v256, 1u);
                    v129 = (uint64_t)v124;
                    v3 = v123;
                    v121 = JSC::B3::InsertionSet::insert<JSC::B3::CCallValue,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((JSC::B3::InsertionSet *)&v247, v125, v126, &v267, v129, v127, *v128);
                    goto LABEL_90;
                  }
                  __src = v3;
                  if (v96 != 3)
                  {
                    v238 &= 0xFFFFFFF0;
                    v97 = v238 | 1u;
                    v98 = *(_QWORD *)JSC::B3::Value::child(v40, 0);
                    v99 = (uint64_t *)JSC::B3::Value::child(v256, 1u);
                    v237 = v237 & 0xFFFFFFFFFFFF0000 | (v97 << 8) | 0x11;
                    v100 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((JSC::B3::InsertionSet *)&v247, v39, ((_WORD)v97 << 8) | 0x11u, v41, v98, *v99);
                    v101 = v255;
                    v102 = v257;
                    v103 = (uint64_t *)JSC::B3::Value::child(v256, 1u);
                    v104 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)&v247, v101, 16, v102, (uint64_t)v100, *v103);
                    v105 = v255;
                    v106 = v257;
                    v107 = (uint64_t *)JSC::B3::Value::child(v256, 0);
                    v108 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)&v247, v105, 15, v106, *v107, v104);
                    v109 = v256;
                    goto LABEL_87;
                  }
                  v221 = (uint64_t *)JSC::B3::Value::child(v40, 0);
                  v222 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)&v247, v39, 49, v41, *v221);
                  v223 = v255;
                  v224 = v257;
                  v225 = (uint64_t *)JSC::B3::Value::child(v256, 1u);
                  v226 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)&v247, v223, 49, v224, *v225);
                  v227 = JSC::B3::InsertionSet::insert<JSC::B3::ConstPtrValue,JSC::B3::Origin,double (*)(double,double)>((JSC::B3::Value **)&v247, v255, v257);
                  v266 = 0;
                  v265 = 0uLL;
                  v228 = JSC::B3::InsertionSet::insert<JSC::B3::CCallValue,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((JSC::B3::InsertionSet *)&v247, v255, v257, &v265, (uint64_t)v227, v222, v226);
                  v229 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)&v247, v255, 50, v257, (uint64_t)v228);
                  JSC::B3::Value::replaceWithIdentity(v256, v229);
                  v258 = 1;
                  goto LABEL_88;
                case 0x14u:
                  __srcb = v3;
                  v110 = *(_QWORD *)JSC::B3::Value::child(v40, 0);
                  v111 = (uint64_t *)JSC::B3::Value::child(v256, 1u);
                  v112 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)&v247, v39, 18, v41, v110, *v111);
                  v113 = v255;
                  v114 = v257;
                  v115 = (uint64_t *)JSC::B3::Value::child(v256, 1u);
                  v116 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)&v247, v113, 16, v114, v112, *v115);
                  v117 = v255;
                  v118 = v257;
                  v119 = (uint64_t *)JSC::B3::Value::child(v256, 0);
                  v120 = v116;
                  v3 = __srcb;
                  v121 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)&v247, v117, 15, v118, *v119, v120);
LABEL_90:
                  JSC::B3::Value::replaceWithIdentity(v256, v121);
                  v258 = 1;
                  break;
              }
            }
LABEL_27:
            LODWORD(v255) = v255 + 1;
            v38 = v255;
            v37 = v254;
            v39 = v255;
          }
          while (*(_DWORD *)(v254 + 20) > v255);
        }
        v11.n128_f64[0] = JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v247, (JSC::B3::BasicBlock *)v37);
        v14 = (v14 + 1);
        v36 = *((unsigned int *)v12 + 15);
        if (v36 > v14)
        {
          while (!*((_QWORD *)v12[6] + v14))
          {
            if (v36 == ++v14)
            {
              LODWORD(v14) = *((_DWORD *)v12 + 15);
              break;
            }
          }
        }
        if ((_DWORD)v13 == (_DWORD)v14)
          goto LABEL_6;
      }
      __break(0xC471u);
LABEL_132:
      JUMPOUT(0x197FA0484);
    }
  }
LABEL_6:
  v15 = JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::execute((unsigned int *)&v244, v4, v5, v6, v7, v8, v9, v10);
  v258 |= v15;
  if (v258)
  {
    JSC::B3::Procedure::resetReachability(v243, v16, v17, v18, v19, v20, v21, v22);
    JSC::B3::Procedure::invalidateCFG(v243, v85, v86, v87, v88, v89, v90, v91);
    v23 = v258 != 0;
  }
  else
  {
    v23 = 0;
  }
  *((_BYTE *)v243 + 209) = 1;
  v24 = v252;
  if (v252)
  {
    v252 = 0;
    v253 = 0;
    WTF::fastFree((unint64_t)v24, v16, v17, v18, v19, v20, v21, v22);
  }
  v25 = v248;
  if (v3 != v248 && v248)
  {
    v248 = 0;
    LODWORD(v249) = 0;
    WTF::fastFree((unint64_t)v25, v16, v17, v18, v19, v20, v21, v22);
  }
  WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v245, v16, v17, v18, v19, v20, v21, v22);
  v33 = (JSC::B3::Procedure *)v259[0];
  *(_QWORD *)(v259[0] + 144) = v259[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v261)
      v232 = (char *)(v261 + 4);
    else
      v232 = 0;
    v243 = v33;
    v244 = v232;
  }
  v34 = v261;
  v261 = 0;
  if (v34)
  {
    if (*v34 == 1)
      WTF::fastFree((unint64_t)v34, v26, v27, v28, v29, v30, v31, v32);
    else
      --*v34;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v260);
  return v23;
}

uint64_t JSC::B3::lowerMacrosAfterOptimizations(WTF **this, JSC::B3::Procedure *a2)
{
  JSC::B3::Procedure *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::B3::Procedure *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t result;
  int v21;
  int v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  const char *v29[2];

  JSC::B3::PhaseScope::PhaseScope((uint64_t)&v25, this, (uint64_t)"lowerMacrosAfterOptimizations", 30);
  v18 = v17;
  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
  {
    if (v21)
    {
      result = 200;
      __break(0xC471u);
      return result;
    }
    v22 = HIBYTE(qword_1ECF4C32A);
    v23 = (const char *)v25;
    *(_QWORD *)(v25 + 144) = v26;
    if (v22)
    {
      if (v28)
        v24 = (char *)v28 + 16;
      else
        v24 = 0;
      v29[0] = v23;
      v29[1] = v24;
    }
  }
  else
  {
    *(_QWORD *)(v25 + 144) = v26;
  }
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
      WTF::fastFree((unint64_t)v19, v10, v11, v12, v13, v14, v15, v16);
    else
      --*(_DWORD *)v19;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v27);
  return v18;
}

void JSC::B3::`anonymous namespace'::lowerMacrosImpl(JSC::B3::_anonymous_namespace_ *this, JSC::B3::Procedure *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  JSC::B3::Value *v43;
  _QWORD *v44;
  WTF *v45;
  char *v47;
  _QWORD v48[2];
  _QWORD v49[17];
  JSC::B3::_anonymous_namespace_ *v50;
  WTF *v51;
  uint64_t v52;
  _BYTE v53[176];
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  JSC::B3::Value *v57;
  uint64_t v58;
  char v59;

  v8 = (_QWORD *)((char *)this + 48);
  v47 = (char *)this + 48;
  v48[0] = v49;
  v48[1] = 8;
  v49[16] = this;
  v50 = this;
  v9 = (WTF *)v53;
  v51 = (WTF *)v53;
  v52 = 8;
  memset(&v53[128], 0, 48);
  v54 = 0;
  v58 = 0;
  v59 = 0;
  v10 = *((unsigned int *)this + 15);
  if (!(_DWORD)v10)
    goto LABEL_19;
  v12 = 0;
  while (!*(_QWORD *)(*v8 + 8 * v12))
  {
    if (v10 == ++v12)
      goto LABEL_19;
  }
  if ((_DWORD)v10 == (_DWORD)v12)
  {
LABEL_19:
    v18 = JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::execute((unsigned int *)&v47, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v59 |= v18;
    if (v59)
    {
      JSC::B3::Procedure::resetReachability(this, v19, v20, v21, v22, v23, v24, v25);
      JSC::B3::Procedure::invalidateCFG(this, v27, v28, v29, v30, v31, v32, v33);
    }
    v26 = v51;
    if (v9 != v51)
    {
      if (v51)
      {
        v51 = 0;
        LODWORD(v52) = 0;
        WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
      }
    }
    WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)v48, v19, v20, v21, v22, v23, v24, v25);
  }
  else
  {
    LODWORD(v13) = *((_DWORD *)this + 15);
    while (v13 > v12)
    {
      v14 = *(_QWORD *)(*v8 + 8 * v12);
      v55 = v14;
      v56 = 0;
      if (*(_DWORD *)(v14 + 20))
      {
        LODWORD(v15) = 0;
        v16 = 0;
        do
        {
          v17 = *(_QWORD *)(*(_QWORD *)(v14 + 8) + 8 * v16);
          v57 = (JSC::B3::Value *)v17;
          v58 = *(_QWORD *)(v17 + 24);
          if (*(_BYTE *)(v17 + 12) == 29)
          {
            v44 = v8;
            v45 = v9;
            v34 = *(_QWORD *)(v17 + 24);
            v35 = v16;
            v36 = (uint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v17, 1u);
            v37 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t *)&v50, v35, 21, v34, *v36);
            v38 = v56;
            v39 = *((_QWORD *)v57 + 3);
            v40 = (uint64_t *)JSC::B3::Value::child(v57, 0);
            v41 = v39;
            v42 = v37;
            v8 = v44;
            v9 = v45;
            v43 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)&v50, v38, 28, v41, *v40, v42);
            JSC::B3::Value::replaceWithIdentity(v57, v43);
            LODWORD(v15) = v56;
            v14 = v55;
          }
          v15 = (v15 + 1);
          v56 = v15;
          v16 = v15;
        }
        while (*(_DWORD *)(v14 + 20) > v15);
      }
      JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v50, (JSC::B3::BasicBlock *)v14);
      v12 = (v12 + 1);
      v13 = *((unsigned int *)this + 15);
      if (v13 > v12)
      {
        while (!*(_QWORD *)(*v8 + 8 * v12))
        {
          if (v13 == ++v12)
          {
            LODWORD(v12) = *((_DWORD *)this + 15);
            break;
          }
        }
      }
      if ((_DWORD)v10 == (_DWORD)v12)
        goto LABEL_19;
    }
    __break(0xC471u);
  }
}

void JSC::B3::lowerToAir(WTF **this, JSC::B3::Procedure *a2)
{
  WTF **v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  WTF *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int **v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  WTF *v82;
  WTF *v83;
  unsigned int *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int **v92;
  unsigned int **v93;
  char v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  int v108;
  _QWORD *v109;
  WTF *v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF *v118;
  WTF *v120;
  unint64_t v122;
  unint64_t v123;
  WTF *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  WTF *v129;
  uint64_t v130;
  WTF *v131;
  uint64_t v132;
  uint64_t v133;
  WTF *v134;
  WTF *v135;
  WTF *v136;
  WTF *v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  __int128 *v150;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  __int128 v154;
  __int128 v155;
  int v156;
  void *v157;
  unint64_t v158;
  uint32x4_t *v159;
  _QWORD *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  WTF **v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v175;
  unsigned int v176;
  WTF *v177;
  WTF *v178;
  unsigned int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void **v194;
  uint64_t v195;
  char *v196;
  unint64_t v197;
  WTF *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  WTF *v203;
  int v204;
  unsigned int v205;
  WTF *v206;
  int v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  WTF *v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  WTF *v215;
  int v216;
  unint64_t v217;
  int v218;
  unsigned int v219;
  uint64_t *v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  WTF *v224;
  uint64_t v225;
  _QWORD v226[17];
  __int128 v227;
  __int128 v228;
  unsigned int *v229;
  char v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  WTF **v235;
  WTF *v236;
  uint64_t *v237;
  WTF *v238;
  uint64_t v239;
  _QWORD v240[17];
  int v241;
  _QWORD v242[3];
  uint64_t v243;
  WTF *v244;
  WTF *v245;
  WTF *v246;
  uint64_t v247;
  _BYTE v248[1088];
  uint64_t v249;
  __int128 v250;
  uint64_t v251;
  _BYTE v252[96];
  _QWORD v253[3];

  v2 = this;
  JSC::B3::PhaseScope::PhaseScope((uint64_t)v242, this, (uint64_t)"lowerToAir", 11);
  v3 = *((unsigned int *)v2 + 19);
  v203 = 0;
  v204 = 0;
  v202 = 0x8000000000000000;
  v205 = v3;
  if ((_DWORD)v3)
  {
    if (v3 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x197FA1DC0);
    }
    v4 = (WTF *)WTF::fastMalloc((WTF *)(4 * v3));
    v204 = v3;
    v203 = v4;
    if (v205)
      bzero(v4, 4 * v205);
  }
  v5 = *((unsigned int *)v2 + 19);
  v206 = 0;
  v207 = 0;
  v208 = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x197FA1DC8);
    }
    v6 = (WTF *)WTF::fastMalloc((WTF *)(4 * v5));
    v207 = v5;
    v206 = v6;
    if (v208)
      bzero(v6, 4 * v208);
  }
  v209 = 0;
  v210 = 0;
  v7 = *((unsigned int *)v2 + 15);
  v211 = 0;
  v212 = 0;
  v213 = v7;
  if ((_DWORD)v7)
  {
    if (v7 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x197FA1DD0);
    }
    v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
    v212 = v7;
    v211 = v8;
    if (v213)
      bzero(v8, 8 * v213);
  }
  v214 = 0;
  JSC::B3::UseCounts::UseCounts((JSC::B3::UseCounts *)&v215, (JSC::B3::Procedure *)v2);
  JSC::B3::PhiChildren::PhiChildren((uint64_t)&v217, (JSC::B3::Procedure *)v2);
  v223 = 0x8000000000000000;
  v224 = (WTF *)v226;
  v225 = 16;
  v226[16] = JSC::B3::Procedure::dominators((JSC::B3::Procedure *)v2);
  v227 = 0u;
  v228 = 0u;
  v233 = 0;
  v234 = 0;
  v16 = v2[20];
  v235 = v2;
  v236 = v16;
  v237 = (uint64_t *)((char *)v16 + 96);
  v238 = (WTF *)v240;
  v239 = 8;
  v240[16] = 0;
  v241 = 0;
  v17 = *((unsigned int *)v2 + 15);
  if ((_DWORD)v17)
  {
    v18 = 0;
    while (!*((_QWORD *)v2[6] + v18))
    {
      if (v17 == ++v18)
        goto LABEL_33;
    }
    if ((_DWORD)v17 != (_DWORD)v18)
    {
      v19 = v18;
      v20 = *((unsigned int *)v2 + 15);
      do
      {
        if (v20 <= v19)
        {
          __break(0xC471u);
          JUMPOUT(0x197FA1D64);
        }
        v21 = (unsigned int *)*((_QWORD *)v2[6] + v19);
        v22 = v236;
        v23 = *((_QWORD *)v21 + 13);
        v24 = (WTF *)WTF::fastMalloc((WTF *)0x70);
        v25 = (uint64_t *)((char *)v22 + 96);
        *(_DWORD *)v24 = *((_DWORD *)v22 + 27);
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = 0;
        *((_QWORD *)v24 + 3) = (char *)v24 + 40;
        *((_QWORD *)v24 + 4) = 2;
        *((_QWORD *)v24 + 9) = (char *)v24 + 88;
        *((_QWORD *)v24 + 10) = 2;
        *((_QWORD *)v24 + 13) = v23;
        v245 = v24;
        v26 = *((unsigned int *)v22 + 27);
        if ((_DWORD)v26 == *((_DWORD *)v22 + 26))
        {
          v28 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v245);
          v26 = *((unsigned int *)v22 + 27);
          v29 = *((_QWORD *)v22 + 12);
          v30 = *v28;
          *v28 = 0;
          *(_QWORD *)(v29 + 8 * v26) = v30;
        }
        else
        {
          v27 = *v25;
          v245 = 0;
          *(_QWORD *)(v27 + 8 * v26) = v24;
        }
        *((_DWORD *)v22 + 27) = v26 + 1;
        v9 = v245;
        v245 = 0;
        if (v9)
          std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)&v245, v9, v10, v11, v12, v13, v14, v15);
        *((_QWORD *)v211 + *v21) = v24;
        ++v19;
        v20 = *((unsigned int *)v2 + 15);
        if (v20 > v19)
        {
          while (!*((_QWORD *)v2[6] + v19))
          {
            if (v20 == ++v19)
            {
              v19 = *((unsigned int *)v2 + 15);
              goto LABEL_30;
            }
          }
          v19 = v19;
        }
LABEL_30:
        ;
      }
      while (v17 != v19);
      v2 = v235;
    }
  }
LABEL_33:
  v31 = *((unsigned int *)v2 + 19);
  if ((_DWORD)v31)
  {
    v32 = 0;
    while (!*((_QWORD *)v2[8] + v32))
    {
      if (v31 == ++v32)
        goto LABEL_62;
    }
    if ((_DWORD)v31 != (_DWORD)v32)
    {
      while (1)
      {
        v33 = *((_QWORD *)v2[8] + v32);
        v34 = *(unsigned __int8 *)(v33 + 12);
        if (v34 > 0x98)
        {
          if (v34 != 153)
            goto LABEL_51;
          v38 = *(_DWORD *)(v33 + 16);
          if ((v38 & 0x80000000) == 0)
          {
            if ((v38 - 3) < 3)
            {
              v41 = *((_DWORD *)v236 + 45);
              *((_DWORD *)v236 + 45) = v41 + 1;
              v40 = -33 - v41;
            }
            else
            {
              v39 = *((_DWORD *)v236 + 44);
              *((_DWORD *)v236 + 44) = v39 + 1;
              v40 = v39 + 33;
            }
            *((_DWORD *)v206 + *(unsigned int *)(v33 + 8)) = v40;
            goto LABEL_51;
          }
          _ZZN3JSC2B312_GLOBAL__N_110LowerToAir3runEvENKUlPNS0_5ValueERT_E_clIN3WTF7HashMapIS4_NS9_6VectorINS0_3Air3TmpELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_11DefaultHashIS4_EENS9_10HashTraitsIS4_EENSJ_ISG_EENS9_15HashTableTraitsEEEEEDaS4_S6_((uint64_t)&v202, *((_DWORD **)v2[8] + v32), &v210, v11, v12, v13, v14, v15);
        }
        else
        {
          v36 = v34 - 82 < 2 || v34 == 8 || v34 == 10;
          if (!v36 || (*(_DWORD *)(v33 + 16) & 0x80000000) == 0)
            goto LABEL_51;
        }
        _ZZN3JSC2B312_GLOBAL__N_110LowerToAir3runEvENKUlPNS0_5ValueERT_E_clIN3WTF7HashMapIS4_NS9_6VectorINS0_3Air3TmpELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_11DefaultHashIS4_EENS9_10HashTraitsIS4_EENSJ_ISG_EENS9_15HashTableTraitsEEEEEDaS4_S6_((uint64_t)&v202, (_DWORD *)v33, &v209, v11, v12, v13, v14, v15);
LABEL_51:
        v32 = (v32 + 1);
        v37 = *((unsigned int *)v2 + 19);
        if (v37 > v32)
        {
          while (!*((_QWORD *)v2[8] + v32))
          {
            if (v37 == ++v32)
            {
              LODWORD(v32) = *((_DWORD *)v2 + 19);
              break;
            }
          }
        }
        if ((_DWORD)v31 == (_DWORD)v32)
        {
          v2 = v235;
          break;
        }
      }
    }
  }
LABEL_62:
  v42 = *((unsigned int *)v2 + 3);
  if ((_DWORD)v42)
  {
    v43 = 0;
    while (!*((_QWORD *)*v2 + v43))
    {
      if (v42 == ++v43)
        goto LABEL_68;
    }
    if ((_DWORD)v42 != (_DWORD)v43)
    {
      v165 = v2;
      while (1)
      {
        v249 = 0;
        v166 = *((_QWORD *)*v2 + v43);
        v249 = v166;
        v167 = *(_DWORD *)(v166 + 4);
        if (v167 < 0)
        {
          v201 = v167 & 0x7FFFFFFF;
          if (v201 >= *((_DWORD *)v165 + 11))
            goto LABEL_323;
          v168 = *((_DWORD *)v165[4] + 4 * v201 + 3);
        }
        else
        {
          v168 = (v167 - 1) < 5;
        }
        WTF::Vector<JSC::B3::Air::Tmp,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v250, v168);
        WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Air::Tmp,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v245, &v214, &v249, (uint64_t)&v250, v169, v170, v171, v172);
        v173 = v250;
        if (&v251 != (uint64_t *)v250 && (_QWORD)v250 != 0)
        {
          *(_QWORD *)&v250 = 0;
          DWORD2(v250) = 0;
          WTF::fastFree(v173, v9, v10, v11, v12, v13, v14, v15);
        }
        v175 = 0;
        v176 = *(_DWORD *)(v166 + 4);
        v165 = v235;
        v177 = v236;
        v178 = v245;
        while ((v176 & 0x80000000) == 0)
        {
          if (v175)
            goto LABEL_279;
          v179 = v176;
          if (v176 - 1 >= 5)
            goto LABEL_279;
LABEL_272:
          if (v179 >= 0x80000000)
            v179 = 0x80000000;
          if (v179 - 3 < 3)
          {
            v182 = *((_DWORD *)v177 + 45);
            *((_DWORD *)v177 + 45) = v182 + 1;
            v181 = -33 - v182;
          }
          else
          {
            v180 = *((_DWORD *)v177 + 44);
            *((_DWORD *)v177 + 44) = v180 + 1;
            v181 = v180 + 33;
          }
          if (v175 >= *((unsigned int *)v178 + 5))
          {
            __break(0xC471u);
            JUMPOUT(0x197FA1DF8);
          }
          *(_DWORD *)(*((_QWORD *)v178 + 1) + 4 * v175++) = v181;
        }
        if ((v176 & 0x7FFFFFFF) >= *((_DWORD *)v165 + 11))
        {
          __break(0xC471u);
          JUMPOUT(0x197FA1E00);
        }
        v200 = (uint64_t)v165[4] + 16 * (v176 & 0x7FFFFFFF);
        if (v175 < *(unsigned int *)(v200 + 12))
          break;
LABEL_279:
        v43 = (v43 + 1);
        v183 = *((unsigned int *)v2 + 3);
        if (v183 > v43)
        {
          while (!*((_QWORD *)*v2 + v43))
          {
            if (v183 == ++v43)
            {
              LODWORD(v43) = *((_DWORD *)v2 + 3);
              break;
            }
          }
        }
        if ((_DWORD)v42 == (_DWORD)v43)
        {
          v2 = v235;
          goto LABEL_68;
        }
      }
      v179 = *(_DWORD *)(*(_QWORD *)v200 + 4 * v175);
      goto LABEL_272;
    }
  }
LABEL_68:
  if (!*((_DWORD *)v2 + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x197FA1DA8);
  }
  v44 = *(WTF **)v2[6];
  v245 = v44;
  v45 = *(unsigned int *)v44;
  v46 = v223;
  if (v223 < 0)
    v47 = 63;
  else
    v47 = *(_QWORD *)(2 * v223);
  if (v47 <= v45)
  {
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v223, v45 + 1, 0);
    v46 = v223;
  }
  if (v46 >= 0)
    v48 = (uint64_t *)(2 * v46 + 8);
  else
    v48 = &v223;
  v49 = (v45 >> 3) & 0x1FFFFFF8;
  v50 = *(uint64_t *)((char *)v48 + v49);
  *(uint64_t *)((char *)v48 + v49) = v50 | (1 << v45);
  v51 = HIDWORD(v225);
  if ((v50 & (1 << v45)) == 0)
  {
    if (HIDWORD(v225) == (_DWORD)v225)
    {
      v160 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v224, HIDWORD(v225) + 1, (unint64_t)&v245);
      v51 = HIDWORD(v225);
      *((_QWORD *)v224 + HIDWORD(v225)) = *v160;
    }
    else
    {
      *((_QWORD *)v224 + HIDWORD(v225)) = v44;
    }
    HIDWORD(v225) = ++v51;
  }
  while (v51)
  {
    v52 = *((_QWORD *)v224 + --v51);
    HIDWORD(v225) = v51;
    if (!v52)
      break;
    v53 = *(unsigned int *)(v52 + 68);
    if ((_DWORD)v53)
    {
      v54 = 16 * v53;
      v55 = (_BYTE *)(*(_QWORD *)(v52 + 56) + 8);
      do
      {
        if (*v55 != 1)
        {
          v56 = (WTF *)*((_QWORD *)v55 - 1);
          v245 = v56;
          v57 = v223;
          if (v223 < 0)
            v58 = 63;
          else
            v58 = *(_QWORD *)(2 * v223);
          v59 = *(unsigned int *)v56;
          if (v58 <= v59)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v223, v59 + 1, 0);
            v57 = v223;
          }
          if (v57 >= 0)
            v60 = (uint64_t *)(2 * v57 + 8);
          else
            v60 = &v223;
          v61 = (v59 >> 3) & 0x1FFFFFF8;
          v62 = *(uint64_t *)((char *)v60 + v61);
          *(uint64_t *)((char *)v60 + v61) = v62 | (1 << v59);
          if ((v62 & (1 << v59)) == 0)
          {
            v63 = HIDWORD(v225);
            if (HIDWORD(v225) == (_DWORD)v225)
            {
              v64 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v224, HIDWORD(v225) + 1, (unint64_t)&v245);
              v63 = HIDWORD(v225);
              *((_QWORD *)v224 + HIDWORD(v225)) = *v64;
            }
            else
            {
              *((_QWORD *)v224 + HIDWORD(v225)) = v56;
            }
            HIDWORD(v225) = v63 + 1;
          }
        }
        v55 += 16;
        v54 -= 16;
      }
      while (v54);
      v51 = HIDWORD(v225);
    }
  }
  v65 = *((unsigned int *)v235 + 15);
  if (!(_DWORD)v65)
  {
    __break(0xC471u);
    JUMPOUT(0x197FA1DB0);
  }
  v66 = 0;
  v67 = (unsigned int **)v235[6];
  while (!v67[v66])
  {
    if (v65 == ++v66)
      goto LABEL_119;
  }
  if ((_DWORD)v65 != (_DWORD)v66)
  {
    v66 = v66;
    do
    {
      if (v65 <= v66)
      {
        __break(0xC471u);
        JUMPOUT(0x197FA1D5CLL);
      }
      v68 = v67[v66];
      v69 = v68[5];
      if ((_DWORD)v69)
      {
        v70 = (uint64_t *)*((_QWORD *)v68 + 1);
        v71 = 8 * v69;
        do
        {
          v72 = *v70++;
          *(_QWORD *)(v72 + 32) = v68;
          v71 -= 8;
        }
        while (v71);
      }
      if (v65 > ++v66)
      {
        while (!v67[v66])
        {
          if (v65 == ++v66)
            goto LABEL_119;
        }
        v66 = v66;
      }
    }
    while (v65 != v66);
  }
LABEL_119:
  JSC::B3::blocksInPreOrder<JSC::B3::BasicBlock>(*v67, v9, v10, v11, v12, v13, v14, v15, (uint64_t)&v245);
  v82 = v245;
  if (!HIDWORD(v246))
    goto LABEL_156;
  v83 = (WTF *)((char *)v245 + 8 * HIDWORD(v246));
  do
  {
    v84 = *(unsigned int **)v82;
    v229 = v84;
    if (v84 && ((v85 = (unint64_t *)(2 * v223), v223 < 0) ? (v86 = 63) : (v86 = *v85), v87 = *v84, v86 > v87))
    {
      v88 = (uint64_t *)(v85 + 1);
      if (v223 >= 0)
        v89 = v88;
      else
        v89 = &v223;
      v90 = (*(unint64_t *)((char *)v89 + ((v87 >> 3) & 0x1FFFFFF8)) >> v87) & 1;
    }
    else
    {
      LOBYTE(v90) = 0;
    }
    v230 = v90 ^ 1;
    v91 = v84[17];
    if ((_DWORD)v91)
    {
      v92 = (unsigned int **)*((_QWORD *)v84 + 7);
      v93 = &v92[2 * v91];
      do
      {
        v94 = *((_BYTE *)v92 + 8);
        v95 = *((_QWORD *)v211 + *v84);
        v96 = (uint64_t *)(v95 + 24);
        *(_QWORD *)&v250 = *((_QWORD *)v211 + **v92);
        BYTE8(v250) = v94;
        v97 = *(unsigned int *)(v95 + 36);
        if ((_DWORD)v97 == *(_DWORD *)(v95 + 32))
        {
          v159 = (uint32x4_t *)WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v96, (void *)(v97 + 1), (unint64_t)&v250, v75, v76, v77, v78, v79);
          v97 = *(unsigned int *)(v95 + 36);
          v98 = *(_QWORD *)(v95 + 24);
          v80 = *v159;
        }
        else
        {
          v98 = *v96;
          v80 = (uint32x4_t)v250;
        }
        *(uint32x4_t *)(v98 + 16 * v97) = v80;
        ++*(_DWORD *)(v95 + 36);
        v92 += 2;
      }
      while (v92 != v93);
    }
    v99 = v84[5];
    if (v99)
    {
      v100 = v99 - 1;
      v101 = 8 * (v99 - 1);
      while (1)
      {
        v231 = v100;
        if (v84[5] <= v100)
          break;
        v102 = *(_QWORD *)(*((_QWORD *)v84 + 1) + v101);
        v232 = v102;
        if (!v102
          || ((v103 = (unint64_t *)(2 * v202), v202 < 0) ? (v104 = 63) : (v104 = *v103),
              (v105 = *(unsigned int *)(v102 + 8), v104 <= v105)
           || ((v106 = (uint64_t *)(v103 + 1), v202 >= 0) ? (v107 = v106) : (v107 = &v202),
               ((*(unint64_t *)((char *)v107 + ((v105 >> 3) & 0x1FFFFFF8)) >> v105) & 1) == 0)))
        {
          v250 = 0uLL;
          v108 = HIDWORD(v227);
          if (HIDWORD(v227) == DWORD2(v227))
          {
            WTF::Vector<WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v227, (uint64_t *)&v250);
          }
          else
          {
            v109 = (_QWORD *)(v227 + 528 * HIDWORD(v227));
            *v109 = v109 + 2;
            v109[1] = 4;
            HIDWORD(v227) = v108 + 1;
          }
        }
        v101 -= 8;
        if (--v100 == -1)
          goto LABEL_151;
      }
LABEL_323:
      __break(0xC471u);
      JUMPOUT(0x197FA1D54);
    }
LABEL_151:
    v82 = (WTF *)((char *)v82 + 8);
  }
  while (v82 != v83);
  v82 = v245;
LABEL_156:
  if (v82)
  {
    v245 = 0;
    LODWORD(v246) = 0;
    WTF::fastFree((unint64_t)v82, v73, v74, v75, v76, v77, v78, v79);
  }
  if (HIDWORD(v239))
  {
    WTF::bubbleSort<WTF::Insertion<std::unique_ptr<JSC::B3::Air::BasicBlock>> *>((uint64_t)v238, (uint64_t)v238 + 16 * HIDWORD(v239));
    WTF::executeInsertions<WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::Air::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v237, (unsigned int *)&v238, v184, v185, v186, v187, v188, v189);
    WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<JSC::B3::GenericBlockInsertionSet<JSC::B3::Air::BasicBlock>::execute(void)::{lambda(std::unique_ptr<JSC::B3::Air::BasicBlock>&)#1}>(v237, (uint64_t)&v245, 0);
    v190 = *((unsigned int *)v237 + 3);
    if ((_DWORD)v190)
    {
      v191 = 0;
      v192 = *v237;
      do
      {
        **(_DWORD **)(v192 + 8 * v191) = v191;
        ++v191;
      }
      while (v190 != v191);
    }
  }
  v110 = v236;
  v245 = v236;
  v246 = (WTF *)v248;
  v247 = 8;
  if (HIDWORD(v228))
  {
    v148 = v228;
    v149 = v228 + ((unint64_t)HIDWORD(v228) << 7);
    do
    {
      *(_QWORD *)&v250 = 0;
      *((_QWORD *)&v250 + 1) = v252;
      v251 = 3;
      v150 = *(__int128 **)v148;
      if (*(_QWORD *)v148 == v148 + 16)
      {
        v151 = *(unsigned int *)(v148 + 12);
        if ((_DWORD)v151)
        {
          v152 = 32 * v151;
          v153 = v252;
          do
          {
            v154 = *v150;
            v155 = v150[1];
            v150 += 2;
            *v153 = v154;
            v153[1] = v155;
            v153 += 2;
            v152 -= 32;
          }
          while (v152);
        }
      }
      else
      {
        *(_QWORD *)v148 = v148 + 16;
        *((_QWORD *)&v250 + 1) = v150;
        v161 = *(_DWORD *)(v148 + 8);
        *(_DWORD *)(v148 + 8) = 3;
        LODWORD(v251) = v161;
        LODWORD(v151) = *(_DWORD *)(v148 + 12);
      }
      *(_DWORD *)(v148 + 12) = 0;
      HIDWORD(v251) = v151;
      v156 = *(_DWORD *)(v148 + 119);
      v253[0] = *(_QWORD *)(v148 + 112);
      *(_DWORD *)((char *)v253 + 7) = v156;
      JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>((uint64_t)&v245, (unint64_t)&v250, v74, v75, v76, v77, v78, v79);
      v158 = *((_QWORD *)&v250 + 1);
      if (v252 != *((_BYTE **)&v250 + 1) && *((_QWORD *)&v250 + 1))
      {
        *((_QWORD *)&v250 + 1) = 0;
        LODWORD(v251) = 0;
        WTF::fastFree(v158, v157, v74, v75, v76, v77, v78, v79);
      }
      v148 += 128;
    }
    while (v148 != v149);
    v110 = v236;
  }
  if (!*((_DWORD *)v110 + 27))
  {
    __break(0xC471u);
    JUMPOUT(0x197FA1DB8);
  }
  JSC::B3::Air::InsertionSet::execute((JSC::B3::Air::InsertionSet *)&v245, **((JSC::B3::Air::BasicBlock ***)v110 + 12), v74, v75, v76, v77, v78, v79);
  v118 = v246;
  if (HIDWORD(v247))
  {
    v195 = 136 * HIDWORD(v247);
    v196 = (char *)v246 + 24;
    do
    {
      v197 = *((_QWORD *)v196 - 2);
      if (v196 != (char *)v197 && v197 != 0)
      {
        *((_QWORD *)v196 - 2) = 0;
        *((_DWORD *)v196 - 2) = 0;
        WTF::fastFree(v197, v111, v112, v113, v114, v115, v116, v117);
      }
      v196 += 136;
      v195 -= 136;
    }
    while (v195);
    v118 = v246;
  }
  if (v248 != (_BYTE *)v118 && v118 != 0)
  {
    v246 = 0;
    LODWORD(v247) = 0;
    WTF::fastFree((unint64_t)v118, v111, v112, v113, v114, v115, v116, v117);
  }
  if (HIDWORD(v239))
  {
    v193 = 16 * HIDWORD(v239);
    v194 = (void **)((char *)v238 + 8);
    do
    {
      v111 = *v194;
      *v194 = 0;
      if (v111)
        std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)v194, (WTF *)v111, v112, v113, v114, v115, v116, v117);
      v194 += 2;
      v193 -= 16;
    }
    while (v193);
  }
  v120 = v238;
  if (v240 != (_QWORD *)v238 && v238 != 0)
  {
    v238 = 0;
    LODWORD(v239) = 0;
    WTF::fastFree((unint64_t)v120, v111, v112, v113, v114, v115, v116, v117);
  }
  if (v234)
    WTF::fastFree(v234 - 16, v111, v112, v113, v114, v115, v116, v117);
  v122 = v228;
  if (HIDWORD(v228))
  {
    v138 = (unint64_t)HIDWORD(v228) << 7;
    v139 = v228 + 16;
    do
    {
      v140 = *(_QWORD *)(v139 - 16);
      if (v139 != v140 && v140 != 0)
      {
        *(_QWORD *)(v139 - 16) = 0;
        *(_DWORD *)(v139 - 8) = 0;
        WTF::fastFree(v140, v111, v112, v113, v114, v115, v116, v117);
      }
      v139 += 128;
      v138 -= 128;
    }
    while (v138);
    v122 = v228;
  }
  if (v122)
  {
    *(_QWORD *)&v228 = 0;
    DWORD2(v228) = 0;
    WTF::fastFree(v122, v111, v112, v113, v114, v115, v116, v117);
  }
  if (HIDWORD(v227))
    WTF::VectorTypeOperations<WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct((unint64_t *)v227, (unint64_t *)(v227 + 528 * HIDWORD(v227)), v112, v113, v114, v115, v116, v117);
  v123 = v227;
  if ((_QWORD)v227)
  {
    *(_QWORD *)&v227 = 0;
    DWORD2(v227) = 0;
    WTF::fastFree(v123, v111, v112, v113, v114, v115, v116, v117);
  }
  v124 = v224;
  if (v226 != (_QWORD *)v224 && v224)
  {
    v224 = 0;
    LODWORD(v225) = 0;
    WTF::fastFree((unint64_t)v124, v111, v112, v113, v114, v115, v116, v117);
  }
  if ((v223 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v223, v111, v112, v113, v114, v115, v116, v117);
  v125 = (unint64_t)v220;
  if (&v222 != v220 && v220)
  {
    v220 = 0;
    v221 = 0;
    WTF::fastFree(v125, v111, v112, v113, v114, v115, v116, v117);
  }
  v126 = v217;
  if (v219)
  {
    v127 = 16 * v219;
    do
    {
      v128 = *(_QWORD *)v126;
      if (*(_QWORD *)v126)
      {
        *(_QWORD *)v126 = 0;
        *(_DWORD *)(v126 + 8) = 0;
        WTF::fastFree(v128, v111, v112, v113, v114, v115, v116, v117);
      }
      v126 += 16;
      v127 -= 16;
    }
    while (v127);
    v126 = v217;
  }
  if (v126)
  {
    v217 = 0;
    v218 = 0;
    WTF::fastFree(v126, v111, v112, v113, v114, v115, v116, v117);
  }
  v129 = v215;
  if (v215)
  {
    v215 = 0;
    v216 = 0;
    WTF::fastFree((unint64_t)v129, v111, v112, v113, v114, v115, v116, v117);
  }
  v130 = v214;
  if (v214)
  {
    v162 = *(unsigned int *)(v214 - 4);
    if ((_DWORD)v162)
    {
      v163 = v214 + 8;
      do
      {
        if (*(_QWORD *)(v163 - 8) != -1)
        {
          v164 = *(_QWORD *)v163;
          if (*(_QWORD *)v163)
          {
            *(_QWORD *)v163 = 0;
            *(_DWORD *)(v163 + 8) = 0;
            WTF::fastFree(v164, v111, v112, v113, v114, v115, v116, v117);
          }
        }
        v163 += 24;
        --v162;
      }
      while (v162);
    }
    WTF::fastFree(v130 - 16, v111, v112, v113, v114, v115, v116, v117);
  }
  v131 = v211;
  if (v211)
  {
    v211 = 0;
    v212 = 0;
    WTF::fastFree((unint64_t)v131, v111, v112, v113, v114, v115, v116, v117);
  }
  v132 = v210;
  if (v210)
  {
    v142 = *(unsigned int *)(v210 - 4);
    if ((_DWORD)v142)
    {
      v143 = v210 + 8;
      do
      {
        if (*(_QWORD *)(v143 - 8) != -1)
        {
          v144 = *(_QWORD *)v143;
          if (*(_QWORD *)v143)
          {
            *(_QWORD *)v143 = 0;
            *(_DWORD *)(v143 + 8) = 0;
            WTF::fastFree(v144, v111, v112, v113, v114, v115, v116, v117);
          }
        }
        v143 += 24;
        --v142;
      }
      while (v142);
    }
    WTF::fastFree(v132 - 16, v111, v112, v113, v114, v115, v116, v117);
  }
  v133 = v209;
  if (v209)
  {
    v145 = *(unsigned int *)(v209 - 4);
    if ((_DWORD)v145)
    {
      v146 = v209 + 8;
      do
      {
        if (*(_QWORD *)(v146 - 8) != -1)
        {
          v147 = *(_QWORD *)v146;
          if (*(_QWORD *)v146)
          {
            *(_QWORD *)v146 = 0;
            *(_DWORD *)(v146 + 8) = 0;
            WTF::fastFree(v147, v111, v112, v113, v114, v115, v116, v117);
          }
        }
        v146 += 24;
        --v145;
      }
      while (v145);
    }
    WTF::fastFree(v133 - 16, v111, v112, v113, v114, v115, v116, v117);
  }
  v134 = v206;
  if (v206)
  {
    v206 = 0;
    v207 = 0;
    WTF::fastFree((unint64_t)v134, v111, v112, v113, v114, v115, v116, v117);
  }
  v135 = v203;
  if (v203)
  {
    v203 = 0;
    v204 = 0;
    WTF::fastFree((unint64_t)v135, v111, v112, v113, v114, v115, v116, v117);
  }
  if ((v202 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v202, v111, v112, v113, v114, v115, v116, v117);
  v136 = (WTF *)v242[0];
  *(_QWORD *)(v242[0] + 144) = v242[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v244)
      v199 = (WTF *)((char *)v244 + 16);
    else
      v199 = 0;
    v245 = v136;
    v246 = v199;
  }
  v137 = v244;
  v244 = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 1)
      WTF::fastFree((unint64_t)v137, v111, v112, v113, v114, v115, v116, v117);
    else
      --*(_DWORD *)v137;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v243);
}

JSC::B3::BasicBlock *JSC::B3::powDoubleInt32(JSC::B3::Procedure *a1, JSC::B3::BasicBlock *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  JSC::B3::BasicBlock *v9;
  uint64_t v10;
  JSC::B3::BasicBlock *v11;
  JSC::B3::BasicBlock *v12;
  JSC::B3::BasicBlock *v13;
  uint64_t v14;
  JSC::B3::Value *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::B3::Value *v19;
  JSC::B3::Value *v20;
  JSC::B3::Value *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::B3::Value *v34;
  JSC::B3::Value *v35;
  uint64_t v36;
  JSC::B3::Value *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Value *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::B3::Value *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::B3::Value *v58;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  JSC::B3::BasicBlock *v65;

  v9 = (JSC::B3::BasicBlock *)JSC::B3::Procedure::addBlock(a1, 1.0);
  v10 = JSC::B3::Procedure::addBlock(a1, 1.0);
  v11 = (JSC::B3::BasicBlock *)JSC::B3::Procedure::addBlock(a1, 1.0);
  v12 = (JSC::B3::BasicBlock *)JSC::B3::Procedure::addBlock(a1, 1.0);
  v13 = (JSC::B3::BasicBlock *)JSC::B3::Procedure::addBlock(a1, 1.0);
  v65 = (JSC::B3::BasicBlock *)JSC::B3::Procedure::addBlock(a1, 1.0);
  v14 = JSC::B3::BasicBlock::appendNew<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)a2, a1, a3, 1000);
  v15 = JSC::B3::Procedure::add<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const32Value *>(a1, 57, a3, a5, v14);
  JSC::B3::BasicBlock::append(a2, v15);
  JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t)a2, a1, 155, a3, (uint64_t)v15);
  JSC::B3::BasicBlock::setSuccessors((uint64_t)a2, (uint64_t)v9, 0, v10, 0, v16, v17, v18);
  v19 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t)v9, a1, 47, a3, a5);
  v20 = JSC::B3::Procedure::add<JSC::B3::ConstPtrValue,JSC::B3::Origin,void *>(a1, a3);
  JSC::B3::BasicBlock::append(v9, v20);
  v21 = JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::ConstPtrValue *,JSC::B3::Value *,JSC::B3::Value *>(a1, 4, a3, (uint64_t)v20, a4, (uint64_t)v19);
  JSC::B3::BasicBlock::append(v9, v21);
  v64 = JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *>((uint64_t)v9, (uint64_t)a1, a3, (uint64_t)v21);
  JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin>((uint64_t)v9, (uint64_t)a1, 154, a3);
  JSC::B3::BasicBlock::setSuccessors((uint64_t)v9, (uint64_t)v65, 0, v22, v23, v24, v25, v26);
  v27 = JSC::B3::BasicBlock::appendNew<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>(v10, a1, a3);
  v28 = JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *>(v10, (uint64_t)a1, a3, v27);
  v63 = JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *>(v10, (uint64_t)a1, a3, v27);
  v60 = JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *>(v10, (uint64_t)a1, a3, a4);
  v62 = JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *>(v10, (uint64_t)a1, a3, a5);
  JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin>(v10, (uint64_t)a1, 154, a3);
  JSC::B3::BasicBlock::setSuccessors(v10, (uint64_t)v11, 0, v29, v30, v31, v32, v33);
  v34 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin>(v11, a1, 153, 1, a3);
  v35 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin>(v11, a1, 153, 4, a3);
  v36 = JSC::B3::BasicBlock::appendNew<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v11, a1, a3, 1);
  v37 = JSC::B3::Procedure::add<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const32Value *>(a1, 22, a3, (uint64_t)v34, v36);
  JSC::B3::BasicBlock::append(v11, v37);
  JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t)v11, a1, 155, a3, (uint64_t)v37);
  JSC::B3::BasicBlock::setSuccessors((uint64_t)v11, (uint64_t)v12, 0, (uint64_t)v13, 0, v38, v39, v40);
  v41 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin>(v12, a1, 153, 4, a3);
  v42 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t)v12, (uint64_t)a1, 16, a3, (uint64_t)v41, (uint64_t)v35);
  v43 = JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *>((uint64_t)v12, (uint64_t)a1, a3, v42);
  *(_QWORD *)(v28 + 40) = v41;
  *(_QWORD *)(v43 + 40) = v41;
  v44 = JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *>((uint64_t)v12, (uint64_t)a1, a3, v42);
  JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin>((uint64_t)v12, (uint64_t)a1, 154, a3);
  JSC::B3::BasicBlock::setSuccessors((uint64_t)v12, (uint64_t)v13, 0, v45, v46, v47, v48, v49);
  v50 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t)v13, (uint64_t)a1, 16, a3, (uint64_t)v35, (uint64_t)v35);
  v51 = JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *>((uint64_t)v13, (uint64_t)a1, a3, v50);
  *(_QWORD *)(v60 + 40) = v35;
  *(_QWORD *)(v51 + 40) = v35;
  v52 = JSC::B3::BasicBlock::appendNew<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)v13, a1, a3, 1);
  v53 = JSC::B3::Procedure::add<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const32Value *>(a1, 27, a3, (uint64_t)v34, v52);
  JSC::B3::BasicBlock::append(v13, v53);
  v54 = JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *>((uint64_t)v13, (uint64_t)a1, a3, (uint64_t)v53);
  *(_QWORD *)(v62 + 40) = v34;
  *(_QWORD *)(v54 + 40) = v34;
  JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>((uint64_t)v13, a1, 155, a3, (uint64_t)v53);
  JSC::B3::BasicBlock::setSuccessors((uint64_t)v13, (uint64_t)v11, 0, (uint64_t)v65, 0, v55, v56, v57);
  v58 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin>(v65, a1, 153, 4, a3);
  *(_QWORD *)(v64 + 40) = v58;
  *(_QWORD *)(v63 + 40) = v58;
  *(_QWORD *)(v44 + 40) = v58;
  return v65;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::Const32Value,JSC::B3::Origin,int>(uint64_t a1, JSC::B3::Value *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint64_t v14;

  v8 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 3;
  *(_DWORD *)(v8 + 16) = 1;
  *(_BYTE *)(v8 + 20) = 0;
  *(_QWORD *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E357D8E0;
  *(_DWORD *)(v8 + 40) = a4;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v8);
  v14 = v8;
  v9 = (char **)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 16))
  {
    v13 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, (unint64_t)&v14);
    v10 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = *(_QWORD *)v13;
    v11 = v14;
  }
  else
  {
    *(_QWORD *)&(*v9)[8 * v10] = v8;
    v11 = v8;
  }
  *(_DWORD *)(a1 + 20) = v10 + 1;
  *(_QWORD *)(v11 + 32) = a1;
  return v8;
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(uint64_t a1, JSC::B3::Value *a2, int a3, uint64_t a4, uint64_t a5)
{
  __int16 v9;
  JSC::B3::Value *Space;
  char **v11;
  uint64_t v12;
  JSC::B3::Value *v13;
  char *v15;
  JSC::B3::Value *v16;

  v9 = a3;
  Space = (JSC::B3::Value *)JSC::B3::Value::allocateSpace(a3, 40);
  JSC::B3::Value::Value<JSC::B3::Value*>((uint64_t)Space, v9, a4, a5);
  JSC::B3::Procedure::addValueImpl(a2, Space);
  v16 = Space;
  v11 = (char **)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 16))
  {
    v15 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v16);
    v12 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) = *(_QWORD *)v15;
    v13 = v16;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = Space;
    v13 = Space;
  }
  *(_DWORD *)(a1 + 20) = v12 + 1;
  *((_QWORD *)v13 + 4) = a1;
  return Space;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::UpsilonValue,JSC::B3::Origin,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  result = WTF::fastMalloc((WTF *)0x38);
  v9 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 152;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 1;
  *(_QWORD *)result = &unk_1E357EDA0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = a4;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = 0;
  v10 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v10 - 8);
    *(_DWORD *)(a2 + 92) = v10 - 1;
    v12 = *(_QWORD *)(a2 + 64);
  }
  else
  {
    v11 = *(unsigned int *)(a2 + 76);
    if ((_DWORD)v11 == *(_DWORD *)(a2 + 72))
    {
      v17 = v11 + (v11 >> 2);
      if (v17 >= 0x10)
        v18 = v17 + 1;
      else
        v18 = 16;
      if (v18 <= v11 + 1)
        v19 = v11 + 1;
      else
        v19 = v18;
      if (v19 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v20 = *(const void **)(a2 + 64);
      v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
      *(_DWORD *)(a2 + 72) = v19;
      *(_QWORD *)(a2 + 64) = v21;
      memcpy(v21, v20, 8 * v11);
      if (v20)
      {
        if (*(const void **)(a2 + 64) == v20)
        {
          *(_QWORD *)(a2 + 64) = 0;
          *(_DWORD *)(a2 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
      }
      v29 = *(unsigned int *)(a2 + 76);
      v12 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(v12 + 8 * v29) = 0;
      *(_DWORD *)(a2 + 76) = v29 + 1;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(v12 + 8 * v11) = 0;
      *(_DWORD *)(a2 + 76) = v11 + 1;
    }
  }
  *(_QWORD *)(v12 + 8 * v11) = v9;
  *(_DWORD *)(v9 + 8) = v11;
  v30 = v9;
  v13 = (char **)(a1 + 8);
  v14 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 16))
  {
    v16 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v30);
    v14 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = *(_QWORD *)v16;
    v15 = v30;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v9;
    v15 = v9;
  }
  *(_DWORD *)(a1 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = a1;
  return v9;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>(uint64_t a1, JSC::B3::Value *a2, uint64_t a3)
{
  uint64_t v6;
  char **v7;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  uint64_t v12;

  v6 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v6 + 8) = -1;
  *(_WORD *)(v6 + 12) = 5;
  *(_DWORD *)(v6 + 16) = 4;
  *(_BYTE *)(v6 + 20) = 0;
  *(_QWORD *)(v6 + 24) = a3;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)v6 = off_1E357DC30;
  *(_QWORD *)(v6 + 40) = 0x3FF0000000000000;
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v6);
  v12 = v6;
  v7 = (char **)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 16))
  {
    v11 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v7, v8 + 1, (unint64_t)&v12);
    v8 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v8) = *(_QWORD *)v11;
    v9 = v12;
  }
  else
  {
    *(_QWORD *)&(*v7)[8 * v8] = v6;
    v9 = v6;
  }
  *(_DWORD *)(a1 + 20) = v8 + 1;
  *(_QWORD *)(v9 + 32) = a1;
  return v6;
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, int a3, int a4, uint64_t a5)
{
  JSC::B3::Value *v7;

  v7 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin>(a3, a4, a5);
  JSC::B3::Procedure::addValueImpl(a2, v7);
  JSC::B3::BasicBlock::append(a1, v7);
  return v7;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  result = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(a3, a4, a5, a6);
  v9 = result;
  v10 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v10 - 8);
    *(_DWORD *)(a2 + 92) = v10 - 1;
    v12 = *(_QWORD *)(a2 + 64);
  }
  else
  {
    v11 = *(unsigned int *)(a2 + 76);
    if ((_DWORD)v11 == *(_DWORD *)(a2 + 72))
    {
      v17 = v11 + (v11 >> 2);
      if (v17 >= 0x10)
        v18 = v17 + 1;
      else
        v18 = 16;
      if (v18 <= v11 + 1)
        v19 = v11 + 1;
      else
        v19 = v18;
      if (v19 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v20 = *(const void **)(a2 + 64);
      v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
      *(_DWORD *)(a2 + 72) = v19;
      *(_QWORD *)(a2 + 64) = v21;
      memcpy(v21, v20, 8 * v11);
      if (v20)
      {
        if (*(const void **)(a2 + 64) == v20)
        {
          *(_QWORD *)(a2 + 64) = 0;
          *(_DWORD *)(a2 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
      }
      v29 = *(unsigned int *)(a2 + 76);
      v12 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(v12 + 8 * v29) = 0;
      *(_DWORD *)(a2 + 76) = v29 + 1;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(v12 + 8 * v11) = 0;
      *(_DWORD *)(a2 + 76) = v11 + 1;
    }
  }
  *(_QWORD *)(v12 + 8 * v11) = v9;
  *(_DWORD *)(v9 + 8) = v11;
  v30 = v9;
  v13 = (char **)(a1 + 8);
  v14 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 16))
  {
    v16 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)&v30);
    v14 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v14) = *(_QWORD *)v16;
    v15 = v30;
  }
  else
  {
    *(_QWORD *)&(*v13)[8 * v14] = v9;
    v15 = v9;
  }
  *(_DWORD *)(a1 + 20) = v14 + 1;
  *(_QWORD *)(v15 + 32) = a1;
  return v9;
}

void JSC::B3::MemoryValue::~MemoryValue(JSC::B3::MemoryValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::MemoryValue::~MemoryValue(JSC::B3::MemoryValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::MemoryValue::isLegalOffsetImpl(JSC::B3::MemoryValue *this, uint64_t a2)
{
  if (a2 == (int)a2)
    return JSC::B3::MemoryValue::isLegalOffset<int,void,void>((uint64_t)this, a2);
  else
    return 0;
}

uint64_t JSC::B3::MemoryValue::accessType(JSC::B3::MemoryValue *this)
{
  if (*((unsigned __int8 *)this + 12) - 63 >= 5)
    this = (JSC::B3::MemoryValue *)JSC::B3::MemoryValue::child(this, 0);
  return *((unsigned int *)this + 4);
}

BOOL JSC::B3::MemoryValue::accessBank(JSC::B3::MemoryValue *this)
{
  unsigned int v1;

  if (*((unsigned __int8 *)this + 12) - 63 >= 5)
    this = (JSC::B3::MemoryValue *)JSC::B3::MemoryValue::child(this, 0);
  v1 = *((_DWORD *)this + 4);
  if (v1 >= 0x80000000)
    v1 = 0x80000000;
  return v1 - 3 < 3;
}

uint64_t JSC::B3::MemoryValue::accessByteSize(JSC::B3::MemoryValue *this)
{
  int v1;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;

  v1 = *((unsigned __int8 *)this + 12) - 63;
  result = 1;
  switch(v1)
  {
    case 0:
    case 1:
    case 5:
      return result;
    case 2:
    case 3:
    case 6:
      return 2;
    case 4:
      v4 = *((_DWORD *)this + 4);
      goto LABEL_4;
    case 7:
      v4 = *(_DWORD *)(JSC::B3::MemoryValue::child(this, 0) + 16);
LABEL_4:
      if (v4 >= 0x80000000)
        v4 = 0x80000000;
      v5 = v4 - 1;
      if (v5 >= 5)
        result = 1;
      else
        result = qword_19914F9A8[v5];
      break;
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      v6 = *((char *)this + 60);
      if (v6 >= 5)
      {
        __break(0xC471u);
        JUMPOUT(0x197FA2B3CLL);
      }
      result = qword_19914F9D0[v6];
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FA2B1CLL);
  }
  return result;
}

uint64_t JSC::B3::MemoryValue::accessWidth(JSC::B3::MemoryValue *this)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  LOBYTE(v1) = 0;
  switch(*((_BYTE *)this + 12))
  {
    case '?':
    case '@':
    case 'D':
      return v1;
    case 'A':
    case 'B':
    case 'E':
      LOBYTE(v1) = 1;
      break;
    case 'C':
      v4 = *((_DWORD *)this + 4);
      if (v4 >= 0x80000000)
        v4 = 0x80000000;
      if (v4 >= 6)
        LOBYTE(v1) = 0;
      else
        v1 = 0x40302030200uLL >> (8 * v4);
      break;
    case 'F':
      v2 = JSC::B3::MemoryValue::child(this, 0);
      LOBYTE(v1) = 0;
      v3 = *(_DWORD *)(v2 + 16);
      if (v3 >= 0x80000000)
        v3 = 0x80000000;
      if (v3 < 6)
        v1 = 0x40302030200uLL >> (8 * v3);
      break;
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
      LOBYTE(v1) = *((_BYTE *)this + 60);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FA2C5CLL);
  }
  return v1;
}

uint64_t JSC::B3::MemoryValue::dumpMeta(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  WTF::PrintStream *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  int v20;
  uint64_t v22;
  WTF::PrintStream *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  WTF::PrintStream *v27;
  float v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  float v34;
  unsigned int v35;
  _DWORD *v36;
  uint64_t v37;
  WTF::PrintStream *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  WTF::PrintStream *v42;
  float v43;
  unsigned int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  WTF::PrintStream *v48;
  float v49;
  unsigned int v50;
  _BYTE v51[8];
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;

  v5 = this;
  if (*(_DWORD *)(this + 40))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    v7 = (WTF::PrintStream *)v6;
    if (*(_BYTE *)(a2 + 32))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v9 = *(char **)a2;
      v10 = *(_QWORD *)(a2 + 8);
      v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
      if (v9)
      {
        v13 = v10 - 1;
        if (!v10)
          v13 = 0;
        WTF::StringImpl::utf8ForCharacters(v9, v13, (uint64_t)&v54, v12);
      }
      else
      {
        WTF::CString::CString(&v54, &str_25, 0);
        v55 = 0;
      }
      WTF::printExpectedCStringHelper(v11, "StringView", &v54);
      if (v55 != -1)
        ((void (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v55])(v51, &v54);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
    }
    else
    {
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      v15 = *(char **)(a2 + 16);
      v16 = *(_QWORD *)(a2 + 24);
      v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
      if (v15)
      {
        v19 = v16 - 1;
        if (!v16)
          v19 = 0;
        WTF::StringImpl::utf8ForCharacters(v15, v19, (uint64_t)&v54, v18);
      }
      else
      {
        WTF::CString::CString(&v54, &str_25, 0);
        v55 = 0;
      }
      WTF::printExpectedCStringHelper(v17, "StringView", &v54);
      if (v55 != -1)
        ((void (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v55])(v51, &v54);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v7 + 40))(v7);
      *(_BYTE *)(a2 + 32) = 1;
    }
    WTF::PrintStream::printf(v7, "%s", "offset = ");
    WTF::PrintStream::printf(v7, "%d", *(_DWORD *)(v5 + 40));
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  }
  v20 = *(unsigned __int8 *)(v5 + 12);
  if ((v20 - 63) > 4)
  {
LABEL_27:
    if ((v20 - 68) > 2
      || (this = JSC::B3::Value::effects(v5, (uint64_t)v51), v52 == *(_DWORD *)(v5 + 44)) && v53 == *(_DWORD *)(v5 + 48))
    {
      if (*(_DWORD *)(v5 + 52) == *(_DWORD *)(v5 + 56) && *(unsigned __int8 *)(v5 + 12) - 71 >= 8)
        return this;
    }
    goto LABEL_32;
  }
  this = JSC::B3::Value::effects(v5, (uint64_t)&v54);
  if (v56 == *(_DWORD *)(v5 + 44) && v57 == *(_DWORD *)(v5 + 48))
  {
    v20 = *(unsigned __int8 *)(v5 + 12);
    goto LABEL_27;
  }
LABEL_32:
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v23 = (WTF::PrintStream *)v22;
  if (*(_BYTE *)(a2 + 32))
  {
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
    v25 = *(char **)a2;
    v26 = *(_QWORD *)(a2 + 8);
    v27 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    if (v25)
    {
      v29 = v26 - 1;
      if (!v26)
        v29 = 0;
      WTF::StringImpl::utf8ForCharacters(v25, v29, (uint64_t)&v54, v28);
    }
    else
    {
      WTF::CString::CString(&v54, &str_25, 0);
      v55 = 0;
    }
    WTF::printExpectedCStringHelper(v27, "StringView", &v54);
    if (v55 != -1)
      ((void (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v55])(v51, &v54);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 40))(v23);
  }
  else
  {
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
    v31 = *(char **)(a2 + 16);
    v32 = *(_QWORD *)(a2 + 24);
    v33 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
    if (v31)
    {
      v35 = v32 - 1;
      if (!v32)
        v35 = 0;
      WTF::StringImpl::utf8ForCharacters(v31, v35, (uint64_t)&v54, v34);
    }
    else
    {
      WTF::CString::CString(&v54, &str_25, 0);
      v55 = 0;
    }
    WTF::printExpectedCStringHelper(v33, "StringView", &v54);
    if (v55 != -1)
      ((void (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v55])(v51, &v54);
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 40))(v23);
    *(_BYTE *)(a2 + 32) = 1;
  }
  WTF::PrintStream::printf(v23, "%s", "range = ");
  WTF::Range<unsigned int>::dump((_DWORD *)(v5 + 44), (uint64_t)v23);
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  v36 = (_DWORD *)(v5 + 52);
  if (*(_DWORD *)(v5 + 52) != *(_DWORD *)(v5 + 56) || *(unsigned __int8 *)(v5 + 12) - 71 <= 7)
  {
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    v38 = (WTF::PrintStream *)v37;
    if (*(_BYTE *)(a2 + 32))
    {
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
      v40 = *(char **)a2;
      v41 = *(_QWORD *)(a2 + 8);
      v42 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
      if (v40)
      {
        v44 = v41 - 1;
        if (!v41)
          v44 = 0;
        WTF::StringImpl::utf8ForCharacters(v40, v44, (uint64_t)&v54, v43);
      }
      else
      {
        WTF::CString::CString(&v54, &str_25, 0);
        v55 = 0;
      }
      WTF::printExpectedCStringHelper(v42, "StringView", &v54);
      if (v55 != -1)
        ((void (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v55])(v51, &v54);
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v38 + 40))(v38);
    }
    else
    {
      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
      v46 = *(char **)(a2 + 16);
      v47 = *(_QWORD *)(a2 + 24);
      v48 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 32))(v45);
      if (v46)
      {
        v50 = v47 - 1;
        if (!v47)
          v50 = 0;
        WTF::StringImpl::utf8ForCharacters(v46, v50, (uint64_t)&v54, v49);
      }
      else
      {
        WTF::CString::CString(&v54, &str_25, 0);
        v55 = 0;
      }
      WTF::printExpectedCStringHelper(v48, "StringView", &v54);
      if (v55 != -1)
        ((void (*)(_BYTE *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v55])(v51, &v54);
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v38 + 40))(v38);
      *(_BYTE *)(a2 + 32) = 1;
    }
    WTF::PrintStream::printf(v38, "%s", "fenceRange = ");
    WTF::Range<unsigned int>::dump(v36, (uint64_t)v38);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  }
  return this;
}

uint64_t JSC::B3::MemoryValue::MemoryValue(uint64_t a1, uint64_t a2, __int16 a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  result = JSC::B3::Value::Value<>(a1, 0, a3, a4, 1, a5, a6);
  *(_QWORD *)result = off_1E357E4C8;
  *(_DWORD *)(result + 40) = a7;
  *(_QWORD *)(result + 44) = a8;
  *(_QWORD *)(result + 52) = a9;
  return result;
}

{
  uint64_t result;

  result = JSC::B3::Value::Value<>(a1, 0, a3, a4, 1, a5, a6);
  *(_QWORD *)result = off_1E357E4C8;
  *(_DWORD *)(result + 40) = a7;
  *(_QWORD *)(result + 44) = a8;
  *(_QWORD *)(result + 52) = a9;
  return result;
}

uint64_t JSC::B3::Value::Value<>(uint64_t result, uint64_t a2, __int16 a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)result = off_1E357F5F0;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_BYTE *)(result + 20) = a5;
  *(_QWORD *)(result + 24) = a6;
  *(_QWORD *)(result + 32) = 0;
  if (a5 == 4)
  {
    v10 = result;
    v9 = (uint64_t *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)result);
    v11[0] = a7;
    WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v9, v11, 1uLL);
    return v10;
  }
  else
  {
    v7 = 40;
    switch((char)a3)
    {
      case 0:
      case 1:
      case 2:
      case 8:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 79:
      case -103:
      case -102:
      case -101:
      case -99:
      case -98:
      case -97:
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 80:
      case 84:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case -128:
      case -127:
      case -126:
      case -125:
      case -124:
      case -123:
      case -122:
      case -121:
      case -120:
      case -119:
      case -118:
      case -117:
      case -116:
      case -115:
      case -114:
      case -113:
      case -112:
      case -111:
      case -110:
      case -109:
      case -108:
      case -107:
      case -106:
      case -105:
      case -104:
        v7 = 48;
        break;
      case 7:
      case 81:
      case 89:
      case -100:
        v7 = 56;
        break;
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 82:
        v7 = 64;
        break;
      case 83:
        v7 = 176;
        break;
      case 85:
      case 86:
      case 87:
      case 88:
        v7 = 112;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FA3490);
    }
    *(_QWORD *)(result + v7) = a7;
  }
  return result;
}

uint64_t JSC::B3::MemoryValue::MemoryValue(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = JSC::B3::Value::Value<>(a1, 0, a3, 1, 1, a4, a5);
  *(_QWORD *)result = off_1E357E4C8;
  *(_DWORD *)(result + 40) = a6;
  *(_QWORD *)(result + 44) = a7;
  *(_QWORD *)(result + 52) = a8;
  return result;
}

{
  uint64_t result;

  result = JSC::B3::Value::Value<>(a1, 0, a3, 1, 1, a4, a5);
  *(_QWORD *)result = off_1E357E4C8;
  *(_DWORD *)(result + 40) = a6;
  *(_QWORD *)(result + 44) = a7;
  *(_QWORD *)(result + 52) = a8;
  return result;
}

uint64_t JSC::B3::MemoryValue::MemoryValue(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 2;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)a1, 2, a5, a6);
  *(_QWORD *)a1 = off_1E357E4C8;
  *(_DWORD *)(a1 + 40) = a7;
  *(_QWORD *)(a1 + 44) = a8;
  *(_QWORD *)(a1 + 52) = a9;
  return a1;
}

{
  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 2;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)a1, 2, a5, a6);
  *(_QWORD *)a1 = off_1E357E4C8;
  *(_DWORD *)(a1 + 40) = a7;
  *(_QWORD *)(a1 + 44) = a8;
  *(_QWORD *)(a1 + 52) = a9;
  return a1;
}

void JSC::B3::moveConstants(WTF **this, JSC::B3::Procedure *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  JSC::B3::Procedure *v12;
  _DWORD *v13;
  WTF **v14;
  JSC::B3::Procedure *v15;
  WTF **v16;
  WTF *v17;
  uint64_t v18;
  _BYTE v19[176];
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  _DWORD *v23;

  JSC::B3::PhaseScope::PhaseScope((uint64_t)v21, this, (uint64_t)"moveConstants", 14);
  v15 = (JSC::B3::Procedure *)this;
  v16 = this;
  v17 = (WTF *)v19;
  v18 = 8;
  memset(&v19[128], 0, 48);
  v20 = 0;
  v10 = v17;
  if (v19 != (_BYTE *)v17 && v17 != 0)
  {
    v17 = 0;
    LODWORD(v18) = 0;
    WTF::fastFree((unint64_t)v10, v3, v4, v5, v6, v7, v8, v9);
  }
  v12 = (JSC::B3::Procedure *)v21[0];
  *(_QWORD *)(v21[0] + 144) = v21[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v23)
      v14 = (WTF **)(v23 + 4);
    else
      v14 = 0;
    v15 = v12;
    v16 = v14;
  }
  v13 = v23;
  v23 = 0;
  if (v13)
  {
    if (*v13 == 1)
      WTF::fastFree((unint64_t)v13, v3, v4, v5, v6, v7, v8, v9);
    else
      --*v13;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v22);
}

void JSC::B3::`anonymous namespace'::MoveConstants::run(JSC::B3::Procedure **this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int **v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t *v30;
  uint64_t *v31;
  unsigned int v32;
  _DWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  uint64_t v53;
  JSC::B3::Value *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int i;
  uint64_t v67;
  unsigned __int8 *v68;
  int v69;
  uint64_t v71;
  JSC::B3::Value *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  JSC::B3::Value *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  int v89;
  size_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  JSC::B3::BasicBlock *v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  JSC::B3::MemoryValue *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  BOOL v110;
  BOOL v111;
  uint64_t v112;
  uint64_t **v113;
  uint64_t v114;
  int v115;
  BOOL v116;
  BOOL v117;
  BOOL v118;
  char *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 v134;
  unsigned __int8 *v135;
  unsigned int v136;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  __int16 v146;
  int v147;
  uint64_t v148;
  unsigned int v149;
  JSC::B3::Value *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  BOOL v163;
  uint64_t *v164;
  uint64_t v165;
  int v166;
  uint64_t j;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int16 v186;
  uint64_t v187;
  unsigned __int8 *v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t *v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  unsigned int v211;
  int v212;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  int v219;
  BOOL v220;
  uint16x4_t v221;
  uint64_t v223;
  unsigned int **v224;
  unsigned int *v225;
  unsigned int *v226;
  uint64_t *v227;
  uint64_t *v228;
  unsigned int v229;
  _DWORD *v230;
  uint64_t *v231;
  __int128 v232;
  uint64_t *v233;
  int v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  BOOL v248;
  BOOL v249;
  BOOL v250;
  BOOL v251;
  BOOL v253;
  BOOL v254;
  BOOL v255;
  BOOL v256;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t *v265;
  unsigned int v266;
  int v267;
  uint64_t v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  int k;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _BYTE *v279;
  uint64_t v280;
  uint64_t casual;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  const void *v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  unint64_t v298;
  uint64_t v299;
  unsigned int *v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  uint64_t v305;
  uint64_t v306;
  JSC::B3::Value **v307;
  JSC::B3::Value **v308;
  JSC::B3::Value *v309;
  unsigned int v310;
  int v311;
  BOOL v312;
  uint64_t Child;
  uint64_t v314;
  BOOL v315;
  unsigned int v316;
  BOOL v317;
  int v318;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  unsigned int *v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  BOOL v345;
  _BOOL4 v346;
  BOOL v347;
  unsigned int v348;
  BOOL v349;
  int v350;
  char *v352;
  uint64_t v353;
  JSC::B3::Value **v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int *v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  int v366;
  int v367;
  int v368;
  int v369;
  BOOL v370;
  BOOL v371;
  BOOL v372;
  BOOL v373;
  BOOL v375;
  BOOL v376;
  BOOL v377;
  BOOL v378;
  uint64_t v380;
  unint64_t v381;
  uint64_t *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  __int128 v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  __int128 v401;
  int v402;
  int v403;
  __int16 v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t v407;
  __int128 v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  JSC::B3::Value *v415;
  unsigned int v416;
  int v417;
  BOOL v418;
  unsigned int v419;
  uint64_t *v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  JSC::B3::Value *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  __int128 v433;
  int v434;
  uint64_t v435;
  int v436;
  __int16 v437;
  _QWORD *v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _QWORD **v448;
  _QWORD *v449;
  uint64_t v450;
  char *v451;
  uint64_t v452;
  uint64_t v453;
  double *v454;
  uint64_t *v455;
  double *v456;
  char **v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  BOOL v463;
  BOOL v464;
  BOOL v465;
  BOOL v466;
  BOOL v468;
  BOOL v469;
  BOOL v470;
  BOOL v471;
  uint64_t v473;
  uint64_t v474;
  double *v475;
  uint64_t *v476;
  double *v477;
  char **v478;
  uint64_t v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  BOOL v485;
  BOOL v486;
  BOOL v487;
  BOOL v488;
  BOOL v490;
  BOOL v491;
  BOOL v492;
  BOOL v493;
  char *v495;
  unsigned int v496;
  uint64_t v497;
  unint64_t *v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t v502;
  __int128 *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  __int128 *v508;
  __int128 *v509;
  __int128 *v510;
  __int128 *v511;
  __int128 *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  int v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  uint64_t v538;
  int v539;
  JSC::B3::Value *v540;
  uint64_t v541;
  uint64_t v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  BOOL v551;
  BOOL v552;
  BOOL v553;
  BOOL v554;
  BOOL v556;
  BOOL v557;
  BOOL v558;
  BOOL v559;
  int v561;
  int v562;
  int v563;
  int v564;
  uint64_t v565;
  int v566;
  JSC::B3::Value *v567;
  uint64_t v568;
  JSC::B3::Value *v569;
  JSC::B3::Procedure *v570;
  JSC::B3::Value *v571;
  uint64_t v572;
  int v573;
  unint64_t v574;
  uint64_t v575;
  uint64_t *v576;
  int v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  unsigned int v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  JSC::B3::InsertionSet *v586;
  JSC::B3::InsertionSet *v587;
  int v588;
  uint64_t v589;
  JSC::B3::InsertionSet *v590;
  int v591;
  uint64_t **v592;
  unsigned int v593;
  JSC::B3::InsertionSet *v594;
  JSC::B3::InsertionSet *v595;
  int v596;
  JSC::B3::Value *v597;
  uint64_t v598;
  int v599;
  uint64_t **v600;
  int v601;
  unint64_t StatusReg;
  JSC::B3::InsertionSet *v603;
  JSC::B3::_anonymous_namespace_::MoveConstants *v604;
  char v605;
  _QWORD *v606[2];
  uint64_t v607;
  JSC::B3::MemoryValue *v608;
  _BYTE v609[24];
  unsigned int *v610;
  unsigned int v611;
  JSC::B3::BasicBlock *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  __int128 v616;
  __int128 v617;
  JSC::B3::BasicBlock **v618;

  v9 = JSC::B3::Procedure::dominators(*this);
  v614 = 0;
  v615 = 0;
  v604 = (JSC::B3::_anonymous_namespace_::MoveConstants *)this;
  v10 = *((unsigned int *)*this + 15);
  v613 = 0;
  HIDWORD(v614) = v10;
  v600 = v9;
  if ((_DWORD)v10)
  {
    if (v10 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197FA6824);
    }
    LODWORD(v614) = v10;
    v613 = WTF::fastMalloc((WTF *)(16 * v10));
    bzero((void *)v613, 16 * v10);
    v11 = *(_QWORD *)v604;
    v12 = *(unsigned int *)(*(_QWORD *)v604 + 60);
    v9 = v600;
    if ((_DWORD)v12)
    {
      v13 = 0;
      while (!*(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v13))
      {
        if (v12 == ++v13)
          goto LABEL_90;
      }
      if ((_DWORD)v12 != (_DWORD)v13)
      {
        v14 = *(_DWORD *)(*(_QWORD *)v604 + 60);
        do
        {
          if (v14 <= v13)
          {
            __break(0xC471u);
            JUMPOUT(0x197FA67E4);
          }
          v15 = *(unsigned int **)(*(_QWORD *)(v11 + 48) + 8 * v13);
          v16 = v15[5];
          if ((_DWORD)v16)
          {
            v17 = (uint64_t *)*((_QWORD *)v15 + 1);
            v18 = &v17[v16];
            do
            {
              v19 = *v17;
              v20 = *(unsigned __int8 *)(*v17 + 20);
              if (v20 == 4)
              {
                v24 = 40;
                switch(*(_WORD *)(*v17 + 12))
                {
                  case 0u:
                  case 1u:
                  case 2u:
                  case 8u:
                  case 0xDu:
                  case 0xEu:
                  case 0xFu:
                  case 0x10u:
                  case 0x11u:
                  case 0x12u:
                  case 0x13u:
                  case 0x14u:
                  case 0x15u:
                  case 0x16u:
                  case 0x17u:
                  case 0x18u:
                  case 0x19u:
                  case 0x1Au:
                  case 0x1Bu:
                  case 0x1Cu:
                  case 0x1Du:
                  case 0x1Eu:
                  case 0x1Fu:
                  case 0x20u:
                  case 0x21u:
                  case 0x22u:
                  case 0x23u:
                  case 0x24u:
                  case 0x25u:
                  case 0x26u:
                  case 0x27u:
                  case 0x28u:
                  case 0x29u:
                  case 0x2Au:
                  case 0x2Bu:
                  case 0x2Cu:
                  case 0x2Du:
                  case 0x2Eu:
                  case 0x2Fu:
                  case 0x30u:
                  case 0x31u:
                  case 0x32u:
                  case 0x33u:
                  case 0x34u:
                  case 0x35u:
                  case 0x36u:
                  case 0x37u:
                  case 0x38u:
                  case 0x39u:
                  case 0x3Au:
                  case 0x3Bu:
                  case 0x3Cu:
                  case 0x3Du:
                  case 0x3Eu:
                  case 0x4Fu:
                  case 0x99u:
                  case 0x9Au:
                  case 0x9Bu:
                  case 0x9Du:
                  case 0x9Eu:
                  case 0x9Fu:
                    break;
                  case 3u:
                  case 4u:
                  case 5u:
                  case 6u:
                  case 9u:
                  case 0xAu:
                  case 0xBu:
                  case 0xCu:
                  case 0x50u:
                  case 0x54u:
                  case 0x5Au:
                  case 0x5Bu:
                  case 0x5Cu:
                  case 0x5Du:
                  case 0x5Eu:
                  case 0x5Fu:
                  case 0x60u:
                  case 0x61u:
                  case 0x62u:
                  case 0x63u:
                  case 0x64u:
                  case 0x65u:
                  case 0x66u:
                  case 0x67u:
                  case 0x68u:
                  case 0x69u:
                  case 0x6Au:
                  case 0x6Bu:
                  case 0x6Cu:
                  case 0x6Du:
                  case 0x6Eu:
                  case 0x6Fu:
                  case 0x70u:
                  case 0x71u:
                  case 0x72u:
                  case 0x73u:
                  case 0x74u:
                  case 0x75u:
                  case 0x76u:
                  case 0x77u:
                  case 0x78u:
                  case 0x79u:
                  case 0x7Au:
                  case 0x7Bu:
                  case 0x7Cu:
                  case 0x7Du:
                  case 0x7Eu:
                  case 0x7Fu:
                  case 0x80u:
                  case 0x81u:
                  case 0x82u:
                  case 0x83u:
                  case 0x84u:
                  case 0x85u:
                  case 0x86u:
                  case 0x87u:
                  case 0x88u:
                  case 0x89u:
                  case 0x8Au:
                  case 0x8Bu:
                  case 0x8Cu:
                  case 0x8Du:
                  case 0x8Eu:
                  case 0x8Fu:
                  case 0x90u:
                  case 0x91u:
                  case 0x92u:
                  case 0x93u:
                  case 0x94u:
                  case 0x95u:
                  case 0x96u:
                  case 0x97u:
                  case 0x98u:
                    v24 = 48;
                    break;
                  case 7u:
                  case 0x51u:
                  case 0x59u:
                  case 0x9Cu:
                    v24 = 56;
                    break;
                  case 0x3Fu:
                  case 0x40u:
                  case 0x41u:
                  case 0x42u:
                  case 0x43u:
                  case 0x44u:
                  case 0x45u:
                  case 0x46u:
                  case 0x47u:
                  case 0x48u:
                  case 0x49u:
                  case 0x4Au:
                  case 0x4Bu:
                  case 0x4Cu:
                  case 0x4Du:
                  case 0x4Eu:
                  case 0x52u:
                    v24 = 64;
                    break;
                  case 0x53u:
                    v24 = 176;
                    break;
                  case 0x55u:
                  case 0x56u:
                  case 0x57u:
                  case 0x58u:
                    v24 = 112;
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x197FA6774);
                }
                v25 = v19 + v24;
                v22 = *(uint64_t **)v25;
                v23 = *(_QWORD *)v25 + 8 * *(unsigned int *)(v25 + 12);
              }
              else
              {
                v21 = 40;
                switch(*(_WORD *)(*v17 + 12))
                {
                  case 0u:
                  case 1u:
                  case 2u:
                  case 8u:
                  case 0xDu:
                  case 0xEu:
                  case 0xFu:
                  case 0x10u:
                  case 0x11u:
                  case 0x12u:
                  case 0x13u:
                  case 0x14u:
                  case 0x15u:
                  case 0x16u:
                  case 0x17u:
                  case 0x18u:
                  case 0x19u:
                  case 0x1Au:
                  case 0x1Bu:
                  case 0x1Cu:
                  case 0x1Du:
                  case 0x1Eu:
                  case 0x1Fu:
                  case 0x20u:
                  case 0x21u:
                  case 0x22u:
                  case 0x23u:
                  case 0x24u:
                  case 0x25u:
                  case 0x26u:
                  case 0x27u:
                  case 0x28u:
                  case 0x29u:
                  case 0x2Au:
                  case 0x2Bu:
                  case 0x2Cu:
                  case 0x2Du:
                  case 0x2Eu:
                  case 0x2Fu:
                  case 0x30u:
                  case 0x31u:
                  case 0x32u:
                  case 0x33u:
                  case 0x34u:
                  case 0x35u:
                  case 0x36u:
                  case 0x37u:
                  case 0x38u:
                  case 0x39u:
                  case 0x3Au:
                  case 0x3Bu:
                  case 0x3Cu:
                  case 0x3Du:
                  case 0x3Eu:
                  case 0x4Fu:
                  case 0x99u:
                  case 0x9Au:
                  case 0x9Bu:
                  case 0x9Du:
                  case 0x9Eu:
                  case 0x9Fu:
                    break;
                  case 3u:
                  case 4u:
                  case 5u:
                  case 6u:
                  case 9u:
                  case 0xAu:
                  case 0xBu:
                  case 0xCu:
                  case 0x50u:
                  case 0x54u:
                  case 0x5Au:
                  case 0x5Bu:
                  case 0x5Cu:
                  case 0x5Du:
                  case 0x5Eu:
                  case 0x5Fu:
                  case 0x60u:
                  case 0x61u:
                  case 0x62u:
                  case 0x63u:
                  case 0x64u:
                  case 0x65u:
                  case 0x66u:
                  case 0x67u:
                  case 0x68u:
                  case 0x69u:
                  case 0x6Au:
                  case 0x6Bu:
                  case 0x6Cu:
                  case 0x6Du:
                  case 0x6Eu:
                  case 0x6Fu:
                  case 0x70u:
                  case 0x71u:
                  case 0x72u:
                  case 0x73u:
                  case 0x74u:
                  case 0x75u:
                  case 0x76u:
                  case 0x77u:
                  case 0x78u:
                  case 0x79u:
                  case 0x7Au:
                  case 0x7Bu:
                  case 0x7Cu:
                  case 0x7Du:
                  case 0x7Eu:
                  case 0x7Fu:
                  case 0x80u:
                  case 0x81u:
                  case 0x82u:
                  case 0x83u:
                  case 0x84u:
                  case 0x85u:
                  case 0x86u:
                  case 0x87u:
                  case 0x88u:
                  case 0x89u:
                  case 0x8Au:
                  case 0x8Bu:
                  case 0x8Cu:
                  case 0x8Du:
                  case 0x8Eu:
                  case 0x8Fu:
                  case 0x90u:
                  case 0x91u:
                  case 0x92u:
                  case 0x93u:
                  case 0x94u:
                  case 0x95u:
                  case 0x96u:
                  case 0x97u:
                  case 0x98u:
                    v21 = 48;
                    break;
                  case 7u:
                  case 0x51u:
                  case 0x59u:
                  case 0x9Cu:
                    v21 = 56;
                    break;
                  case 0x3Fu:
                  case 0x40u:
                  case 0x41u:
                  case 0x42u:
                  case 0x43u:
                  case 0x44u:
                  case 0x45u:
                  case 0x46u:
                  case 0x47u:
                  case 0x48u:
                  case 0x49u:
                  case 0x4Au:
                  case 0x4Bu:
                  case 0x4Cu:
                  case 0x4Du:
                  case 0x4Eu:
                  case 0x52u:
                    v21 = 64;
                    break;
                  case 0x53u:
                    v21 = 176;
                    break;
                  case 0x55u:
                  case 0x56u:
                  case 0x57u:
                  case 0x58u:
                    v21 = 112;
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x197FA66F4);
                }
                v22 = (uint64_t *)(v19 + v21);
                v23 = v19 + v21 + 8 * v20;
              }
              while (v22 != (uint64_t *)v23)
              {
                if (*(unsigned __int8 *)(*v22 + 12) - 5 <= 2)
                {
                  JSC::B3::Value::key(*v22, (uint64_t)v609);
                  WTF::HashMap<JSC::B3::ValueKey,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::Value *&>(&v615, v609, v22, (uint64_t)&v617);
                  if ((_BYTE)v618)
                  {
                    *(_QWORD *)(*v22 + 32) = v15;
                    v9 = v600;
                  }
                  else
                  {
                    v26 = *(_QWORD *)(v617 + 24);
                    *v22 = v26;
                    v29 = *(unsigned int **)(v26 + 32);
                    v27 = (unsigned int **)(v26 + 32);
                    v28 = v29;
                    v9 = v600;
                    if (v29 != v15)
                    {
                      v30 = v600[1];
                      v31 = &v30[4 * *v15];
                      v32 = *((_DWORD *)v31 + 6);
                      v33 = (_DWORD *)v31 + 7;
                      do
                      {
                        v34 = &v30[4 * *v28];
                        if (v32 > *((_DWORD *)v34 + 6) && *v33 < *((_DWORD *)v34 + 7))
                          break;
                        *v27 = (unsigned int *)v34[2];
                        v27 = (unsigned int **)(*v22 + 32);
                        v28 = *v27;
                      }
                      while (*v27 != v15);
                    }
                  }
                }
                ++v22;
              }
              ++v17;
            }
            while (v17 != v18);
            v14 = *(_DWORD *)(v11 + 60);
          }
          v13 = (v13 + 1);
          if (v14 > v13)
          {
            while (!*(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v13))
            {
              if (v14 == ++v13)
              {
                LODWORD(v13) = v14;
                break;
              }
            }
          }
        }
        while ((_DWORD)v12 != (_DWORD)v13);
        if (v615 && *(_DWORD *)(v615 - 12))
        {
          v35 = *(unsigned int *)(v615 - 4);
          if ((_DWORD)v35)
          {
            v36 = 32 * v35;
            v37 = v615;
            while (!*(_BYTE *)v37 && *(unsigned __int8 *)(v37 + 1) == 159)
            {
              v38 = *(_DWORD *)(v37 + 4);
              v39 = *(_DWORD *)(v37 + 8);
              v40 = *(_DWORD *)(v37 + 12);
              v41 = *(_DWORD *)(v37 + 16);
              v42 = *(_DWORD *)(v37 + 20);
              v43 = (*(_BYTE *)(v37 + 2) & 0xF) == 0 && v38 == 0;
              v44 = v43 && v39 == 0;
              v45 = v44 && v40 == 0;
              v46 = v45 && v41 == 0;
              if (!v46 || v42 != 0)
              {
                v48 = (*(_BYTE *)(v37 + 2) & 0xF) == 0 && v38 == 1;
                v49 = v48 && v39 == 0;
                v50 = v49 && v40 == 0;
                v51 = v50 && v41 == 0;
                if (!v51 || v42 != 0)
                  break;
              }
              v37 += 32;
              v36 -= 32;
              if (!v36)
                goto LABEL_90;
            }
          }
          else
          {
            v37 = v615;
          }
          v53 = v615 + 32 * v35;
          if (v53 != v37)
          {
LABEL_797:
            v453 = *(_QWORD *)(v37 + 24);
            *(_QWORD *)v609 = v453;
            v454 = *(double **)(v453 + 32);
            v455 = v9[1];
            v456 = v454;
            do
            {
              if (v456[13] < v454[13])
              {
                *(_QWORD *)(v453 + 32) = v456;
                v454 = v456;
              }
              v456 = (double *)v455[4 * *(unsigned int *)v456 + 2];
            }
            while (v456);
            v457 = (char **)(v613 + 16 * *(unsigned int *)v454);
            v452 = *((unsigned int *)v457 + 3);
            if ((_DWORD)v452 == *((_DWORD *)v457 + 2))
            {
              v451 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v457, v452 + 1, (unint64_t)v609);
              v9 = v600;
              v452 = *((unsigned int *)v457 + 3);
              *(_QWORD *)&(*v457)[8 * v452] = *(_QWORD *)v451;
            }
            else
            {
              *(_QWORD *)&(*v457)[8 * v452] = v453;
            }
            *((_DWORD *)v457 + 3) = v452 + 1;
            while (1)
            {
              v37 += 32;
              if (v37 == v53)
                break;
              if (!*(_BYTE *)v37 && *(unsigned __int8 *)(v37 + 1) == 159)
              {
                v458 = *(_DWORD *)(v37 + 4);
                v459 = *(_DWORD *)(v37 + 8);
                v460 = *(_DWORD *)(v37 + 12);
                v461 = *(_DWORD *)(v37 + 16);
                v462 = *(_DWORD *)(v37 + 20);
                v463 = (*(_BYTE *)(v37 + 2) & 0xF) == 0 && v458 == 0;
                v464 = v463 && v459 == 0;
                v465 = v464 && v460 == 0;
                v466 = v465 && v461 == 0;
                if (v466 && v462 == 0)
                  continue;
                v468 = (*(_BYTE *)(v37 + 2) & 0xF) == 0 && v458 == 1;
                v469 = v468 && v459 == 0;
                v470 = v469 && v460 == 0;
                v471 = v470 && v461 == 0;
                if (v471 && v462 == 0)
                  continue;
              }
              if (v37 == v53)
                break;
              goto LABEL_797;
            }
          }
        }
      }
    }
  }
LABEL_90:
  v54 = *(JSC::B3::Value **)v604;
  v55 = *(unsigned int *)(*(_QWORD *)v604 + 60);
  if ((_DWORD)v55)
  {
    v56 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v54 + 6) + 8 * v56))
    {
      if (v55 == ++v56)
        goto LABEL_133;
    }
    if ((_DWORD)v55 != (_DWORD)v56)
    {
      v57 = *(_DWORD *)(*(_QWORD *)v604 + 60);
      do
      {
        if (v57 <= v56)
        {
          __break(0xC471u);
          JUMPOUT(0x197FA67ECLL);
        }
        v58 = *(_QWORD *)(*((_QWORD *)v54 + 6) + 8 * v56);
        v59 = *(unsigned int *)(v58 + 20);
        if ((_DWORD)v59)
        {
          v60 = *(uint64_t **)(v58 + 8);
          v61 = &v60[v59];
          do
          {
            if (*(unsigned __int8 *)(*v60 + 12) - 5 <= 2)
            {
              JSC::B3::Value::key(*v60, (uint64_t)v609);
              v62 = v615;
              if (v615)
              {
                v63 = 0;
                v64 = 9
                    * ((*(_DWORD *)&v609[8] + ~(*(_DWORD *)&v609[8] << 15)) ^ ((*(_DWORD *)&v609[8]
                                                                                            + ~(*(_DWORD *)&v609[8] << 15)) >> 10));
                v65 = (v64 ^ (v64 >> 6)) + ~((v64 ^ (v64 >> 6)) << 11);
                for (i = *(_DWORD *)&v609[4]
                        + v609[1]
                        + ((v609[2] & 1) << 16)
                        + ((v609[2] << 6) & 0x80)
                        + *(_DWORD *)&v609[12]
                        + (((v609[2] >> 2) & 1) << 24)
                        + (((v609[2] >> 3) & 1) << 13)
                        + *(_DWORD *)&v609[16]
                        + *(_DWORD *)&v609[20]
                        + (v65 ^ HIWORD(v65)); ; i = v63 + v67)
                {
                  v67 = i & *(_DWORD *)(v615 - 8);
                  v68 = (unsigned __int8 *)(v615 + 32 * v67);
                  v69 = v68[1];
                  if (*v68 == v609[0] && v69 == v609[1])
                  {
                    v69 = v609[1];
                    if (((v68[2] ^ v609[2]) & 0xF) == 0)
                    {
                      v69 = v609[1];
                      if (*((_DWORD *)v68 + 1) == *(_DWORD *)&v609[4])
                      {
                        v69 = v609[1];
                        if (*((_DWORD *)v68 + 2) == *(_DWORD *)&v609[8])
                        {
                          v69 = v609[1];
                          if (*((_DWORD *)v68 + 3) == *(_DWORD *)&v609[12])
                          {
                            v69 = v609[1];
                            if (*((_DWORD *)v68 + 4) == *(_DWORD *)&v609[16])
                            {
                              v69 = v609[1];
                              if (*((_DWORD *)v68 + 5) == *(_DWORD *)&v609[20])
                                break;
                            }
                          }
                        }
                      }
                    }
                  }
                  if (!*v68
                    && v69 == 159
                    && (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v68 + 4), *(int32x4_t *)(v68 + 4)))) & 1) == 0
                    && (v68[2] & 0xF) == 0
                    && !*((_DWORD *)v68 + 5))
                  {
                    v62 = 0;
                    goto LABEL_130;
                  }
                  ++v63;
                }
                v62 = *(_QWORD *)(v615 + 32 * v67 + 24);
              }
LABEL_130:
              v71 = *v60;
              if (v62 == *v60)
              {
                v72 = *(JSC::B3::Value **)v604;
                v73 = *(_QWORD *)(v62 + 24);
                v74 = WTF::fastMalloc((WTF *)0x30);
                *(_QWORD *)v74 = off_1E357F5F0;
                *(_DWORD *)(v74 + 8) = -1;
                *(_WORD *)(v74 + 12) = 0;
                *(_DWORD *)(v74 + 16) = 0;
                *(_BYTE *)(v74 + 20) = 0;
                *(_QWORD *)(v74 + 24) = v73;
                *(_QWORD *)(v74 + 32) = 0;
                JSC::B3::Procedure::addValueImpl(v72, (JSC::B3::Value *)v74);
                *v60 = v74;
              }
              else
              {
                v506 = *(_QWORD *)(v71 + 32);
                v507 = *(_DWORD *)(v71 + 8);
                (**(void (***)(uint64_t))v71)(*v60);
                *(_QWORD *)v71 = off_1E357F5F0;
                *(_WORD *)(v71 + 12) = 0;
                *(_DWORD *)(v71 + 16) = 0;
                *(_BYTE *)(v71 + 20) = 0;
                *(_DWORD *)(v71 + 8) = v507;
                *(_QWORD *)(v71 + 32) = v506;
              }
              v9 = v600;
            }
            ++v60;
          }
          while (v60 != v61);
          v57 = *((_DWORD *)v54 + 15);
        }
        v56 = (v56 + 1);
        if (v57 > v56)
        {
          while (!*(_QWORD *)(*((_QWORD *)v54 + 6) + 8 * v56))
          {
            if (v57 == ++v56)
            {
              LODWORD(v56) = v57;
              break;
            }
          }
        }
      }
      while ((_DWORD)v55 != (_DWORD)v56);
      v54 = *(JSC::B3::Value **)v604;
      LODWORD(v55) = *(_DWORD *)(*(_QWORD *)v604 + 60);
    }
LABEL_133:
    if ((_DWORD)v55)
    {
      v75 = 0;
      v596 = v55;
      while (!*(_QWORD *)(*((_QWORD *)v54 + 6) + 8 * v75))
      {
        if (v55 == ++v75)
          goto LABEL_137;
      }
      if ((_DWORD)v55 != (_DWORD)v75)
      {
        v590 = (JSC::B3::_anonymous_namespace_::MoveConstants *)((char *)v604 + 8);
        LODWORD(v99) = v55;
        LODWORD(v55) = v75;
        while (1)
        {
          v612 = 0;
          if (v99 <= v55)
          {
            __break(0xC471u);
            JUMPOUT(0x197FA6814);
          }
          v100 = *(JSC::B3::BasicBlock **)(*((_QWORD *)v54 + 6) + 8 * v55);
          v612 = v100;
          v611 = 0;
          if (*((_DWORD *)v100 + 5))
            break;
LABEL_231:
          v119 = (char *)(v613 + 16 * *(unsigned int *)v100);
          v120 = *((unsigned int *)v119 + 3);
          if ((_DWORD)v120)
          {
            v121 = *(uint64_t **)v119;
            v122 = 8 * v120;
            do
            {
              v123 = *v121;
              if (*(_QWORD *)(*v121 + 32))
              {
                v124 = (uint64_t *)((char *)v604 + 16);
                *(_QWORD *)v609 = *((unsigned int *)v612 + 5) - 1;
                *(_QWORD *)&v609[8] = v123;
                v125 = *((unsigned int *)v604 + 7);
                if ((_DWORD)v125 == *((_DWORD *)v604 + 6))
                {
                  v511 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v124, (void *)(v125 + 1), (unint64_t)v609, v4, v5, v6, v7, v8);
                  v125 = *((unsigned int *)v604 + 7);
                  v126 = *((_QWORD *)v604 + 2);
                  v127 = *v511;
                }
                else
                {
                  v126 = *v124;
                  v127 = *(_OWORD *)v609;
                }
                *(_OWORD *)(v126 + 16 * v125) = v127;
                ++*((_DWORD *)v604 + 7);
              }
              ++v121;
              v122 -= 8;
            }
            while (v122);
            v100 = v612;
          }
          JSC::B3::InsertionSet::execute(v590, v100);
          v55 = (v55 + 1);
          v99 = *((unsigned int *)v54 + 15);
          if (v99 <= v55)
          {
            v9 = v600;
          }
          else
          {
            v9 = v600;
            while (!*(_QWORD *)(*((_QWORD *)v54 + 6) + 8 * v55))
            {
              if (v99 == ++v55)
              {
                LODWORD(v55) = *((_DWORD *)v54 + 15);
                break;
              }
            }
          }
          if (v596 == (_DWORD)v55)
            goto LABEL_137;
        }
        v101 = 0;
        while (1)
        {
          v102 = *(_QWORD *)(*((_QWORD *)v100 + 1) + 8 * v101);
          *(_QWORD *)&v617 = &v613;
          *((_QWORD *)&v617 + 1) = v9;
          v618 = &v612;
          *(_QWORD *)v609 = &v605;
          *(_QWORD *)&v609[8] = &v612;
          *(_QWORD *)&v609[16] = v604;
          v610 = &v611;
          v103 = *(unsigned __int8 *)(v102 + 12);
          v104 = (v103 - 63) >= 0x10 ? 0 : (JSC::B3::MemoryValue *)v102;
          v608 = v104;
          if (v104)
            break;
          if ((v103 & 0xFE) == 0xE)
          {
            *(_QWORD *)&v616 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v102, 1u);
            v114 = v616;
            v115 = *(_WORD *)(v616 + 12) & 0xFFF;
            if ((_QWORD)v616)
              v116 = v115 == 3;
            else
              v116 = 0;
            if (v116)
            {
              v9 = v600;
              if (*(_WORD *)(v616 + 12) - 5 > 2)
                goto LABEL_193;
              v520 = *(int *)(v616 + 40);
            }
            else
            {
              if ((_QWORD)v616)
                v117 = v115 == 4;
              else
                v117 = 0;
              v118 = !v117 || *(_WORD *)(v616 + 12) - 5 >= 3;
              v9 = v600;
              if (v118)
                goto LABEL_193;
              v520 = *(_QWORD *)(v616 + 40);
            }
            v606[0] = (_QWORD *)v520;
            if ((unint64_t)(v520 + 4095) >= 0x1FFF
              && ((v520 & 0xFFF) != 0
               || (unint64_t)v520 >> 24 && (unint64_t)((v520 >> 12) + 4095) >= 0x1000))
            {
              if (v521)
              {
                v522 = v521;
                if (v521 != v114)
                {
                  v523 = (uint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v102, 0);
                  v589 = v611;
                  v536 = v522;
                  v537 = *(unsigned __int8 *)(v102 + 12);
                  v584 = *(_QWORD *)(v102 + 24);
                  v538 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v102, 0);
                  if (v537 == 14)
                    v539 = 15;
                  else
                    v539 = 14;
                  v540 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)v590, v589, v539, v584, v538, v536);
                  JSC::B3::Value::replaceWithIdentity((JSC::B3::Value *)v102, v540);
                }
              }
            }
            goto LABEL_212;
          }
LABEL_193:
          v105 = *(unsigned __int8 *)(v102 + 20);
          if (v105 == 4)
          {
            v112 = 40;
            switch(*(_WORD *)(v102 + 12))
            {
              case 0u:
              case 1u:
              case 2u:
              case 8u:
              case 0xDu:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
              case 0x18u:
              case 0x19u:
              case 0x1Au:
              case 0x1Bu:
              case 0x1Cu:
              case 0x1Du:
              case 0x1Eu:
              case 0x1Fu:
              case 0x20u:
              case 0x21u:
              case 0x22u:
              case 0x23u:
              case 0x24u:
              case 0x25u:
              case 0x26u:
              case 0x27u:
              case 0x28u:
              case 0x29u:
              case 0x2Au:
              case 0x2Bu:
              case 0x2Cu:
              case 0x2Du:
              case 0x2Eu:
              case 0x2Fu:
              case 0x30u:
              case 0x31u:
              case 0x32u:
              case 0x33u:
              case 0x34u:
              case 0x35u:
              case 0x36u:
              case 0x37u:
              case 0x38u:
              case 0x39u:
              case 0x3Au:
              case 0x3Bu:
              case 0x3Cu:
              case 0x3Du:
              case 0x3Eu:
              case 0x4Fu:
              case 0x99u:
              case 0x9Au:
              case 0x9Bu:
              case 0x9Du:
              case 0x9Eu:
              case 0x9Fu:
                break;
              case 3u:
              case 4u:
              case 5u:
              case 6u:
              case 9u:
              case 0xAu:
              case 0xBu:
              case 0xCu:
              case 0x50u:
              case 0x54u:
              case 0x5Au:
              case 0x5Bu:
              case 0x5Cu:
              case 0x5Du:
              case 0x5Eu:
              case 0x5Fu:
              case 0x60u:
              case 0x61u:
              case 0x62u:
              case 0x63u:
              case 0x64u:
              case 0x65u:
              case 0x66u:
              case 0x67u:
              case 0x68u:
              case 0x69u:
              case 0x6Au:
              case 0x6Bu:
              case 0x6Cu:
              case 0x6Du:
              case 0x6Eu:
              case 0x6Fu:
              case 0x70u:
              case 0x71u:
              case 0x72u:
              case 0x73u:
              case 0x74u:
              case 0x75u:
              case 0x76u:
              case 0x77u:
              case 0x78u:
              case 0x79u:
              case 0x7Au:
              case 0x7Bu:
              case 0x7Cu:
              case 0x7Du:
              case 0x7Eu:
              case 0x7Fu:
              case 0x80u:
              case 0x81u:
              case 0x82u:
              case 0x83u:
              case 0x84u:
              case 0x85u:
              case 0x86u:
              case 0x87u:
              case 0x88u:
              case 0x89u:
              case 0x8Au:
              case 0x8Bu:
              case 0x8Cu:
              case 0x8Du:
              case 0x8Eu:
              case 0x8Fu:
              case 0x90u:
              case 0x91u:
              case 0x92u:
              case 0x93u:
              case 0x94u:
              case 0x95u:
              case 0x96u:
              case 0x97u:
              case 0x98u:
                v112 = 48;
                break;
              case 7u:
              case 0x51u:
              case 0x59u:
              case 0x9Cu:
                v112 = 56;
                break;
              case 0x3Fu:
              case 0x40u:
              case 0x41u:
              case 0x42u:
              case 0x43u:
              case 0x44u:
              case 0x45u:
              case 0x46u:
              case 0x47u:
              case 0x48u:
              case 0x49u:
              case 0x4Au:
              case 0x4Bu:
              case 0x4Cu:
              case 0x4Du:
              case 0x4Eu:
              case 0x52u:
                v112 = 64;
                break;
              case 0x53u:
                v112 = 176;
                break;
              case 0x55u:
              case 0x56u:
              case 0x57u:
              case 0x58u:
                v112 = 112;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x197FA67BCLL);
            }
            v113 = (uint64_t **)(v102 + v112);
            v107 = *v113;
            v105 = *((unsigned int *)v113 + 3);
          }
          else
          {
            v106 = 40;
            switch(*(_WORD *)(v102 + 12))
            {
              case 0u:
              case 1u:
              case 2u:
              case 8u:
              case 0xDu:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
              case 0x18u:
              case 0x19u:
              case 0x1Au:
              case 0x1Bu:
              case 0x1Cu:
              case 0x1Du:
              case 0x1Eu:
              case 0x1Fu:
              case 0x20u:
              case 0x21u:
              case 0x22u:
              case 0x23u:
              case 0x24u:
              case 0x25u:
              case 0x26u:
              case 0x27u:
              case 0x28u:
              case 0x29u:
              case 0x2Au:
              case 0x2Bu:
              case 0x2Cu:
              case 0x2Du:
              case 0x2Eu:
              case 0x2Fu:
              case 0x30u:
              case 0x31u:
              case 0x32u:
              case 0x33u:
              case 0x34u:
              case 0x35u:
              case 0x36u:
              case 0x37u:
              case 0x38u:
              case 0x39u:
              case 0x3Au:
              case 0x3Bu:
              case 0x3Cu:
              case 0x3Du:
              case 0x3Eu:
              case 0x4Fu:
              case 0x99u:
              case 0x9Au:
              case 0x9Bu:
              case 0x9Du:
              case 0x9Eu:
              case 0x9Fu:
                break;
              case 3u:
              case 4u:
              case 5u:
              case 6u:
              case 9u:
              case 0xAu:
              case 0xBu:
              case 0xCu:
              case 0x50u:
              case 0x54u:
              case 0x5Au:
              case 0x5Bu:
              case 0x5Cu:
              case 0x5Du:
              case 0x5Eu:
              case 0x5Fu:
              case 0x60u:
              case 0x61u:
              case 0x62u:
              case 0x63u:
              case 0x64u:
              case 0x65u:
              case 0x66u:
              case 0x67u:
              case 0x68u:
              case 0x69u:
              case 0x6Au:
              case 0x6Bu:
              case 0x6Cu:
              case 0x6Du:
              case 0x6Eu:
              case 0x6Fu:
              case 0x70u:
              case 0x71u:
              case 0x72u:
              case 0x73u:
              case 0x74u:
              case 0x75u:
              case 0x76u:
              case 0x77u:
              case 0x78u:
              case 0x79u:
              case 0x7Au:
              case 0x7Bu:
              case 0x7Cu:
              case 0x7Du:
              case 0x7Eu:
              case 0x7Fu:
              case 0x80u:
              case 0x81u:
              case 0x82u:
              case 0x83u:
              case 0x84u:
              case 0x85u:
              case 0x86u:
              case 0x87u:
              case 0x88u:
              case 0x89u:
              case 0x8Au:
              case 0x8Bu:
              case 0x8Cu:
              case 0x8Du:
              case 0x8Eu:
              case 0x8Fu:
              case 0x90u:
              case 0x91u:
              case 0x92u:
              case 0x93u:
              case 0x94u:
              case 0x95u:
              case 0x96u:
              case 0x97u:
              case 0x98u:
                v106 = 48;
                break;
              case 7u:
              case 0x51u:
              case 0x59u:
              case 0x9Cu:
                v106 = 56;
                break;
              case 0x3Fu:
              case 0x40u:
              case 0x41u:
              case 0x42u:
              case 0x43u:
              case 0x44u:
              case 0x45u:
              case 0x46u:
              case 0x47u:
              case 0x48u:
              case 0x49u:
              case 0x4Au:
              case 0x4Bu:
              case 0x4Cu:
              case 0x4Du:
              case 0x4Eu:
              case 0x52u:
                v106 = 64;
                break;
              case 0x53u:
                v106 = 176;
                break;
              case 0x55u:
              case 0x56u:
              case 0x57u:
              case 0x58u:
                v106 = 112;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x197FA6734);
            }
            v107 = (uint64_t *)(v102 + v106);
          }
          v108 = &v107[v105];
          while (v107 != v108)
          {
            v109 = *v107;
            if (*(unsigned __int8 *)(*v107 + 12) - 5 <= 2 && *(JSC::B3::BasicBlock **)(v109 + 32) == v612)
            {
              v405 = (uint64_t *)((char *)v604 + 16);
              *(_QWORD *)&v616 = v611;
              *((_QWORD *)&v616 + 1) = v109;
              v406 = *((unsigned int *)v604 + 7);
              if ((_DWORD)v406 == *((_DWORD *)v604 + 6))
              {
                v510 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v405, (void *)(v406 + 1), (unint64_t)&v616, v4, v5, v6, v7, v8);
                v9 = v600;
                v406 = *((unsigned int *)v604 + 7);
                v407 = *((_QWORD *)v604 + 2);
                v408 = *v510;
              }
              else
              {
                v407 = *v405;
                v408 = v616;
              }
              *(_OWORD *)(v407 + 16 * v406) = v408;
              ++*((_DWORD *)v604 + 7);
              *(_QWORD *)(v109 + 32) = 0;
            }
            ++v107;
          }
          v101 = v611 + 1;
          v611 = v101;
          v100 = v612;
          if (*((_DWORD *)v612 + 5) <= v101)
            goto LABEL_231;
        }
        v607 = 0;
        v607 = *(_QWORD *)JSC::B3::MemoryValue::lastChild(v104);
        if (v607)
          v110 = (*(_WORD *)(v607 + 12) & 0xFFF) == 4;
        else
          v110 = 0;
        v111 = !v110 || *(_WORD *)(v607 + 12) - 5 > 2;
        if (!v111)
        {
          *(_QWORD *)&v616 = &v608;
          *((_QWORD *)&v616 + 1) = &v607;
          v606[0] = &v616;
          v606[1] = &v608;
          if (v514)
          {
            v515 = v514;
            *(_QWORD *)JSC::B3::MemoryValue::lastChild(v608) = v514;
            v516 = **((_QWORD **)&v616 + 1);
            if ((*(_WORD *)(**((_QWORD **)&v616 + 1) + 12) & 0xFFF) != 4)
              v516 = 0;
            v517 = *(_DWORD *)(v516 + 40);
            if ((*(_WORD *)(v515 + 12) & 0xFFF) == 4)
              v518 = v515;
            else
              v518 = 0;
            *((_DWORD *)v608 + 10) = v517 + *(_DWORD *)(*(_QWORD *)v616 + 40) - *(_DWORD *)(v518 + 40);
          }
        }
LABEL_212:
        v9 = v600;
        goto LABEL_193;
      }
    }
  }
LABEL_137:
  v76 = (unint64_t *)v613;
  if (HIDWORD(v614))
  {
    v77 = 16 * HIDWORD(v614);
    do
    {
      v78 = *v76;
      if (*v76)
      {
        *v76 = 0;
        *((_DWORD *)v76 + 2) = 0;
        WTF::fastFree(v78, v2, v3, v4, v5, v6, v7, v8);
      }
      v76 += 2;
      v77 -= 16;
    }
    while (v77);
    v76 = (unint64_t *)v613;
  }
  if (v76)
  {
    v613 = 0;
    LODWORD(v614) = 0;
    WTF::fastFree((unint64_t)v76, v2, v3, v4, v5, v6, v7, v8);
  }
  if (v615)
    WTF::fastFree(v615 - 16, v2, v3, v4, v5, v6, v7, v8);
  *(_QWORD *)&v616 = 0;
  v79 = *(JSC::B3::Value **)v604;
  v80 = *(unsigned int *)(*(_QWORD *)v604 + 76);
  if (!(_DWORD)v80)
    goto LABEL_151;
  v81 = 0;
  while (!*(_QWORD *)(*((_QWORD *)v79 + 8) + 8 * v81))
  {
    if (v80 == ++v81)
      goto LABEL_151;
  }
  if ((_DWORD)v80 == (_DWORD)v81)
  {
LABEL_151:
    v82 = 0;
    v83 = 0;
    v84 = 0;
    goto LABEL_170;
  }
  v84 = 0;
  v83 = 0;
  v82 = 0;
  v85 = *(_DWORD *)(*(_QWORD *)v604 + 76);
  do
  {
    v86 = *(_QWORD *)(*((_QWORD *)v79 + 8) + 8 * v81);
    v87 = *(_WORD *)(v86 + 12);
    switch(v87)
    {
      case 5u:
        if ((v87 & 0xFFF) == 5)
          v88 = *(_QWORD *)(*((_QWORD *)v79 + 8) + 8 * v81);
        else
          v88 = 0;
        if (!*(_QWORD *)(v88 + 40))
          goto LABEL_157;
        break;
      case 6u:
        if ((v87 & 0xFFF) == 6)
          v504 = *(_QWORD *)(*((_QWORD *)v79 + 8) + 8 * v81);
        else
          v504 = 0;
        if (!*(_DWORD *)(v504 + 40))
          goto LABEL_157;
        break;
      case 7u:
        v541 = (v87 & 0xFFF) == 7 ? *(_QWORD *)(*((_QWORD *)v79 + 8) + 8 * v81) : 0;
        if (*(_OWORD *)(v541 + 40) == 0)
          goto LABEL_157;
        break;
      default:
        goto LABEL_157;
    }
    JSC::B3::Value::key(*(_QWORD *)(*((_QWORD *)v79 + 8) + 8 * v81), (uint64_t)v609);
    v89 = *(unsigned __int8 *)(v86 + 12);
    switch(v89)
    {
      case 5:
        LODWORD(v613) = v83;
        WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>((uint64_t)&v617, (uint64_t *)&v616, v609, &v613);
        ++v83;
        break;
      case 6:
        LODWORD(v613) = v84;
        WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>((uint64_t)&v617, (uint64_t *)&v616, v609, &v613);
        ++v84;
        break;
      case 7:
        LODWORD(v613) = v82;
        WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>((uint64_t)&v617, (uint64_t *)&v616, v609, &v613);
        ++v82;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FA63E0);
    }
    v85 = *((_DWORD *)v79 + 19);
LABEL_157:
    v81 = (v81 + 1);
    if (v85 > v81)
    {
      while (!*(_QWORD *)(*((_QWORD *)v79 + 8) + 8 * v81))
      {
        if (v85 == ++v81)
        {
          LODWORD(v81) = v85;
          break;
        }
      }
    }
  }
  while ((_DWORD)v80 != (_DWORD)v81);
  v79 = *(JSC::B3::Value **)v604;
LABEL_170:
  v570 = (JSC::B3::Procedure *)(8 * v83 + 16 * v82);
  v90 = (size_t)v570 + 4 * v84;
  if (v90)
  {
    v438 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v438 = off_1E357D8B8;
    v574 = WTF::fastZeroedMalloc(v90, v439, v440, v441, v442, v443, v444, v445);
    v438[1] = v574;
    v438[2] = v90;
    v446 = *((_QWORD *)v79 + 19);
    *(_QWORD *)v609 = v438;
    v447 = *(unsigned int *)(v446 + 12);
    if ((_DWORD)v447 == *(_DWORD *)(v446 + 8))
    {
      v448 = (_QWORD **)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v446, v447 + 1, (unint64_t)v609);
      v447 = *(unsigned int *)(v446 + 12);
      v449 = (_QWORD *)(*(_QWORD *)v446 + 8 * v447);
      v438 = *v448;
    }
    else
    {
      v449 = (_QWORD *)(*(_QWORD *)v446 + 8 * v447);
      v448 = (_QWORD **)v609;
    }
    *v448 = 0;
    *v449 = v438;
    *(_DWORD *)(v446 + 12) = v447 + 1;
    v450 = *(_QWORD *)v609;
    *(_QWORD *)v609 = 0;
    if (v450)
      (*(void (**)(uint64_t))(*(_QWORD *)v450 + 8))(v450);
  }
  else
  {
    v574 = 0;
  }
  v91 = v616;
  if (!(_QWORD)v616)
  {
    v92 = 0;
    v93 = 0;
    goto LABEL_174;
  }
  v93 = *(unsigned int *)(v616 - 4);
  v94 = v616 + 32 * v93;
  if (*(_DWORD *)(v616 - 12))
  {
    v92 = v616;
    if ((_DWORD)v93)
    {
      v364 = 32 * v93;
      v92 = v616;
      while (!*(_BYTE *)v92 && *(unsigned __int8 *)(v92 + 1) == 159)
      {
        v365 = *(_DWORD *)(v92 + 4);
        v366 = *(_DWORD *)(v92 + 8);
        v367 = *(_DWORD *)(v92 + 12);
        v368 = *(_DWORD *)(v92 + 16);
        v369 = *(_DWORD *)(v92 + 20);
        v370 = (*(_BYTE *)(v92 + 2) & 0xF) == 0 && v365 == 0;
        v371 = v370 && v366 == 0;
        v372 = v371 && v367 == 0;
        v373 = v372 && v368 == 0;
        if (!v373 || v369 != 0)
        {
          v375 = (*(_BYTE *)(v92 + 2) & 0xF) == 0 && v365 == 1;
          v376 = v375 && v366 == 0;
          v377 = v376 && v367 == 0;
          v378 = v377 && v368 == 0;
          if (!v378 || v369 != 0)
            break;
        }
        v92 += 32;
        v364 -= 32;
        if (!v364)
        {
          v92 = v94;
          break;
        }
      }
    }
  }
  else
  {
    v92 = v616 + 32 * v93;
LABEL_174:
    v94 = v616 + 32 * v93;
  }
  if ((_QWORD)v616)
    v95 = v616 + 32 * *(unsigned int *)(v616 - 4);
  else
    v95 = 0;
  v572 = 16 * v82;
  while (v92 != v95)
  {
    v543 = *(unsigned __int8 *)(v92 + 1);
    v544 = *(unsigned int *)(v92 + 24);
    switch(v543)
    {
      case 5:
        *(_QWORD *)(v574 + v572 + 8 * v544) = *(_QWORD *)(v92 + 8);
        break;
      case 6:
        *(_DWORD *)((char *)v570 + 4 * v544 + v574) = *(_DWORD *)(v92 + 8);
        break;
      case 7:
        *(_OWORD *)(v574 + 16 * v544) = *(_OWORD *)(v92 + 8);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FA6940);
    }
    v545 = v92 + 32;
    v92 = v94;
    if (v545 != v94)
    {
      v92 = v545;
      while (!*(_BYTE *)v92 && *(unsigned __int8 *)(v92 + 1) == 159)
      {
        v546 = *(_DWORD *)(v92 + 4);
        v547 = *(_DWORD *)(v92 + 8);
        v548 = *(_DWORD *)(v92 + 12);
        v549 = *(_DWORD *)(v92 + 16);
        v550 = *(_DWORD *)(v92 + 20);
        v551 = (*(_BYTE *)(v92 + 2) & 0xF) == 0 && v546 == 0;
        v552 = v551 && v547 == 0;
        v553 = v552 && v548 == 0;
        v554 = v553 && v549 == 0;
        if (!v554 || v550 != 0)
        {
          v556 = (*(_BYTE *)(v92 + 2) & 0xF) == 0 && v546 == 1;
          v557 = v556 && v547 == 0;
          v558 = v557 && v548 == 0;
          v559 = v558 && v549 == 0;
          if (!v559 || v550 != 0)
            break;
        }
        v92 += 32;
        if (v92 == v94)
        {
          v92 = v94;
          break;
        }
      }
    }
  }
  v613 = 0x8000000000000000;
  v96 = *(_QWORD *)v604;
  v97 = *(unsigned int *)(*(_QWORD *)v604 + 60);
  if (!(_DWORD)v97)
    goto LABEL_325;
  v98 = 0;
  v580 = v91;
  while (!*(_QWORD *)(*(_QWORD *)(v96 + 48) + 8 * v98))
  {
    if (v97 == ++v98)
      goto LABEL_319;
  }
  if ((_DWORD)v97 == (_DWORD)v98)
    goto LABEL_318;
  v591 = *(_DWORD *)(*(_QWORD *)v604 + 60);
  LODWORD(v128) = v591;
  LODWORD(v129) = v98;
  v597 = *(JSC::B3::Value **)v604;
  while (2)
  {
    if (v128 <= v129)
    {
      __break(0xC471u);
      JUMPOUT(0x197FA67F4);
    }
    v601 = v129;
    v130 = *(_QWORD *)(*(_QWORD *)(v96 + 48) + 8 * v129);
    v131 = *(unsigned int *)(v130 + 20);
    if ((_DWORD)v131)
    {
      v132 = 0;
      while (1)
      {
        v133 = *(_QWORD *)(*(_QWORD *)(v130 + 8) + 8 * v132);
        v135 = (unsigned __int8 *)(v133 + 12);
        v134 = *(_WORD *)(v133 + 12);
        v136 = v134 - 83;
        if (v136 <= 5 && v136 != 1)
          break;
LABEL_289:
        if (++v132 >= v131)
          goto LABEL_290;
      }
      v138 = 0;
      v139 = 8;
      while (2)
      {
        v140 = 40;
        switch(v134)
        {
          case 0u:
          case 1u:
          case 2u:
          case 8u:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Bu:
          case 0x2Cu:
          case 0x2Du:
          case 0x2Eu:
          case 0x2Fu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
          case 0x3Cu:
          case 0x3Du:
          case 0x3Eu:
          case 0x4Fu:
          case 0x99u:
          case 0x9Au:
          case 0x9Bu:
          case 0x9Du:
          case 0x9Eu:
          case 0x9Fu:
            break;
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0x50u:
          case 0x54u:
          case 0x5Au:
          case 0x5Bu:
          case 0x5Cu:
          case 0x5Du:
          case 0x5Eu:
          case 0x5Fu:
          case 0x60u:
          case 0x61u:
          case 0x62u:
          case 0x63u:
          case 0x64u:
          case 0x65u:
          case 0x66u:
          case 0x67u:
          case 0x68u:
          case 0x69u:
          case 0x6Au:
          case 0x6Bu:
          case 0x6Cu:
          case 0x6Du:
          case 0x6Eu:
          case 0x6Fu:
          case 0x70u:
          case 0x71u:
          case 0x72u:
          case 0x73u:
          case 0x74u:
          case 0x75u:
          case 0x76u:
          case 0x77u:
          case 0x78u:
          case 0x79u:
          case 0x7Au:
          case 0x7Bu:
          case 0x7Cu:
          case 0x7Du:
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x82u:
          case 0x83u:
          case 0x84u:
          case 0x85u:
          case 0x86u:
          case 0x87u:
          case 0x88u:
          case 0x89u:
          case 0x8Au:
          case 0x8Bu:
          case 0x8Cu:
          case 0x8Du:
          case 0x8Eu:
          case 0x8Fu:
          case 0x90u:
          case 0x91u:
          case 0x92u:
          case 0x93u:
          case 0x94u:
          case 0x95u:
          case 0x96u:
          case 0x97u:
          case 0x98u:
            v140 = 48;
            break;
          case 7u:
          case 0x51u:
          case 0x59u:
          case 0x9Cu:
            v140 = 56;
            break;
          case 0x3Fu:
          case 0x40u:
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
          case 0x45u:
          case 0x46u:
          case 0x47u:
          case 0x48u:
          case 0x49u:
          case 0x4Au:
          case 0x4Bu:
          case 0x4Cu:
          case 0x4Du:
          case 0x4Eu:
          case 0x52u:
            v140 = 64;
            break;
          case 0x53u:
            v140 = 176;
            break;
          case 0x55u:
          case 0x56u:
          case 0x57u:
          case 0x58u:
            v140 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197FA6684);
        }
        if (v138 >= *(unsigned int *)&v135[v140])
        {
          v131 = *(unsigned int *)(v130 + 20);
          goto LABEL_289;
        }
        v141 = 40;
        switch(v134)
        {
          case 0u:
          case 1u:
          case 2u:
          case 8u:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
          case 0x23u:
          case 0x24u:
          case 0x25u:
          case 0x26u:
          case 0x27u:
          case 0x28u:
          case 0x29u:
          case 0x2Au:
          case 0x2Bu:
          case 0x2Cu:
          case 0x2Du:
          case 0x2Eu:
          case 0x2Fu:
          case 0x30u:
          case 0x31u:
          case 0x32u:
          case 0x33u:
          case 0x34u:
          case 0x35u:
          case 0x36u:
          case 0x37u:
          case 0x38u:
          case 0x39u:
          case 0x3Au:
          case 0x3Bu:
          case 0x3Cu:
          case 0x3Du:
          case 0x3Eu:
          case 0x4Fu:
          case 0x99u:
          case 0x9Au:
          case 0x9Bu:
          case 0x9Du:
          case 0x9Eu:
          case 0x9Fu:
            break;
          case 3u:
          case 4u:
          case 5u:
          case 6u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0x50u:
          case 0x54u:
          case 0x5Au:
          case 0x5Bu:
          case 0x5Cu:
          case 0x5Du:
          case 0x5Eu:
          case 0x5Fu:
          case 0x60u:
          case 0x61u:
          case 0x62u:
          case 0x63u:
          case 0x64u:
          case 0x65u:
          case 0x66u:
          case 0x67u:
          case 0x68u:
          case 0x69u:
          case 0x6Au:
          case 0x6Bu:
          case 0x6Cu:
          case 0x6Du:
          case 0x6Eu:
          case 0x6Fu:
          case 0x70u:
          case 0x71u:
          case 0x72u:
          case 0x73u:
          case 0x74u:
          case 0x75u:
          case 0x76u:
          case 0x77u:
          case 0x78u:
          case 0x79u:
          case 0x7Au:
          case 0x7Bu:
          case 0x7Cu:
          case 0x7Du:
          case 0x7Eu:
          case 0x7Fu:
          case 0x80u:
          case 0x81u:
          case 0x82u:
          case 0x83u:
          case 0x84u:
          case 0x85u:
          case 0x86u:
          case 0x87u:
          case 0x88u:
          case 0x89u:
          case 0x8Au:
          case 0x8Bu:
          case 0x8Cu:
          case 0x8Du:
          case 0x8Eu:
          case 0x8Fu:
          case 0x90u:
          case 0x91u:
          case 0x92u:
          case 0x93u:
          case 0x94u:
          case 0x95u:
          case 0x96u:
          case 0x97u:
          case 0x98u:
            v141 = 48;
            break;
          case 7u:
          case 0x51u:
          case 0x59u:
          case 0x9Cu:
            v141 = 56;
            break;
          case 0x3Fu:
          case 0x40u:
          case 0x41u:
          case 0x42u:
          case 0x43u:
          case 0x44u:
          case 0x45u:
          case 0x46u:
          case 0x47u:
          case 0x48u:
          case 0x49u:
          case 0x4Au:
          case 0x4Bu:
          case 0x4Cu:
          case 0x4Du:
          case 0x4Eu:
          case 0x52u:
            v141 = 64;
            break;
          case 0x53u:
            v141 = 176;
            break;
          case 0x55u:
          case 0x56u:
          case 0x57u:
          case 0x58u:
            v141 = 112;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x197FA66A4);
        }
        if (v138 >= *(unsigned int *)&v135[v141])
        {
          __break(0xC471u);
          JUMPOUT(0x197FA66ACLL);
        }
        if (v138 >= *(unsigned int *)(v133 + 52) || *(unsigned __int8 *)(*(_QWORD *)(v133 + 40) + v139) <= 2u)
        {
          v142 = 40;
          switch(v134)
          {
            case 0u:
            case 1u:
            case 2u:
            case 8u:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x4Fu:
            case 0x99u:
            case 0x9Au:
            case 0x9Bu:
            case 0x9Du:
            case 0x9Eu:
            case 0x9Fu:
              break;
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0x50u:
            case 0x54u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
            case 0x67u:
            case 0x68u:
            case 0x69u:
            case 0x6Au:
            case 0x6Bu:
            case 0x6Cu:
            case 0x6Du:
            case 0x6Eu:
            case 0x6Fu:
            case 0x70u:
            case 0x71u:
            case 0x72u:
            case 0x73u:
            case 0x74u:
            case 0x75u:
            case 0x76u:
            case 0x77u:
            case 0x78u:
            case 0x79u:
            case 0x7Au:
            case 0x7Bu:
            case 0x7Cu:
            case 0x7Du:
            case 0x7Eu:
            case 0x7Fu:
            case 0x80u:
            case 0x81u:
            case 0x82u:
            case 0x83u:
            case 0x84u:
            case 0x85u:
            case 0x86u:
            case 0x87u:
            case 0x88u:
            case 0x89u:
            case 0x8Au:
            case 0x8Bu:
            case 0x8Cu:
            case 0x8Du:
            case 0x8Eu:
            case 0x8Fu:
            case 0x90u:
            case 0x91u:
            case 0x92u:
            case 0x93u:
            case 0x94u:
            case 0x95u:
            case 0x96u:
            case 0x97u:
            case 0x98u:
              v142 = 48;
              break;
            case 7u:
            case 0x51u:
            case 0x59u:
            case 0x9Cu:
              v142 = 56;
              break;
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x43u:
            case 0x44u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x52u:
              v142 = 64;
              break;
            case 0x53u:
              v142 = 176;
              break;
            case 0x55u:
            case 0x56u:
            case 0x57u:
            case 0x58u:
              v142 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197FA66CCLL);
          }
          v143 = (uint64_t *)(v133 + v142);
          if (v138 >= *((unsigned int *)v143 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x197FA66D4);
          }
          v144 = *v143;
          v145 = *(_QWORD *)(*v143 + 8 * v138);
          v146 = *(_WORD *)(v145 + 12);
          switch(v146)
          {
            case 5u:
              if ((v146 & 0xFFF) == 5)
                v148 = v145;
              else
                v148 = 0;
              if (!*(_QWORD *)(v148 + 40))
                goto LABEL_275;
              break;
            case 6u:
              if ((v146 & 0xFFF) == 6)
                v502 = v145;
              else
                v502 = 0;
              if (!*(_DWORD *)(v502 + 40))
                goto LABEL_275;
              break;
            case 7u:
              v513 = (v146 & 0xFFF) == 7 ? v145 : 0;
              if (*(_OWORD *)(v513 + 40) == 0)
                goto LABEL_275;
              break;
            default:
              goto LABEL_275;
          }
          v149 = *(_DWORD *)(v145 + 16);
          if (v149 >= 0x80000000)
            v149 = 0x80000000;
          if (v149 != 5)
          {
            v576 = (uint64_t *)((char *)v604 + 16);
            JSC::B3::Value::key(v145, (uint64_t)v609);
            v150 = JSC::B3::ValueKey::materialize(v609, *(_QWORD *)v604, *(_QWORD *)(v133 + 24));
            *(_QWORD *)&v617 = v132;
            *((_QWORD *)&v617 + 1) = v150;
            v156 = *((unsigned int *)v604 + 7);
            if ((_DWORD)v156 == *((_DWORD *)v604 + 6))
            {
              v569 = v150;
              v503 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v576, (void *)(v156 + 1), (unint64_t)&v617, v151, v152, v153, v154, v155);
              v156 = *((unsigned int *)v604 + 7);
              v157 = *((_QWORD *)v604 + 2);
              v158 = *v503;
              v150 = v569;
            }
            else
            {
              v157 = *v576;
              v158 = v617;
            }
            *(_OWORD *)(v157 + 16 * v156) = v158;
            ++*((_DWORD *)v604 + 7);
            *(_QWORD *)(v144 + 8 * v138) = v150;
            v159 = *((unsigned int *)v150 + 2);
            v160 = v613;
            if (v613 < 0)
              v161 = 63;
            else
              v161 = *(_QWORD *)(2 * v613);
            if (v161 <= v159)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v613, v159 + 1, 0);
              v160 = v613;
            }
            v162 = 2 * v160 + 8;
            v163 = v160 < 0;
            v164 = &v613;
            if (!v163)
              v164 = (uint64_t *)v162;
            *(uint64_t *)((char *)v164 + ((v159 >> 3) & 0x1FFFFFF8)) |= 1 << v159;
            v134 = *v135;
          }
        }
LABEL_275:
        ++v138;
        v139 += 16;
        continue;
      }
    }
LABEL_290:
    JSC::B3::InsertionSet::execute((JSC::B3::_anonymous_namespace_::MoveConstants *)((char *)v604 + 8), (JSC::B3::BasicBlock *)v130);
    v96 = (uint64_t)v597;
    v129 = (v601 + 1);
    v128 = *((unsigned int *)v597 + 15);
    if (v128 <= v129)
    {
      v147 = v591;
    }
    else
    {
      v147 = v591;
      while (!*(_QWORD *)(*((_QWORD *)v597 + 6) + 8 * v129))
      {
        if (v128 == ++v129)
        {
          LODWORD(v129) = *((_DWORD *)v597 + 15);
          break;
        }
      }
    }
    if (v147 != (_DWORD)v129)
      continue;
    break;
  }
  v96 = *(_QWORD *)v604;
  LODWORD(v97) = *(_DWORD *)(*(_QWORD *)v604 + 60);
LABEL_318:
  v91 = v580;
LABEL_319:
  if ((_DWORD)v97)
  {
    v165 = 0;
    v166 = v97;
    while (!*(_QWORD *)(*(_QWORD *)(v96 + 48) + 8 * v165))
    {
      if (v97 == ++v165)
        goto LABEL_323;
    }
    if ((_DWORD)v97 != (_DWORD)v165)
    {
      v179 = v613;
      LODWORD(v180) = v97;
      while (1)
      {
        if (v180 <= v165)
        {
          __break(0xC471u);
          JUMPOUT(0x197FA67FCLL);
        }
        v181 = v96;
        v182 = *(_QWORD *)(*(_QWORD *)(v96 + 48) + 8 * v165);
        v183 = *(unsigned int *)(v182 + 20);
        if ((_DWORD)v183)
          break;
LABEL_343:
        JSC::B3::InsertionSet::execute((JSC::B3::_anonymous_namespace_::MoveConstants *)((char *)v604 + 8), (JSC::B3::BasicBlock *)v182);
        v165 = (v165 + 1);
        v96 = v181;
        v180 = *(unsigned int *)(v181 + 60);
        if (v180 > v165)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v181 + 48) + 8 * v165))
          {
            if (v180 == ++v165)
            {
              LODWORD(v165) = *(_DWORD *)(v181 + 60);
              break;
            }
          }
        }
        if (v166 == (_DWORD)v165)
          goto LABEL_323;
      }
      v184 = 0;
      while (2)
      {
        v185 = *(_QWORD *)(*(_QWORD *)(v182 + 8) + 8 * v184);
        v186 = *(_WORD *)(v185 + 12);
        switch(v186)
        {
          case 5u:
            if ((v186 & 0xFFF) == 5)
              v194 = *(_QWORD *)(*(_QWORD *)(v182 + 8) + 8 * v184);
            else
              v194 = 0;
            if (*(_QWORD *)(v194 + 40))
              goto LABEL_364;
            break;
          case 6u:
            if ((v186 & 0xFFF) == 6)
              v505 = *(_QWORD *)(*(_QWORD *)(v182 + 8) + 8 * v184);
            else
              v505 = 0;
            if (*(_DWORD *)(v505 + 40))
              goto LABEL_364;
            break;
          case 7u:
            v542 = (v186 & 0xFFF) == 7 ? *(_QWORD *)(*(_QWORD *)(v182 + 8) + 8 * v184) : 0;
            if (*(_OWORD *)(v542 + 40) == 0)
              break;
LABEL_364:
            v195 = (_QWORD *)(2 * v179);
            if (v179 < 0)
              v196 = 63;
            else
              v196 = *v195;
            v197 = *(unsigned int *)(v185 + 8);
            if (v196 <= v197)
              goto LABEL_370;
            v198 = v195 + 1;
            if (v179 < 0)
              v198 = &v613;
            if (((*(unint64_t *)((char *)v198 + ((v197 >> 3) & 0x1FFFFFF8)) >> v197) & 1) == 0)
            {
LABEL_370:
              JSC::B3::Value::key(*(_QWORD *)(*(_QWORD *)(v182 + 8) + 8 * v184), (uint64_t)v609);
              v193 = *(unsigned __int16 *)&v609[1];
              v192 = v609[1];
              v568 = v179;
              if (v91)
              {
                v190 = 0;
                v593 = *(_DWORD *)(v91 - 8);
                v564 = *(_DWORD *)&v609[8];
                v199 = 9
                     * ((*(_DWORD *)&v609[8] + ~(*(_DWORD *)&v609[8] << 15)) ^ ((*(_DWORD *)&v609[8]
                                                                                             + ~(*(_DWORD *)&v609[8] << 15)) >> 10));
                v200 = (v199 ^ (v199 >> 6)) + ~((v199 ^ (v199 >> 6)) << 11);
                v566 = *(_DWORD *)&v609[4];
                v562 = *(_DWORD *)&v609[16];
                v563 = *(_DWORD *)&v609[12];
                v561 = *(_DWORD *)&v609[20];
                v191 = *(_DWORD *)&v609[4]
                     + v609[1]
                     + ((HIBYTE(*(unsigned __int16 *)&v609[1]) & 1) << 16)
                     + ((*(unsigned __int16 *)&v609[1] >> 2) & 0x80)
                     + *(_DWORD *)&v609[12]
                     + (((*(unsigned __int16 *)&v609[1] >> 10) & 1) << 24)
                     + (((*(unsigned __int16 *)&v609[1] >> 11) & 1) << 13)
                     + *(_DWORD *)&v609[16]
                     + *(_DWORD *)&v609[20]
                     + (v200 ^ HIWORD(v200));
                v585 = v609[0];
                v577 = v609[1];
                while (1)
                {
                  v187 = v191 & v593;
                  v188 = (unsigned __int8 *)(v580 + 32 * v187);
                  if (*v188 == v585
                    && v188[1] == v192
                    && ((v188[2] ^ (v193 >> 8)) & 0xF) == 0
                    && *((_DWORD *)v188 + 1) == v566
                    && *((_DWORD *)v188 + 2) == v564
                    && *((_DWORD *)v188 + 3) == v563
                    && *((_DWORD *)v188 + 4) == v562
                    && *((_DWORD *)v188 + 5) == v561)
                  {
                    v91 = v580;
                    v380 = *(unsigned int *)(v580 + 32 * v187 + 24);
                    v179 = v568;
                    goto LABEL_753;
                  }
                  v189 = v193;
                  if (WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::isEmptyBucket((uint64_t)v188))
                    break;
                  v191 = ++v190 + v187;
                  v192 = v577;
                  v193 = v189;
                }
                v380 = 0;
                v91 = v580;
                v179 = v568;
                v192 = v577;
              }
              else
              {
                v380 = 0;
              }
LABEL_753:
              switch(v192)
              {
                case 5:
                  v381 = v572 + 8 * v380;
                  break;
                case 6:
                  v381 = (unint64_t)v570 + 4 * v380;
                  break;
                case 7:
                  v381 = 16 * v380;
                  break;
                default:
                  __break(0xC471u);
                  JUMPOUT(0x197FA65ACLL);
              }
              if (!(v381 >> 31))
              {
                v588 = v381;
                v382 = (uint64_t *)((char *)v604 + 16);
                v383 = JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>(*((_QWORD *)v604 + 1), *(_QWORD *)(v185 + 24), v574);
                *(_QWORD *)&v617 = v184;
                v579 = v383;
                *((_QWORD *)&v617 + 1) = v383;
                v389 = *((unsigned int *)v604 + 7);
                v594 = (JSC::B3::_anonymous_namespace_::MoveConstants *)((char *)v604 + 16);
                if ((_DWORD)v389 == *((_DWORD *)v604 + 6))
                {
                  v508 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v382, (void *)(v389 + 1), (unint64_t)&v617, v384, v385, v386, v387, v388);
                  v389 = *((unsigned int *)v604 + 7);
                  v390 = *((_QWORD *)v604 + 2);
                  v391 = *v508;
                }
                else
                {
                  v390 = *v382;
                  v391 = v617;
                }
                *(_OWORD *)(v390 + 16 * v389) = v391;
                ++*((_DWORD *)v604 + 7);
                v392 = *(_DWORD *)(v185 + 16);
                v565 = *(_QWORD *)(v185 + 24);
                v567 = (JSC::B3::Value *)*((_QWORD *)v604 + 1);
                v393 = WTF::fastMalloc((WTF *)0x48);
                *(_DWORD *)(v393 + 8) = -1;
                *(_WORD *)(v393 + 12) = 67;
                *(_DWORD *)(v393 + 16) = v392;
                *(_BYTE *)(v393 + 20) = 1;
                *(_QWORD *)(v393 + 24) = v565;
                *(_QWORD *)(v393 + 32) = 0;
                *(_QWORD *)(v393 + 64) = v579;
                *(_QWORD *)v393 = off_1E357E4C8;
                *(_DWORD *)(v393 + 40) = v588;
                *(_OWORD *)(v393 + 44) = xmmword_19914F690;
                JSC::B3::Procedure::addValueImpl(v567, (JSC::B3::Value *)v393);
                *(_QWORD *)&v617 = v184;
                *((_QWORD *)&v617 + 1) = v393;
                v399 = *((unsigned int *)v604 + 7);
                if ((_DWORD)v399 == *((_DWORD *)v604 + 6))
                {
                  v509 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v594, (void *)(v399 + 1), (unint64_t)&v617, v394, v395, v396, v397, v398);
                  v399 = *((unsigned int *)v604 + 7);
                  v400 = *((_QWORD *)v604 + 2);
                  v401 = *v509;
                }
                else
                {
                  v400 = *(_QWORD *)v594;
                  v401 = v617;
                }
                *(_OWORD *)(v400 + 16 * v399) = v401;
                ++*((_DWORD *)v604 + 7);
                v402 = *(_DWORD *)(v185 + 16);
                if (v402 != *(_DWORD *)(v393 + 16))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FA65CCLL);
                }
                v595 = *(JSC::B3::InsertionSet **)(v185 + 32);
                v403 = *(_DWORD *)(v185 + 8);
                (**(void (***)(uint64_t))v185)(v185);
                *(_QWORD *)v185 = off_1E357F5F0;
                if (v402)
                {
                  *(_QWORD *)(v185 + 40) = v393;
                  v404 = 1;
                }
                else
                {
                  v404 = 0;
                }
                *(_WORD *)(v185 + 12) = v404;
                *(_DWORD *)(v185 + 16) = v402;
                *(_BYTE *)(v185 + 20) = v404;
                *(_DWORD *)(v185 + 8) = v403;
                *(_QWORD *)(v185 + 32) = v595;
                v91 = v580;
                v179 = v568;
              }
              v183 = *(unsigned int *)(v182 + 20);
            }
            break;
          default:
            break;
        }
        if (++v184 >= v183)
          goto LABEL_343;
        continue;
      }
    }
  }
LABEL_323:
  if ((v613 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v613, v2, v3, v4, v5, v6, v7, v8);
LABEL_325:
  if (v91)
    WTF::fastFree(v91 - 16, v2, v3, v4, v5, v6, v7, v8);
  v592 = JSC::B3::Procedure::dominators(*(JSC::B3::Procedure **)v604);
  *(_QWORD *)&v617 = 0;
  v174 = *(unsigned int *)(*(_QWORD *)v604 + 60);
  v573 = *(_DWORD *)(*(_QWORD *)v604 + 60);
  v575 = 16 * v174;
  if ((_DWORD)v174)
  {
    if (v174 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197FA682CLL);
    }
    v175 = (char *)WTF::fastMalloc((WTF *)(16 * v174));
    bzero(v175, 16 * v174);
    v176 = *(_QWORD *)v604;
    v177 = *(unsigned int *)(*(_QWORD *)v604 + 60);
    if ((_DWORD)v177)
    {
      v178 = 0;
      while (!*(_QWORD *)(*(_QWORD *)(v176 + 48) + 8 * v178))
      {
        if (v177 == ++v178)
          goto LABEL_496;
      }
      if ((_DWORD)v177 != (_DWORD)v178)
      {
        v201 = *(_DWORD *)(*(_QWORD *)v604 + 60);
        v581 = v201;
        v586 = (JSC::B3::InsertionSet *)v175;
        v598 = *(_QWORD *)v604;
        do
        {
          if (v201 <= v178)
          {
            __break(0xC471u);
            JUMPOUT(0x197FA6804);
          }
          v202 = *(unsigned int **)(*(_QWORD *)(v176 + 48) + 8 * v178);
          v203 = v202[5];
          if ((_DWORD)v203)
          {
            v204 = (uint64_t *)*((_QWORD *)v202 + 1);
            v205 = &v204[v203];
            do
            {
              v206 = *v204;
              v207 = *(unsigned __int8 *)(*v204 + 20);
              if (v207 == 4)
              {
                v237 = 40;
                switch(*(_WORD *)(*v204 + 12))
                {
                  case 0u:
                  case 1u:
                  case 2u:
                  case 8u:
                  case 0xDu:
                  case 0xEu:
                  case 0xFu:
                  case 0x10u:
                  case 0x11u:
                  case 0x12u:
                  case 0x13u:
                  case 0x14u:
                  case 0x15u:
                  case 0x16u:
                  case 0x17u:
                  case 0x18u:
                  case 0x19u:
                  case 0x1Au:
                  case 0x1Bu:
                  case 0x1Cu:
                  case 0x1Du:
                  case 0x1Eu:
                  case 0x1Fu:
                  case 0x20u:
                  case 0x21u:
                  case 0x22u:
                  case 0x23u:
                  case 0x24u:
                  case 0x25u:
                  case 0x26u:
                  case 0x27u:
                  case 0x28u:
                  case 0x29u:
                  case 0x2Au:
                  case 0x2Bu:
                  case 0x2Cu:
                  case 0x2Du:
                  case 0x2Eu:
                  case 0x2Fu:
                  case 0x30u:
                  case 0x31u:
                  case 0x32u:
                  case 0x33u:
                  case 0x34u:
                  case 0x35u:
                  case 0x36u:
                  case 0x37u:
                  case 0x38u:
                  case 0x39u:
                  case 0x3Au:
                  case 0x3Bu:
                  case 0x3Cu:
                  case 0x3Du:
                  case 0x3Eu:
                  case 0x4Fu:
                  case 0x99u:
                  case 0x9Au:
                  case 0x9Bu:
                  case 0x9Du:
                  case 0x9Eu:
                  case 0x9Fu:
                    break;
                  case 3u:
                  case 4u:
                  case 5u:
                  case 6u:
                  case 9u:
                  case 0xAu:
                  case 0xBu:
                  case 0xCu:
                  case 0x50u:
                  case 0x54u:
                  case 0x5Au:
                  case 0x5Bu:
                  case 0x5Cu:
                  case 0x5Du:
                  case 0x5Eu:
                  case 0x5Fu:
                  case 0x60u:
                  case 0x61u:
                  case 0x62u:
                  case 0x63u:
                  case 0x64u:
                  case 0x65u:
                  case 0x66u:
                  case 0x67u:
                  case 0x68u:
                  case 0x69u:
                  case 0x6Au:
                  case 0x6Bu:
                  case 0x6Cu:
                  case 0x6Du:
                  case 0x6Eu:
                  case 0x6Fu:
                  case 0x70u:
                  case 0x71u:
                  case 0x72u:
                  case 0x73u:
                  case 0x74u:
                  case 0x75u:
                  case 0x76u:
                  case 0x77u:
                  case 0x78u:
                  case 0x79u:
                  case 0x7Au:
                  case 0x7Bu:
                  case 0x7Cu:
                  case 0x7Du:
                  case 0x7Eu:
                  case 0x7Fu:
                  case 0x80u:
                  case 0x81u:
                  case 0x82u:
                  case 0x83u:
                  case 0x84u:
                  case 0x85u:
                  case 0x86u:
                  case 0x87u:
                  case 0x88u:
                  case 0x89u:
                  case 0x8Au:
                  case 0x8Bu:
                  case 0x8Cu:
                  case 0x8Du:
                  case 0x8Eu:
                  case 0x8Fu:
                  case 0x90u:
                  case 0x91u:
                  case 0x92u:
                  case 0x93u:
                  case 0x94u:
                  case 0x95u:
                  case 0x96u:
                  case 0x97u:
                  case 0x98u:
                    v237 = 48;
                    break;
                  case 7u:
                  case 0x51u:
                  case 0x59u:
                  case 0x9Cu:
                    v237 = 56;
                    break;
                  case 0x3Fu:
                  case 0x40u:
                  case 0x41u:
                  case 0x42u:
                  case 0x43u:
                  case 0x44u:
                  case 0x45u:
                  case 0x46u:
                  case 0x47u:
                  case 0x48u:
                  case 0x49u:
                  case 0x4Au:
                  case 0x4Bu:
                  case 0x4Cu:
                  case 0x4Du:
                  case 0x4Eu:
                  case 0x52u:
                    v237 = 64;
                    break;
                  case 0x53u:
                    v237 = 176;
                    break;
                  case 0x55u:
                  case 0x56u:
                  case 0x57u:
                  case 0x58u:
                    v237 = 112;
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x197FA6794);
                }
                v238 = v206 + v237;
                v209 = *(uint64_t **)v238;
                v210 = *(_QWORD *)v238 + 8 * *(unsigned int *)(v238 + 12);
              }
              else
              {
                v208 = 40;
                switch(*(_WORD *)(*v204 + 12))
                {
                  case 0u:
                  case 1u:
                  case 2u:
                  case 8u:
                  case 0xDu:
                  case 0xEu:
                  case 0xFu:
                  case 0x10u:
                  case 0x11u:
                  case 0x12u:
                  case 0x13u:
                  case 0x14u:
                  case 0x15u:
                  case 0x16u:
                  case 0x17u:
                  case 0x18u:
                  case 0x19u:
                  case 0x1Au:
                  case 0x1Bu:
                  case 0x1Cu:
                  case 0x1Du:
                  case 0x1Eu:
                  case 0x1Fu:
                  case 0x20u:
                  case 0x21u:
                  case 0x22u:
                  case 0x23u:
                  case 0x24u:
                  case 0x25u:
                  case 0x26u:
                  case 0x27u:
                  case 0x28u:
                  case 0x29u:
                  case 0x2Au:
                  case 0x2Bu:
                  case 0x2Cu:
                  case 0x2Du:
                  case 0x2Eu:
                  case 0x2Fu:
                  case 0x30u:
                  case 0x31u:
                  case 0x32u:
                  case 0x33u:
                  case 0x34u:
                  case 0x35u:
                  case 0x36u:
                  case 0x37u:
                  case 0x38u:
                  case 0x39u:
                  case 0x3Au:
                  case 0x3Bu:
                  case 0x3Cu:
                  case 0x3Du:
                  case 0x3Eu:
                  case 0x4Fu:
                  case 0x99u:
                  case 0x9Au:
                  case 0x9Bu:
                  case 0x9Du:
                  case 0x9Eu:
                  case 0x9Fu:
                    break;
                  case 3u:
                  case 4u:
                  case 5u:
                  case 6u:
                  case 9u:
                  case 0xAu:
                  case 0xBu:
                  case 0xCu:
                  case 0x50u:
                  case 0x54u:
                  case 0x5Au:
                  case 0x5Bu:
                  case 0x5Cu:
                  case 0x5Du:
                  case 0x5Eu:
                  case 0x5Fu:
                  case 0x60u:
                  case 0x61u:
                  case 0x62u:
                  case 0x63u:
                  case 0x64u:
                  case 0x65u:
                  case 0x66u:
                  case 0x67u:
                  case 0x68u:
                  case 0x69u:
                  case 0x6Au:
                  case 0x6Bu:
                  case 0x6Cu:
                  case 0x6Du:
                  case 0x6Eu:
                  case 0x6Fu:
                  case 0x70u:
                  case 0x71u:
                  case 0x72u:
                  case 0x73u:
                  case 0x74u:
                  case 0x75u:
                  case 0x76u:
                  case 0x77u:
                  case 0x78u:
                  case 0x79u:
                  case 0x7Au:
                  case 0x7Bu:
                  case 0x7Cu:
                  case 0x7Du:
                  case 0x7Eu:
                  case 0x7Fu:
                  case 0x80u:
                  case 0x81u:
                  case 0x82u:
                  case 0x83u:
                  case 0x84u:
                  case 0x85u:
                  case 0x86u:
                  case 0x87u:
                  case 0x88u:
                  case 0x89u:
                  case 0x8Au:
                  case 0x8Bu:
                  case 0x8Cu:
                  case 0x8Du:
                  case 0x8Eu:
                  case 0x8Fu:
                  case 0x90u:
                  case 0x91u:
                  case 0x92u:
                  case 0x93u:
                  case 0x94u:
                  case 0x95u:
                  case 0x96u:
                  case 0x97u:
                  case 0x98u:
                    v208 = 48;
                    break;
                  case 7u:
                  case 0x51u:
                  case 0x59u:
                  case 0x9Cu:
                    v208 = 56;
                    break;
                  case 0x3Fu:
                  case 0x40u:
                  case 0x41u:
                  case 0x42u:
                  case 0x43u:
                  case 0x44u:
                  case 0x45u:
                  case 0x46u:
                  case 0x47u:
                  case 0x48u:
                  case 0x49u:
                  case 0x4Au:
                  case 0x4Bu:
                  case 0x4Cu:
                  case 0x4Du:
                  case 0x4Eu:
                  case 0x52u:
                    v208 = 64;
                    break;
                  case 0x53u:
                    v208 = 176;
                    break;
                  case 0x55u:
                  case 0x56u:
                  case 0x57u:
                  case 0x58u:
                    v208 = 112;
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x197FA6714);
                }
                v209 = (uint64_t *)(v206 + v208);
                v210 = v206 + v208 + 8 * v207;
              }
              while (v209 != (uint64_t *)v210)
              {
                v211 = *(unsigned __int8 *)(*v209 + 12);
                v111 = v211 > 0xC;
                v212 = (1 << v211) & 0x1018;
                if (v111 || v212 == 0)
                  goto LABEL_427;
                JSC::B3::Value::key(*v209, (uint64_t)v609);
                v214 = v617;
                if ((_QWORD)v617
                  || (WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash((uint64_t *)&v617, 8u, 0), (v214 = v617) != 0))
                {
                  v215 = *(_DWORD *)(v214 - 8);
                }
                else
                {
                  v215 = 0;
                }
                v216 = 0;
                v217 = 9
                     * ((*(_DWORD *)&v609[8] + ~(*(_DWORD *)&v609[8] << 15)) ^ ((*(_DWORD *)&v609[8]
                                                                                             + ~(*(_DWORD *)&v609[8] << 15)) >> 10));
                v218 = (v217 ^ (v217 >> 6)) + ~((v217 ^ (v217 >> 6)) << 11);
                v219 = *(_DWORD *)&v609[4]
                     + v609[1]
                     + ((v609[2] & 1) << 16)
                     + ((v609[2] << 6) & 0x80)
                     + *(_DWORD *)&v609[12]
                     + (((v609[2] >> 2) & 1) << 24)
                     + (((v609[2] >> 3) & 1) << 13)
                     + *(_DWORD *)&v609[16]
                     + *(_DWORD *)&v609[20]
                     + (v218 ^ HIWORD(v218));
                for (j = 1; ; j = (j + 1))
                {
                  v169 = v219 & v215;
                  v168 = v214 + 32 * v169;
                  v171 = *(unsigned __int8 *)v168;
                  v172 = *(unsigned __int8 *)(v168 + 1);
                  if (*(_BYTE *)v168)
                    v220 = 0;
                  else
                    v220 = (_DWORD)v172 == 159;
                  v170 = v220;
                  if (v220)
                  {
                    v221 = (uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v168 + 4), *(int32x4_t *)(v168 + 4)));
                    v221.i16[0] = vmaxv_u16(v221);
                    v173 = v221.u32[0];
                    if ((v221.i8[0] & 1) == 0)
                    {
                      v173 = *(_BYTE *)(v168 + 2) & 0xF;
                      if ((*(_BYTE *)(v168 + 2) & 0xF) == 0)
                      {
                        v173 = *(unsigned int *)(v168 + 20);
                        if (!(_DWORD)v173)
                        {
                          if (v216)
                          {
                            *(_WORD *)v216 = -24832;
                            *(_BYTE *)(v216 + 2) &= 0xF0u;
                            *(_QWORD *)(v216 + 4) = 0;
                            *(_QWORD *)(v216 + 20) = 0;
                            *(_QWORD *)(v216 + 12) = 0;
                            *(_DWORD *)(v216 + 28) = 0;
                            --*(_DWORD *)(v617 - 16);
                            v214 = v617;
                            v519 = *(_QWORD *)&v609[16];
                            *(_OWORD *)v216 = *(_OWORD *)v609;
                            *(_QWORD *)(v216 + 16) = v519;
                            v233 = (uint64_t *)(v216 + 24);
                            v168 = v216;
                          }
                          else
                          {
                            v232 = *(_OWORD *)v609;
                            *(_QWORD *)(v168 + 16) = *(_QWORD *)&v609[16];
                            *(_OWORD *)v168 = v232;
                            v233 = (uint64_t *)(v214 + 32 * v169 + 24);
                          }
                          *v233 = *v209;
                          ++*(_DWORD *)(v214 - 12);
                          if ((_QWORD)v617)
                            v234 = *(_DWORD *)(v617 - 12);
                          else
                            v234 = 0;
                          v235 = (*(_DWORD *)(v617 - 16) + v234);
                          v236 = *(unsigned int *)(v617 - 4);
                          if (v236 > 0x400)
                          {
                            if (v236 > 2 * v235)
                              goto LABEL_426;
                          }
                          else
                          {
                            if (3 * v236 > 4 * v235)
                            {
LABEL_426:
                              *(_QWORD *)(*v209 + 32) = v202;
                              goto LABEL_427;
                            }
                            if (!(_DWORD)v236)
                            {
                              v239 = 8;
LABEL_438:
                              WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash((uint64_t *)&v617, v239, v168);
                              goto LABEL_426;
                            }
                          }
                          v239 = (_DWORD)v236 << (6 * *(_DWORD *)(v617 - 12) >= (2 * v236));
                          goto LABEL_438;
                        }
                      }
                    }
                  }
                  if ((_DWORD)v171 == v609[0]
                    && (_DWORD)v172 == v609[1]
                    && ((*(_BYTE *)(v168 + 2) ^ v609[2]) & 0xF) == 0
                    && *(_OWORD *)(v168 + 4) == *(_OWORD *)&v609[4])
                  {
                    v171 = *(unsigned int *)(v168 + 20);
                    if ((_DWORD)v171 == *(_DWORD *)&v609[20])
                      break;
                  }
                  if ((_DWORD)v170
                    && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v168 + 4), (int32x4_t)xmmword_199123080)))) & 1) == 0&& (*(_BYTE *)(v168 + 2) & 0xF) == 0&& !*(_DWORD *)(v168 + 20))
                  {
                    v216 = v214 + 32 * v169;
                  }
                  v219 = j + v169;
                }
                v223 = *(_QWORD *)(v214 + 32 * v169 + 24);
                *v209 = v223;
                v226 = *(unsigned int **)(v223 + 32);
                v224 = (unsigned int **)(v223 + 32);
                v225 = v226;
                if (v226 != v202)
                {
                  v227 = v592[1];
                  v228 = &v227[4 * *v202];
                  v229 = *((_DWORD *)v228 + 6);
                  v230 = (_DWORD *)v228 + 7;
                  do
                  {
                    v231 = &v227[4 * *v225];
                    if (v229 > *((_DWORD *)v231 + 6) && *v230 < *((_DWORD *)v231 + 7))
                      break;
                    *v224 = (unsigned int *)v231[2];
                    v224 = (unsigned int **)(*v209 + 32);
                    v225 = *v224;
                  }
                  while (*v224 != v202);
                }
LABEL_427:
                ++v209;
              }
              ++v204;
            }
            while (v204 != v205);
            v176 = v598;
            v201 = *(_DWORD *)(v598 + 60);
            LODWORD(v177) = v581;
            v175 = (char *)v586;
          }
          v178 = (v178 + 1);
          if (v201 > v178)
          {
            while (!*(_QWORD *)(*(_QWORD *)(v176 + 48) + 8 * v178))
            {
              if (v201 == ++v178)
              {
                LODWORD(v178) = v201;
                break;
              }
            }
          }
        }
        while ((_DWORD)v177 != (_DWORD)v178);
        if ((_QWORD)v617 && *(_DWORD *)(v617 - 12))
        {
          v240 = *(unsigned int *)(v617 - 4);
          if ((_DWORD)v240)
          {
            v241 = 32 * v240;
            v242 = v617;
            while (!*(_BYTE *)v242 && *(unsigned __int8 *)(v242 + 1) == 159)
            {
              v243 = *(_DWORD *)(v242 + 4);
              v244 = *(_DWORD *)(v242 + 8);
              v245 = *(_DWORD *)(v242 + 12);
              v246 = *(_DWORD *)(v242 + 16);
              v247 = *(_DWORD *)(v242 + 20);
              v248 = (*(_BYTE *)(v242 + 2) & 0xF) == 0 && v243 == 0;
              v249 = v248 && v244 == 0;
              v250 = v249 && v245 == 0;
              v251 = v250 && v246 == 0;
              if (!v251 || v247 != 0)
              {
                v253 = (*(_BYTE *)(v242 + 2) & 0xF) == 0 && v243 == 1;
                v254 = v253 && v244 == 0;
                v255 = v254 && v245 == 0;
                v256 = v255 && v246 == 0;
                if (!v256 || v247 != 0)
                  break;
              }
              v242 += 32;
              v241 -= 32;
              if (!v241)
                goto LABEL_496;
            }
          }
          else
          {
            v242 = v617;
          }
          v473 = v617 + 32 * v240;
          if (v473 != v242)
          {
LABEL_844:
            v474 = *(_QWORD *)(v242 + 24);
            *(_QWORD *)v609 = v474;
            v475 = *(double **)(v474 + 32);
            v476 = v592[1];
            v477 = v475;
            do
            {
              if (v477[13] < v475[13])
              {
                *(_QWORD *)(v474 + 32) = v477;
                v475 = v477;
              }
              v477 = (double *)v476[4 * *(unsigned int *)v477 + 2];
            }
            while (v477);
            v478 = (char **)&v175[16 * *(unsigned int *)v475];
            v479 = *((unsigned int *)v478 + 3);
            if ((_DWORD)v479 == *((_DWORD *)v478 + 2))
            {
              v495 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v478, v479 + 1, (unint64_t)v609);
              v479 = *((unsigned int *)v478 + 3);
              *(_QWORD *)&(*v478)[8 * v479] = *(_QWORD *)v495;
            }
            else
            {
              *(_QWORD *)&(*v478)[8 * v479] = v474;
            }
            *((_DWORD *)v478 + 3) = v479 + 1;
            while (1)
            {
              v242 += 32;
              if (v242 == v473)
                break;
              if (!*(_BYTE *)v242 && *(unsigned __int8 *)(v242 + 1) == 159)
              {
                v480 = *(_DWORD *)(v242 + 4);
                v481 = *(_DWORD *)(v242 + 8);
                v482 = *(_DWORD *)(v242 + 12);
                v483 = *(_DWORD *)(v242 + 16);
                v484 = *(_DWORD *)(v242 + 20);
                v485 = (*(_BYTE *)(v242 + 2) & 0xF) == 0 && v480 == 0;
                v486 = v485 && v481 == 0;
                v487 = v486 && v482 == 0;
                v488 = v487 && v483 == 0;
                if (v488 && v484 == 0)
                  continue;
                v490 = (*(_BYTE *)(v242 + 2) & 0xF) == 0 && v480 == 1;
                v491 = v490 && v481 == 0;
                v492 = v491 && v482 == 0;
                v493 = v492 && v483 == 0;
                if (v493 && v484 == 0)
                  continue;
              }
              if (v242 != v473)
                goto LABEL_844;
              break;
            }
          }
        }
      }
    }
  }
  else
  {
    v175 = 0;
  }
LABEL_496:
  v258 = *(_QWORD *)v604;
  v259 = *(unsigned int *)(*(_QWORD *)v604 + 60);
  if ((_DWORD)v259)
  {
    v260 = 0;
    v587 = (JSC::B3::InsertionSet *)v175;
    while (!*(_QWORD *)(*(_QWORD *)(v258 + 48) + 8 * v260))
    {
      if (v259 == ++v260)
        goto LABEL_565;
    }
    if ((_DWORD)v259 != (_DWORD)v260)
    {
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v261 = v259;
      v578 = v259;
      v582 = v258;
      while (1)
      {
        if (v261 <= v260)
        {
          __break(0xC471u);
          JUMPOUT(0x197FA680CLL);
        }
        v262 = *(_QWORD *)(*(_QWORD *)(v258 + 48) + 8 * v260);
        v263 = *(unsigned int *)(v262 + 20);
        if ((_DWORD)v263)
          break;
LABEL_546:
        v260 = (v260 + 1);
        if (v261 > v260)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v258 + 48) + 8 * v260))
          {
            if (v261 == ++v260)
            {
              LODWORD(v260) = v261;
              break;
            }
          }
        }
        if ((_DWORD)v259 == (_DWORD)v260)
        {
          v258 = *(_QWORD *)v604;
          LODWORD(v259) = *(_DWORD *)(*(_QWORD *)v604 + 60);
          goto LABEL_565;
        }
      }
      v264 = *(uint64_t **)(v262 + 8);
      v265 = &v264[v263];
      while (2)
      {
        v266 = *(unsigned __int8 *)(*v264 + 12);
        v111 = v266 > 0xC;
        v267 = (1 << v266) & 0x1018;
        if (v111 || v267 == 0)
          goto LABEL_540;
        JSC::B3::Value::key(*v264, (uint64_t)v609);
        v269 = v617;
        if ((_QWORD)v617)
        {
          v270 = 0;
          v271 = 9
               * ((*(_DWORD *)&v609[8] + ~(*(_DWORD *)&v609[8] << 15)) ^ ((*(_DWORD *)&v609[8]
                                                                                       + ~(*(_DWORD *)&v609[8] << 15)) >> 10));
          v272 = (v271 ^ (v271 >> 6)) + ~((v271 ^ (v271 >> 6)) << 11);
          for (k = *(_DWORD *)&v609[4]
                  + v609[1]
                  + ((v609[2] & 1) << 16)
                  + ((v609[2] << 6) & 0x80)
                  + *(_DWORD *)&v609[12]
                  + (((v609[2] >> 2) & 1) << 24)
                  + (((v609[2] >> 3) & 1) << 13)
                  + *(_DWORD *)&v609[16]
                  + *(_DWORD *)&v609[20]
                  + (v272 ^ HIWORD(v272)); ; k = v270 + j)
          {
            j = k & *(_DWORD *)(v617 - 8);
            v168 = v617 + 32 * j;
            v169 = *(unsigned __int8 *)v168;
            v170 = *(unsigned __int8 *)(v168 + 1);
            if ((_DWORD)v169 == v609[0] && (_DWORD)v170 == v609[1])
            {
              v171 = *(unsigned __int8 *)(v168 + 2) ^ v609[2];
              v170 = v609[1];
              if (((*(_BYTE *)(v168 + 2) ^ v609[2]) & 0xF) == 0)
              {
                v171 = *(unsigned int *)(v168 + 4);
                v170 = v609[1];
                if ((_DWORD)v171 == *(_DWORD *)&v609[4])
                {
                  v171 = *(unsigned int *)(v168 + 8);
                  v170 = v609[1];
                  if ((_DWORD)v171 == *(_DWORD *)&v609[8])
                  {
                    v171 = *(unsigned int *)(v168 + 12);
                    v170 = v609[1];
                    if ((_DWORD)v171 == *(_DWORD *)&v609[12])
                    {
                      v171 = *(unsigned int *)(v168 + 16);
                      v170 = v609[1];
                      if ((_DWORD)v171 == *(_DWORD *)&v609[16])
                      {
                        v171 = *(unsigned int *)(v168 + 20);
                        v170 = v609[1];
                        if ((_DWORD)v171 == *(_DWORD *)&v609[20])
                          break;
                      }
                    }
                  }
                }
              }
            }
            if (!*(_BYTE *)v168
              && (_DWORD)v170 == 159
              && (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v168 + 4), *(int32x4_t *)(v168 + 4)))) & 1) == 0)
            {
              v169 = *(_BYTE *)(v168 + 2) & 0xF;
              if ((*(_BYTE *)(v168 + 2) & 0xF) == 0)
              {
                v168 = *(unsigned int *)(v168 + 20);
                if (!(_DWORD)v168)
                {
                  v269 = 0;
                  goto LABEL_531;
                }
              }
            }
            ++v270;
          }
          v269 = *(_QWORD *)(v617 + 32 * j + 24);
        }
LABEL_531:
        v275 = *v264;
        if (v269 != *v264)
        {
          v293 = *(_QWORD *)(v275 + 32);
          v294 = *(_DWORD *)(v275 + 8);
          (**(void (***)(uint64_t))v275)(*v264);
          *(_QWORD *)v275 = off_1E357F5F0;
          *(_WORD *)(v275 + 12) = 0;
          *(_DWORD *)(v275 + 16) = 0;
          *(_BYTE *)(v275 + 20) = 0;
          *(_DWORD *)(v275 + 8) = v294;
          *(_QWORD *)(v275 + 32) = v293;
          goto LABEL_540;
        }
        v276 = *(_QWORD *)v604;
        v277 = *(_QWORD *)(v269 + 24);
        v278 = *(_QWORD *)(StatusReg + 752);
        if (v278)
        {
          v279 = (_BYTE *)(v278 + 8672);
          *(_BYTE *)(v278 + 8672) = 1;
          v280 = *(unsigned int *)(v278 + 8688);
          if ((_DWORD)v280)
          {
            *(_DWORD *)(v278 + 8688) = v280 - *(_DWORD *)(v278 + 8692);
            casual = *(_QWORD *)(v278 + 8680) - v280;
            goto LABEL_535;
          }
          v285 = *(_QWORD *)(v278 + 8712);
          v286 = *(_QWORD *)(v278 + 8696);
          if (v285)
          {
LABEL_543:
            v287 = __clz(v285);
            *(_QWORD *)(v278 + 8712) = v285 & ~(0x8000000000000000 >> v287);
            casual = v286 + 16 * v287;
LABEL_535:
            *v279 = 0;
LABEL_536:
            *(_QWORD *)casual = off_1E357F5F0;
            *(_DWORD *)(casual + 8) = -1;
            *(_WORD *)(casual + 12) = 0;
            *(_DWORD *)(casual + 16) = 0;
            *(_BYTE *)(casual + 20) = 0;
            *(_QWORD *)(casual + 24) = v277;
            *(_QWORD *)(casual + 32) = 0;
            v282 = *(unsigned int *)(v276 + 92);
            if ((_DWORD)v282)
            {
              v283 = *(_QWORD *)(*(_QWORD *)(v276 + 80) + 8 * v282 - 8);
              *(_DWORD *)(v276 + 92) = v282 - 1;
              v284 = *(_QWORD *)(v276 + 64);
            }
            else
            {
              v283 = *(unsigned int *)(v276 + 76);
              if ((_DWORD)v283 == *(_DWORD *)(v276 + 72))
              {
                v288 = v283 + (v283 >> 2);
                if (v288 >= 0x10)
                  v289 = v288 + 1;
                else
                  v289 = 16;
                if (v289 <= v283 + 1)
                  v259 = v283 + 1;
                else
                  v259 = v289;
                if (v259 >> 29)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FA679CLL);
                }
                v290 = *(const void **)(v276 + 64);
                v291 = (void *)WTF::fastMalloc((WTF *)(8 * v259));
                *(_DWORD *)(v276 + 72) = v259;
                *(_QWORD *)(v276 + 64) = v291;
                memcpy(v291, v290, 8 * v283);
                LODWORD(v259) = v578;
                if (v290)
                {
                  if (*(const void **)(v276 + 64) == v290)
                  {
                    *(_QWORD *)(v276 + 64) = 0;
                    *(_DWORD *)(v276 + 72) = 0;
                  }
                  WTF::fastFree((unint64_t)v290, (void *)j, v168, v169, v170, v171, v172, v173);
                }
                v292 = *(unsigned int *)(v276 + 76);
                v284 = *(_QWORD *)(v276 + 64);
                *(_QWORD *)(v284 + 8 * v292) = 0;
                *(_DWORD *)(v276 + 76) = v292 + 1;
              }
              else
              {
                v284 = *(_QWORD *)(v276 + 64);
                *(_QWORD *)(v284 + 8 * v283) = 0;
                *(_DWORD *)(v276 + 76) = v283 + 1;
              }
            }
            *(_DWORD *)(casual + 8) = v283;
            *(_QWORD *)(v284 + 8 * v283) = casual;
            *v264 = casual;
LABEL_540:
            if (++v264 == v265)
            {
              v258 = v582;
              v261 = *(_DWORD *)(v582 + 60);
              goto LABEL_546;
            }
            continue;
          }
          if (*(_BYTE *)(v278 + 8677) == 6)
          {
            v496 = *(_DWORD *)(v278 + 8708);
            v497 = *(unsigned int *)(v278 + 8704);
            if (v497 < v496)
            {
              *(_QWORD *)&v279[8 * v497 + 56] = 0;
              v498 = (unint64_t *)(v278 + 8 * v497 + 8736);
              v499 = v496 - 1 - v497;
              while (v499)
              {
                v286 += 1024;
                v501 = *v498++;
                v500 = v501;
                LODWORD(v497) = v497 + 1;
                --v499;
                if (v501)
                {
                  v285 = __rbit64(v500);
                  *(_DWORD *)(v278 + 8704) = v497;
                  *(_QWORD *)(v278 + 8696) = v286;
                  goto LABEL_543;
                }
              }
              *(_DWORD *)(v278 + 8704) = v496;
            }
          }
          *v279 = 0;
        }
        break;
      }
      casual = bmalloc_allocate_casual(48, 1);
      goto LABEL_536;
    }
LABEL_565:
    if ((_DWORD)v259)
    {
      v295 = 0;
      v599 = v259;
      while (!*(_QWORD *)(*(_QWORD *)(v258 + 48) + 8 * v295))
      {
        if (v259 == ++v295)
          goto LABEL_569;
      }
      if ((_DWORD)v259 != (_DWORD)v295)
      {
        v603 = (JSC::B3::_anonymous_namespace_::MoveConstants *)((char *)v604 + 8);
        v583 = v258;
        LODWORD(v299) = v259;
        while (1)
        {
          if (v299 <= v295)
          {
            __break(0xC471u);
            JUMPOUT(0x197FA681CLL);
          }
          v300 = *(unsigned int **)(*(_QWORD *)(v258 + 48) + 8 * v295);
          if (v300[5])
            break;
LABEL_673:
          v352 = &v175[16 * *v300];
          v353 = *((unsigned int *)v352 + 3);
          if ((_DWORD)v353)
          {
            v354 = *(JSC::B3::Value ***)v352;
            v355 = 8 * v353;
            do
            {
              if (*((_QWORD *)*v354 + 4))
                JSC::B3::InsertionSet::insertValue(v603, v300[5] - 1, *v354, v169, v170, v171, v172, v173);
              ++v354;
              v355 -= 8;
            }
            while (v355);
          }
          JSC::B3::InsertionSet::execute(v603, (JSC::B3::BasicBlock *)v300);
          v295 = (v295 + 1);
          v299 = *(unsigned int *)(v258 + 60);
          if (v299 > v295)
          {
            while (!*(_QWORD *)(*(_QWORD *)(v258 + 48) + 8 * v295))
            {
              if (v299 == ++v295)
              {
                LODWORD(v295) = *(_DWORD *)(v258 + 60);
                break;
              }
            }
          }
          if (v599 == (_DWORD)v295)
            goto LABEL_569;
        }
        v301 = 0;
        while (1)
        {
          v302 = *(_QWORD *)(*((_QWORD *)v300 + 1) + 8 * v301);
          v303 = *(unsigned __int8 *)(v302 + 12);
          if (!v302 || (v303 - 79) < 0xFFFFFFF0)
            break;
          Child = JSC::B3::MemoryValue::lastChild(*(JSC::B3::MemoryValue **)(*((_QWORD *)v300 + 1) + 8 * v301));
          v314 = *(_QWORD *)Child;
          if (*(_QWORD *)Child)
            v315 = (*(_WORD *)(*(_QWORD *)Child + 12) & 0xFFF) == 4;
          else
            v315 = 0;
          v316 = *(_WORD *)(*(_QWORD *)Child + 12);
          v317 = !v315 || v316 > 0xC;
          v318 = (1 << v316) & 0x1018;
          if (v317 || v318 == 0)
            goto LABEL_589;
          v359 = 0;
          v360 = v300;
          do
          {
            v322 = *v360;
            v323 = &v175[16 * v322];
            v324 = *((unsigned int *)v323 + 3);
            if ((_DWORD)v324)
            {
              v325 = *(uint64_t **)v323;
              v326 = 8 * v324;
              while (1)
              {
                v327 = *v325;
                if (*v325 && (*(_WORD *)(*v325 + 12) & 0xFFF) == 4)
                {
                  v329 = (*(_WORD *)(v314 + 12) & 0xFFF) == 4 ? v314 : 0;
                  v330 = *(_QWORD *)(v327 + 40);
                  v331 = *(_QWORD *)(v329 + 40) + *(int *)(v302 + 40);
                  if (v331 - v330 == (_DWORD)v331 - (_DWORD)v330
                    && (JSC::B3::MemoryValue::isLegalOffset<int,void,void>(v302, (int)v331 - (int)v330) & 1) != 0)
                  {
                    break;
                  }
                }
                ++v325;
                v326 -= 8;
                if (!v326)
                {
                  v327 = v359;
                  break;
                }
              }
              v322 = *v360;
              v359 = v327;
              v175 = (char *)v587;
            }
            v360 = (unsigned int *)v592[1][4 * v322 + 2];
          }
          while (v360);
          v258 = v583;
          if (v359)
          {
            *(_QWORD *)JSC::B3::MemoryValue::lastChild((JSC::B3::MemoryValue *)v302) = v359;
            if ((*(_WORD *)(v314 + 12) & 0xFFF) == 4)
              v361 = v314;
            else
              v361 = 0;
            v362 = *(_DWORD *)(v361 + 40);
            if ((*(_WORD *)(v359 + 12) & 0xFFF) == 4)
              v363 = v359;
            else
              v363 = 0;
            *(_DWORD *)(v302 + 40) = v362 + *(_DWORD *)(v302 + 40) - *(_DWORD *)(v363 + 40);
          }
LABEL_589:
          v305 = *(unsigned __int8 *)(v302 + 20);
          if (v305 == 4)
          {
            v320 = 40;
            switch(*(_WORD *)(v302 + 12))
            {
              case 0u:
              case 1u:
              case 2u:
              case 8u:
              case 0xDu:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
              case 0x18u:
              case 0x19u:
              case 0x1Au:
              case 0x1Bu:
              case 0x1Cu:
              case 0x1Du:
              case 0x1Eu:
              case 0x1Fu:
              case 0x20u:
              case 0x21u:
              case 0x22u:
              case 0x23u:
              case 0x24u:
              case 0x25u:
              case 0x26u:
              case 0x27u:
              case 0x28u:
              case 0x29u:
              case 0x2Au:
              case 0x2Bu:
              case 0x2Cu:
              case 0x2Du:
              case 0x2Eu:
              case 0x2Fu:
              case 0x30u:
              case 0x31u:
              case 0x32u:
              case 0x33u:
              case 0x34u:
              case 0x35u:
              case 0x36u:
              case 0x37u:
              case 0x38u:
              case 0x39u:
              case 0x3Au:
              case 0x3Bu:
              case 0x3Cu:
              case 0x3Du:
              case 0x3Eu:
              case 0x4Fu:
              case 0x99u:
              case 0x9Au:
              case 0x9Bu:
              case 0x9Du:
              case 0x9Eu:
              case 0x9Fu:
                break;
              case 3u:
              case 4u:
              case 5u:
              case 6u:
              case 9u:
              case 0xAu:
              case 0xBu:
              case 0xCu:
              case 0x50u:
              case 0x54u:
              case 0x5Au:
              case 0x5Bu:
              case 0x5Cu:
              case 0x5Du:
              case 0x5Eu:
              case 0x5Fu:
              case 0x60u:
              case 0x61u:
              case 0x62u:
              case 0x63u:
              case 0x64u:
              case 0x65u:
              case 0x66u:
              case 0x67u:
              case 0x68u:
              case 0x69u:
              case 0x6Au:
              case 0x6Bu:
              case 0x6Cu:
              case 0x6Du:
              case 0x6Eu:
              case 0x6Fu:
              case 0x70u:
              case 0x71u:
              case 0x72u:
              case 0x73u:
              case 0x74u:
              case 0x75u:
              case 0x76u:
              case 0x77u:
              case 0x78u:
              case 0x79u:
              case 0x7Au:
              case 0x7Bu:
              case 0x7Cu:
              case 0x7Du:
              case 0x7Eu:
              case 0x7Fu:
              case 0x80u:
              case 0x81u:
              case 0x82u:
              case 0x83u:
              case 0x84u:
              case 0x85u:
              case 0x86u:
              case 0x87u:
              case 0x88u:
              case 0x89u:
              case 0x8Au:
              case 0x8Bu:
              case 0x8Cu:
              case 0x8Du:
              case 0x8Eu:
              case 0x8Fu:
              case 0x90u:
              case 0x91u:
              case 0x92u:
              case 0x93u:
              case 0x94u:
              case 0x95u:
              case 0x96u:
              case 0x97u:
              case 0x98u:
                v320 = 48;
                break;
              case 7u:
              case 0x51u:
              case 0x59u:
              case 0x9Cu:
                v320 = 56;
                break;
              case 0x3Fu:
              case 0x40u:
              case 0x41u:
              case 0x42u:
              case 0x43u:
              case 0x44u:
              case 0x45u:
              case 0x46u:
              case 0x47u:
              case 0x48u:
              case 0x49u:
              case 0x4Au:
              case 0x4Bu:
              case 0x4Cu:
              case 0x4Du:
              case 0x4Eu:
              case 0x52u:
                v320 = 64;
                break;
              case 0x53u:
                v320 = 176;
                break;
              case 0x55u:
              case 0x56u:
              case 0x57u:
              case 0x58u:
                v320 = 112;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x197FA67DCLL);
            }
            v321 = v302 + v320;
            v307 = *(JSC::B3::Value ***)v321;
            v305 = *(unsigned int *)(v321 + 12);
          }
          else
          {
            v306 = 40;
            switch(*(_WORD *)(v302 + 12))
            {
              case 0u:
              case 1u:
              case 2u:
              case 8u:
              case 0xDu:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
              case 0x18u:
              case 0x19u:
              case 0x1Au:
              case 0x1Bu:
              case 0x1Cu:
              case 0x1Du:
              case 0x1Eu:
              case 0x1Fu:
              case 0x20u:
              case 0x21u:
              case 0x22u:
              case 0x23u:
              case 0x24u:
              case 0x25u:
              case 0x26u:
              case 0x27u:
              case 0x28u:
              case 0x29u:
              case 0x2Au:
              case 0x2Bu:
              case 0x2Cu:
              case 0x2Du:
              case 0x2Eu:
              case 0x2Fu:
              case 0x30u:
              case 0x31u:
              case 0x32u:
              case 0x33u:
              case 0x34u:
              case 0x35u:
              case 0x36u:
              case 0x37u:
              case 0x38u:
              case 0x39u:
              case 0x3Au:
              case 0x3Bu:
              case 0x3Cu:
              case 0x3Du:
              case 0x3Eu:
              case 0x4Fu:
              case 0x99u:
              case 0x9Au:
              case 0x9Bu:
              case 0x9Du:
              case 0x9Eu:
              case 0x9Fu:
                break;
              case 3u:
              case 4u:
              case 5u:
              case 6u:
              case 9u:
              case 0xAu:
              case 0xBu:
              case 0xCu:
              case 0x50u:
              case 0x54u:
              case 0x5Au:
              case 0x5Bu:
              case 0x5Cu:
              case 0x5Du:
              case 0x5Eu:
              case 0x5Fu:
              case 0x60u:
              case 0x61u:
              case 0x62u:
              case 0x63u:
              case 0x64u:
              case 0x65u:
              case 0x66u:
              case 0x67u:
              case 0x68u:
              case 0x69u:
              case 0x6Au:
              case 0x6Bu:
              case 0x6Cu:
              case 0x6Du:
              case 0x6Eu:
              case 0x6Fu:
              case 0x70u:
              case 0x71u:
              case 0x72u:
              case 0x73u:
              case 0x74u:
              case 0x75u:
              case 0x76u:
              case 0x77u:
              case 0x78u:
              case 0x79u:
              case 0x7Au:
              case 0x7Bu:
              case 0x7Cu:
              case 0x7Du:
              case 0x7Eu:
              case 0x7Fu:
              case 0x80u:
              case 0x81u:
              case 0x82u:
              case 0x83u:
              case 0x84u:
              case 0x85u:
              case 0x86u:
              case 0x87u:
              case 0x88u:
              case 0x89u:
              case 0x8Au:
              case 0x8Bu:
              case 0x8Cu:
              case 0x8Du:
              case 0x8Eu:
              case 0x8Fu:
              case 0x90u:
              case 0x91u:
              case 0x92u:
              case 0x93u:
              case 0x94u:
              case 0x95u:
              case 0x96u:
              case 0x97u:
              case 0x98u:
                v306 = 48;
                break;
              case 7u:
              case 0x51u:
              case 0x59u:
              case 0x9Cu:
                v306 = 56;
                break;
              case 0x3Fu:
              case 0x40u:
              case 0x41u:
              case 0x42u:
              case 0x43u:
              case 0x44u:
              case 0x45u:
              case 0x46u:
              case 0x47u:
              case 0x48u:
              case 0x49u:
              case 0x4Au:
              case 0x4Bu:
              case 0x4Cu:
              case 0x4Du:
              case 0x4Eu:
              case 0x52u:
                v306 = 64;
                break;
              case 0x53u:
                v306 = 176;
                break;
              case 0x55u:
              case 0x56u:
              case 0x57u:
              case 0x58u:
                v306 = 112;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x197FA6754);
            }
            v307 = (JSC::B3::Value **)(v302 + v306);
          }
          v308 = &v307[v305];
          while (v307 != v308)
          {
            v309 = *v307;
            v310 = *((unsigned __int8 *)*v307 + 12);
            v111 = v310 > 0xC;
            v311 = (1 << v310) & 0x1018;
            v312 = v111 || v311 == 0;
            if (!v312 && *((unsigned int **)v309 + 4) == v300)
            {
              JSC::B3::InsertionSet::insertValue(v603, v301, *v307, v169, v170, v171, v172, v173);
              *((_QWORD *)v309 + 4) = 0;
            }
            ++v307;
          }
          if (++v301 >= (unint64_t)v300[5])
            goto LABEL_673;
        }
        if ((v303 & 0xFE) != 0xE)
          goto LABEL_589;
        v342 = JSC::B3::Value::child(*(JSC::B3::Value **)(*((_QWORD *)v300 + 1) + 8 * v301), 1u);
        v343 = *(_QWORD *)v342;
        v344 = *(_WORD *)(*(_QWORD *)v342 + 12) & 0xFFF;
        v345 = *(_QWORD *)v342 && v344 == 3;
        v346 = v345;
        v347 = !v343 || (v344 - 3) > 1;
        v348 = *(_WORD *)(*(_QWORD *)v342 + 12);
        v349 = v347 || v348 > 0xC;
        v350 = (1 << v348) & 0x1018;
        if (v349 || v350 == 0)
          goto LABEL_589;
        if (v346)
        {
          v357 = *(int *)(v343 + 40);
        }
        else
        {
          v356 = v344 == 4 ? *(_QWORD *)v342 : 0;
          v357 = *(_QWORD *)(v356 + 40);
        }
        if ((unint64_t)(v357 + 4095) < 0x1FFF
          || (v357 & 0xFFF) == 0
          && (!((unint64_t)v357 >> 24) || (unint64_t)((v357 >> 12) + 4095) < 0x1000))
        {
          goto LABEL_589;
        }
        v338 = 0;
        v358 = -v357;
        v341 = v300;
        while (2)
        {
          v332 = v338;
          v333 = *v341;
          v334 = &v175[16 * v333];
          v335 = *((unsigned int *)v334 + 3);
          if (!(_DWORD)v335)
          {
LABEL_649:
            v338 = v332;
            goto LABEL_650;
          }
          v336 = *(uint64_t **)v334;
          v337 = 8 * v335;
          while (2)
          {
            v338 = *v336;
            if (*(_DWORD *)(*v336 + 16) != *(_DWORD *)(v343 + 16))
            {
LABEL_639:
              ++v336;
              v337 -= 8;
              if (!v337)
                goto LABEL_649;
              continue;
            }
            break;
          }
          v339 = *(_WORD *)(v338 + 12) & 0xFFF;
          if (v339 == 4)
          {
            if (v343 == v338)
              goto LABEL_652;
            v340 = *(_QWORD *)(v338 + 40);
          }
          else
          {
            if (v339 != 3)
              goto LABEL_639;
            if (v343 == v338)
            {
LABEL_652:
              v338 = v343;
LABEL_650:
              v341 = (unsigned int *)v592[1][4 * v333 + 2];
              if (!v341)
              {
                if (v338 && v338 != v343)
                {
                  v409 = JSC::B3::Value::child((JSC::B3::Value *)v302, 0);
                  v415 = *(JSC::B3::Value **)v409;
                  v416 = *(unsigned __int8 *)(*(_QWORD *)v409 + 12);
                  v111 = v416 > 0xC;
                  v417 = (1 << v416) & 0x1018;
                  v418 = v111 || v417 == 0;
                  if (!v418 && *((unsigned int **)v415 + 4) == v300)
                  {
                    JSC::B3::InsertionSet::insertValue(v603, v301, v415, v410, v411, v412, v413, v414);
                    *((_QWORD *)v415 + 4) = 0;
                  }
                  v419 = *(unsigned __int8 *)(v338 + 12);
                  if (v419 <= 0xC && ((1 << v419) & 0x1018) != 0 && *(unsigned int **)(v338 + 32) == v300)
                  {
                    JSC::B3::InsertionSet::insertValue(v603, v301, (JSC::B3::Value *)v338, v410, v411, v412, v413, v414);
                    *(_QWORD *)(v338 + 32) = 0;
                  }
                  v420 = (uint64_t *)((char *)v604 + 16);
                  v421 = *(unsigned __int8 *)(v302 + 12);
                  v422 = *(_QWORD *)(v302 + 24);
                  v423 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v302, 0);
                  v571 = (JSC::B3::Value *)*((_QWORD *)v604 + 1);
                  if (v421 == 14)
                    v424 = 15;
                  else
                    v424 = 14;
                  v425 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(v424, v422, v423, v338);
                  JSC::B3::Procedure::addValueImpl(v571, v425);
                  *(_QWORD *)v609 = v301;
                  *(_QWORD *)&v609[8] = v425;
                  v431 = *((unsigned int *)v604 + 7);
                  if ((_DWORD)v431 == *((_DWORD *)v604 + 6))
                  {
                    v512 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v420, (void *)(v431 + 1), (unint64_t)v609, v426, v427, v428, v429, v430);
                    v431 = *((unsigned int *)v604 + 7);
                    v432 = *((_QWORD *)v604 + 2);
                    v433 = *v512;
                  }
                  else
                  {
                    v432 = *v420;
                    v433 = *(_OWORD *)v609;
                  }
                  *(_OWORD *)(v432 + 16 * v431) = v433;
                  ++*((_DWORD *)v604 + 7);
                  v434 = *(_DWORD *)(v302 + 16);
                  if (v434 != *((_DWORD *)v425 + 4))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197FA6634);
                  }
                  v435 = *(_QWORD *)(v302 + 32);
                  v436 = *(_DWORD *)(v302 + 8);
                  (**(void (***)(uint64_t))v302)(v302);
                  *(_QWORD *)v302 = off_1E357F5F0;
                  if (v434)
                  {
                    *(_QWORD *)(v302 + 40) = v425;
                    v437 = 1;
                  }
                  else
                  {
                    v437 = 0;
                  }
                  *(_WORD *)(v302 + 12) = v437;
                  *(_DWORD *)(v302 + 16) = v434;
                  *(_BYTE *)(v302 + 20) = v437;
                  *(_DWORD *)(v302 + 8) = v436;
                  *(_QWORD *)(v302 + 32) = v435;
                  v175 = (char *)v587;
                }
                goto LABEL_589;
              }
              continue;
            }
            v340 = *(int *)(v338 + 40);
          }
          break;
        }
        if (v340 == v358)
          goto LABEL_650;
        goto LABEL_639;
      }
    }
  }
LABEL_569:
  v296 = v575;
  if (v573)
  {
    v297 = v175;
    do
    {
      v298 = *(_QWORD *)v297;
      if (*(_QWORD *)v297)
      {
        *(_QWORD *)v297 = 0;
        *((_DWORD *)v297 + 2) = 0;
        WTF::fastFree(v298, (void *)j, v168, v169, v170, v171, v172, v173);
      }
      v297 += 16;
      v296 -= 16;
    }
    while (v296);
  }
  if (v175)
    WTF::fastFree((unint64_t)v175, (void *)j, v168, v169, v170, v171, v172, v173);
  if ((_QWORD)v617)
    WTF::fastFree(v617 - 16, (void *)j, v168, v169, v170, v171, v172, v173);
}

uint64_t JSC::B3::storeOpcode(int a1, int a2)
{
  unsigned int v2;

  if (a2 == 1)
    v2 = 69;
  else
    v2 = 70;
  if (!a2)
    v2 = 68;
  if (a1)
    return 70;
  else
    return v2;
}

uint64_t WTF::printInternal(uint64_t a1, int a2)
{
  const char *v3;
  WTF::PrintStream *v4;

  v3 = "Nop";
  switch(a2)
  {
    case 0:
      break;
    case 1:
      v3 = "Identity";
      break;
    case 2:
      v3 = "Opaque";
      break;
    case 3:
      v3 = "Const32";
      break;
    case 4:
      v3 = "Const64";
      break;
    case 5:
      v3 = "ConstDouble";
      break;
    case 6:
      v3 = "ConstFloat";
      break;
    case 7:
      v3 = "Const128";
      break;
    case 8:
      v3 = "BottomTuple";
      break;
    case 9:
      v3 = "Set";
      break;
    case 10:
      v3 = "Get";
      break;
    case 11:
      v3 = "SlotBase";
      break;
    case 12:
      v3 = "ArgumentReg";
      break;
    case 13:
      v3 = "FramePointer";
      break;
    case 14:
      v3 = "Add";
      break;
    case 15:
      v3 = "Sub";
      break;
    case 16:
      v3 = "Mul";
      break;
    case 17:
      v3 = "Div";
      break;
    case 18:
      v3 = "UDiv";
      break;
    case 19:
      v3 = "Mod";
      break;
    case 20:
      v3 = "UMod";
      break;
    case 21:
      v3 = "Neg";
      break;
    case 22:
      v3 = "BitAnd";
      break;
    case 23:
      v3 = "BitOr";
      break;
    case 24:
      v3 = "BitXor";
      break;
    case 25:
      v3 = "Shl";
      break;
    case 26:
      v3 = "SShr";
      break;
    case 27:
      v3 = "ZShr";
      break;
    case 28:
      v3 = "RotR";
      break;
    case 29:
      v3 = "RotL";
      break;
    case 30:
      v3 = "Clz";
      break;
    case 31:
      v3 = "Abs";
      break;
    case 32:
      v3 = "Ceil";
      break;
    case 33:
      v3 = "Floor";
      break;
    case 34:
      v3 = "Sqrt";
      break;
    case 35:
      v3 = "FMax";
      break;
    case 36:
      v3 = "FMin";
      break;
    case 37:
      v3 = "BitwiseCast";
      break;
    case 38:
      v3 = "SExt8";
      break;
    case 39:
      v3 = "SExt16";
      break;
    case 40:
      v3 = "SExt8To64";
      break;
    case 41:
      v3 = "SExt16To64";
      break;
    case 42:
      v3 = "SExt32";
      break;
    case 43:
      v3 = "ZExt32";
      break;
    case 44:
      v3 = "Trunc";
      break;
    case 45:
      v3 = "TruncHigh";
      break;
    case 46:
      v3 = "Stitch";
      break;
    case 47:
      v3 = "IToD";
      break;
    case 48:
      v3 = "IToF";
      break;
    case 49:
      v3 = "FloatToDouble";
      break;
    case 50:
      v3 = "DoubleToFloat";
      break;
    case 51:
      v3 = "Equal";
      break;
    case 52:
      v3 = "NotEqual";
      break;
    case 53:
      v3 = "LessThan";
      break;
    case 54:
      v3 = "GreaterThan";
      break;
    case 55:
      v3 = "LessEqual";
      break;
    case 56:
      v3 = "GreaterEqual";
      break;
    case 57:
      v3 = "Above";
      break;
    case 58:
      v3 = "Below";
      break;
    case 59:
      v3 = "AboveEqual";
      break;
    case 60:
      v3 = "BelowEqual";
      break;
    case 61:
      v3 = "EqualOrUnordered";
      break;
    case 62:
      v3 = "Select";
      break;
    case 63:
      v3 = "Load8Z";
      break;
    case 64:
      v3 = "Load8S";
      break;
    case 65:
      v3 = "Load16Z";
      break;
    case 66:
      v3 = "Load16S";
      break;
    case 67:
      v3 = "Load";
      break;
    case 68:
      v3 = "Store8";
      break;
    case 69:
      v3 = "Store16";
      break;
    case 70:
      v3 = "Store";
      break;
    case 71:
      v3 = "AtomicWeakCAS";
      break;
    case 72:
      v3 = "AtomicStrongCAS";
      break;
    case 73:
      v3 = "AtomicXchgAdd";
      break;
    case 74:
      v3 = "AtomicXchgAnd";
      break;
    case 75:
      v3 = "AtomicXchgOr";
      break;
    case 76:
      v3 = "AtomicXchgSub";
      break;
    case 77:
      v3 = "AtomicXchgXor";
      break;
    case 78:
      v3 = "AtomicXchg";
      break;
    case 79:
      v3 = "Depend";
      break;
    case 80:
      v3 = "WasmAddress";
      break;
    case 81:
      v3 = "Fence";
      break;
    case 82:
      v3 = "CCall";
      break;
    case 83:
      v3 = "Patchpoint";
      break;
    case 84:
      v3 = "Extract";
      break;
    case 85:
      v3 = "CheckAdd";
      break;
    case 86:
      v3 = "CheckSub";
      break;
    case 87:
      v3 = "CheckMul";
      break;
    case 88:
      v3 = "Check";
      break;
    case 89:
      v3 = "WasmBoundsCheck";
      break;
    case 90:
      v3 = "VectorExtractLane";
      break;
    case 91:
      v3 = "VectorReplaceLane";
      break;
    case 92:
      v3 = "VectorDupElement";
      break;
    case 93:
      v3 = "VectorSplat";
      break;
    case 94:
      v3 = "VectorEqual";
      break;
    case 95:
      v3 = "VectorNotEqual";
      break;
    case 96:
      v3 = "VectorLessThan";
      break;
    case 97:
      v3 = "VectorLessThanOrEqual";
      break;
    case 98:
      v3 = "VectorBelow";
      break;
    case 99:
      v3 = "VectorBelowOrEqual";
      break;
    case 100:
      v3 = "VectorGreaterThan";
      break;
    case 101:
      v3 = "VectorGreaterThanOrEqual";
      break;
    case 102:
      v3 = "VectorAbove";
      break;
    case 103:
      v3 = "VectorAboveOrEqual";
      break;
    case 104:
      v3 = "VectorAdd";
      break;
    case 105:
      v3 = "VectorSub";
      break;
    case 106:
      v3 = "VectorAddSat";
      break;
    case 107:
      v3 = "VectorSubSat";
      break;
    case 108:
      v3 = "VectorMul";
      break;
    case 109:
      v3 = "VectorDotProduct";
      break;
    case 110:
      v3 = "VectorDiv";
      break;
    case 111:
      v3 = "VectorMin";
      break;
    case 112:
      v3 = "VectorMax";
      break;
    case 113:
      v3 = "VectorPmin";
      break;
    case 114:
      v3 = "VectorPmax";
      break;
    case 115:
      v3 = "VectorNarrow";
      break;
    case 116:
      v3 = "VectorNot";
      break;
    case 117:
      v3 = "VectorAnd";
      break;
    case 118:
      v3 = "VectorAndnot";
      break;
    case 119:
      v3 = "VectorOr";
      break;
    case 120:
      v3 = "VectorXor";
      break;
    case 121:
      v3 = "VectorShl";
      break;
    case 122:
      v3 = "VectorShr";
      break;
    case 123:
      v3 = "VectorAbs";
      break;
    case 124:
      v3 = "VectorNeg";
      break;
    case 125:
      v3 = "VectorPopcnt";
      break;
    case 126:
      v3 = "VectorCeil";
      break;
    case 127:
      v3 = "VectorFloor";
      break;
    case 128:
      v3 = "VectorTrunc";
      break;
    case 129:
      v3 = "VectorTruncSat";
      break;
    case 130:
      v3 = "VectorConvert";
      break;
    case 131:
      v3 = "VectorConvertLow";
      break;
    case 132:
      v3 = "VectorNearest";
      break;
    case 133:
      v3 = "VectorSqrt";
      break;
    case 134:
      v3 = "VectorExtendLow";
      break;
    case 135:
      v3 = "VectorExtendHigh";
      break;
    case 136:
      v3 = "VectorPromote";
      break;
    case 137:
      v3 = "VectorDemote";
      break;
    case 138:
      v3 = "VectorAnyTrue";
      break;
    case 139:
      v3 = "VectorAllTrue";
      break;
    case 140:
      v3 = "VectorAvgRound";
      break;
    case 141:
      v3 = "VectorBitmask";
      break;
    case 142:
      v3 = "VectorBitwiseSelect";
      break;
    case 143:
      v3 = "VectorExtaddPairwise";
      break;
    case 144:
      v3 = "VectorMulSat";
      break;
    case 145:
      v3 = "VectorSwizzle";
      break;
    case 146:
      v3 = "VectorRelaxedSwizzle";
      break;
    case 147:
      v3 = "VectorRelaxedTruncSat";
      break;
    case 148:
      v3 = "VectorRelaxedMAdd";
      break;
    case 149:
      v3 = "VectorRelaxedNMAdd";
      break;
    case 150:
      v3 = "VectorMulByElement";
      break;
    case 151:
      v3 = "VectorShiftByVector";
      break;
    case 152:
      v3 = "Upsilon";
      break;
    case 153:
      v3 = "Phi";
      break;
    case 154:
      v3 = "Jump";
      break;
    case 155:
      v3 = "Branch";
      break;
    case 156:
      v3 = "Switch";
      break;
    case 157:
      v3 = "EntrySwitch";
      break;
    case 158:
      v3 = "Return";
      break;
    case 159:
      v3 = "Oops";
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FA8CF4);
  }
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (!a2)
  {
    v3 = "Cold";
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    v3 = "Warm";
LABEL_5:
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  result = 337;
  __break(0xC471u);
  return result;
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (!a2)
  {
    v3 = "Early";
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    v3 = "Late";
LABEL_5:
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  result = 351;
  __break(0xC471u);
  return result;
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (!a2)
  {
    v3 = "Signed";
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    v3 = "Unsigned";
LABEL_5:
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  result = 426;
  __break(0xC471u);
  return result;
}

{
  char *v3;
  int v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  float v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  char v12;

  v3 = "Unset";
  v4 = 6;
  switch(a2)
  {
    case 0:
      break;
    case 1:
      v3 = "BadType";
      v4 = 8;
      break;
    case 2:
      v3 = "BadConstantValue";
      goto LABEL_37;
    case 3:
      v3 = "BadIdent";
      goto LABEL_11;
    case 4:
      v3 = "BadExecutable";
      goto LABEL_35;
    case 5:
      v3 = "BadCache";
      goto LABEL_11;
    case 6:
      v3 = "BadConstantCache";
      goto LABEL_37;
    case 7:
      v3 = "BadIndexingType";
      goto LABEL_23;
    case 8:
      v3 = "BadTypeInfoFlags";
      goto LABEL_37;
    case 9:
      v3 = "Overflow";
LABEL_11:
      v4 = 9;
      break;
    case 10:
      v3 = "NegativeZero";
      goto LABEL_17;
    case 11:
      v3 = "NegativeIndex";
      goto LABEL_35;
    case 12:
      v3 = "Int52Overflow";
      goto LABEL_35;
    case 13:
      v3 = "StoreToHole";
      goto LABEL_27;
    case 14:
      v3 = "LoadFromHole";
LABEL_17:
      v4 = 13;
      break;
    case 15:
      v3 = "OutOfBounds";
      goto LABEL_27;
    case 16:
      v3 = "InadequateCoverage";
      goto LABEL_30;
    case 17:
      v3 = "ArgumentsEscaped";
      goto LABEL_37;
    case 18:
      v3 = "ExoticObjectMode";
      goto LABEL_37;
    case 19:
      v3 = "VarargsOverflow";
LABEL_23:
      v4 = 16;
      break;
    case 20:
      v3 = "TDZFailure";
      v4 = 11;
      break;
    case 21:
      v3 = "HoistingFailed";
      goto LABEL_33;
    case 22:
      v3 = "Uncountable";
LABEL_27:
      v4 = 12;
      break;
    case 23:
      v3 = "UncountableInvalidation";
      v4 = 24;
      break;
    case 24:
      v3 = "WatchdogTimerFired";
LABEL_30:
      v4 = 19;
      break;
    case 25:
      v3 = "DebuggerEvent";
      goto LABEL_35;
    case 26:
      v3 = "ExceptionCheck";
LABEL_33:
      v4 = 15;
      break;
    case 27:
      v3 = "GenericUnwind";
LABEL_35:
      v4 = 14;
      break;
    case 28:
      v3 = "BigInt32Overflow";
LABEL_37:
      v4 = 17;
      break;
    case 29:
      v3 = "UnexpectedResizableArrayBufferView";
      v4 = 35;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198179F04);
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  if (v3)
  {
    WTF::StringImpl::utf8ForCharacters(v3, (v4 - 1), (uint64_t)&v10, v7);
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = 0;
    *(_BYTE *)(v8 + 16) = 0;
    v10 = v8;
    v11 = 0;
  }
  WTF::printExpectedCStringHelper(v6, "StringView", &v10);
  if (v11 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v11])(&v12, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

{
  const char *v3;
  WTF::PrintStream *v4;

  v3 = "Untyped";
  switch(a2)
  {
    case 0:
      break;
    case 1:
      v3 = "Int32";
      break;
    case 2:
      v3 = "KnownInt32";
      break;
    case 3:
      v3 = "AnyInt";
      break;
    case 4:
      v3 = "Number";
      break;
    case 5:
      v3 = "RealNumber";
      break;
    case 6:
      v3 = "Boolean";
      break;
    case 7:
      v3 = "KnownBoolean";
      break;
    case 8:
      v3 = "Cell";
      break;
    case 9:
      v3 = "KnownCell";
      break;
    case 10:
      v3 = "CellOrOther";
      break;
    case 11:
      v3 = "Object";
      break;
    case 12:
      v3 = "Array";
      break;
    case 13:
      v3 = "Function";
      break;
    case 14:
      v3 = "FinalObject";
      break;
    case 15:
      v3 = "PromiseObject";
      break;
    case 16:
      v3 = "RegExpObject";
      break;
    case 17:
      v3 = "ProxyObject";
      break;
    case 18:
      v3 = "DerivedArray";
      break;
    case 19:
      v3 = "ObjectOrOther";
      break;
    case 20:
      v3 = "StringIdent";
      break;
    case 21:
      v3 = "String";
      break;
    case 22:
      v3 = "StringOrOther";
      break;
    case 23:
      v3 = "KnownString";
      break;
    case 24:
      v3 = "KnownPrimitive";
      break;
    case 25:
      v3 = "Symbol";
      break;
    case 26:
      v3 = "AnyBigInt";
      break;
    case 27:
      v3 = "HeapBigInt";
      break;
    case 28:
      v3 = "BigInt32";
      break;
    case 29:
      v3 = "DateObject";
      break;
    case 30:
      v3 = "MapObject";
      break;
    case 31:
      v3 = "SetObject";
      break;
    case 32:
      v3 = "MapIteratorObject";
      break;
    case 33:
      v3 = "SetIteratorObject";
      break;
    case 34:
      v3 = "WeakMapObject";
      break;
    case 35:
      v3 = "WeakSetObject";
      break;
    case 36:
      v3 = "DataViewObject";
      break;
    case 37:
      v3 = "StringObject";
      break;
    case 38:
      v3 = "StringOrStringObject";
      break;
    case 39:
      v3 = "NotStringVar";
      break;
    case 40:
      v3 = "NotSymbol";
      break;
    case 41:
      v3 = "NotCell";
      break;
    case 42:
      v3 = "NotCellNorBigInt";
      break;
    case 43:
      v3 = "NotDouble";
      break;
    case 44:
      v3 = "NeitherDoubleNorHeapBigInt";
      break;
    case 45:
      v3 = "NeitherDoubleNorHeapBigIntNorString";
      break;
    case 46:
      v3 = "KnownOther";
      break;
    case 47:
      v3 = "Other";
      break;
    case 48:
      v3 = "Misc";
      break;
    case 49:
      v3 = "DoubleRep";
      break;
    case 50:
      v3 = "DoubleRepReal";
      break;
    case 51:
      v3 = "DoubleRepAnyInt";
      break;
    case 52:
      v3 = "Int52Rep";
      break;
    case 53:
      __break(0xC471u);
      JUMPOUT(0x198557298);
    default:
      __break(0xC471u);
      JUMPOUT(0x198557278);
  }
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  WTF::PrintStream::printf(v4, "%s", v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

{
  char *v3;
  int v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  float v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  char v12;

  switch(a2)
  {
    case 1:
      v3 = "ConservativeScan";
      goto LABEL_7;
    case 2:
      v3 = "ExecutableToCodeBlockEdges";
      v4 = 27;
      break;
    case 3:
      v3 = "ExternalRememberedSet";
      goto LABEL_10;
    case 4:
      v3 = "StrongReferences";
LABEL_7:
      v4 = 17;
      break;
    case 5:
      v3 = "ProtectedValues";
      goto LABEL_16;
    case 6:
      v3 = "MarkedJSValueRefArray";
LABEL_10:
      v4 = 22;
      break;
    case 7:
      v3 = "MarkListSet";
      goto LABEL_25;
    case 8:
      v3 = "VMExceptions";
      goto LABEL_18;
    case 9:
      v3 = "StrongHandles";
      v4 = 14;
      break;
    case 10:
      v3 = "Debugger";
      goto LABEL_20;
    case 11:
      v3 = "JITStubRoutines";
LABEL_16:
      v4 = 16;
      break;
    case 12:
      v3 = "WeakMapSpace";
LABEL_18:
      v4 = 13;
      break;
    case 13:
      v3 = "WeakSets";
LABEL_20:
      v4 = 9;
      break;
    case 14:
      v3 = "Output";
      v4 = 7;
      break;
    case 15:
      v3 = "JITWorkList";
      goto LABEL_25;
    case 16:
      v3 = "CodeBlocks";
      v4 = 11;
      break;
    case 17:
      v3 = "DOMGCOutput";
LABEL_25:
      v4 = 12;
      break;
    default:
      v3 = "None";
      v4 = 5;
      break;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  if (v3)
  {
    WTF::StringImpl::utf8ForCharacters(v3, (v4 - 1), (uint64_t)&v10, v7);
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 8) = 0;
    *(_BYTE *)(v8 + 16) = 0;
    v10 = v8;
    v11 = 0;
  }
  WTF::printExpectedCStringHelper(v6, "StringView", &v10);
  if (v11 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v11])(&v12, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  int v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  float v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v15 = v2;
  v16 = v3;
  v5 = "None";
  v6 = 5;
  switch(a2)
  {
    case 0:
      goto LABEL_8;
    case 1:
      v5 = "Host";
      v6 = 5;
      goto LABEL_8;
    case 2:
      v5 = "LLInt";
      v6 = 6;
      goto LABEL_8;
    case 3:
      v5 = "Baseline";
      v6 = 9;
      goto LABEL_8;
    case 4:
      v5 = "DFG";
      goto LABEL_7;
    case 5:
      v5 = "FTL";
LABEL_7:
      v6 = 4;
LABEL_8:
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      if (v5)
      {
        WTF::StringImpl::utf8ForCharacters(v5, (v6 - 1), (uint64_t)&v12, v9);
      }
      else
      {
        v10 = WTF::fastMalloc((WTF *)0x11);
        *(_DWORD *)v10 = 1;
        *(_QWORD *)(v10 + 8) = 0;
        *(_BYTE *)(v10 + 16) = 0;
        v12 = v10;
        v13 = 0;
      }
      WTF::printExpectedCStringHelper(v8, "StringView", &v12);
      if (v13 != -1)
        ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v13])(&v14, &v12);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    default:
      __break(0xC471u);
      JUMPOUT(0x19872C7B0);
  }
}

{
  const char *v3;
  WTF::PrintStream *v4;

  if (a2 > 135)
  {
    switch(a2)
    {
      case 136:
        v3 = "DataViewMode";
        goto LABEL_18;
      case 138:
        v3 = "GrowableSharedDataViewMode";
        goto LABEL_18;
      case 139:
        v3 = "GrowableSharedAutoLengthDataViewMode";
        goto LABEL_18;
      case 140:
        v3 = "ResizableNonSharedDataViewMode";
        goto LABEL_18;
      case 141:
        v3 = "ResizableNonSharedAutoLengthDataViewMode";
        goto LABEL_18;
      default:
        goto LABEL_19;
    }
  }
  switch(a2)
  {
    case 'X':
      v3 = "WastefulTypedArray";
      goto LABEL_18;
    case 'Y':
      goto LABEL_19;
    case 'Z':
      v3 = "GrowableSharedWastefulTypedArray";
      goto LABEL_18;
    case '[':
      v3 = "GrowableSharedAutoLengthWastefulTypedArray";
      goto LABEL_18;
    case '\\':
      v3 = "ResizableNonSharedWastefulTypedArray";
      goto LABEL_18;
    case ']':
      v3 = "ResizableNonSharedAutoLengthWastefulTypedArray";
      goto LABEL_18;
    default:
      if (a2 == 16)
      {
        v3 = "FastTypedArray";
      }
      else
      {
        if (a2 != 48)
        {
LABEL_19:
          __break(0xC471u);
          JUMPOUT(0x19898A520);
        }
        v3 = "OversizeTypedArray";
      }
LABEL_18:
      v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
      WTF::PrintStream::printf(v4, "%s", v3);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (!a2)
  {
    v3 = "BoundsChecking";
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    v3 = "Signaling";
LABEL_5:
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  result = 45;
  __break(0xC471u);
  return result;
}

{
  const char *v3;
  WTF::PrintStream *v4;
  uint64_t result;

  if (!a2)
  {
    v3 = "Default";
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    v3 = "Shared";
LABEL_5:
    v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v4, "%s", v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  }
  result = 58;
  __break(0xC471u);
  return result;
}

uint64_t *JSC::B3::BasicBlock::replaceLastWithNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(JSC::B3::BasicBlock *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t casual;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  const void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v8)
  {
    v9 = (_BYTE *)(v8 + 8672);
    *(_BYTE *)(v8 + 8672) = 1;
    v10 = *(unsigned int *)(v8 + 8688);
    if ((_DWORD)v10)
    {
      *(_DWORD *)(v8 + 8688) = v10 - *(_DWORD *)(v8 + 8692);
      casual = *(_QWORD *)(v8 + 8680) - v10;
LABEL_6:
      *v9 = 0;
      goto LABEL_7;
    }
    v12 = *(_QWORD *)(v8 + 8712);
    v13 = *(_QWORD *)(v8 + 8696);
    if (v12)
    {
LABEL_5:
      v14 = __clz(v12);
      *(_QWORD *)(v8 + 8712) = v12 & ~(0x8000000000000000 >> v14);
      casual = v13 + 16 * v14;
      goto LABEL_6;
    }
    if (*(_BYTE *)(v8 + 8677) == 6)
    {
      v32 = *(_DWORD *)(v8 + 8708);
      v33 = *(unsigned int *)(v8 + 8704);
      if (v33 < v32)
      {
        *(_QWORD *)&v9[8 * v33 + 56] = 0;
        v34 = (unint64_t *)(v8 + 8 * v33 + 8736);
        v35 = v32 - 1 - v33;
        while (v35)
        {
          v13 += 1024;
          v37 = *v34++;
          v36 = v37;
          LODWORD(v33) = v33 + 1;
          --v35;
          if (v37)
          {
            v12 = __rbit64(v36);
            *(_DWORD *)(v8 + 8704) = v33;
            *(_QWORD *)(v8 + 8696) = v13;
            goto LABEL_5;
          }
        }
        *(_DWORD *)(v8 + 8704) = v32;
      }
    }
    *v9 = 0;
  }
  casual = bmalloc_allocate_casual(48, 1);
LABEL_7:
  *(_QWORD *)casual = off_1E357F5F0;
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 155;
  *(_DWORD *)(casual + 16) = 0;
  *(_BYTE *)(casual + 20) = 1;
  *(_QWORD *)(casual + 24) = a3;
  *(_QWORD *)(casual + 32) = 0;
  result = JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)casual, 1, a4);
  v16 = *(unsigned int *)(a2 + 92);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a2 + 80) + 8 * v16 - 8);
    *(_DWORD *)(a2 + 92) = v16 - 1;
    v18 = *(_QWORD *)(a2 + 64);
    goto LABEL_11;
  }
  v17 = *(unsigned int *)(a2 + 76);
  if ((_DWORD)v17 != *(_DWORD *)(a2 + 72))
  {
    v18 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(v18 + 8 * v17) = 0;
    *(_DWORD *)(a2 + 76) = v17 + 1;
LABEL_11:
    *(_DWORD *)(casual + 8) = v17;
    *(_QWORD *)(v18 + 8 * v17) = casual;
    return (uint64_t *)JSC::B3::BasicBlock::replaceLast(a1, (JSC::B3::Procedure *)a2, (JSC::B3::Value *)casual);
  }
  v19 = v17 + (v17 >> 2);
  if (v19 >= 0x10)
    v20 = v19 + 1;
  else
    v20 = 16;
  if (v20 <= v17 + 1)
    v21 = v17 + 1;
  else
    v21 = v20;
  if (!(v21 >> 29))
  {
    v22 = *(const void **)(a2 + 64);
    v23 = (void *)WTF::fastMalloc((WTF *)(8 * v21));
    *(_DWORD *)(a2 + 72) = v21;
    *(_QWORD *)(a2 + 64) = v23;
    memcpy(v23, v22, 8 * v17);
    if (v22)
    {
      if (*(const void **)(a2 + 64) == v22)
      {
        *(_QWORD *)(a2 + 64) = 0;
        *(_DWORD *)(a2 + 72) = 0;
      }
      WTF::fastFree((unint64_t)v22, v24, v25, v26, v27, v28, v29, v30);
    }
    v31 = *(unsigned int *)(a2 + 76);
    v18 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(v18 + 8 * v31) = 0;
    *(_DWORD *)(a2 + 76) = v31 + 1;
    goto LABEL_11;
  }
  __break(0xC471u);
  return result;
}

JSC::B3::Value *JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(JSC::B3::BasicBlock *a1, JSC::B3::Value *a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  JSC::B3::Value *v8;

  v8 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(a3, a4, a5, a6);
  JSC::B3::Procedure::addValueImpl(a2, v8);
  JSC::B3::BasicBlock::append(a1, v8);
  return v8;
}

_QWORD *JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Type,JSC::B3::Origin>(_QWORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  const void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;

  v11 = result;
  v12 = *result;
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v13)
  {
    v14 = (_BYTE *)(v13 + 8672);
    *(_BYTE *)(v13 + 8672) = 1;
    v15 = *(unsigned int *)(v13 + 8688);
    if ((_DWORD)v15)
    {
      *(_DWORD *)(v13 + 8688) = v15 - *(_DWORD *)(v13 + 8692);
      v16 = (_QWORD *)(*(_QWORD *)(v13 + 8680) - v15);
LABEL_6:
      *v14 = 0;
      goto LABEL_7;
    }
    v17 = *(_QWORD *)(v13 + 8712);
    v18 = *(_QWORD *)(v13 + 8696);
    if (v17)
    {
LABEL_5:
      v19 = __clz(v17);
      *(_QWORD *)(v13 + 8712) = v17 & ~(0x8000000000000000 >> v19);
      v16 = (_QWORD *)(v18 + 16 * v19);
      goto LABEL_6;
    }
    if (*(_BYTE *)(v13 + 8677) == 6)
    {
      v36 = *(_DWORD *)(v13 + 8708);
      v37 = *(unsigned int *)(v13 + 8704);
      if (v37 < v36)
      {
        *(_QWORD *)&v14[8 * v37 + 56] = 0;
        v38 = (unint64_t *)(v13 + 8 * v37 + 8736);
        v39 = v36 - 1 - v37;
        while (v39)
        {
          v18 += 1024;
          v41 = *v38++;
          v40 = v41;
          LODWORD(v37) = v37 + 1;
          --v39;
          if (v41)
          {
            v17 = __rbit64(v40);
            *(_DWORD *)(v13 + 8704) = v37;
            *(_QWORD *)(v13 + 8696) = v18;
            goto LABEL_5;
          }
        }
        *(_DWORD *)(v13 + 8704) = v36;
      }
    }
    *v14 = 0;
  }
  result = (_QWORD *)bmalloc_allocate_casual(48, 1);
  v16 = result;
LABEL_7:
  *v16 = off_1E357F5F0;
  *((_DWORD *)v16 + 2) = -1;
  *((_WORD *)v16 + 6) = 153;
  *((_DWORD *)v16 + 4) = a3;
  *((_BYTE *)v16 + 20) = 0;
  v16[3] = a4;
  v16[4] = 0;
  v20 = *(unsigned int *)(v12 + 92);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v12 + 80) + 8 * v20 - 8);
    *(_DWORD *)(v12 + 92) = v20 - 1;
    v22 = *(_QWORD *)(v12 + 64);
  }
  else
  {
    v21 = *(unsigned int *)(v12 + 76);
    if ((_DWORD)v21 == *(_DWORD *)(v12 + 72))
    {
      v27 = v21 + (v21 >> 2);
      if (v27 >= 0x10)
        v28 = v27 + 1;
      else
        v28 = 16;
      if (v28 <= v21 + 1)
        v29 = v21 + 1;
      else
        v29 = v28;
      if (v29 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v30 = *(const void **)(v12 + 64);
      v31 = (void *)WTF::fastMalloc((WTF *)(8 * v29));
      *(_DWORD *)(v12 + 72) = v29;
      *(_QWORD *)(v12 + 64) = v31;
      memcpy(v31, v30, 8 * v21);
      if (v30)
      {
        if (*(const void **)(v12 + 64) == v30)
        {
          *(_QWORD *)(v12 + 64) = 0;
          *(_DWORD *)(v12 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v30, v32, v33, a4, a5, a6, a7, a8);
      }
      v34 = *(unsigned int *)(v12 + 76);
      v22 = *(_QWORD *)(v12 + 64);
      *(_QWORD *)(v22 + 8 * v34) = 0;
      *(_DWORD *)(v12 + 76) = v34 + 1;
    }
    else
    {
      v22 = *(_QWORD *)(v12 + 64);
      *(_QWORD *)(v22 + 8 * v21) = 0;
      *(_DWORD *)(v12 + 76) = v21 + 1;
    }
  }
  *((_DWORD *)v16 + 2) = v21;
  *(_QWORD *)(v22 + 8 * v21) = v16;
  *(_QWORD *)&v42 = a2;
  *((_QWORD *)&v42 + 1) = v16;
  v23 = v11 + 1;
  v24 = *((unsigned int *)v11 + 5);
  if ((_DWORD)v24 == *((_DWORD *)v11 + 4))
  {
    v35 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v23, (void *)(v24 + 1), (unint64_t)&v42, a4, a5, a6, a7, a8);
    v24 = *((unsigned int *)v11 + 5);
    v25 = v11[1];
    v26 = *v35;
  }
  else
  {
    v25 = *v23;
    v26 = v42;
  }
  *(_OWORD *)(v25 + 16 * v24) = v26;
  ++*((_DWORD *)v11 + 5);
  return v16;
}

JSC::B3::Value *JSC::B3::InsertionSet::insert<JSC::B3::ConstPtrValue,JSC::B3::Origin,double (*)(double,double)>(JSC::B3::Value **a1, uint64_t a2, uint64_t a3)
{
  JSC::B3::Value *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = JSC::B3::Procedure::add<JSC::B3::ConstPtrValue,JSC::B3::Origin,double (*)(double,double)>(*a1, a3);
  return JSC::B3::InsertionSet::insertValue((JSC::B3::InsertionSet *)a1, a2, v5, v6, v7, v8, v9, v10);
}

JSC::B3::Value *JSC::B3::InsertionSet::insert<JSC::B3::CCallValue,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(JSC::B3::InsertionSet *a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  JSC::B3::Value *v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;

  v9 = *(JSC::B3::Value **)a1;
  v17 = *a4;
  v18 = *((_QWORD *)a4 + 2);
  v10 = JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(v9, a3, (uint64_t)&v17, a5, a6, a7);
  return JSC::B3::InsertionSet::insertValue(a1, a2, v10, v11, v12, v13, v14, v15);
}

uint64_t JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  __int16 v10;
  uint64_t Space;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;

  v9 = *a1;
  v10 = a3;
  Space = JSC::B3::Value::allocateSpace(a3, 40);
  result = JSC::B3::Value::Value<JSC::B3::Value*>(Space, v10, a4, a5);
  v18 = *(unsigned int *)(v9 + 92);
  if ((_DWORD)v18)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(v9 + 80) + 8 * v18 - 8);
    *(_DWORD *)(v9 + 92) = v18 - 1;
    v20 = *(_QWORD *)(v9 + 64);
  }
  else
  {
    v19 = *(unsigned int *)(v9 + 76);
    if ((_DWORD)v19 == *(_DWORD *)(v9 + 72))
    {
      v25 = v19 + (v19 >> 2);
      if (v25 >= 0x10)
        v26 = v25 + 1;
      else
        v26 = 16;
      if (v26 <= v19 + 1)
        v27 = v19 + 1;
      else
        v27 = v26;
      if (v27 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v28 = *(const void **)(v9 + 64);
      v29 = (void *)WTF::fastMalloc((WTF *)(8 * v27));
      *(_DWORD *)(v9 + 72) = v27;
      *(_QWORD *)(v9 + 64) = v29;
      memcpy(v29, v28, 8 * v19);
      if (v28)
      {
        if (*(const void **)(v9 + 64) == v28)
        {
          *(_QWORD *)(v9 + 64) = 0;
          *(_DWORD *)(v9 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v28, v30, v31, v13, v14, v15, v16, v17);
      }
      v32 = *(unsigned int *)(v9 + 76);
      v20 = *(_QWORD *)(v9 + 64);
      *(_QWORD *)(v20 + 8 * v32) = 0;
      *(_DWORD *)(v9 + 76) = v32 + 1;
    }
    else
    {
      v20 = *(_QWORD *)(v9 + 64);
      *(_QWORD *)(v20 + 8 * v19) = 0;
      *(_DWORD *)(v9 + 76) = v19 + 1;
    }
  }
  *(_DWORD *)(Space + 8) = v19;
  *(_QWORD *)(v20 + 8 * v19) = Space;
  *(_QWORD *)&v34 = a2;
  *((_QWORD *)&v34 + 1) = Space;
  v21 = a1 + 1;
  v22 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v22 == *((_DWORD *)a1 + 4))
  {
    v33 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, (void *)(v22 + 1), (unint64_t)&v34, v13, v14, v15, v16, v17);
    v22 = *((unsigned int *)a1 + 5);
    v23 = a1[1];
    v24 = *v33;
  }
  else
  {
    v23 = *v21;
    v24 = v34;
  }
  *(_OWORD *)(v23 + 16 * v22) = v24;
  ++*((_DWORD *)a1 + 5);
  return Space;
}

JSC::B3::Value *JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(JSC::B3::InsertionSet *a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  JSC::B3::Value *v8;
  JSC::B3::Value *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(JSC::B3::Value **)a1;
  v9 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(a3, a4, a5, a6);
  JSC::B3::Procedure::addValueImpl(v8, v9);
  return JSC::B3::InsertionSet::insertValue(a1, a2, v9, v10, v11, v12, v13, v14);
}

uint64_t JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;

  v8 = *a1;
  result = JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(a3, a4, a5, a6);
  v15 = result;
  v16 = *(unsigned int *)(v8 + 92);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 8 * v16 - 8);
    *(_DWORD *)(v8 + 92) = v16 - 1;
    v18 = *(_QWORD *)(v8 + 64);
  }
  else
  {
    v17 = *(unsigned int *)(v8 + 76);
    if ((_DWORD)v17 == *(_DWORD *)(v8 + 72))
    {
      v23 = v17 + (v17 >> 2);
      if (v23 >= 0x10)
        v24 = v23 + 1;
      else
        v24 = 16;
      if (v24 <= v17 + 1)
        v25 = v17 + 1;
      else
        v25 = v24;
      if (v25 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v26 = *(const void **)(v8 + 64);
      v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
      *(_DWORD *)(v8 + 72) = v25;
      *(_QWORD *)(v8 + 64) = v27;
      memcpy(v27, v26, 8 * v17);
      if (v26)
      {
        if (*(const void **)(v8 + 64) == v26)
        {
          *(_QWORD *)(v8 + 64) = 0;
          *(_DWORD *)(v8 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v26, v28, v29, v10, v11, v12, v13, v14);
      }
      v30 = *(unsigned int *)(v8 + 76);
      v18 = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v18 + 8 * v30) = 0;
      *(_DWORD *)(v8 + 76) = v30 + 1;
    }
    else
    {
      v18 = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v18 + 8 * v17) = 0;
      *(_DWORD *)(v8 + 76) = v17 + 1;
    }
  }
  *(_DWORD *)(v15 + 8) = v17;
  *(_QWORD *)(v18 + 8 * v17) = v15;
  *(_QWORD *)&v32 = a2;
  *((_QWORD *)&v32 + 1) = v15;
  v19 = a1 + 1;
  v20 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v20 == *((_DWORD *)a1 + 4))
  {
    v31 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, (void *)(v20 + 1), (unint64_t)&v32, v10, v11, v12, v13, v14);
    v20 = *((unsigned int *)a1 + 5);
    v21 = a1[1];
    v22 = *v31;
  }
  else
  {
    v21 = *v19;
    v22 = v32;
  }
  *(_OWORD *)(v21 + 16 * v20) = v22;
  ++*((_DWORD *)a1 + 5);
  return v15;
}

void JSC::B3::`anonymous namespace'::LowerMacros::recursivelyBuildSwitch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, unsigned int a7, uint64_t a8)
{
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  JSC::B3::Value *v24;
  uint64_t appended;
  JSC::B3::Value *v26;
  _QWORD *v27;
  uint64_t v28;
  JSC::B3::Value *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  JSC::B3::Value *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char **v58;
  uint64_t v59;
  uint64_t *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  JSC::B3::Value *v71;
  uint64_t v72;
  JSC::B3::Value *v73;
  char **v74;
  uint64_t v75;
  char **v76;
  JSC::B3::Value *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  char *v98;
  char *v99;
  uint64_t v100;
  JSC::B3::Value *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  JSC::B3::Value *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  JSC::B3::Value *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __int128 *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  __int128 *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int v144;
  char v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  JSC::B3::Value *v156;
  uint64_t v157;
  JSC::B3::Value *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  JSC::B3::Procedure *v166;
  unsigned int v167;
  char v168;
  uint64_t v169;
  char v170;
  unsigned int v171;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  JSC::B3::BasicBlock *v180;
  unint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  unint64_t v187;
  uint64_t v188;

  v167 = a7 - 1;
  v182 = a1 + 8;
  v15 = JSC::B3::Value::child(*(JSC::B3::Value **)(a1 + 408), 0);
  v184 = *(_QWORD *)v15;
  v16 = *(_DWORD *)(*(_QWORD *)v15 + 16);
  v17 = a7 - a5;
  v185 = a2;
  if (v17 > 6)
  {
    v169 = a4;
    v67 = *(_DWORD *)(a2 + 12);
    if (v67 <= a5)
    {
LABEL_140:
      __break(0xC471u);
      JUMPOUT(0x197FAA630);
    }
    if (v67 <= v167)
    {
LABEL_141:
      __break(0xC471u);
      JUMPOUT(0x197FAA638);
    }
    v68 = *(_QWORD *)(*(_QWORD *)a2 + 24 * a5);
    v69 = *(_QWORD *)(*(_QWORD *)a2 + 24 * v167) - v68 + 1;
    if (v69 / v17 < 4)
    {
      v178 = *(_QWORD *)(*(_QWORD *)a2 + 24 * v167) - v68;
      goto LABEL_70;
    }
  }
  else if (v17 < 4)
  {
    if (!a6)
    {
      if (!a5)
        goto LABEL_5;
      v94 = *(_DWORD *)(a2 + 12);
      if (v94 <= a5 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197FAA660);
      }
      if (v94 <= a5)
      {
        __break(0xC471u);
        JUMPOUT(0x197FAA668);
      }
      if (*(_QWORD *)(*(_QWORD *)a2 + 24 * (a5 - 1)) != *(_QWORD *)(*(_QWORD *)a2 + 24 * a5) - 1)
        goto LABEL_5;
      goto LABEL_54;
    }
LABEL_53:
    v94 = *(_DWORD *)(a2 + 12);
LABEL_54:
    if (v94 > a7)
    {
      if (v94 <= v167)
      {
        __break(0xC471u);
        JUMPOUT(0x197FAA640);
      }
      if (*(_QWORD *)(*(_QWORD *)a2 + 24 * v167) == *(_QWORD *)(*(_QWORD *)a2 + 24 * a7) - 1)
      {
        if ((_DWORD)v17 != 1)
        {
          v95 = 0;
          LODWORD(v96) = v94 - a5;
          if (v94 >= a5)
            v96 = v96;
          else
            v96 = 0;
          do
          {
            if (v96 == v95)
            {
              __break(0xC471u);
              JUMPOUT(0x197FAA648);
            }
            v97 = a5 + v95 + 1;
            if (v94 <= v97)
            {
              __break(0xC471u);
              JUMPOUT(0x197FAA650);
            }
            v18 = *(_QWORD *)(*(_QWORD *)a2 + 24 * (a5 + v95)) + 1 == *(_QWORD *)(*(_QWORD *)a2
                                                                                                  + 24 * v97);
            if (*(_QWORD *)(*(_QWORD *)a2 + 24 * (a5 + v95)) + 1 != *(_QWORD *)(*(_QWORD *)a2
                                                                                                 + 24 * v97))
              goto LABEL_6;
            ++v95;
          }
          while ((_DWORD)v17 - 1 != v95);
          LODWORD(v17) = v17 - 1;
          goto LABEL_6;
        }
        v170 = 1;
LABEL_24:
        v49 = *(JSC::B3::Value **)a1;
        v50 = *(_QWORD *)(a1 + 416);
        v51 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)v51 = off_1E357F5F0;
        *(_DWORD *)(v51 + 8) = -1;
        *(_WORD *)(v51 + 12) = 154;
        *(_DWORD *)(v51 + 16) = 0;
        *(_BYTE *)(v51 + 20) = 0;
        *(_QWORD *)(v51 + 24) = v50;
        *(_QWORD *)(v51 + 32) = 0;
        JSC::B3::Procedure::addValueImpl(v49, (JSC::B3::Value *)v51);
        *(_QWORD *)&v186 = v51;
        v58 = (char **)(a8 + 8);
        v59 = *(unsigned int *)(a8 + 20);
        if ((_DWORD)v59 == *(_DWORD *)(a8 + 16))
        {
          v66 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v58, v59 + 1, (unint64_t)&v186);
          v59 = *(unsigned int *)(a8 + 20);
          *(_QWORD *)(*(_QWORD *)(a8 + 8) + 8 * v59) = *(_QWORD *)v66;
          v51 = v186;
        }
        else
        {
          *(_QWORD *)&(*v58)[8 * v59] = v51;
        }
        *(_DWORD *)(a8 + 20) = v59 + 1;
        *(_QWORD *)(v51 + 32) = a8;
        if ((v170 & 1) != 0)
        {
          if (*(_DWORD *)(a2 + 12) <= v167)
          {
            __break(0xC471u);
            JUMPOUT(0x197FAA658);
          }
          JSC::B3::BasicBlock::setSuccessors(a8, *(_QWORD *)(*(_QWORD *)a2 + 24 * v167 + 8), *(_QWORD *)(*(_QWORD *)a2 + 24 * v167 + 16), v53, v54, v55, v56, v57);
          return;
        }
        v60 = (uint64_t *)(a8 + 56);
        if (*(_DWORD *)(a8 + 68))
        {
          v62 = *v60;
        }
        else
        {
          if (*(_DWORD *)(a8 + 64))
          {
            v61 = 0;
            v62 = *v60;
            goto LABEL_30;
          }
          WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v60, (void *)1, v52, v53, v54, v55, v56, v57);
          v61 = *(_DWORD *)(a8 + 68);
          v62 = *(_QWORD *)(a8 + 56);
          if (v61 != 1)
          {
LABEL_30:
            v63 = 16 * v61;
            do
            {
              v64 = v63;
              v65 = v62 + v63;
              *(_QWORD *)v65 = 0;
              *(_BYTE *)(v65 + 8) = 0;
              v63 = v64 + 16;
            }
            while (v64);
          }
        }
        *(_DWORD *)(a8 + 68) = 1;
        *(_QWORD *)v62 = a3;
        *(_BYTE *)(v62 + 8) = a4;
        return;
      }
    }
LABEL_5:
    v18 = 0;
LABEL_6:
    v170 = v18;
    if (!(_DWORD)v17)
      goto LABEL_24;
    v168 = a4;
    v19 = 0;
    v179 = v16;
    v173 = v17;
    v175 = a5;
    while (1)
    {
      v20 = a8;
      v21 = JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert(v182, **(_DWORD **)(a1 + 392) + 1, *(double *)(*(_QWORD *)(a1 + 392) + 104));
      v22 = v19 + v175;
      if (v19 + v175 >= (unint64_t)*(unsigned int *)(a2 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x197FAA610);
      }
      a8 = v21;
      v23 = *(_QWORD *)(a1 + 416);
      v24 = *(JSC::B3::Value **)a1;
      appended = JSC::B3::BasicBlock::appendIntConstant(v20, *(JSC::B3::Value **)a1, v23, v179, *(_QWORD *)(*(_QWORD *)a2 + 24 * v22));
      v26 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(51, v23, v184, appended);
      JSC::B3::Procedure::addValueImpl(v24, v26);
      *(_QWORD *)&v186 = v26;
      v27 = (_QWORD *)(v20 + 8);
      v28 = *(unsigned int *)(v20 + 20);
      if ((_DWORD)v28 == *(_DWORD *)(v20 + 16))
      {
        v47 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v20 + 8), v28 + 1, (unint64_t)&v186);
        v28 = *(unsigned int *)(v20 + 20);
        *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v28) = *(_QWORD *)v47;
        v29 = (JSC::B3::Value *)v186;
      }
      else
      {
        *(_QWORD *)(*v27 + 8 * v28) = v26;
        v29 = v26;
      }
      *(_DWORD *)(v20 + 20) = v28 + 1;
      *((_QWORD *)v29 + 4) = v20;
      v30 = WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v30 = off_1E357F5F0;
      *(_DWORD *)(v30 + 8) = -1;
      *(_WORD *)(v30 + 12) = 155;
      *(_DWORD *)(v30 + 16) = 0;
      *(_BYTE *)(v30 + 20) = 1;
      *(_QWORD *)(v30 + 24) = v23;
      *(_QWORD *)(v30 + 32) = 0;
      JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v30, 1, (uint64_t)v26);
      JSC::B3::Procedure::addValueImpl(v24, (JSC::B3::Value *)v30);
      *(_QWORD *)&v186 = v30;
      v37 = *(unsigned int *)(v20 + 20);
      if ((_DWORD)v37 == *(_DWORD *)(v20 + 16))
      {
        v48 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(v20 + 8), v37 + 1, (unint64_t)&v186);
        v37 = *(unsigned int *)(v20 + 20);
        *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8 * v37) = *(_QWORD *)v48;
        v30 = v186;
      }
      else
      {
        *(_QWORD *)(*v27 + 8 * v37) = v30;
      }
      *(_DWORD *)(v20 + 20) = v37 + 1;
      *(_QWORD *)(v30 + 32) = v20;
      a2 = v185;
      if (v22 >= *(unsigned int *)(v185 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x197FAA618);
      }
      v38 = *(_QWORD *)v185 + 24 * v22;
      v40 = *(_QWORD *)(v38 + 8);
      v39 = *(_QWORD *)(v38 + 16);
      v41 = (uint64_t *)(v20 + 56);
      v42 = *(unsigned int *)(v20 + 68);
      if (v42 >= 2)
      {
        v43 = *v41;
      }
      else
      {
        if (*(_DWORD *)(v20 + 64) >= 2u)
        {
          v43 = *v41;
LABEL_17:
          v44 = 16 * v42;
          do
          {
            v45 = v43 + v44;
            *(_QWORD *)v45 = 0;
            *(_BYTE *)(v45 + 8) = 0;
            v44 += 16;
          }
          while (v44 != 32);
          goto LABEL_19;
        }
        WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, (void *)2, v31, v32, v33, v34, v35, v36);
        v42 = *(unsigned int *)(v20 + 68);
        v43 = *(_QWORD *)(v20 + 56);
        if ((_DWORD)v42 != 2)
          goto LABEL_17;
      }
LABEL_19:
      *(_DWORD *)(v20 + 68) = 2;
      *(_QWORD *)v43 = v40;
      *(_BYTE *)(v43 + 8) = v39;
      v46 = *(_QWORD *)(v20 + 56);
      *(_QWORD *)(v46 + 16) = a8;
      *(_BYTE *)(v46 + 24) = 0;
      if (++v19 == v173)
      {
        LOBYTE(a4) = v168;
        goto LABEL_24;
      }
    }
  }
  v169 = a4;
  v176 = JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert(v182, **(_DWORD **)(a1 + 392) + 1, *(double *)(*(_QWORD *)(a1 + 392) + 104));
  v180 = (JSC::B3::BasicBlock *)JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert(v182, **(_DWORD **)(a1 + 392) + 1, *(double *)(*(_QWORD *)(a1 + 392) + 104));
  if (*(_DWORD *)(a2 + 12) <= (a7 + a5) >> 1)
  {
LABEL_139:
    __break(0xC471u);
    JUMPOUT(0x197FAA628);
  }
  v70 = *(_QWORD *)(a1 + 416);
  v71 = *(JSC::B3::Value **)a1;
  v72 = JSC::B3::BasicBlock::appendIntConstant(a8, *(JSC::B3::Value **)a1, v70, v16, *(_QWORD *)(*(_QWORD *)a2 + 24 * ((a7 + a5) >> 1)));
  v73 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, v70, v184, v72);
  JSC::B3::Procedure::addValueImpl(v71, v73);
  *(_QWORD *)&v186 = v73;
  v74 = (char **)(a8 + 8);
  v75 = *(unsigned int *)(a8 + 20);
  v76 = (char **)(a8 + 8);
  if ((_DWORD)v75 == *(_DWORD *)(a8 + 16))
  {
    v98 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v74, v75 + 1, (unint64_t)&v186);
    v75 = *(unsigned int *)(a8 + 20);
    *(_QWORD *)(*(_QWORD *)(a8 + 8) + 8 * v75) = *(_QWORD *)v98;
    v77 = (JSC::B3::Value *)v186;
  }
  else
  {
    *(_QWORD *)&(*v74)[8 * v75] = v73;
    v77 = v73;
  }
  *(_DWORD *)(a8 + 20) = v75 + 1;
  *((_QWORD *)v77 + 4) = a8;
  v78 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v78 = off_1E357F5F0;
  *(_DWORD *)(v78 + 8) = -1;
  *(_WORD *)(v78 + 12) = 155;
  *(_DWORD *)(v78 + 16) = 0;
  *(_BYTE *)(v78 + 20) = 1;
  *(_QWORD *)(v78 + 24) = v70;
  *(_QWORD *)(v78 + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v78, 1, (uint64_t)v73);
  JSC::B3::Procedure::addValueImpl(v71, (JSC::B3::Value *)v78);
  *(_QWORD *)&v186 = v78;
  v84 = *(unsigned int *)(a8 + 20);
  if ((_DWORD)v84 == *(_DWORD *)(a8 + 16))
  {
    v99 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v76, v84 + 1, (unint64_t)&v186);
    v84 = *(unsigned int *)(a8 + 20);
    *(_QWORD *)(*(_QWORD *)(a8 + 8) + 8 * v84) = *(_QWORD *)v99;
    v78 = v186;
  }
  else
  {
    *(_QWORD *)&(*v76)[8 * v84] = v78;
  }
  *(_DWORD *)(a8 + 20) = v84 + 1;
  *(_QWORD *)(v78 + 32) = a8;
  v85 = (uint64_t *)(a8 + 56);
  v86 = *(_DWORD *)(a8 + 68);
  if (v86 >= 2)
  {
    v87 = *v85;
  }
  else
  {
    if (*(_DWORD *)(a8 + 64) >= 2u)
    {
      v87 = *v85;
      goto LABEL_47;
    }
    WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, (void *)2, v79, v169, v80, v81, v82, v83);
    v86 = *(_DWORD *)(a8 + 68);
    v87 = *(_QWORD *)(a8 + 56);
    if (v86 != 2)
    {
LABEL_47:
      v88 = 16 * v86;
      do
      {
        v89 = v87 + v88;
        *(_QWORD *)v89 = 0;
        *(_BYTE *)(v89 + 8) = 0;
        v88 += 16;
      }
      while (v88 != 32);
    }
  }
  *(_DWORD *)(a8 + 68) = 2;
  *(_QWORD *)v87 = v176;
  *(_BYTE *)(v87 + 8) = 0;
  v90 = *(_QWORD *)(a8 + 56);
  *(_QWORD *)(v90 + 16) = v180;
  *(_BYTE *)(v90 + 24) = 0;
  v91 = (a7 + a5) >> 1;
  while (1)
  {
    v92 = JSC::B3::Value::child(*(JSC::B3::Value **)(a1 + 408), 0);
    v184 = *(_QWORD *)v92;
    v93 = *(_DWORD *)(*(_QWORD *)v92 + 16);
    v17 = a7 - v91;
    if (v17 >= 7)
      break;
    if (v17 < 4)
    {
      v16 = *(_DWORD *)(v184 + 16);
      a8 = (uint64_t)v180;
      a5 = v91;
      LOBYTE(a4) = v169;
      a2 = v185;
      goto LABEL_53;
    }
LABEL_107:
    v177 = JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert(v182, **(_DWORD **)(a1 + 392) + 1, *(double *)(*(_QWORD *)(a1 + 392) + 104));
    v174 = JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert(v182, **(_DWORD **)(a1 + 392) + 1, *(double *)(*(_QWORD *)(a1 + 392) + 104));
    if (*(_DWORD *)(v185 + 12) <= (v91 + a7) >> 1)
      goto LABEL_139;
    v171 = (v91 + a7) >> 1;
    v155 = *(_QWORD *)(a1 + 416);
    v156 = *(JSC::B3::Value **)a1;
    v166 = *(JSC::B3::Procedure **)a1;
    v157 = JSC::B3::BasicBlock::appendIntConstant((uint64_t)v180, *(JSC::B3::Value **)a1, v155, v93, *(_QWORD *)(*(_QWORD *)v185 + 24 * v171));
    v158 = (JSC::B3::Value *)JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(53, v155, v184, v157);
    JSC::B3::Procedure::addValueImpl(v156, v158);
    JSC::B3::BasicBlock::append(v180, v158);
    v159 = WTF::fastMalloc((WTF *)0x30);
    *(_QWORD *)v159 = off_1E357F5F0;
    *(_DWORD *)(v159 + 8) = -1;
    *(_WORD *)(v159 + 12) = 155;
    *(_DWORD *)(v159 + 16) = 0;
    *(_BYTE *)(v159 + 20) = 1;
    *(_QWORD *)(v159 + 24) = v155;
    *(_QWORD *)(v159 + 32) = 0;
    JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*>((uint64_t *)v159, 1, (uint64_t)v158);
    JSC::B3::Procedure::addValueImpl(v166, (JSC::B3::Value *)v159);
    JSC::B3::BasicBlock::append(v180, (JSC::B3::Value *)v159);
    JSC::B3::BasicBlock::setSuccessors((uint64_t)v180, v177, 0, v174, 0, v160, v161, v162);
    v91 = v171;
    v180 = (JSC::B3::BasicBlock *)v174;
  }
  v153 = *(_DWORD *)(v185 + 12);
  if (v153 <= v91)
    goto LABEL_140;
  if (v153 <= v167)
    goto LABEL_141;
  v68 = *(_QWORD *)(*(_QWORD *)v185 + 24 * v91);
  v154 = *(_QWORD *)(*(_QWORD *)v185 + 24 * v167) - v68;
  if ((v154 + 1) / v17 > 3)
    goto LABEL_107;
  v178 = *(_QWORD *)(*(_QWORD *)v185 + 24 * v167) - v68;
  a5 = v91;
  a8 = (uint64_t)v180;
  v16 = *(_DWORD *)(*(_QWORD *)v92 + 16);
  v69 = v154 + 1;
LABEL_70:
  v100 = JSC::B3::GenericBlockInsertionSet<JSC::B3::BasicBlock>::insert(v182, **(_DWORD **)(a1 + 392) + 1, *(double *)(*(_QWORD *)(a1 + 392) + 104));
  v101 = *(JSC::B3::Value **)a1;
  v102 = *(_QWORD *)(a1 + 416);
  v183 = v16;
  v103 = JSC::B3::BasicBlock::appendIntConstant(a8, *(JSC::B3::Value **)a1, v102, v16, v68);
  v104 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(a8, (uint64_t)v101, 15, v102, v184, v103);
  v105 = *(JSC::B3::Value **)a1;
  v106 = *(_QWORD *)(a1 + 416);
  v107 = JSC::B3::BasicBlock::appendIntConstant(a8, *(JSC::B3::Value **)a1, v106, v183, v178);
  v108 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(a8, (uint64_t)v105, 57, v106, v104, v107);
  JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(a8, v105, 155, v106, v108);
  v109 = a8;
  v110 = (JSC::B3::Value *)v104;
  JSC::B3::BasicBlock::setSuccessors(v109, a3, v169, v100, 0, v111, v112, v113);
  v181 = v69;
  if (*(_DWORD *)(v104 + 16) == 1)
    v110 = JSC::B3::BasicBlock::appendNew<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*>(v100, *(JSC::B3::Value **)a1, 43, *(_QWORD *)(a1 + 416), v104);
  v114 = JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>(v100, *(JSC::B3::Value **)a1, 0, *(_QWORD *)(a1 + 416));
  *(_QWORD *)(v114 + 120) = 0;
  *(_QWORD *)(v114 + 128) = 0;
  *(_QWORD *)(v114 + 112) = 0;
  *(_BYTE *)(v114 + 112) = 1;
  v115 = JSC::B3::StackmapValue::appendSomeRegister((JSC::B3::StackmapValue *)v114, v110);
  *(_BYTE *)(v114 + 168) = 2;
  v116 = JSC::RegisterSetBuilder::macroClobberedGPRs((JSC::RegisterSetBuilder *)v115);
  v124 = *(_QWORD *)(v114 + 72) | v123;
  *(_QWORD *)(v114 + 64) |= v116;
  *(_QWORD *)(v114 + 72) = v124;
  v125 = *(_QWORD *)(v114 + 88) | v123;
  *(_QWORD *)(v114 + 80) |= v116;
  *(_QWORD *)(v114 + 88) = v125;
  v188 = 0x8000000000000000;
  v126 = a7 - a5;
  if (a7 <= a5)
  {
    if (v181)
    {
      v139 = 0x8000000000000000;
      v140 = v181;
      goto LABEL_119;
    }
    *(_QWORD *)&v186 = 0;
    BYTE8(v186) = 0;
    v139 = 0x8000000000000000;
LABEL_99:
    v187 = v139;
  }
  else
  {
    v127 = a5;
    v128 = 24 * a5;
    do
    {
      if (v127 >= *(unsigned int *)(v185 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x197FAA620);
      }
      v129 = *(_QWORD *)v185 + v128;
      v130 = *(_QWORD *)v129;
      v186 = *(_OWORD *)(v129 + 8);
      v131 = *(unsigned int *)(v100 + 68);
      if ((_DWORD)v131 == *(_DWORD *)(v100 + 64))
      {
        v138 = (__int128 *)WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v100 + 56, (void *)(v131 + 1), (unint64_t)&v186, v118, v119, v120, v121, v122);
        v131 = *(unsigned int *)(v100 + 68);
        v132 = *(_QWORD *)(v100 + 56);
        v133 = *v138;
      }
      else
      {
        v132 = *(_QWORD *)(v100 + 56);
        v133 = v186;
      }
      *(_OWORD *)(v132 + 16 * v131) = v133;
      ++*(_DWORD *)(v100 + 68);
      v134 = v188;
      if (v188 < 0)
        v135 = 63;
      else
        v135 = *(_QWORD *)(2 * v188);
      v136 = v130 - v68;
      if (v135 < v136 + 1)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v188, v136 + 1, 0);
        v134 = v188;
      }
      if (v134 >= 0)
        v137 = (uint64_t *)(2 * v134 + 8);
      else
        v137 = &v188;
      *(uint64_t *)((char *)v137 + ((v136 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v136;
      ++v127;
      v128 += 24;
      --v126;
    }
    while (v126);
    v139 = v188;
    v140 = v181;
    if (v181)
    {
      v141 = (uint64_t *)(2 * v188 + 8);
      if (v188 < 0)
        v141 = &v188;
      if ((v188 & 0x8000000000000000) == 0)
      {
        v142 = *(_QWORD *)(2 * v188);
        if (v142)
        {
          v143 = 0;
          v144 = 1;
          do
          {
            if (((*(unint64_t *)((char *)v141 + ((v143 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v143) & 1) == 0)
              break;
            if (v181 <= v144)
              goto LABEL_127;
            v143 = v144++;
          }
          while (v142 > v143);
        }
        goto LABEL_97;
      }
LABEL_119:
      v163 = 0;
      if (v140 <= 1)
        v164 = 1;
      else
        v164 = v140;
      v165 = v164 - 1;
      do
      {
        if (((v139 >> v163) & 1) == 0)
          break;
        if (v165 == v163)
          goto LABEL_127;
        ++v163;
      }
      while (v163 != 63);
LABEL_97:
      JSC::B3::BasicBlock::appendSuccessor(v100, a3, v169, v118, v119, v120, v121, v122);
      v145 = 1;
    }
    else
    {
LABEL_127:
      v145 = 0;
    }
    *(_QWORD *)&v186 = v140;
    BYTE8(v186) = v145;
    v187 = 0x8000000000000000;
    if ((v139 & 0x8000000000000000) != 0)
      goto LABEL_99;
    WTF::BitVector::setSlow((WTF::BitVector *)&v187, (const WTF::BitVector *)&v188, v117, v118, v119, v120, v121, v122);
  }
  if ((v187 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v187, v146, v147, v148, v149, v150, v151, v152);
  if ((v139 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v139, v146, v147, v148, v149, v150, v151, v152);
}

void JSC::mask()
{
  __break(0xC471u);
  JUMPOUT(0x197FAA6D8);
}

uint64_t JSC::elementByteSize(unsigned int a1)
{
  uint64_t result;

  if (a1 < 7)
    return dword_19914F9F8[(char)a1];
  result = 208;
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::InsertionSet::insert<JSC::B3::SIMDValue,JSC::B3::Origin,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::SIMDLane,JSC::SIMDSignMode,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  JSC::B3::Value *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t casual;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 *v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;

  v8 = *(JSC::B3::Value **)a1;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v9)
  {
    v10 = (_BYTE *)(v9 + 8856);
    *(_BYTE *)(v9 + 8856) = 1;
    v11 = *(unsigned int *)(v9 + 8872);
    if ((_DWORD)v11)
    {
      *(_DWORD *)(v9 + 8872) = v11 - *(_DWORD *)(v9 + 8876);
      casual = *(_QWORD *)(v9 + 8864) - v11;
LABEL_6:
      *v10 = 0;
      goto LABEL_7;
    }
    v13 = *(_QWORD *)(v9 + 8896);
    v14 = *(_QWORD *)(v9 + 8880);
    if (v13)
    {
LABEL_5:
      v15 = __clz(v13);
      *(_QWORD *)(v9 + 8896) = v13 & ~(0x8000000000000000 >> v15);
      casual = v14 + 16 * v15;
      goto LABEL_6;
    }
    if (*(_BYTE *)(v9 + 8861) == 6)
    {
      v27 = *(_DWORD *)(v9 + 8892);
      v28 = *(unsigned int *)(v9 + 8888);
      if (v28 < v27)
      {
        *(_QWORD *)&v10[8 * v28 + 56] = 0;
        v29 = (unint64_t *)(v9 + 8 * v28 + 8920);
        v30 = v27 - 1 - v28;
        while (v30)
        {
          v14 += 1024;
          v32 = *v29++;
          v31 = v32;
          LODWORD(v28) = v28 + 1;
          --v30;
          if (v32)
          {
            v13 = __rbit64(v31);
            *(_DWORD *)(v9 + 8888) = v28;
            *(_QWORD *)(v9 + 8880) = v14;
            goto LABEL_5;
          }
        }
        *(_DWORD *)(v9 + 8888) = v27;
      }
    }
    *v10 = 0;
  }
  casual = bmalloc_allocate_casual(56, 1);
LABEL_7:
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 93;
  *(_DWORD *)(casual + 16) = 5;
  *(_BYTE *)(casual + 20) = 1;
  *(_QWORD *)(casual + 24) = a3;
  *(_QWORD *)(casual + 32) = 0;
  *(_QWORD *)(casual + 48) = a4;
  *(_QWORD *)casual = off_1E357EA50;
  *(_WORD *)(casual + 40) = 1;
  JSC::B3::Procedure::addValueImpl(v8, (JSC::B3::Value *)casual);
  *(_QWORD *)&v33 = a2;
  *((_QWORD *)&v33 + 1) = casual;
  v21 = (uint64_t *)(a1 + 8);
  v22 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v22 == *(_DWORD *)(a1 + 16))
  {
    v26 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v21, (void *)(v22 + 1), (unint64_t)&v33, v16, v17, v18, v19, v20);
    v22 = *(unsigned int *)(a1 + 20);
    v23 = *(_QWORD *)(a1 + 8);
    v24 = *v26;
  }
  else
  {
    v23 = *v21;
    v24 = v33;
  }
  *(_OWORD *)(v23 + 16 * v22) = v24;
  ++*(_DWORD *)(a1 + 20);
  return casual;
}

uint64_t JSC::B3::InsertionSet::insert<JSC::B3::SIMDValue,JSC::B3::Origin,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::SIMDInfo,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  JSC::B3::Value *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t casual;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 *v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;

  v12 = *(JSC::B3::Value **)a1;
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v13)
  {
    v14 = (_BYTE *)(v13 + 8856);
    *(_BYTE *)(v13 + 8856) = 1;
    v15 = *(unsigned int *)(v13 + 8872);
    if ((_DWORD)v15)
    {
      *(_DWORD *)(v13 + 8872) = v15 - *(_DWORD *)(v13 + 8876);
      casual = *(_QWORD *)(v13 + 8864) - v15;
LABEL_6:
      *v14 = 0;
      goto LABEL_7;
    }
    v17 = *(_QWORD *)(v13 + 8896);
    v18 = *(_QWORD *)(v13 + 8880);
    if (v17)
    {
LABEL_5:
      v19 = __clz(v17);
      *(_QWORD *)(v13 + 8896) = v17 & ~(0x8000000000000000 >> v19);
      casual = v18 + 16 * v19;
      goto LABEL_6;
    }
    if (*(_BYTE *)(v13 + 8861) == 6)
    {
      v31 = *(_DWORD *)(v13 + 8892);
      v32 = *(unsigned int *)(v13 + 8888);
      if (v32 < v31)
      {
        *(_QWORD *)&v14[8 * v32 + 56] = 0;
        v33 = (unint64_t *)(v13 + 8 * v32 + 8920);
        v34 = v31 - 1 - v32;
        while (v34)
        {
          v18 += 1024;
          v36 = *v33++;
          v35 = v36;
          LODWORD(v32) = v32 + 1;
          --v34;
          if (v36)
          {
            v17 = __rbit64(v35);
            *(_DWORD *)(v13 + 8888) = v32;
            *(_QWORD *)(v13 + 8880) = v18;
            goto LABEL_5;
          }
        }
        *(_DWORD *)(v13 + 8888) = v31;
      }
    }
    *v14 = 0;
  }
  casual = bmalloc_allocate_casual(64, 1);
LABEL_7:
  *(_QWORD *)casual = off_1E357F5F0;
  *(_DWORD *)(casual + 8) = -1;
  *(_WORD *)(casual + 12) = 151;
  *(_DWORD *)(casual + 16) = 5;
  *(_BYTE *)(casual + 20) = 2;
  *(_QWORD *)(casual + 24) = a3;
  *(_QWORD *)(casual + 32) = 0;
  JSC::B3::Value::buildAdjacencyList<JSC::B3::Value*,JSC::B3::Value*>((uint64_t *)casual, 2, a5, a6);
  *(_QWORD *)casual = off_1E357EA50;
  *(_BYTE *)(casual + 40) = a4;
  *(_BYTE *)(casual + 41) = 0;
  JSC::B3::Procedure::addValueImpl(v12, (JSC::B3::Value *)casual);
  *(_QWORD *)&v37 = a2;
  *((_QWORD *)&v37 + 1) = casual;
  v25 = (uint64_t *)(a1 + 8);
  v26 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v26 == *(_DWORD *)(a1 + 16))
  {
    v30 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, (void *)(v26 + 1), (unint64_t)&v37, v20, v21, v22, v23, v24);
    v26 = *(unsigned int *)(a1 + 20);
    v27 = *(_QWORD *)(a1 + 8);
    v28 = *v30;
  }
  else
  {
    v27 = *v25;
    v28 = v37;
  }
  *(_OWORD *)(v27 + 16 * v26) = v28;
  ++*(_DWORD *)(a1 + 20);
  return casual;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Kind,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Space;

  Space = JSC::B3::Value::allocateSpace(a1, 40);
  return JSC::B3::Value::Value<JSC::B3::Value*,JSC::B3::Value*>(Space, a1, a2, a3, a4);
}

uint64_t JSC::B3::Value::Value<JSC::B3::Value*,JSC::B3::Value*>(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch((char)a2)
  {
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 46:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 91:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case -116:
    case -112:
    case -110:
    case -106:
    case -105:
      return JSC::B3::Value::Value<>(a1, 0, a2, 2, a3, a4, a5);
    default:
      JSC::B3::Value::badKind(a2, 2);
  }
}

uint64_t JSC::B3::Value::Value<>(uint64_t a1, uint64_t a2, __int16 a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v15;
  uint64_t v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = JSC::B3::Value::typeFor(a3, a6, a7);
  *(_BYTE *)(a1 + 20) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = 0;
  if (a4 == 4)
  {
    v15 = (uint64_t *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)a1);
    v16[0] = a6;
    v16[1] = a7;
    WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v15, v16, 2uLL);
  }
  else
  {
    v12 = 40;
    switch(*(_BYTE *)(a1 + 12))
    {
      case 0:
      case 1:
      case 2:
      case 8:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
      case 0x2F:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x4F:
      case 0x99:
      case 0x9A:
      case 0x9B:
      case 0x9D:
      case 0x9E:
      case 0x9F:
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0x50:
      case 0x54:
      case 0x5A:
      case 0x5B:
      case 0x5C:
      case 0x5D:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x62:
      case 0x63:
      case 0x64:
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6D:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x84:
      case 0x85:
      case 0x86:
      case 0x87:
      case 0x88:
      case 0x89:
      case 0x8A:
      case 0x8B:
      case 0x8C:
      case 0x8D:
      case 0x8E:
      case 0x8F:
      case 0x90:
      case 0x91:
      case 0x92:
      case 0x93:
      case 0x94:
      case 0x95:
      case 0x96:
      case 0x97:
      case 0x98:
        v12 = 48;
        break;
      case 7:
      case 0x51:
      case 0x59:
      case 0x9C:
        v12 = 56;
        break;
      case 0x3F:
      case 0x40:
      case 0x41:
      case 0x42:
      case 0x43:
      case 0x44:
      case 0x45:
      case 0x46:
      case 0x47:
      case 0x48:
      case 0x49:
      case 0x4A:
      case 0x4B:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x52:
        v12 = 64;
        break;
      case 0x53:
        v12 = 176;
        break;
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
        v12 = 112;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FAACDCLL);
    }
    v13 = (uint64_t *)(a1 + v12);
    *v13 = a6;
    v13[1] = a7;
  }
  return a1;
}

uint64_t JSC::B3::Value::Value(uint64_t result, __int16 a2, int a3, uint64_t a4)
{
  *(_QWORD *)result = off_1E357F5F0;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = a2;
  *(_DWORD *)(result + 16) = a3;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a4;
  *(_QWORD *)(result + 32) = 0;
  if (a2 >= 0xA0u)
  {
    __break(0xC471u);
    JUMPOUT(0x197FAAFECLL);
  }
  switch((char)a2)
  {
    case 0:
    case 13:
    case -103:
    case -102:
    case -99:
    case -98:
    case -97:
      return result;
    default:
      JSC::B3::Value::badKind(a2, 0);
  }
}

JSC::B3::Value *JSC::B3::Procedure::add<JSC::B3::ConstPtrValue,JSC::B3::Origin,double (*)(double,double)>(JSC::B3::Value *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v4 + 8) = -1;
  *(_WORD *)(v4 + 12) = 4;
  *(_DWORD *)(v4 + 16) = 2;
  *(_BYTE *)(v4 + 20) = 0;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = fmodDouble;
  *(_QWORD *)v4 = off_1E357E2D0;
  return JSC::B3::Procedure::addValueImpl(a1, (JSC::B3::Value *)v4);
}

void JSC::B3::ConstPtrValue::~ConstPtrValue(JSC::B3::ConstPtrValue *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v1 = JSC::B3::Value::childrenAlloc(this);
    v9 = *(_QWORD *)v1;
    if (v1 + 16 != *(_QWORD *)v1 && v9 != 0)
    {
      *(_QWORD *)v1 = 0;
      *(_DWORD *)(v1 + 8) = 0;
      WTF::fastFree(v9, v2, v3, v4, v5, v6, v7, v8);
    }
  }
}

void JSC::B3::ConstPtrValue::~ConstPtrValue(JSC::B3::ConstPtrValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v9 = JSC::B3::Value::childrenAlloc(this);
    v10 = *(_QWORD *)v9;
    if (v9 + 16 != *(_QWORD *)v9 && v10 != 0)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

JSC::B3::Value *JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::Effects,JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>(JSC::B3::Value *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  JSC::B3::Value *v11;
  __int128 v13;
  uint64_t v14;

  v13 = *(_OWORD *)a3;
  v14 = *(_QWORD *)(a3 + 16);
  v11 = (JSC::B3::Value *)WTF::fastMalloc((WTF *)0x68);
  JSC::B3::CCallValue::CCallValue<JSC::B3::Value *,JSC::B3::Value *,JSC::B3::Value *>((uint64_t)v11, 4, a2, &v13, a4, a5, a6);
  JSC::B3::Procedure::addValueImpl(a1, v11);
  return v11;
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::B3::`anonymous namespace'::LowerMacros::processCurrentBlock(void)::{lambda(JSC::B3::SwitchCase const&,JSC::B3::SwitchCase const&)#1} &,JSC::B3::SwitchCase*,false>(uint64_t *a1, char *a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  __n128 *v25;
  __n128 *v26;
  __n128 *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  __n128 v43;
  char v44;
  BOOL v45;
  __n128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

uint64_t std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::`anonymous namespace'::LowerMacros::processCurrentBlock(void)::{lambda(JSC::B3::SwitchCase const&,JSC::B3::SwitchCase const&)#1} &,JSC::B3::SwitchCase*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if (result != a2)
  {
    v2 = result + 24;
    if (result + 24 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = *(_QWORD *)(v4 + 24);
        if (v6 < *(_QWORD *)v4)
        {
          v10 = *(_OWORD *)(v4 + 32);
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(_QWORD *)(v8 + 40) = *(_QWORD *)(result + v7 + 16);
            if (!v7)
              break;
            v7 -= 24;
            if (v6 >= *(_QWORD *)(v8 - 24))
            {
              v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(_QWORD *)v9 = v6;
          *(_OWORD *)(v9 + 8) = v10;
        }
        v2 = v5 + 24;
        v3 += 24;
        v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

_QWORD *std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::`anonymous namespace'::LowerMacros::processCurrentBlock(void)::{lambda(JSC::B3::SwitchCase const&,JSC::B3::SwitchCase const&)#1} &,JSC::B3::SwitchCase*>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;

  if (result != a2)
  {
    v2 = result + 3;
    if (result + 3 != a2)
    {
      v3 = -2;
      v4 = 1;
      v5 = result;
      while (1)
      {
        v6 = *v2;
        if (*v2 < *v5)
          break;
LABEL_9:
        v5 = &result[3 * v4++];
        v2 += 3;
        --v3;
        if (v2 == a2)
          return result;
      }
      v12 = *((_OWORD *)v5 + 2);
      v7 = v3;
      v8 = v2;
      while (1)
      {
        *(_OWORD *)v8 = *(_OWORD *)(v8 - 3);
        v8[2] = *(v8 - 1);
        if (__CFADD__(v7++, 1))
          break;
        v10 = v8 - 3;
        v11 = *(v8 - 6);
        v8 -= 3;
        if (v6 >= v11)
        {
          *v10 = v6;
          *(_OWORD *)(v10 + 1) = v12;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t std::__partial_sort[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::`anonymous namespace'::LowerMacros::processCurrentBlock(void)::{lambda(JSC::B3::SwitchCase const&,JSC::B3::SwitchCase const&)#1} &,JSC::B3::SwitchCase*,JSC::B3::SwitchCase*>(uint64_t result, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;

  if ((__int128 *)result != a2)
  {
    v3 = (uint64_t)a2 - result;
    v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - result) >> 3);
    if ((uint64_t)a2 - result >= 25 && (unint64_t)v3 >= 0x30)
    {
      v5 = (unint64_t)(v4 - 2) >> 1;
      v6 = v5;
      do
      {
        if (v5 >= v6)
        {
          v7 = (2 * v6) | 1;
          v8 = (_QWORD *)(result + 24 * v7);
          if (2 * v6 + 2 >= v4)
          {
            v9 = *v8;
          }
          else
          {
            v9 = v8[3];
            v10 = *v8 < v9;
            if (*v8 > v9)
              v9 = *v8;
            if (v10)
            {
              v8 += 3;
              v7 = 2 * v6 + 2;
            }
          }
          v11 = (_QWORD *)(result + 24 * v6);
          v12 = *v11;
          if (v9 >= *v11)
          {
            v52 = *(_OWORD *)(v11 + 1);
            do
            {
              v13 = v11;
              v11 = v8;
              v14 = *(_OWORD *)v8;
              v13[2] = v8[2];
              *(_OWORD *)v13 = v14;
              if (v5 < v7)
                break;
              v15 = (2 * v7) | 1;
              v8 = (_QWORD *)(result + 24 * v15);
              v7 = 2 * v7 + 2;
              if (v7 >= v4)
              {
                v16 = *v8;
                v7 = v15;
              }
              else
              {
                v16 = *v8;
                v17 = v8[3];
                if (*v8 <= v17)
                  v16 = v8[3];
                if (*v8 >= v17)
                  v7 = v15;
                else
                  v8 += 3;
              }
            }
            while (v16 >= v12);
            *v11 = v12;
            *(_OWORD *)(v11 + 1) = v52;
          }
        }
        v10 = v6-- <= 0;
      }
      while (!v10);
    }
    if (a2 != a3)
    {
      v18 = *(_QWORD *)result;
      if (v3 >= 48)
      {
        v23 = (uint64_t *)(result + 48);
        v24 = a2;
        do
        {
          if (*(_QWORD *)v24 < v18)
          {
            v25 = *((_QWORD *)v24 + 2);
            v26 = *v24;
            v27 = *(_QWORD *)(result + 16);
            *v24 = *(_OWORD *)result;
            *((_QWORD *)v24 + 2) = v27;
            *(_OWORD *)result = v26;
            *(_QWORD *)(result + 16) = v25;
            v28 = *(_QWORD *)(result + 24);
            if ((unint64_t)v4 < 3)
            {
              v30 = (__int128 *)(result + 24);
              v31 = 1;
            }
            else
            {
              v29 = v28 < *v23;
              if (v28 <= *v23)
                v28 = *v23;
              if (v29)
                v30 = (__int128 *)(result + 48);
              else
                v30 = (__int128 *)(result + 24);
              if (v29)
                v31 = 2;
              else
                v31 = 1;
            }
            v18 = *(_QWORD *)result;
            if (v28 >= *(_QWORD *)result)
            {
              v53 = *(_OWORD *)(result + 8);
              v32 = result;
              do
              {
                v33 = v32;
                v32 = (uint64_t)v30;
                v34 = *v30;
                *(_QWORD *)(v33 + 16) = *((_QWORD *)v30 + 2);
                *(_OWORD *)v33 = v34;
                if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v31)
                  break;
                v35 = (2 * v31) | 1;
                v30 = (__int128 *)(result + 24 * v35);
                v31 = 2 * v31 + 2;
                if (v31 >= v4)
                {
                  v36 = *(_QWORD *)v30;
                  v31 = v35;
                }
                else
                {
                  v36 = *(_QWORD *)v30;
                  v37 = *((_QWORD *)v30 + 3);
                  if (*(_QWORD *)v30 <= v37)
                    v36 = *((_QWORD *)v30 + 3);
                  if (*(_QWORD *)v30 >= v37)
                    v31 = v35;
                  else
                    v30 = (__int128 *)((char *)v30 + 24);
                }
              }
              while (v36 >= v18);
              *(_QWORD *)v32 = v18;
              *(_OWORD *)(v32 + 8) = v53;
              v18 = *(_QWORD *)result;
            }
          }
          v24 = (__int128 *)((char *)v24 + 24);
        }
        while (v24 != a3);
      }
      else
      {
        v19 = a2;
        do
        {
          if (*(_QWORD *)v19 < v18)
          {
            v20 = *((_QWORD *)v19 + 2);
            v21 = *v19;
            v22 = *(_QWORD *)(result + 16);
            *v19 = *(_OWORD *)result;
            *((_QWORD *)v19 + 2) = v22;
            *(_OWORD *)result = v21;
            *(_QWORD *)(result + 16) = v20;
            v18 = *(_QWORD *)result;
          }
          v19 = (__int128 *)((char *)v19 + 24);
        }
        while (v19 != a3);
      }
    }
    if (v3 >= 25)
    {
      v38 = v3 / 0x18uLL;
      do
      {
        v39 = 0;
        v54 = *(_OWORD *)result;
        v55 = *(_QWORD *)(result + 16);
        v40 = result;
        do
        {
          v41 = v40 + 24 * v39 + 24;
          v42 = (2 * v39) | 1;
          v43 = 2 * v39 + 2;
          if (v43 < v38 && *(_QWORD *)v41 < *(_QWORD *)(v41 + 24))
          {
            v41 += 24;
            v42 = v43;
          }
          v44 = *(_OWORD *)v41;
          *(_QWORD *)(v40 + 16) = *(_QWORD *)(v41 + 16);
          *(_OWORD *)v40 = v44;
          v40 = v41;
          v39 = v42;
        }
        while (v42 <= (uint64_t)((unint64_t)(v38 - 2) >> 1));
        a2 = (__int128 *)((char *)a2 - 24);
        if ((__int128 *)v41 == a2)
        {
          *(_QWORD *)(v41 + 16) = v55;
          *(_OWORD *)v41 = v54;
        }
        else
        {
          v45 = *a2;
          *(_QWORD *)(v41 + 16) = *((_QWORD *)a2 + 2);
          *(_OWORD *)v41 = v45;
          *a2 = v54;
          *((_QWORD *)a2 + 2) = v55;
          v46 = v41 - result + 24;
          if (v46 >= 25)
          {
            v47 = (v46 / 0x18uLL - 2) >> 1;
            v48 = result + 24 * v47;
            v49 = *(_QWORD *)v41;
            if (*(_QWORD *)v48 < *(_QWORD *)v41)
            {
              v56 = *(_OWORD *)(v41 + 8);
              do
              {
                v50 = v41;
                v41 = v48;
                v51 = *(_OWORD *)v48;
                *(_QWORD *)(v50 + 16) = *(_QWORD *)(v48 + 16);
                *(_OWORD *)v50 = v51;
                if (!v47)
                  break;
                v47 = (v47 - 1) >> 1;
                v48 = result + 24 * v47;
              }
              while (*(_QWORD *)v48 < v49);
              *(_QWORD *)v41 = v49;
              *(_OWORD *)(v41 + 8) = v56;
            }
          }
        }
        v10 = v38-- <= 2;
      }
      while (!v10);
    }
  }
  return result;
}

__int128 *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::`anonymous namespace'::LowerMacros::processCurrentBlock(void)::{lambda(JSC::B3::SwitchCase const&,JSC::B3::SwitchCase const&)#1} &,JSC::B3::SwitchCase*>(__int128 *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *(_QWORD *)result)
  {
    if (v4 < v3)
    {
      v8 = a2[2];
      v9 = *(_OWORD *)a2;
      v10 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v10;
      *(_OWORD *)a3 = v9;
      a3[2] = v8;
      if (*a2 < *(_QWORD *)result)
      {
        v11 = *((_QWORD *)result + 2);
        v12 = *result;
        v13 = a2[2];
        *result = *(_OWORD *)a2;
        *((_QWORD *)result + 2) = v13;
        *(_OWORD *)a2 = v12;
        a2[2] = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_QWORD *)result + 2);
      v15 = *result;
      v16 = a2[2];
      *result = *(_OWORD *)a2;
      *((_QWORD *)result + 2) = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
      if (*a3 >= *a2)
        return result;
      v5 = a2[2];
      v6 = *(_OWORD *)a2;
      v17 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v17;
    }
    else
    {
      v5 = *((_QWORD *)result + 2);
      v6 = *result;
      v7 = a3[2];
      *result = *(_OWORD *)a3;
      *((_QWORD *)result + 2) = v7;
    }
    *(_OWORD *)a3 = v6;
    a3[2] = v5;
  }
  return result;
}

uint64_t *std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::SwitchCase *,JSC::B3::`anonymous namespace'::LowerMacros::processCurrentBlock(void)::{lambda(JSC::B3::SwitchCase const&,JSC::B3::SwitchCase const&)#1} &>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v2 = *result;
  if (*result < *(a2 - 3))
  {
    v3 = result + 3;
    while (v3 != a2)
    {
      v4 = *v3;
      v3 += 3;
      if (v2 < v4)
      {
        v5 = v3 - 3;
        goto LABEL_9;
      }
    }
    goto LABEL_24;
  }
  v6 = result + 3;
  do
  {
    v5 = v6;
    if (v6 >= a2)
      break;
    v6 += 3;
  }
  while (v2 >= *v5);
LABEL_9:
  v7 = a2;
  if (v5 < a2)
  {
    v7 = a2;
    while (v7 != result)
    {
      v8 = *(v7 - 3);
      v7 -= 3;
      if (v2 >= v8)
        goto LABEL_20;
    }
    goto LABEL_24;
  }
LABEL_20:
  if (v5 < v7)
  {
    v16 = v5[2];
    v15 = *(_OWORD *)v5;
    v9 = *(_OWORD *)v7;
    v5[2] = v7[2];
    *(_OWORD *)v5 = v9;
    v10 = v5 + 3;
    v7[2] = v16;
    *(_OWORD *)v7 = v15;
    while (v10 != a2)
    {
      v11 = *v10;
      v10 += 3;
      if (v2 < v11)
      {
        v5 = v10 - 3;
        while (v7 != result)
        {
          v12 = *(v7 - 3);
          v7 -= 3;
          if (v2 >= v12)
            goto LABEL_20;
        }
        break;
      }
    }
LABEL_24:
    __break(1u);
    return result;
  }
  if (v5 - 3 != result)
  {
    v13 = *(_OWORD *)(v5 - 3);
    result[2] = *(v5 - 1);
    *(_OWORD *)result = v13;
  }
  *(v5 - 3) = v2;
  *((_OWORD *)v5 - 1) = v14;
  return v5;
}

uint64_t *std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::SwitchCase *,JSC::B3::`anonymous namespace'::LowerMacros::processCurrentBlock(void)::{lambda(JSC::B3::SwitchCase const&,JSC::B3::SwitchCase const&)#1} &>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v2 = 0;
  v3 = *result;
  do
  {
    v4 = &result[v2 + 3];
    if (v4 == a2)
      goto LABEL_22;
    v2 += 3;
  }
  while (*v4 < v3);
  v5 = &result[v2];
  v6 = a2;
  if (v2 != 3)
  {
    while (v6 != result)
    {
      v7 = *(v6 - 3);
      v6 -= 3;
      if (v7 < v3)
        goto LABEL_10;
    }
    goto LABEL_22;
  }
  do
  {
    if (v5 >= v6)
      break;
    v8 = *(v6 - 3);
    v6 -= 3;
  }
  while (v8 >= v3);
LABEL_10:
  v9 = &result[v2];
  if (v5 < v6)
  {
    v10 = v6;
LABEL_12:
    v18 = v9[2];
    v17 = *(_OWORD *)v9;
    v11 = *(_OWORD *)v10;
    v9[2] = v10[2];
    *(_OWORD *)v9 = v11;
    v12 = v9 + 3;
    v10[2] = v18;
    *(_OWORD *)v10 = v17;
    while (v12 != a2)
    {
      v13 = *v12;
      v12 += 3;
      if (v13 >= v3)
      {
        v9 = v12 - 3;
        while (v10 != result)
        {
          v14 = *(v10 - 3);
          v10 -= 3;
          if (v14 < v3)
          {
            if (v9 < v10)
              goto LABEL_12;
            goto LABEL_19;
          }
        }
        break;
      }
    }
LABEL_22:
    __break(1u);
    return result;
  }
LABEL_19:
  if (v9 - 3 != result)
  {
    v15 = *(_OWORD *)(v9 - 3);
    result[2] = *(v9 - 1);
    *(_OWORD *)result = v15;
  }
  *(v9 - 3) = v3;
  *((_OWORD *)v9 - 1) = v16;
  return v9 - 3;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::`anonymous namespace'::LowerMacros::processCurrentBlock(void)::{lambda(JSC::B3::SwitchCase const&,JSC::B3::SwitchCase const&)#1} &,JSC::B3::SwitchCase*>(uint64_t a1, _OWORD *a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  __n128 *v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15;
  __n128 *v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  __n128 v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  __n128 v52;
  _OWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;

  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (__n128 *)((char *)a2 - 24);
      if (*((_QWORD *)a2 - 3) < *(_QWORD *)a1)
        goto LABEL_6;
      return result;
    case 3uLL:
      v8 = (__n128 *)(a1 + 24);
      v9 = *(_QWORD *)(a1 + 24);
      v7 = (__n128 *)((char *)a2 - 24);
      v10 = *((_QWORD *)a2 - 3);
      if (v9 >= *(_QWORD *)a1)
      {
        if (v10 < v9)
        {
          v35 = *(_QWORD *)(a1 + 40);
          v36 = *v8;
          v37 = *((_QWORD *)a2 - 1);
          *v8 = *v7;
          *(_QWORD *)(a1 + 40) = v37;
          *v7 = v36;
          *((_QWORD *)a2 - 1) = v35;
          if (*(_QWORD *)(a1 + 24) < *(_QWORD *)a1)
          {
            v38 = *(_QWORD *)(a1 + 16);
            v39 = *(__n128 *)a1;
            *(__n128 *)a1 = *v8;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v8 = v39;
            *(_QWORD *)(a1 + 40) = v38;
          }
        }
      }
      else if (v10 >= v9)
      {
        v44 = *(_QWORD *)(a1 + 16);
        v45 = *(__n128 *)a1;
        *(__n128 *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v8 = v45;
        *(_QWORD *)(a1 + 40) = v44;
        if ((int64_t)v7->n128_u64[0] < *(_QWORD *)(a1 + 24))
        {
          v46 = *(_QWORD *)(a1 + 40);
          v47 = *v8;
          v48 = *((_QWORD *)a2 - 1);
          *v8 = *v7;
          *(_QWORD *)(a1 + 40) = v48;
          *v7 = v47;
          *((_QWORD *)a2 - 1) = v46;
        }
      }
      else
      {
LABEL_6:
        v11 = *(_QWORD *)(a1 + 16);
        v12 = *(__n128 *)a1;
        v13 = v7[1].n128_i64[0];
        *(__n128 *)a1 = *v7;
        *(_QWORD *)(a1 + 16) = v13;
        *v7 = v12;
        v7[1].n128_u64[0] = v11;
      }
      return result;
    case 4uLL:
      return 1;
    case 5uLL:
      v21 = (__n128 *)(a1 + 24);
      v22 = (__n128 *)(a1 + 48);
      v23 = (__n128 *)(a1 + 72);
      v25 = *((_QWORD *)a2 - 3);
      v24 = (__n128 *)((char *)a2 - 24);
      if (v25 < *(_QWORD *)(a1 + 72))
      {
        v26 = *(_QWORD *)(a1 + 88);
        v27 = *v23;
        v28 = v24[1].n128_i64[0];
        *v23 = *v24;
        *(_QWORD *)(a1 + 88) = v28;
        *v24 = v27;
        v24[1].n128_u64[0] = v26;
        if ((int64_t)v23->n128_u64[0] < (int64_t)v22->n128_u64[0])
        {
          v29 = *(_QWORD *)(a1 + 64);
          v30 = *v22;
          *v22 = *v23;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v23 = v30;
          *(_QWORD *)(a1 + 88) = v29;
          if ((int64_t)v22->n128_u64[0] < (int64_t)v21->n128_u64[0])
          {
            v31 = *(_QWORD *)(a1 + 40);
            v32 = *v21;
            *v21 = *v22;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v22 = v32;
            *(_QWORD *)(a1 + 64) = v31;
            if (*(_QWORD *)(a1 + 24) < *(_QWORD *)a1)
            {
              v33 = *(_QWORD *)(a1 + 16);
              v34 = *(__n128 *)a1;
              *(__n128 *)a1 = *v21;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v21 = v34;
              *(_QWORD *)(a1 + 40) = v33;
            }
          }
        }
      }
      return 1;
    default:
      v14 = (__n128 *)(a1 + 48);
      v15 = *(_QWORD *)(a1 + 48);
      v16 = (__n128 *)(a1 + 24);
      v17 = *(_QWORD *)(a1 + 24);
      v18 = *(_QWORD *)a1;
      if (v17 >= *(_QWORD *)a1)
      {
        if (v15 < v17)
        {
          v40 = *(_QWORD *)(a1 + 40);
          v41 = *v16;
          *v16 = *v14;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v14 = v41;
          *(_QWORD *)(a1 + 64) = v40;
          if ((int64_t)v16->n128_u64[0] < v18)
          {
            v42 = *(_QWORD *)(a1 + 16);
            v43 = *(__n128 *)a1;
            *(__n128 *)a1 = *v16;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v16 = v43;
            *(_QWORD *)(a1 + 40) = v42;
          }
        }
      }
      else if (v15 >= v17)
      {
        v49 = *(_QWORD *)(a1 + 16);
        v50 = *(__n128 *)a1;
        *(__n128 *)a1 = *v16;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v16 = v50;
        *(_QWORD *)(a1 + 40) = v49;
        if (v15 < *(_QWORD *)(a1 + 24))
        {
          v51 = *(_QWORD *)(a1 + 40);
          v52 = *v16;
          *v16 = *v14;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v14 = v52;
          *(_QWORD *)(a1 + 64) = v51;
        }
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 16);
        v20 = *(__n128 *)a1;
        *(__n128 *)a1 = *v14;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        *v14 = v20;
        *(_QWORD *)(a1 + 64) = v19;
      }
      v53 = (_OWORD *)(a1 + 72);
      if ((_OWORD *)(a1 + 72) == a2)
        return 1;
      v54 = 0;
      v55 = 0;
      break;
  }
  while (1)
  {
    v56 = *(_QWORD *)v53;
    if (*(_QWORD *)v53 < (int64_t)v14->n128_u64[0])
    {
      v60 = *(_OWORD *)((char *)v53 + 8);
      v57 = v54;
      while (1)
      {
        v58 = a1 + v57;
        *(_OWORD *)(v58 + 72) = *(_OWORD *)(a1 + v57 + 48);
        *(_QWORD *)(v58 + 88) = *(_QWORD *)(a1 + v57 + 64);
        if (v57 == -48)
          break;
        v57 -= 24;
        if (v56 >= *(_QWORD *)(v58 + 24))
        {
          v59 = a1 + v57 + 72;
          goto LABEL_34;
        }
      }
      v59 = a1;
LABEL_34:
      *(_QWORD *)v59 = v56;
      *(_OWORD *)(v59 + 8) = v60;
      if (++v55 == 8)
        return (_OWORD *)((char *)v53 + 24) == a2;
    }
    v14 = (__n128 *)v53;
    v54 += 24;
    v53 = (_OWORD *)((char *)v53 + 24);
    if (v53 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::B3::`anonymous namespace'::LowerMacros::processCurrentBlock(void)::{lambda(JSC::B3::SwitchCase const&,JSC::B3::SwitchCase const&)#1} &,JSC::B3::SwitchCase*>(__n128 *a1, __n128 *a2, uint64_t *a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v5 = a2->n128_u64[0];
  v6 = *a3;
  if ((int64_t)a2->n128_u64[0] >= (int64_t)a1->n128_u64[0])
  {
    if (v6 < v5)
    {
      v9 = a2[1].n128_i64[0];
      result = *a2;
      v10 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v10;
      *(__n128 *)a3 = result;
      a3[2] = v9;
      if ((int64_t)a2->n128_u64[0] < (int64_t)a1->n128_u64[0])
      {
        v11 = a1[1].n128_u64[0];
        result = *a1;
        v12 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v12;
        *a2 = result;
        a2[1].n128_u64[0] = v11;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = a1[1].n128_u64[0];
      result = *a1;
      v8 = a3[2];
      *a1 = *(__n128 *)a3;
      a1[1].n128_u64[0] = v8;
LABEL_9:
      *(__n128 *)a3 = result;
      a3[2] = v7;
      goto LABEL_10;
    }
    v13 = a1[1].n128_u64[0];
    result = *a1;
    v14 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v14;
    *a2 = result;
    a2[1].n128_u64[0] = v13;
    if (*a3 < (int64_t)a2->n128_u64[0])
    {
      v7 = a2[1].n128_u64[0];
      result = *a2;
      v15 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *a3)
  {
    v16 = a3[2];
    result = *(__n128 *)a3;
    v17 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v17;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v16;
    if (*a3 < (int64_t)a2->n128_u64[0])
    {
      v18 = a2[1].n128_i64[0];
      result = *a2;
      v19 = a3[2];
      *a2 = *(__n128 *)a3;
      a2[1].n128_u64[0] = v19;
      *(__n128 *)a3 = result;
      a3[2] = v18;
      if ((int64_t)a2->n128_u64[0] < (int64_t)a1->n128_u64[0])
      {
        v20 = a1[1].n128_u64[0];
        result = *a1;
        v21 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v21;
        *a2 = result;
        a2[1].n128_u64[0] = v20;
      }
    }
  }
  return result;
}

uint64_t JSC::B3::BasicBlock::appendNew<JSC::B3::PatchpointValue,JSC::B3::TypeKind,JSC::B3::Origin>(uint64_t a1, JSC::B3::Value *a2, int a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  char v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  char *v15;
  uint64_t v16;

  v8 = WTF::fastMalloc((WTF *)0xD8);
  *(_QWORD *)v8 = off_1E357F5F0;
  *(_DWORD *)(v8 + 8) = -1;
  *(_WORD *)(v8 + 12) = 83;
  *(_DWORD *)(v8 + 16) = a3;
  *(_BYTE *)(v8 + 20) = 4;
  *(_QWORD *)(v8 + 24) = a4;
  *(_QWORD *)(v8 + 32) = 0;
  v9 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)v8);
  *v9 = v9 + 2;
  v9[1] = 3;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)v8 = off_1E357E700;
  *(_OWORD *)(v8 + 112) = xmmword_1991243D0;
  *(_QWORD *)(v8 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(v8 + 136) = v8 + 152;
  *(_QWORD *)(v8 + 144) = 1;
  *(_WORD *)(v8 + 168) = 0;
  if ((a3 & 0x80000000) == 0)
  {
    if (a3)
      v10 = 3;
    else
      v10 = 0;
    *(_QWORD *)(v8 + 152) = 0;
    *(_BYTE *)(v8 + 160) = v10;
    *(_DWORD *)(v8 + 148) = 1;
  }
  JSC::B3::Procedure::addValueImpl(a2, (JSC::B3::Value *)v8);
  v16 = v8;
  v11 = (char **)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 16))
  {
    v15 = WTF::Vector<JSC::B3::Value *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v12 + 1, (unint64_t)&v16);
    v12 = *(unsigned int *)(a1 + 20);
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) = *(_QWORD *)v15;
    v13 = v16;
  }
  else
  {
    *(_QWORD *)&(*v11)[8 * v12] = v8;
    v13 = v8;
  }
  *(_DWORD *)(a1 + 20) = v12 + 1;
  *(_QWORD *)(v13 + 32) = a1;
  return v8;
}

unsigned int *JSC::B3::StackmapValue::setGenerator<JSC::B3::`anonymous namespace'::LowerMacros::recursivelyBuildSwitch(WTF::Vector<JSC::B3::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,unsigned int,BOOL,unsigned int,JSC::B3::BasicBlock*)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;

  v3 = (uint64_t)v11;
  v11 = 0;
  result = *(unsigned int **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v3;
  if (result)
  {
    v5 = result + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, result + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    result = v11;
    v11 = 0;
    if (result)
    {
      v8 = result + 2;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

void WTF::createSharedTask<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::`anonymous namespace'::LowerMacros::recursivelyBuildSwitch(WTF::Vector<JSC::B3::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,unsigned int,BOOL,unsigned int,JSC::B3::BasicBlock*)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::BitVector *v12;
  uint64_t v13;
  const WTF::BitVector *v14;
  uint64_t v15;

  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = &off_1E357E478;
  v11 = *a2;
  *(_BYTE *)(v10 + 24) = *((_BYTE *)a2 + 8);
  *(_QWORD *)(v10 + 16) = v11;
  *(_QWORD *)(v10 + 32) = 0x8000000000000000;
  v12 = (WTF::BitVector *)(v10 + 32);
  v15 = a2[2];
  v14 = (const WTF::BitVector *)(a2 + 2);
  v13 = v15;
  if (v15 < 0)
    *(_QWORD *)v12 = v13;
  else
    WTF::BitVector::setSlow(v12, v14, v4, v5, v6, v7, v8, v9);
  *a1 = v10;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::`anonymous namespace'::LowerMacros::recursivelyBuildSwitch(WTF::Vector<JSC::B3::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,unsigned int,BOOL,unsigned int,JSC::B3::BasicBlock*)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a1 + 32);
  if ((v9 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v9, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::`anonymous namespace'::LowerMacros::recursivelyBuildSwitch(WTF::Vector<JSC::B3::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,unsigned int,BOOL,unsigned int,JSC::B3::BasicBlock*)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *((_QWORD *)this + 4);
  if ((v9 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v9, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&),JSC::B3::`anonymous namespace'::LowerMacros::recursivelyBuildSwitch(WTF::Vector<JSC::B3::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,unsigned int,BOOL,unsigned int,JSC::B3::BasicBlock*)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}>::run(uint64_t a1, uint64_t a2, JSC::B3::StackmapGenerationParams *a3)
{
}

uint64_t JSC::B3::`anonymous namespace'::LowerMacros::recursivelyBuildSwitch(WTF::Vector<JSC::B3::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,unsigned int,BOOL,unsigned int,JSC::B3::BasicBlock*)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator()(uint64_t a1, uint64_t a2, JSC::B3::StackmapGenerationParams *this)
{
  char v6;
  JSC::B3::Procedure *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  const WTF::BitVector *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  char v51[8];
  _QWORD v52[4];
  unint64_t v53;
  uint64_t v54[2];

  v6 = *(_BYTE *)(a2 + 212);
  if (!v6)
    *(_DWORD *)(a2 + 208) = 0;
  *(_BYTE *)(a2 + 212) = 1;
  v7 = (JSC::B3::Procedure *)JSC::B3::StackmapGenerationParams::proc(this);
  v8 = JSC::B3::Procedure::addDataSection(v7, 8 * *(_QWORD *)a1);
  if (!*((_DWORD *)this + 5) || !*((_DWORD *)this + 9))
  {
    __break(0xC471u);
    JUMPOUT(0x197FACB8CLL);
  }
  v14 = v8;
  v15 = **((_BYTE **)this + 1);
  v16 = **((unsigned __int8 **)this + 3);
  v17 = (char)v16;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v8, v17, v9, v10, v11, v12, v13);
  JSC::MacroAssemblerARM64::load64(a2, v16 & 0xFFFFFFFFFFFF80FFLL | ((unint64_t)(v15 & 0x7F) << 8) | 0x300000000, 0x200000000uLL, v17, v18, v19, v20, v21);
  JSC::MacroAssemblerARM64::farJump((_DWORD *)a2, v17, 40321, v22, v23, v24, v25, v26);
  JSC::B3::StackmapGenerationParams::successorLabels(this, v54);
  v51[0] = *(_BYTE *)(a1 + 8);
  WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v52, (uint64_t)v54);
  v52[2] = *(_QWORD *)a1;
  v52[3] = v14;
  v35 = *(_QWORD *)(a1 + 16);
  v34 = (const WTF::BitVector *)(a1 + 16);
  v33 = v35;
  v53 = 0x8000000000000000;
  if ((v35 & 0x8000000000000000) != 0)
    v53 = v33;
  else
    WTF::BitVector::setSlow((WTF::BitVector *)&v53, v34, v27, v28, v29, v30, v31, v32);
  result = WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v54, v43, v44, v45, v46, v47, v48, v49);
  *(_BYTE *)(a2 + 212) = v6;
  return result;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<JSC::B3::`anonymous namespace'::LowerMacros::recursivelyBuildSwitch(WTF::Vector<JSC::B3::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,unsigned int,BOOL,unsigned int,JSC::B3::BasicBlock*)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int **v6;
  uint64_t v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E357E4A0;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)a2;
  v5 = *(unsigned int *)(a2 + 20);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 36) = v5;
  if ((_DWORD)v5)
  {
    if (v5 >> 29)
      goto LABEL_33;
    v6 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v4 + 32) = v5;
    *(_QWORD *)(v4 + 24) = v6;
    v7 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v7)
    {
      v8 = *(unsigned int ***)(a2 + 8);
      v9 = &v8[v7];
      do
      {
        v10 = *v8;
        if (*v8)
        {
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
        *v6++ = v10;
        ++v8;
      }
      while (v8 != v9);
    }
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(v4 + 56) = 0x8000000000000000;
  v14 = *(_QWORD *)(a2 + 40);
  v12 = (uint64_t *)(a2 + 40);
  v13 = v14;
  if ((v14 & 0x8000000000000000) == 0 && v13 >= 2)
  {
    v29 = *(_QWORD *)(2 * v13) + 63;
    v30 = v29 & 0xFFFFFFFFFFFFFFC0;
    v31 = WTF::fastMalloc((WTF *)(((v29 >> 3) & 0x1FFFFFFFFFFFFFF8) + 8));
    *(_QWORD *)v31 = v30;
    v32 = (_QWORD *)(2 * *v12);
    v33 = *v12 >= 0 ? v32 + 1 : v12;
    v34 = *v12 < 0 ? 8 : (unint64_t)(*v32 + 7) >> 3;
    memcpy((void *)(v31 + 8), v33, v34);
    v13 = v31 >> 1;
    v42 = *(_QWORD *)(v4 + 56);
    if (v42 >= 2)
      WTF::fastFree(2 * v42, v35, v36, v37, v38, v39, v40, v41);
  }
  *(_QWORD *)(v4 + 56) = v13;
  v15 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v15 != *(_DWORD *)(a1 + 240))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
    goto LABEL_20;
  }
  v17 = v15 + (v15 >> 2);
  if (v17 >= 0x10)
    v18 = v17 + 1;
  else
    v18 = 16;
  if (v18 <= v15 + 1)
    v19 = v15 + 1;
  else
    v19 = v18;
  if (v19 >> 29)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x197FACD84);
  }
  v20 = *(const void **)(a1 + 232);
  v21 = (void *)WTF::fastMalloc((WTF *)(8 * v19));
  *(_DWORD *)(a1 + 240) = v19;
  *(_QWORD *)(a1 + 232) = v21;
  memcpy(v21, v20, 8 * v15);
  if (v20)
  {
    if (*(const void **)(a1 + 232) == v20)
    {
      *(_QWORD *)(a1 + 232) = 0;
      *(_DWORD *)(a1 + 240) = 0;
    }
    WTF::fastFree((unint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
  }
  v15 = *(unsigned int *)(a1 + 244);
  v16 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v15);
LABEL_20:
  *v16 = v4;
  *(_DWORD *)(a1 + 244) = v15 + 1;
}

uint64_t WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int **v5;
  uint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(unsigned int ***)a2;
      v8 = *(_QWORD *)a2 + 8 * v6;
      do
      {
        v9 = *v7;
        if (*v7)
        {
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
        }
        *v5++ = v9;
        ++v7;
      }
      while (v7 != (unsigned int **)v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerMacros::recursivelyBuildSwitch(WTF::Vector<JSC::B3::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,unsigned int,BOOL,unsigned int,JSC::B3::BasicBlock*)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}::~LinkBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;

  v9 = *(_QWORD *)(a1 + 40);
  if ((v9 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10)
  {
    v11 = *(unsigned int ***)(a1 + 8);
    v12 = &v11[v10];
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Box<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v10 = *(unsigned int ***)a1;
    v11 = *(_QWORD *)a1 + 8 * v9;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((unint64_t)v12, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v10;
    }
    while (v10 != (unsigned int **)v11);
  }
  v15 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::B3::`anonymous namespace'::LowerMacros::recursivelyBuildSwitch(WTF::Vector<JSC::B3::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,unsigned int,BOOL,unsigned int,JSC::B3::BasicBlock*)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;

  v9 = *(_QWORD *)(a1 + 56);
  if ((v9 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10)
  {
    v11 = *(unsigned int ***)(a1 + 24);
    v12 = &v11[v10];
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  v16 = *(_QWORD *)(a1 + 24);
  if (v16)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::B3::`anonymous namespace'::LowerMacros::recursivelyBuildSwitch(WTF::Vector<JSC::B3::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,unsigned int,BOOL,unsigned int,JSC::B3::BasicBlock*)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;

  v9 = *((_QWORD *)this + 7);
  if ((v9 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v9, a2, a3, a4, a5, a6, a7, a8);
  v10 = *((unsigned int *)this + 9);
  if ((_DWORD)v10)
  {
    v11 = (unsigned int **)*((_QWORD *)this + 3);
    v12 = &v11[v10];
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          atomic_store(1u, v13);
          WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  v16 = *((_QWORD *)this + 3);
  if (v16)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),JSC::B3::`anonymous namespace'::LowerMacros::recursivelyBuildSwitch(WTF::Vector<JSC::B3::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,unsigned int,BOOL,unsigned int,JSC::B3::BasicBlock*)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
}

uint64_t *JSC::B3::`anonymous namespace'::LowerMacros::recursivelyBuildSwitch(WTF::Vector<JSC::B3::SwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,JSC::B3::GenericFrequentedBlock<JSC::B3::BasicBlock>,unsigned int,BOOL,unsigned int,JSC::B3::BasicBlock*)::{lambda(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)#1}::operator() const(JSC::CCallHelpers &,JSC::B3::StackmapGenerationParams const&)::{lambda(JSC::LinkBuffer &)#1}::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;

  if (*(_BYTE *)a1)
  {
    v4 = *(unsigned int *)(a1 + 20);
    if (!(_DWORD)v4)
    {
      __break(0xC471u);
LABEL_40:
      JUMPOUT(0x197FAD280);
    }
    v29 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4 - 8) + 4);
    v5 = JSC::LinkBuffer::locationOf<(WTF::PtrTag)40321>(a2, &v29);
    if (*(_DWORD *)(a1 + 24))
    {
      v6 = *(unsigned int *)(a1 + 24) - 1;
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v6) = v5;
      while ((unint64_t)v6--);
    }
  }
  result = WTF::BitVector::begin((uint64_t *)(a1 + 40));
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 < 0)
    v11 = 63;
  else
    v11 = *(_QWORD *)(2 * v10);
  if (v9 != v11)
  {
    v12 = 0;
    do
    {
      if (*(_DWORD *)(a1 + 20) <= v12)
      {
        __break(0xC471u);
        JUMPOUT(0x197FAD288);
      }
      v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v12) + 4);
      if (v13 < 4)
        v14 = 0;
      else
        v14 = *(_DWORD *)((v13 & 0xFFFFFFFC) + a2[3] - 4);
      v15 = (v13 - v14);
      v16 = a2[23];
      v17 = v15 + v16;
      if (v16 > v17 || v16 + a2[1] < v17)
      {
        __break(0xC471u);
        goto LABEL_40;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v9) = v17;
      v19 = v9 + 1;
      v20 = *result;
      if (*result < 0)
      {
        v28 = __clz(__rbit64(v20 >> v19)) + v19;
        if (v28 >= 0x3F)
          v9 = 63;
        else
          v9 = v28;
        goto LABEL_23;
      }
      v21 = 2 * v20;
      v9 = *(_QWORD *)(2 * v20);
      v22 = v9 + 63;
      v23 = v19 >> 6;
      if (v19 >> 6 < (unint64_t)(v9 + 63) >> 6)
      {
        v24 = *(_QWORD *)(v21 + 8 * v23 + 8);
        if (!v24 || (v25 = __clz(__rbit64(v24 >> v19)) + (v19 & 0x3F), v25 >= 0x40))
        {
          if (v23 + 1 == v22 >> 6)
            goto LABEL_23;
          v26 = v21 + 16;
          while (1)
          {
            v27 = *(_QWORD *)(v26 + 8 * v23);
            if (v27)
            {
              v25 = __clz(__rbit64(v27));
              if (v25 <= 0x3F)
                break;
            }
            if ((v22 >> 6) - 1 == ++v23)
              goto LABEL_23;
          }
          ++v23;
        }
        v9 = v25 + (v23 << 6);
      }
LABEL_23:
      ++v12;
    }
    while (v9 != v11);
  }
  return result;
}

uint64_t JSC::LinkBuffer::locationOf<(WTF::PtrTag)40321>(_QWORD *a1, int *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v2 = *a2;
  if (*a2 < 4)
    v3 = 0;
  else
    v3 = *(_DWORD *)((v2 & 0xFFFFFFFC) + a1[3] - 4);
  v4 = (v2 - v3);
  v5 = a1[23];
  v6 = v4 + v5;
  if (v5 <= v6 && v5 + a1[1] >= v6)
    return v6;
  result = 366;
  __break(0xC471u);
  return result;
}

uint64_t *WTF::BitVector::begin(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *this;
  if ((*this & 0x8000000000000000) == 0)
  {
    v2 = *(_QWORD *)(2 * v1);
    if ((unint64_t)(v2 + 63) >= 0x40)
    {
      v3 = *(_QWORD *)(2 * v1 + 8);
      if ((!v3 || __clz(__rbit64(v3)) >= 0x40) && (unint64_t)(v2 + 63) >> 6 != 1)
      {
        v4 = 0;
        do
        {
          v5 = *(_QWORD *)(2 * v1 + 0x10 + 8 * v4);
          if (v5 && __clz(__rbit64(v5)) <= 0x3F)
            break;
          ++v4;
        }
        while (((unint64_t)(v2 + 63) >> 6) - 1 != v4);
      }
    }
  }
  return this;
}

void _ZZN3JSC2B312_GLOBAL__N_110LowerToAir3runEvENKUlPNS0_5ValueERT_E_clIN3WTF7HashMapIS4_NS9_6VectorINS0_3Air3TmpELm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_11DefaultHashIS4_EENS9_10HashTraitsIS4_EENSJ_ISG_EENS9_15HashTableTraitsEEEEEDaS4_S6_(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  _DWORD *v28;
  int v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  int v51;
  int v52;
  unint64_t v53;

  v11 = *a3;
  if (*a3
    || (WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(a3, 8uLL, 0, a4, a5, a6, a7, a8), (v11 = *a3) != 0))
  {
    v12 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v12 = 0;
  }
  v13 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = v12 & ((v15 >> 31) ^ v15);
  v17 = v11 + 24 * v16;
  v18 = *(_DWORD **)v17;
  if (*(_QWORD *)v17)
  {
    v50 = 0;
    v51 = 1;
    do
    {
      if (v18 == a2)
        return;
      if (v18 == (_DWORD *)-1)
        v50 = (_QWORD *)v17;
      v16 = (v16 + v51) & v12;
      v17 = v11 + 24 * v16;
      v18 = *(_DWORD **)v17;
      ++v51;
    }
    while (*(_QWORD *)v17);
    if (v50)
    {
      *v50 = 0;
      v50[1] = 0;
      v50[2] = 0;
      --*(_DWORD *)(*a3 - 16);
      v17 = (uint64_t)v50;
    }
  }
  *(_QWORD *)v17 = a2;
  v19 = *(_QWORD *)(a1 + 424);
  v20 = a2[4] & 0x7FFFFFFF;
  if (v20 >= *(_DWORD *)(v19 + 44))
    goto LABEL_44;
  v21 = *(_QWORD *)(v19 + 32) + 16 * v20;
  v22 = *(unsigned int *)(v21 + 12);
  if (!(_DWORD)v22)
  {
    v30 = 0;
    goto LABEL_18;
  }
  if (v22 >> 30)
  {
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x197FAD648);
  }
  v23 = WTF::fastMalloc((WTF *)(4 * v22));
  v24 = v23;
  v25 = *(unsigned int *)(v21 + 12);
  if ((_DWORD)v25)
  {
    v26 = *(int **)v21;
    v27 = 4 * v25;
    v28 = (_DWORD *)v23;
    do
    {
      v29 = *v26++;
      *v28++ = v29;
      v27 -= 4;
    }
    while (v27);
  }
  v30 = (void *)WTF::fastMalloc((WTF *)(4 * v22));
  bzero(v30, 4 * v22);
  v38 = 0;
  v39 = *(_QWORD *)(a1 + 432);
  do
  {
    v40 = *(_DWORD *)(v24 + 4 * v38);
    if (v40 >= 0x80000000)
      v40 = 0x80000000;
    if (v40 - 3 < 3)
    {
      v52 = *(_DWORD *)(v39 + 180);
      *(_DWORD *)(v39 + 180) = v52 + 1;
      v42 = -33 - v52;
    }
    else
    {
      v41 = *(_DWORD *)(v39 + 176);
      *(_DWORD *)(v39 + 176) = v41 + 1;
      v42 = v41 + 33;
    }
    *((_DWORD *)v30 + v38++) = v42;
  }
  while (v22 != v38);
  WTF::fastFree(v24, v31, v32, v33, v34, v35, v36, v37);
LABEL_18:
  v43 = *(_QWORD *)(v17 + 8);
  if (v43)
  {
    *(_QWORD *)(v17 + 8) = 0;
    *(_DWORD *)(v17 + 16) = 0;
    WTF::fastFree(v43, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)(v17 + 8) = v30;
  *(_DWORD *)(v17 + 16) = v22;
  *(_DWORD *)(v17 + 20) = v22;
  v44 = *a3;
  if (*a3)
    v45 = *(_DWORD *)(v44 - 12) + 1;
  else
    v45 = 1;
  *(_DWORD *)(v44 - 12) = v45;
  v46 = *a3;
  if (*a3)
    v47 = *(_DWORD *)(v46 - 12);
  else
    v47 = 0;
  v48 = (*(_DWORD *)(v46 - 16) + v47);
  v49 = *(unsigned int *)(v46 - 4);
  if (v49 <= 0x400)
  {
    if (3 * v49 > 4 * v48)
      return;
    if (!(_DWORD)v49)
    {
      v53 = 8;
      goto LABEL_41;
    }
LABEL_38:
    v53 = ((_DWORD)v49 << (6 * *(_DWORD *)(v46 - 12) >= (2 * v49)));
LABEL_41:
    WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(a3, v53, v17, a4, a5, a6, a7, a8);
    return;
  }
  if (v49 <= 2 * v48)
    goto LABEL_38;
}

void WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::B3::Air::Tmp,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int *v36;
  int v37;
  char *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  int *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::B3::Variable *,WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Variable *>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
  v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
  v19 = v14 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
  v20 = (_QWORD *)(v12 + 24 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v40 = 0;
        else
          v40 = *(_DWORD *)(v12 - 4);
        v53 = 0;
        v54 = v12 + 24 * v40;
        goto LABEL_57;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (_QWORD *)(v12 + 24 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v22;
    }
  }
  *v20 = v15;
  v24 = *((_DWORD *)v20 + 5);
  v25 = *(_DWORD *)(a4 + 12);
  if (v24 <= v25)
  {
    v26 = *((_DWORD *)v20 + 4);
    if (v25 > v26)
    {
      if (v26)
      {
        if (v24)
          *((_DWORD *)v20 + 5) = 0;
        v27 = v20[1];
        if (v27)
        {
          v20[1] = 0;
          *((_DWORD *)v20 + 4) = 0;
          WTF::fastFree(v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v26 = *((_DWORD *)v20 + 4);
        }
      }
      v28 = *(unsigned int *)(a4 + 12);
      if (v26 < v28)
      {
        if (v28 >> 30)
        {
          __break(0xC471u);
          return;
        }
        v29 = v20[1];
        v30 = *((unsigned int *)v20 + 5);
        v31 = WTF::fastMalloc((WTF *)(4 * v28));
        *((_DWORD *)v20 + 4) = v28;
        v20[1] = v31;
        if ((_DWORD)v30)
        {
          v34 = 4 * v30;
          v35 = (_DWORD *)v31;
          v36 = (int *)v29;
          do
          {
            v37 = *v36++;
            *v35++ = v37;
            v34 -= 4;
          }
          while (v34);
        }
        if (v29)
        {
          if (v31 == v29)
          {
            v20[1] = 0;
            *((_DWORD *)v20 + 4) = 0;
          }
          WTF::fastFree(v29, v32, v33, a4, a5, a6, a7, a8);
        }
      }
    }
    v25 = *((_DWORD *)v20 + 5);
  }
  else
  {
    *((_DWORD *)v20 + 5) = v25;
  }
  v38 = (char *)v20[1];
  if (v25)
  {
    memmove(v38, *(const void **)a4, 4 * v25);
    v39 = *((_DWORD *)v20 + 5);
    v38 = (char *)v20[1];
  }
  else
  {
    v39 = 0;
  }
  v41 = *(unsigned int *)(a4 + 12);
  if (v39 != (_DWORD)v41)
  {
    v42 = &v38[4 * v39];
    v43 = (int *)(*(_QWORD *)a4 + 4 * v39);
    v44 = 4 * v41 - 4 * v39;
    do
    {
      v45 = *v43++;
      *(_DWORD *)v42 = v45;
      v42 += 4;
      v44 -= 4;
    }
    while (v44);
    v39 = *(_DWORD *)(a4 + 12);
  }
  *((_DWORD *)v20 + 5) = v39;
  v46 = *a2;
  if (*a2)
    v47 = *(_DWORD *)(v46 - 12) + 1;
  else
    v47 = 1;
  *(_DWORD *)(v46 - 12) = v47;
  v48 = *a2;
  if (*a2)
    v49 = *(_DWORD *)(v48 - 12);
  else
    v49 = 0;
  v50 = (*(_DWORD *)(v48 - 16) + v49);
  v51 = *(unsigned int *)(v48 - 4);
  if (v51 > 0x400)
  {
    if (v51 > 2 * v50)
      goto LABEL_56;
    goto LABEL_48;
  }
  if (3 * v51 > 4 * v50)
    goto LABEL_56;
  if ((_DWORD)v51)
  {
LABEL_48:
    v52 = ((_DWORD)v51 << (6 * *(_DWORD *)(v48 - 12) >= (2 * v51)));
    goto LABEL_53;
  }
  v52 = 8;
LABEL_53:
  v20 = WTF::HashTable<JSC::B3::Variable *,WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Variable *>>::rehash(a2, v52, (uint64_t)v20, a4, a5, a6, a7, a8);
  v48 = *a2;
  if (*a2)
    LODWORD(v51) = *(_DWORD *)(v48 - 4);
  else
    LODWORD(v51) = 0;
LABEL_56:
  v54 = v48 + 24 * v51;
  v53 = 1;
LABEL_57:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v54;
  *(_BYTE *)(a1 + 16) = v53;
}

void *WTF::Vector<JSC::B3::Air::Tmp,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  void *result;

  v2 = a2;
  result = (void *)(a1 + 16);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = a2;
  if (a2 >= 2)
  {
    if (a2 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    result = (void *)WTF::fastMalloc((WTF *)(4 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = result;
    v2 = *(_DWORD *)(a1 + 12);
  }
  if (v2)
    bzero(result, 4 * v2);
  return (void *)a1;
}

uint64_t WTF::IndexSet<JSC::B3::Value *>::contains(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;

  if (!*(_QWORD *)a2)
    return 0;
  v2 = *(unsigned int *)(*(_QWORD *)a2 + 8);
  v3 = (_QWORD *)(2 * *a1);
  v4 = *a1 < 0 ? 63 : *v3;
  if (v4 <= v2)
    return 0;
  v5 = v3 + 1;
  if (*a1 >= 0)
    v6 = v5;
  else
    v6 = a1;
  return (*(unint64_t *)((char *)v6 + ((v2 >> 3) & 0x1FFFFFF8)) >> v2) & 1;
}

void JSC::B3::`anonymous namespace'::LowerToAir::lower(JSC::B3::_anonymous_namespace_::LowerToAir *this, uint32x4_t a2, uint32x4_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v10;
  int v11;
  int v12;
  JSC::B3::_anonymous_namespace_::LowerToAir *v13;
  uint64_t v14;
  __int16 v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  __int16 v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int16 *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  JSC::B3::Value **v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  JSC::B3::MemoryValue *v71;
  uint64_t v72;
  JSC::B3::Value **v73;
  uint64_t v74;
  JSC::B3::Value **v75;
  JSC::B3::Value *v76;
  int v77;
  uint64_t v78;
  _BYTE *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  int v84;
  int k;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  __int128 v96;
  __int128 v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  JSC::B3::Value **v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int8x16_t *v118;
  uint64_t v119;
  __int128 *v120;
  unint64_t v121;
  unint64_t v122;
  _OWORD *v123;
  __int128 v124;
  uint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  _OWORD *v128;
  __int128 v129;
  __int128 v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  __int128 v140;
  __int128 v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unsigned int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  JSC::B3::Value **v152;
  uint64_t v153;
  JSC::B3::MemoryValue *v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  unsigned __int8 *v170;
  uint64_t v171;
  uint64_t v172;
  __int16 v173;
  int v174;
  BOOL v175;
  BOOL v176;
  unint64_t v177;
  int v178;
  unint64_t v179;
  JSC::B3::Value *v180;
  uint64_t v181;
  int v182;
  BOOL v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  JSC::B3::Value *v187;
  JSC::B3::Value *v188;
  JSC::B3::Value *v189;
  int v190;
  BOOL v191;
  int v192;
  BOOL v193;
  uint64_t v194;
  JSC::B3::Value *v195;
  JSC::B3::Value *v196;
  int v197;
  BOOL v198;
  int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  unsigned int v208;
  unint64_t v209;
  unint64_t *v210;
  uint64_t v211;
  int v212;
  char v213;
  uint64_t v214;
  int v215;
  int v216;
  char v217;
  int v218;
  int v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  JSC::B3::Value **v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _OWORD *v232;
  __int128 *v233;
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  int v237;
  uint64_t v238;
  _BYTE *v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  JSC::B3::Value *v250;
  unsigned int v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  unsigned int *v282;
  int v283;
  uint64_t *v284;
  unint64_t v285;
  int v286;
  uint64_t v287;
  JSC::B3::Value *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  JSC::B3::Value *v292;
  unsigned int v293;
  unsigned int v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  BOOL v306;
  int v307;
  BOOL v308;
  uint64_t v309;
  BOOL v310;
  unsigned int v311;
  unint64_t v312;
  int v313;
  unint64_t v314;
  int v315;
  unint64_t v316;
  unsigned int v317;
  int v318;
  uint64_t v319;
  int v320;
  unsigned int v321;
  int v322;
  uint64_t v323;
  BOOL v324;
  int v325;
  int v326;
  int v327;
  int v328;
  uint64_t v329;
  BOOL v330;
  int v331;
  _BOOL4 v332;
  int v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  _DWORD *v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  BOOL v354;
  BOOL v355;
  uint64_t v356;
  unsigned int *v357;
  JSC::B3::Value **v358;
  uint64_t v359;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  char v365;
  unsigned int v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  uint64_t v373;
  _OWORD *v374;
  uint64_t v375;
  __int128 *v376;
  uint64_t v377;
  __int128 v378;
  __int128 v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  unint64_t v383;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  uint64_t v393;
  unsigned int v394;
  __int16 v395;
  char v396;
  uint64_t v397;
  char v398;
  int v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  char v409;
  unsigned int v410;
  unsigned __int16 v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  JSC::B3::Value *v423;
  uint64_t v424;
  int *v425;
  int v426;
  BOOL v427;
  BOOL v428;
  uint64_t v429;
  unsigned int v430;
  unsigned int v431;
  uint64_t v432;
  JSC::B3::Value *v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  unint64_t v437;
  uint64_t v438;
  JSC::B3::Value *v439;
  unsigned int v440;
  unsigned int v441;
  void *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  _BOOL4 v452;
  int v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  unsigned int v460;
  unsigned int v461;
  BOOL v462;
  char v463;
  unsigned int v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  int v474;
  unsigned int v475;
  char v476;
  int v477;
  int v478;
  unsigned int v479;
  int v480;
  BOOL v481;
  int v482;
  int v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  __int128 *v492;
  uint64_t v493;
  unint64_t v494;
  unint64_t v495;
  _OWORD *v496;
  __int128 v497;
  __int128 v498;
  uint64_t v499;
  _BYTE *v500;
  uint64_t v501;
  _OWORD *v502;
  __int128 v503;
  __int128 v504;
  _BYTE *v505;
  uint64_t v506;
  _BYTE *v507;
  unsigned int v508;
  uint64_t v509;
  uint64_t v510;
  int v511;
  uint64_t v512;
  uint64_t v513;
  _OWORD *v514;
  uint64_t v515;
  uint64_t v516;
  __int128 *v517;
  __int128 v518;
  __int128 v519;
  int v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  JSC::B3::Value *v524;
  JSC::B3::Value *v525;
  unsigned int v526;
  unsigned int v527;
  BOOL v528;
  char v529;
  unsigned int v530;
  int v531;
  JSC::ARM64LogicalImmediate *v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  JSC::B3::Value *v540;
  unsigned int v541;
  unsigned int v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unsigned int v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  _OWORD *v558;
  __int128 *v559;
  uint64_t v560;
  __int128 v561;
  __int128 v562;
  int v563;
  uint64_t v564;
  uint64_t v565;
  JSC::B3::Value *v566;
  JSC::B3::Value **v567;
  JSC::B3::Value *v568;
  uint64_t v569;
  uint64_t v570;
  unint64_t v571;
  unint64_t *v572;
  unint64_t v573;
  JSC::B3::_anonymous_namespace_::LowerToAir *v574;
  JSC::B3::_anonymous_namespace_::LowerToAir *v575;
  char v576;
  int v577;
  unsigned int v578;
  JSC::B3::Value **v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  int v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  unsigned int v596;
  unsigned int v597;
  __int16 v598;
  int v599;
  BOOL v600;
  int v601;
  BOOL v602;
  int v603;
  unint64_t v604;
  uint64_t v605;
  int v606;
  BOOL v607;
  int v608;
  unsigned int v609;
  unsigned int v610;
  unsigned int v611;
  uint64_t v612;
  JSC::B3::Value **v613;
  int v614;
  BOOL v615;
  BOOL v616;
  unint64_t v617;
  unint64_t *v618;
  unint64_t v619;
  JSC::B3::_anonymous_namespace_::LowerToAir *v620;
  JSC::B3::_anonymous_namespace_::LowerToAir *v621;
  uint64_t v622;
  int v624;
  unint64_t v625;
  unsigned int v626;
  unsigned int v627;
  void *v628;
  uint64_t v629;
  uint64_t v630;
  __int16 v631;
  int v632;
  int v633;
  uint64_t v634;
  BOOL v635;
  int v636;
  _BOOL4 v637;
  int v638;
  uint64_t v639;
  BOOL v640;
  int v641;
  _BOOL4 v642;
  int v643;
  int v644;
  uint64_t v645;
  int v646;
  void *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  unsigned int v655;
  unsigned int v656;
  unsigned int v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  JSC::B3::Value *v665;
  unsigned int v666;
  unsigned int v667;
  void *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  int v674;
  uint64_t v675;
  BOOL v676;
  int v677;
  _BOOL4 v678;
  int v680;
  uint64_t v681;
  BOOL v682;
  int v683;
  _BOOL4 v684;
  _BOOL4 v685;
  char v686;
  int v688;
  unsigned int v689;
  unsigned int v690;
  void *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  _BOOL4 v702;
  uint64_t v703;
  _QWORD *v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  unsigned int v708;
  unsigned int v709;
  void *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  JSC::B3::_anonymous_namespace_::LowerToAir *v727;
  JSC::B3::Value *v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  unsigned int v741;
  unint64_t v742;
  unsigned int v743;
  unsigned int v744;
  int v745;
  int v746;
  int v747;
  char v748;
  char v749;
  unsigned int v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  unsigned int v756;
  unsigned int v757;
  BOOL v758;
  char v759;
  unsigned int v760;
  unsigned int v761;
  unsigned int v762;
  char v763;
  int v764;
  unsigned int v765;
  JSC::B3::Value **v766;
  char v767;
  int v768;
  unsigned int v769;
  JSC::B3::Value **v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  int v779;
  int v780;
  uint64_t v781;
  unint64_t j;
  int v783;
  BOOL v784;
  BOOL v785;
  unsigned int v786;
  _OWORD *v787;
  __int128 v788;
  __int128 v789;
  uint64_t v790;
  __int128 *v791;
  unsigned int v792;
  uint64_t v793;
  uint64_t v794;
  int v795;
  uint64_t v796;
  uint64_t v797;
  _OWORD *v798;
  uint64_t v799;
  uint64_t v800;
  __int128 *v801;
  __int128 v802;
  __int128 v803;
  int v804;
  uint64_t v805;
  uint64_t v806;
  unsigned int v807;
  unsigned int v808;
  int v809;
  uint64_t v810;
  uint64_t v811;
  int v812;
  JSC::B3::_anonymous_namespace_::LowerToAir *v813;
  JSC::B3::Value *v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  unint64_t v820;
  unint64_t v821;
  unint64_t v822;
  unsigned int v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  _OWORD *v827;
  __int128 *v828;
  uint64_t v829;
  __int128 v830;
  __int128 v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  BOOL v842;
  int v843;
  unsigned int *v844;
  char v845;
  int v846;
  int v847;
  int v848;
  __int16 v849;
  char v850;
  char v851;
  int v852;
  int v853;
  int v854;
  char v855;
  char v856;
  unsigned int v857;
  uint64_t v858;
  unsigned int v859;
  unsigned int v860;
  uint64_t v861;
  int v862;
  int v863;
  uint64_t v864;
  JSC::B3::Value **v865;
  JSC::B3::Value *v866;
  uint64_t v867;
  uint64_t v868;
  unsigned __int8 **v869;
  uint64_t v870;
  uint64_t v871;
  unsigned int v872;
  unsigned int v873;
  int v874;
  int v875;
  int v876;
  __int16 v877;
  char v878;
  char v879;
  uint64_t v880;
  void *v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  unint64_t v888;
  int v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  unsigned int v896;
  unsigned int v897;
  int v898;
  int v899;
  int v900;
  char v901;
  char v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  int v906;
  BOOL v907;
  BOOL v908;
  uint64_t v909;
  unint64_t v910;
  uint64_t v911;
  unint64_t v912;
  uint64_t v913;
  int v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  int v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  unint64_t v925;
  BOOL v926;
  unsigned int v927;
  unsigned int v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  _OWORD *v932;
  __int128 *v933;
  uint64_t v934;
  uint64_t v935;
  __int128 v936;
  __int128 v937;
  int v938;
  int v939;
  uint64_t v940;
  uint64_t v941;
  unint64_t v942;
  BOOL v943;
  _OWORD *v944;
  uint64_t v945;
  __int128 *v946;
  uint64_t v947;
  __int128 v948;
  __int128 v949;
  int v950;
  uint64_t v951;
  uint64_t v952;
  int v953;
  unint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  _OWORD *v958;
  __int128 *v959;
  uint64_t v960;
  uint64_t v961;
  __int128 v962;
  __int128 v963;
  int v964;
  uint64_t v965;
  uint64_t v966;
  int v967;
  BOOL v968;
  BOOL v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  JSC::B3::Value *v983;
  unsigned int v984;
  unsigned int v985;
  unsigned int v986;
  int v987;
  uint64_t v988;
  unsigned int v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  void *v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  unint64_t v1005;
  uint64_t v1006;
  JSC::B3::Value *v1007;
  unsigned int v1008;
  uint64_t v1009;
  int v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  void *v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  int v1022;
  int v1023;
  int v1024;
  int v1025;
  char v1026;
  char v1027;
  unint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  _OWORD *v1032;
  __int128 *v1033;
  uint64_t v1034;
  uint64_t v1035;
  __int128 v1036;
  __int128 v1037;
  int v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  int v1046;
  uint64_t v1047;
  unsigned int v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  JSC::B3::Value **v1056;
  unsigned int v1057;
  unsigned int v1058;
  JSC::B3::Value *v1059;
  uint64_t v1060;
  int v1061;
  uint64_t v1062;
  BOOL v1063;
  int v1064;
  _BOOL4 v1065;
  int v1066;
  _BOOL4 v1067;
  char v1068;
  uint64_t v1069;
  int v1070;
  BOOL v1071;
  BOOL v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  unsigned int v1079;
  unsigned int v1080;
  unsigned __int16 v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  unsigned int v1087;
  int v1088;
  _OWORD *v1089;
  uint64_t v1090;
  __int128 *v1091;
  __int128 v1092;
  __int128 v1093;
  int v1094;
  unsigned int v1095;
  uint64_t v1096;
  int v1097;
  int v1098;
  int v1099;
  char v1100;
  char v1101;
  uint64_t v1102;
  uint64_t v1103;
  unint64_t v1104;
  BOOL v1105;
  unsigned int v1107;
  unsigned int v1108;
  BOOL v1109;
  char v1110;
  unsigned int v1111;
  BOOL v1112;
  JSC::B3::Value **v1113;
  JSC::B3::Value *v1114;
  uint64_t v1115;
  uint64_t v1116;
  unsigned __int8 **v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  unint64_t v1121;
  BOOL v1122;
  int v1124;
  uint64_t v1125;
  int v1126;
  uint64_t v1127;
  uint64_t v1128;
  unsigned int v1129;
  int v1130;
  int v1131;
  uint64_t v1132;
  uint64_t v1133;
  int v1134;
  unsigned int v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  JSC::B3::Value *v1144;
  unsigned int v1145;
  unsigned int v1146;
  unsigned int v1147;
  unsigned int v1148;
  unsigned int v1149;
  char v1150;
  unsigned int v1151;
  unsigned int *v1152;
  uint64_t *v1153;
  uint64_t v1154;
  unint64_t v1155;
  _QWORD *v1156;
  unint64_t v1157;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1158;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1159;
  int v1160;
  BOOL v1161;
  _BOOL4 v1162;
  BOOL v1163;
  uint64_t v1164;
  int v1165;
  uint64_t i;
  uint64_t v1167;
  _QWORD *v1168;
  unint64_t v1169;
  unint64_t v1170;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1171;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  unint64_t v1180;
  BOOL v1181;
  BOOL v1182;
  unsigned __int16 v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  void *v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  unint64_t v1203;
  unsigned int v1204;
  unsigned int v1205;
  unsigned int v1206;
  unsigned int v1207;
  unsigned int v1208;
  unsigned int v1209;
  unsigned int v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  void *v1218;
  uint64_t v1219;
  unint64_t v1220;
  int v1221;
  uint64_t v1222;
  int v1223;
  uint64_t v1224;
  unsigned int v1225;
  unsigned int v1226;
  uint64_t *v1227;
  int v1228;
  uint64_t v1229;
  char v1230;
  int v1231;
  int v1232;
  unsigned int v1233;
  unsigned int v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  _OWORD *v1238;
  uint64_t v1239;
  uint64_t v1240;
  __int128 *v1241;
  __int128 v1242;
  __int128 v1243;
  int v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  int v1248;
  BOOL v1249;
  char v1250;
  JSC::ARM64LogicalImmediate *v1251;
  int v1252;
  JSC::ARM64LogicalImmediate *v1253;
  int v1254;
  uint64_t v1255;
  char v1256;
  unint64_t v1257;
  unint64_t v1258;
  unint64_t v1259;
  unint64_t v1260;
  unint64_t v1261;
  unint64_t v1262;
  unsigned int v1263;
  unsigned __int8 v1264;
  void *v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  unint64_t v1272;
  void *v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  unint64_t v1280;
  char v1281;
  unsigned int v1282;
  uint64_t v1283;
  JSC::B3::Value *v1284;
  unsigned int v1285;
  unsigned int v1286;
  void *v1287;
  uint64_t v1288;
  int v1289;
  _BOOL4 v1290;
  unsigned int v1291;
  unsigned int v1292;
  void *v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  unsigned __int16 v1304;
  uint64_t v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  BOOL v1321;
  int v1322;
  unsigned int *v1323;
  int v1324;
  int v1325;
  char v1326;
  int v1327;
  __int16 v1328;
  char v1329;
  char v1330;
  uint64_t v1331;
  unint64_t v1332;
  unint64_t *v1333;
  unint64_t v1334;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1335;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1336;
  uint64_t v1337;
  unint64_t v1338;
  unint64_t *v1339;
  unint64_t v1340;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1341;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1342;
  uint64_t v1343;
  JSC::B3::Value **v1344;
  uint64_t v1345;
  JSC::B3::Value **v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  uint64_t v1352;
  void *v1353;
  uint64_t v1354;
  uint64_t v1355;
  int v1356;
  int v1357;
  char v1358;
  char v1359;
  int v1360;
  int v1361;
  unsigned int v1362;
  uint64_t v1363;
  int v1364;
  uint64_t v1365;
  BOOL v1366;
  int v1367;
  unsigned int *v1368;
  int v1369;
  int v1370;
  char v1371;
  int v1372;
  __int16 v1373;
  char v1374;
  char v1375;
  uint64_t v1376;
  unsigned int *v1377;
  unsigned int *v1378;
  unsigned int v1379;
  int v1380;
  unint64_t v1381;
  unint64_t *v1382;
  unint64_t v1383;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1384;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1385;
  unint64_t v1386;
  unint64_t *v1387;
  unint64_t v1388;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1389;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1390;
  int v1391;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1392;
  JSC::B3::Value *v1393;
  int v1394;
  int v1395;
  int v1396;
  JSC::B3::Value *v1397;
  int v1398;
  uint64_t v1399;
  int v1400;
  unsigned int *v1401;
  uint64_t v1402;
  uint64_t v1403;
  int v1404;
  unint64_t v1405;
  JSC::B3::_anonymous_namespace_::LowerToAir *v1406;
  uint64_t v1407;
  unsigned int v1408;
  uint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  unsigned int v1416;
  int v1417;
  unsigned int v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  uint64_t v1423;
  uint64_t v1424;
  uint64_t v1425;
  JSC::B3::Value *v1426;
  unsigned int *v1427;
  JSC::B3::Value **v1428;
  JSC::B3::Value *v1429;
  int v1430;
  unsigned int v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  uint64_t v1436;
  uint64_t v1437;
  uint64_t v1438;
  unsigned int v1439;
  unsigned int v1440;
  uint64_t v1441;
  int v1442;
  uint64_t v1443;
  unsigned int v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  int v1448;
  BOOL v1449;
  _BOOL4 v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  unint64_t v1454;
  uint8x8_t v1455;
  __int32 v1456;
  uint8x8_t v1457;
  uint64_t v1458;
  unint64_t v1459;
  int v1460;
  int v1461;
  int v1462;
  uint64_t v1463;
  int v1464;
  uint64_t v1465;
  unsigned int v1466;
  unsigned int v1467;
  JSC::B3::Value *v1468;
  unsigned __int16 v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  JSC::B3::Value *v1476;
  uint64_t v1477;
  JSC::B3::Value *v1478;
  JSC::B3::Value *v1479;
  unsigned __int16 v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  JSC::B3::Value *v1487;
  unint64_t v1488;
  uint64_t v1489;
  unint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  unsigned int v1493;
  __int128 v1494;
  __int128 v1495;
  void *v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  unint64_t v1503;
  unint64_t v1504;
  JSC::B3::Value **v1505;
  JSC::B3::Value **v1506;
  JSC::B3::Value **v1507;
  uint64_t v1508;
  uint64_t v1509;
  int v1510;
  BOOL v1511;
  _BOOL4 v1512;
  uint64_t v1513;
  uint64_t v1514;
  int v1515;
  BOOL v1516;
  _BOOL4 v1517;
  uint64_t v1518;
  uint64_t v1519;
  int v1520;
  BOOL v1521;
  _BOOL4 v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  unint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  uint64_t v1529;
  uint64_t v1530;
  uint64_t v1531;
  unint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  int v1535;
  BOOL v1536;
  BOOL v1537;
  uint64_t v1538;
  void *v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  uint64_t v1545;
  JSC::B3::_anonymous_namespace_::LowerToAir::ArgPromise *v1546;
  uint64_t v1547;
  uint64_t v1548;
  uint64_t v1549;
  _BOOL4 v1550;
  unsigned int v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  void *v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  uint64_t v1563;
  uint64_t v1564;
  uint64_t v1565;
  unint64_t v1566;
  unsigned __int16 v1567;
  uint64_t v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  JSC::B3::Value *v1574;
  uint64_t v1575;
  BOOL v1576;
  uint64_t v1577;
  BOOL v1578;
  JSC::B3::Value **v1579;
  JSC::B3::Value **v1580;
  unint64_t v1581;
  uint64_t v1582;
  unint64_t v1583;
  uint64_t v1584;
  unsigned int v1585;
  unsigned __int16 v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  uint64_t v1593;
  uint64_t v1594;
  JSC::B3::Value **v1595;
  unsigned int **v1596;
  JSC::B3::Value **v1597;
  unint64_t v1598;
  uint64_t v1599;
  unint64_t v1600;
  uint64_t v1601;
  int v1602;
  unint64_t v1603;
  uint64_t v1604;
  unint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  int v1611;
  BOOL v1612;
  BOOL v1613;
  uint64_t v1614;
  JSC::B3::Value *v1615;
  JSC::B3::Value **v1616;
  JSC::B3::Value **v1617;
  JSC::B3::Value **v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  int v1622;
  BOOL v1623;
  _BOOL4 v1624;
  uint64_t v1625;
  uint64_t v1626;
  int v1627;
  BOOL v1628;
  _BOOL4 v1629;
  uint64_t v1630;
  uint64_t v1631;
  int v1632;
  BOOL v1633;
  _BOOL4 v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  unint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  uint64_t v1643;
  unint64_t v1644;
  uint64_t v1645;
  JSC::B3::Value **v1646;
  JSC::B3::Value **v1647;
  unsigned int v1648;
  unsigned int v1649;
  __int16 v1650;
  unsigned __int16 v1651;
  unsigned __int16 v1652;
  unsigned int v1653;
  uint64_t v1654;
  JSC::B3::Value **v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  unint64_t v1661;
  uint64_t v1662;
  unint64_t v1663;
  uint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  void *v1673;
  uint64_t v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  unint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  unint64_t v1687;
  uint64_t v1688;
  unint64_t v1689;
  uint64_t v1690;
  JSC::B3::Value *v1691;
  uint64_t v1692;
  uint64_t v1693;
  uint64_t v1694;
  uint64_t v1695;
  uint64_t v1696;
  unsigned int v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  uint64_t v1703;
  uint64_t v1704;
  void *v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  uint64_t v1711;
  unint64_t v1712;
  unint64_t v1713;
  uint64_t v1714;
  unint64_t v1715;
  uint64_t v1716;
  JSC::B3::Value *v1717;
  uint64_t v1718;
  unint64_t v1719;
  uint64_t v1720;
  uint64_t *v1721;
  uint64_t *v1722;
  uint64_t *v1723;
  unint64_t v1724;
  uint64_t v1725;
  unsigned __int16 v1726;
  uint64_t v1727;
  uint64_t v1728;
  uint64_t v1729;
  uint64_t v1730;
  JSC::B3::Value **v1731;
  JSC::B3::Value **v1732;
  int v1733;
  uint64_t v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  uint64_t v1738;
  uint64_t v1739;
  unint64_t v1740;
  uint64_t v1741;
  unint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  int v1745;
  unsigned int v1747;
  unsigned int v1748;
  int v1749;
  uint64_t v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  unsigned int v1755;
  uint64_t v1757;
  uint64_t v1758;
  int v1759;
  uint64_t v1761;
  JSC::B3::Value **v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  uint64_t v1767;
  uint64_t v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  uint64_t v1775;
  uint64_t v1776;
  uint64_t v1777;
  JSC::B3::MemoryValue *v1778;
  JSC::B3::Value **v1779;
  uint64_t v1780;
  uint64_t v1781;
  JSC::B3::Value **v1782;
  uint64_t v1783;
  unint64_t v1784;
  uint64_t v1785;
  uint64_t *v1786;
  uint64_t *v1787;
  uint64_t *v1788;
  unint64_t v1789;
  uint64_t v1790;
  unsigned __int16 v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  uint64_t v1797;
  uint64_t v1798;
  uint64_t *v1799;
  uint64_t *v1800;
  uint64_t v1801;
  JSC::B3::Value *v1802;
  uint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  JSC::B3::Value *v1808;
  uint64_t v1809;
  uint64_t v1810;
  uint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  uint64_t *v1814;
  uint64_t *v1815;
  JSC::B3::Value *v1816;
  uint64_t v1817;
  JSC::B3::Value *v1818;
  JSC::B3::Value *v1819;
  uint64_t v1820;
  uint64_t *v1821;
  int v1822;
  int v1823;
  uint64_t v1824;
  JSC::B3::Value **v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  uint64_t v1829;
  uint64_t v1830;
  uint64_t v1831;
  JSC::B3::Value **v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  uint64_t v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  uint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  void *v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t v1847;
  uint64_t v1848;
  uint64_t v1849;
  uint64_t v1850;
  unint64_t v1851;
  uint64_t v1852;
  JSC::B3::Value **v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  uint64_t v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  JSC::B3::Value **v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  uint64_t v1877;
  JSC::B3::Value **v1878;
  uint64_t v1879;
  JSC::B3::Value **v1880;
  char v1881;
  JSC::B3::Value **v1882;
  int v1883;
  JSC::B3::Value **v1884;
  int v1885;
  JSC::B3::Value **v1886;
  int v1887;
  int v1888;
  uint64_t v1889;
  int v1890;
  int v1891;
  uint64_t v1892;
  int v1893;
  char v1894;
  JSC::B3::Value **v1895;
  JSC::B3::Value **v1896;
  JSC::B3::Value **v1897;
  uint64_t v1898;
  int v1899;
  int v1900;
  int v1901;
  char v1902;
  int v1903;
  JSC::B3::Value **v1904;
  int v1905;
  JSC::B3::Value **v1906;
  int v1907;
  int v1908;
  int v1909;
  int v1910;
  int v1911;
  uint64_t v1912;
  int v1913;
  int v1914;
  int v1915;
  int v1916;
  uint64_t v1917;
  int v1918;
  int v1919;
  int v1920;
  int v1921;
  uint64_t v1922;
  unsigned int v1923;
  uint64_t v1924;
  int v1925;
  uint64_t v1926;
  uint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  uint64_t v1931;
  void *v1932;
  unint64_t v1933;
  uint64_t v1934;
  uint64_t v1935;
  int v1936;
  uint64_t v1937;
  uint64_t v1938;
  uint64_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  unsigned int v1942;
  BOOL v1943;
  unsigned __int16 v1944;
  char v1945;
  JSC::B3::Value **v1946;
  uint64_t v1947;
  uint64_t v1948;
  JSC::B3::Value **v1949;
  uint64_t v1950;
  uint64_t v1951;
  uint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  unsigned __int16 v1955;
  uint64_t v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  unsigned __int16 v1960;
  uint64_t v1961;
  JSC::B3::Value **v1962;
  uint64_t v1963;
  int v1964;
  int v1965;
  int v1966;
  int v1967;
  int v1968;
  JSC::B3::Value **v1969;
  uint64_t v1970;
  JSC::B3::Value **v1971;
  uint64_t v1972;
  uint64_t v1973;
  BOOL v1974;
  uint64_t v1975;
  uint64_t v1976;
  int v1977;
  JSC::B3::Value **v1978;
  JSC::B3::Value **v1979;
  uint64_t v1980;
  uint64_t v1981;
  int v1982;
  BOOL v1983;
  BOOL v1984;
  uint64_t v1985;
  JSC::B3::MemoryValue *v1986;
  uint64_t *v1987;
  uint64_t v1988;
  uint64_t v1989;
  uint64_t v1990;
  uint64_t *v1991;
  unint64_t v1992;
  unint64_t v1993;
  uint64_t v1994;
  unint64_t v1995;
  uint64_t v1996;
  unint64_t v1997;
  uint64_t v1998;
  unint64_t v1999;
  uint64_t v2000;
  JSC::B3::Value **v2001;
  uint64_t v2002;
  uint64_t v2003;
  uint64_t v2004;
  uint64_t v2005;
  uint64_t v2006;
  JSC::B3::Value **v2007;
  uint64_t v2008;
  uint64_t v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  JSC::B3::Value **v2013;
  int v2014;
  int v2015;
  JSC::B3::Value **v2016;
  int v2017;
  JSC::B3::Value **v2018;
  int v2019;
  uint64_t v2020;
  int v2021;
  unint64_t v2022;
  uint64_t v2023;
  unint64_t v2024;
  uint64_t v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  int v2030;
  unsigned __int16 v2031;
  JSC::B3::Value **v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  uint64_t v2037;
  uint64_t v2038;
  unsigned int v2039;
  BOOL v2040;
  unsigned int v2041;
  uint64_t v2042;
  int v2043;
  uint64_t v2044;
  int v2045;
  uint64_t v2046;
  __int16 v2047;
  int v2048;
  int v2049;
  JSC::B3::Value **v2050;
  JSC::B3::Value *v2051;
  JSC::B3::_anonymous_namespace_::LowerToAir *v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  JSC::B3::Value **v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  unint64_t v2066;
  unint64_t v2067;
  unint64_t v2068;
  unint64_t v2069;
  unint64_t v2070;
  unsigned int v2071;
  unsigned __int16 v2072;
  JSC::B3::Value **v2073;
  uint64_t v2074;
  uint64_t v2075;
  uint64_t v2076;
  uint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  uint64_t v2083;
  uint64_t v2084;
  JSC::B3::Value *v2085;
  JSC::B3::_anonymous_namespace_::LowerToAir *v2086;
  __int16 v2087;
  __int16 v2088;
  uint64_t v2089;
  uint64_t v2090;
  unsigned int v2091;
  unsigned int v2092;
  int v2093;
  char v2094;
  int v2095;
  unsigned int v2096;
  unsigned int v2097;
  unsigned int v2098;
  JSC::B3::Value *v2099;
  unsigned int v2100;
  unsigned int v2101;
  uint64_t v2102;
  __int16 v2103;
  int v2104;
  uint64_t v2105;
  uint64_t v2106;
  _BYTE v2107[32];
  uint64_t v2108;
  __int16 v2109;
  int v2110;
  uint64_t v2111;
  uint64_t v2112;
  int8x16_t v2113;
  uint64_t v2114;
  __int16 v2115;
  int v2116;
  uint64_t v2117;
  char v2118;
  uint64_t v2119;
  __int16 v2120;
  int v2121;
  uint64_t v2122;
  char v2123;
  uint64_t v2124;
  __int16 v2125;
  int v2126;
  uint64_t v2127;
  char v2128;
  uint64_t v2129;
  __int16 v2130;
  int v2131;
  uint64_t v2132;
  char v2133;
  uint64_t v2134;
  __int16 v2135;
  int v2136;
  uint64_t v2137;
  char v2138;
  uint64_t v2139;
  __int16 v2140;
  int v2141;
  uint64_t v2142;
  char v2143;
  uint64_t v2144;
  __int16 v2145;
  int v2146;
  uint64_t v2147;
  char v2148;
  uint64_t v2149;
  __int16 v2150;
  int v2151;
  uint64_t v2152;
  char v2153;
  uint64_t v2154;
  __int16 v2155;
  int v2156;
  uint64_t v2157;
  char v2158;
  uint64_t v2159;
  __int16 v2160;
  int v2161;
  uint64_t v2162;
  char v2163;
  uint64_t v2164;
  __int16 v2165;
  int v2166;
  uint64_t v2167;
  char v2168;
  uint64_t v2169;
  __int16 v2170;
  int v2171;
  uint64_t v2172;
  char v2173;
  uint64_t v2174;
  __int16 v2175;
  int v2176;
  uint64_t v2177;
  char v2178;
  uint64_t v2179;
  __int16 v2180;
  int v2181;
  uint64_t v2182;
  char v2183;
  uint64_t v2184;
  __int16 v2185;
  int v2186;
  uint64_t v2187;
  char v2188;
  uint64_t v2189;
  __int16 v2190;
  int v2191;
  uint64_t v2192;
  char v2193;
  _QWORD v2194[2];
  _QWORD v2195[2];
  _QWORD v2196[2];
  _QWORD v2197[2];
  _QWORD v2198[2];
  _QWORD v2199[2];
  JSC::B3::_anonymous_namespace_::LowerToAir *v2200;
  _QWORD v2201[2];
  _BYTE v2202[32];
  uint64_t *v2203[2];
  char v2204;
  BOOL v2205;
  JSC::B3::Value *v2206;
  _BYTE v2207[32];
  _QWORD v2208[2];
  _BYTE v2209[32];
  __int128 v2210;
  __int128 *v2211;
  __int128 v2212;
  __int128 v2213;
  __int128 v2214;
  __int128 v2215;
  JSC::ARM64LogicalImmediate *v2216;
  char v2217;
  JSC::B3::Value *v2218;
  _BYTE v2219[64];
  __int128 v2220;
  _BYTE v2221[12];
  _BYTE v2222[40];
  __int16 v2223;
  char v2224;
  _BYTE v2225[64];
  __int128 v2226;
  uint64_t v2227;
  __int16 v2228;
  int v2229;
  uint64_t v2230;
  char v2231;
  _BYTE v2232[12];
  uint64_t v2233;

  v13 = this;
  v2233 = *MEMORY[0x1E0C80C00];
  v14 = *((_QWORD *)this + 50);
  v15 = *(_WORD *)(v14 + 12);
  v16 = v2207;
  switch((char)v15)
  {
    case 0:
    case 1:
    case 2:
    case 13:
    case 44:
      return;
    case 3:
    case 4:
      v29 = v15 & 0xFFF;
      if (v29 == 3)
      {
        v204 = *(_DWORD *)(v14 + 40);
        v205 = v204;
      }
      else
      {
        if (v29 != 4)
          goto LABEL_14;
        v205 = *(_QWORD *)(v14 + 40);
        v204 = v205;
      }
      if ((unint64_t)(v205 + 4095) <= 0x1FFE
        || (v205 & 0xFFF) == 0 && (!((unint64_t)v205 >> 24) || (unint64_t)((v205 >> 12) + 4095) < 0x1000))
      {
        if (v29 == 3)
          v31 = v204;
        else
          v31 = *(_QWORD *)(v14 + 40);
        if ((unint64_t)(v31 + 4095) > 0x1FFE
          && ((v31 & 0xFFF) != 0 || (unint64_t)v31 >> 24 && (unint64_t)((v31 >> 12) + 4095) >= 0x1000))
        {
          *(_QWORD *)v2225 = 0;
          *(_WORD *)&v2225[8] = 512;
          *(_DWORD *)&v2225[12] = 1;
          *(_QWORD *)&v2225[16] = 0;
          v2225[24] = 0;
LABEL_20:
          v38 = (uint64_t)v13;
          v39 = 90;
LABEL_21:
          return;
        }
        *(_DWORD *)&v2225[12] = 1;
        *(_QWORD *)&v2225[16] = 0;
        v2225[24] = 0;
        v32 = 514;
LABEL_19:
        *(_WORD *)&v2225[8] = v32;
        *(_QWORD *)v2225 = v31;
        goto LABEL_20;
      }
      if (v29 == 3)
      {
        v31 = v204;
LABEL_18:
        *(_DWORD *)&v2225[12] = 1;
        *(_QWORD *)&v2225[16] = 0;
        v2225[24] = 0;
        v32 = 515;
        goto LABEL_19;
      }
LABEL_14:
      if (v29 == 4)
        v30 = *((_QWORD *)this + 50);
      else
        v30 = 0;
      v31 = *(_QWORD *)(v30 + 40);
      goto LABEL_18;
    case 5:
    case 6:
      v1046 = v15 & 0xFFF;
      if (*(_WORD *)(v14 + 12) == 6)
      {
        if (v1046 == 6)
          v1608 = *((_QWORD *)this + 50);
        else
          v1608 = 0;
        if (*(_DWORD *)(v1608 + 40))
        {
          __break(0xC471u);
          JUMPOUT(0x197FB63A4);
        }
      }
      else
      {
        if (v1046 == 5)
          v1047 = *((_QWORD *)this + 50);
        else
          v1047 = 0;
        if (*(_QWORD *)(v1047 + 40))
        {
          __break(0xC471u);
          JUMPOUT(0x197FB9350);
        }
      }
      v266 = (uint64_t)v13;
      v267 = 114;
      goto LABEL_265;
    case 7:
      if ((v15 & 0xFFF) == 7)
        v1801 = *((_QWORD *)this + 50);
      else
        v1801 = 0;
      if (*(_OWORD *)(v1801 + 40) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB9D24);
      }
      v266 = (uint64_t)v13;
      v267 = 380;
      goto LABEL_265;
    case 8:
      *(_QWORD *)v2225 = this;
      return;
    case 9:
      v1802 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::Variable *>>,JSC::B3::Variable *>((uint64_t)v2225, *((_QWORD *)v13 + 9), *(_QWORD *)(*((_QWORD *)v13 + 50) + 40));
      *(_QWORD *)v2219 = v13;
      *(_QWORD *)&v2219[8] = v2225;
      goto LABEL_2498;
    case 10:
      WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::Variable *>>,JSC::B3::Variable *>((uint64_t)v2225, *((_QWORD *)this + 9), *(_QWORD *)(v14 + 40));
      v1808 = (JSC::B3::Value *)*((_QWORD *)v13 + 50);
      *(_QWORD *)v2219 = v13;
      *(_QWORD *)&v2219[8] = v2225;
LABEL_2498:
      v65 = *(_QWORD *)v2225;
      goto LABEL_240;
    case 11:
      if ((v15 & 0xFFF) == 0xB)
        v870 = *((_QWORD *)this + 50);
      else
        v870 = 0;
      v871 = *(_QWORD *)(v870 + 40);
      *(_QWORD *)&v2225[16] = 0;
      v2225[24] = 0;
      *(_WORD *)&v2225[8] = 521;
      *(_QWORD *)v2225 = v871;
      *(_DWORD *)&v2225[12] = 0;
      v38 = (uint64_t)v13;
      v39 = 49;
      goto LABEL_21;
    case 12:
      v1225 = *(_DWORD *)(v14 + 16);
      if (v1225 >= 0x80000000)
        v1225 = 0x80000000;
      v1226 = v1225 - 1;
      if (v1226 >= 5)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB9DA4);
      }
      v1227 = (uint64_t *)((char *)this + 368);
      v1228 = dword_19914FA14[v1226];
      if ((v15 & 0xFFF) == 0xC)
        v1229 = *((_QWORD *)this + 50);
      else
        v1229 = 0;
      v1230 = *(_BYTE *)(v1229 + 40);
      v1231 = v1230 & 0x7F;
      if ((v1230 & 0x60) != 0)
        v1232 = (char)(31 - (v1230 & 0x7F));
      else
        v1232 = v1231 + 1;
      if (v1231 == 127)
        v1233 = 0;
      else
        v1233 = v1232;
      *(_QWORD *)v2225 = &v2225[16];
      *(_QWORD *)&v2225[16] = 0;
      *(_WORD *)&v2225[24] = 513;
      *(_DWORD *)&v2225[28] = 1;
      *(_QWORD *)&v2225[32] = v1233;
      v2225[40] = 0;
      *(_QWORD *)&v2225[48] = 0;
      *(_WORD *)&v2225[56] = 513;
      *(_DWORD *)&v2225[60] = 1;
      *(_QWORD *)&v2226 = v1234;
      BYTE8(v2226) = 0;
      *(_QWORD *)&v2225[8] = 0x200000003;
      *(_QWORD *)v2232 = v14;
      *(_DWORD *)&v2232[8] = v1228;
      v1235 = *((unsigned int *)v13 + 95);
      if ((_DWORD)v1235 == *((_DWORD *)v13 + 94))
      {
        WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>((uint64_t)v13 + 368, (unint64_t)v2225);
      }
      else
      {
        v1236 = *v1227;
        v1237 = *v1227 + (v1235 << 7);
        v1238 = (_OWORD *)(v1237 + 16);
        *(_QWORD *)v1237 = v1237 + 16;
        *(_QWORD *)(v1237 + 8) = 3;
        v1239 = *(_QWORD *)v2225;
        if (*(_BYTE **)v2225 == &v2225[16])
        {
          if (*(_DWORD *)&v2225[12])
          {
            v1240 = 32 * *(unsigned int *)&v2225[12];
            v1241 = (__int128 *)&v2225[16];
            do
            {
              v1242 = *v1241;
              v1243 = v1241[1];
              v1241 += 2;
              *v1238 = v1242;
              v1238[1] = v1243;
              v1238 += 2;
              v1240 -= 32;
            }
            while (v1240);
          }
        }
        else
        {
          *(_QWORD *)v2225 = &v2225[16];
          *(_QWORD *)v1237 = v1239;
          *(_DWORD *)(v1237 + 8) = *(_DWORD *)&v2225[8];
        }
        v1244 = *(_DWORD *)&v2225[12];
        *(_DWORD *)&v2225[12] = 0;
        *(_DWORD *)(v1237 + 12) = v1244;
        v1245 = v1236 + (v1235 << 7);
        v1246 = *(_QWORD *)v2232;
        *(_DWORD *)(v1245 + 119) = *(_DWORD *)&v2232[7];
        *(_QWORD *)(v1245 + 112) = v1246;
        ++*((_DWORD *)v13 + 95);
      }
      goto LABEL_1022;
    case 14:
      v170 = *(unsigned __int8 **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v171 = JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      v172 = *(_QWORD *)v171;
      v173 = *(_WORD *)(*(_QWORD *)v171 + 12);
      v174 = v173 & 0xFFF;
      if (*(_QWORD *)v171)
        v175 = v174 == 3;
      else
        v175 = 0;
      if (v175)
      {
        v350 = *(int *)(v172 + 40);
      }
      else
      {
        if (v172)
          v176 = v174 == 4;
        else
          v176 = 0;
        if (!v176)
          goto LABEL_124;
        v350 = *(_QWORD *)(v172 + 40);
      }
      if (((unint64_t)(v350 + 4095) <= 0x1FFE
         || (v350 & 0xFFF) == 0 && (!((unint64_t)v350 >> 24) || (unint64_t)((v350 >> 12) + 4095) < 0x1000))
        && !*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * *(unsigned int *)(v172 + 8)))
      {
        goto LABEL_127;
      }
LABEL_124:
      {
        return;
      }
      LOBYTE(v173) = *(_BYTE *)(v172 + 12);
LABEL_127:
      switch(v173)
      {
        case 0x19u:
          v460 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
          if (v460 >= 0x80000000)
            v460 = 0x80000000;
          v461 = v460 - 1;
          v462 = v461 >= 4;
          v463 = 16 * v461;
          v464 = 11468972;
          break;
        case 0x1Bu:
          v859 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
          if (v859 >= 0x80000000)
            v859 = 0x80000000;
          v860 = v859 - 1;
          v462 = v860 >= 4;
          v463 = 16 * v860;
          v464 = 11600046;
          break;
        case 0x1Au:
          v896 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
          if (v896 >= 0x80000000)
            v896 = 0x80000000;
          v897 = v896 - 1;
          v462 = v897 >= 4;
          v463 = 16 * v897;
          v464 = 11534509;
          break;
        default:
          LOWORD(v177) = 445;
          goto LABEL_131;
      }
      v177 = (v464 | 0x1BD01BD00000000uLL) >> v463;
      if (v462)
        LOWORD(v177) = 445;
LABEL_131:
      v178 = v170[12];
      switch(v178)
      {
        case 25:
          v526 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
          if (v526 >= 0x80000000)
            v526 = 0x80000000;
          v527 = v526 - 1;
          v528 = v527 >= 4;
          v529 = 16 * v527;
          v530 = 11468972;
          break;
        case 27:
          v872 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
          if (v872 >= 0x80000000)
            v872 = 0x80000000;
          v873 = v872 - 1;
          v528 = v873 >= 4;
          v529 = 16 * v873;
          v530 = 11600046;
          break;
        case 26:
          v927 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
          if (v927 >= 0x80000000)
            v927 = 0x80000000;
          v928 = v927 - 1;
          v528 = v928 >= 4;
          v529 = 16 * v928;
          v530 = 11534509;
          break;
        default:
          LOWORD(v179) = 445;
          goto LABEL_136;
      }
      v179 = (v530 | 0x1BD01BD00000000uLL) >> v529;
      if (v528)
        LOWORD(v179) = 445;
LABEL_136:
      return;
    case 15:
      v612 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v613 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      v568 = *v613;
      v614 = *((_WORD *)*v613 + 6) & 0xFFF;
      if (*v613)
        v615 = v614 == 3;
      else
        v615 = 0;
      if (v615)
      {
        v922 = *((int *)v568 + 10);
      }
      else
      {
        if (v568)
          v616 = v614 == 4;
        else
          v616 = 0;
        if (!v616)
        {
LABEL_743:
          if (v612
            && ((v617 = *(unsigned int *)(v612 + 8),
                 v618 = (unint64_t *)(2 * *(_QWORD *)v13),
                 (*(_QWORD *)v13 & 0x8000000000000000) != 0)
              ? (v619 = 63)
              : (v619 = *v618),
                v619 > v617))
          {
            v620 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v618 + 1);
            if (*(uint64_t *)v13 >= 0)
              v621 = v620;
            else
              v621 = v13;
            v622 = *(_QWORD *)((_BYTE *)v621 + ((v617 >> 3) & 0x1FFFFFF8)) & (1 << v617);
            if (*((_WORD *)*v613 + 6) != 16 || v622 != 0)
              goto LABEL_754;
          }
          else if (*((_WORD *)*v613 + 6) != 16)
          {
            goto LABEL_754;
          }
          v1376 = *((unsigned int *)v568 + 2);
          if (*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v1376) || *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v1376) != 1)
            goto LABEL_754;
          v1377 = *(unsigned int **)JSC::B3::Value::child(*v613, 0);
          v1378 = *(unsigned int **)JSC::B3::Value::child(v568, 1u);
          v1379 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
          if (v1379 >= 0x80000000)
            v1379 = 0x80000000;
          if (v1379 == 2)
          {
            {
              v1380 = 26;
LABEL_2033:
              v1505 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v1377, 0);
              v1393 = *(JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v1378, 0);
              v1392 = v13;
LABEL_1874:
LABEL_679:
              return;
            }
            {
              v1380 = 27;
              goto LABEL_2033;
            }
            v1380 = 25;
          }
          else
          {
            if (v1379 != 1)
              goto LABEL_754;
            v1380 = 24;
          }
          if (!v1377
            || ((v1381 = v1377[2],
                 v1382 = (unint64_t *)(2 * *(_QWORD *)v13),
                 (*(_QWORD *)v13 & 0x8000000000000000) != 0)
              ? (v1383 = 63)
              : (v1383 = *v1382),
                v1383 <= v1381
             || ((v1384 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v1382 + 1), *(uint64_t *)v13 >= 0)
               ? (v1385 = v1384)
               : (v1385 = v13),
                 ((*(_QWORD *)((char *)v1385 + ((v1381 >> 3) & 0x1FFFFFF8)) >> v1381) & 1) == 0)))
          {
            if (!v1378
              || ((v1386 = v1378[2],
                   v1387 = (unint64_t *)(2 * *(_QWORD *)v13),
                   (*(_QWORD *)v13 & 0x8000000000000000) != 0)
                ? (v1388 = 63)
                : (v1388 = *v1387),
                  v1388 <= v1386
               || ((v1389 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v1387 + 1), *(uint64_t *)v13 >= 0)
                 ? (v1390 = v1389)
                 : (v1390 = v13),
                   ((*(_QWORD *)((char *)v1390 + ((v1386 >> 3) & 0x1FFFFFF8)) >> v1386) & 1) == 0)))
            {
              v1392 = v13;
              v1393 = (JSC::B3::Value *)v1378;
              goto LABEL_1874;
            }
          }
LABEL_754:
          v624 = *((unsigned __int8 *)v568 + 12);
          switch(v624)
          {
            case 25:
              v1107 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
              if (v1107 >= 0x80000000)
                v1107 = 0x80000000;
              v1108 = v1107 - 1;
              v1109 = v1108 >= 4;
              v1110 = 16 * v1108;
              v1111 = 11862194;
              break;
            case 27:
              v1439 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
              if (v1439 >= 0x80000000)
                v1439 = 0x80000000;
              v1440 = v1439 - 1;
              v1109 = v1440 >= 4;
              v1110 = 16 * v1440;
              v1111 = 11993268;
              break;
            case 26:
              v1466 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
              if (v1466 >= 0x80000000)
                v1466 = 0x80000000;
              v1467 = v1466 - 1;
              v1109 = v1467 >= 4;
              v1110 = 16 * v1467;
              v1111 = 11927731;
              break;
            default:
              LOWORD(v625) = 445;
              goto LABEL_758;
          }
          v625 = (v1111 | 0x1BD01BD00000000uLL) >> v1110;
          if (v1109)
            LOWORD(v625) = 445;
LABEL_758:
          v626 = *(_DWORD *)(v612 + 16);
          if (v626 >= 0x80000000)
            v626 = 0x80000000;
          v627 = v626 - 1;
          if (v627 >= 4)
          {
            __break(0xC471u);
            JUMPOUT(0x197FB9C74);
          }
          v628 = (void *)dword_19914F730[v627];
          v630 = v629;
          v631 = *((_WORD *)v568 + 6);
          v632 = v631 & 0xFFF;
          if (v568 && v632 == 3)
          {
            v940 = *((int *)v568 + 10);
          }
          else
          {
            if (!v568 || v632 != 4)
              goto LABEL_766;
            v940 = *((_QWORD *)v568 + 5);
          }
          if ((unint64_t)(v940 + 4095) <= 0x1FFE)
          {
            if (((_DWORD)v628 - 9) > 1)
            {
LABEL_766:
              v2098 = v629;
              if ((JSC::B3::Value *)v612 == v568)
                goto LABEL_809;
              if (*(_BYTE *)(v612 + 12) == 67)
              {
                v634 = *(_QWORD *)v2219;
                v633 = v2219[8];
              }
              else
              {
                v633 = 0;
                v634 = 0;
                *(_QWORD *)v2219 = 0;
                *(_WORD *)&v2219[8] = 512;
                *(_DWORD *)&v2219[12] = 1;
                *(_QWORD *)&v2219[16] = 0;
                v2219[24] = 0;
                *(_QWORD *)&v2219[32] = 0;
                *(_DWORD *)&v2219[39] = 0;
              }
              if (v634)
                v635 = 0;
              else
                v635 = v633 == 0;
              v636 = v635;
              v637 = v633;
              if (v635)
              {
                v637 = 0;
                if (!*(_QWORD *)&v2219[16] && *(_DWORD *)&v2219[12] == 1)
                  v637 = *(_QWORD *)&v2219[32] != 0;
              }
              switch((int)v628)
              {
                case 9:
                case 10:
                case 11:
                case 12:
                  if (!v637)
                    goto LABEL_782;
                  v898 = *(_DWORD *)&v2219[16];
                  v899 = *(_DWORD *)&v2219[12];
                  if (*(_DWORD *)&v2219[16])
                    v636 = 0;
                  v900 = *(_DWORD *)&v2219[20];
                  v2093 = (int)v628;
                  if (v636 == 1 && !*(_DWORD *)&v2219[20] && *(_DWORD *)&v2219[12] == 1)
                  {
                    if (*(_QWORD *)&v2219[32])
                    {
                      v900 = 0;
                      v901 = 0;
                      v902 = 2;
                      LOBYTE(v633) = 1;
                      v899 = 1;
                      goto LABEL_1419;
                    }
                  }
                  else if (*(_QWORD *)&v2219[32])
                  {
                    v1687 = *(unsigned int *)(*(_QWORD *)&v2219[32] + 8);
                    v1688 = *(_QWORD *)v13;
                    if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
                      v1689 = 63;
                    else
                      v1689 = *(_QWORD *)(2 * v1688);
                    if (v1689 <= v1687)
                    {
                      WTF::BitVector::resizeOutOfLine(v13, v1687 + 1, 0);
                      v1688 = *(_QWORD *)v13;
                    }
                    if (v1688 >= 0)
                      v1690 = 2 * v1688 + 8;
                    else
                      v1690 = (uint64_t)v13;
                    *(_QWORD *)(v1690 + ((v1687 >> 3) & 0x1FFFFFF8)) |= 1 << v1687;
                  }
                  v902 = v2219[9];
                  LOWORD(v630) = *(_WORD *)&v2219[10];
                  v901 = v2219[24];
LABEL_1419:
                  v1096 = *((_QWORD *)v13 + 50);
                  *(_QWORD *)&v2225[16] = v634;
                  v2225[24] = v633;
                  v2225[25] = v902;
                  *(_WORD *)&v2225[26] = v630;
                  *(_DWORD *)&v2225[28] = v899;
                  *(_DWORD *)&v2225[32] = v898;
                  *(_DWORD *)&v2225[36] = v900;
                  v2225[40] = v901;
                  *(_QWORD *)v2225 = &v2225[16];
                  *(_QWORD *)&v2225[48] = 0;
                  *(_WORD *)&v2225[56] = 513;
                  *(_DWORD *)&v2225[60] = 1;
                  *(_QWORD *)&v2226 = v1095;
                  BYTE8(v2226) = 0;
                  v2227 = 0;
                  v2228 = 513;
                  v2229 = 1;
                  v2230 = v2098;
                  v2231 = 0;
                  *(_QWORD *)&v2225[8] = 0x300000003;
                  *(_QWORD *)v2232 = v1096;
                  *(_DWORD *)&v2232[8] = v2093;
                  goto LABEL_1420;
                default:
LABEL_782:
                  if (*((_BYTE *)v568 + 12) == 67)
                  {
                    v639 = *(_QWORD *)v2209;
                    v638 = v2209[8];
                  }
                  else
                  {
                    v638 = 0;
                    v639 = 0;
                    *(_QWORD *)v2209 = 0;
                    *(_WORD *)&v2209[8] = 512;
                    *(_DWORD *)&v2209[12] = 1;
                    *(_QWORD *)&v2209[16] = 0;
                    v2209[24] = 0;
                    *(_QWORD *)&v2210 = 0;
                    *(_DWORD *)((char *)&v2210 + 7) = 0;
                  }
                  if (v639)
                    v640 = 0;
                  else
                    v640 = v638 == 0;
                  v641 = v640;
                  v642 = v638;
                  if (v640)
                  {
                    v642 = 0;
                    if (!*(_QWORD *)&v2209[16] && *(_DWORD *)&v2209[12] == 1)
                      v642 = (_QWORD)v2210 != 0;
                  }
                  break;
              }
              switch((int)v628)
              {
                case 9:
                  if ((v642 - 1) < 2)
                    goto LABEL_2144;
                  goto LABEL_796;
                case 10:
                  if ((v642 - 1) <= 1)
                    goto LABEL_2144;
                  goto LABEL_796;
                case 11:
                case 12:
                  if (!v642)
                    goto LABEL_796;
LABEL_2144:
                  v1552 = *((_QWORD *)v13 + 50);
                  *(_OWORD *)&v2222[16] = *(_OWORD *)&v2207[9];
                  *(_OWORD *)&v2222[7] = *(_OWORD *)v2207;
                  *(_QWORD *)v2225 = &v2225[16];
                  *(_QWORD *)&v2225[16] = 0;
                  *(_WORD *)&v2225[24] = 513;
                  *(_DWORD *)&v2225[28] = 1;
                  *(_QWORD *)&v2225[32] = v1551;
                  v2225[40] = 0;
                  *(_OWORD *)&v2225[48] = *(_OWORD *)v2207;
                  v2226 = *(_OWORD *)&v2222[23];
                  v2227 = 0;
                  v2228 = 513;
                  v2229 = 1;
                  v2230 = v2098;
                  v2231 = 0;
                  *(_QWORD *)&v2225[8] = 0x300000003;
                  *(_QWORD *)v2232 = v1552;
                  *(_DWORD *)&v2232[8] = (_DWORD)v628;
                  v2232[10] = BYTE10(v2210);
                  BYTE9(v2210) = 1;
                  v1566 = *(_QWORD *)v2225;
                  if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                  {
                    *(_QWORD *)v2225 = 0;
                    *(_DWORD *)&v2225[8] = 0;
                    WTF::fastFree(v1566, v1559, v1560, v1561, v1562, v1563, v1564, v1565);
                  }
                  v643 = 0;
                  goto LABEL_803;
                default:
LABEL_796:
                  if (v641)
                  {
                    LOBYTE(v638) = 0;
                    if (!*(_QWORD *)&v2209[16] && *(_DWORD *)&v2209[12] == 1)
                      LOBYTE(v638) = (_QWORD)v2210 != 0;
                  }
                  if ((_DWORD)v628 == 10)
                  {
                    if (((char)v638 - 1) <= 1)
                      goto LABEL_1581;
                  }
                  else if ((_DWORD)v628 == 9 && ((char)v638 - 1) < 2)
                  {
LABEL_1581:
                    v1183 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*((_QWORD *)v13 + 50) + 16));
                    v1189 = *((_QWORD *)v13 + 50);
                    *(_OWORD *)&v2225[16] = *(_OWORD *)v2222;
                    *(_OWORD *)&v2225[25] = *(_OWORD *)&v2222[9];
                    *(_QWORD *)v2225 = &v2225[16];
                    *(_QWORD *)&v2225[48] = 0;
                    *(_WORD *)&v2225[56] = 513;
                    *(_DWORD *)&v2225[60] = 1;
                    *(_QWORD *)&v2226 = v2098;
                    BYTE8(v2226) = 0;
                    *(_QWORD *)&v2225[8] = 0x200000003;
                    *(_QWORD *)v2232 = v1189;
                    *(_DWORD *)&v2232[8] = (_DWORD)v628;
                    v2232[10] = BYTE10(v2210);
                    BYTE9(v2210) = 1;
                    v1203 = *(_QWORD *)v2225;
                    if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                    {
                      *(_QWORD *)v2225 = 0;
                      *(_DWORD *)&v2225[8] = 0;
                      WTF::fastFree(v1203, v1196, v1197, v1198, v1199, v1200, v1201, v1202);
                    }
                    v643 = 0;
LABEL_803:
                    if (BYTE8(v2210) && !BYTE9(v2210))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FB95F4);
                    }
                    if (v2219[40] && !v2219[41])
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FB9320);
                    }
                    if (!v643)
                      return;
                    v631 = *((_WORD *)v568 + 6);
LABEL_809:
                    v644 = v631 & 0xFFF;
                    if (v568 && v644 == 3)
                    {
                      v1179 = *((int *)v568 + 10);
                    }
                    else
                    {
                      if (!v568 || v644 != 4)
                        goto LABEL_813;
                      v1179 = *((_QWORD *)v568 + 5);
                    }
                    if ((unint64_t)(v1179 + 4095) <= 0x1FFE)
                    {
                      if (((_DWORD)v628 - 9) > 1)
                      {
LABEL_813:
                        v341 = (uint64_t)v13;
                        v340 = (uint64_t)v628;
                        v342 = v645;
                        v343 = v2098;
                        goto LABEL_402;
                      }
                    }
                    else
                    {
                      if ((v1179 & 0xFFF) != 0)
                        goto LABEL_813;
                      v175 = (unint64_t)v1179 >> 24 == 0;
                      v1180 = (v1179 >> 12) + 4095;
                      v1181 = !v175 && v1180 >= 0x1000;
                      v1182 = !v1181;
                      if (((_DWORD)v628 - 9) > 1 || !v1182)
                        goto LABEL_813;
                    }
                    v1304 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*((_QWORD *)v13 + 50) + 16));
                    return;
                  }
                  v643 = 1;
                  goto LABEL_803;
              }
            }
          }
          else
          {
            if ((v940 & 0xFFF) != 0)
              goto LABEL_766;
            v941 = v940 >> 12;
            v942 = (unint64_t)v940 >> 24;
            v943 = (unint64_t)(v941 + 4095) < 0x1000 || v942 == 0;
            if (!v943 || ((_DWORD)v628 - 9) >= 2)
              goto LABEL_766;
          }
          v1022 = *((_WORD *)v568 + 6) & 0xFFF;
          if (v1022 == 3)
          {
            v1399 = *((int *)v568 + 10);
          }
          else
          {
            if (v1022 != 4)
              goto LABEL_1317;
            v1399 = *((_QWORD *)v568 + 5);
          }
          if ((unint64_t)(v1399 + 4095) <= 0x1FFE
            || (v1399 & 0xFFF) == 0
            && (!((unint64_t)v1399 >> 24) || (unint64_t)((v1399 >> 12) + 4095) < 0x1000))
          {
            *(_DWORD *)&v2225[12] = 1;
            *(_QWORD *)&v2225[16] = 0;
            v2225[24] = 0;
            *(_WORD *)&v2225[8] = 514;
            *(_QWORD *)v2225 = v1399;
            goto LABEL_1318;
          }
LABEL_1317:
          *(_QWORD *)v2225 = 0;
          *(_WORD *)&v2225[8] = 512;
          *(_DWORD *)&v2225[12] = 1;
          *(_QWORD *)&v2225[16] = 0;
          v2225[24] = 0;
LABEL_1318:
          return;
        }
        v922 = *((_QWORD *)v568 + 5);
      }
      if (((unint64_t)(v922 + 4095) <= 0x1FFE
         || (v922 & 0xFFF) == 0 && (!((unint64_t)v922 >> 24) || (unint64_t)((v922 >> 12) + 4095) < 0x1000))
        && !*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * *((unsigned int *)v568 + 2)))
      {
        goto LABEL_754;
      }
      goto LABEL_743;
    case 16:
      v664 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v665 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      if (*(_DWORD *)(*((_QWORD *)v13 + 50) + 16) != 2)
        goto LABEL_833;
      if (*(_BYTE *)(v664 + 12) == 42)
      {
        v1331 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v664, 0);
        if (!v1331
          || ((v1332 = *(unsigned int *)(v1331 + 8),
               v1333 = (unint64_t *)(2 * *(_QWORD *)v13),
               (*(_QWORD *)v13 & 0x8000000000000000) != 0)
            ? (v1334 = 63)
            : (v1334 = *v1333),
              v1334 <= v1332
           || ((v1335 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v1333 + 1), *(uint64_t *)v13 >= 0)
             ? (v1336 = v1335)
             : (v1336 = v13),
               ((*(_QWORD *)((char *)v1336 + ((v1332 >> 3) & 0x1FFFFFF8)) >> v1332) & 1) == 0)))
        {
          {
            v1343 = 32;
            goto LABEL_1812;
          }
        }
      }
      if (*(_BYTE *)(v664 + 12) == 43)
      {
        v1337 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v664, 0);
        if (!v1337
          || ((v1338 = *(unsigned int *)(v1337 + 8),
               v1339 = (unint64_t *)(2 * *(_QWORD *)v13),
               (*(_QWORD *)v13 & 0x8000000000000000) != 0)
            ? (v1340 = 63)
            : (v1340 = *v1339),
              v1340 <= v1338
           || ((v1341 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v1339 + 1), *(uint64_t *)v13 >= 0)
             ? (v1342 = v1341)
             : (v1342 = v13),
               ((*(_QWORD *)((char *)v1342 + ((v1338 >> 3) & 0x1FFFFFF8)) >> v1338) & 1) == 0)))
        {
          {
            v1343 = 33;
LABEL_1812:
            v1344 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v664, 0);
            v1346 = (JSC::B3::Value **)JSC::B3::Value::child(v665, 0);
            v1352 = (uint64_t)v13;
            v1353 = (void *)v1343;
            v1354 = v1345;
LABEL_1813:
            v1355 = v1347;
LABEL_1814:
            return;
          }
        }
      }
LABEL_833:
      v666 = *(_DWORD *)(v664 + 16);
      if (v666 >= 0x80000000)
        v666 = 0x80000000;
      v667 = v666 - 1;
      if (v667 >= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB9C94);
      }
      v668 = (void *)dword_19914F750[v667];
      v2099 = v665;
      if ((JSC::B3::Value *)v664 == v665)
        goto LABEL_893;
      if (*(_BYTE *)(v664 + 12) == 67)
      {
        v675 = *(_QWORD *)v2219;
        v674 = v2219[8];
      }
      else
      {
        v674 = 0;
        v675 = 0;
        *(_QWORD *)v2219 = 0;
        *(_WORD *)&v2219[8] = 512;
        *(_DWORD *)&v2219[12] = 1;
        *(_QWORD *)&v2219[16] = 0;
        v2219[24] = 0;
        *(_QWORD *)&v2219[32] = 0;
        *(_DWORD *)&v2219[39] = 0;
      }
      if (v675)
        v676 = 0;
      else
        v676 = v674 == 0;
      v677 = v676;
      v678 = v674;
      if (v676)
      {
        v678 = 0;
        if (!*(_QWORD *)&v2219[16] && *(_DWORD *)&v2219[12] == 1)
          v678 = *(_QWORD *)&v2219[32] != 0;
      }
      if ((_DWORD)v668 != 38 && (_DWORD)v668 != 17 && (_DWORD)v668 != 19)
      {
        switch((int)v668)
        {
          case ' ':
          case '!':
          case '"':
          case '#':
          case '$':
          case '%':
          case '\'':
            break;
          default:
            goto LABEL_852;
        }
      }
      if (!v678)
      {
LABEL_852:
        if (v677)
        {
          v674 = 0;
          if (!*(_QWORD *)&v2219[16] && *(_DWORD *)&v2219[12] == 1)
            v674 = *(_QWORD *)&v2219[32] != 0;
        }
        if ((_DWORD)v668 == 17)
        {
          if (v674 != 1)
            goto LABEL_861;
        }
        else if ((_DWORD)v668 != 19 || v674 != 1)
        {
LABEL_861:
          if (*((_BYTE *)v665 + 12) == 67)
          {
            v681 = *(_QWORD *)v2209;
            v680 = v2209[8];
          }
          else
          {
            v680 = 0;
            v681 = 0;
            *(_QWORD *)v2209 = 0;
            *(_WORD *)&v2209[8] = 512;
            *(_DWORD *)&v2209[12] = 1;
            *(_QWORD *)&v2209[16] = 0;
            v2209[24] = 0;
            *(_QWORD *)&v2210 = 0;
            *(_DWORD *)((char *)&v2210 + 7) = 0;
          }
          if (v681)
            v682 = 0;
          else
            v682 = v680 == 0;
          v683 = v682;
          v684 = v680;
          if (v682)
          {
            v684 = 0;
            if (!*(_QWORD *)&v2209[16] && *(_DWORD *)&v2209[12] == 1)
              v684 = (_QWORD)v2210 != 0;
          }
          switch((int)v668)
          {
            case 17:
            case 19:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
              if (!v684)
                goto LABEL_875;
              v1217 = *((_QWORD *)v13 + 50);
              *(_OWORD *)&v2222[16] = *(_OWORD *)&v2207[9];
              *(_OWORD *)&v2222[7] = *(_OWORD *)v2207;
              *(_QWORD *)v2225 = &v2225[16];
              *(_QWORD *)&v2225[16] = 0;
              *(_WORD *)&v2225[24] = 513;
              *(_DWORD *)&v2225[28] = 1;
              *(_QWORD *)&v2225[32] = v1585;
              v2225[40] = 0;
              *(_OWORD *)&v2225[48] = *(_OWORD *)v2207;
              v2226 = *(_OWORD *)&v2222[23];
              goto LABEL_1600;
            default:
LABEL_875:
              v685 = v680;
              if (v683)
              {
                v685 = 0;
                if (!*(_QWORD *)&v2209[16] && *(_DWORD *)&v2209[12] == 1)
                  v685 = (_QWORD)v2210 != 0;
              }
              if ((_DWORD)v668 != 38 && (_DWORD)v668 != 17 && (_DWORD)v668 != 19)
              {
                switch((int)v668)
                {
                  case ' ':
                  case '!':
                  case '"':
                  case '#':
                  case '$':
                  case '%':
                  case '\'':
                    break;
                  default:
                    goto LABEL_881;
                }
              }
              if (!v685)
              {
LABEL_881:
                if (v683)
                {
                  v680 = 0;
                  if (!*(_QWORD *)&v2209[16] && *(_DWORD *)&v2209[12] == 1)
                    v680 = (_QWORD)v2210 != 0;
                }
                if ((_DWORD)v668 != 17 && (_DWORD)v668 != 19 || v680 != 1)
                {
                  v686 = 1;
                  goto LABEL_888;
                }
                v1469 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*((_QWORD *)v13 + 50) + 16));
                v1475 = *((_QWORD *)v13 + 50);
                *(_OWORD *)&v2225[16] = *(_OWORD *)v2222;
                *(_OWORD *)&v2225[25] = *(_OWORD *)&v2222[9];
                *(_QWORD *)v2225 = &v2225[16];
                *(_QWORD *)&v2225[48] = 0;
                *(_WORD *)&v2225[56] = 513;
                *(_DWORD *)&v2225[60] = 1;
                *(_QWORD *)&v2226 = v2091;
                BYTE8(v2226) = 0;
                *(_QWORD *)&v2225[8] = 0x200000003;
                *(_QWORD *)v2232 = v1475;
                *(_DWORD *)&v2232[8] = (_DWORD)v668;
                v2232[10] = BYTE10(v2210);
                BYTE9(v2210) = 1;
LABEL_1601:
                v1220 = *(_QWORD *)v2225;
                if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                {
                  *(_QWORD *)v2225 = 0;
                  *(_DWORD *)&v2225[8] = 0;
                  WTF::fastFree(v1220, v1218, v1219, v669, v670, v671, v672, v673);
                }
                v686 = 0;
LABEL_888:
                if (BYTE8(v2210) && !BYTE9(v2210))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FB96D8);
                }
                if (v2219[40] && !v2219[41])
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FB95D4);
                }
                if ((v686 & 1) == 0)
                  return;
LABEL_893:
                if (v668 > 0x27 || ((1 << (char)v668) & 0xFF000A0000) == 0)
                {
                  v689 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
                  if (v689 >= 0x80000000)
                    v689 = 0x80000000;
                  v690 = v689 - 1;
                  if (v690 >= 5)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197FB9D44);
                  }
                  v691 = (void *)qword_19914FB48[v690];
                  if (v688)
                  {
                  }
                  else
                  {
                  }
                  return;
                }
                v341 = (uint64_t)v13;
                v340 = (uint64_t)v668;
                v342 = v1607;
                v343 = v2091;
LABEL_402:
                return;
              }
              v2090 = v681;
              BYTE8(v2210) = 1;
              v1097 = *(_DWORD *)&v2209[16];
              v1098 = *(_DWORD *)&v2209[12];
              if (*(_DWORD *)&v2209[16])
                v683 = 0;
              v1099 = *(_DWORD *)&v2209[20];
              if (v683 == 1 && !*(_DWORD *)&v2209[20] && *(_DWORD *)&v2209[12] == 1)
              {
                if ((_QWORD)v2210)
                {
                  v1099 = 0;
                  v1100 = 0;
                  v1101 = 2;
                  LOBYTE(v680) = 1;
                  v1098 = 1;
                  goto LABEL_1599;
                }
              }
              else if ((_QWORD)v2210)
              {
                v1740 = *(unsigned int *)(v2210 + 8);
                v1741 = *(_QWORD *)v13;
                if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
                  v1742 = 63;
                else
                  v1742 = *(_QWORD *)(2 * v1741);
                if (v1742 <= v1740)
                {
                  WTF::BitVector::resizeOutOfLine(v13, v1740 + 1, 0);
                  v1741 = *(_QWORD *)v13;
                }
                if (v1741 >= 0)
                  v1743 = 2 * v1741 + 8;
                else
                  v1743 = (uint64_t)v13;
                *(_QWORD *)(v1743 + ((v1740 >> 3) & 0x1FFFFFF8)) |= 1 << v1740;
              }
              v1101 = v2209[9];
              v2087 = *(_WORD *)&v2209[10];
              v1100 = v2209[24];
LABEL_1599:
              v1217 = *((_QWORD *)v13 + 50);
              *(_QWORD *)&v2225[16] = v2090;
              v2225[24] = v680;
              v2225[25] = v1101;
              *(_WORD *)&v2225[26] = v2087;
              *(_DWORD *)&v2225[28] = v1098;
              *(_DWORD *)&v2225[32] = v1097;
              *(_DWORD *)&v2225[36] = v1099;
              v2225[40] = v1100;
              *(_QWORD *)v2225 = &v2225[16];
              *(_QWORD *)&v2225[48] = 0;
              *(_WORD *)&v2225[56] = 513;
              *(_DWORD *)&v2225[60] = 1;
              *(_QWORD *)&v2226 = v1210;
              BYTE8(v2226) = 0;
LABEL_1600:
              v2227 = 0;
              v2228 = 513;
              v2229 = 1;
              v2230 = v2091;
              v2231 = 0;
              *(_QWORD *)&v2225[8] = 0x300000003;
              *(_QWORD *)v2232 = v1217;
              *(_DWORD *)&v2232[8] = (_DWORD)v668;
              v2232[10] = BYTE10(v2210);
              BYTE9(v2210) = 1;
              goto LABEL_1601;
          }
        }
        v1480 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*((_QWORD *)v13 + 50) + 16));
        v1486 = *((_QWORD *)v13 + 50);
        *(_OWORD *)&v2225[16] = *(_OWORD *)v2209;
        *(_OWORD *)&v2225[25] = *(_OWORD *)&v2209[9];
        *(_QWORD *)v2225 = &v2225[16];
        *(_QWORD *)&v2225[48] = 0;
        *(_WORD *)&v2225[56] = 513;
        *(_DWORD *)&v2225[60] = 1;
        *(_QWORD *)&v2226 = v2091;
        BYTE8(v2226) = 0;
        *(_QWORD *)&v2225[8] = 0x200000003;
        *(_QWORD *)v2232 = v1486;
        *(_DWORD *)&v2232[8] = (_DWORD)v668;
        goto LABEL_1420;
      }
      v1023 = *(_DWORD *)&v2219[16];
      v1024 = *(_DWORD *)&v2219[12];
      if (*(_DWORD *)&v2219[16])
        v677 = 0;
      v1025 = *(_DWORD *)&v2219[20];
      if (v677 == 1 && !*(_DWORD *)&v2219[20] && *(_DWORD *)&v2219[12] == 1)
      {
        if (*(_QWORD *)&v2219[32])
        {
          v1025 = 0;
          v1026 = 0;
          v1027 = 2;
          LOBYTE(v674) = 1;
          v1024 = 1;
          goto LABEL_1506;
        }
      }
      else if (*(_QWORD *)&v2219[32])
      {
        v1713 = *(unsigned int *)(*(_QWORD *)&v2219[32] + 8);
        v1714 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
          v1715 = 63;
        else
          v1715 = *(_QWORD *)(2 * v1714);
        if (v1715 <= v1713)
        {
          WTF::BitVector::resizeOutOfLine(v13, v1713 + 1, 0);
          v1714 = *(_QWORD *)v13;
        }
        if (v1714 >= 0)
          v1716 = 2 * v1714 + 8;
        else
          v1716 = (uint64_t)v13;
        *(_QWORD *)(v1716 + ((v1713 >> 3) & 0x1FFFFFF8)) |= 1 << v1713;
      }
      v1027 = v2219[9];
      v2088 = *(_WORD *)&v2219[10];
      v1026 = v2219[24];
LABEL_1506:
      v1136 = *((_QWORD *)v13 + 50);
      *(_QWORD *)&v2225[16] = v675;
      v2225[24] = v674;
      v2225[25] = v1027;
      *(_WORD *)&v2225[26] = v2088;
      *(_DWORD *)&v2225[28] = v1024;
      *(_DWORD *)&v2225[32] = v1023;
      *(_DWORD *)&v2225[36] = v1025;
      v2225[40] = v1026;
      *(_QWORD *)v2225 = &v2225[16];
      *(_QWORD *)&v2225[48] = 0;
      *(_WORD *)&v2225[56] = 513;
      *(_DWORD *)&v2225[60] = 1;
      *(_QWORD *)&v2226 = v1135;
      BYTE8(v2226) = 0;
      v2227 = 0;
      v2228 = 513;
      v2229 = 1;
      v2230 = v2091;
      v2231 = 0;
      *(_QWORD *)&v2225[8] = 0x300000003;
      *(_QWORD *)v2232 = v1136;
      *(_DWORD *)&v2232[8] = (_DWORD)v668;
      v2232[10] = v2219[42];
      v65 = *(_QWORD *)v2225;
      if (&v2225[16] == *(_BYTE **)v2225)
        return;
      goto LABEL_240;
    case 17:
      v1055 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v1056 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      v1057 = *(_DWORD *)(v1055 + 16);
      if (v1057 >= 0x80000000)
        v1057 = 0x80000000;
      v1058 = v1057 - 1;
      if (v1058 >= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB9D74);
      }
      v1059 = *v1056;
      v1060 = dword_19914F760[v1058];
      if ((JSC::B3::Value *)v1055 == v1059)
        goto LABEL_1388;
      if (*(_BYTE *)(v1055 + 12) == 67)
      {
        v1062 = *(_QWORD *)v2219;
        v1061 = v2219[8];
      }
      else
      {
        v1061 = 0;
        v1062 = 0;
        *(_QWORD *)v2219 = 0;
        *(_WORD *)&v2219[8] = 512;
        *(_DWORD *)&v2219[12] = 1;
        *(_QWORD *)&v2219[16] = 0;
        v2219[24] = 0;
        *(_QWORD *)&v2219[32] = 0;
        *(_DWORD *)&v2219[39] = 0;
      }
      if (v1062)
        v1063 = 0;
      else
        v1063 = v1061 == 0;
      v1064 = v1063;
      v1065 = v1061;
      if (v1063)
      {
        v1065 = 0;
        if (!*(_QWORD *)&v2219[16] && *(_DWORD *)&v2219[12] == 1)
          v1065 = *(_QWORD *)&v2219[32] != 0;
      }
      if ((_DWORD)v1060 != 38)
      {
        switch((int)v1060)
        {
          case '"':
          case '#':
          case '$':
          case '%':
          case '\'':
          case '(':
          case ')':
            break;
          default:
            goto LABEL_1374;
        }
      }
      if (!v1065)
      {
LABEL_1374:
        if (*((_BYTE *)v1059 + 12) == 67)
        {
          v1066 = v2209[8];
          v1067 = *(_QWORD *)v2209 == 0;
        }
        else
        {
          v1066 = 0;
          *(_QWORD *)v2209 = 0;
          *(_WORD *)&v2209[8] = 512;
          v1067 = 1;
          *(_DWORD *)&v2209[12] = 1;
          *(_QWORD *)&v2209[16] = 0;
          v2209[24] = 0;
          *(_QWORD *)&v2210 = 0;
          *(_DWORD *)((char *)&v2210 + 7) = 0;
        }
        if (v1067 && !v1066 && !*(_QWORD *)&v2209[16] && *(_DWORD *)&v2209[12] == 1)
          v1066 = (_QWORD)v2210 != 0;
        switch((int)v1060)
        {
          case '"':
          case '#':
          case '$':
          case '%':
          case '&':
          case '\'':
          case '(':
          case ')':
            if (v1066 != 1)
              goto LABEL_1382;
            v1698 = *((_QWORD *)v13 + 50);
            *(_OWORD *)&v2222[16] = *(_OWORD *)&v2207[9];
            *(_OWORD *)&v2222[7] = *(_OWORD *)v2207;
            *(_QWORD *)v2225 = &v2225[16];
            *(_QWORD *)&v2225[16] = 0;
            *(_WORD *)&v2225[24] = 513;
            *(_DWORD *)&v2225[28] = 1;
            *(_QWORD *)&v2225[32] = v1697;
            v2225[40] = 0;
            *(_OWORD *)&v2225[48] = *(_OWORD *)v2207;
            v2226 = *(_OWORD *)&v2222[23];
            v2227 = 0;
            v2228 = 513;
            v2229 = 1;
            v2230 = v2100;
            v2231 = 0;
            *(_QWORD *)&v2225[8] = 0x300000003;
            *(_QWORD *)v2232 = v1698;
            *(_DWORD *)&v2232[8] = v1060;
            v2232[10] = BYTE10(v2210);
            BYTE9(v2210) = 1;
            v1712 = *(_QWORD *)v2225;
            if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
            {
              *(_QWORD *)v2225 = 0;
              *(_DWORD *)&v2225[8] = 0;
              WTF::fastFree(v1712, v1705, v1706, v1707, v1708, v1709, v1710, v1711);
            }
            v1068 = 0;
            break;
          default:
LABEL_1382:
            v1068 = 1;
            break;
        }
        if (BYTE8(v2210) && !BYTE9(v2210))
        {
          __break(0xC471u);
          JUMPOUT(0x197FB9AACLL);
        }
        if (v2219[40] && !v2219[41])
        {
          __break(0xC471u);
          JUMPOUT(0x197FB9A4CLL);
        }
        if ((v1068 & 1) != 0)
        {
LABEL_1388:
          v341 = (uint64_t)v13;
          v340 = v1060;
          v342 = v1069;
          v343 = v2100;
          goto LABEL_402;
        }
        return;
      }
      v1356 = *(_DWORD *)&v2219[16];
      v1357 = *(_DWORD *)&v2219[12];
      if (*(_DWORD *)&v2219[16])
        v1064 = 0;
      v2095 = *(_DWORD *)&v2219[20];
      if (v1064 == 1 && !*(_DWORD *)&v2219[20] && *(_DWORD *)&v2219[12] == 1)
      {
        if (*(_QWORD *)&v2219[32])
        {
          v2095 = 0;
          v1358 = 0;
          v1359 = 2;
          LOBYTE(v1061) = 1;
          v1357 = 1;
LABEL_1922:
          v1432 = *((_QWORD *)v13 + 50);
          *(_QWORD *)&v2225[16] = v1062;
          v2225[24] = v1061;
          v2225[25] = v1359;
          *(_WORD *)&v2225[26] = (_WORD)v16;
          *(_DWORD *)&v2225[28] = v1357;
          *(_DWORD *)&v2225[32] = v1356;
          *(_DWORD *)&v2225[36] = v2095;
          v2225[40] = v1358;
          *(_QWORD *)v2225 = &v2225[16];
          *(_QWORD *)&v2225[48] = 0;
          *(_WORD *)&v2225[56] = 513;
          *(_DWORD *)&v2225[60] = 1;
          *(_QWORD *)&v2226 = v1431;
          BYTE8(v2226) = 0;
          v2227 = 0;
          v2228 = 513;
          v2229 = 1;
          v2230 = v2100;
          v2231 = 0;
          *(_QWORD *)&v2225[8] = 0x300000003;
          *(_QWORD *)v2232 = v1432;
          *(_DWORD *)&v2232[8] = v1060;
          v2232[10] = v2219[42];
          goto LABEL_1022;
        }
      }
      else if (*(_QWORD *)&v2219[32])
      {
        v1993 = *(unsigned int *)(*(_QWORD *)&v2219[32] + 8);
        v1994 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
          v1995 = 63;
        else
          v1995 = *(_QWORD *)(2 * v1994);
        if (v1995 <= v1993)
        {
          WTF::BitVector::resizeOutOfLine(v13, v1993 + 1, 0);
          v1994 = *(_QWORD *)v13;
        }
        if (v1994 >= 0)
          v1996 = 2 * v1994 + 8;
        else
          v1996 = (uint64_t)v13;
        *(_QWORD *)(v1996 + ((v1993 >> 3) & 0x1FFFFFF8)) |= 1 << v1993;
      }
      v1359 = v2219[9];
      LOWORD(v16) = *(_WORD *)&v2219[10];
      v1358 = v2219[24];
      goto LABEL_1922;
    case 18:
      v1478 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v1479 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      return;
    case 19:
      __break(0xC471u);
      JUMPOUT(0x197FB747CLL);
    case 20:
      __break(0xC471u);
      JUMPOUT(0x197FB749CLL);
    case 21:
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0) + 12) != 16)
        goto LABEL_1739;
      v1645 = *(unsigned int *)(*(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0) + 8);
      if (*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v1645) || *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v1645) != 1)
        goto LABEL_1739;
      v1646 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
      *(_QWORD *)v2219 = *(_QWORD *)JSC::B3::Value::child(*v1646, 0);
      v1647 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
      *(_QWORD *)v2209 = *(_QWORD *)JSC::B3::Value::child(*v1647, 1u);
      v1648 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
      if (v1648 >= 0x80000000)
        v1648 = 0x80000000;
      v1649 = v1648 - 1;
      if (v1649 >= 4)
        v1650 = 445;
      else
        v1650 = 0x1BD01BD001D001CuLL >> (16 * v1649);
      *(_WORD *)v2222 = v1650;
      *(_QWORD *)v2225 = v2222;
      *(_QWORD *)&v2225[8] = v13;
      *(_QWORD *)&v2225[16] = v2219;
      *(_QWORD *)&v2225[24] = v2209;
      v1652 = v1651;
      if (v1651 - 30 <= 0x29 && ((1 << (v1651 - 30)) & 0x3CFF3F00FFFLL) != 0
        || v1651 - 150 <= 0x37 && ((1 << (v1651 + 106)) & 0xF00000000000F3) != 0
        || (v1653 = v1651 - 374, v1653 <= 0x3D) && ((1 << v1653) & 0x2800000000000001) != 0)
      {
        v2050 = (JSC::B3::Value **)JSC::B3::Value::child(*(JSC::B3::Value **)v2219, 0);
        v1655 = (JSC::B3::Value **)JSC::B3::Value::child(*(JSC::B3::Value **)v2209, 0);
      }
      else
      {
        switch(*(_WORD *)v2222)
        {
          case 1:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0x11:
          case 0x13:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
            break;
          case 2:
          case 3:
          case 4:
          case 5:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x12:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x38:
          case 0x39:
          case 0x42:
          case 0x43:
            goto LABEL_1739;
          default:
            if ((*(__int16 *)v2222 - 150) > 0x37 || ((1 << (v2222[0] + 106)) & 0xF00000000000F3) == 0)
            {
              v2039 = *(__int16 *)v2222 - 374;
              if (v2039 > 0x3D || ((1 << v2039) & 0x2800000000000001) == 0)
                goto LABEL_1739;
            }
            break;
        }
        if ((WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)v13, (uint64_t)v2219) & 1) != 0
          || (WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)v13, (uint64_t)v2209) & 1) != 0)
        {
LABEL_1739:
          v1283 = JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
          v1284 = *(JSC::B3::Value **)v1283;
          v1285 = *(_DWORD *)(*(_QWORD *)v1283 + 16);
          if (v1285 >= 0x80000000)
            v1285 = 0x80000000;
          v1286 = v1285 - 1;
          if (v1286 >= 4)
          {
            __break(0xC471u);
            JUMPOUT(0x197FB9DECLL);
          }
          v1287 = (void *)dword_19914F740[v1286];
          if (*((_BYTE *)v1284 + 12) == 67)
          {
            v1289 = v2219[8];
            v1290 = *(_QWORD *)v2219 == 0;
          }
          else
          {
            v1289 = 0;
            *(_QWORD *)v2219 = 0;
            *(_WORD *)&v2219[8] = 512;
            v1290 = 1;
            *(_DWORD *)&v2219[12] = 1;
            *(_QWORD *)&v2219[16] = 0;
            v2219[24] = 0;
            *(_QWORD *)&v2219[32] = 0;
            *(_DWORD *)&v2219[39] = 0;
          }
          if (v1290 && !v1289 && !*(_QWORD *)&v2219[16] && *(_DWORD *)&v2219[12] == 1)
            v1289 = *(_QWORD *)&v2219[32] != 0;
          if ((_DWORD)v1287 == 15 || (_DWORD)v1287 == 16)
          {
            if (v1289 == 1)
            {
              v1666 = *((_QWORD *)v13 + 50);
              *(_OWORD *)&v2225[16] = *(_OWORD *)v2209;
              *(_OWORD *)&v2225[25] = *(_OWORD *)&v2209[9];
              *(_QWORD *)v2225 = &v2225[16];
              *(_QWORD *)&v2225[48] = 0;
              *(_WORD *)&v2225[56] = 513;
              *(_DWORD *)&v2225[60] = 1;
              *(_QWORD *)&v2226 = v1288;
              BYTE8(v2226) = 0;
              *(_QWORD *)&v2225[8] = 0x200000003;
              *(_QWORD *)v2232 = v1666;
              *(_DWORD *)&v2232[8] = (_DWORD)v1287;
              v2232[10] = v2219[42];
              v2219[41] = 1;
              v1680 = *(_QWORD *)v2225;
              if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
              {
                *(_QWORD *)v2225 = 0;
                *(_DWORD *)&v2225[8] = 0;
                WTF::fastFree(v1680, v1673, v1674, v1675, v1676, v1677, v1678, v1679);
              }
            }
            else
            {
            }
          }
          else
          {
            v1291 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
            if (v1291 >= 0x80000000)
              v1291 = 0x80000000;
            v1292 = v1291 - 1;
            if (v1292 >= 5)
            {
              __break(0xC471u);
              JUMPOUT(0x197FB9E0CLL);
            }
            v1293 = (void *)qword_19914FB48[v1292];
          }
          if (v2219[40] && !v2219[41])
          {
            __break(0xC471u);
            JUMPOUT(0x197FB43CCLL);
          }
          return;
        }
        v1652 = *(_WORD *)v2222;
        v1655 = (JSC::B3::Value **)v2209;
      }
      v423 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
      goto LABEL_2323;
    case 22:
      v302 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v303 = JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      v304 = *(_QWORD *)v303;
      v305 = *(_WORD *)(*(_QWORD *)v303 + 12) & 0xFFF;
      if (*(_QWORD *)v303)
        v306 = v305 == 3;
      else
        v306 = 0;
      v307 = v306;
      if (v306)
      {
        v309 = *(int *)(v304 + 40);
        if ((_DWORD)v309 != 255)
        {
LABEL_309:
          if (v309 != 0xFFFF)
          {
LABEL_310:
            if (v304)
              v310 = v305 == 4;
            else
              v310 = 0;
            if (v310 && *(_QWORD *)(v304 + 40) == 0xFFFFFFFFLL || v307 && *(_DWORD *)(v304 + 40) == -1)
            {
              return;
            }
            v311 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
            if (v311 >= 0x80000000)
              v311 = 0x80000000;
            if (v311 == 2)
            {
              LODWORD(v10) = 143;
              v312 = 64;
            }
            else
            {
              if (v311 != 1)
                goto LABEL_323;
              LODWORD(v10) = 142;
              v312 = 32;
            }
            if (*(_BYTE *)(v302 + 12) != 27)
              goto LABEL_323;
            v1152 = *(unsigned int **)JSC::B3::Value::child((JSC::B3::Value *)v302, 0);
            v1153 = (uint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v302, 1u);
            v1154 = *v1153;
            if (v1152)
            {
              v1155 = v1152[2];
              v1156 = (_QWORD *)(2 * *(_QWORD *)v13);
              v1157 = (*(_QWORD *)v13 & 0x8000000000000000) != 0 ? 63 : *v1156;
              if (v1157 > v1155)
              {
                v1158 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v1156 + 1);
                v1159 = *(uint64_t *)v13 >= 0 ? v1158 : v13;
                if (((*(_QWORD *)((char *)v1159 + ((v1155 >> 3) & 0x1FFFFFF8)) >> v1155) & 1) != 0)
                  goto LABEL_323;
              }
            }
            v1160 = *(_WORD *)(v1154 + 12) & 0xFFF;
            v1161 = v1154 && v1160 == 3;
            v1162 = v1161;
            if (v1161)
            {
              v1165 = *(_DWORD *)(v1154 + 40);
              v1164 = v1165;
            }
            else
            {
              if (v1154)
                v1163 = v1160 == 4;
              else
                v1163 = 0;
              if (!v1163)
                goto LABEL_323;
              v1164 = *(_QWORD *)(v1154 + 40);
              v1165 = v1164;
            }
            if ((unint64_t)(v1164 + 4095) > 0x1FFE
              && ((v1164 & 0xFFF) != 0
               || (unint64_t)v1164 >> 24 && (unint64_t)((v1164 >> 12) + 4095) >= 0x1000))
            {
              goto LABEL_323;
            }
            if (v1162)
            {
              v1447 = v1165;
            }
            else
            {
              v1446 = v1160 == 4 ? *v1153 : 0;
              v1447 = *(_QWORD *)(v1446 + 40);
            }
            if (v1447 < 0)
              goto LABEL_323;
            v1448 = *(_WORD *)(v304 + 12) & 0xFFF;
            v1449 = v304 && v1448 == 3;
            v1450 = v1449;
            if (!v304 || (v1448 - 3) > 1)
              goto LABEL_323;
            if (v1162)
            {
              v1452 = v1165;
            }
            else
            {
              v1451 = v1160 == 4 ? *v1153 : 0;
              v1452 = *(_QWORD *)(v1451 + 40);
            }
            if (v1450)
            {
              v1454 = *(int *)(v304 + 40);
            }
            else
            {
              v1453 = v1448 == 4 ? v304 : 0;
              v1454 = *(_QWORD *)(v1453 + 40);
            }
            if (!v1454)
              goto LABEL_323;
            if (((v1454 + 1) & v1454) != 0)
              goto LABEL_323;
            v1455 = (uint8x8_t)vcnt_s8((int8x8_t)v1454);
            v1455.i16[0] = vaddlv_u8(v1455);
            v1456 = v1455.i32[0];
            v1457 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v1454));
            v1457.i16[0] = vaddlv_u8(v1457);
            v1458 = (v1457.i32[0] + v1456);
            v462 = __CFADD__(v1452, v1458);
            v1459 = v1452 + v1458;
            if (v462 || v1459 > v312)
            {
LABEL_323:
              {
                return;
              }
              v313 = *(unsigned __int8 *)(v304 + 12);
              switch(v313)
              {
                case 25:
                  v756 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
                  if (v756 >= 0x80000000)
                    v756 = 0x80000000;
                  v757 = v756 - 1;
                  v758 = v757 >= 4;
                  v759 = 16 * v757;
                  v760 = 12255416;
                  break;
                case 27:
                  v1146 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
                  if (v1146 >= 0x80000000)
                    v1146 = 0x80000000;
                  v1147 = v1146 - 1;
                  v758 = v1147 >= 4;
                  v759 = 16 * v1147;
                  v760 = 12386490;
                  break;
                case 26:
                  v1206 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
                  if (v1206 >= 0x80000000)
                    v1206 = 0x80000000;
                  v1207 = v1206 - 1;
                  v758 = v1207 >= 4;
                  v759 = 16 * v1207;
                  v760 = 12320953;
                  break;
                default:
                  LOWORD(v314) = 445;
                  goto LABEL_329;
              }
              v314 = (v760 | 0x1BD01BD00000000uLL) >> v759;
              if (v758)
                LOWORD(v314) = 445;
LABEL_329:
              v315 = *(unsigned __int8 *)(v302 + 12);
              switch(v315)
              {
                case 25:
                  v761 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
                  if (v761 >= 0x80000000)
                    v761 = 0x80000000;
                  v762 = v761 - 1;
                  if (v762 < 4)
                  {
                    v316 = 0x1BD01BD00BB00B8uLL >> (16 * v762);
                    goto LABEL_334;
                  }
                  break;
                case 27:
                  v1148 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
                  if (v1148 >= 0x80000000)
                    v1148 = 0x80000000;
                  v1149 = v1148 - 1;
                  if (v1149 < 4)
                  {
                    v1150 = 16 * v1149;
                    v1151 = 12386490;
LABEL_1524:
                    v316 = (v1151 | 0x1BD01BD00000000uLL) >> v1150;
                    goto LABEL_334;
                  }
                  break;
                case 26:
                  v1208 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
                  if (v1208 >= 0x80000000)
                    v1208 = 0x80000000;
                  v1209 = v1208 - 1;
                  if (v1209 < 4)
                  {
                    v1150 = 16 * v1209;
                    v1151 = 12320953;
                    goto LABEL_1524;
                  }
                  break;
              }
              LOWORD(v316) = 445;
LABEL_334:
              v317 = *(_DWORD *)(v302 + 16);
              if (v317 >= 0x80000000)
                v317 = 0x80000000;
              switch(v317)
              {
                case 1u:
                  v531 = *(_WORD *)(v304 + 12) & 0xFFF;
                  if (v304 && v531 == 3)
                  {
                    v532 = (JSC::ARM64LogicalImmediate *)*(int *)(v304 + 40);
                  }
                  else
                  {
                    if (!v304 || v531 != 4)
                    {
LABEL_1421:
                      v2096 = v10;
                      v321 = 50;
                      v320 = 1;
LABEL_345:
                      if (v302 == v304)
                      {
LABEL_401:
                        v340 = v321;
                        v341 = (uint64_t)v13;
                        v342 = v335;
                        v343 = v2096;
                        goto LABEL_402;
                      }
                      if (*(_BYTE *)(v302 + 12) == 67)
                      {
                        v323 = *(_QWORD *)v2219;
                        v322 = v2219[8];
                      }
                      else
                      {
                        v322 = 0;
                        v323 = 0;
                        *(_QWORD *)v2219 = 0;
                        *(_WORD *)&v2219[8] = 512;
                        *(_DWORD *)&v2219[12] = 1;
                        *(_QWORD *)&v2219[16] = 0;
                        v2219[24] = 0;
                        *(_QWORD *)&v2219[32] = 0;
                        *(_DWORD *)&v2219[39] = 0;
                      }
                      if (v323)
                        v324 = 0;
                      else
                        v324 = v322 == 0;
                      v325 = v324;
                      v326 = v322;
                      if (v324)
                      {
                        v326 = 0;
                        if (!*(_QWORD *)&v2219[16] && *(_DWORD *)&v2219[12] == 1)
                          v326 = *(_QWORD *)&v2219[32] != 0;
                      }
                      if (v321 == 51)
                      {
                        if (((char)v326 | 4) != 5)
                          goto LABEL_361;
                      }
                      else
                      {
                        if (v321 == 50)
                        {
                          if (v326 == 4)
                            goto LABEL_942;
                          v326 = (char)v326;
                        }
                        if (v326 != 1)
                        {
LABEL_361:
                          if (v325)
                          {
                            v322 = 0;
                            if (!*(_QWORD *)&v2219[16] && *(_DWORD *)&v2219[12] == 1)
                              v322 = *(_QWORD *)&v2219[32] != 0;
                          }
                          if (v322 == 1)
                            v327 = v320;
                          else
                            v327 = 0;
                          if (v327 == 1)
                          {
                            v1567 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*((_QWORD *)v13 + 50) + 16));
                            v1573 = *((_QWORD *)v13 + 50);
                            *(_OWORD *)&v2225[16] = *(_OWORD *)v2209;
                            *(_OWORD *)&v2225[25] = *(_OWORD *)&v2209[9];
                            *(_QWORD *)v2225 = &v2225[16];
                            *(_QWORD *)&v2225[48] = 0;
                            *(_WORD *)&v2225[56] = 513;
                            *(_DWORD *)&v2225[60] = 1;
                            *(_QWORD *)&v2226 = v2096;
                            BYTE8(v2226) = 0;
                            *(_QWORD *)&v2225[8] = 0x200000003;
                            *(_QWORD *)v2232 = v1573;
                            *(_DWORD *)&v2232[8] = v321;
LABEL_1420:
                            LOBYTE(v57) = v2219[42];
                            goto LABEL_33;
                          }
                          if (*(_BYTE *)(v304 + 12) == 67)
                          {
                            v329 = *(_QWORD *)v2209;
                            v328 = v2209[8];
                          }
                          else
                          {
                            v328 = 0;
                            v329 = 0;
                            *(_QWORD *)v2209 = 0;
                            *(_WORD *)&v2209[8] = 512;
                            *(_DWORD *)&v2209[12] = 1;
                            *(_QWORD *)&v2209[16] = 0;
                            v2209[24] = 0;
                            *(_QWORD *)&v2210 = 0;
                            *(_DWORD *)((char *)&v2210 + 7) = 0;
                          }
                          if (v329)
                            v330 = 0;
                          else
                            v330 = v328 == 0;
                          v331 = v330;
                          v332 = v328;
                          if (v330)
                          {
                            v332 = 0;
                            if (!*(_QWORD *)&v2209[16] && *(_DWORD *)&v2209[12] == 1)
                              v332 = (_QWORD)v2210 != 0;
                          }
                          switch(v321)
                          {
                            case '2':
                            case '3':
                            case '4':
                            case '5':
                              if (!v332)
                                goto LABEL_383;
                              v1419 = *((_QWORD *)v13 + 50);
                              *(_OWORD *)&v2222[16] = *(_OWORD *)&v2207[9];
                              *(_OWORD *)&v2222[7] = *(_OWORD *)v2207;
                              *(_QWORD *)v2225 = &v2225[16];
                              *(_QWORD *)&v2225[16] = 0;
                              *(_WORD *)&v2225[24] = 513;
                              *(_DWORD *)&v2225[28] = 1;
                              *(_QWORD *)&v2225[32] = v1418;
                              v2225[40] = 0;
                              *(_OWORD *)&v2225[48] = *(_OWORD *)v2207;
                              v2226 = *(_OWORD *)&v2222[23];
                              v2227 = 0;
                              v2228 = 513;
                              v2229 = 1;
                              v2230 = v2096;
                              v2231 = 0;
                              *(_QWORD *)&v2225[8] = 0x300000003;
                              *(_QWORD *)v2232 = v1419;
                              *(_DWORD *)&v2232[8] = v321;
                              v2232[10] = BYTE10(v2210);
                              v1005 = *(_QWORD *)v2225;
                              if (&v2225[16] == *(_BYTE **)v2225)
                                goto LABEL_1295;
                              goto LABEL_1293;
                            default:
LABEL_383:
                              v333 = v328;
                              if (v331)
                              {
                                v333 = 0;
                                if (!*(_QWORD *)&v2209[16] && *(_DWORD *)&v2209[12] == 1)
                                  v333 = (_QWORD)v2210 != 0;
                              }
                              if (v321 == 51)
                              {
                                if (((char)v333 | 4) != 5)
                                  goto LABEL_389;
                              }
                              else
                              {
                                if (v321 == 50)
                                {
                                  if (v333 == 4)
                                    goto LABEL_1091;
                                  v333 = (char)v333;
                                }
                                if (v333 != 1)
                                {
LABEL_389:
                                  if (v331)
                                  {
                                    v328 = 0;
                                    if (!*(_QWORD *)&v2209[16] && *(_DWORD *)&v2209[12] == 1)
                                      v328 = (_QWORD)v2210 != 0;
                                  }
                                  if (v328 == 1)
                                    v334 = v320;
                                  else
                                    v334 = 0;
                                  if (v334 != 1)
                                  {
                                    if (BYTE8(v2210) && !BYTE9(v2210))
                                    {
                                      __break(0xC471u);
                                      JUMPOUT(0x197FB92F8);
                                    }
                                    if (!v2219[40] || v2219[41])
                                      goto LABEL_401;
LABEL_1297:
                                    __break(0xC471u);
                                    JUMPOUT(0x197FB27B8);
                                  }
                                  v1586 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*((_QWORD *)v13 + 50) + 16));
                                  v996 = *((_QWORD *)v13 + 50);
                                  *(_OWORD *)&v2225[16] = *(_OWORD *)v2222;
                                  *(_OWORD *)&v2225[25] = *(_OWORD *)&v2222[9];
                                  *(_QWORD *)v2225 = &v2225[16];
                                  *(_QWORD *)&v2225[48] = 0;
                                  *(_WORD *)&v2225[56] = 513;
                                  *(_DWORD *)&v2225[60] = 1;
                                  *(_QWORD *)&v2226 = v2096;
                                  BYTE8(v2226) = 0;
                                  v997 = 0x200000003;
LABEL_1292:
                                  *(_QWORD *)&v2225[8] = v997;
                                  *(_QWORD *)v2232 = v996;
                                  *(_DWORD *)&v2232[8] = v321;
                                  v2232[10] = BYTE10(v2210);
                                  v1005 = *(_QWORD *)v2225;
                                  if (&v2225[16] != *(_BYTE **)v2225)
                                  {
LABEL_1293:
                                    if (v1005)
                                    {
                                      *(_QWORD *)v2225 = 0;
                                      *(_DWORD *)&v2225[8] = 0;
                                      WTF::fastFree(v1005, v998, v999, v1000, v1001, v1002, v1003, v1004);
                                    }
                                  }
LABEL_1295:
                                  if (!v2219[40] || v2219[41])
                                    return;
                                  goto LABEL_1297;
                                }
                              }
LABEL_1091:
                              v2089 = v329;
                              v852 = *(_DWORD *)&v2209[16];
                              v853 = *(_DWORD *)&v2209[12];
                              if (*(_DWORD *)&v2209[16])
                                v331 = 0;
                              v854 = *(_DWORD *)&v2209[20];
                              if (v331 == 1 && !*(_DWORD *)&v2209[20] && *(_DWORD *)&v2209[12] == 1)
                              {
                                if ((_QWORD)v2210)
                                {
                                  v854 = 0;
                                  v855 = 0;
                                  LOBYTE(v328) = 1;
                                  v856 = 2;
                                  v853 = 1;
LABEL_1291:
                                  v996 = *((_QWORD *)v13 + 50);
                                  *(_QWORD *)&v2225[16] = v2089;
                                  v2225[24] = v328;
                                  v2225[25] = v856;
                                  *(_WORD *)&v2225[26] = v10;
                                  *(_DWORD *)&v2225[28] = v853;
                                  *(_DWORD *)&v2225[32] = v852;
                                  *(_DWORD *)&v2225[36] = v854;
                                  v2225[40] = v855;
                                  *(_QWORD *)v2225 = &v2225[16];
                                  *(_QWORD *)&v2225[48] = 0;
                                  *(_WORD *)&v2225[56] = 513;
                                  *(_DWORD *)&v2225[60] = 1;
                                  *(_QWORD *)&v2226 = v989;
                                  BYTE8(v2226) = 0;
                                  v2227 = 0;
                                  v2228 = 513;
                                  v2229 = 1;
                                  v2230 = v2096;
                                  v2231 = 0;
                                  v997 = 0x300000003;
                                  goto LABEL_1292;
                                }
                              }
                              else if ((_QWORD)v2210)
                              {
                                v1661 = *(unsigned int *)(v2210 + 8);
                                v1662 = *(_QWORD *)v13;
                                if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
                                  v1663 = 63;
                                else
                                  v1663 = *(_QWORD *)(2 * v1662);
                                if (v1663 <= v1661)
                                {
                                  WTF::BitVector::resizeOutOfLine(v13, v1661 + 1, 0);
                                  v1662 = *(_QWORD *)v13;
                                }
                                if (v1662 >= 0)
                                  v1664 = 2 * v1662 + 8;
                                else
                                  v1664 = (uint64_t)v13;
                                *(_QWORD *)(v1664 + ((v1661 >> 3) & 0x1FFFFFF8)) |= 1 << v1661;
                              }
                              v856 = v2209[9];
                              LOWORD(v10) = *(_WORD *)&v2209[10];
                              v855 = v2209[24];
                              goto LABEL_1291;
                          }
                        }
                      }
LABEL_942:
                      v745 = *(_DWORD *)&v2219[16];
                      v746 = *(_DWORD *)&v2219[12];
                      if (*(_DWORD *)&v2219[16])
                        v325 = 0;
                      v747 = *(_DWORD *)&v2219[20];
                      v2092 = v321;
                      if (v325 == 1 && !*(_DWORD *)&v2219[20] && *(_DWORD *)&v2219[12] == 1)
                      {
                        if (*(_QWORD *)&v2219[32])
                        {
                          v747 = 0;
                          v748 = 0;
                          LOBYTE(v322) = 1;
                          v749 = 2;
                          v746 = 1;
LABEL_1100:
                          v858 = *((_QWORD *)v13 + 50);
                          *(_QWORD *)&v2225[16] = v323;
                          v2225[24] = v322;
                          v2225[25] = v749;
                          *(_WORD *)&v2225[26] = v321;
                          *(_DWORD *)&v2225[28] = v746;
                          *(_DWORD *)&v2225[32] = v745;
                          *(_DWORD *)&v2225[36] = v747;
                          v2225[40] = v748;
                          *(_QWORD *)v2225 = &v2225[16];
                          *(_QWORD *)&v2225[48] = 0;
                          *(_WORD *)&v2225[56] = 513;
                          *(_DWORD *)&v2225[60] = 1;
                          *(_QWORD *)&v2226 = v857;
                          BYTE8(v2226) = 0;
                          v2227 = 0;
                          v2228 = 513;
                          v2229 = 1;
                          v2230 = v2096;
                          v2231 = 0;
                          *(_QWORD *)&v2225[8] = 0x300000003;
                          *(_QWORD *)v2232 = v858;
                          v589 = v2092;
LABEL_694:
                          *(_DWORD *)&v2232[8] = v589;
                          v2232[10] = v2219[42];
LABEL_695:
                          v65 = *(_QWORD *)v2225;
                          if (&v2225[16] == *(_BYTE **)v2225)
                            return;
                          goto LABEL_240;
                        }
                      }
                      else if (*(_QWORD *)&v2219[32])
                      {
                        v1598 = *(unsigned int *)(*(_QWORD *)&v2219[32] + 8);
                        v1599 = *(_QWORD *)v13;
                        if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
                          v1600 = 63;
                        else
                          v1600 = *(_QWORD *)(2 * v1599);
                        if (v1600 <= v1598)
                        {
                          WTF::BitVector::resizeOutOfLine(v13, v1598 + 1, 0);
                          v1599 = *(_QWORD *)v13;
                        }
                        if (v1599 >= 0)
                          v1601 = 2 * v1599 + 8;
                        else
                          v1601 = (uint64_t)v13;
                        *(_QWORD *)(v1601 + ((v1598 >> 3) & 0x1FFFFFF8)) |= 1 << v1598;
                      }
                      v749 = v2219[9];
                      LOWORD(v321) = *(_WORD *)&v2219[10];
                      v748 = v2219[24];
                      goto LABEL_1100;
                    }
                    v532 = *(JSC::ARM64LogicalImmediate **)(v304 + 40);
                  }
                  if (JSC::ARM64LogicalImmediate::create32(v532) != -1)
                  {
                    *(_DWORD *)&v2225[12] = 1;
                    *(_QWORD *)&v2225[16] = 0;
                    v2225[24] = 0;
                    *(_WORD *)&v2225[8] = 516;
                    *(_QWORD *)v2225 = v532;
                    v537 = (uint64_t)v13;
                    v538 = 50;
LABEL_636:
                    return;
                  }
                  goto LABEL_1421;
                case 2u:
                  v318 = *(_WORD *)(v304 + 12) & 0xFFF;
                  if (v304 && v318 == 3)
                  {
                    v319 = *(int *)(v304 + 40);
                  }
                  else
                  {
                    if (!v304 || v318 != 4)
                    {
LABEL_344:
                      v2096 = v10;
                      v320 = 0;
                      v321 = 51;
                      goto LABEL_345;
                    }
                    v319 = *(_QWORD *)(v304 + 40);
                  }
                  if (JSC::ARM64LogicalImmediate::create64(v319) != -1)
                  {
                    *(_DWORD *)&v2225[12] = 1;
                    *(_QWORD *)&v2225[16] = 0;
                    v2225[24] = 0;
                    *(_WORD *)&v2225[8] = 517;
                    *(_QWORD *)v2225 = v319;
                    v537 = (uint64_t)v13;
                    v538 = 51;
                    goto LABEL_636;
                  }
                  goto LABEL_344;
                case 3u:
                  v320 = 0;
                  v321 = 53;
                  goto LABEL_345;
                case 4u:
                  v320 = 0;
                  v321 = 52;
                  goto LABEL_345;
                default:
                  __break(0xC471u);
                  JUMPOUT(0x197FB9B04);
              }
            }
            v1461 = *(_WORD *)(v1154 + 12) & 0xFFF;
            if (v1154 && v1461 == 3)
            {
              v1665 = *(int *)(v1154 + 40);
            }
            else
            {
              if (!v1154 || v1461 != 4)
                goto LABEL_1978;
              v1665 = *(_QWORD *)(v1154 + 40);
            }
            if ((unint64_t)(v1665 + 4095) <= 0x1FFE
              || (v1665 & 0xFFF) == 0
              && (!((unint64_t)v1665 >> 24) || (unint64_t)((v1665 >> 12) + 4095) < 0x1000))
            {
              *(_DWORD *)&v2225[12] = 1;
              *(_QWORD *)&v2225[16] = 0;
              v2225[24] = 0;
              *(_WORD *)&v2225[8] = 514;
              *(_QWORD *)v2225 = v1665;
LABEL_1979:
              *(_DWORD *)&v2219[12] = 1;
              *(_QWORD *)&v2219[16] = 0;
              v2219[24] = 0;
              *(_WORD *)&v2219[8] = 514;
              *(_QWORD *)v2219 = v1458;
LABEL_1980:
              v1463 = (uint64_t)v13;
              v1464 = v10;
              goto LABEL_1981;
            }
LABEL_1978:
            *(_QWORD *)v2225 = 0;
            *(_WORD *)&v2225[8] = 512;
            *(_DWORD *)&v2225[12] = 1;
            *(_QWORD *)&v2225[16] = 0;
            v2225[24] = 0;
            goto LABEL_1979;
          }
          v1048 = *(_DWORD *)(v302 + 16);
          if (v1048 >= 0x80000000)
            v1048 = 0x80000000;
          if (v1048 - 1 > 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197FB6194);
          }
          if (*(_BYTE *)(v302 + 12) != 67)
          {
            *(_DWORD *)&v2219[39] = 0;
            *(_QWORD *)&v2219[32] = 0;
            goto LABEL_1348;
          }
          v1365 = *(_QWORD *)v2219;
          if (*(_QWORD *)v2219)
            v1366 = 0;
          else
            v1366 = v2219[8] == 0;
          v1367 = v1366;
          if (v1366)
          {
            if (*(_QWORD *)&v2219[16] || *(_DWORD *)&v2219[12] != 1 || (v1368 = *(unsigned int **)&v2219[32]) == 0)
            {
LABEL_1348:
              if (v2219[40] && !v2219[41])
              {
                __break(0xC471u);
                JUMPOUT(0x197FB2BA0);
              }
              return;
            }
            v1369 = 0;
            v1370 = 0;
            v1371 = 0;
            v1372 = 1;
          }
          else
          {
            if (v2219[8] != 1)
              goto LABEL_1348;
            v1369 = *(_DWORD *)&v2219[20];
            v1370 = *(_DWORD *)&v2219[16];
            v1372 = *(_DWORD *)&v2219[12];
            v1371 = 1;
            v1368 = *(unsigned int **)&v2219[32];
          }
          if (v1370)
            v1367 = 0;
          if (v1367 == 1 && !v1369 && v1372 == 1)
          {
            if (v1368)
            {
              v1369 = 0;
              v1374 = 0;
              v1371 = 1;
              v1375 = 2;
              v1372 = 1;
LABEL_1987:
              v1465 = *((_QWORD *)v13 + 50);
              *(_QWORD *)&v2225[16] = v1365;
              v2225[24] = v1371;
              v2225[25] = v1375;
              *(_WORD *)&v2225[26] = v1373;
              *(_DWORD *)&v2225[28] = v1372;
              *(_DWORD *)&v2225[32] = v1370;
              *(_DWORD *)&v2225[36] = v1369;
              v2225[40] = v1374;
              *(_QWORD *)v2225 = &v2225[16];
              *(_QWORD *)&v2225[48] = 0;
              *(_WORD *)&v2225[56] = 513;
              *(_DWORD *)&v2225[60] = 1;
              *(_QWORD *)&v2226 = v1049;
              BYTE8(v2226) = 0;
              *(_QWORD *)&v2225[8] = 0x200000003;
              *(_QWORD *)v2232 = v1465;
              v1442 = 105;
LABEL_1929:
              *(_DWORD *)&v2232[8] = v1442;
              v2232[10] = v2219[42];
              v65 = *(_QWORD *)v2225;
              if (&v2225[16] == *(_BYTE **)v2225)
                return;
              goto LABEL_240;
            }
          }
          else if (v1368)
          {
            v2022 = v1368[2];
            v2023 = *(_QWORD *)v13;
            if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
              v2024 = 63;
            else
              v2024 = *(_QWORD *)(2 * v2023);
            if (v2024 <= v2022)
            {
              WTF::BitVector::resizeOutOfLine(v13, v2022 + 1, 0);
              v2023 = *(_QWORD *)v13;
            }
            if (v2023 >= 0)
              v2025 = 2 * v2023 + 8;
            else
              v2025 = (uint64_t)v13;
            *(_QWORD *)(v2025 + ((v2022 >> 3) & 0x1FFFFFF8)) |= 1 << v2022;
          }
          v1375 = v2219[9];
          v1373 = *(_WORD *)&v2219[10];
          v1374 = v2219[24];
          goto LABEL_1987;
        }
      }
      else
      {
        if (v304)
          v308 = v305 == 4;
        else
          v308 = 0;
        if (!v308)
          goto LABEL_310;
        v309 = *(_QWORD *)(v304 + 40);
        if (v309 != 255)
          goto LABEL_309;
      }
      v657 = *(_DWORD *)(v302 + 16);
      if (v657 >= 0x80000000)
        v657 = 0x80000000;
      if (v657 - 1 > 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB6018);
      }
      if (*(_BYTE *)(v302 + 12) != 67)
      {
        *(_DWORD *)&v2219[39] = 0;
        *(_QWORD *)&v2219[32] = 0;
        goto LABEL_825;
      }
      v1320 = *(_QWORD *)v2219;
      if (*(_QWORD *)v2219)
        v1321 = 0;
      else
        v1321 = v2219[8] == 0;
      v1322 = v1321;
      if (v1321)
      {
        if (*(_QWORD *)&v2219[16] || *(_DWORD *)&v2219[12] != 1 || (v1323 = *(unsigned int **)&v2219[32]) == 0)
        {
LABEL_825:
          if (v2219[40] && !v2219[41])
          {
            __break(0xC471u);
            JUMPOUT(0x197FB0C2CLL);
          }
          return;
        }
        v1324 = 0;
        v1325 = 0;
        v1326 = 0;
        v1327 = 1;
      }
      else
      {
        if (v2219[8] != 1)
          goto LABEL_825;
        v1324 = *(_DWORD *)&v2219[20];
        v1325 = *(_DWORD *)&v2219[16];
        v1327 = *(_DWORD *)&v2219[12];
        v1326 = 1;
        v1323 = *(unsigned int **)&v2219[32];
      }
      if (v1325)
        v1322 = 0;
      if (v1322 == 1 && !v1324 && v1327 == 1)
      {
        if (v1323)
        {
          v1324 = 0;
          v1329 = 0;
          v1326 = 1;
          v1330 = 2;
          v1327 = 1;
LABEL_1928:
          v1441 = *((_QWORD *)v13 + 50);
          *(_QWORD *)&v2225[16] = v1320;
          v2225[24] = v1326;
          v2225[25] = v1330;
          *(_WORD *)&v2225[26] = v1328;
          *(_DWORD *)&v2225[28] = v1327;
          *(_DWORD *)&v2225[32] = v1325;
          *(_DWORD *)&v2225[36] = v1324;
          v2225[40] = v1329;
          *(_QWORD *)v2225 = &v2225[16];
          *(_QWORD *)&v2225[48] = 0;
          *(_WORD *)&v2225[56] = 513;
          *(_DWORD *)&v2225[60] = 1;
          *(_QWORD *)&v2226 = v658;
          BYTE8(v2226) = 0;
          *(_QWORD *)&v2225[8] = 0x200000003;
          *(_QWORD *)v2232 = v1441;
          v1442 = 103;
          goto LABEL_1929;
        }
      }
      else if (v1323)
      {
        v1997 = v1323[2];
        v1998 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
          v1999 = 63;
        else
          v1999 = *(_QWORD *)(2 * v1998);
        if (v1999 <= v1997)
        {
          WTF::BitVector::resizeOutOfLine(v13, v1997 + 1, 0);
          v1998 = *(_QWORD *)v13;
        }
        if (v1998 >= 0)
          v2000 = 2 * v1998 + 8;
        else
          v2000 = (uint64_t)v13;
        *(_QWORD *)(v2000 + ((v1997 >> 3) & 0x1FFFFFF8)) |= 1 << v1997;
      }
      v1330 = v2219[9];
      v1328 = *(_WORD *)&v2219[10];
      v1329 = v2219[24];
      goto LABEL_1928;
    case 23:
      v524 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v525 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      {
      }
      return;
    case 24:
      v68 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v424 = JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      v425 = *(int **)v424;
      v426 = *(_WORD *)(*(_QWORD *)v424 + 12) & 0xFFF;
      if (*(_QWORD *)v424)
        v427 = v426 == 3;
      else
        v427 = 0;
      if (v427)
      {
        v429 = v425[10];
        if ((_DWORD)v429 != -1)
          goto LABEL_514;
      }
      else
      {
        if (v425)
          v428 = v426 == 4;
        else
          v428 = 0;
        if (!v428)
        {
LABEL_515:
          {
          }
          return;
        }
        v429 = *((_QWORD *)v425 + 5);
        if (v429 != -1)
        {
LABEL_514:
          if (v429 == 1 && *(_BYTE *)(v68 + 12) == 71)
          {
            v1443 = *(unsigned int *)(v68 + 8);
            if (!*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v1443) && *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v1443) == 1)
              goto LABEL_1934;
          }
          goto LABEL_515;
        }
      }
      v750 = *(_DWORD *)(v68 + 16);
      if (v750 >= 0x80000000)
        v750 = 0x80000000;
      if (v750 == 2)
      {
        v542 = 73;
      }
      else
      {
        if (v750 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197FB56D8);
        }
        v542 = 72;
      }
      if (*(_BYTE *)(v68 + 12) == 67)
      {
        v841 = *(_QWORD *)v2219;
        if (*(_QWORD *)v2219)
          v1112 = 0;
        else
          v1112 = v2219[8] == 0;
        v843 = v1112;
        if (v1112)
        {
          if (!*(_QWORD *)&v2219[16] && *(_DWORD *)&v2219[12] == 1)
          {
            v844 = *(unsigned int **)&v2219[32];
            if (*(_QWORD *)&v2219[32])
              goto LABEL_1074;
          }
        }
        else if (v2219[8] == 1)
        {
          goto LABEL_1354;
        }
      }
      else
      {
        *(_DWORD *)&v2219[39] = 0;
        *(_QWORD *)&v2219[32] = 0;
      }
      if (v2219[40] && !v2219[41])
      {
        __break(0xC471u);
        JUMPOUT(0x197FB1360);
      }
      return;
    case 25:
      v14 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      *(_QWORD *)v2207 = 0;
      v595 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      *(_QWORD *)v2207 = v595;
      v596 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
      if (v596 >= 0x80000000)
        v597 = 0x80000000;
      else
        v597 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
      if (v597 == 2)
      {
        v598 = 145;
      }
      else
      {
        if (v597 != 1)
          goto LABEL_716;
        v598 = 144;
      }
      *(_WORD *)v2209 = v598;
      v599 = *(_WORD *)(v595 + 12) & 0xFFF;
      if (v595)
        v600 = v599 == 3;
      else
        v600 = 0;
      v601 = v600;
      if (v600)
      {
        v914 = *(_DWORD *)(v595 + 40);
        v915 = v914;
      }
      else
      {
        if (v595)
          v602 = v599 == 4;
        else
          v602 = 0;
        if (!v602)
          goto LABEL_716;
        v915 = *(_QWORD *)(v595 + 40);
        v914 = v915;
      }
      if ((unint64_t)(v915 + 4095) > 0x1FFE
        && ((v915 & 0xFFF) != 0 || (unint64_t)v915 >> 24 && (unint64_t)((v915 >> 12) + 4095) >= 0x1000)
        || (v601 ? (v917 = v914) : (v599 != 4 ? (v916 = 0) : (v916 = v595), v917 = *(_QWORD *)(v916 + 40)),
            v917 < 0
         || (v918 = *(unsigned int *)(v14 + 8), *(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v918))
         || *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v918) != 1))
      {
LABEL_716:
        if (v596 >= 0x80000000)
          v596 = 0x80000000;
        if (v596 == 2)
        {
          v603 = 167;
          v604 = 64;
        }
        else
        {
          if (v596 != 1)
            goto LABEL_721;
          v603 = 166;
          v604 = 32;
        }
        if (*(_BYTE *)(v14 + 12) == 26
          && *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v14, 0) + 12) == 25)
        {
          *(_QWORD *)v2222 = 0;
          v1617 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
          *(_QWORD *)v2222 = *(_QWORD *)JSC::B3::Value::child(*v1617, 0);
          v1618 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
          v1619 = *(_QWORD *)JSC::B3::Value::child(*v1618, 1u);
          v1620 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v14, 1u);
          v1621 = *(_QWORD *)v2207;
          if (!WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)v13, (uint64_t)v2222))
          {
            if (*(_QWORD *)v2225 || v2225[8] || *(_QWORD *)&v2225[16] || *(_DWORD *)&v2225[12] != 1)
            {
              if (*(_QWORD *)v2219 || v2219[8] || *(_QWORD *)&v2219[16] || *(_DWORD *)&v2219[12] != 1)
              {
                if (*(_QWORD *)v2209 || v2209[8] || *(_QWORD *)&v2209[16] || *(_DWORD *)&v2209[12] != 1)
                {
                  v1622 = *(_WORD *)(v1619 + 12) & 0xFFF;
                  v1623 = v1619 && v1622 == 3;
                  v1624 = v1623;
                  if (v1623)
                  {
                    v1626 = *(int *)(v1619 + 40);
                  }
                  else
                  {
                    v1625 = v1622 == 4 ? v1619 : 0;
                    v1626 = *(_QWORD *)(v1625 + 40);
                  }
                  if ((v1626 & 0x8000000000000000) == 0)
                  {
                    v1627 = *(_WORD *)(v1620 + 12) & 0xFFF;
                    v1628 = v1620 && v1627 == 3;
                    v1629 = v1628;
                    if (v1628)
                    {
                      v1631 = *(int *)(v1620 + 40);
                    }
                    else
                    {
                      v1630 = v1627 == 4 ? v1620 : 0;
                      v1631 = *(_QWORD *)(v1630 + 40);
                    }
                    if ((v1631 & 0x8000000000000000) == 0)
                    {
                      v1632 = *(_WORD *)(v1621 + 12) & 0xFFF;
                      v1633 = v1621 && v1632 == 3;
                      v1634 = v1633;
                      if (v1633)
                      {
                        v1636 = *(int *)(v1621 + 40);
                      }
                      else
                      {
                        v1635 = v1632 == 4 ? v1621 : 0;
                        v1636 = *(_QWORD *)(v1635 + 40);
                      }
                      if ((v1636 & 0x8000000000000000) == 0)
                      {
                        if (v1624)
                        {
                          v1638 = *(int *)(v1619 + 40);
                        }
                        else
                        {
                          v1637 = v1622 == 4 ? v1619 : 0;
                          v1638 = *(_QWORD *)(v1637 + 40);
                        }
                        if (v1629)
                        {
                          v1640 = *(int *)(v1620 + 40);
                        }
                        else
                        {
                          v1639 = v1627 == 4 ? v1620 : 0;
                          v1640 = *(_QWORD *)(v1639 + 40);
                        }
                        if (v1634)
                        {
                          v1642 = *(int *)(v1621 + 40);
                        }
                        else
                        {
                          v1641 = v1632 == 4 ? v1621 : 0;
                          v1642 = *(_QWORD *)(v1641 + 40);
                        }
                        v1643 = v604 - v1638;
                        if (v604 > v1638)
                        {
                          v462 = __CFADD__(v1642, v1643);
                          v1644 = v1642 + v1643;
                          if (!v462 && v604 != v1638 && v1638 == v1640 && v1644 <= v604)
                          {
                            *(_DWORD *)&v2219[12] = 1;
                            *(_QWORD *)&v2219[16] = 0;
                            v2219[24] = 0;
                            *(_WORD *)&v2219[8] = 514;
                            *(_QWORD *)v2219 = v1643;
                            v1463 = (uint64_t)v13;
                            v1464 = v603;
LABEL_1981:
                            return;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_721:
        v605 = *(_QWORD *)v2207;
        v606 = *(_WORD *)(*(_QWORD *)v2207 + 12) & 0xFFF;
        if (*(_QWORD *)v2207)
          v607 = v606 == 3;
        else
          v607 = 0;
        v608 = v607;
        if (v607 && *(_DWORD *)(*(_QWORD *)v2207 + 40) == 1)
        {
          return;
        }
        v609 = *(_DWORD *)(v14 + 16);
        if (v609 >= 0x80000000)
          v609 = 0x80000000;
        v610 = v609 - 1;
        if (v610 > 3)
          v611 = 445;
        else
          v611 = dword_19914F770[v610];
        if (v608)
        {
          v923 = *(int *)(*(_QWORD *)v2207 + 40);
        }
        else
        {
          if (!*(_QWORD *)v2207 || v606 != 4)
            goto LABEL_925;
          v923 = *(_QWORD *)(*(_QWORD *)v2207 + 40);
        }
        if ((unint64_t)(v923 + 4095) <= 0x1FFE)
        {
          if (v611 - 58 > 7)
            goto LABEL_926;
        }
        else if ((v923 & 0xFFF) != 0
               || ((v924 = v923 >> 12, v925 = (unint64_t)v923 >> 24, (unint64_t)(v924 + 4095) >= 0x1000)
                 ? (v926 = v925 == 0)
                 : (v926 = 1),
                   !v926 || v611 - 58 >= 8))
        {
LABEL_925:
          if (v611 - 58 <= 5)
          {
            v1353 = (void *)v611;
            v1352 = (uint64_t)v13;
            v1354 = v1592;
            v1355 = v1593;
            goto LABEL_1814;
          }
LABEL_926:
          v727 = v13;
          v728 = (JSC::B3::Value *)v605;
          goto LABEL_927;
        }
        v1010 = *(_WORD *)(v605 + 12) & 0xFFF;
        if (v605 && v1010 == 3)
        {
          v2027 = *(int *)(v605 + 40);
        }
        else
        {
          if (!v605 || v1010 != 4)
            goto LABEL_1311;
          v2027 = *(_QWORD *)(v605 + 40);
        }
        if ((unint64_t)(v2027 + 4095) <= 0x1FFE
          || (v2027 & 0xFFF) == 0
          && (!((unint64_t)v2027 >> 24) || (unint64_t)((v2027 >> 12) + 4095) < 0x1000))
        {
          *(_DWORD *)&v2225[12] = 1;
          *(_QWORD *)&v2225[16] = 0;
          v2225[24] = 0;
          *(_WORD *)&v2225[8] = 514;
          *(_QWORD *)v2225 = v2027;
LABEL_1312:
          v1015 = (void *)v611;
          v1016 = (uint64_t)v13;
          v1017 = v1009;
LABEL_1313:
          return;
        }
LABEL_1311:
        *(_QWORD *)v2225 = 0;
        *(_WORD *)&v2225[8] = 512;
        *(_DWORD *)&v2225[12] = 1;
        *(_QWORD *)&v2225[16] = 0;
        v2225[24] = 0;
        goto LABEL_1312;
      }
      if (v601)
      {
        v920 = v914;
      }
      else
      {
        if (v599 == 4)
          v919 = v595;
        else
          v919 = 0;
        v920 = *(_QWORD *)(v919 + 40);
      }
      *(_QWORD *)v2219 = v920;
      *(_QWORD *)v2225 = v13;
      *(_QWORD *)&v2225[8] = v2209;
      *(_QWORD *)&v2225[16] = v2219;
      *(_QWORD *)&v2225[24] = v2207;
      v921 = *(unsigned __int8 *)(v14 + 12);
      if (v921 == 43)
      {
        if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v14, 0) + 12) == 44)
        {
          v1594 = *(unsigned int *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v14, 0) + 8);
          if (!*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v1594) && *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v1594) == 1)
          {
            v1595 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
            v1596 = (unsigned int **)JSC::B3::Value::child(*v1595, 0);
            {
              v1597 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
              goto LABEL_1893;
            }
          }
        }
      }
      else if (v921 == 22)
      {
        v1401 = *(unsigned int **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
        v1402 = JSC::B3::Value::child((JSC::B3::Value *)v14, 1u);
        v1403 = *(_QWORD *)v1402;
        v1404 = *(_WORD *)(*(_QWORD *)v1402 + 12) & 0xFFF;
        if (*(_QWORD *)v1402 && v1404 == 3)
        {
          v1405 = *(int *)(v1403 + 40);
        }
        else
        {
          if (!v1403 || v1404 != 4)
            goto LABEL_1199;
          v1405 = *(_QWORD *)(v1403 + 40);
        }
      }
LABEL_1199:
      v596 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
      goto LABEL_716;
    case 26:
      v739 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v740 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      v741 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
      if (v741 >= 0x80000000)
        v741 = 0x80000000;
      if (v741 == 2)
      {
        LODWORD(v10) = 169;
        v742 = 64;
      }
      else
      {
        if (v741 != 1)
          goto LABEL_933;
        LODWORD(v10) = 168;
        v742 = 32;
      }
      if (*(_BYTE *)(v739 + 12) == 25
        && (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v739, 0) + 12) == 27
         || *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v739, 0) + 12) == 26))
      {
        *(_QWORD *)v2222 = 0;
        v1506 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v739, 0);
        *(_QWORD *)v2222 = *(_QWORD *)JSC::B3::Value::child(*v1506, 0);
        v1507 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v739, 0);
        v1508 = *(_QWORD *)JSC::B3::Value::child(*v1507, 1u);
        v1509 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v739, 1u);
        if (!WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)v13, (uint64_t)v2222))
        {
          if (*(_QWORD *)v2225 || v2225[8] || *(_QWORD *)&v2225[16] || *(_DWORD *)&v2225[12] != 1)
          {
            if (*(_QWORD *)v2219 || v2219[8] || *(_QWORD *)&v2219[16] || *(_DWORD *)&v2219[12] != 1)
            {
              if (*(_QWORD *)v2209 || v2209[8] || *(_QWORD *)&v2209[16] || *(_DWORD *)&v2209[12] != 1)
              {
                v1510 = *(_WORD *)(v1508 + 12) & 0xFFF;
                v1511 = v1508 && v1510 == 3;
                v1512 = v1511;
                if (v1511)
                {
                  v1514 = *(int *)(v1508 + 40);
                }
                else
                {
                  v1513 = v1510 == 4 ? v1508 : 0;
                  v1514 = *(_QWORD *)(v1513 + 40);
                }
                if ((v1514 & 0x8000000000000000) == 0)
                {
                  v1515 = *(_WORD *)(v1509 + 12) & 0xFFF;
                  v1516 = v1509 && v1515 == 3;
                  v1517 = v1516;
                  if (v1516)
                  {
                    v1519 = *(int *)(v1509 + 40);
                  }
                  else
                  {
                    v1518 = v1515 == 4 ? v1509 : 0;
                    v1519 = *(_QWORD *)(v1518 + 40);
                  }
                  if ((v1519 & 0x8000000000000000) == 0)
                  {
                    v1520 = *(_WORD *)(v740 + 12) & 0xFFF;
                    v1521 = v740 && v1520 == 3;
                    v1522 = v1521;
                    if (v1521)
                    {
                      v1524 = *(int *)(v740 + 40);
                    }
                    else
                    {
                      v1523 = v1520 == 4 ? v740 : 0;
                      v1524 = *(_QWORD *)(v1523 + 40);
                    }
                    if ((v1524 & 0x8000000000000000) == 0)
                    {
                      if (v1517)
                      {
                        v1526 = *(int *)(v1509 + 40);
                      }
                      else
                      {
                        v1525 = v1515 == 4 ? v1509 : 0;
                        v1526 = *(_QWORD *)(v1525 + 40);
                      }
                      if (v1522)
                      {
                        v1528 = *(int *)(v740 + 40);
                      }
                      else
                      {
                        v1527 = v1520 == 4 ? v740 : 0;
                        v1528 = *(_QWORD *)(v1527 + 40);
                      }
                      if (v1512)
                      {
                        v1530 = *(int *)(v1508 + 40);
                      }
                      else
                      {
                        v1529 = v1510 == 4 ? v1508 : 0;
                        v1530 = *(_QWORD *)(v1529 + 40);
                      }
                      v1531 = v742 - v1526;
                      if (v742 > v1526)
                      {
                        v462 = __CFADD__(v1530, v1531);
                        v1532 = v1530 + v1531;
                        if (!v462 && v742 != v1526 && v1526 == v1528 && v1532 <= v742)
                        {
                          *(_DWORD *)&v2219[12] = 1;
                          *(_QWORD *)&v2219[16] = 0;
                          v2219[24] = 0;
                          *(_WORD *)&v2219[8] = 514;
                          *(_QWORD *)v2219 = v1531;
                          goto LABEL_1980;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_933:
      v743 = *(_DWORD *)(v739 + 16);
      if (v743 >= 0x80000000)
        v743 = 0x80000000;
      v744 = v743 - 1;
      if (v744 > 3)
        v611 = 445;
      else
        v611 = dword_19914F780[v744];
      v889 = *(_WORD *)(v740 + 12) & 0xFFF;
      if (v740 && v889 == 3)
      {
        v1102 = *(int *)(v740 + 40);
      }
      else
      {
        if (!v740 || v889 != 4)
          goto LABEL_1139;
        v1102 = *(_QWORD *)(v740 + 40);
      }
      if ((unint64_t)(v1102 + 4095) <= 0x1FFE)
      {
        if (v611 - 60 <= 5)
          goto LABEL_1497;
      }
      else if ((v1102 & 0xFFF) == 0)
      {
        v1103 = v1102 >> 12;
        v1104 = (unint64_t)v1102 >> 24;
        v1105 = (unint64_t)(v1103 + 4095) < 0x1000 || v1104 == 0;
        if (v1105 && v611 - 60 < 6)
          goto LABEL_1497;
      }
LABEL_1139:
      if ((v611 & 0x1BC) == 0x3C)
      {
        v1353 = (void *)v611;
        v1352 = (uint64_t)v13;
        v1354 = v890;
        v1355 = v1751;
        goto LABEL_1814;
      }
      v727 = v13;
      v728 = (JSC::B3::Value *)v740;
LABEL_927:
      return;
    case 27:
      v739 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v740 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      v807 = *(_DWORD *)(v739 + 16);
      if (v807 >= 0x80000000)
        v807 = 0x80000000;
      v808 = v807 - 1;
      if (v808 > 3)
        v611 = 445;
      else
        v611 = dword_19914F790[v808];
      v967 = *(_WORD *)(v740 + 12) & 0xFFF;
      if (v740)
        v968 = v967 == 3;
      else
        v968 = 0;
      if (v968)
      {
        v1119 = *(int *)(v740 + 40);
      }
      else
      {
        if (v740)
          v969 = v967 == 4;
        else
          v969 = 0;
        if (!v969)
          goto LABEL_1269;
        v1119 = *(_QWORD *)(v740 + 40);
      }
      if ((unint64_t)(v1119 + 4095) <= 0x1FFE)
      {
        if (v611 - 62 <= 3)
          goto LABEL_1497;
      }
      else if ((v1119 & 0xFFF) == 0)
      {
        v1120 = v1119 >> 12;
        v1121 = (unint64_t)v1119 >> 24;
        v1122 = (unint64_t)(v1120 + 4095) < 0x1000 || v1121 == 0;
        if (v1122 && v611 - 62 < 4)
        {
LABEL_1497:
          v1134 = *(_WORD *)(v740 + 12) & 0xFFF;
          if (v740 && v1134 == 3)
          {
            v2042 = *(int *)(v740 + 40);
          }
          else
          {
            if (!v740 || v1134 != 4)
              goto LABEL_1501;
            v2042 = *(_QWORD *)(v740 + 40);
          }
          if ((unint64_t)(v2042 + 4095) <= 0x1FFE
            || (v2042 & 0xFFF) == 0
            && (!((unint64_t)v2042 >> 24) || (unint64_t)((v2042 >> 12) + 4095) < 0x1000))
          {
            *(_DWORD *)&v2225[12] = 1;
            *(_QWORD *)&v2225[16] = 0;
            v2225[24] = 0;
            *(_WORD *)&v2225[8] = 514;
            *(_QWORD *)v2225 = v2042;
            goto LABEL_1502;
          }
LABEL_1501:
          *(_QWORD *)v2225 = 0;
          *(_WORD *)&v2225[8] = 512;
          *(_DWORD *)&v2225[12] = 1;
          *(_QWORD *)&v2225[16] = 0;
          v2225[24] = 0;
LABEL_1502:
          v1015 = (void *)v611;
          v1016 = (uint64_t)v13;
          v1017 = v1133;
          goto LABEL_1313;
        }
      }
LABEL_1269:
      if ((v611 & 0x1BE) != 0x3E)
      {
        v166 = *((unsigned int *)v13 + 149);
        v167 = v981;
        v169 = (void *)v611;
        v168 = (uint64_t)v13;
        goto LABEL_115;
      }
      v1353 = (void *)v611;
      v1352 = (uint64_t)v13;
      v1354 = v970;
      goto LABEL_1813;
    case 28:
      v1816 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v1817 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      return;
    case 29:
      v1818 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v1819 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      return;
    case 30:
      v1820 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      return;
    case 31:
      v1476 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      return;
    case 32:
      v1426 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      return;
    case 33:
      v1487 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      return;
    case 34:
      v1397 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      return;
    case 35:
      v1968 = *(_DWORD *)(v14 + 16);
      v1969 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v1971 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      v1974 = v1968 == 3;
      v1975 = 204;
      v1976 = 202;
      goto LABEL_2632;
    case 36:
      v1977 = *(_DWORD *)(v14 + 16);
      v1978 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v1979 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      v1974 = v1977 == 3;
      v1975 = 205;
      v1976 = 203;
LABEL_2632:
      if (v1974)
        v1353 = (void *)v1976;
      else
        v1353 = (void *)v1975;
      v1348 = v1973;
      v1352 = (uint64_t)v13;
      v1354 = v1970;
      v1355 = v1972;
      goto LABEL_1814;
    case 37:
      v438 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v439 = *(JSC::B3::Value **)v438;
      v440 = *(_DWORD *)(*(_QWORD *)v438 + 16);
      if (v440 >= 0x80000000)
        v440 = 0x80000000;
      v441 = v440 - 1;
      if (v441 >= 4)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB9C54);
      }
      v442 = (void *)dword_19914F7A0[v441];
      if (*((_BYTE *)v439 + 12) == 67)
      {
        v450 = *(_QWORD *)v2219;
        v451 = v2219[8];
        v452 = *(_QWORD *)v2219 == 0;
      }
      else
      {
        v450 = 0;
        v451 = 0;
        v2219[9] = 2;
        v452 = 1;
        *(_DWORD *)&v2219[12] = 1;
        *(_QWORD *)&v2219[16] = 0;
        v2219[24] = 0;
        *(_QWORD *)&v2219[32] = 0;
        *(_DWORD *)&v2219[39] = 0;
      }
      v453 = v451;
      if (v452)
      {
        v453 = v451;
        if (!v451 && !*(_QWORD *)&v2219[16] && *(_DWORD *)&v2219[12] == 1)
          v453 = *(_QWORD *)&v2219[32] != 0;
      }
      switch((int)v442)
      {
        case 't':
        case 'v':
          if (v453 == 1 || (char)v453 == 11)
            goto LABEL_1123;
          goto LABEL_544;
        case 'w':
        case 'y':
          if ((char)v453 > 0xB || ((1 << v453) & 0xE82) == 0)
          {
LABEL_544:
            goto LABEL_545;
          }
LABEL_1123:
          v2219[40] = 1;
          v874 = *(_DWORD *)&v2219[20];
          v875 = *(_DWORD *)&v2219[16];
          v876 = *(_DWORD *)&v2219[12];
          if (v450 || v451 || *(_QWORD *)&v2219[16] || *(_DWORD *)&v2219[12] != 1)
          {
            if (*(_QWORD *)&v2219[32])
            {
              v1581 = *(unsigned int *)(*(_QWORD *)&v2219[32] + 8);
              v1582 = *(_QWORD *)v13;
              if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
                v1583 = 63;
              else
                v1583 = *(_QWORD *)(2 * v1582);
              if (v1583 <= v1581)
              {
                WTF::BitVector::resizeOutOfLine(v13, v1581 + 1, 0);
                v1582 = *(_QWORD *)v13;
              }
              if (v1582 >= 0)
                v1584 = 2 * v1582 + 8;
              else
                v1584 = (uint64_t)v13;
              *(_QWORD *)(v1584 + ((v1581 >> 3) & 0x1FFFFFF8)) |= 1 << v1581;
            }
          }
          else if (*(_QWORD *)&v2219[32])
          {
            v874 = 0;
            v878 = 0;
            LOBYTE(v451) = 1;
            v879 = 2;
            v876 = 1;
            goto LABEL_1131;
          }
          v879 = v2219[9];
          v877 = *(_WORD *)&v2219[10];
          v878 = v2219[24];
LABEL_1131:
          v880 = *((_QWORD *)v13 + 50);
          *(_QWORD *)&v2225[16] = v450;
          v2225[24] = v451;
          v2225[25] = v879;
          *(_WORD *)&v2225[26] = v877;
          *(_DWORD *)&v2225[28] = v876;
          *(_DWORD *)&v2225[32] = v875;
          *(_DWORD *)&v2225[36] = v874;
          v2225[40] = v878;
          *(_QWORD *)v2225 = &v2225[16];
          *(_QWORD *)&v2225[48] = 0;
          *(_WORD *)&v2225[56] = 513;
          *(_DWORD *)&v2225[60] = 1;
          *(_QWORD *)&v2226 = v449;
          BYTE8(v2226) = 0;
          *(_QWORD *)&v2225[8] = 0x200000003;
          *(_QWORD *)v2232 = v880;
          *(_DWORD *)&v2232[8] = (_DWORD)v442;
          v2232[10] = v2219[42];
          v2219[41] = 1;
          v888 = *(_QWORD *)v2225;
          if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
          {
            *(_QWORD *)v2225 = 0;
            *(_DWORD *)&v2225[8] = 0;
            WTF::fastFree(v888, v881, v882, v883, v884, v885, v886, v887);
          }
LABEL_545:
          if (v2219[40] && !v2219[41])
          {
            __break(0xC471u);
            JUMPOUT(0x197FAFC38);
          }
          return;
        default:
          v708 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
          if (v708 >= 0x80000000)
            v708 = 0x80000000;
          v709 = v708 - 1;
          if (v709 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x197FB9D04);
          }
          v710 = (void *)qword_19914FB48[v709];
          goto LABEL_545;
      }
      return;
    case 38:
      v1574 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      return;
    case 39:
      v1468 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      return;
    case 40:
      v1717 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      return;
    case 41:
      v1691 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      return;
    case 42:
      v1006 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v1007 = *(JSC::B3::Value **)v1006;
      v1008 = *(_DWORD *)(*(_QWORD *)v1006 + 16);
      if (v1008 >= 0x80000000)
        v1008 = 0x80000000;
      if (v1008 != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB2848);
      }
      if (*((_BYTE *)v1007 + 12) != 67)
      {
        *(_DWORD *)&v2219[39] = 0;
        *(_QWORD *)&v2219[32] = 0;
        goto LABEL_1561;
      }
      if (*(_QWORD *)v2219 || v2219[8])
      {
        if (v2219[8] != 1)
          goto LABEL_1561;
      }
      else if (*(_QWORD *)&v2219[16] || *(_DWORD *)&v2219[12] != 1 || !*(_QWORD *)&v2219[32])
      {
LABEL_1561:
        if (v2219[40] && !v2219[41])
        {
          __break(0xC471u);
          JUMPOUT(0x197FB377CLL);
        }
        return;
      }
      v1445 = *((_QWORD *)v13 + 50);
      *(_OWORD *)&v2225[16] = *(_OWORD *)v2209;
      *(_OWORD *)&v2225[25] = *(_OWORD *)&v2209[9];
      *(_QWORD *)v2225 = &v2225[16];
      *(_QWORD *)&v2225[48] = 0;
      *(_WORD *)&v2225[56] = 513;
      *(_DWORD *)&v2225[60] = 1;
      *(_QWORD *)&v2226 = v1173;
      BYTE8(v2226) = 0;
      *(_QWORD *)&v2225[8] = 0x200000003;
      *(_QWORD *)v2232 = v1445;
      v589 = 102;
      goto LABEL_694;
    case 43:
      v249 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v250 = *(JSC::B3::Value **)v249;
      v251 = *(_DWORD *)(*(_QWORD *)v249 + 16);
      if (v251 >= 0x80000000)
        v251 = 0x80000000;
      if (v251 != 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197FAEB20);
      }
      if (*((_BYTE *)v250 + 12) == 67)
      {
        v393 = *(_QWORD *)v2219;
        v392 = v2219[8];
      }
      else
      {
        v392 = 0;
        v393 = 0;
        v2219[9] = 2;
        *(_DWORD *)&v2219[12] = 1;
        *(_QWORD *)&v2219[16] = 0;
        v2219[24] = 0;
        *(_QWORD *)&v2219[32] = 0;
        *(_DWORD *)&v2219[39] = 0;
      }
      if (v393 || v392)
      {
        if ((char)v392 <= 0x14 && ((1 << v392) & 0x100E82) != 0)
        {
          if (*(_QWORD *)&v2219[32])
          {
            v1488 = *(unsigned int *)(*(_QWORD *)&v2219[32] + 8);
            v1489 = *(_QWORD *)v13;
            if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
              v1490 = 63;
            else
              v1490 = *(_QWORD *)(2 * v1489);
            if (v1490 <= v1488)
            {
              WTF::BitVector::resizeOutOfLine(v13, v1488 + 1, 0);
              v1489 = *(_QWORD *)v13;
            }
            if (v1489 >= 0)
              v1491 = 2 * v1489 + 8;
            else
              v1491 = (uint64_t)v13;
            *(_QWORD *)(v1491 + ((v1488 >> 3) & 0x1FFFFFF8)) |= 1 << v1488;
          }
          v398 = v2219[9];
          v395 = *(_WORD *)&v2219[10];
          v399 = *(_DWORD *)&v2219[12];
          v397 = *(_QWORD *)&v2219[16];
          v396 = v2219[24];
          goto LABEL_693;
        }
      }
      else if (!*(_QWORD *)&v2219[16] && *(_DWORD *)&v2219[12] == 1 && *(_QWORD *)&v2219[32])
      {
        v396 = 0;
        v397 = v394;
        LOBYTE(v392) = 1;
        v398 = 2;
        v399 = 1;
LABEL_693:
        v588 = *((_QWORD *)v13 + 50);
        *(_QWORD *)v2225 = &v2225[16];
        *(_QWORD *)&v2225[16] = v393;
        v2225[24] = v392;
        v2225[25] = v398;
        *(_WORD *)&v2225[26] = v395;
        *(_DWORD *)&v2225[28] = v399;
        *(_QWORD *)&v2225[32] = v397;
        v2225[40] = v396;
        *(_QWORD *)&v2225[48] = 0;
        *(_WORD *)&v2225[56] = 513;
        *(_DWORD *)&v2225[60] = 1;
        *(_QWORD *)&v2226 = v391;
        BYTE8(v2226) = 0;
        *(_QWORD *)&v2225[8] = 0x200000003;
        *(_QWORD *)v2232 = v588;
        v589 = 94;
        goto LABEL_694;
      }
      if (v2219[40] && !v2219[41])
      {
        __break(0xC471u);
        JUMPOUT(0x197FB06ACLL);
      }
      return;
    case 47:
      v539 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v540 = *(JSC::B3::Value **)v539;
      v541 = *(_DWORD *)(*(_QWORD *)v539 + 16);
      if (v541 >= 0x80000000)
        v541 = 0x80000000;
      if (v541 == 2)
      {
        v542 = 83;
      }
      else
      {
        if (v541 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197FB4764);
        }
        v542 = 82;
      }
      if (*((_BYTE *)v540 + 12) != 67)
      {
        *(_DWORD *)&v2219[39] = 0;
        *(_QWORD *)&v2219[32] = 0;
        goto LABEL_643;
      }
      v841 = *(_QWORD *)v2219;
      if (*(_QWORD *)v2219)
        v842 = 0;
      else
        v842 = v2219[8] == 0;
      v843 = v842;
      if (v842)
      {
        if (*(_QWORD *)&v2219[16] || *(_DWORD *)&v2219[12] != 1 || (v844 = *(unsigned int **)&v2219[32]) == 0)
        {
LABEL_643:
          if (v2219[40] && !v2219[41])
          {
            __break(0xC471u);
            JUMPOUT(0x197FB02E8);
          }
          return;
        }
LABEL_1074:
        v845 = 0;
        v846 = 0;
        v847 = 0;
        v848 = 1;
      }
      else
      {
        if (v2219[8] != 1)
          goto LABEL_643;
LABEL_1354:
        v846 = *(_DWORD *)&v2219[20];
        v847 = *(_DWORD *)&v2219[16];
        v848 = *(_DWORD *)&v2219[12];
        v845 = 1;
        v844 = *(unsigned int **)&v2219[32];
      }
      if (v847)
        v843 = 0;
      if (v843 == 1 && !v846 && v848 == 1)
      {
        if (v844)
        {
          v846 = 0;
          v850 = 0;
          v845 = 1;
          v851 = 2;
          v848 = 1;
          goto LABEL_1153;
        }
      }
      else if (v844)
      {
        v1603 = v844[2];
        v1604 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
          v1605 = 63;
        else
          v1605 = *(_QWORD *)(2 * v1604);
        if (v1605 <= v1603)
        {
          WTF::BitVector::resizeOutOfLine(v13, v1603 + 1, 0);
          v1604 = *(_QWORD *)v13;
        }
        if (v1604 >= 0)
          v1606 = 2 * v1604 + 8;
        else
          v1606 = (uint64_t)v13;
        *(_QWORD *)(v1606 + ((v1603 >> 3) & 0x1FFFFFF8)) |= 1 << v1603;
      }
      v851 = v2219[9];
      v849 = *(_WORD *)&v2219[10];
      v850 = v2219[24];
LABEL_1153:
      v903 = *((_QWORD *)v13 + 50);
      *(_QWORD *)&v2225[16] = v841;
      v2225[24] = v845;
      v2225[25] = v851;
      *(_WORD *)&v2225[26] = v849;
      *(_DWORD *)&v2225[28] = v848;
      *(_DWORD *)&v2225[32] = v847;
      *(_DWORD *)&v2225[36] = v846;
      v2225[40] = v850;
      *(_QWORD *)v2225 = &v2225[16];
      *(_QWORD *)&v2225[48] = 0;
      *(_WORD *)&v2225[56] = 513;
      *(_DWORD *)&v2225[60] = 1;
      *(_QWORD *)&v2226 = v543;
      BYTE8(v2226) = 0;
      *(_QWORD *)&v2225[8] = 0x200000003;
      *(_QWORD *)v2232 = v903;
      *(_DWORD *)&v2232[8] = v542;
      v2232[10] = v2219[42];
      v65 = *(_QWORD *)v2225;
      if (&v2225[16] != *(_BYTE **)v2225)
        goto LABEL_240;
      return;
    case 48:
      v1429 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      return;
    case 49:
      v982 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v983 = *(JSC::B3::Value **)v982;
      v984 = *(_DWORD *)(*(_QWORD *)v982 + 16);
      if (v984 >= 0x80000000)
        v984 = 0x80000000;
      if (v984 != 3)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB25E4);
      }
      if (*((_BYTE *)v983 + 12) != 67)
      {
        *(_DWORD *)&v2219[39] = 0;
        *(_QWORD *)&v2219[32] = 0;
        goto LABEL_2402;
      }
      if (*(_QWORD *)v2219 || v2219[8])
      {
        if (v2219[8] != 1)
          goto LABEL_2402;
      }
      else if (*(_QWORD *)&v2219[16] || *(_DWORD *)&v2219[12] != 1 || !*(_QWORD *)&v2219[32])
      {
LABEL_2402:
        if (v2219[40] && !v2219[41])
        {
          __break(0xC471u);
          JUMPOUT(0x197FB6F8CLL);
        }
        return;
      }
      v2026 = *((_QWORD *)v13 + 50);
      *(_OWORD *)&v2225[16] = *(_OWORD *)v2209;
      *(_OWORD *)&v2225[25] = *(_OWORD *)&v2209[9];
      *(_QWORD *)v2225 = &v2225[16];
      *(_QWORD *)&v2225[48] = 0;
      *(_WORD *)&v2225[56] = 513;
      *(_DWORD *)&v2225[60] = 1;
      *(_QWORD *)&v2226 = v1734;
      BYTE8(v2226) = 0;
      *(_QWORD *)&v2225[8] = 0x200000003;
      *(_QWORD *)v2232 = v2026;
      v589 = 89;
      goto LABEL_694;
    case 50:
      v1143 = JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v1144 = *(JSC::B3::Value **)v1143;
      v1145 = *(_DWORD *)(*(_QWORD *)v1143 + 16);
      if (v1145 >= 0x80000000)
        v1145 = 0x80000000;
      if (v1145 != 4)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB3564);
      }
      if (*((_BYTE *)v1144 + 12) != 67)
      {
        *(_DWORD *)&v2219[39] = 0;
        *(_QWORD *)&v2219[32] = 0;
        goto LABEL_2348;
      }
      if (*(_QWORD *)v2219 || v2219[8])
      {
        if (v2219[8] != 1)
          goto LABEL_2348;
      }
      else if (*(_QWORD *)&v2219[16] || *(_DWORD *)&v2219[12] != 1 || !*(_QWORD *)&v2219[32])
      {
LABEL_2348:
        if (v2219[40] && !v2219[41])
        {
          __break(0xC471u);
          JUMPOUT(0x197FB6A98);
        }
        return;
      }
      v1752 = *((_QWORD *)v13 + 50);
      *(_OWORD *)&v2225[16] = *(_OWORD *)v2209;
      *(_OWORD *)&v2225[25] = *(_OWORD *)&v2209[9];
      *(_QWORD *)v2225 = &v2225[16];
      *(_QWORD *)&v2225[48] = 0;
      *(_WORD *)&v2225[56] = 513;
      *(_DWORD *)&v2225[60] = 1;
      *(_QWORD *)&v2226 = v1681;
      BYTE8(v2226) = 0;
      *(_QWORD *)&v2225[8] = 0x200000003;
      *(_QWORD *)v2232 = v1752;
      v589 = 88;
      goto LABEL_694;
    case 51:
    case 52:
      if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0) + 12) == 72)
      {
        v1777 = JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
        v1778 = *(unsigned __int8 *)(*(_QWORD *)v1777 + 12) - 71 >= 8
              ? 0
              : *(JSC::B3::MemoryValue **)v1777;
        if (JSC::B3::MemoryValue::isCanonicalWidth(v1778))
        {
          v1779 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
          v1780 = *(_QWORD *)JSC::B3::Value::child(*v1779, 0);
          if (v1780 == *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u))
          {
            v1781 = *(unsigned int *)(*(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0) + 8);
            if (!*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v1781) && *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v1781) == 1)
            {
              v1782 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
              v76 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
              v77 = *(unsigned __int8 *)(*((_QWORD *)v13 + 50) + 12);
              goto LABEL_2472;
            }
          }
        }
      }
      v554 = *((_DWORD *)v13 + 91);
      if (!v554)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB9F94);
      }
      v222 = *((_QWORD *)v13 + 44) + 528 * v554 - 528;
      v555 = *(unsigned int *)(v222 + 12);
      if ((_DWORD)v555 == *(_DWORD *)(v222 + 8))
      {
        v1477 = v222;
        goto LABEL_2003;
      }
      v556 = *(_QWORD *)v222;
      v557 = *(_QWORD *)v222 + (v555 << 7);
      v558 = (_OWORD *)(v557 + 16);
      *(_QWORD *)v557 = v557 + 16;
      *(_QWORD *)(v557 + 8) = 3;
      v559 = *(__int128 **)v2225;
      if (*(_BYTE **)v2225 == &v2225[16])
      {
        if (*(_DWORD *)&v2225[12])
        {
          v560 = 32 * *(unsigned int *)&v2225[12];
          do
          {
            v561 = *v559;
            v562 = v559[1];
            v559 += 2;
            *v558 = v561;
            v558[1] = v562;
            v558 += 2;
            v560 -= 32;
          }
          while (v560);
        }
      }
      else
      {
        *(_QWORD *)v2225 = &v2225[16];
        *(_QWORD *)v557 = v559;
        *(_DWORD *)(v557 + 8) = *(_DWORD *)&v2225[8];
      }
      v563 = *(_DWORD *)&v2225[12];
      *(_DWORD *)&v2225[12] = 0;
      *(_DWORD *)(v557 + 12) = v563;
      v564 = v556 + (v555 << 7);
      v565 = *(_QWORD *)v2232;
      *(_DWORD *)(v564 + 119) = *(_DWORD *)&v2232[7];
      *(_QWORD *)(v564 + 112) = v565;
      goto LABEL_238;
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
      v823 = *((_DWORD *)this + 91);
      if (!v823)
      {
        __break(0xC471u);
        JUMPOUT(0x197FBA104);
      }
      v432 = *((_QWORD *)this + 44) + 528 * v823 - 528;
      v824 = *(unsigned int *)(v432 + 12);
      if ((_DWORD)v824 == *(_DWORD *)(v432 + 8))
        goto LABEL_2002;
      v825 = *(_QWORD *)v432;
      v826 = *(_QWORD *)v432 + (v824 << 7);
      v827 = (_OWORD *)(v826 + 16);
      *(_QWORD *)v826 = v826 + 16;
      *(_QWORD *)(v826 + 8) = 3;
      v828 = *(__int128 **)v2225;
      if (*(_BYTE **)v2225 != &v2225[16])
      {
        *(_QWORD *)v2225 = &v2225[16];
        *(_QWORD *)v826 = v828;
        v953 = *(_DWORD *)&v2225[8];
        goto LABEL_1253;
      }
      if (*(_DWORD *)&v2225[12])
      {
        v829 = 32 * *(unsigned int *)&v2225[12];
        do
        {
          v830 = *v828;
          v831 = v828[1];
          v828 += 2;
          *v827 = v830;
          v827[1] = v831;
          v827 += 2;
          v829 -= 32;
        }
        while (v829);
      }
      goto LABEL_1251;
    case 62:
      v430 = *(_DWORD *)(v14 + 16);
      if (v430 >= 0x80000000)
        v430 = 0x80000000;
      if (v430 == 5)
      {
        *(_QWORD *)v2219 = 0;
        *(_QWORD *)v2209 = 0;
        v1825 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 2u);
        v1832 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
        v1851 = *(_QWORD *)v2225;
        if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
        {
          *(_QWORD *)v2225 = 0;
          *(_DWORD *)&v2225[8] = 0;
          WTF::fastFree(v1851, v1844, v1845, v1846, v1847, v1848, v1849, v1850);
        }
        v1852 = *(_QWORD *)v2209;
        JSC::B3::Air::BasicBlock::setSuccessors(*(uint64_t *)v2219, v1824, 0, *(uint64_t *)v2209, 0, v1848, v1849, v1850);
        v1853 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
        JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>(v1824, (void *)0x71, *((_QWORD *)v13 + 50), v1854, v1855, v1856, v1857, v1858);
        JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&>(v1824, (void *)0x149, *((_QWORD *)v13 + 50), v1859, v1860, v1861, v1862, v1863);
        WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v1824 + 24, 1uLL, v1864, v1865, v1866, v1867, v1868, v1869);
        if (!*(_DWORD *)(v1824 + 36))
        {
          __break(0xC471u);
          JUMPOUT(0x197FBA514);
        }
        v1870 = *(_QWORD *)(v1824 + 24);
        *(_QWORD *)v1870 = v1852;
        *(_BYTE *)(v1870 + 8) = 0;
        return;
      }
      a2.i32[0] = 2;
      a3.i32[0] = v430 - 1;
      v2113 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_u32(a2, a3), 0), (int8x16_t)xmmword_19914F720, (int8x16_t)xmmword_19914F710);
      v431 = *((_DWORD *)this + 91);
      if (!v431)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB9F74);
      }
      v432 = *((_QWORD *)this + 44) + 528 * v431 - 528;
      v2200 = this;
      v433 = *(JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
      v2199[0] = &v2200;
      v2199[1] = &v2113;
      v2198[0] = &v2200;
      v2198[1] = &v2113;
      v2197[0] = &v2200;
      v2197[1] = &v2113;
      v2196[0] = &v2200;
      v2196[1] = &v2113;
      v2195[0] = &v2113;
      v2195[1] = v13;
      v2194[0] = &v2113;
      v2194[1] = v13;
      v2206 = v433;
      v2205 = 0;
      v2204 = 1;
      v2203[0] = (uint64_t *)v13;
      v2203[1] = (uint64_t *)&v2204;
      while (2)
      {
        if (*((_BYTE *)v433 + 12) != 24)
          goto LABEL_526;
        v1753 = JSC::B3::Value::child(v433, 1u);
        v1754 = *(_QWORD *)v1753;
        v1755 = (*(_WORD *)(*(_QWORD *)v1753 + 12) & 0xFFF) - 3;
        v433 = v2206;
        if (!v1754 || v1755 > 1)
          goto LABEL_526;
        v1757 = JSC::B3::Value::child(v2206, 1u);
        v1758 = *(_QWORD *)v1757;
        v1759 = *(_WORD *)(*(_QWORD *)v1757 + 12) & 0xFFF;
        if (*(_QWORD *)v1757 && v1759 == 3)
        {
          v1761 = *(int *)(v1758 + 40);
        }
        else
        {
          if (v1759 != 4)
            v1758 = 0;
          v1761 = *(_QWORD *)(v1758 + 40);
        }
        v433 = v2206;
        if (v1761 != 1)
          goto LABEL_526;
        v1762 = (JSC::B3::Value **)JSC::B3::Value::child(v2206, 0);
        if (JSC::B3::Value::returnsBool(*v1762))
          goto LABEL_1166;
        v433 = v2206;
LABEL_526:
        if (*((_BYTE *)v433 + 12) != 51)
          goto LABEL_527;
        v904 = JSC::B3::Value::child(v433, 1u);
        v905 = *(_QWORD *)v904;
        v906 = *(_WORD *)(*(_QWORD *)v904 + 12) & 0xFFF;
        if (*(_QWORD *)v904)
          v907 = v906 == 3;
        else
          v907 = 0;
        if (v907)
        {
          v909 = *(int *)(v905 + 40);
        }
        else
        {
          if (v905)
            v908 = v906 == 4;
          else
            v908 = 0;
          if (!v908)
          {
LABEL_527:
            *(_QWORD *)v2219 = &v2205;
            *(_QWORD *)&v2219[8] = &v2206;
            *(_QWORD *)&v2219[16] = v13;
            *(_QWORD *)&v2219[24] = v2199;
            *(_QWORD *)&v2219[32] = &v2204;
            *(_QWORD *)&v2219[40] = v2195;
            *(_QWORD *)&v2219[48] = v2194;
            *(_QWORD *)&v2219[56] = v2196;
            *(_QWORD *)&v2220 = v2197;
            v434 = *((_DWORD *)v2206 + 4);
            if (v434 >= 0x80000000)
              v434 = 0x80000000;
            if (v434 > 5)
            {
              LOBYTE(v435) = 0;
              v436 = 0;
              LOBYTE(v437) = 0;
            }
            else
            {
              v435 = (0xAu >> v434) & 1;
              v436 = (0x14u >> v434) & 1;
              v437 = 0x40302030200uLL >> (8 * v434);
            }
            *(_DWORD *)&v2225[12] = 1;
            *(_QWORD *)&v2225[16] = 0;
            v2225[24] = 0;
            *(_WORD *)&v2225[8] = 527;
            *(_QWORD *)v2225 = 1;
            JSC::B3::Air::Arg::inverted(v2225, v2205, (uint64_t)v2202);
            v2201[0] = v2198;
            v2201[1] = v2202;
            if (!v646)
            {
LABEL_2943:
              *(_QWORD *)v2209 = 0;
              *(_WORD *)&v2209[8] = 512;
              *(_DWORD *)&v2209[12] = 1;
              *(_QWORD *)&v2209[16] = 0;
              v2209[24] = 0;
              WORD4(v2210) = 0;
              BYTE10(v2210) = 0;
              *(_QWORD *)&v2210 = v2206;
              *(_QWORD *)v2222 = 0;
              *(_WORD *)&v2222[8] = 512;
              *(_DWORD *)&v2222[12] = 1;
              *(_QWORD *)&v2222[16] = 0;
              v2222[24] = 0;
              v2223 = 0;
              v2224 = 0;
              *(_QWORD *)&v2222[32] = v2206;
              __asm { BR              X10 }
            }
            v654 = v646;
            switch(*((_BYTE *)v2206 + 12))
            {
              case '3':
                v655 = 0;
                goto LABEL_1241;
              case '4':
                v655 = 1;
                v656 = 1;
                goto LABEL_1242;
              case '5':
                v655 = 11;
                v656 = 3;
                goto LABEL_1242;
              case '6':
                v655 = 12;
                v656 = 12;
                goto LABEL_1242;
              case '7':
                v655 = 13;
                v656 = 9;
                goto LABEL_1242;
              case '8':
                v655 = 10;
                v656 = 10;
                goto LABEL_1242;
              case '9':
                v655 = 8;
                goto LABEL_1241;
              case ':':
                v655 = 3;
                goto LABEL_1241;
              case ';':
                v655 = 2;
                goto LABEL_1241;
              case '<':
                v655 = 9;
LABEL_1241:
                v656 = 0;
                goto LABEL_1242;
              case '=':
                v655 = 0;
                v656 = 6;
LABEL_1242:
                goto LABEL_1243;
              default:
                if (*((_BYTE *)v2206 + 12) != 22)
                {
                  *(_QWORD *)v2225 = &v2225[16];
                  *(_QWORD *)&v2225[8] = 3;
                  *(_QWORD *)v2232 = 0;
                  *(_WORD *)&v2232[8] = 0;
                  v2232[10] &= 0xFCu;
                  goto LABEL_1243;
                }
                v2101 = v436;
                v2094 = v435;
                v2218 = 0;
                v2218 = *(JSC::B3::Value **)JSC::B3::Value::child(v2206, 0);
                v1247 = *(_QWORD *)JSC::B3::Value::child(v2206, 1u);
                v2216 = 0;
                *(_QWORD *)&v2214 = 0;
                WORD4(v2214) = 512;
                HIDWORD(v2214) = 1;
                *(_QWORD *)&v2215 = 0;
                BYTE8(v2215) = 0;
                *(_QWORD *)&v2212 = 0;
                WORD4(v2212) = 512;
                HIDWORD(v2212) = 1;
                *(_QWORD *)&v2213 = 0;
                BYTE8(v2213) = 0;
                v1248 = *(_WORD *)(v1247 + 12) & 0xFFF;
                if (v1247 && v1248 == 3)
                {
                  v2217 = 1;
                  v1251 = (JSC::ARM64LogicalImmediate *)*(int *)(v1247 + 40);
                }
                else
                {
                  if (v1247)
                    v1249 = v1248 == 4;
                  else
                    v1249 = 0;
                  v1250 = v1249;
                  v2217 = v1250;
                  if (!v1249)
                  {
LABEL_1650:
                    *(_QWORD *)v2209 = &v2217;
                    *(_QWORD *)&v2209[8] = &v2216;
                    *(_QWORD *)&v2209[16] = &v2214;
                    *(_QWORD *)&v2209[24] = v2201;
                    *(_QWORD *)&v2210 = v13;
                    *((_QWORD *)&v2210 + 1) = &v2218;
                    v2211 = &v2212;
                    if (v2204)
                    {
                      if (*(_QWORD *)v2232 || *(_WORD *)&v2232[8] || (v2232[10] & 3) != 0 || *(_DWORD *)&v2225[12])
                        goto LABEL_1243;
                      v1257 = *(_QWORD *)v2225;
                      if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                      {
                        *(_QWORD *)v2225 = 0;
                        *(_DWORD *)&v2225[8] = 0;
                        WTF::fastFree(v1257, v647, v648, v649, v650, v651, v652, v653);
                      }
                      if (*(_QWORD *)v2232 || *(_WORD *)&v2232[8] || (v2232[10] & 3) != 0 || *(_DWORD *)&v2225[12])
                        goto LABEL_1243;
                      v1258 = *(_QWORD *)v2225;
                      if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                      {
                        *(_QWORD *)v2225 = 0;
                        *(_DWORD *)&v2225[8] = 0;
                        WTF::fastFree(v1258, v647, v648, v649, v650, v651, v652, v653);
                      }
                      if (*(_QWORD *)v2232 || *(_WORD *)&v2232[8] || (v2232[10] & 3) != 0 || *(_DWORD *)&v2225[12])
                        goto LABEL_1243;
                      v1259 = *(_QWORD *)v2225;
                      if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                      {
                        *(_QWORD *)v2225 = 0;
                        *(_DWORD *)&v2225[8] = 0;
                        WTF::fastFree(v1259, v647, v648, v649, v650, v651, v652, v653);
                      }
                      if (*(_QWORD *)v2232 || *(_WORD *)&v2232[8] || (v2232[10] & 3) != 0 || *(_DWORD *)&v2225[12])
                        goto LABEL_1243;
                      v1260 = *(_QWORD *)v2225;
                      if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                      {
                        *(_QWORD *)v2225 = 0;
                        *(_DWORD *)&v2225[8] = 0;
                        WTF::fastFree(v1260, v647, v648, v649, v650, v651, v652, v653);
                      }
                      if (*(_QWORD *)v2232 || *(_WORD *)&v2232[8] || (v2232[10] & 3) != 0 || *(_DWORD *)&v2225[12])
                        goto LABEL_1243;
                      v1261 = *(_QWORD *)v2225;
                      if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                      {
                        *(_QWORD *)v2225 = 0;
                        *(_DWORD *)&v2225[8] = 0;
                        WTF::fastFree(v1261, v647, v648, v649, v650, v651, v652, v653);
                      }
                      if (*(_QWORD *)v2232 || *(_WORD *)&v2232[8] || (v2232[10] & 3) != 0 || *(_DWORD *)&v2225[12])
                        goto LABEL_1243;
                      v1262 = *(_QWORD *)v2225;
                      if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                      {
                        *(_QWORD *)v2225 = 0;
                        *(_DWORD *)&v2225[8] = 0;
                        WTF::fastFree(v1262, v647, v648, v649, v650, v651, v652, v653);
                      }
                      v1263 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(v2206, 0) + 16);
                      if (v1263 >= 0x80000000)
                        v1263 = 0x80000000;
                      if (v1263 >= 6)
                        v1264 = 0;
                      else
                        v1264 = 0x40302030200uLL >> (8 * v1263);
                      *(_QWORD *)v2207 = 0;
                      *(_WORD *)&v2207[8] = 512;
                      *(_DWORD *)&v2207[12] = 1;
                      *(_QWORD *)&v2207[16] = 0;
                      v2207[24] = 0;
                      LOWORD(v2208[1]) = 0;
                      BYTE2(v2208[1]) = 0;
                      v2208[0] = v1247;
                      if (LOBYTE(v2208[1]) && !BYTE1(v2208[1]))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197FBA6C0);
                      }
                      if ((_BYTE)v2223 && !HIBYTE(v2223))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197FBA6E0);
                      }
                      if (*(_QWORD *)v2232 || *(_WORD *)&v2232[8] || (v2232[10] & 3) != 0 || *(_DWORD *)&v2225[12])
                      {
                        v2085 = v2218;
                        v2086 = v13;
                      }
                      else
                      {
                        v1272 = *(_QWORD *)v2225;
                        if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                        {
                          *(_QWORD *)v2225 = 0;
                          *(_DWORD *)&v2225[8] = 0;
                          WTF::fastFree(v1272, v1265, v1266, v1267, v1268, v1269, v1270, v1271);
                        }
                        *(_QWORD *)v2222 = 0;
                        *(_WORD *)&v2222[8] = 512;
                        *(_DWORD *)&v2222[12] = 1;
                        *(_QWORD *)&v2222[16] = 0;
                        v2222[24] = 0;
                        v2223 = 0;
                        v2224 = 0;
                        *(_QWORD *)&v2222[32] = v2218;
                        if (LOBYTE(v2208[1]) && !BYTE1(v2208[1]))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x197FBA70CLL);
                        }
                        if ((_BYTE)v2223 && !HIBYTE(v2223))
                        {
                          __break(0xC471u);
                          JUMPOUT(0x197FBA72CLL);
                        }
                        if (!*(_QWORD *)v2232 && !*(_WORD *)&v2232[8] && (v2232[10] & 3) == 0 && !*(_DWORD *)&v2225[12])
                        {
                          v1280 = *(_QWORD *)v2225;
                          if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                          {
                            *(_QWORD *)v2225 = 0;
                            *(_DWORD *)&v2225[8] = 0;
                            WTF::fastFree(v1280, v1273, v1274, v1275, v1276, v1277, v1278, v1279);
                          }
                          goto LABEL_1720;
                        }
                        v2086 = v13;
                        v2085 = (JSC::B3::Value *)v1247;
                      }
                      goto LABEL_1243;
                    }
LABEL_1720:
                    if (!v2217)
                    {
LABEL_2985:
                      *(_QWORD *)v2222 = 0;
                      *(_WORD *)&v2222[8] = 512;
                      *(_DWORD *)&v2222[12] = 1;
                      *(_QWORD *)&v2222[16] = 0;
                      v2222[24] = 0;
                      v2223 = 0;
                      v2224 = 0;
                      *(_QWORD *)&v2222[32] = v2218;
                      *(_QWORD *)v2207 = 0;
                      *(_WORD *)&v2207[8] = 512;
                      *(_DWORD *)&v2207[12] = 1;
                      *(_QWORD *)&v2207[16] = 0;
                      v2207[24] = 0;
                      LOWORD(v2208[1]) = 0;
                      BYTE2(v2208[1]) = 0;
                      v2208[0] = v1247;
                      if (LOBYTE(v2208[1]) && !BYTE1(v2208[1]))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197FBA47CLL);
                      }
                      if ((_BYTE)v2223 && !HIBYTE(v2223))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197FBA45CLL);
                      }
                      goto LABEL_1243;
                    }
                    if (v2216 == (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL)
                      v1281 = v2094;
                    else
                      v1281 = 0;
                    v1282 = v2101;
                    if (v2216 != (JSC::ARM64LogicalImmediate *)-1)
                      v1282 = 0;
                    if ((v1281 & 1) != 0 || v1282)
                    {
                      *(_QWORD *)v2222 = 0;
                      *(_WORD *)&v2222[8] = 512;
                      *(_DWORD *)&v2222[12] = 1;
                      *(_QWORD *)&v2222[16] = 0;
                      v2222[24] = 0;
                      v2223 = 0;
                      v2224 = 0;
                      *(_QWORD *)&v2222[32] = v2218;
                      *(_QWORD *)v2207 = 0;
                      *(_WORD *)&v2207[8] = 512;
                      *(_DWORD *)&v2207[12] = 1;
                      *(_QWORD *)&v2207[16] = 0;
                      v2207[24] = 0;
                      LOWORD(v2208[1]) = 0;
                      BYTE2(v2208[1]) = 0;
                      v2208[0] = v2218;
                      if (LOBYTE(v2208[1]) && !BYTE1(v2208[1]))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197FB9E2CLL);
                      }
                      if ((_BYTE)v2223 && !HIBYTE(v2223))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197FB9E4CLL);
                      }
                      if (*(_QWORD *)v2232 || *(_WORD *)&v2232[8] || (v2232[10] & 3) != 0 || *(_DWORD *)&v2225[12])
                        goto LABEL_1243;
                      v1992 = *(_QWORD *)v2225;
                      if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                      {
                        *(_QWORD *)v2225 = 0;
                        *(_DWORD *)&v2225[8] = 0;
                        WTF::fastFree(v1992, v647, v648, v649, v650, v651, v652, v653);
                      }
                    }
                    if (!HIDWORD(v2216))
                    {
                      *(_QWORD *)v2222 = 0;
                      *(_WORD *)&v2222[8] = 512;
                      *(_DWORD *)&v2222[12] = 1;
                      *(_QWORD *)&v2222[16] = 0;
                      v2222[24] = 0;
                      v2223 = 0;
                      v2224 = 0;
                      *(_QWORD *)&v2222[32] = v2218;
                      *(_OWORD *)v2207 = v2214;
                      *(_OWORD *)&v2207[16] = v2215;
                      memset(v2208, 0, 11);
                      if (LOBYTE(v2208[1]) && !BYTE1(v2208[1]))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197FB9C14);
                      }
                      if ((_BYTE)v2223 && !HIBYTE(v2223))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197FB9C34);
                      }
                      if (*(_QWORD *)v2232 || *(_WORD *)&v2232[8] || (v2232[10] & 3) != 0 || *(_DWORD *)&v2225[12])
                        goto LABEL_1243;
                      v2067 = *(_QWORD *)v2225;
                      if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                      {
                        *(_QWORD *)v2225 = 0;
                        *(_DWORD *)&v2225[8] = 0;
                        WTF::fastFree(v2067, v647, v648, v649, v650, v651, v652, v653);
                      }
                      *(_QWORD *)v2222 = 0;
                      *(_WORD *)&v2222[8] = 512;
                      *(_DWORD *)&v2222[12] = 1;
                      *(_QWORD *)&v2222[16] = 0;
                      v2222[24] = 0;
                      v2223 = 0;
                      v2224 = 0;
                      *(_QWORD *)&v2222[32] = v2218;
                      *(_OWORD *)v2207 = v2212;
                      *(_OWORD *)&v2207[16] = v2213;
                      memset(v2208, 0, 11);
                      if (LOBYTE(v2208[1]) && !BYTE1(v2208[1]))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197FBA594);
                      }
                      if ((_BYTE)v2223 && !HIBYTE(v2223))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197FBA5B4);
                      }
                      if (*(_QWORD *)v2232 || *(_WORD *)&v2232[8] || (v2232[10] & 3) != 0 || *(_DWORD *)&v2225[12])
                        goto LABEL_1243;
                      v2068 = *(_QWORD *)v2225;
                      if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                      {
                        *(_QWORD *)v2225 = 0;
                        *(_DWORD *)&v2225[8] = 0;
                        WTF::fastFree(v2068, v647, v648, v649, v650, v651, v652, v653);
                      }
                    }
                    *(_QWORD *)v2222 = 0;
                    *(_WORD *)&v2222[8] = 512;
                    *(_DWORD *)&v2222[12] = 1;
                    *(_QWORD *)&v2222[16] = 0;
                    v2222[24] = 0;
                    v2223 = 0;
                    v2224 = 0;
                    *(_QWORD *)&v2222[32] = v2218;
                    *(_OWORD *)v2207 = v2214;
                    *(_OWORD *)&v2207[16] = v2215;
                    memset(v2208, 0, 11);
                    if (LOBYTE(v2208[1]) && !BYTE1(v2208[1]))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FBA49CLL);
                    }
                    if ((_BYTE)v2223 && !HIBYTE(v2223))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FBA4BCLL);
                    }
                    if (!*(_QWORD *)v2232 && !*(_WORD *)&v2232[8] && (v2232[10] & 3) == 0 && !*(_DWORD *)&v2225[12])
                    {
                      v2069 = *(_QWORD *)v2225;
                      if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                      {
                        *(_QWORD *)v2225 = 0;
                        *(_DWORD *)&v2225[8] = 0;
                        WTF::fastFree(v2069, v647, v648, v649, v650, v651, v652, v653);
                      }
                      *(_QWORD *)v2222 = 0;
                      *(_WORD *)&v2222[8] = 512;
                      *(_DWORD *)&v2222[12] = 1;
                      *(_QWORD *)&v2222[16] = 0;
                      v2222[24] = 0;
                      v2223 = 0;
                      v2224 = 0;
                      *(_QWORD *)&v2222[32] = v2218;
                      *(_OWORD *)v2207 = v2212;
                      *(_OWORD *)&v2207[16] = v2213;
                      memset(v2208, 0, 11);
                      if (LOBYTE(v2208[1]) && !BYTE1(v2208[1]))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197FBA5D4);
                      }
                      if ((_BYTE)v2223 && !HIBYTE(v2223))
                      {
                        __break(0xC471u);
                        JUMPOUT(0x197FBA5F4);
                      }
                      if (!*(_QWORD *)v2232 && !*(_WORD *)&v2232[8] && (v2232[10] & 3) == 0 && !*(_DWORD *)&v2225[12])
                      {
                        v2070 = *(_QWORD *)v2225;
                        if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                        {
                          *(_QWORD *)v2225 = 0;
                          *(_DWORD *)&v2225[8] = 0;
                          WTF::fastFree(v2070, v647, v648, v649, v650, v651, v652, v653);
                        }
                        goto LABEL_2985;
                      }
                    }
LABEL_1243:
                    if (!*(_QWORD *)v2232 && !*(_WORD *)&v2232[8] && (v2232[10] & 3) == 0 && !*(_DWORD *)&v2225[12])
                    {
                      v2066 = *(_QWORD *)v2225;
                      if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                      {
                        *(_QWORD *)v2225 = 0;
                        *(_DWORD *)&v2225[8] = 0;
                        WTF::fastFree(v2066, v647, v648, v649, v650, v651, v652, v653);
                      }
                      goto LABEL_2943;
                    }
                    v824 = *(unsigned int *)(v432 + 12);
                    if ((_DWORD)v824 == *(_DWORD *)(v432 + 8))
                    {
LABEL_2002:
                      v1477 = v432;
LABEL_2003:
                      WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v1477, (unint64_t)v2225, v59, v60, v61, v62, v63, v64);
                    }
                    else
                    {
                      v825 = *(_QWORD *)v432;
                      v826 = *(_QWORD *)v432 + (v824 << 7);
                      v944 = (_OWORD *)(v826 + 16);
                      *(_QWORD *)v826 = v826 + 16;
                      *(_QWORD *)(v826 + 8) = 3;
                      v945 = *(_QWORD *)v2225;
                      v946 = (__int128 *)&v2225[16];
                      if (*(_BYTE **)v2225 == &v2225[16])
                      {
                        if (*(_DWORD *)&v2225[12])
                        {
                          v947 = 32 * *(unsigned int *)&v2225[12];
                          do
                          {
                            v948 = *v946;
                            v949 = v946[1];
                            v946 += 2;
                            *v944 = v948;
                            v944[1] = v949;
                            v944 += 2;
                            v947 -= 32;
                          }
                          while (v947);
                        }
                      }
                      else
                      {
                        *(_QWORD *)v2225 = &v2225[16];
                        *(_QWORD *)v826 = v945;
                        v953 = *(_DWORD *)&v2225[8];
                        *(_DWORD *)&v2225[8] = 3;
LABEL_1253:
                        *(_DWORD *)(v826 + 8) = v953;
                      }
LABEL_1251:
                      v950 = *(_DWORD *)&v2225[12];
                      *(_DWORD *)&v2225[12] = 0;
                      *(_DWORD *)(v826 + 12) = v950;
                      v951 = v825 + (v824 << 7);
                      v952 = *(_QWORD *)v2232;
                      *(_DWORD *)(v951 + 119) = *(_DWORD *)&v2232[7];
                      *(_QWORD *)(v951 + 112) = v952;
                      ++*(_DWORD *)(v432 + 12);
                    }
LABEL_239:
                    v65 = *(_QWORD *)v2225;
                    if (&v2225[16] == *(_BYTE **)v2225)
                      return;
                    goto LABEL_240;
                  }
                  v1251 = *(JSC::ARM64LogicalImmediate **)(v1247 + 40);
                }
                v2216 = v1251;
                v1252 = JSC::ARM64LogicalImmediate::create32(v1251);
                BYTE8(v2215) = 0;
                *(_QWORD *)&v2215 = 0;
                if (v1252 == -1)
                  v1253 = 0;
                else
                  v1253 = v1251;
                *(_QWORD *)&v2214 = v1253;
                BYTE8(v2214) = 4 * (v1252 != -1);
                BYTE9(v2214) = 2;
                HIDWORD(v2214) = 1;
                v1254 = *(_WORD *)(v1247 + 12) & 0xFFF;
                if (v1247 && v1254 == 3)
                {
                  v1255 = *(int *)(v1247 + 40);
                }
                else
                {
                  if (!v1247 || v1254 != 4)
                    goto LABEL_1648;
                  v1255 = *(_QWORD *)(v1247 + 40);
                }
                if (JSC::ARM64LogicalImmediate::create64(v1255) != -1)
                {
                  v1256 = 5;
                  goto LABEL_1649;
                }
LABEL_1648:
                v1256 = 0;
                v1255 = 0;
LABEL_1649:
                BYTE8(v2213) = 0;
                *(_QWORD *)&v2213 = 0;
                *(_QWORD *)&v2212 = v1255;
                BYTE8(v2212) = v1256;
                BYTE9(v2212) = 2;
                HIDWORD(v2212) = 1;
                goto LABEL_1650;
            }
          }
          v909 = *(_QWORD *)(v905 + 40);
        }
        if (v909)
          goto LABEL_527;
LABEL_1166:
        if (*((JSC::B3::Value **)v13 + 50) != v2206)
        {
          if (v2204
            && (v910 = *((unsigned int *)v2206 + 2), !*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v910))
            && *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v910) == 1)
          {
            v911 = *(_QWORD *)v13;
            if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
              v912 = 63;
            else
              v912 = *(_QWORD *)(2 * v911);
            if (v912 <= v910)
            {
              WTF::BitVector::resizeOutOfLine(v13, v910 + 1, 0);
              v911 = *(_QWORD *)v13;
            }
            if (v911 >= 0)
              v913 = 2 * v911 + 8;
            else
              v913 = (uint64_t)v13;
            *(_QWORD *)(v913 + ((v910 >> 3) & 0x1FFFFFF8)) |= 1 << v910;
          }
          else
          {
            for (i = JSC::B3::Value::children(v2206); i != v1167; i += 8)
            {
              if (*(_QWORD *)i)
              {
                v1168 = (_QWORD *)(2 * *(_QWORD *)v13);
                v1169 = (*(_QWORD *)v13 & 0x8000000000000000) != 0 ? 63 : *v1168;
                v1170 = *(unsigned int *)(*(_QWORD *)i + 8);
                if (v1169 > v1170)
                {
                  v1171 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v1168 + 1);
                  v1172 = *(uint64_t *)v13 >= 0 ? v1171 : v13;
                  if (((*(_QWORD *)((char *)v1172 + ((v1170 >> 3) & 0x1FFFFFF8)) >> v1170) & 1) != 0)
                    goto LABEL_527;
                }
              }
            }
            v2204 = 0;
          }
        }
        v433 = *(JSC::B3::Value **)JSC::B3::Value::child(v2206, 0);
        v2206 = v433;
        v2205 ^= 1u;
        continue;
      }
    case 63:
      v197 = 122;
      v198 = *(_DWORD *)(v14 + 52) == *(_DWORD *)(v14 + 56);
      v199 = 123;
      goto LABEL_172;
    case 64:
      v197 = 126;
      v198 = *(_DWORD *)(v14 + 52) == *(_DWORD *)(v14 + 56);
      v199 = 127;
      goto LABEL_172;
    case 65:
      v197 = 128;
      v198 = *(_DWORD *)(v14 + 52) == *(_DWORD *)(v14 + 56);
      v199 = 129;
LABEL_172:
      if (v198)
        v200 = v197;
      else
        v200 = v199;
      v55 = *(unsigned __int16 *)(v14 + 12);
      v202 = *((_QWORD *)v13 + 50);
      *(_OWORD *)&v2225[25] = *(_OWORD *)&v2219[9];
      *(_OWORD *)&v2225[16] = *(_OWORD *)v2219;
      *(_QWORD *)v2225 = &v2225[16];
      *(_QWORD *)&v2225[48] = 0;
      *(_WORD *)&v2225[56] = 513;
      *(_DWORD *)&v2225[60] = 1;
      *(_QWORD *)&v2226 = v201;
      BYTE8(v2226) = 0;
      *(_QWORD *)&v2225[8] = 0x200000003;
      *(_QWORD *)v2232 = v202;
      *(_DWORD *)&v2232[8] = v200;
      goto LABEL_32;
    case 66:
      v1360 = *(_DWORD *)(v14 + 52);
      v1361 = *(_DWORD *)(v14 + 56);
      v55 = *(unsigned __int16 *)(v14 + 12);
      v1363 = *((_QWORD *)v13 + 50);
      if (v1360 == v1361)
        v1364 = 130;
      else
        v1364 = 131;
      *(_OWORD *)&v2225[25] = *(_OWORD *)&v2219[9];
      *(_OWORD *)&v2225[16] = *(_OWORD *)v2219;
      *(_QWORD *)v2225 = &v2225[16];
      *(_QWORD *)&v2225[48] = 0;
      *(_WORD *)&v2225[56] = 513;
      *(_DWORD *)&v2225[60] = 1;
      *(_QWORD *)&v2226 = v1362;
      BYTE8(v2226) = 0;
      *(_QWORD *)&v2225[8] = 0x200000003;
      *(_QWORD *)v2232 = v1363;
      *(_DWORD *)&v2232[8] = v1364;
      goto LABEL_32;
    case 67:
      v40 = *(_DWORD *)(v14 + 16);
      if (v40 >= 0x80000000)
        v40 = 0x80000000;
      if (v40 - 1 >= 5)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB96B8);
      }
      if (*(_DWORD *)(v14 + 52) == *(_DWORD *)(v14 + 56))
      {
        v41 = (unsigned __int16)aZklq[v40 - 1];
        if (v40 == 2)
        {
LABEL_27:
          v42 = 93;
LABEL_28:
          v43 = *((_DWORD *)this + 99);
          if (v43)
          {
            v44 = *((_QWORD *)this + 48);
            v45 = v43 - 1;
            if (*(_DWORD *)(v44 + 20) <= v45)
            {
              __break(0xC471u);
              JUMPOUT(0x197FB9EE4);
            }
            v46 = *(_QWORD *)(*(_QWORD *)(v44 + 8) + 8 * v45);
            *(_QWORD *)v2219 = v46;
            if (*(_BYTE *)(v46 + 12) == 14 && *(_DWORD *)(v46 + 16) == 2)
            {
              *(_QWORD *)v2209 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v46, 0);
              if (*(_QWORD *)v2209 == *(_QWORD *)JSC::B3::MemoryValue::lastChild((JSC::B3::MemoryValue *)v14))
              {
                v359 = JSC::B3::Value::child((JSC::B3::Value *)v46, 1u);
                if (*(_QWORD *)v359 && (*(_WORD *)(*(_QWORD *)v359 + 12) & 0xFFF) == 4)
                {
                  v361 = JSC::B3::Value::child((JSC::B3::Value *)v46, 1u);
                  v362 = *(_QWORD *)v361;
                  if ((*(_WORD *)(*(_QWORD *)v361 + 12) & 0xFFF) != 4)
                    v362 = 0;
                  v363 = *(_QWORD *)(v362 + 40);
                  if (v363 == (int)v363
                    && (v363 + 256) <= 0x1FF
                    && !WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)v13, (uint64_t)v2219)
                    && (WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)v13, (uint64_t)v2209) & 1) == 0)
                  {
                    v364 = *(_DWORD *)(v14 + 40);
                    if (!v364)
                    {
                      v365 = 13;
LABEL_3016:
                      *(_QWORD *)v2225 = v363;
                      v2225[8] = v365;
                      v2225[9] = 2;
                      *(_DWORD *)&v2225[12] = 1;
                      *(_QWORD *)&v2225[16] = v2071;
                      v2225[24] = 0;
                      v2072 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*(_QWORD *)v2219 + 16));
                      v2073 = (JSC::B3::Value **)JSC::B3::Value::child(*(JSC::B3::Value **)v2219, 0);
                      v423 = *(JSC::B3::Value **)v2219;
                      goto LABEL_2323;
                    }
                    if (v364 == (_DWORD)v363)
                    {
                      v365 = 12;
                      goto LABEL_3016;
                    }
                  }
                }
              }
            }
          }
LABEL_31:
          v47 = (unsigned __int16 *)*((_QWORD *)v13 + 50);
          v55 = v47[6];
          v56 = *((_QWORD *)v13 + 50);
          *(_OWORD *)&v2225[25] = *(_OWORD *)&v2219[9];
          *(_OWORD *)&v2225[16] = *(_OWORD *)v2219;
          *(_QWORD *)v2225 = &v2225[16];
          *(_QWORD *)&v2225[48] = 0;
          *(_WORD *)&v2225[56] = 513;
          *(_DWORD *)&v2225[60] = 1;
          *(_QWORD *)&v2226 = v48;
          BYTE8(v2226) = 0;
          *(_QWORD *)&v2225[8] = 0x200000003;
          *(_QWORD *)v2232 = v56;
          *(_DWORD *)&v2232[8] = v41;
LABEL_32:
          v57 = (v55 >> 9) & 1;
LABEL_33:
          v2232[10] = v57;
          v65 = *(_QWORD *)v2225;
          if (&v2225[16] == *(_BYTE **)v2225)
            return;
LABEL_240:
          if (v65)
          {
            *(_QWORD *)v2225 = 0;
            *(_DWORD *)&v2225[8] = 0;
LABEL_288:
            WTF::fastFree(v65, (void *)v58, v59, v60, v61, v62, v63, v64);
          }
          return;
        }
        if (v40 != 1)
          goto LABEL_31;
      }
      else
      {
        if (v40 != 1)
        {
          if (v40 != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x197FBA124);
          }
          v41 = 136;
          goto LABEL_27;
        }
        v41 = 134;
      }
      v42 = 95;
      goto LABEL_28;
    case 68:
      v865 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v866 = *v865;
      v867 = *((unsigned int *)*v865 + 2);
      if (!*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v867)
        && *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v867) == 1
        && *((_BYTE *)v866 + 12) == 14)
      {
        v868 = *(_QWORD *)JSC::B3::Value::child(*v865, 0);
        v869 = (unsigned __int8 **)JSC::B3::Value::child(v866, 1u);
      }
      goto LABEL_107;
    case 69:
      v1113 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v1114 = *v1113;
      v1115 = *((unsigned int *)*v1113 + 2);
      if (!*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v1115)
        && *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v1115) == 1
        && *((_BYTE *)v1114 + 12) == 14)
      {
        v1116 = *(_QWORD *)JSC::B3::Value::child(*v1113, 0);
        v1117 = (unsigned __int8 **)JSC::B3::Value::child(v1114, 1u);
      }
      goto LABEL_107;
    case 70:
      *(_QWORD *)v2219 = *(_QWORD *)JSC::B3::MemoryValue::child(*((JSC::B3::MemoryValue **)this + 50), 0);
      v146 = *(_DWORD *)(*(_QWORD *)v2219 + 16);
      if (v146 >= 0x80000000)
        v146 = 0x80000000;
      if (v146 == 2)
      {
        v147 = 93;
      }
      else
      {
        if (v146 != 1)
          goto LABEL_105;
        v147 = 95;
      }
      v148 = *((_DWORD *)v13 + 99);
      if (v148)
      {
        v149 = *((_QWORD *)v13 + 48);
        v150 = v148 - 1;
        if (*(_DWORD *)(v149 + 20) <= v150)
        {
          __break(0xC471u);
          JUMPOUT(0x197FB9F14);
        }
        v151 = *(_QWORD *)(*(_QWORD *)(v149 + 8) + 8 * v150);
        *(_QWORD *)v2209 = v151;
        if (*(_BYTE *)(v151 + 12) == 14 && *(_DWORD *)(v151 + 16) == 2)
        {
          *(_QWORD *)v2222 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v151, 0);
          if (*(_QWORD *)v2222 == *(_QWORD *)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v14, 1u))
          {
            v403 = JSC::B3::Value::child((JSC::B3::Value *)v151, 1u);
            if (*(_QWORD *)v403 && (*(_WORD *)(*(_QWORD *)v403 + 12) & 0xFFF) == 4)
            {
              v405 = JSC::B3::Value::child((JSC::B3::Value *)v151, 1u);
              v406 = *(_QWORD *)v405;
              if ((*(_WORD *)(*(_QWORD *)v405 + 12) & 0xFFF) != 4)
                v406 = 0;
              v407 = *(_QWORD *)(v406 + 40);
              if (v407 == (int)v407
                && (v407 + 256) <= 0x1FF
                && !WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)v13, (uint64_t)v2209)
                && (WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)v13, (uint64_t)v2222) & 1) == 0
                && (WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)v13, (uint64_t)v2219) & 1) == 0)
              {
                v408 = *(_DWORD *)(v14 + 40);
                if (!v408)
                {
                  v409 = 13;
                  goto LABEL_503;
                }
                if (v408 == (_DWORD)v407)
                {
                  v409 = 12;
LABEL_503:
                  *(_QWORD *)v2225 = v407;
                  v2225[8] = v409;
                  v2225[9] = 2;
                  *(_DWORD *)&v2225[12] = 1;
                  *(_QWORD *)&v2225[16] = v410;
                  v2225[24] = 0;
                  v411 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*(_QWORD *)v2209 + 16));
                  v423 = *(JSC::B3::Value **)v2209;
LABEL_2323:
                  v1406 = v13;
                  goto LABEL_1894;
                }
              }
            }
          }
        }
      }
LABEL_105:
      v152 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
      v14 = (uint64_t)*v152;
      v153 = *((unsigned int *)*v152 + 2);
      if (*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v153) || *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v153) != 1)
        goto LABEL_107;
      v208 = *(unsigned __int8 *)(v14 + 12);
      if (v208 <= 0xE)
      {
        if (v208 != 14)
          goto LABEL_107;
        v209 = *(_QWORD *)JSC::B3::Value::child(*v152, 0);
        v210 = (unint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v14, 1u);
        v211 = *((_QWORD *)v13 + 50);
        if (!v211 || *(unsigned __int8 *)(v211 + 12) - 79 <= 0xFFFFFFEF)
        {
          __break(0xC471u);
          JUMPOUT(0x197FB702CLL);
        }
        v10 = *v210;
        if (*(_DWORD *)(v209 + 16) >= 0x80000000)
          LODWORD(v79) = 0x80000000;
        else
          LODWORD(v79) = *(_DWORD *)(v209 + 16);
        if ((_DWORD)v79 == 2)
        {
          LODWORD(v79) = 6;
        }
        else if ((_DWORD)v79 != 1)
        {
          goto LABEL_107;
        }
        if (*(_DWORD *)(v211 + 52) != *(_DWORD *)(v211 + 56))
          goto LABEL_107;
        v212 = *(unsigned __int8 *)(*((_QWORD *)v13 + 50) + 12);
        if (v212 == 70)
        {
          if (*(_BYTE *)(v209 + 12) != 67)
          {
LABEL_210:
            v213 = 0;
            v12 = 0;
            v11 = 0;
            v214 = 0;
            *(_QWORD *)v2225 = 0;
            *(_WORD *)&v2225[8] = 512;
            *(_DWORD *)&v2225[12] = 1;
            *(_QWORD *)&v2225[16] = 0;
            v2225[24] = 0;
LABEL_211:
            *(_OWORD *)v2209 = *(_OWORD *)v2225;
            *(_OWORD *)&v2209[9] = *(_OWORD *)&v2225[9];
            *(_QWORD *)&v2210 = v214;
            BYTE8(v2210) = v11;
            BYTE9(v2210) = v12;
            BYTE10(v2210) = v213;
            if (*(_QWORD *)v2225 == *(_QWORD *)v2222)
            {
              v215 = v2209[8];
              if (v2209[8] == v2222[8]
                && *(_QWORD *)&v2209[16] == *(_QWORD *)&v2222[16]
                && *(_DWORD *)&v2209[12] == *(_DWORD *)&v2222[12])
              {
                if (!v10)
                  goto LABEL_225;
LABEL_1898:
                if (v215 != 1)
                  goto LABEL_225;
                if (*(_QWORD *)v2225 || v2225[8] || *(_QWORD *)&v2225[16] || *(_DWORD *)&v2225[12] != 1)
                {
                  v1492 = *((_QWORD *)v13 + 50);
                  *(_OWORD *)v2225 = *(_OWORD *)v2207;
                  *(_OWORD *)&v2225[9] = *(_OWORD *)&v2207[9];
                  *(_OWORD *)&v2225[32] = *(_OWORD *)v2222;
                  *(_OWORD *)&v2225[41] = *(_OWORD *)&v2222[9];
                  *(_QWORD *)v2219 = &v2219[16];
                  *(_QWORD *)&v2219[8] = 3;
                  *(_OWORD *)&v2219[16] = *(_OWORD *)v2225;
                  *(_OWORD *)&v2219[32] = *(_OWORD *)&v2225[16];
                  v2220 = *(_OWORD *)&v2225[48];
                  *(_OWORD *)&v2219[48] = *(_OWORD *)&v2225[32];
                  *(_QWORD *)v2221 = v1492;
                  *(_DWORD *)&v2221[8] = (_DWORD)v79;
                  v2221[10] = BYTE10(v2210);
                  v1493 = *(unsigned __int16 *)(v1492 + 12);
                  *(_QWORD *)v2225 = &v2225[16];
                  v1494 = *(_OWORD *)&v2225[16];
                  *(_OWORD *)&v2225[16] = *(_OWORD *)&v2219[16];
                  *(_OWORD *)&v2225[32] = v1494;
                  v1495 = *(_OWORD *)&v2225[48];
                  *(_OWORD *)&v2225[48] = *(_OWORD *)&v2219[48];
                  v2226 = v1495;
                  *(_QWORD *)&v2225[8] = 0x200000003;
                  *(_QWORD *)v2232 = v1492;
                  *(_DWORD *)&v2232[7] = *(_DWORD *)&v2221[7];
                  v1417 = BYTE10(v2210) | (v1493 >> 9) & 1;
                  goto LABEL_2023;
                }
                if ((_DWORD)v79 != 6)
                  goto LABEL_2363;
LABEL_1904:
                v1407 = *((_QWORD *)v13 + 50);
                v1415 = *((_QWORD *)v13 + 50);
                *(_OWORD *)&v2225[16] = *(_OWORD *)&v2222[9];
                *(_OWORD *)&v2225[7] = *(_OWORD *)v2222;
                *(_QWORD *)v2219 = &v2219[16];
                *(_QWORD *)&v2219[8] = 3;
                *(_QWORD *)&v2219[16] = 0;
                *(_WORD *)&v2219[24] = 513;
                *(_DWORD *)&v2219[28] = 1;
                *(_QWORD *)&v2219[32] = v1408;
                v2219[40] = 0;
                v2220 = *(_OWORD *)&v2225[23];
                *(_OWORD *)&v2219[48] = *(_OWORD *)v2222;
                *(_QWORD *)v2221 = v1415;
                *(_DWORD *)&v2221[8] = (_DWORD)v79;
                v2221[10] = BYTE10(v2210);
                v1416 = *(unsigned __int16 *)(v1407 + 12);
                *(_QWORD *)v2225 = &v2225[16];
                *(_OWORD *)&v2225[16] = *(_OWORD *)&v2219[16];
                *(_OWORD *)&v2225[32] = *(_OWORD *)&v2219[32];
                *(_OWORD *)&v2225[48] = *(_OWORD *)v2222;
                v2226 = v2220;
                *(_QWORD *)&v2225[8] = 0x200000003;
                *(_QWORD *)v2232 = v1415;
                *(_DWORD *)&v2232[7] = *(_DWORD *)&v2221[7];
                v1417 = BYTE10(v2210) | (v1416 >> 9) & 1;
LABEL_2023:
                v2232[10] = v1417;
                v1503 = *(_QWORD *)v2225;
                if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                {
                  *(_QWORD *)v2225 = 0;
                  *(_DWORD *)&v2225[8] = 0;
                  WTF::fastFree(v1503, v1496, v1497, v1498, v1499, v1500, v1501, v1502);
                }
                v1504 = *(_QWORD *)v2219;
                if (&v2219[16] != *(_BYTE **)v2219 && *(_QWORD *)v2219)
                {
                  *(_QWORD *)v2219 = 0;
                  *(_DWORD *)&v2219[8] = 0;
                  WTF::fastFree(v1504, v1496, v1497, v1498, v1499, v1500, v1501, v1502);
                }
                goto LABEL_1893;
              }
            }
            v216 = *(unsigned __int8 *)(*((_QWORD *)v13 + 50) + 12);
            if (v216 == 70)
            {
              if (*(_BYTE *)(v10 + 12) != 67)
              {
LABEL_217:
                v217 = 0;
                v218 = 0;
                v219 = 0;
                v220 = 0;
                *(_QWORD *)v2225 = 0;
                *(_WORD *)&v2225[8] = 512;
                *(_DWORD *)&v2225[12] = 1;
                *(_QWORD *)&v2225[16] = 0;
                v2225[24] = 0;
                goto LABEL_218;
              }
            }
            else
            {
              if (v216 == 68)
              {
                v1748 = *(unsigned __int8 *)(v10 + 12) - 63;
              }
              else
              {
                if (v216 != 69)
                  goto LABEL_217;
                v1748 = *(unsigned __int8 *)(v10 + 12) - 65;
              }
              if (v1748 >= 2)
              {
                v217 = 0;
                v218 = 0;
                v219 = 0;
                v220 = 0;
                *(_QWORD *)v2225 = 0;
                *(_WORD *)&v2225[8] = 512;
                *(_DWORD *)&v2225[12] = 1;
                *(_QWORD *)&v2225[16] = 0;
                v2225[24] = 0;
                *(_QWORD *)&v2225[32] = 0;
                *(_DWORD *)&v2225[39] = 0;
LABEL_218:
                *(_OWORD *)v2209 = *(_OWORD *)v2225;
                *(_OWORD *)&v2209[9] = *(_OWORD *)&v2225[9];
                *(_QWORD *)&v2210 = v220;
                BYTE8(v2210) = v219;
                BYTE9(v2210) = v218;
                BYTE10(v2210) = v217;
                if (!v12 && v11)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FB9174);
                }
                if (*(_QWORD *)v2209 != *(_QWORD *)v2222
                  || (v215 = v2209[8], v2209[8] != v2222[8])
                  || *(_QWORD *)&v2209[16] != *(_QWORD *)&v2222[16]
                  || *(_DWORD *)&v2209[12] != *(_DWORD *)&v2222[12])
                {
                  v11 = v219;
                  v12 = v218;
                  goto LABEL_225;
                }
                v11 = v219;
                v12 = v218;
                v10 = v209;
                goto LABEL_1898;
              }
            }
            v220 = *(_QWORD *)&v2225[32];
            v219 = v2225[40];
            v218 = v2225[41];
            v217 = v2225[42];
            goto LABEL_218;
          }
        }
        else
        {
          if (v212 == 68)
          {
            v1747 = *(unsigned __int8 *)(v209 + 12) - 63;
          }
          else
          {
            if (v212 != 69)
              goto LABEL_210;
            v1747 = *(unsigned __int8 *)(v209 + 12) - 65;
          }
          if (v1747 >= 2)
            goto LABEL_210;
        }
        v214 = *(_QWORD *)&v2225[32];
        v11 = v2225[40];
        v12 = v2225[41];
        v213 = v2225[42];
        goto LABEL_211;
      }
      if (v208 == 22)
      {
        v1427 = *(unsigned int **)JSC::B3::Value::child(*v152, 0);
        v1428 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 1u);
LABEL_1893:
        v1406 = v13;
        v423 = (JSC::B3::Value *)v14;
LABEL_1894:
        return;
      }
      if (v208 != 15)
      {
        if (v208 != 24)
          goto LABEL_107;
        v351 = JSC::B3::Value::child(*v152, 1u);
        v352 = *(_QWORD *)v351;
        v353 = *(_WORD *)(*(_QWORD *)v351 + 12) & 0xFFF;
        if (*(_QWORD *)v351)
          v354 = v353 == 3;
        else
          v354 = 0;
        if (v354)
        {
          v356 = *(int *)(v352 + 40);
        }
        else
        {
          if (v352)
            v355 = v353 == 4;
          else
            v355 = 0;
          if (!v355)
          {
LABEL_431:
            v357 = *(unsigned int **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
            v358 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 1u);
            goto LABEL_1893;
          }
          v356 = *(_QWORD *)(v352 + 40);
        }
        if (v356 == -1)
        {
          v1991 = (uint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
          goto LABEL_107;
        }
        goto LABEL_431;
      }
      v1609 = JSC::B3::Value::child(*v152, 0);
      v1610 = *(_QWORD *)v1609;
      v1611 = *(_WORD *)(*(_QWORD *)v1609 + 12) & 0xFFF;
      if (*(_QWORD *)v1609)
        v1612 = v1611 == 3;
      else
        v1612 = 0;
      if (v1612)
      {
        v1614 = *(int *)(v1610 + 40);
      }
      else
      {
        if (v1610)
          v1613 = v1611 == 4;
        else
          v1613 = 0;
        if (!v1613)
          goto LABEL_2232;
        v1614 = *(_QWORD *)(v1610 + 40);
      }
      if (!v1614)
      {
        v1987 = (uint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v14, 1u);
        goto LABEL_107;
      }
LABEL_2232:
      v1615 = *(JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
      v1616 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 1u);
      goto LABEL_107;
    case 71:
    case 72:
      v76 = (JSC::B3::Value *)*((_QWORD *)this + 50);
      goto LABEL_2398;
    case 73:
        return;
      v1910 = *(unsigned __int8 *)(v14 + 60);
      if (!*(_BYTE *)(v14 + 60))
      {
        if (v2225[8] != 6)
          goto LABEL_2773;
        v1911 = JSC::MacroAssemblerARM64::s_lseCheckState;
        if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
        {
          v1912 = 242;
          goto LABEL_2852;
        }
        goto LABEL_2770;
      }
      if (v1910 == 1)
      {
        if (v2225[8] != 6)
          goto LABEL_2773;
        v1911 = JSC::MacroAssemblerARM64::s_lseCheckState;
        if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
        {
          v1912 = 243;
          goto LABEL_2852;
        }
        goto LABEL_2770;
      }
      if (v1910 != 2)
      {
        if (v2225[8] != 6)
          goto LABEL_2773;
        v1911 = JSC::MacroAssemblerARM64::s_lseCheckState;
        if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
        {
          v1912 = 245;
          goto LABEL_2852;
        }
LABEL_2770:
        if (v1911)
          goto LABEL_2773;
LABEL_2771:
        JSC::MacroAssemblerARM64::s_lseCheckState = 1;
        if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
          JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
        goto LABEL_2773;
      }
      if (v2225[8] != 6)
        goto LABEL_2773;
      if (!JSC::MacroAssemblerARM64::s_lseCheckState)
        goto LABEL_2771;
      if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
      {
        v1912 = 244;
        goto LABEL_2852;
      }
LABEL_2773:
      if (v1910 == 3)
        v2029 = 6;
      else
        v2029 = 1;
      goto LABEL_2782;
    case 74:
        return;
      if (!JSC::MacroAssemblerARM64::s_lseCheckState)
      {
        JSC::MacroAssemblerARM64::s_lseCheckState = 1;
        if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
          JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
        goto LABEL_2778;
      }
      if (JSC::MacroAssemblerARM64::s_lseCheckState != 2)
        goto LABEL_2778;
      v1913 = *(unsigned __int8 *)(v14 + 60);
      if (*(_BYTE *)(v14 + 60))
      {
        if (v1913 == 1)
        {
          if (v2225[8] != 6)
            goto LABEL_2778;
          v1914 = JSC::MacroAssemblerARM64::s_lseCheckState;
          if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
          {
            v1912 = 275;
LABEL_2872:
            v2058 = (JSC::B3::Value **)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v14, 0);
            if (v1913 == 3)
              v2065 = 73;
            else
              v2065 = 72;
            v2052 = v13;
            v2051 = (JSC::B3::Value *)v14;
            goto LABEL_2853;
          }
        }
        else
        {
          if (v1913 == 2)
          {
            if (v2225[8] == 6)
            {
              if (!JSC::MacroAssemblerARM64::s_lseCheckState)
              {
LABEL_2849:
                JSC::MacroAssemblerARM64::s_lseCheckState = 1;
                if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
                  JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
                goto LABEL_2778;
              }
              if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
              {
                v1912 = 276;
                goto LABEL_2872;
              }
            }
LABEL_2778:
            v2040 = *(_BYTE *)(v14 + 60) == 3;
            v2041 = 50;
            goto LABEL_2779;
          }
          if (v2225[8] != 6)
            goto LABEL_2778;
          v1914 = JSC::MacroAssemblerARM64::s_lseCheckState;
          if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
          {
            v1912 = 277;
            goto LABEL_2872;
          }
        }
      }
      else
      {
        if (v2225[8] != 6)
          goto LABEL_2778;
        v1914 = JSC::MacroAssemblerARM64::s_lseCheckState;
        if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
        {
          v1912 = 274;
          goto LABEL_2872;
        }
      }
      if (!v1914)
        goto LABEL_2849;
      goto LABEL_2778;
    case 75:
        return;
      v1915 = *(unsigned __int8 *)(v14 + 60);
      if (!*(_BYTE *)(v14 + 60))
      {
        if (v2225[8] != 6)
          goto LABEL_2793;
        v1916 = JSC::MacroAssemblerARM64::s_lseCheckState;
        if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
        {
          v1912 = 270;
          goto LABEL_2852;
        }
        goto LABEL_2790;
      }
      if (v1915 == 1)
      {
        if (v2225[8] != 6)
          goto LABEL_2793;
        v1916 = JSC::MacroAssemblerARM64::s_lseCheckState;
        if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
        {
          v1912 = 271;
          goto LABEL_2852;
        }
        goto LABEL_2790;
      }
      if (v1915 == 2)
      {
        if (v2225[8] != 6)
          goto LABEL_2793;
        if (!JSC::MacroAssemblerARM64::s_lseCheckState)
        {
LABEL_2791:
          JSC::MacroAssemblerARM64::s_lseCheckState = 1;
          if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
            JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
          goto LABEL_2793;
        }
        if (JSC::MacroAssemblerARM64::s_lseCheckState != 2)
        {
LABEL_2793:
          v2040 = v1915 == 3;
          v2041 = 68;
          goto LABEL_2779;
        }
        v1912 = 272;
      }
      else
      {
        if (v2225[8] != 6)
          goto LABEL_2793;
        v1916 = JSC::MacroAssemblerARM64::s_lseCheckState;
        if (JSC::MacroAssemblerARM64::s_lseCheckState != 2)
        {
LABEL_2790:
          if (!v1916)
            goto LABEL_2791;
          goto LABEL_2793;
        }
        v1912 = 273;
      }
      goto LABEL_2852;
    case 76:
      {
        if (*(_BYTE *)(v14 + 60) == 3)
          v1917 = 10;
        else
          v1917 = 9;
      }
      return;
    case 77:
        return;
      v1918 = *(unsigned __int8 *)(v14 + 60);
      if (*(_BYTE *)(v14 + 60))
      {
        if (v1918 == 1)
        {
          if (v2225[8] != 6)
            goto LABEL_2803;
          v1919 = JSC::MacroAssemblerARM64::s_lseCheckState;
          if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
          {
            v1912 = 279;
            goto LABEL_2852;
          }
        }
        else
        {
          if (v1918 == 2)
          {
            if (v2225[8] != 6)
              goto LABEL_2803;
            if (JSC::MacroAssemblerARM64::s_lseCheckState)
            {
              if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
              {
                v1912 = 280;
                goto LABEL_2852;
              }
LABEL_2803:
              v2040 = v1918 == 3;
              v2041 = 70;
LABEL_2779:
              if (v2040)
                v2029 = v2041 + 1;
              else
                v2029 = v2041;
LABEL_2782:
              v2028 = (uint64_t)v13;
              v2030 = 0;
LABEL_2783:
              return;
            }
LABEL_2801:
            JSC::MacroAssemblerARM64::s_lseCheckState = 1;
            if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
              JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
            goto LABEL_2803;
          }
          if (v2225[8] != 6)
            goto LABEL_2803;
          v1919 = JSC::MacroAssemblerARM64::s_lseCheckState;
          if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
          {
            v1912 = 281;
            goto LABEL_2852;
          }
        }
      }
      else
      {
        if (v2225[8] != 6)
          goto LABEL_2803;
        v1919 = JSC::MacroAssemblerARM64::s_lseCheckState;
        if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
        {
          v1912 = 278;
          goto LABEL_2852;
        }
      }
      if (v1919)
        goto LABEL_2803;
      goto LABEL_2801;
    case 78:
      v1920 = *(unsigned __int8 *)(v14 + 60);
      if (*(_BYTE *)(v14 + 60))
      {
        if (v1920 == 1)
        {
          if (v2225[8] != 6)
            goto LABEL_2746;
          v1921 = JSC::MacroAssemblerARM64::s_lseCheckState;
          if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
          {
            v1912 = 247;
            goto LABEL_2852;
          }
          goto LABEL_2743;
        }
        if (v1920 == 2)
        {
          if (v2225[8] != 6)
            goto LABEL_2746;
          if (!JSC::MacroAssemblerARM64::s_lseCheckState)
          {
LABEL_2744:
            JSC::MacroAssemblerARM64::s_lseCheckState = 1;
            if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
              JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
            goto LABEL_2746;
          }
          if (JSC::MacroAssemblerARM64::s_lseCheckState != 2)
          {
LABEL_2746:
            v2028 = (uint64_t)v13;
            v2029 = 0;
            v2030 = 1;
            goto LABEL_2783;
          }
          v1912 = 248;
        }
        else
        {
          if (v2225[8] != 6)
            goto LABEL_2746;
          v1921 = JSC::MacroAssemblerARM64::s_lseCheckState;
          if (JSC::MacroAssemblerARM64::s_lseCheckState != 2)
          {
LABEL_2743:
            if (!v1921)
              goto LABEL_2744;
            goto LABEL_2746;
          }
          v1912 = 249;
        }
LABEL_2852:
        v2051 = *(JSC::B3::Value **)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v14, 0);
        v2052 = v13;
LABEL_2853:
        return;
      }
      if (v2225[8] != 6)
        goto LABEL_2746;
      v1921 = JSC::MacroAssemblerARM64::s_lseCheckState;
      if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
      {
        v1912 = 246;
        goto LABEL_2852;
      }
      goto LABEL_2743;
    case 79:
      v1922 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      return;
    case 80:
      if ((v15 & 0xFFF) == 0x50)
        v566 = (JSC::B3::Value *)*((_QWORD *)this + 50);
      else
        v566 = 0;
      v567 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v568 = *v567;
      v569 = *((unsigned int *)*v567 + 2);
      if (*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v569) || *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v569) != 1)
        goto LABEL_981;
      if (*((_BYTE *)v568 + 12) != 43
        || (v570 = JSC::B3::Value::child(*v567, 0), *(_QWORD *)v570)
        && ((v571 = *(unsigned int *)(*(_QWORD *)v570 + 8),
             v572 = (unint64_t *)(2 * *(_QWORD *)v13),
             (*(_QWORD *)v13 & 0x8000000000000000) != 0)
          ? (v573 = 63)
          : (v573 = *v572),
            v573 > v571
         && ((v574 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v572 + 1), *(uint64_t *)v13 >= 0)
           ? (v575 = v574)
           : (v575 = v13),
             ((*(_QWORD *)((char *)v575 + ((v571 >> 3) & 0x1FFFFFF8)) >> v571) & 1) != 0)))
      {
        {
LABEL_981:
          v767 = *((_BYTE *)v566 + 40);
          v768 = v767 & 0x7F;
          if ((v767 & 0x60) != 0)
            v769 = (char)(31 - (v767 & 0x7F));
          else
            v769 = v768 + 1;
          if (v768 == 127)
            v769 = 0;
          *(_QWORD *)v2225 = 0;
          *(_WORD *)&v2225[8] = 513;
          *(_DWORD *)&v2225[12] = 1;
          *(_QWORD *)&v2225[16] = v769;
          v2225[24] = 0;
          v770 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
          v776 = (uint64_t)v13;
          v777 = 6;
          v778 = v771;
LABEL_987:
          return;
        }
        v763 = *((_BYTE *)v566 + 40);
        v764 = v763 & 0x7F;
        if ((v763 & 0x60) != 0)
          v765 = (char)(31 - (v763 & 0x7F));
        else
          v765 = v764 + 1;
        *(_QWORD *)v2225 = 0;
        *(_WORD *)&v2225[8] = 513;
        if (v764 == 127)
          v765 = 0;
        *(_DWORD *)&v2225[12] = 1;
        *(_QWORD *)&v2225[16] = v765;
        v2225[24] = 0;
        v766 = (JSC::B3::Value **)JSC::B3::Value::child(v568, 0);
        v585 = (uint64_t)v13;
        v586 = 3;
      }
      else
      {
        v576 = *((_BYTE *)v566 + 40);
        v577 = v576 & 0x7F;
        if ((v576 & 0x60) != 0)
          v578 = (char)(31 - (v576 & 0x7F));
        else
          v578 = v577 + 1;
        *(_QWORD *)v2225 = 0;
        *(_WORD *)&v2225[8] = 513;
        if (v577 == 127)
          v578 = 0;
        *(_DWORD *)&v2225[12] = 1;
        *(_QWORD *)&v2225[16] = v578;
        v2225[24] = 0;
        v579 = (JSC::B3::Value **)JSC::B3::Value::child(v568, 0);
        v585 = (uint64_t)v13;
        v586 = 2;
      }
      goto LABEL_679;
    case 81:
      if ((v15 & 0xFFF) == 0x51)
        v344 = (_DWORD *)*((_QWORD *)this + 50);
      else
        v344 = 0;
      v345 = v344[12];
      v346 = v344[13];
      v347 = v344[10];
      v348 = v344[11];
      if (v345 == v346)
      {
        if (v347 == v348)
          return;
        v104 = 327;
      }
      else if (v347 == v348)
      {
        v104 = 328;
      }
      else
      {
        v104 = 326;
      }
      goto LABEL_72;
    case 82:
      if ((v15 & 0xFFF) != 0x52)
        v14 = 0;
      v270 = *((unsigned __int8 *)this + 392);
      v271 = *((_QWORD *)this + 54);
      v272 = *(_QWORD *)(v271 + 168);
      if (!v272)
      {
        if (HIBYTE(dword_1ECF4C7B0))
        {
          if (HIBYTE(word_1ECF4C79E))
            v702 = 1;
          else
            v702 = *(_BYTE *)(*(_QWORD *)(v271 + 8) + 212) != 0;
        }
        else
        {
          v702 = 0;
        }
        v703 = WTF::fastMalloc((WTF *)0x30);
        v704 = (_QWORD *)v703;
        *(_DWORD *)(v703 + 8) = -1;
        *(_QWORD *)v703 = off_1E357FB30;
        *(_QWORD *)(v703 + 24) = 0;
        *(_QWORD *)(v703 + 32) = 0;
        *(_QWORD *)(v703 + 16) = 0;
        *(_BYTE *)(v703 + 40) = v702;
        if (v702)
        {
          v706 = JSC::RegisterSetBuilder::allRegisters((JSC::RegisterSetBuilder *)v703);
        }
        else
        {
          v705 = 0;
          v706 = -1;
        }
        v704[3] = v706 & 0xFFFF00FE0003FFFCLL;
        v704[4] = v705 & 0xFFFFFFFEFFFFFFFCLL;
        v704[2] = v271;
        *(_QWORD *)v2225 = v704;
        v272 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v271 + 112, (uint64_t *)v2225);
        v707 = *(_QWORD *)v2225;
        *(_QWORD *)v2225 = 0;
        if (v707)
          (*(void (**)(uint64_t))(*(_QWORD *)v707 + 8))(v707);
        *(_QWORD *)(v271 + 168) = v272;
      }
      v2225[40] = 0;
      *(_QWORD *)&v2225[32] = 0;
      if (v270)
        v273 = 450;
      else
        v273 = 449;
      *(_QWORD *)v2225 = &v2225[16];
      *(_QWORD *)&v2225[16] = v272;
      *(_WORD *)&v2225[24] = 530;
      *(_DWORD *)&v2225[28] = 1;
      *(_QWORD *)&v2225[8] = 0x100000003;
      *(_QWORD *)v2232 = v14;
      *(_DWORD *)&v2232[8] = v273;
      if (!*(_DWORD *)(v14 + 76))
      {
        __break(0xC471u);
        JUMPOUT(0x197FB9F3CLL);
      }
      *(_DWORD *)v2219 = v274;
      if (*(_DWORD *)&v2225[12] == *(_DWORD *)&v2225[8])
      {
        WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v2225, (unsigned int *)v2219, v59, v60, v61, v62, v63, v64);
      }
      else
      {
        v275 = *(_QWORD *)v2225 + 32 * *(unsigned int *)&v2225[12];
        *(_QWORD *)v275 = 0;
        *(_WORD *)(v275 + 8) = 513;
        *(_DWORD *)(v275 + 12) = 1;
        *(_DWORD *)(v275 + 16) = v274;
        *(_DWORD *)(v275 + 20) = 0;
        *(_BYTE *)(v275 + 24) = 0;
        ++*(_DWORD *)&v2225[12];
      }
      v276 = *(_DWORD *)(v14 + 16);
      if (!v276)
        goto LABEL_993;
      if (v276 < 0)
      {
        v277 = *((_QWORD *)v13 + 53);
        v278 = v276 & 0x7FFFFFFF;
        if ((v276 & 0x7FFFFFFFu) >= *(_DWORD *)(v277 + 44))
        {
          __break(0xC471u);
          JUMPOUT(0x197FB9F64);
        }
        v279 = *(_QWORD *)(v277 + 32);
        v281 = v279 + 16 * v278;
        v283 = *(_DWORD *)(v281 + 12);
        v282 = (unsigned int *)(v281 + 12);
        if (v283)
        {
          v284 = v280;
          v285 = 0;
          do
          {
            if (v285 >= *((unsigned int *)v284 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x197FB9F4CLL);
            }
            v286 = *(_DWORD *)(*v284 + 4 * v285);
            *(_DWORD *)v2219 = v286;
            if (*(_DWORD *)&v2225[12] == *(_DWORD *)&v2225[8])
            {
              WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v2225, (unsigned int *)v2219, v59, v60, v61, v62, v63, v64);
            }
            else
            {
              v287 = *(_QWORD *)v2225 + 32 * *(unsigned int *)&v2225[12];
              *(_QWORD *)v287 = 0;
              *(_WORD *)(v287 + 8) = 513;
              *(_DWORD *)(v287 + 12) = 1;
              *(_DWORD *)(v287 + 16) = v286;
              *(_DWORD *)(v287 + 20) = 0;
              *(_BYTE *)(v287 + 24) = 0;
              ++*(_DWORD *)&v2225[12];
            }
            ++v285;
          }
          while (v285 < *v282);
        }
LABEL_993:
        if (*(_DWORD *)(v14 + 76) >= 2u)
        {
          for (j = 1; j < *(unsigned int *)(v14 + 76); ++j)
          {
            v58 = *(_QWORD *)(*(_QWORD *)(v14 + 64) + 8 * j);
            v783 = *(_WORD *)(v58 + 12) & 0xFFF;
            if (v58)
              v784 = v783 == 3;
            else
              v784 = 0;
            if (v784)
            {
              v790 = *(int *)(v58 + 40);
            }
            else
            {
              if (v58)
                v785 = v783 == 4;
              else
                v785 = 0;
              if (!v785)
                goto LABEL_1003;
              v790 = *(_QWORD *)(v58 + 40);
            }
            if ((unint64_t)(v790 + 4095) <= 0x1FFE
              || (v790 & 0xFFF) == 0
              && (!((unint64_t)v790 >> 24) || (unint64_t)((v790 >> 12) + 4095) < 0x1000))
            {
              *(_DWORD *)&v2219[12] = 1;
              *(_QWORD *)&v2219[16] = 0;
              v2219[24] = 0;
              *(_WORD *)&v2219[8] = 514;
              *(_QWORD *)v2219 = v790;
              goto LABEL_1004;
            }
LABEL_1003:
            *(_QWORD *)v2219 = 0;
            *(_WORD *)&v2219[8] = 513;
            *(_DWORD *)&v2219[12] = 1;
            *(_QWORD *)&v2219[16] = v786;
            v2219[24] = 0;
LABEL_1004:
            if (*(_DWORD *)&v2225[12] == *(_DWORD *)&v2225[8])
            {
              v791 = (__int128 *)WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2225, (void *)(*(unsigned int *)&v2225[12] + 1), (unint64_t)v2219, v60, v61, v62, v63, v64);
              v787 = (_OWORD *)(*(_QWORD *)v2225 + 32 * *(unsigned int *)&v2225[12]);
              v788 = *v791;
              v789 = v791[1];
            }
            else
            {
              v787 = (_OWORD *)(*(_QWORD *)v2225 + 32 * *(unsigned int *)&v2225[12]);
              v788 = *(_OWORD *)v2219;
              v789 = *(_OWORD *)&v2219[16];
            }
            *v787 = v788;
            v787[1] = v789;
            ++*(_DWORD *)&v2225[12];
          }
        }
        v792 = *((_DWORD *)v13 + 91);
        if (!v792)
        {
          __break(0xC471u);
          JUMPOUT(0x197FB9F44);
        }
        v793 = *((_QWORD *)v13 + 44) + 528 * v792 - 528;
        v795 = *(_DWORD *)(*((_QWORD *)v13 + 44) + 528 * v792 - 520);
        v794 = *(unsigned int *)(*((_QWORD *)v13 + 44) + 528 * v792 - 516);
        if ((_DWORD)v794 == v795)
        {
LABEL_1896:
          WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v793, (unint64_t)v2225, v59, v60, v61, v62, v63, v64);
LABEL_1022:
          v65 = *(_QWORD *)v2225;
          if (&v2225[16] == *(_BYTE **)v2225)
            return;
          goto LABEL_240;
        }
        v796 = *(_QWORD *)v793;
        v797 = *(_QWORD *)v793 + (v794 << 7);
        v798 = (_OWORD *)(v797 + 16);
        *(_QWORD *)v797 = v797 + 16;
        *(_QWORD *)(v797 + 8) = 3;
        v799 = *(_QWORD *)v2225;
        if (*(_BYTE **)v2225 == &v2225[16])
        {
          if (*(_DWORD *)&v2225[12])
          {
            v800 = 32 * *(unsigned int *)&v2225[12];
            v801 = (__int128 *)&v2225[16];
            do
            {
              v802 = *v801;
              v803 = v801[1];
              v801 += 2;
              *v798 = v802;
              v798[1] = v803;
              v798 += 2;
              v800 -= 32;
            }
            while (v800);
          }
        }
        else
        {
LABEL_1413:
          *(_QWORD *)v2225 = &v2225[16];
          *(_QWORD *)v797 = v799;
          v1094 = *(_DWORD *)&v2225[8];
          *(_DWORD *)&v2225[8] = 3;
          *(_DWORD *)(v797 + 8) = v1094;
        }
LABEL_1021:
        v804 = *(_DWORD *)&v2225[12];
        *(_DWORD *)&v2225[12] = 0;
        *(_DWORD *)(v797 + 12) = v804;
        v805 = v796 + (v794 << 7);
        v806 = *(_QWORD *)v2232;
        *(_DWORD *)(v805 + 119) = *(_DWORD *)&v2232[7];
        *(_QWORD *)(v805 + 112) = v806;
        ++*(_DWORD *)(v793 + 12);
        goto LABEL_1022;
      }
      v779 = *(_WORD *)(v14 + 12) & 0xFFF;
      if (v779 == 3)
      {
        v1118 = *(int *)(v14 + 40);
      }
      else
      {
        if (v779 != 4)
          goto LABEL_990;
        v1118 = *(_QWORD *)(v14 + 40);
      }
      if ((unint64_t)(v1118 + 4095) < 0x1FFF)
      {
        v780 = 0;
LABEL_991:
        *(_DWORD *)v2219 = v780;
        if (*(_DWORD *)&v2225[12] == *(_DWORD *)&v2225[8])
        {
          WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v2225, (unsigned int *)v2219, v59, v60, v61, v62, v63, v64);
        }
        else
        {
          v781 = *(_QWORD *)v2225 + 32 * *(unsigned int *)&v2225[12];
          *(_QWORD *)v781 = 0;
          *(_WORD *)(v781 + 8) = 513;
          *(_DWORD *)(v781 + 12) = 1;
          *(_DWORD *)(v781 + 16) = v780;
          *(_DWORD *)(v781 + 20) = 0;
          *(_BYTE *)(v781 + 24) = 0;
          ++*(_DWORD *)&v2225[12];
        }
        goto LABEL_993;
      }
      if ((v1118 & 0xFFF) == 0)
      {
        v780 = 0;
        if (!((unint64_t)v1118 >> 24) || (unint64_t)((v1118 >> 12) + 4095) < 0x1000)
          goto LABEL_991;
      }
LABEL_990:
      goto LABEL_991;
    case 83:
      if (v15 != 83)
        v14 = 0;
      v78 = *((_QWORD *)this + 51);
      if (!v78)
      {
        v400 = *((_QWORD *)this + 54);
        v401 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)(v401 + 8) = -1;
        *(_QWORD *)v401 = off_1E357E670;
        *(_QWORD *)(v401 + 16) = v400;
        *(_QWORD *)v2225 = v401;
        v78 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v400 + 112, (uint64_t *)v2225);
        v402 = *(_QWORD *)v2225;
        *(_QWORD *)v2225 = 0;
        if (v402)
          (*(void (**)(uint64_t))(*(_QWORD *)v402 + 8))(v402);
        *((_QWORD *)v13 + 51) = v78;
      }
      v2225[40] = 0;
      v79 = &v2225[16];
      *(_QWORD *)&v2225[32] = 0;
      *(_QWORD *)v2225 = &v2225[16];
      *(_QWORD *)&v2225[16] = v78;
      *(_WORD *)&v2225[24] = 530;
      *(_DWORD *)&v2225[28] = 1;
      *(_QWORD *)&v2225[8] = 0x100000003;
      *(_QWORD *)v2232 = v14;
      *(_DWORD *)&v2232[8] = 448;
      *(_QWORD *)&v2209[8] = 0;
      *(_QWORD *)v2209 = 0;
      *(_QWORD *)v2219 = v2225;
      *(_QWORD *)&v2219[8] = v2209;
      *(_QWORD *)&v2219[16] = v13;
      v80 = *(_DWORD *)(v14 + 16);
      if (!v80)
        goto LABEL_52;
      if ((v80 & 0x80000000) == 0)
      {
        v206 = *(_WORD *)(v14 + 12) & 0xFFF;
        if (v206 == 3)
        {
          v459 = *(int *)(v14 + 40);
        }
        else
        {
          if (v206 != 4)
            goto LABEL_194;
          v459 = *(_QWORD *)(v14 + 40);
        }
        if ((unint64_t)(v459 + 4095) < 0x1FFF)
        {
          v207 = 0;
          goto LABEL_195;
        }
        if ((v459 & 0xFFF) == 0)
        {
          v207 = 0;
          if (!((unint64_t)v459 >> 24) || (unint64_t)((v459 >> 12) + 4095) < 0x1000)
            goto LABEL_195;
        }
LABEL_194:
        v80 = *(_DWORD *)(v14 + 16);
LABEL_195:
        goto LABEL_52;
      }
      v1796 = *((_QWORD *)v13 + 53);
      v1797 = v80 & 0x7FFFFFFF;
      if (v1797 >= *(_DWORD *)(v1796 + 44))
      {
        __break(0xC471u);
        JUMPOUT(0x197FBA50CLL);
      }
      v1798 = *(_QWORD *)(v1796 + 32) + 16 * v1797;
      if (*(_DWORD *)(v1798 + 12))
      {
        v1800 = v1799;
        v10 = 0;
        do
        {
          if (v10 >= *((unsigned int *)v1800 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x197FBA4DCLL);
          }
          ++v10;
        }
        while (v10 < *(unsigned int *)(v1798 + 12));
      }
LABEL_52:
      v81 = *(unsigned int *)(v14 + 148);
      if (!(_DWORD)v81)
      {
LABEL_56:
        v84 = *(unsigned __int8 *)(v14 + 168);
        if (*(_BYTE *)(v14 + 168))
        {
          do
          {
            v241 = *((_QWORD *)v13 + 54);
            v242 = *(_DWORD *)(v241 + 176);
            *(_DWORD *)(v241 + 176) = v242 + 1;
            v243 = v242 + 33;
            *(_DWORD *)v2222 = v242 + 33;
            if (*(_DWORD *)&v2225[12] == *(_DWORD *)&v2225[8])
            {
              WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v2225, (unsigned int *)v2222, v59, v60, v61, v62, v63, v64);
            }
            else
            {
              v244 = *(_QWORD *)v2225 + 32 * *(unsigned int *)&v2225[12];
              *(_QWORD *)v244 = 0;
              *(_WORD *)(v244 + 8) = 513;
              *(_DWORD *)(v244 + 12) = 1;
              *(_DWORD *)(v244 + 16) = v243;
              *(_DWORD *)(v244 + 20) = 0;
              *(_BYTE *)(v244 + 24) = 0;
              ++*(_DWORD *)&v2225[12];
            }
            --v84;
          }
          while (v84);
        }
        for (k = *(unsigned __int8 *)(v14 + 169); k; --k)
        {
          v861 = *((_QWORD *)v13 + 54);
          v862 = *(_DWORD *)(v861 + 180);
          *(_DWORD *)(v861 + 180) = v862 + 1;
          v863 = -33 - v862;
          *(_DWORD *)v2222 = -33 - v862;
          if (*(_DWORD *)&v2225[12] == *(_DWORD *)&v2225[8])
          {
            WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v2225, (unsigned int *)v2222, v59, v60, v61, v62, v63, v64);
          }
          else
          {
            v864 = *(_QWORD *)v2225 + 32 * *(unsigned int *)&v2225[12];
            *(_QWORD *)v864 = 0;
            *(_WORD *)(v864 + 8) = 513;
            *(_DWORD *)(v864 + 12) = 1;
            *(_DWORD *)(v864 + 16) = v863;
            *(_DWORD *)(v864 + 20) = 0;
            *(_BYTE *)(v864 + 24) = 0;
            ++*(_DWORD *)&v2225[12];
          }
        }
        v86 = *((_DWORD *)v13 + 91);
        if (!v86)
        {
          __break(0xC471u);
          JUMPOUT(0x197FB9ED4);
        }
        v87 = *((_QWORD *)v13 + 44) + 528 * v86 - 528;
        v89 = *(_DWORD *)(*((_QWORD *)v13 + 44) + 528 * v86 - 520);
        v88 = *(unsigned int *)(*((_QWORD *)v13 + 44) + 528 * v86 - 516);
        if ((_DWORD)v88 == v89)
        {
          v954 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v87, v88 + 1, (unint64_t)v2225, v60, v61, v62, v63, v64);
          v955 = *(unsigned int *)(v87 + 12);
          v956 = *(_QWORD *)v87;
          v957 = *(_QWORD *)v87 + (v955 << 7);
          v958 = (_OWORD *)(v957 + 16);
          *(_QWORD *)v957 = v957 + 16;
          *(_QWORD *)(v957 + 8) = 3;
          v959 = *(__int128 **)v954;
          if (*(_QWORD *)v954 == v954 + 16)
          {
            v960 = *(unsigned int *)(v954 + 12);
            if ((_DWORD)v960)
            {
              v961 = 32 * v960;
              do
              {
                v962 = *v959;
                v963 = v959[1];
                v959 += 2;
                *v958 = v962;
                v958[1] = v963;
                v958 += 2;
                v961 -= 32;
              }
              while (v961);
            }
          }
          else
          {
            *(_QWORD *)v954 = v954 + 16;
            *(_QWORD *)v957 = v959;
            v1400 = *(_DWORD *)(v954 + 8);
            *(_DWORD *)(v954 + 8) = 3;
            *(_DWORD *)(v957 + 8) = v1400;
          }
          v964 = *(_DWORD *)(v954 + 12);
          *(_DWORD *)(v954 + 12) = 0;
          *(_DWORD *)(v957 + 12) = v964;
          v965 = v956 + (v955 << 7);
          v966 = *(_QWORD *)(v954 + 112);
          *(_DWORD *)(v965 + 119) = *(_DWORD *)(v954 + 119);
          *(_QWORD *)(v965 + 112) = v966;
        }
        else
        {
          v90 = *(_QWORD *)v87;
          v91 = *(_QWORD *)v87 + (v88 << 7);
          v92 = (_OWORD *)(v91 + 16);
          *(_QWORD *)v91 = v91 + 16;
          *(_QWORD *)(v91 + 8) = 3;
          v93 = *(_QWORD *)v2225;
          if (*(_BYTE **)v2225 == &v2225[16])
          {
            if (*(_DWORD *)&v2225[12])
            {
              v94 = 32 * *(unsigned int *)&v2225[12];
              v95 = (__int128 *)&v2225[16];
              do
              {
                v96 = *v95;
                v97 = v95[1];
                v95 += 2;
                *v92 = v96;
                v92[1] = v97;
                v92 += 2;
                v94 -= 32;
              }
              while (v94);
            }
          }
          else
          {
            *(_QWORD *)v2225 = &v2225[16];
            *(_QWORD *)v91 = v93;
            v269 = *(_DWORD *)&v2225[8];
            *(_DWORD *)&v2225[8] = 3;
            *(_DWORD *)(v91 + 8) = v269;
          }
          v98 = *(_DWORD *)&v2225[12];
          *(_DWORD *)&v2225[12] = 0;
          *(_DWORD *)(v91 + 12) = v98;
          v99 = v90 + (v88 << 7);
          v100 = *(_QWORD *)v2232;
          *(_DWORD *)(v99 + 119) = *(_DWORD *)&v2232[7];
          *(_QWORD *)(v99 + 112) = v100;
        }
        ++*(_DWORD *)(v87 + 12);
        v101 = *((_DWORD *)v13 + 91);
        if (!v101)
        {
          __break(0xC471u);
          JUMPOUT(0x197FB9EDCLL);
        }
        v102 = *(_QWORD *)v2209;
        v103 = *(unsigned int *)&v2209[12];
        if (*(_DWORD *)&v2209[12])
        {
          v367 = *((_QWORD *)v13 + 44) + 528 * v101 - 528;
          v369 = *(unsigned int *)(v367 + 8);
          v368 = *(unsigned int *)(v367 + 12);
          v370 = v368 + *(unsigned int *)&v2209[12];
          if (v370 > v369)
          {
            v820 = v369 + (v369 >> 2);
            v821 = v820 >= 0x10 ? v820 + 1 : 16;
            v822 = v821 <= v370 ? v370 : v821;
            WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v367, v822, v59, v60, v61, v62, v63, v64);
            v368 = *(unsigned int *)(v367 + 12);
            if (v370 < v368)
            {
              __break(0xC471u);
              JUMPOUT(0x197FB18B0);
            }
          }
          v371 = *(_QWORD *)v367 + (v368 << 7);
          v372 = v102 + (v103 << 7);
          do
          {
            v373 = *(unsigned int *)(v102 + 12);
            v374 = (_OWORD *)(v371 + 16);
            *(_QWORD *)v371 = v371 + 16;
            *(_DWORD *)(v371 + 8) = 3;
            *(_DWORD *)(v371 + 12) = v373;
            if (v373 >= 4)
            {
              if (v373 >> 27)
              {
                __break(0xC471u);
                JUMPOUT(0x197FB9F5CLL);
              }
              v374 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v373));
              *(_DWORD *)(v371 + 8) = v373;
              *(_QWORD *)v371 = v374;
            }
            v375 = *(unsigned int *)(v102 + 12);
            if ((_DWORD)v375)
            {
              v376 = *(__int128 **)v102;
              v377 = 32 * v375;
              do
              {
                v378 = *v376;
                v379 = v376[1];
                v376 += 2;
                *v374 = v378;
                v374[1] = v379;
                v374 += 2;
                v377 -= 32;
              }
              while (v377);
            }
            v380 = *(_QWORD *)(v102 + 112);
            *(_DWORD *)(v371 + 119) = *(_DWORD *)(v102 + 119);
            *(_QWORD *)(v371 + 112) = v380;
            v371 += 128;
            v102 += 128;
          }
          while (v102 != v372);
          *(_DWORD *)(v367 + 12) = v370;
          v102 = *(_QWORD *)v2209;
          if (*(_DWORD *)&v2209[12])
          {
            v381 = *(_QWORD *)v2209 + 16;
            v382 = (unint64_t)*(unsigned int *)&v2209[12] << 7;
            do
            {
              v383 = *(_QWORD *)(v381 - 16);
              if (v381 != v383 && v383 != 0)
              {
                *(_QWORD *)(v381 - 16) = 0;
                *(_DWORD *)(v381 - 8) = 0;
                WTF::fastFree(v383, (void *)v58, v59, v60, v61, v62, v63, v64);
              }
              v381 += 128;
              v382 -= 128;
            }
            while (v382);
            v102 = *(_QWORD *)v2209;
          }
        }
        if (v102)
        {
          *(_QWORD *)v2209 = 0;
          *(_DWORD *)&v2209[8] = 0;
          WTF::fastFree(v102, (void *)v58, v59, v60, v61, v62, v63, v64);
        }
        v65 = *(_QWORD *)v2225;
        if (&v2225[16] == *(_BYTE **)v2225)
          return;
        goto LABEL_240;
      }
      v82 = 16 * v81;
      v83 = (unsigned __int8 *)(*(_QWORD *)(v14 + 136) + 8);
      while (2)
      {
        if (*v83 - 6 > 2)
          goto LABEL_55;
        v366 = *(v83 - 8) & 0x7F;
        if (v366 <= 0x3F)
        {
          *(int8x16_t *)(v14 + 80) = vandq_s8(*(int8x16_t *)(v14 + 80), (int8x16_t)vdupq_n_s64(~(1 << v366)));
LABEL_55:
          v83 += 16;
          v82 -= 16;
          if (!v82)
            goto LABEL_56;
          continue;
        }
        break;
      }
      __break(1u);
LABEL_2363:
      if ((_DWORD)v79 == 1)
        goto LABEL_1904;
LABEL_225:
      if (v11 && !v12)
      {
        __break(0xC471u);
        JUMPOUT(0x197FAE8C4);
      }
LABEL_107:
      v154 = (JSC::B3::MemoryValue *)*((_QWORD *)v13 + 50);
      return;
    case 84:
      v288 = *(JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v289 = *((_QWORD *)v13 + 50);
      if ((*(_WORD *)(v289 + 12) & 0xFFF) != 0x54)
        v289 = 0;
      v290 = *(unsigned int *)(v289 + 40);
      v292 = (JSC::B3::Value *)*((_QWORD *)v13 + 50);
      v293 = *((_DWORD *)v292 + 4);
      if (v293 >= 0x80000000)
        v293 = 0x80000000;
      v294 = v293 - 1;
      if (v294 >= 5)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB9B4CLL);
      }
      if (*((_DWORD *)v291 + 3) <= v290)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB9F54);
      }
      v295 = (void *)qword_19914FB48[v294];
      v296 = *v291;
      return;
    case 85:
    case 86:
    case 87:
      v465 = *(_QWORD *)JSC::B3::StackmapValue::child(*((JSC::B3::StackmapValue **)this + 50), 0);
      v466 = *(_QWORD *)JSC::B3::StackmapValue::child((JSC::B3::StackmapValue *)v14, 1u);
      *(_DWORD *)v2207 = v472;
      if (*(_BYTE *)(v14 + 12) != 86)
        goto LABEL_564;
      v1070 = *(_WORD *)(v465 + 12) & 0xFFF;
      if (v465)
        v1071 = v1070 == 3;
      else
        v1071 = 0;
      if (v1071)
      {
        v1073 = *(int *)(v465 + 40);
      }
      else
      {
        if (v465)
          v1072 = v1070 == 4;
        else
          v1072 = 0;
        if (!v1072)
          goto LABEL_564;
        v1073 = *(_QWORD *)(v465 + 40);
      }
      if (!v1073)
      {
        v1079 = *(_DWORD *)(v14 + 16);
        if (v1079 >= 0x80000000)
          v1079 = 0x80000000;
        v1080 = v1079 - 1;
        if (v1080 >= 4)
          v1081 = 445;
        else
          v1081 = 0x1BD01BD01350134uLL >> (16 * v1080);
        v2225[40] = 0;
        *(_QWORD *)&v2225[32] = 0;
        *(_QWORD *)v2225 = &v2225[16];
        *(_QWORD *)&v2225[16] = v1082;
        *(_WORD *)&v2225[24] = 530;
        *(_DWORD *)&v2225[28] = 1;
        *(_QWORD *)v2232 = v14;
        *(_DWORD *)&v2232[8] = 448;
        *(_QWORD *)&v2226 = 0;
        BYTE8(v2226) = 0;
        *(_QWORD *)&v2225[48] = 6;
        *(_WORD *)&v2225[56] = 527;
        *(_DWORD *)&v2225[60] = 1;
        v2227 = 0;
        v2228 = 513;
        v2229 = 1;
        v2230 = v472;
        v2231 = 0;
        *(_QWORD *)&v2225[8] = 0x300000003;
        v1087 = *((_DWORD *)v13 + 91);
        if (!v1087)
        {
          __break(0xC471u);
          JUMPOUT(0x197FBA4ECLL);
        }
        v793 = *((_QWORD *)v13 + 44) + 528 * v1087 - 528;
        v1088 = *(_DWORD *)(*((_QWORD *)v13 + 44) + 528 * v1087 - 520);
        v794 = *(unsigned int *)(*((_QWORD *)v13 + 44) + 528 * v1087 - 516);
        if ((_DWORD)v794 == v1088)
          goto LABEL_1896;
        v796 = *(_QWORD *)v793;
        v797 = *(_QWORD *)v793 + (v794 << 7);
        v1089 = (_OWORD *)(v797 + 16);
        *(_QWORD *)v797 = v797 + 16;
        *(_QWORD *)(v797 + 8) = 3;
        v799 = *(_QWORD *)v2225;
        if (*(_BYTE **)v2225 != &v2225[16])
          goto LABEL_1413;
        if (*(_DWORD *)&v2225[12])
        {
          v1090 = 32 * *(unsigned int *)&v2225[12];
          v1091 = (__int128 *)&v2225[16];
          do
          {
            v1092 = *v1091;
            v1093 = v1091[1];
            v1091 += 2;
            *v1089 = v1092;
            v1089[1] = v1093;
            v1089 += 2;
            v1090 -= 32;
          }
          while (v1090);
        }
        goto LABEL_1021;
      }
LABEL_564:
      v473 = *((_QWORD *)v13 + 50);
      v474 = *(unsigned __int8 *)(v473 + 12);
      switch(v474)
      {
        case 'U':
          v475 = *(_DWORD *)(v473 + 16);
          if (v475 >= 0x80000000)
            v475 = 0x80000000;
          v476 = 1;
          v477 = 302;
          v479 = v475 - 1;
          v478 = 1;
          switch(v479)
          {
            case 0u:
              goto LABEL_569;
            case 1u:
              v477 = 303;
              break;
            case 2u:
            case 3u:
              goto LABEL_2193;
            default:
              v477 = 445;
              v478 = 1;
              break;
          }
          break;
        case 'V':
          v985 = *(_DWORD *)(v473 + 16);
          if (v985 >= 0x80000000)
            v985 = 0x80000000;
          v986 = v985 - 1;
          v476 = 0;
          v478 = 0;
          v477 = 306;
          switch(v986)
          {
            case 0u:
              goto LABEL_569;
            case 1u:
              v476 = 0;
              v478 = 0;
              v477 = 307;
              break;
            default:
              v476 = 0;
              goto LABEL_2192;
          }
          break;
        case 'W':
          v1204 = *(_DWORD *)(v14 + 16);
          if (v1204 >= 0x80000000)
            v1204 = 0x80000000;
          v1205 = v1204 - 1;
          v478 = 0;
          v477 = 304;
          v476 = 2;
          switch(v1205)
          {
            case 0u:
              goto LABEL_569;
            case 1u:
              v478 = 0;
              v477 = 305;
              break;
            case 2u:
            case 3u:
LABEL_2192:
              v478 = 0;
LABEL_2193:
              v477 = 445;
              break;
            default:
              v478 = 0;
              v477 = 445;
              v476 = 2;
              break;
          }
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197FB8A70);
      }
LABEL_569:
      *(_QWORD *)v2219 = &v2219[16];
      *(_QWORD *)&v2219[8] = 2;
      v480 = *(_WORD *)(v466 + 12) & 0xFFF;
      if (v466)
        v481 = v480 == 3;
      else
        v481 = 0;
      v482 = v481;
      if (v481)
      {
        v809 = *(_DWORD *)(v466 + 40);
        v810 = v809;
      }
      else
      {
        if (!v466 || v480 != 4)
        {
LABEL_578:
          if ((v477 - 302) <= 2)
          {
            *(_DWORD *)v2225 = v1221;
            if (*(_DWORD *)&v2219[12] == *(_DWORD *)&v2219[8])
            {
              WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v2219, (unsigned int *)v2225);
            }
            else
            {
              v1222 = *(_QWORD *)v2219 + 32 * *(unsigned int *)&v2219[12];
              *(_QWORD *)v1222 = 0;
              *(_WORD *)(v1222 + 8) = 513;
              *(_DWORD *)(v1222 + 12) = 1;
              *(_DWORD *)(v1222 + 16) = v1221;
              *(_DWORD *)(v1222 + 20) = 0;
              *(_BYTE *)(v1222 + 24) = 0;
              ++*(_DWORD *)&v2219[12];
            }
            *(_DWORD *)v2225 = v1223;
            if (*(_DWORD *)&v2219[12] != *(_DWORD *)&v2219[8])
            {
              v1224 = *(_QWORD *)v2219 + 32 * *(unsigned int *)&v2219[12];
              *(_QWORD *)v1224 = 0;
              *(_WORD *)(v1224 + 8) = 513;
              *(_DWORD *)(v1224 + 12) = 1;
              *(_DWORD *)(v1224 + 16) = v1223;
              *(_DWORD *)(v1224 + 20) = 0;
              *(_BYTE *)(v1224 + 24) = 0;
              goto LABEL_1495;
            }
LABEL_2755:
            WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v2219, (unsigned int *)v2225);
            goto LABEL_582;
          }
          if ((v477 & 0x1BE) != 0x132)
          {
            if ((v477 - 305) > 8 || ((1 << (v477 - 49)) & 0x181) == 0)
            {
LABEL_582:
              v2097 = v472;
              v483 = *(_DWORD *)&v2219[12] + 2;
              *(_DWORD *)v2209 = v477;
              v2209[4] = v476;
              *(_DWORD *)&v2209[8] = *(_DWORD *)&v2219[12] + 2;
              WTF::HashMap<JSC::B3::CheckSpecial::Key,JSC::B3::CheckSpecial*,WTF::DefaultHash<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial*>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)v2225, (uint64_t *)v13 + 52, (__int16 *)v2209);
              v490 = *(_QWORD *)v2225;
              v491 = *(_QWORD *)(*(_QWORD *)v2225 + 16);
              if (!v491)
              {
                v832 = *((_QWORD *)v13 + 54);
                v833 = WTF::fastMalloc((WTF *)0x28);
                *(_DWORD *)(v833 + 8) = -1;
                *(_QWORD *)v833 = off_1E357D498;
                *(_DWORD *)(v833 + 24) = v477;
                *(_BYTE *)(v833 + 28) = v476;
                *(_DWORD *)(v833 + 32) = v483;
                *(_QWORD *)(v833 + 16) = v832;
                *(_QWORD *)v2222 = v833;
                v491 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v832 + 112, (uint64_t *)v2222);
                v834 = *(_QWORD *)v2222;
                *(_QWORD *)v2222 = 0;
                if (v834)
                  (*(void (**)(uint64_t))(*(_QWORD *)v834 + 8))(v834);
                *(_QWORD *)(v490 + 16) = v491;
              }
              v2225[40] = 0;
              *(_QWORD *)&v2225[32] = 0;
              *(_QWORD *)v2225 = &v2225[16];
              *(_QWORD *)&v2225[16] = v491;
              *(_WORD *)&v2225[24] = 530;
              *(_DWORD *)&v2225[28] = 1;
              *(_QWORD *)v2232 = v14;
              *(_DWORD *)&v2232[8] = 448;
              *(_QWORD *)&v2226 = 0;
              BYTE8(v2226) = 0;
              *(_QWORD *)&v2225[48] = 6;
              *(_WORD *)&v2225[56] = 527;
              *(_DWORD *)&v2225[60] = 1;
              v492 = *(__int128 **)v2219;
              v493 = *(unsigned int *)&v2219[12];
              *(_QWORD *)&v2225[8] = 0x200000003;
              if (*(_DWORD *)&v2219[12])
              {
                v494 = *(unsigned int *)&v2219[12] + 2;
                if (*(_DWORD *)&v2219[12] == 1)
                {
                  v499 = 2;
                  v500 = &v2225[16];
                }
                else
                {
                  if (v494 <= 0x10)
                    v495 = 16;
                  else
                    v495 = *(unsigned int *)&v2219[12] + 2;
                  if (v495 >> 27)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197FB9F8CLL);
                  }
                  v496 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v495));
                  *(_DWORD *)&v2225[8] = v495;
                  *(_QWORD *)v2225 = v496;
                  v497 = *(_OWORD *)&v2225[32];
                  *v496 = *(_OWORD *)&v2225[16];
                  v496[1] = v497;
                  v498 = v2226;
                  v496[2] = *(_OWORD *)&v2225[48];
                  v496[3] = v498;
                  v499 = *(unsigned int *)&v2225[12];
                  if (v494 < *(unsigned int *)&v2225[12])
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197FB9F84);
                  }
                  v500 = *(_BYTE **)v2225;
                }
                v501 = 32 * v493;
                v502 = &v500[32 * v499];
                do
                {
                  v503 = *v492;
                  v504 = v492[1];
                  v492 += 2;
                  *v502 = v503;
                  v502[1] = v504;
                  v502 += 2;
                  v501 -= 32;
                }
                while (v501);
                *(_DWORD *)&v2225[12] = v494;
                if (*(_DWORD *)&v2225[8] == (_DWORD)v494)
                {
                  WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v2225, (unsigned int *)v2207, v484, v485, v486, v487, v488, v489);
LABEL_596:
                  v508 = *((_DWORD *)v13 + 91);
                  if (!v508)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197FB9F7CLL);
                  }
                  v509 = *((_QWORD *)v13 + 44) + 528 * v508 - 528;
                  v511 = *(_DWORD *)(*((_QWORD *)v13 + 44) + 528 * v508 - 520);
                  v510 = *(unsigned int *)(*((_QWORD *)v13 + 44) + 528 * v508 - 516);
                  if ((_DWORD)v510 == v511)
                  {
                    WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v509, (unint64_t)v2225, v59, v60, v61, v62, v63, v64);
                  }
                  else
                  {
                    v512 = *(_QWORD *)v509;
                    v513 = *(_QWORD *)v509 + (v510 << 7);
                    v514 = (_OWORD *)(v513 + 16);
                    *(_QWORD *)v513 = v513 + 16;
                    *(_QWORD *)(v513 + 8) = 3;
                    v515 = *(_QWORD *)v2225;
                    if (*(_BYTE **)v2225 == &v2225[16])
                    {
                      if (*(_DWORD *)&v2225[12])
                      {
                        v516 = 32 * *(unsigned int *)&v2225[12];
                        v517 = (__int128 *)&v2225[16];
                        do
                        {
                          v518 = *v517;
                          v519 = v517[1];
                          v517 += 2;
                          *v514 = v518;
                          v514[1] = v519;
                          v514 += 2;
                          v516 -= 32;
                        }
                        while (v516);
                      }
                    }
                    else
                    {
                      *(_QWORD *)v2225 = &v2225[16];
                      *(_QWORD *)v513 = v515;
                      v939 = *(_DWORD *)&v2225[8];
                      *(_DWORD *)&v2225[8] = 3;
                      *(_DWORD *)(v513 + 8) = v939;
                    }
                    v520 = *(_DWORD *)&v2225[12];
                    *(_DWORD *)&v2225[12] = 0;
                    *(_DWORD *)(v513 + 12) = v520;
                    v521 = v512 + (v510 << 7);
                    v522 = *(_QWORD *)v2232;
                    *(_DWORD *)(v521 + 119) = *(_DWORD *)&v2232[7];
                    *(_QWORD *)(v521 + 112) = v522;
                    ++*(_DWORD *)(v509 + 12);
                  }
                  v523 = *(_QWORD *)v2225;
                  if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
                  {
                    *(_QWORD *)v2225 = 0;
                    *(_DWORD *)&v2225[8] = 0;
                    WTF::fastFree(v523, (void *)v58, v59, v60, v61, v62, v63, v64);
                  }
                  v65 = *(_QWORD *)v2219;
                  if (&v2219[16] != *(_BYTE **)v2219 && *(_QWORD *)v2219)
                  {
                    *(_QWORD *)v2219 = 0;
                    *(_DWORD *)&v2219[8] = 0;
                    goto LABEL_288;
                  }
                  return;
                }
                v505 = *(_BYTE **)v2225;
                v506 = v494;
              }
              else
              {
                v506 = 2;
                v505 = &v2225[16];
              }
              v507 = &v505[32 * v506];
              *(_QWORD *)v507 = 0;
              *((_WORD *)v507 + 4) = 513;
              *((_DWORD *)v507 + 3) = 1;
              *((_QWORD *)v507 + 2) = v2097;
              v507[24] = 0;
              ++*(_DWORD *)&v2225[12];
              goto LABEL_596;
            }
            *(_DWORD *)v2225 = v1124;
            if (*(_DWORD *)&v2219[12] == *(_DWORD *)&v2219[8])
            {
              WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v2219, (unsigned int *)v2225);
            }
            else
            {
              v1125 = *(_QWORD *)v2219 + 32 * *(unsigned int *)&v2219[12];
              *(_QWORD *)v1125 = 0;
              *(_WORD *)(v1125 + 8) = 513;
              *(_DWORD *)(v1125 + 12) = 1;
              *(_DWORD *)(v1125 + 16) = v1124;
              *(_DWORD *)(v1125 + 20) = 0;
              *(_BYTE *)(v1125 + 24) = 0;
              ++*(_DWORD *)&v2219[12];
            }
            *(_DWORD *)v2225 = v1126;
            if (*(_DWORD *)&v2219[12] == *(_DWORD *)&v2219[8])
            {
              WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v2219, (unsigned int *)v2225);
            }
            else
            {
              v1127 = *(_QWORD *)v2219 + 32 * *(unsigned int *)&v2219[12];
              *(_QWORD *)v1127 = 0;
              *(_WORD *)(v1127 + 8) = 513;
              *(_DWORD *)(v1127 + 12) = 1;
              *(_DWORD *)(v1127 + 16) = v1126;
              *(_DWORD *)(v1127 + 20) = 0;
              *(_BYTE *)(v1127 + 24) = 0;
              ++*(_DWORD *)&v2219[12];
            }
            v1128 = *((_QWORD *)v13 + 54);
            v1129 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 16);
            if (v1129 >= 0x80000000)
              v1129 = 0x80000000;
            if (v1129 - 3 <= 2)
            {
              v1602 = *(_DWORD *)(v1128 + 180);
              *(_DWORD *)(v1128 + 180) = v1602 + 1;
              v1131 = -33 - v1602;
            }
            else
            {
              v1130 = *(_DWORD *)(v1128 + 176);
              *(_DWORD *)(v1128 + 176) = v1130 + 1;
              v1131 = v1130 + 33;
            }
            *(_DWORD *)v2225 = v1131;
            if (*(_DWORD *)&v2219[12] != *(_DWORD *)&v2219[8])
            {
              v1132 = *(_QWORD *)v2219 + 32 * *(unsigned int *)&v2219[12];
              *(_QWORD *)v1132 = 0;
              *(_WORD *)(v1132 + 8) = 513;
              *(_DWORD *)(v1132 + 12) = 1;
              *(_DWORD *)(v1132 + 16) = v1131;
              *(_DWORD *)(v1132 + 20) = 0;
              *(_BYTE *)(v1132 + 24) = 0;
LABEL_1495:
              ++*(_DWORD *)&v2219[12];
              goto LABEL_582;
            }
            goto LABEL_2755;
          }
          if (v478
          {
            *(_DWORD *)v2225 = v1749;
            if (*(_DWORD *)&v2219[12] == *(_DWORD *)&v2219[8])
            {
              WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v2219, (unsigned int *)v2225);
            }
            else
            {
              v1750 = *(_QWORD *)v2219 + 32 * *(unsigned int *)&v2219[12];
              *(_QWORD *)v1750 = 0;
              *(_WORD *)(v1750 + 8) = 513;
              *(_DWORD *)(v1750 + 12) = 1;
              *(_DWORD *)(v1750 + 16) = v1749;
              *(_DWORD *)(v1750 + 20) = 0;
              *(_BYTE *)(v1750 + 24) = 0;
              ++*(_DWORD *)&v2219[12];
            }
            v813 = v13;
            v814 = (JSC::B3::Value *)v466;
            goto LABEL_1043;
          }
          *(_DWORD *)v2225 = v987;
          if (*(_DWORD *)&v2219[12] == *(_DWORD *)&v2219[8])
          {
            WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>((uint64_t)v2219, (unsigned int *)v2225);
            goto LABEL_1042;
          }
          v988 = *(_QWORD *)v2219 + 32 * *(unsigned int *)&v2219[12];
          *(_QWORD *)v988 = 0;
          *(_WORD *)(v988 + 8) = 513;
          *(_DWORD *)(v988 + 12) = 1;
          *(_DWORD *)(v988 + 16) = v987;
          *(_DWORD *)(v988 + 20) = 0;
          *(_BYTE *)(v988 + 24) = 0;
          v812 = *(_DWORD *)&v2219[12] + 1;
LABEL_1041:
          *(_DWORD *)&v2219[12] = v812;
LABEL_1042:
          v813 = v13;
          v814 = (JSC::B3::Value *)v465;
LABEL_1043:
          goto LABEL_582;
        }
        v810 = *(_QWORD *)(v466 + 40);
        v809 = v810;
      }
      if ((unint64_t)(v810 + 4095) > 0x1FFE
        && ((v810 & 0xFFF) != 0 || (unint64_t)v810 >> 24 && (unint64_t)((v810 >> 12) + 4095) >= 0x1000)
        || (v477 - 302) > 5
        || ((1 << (v477 - 46)) & 0x33) == 0)
      {
        goto LABEL_578;
      }
      if (v482)
      {
        v811 = v809;
      }
      else
      {
        v811 = 0;
        if (!v466 || v480 != 4)
        {
LABEL_1040:
          *(_QWORD *)&v2219[16] = v811;
          v2219[24] = v482;
          v2219[25] = 2;
          v812 = 1;
          *(_DWORD *)&v2219[28] = 1;
          *(_QWORD *)&v2219[32] = 0;
          v2219[40] = 0;
          goto LABEL_1041;
        }
        v811 = *(_QWORD *)(v466 + 40);
      }
      if ((unint64_t)(v811 + 4095) <= 0x1FFE)
      {
        LOBYTE(v482) = 2;
      }
      else if ((v811 & 0xFFF) != 0
             || (LOBYTE(v482) = 2, (unint64_t)v811 >> 24) && (unint64_t)((v811 >> 12) + 4095) >= 0x1000)
      {
        v811 = 0;
        LOBYTE(v482) = 0;
      }
      goto LABEL_1040;
    case 88:
      v105 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      *(_WORD *)v2209 = *(_WORD *)&v2232[8];
      v2209[2] = v2232[10];
      v111 = *(_DWORD *)&v2225[12];
      *(_DWORD *)&v2209[8] = *(_DWORD *)&v2225[12];
      v2209[4] = 0;
      WTF::HashMap<JSC::B3::CheckSpecial::Key,JSC::B3::CheckSpecial*,WTF::DefaultHash<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial*>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)v2219, (uint64_t *)v13 + 52, (__int16 *)v2209);
      v116 = *(_QWORD *)v2219;
      v117 = *(_QWORD *)(*(_QWORD *)v2219 + 16);
      if (!v117)
      {
        v245 = *((_QWORD *)v13 + 54);
        v246 = WTF::fastMalloc((WTF *)0x28);
        v247 = *(_DWORD *)v2209;
        *(_DWORD *)(v246 + 8) = -1;
        *(_QWORD *)v246 = off_1E357D498;
        *(_DWORD *)(v246 + 24) = v247;
        *(_BYTE *)(v246 + 28) = 0;
        *(_DWORD *)(v246 + 32) = v111;
        *(_QWORD *)(v246 + 16) = v245;
        *(_QWORD *)v2222 = v246;
        v117 = JSC::B3::SparseCollection<JSC::B3::Air::Special>::add(v245 + 112, (uint64_t *)v2222);
        v248 = *(_QWORD *)v2222;
        *(_QWORD *)v2222 = 0;
        if (v248)
          (*(void (**)(uint64_t))(*(_QWORD *)v248 + 8))(v248);
        *(_QWORD *)(v116 + 16) = v117;
      }
      if (*(unsigned __int8 *)(*((_QWORD *)v13 + 50) + 12) - 85 >= 4)
        v118 = 0;
      else
        v118 = (int8x16_t *)*((_QWORD *)v13 + 50);
      v2219[40] = 0;
      *(_QWORD *)&v2219[32] = 0;
      *(_QWORD *)v2219 = &v2219[16];
      *(_QWORD *)&v2219[16] = v117;
      *(_WORD *)&v2219[24] = 530;
      *(_DWORD *)&v2219[28] = 1;
      *(_QWORD *)&v2219[8] = 0x100000003;
      *(_QWORD *)v2221 = v118;
      *(_DWORD *)&v2221[8] = 448;
      v119 = *(unsigned int *)&v2225[12];
      if (*(_DWORD *)&v2225[12])
      {
        v120 = *(__int128 **)v2225;
        v121 = *(unsigned int *)&v2225[12] + 1;
        if (*(_DWORD *)&v2225[12] < 3u)
        {
          v125 = 1;
          v126 = &v2219[16];
        }
        else
        {
          if (v121 <= 0x10)
            v122 = 16;
          else
            v122 = *(unsigned int *)&v2225[12] + 1;
          if (v122 >> 27)
          {
            __break(0xC471u);
            JUMPOUT(0x197FB9F0CLL);
          }
          v123 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v122));
          *(_DWORD *)&v2219[8] = v122;
          *(_QWORD *)v2219 = v123;
          v124 = *(_OWORD *)&v2219[32];
          *v123 = *(_OWORD *)&v2219[16];
          v123[1] = v124;
          v125 = *(unsigned int *)&v2219[12];
          if (v121 < *(unsigned int *)&v2219[12])
          {
            __break(0xC471u);
            JUMPOUT(0x197FB9F04);
          }
          v126 = *(_BYTE **)v2219;
        }
        v127 = 32 * v119;
        v128 = &v126[32 * v125];
        do
        {
          v129 = *v120;
          v130 = v120[1];
          v120 += 2;
          *v128 = v129;
          v128[1] = v130;
          v128 += 2;
          v127 -= 32;
        }
        while (v127);
        *(_DWORD *)&v2219[12] = v121;
      }
      v131 = *((_DWORD *)v13 + 91);
      if (!v131)
      {
        __break(0xC471u);
        JUMPOUT(0x197FB9EFCLL);
      }
      v132 = *((_QWORD *)v13 + 44) + 528 * v131 - 528;
      v133 = *(unsigned int *)(v132 + 12);
      if ((_DWORD)v133 == *(_DWORD *)(v132 + 8))
      {
        v1028 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v132, v133 + 1, (unint64_t)v2219, v60, v61, v62, v63, v64);
        v1029 = *(unsigned int *)(v132 + 12);
        v1030 = *(_QWORD *)v132;
        v1031 = *(_QWORD *)v132 + (v1029 << 7);
        v1032 = (_OWORD *)(v1031 + 16);
        *(_QWORD *)v1031 = v1031 + 16;
        *(_QWORD *)(v1031 + 8) = 3;
        v1033 = *(__int128 **)v1028;
        if (*(_QWORD *)v1028 == v1028 + 16)
        {
          v1034 = *(unsigned int *)(v1028 + 12);
          if ((_DWORD)v1034)
          {
            v1035 = 32 * v1034;
            do
            {
              v1036 = *v1033;
              v1037 = v1033[1];
              v1033 += 2;
              *v1032 = v1036;
              v1032[1] = v1037;
              v1032 += 2;
              v1035 -= 32;
            }
            while (v1035);
          }
        }
        else
        {
          *(_QWORD *)v1028 = v1028 + 16;
          *(_QWORD *)v1031 = v1033;
          v1430 = *(_DWORD *)(v1028 + 8);
          *(_DWORD *)(v1028 + 8) = 3;
          *(_DWORD *)(v1031 + 8) = v1430;
        }
        v1038 = *(_DWORD *)(v1028 + 12);
        *(_DWORD *)(v1028 + 12) = 0;
        *(_DWORD *)(v1031 + 12) = v1038;
        v1039 = v1030 + (v1029 << 7);
        v1040 = *(_QWORD *)(v1028 + 112);
        *(_DWORD *)(v1039 + 119) = *(_DWORD *)(v1028 + 119);
        *(_QWORD *)(v1039 + 112) = v1040;
      }
      else
      {
        v134 = *(_QWORD *)v132;
        v135 = *(_QWORD *)v132 + (v133 << 7);
        v136 = (_OWORD *)(v135 + 16);
        *(_QWORD *)v135 = v135 + 16;
        *(_QWORD *)(v135 + 8) = 3;
        v137 = *(_QWORD *)v2219;
        if (*(_BYTE **)v2219 == &v2219[16])
        {
          if (*(_DWORD *)&v2219[12])
          {
            v138 = 32 * *(unsigned int *)&v2219[12];
            v139 = (__int128 *)&v2219[16];
            do
            {
              v140 = *v139;
              v141 = v139[1];
              v139 += 2;
              *v136 = v140;
              v136[1] = v141;
              v136 += 2;
              v138 -= 32;
            }
            while (v138);
          }
        }
        else
        {
          *(_QWORD *)v2219 = &v2219[16];
          *(_QWORD *)v135 = v137;
          v349 = *(_DWORD *)&v2219[8];
          *(_DWORD *)&v2219[8] = 3;
          *(_DWORD *)(v135 + 8) = v349;
        }
        v142 = *(_DWORD *)&v2219[12];
        *(_DWORD *)&v2219[12] = 0;
        *(_DWORD *)(v135 + 12) = v142;
        v143 = v134 + (v133 << 7);
        v144 = *(_QWORD *)v2221;
        *(_DWORD *)(v143 + 119) = *(_DWORD *)&v2221[7];
        *(_QWORD *)(v143 + 112) = v144;
      }
      ++*(_DWORD *)(v132 + 12);
      v145 = *(_QWORD *)v2219;
      if (&v2219[16] != *(_BYTE **)v2219 && *(_QWORD *)v2219)
      {
        *(_QWORD *)v2219 = 0;
        *(_DWORD *)&v2219[8] = 0;
        WTF::fastFree(v145, (void *)v58, v59, v60, v61, v62, v63, v64);
      }
      goto LABEL_239;
    case 89:
      if ((v15 & 0xFFF) != 0x59)
        v14 = 0;
      v1924 = *((_QWORD *)v13 + 54);
      v1925 = *(_DWORD *)(v1924 + 176);
      *(_DWORD *)(v1924 + 176) = v1925 + 1;
      *(_QWORD *)v2209 = 0;
      *(_WORD *)&v2209[8] = 513;
      *(_DWORD *)&v2209[12] = 1;
      *(_QWORD *)&v2209[16] = (v1925 + 33);
      v2209[24] = 0;
      *(_OWORD *)&v2219[16] = *(_OWORD *)&v2209[9];
      *(_OWORD *)&v2219[7] = *(_OWORD *)v2209;
      *(_QWORD *)v2225 = &v2225[16];
      *(_QWORD *)&v2225[16] = 0;
      *(_WORD *)&v2225[24] = 513;
      *(_DWORD *)&v2225[28] = 1;
      *(_QWORD *)&v2225[32] = v1923;
      v2225[40] = 0;
      *(_OWORD *)&v2225[48] = *(_OWORD *)v2209;
      v2226 = *(_OWORD *)&v2219[23];
      *(_QWORD *)&v2225[8] = 0x200000003;
      *(_QWORD *)v2232 = v14;
      *(_DWORD *)&v2232[8] = 94;
      v1933 = *(_QWORD *)v2225;
      if (&v2225[16] != *(_BYTE **)v2225 && *(_QWORD *)v2225)
      {
        *(_QWORD *)v2225 = 0;
        *(_DWORD *)&v2225[8] = 0;
        WTF::fastFree(v1933, v1932, v385, v386, v387, v388, v389, v390);
      }
      v1934 = *(unsigned int *)(v14 + 40);
      if (!(_DWORD)v1934)
        goto LABEL_2830;
      if (v1934 <= 0xFFF)
        goto LABEL_2828;
      if ((v1934 & 0xFF000FFF) != 0)
      {
        v1935 = *((_QWORD *)v13 + 54);
        v1936 = *(_DWORD *)(v1935 + 176);
        *(_DWORD *)(v1935 + 176) = v1936 + 1;
        *(_QWORD *)v2225 = 0;
        *(_WORD *)&v2225[8] = 513;
        *(_DWORD *)&v2225[12] = 1;
        *(_QWORD *)&v2225[16] = (v1936 + 33);
        v2225[24] = 0;
        *(_DWORD *)&v2219[12] = 1;
        *(_QWORD *)&v2219[16] = 0;
        v2219[24] = 0;
        *(_WORD *)&v2219[8] = 515;
        *(_QWORD *)v2219 = v1934;
      }
      else
      {
        if ((v1934 & 0xFFF) != 0)
        {
          *(_QWORD *)v2225 = 0;
          *(_WORD *)&v2225[8] = 512;
          *(_DWORD *)&v2225[12] = 1;
          *(_QWORD *)&v2225[16] = 0;
          v2225[24] = 0;
        }
        else
        {
LABEL_2828:
          *(_DWORD *)&v2225[12] = 1;
          *(_QWORD *)&v2225[16] = 0;
          v2225[24] = 0;
          *(_WORD *)&v2225[8] = 514;
          *(_QWORD *)v2225 = v1934;
        }
      }
LABEL_2830:
      *(_QWORD *)v2222 = 0;
      *(_WORD *)&v2222[8] = 512;
      *(_DWORD *)&v2222[12] = 1;
      *(_QWORD *)&v2222[16] = 0;
      v2222[24] = 0;
      v2043 = *(_DWORD *)(v14 + 44);
      if (v2043)
      {
        if (v2043 == 1)
        {
          v2044 = *((_QWORD *)v13 + 54);
          v2045 = *(_DWORD *)(v2044 + 176);
          *(_DWORD *)(v2044 + 176) = v2045 + 1;
          v2222[8] = 1;
          *(_DWORD *)&v2222[16] = v2045 + 33;
          v2046 = *(_QWORD *)(v14 + 48);
          if ((unint64_t)(v2046 + 4095) > 0x1FFE
            && ((v2046 & 0xFFF) != 0
             || (unint64_t)v2046 >> 24
             && v2046 >> 12 != 0
             && (unint64_t)(v2046 >> 12) < 0xFFFFFFFFFFFFF001))
          {
            *(_DWORD *)&v2225[12] = 1;
            *(_QWORD *)&v2225[16] = 0;
            v2225[24] = 0;
            v2047 = 515;
          }
          else
          {
            *(_DWORD *)&v2225[12] = 1;
            *(_QWORD *)&v2225[16] = 0;
            v2225[24] = 0;
            v2047 = 514;
          }
          *(_WORD *)&v2225[8] = v2047;
          *(_QWORD *)v2225 = v2046;
        }
      }
      else
      {
        v2048 = *(_BYTE *)(v14 + 48) & 0x7F;
        if (v2048 == 127)
        {
          v2049 = 0;
        }
        else if ((*(_BYTE *)(v14 + 48) & 0x60) != 0)
        {
          v2049 = (char)(31 - v2048);
        }
        else
        {
          v2049 = v2048 + 1;
        }
        v2222[8] = 1;
        *(_DWORD *)&v2222[16] = v2049;
      }
      *(_OWORD *)&v2219[9] = *(_OWORD *)&v2209[9];
      *(_OWORD *)&v2219[41] = *(_OWORD *)&v2222[9];
      *(_OWORD *)v2219 = *(_OWORD *)v2209;
      *(_OWORD *)&v2219[32] = *(_OWORD *)v2222;
      *(_QWORD *)v2225 = &v2225[16];
      *(_OWORD *)&v2225[16] = *(_OWORD *)v2209;
      *(_OWORD *)&v2225[32] = *(_OWORD *)&v2219[16];
      *(_OWORD *)&v2225[48] = *(_OWORD *)v2222;
      v2226 = *(_OWORD *)&v2219[48];
      *(_QWORD *)&v2225[8] = 0x200000003;
      *(_QWORD *)v2232 = v14;
      *(_DWORD *)&v2232[8] = 451;
      goto LABEL_695;
    case 90:
      v1942 = *(unsigned __int8 *)(v14 + 40);
      if (*(_BYTE *)(v14 + 41))
        v1943 = 1;
      else
        v1943 = (v1942 & 0x3F) - 5 >= 2;
      if (!v1943)
        return;
LABEL_2627:
      v1960 = v1944;
      v1961 = *(unsigned __int8 *)(v14 + 41);
      *(_DWORD *)&v2225[12] = 1;
      *(_QWORD *)&v2225[16] = 0;
      v2225[24] = 0;
      *(_WORD *)&v2225[8] = 514;
      *(_QWORD *)v2225 = v1961;
      v1962 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
      v777 = v1960;
      v776 = (uint64_t)v13;
      v778 = v1963;
      goto LABEL_987;
    case 91:
      v1945 = *(_BYTE *)(v14 + 40);
      v1946 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 1u);
      v1949 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
      v1956 = *(unsigned __int8 *)(v14 + 41);
      *(_DWORD *)&v2225[12] = 1;
      *(_QWORD *)&v2225[16] = 0;
      v2225[24] = 0;
      *(_WORD *)&v2225[8] = 514;
      *(_QWORD *)v2225 = v1956;
      return;
    case 92:
      goto LABEL_2627;
    case 93:
      *(_QWORD *)v2219 = *((_QWORD *)this + 50);
      v1964 = *(_BYTE *)(v14 + 40) & 0x3F;
      *(_QWORD *)v2225 = v2219;
      *(_QWORD *)&v2225[8] = this;
      switch(v1964)
      {
        case 1:
          v1965 = 414;
          v1966 = 64;
          v1967 = 0;
          break;
        case 2:
          v1965 = 415;
          v1966 = 66;
          v1967 = 1;
          break;
        case 3:
        case 5:
          v1965 = 416;
          v1966 = 67;
          v1967 = 2;
          break;
        case 4:
        case 6:
          v1965 = 417;
          v1966 = 67;
          v1967 = 3;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197FBA164);
      }
      {
        v2032 = (JSC::B3::Value **)JSC::B3::Value::child(*(JSC::B3::Value **)v2219, 0);
      }
      return;
    case 94:
      v2191 = 1;
      v2192 = 0;
      v2193 = 0;
      v2190 = 526;
      v2189 = 0;
      v2186 = 1;
      v2187 = 0;
      v2188 = 0;
      v2185 = 528;
      v2184 = 0;
      v1814 = &v2189;
      v1815 = &v2184;
      goto LABEL_2511;
    case 95:
      v2181 = 1;
      v2182 = 0;
      v2183 = 0;
      v2180 = 526;
      v2179 = 1;
      v2176 = 1;
      v2177 = 0;
      v2178 = 0;
      v2175 = 528;
      v2174 = 1;
      v1814 = &v2179;
      v1815 = &v2174;
      goto LABEL_2511;
    case 96:
      v2171 = 1;
      v2172 = 0;
      v2173 = 0;
      v2170 = 526;
      v2169 = 11;
      v2166 = 1;
      v2167 = 0;
      v2168 = 0;
      v2165 = 528;
      v2164 = 3;
      v1814 = &v2169;
      v1815 = &v2164;
      goto LABEL_2511;
    case 97:
      v2161 = 1;
      v2162 = 0;
      v2163 = 0;
      v2160 = 526;
      v2159 = 13;
      v2156 = 1;
      v2157 = 0;
      v2158 = 0;
      v2155 = 528;
      v2154 = 9;
      v1814 = &v2159;
      v1815 = &v2154;
      goto LABEL_2511;
    case 98:
      v2151 = 1;
      v2152 = 0;
      v2153 = 0;
      v2150 = 526;
      v2149 = 3;
      v1821 = &v2149;
      goto LABEL_2514;
    case 99:
      v2146 = 1;
      v2147 = 0;
      v2148 = 0;
      v2145 = 526;
      v2144 = 9;
      v1821 = &v2144;
      goto LABEL_2514;
    case 100:
      v2141 = 1;
      v2142 = 0;
      v2143 = 0;
      v2140 = 526;
      v2139 = 12;
      v2136 = 1;
      v2137 = 0;
      v2138 = 0;
      v2135 = 528;
      v2134 = 12;
      v1814 = &v2139;
      v1815 = &v2134;
      goto LABEL_2511;
    case 101:
      v2131 = 1;
      v2132 = 0;
      v2133 = 0;
      v2130 = 526;
      v2129 = 10;
      v2126 = 1;
      v2127 = 0;
      v2128 = 0;
      v2125 = 528;
      v2124 = 10;
      v1814 = &v2129;
      v1815 = &v2124;
LABEL_2511:
      return;
    case 102:
      v2121 = 1;
      v2122 = 0;
      v2123 = 0;
      v2120 = 526;
      v2119 = 8;
      v1821 = &v2119;
      goto LABEL_2514;
    case 103:
      v2116 = 1;
      v2117 = 0;
      v2118 = 0;
      v2115 = 526;
      v2114 = 2;
      v1821 = &v2114;
LABEL_2514:
      return;
    case 104:
      v1822 = 361;
      goto LABEL_2554;
    case 105:
      v1822 = 362;
      goto LABEL_2554;
    case 106:
      v1822 = 363;
      goto LABEL_2554;
    case 107:
      v1822 = 364;
      goto LABEL_2554;
    case 108:
      v1822 = 365;
      goto LABEL_2554;
    case 109:
      v1823 = 434;
      goto LABEL_2561;
    case 110:
      v1822 = 368;
      goto LABEL_2554;
    case 111:
      v1822 = 369;
      goto LABEL_2554;
    case 112:
      v1822 = 370;
      goto LABEL_2554;
    case 113:
      v1822 = 371;
      goto LABEL_2554;
    case 114:
      v1822 = 372;
      goto LABEL_2554;
    case 115:
      v1822 = 373;
      goto LABEL_2554;
    case 116:
      v1733 = 375;
      goto LABEL_2396;
    case 117:
      v1822 = 376;
      goto LABEL_2554;
    case 118:
      v1822 = 377;
      goto LABEL_2554;
    case 119:
      v1822 = 378;
      goto LABEL_2554;
    case 120:
      v1822 = 379;
      goto LABEL_2554;
    case 121:
    case 122:
      JSC::elementByteSize(*(_BYTE *)(v14 + 40) & 0x3F);
      v1731 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
      v1732 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 1u);
      *(int32x2_t *)(*((_QWORD *)v13 + 54) + 176) = vadd_s32(*(int32x2_t *)(*((_QWORD *)v13 + 54) + 176), (int32x2_t)0x100000001);
      __break(0xC471u);
      JUMPOUT(0x197FB6E8CLL);
    case 123:
      v1733 = 392;
      goto LABEL_2396;
    case 124:
      v1733 = 394;
      goto LABEL_2396;
    case 125:
      v1733 = 395;
      goto LABEL_2396;
    case 126:
      v1733 = 396;
      goto LABEL_2396;
    case 127:
      v1733 = 397;
      goto LABEL_2396;
    case -128:
      v1733 = 398;
      goto LABEL_2396;
    case -127:
    case -109:
      v1733 = 399;
      goto LABEL_2396;
    case -126:
      v1733 = 403;
      goto LABEL_2396;
    case -125:
      v1733 = 405;
      goto LABEL_2396;
    case -124:
      v1733 = 408;
      goto LABEL_2396;
    case -123:
      v1733 = 409;
      goto LABEL_2396;
    case -122:
      v1733 = 410;
      goto LABEL_2396;
    case -121:
      v1733 = 411;
      goto LABEL_2396;
    case -120:
      v1733 = 412;
      goto LABEL_2396;
    case -119:
      v1733 = 413;
      goto LABEL_2396;
    case -118:
      return;
    case -117:
      v1733 = 427;
      goto LABEL_2396;
    case -116:
      v1822 = 432;
LABEL_2554:
      return;
    case -115:
      v1733 = 428;
      goto LABEL_2396;
    case -114:
      v1872 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 2u);
      v1878 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
      v1880 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 1u);
      v341 = (uint64_t)v13;
      v340 = 374;
      v342 = v1879;
      v343 = v1871;
      goto LABEL_402;
    case -113:
      v1733 = 429;
LABEL_2396:
      return;
    case -112:
      v1823 = 433;
      goto LABEL_2561;
    case -111:
      if (JSC::B3::Value::numChildren(*((JSC::B3::Value **)this + 50)) == 2)
        goto LABEL_2560;
      v2001 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
      v2007 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      v2013 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 2u);
      return;
    case -110:
LABEL_2560:
      this = v13;
      v1823 = 435;
LABEL_2561:
      return;
    case -108:
      v1881 = *(_BYTE *)(v14 + 40);
      *(_QWORD *)v2225 = 0;
      *(_DWORD *)&v2225[12] = 1;
      *(_QWORD *)&v2225[16] = 0;
      *(_WORD *)&v2225[8] = 533;
      v2225[24] = v1881;
      v1882 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
      v1884 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      v1886 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 2u);
      v1889 = *((_QWORD *)v13 + 54);
      v1890 = *(_DWORD *)(v1889 + 180);
      *(_DWORD *)(v1889 + 180) = v1890 + 1;
      v1891 = -33 - v1890;
      v1892 = (uint64_t)v13;
      v1893 = 437;
      goto LABEL_2564;
    case -107:
      v1894 = *(_BYTE *)(v14 + 40);
      *(_QWORD *)v2225 = 0;
      *(_DWORD *)&v2225[12] = 1;
      *(_QWORD *)&v2225[16] = 0;
      *(_WORD *)&v2225[8] = 533;
      v2225[24] = v1894;
      v1895 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
      v1896 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 1u);
      v1897 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 2u);
      v1898 = *((_QWORD *)v13 + 54);
      v1899 = *(_DWORD *)(v1898 + 180);
      *(_DWORD *)(v1898 + 180) = v1899 + 1;
      v1891 = -33 - v1899;
      v1892 = (uint64_t)v13;
      v1893 = 438;
LABEL_2564:
      return;
    case -106:
      v1900 = *(_BYTE *)(v14 + 40) & 0x3F;
      if (v1900 == 5)
      {
        v1901 = 366;
      }
      else
      {
        if (v1900 != 6)
        {
          __break(0xC471u);
          JUMPOUT(0x197FBA144);
        }
        v1901 = 367;
      }
      v2016 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v2018 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 1u);
      v2020 = *(unsigned __int8 *)(v14 + 41);
      *(_DWORD *)&v2225[12] = 1;
      *(_QWORD *)&v2225[16] = 0;
      v2225[24] = 0;
      *(_WORD *)&v2225[8] = 514;
      *(_QWORD *)v2225 = v2020;
      return;
    case -105:
      v1902 = *(_BYTE *)(v14 + 40);
      v1903 = v1902 & 0xC0;
      *(_QWORD *)v2225 = 0;
      *(_DWORD *)&v2225[12] = 1;
      *(_QWORD *)&v2225[16] = 0;
      *(_WORD *)&v2225[8] = 533;
      v2225[24] = v1902;
      v1904 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
      v1906 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 1u);
      if (v1903 == 64)
        v1909 = 384;
      else
        v1909 = 381;
      return;
    case -104:
      v17 = *(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0);
      v22 = *((_QWORD *)v13 + 50);
      if ((*(_WORD *)(v22 + 12) & 0xFFF) != 0x98)
        v22 = 0;
      v23 = *(_QWORD *)(v22 + 40);
      v24 = *(_DWORD *)(v17 + 16);
      if (v24 >= 0x80000000)
        v25 = 0x80000000;
      else
        v25 = *(_DWORD *)(v17 + 16);
      v26 = v25 - 1;
      if (v26 > 4)
      {
        v1718 = *((_QWORD *)v13 + 53);
        v1719 = v24 & 0x7FFFFFFF;
        if ((v24 & 0x7FFFFFFF) >= *(_DWORD *)(v1718 + 44))
        {
          __break(0xC471u);
          JUMPOUT(0x197FBA4E4);
        }
        v1720 = *(_QWORD *)(v1718 + 32);
        v1722 = WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find(*((_QWORD *)v13 + 6), v23);
        if (*((_DWORD *)v1721 + 3))
        {
          v1723 = v1722;
          v1724 = 0;
          v1725 = v1720 + 16 * v1719;
          do
          {
            if (v1724 >= *(unsigned int *)(v1725 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x197FBA51CLL);
            }
            v1726 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*(_QWORD *)v1725 + 4 * v1724));
            if (v1724 >= *((unsigned int *)v1721 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x197FBA4F4);
            }
            if (v1724 >= *((unsigned int *)v1723 + 5))
            {
              __break(0xC471u);
              JUMPOUT(0x197FBA4FCLL);
            }
            v1719 = v1719 & 0xFFFFFFFF00000000 | v1726;
            ++v1724;
          }
          while (v1724 < *((unsigned int *)v1721 + 3));
        }
        return;
      }
      v27 = aZzklq[v26];
      v28 = *(_WORD *)(v17 + 12) & 0xFFF;
      if (v28 == 3)
      {
        v203 = *(int *)(v17 + 40);
      }
      else
      {
        if (v28 != 4)
        {
LABEL_10:
          v2108 = 0;
          v2109 = 513;
          v2110 = 1;
          LOBYTE(v2112) = 0;
LABEL_11:
          return;
        }
        v203 = *(_QWORD *)(v17 + 40);
      }
      if ((unint64_t)(v203 + 4095) <= 0x1FFE)
      {
        if (!v203)
        {
          v2110 = 1;
          v2111 = 0;
          LOBYTE(v2112) = 0;
          v2109 = 532;
          v2108 = 0;
          goto LABEL_11;
        }
      }
      else if ((v203 & 0xFFF) != 0 || (unint64_t)v203 >> 24 && (unint64_t)((v203 >> 12) + 4095) >= 0x1000)
      {
        goto LABEL_10;
      }
      v2108 = v203;
      v2109 = 514;
      v2110 = 1;
      v2111 = 0;
      v2112 = 0;
      goto LABEL_11;
    case -103:
      v155 = *(_DWORD *)(v14 + 16);
      if (v155 >= 0x80000000)
        v156 = 0x80000000;
      else
        v156 = *(_DWORD *)(v14 + 16);
      v157 = v156 - 1;
      if (v157 > 4)
      {
        v1783 = *((_QWORD *)this + 53);
        v1784 = v155 & 0x7FFFFFFF;
        if ((v155 & 0x7FFFFFFF) >= *(_DWORD *)(v1783 + 44))
        {
          __break(0xC471u);
          JUMPOUT(0x197FBA504);
        }
        v1785 = *(_QWORD *)(v1783 + 32);
        v1787 = WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find(*((_QWORD *)v13 + 6), *((_QWORD *)v13 + 50));
        if (*((_DWORD *)v1786 + 3))
        {
          v1788 = v1787;
          v1789 = 0;
          v1790 = v1785 + 16 * v1784;
          do
          {
            if (v1789 >= *(unsigned int *)(v1790 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x197FBA4C4);
            }
            v1791 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*(_QWORD *)v1790 + 4 * v1789));
            if (v1789 >= *((unsigned int *)v1788 + 5))
            {
              __break(0xC471u);
              JUMPOUT(0x197FBA4CCLL);
            }
            if (v1789 >= *((unsigned int *)v1786 + 3))
            {
              __break(0xC471u);
              JUMPOUT(0x197FBA4D4);
            }
            v1784 = v1784 & 0xFFFFFFFF00000000 | v1791;
            ++v1789;
          }
          while (v1789 < *((unsigned int *)v1786 + 3));
        }
      }
      else
      {
        v158 = (void *)qword_19914FB48[v157];
        v159 = *(unsigned int *)(v14 + 8);
        v160 = *((_QWORD *)this + 3);
        v166 = *(unsigned int *)(v160 + 4 * v159);
        v167 = v161;
        v168 = (uint64_t)v13;
        v169 = v158;
LABEL_115:
      }
      return;
    case -102:
      v104 = 329;
      goto LABEL_72;
    case -101:
      v66 = *(unsigned int *)(*(_QWORD *)JSC::B3::Value::child(*((JSC::B3::Value **)this + 50), 0) + 8);
      if (*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v66) || *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v66) != 1)
        goto LABEL_230;
      v67 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
      v68 = (uint64_t)*v67;
      v69 = *((unsigned __int8 *)*v67 + 12);
      if (v69 > 0x32)
      {
        if (v69 - 51 < 2)
        {
          if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(*v67, 0) + 12) == 72)
          {
            v70 = JSC::B3::Value::child((JSC::B3::Value *)v68, 0);
            v71 = *(unsigned __int8 *)(*(_QWORD *)v70 + 12) - 71 >= 8
                ? 0
                : *(JSC::B3::MemoryValue **)v70;
            if (JSC::B3::MemoryValue::isCanonicalWidth(v71))
            {
              v72 = *(unsigned int *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v68, 0) + 8);
              if (!*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v72) && *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v72) == 1)
              {
                v73 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v68, 0);
                v74 = *(_QWORD *)JSC::B3::Value::child(*v73, 0);
                if (v74 == *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v68, 1u))
                {
                  v75 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v68, 0);
                  v76 = *(JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v68, 0);
                  v77 = *(unsigned __int8 *)(v68 + 12);
LABEL_2472:
                  v1444 = v77 == 52;
                  this = v13;
                  goto LABEL_2399;
                }
              }
            }
          }
LABEL_230:
          v221 = *((_DWORD *)v13 + 91);
          if (!v221)
          {
            __break(0xC471u);
            JUMPOUT(0x197FB9ECCLL);
          }
          v222 = *((_QWORD *)v13 + 44) + 528 * v221 - 528;
          v223 = (JSC::B3::Value **)JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
          v229 = *(unsigned int *)(v222 + 12);
          if ((_DWORD)v229 == *(_DWORD *)(v222 + 8))
          {
            v239 = (_BYTE *)WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v222, v229 + 1, (unint64_t)v2225, v60, v61, v62, v63, v64);
            v929 = *(unsigned int *)(v222 + 12);
            v930 = *(_QWORD *)v222;
            v931 = *(_QWORD *)v222 + (v929 << 7);
            v932 = (_OWORD *)(v931 + 16);
            *(_QWORD *)v931 = v931 + 16;
            *(_QWORD *)(v931 + 8) = 3;
            v933 = *(__int128 **)v239;
            if (*(_BYTE **)v239 == v239 + 16)
            {
              v934 = *((unsigned int *)v239 + 3);
              if ((_DWORD)v934)
              {
                v935 = 32 * v934;
                do
                {
                  v936 = *v933;
                  v937 = v933[1];
                  v933 += 2;
                  *v932 = v936;
                  v932[1] = v937;
                  v932 += 2;
                  v935 -= 32;
                }
                while (v935);
              }
            }
            else
            {
              *(_QWORD *)v239 = v239 + 16;
              *(_QWORD *)v931 = v933;
              v1398 = *((_DWORD *)v239 + 2);
              *((_DWORD *)v239 + 2) = 3;
              *(_DWORD *)(v931 + 8) = v1398;
            }
            v938 = *((_DWORD *)v239 + 3);
            *((_DWORD *)v239 + 3) = 0;
            *(_DWORD *)(v931 + 12) = v938;
            v238 = v930 + (v929 << 7) + 112;
          }
          else
          {
            v230 = *(_QWORD *)v222;
            v231 = *(_QWORD *)v222 + (v229 << 7);
            v232 = (_OWORD *)(v231 + 16);
            *(_QWORD *)v231 = v231 + 16;
            *(_QWORD *)(v231 + 8) = 3;
            v233 = *(__int128 **)v2225;
            if (*(_BYTE **)v2225 == &v2225[16])
            {
              if (*(_DWORD *)&v2225[12])
              {
                v234 = 32 * *(unsigned int *)&v2225[12];
                do
                {
                  v235 = *v233;
                  v236 = v233[1];
                  v233 += 2;
                  *v232 = v235;
                  v232[1] = v236;
                  v232 += 2;
                  v234 -= 32;
                }
                while (v234);
              }
            }
            else
            {
              *(_QWORD *)v2225 = &v2225[16];
              *(_QWORD *)v231 = v233;
              v252 = *(_DWORD *)&v2225[8];
              *(_DWORD *)&v2225[8] = 3;
              *(_DWORD *)(v231 + 8) = v252;
            }
            v237 = *(_DWORD *)&v2225[12];
            *(_DWORD *)&v2225[12] = 0;
            *(_DWORD *)(v231 + 12) = v237;
            v238 = v230 + (v229 << 7) + 112;
            v239 = v2225;
          }
          v240 = *((_QWORD *)v239 + 14);
          *(_DWORD *)(v238 + 7) = *(_DWORD *)(v239 + 119);
          *(_QWORD *)v238 = v240;
LABEL_238:
          ++*(_DWORD *)(v222 + 12);
          goto LABEL_239;
        }
        if (v69 == 71)
        {
          this = v13;
          v76 = (JSC::B3::Value *)v68;
LABEL_2398:
          v1444 = 0;
        }
        else
        {
          if (v69 != 72)
            goto LABEL_230;
          v1980 = JSC::B3::Value::child(*v67, 0);
          v1981 = *(_QWORD *)v1980;
          v1982 = *(_WORD *)(*(_QWORD *)v1980 + 12) & 0xFFF;
          if (*(_QWORD *)v1980)
            v1983 = v1982 == 3;
          else
            v1983 = 0;
          if (v1983)
          {
            v1985 = *(int *)(v1981 + 40);
          }
          else
          {
            if (v1981)
              v1984 = v1982 == 4;
            else
              v1984 = 0;
            if (!v1984)
              goto LABEL_230;
            v1985 = *(_QWORD *)(v1981 + 40);
          }
          if (v1985)
            goto LABEL_230;
          v1986 = *(unsigned __int8 *)(v68 + 12) - 71 >= 8 ? 0 : (JSC::B3::MemoryValue *)v68;
          if (!JSC::B3::MemoryValue::isCanonicalWidth(v1986))
            goto LABEL_230;
LABEL_1934:
          this = v13;
          v76 = (JSC::B3::Value *)v68;
          v1444 = 1;
        }
LABEL_2399:
        return;
      }
      if (v69 != 22)
        goto LABEL_230;
      v180 = *(JSC::B3::Value **)JSC::B3::Value::child(*v67, 0);
      v181 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v68, 1u);
      *(_QWORD *)v2222 = 0;
      *(_QWORD *)v2207 = 0;
      v182 = *(_WORD *)(v181 + 12) & 0xFFF;
      if (v181)
        v183 = v182 == 3;
      else
        v183 = 0;
      if (v183)
      {
        v185 = *(int *)(v181 + 40);
      }
      else
      {
        if (v181)
          v184 = v182 == 4;
        else
          v184 = 0;
        if (!v184)
          goto LABEL_151;
        v185 = *(_QWORD *)(v181 + 40);
      }
      if (v185 == 1 && *((_BYTE *)v180 + 12) == 24)
      {
        v1575 = JSC::B3::Value::child(v180, 1u);
        v1576 = *(_QWORD *)v1575 && (*(_WORD *)(*(_QWORD *)v1575 + 12) & 0xFFF) == 3;
        if (v1576 && *(_DWORD *)(*(_QWORD *)v1575 + 40) == -1
          || ((v1577 = JSC::B3::Value::child(v180, 1u), *(_QWORD *)v1577)
            ? (v1578 = (*(_WORD *)(*(_QWORD *)v1577 + 12) & 0xFFF) == 4)
            : (v1578 = 0),
              v1578 && *(_QWORD *)(*(_QWORD *)v1577 + 40) == -1))
        {
          if (*(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(v180, 0) + 12) == 26
            || *(_BYTE *)(*(_QWORD *)JSC::B3::Value::child(v180, 0) + 12) == 27)
          {
            v1579 = (JSC::B3::Value **)JSC::B3::Value::child(v180, 0);
            v187 = *(JSC::B3::Value **)JSC::B3::Value::child(*v1579, 0);
            *(_QWORD *)v2222 = v187;
            v1580 = (JSC::B3::Value **)JSC::B3::Value::child(v180, 0);
            v186 = *(_QWORD *)JSC::B3::Value::child(*v1580, 1u);
            *(_QWORD *)v2207 = v186;
            v188 = *(JSC::B3::Value **)JSC::B3::Value::child(v180, 0);
            v189 = v180;
LABEL_152:
            v190 = *(_WORD *)(v181 + 12) & 0xFFF;
            if (v181)
              v191 = v190 == 3;
            else
              v191 = 0;
            if (v191)
            {
              v194 = *(int *)(v181 + 40);
              v192 = *(_WORD *)(v181 + 12);
            }
            else
            {
              v192 = *(_WORD *)(v181 + 12);
              if (v181)
                v193 = v190 == 4;
              else
                v193 = 0;
              if (!v193)
                goto LABEL_165;
              v194 = *(_QWORD *)(v181 + 40);
            }
            if (v194 == 1 && (*((_WORD *)v180 + 6) & 0xFE) == 0x1A)
            {
              v187 = *(JSC::B3::Value **)JSC::B3::Value::child(v180, 0);
              *(_QWORD *)v2222 = v187;
              v186 = *(_QWORD *)JSC::B3::Value::child(v180, 1u);
              *(_QWORD *)v2207 = v186;
              v192 = *(unsigned __int8 *)(v181 + 12);
              v188 = v180;
            }
LABEL_165:
            if (v192 != 25)
            {
LABEL_166:
              if (v189 || !v187)
              {
                v195 = v187;
                v187 = v189;
                goto LABEL_169;
              }
              if (*((_BYTE *)v187 + 12) == 24)
              {
                v1988 = *(_QWORD *)JSC::B3::Value::child(v187, 1u);
                if (v1988)
                {
                  if ((*(_WORD *)(v1988 + 12) & 0xFFF) == 3 && *(_DWORD *)(v1988 + 40) == -1)
                    goto LABEL_2664;
                }
                v196 = 0;
                v1989 = *(_QWORD *)JSC::B3::Value::child(v187, 1u);
                if (!v1989 || (*(_WORD *)(v1989 + 12) & 0xFFF) != 4)
                  goto LABEL_2121;
                if (*(_QWORD *)(v1989 + 40) == -1)
                {
LABEL_2664:
                  v195 = *(JSC::B3::Value **)JSC::B3::Value::child(v187, 0);
                  *(_QWORD *)v2222 = v195;
LABEL_169:
                  v196 = v187;
                  v187 = v195;
                  if (!v195)
                    goto LABEL_230;
                  goto LABEL_2121;
                }
              }
              v196 = 0;
LABEL_2121:
              if (!v186)
                goto LABEL_230;
              *(_QWORD *)v2219 = 0;
              *(_WORD *)&v2219[8] = 512;
              *(_DWORD *)&v2219[12] = 1;
              *(_QWORD *)&v2219[16] = 0;
              v2219[24] = 0;
              *(_WORD *)&v2219[40] = 0;
              v2219[42] = 0;
              *(_QWORD *)&v2219[32] = *(_QWORD *)v2222;
              if (v2219[40] && !v2219[41])
              {
                __break(0xC471u);
                JUMPOUT(0x197FB9CB4);
              }
              if (v2225[40] && !v2225[41])
              {
                __break(0xC471u);
                JUMPOUT(0x197FB9CD4);
              }
              if (!*(_DWORD *)&v2209[12])
              {
LABEL_2139:
                goto LABEL_230;
              }
              v1546 = *(JSC::B3::_anonymous_namespace_::LowerToAir::ArgPromise **)v2209;
              v1547 = 48 * *(unsigned int *)&v2209[12];
              while (1)
              {
                {
                  if (WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)v13, (uint64_t)v2222))
                    goto LABEL_2138;
                }
                else
                {
                  v1990 = *(unsigned int *)(*(_QWORD *)v2222 + 8);
                  if (*(_DWORD *)(*((_QWORD *)v13 + 1) + 4 * v1990)
                    || *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v1990) != 1)
                  {
                    goto LABEL_2138;
                  }
                }
                if (v196)
                {
                  v1744 = *((unsigned int *)v196 + 2);
                  v1548 = *((_QWORD *)v13 + 1);
                  if (*(_DWORD *)(v1548 + 4 * v1744))
                    goto LABEL_2138;
                  v1745 = *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v1744);
                  v1550 = v1745 == 1;
                  if (v1745 != 1 || v188 == 0)
                    goto LABEL_2135;
                }
                else
                {
                  if (!v188)
                  {
                    v1550 = 1;
                    goto LABEL_2135;
                  }
                  v1548 = *((_QWORD *)v13 + 1);
                }
                v1549 = *((unsigned int *)v188 + 2);
                if (!*(_DWORD *)(v1548 + 4 * v1549))
                {
                  v1550 = *(_DWORD *)(*((_QWORD *)v13 + 10) + 8 * v1549) == 1;
LABEL_2135:
                    WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)v13, (uint64_t)v2207);
                }
LABEL_2138:
                v1546 = (JSC::B3::_anonymous_namespace_::LowerToAir::ArgPromise *)((char *)v1546 + 48);
                v1547 -= 48;
                if (!v1547)
                  goto LABEL_2139;
              }
            }
            v1533 = JSC::B3::Value::child((JSC::B3::Value *)v181, 0);
            v1534 = *(_QWORD *)v1533;
            v1535 = *(_WORD *)(*(_QWORD *)v1533 + 12) & 0xFFF;
            if (*(_QWORD *)v1533)
              v1536 = v1535 == 3;
            else
              v1536 = 0;
            if (v1536)
            {
              v1538 = *(int *)(v1534 + 40);
            }
            else
            {
              if (v1534)
                v1537 = v1535 == 4;
              else
                v1537 = 0;
              if (!v1537)
                goto LABEL_166;
              v1538 = *(_QWORD *)(v1534 + 40);
            }
            if (v1538 == 1)
            {
              *(_QWORD *)v2222 = v180;
              v186 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v181, 1u);
              *(_QWORD *)v2207 = v186;
              v187 = v180;
              v188 = (JSC::B3::Value *)v181;
            }
            goto LABEL_166;
          }
        }
      }
LABEL_151:
      v186 = 0;
      v187 = 0;
      v188 = 0;
      v189 = 0;
      goto LABEL_152;
    case -99:
      v104 = 446;
      goto LABEL_72;
    case -98:
      if (!JSC::B3::Value::numChildren(*((JSC::B3::Value **)this + 50)))
      {
        this = v13;
        v104 = 330;
LABEL_72:
        return;
      }
      v253 = JSC::B3::Value::child(*((JSC::B3::Value **)v13 + 50), 0);
      v258 = *(_QWORD *)v253;
      v259 = *(_DWORD *)(*(_QWORD *)v253 + 16);
      if (v259 >= 0x80000000)
        v259 = 0x80000000;
      if (v259 != 2)
      {
        switch(v259)
        {
          case 0u:
          case 5u:
            goto LABEL_2220;
          case 1u:
            v266 = (uint64_t)v13;
            v267 = 331;
            goto LABEL_264;
          case 2u:
            return;
          case 3u:
            v266 = (uint64_t)v13;
            v267 = 333;
            goto LABEL_2460;
          case 4u:
            v266 = (uint64_t)v13;
            v267 = 334;
LABEL_2460:
            v268 = 0xFFFFFFFFLL;
            goto LABEL_265;
          default:
            if (v259 == 0x80000000)
            {
LABEL_2220:
              __break(0xC471u);
              JUMPOUT(0x197FB6408);
            }
            return;
        }
      }
      v260 = *(_WORD *)(v258 + 12) & 0xFFF;
      if (v260 == 3)
      {
        v587 = *(int *)(v258 + 40);
      }
      else
      {
        if (v260 != 4)
        {
LABEL_262:
          v2102 = 0;
          v2103 = 513;
          v2104 = 1;
          LOBYTE(v2106) = 0;
LABEL_263:
          v266 = (uint64_t)v13;
          v267 = 332;
LABEL_264:
          v268 = 1;
LABEL_265:
          return;
        }
        v587 = *(_QWORD *)(v258 + 40);
      }
      if ((unint64_t)(v587 + 4095) <= 0x1FFE)
      {
        if (!v587)
        {
          v2104 = 1;
          v2105 = 0;
          LOBYTE(v2106) = 0;
          v2103 = 532;
          v2102 = 0;
          goto LABEL_263;
        }
      }
      else if ((v587 & 0xFFF) != 0 || (unint64_t)v587 >> 24 && (unint64_t)((v587 >> 12) + 4095) >= 0x1000)
      {
        goto LABEL_262;
      }
      v2102 = v587;
      v2103 = 514;
      v2104 = 1;
      v2105 = 0;
      v2106 = 0;
      goto LABEL_263;
    case -97:
      v104 = 445;
      goto LABEL_72;
    default:
      *(_QWORD *)v2225 = *((_QWORD *)this + 53);
      *(_QWORD *)&v2225[8] = v14;
      WTF::dataLog<char [24],JSC::B3::DeepValueDump,char [2]>((const JSC::B3::Procedure **)v2225);
      __break(0xC471u);
      JUMPOUT(0x197FB78D4);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::finishAppendingInstructions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;

  v9 = *(_DWORD *)(a1 + 364);
  if (v9)
  {
    v11 = (uint64_t *)(a2 + 8);
    do
    {
      if (*(_DWORD *)(a1 + 364) <= --v9)
        goto LABEL_42;
      v12 = *(_QWORD *)(a1 + 352) + 528 * v9;
      v13 = *(unsigned int *)(v12 + 12);
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)v12;
        v15 = *(_QWORD *)v12 + (v13 << 7);
        v16 = *(_DWORD *)(a2 + 20);
        while (1)
        {
          v17 = v16;
          if (v16 == *(_DWORD *)(a2 + 16))
          {
            v28 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v11, v16 + 1, v14);
            v31 = *(unsigned int *)(a2 + 20);
            v32 = *(_QWORD *)(a2 + 8);
            v33 = v32 + (v31 << 7);
            v34 = (_OWORD *)(v33 + 16);
            *(_QWORD *)v33 = v33 + 16;
            *(_QWORD *)(v33 + 8) = 3;
            v35 = *(__int128 **)v28;
            if (*(_QWORD *)v28 == v28 + 16)
            {
              v36 = *(unsigned int *)(v28 + 12);
              if ((_DWORD)v36)
              {
                v37 = 32 * v36;
                do
                {
                  v38 = *v35;
                  v39 = v35[1];
                  v35 += 2;
                  *v34 = v38;
                  v34[1] = v39;
                  v34 += 2;
                  v37 -= 32;
                }
                while (v37);
              }
            }
            else
            {
              *(_QWORD *)v28 = v28 + 16;
              *(_QWORD *)v33 = v35;
              v42 = *(_DWORD *)(v28 + 8);
              *(_DWORD *)(v28 + 8) = 3;
              *(_DWORD *)(v33 + 8) = v42;
            }
            v40 = *(_DWORD *)(v28 + 12);
            *(_DWORD *)(v28 + 12) = 0;
            *(_DWORD *)(v33 + 12) = v40;
            v27 = v32 + (v31 << 7) + 112;
          }
          else
          {
            v18 = *v11;
            v19 = *v11 + (v17 << 7);
            v20 = (_OWORD *)(v19 + 16);
            *(_QWORD *)v19 = v19 + 16;
            *(_QWORD *)(v19 + 8) = 3;
            v21 = *(__int128 **)v14;
            if (*(_QWORD *)v14 == v14 + 16)
            {
              v22 = *(unsigned int *)(v14 + 12);
              if ((_DWORD)v22)
              {
                v23 = 32 * v22;
                do
                {
                  v24 = *v21;
                  v25 = v21[1];
                  v21 += 2;
                  *v20 = v24;
                  v20[1] = v25;
                  v20 += 2;
                  v23 -= 32;
                }
                while (v23);
              }
            }
            else
            {
              *(_QWORD *)v14 = v14 + 16;
              *(_QWORD *)v19 = v21;
              v41 = *(_DWORD *)(v14 + 8);
              *(_DWORD *)(v14 + 8) = 3;
              *(_DWORD *)(v19 + 8) = v41;
            }
            v26 = *(_DWORD *)(v14 + 12);
            *(_DWORD *)(v14 + 12) = 0;
            *(_DWORD *)(v19 + 12) = v26;
            v27 = v18 + (v17 << 7) + 112;
            v28 = v14;
          }
          v29 = *(_QWORD *)(v28 + 112);
          *(_DWORD *)(v27 + 7) = *(_DWORD *)(v28 + 119);
          *(_QWORD *)v27 = v29;
          v30 = *(_DWORD *)(a2 + 20);
          v16 = v30 + 1;
          *(_DWORD *)(a2 + 20) = v30 + 1;
          if (v30 == -1)
            break;
          v14 += 128;
          if (v14 == v15)
            goto LABEL_21;
        }
LABEL_42:
        __break(0xC471u);
        JUMPOUT(0x197FBAF08);
      }
LABEL_21:
      ;
    }
    while (v9);
    v43 = *(_DWORD *)(a1 + 364);
    if (v43)
    {
      v44 = *(_QWORD *)(a1 + 352);
      v45 = v44 + 528 * v43;
      do
      {
        v46 = *(unsigned int *)(v44 + 12);
        v47 = *(_QWORD *)v44;
        if ((_DWORD)v46)
        {
          v48 = v46 << 7;
          v49 = v47 + 16;
          do
          {
            v50 = *(_QWORD *)(v49 - 16);
            if (v49 != v50 && v50 != 0)
            {
              *(_QWORD *)(v49 - 16) = 0;
              *(_DWORD *)(v49 - 8) = 0;
              WTF::fastFree(v50, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
            v49 += 128;
            v48 -= 128;
          }
          while (v48);
          v47 = *(_QWORD *)v44;
        }
        if (v44 + 16 != v47 && v47 != 0)
        {
          *(_QWORD *)v44 = 0;
          *(_DWORD *)(v44 + 8) = 0;
          WTF::fastFree(v47, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v44 += 528;
      }
      while (v44 != v45);
    }
  }
  *(_DWORD *)(a1 + 364) = 0;
}

void WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    v24 = v12;
    v55 = v12;
    v56 = (uint64_t *)a3;
    do
    {
      v25 = (uint64_t *)(v11 + 24 * v22);
      v26 = *v25;
      if (*v25)
      {
        if (v26 != -1)
        {
          v27 = *a1;
          if (*a1)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
          v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
          v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
          v32 = v28 & ((v31 >> 31) ^ v31);
          v33 = 1;
          do
          {
            v34 = v32;
            v35 = (_QWORD *)(v27 + 24 * v32);
            v32 = (v32 + v33++) & v28;
          }
          while (*v35);
          v36 = v34;
          v37 = v27 + 24 * v34;
          v40 = *(_QWORD *)(v37 + 8);
          v39 = (_QWORD *)(v37 + 8);
          v38 = v40;
          if (v40)
          {
            *v39 = 0;
            *(_DWORD *)(v27 + 24 * v34 + 16) = 0;
            v41 = v23;
            WTF::fastFree(v38, v15, v16, v17, v18, v19, v20, v21);
            v24 = v55;
            v23 = v41;
            v26 = *v25;
          }
          *v35 = v26;
          v42 = v11 + 24 * v22;
          *v39 = 0;
          v39[1] = 0;
          v44 = *(_QWORD *)(v42 + 8);
          v43 = v42 + 8;
          *(_QWORD *)v43 = 0;
          *v39 = v44;
          v45 = *(_DWORD *)(v43 + 8);
          *(_DWORD *)(v43 + 8) = 0;
          v46 = v27 + 24 * v36;
          *(_DWORD *)(v46 + 16) = v45;
          v47 = *(_DWORD *)(v43 + 12);
          *(_DWORD *)(v43 + 12) = 0;
          *(_DWORD *)(v46 + 20) = v47;
          v48 = *(_QWORD *)v43;
          if (*(_QWORD *)v43)
          {
            *(_QWORD *)v43 = 0;
            *(_DWORD *)(v43 + 8) = 0;
            v49 = v23;
            WTF::fastFree(v48, v15, v16, v17, v18, v19, v20, v21);
            v24 = v55;
            v23 = v49;
          }
          if (v25 == v56)
            v23 = v35;
        }
      }
      else
      {
        v50 = v11 + 24 * v22;
        v53 = *(_QWORD *)(v50 + 8);
        v52 = (_QWORD *)(v50 + 8);
        v51 = v53;
        if (v53)
        {
          *v52 = 0;
          *(_DWORD *)(v11 + 24 * v22 + 16) = 0;
          v54 = v23;
          WTF::fastFree(v51, v15, v16, v17, v18, v19, v20, v21);
          v24 = v55;
          v23 = v54;
        }
      }
      ++v22;
    }
    while (v22 != v24);
  }
  else if (!v11)
  {
    return;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
}

_QWORD *WTF::HashTable<JSC::B3::Variable *,WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Variable *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  _QWORD *v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  _QWORD *result;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v20 = 0;
    v21 = 0;
    v22 = v10;
    do
    {
      v23 = (uint64_t *)(v9 + 24 * v20);
      v24 = *v23;
      if (*v23 != -1)
      {
        if (v24)
        {
          v29 = *a1;
          if (*a1)
            v30 = *(_DWORD *)(v29 - 8);
          else
            v30 = 0;
          v31 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
          v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
          v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
          v34 = v30 & ((v33 >> 31) ^ v33);
          v35 = 1;
          do
          {
            v36 = v34;
            v37 = (_QWORD *)(v29 + 24 * v34);
            v34 = (v34 + v35++) & v30;
          }
          while (*v37);
          v38 = v36;
          v39 = v29 + 24 * v36;
          v42 = *(_QWORD *)(v39 + 8);
          v41 = (_QWORD *)(v39 + 8);
          v40 = v42;
          if (v42)
          {
            *v41 = 0;
            *(_DWORD *)(v29 + 24 * v36 + 16) = 0;
            WTF::fastFree(v40, v13, v14, v15, v16, v17, v18, v19);
            v24 = *v23;
          }
          *v37 = v24;
          v43 = v9 + 24 * v20;
          *v41 = 0;
          v41[1] = 0;
          v45 = *(_QWORD *)(v43 + 8);
          v44 = v43 + 8;
          *(_QWORD *)v44 = 0;
          *v41 = v45;
          v46 = *(_DWORD *)(v44 + 8);
          *(_DWORD *)(v44 + 8) = 0;
          v47 = v29 + 24 * v38;
          *(_DWORD *)(v47 + 16) = v46;
          v48 = *(_DWORD *)(v44 + 12);
          *(_DWORD *)(v44 + 12) = 0;
          *(_DWORD *)(v47 + 20) = v48;
          v49 = *(_QWORD *)v44;
          if (*(_QWORD *)v44)
          {
            *(_QWORD *)v44 = 0;
            *(_DWORD *)(v44 + 8) = 0;
            WTF::fastFree(v49, v13, v14, v15, v16, v17, v18, v19);
          }
          if (v23 == (uint64_t *)a3)
            v21 = v37;
        }
        else
        {
          v25 = v9 + 24 * v20;
          v28 = *(_QWORD *)(v25 + 8);
          v27 = (_QWORD *)(v25 + 8);
          v26 = v28;
          if (v28)
          {
            *v27 = 0;
            *(_DWORD *)(v9 + 24 * v20 + 16) = 0;
            WTF::fastFree(v26, v13, v14, v15, v16, v17, v18, v19);
          }
        }
      }
      ++v20;
    }
    while (v20 != v22);
  }
  else
  {
    v21 = 0;
    result = 0;
    if (!v9)
      return result;
  }
  WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
  return v21;
}

uint64_t WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 3)
  {
    v16 = (_OWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 2;
    goto LABEL_12;
  }
  if (!(v14 >> 28))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      v18 = (__int128 *)v10;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 16;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;

  v8 = *(unsigned int *)(result + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 <= v8)
    return 1;
  v12 = result;
  v13 = *(_QWORD *)result;
  v14 = *(unsigned int *)(result + 12);
  if (v11 < 3)
  {
    v15 = (_OWORD *)(result + 16);
    *(_QWORD *)v12 = v12 + 16;
    *(_DWORD *)(v12 + 8) = 2;
    goto LABEL_11;
  }
  if (!(v11 >> 28))
  {
    v15 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v11));
    *(_DWORD *)(v12 + 8) = v11;
    *(_QWORD *)v12 = v15;
LABEL_11:
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      v17 = (__int128 *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 16;
      }
      while (v16);
    }
    if (v12 + 16 != v13 && v13)
    {
      if (*(_QWORD *)v12 == v13)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v8 = a2;
  v9 = result;
  v10 = *(_QWORD *)result;
  v11 = *(unsigned int *)(result + 12);
  if (a2 < 3)
  {
    v12 = (_OWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 2;
    goto LABEL_5;
  }
  if (!(a2 >> 28))
  {
    v12 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v9 + 8) = v8;
    *(_QWORD *)v9 = v12;
LABEL_5:
    if ((_DWORD)v11)
    {
      v13 = 16 * v11;
      v14 = (__int128 *)v10;
      do
      {
        v15 = *v14++;
        *v12++ = v15;
        v13 -= 16;
      }
      while (v13);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::VectorBuffer<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  if (a2 < 3)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 2;
    return 1;
  }
  v3 = a2;
  if (!(a2 >> 28))
  {
    v4 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _OWORD *v26;
  unint64_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(unsigned int *)(a1 + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(_QWORD *)a1;
  if (v8 > v4)
  {
    if (v8 >= 0x7C1F08)
      goto LABEL_62;
    v10 = 528 * v8;
    v18 = WTF::fastMalloc((WTF *)(528 * v8));
    *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF0) / 0x210;
    *(_QWORD *)a1 = v18;
    if ((_DWORD)v5)
    {
      v19 = v9 + 528 * v5;
      v20 = v9;
      do
      {
        v21 = v18 + 16;
        *(_QWORD *)v18 = v18 + 16;
        *(_QWORD *)(v18 + 8) = 4;
        v23 = v20 + 16;
        v22 = *(_QWORD *)v20;
        if (*(_QWORD *)v20 == v20 + 16)
        {
          v24 = *(unsigned int *)(v20 + 12);
          if ((_DWORD)v24)
          {
            v25 = v22 + (v24 << 7);
            do
            {
              v26 = (_OWORD *)(v21 + 16);
              *(_QWORD *)v21 = v21 + 16;
              *(_QWORD *)(v21 + 8) = 3;
              v27 = v22 + 16;
              v28 = *(__int128 **)v22;
              if (*(_QWORD *)v22 == v22 + 16)
              {
                v29 = *(unsigned int *)(v22 + 12);
                if ((_DWORD)v29)
                {
                  v30 = 32 * v29;
                  do
                  {
                    v31 = *v28;
                    v32 = v28[1];
                    v28 += 2;
                    *v26 = v31;
                    v26[1] = v32;
                    v26 += 2;
                    v30 -= 32;
                  }
                  while (v30);
                }
              }
              else
              {
                *(_QWORD *)v22 = v27;
                *(_QWORD *)v21 = v28;
                v36 = *(_DWORD *)(v22 + 8);
                *(_DWORD *)(v22 + 8) = 3;
                *(_DWORD *)(v21 + 8) = v36;
              }
              v33 = *(_DWORD *)(v22 + 12);
              *(_DWORD *)(v22 + 12) = 0;
              *(_DWORD *)(v21 + 12) = v33;
              v34 = *(_QWORD *)(v22 + 112);
              *(_DWORD *)(v21 + 119) = *(_DWORD *)(v22 + 119);
              *(_QWORD *)(v21 + 112) = v34;
              v35 = *(_QWORD *)v22;
              if (v27 != *(_QWORD *)v22 && v35)
              {
                *(_QWORD *)v22 = 0;
                *(_DWORD *)(v22 + 8) = 0;
                WTF::fastFree(v35, v11, v12, v13, v14, v15, v16, v17);
              }
              v21 += 128;
              v22 += 128;
            }
            while (v22 != v25);
          }
        }
        else
        {
          *(_QWORD *)v20 = v23;
          *(_QWORD *)v18 = v22;
          v49 = *(_DWORD *)(v20 + 8);
          *(_DWORD *)(v20 + 8) = 4;
          *(_DWORD *)(v18 + 8) = v49;
        }
        v37 = *(_DWORD *)(v20 + 12);
        *(_DWORD *)(v20 + 12) = 0;
        *(_DWORD *)(v18 + 12) = v37;
        v38 = *(unsigned int *)(v20 + 12);
        v39 = *(_QWORD *)v20;
        if ((_DWORD)v38)
        {
          v40 = v38 << 7;
          v41 = v39 + 16;
          do
          {
            v42 = *(_QWORD *)(v41 - 16);
            if (v41 != v42 && v42 != 0)
            {
              *(_QWORD *)(v41 - 16) = 0;
              *(_DWORD *)(v41 - 8) = 0;
              WTF::fastFree(v42, v11, v12, v13, v14, v15, v16, v17);
            }
            v41 += 128;
            v40 -= 128;
          }
          while (v40);
          v39 = *(_QWORD *)v20;
        }
        if (v23 != v39 && v39 != 0)
        {
          *(_QWORD *)v20 = 0;
          *(_DWORD *)(v20 + 8) = 0;
          WTF::fastFree(v39, v11, v12, v13, v14, v15, v16, v17);
        }
        v18 += 528;
        v20 += 528;
      }
      while (v20 != v19);
      v18 = *(_QWORD *)a1;
    }
    if (v9)
    {
      if (v18 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
      v9 = *(_QWORD *)a1;
    }
    else
    {
      v9 = v18;
    }
  }
  v45 = v9 + 528 * *(unsigned int *)(a1 + 12);
  v46 = *((unsigned int *)a2 + 3);
  v47 = v45 + 16;
  *(_QWORD *)v45 = v45 + 16;
  *(_DWORD *)(v45 + 8) = 4;
  *(_DWORD *)(v45 + 12) = v46;
  if (v46 < 5)
    goto LABEL_45;
  if (v46 >> 25)
  {
LABEL_62:
    __break(0xC471u);
    JUMPOUT(0x197FBB9B8);
  }
  v47 = WTF::fastMalloc((WTF *)(v46 << 7));
  *(_DWORD *)(v45 + 8) = v46;
  *(_QWORD *)v45 = v47;
LABEL_45:
  v48 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v48)
  {
    v50 = *a2;
    v51 = *a2 + (v48 << 7);
    do
    {
      v52 = *(unsigned int *)(v50 + 12);
      v53 = (_OWORD *)(v47 + 16);
      *(_QWORD *)v47 = v47 + 16;
      *(_DWORD *)(v47 + 8) = 3;
      *(_DWORD *)(v47 + 12) = v52;
      if (v52 >= 4)
      {
        if (v52 >> 27)
        {
          __break(0xC471u);
          JUMPOUT(0x197FBB9C0);
        }
        v53 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v52));
        *(_DWORD *)(v47 + 8) = v52;
        *(_QWORD *)v47 = v53;
      }
      v54 = *(unsigned int *)(v50 + 12);
      if ((_DWORD)v54)
      {
        v55 = *(__int128 **)v50;
        v56 = 32 * v54;
        do
        {
          v57 = *v55;
          v58 = v55[1];
          v55 += 2;
          *v53 = v57;
          v53[1] = v58;
          v53 += 2;
          v56 -= 32;
        }
        while (v56);
      }
      v59 = *(_QWORD *)(v50 + 112);
      *(_DWORD *)(v47 + 119) = *(_DWORD *)(v50 + 119);
      *(_QWORD *)(v47 + 112) = v59;
      v47 += 128;
      v50 += 128;
    }
    while (v50 != v51);
  }
  ++*(_DWORD *)(a1 + 12);
}

uint64_t JSC::B3::Air::moveForType(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t result;

  if (a1 >= 0x80000000)
    v1 = 0x80000000;
  else
    v1 = a1;
  v2 = v1 - 1;
  if (v2 < 5)
    return aZklq[v2];
  result = 52;
  __break(0xC471u);
  return result;
}

unint64_t JSC::B3::`anonymous namespace'::LowerToAir::append(unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;

  v8 = *(_DWORD *)(result + 364);
  if (v8)
  {
    v9 = a2;
    v10 = *(_QWORD *)(result + 352) + 528 * v8 - 528;
    v12 = *(_DWORD *)(*(_QWORD *)(result + 352) + 528 * v8 - 520);
    v11 = *(unsigned int *)(*(_QWORD *)(result + 352) + 528 * v8 - 516);
    if ((_DWORD)v11 == v12)
    {
      result = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, a2, a4, a5, a6, a7, a8);
      v9 = result;
      v11 = *(unsigned int *)(v10 + 12);
      v13 = *(_QWORD *)v10;
      v14 = *(_QWORD *)v10 + (v11 << 7);
      v25 = (_OWORD *)(v14 + 16);
      *(_QWORD *)v14 = v14 + 16;
      *(_QWORD *)(v14 + 8) = 3;
      v17 = result + 16;
      v16 = *(__int128 **)result;
      if (*(_QWORD *)result == result + 16)
      {
        v26 = *(unsigned int *)(result + 12);
        if ((_DWORD)v26)
        {
          v27 = 32 * v26;
          do
          {
            v28 = *v16;
            v29 = v16[1];
            v16 += 2;
            *v25 = v28;
            v25[1] = v29;
            v25 += 2;
            v27 -= 32;
          }
          while (v27);
        }
        goto LABEL_7;
      }
    }
    else
    {
      v13 = *(_QWORD *)v10;
      v14 = *(_QWORD *)v10 + (v11 << 7);
      v15 = (_OWORD *)(v14 + 16);
      *(_QWORD *)v14 = v14 + 16;
      *(_QWORD *)(v14 + 8) = 3;
      v17 = a2 + 16;
      v16 = *(__int128 **)a2;
      if (*(_QWORD *)a2 == a2 + 16)
      {
        v18 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v18)
        {
          v19 = 32 * v18;
          do
          {
            v20 = *v16;
            v21 = v16[1];
            v16 += 2;
            *v15 = v20;
            v15[1] = v21;
            v15 += 2;
            v19 -= 32;
          }
          while (v19);
        }
        goto LABEL_7;
      }
    }
    *(_QWORD *)v9 = v17;
    *(_QWORD *)v14 = v16;
    v30 = *(_DWORD *)(v9 + 8);
    *(_DWORD *)(v9 + 8) = 3;
    *(_DWORD *)(v14 + 8) = v30;
LABEL_7:
    v22 = *(_DWORD *)(v9 + 12);
    *(_DWORD *)(v9 + 12) = 0;
    *(_DWORD *)(v14 + 12) = v22;
    v23 = v13 + (v11 << 7) + 112;
    v24 = *(_QWORD *)(v9 + 112);
    *(_DWORD *)(v23 + 7) = *(_DWORD *)(v9 + 119);
    *(_QWORD *)v23 = v24;
    ++*(_DWORD *)(v10 + 12);
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::addr(uint64_t result, JSC::B3::_anonymous_namespace_::LowerToAir *a2, JSC::B3::MemoryValue *this, int a4)
{
  uint64_t v4;
  int v6;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  JSC::B3::_anonymous_namespace_::LowerToAir *v27;
  JSC::B3::_anonymous_namespace_::LowerToAir *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  JSC::B3::_anonymous_namespace_::LowerToAir *v32;
  JSC::B3::_anonymous_namespace_::LowerToAir *v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  JSC::B3::_anonymous_namespace_::LowerToAir *v39;
  JSC::B3::_anonymous_namespace_::LowerToAir *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  JSC::B3::_anonymous_namespace_::LowerToAir *v45;
  JSC::B3::_anonymous_namespace_::LowerToAir *v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  JSC::B3::_anonymous_namespace_::LowerToAir *v51;
  unsigned int *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  JSC::B3::_anonymous_namespace_::LowerToAir *v57;
  JSC::B3::_anonymous_namespace_::LowerToAir *v58;
  char v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  JSC::B3::Value *v65;
  JSC::B3::_anonymous_namespace_::LowerToAir *v66;
  uint64_t v67;
  int v68;
  JSC::B3::Value *v69[3];
  char v70;
  int v71;

  v4 = result;
  if (!this || (v6 = *((unsigned __int8 *)this + 12), (v6 - 79) <= 0xFFFFFFEF))
  {
    *(_QWORD *)result = 0;
    *(_WORD *)(result + 8) = 512;
    *(_DWORD *)(result + 12) = 1;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    return result;
  }
  if (*((_DWORD *)this + 13) != *((_DWORD *)this + 14) || (v6 - 71) <= 7)
  {
    v65 = *(JSC::B3::Value **)JSC::B3::MemoryValue::lastChild(this);
    v66 = a2;
LABEL_114:
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_BYTE *)(v4 + 24) = 0;
    *(_WORD *)(v4 + 8) = 518;
    *(_DWORD *)(v4 + 12) = 1;
    *(_DWORD *)(v4 + 16) = result;
    return result;
  }
  LOBYTE(v10) = 0;
  v11 = *((_DWORD *)this + 10);
  switch(*((_BYTE *)this + 12))
  {
    case '?':
    case '@':
    case 'D':
      break;
    case 'A':
    case 'B':
    case 'E':
      LOBYTE(v10) = 1;
      break;
    case 'C':
      v13 = *((_DWORD *)this + 4);
      if (v13 >= 0x80000000)
        v13 = 0x80000000;
      v14 = v13 >= 6;
      v15 = 0x40302030200uLL >> (8 * v13);
      if (v14)
        LOBYTE(v10) = 0;
      else
        LOBYTE(v10) = v15;
      break;
    case 'F':
      LOBYTE(v10) = 0;
      v12 = *(_DWORD *)(JSC::B3::MemoryValue::child(this, 0) + 16);
      if (v12 >= 0x80000000)
        v12 = 0x80000000;
      if (v12 < 6)
        v10 = 0x40302030200uLL >> (8 * v12);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FBC1DCLL);
  }
  if (a4 == 1)
  {
    v16 = *(_QWORD *)JSC::B3::MemoryValue::lastChild(this);
    if (!v11)
    {
      v66 = a2;
      v65 = (JSC::B3::Value *)v16;
      goto LABEL_114;
    }
  }
  else
  {
    v16 = *(_QWORD *)JSC::B3::MemoryValue::lastChild(this);
  }
  v71 = v11;
  v70 = v10;
  if (*(_DWORD *)(*((_QWORD *)a2 + 10) + 8 * *(unsigned int *)(v16 + 8)) >= 0xBu)
    goto LABEL_29;
  v17 = *(_WORD *)(v16 + 12);
  if (v17 <= 0xDu)
  {
    if (v17 == 13)
    {
      *(_QWORD *)(v4 + 16) = 0;
      *(_BYTE *)(v4 + 24) = 0;
      *(_WORD *)(v4 + 8) = 519;
      *(_QWORD *)(v4 + 12) = 0x1E00000001;
      goto LABEL_30;
    }
    if (v17 == 11)
    {
      if ((v17 & 0xFFF) == 0xB)
        v62 = v16;
      else
        v62 = 0;
      v63 = *(_QWORD *)(v62 + 40);
      *(_QWORD *)(v4 + 16) = 0;
      *(_BYTE *)(v4 + 24) = 0;
      *(_WORD *)(v4 + 8) = 521;
      *(_QWORD *)v4 = v63;
      *(_DWORD *)(v4 + 12) = v11;
      goto LABEL_31;
    }
LABEL_29:
    *(_QWORD *)(v4 + 16) = 0;
    *(_BYTE *)(v4 + 24) = 0;
    *(_WORD *)(v4 + 8) = 519;
    *(_DWORD *)(v4 + 12) = 1;
    *(_DWORD *)(v4 + 16) = v20;
LABEL_30:
    *(_QWORD *)v4 = v11;
    goto LABEL_31;
  }
  if (v17 != 14)
  {
    if (v17 == 80)
    {
      if ((v17 & 0xFFF) == 0x50)
        v53 = v16;
      else
        v53 = 0;
      if (!v11)
      {
        v52 = *(unsigned int **)(v53 + 48);
        if (!v52
          || ((v54 = v52[2], v55 = (unint64_t *)(2 * *(_QWORD *)a2),
                             (*(_QWORD *)a2 & 0x8000000000000000) != 0)
            ? (v56 = 63)
            : (v56 = *v55),
              v56 <= v54
           || ((v57 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v55 + 1), *(uint64_t *)a2 >= 0)
             ? (v58 = v57)
             : (v58 = a2),
               ((*(_QWORD *)((char *)v58 + ((v54 >> 3) & 0x1FFFFFF8)) >> v54) & 1) == 0)))
        {
          v59 = *(_BYTE *)(v53 + 40);
          v60 = v59 & 0x7F;
          if ((v59 & 0x60) != 0)
            v61 = (char)(31 - (v59 & 0x7F));
          else
            v61 = v60 + 1;
          if (v60 == 127)
            v61 = 0;
          v49 = v61;
          v50 = v4;
          v51 = a2;
          v48 = 0;
          goto LABEL_99;
        }
      }
    }
    else if (v17 == 25)
    {
      v69[0] = *(JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v16, 0);
      if ((WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)a2, (uint64_t)v69) & 1) == 0)
      {
        v67 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v16, 1u);
        if (v67)
        {
          if ((*(_WORD *)(v67 + 12) & 0xFFF) == 3 && *(_DWORD *)(v67 + 40) == 1 && !v71)
          {
            v52 = (unsigned int *)v69[0];
            v48 = v71;
            v49 = v68;
            v50 = v4;
            v51 = a2;
            goto LABEL_99;
          }
        }
      }
      v19 = v71;
      *(_DWORD *)(v4 + 12) = 1;
      *(_QWORD *)(v4 + 16) = 0;
      *(_BYTE *)(v4 + 24) = 0;
      *(_WORD *)(v4 + 8) = 519;
      goto LABEL_109;
    }
    goto LABEL_29;
  }
  v21 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v16, 0);
  v22 = *(unsigned int **)JSC::B3::Value::child((JSC::B3::Value *)v16, 1u);
  v69[0] = (JSC::B3::Value *)&v71;
  v69[1] = (JSC::B3::Value *)&v70;
  v69[2] = a2;
  if (!*(_QWORD *)v4 && !*(_BYTE *)(v4 + 8))
  {
    v23 = (_QWORD *)(v4 + 16);
    if (!*(_DWORD *)(v4 + 16) && !*(_DWORD *)(v4 + 20) && *(_DWORD *)(v4 + 12) == 1)
    {
      if (!*(_QWORD *)v4
        && !*(_BYTE *)(v4 + 8)
        && !*(_DWORD *)v23
        && !*(_DWORD *)(v4 + 20)
        && *(_DWORD *)(v4 + 12) == 1)
      {
        if (v21)
        {
          v24 = *(unsigned int *)(v21 + 8);
          v25 = (_QWORD *)(2 * *(_QWORD *)a2);
          v26 = (*(_QWORD *)a2 & 0x8000000000000000) != 0 ? 63 : *v25;
          if (v26 > v24)
          {
            v27 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v25 + 1);
            v28 = *(uint64_t *)a2 >= 0 ? v27 : a2;
            if (((*(_QWORD *)((char *)v28 + ((v24 >> 3) & 0x1FFFFFF8)) >> v24) & 1) != 0)
              goto LABEL_108;
          }
        }
        if (v22
          && ((v29 = v22[2], v30 = (unint64_t *)(2 * *(_QWORD *)a2),
                             (*(_QWORD *)a2 & 0x8000000000000000) != 0)
            ? (v31 = 63)
            : (v31 = *v30),
              v31 > v29
           && ((v32 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v30 + 1), *(uint64_t *)a2 >= 0)
             ? (v33 = v32)
             : (v33 = a2),
               ((*(_QWORD *)((char *)v33 + ((v29 >> 3) & 0x1FFFFFF8)) >> v29) & 1) != 0))
          || v71)
        {
LABEL_108:
          v19 = v71;
          *v23 = 0;
          *(_BYTE *)(v4 + 24) = 0;
          *(_WORD *)(v4 + 8) = 519;
          *(_DWORD *)(v4 + 12) = 1;
LABEL_109:
          *(_DWORD *)(v4 + 16) = v18;
          *(_QWORD *)v4 = v19;
          goto LABEL_31;
        }
        v34 = *(unsigned __int8 *)(v21 + 12);
        if (v34 == 43)
        {
          v35 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v21, 0);
          if (!v35)
            goto LABEL_112;
          v36 = *(unsigned int *)(v35 + 8);
          v37 = (_QWORD *)(2 * *(_QWORD *)a2);
          v38 = (*(_QWORD *)a2 & 0x8000000000000000) != 0 ? 63 : *v37;
          if (v38 <= v36)
            goto LABEL_112;
          v39 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v37 + 1);
          v40 = *(uint64_t *)a2 >= 0 ? v39 : a2;
          if (((*(_QWORD *)((char *)v40 + ((v36 >> 3) & 0x1FFFFFF8)) >> v36) & 1) == 0)
            goto LABEL_112;
          v34 = *(unsigned __int8 *)(v21 + 12);
        }
        if (v34 != 42
          || (v41 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v21, 0)) != 0
          && ((v42 = *(unsigned int *)(v41 + 8),
               v43 = (unint64_t *)(2 * *(_QWORD *)a2),
               (*(_QWORD *)a2 & 0x8000000000000000) != 0)
            ? (v44 = 63)
            : (v44 = *v43),
              v44 > v42
           && ((v45 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v43 + 1), *(uint64_t *)a2 >= 0)
             ? (v46 = v45)
             : (v46 = a2),
               ((*(_QWORD *)((char *)v46 + ((v42 >> 3) & 0x1FFFFFF8)) >> v42) & 1) != 0)))
        {
          v48 = v71;
          v49 = v47;
          v50 = v4;
          v51 = a2;
          v52 = v22;
LABEL_99:
          goto LABEL_31;
        }
LABEL_112:
        v48 = v71;
        v49 = v64;
        v50 = v4;
        v51 = a2;
        v52 = (unsigned int *)v21;
        goto LABEL_99;
      }
    }
  }
LABEL_31:
  result = JSC::B3::Air::Arg::isValidForm((unsigned int *)v4, 90, v10 | 0x100u);
  if ((result & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x197FBC0F4);
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::tmp(JSC::B3::_anonymous_namespace_::LowerToAir *this, JSC::B3::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  int v28;
  unsigned __int8 v29[4];
  int32x4_t v30;
  int v31;

  v3 = *((unsigned int *)a2 + 2);
  v4 = *((_QWORD *)this + 1);
  result = *(unsigned int *)(v4 + 4 * v3);
  if (!(_DWORD)result)
  {
    while (1)
    {
      v6 = *((unsigned __int8 *)a2 + 12);
      if (v6 > 0x2B)
      {
        if (v6 != 44 && (v6 != 90 || *((_BYTE *)a2 + 41) || (*((_BYTE *)a2 + 40) & 0x3Fu) - 5 > 1))
        {
LABEL_8:
          v7 = *((unsigned int *)a2 + 2);
          v8 = *((_QWORD *)this + 1);
          result = *(unsigned int *)(v8 + 4 * v7);
          if ((_DWORD)result)
          {
LABEL_22:
            *(_DWORD *)(v4 + 4 * v3) = result;
            return result;
          }
          v9 = *((_QWORD *)this + 54);
          v10 = *((_DWORD *)a2 + 4);
          if (v10 >= 0x80000000)
            v10 = 0x80000000;
          if (v10 - 3 < 3)
          {
            v18 = *(_DWORD *)(v9 + 180);
            *(_DWORD *)(v9 + 180) = v18 + 1;
            v12 = -33 - v18;
          }
          else
          {
            v11 = *(_DWORD *)(v9 + 176);
            *(_DWORD *)(v9 + 176) = v11 + 1;
            v12 = v11 + 33;
          }
          *(_DWORD *)(v8 + 4 * v7) = v12;
          v13 = *((_QWORD *)this + 53);
          JSC::B3::Value::key((uint64_t)a2, (uint64_t)v29);
          if (v29[0]
            || v29[1] != 159
            || (v29[2] & 0xF) != 0
            || ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_19914F6D0, (int8x16_t)vceqzq_s32(v30))) & 0xF) == 0
              ? (v14 = v31 == 0)
              : (v14 = 0),
                !v14))
          {
            v16 = *(_QWORD *)(v13 + 136);
            v15 = (uint64_t *)(v13 + 136);
            if (v16)
            {
              v17 = WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::ValueKey>,WTF::DefaultHash<JSC::B3::ValueKey>>,JSC::B3::ValueKey>(v15, v29);
              result = *(unsigned int *)(v8 + 4 * v7);
              if (!v17)
                goto LABEL_22;
              v19 = (unsigned int *)*((_QWORD *)this + 54);
              v20 = v19 + 38;
              v21 = v19[39];
              if (v21 == 2)
              {
                v22 = *v20;
                if (*v20)
                {
                  v23 = *v20;
                  v24 = (int *)(v19 + 40);
                  v25 = v23;
                  while (1)
                  {
                    v26 = *v24++;
                    if (v26 == (_DWORD)result)
                      break;
                    if (!--v25)
                    {
                      if (v22 <= 1)
                        goto LABEL_28;
                      v28 = *(_DWORD *)(v8 + 4 * v7);
                      WTF::SmallSet<JSC::B3::Air::Tmp,JSC::B3::Air::TmpHash,2u>::grow((uint64_t)(v19 + 38), 0x40u);
                      v21 = v19[39];
                      goto LABEL_40;
                    }
                  }
                }
                else
                {
                  v23 = 0;
LABEL_28:
                  v19[v23 + 40] = result;
LABEL_29:
                  *v20 = v22 + 1;
                }
              }
              else
              {
                v28 = *(_DWORD *)(v8 + 4 * v7);
LABEL_40:
                if (3 * v21 <= 4 * *v20)
                  WTF::SmallSet<JSC::B3::Air::Tmp,JSC::B3::Air::TmpHash,2u>::grow((uint64_t)(v19 + 38), 2 * v21);
                v27 = (_DWORD *)WTF::SmallSet<JSC::B3::Air::Tmp,JSC::B3::Air::TmpHash,2u>::bucket((uint64_t)(v19 + 38), v28);
                if (*v27 != v28)
                {
                  *v27 = v28;
                  v22 = *v20;
                  goto LABEL_29;
                }
              }
            }
          }
          result = *(unsigned int *)(v8 + 4 * v7);
          goto LABEL_22;
        }
      }
      else
      {
        if (v6 == 13)
          return 30;
        if (v6 - 1 >= 2)
          goto LABEL_8;
      }
      a2 = *(JSC::B3::Value **)JSC::B3::Value::child(a2, 0);
    }
  }
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendBinOp<(JSC::B3::Air::Opcode)1,(JSC::B3::Air::Opcode)6,(JSC::B3::Air::Opcode)7,(JSC::B3::Air::Opcode)8,(JSC::B3::Commutativity)0>(JSC::B3::Value **this, unsigned int *a2, uint64_t a3)
{
  __int16 v3;
  unsigned int v4;
  JSC::B3::Value *v6;
  JSC::B3::_anonymous_namespace_::LowerToAir *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  BOOL v18;
  char v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  _BOOL4 v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  char v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  __int128 v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  JSC::B3::Value *v68;
  uint64_t v69;
  BOOL v70;
  int v71;
  _BOOL4 v72;
  _BOOL4 v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  char v79;
  int v80;
  char v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  JSC::B3::_anonymous_namespace_::LowerToAir *v102;
  JSC::B3::Value *v103;
  unsigned __int16 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  unsigned int v138;
  __int16 v139;
  char v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int16 v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  unint64_t v158;
  unsigned __int16 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  JSC::B3::Value *v174;
  WTF::BitVector *v175;
  unint64_t v176;
  WTF::BitVector *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  int v185;
  WTF::BitVector *v186;
  unint64_t v187;
  WTF::BitVector *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  __int16 v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  unsigned int v203;
  _OWORD v204[2];
  _BYTE v205[48];
  uint64_t v206;
  __int16 v207;
  __int16 v208;
  int v209;
  uint64_t v210;
  char v211;
  JSC::B3::Value *v212[2];
  __int128 v213;
  _BYTE v214[25];
  uint64_t v215;
  __int16 v216;
  __int16 v217;
  int v218;
  int v219;
  int v220;
  char v221;
  uint64_t v222;
  __int16 v223;
  int v224;
  int v225;
  int v226;
  char v227;
  _BYTE v228[12];

  if (a2[4] >= 0x80000000)
    v4 = 0x80000000;
  else
    v4 = a2[4];
  v6 = (JSC::B3::Value *)a2;
  v7 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
  v8 = 7;
  v9 = 1;
  switch(v4)
  {
    case 1u:
      goto LABEL_6;
    case 2u:
      v4 = 6;
      v9 = 6;
LABEL_6:
      v16 = *(_WORD *)(a3 + 12);
      v17 = v16 & 0xFFF;
      if (a3)
        v18 = v17 == 3;
      else
        v18 = 0;
      v19 = v18;
      if (v18)
      {
        v47 = *(_DWORD *)(a3 + 40);
        v48 = v47;
LABEL_45:
        if ((unint64_t)(v48 + 4095) >= 0x1FFF
          && ((v48 & 0xFFF) != 0 || (unint64_t)v48 >> 24 && (unint64_t)((v48 >> 12) + 4095) > 0xFFF))
        {
          goto LABEL_15;
        }
        if ((v19 & 1) != 0)
        {
          v49 = v47;
        }
        else
        {
          v49 = 0;
          v50 = 0;
          if (!a3 || v17 != 4)
            goto LABEL_52;
          v49 = *(_QWORD *)(a3 + 40);
        }
        if ((unint64_t)(v49 + 4095) < 0x1FFF)
        {
          v50 = 2;
        }
        else if ((v49 & 0xFFF) != 0
               || (v50 = 2, (unint64_t)v49 >> 24) && (unint64_t)((v49 >> 12) + 4095) >= 0x1000)
        {
          v50 = 0;
          v49 = 0;
        }
LABEL_52:
        LOBYTE(v207) = 0;
        v206 = 0;
        v52 = *((_DWORD *)v7 + 91);
        if (!v52)
        {
          __break(0xC471u);
          JUMPOUT(0x197FBD394);
        }
        v53 = v51;
        v54 = *((_QWORD *)v7 + 50);
        v55 = *((_QWORD *)v7 + 44) + 528 * v52 - 528;
        *(_QWORD *)v214 = v49;
        v214[8] = v50;
        v214[9] = 2;
        *(_DWORD *)&v214[12] = 1;
        *(_QWORD *)&v214[16] = v206;
        v214[24] = v207;
        *(_QWORD *)&v213 = v214;
        v215 = 0;
        v216 = 513;
        v218 = 1;
        v219 = v53;
        v220 = 0;
        v221 = 0;
        v222 = 0;
        v223 = 513;
        v224 = 1;
        v225 = v15;
        v226 = 0;
        v227 = 0;
        *((_QWORD *)&v213 + 1) = 0x300000003;
        *(_QWORD *)v228 = v54;
        *(_DWORD *)&v228[8] = v9;
        v56 = *(unsigned int *)(v55 + 12);
        if ((_DWORD)v56 == *(_DWORD *)(v55 + 8))
        {
          WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v55, (unint64_t)&v213, v40, v41, v42, v43, v44, v45);
        }
        else
        {
          v57 = *(_QWORD *)v55;
          v58 = *(_QWORD *)v55 + (v56 << 7);
          v59 = (_OWORD *)(v58 + 16);
          *(_QWORD *)v58 = v58 + 16;
          *(_QWORD *)(v58 + 8) = 3;
          v60 = v213;
          if ((_BYTE *)v213 == v214)
          {
            if (HIDWORD(v213))
            {
              v61 = 32 * HIDWORD(v213);
              v62 = (__int128 *)v214;
              do
              {
                v63 = *v62;
                v64 = v62[1];
                v62 += 2;
                *v59 = v63;
                v59[1] = v64;
                v59 += 2;
                v61 -= 32;
              }
              while (v61);
            }
          }
          else
          {
            *(_QWORD *)&v213 = v214;
            *(_QWORD *)v58 = v60;
            *(_DWORD *)(v58 + 8) = DWORD2(v213);
          }
          v65 = HIDWORD(v213);
          HIDWORD(v213) = 0;
          *(_DWORD *)(v58 + 12) = v65;
          v66 = v57 + (v56 << 7);
          v67 = *(_QWORD *)v228;
          *(_DWORD *)(v66 + 119) = *(_DWORD *)&v228[7];
          *(_QWORD *)(v66 + 112) = v67;
          ++*(_DWORD *)(v55 + 12);
        }
        v46 = v213;
        if (v214 == (_BYTE *)v213)
          return;
LABEL_41:
        if (v46)
        {
          *(_QWORD *)&v213 = 0;
          DWORD2(v213) = 0;
          WTF::fastFree(v46, v39, v40, v41, v42, v43, v44, v45);
        }
        return;
      }
      if (a3 && v17 == 4)
      {
        v48 = *(_QWORD *)(a3 + 40);
        v47 = v48;
        goto LABEL_45;
      }
LABEL_15:
      if (v6 == (JSC::B3::Value *)a3)
        goto LABEL_112;
      if (*((_BYTE *)v6 + 12) == 67)
      {
        v21 = v206;
        v20 = v207;
      }
      else
      {
        v20 = 0;
        v21 = 0;
        v206 = 0;
        v207 = 512;
        v209 = 1;
        v210 = 0;
        v211 = 0;
        memset(v212, 0, 11);
      }
      if (v21)
        v22 = 0;
      else
        v22 = v20 == 0;
      v23 = v22;
      v24 = v20;
      if (v22)
      {
        v24 = 0;
        if (!v210 && v209 == 1)
          v24 = v212[0] != 0;
      }
      if (v4 == 6 || v4 == 1)
      {
        if ((v24 - 1) >= 2)
          goto LABEL_66;
LABEL_31:
        v202 = v15;
        v26 = v209;
        v25 = v210;
        if ((_DWORD)v210)
          v23 = 0;
        v27 = HIDWORD(v210);
        v199 = v21;
        if (v23 == 1 && !HIDWORD(v210) && v209 == 1)
        {
          if (v212[0])
          {
            v28 = v9;
            v29 = 0;
            v27 = 0;
            v26 = 1;
            v30 = 2;
            LOBYTE(v20) = 1;
            goto LABEL_40;
          }
        }
        else if (v212[0])
        {
          v170 = *((unsigned int *)v212[0] + 2);
          v171 = *(_QWORD *)v7;
          if ((*(_QWORD *)v7 & 0x8000000000000000) != 0)
            v172 = 63;
          else
            v172 = *(_QWORD *)(2 * v171);
          if (v172 <= v170)
          {
            WTF::BitVector::resizeOutOfLine(v7, v170 + 1, 0);
            v171 = *(_QWORD *)v7;
          }
          if (v171 >= 0)
            v173 = 2 * v171 + 8;
          else
            v173 = (uint64_t)v7;
          *(_QWORD *)(v173 + ((v170 >> 3) & 0x1FFFFFF8)) |= 1 << v170;
        }
        v28 = v9;
        v30 = HIBYTE(v207);
        v3 = v208;
        v29 = v211;
LABEL_40:
        v32 = *((_QWORD *)v7 + 50);
        *(_QWORD *)v214 = v199;
        v214[8] = v20;
        v214[9] = v30;
        *(_WORD *)&v214[10] = v3;
        *(_DWORD *)&v214[12] = v26;
        *(_DWORD *)&v214[16] = v25;
        *(_DWORD *)&v214[20] = v27;
        v214[24] = v29;
        *(_QWORD *)&v213 = v214;
        v215 = 0;
        v216 = 513;
        v218 = 1;
        v219 = v31;
        v220 = 0;
        v221 = 0;
        v222 = 0;
        v223 = 513;
        v224 = 1;
        v225 = v202;
        v226 = 0;
        v227 = 0;
        *((_QWORD *)&v213 + 1) = 0x300000003;
        *(_QWORD *)v228 = v32;
        *(_DWORD *)&v228[8] = v28;
        v228[10] = BYTE2(v212[1]);
        v46 = v213;
        if (v214 == (_BYTE *)v213)
          return;
        goto LABEL_41;
      }
      if ((v4 == 7 || v4 == 8) && v24)
        goto LABEL_31;
LABEL_66:
      if (v23)
      {
        LOBYTE(v20) = 0;
        if (!v210 && v209 == 1)
          LOBYTE(v20) = v212[0] != 0;
      }
      if (v4 != 6)
      {
        if (v4 != 1 || ((char)v20 - 1) >= 2)
          goto LABEL_72;
        goto LABEL_120;
      }
      if (((char)v20 - 1) <= 1)
      {
LABEL_120:
        v104 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*((_QWORD *)v7 + 50) + 16));
        v110 = *((_QWORD *)v7 + 50);
        *(_OWORD *)v214 = *(_OWORD *)v205;
        *(_OWORD *)&v214[9] = *(_OWORD *)&v205[9];
        *(_QWORD *)&v213 = v214;
        v215 = 0;
        v216 = 513;
        v218 = 1;
        v219 = v15;
        v220 = 0;
        v221 = 0;
        *((_QWORD *)&v213 + 1) = 0x200000003;
        *(_QWORD *)v228 = v110;
        *(_DWORD *)&v228[8] = v9;
        v228[10] = BYTE2(v212[1]);
        v46 = v213;
        if (v214 == (_BYTE *)v213)
          return;
        goto LABEL_41;
      }
LABEL_72:
      v198 = v9;
      if (*(_BYTE *)(a3 + 12) == 67)
      {
        v69 = *(_QWORD *)v205;
        LODWORD(v68) = v205[8];
      }
      else
      {
        LODWORD(v68) = 0;
        v69 = 0;
        *(_QWORD *)v205 = 0;
        *(_WORD *)&v205[8] = 512;
        *(_DWORD *)&v205[12] = 1;
        *(_QWORD *)&v205[16] = 0;
        v205[24] = 0;
        memset(&v205[32], 0, 11);
      }
      if (v69)
        v70 = 0;
      else
        v70 = (_DWORD)v68 == 0;
      v71 = v70;
      v72 = (int)v68;
      if (v70)
      {
        v72 = 0;
        if (!*(_QWORD *)&v205[16] && *(_DWORD *)&v205[12] == 1)
          v72 = *(_QWORD *)&v205[32] != 0;
      }
      switch(v4)
      {
        case 1u:
        case 6u:
        case 7u:
        case 8u:
          if (!v72)
            goto LABEL_86;
          v205[40] = 1;
          v135 = *(_DWORD *)&v205[12];
          v134 = *(_DWORD *)&v205[16];
          if (*(_DWORD *)&v205[16])
            v136 = 0;
          else
            v136 = v71;
          v137 = *(_DWORD *)&v205[20];
          if (v136 == 1 && !*(_DWORD *)&v205[20] && *(_DWORD *)&v205[12] == 1)
          {
            if (*(_QWORD *)&v205[32])
            {
              v138 = v133;
              v133 = v138;
              v140 = 0;
              v137 = 0;
              v135 = 1;
              v141 = 2;
              LOBYTE(v68) = 1;
LABEL_169:
              v155 = *((_QWORD *)v7 + 50);
              *(_QWORD *)&v213 = v214;
              *(_QWORD *)v214 = 0;
              *(_WORD *)&v214[8] = 513;
              *(_DWORD *)&v214[12] = 1;
              *(_QWORD *)&v214[16] = v133;
              v214[24] = 0;
              v215 = v69;
              LOBYTE(v216) = (_BYTE)v68;
              HIBYTE(v216) = v141;
              v217 = v139;
              v218 = v135;
              v219 = v134;
              v220 = v137;
              v221 = v140;
              v222 = 0;
              v223 = 513;
              v224 = 1;
              v225 = v15;
              v226 = 0;
              v227 = 0;
              *((_QWORD *)&v213 + 1) = 0x300000003;
              *(_QWORD *)v228 = v155;
              v9 = v198;
              *(_DWORD *)&v228[8] = v198;
              v228[10] = v205[42];
              v205[41] = 1;
              goto LABEL_170;
            }
          }
          else if (*(_QWORD *)&v205[32])
          {
            v196 = v133;
            v201 = v69;
            v184 = (char)v68;
            v68 = v6;
            v185 = *(_DWORD *)&v205[16];
            v186 = v7;
            v187 = *(unsigned int *)(*(_QWORD *)&v205[32] + 8);
            v188 = v186;
            v189 = *(_QWORD *)v186;
            if (v189 < 0)
              v190 = 63;
            else
              v190 = *(_QWORD *)(2 * v189);
            if (v190 <= v187)
            {
              WTF::BitVector::resizeOutOfLine(v188, v187 + 1, 0);
              v189 = *(_QWORD *)v188;
            }
            if (v189 >= 0)
              v191 = 2 * v189 + 8;
            else
              v191 = (uint64_t)v188;
            v192 = (v187 >> 3) & 0x1FFFFFF8;
            v193 = 1 << v187;
            v7 = v188;
            *(_QWORD *)(v191 + v192) |= v193;
            v134 = v185;
            v6 = v68;
            LOBYTE(v68) = v184;
            v69 = v201;
            v133 = v196;
          }
          v141 = v205[9];
          v139 = *(_WORD *)&v205[10];
          v140 = v205[24];
          goto LABEL_169;
        default:
LABEL_86:
          v73 = (int)v68;
          if (v71)
          {
            v73 = 0;
            if (!*(_QWORD *)&v205[16] && *(_DWORD *)&v205[12] == 1)
              v73 = *(_QWORD *)&v205[32] != 0;
          }
          if (v4 != 6 && v4 != 1)
          {
            if (v4 != 7 && v4 != 8 || !v73)
              goto LABEL_132;
LABEL_92:
            v205[40] = 1;
            v75 = *(_DWORD *)&v205[12];
            v74 = *(_DWORD *)&v205[16];
            if (*(_DWORD *)&v205[16])
              v76 = 0;
            else
              v76 = v71;
            v77 = *(_DWORD *)&v205[20];
            v203 = v15;
            v200 = v69;
            if (v76 == 1 && !*(_DWORD *)&v205[20] && *(_DWORD *)&v205[12] == 1)
            {
              if (*(_QWORD *)&v205[32])
              {
                v79 = 0;
                v77 = 0;
                v80 = 1;
                v81 = 2;
                LOBYTE(v68) = 1;
                goto LABEL_102;
              }
            }
            else if (*(_QWORD *)&v205[32])
            {
              v174 = v6;
              v175 = v7;
              v176 = *(unsigned int *)(*(_QWORD *)&v205[32] + 8);
              v177 = v175;
              v178 = *(_QWORD *)v175;
              if (v178 < 0)
                v179 = 63;
              else
                v179 = *(_QWORD *)(2 * v178);
              if (v179 <= v176)
              {
                v197 = *(_DWORD *)&v205[16];
                v194 = *(_DWORD *)&v205[12];
                WTF::BitVector::resizeOutOfLine(v177, v176 + 1, 0);
                v75 = v194;
                v74 = v197;
                v178 = *(_QWORD *)v177;
              }
              if (v178 >= 0)
                v180 = 2 * v178 + 8;
              else
                v180 = (uint64_t)v177;
              v181 = (v176 >> 3) & 0x1FFFFFF8;
              v182 = 1 << v176;
              v7 = v177;
              *(_QWORD *)(v180 + v181) |= v182;
              v6 = v174;
            }
            v81 = v205[9];
            v195 = *(_WORD *)&v205[10];
            v79 = v205[24];
            v78 = v74;
            v80 = v75;
LABEL_102:
            v83 = *((_QWORD *)v7 + 50);
            *(_QWORD *)v214 = v200;
            v214[8] = (_BYTE)v68;
            v214[9] = v81;
            *(_WORD *)&v214[10] = v195;
            *(_DWORD *)&v214[12] = v80;
            *(_DWORD *)&v214[16] = v78;
            *(_DWORD *)&v214[20] = v77;
            v214[24] = v79;
            *(_QWORD *)&v213 = v214;
            v215 = 0;
            v216 = 513;
            v218 = 1;
            v219 = v82;
            v220 = 0;
            v221 = 0;
            v222 = 0;
            v223 = 513;
            v224 = 1;
            v15 = v203;
            v225 = v203;
            v226 = 0;
            v227 = 0;
            *((_QWORD *)&v213 + 1) = 0x300000003;
            *(_QWORD *)v228 = v83;
            v9 = v198;
            *(_DWORD *)&v228[8] = v198;
            v228[10] = v205[42];
            v205[41] = 1;
            v92 = v213;
            if (v214 != (_BYTE *)v213 && (_QWORD)v213)
            {
              *(_QWORD *)&v213 = 0;
              DWORD2(v213) = 0;
              WTF::fastFree(v92, v90, v91, v10, v11, v12, v13, v14);
            }
            v93 = 0;
            goto LABEL_106;
          }
          if ((v73 - 1) < 2)
            goto LABEL_92;
LABEL_132:
          if (v71)
          {
            LOBYTE(v68) = 0;
            if (!*(_QWORD *)&v205[16] && *(_DWORD *)&v205[12] == 1)
              LOBYTE(v68) = *(_QWORD *)&v205[32] != 0;
          }
          v9 = v198;
          if (v4 == 6)
          {
            if (((char)v68 - 1) > 1)
            {
LABEL_138:
              v93 = 1;
              goto LABEL_106;
            }
          }
          else if (v4 != 1 || ((char)v68 - 1) >= 2)
          {
            goto LABEL_138;
          }
          v148 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*((_QWORD *)v7 + 50) + 16));
          v154 = *((_QWORD *)v7 + 50);
          *(_OWORD *)v214 = v204[0];
          *(_OWORD *)&v214[9] = *(_OWORD *)((char *)v204 + 9);
          *(_QWORD *)&v213 = v214;
          v215 = 0;
          v216 = 513;
          v218 = 1;
          v219 = v15;
          v220 = 0;
          v221 = 0;
          *((_QWORD *)&v213 + 1) = 0x200000003;
          *(_QWORD *)v228 = v154;
          *(_DWORD *)&v228[8] = v198;
          v228[10] = v205[42];
          v205[41] = 1;
LABEL_170:
          v158 = v213;
          if (v214 != (_BYTE *)v213 && (_QWORD)v213)
          {
            *(_QWORD *)&v213 = 0;
            DWORD2(v213) = 0;
            WTF::fastFree(v158, v156, v157, v10, v11, v12, v13, v14);
          }
          v93 = 0;
LABEL_106:
          if (v205[40] && !v205[41])
          {
            __break(0xC471u);
            JUMPOUT(0x197FBD320);
          }
          if (LOBYTE(v212[1]) && !BYTE1(v212[1]))
          {
            __break(0xC471u);
            JUMPOUT(0x197FBD2E0);
          }
          if (v93)
          {
            v16 = *(_WORD *)(a3 + 12);
LABEL_112:
            v94 = v16 & 0xFFF;
            if (v94 == 3)
            {
              v142 = *(int *)(a3 + 40);
            }
            else
            {
              if (v94 != 4)
                goto LABEL_114;
              v142 = *(_QWORD *)(a3 + 40);
            }
            if ((unint64_t)(v142 + 4095) >= 0x1FFF
              && ((v142 & 0xFFF) != 0 || (unint64_t)v142 >> 24 && (unint64_t)((v142 >> 12) + 4095) > 0xFFF))
            {
LABEL_114:
              if (v4 > 8 || ((1 << v4) & 0x1C2) == 0)
              {
LABEL_116:
                v96 = (unsigned __int16)JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*((_QWORD *)v7 + 50) + 16));
                if (v95)
                {
                  v102 = v7;
                  v103 = v6;
                }
                else
                {
                  v102 = v7;
                  v103 = (JSC::B3::Value *)a3;
                }
                return;
              }
LABEL_158:
              return;
            }
            if (v4 != 6 && v4 != 1)
            {
              if (v4 - 7 >= 2)
                goto LABEL_116;
              goto LABEL_158;
            }
            v159 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*((_QWORD *)v7 + 50) + 16));
            v169 = *(_WORD *)(a3 + 12) & 0xFFF;
            if (v169 == 3)
            {
              v183 = *(int *)(a3 + 40);
            }
            else
            {
              if (v169 != 4)
                goto LABEL_180;
              v183 = *(_QWORD *)(a3 + 40);
            }
            if ((unint64_t)(v183 + 4095) < 0x1FFF
              || (v183 & 0xFFF) == 0
              && (!((unint64_t)v183 >> 24)
               || v183 >> 12 == 0
               || (unint64_t)(v183 >> 12) >= 0xFFFFFFFFFFFFF001))
            {
              HIDWORD(v213) = 1;
              *(_QWORD *)v214 = 0;
              v214[8] = 0;
              WORD4(v213) = 514;
              *(_QWORD *)&v213 = v183;
              goto LABEL_181;
            }
LABEL_180:
            *(_QWORD *)&v213 = 0;
            WORD4(v213) = 512;
            HIDWORD(v213) = 1;
            *(_QWORD *)v214 = 0;
            v214[8] = 0;
LABEL_181:
          }
          return;
      }
    case 3u:
      v8 = 8;
      goto LABEL_177;
    case 4u:
LABEL_177:
      v16 = *(_WORD *)(a3 + 12);
      v4 = v8;
      v9 = v8;
      goto LABEL_15;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FBD36CLL);
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::tryAppendBitOpWithShift(uint64_t a1, JSC::B3::Value *a2, JSC::B3::Value *this, int a4)
{
  unsigned __int16 v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  JSC::B3::Value **v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;

  v4 = a4;
  if (((a4 - 158) > 0x2B || ((1 << (a4 + 98)) & 0xFFFFFFFF03FLL) == 0)
    && (a4 - 366) >= 2)
  {
    return 0;
  }
  v9 = *((unsigned int *)this + 2);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) || *(_DWORD *)(*(_QWORD *)(a1 + 80) + 8 * v9) != 1)
    return 0;
  v10 = JSC::B3::Value::child(this, 1u);
  v11 = *(_QWORD *)v10;
  v12 = *(_WORD *)(*(_QWORD *)v10 + 12) & 0xFFF;
  if (*(_QWORD *)v10 && v12 == 3)
  {
    v13 = *(int *)(v11 + 40);
  }
  else
  {
    result = 0;
    if (!v11 || v12 != 4)
      return result;
    v13 = *(_QWORD *)(v11 + 40);
  }
  if ((unint64_t)(v13 + 4095) >= 0x1FFF
    && ((v13 & 0xFFF) != 0 || (unint64_t)v13 >> 24 && (unint64_t)((v13 >> 12) + 4095) > 0xFFF))
  {
    return 0;
  }
  v14 = JSC::B3::Value::child(this, 1u);
  v15 = *(_QWORD *)v14;
  v16 = *(_WORD *)(*(_QWORD *)v14 + 12) & 0xFFF;
  if (*(_QWORD *)v14 && v16 == 3)
  {
    v17 = *(int *)(v15 + 40);
  }
  else
  {
    if (v16 != 4)
      v15 = 0;
    v17 = *(_QWORD *)(v15 + 40);
  }
  if (v17 < 0)
    return 0;
  v18 = JSC::B3::Value::child(this, 1u);
  v19 = *(_QWORD *)v18;
  v20 = *(_WORD *)(*(_QWORD *)v18 + 12) & 0xFFF;
  if (*(_QWORD *)v18 && v20 == 3)
  {
    v21 = *(int *)(v19 + 40);
  }
  else
  {
    if (v20 != 4)
      v19 = 0;
    v21 = *(_QWORD *)(v19 + 40);
  }
  v22 = 64;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 400) + 16) == 1)
    v22 = 32;
  if (v21 >= v22)
    return 0;
  v24 = (JSC::B3::Value **)JSC::B3::Value::child(this, 0);
  v26 = JSC::B3::Value::child(this, 1u);
  v27 = *(_QWORD *)v26;
  v28 = *(_WORD *)(*(_QWORD *)v26 + 12) & 0xFFF;
  if (*(_QWORD *)v26 && v28 == 3)
  {
    v34 = *(int *)(v27 + 40);
  }
  else
  {
    if (!v27 || v28 != 4)
      goto LABEL_38;
    v34 = *(_QWORD *)(v27 + 40);
  }
  if ((unint64_t)(v34 + 4095) < 0x1FFF
    || (v34 & 0xFFF) == 0
    && (!((unint64_t)v34 >> 24) || v34 >> 12 == 0 || (unint64_t)(v34 >> 12) >= 0xFFFFFFFFFFFFF001))
  {
    HIDWORD(v35) = 1;
    v36 = 0;
    v37 = 0;
    WORD4(v35) = 514;
    *(_QWORD *)&v35 = v34;
    goto LABEL_39;
  }
LABEL_38:
  *(_QWORD *)&v35 = 0;
  WORD4(v35) = 512;
  HIDWORD(v35) = 1;
  v36 = 0;
  v37 = 0;
LABEL_39:
  v30 = *((unsigned int *)this + 2);
  v31 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 0x8000000000000000) != 0)
    v32 = 63;
  else
    v32 = *(_QWORD *)(2 * v31);
  if (v32 <= v30)
  {
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)a1, v30 + 1, 0);
    v31 = *(_QWORD *)a1;
  }
  if (v31 >= 0)
    v33 = 2 * v31 + 8;
  else
    v33 = a1;
  result = 1;
  *(_QWORD *)(v33 + ((v30 >> 3) & 0x1FFFFFF8)) |= 1 << v30;
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendBinOp<(JSC::B3::Air::Opcode)35,(JSC::B3::Air::Opcode)37,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445,(JSC::B3::Commutativity)1>(JSC::B3::Value **this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  JSC::B3::Value *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  _BYTE v48[25];
  _BYTE v49[25];
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  WTF *v54;
  uint64_t v55;
  _BYTE v56[25];
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  int v62;
  int v63;
  char v64;
  JSC::B3::Value *v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int8 v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  _OWORD v76[2];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)a2 + 4);
  if (v6 >= 0x80000000)
    v6 = 0x80000000;
  if (v6 == 2)
  {
    v7 = 37;
  }
  else
  {
    if (v6 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197FBDA1CLL);
    }
    v7 = 35;
  }
  if (a2 == a3)
    goto LABEL_32;
  v9 = v68;
  if (!v67 && !v68 && !v70 && !v71 && v69 == 1)
    v9 = v72 != 0;
  if (v9 == 1)
  {
    v33 = this[50];
    *(_OWORD *)v56 = *(_OWORD *)v49;
    *(_OWORD *)&v56[9] = *(_OWORD *)&v49[9];
    v54 = (WTF *)v56;
    *(_QWORD *)&v57 = 0;
    WORD4(v57) = 513;
    HIDWORD(v57) = 1;
    *(_QWORD *)&v58 = v32;
    BYTE8(v58) = 0;
    v59 = 0;
    v60 = 513;
    v61 = 1;
    v62 = v8;
    v63 = 0;
    v64 = 0;
    v55 = 0x300000003;
    v65 = v33;
    v66 = v7;
    BYTE2(v66) = v75;
    v47 = v54;
    if (v56 != (_BYTE *)v54)
    {
      if (v54)
      {
        v54 = 0;
        LODWORD(v55) = 0;
        WTF::fastFree((unint64_t)v47, v40, v41, v42, v43, v44, v45, v46);
      }
    }
    return;
  }
  v10 = v49[8];
  if (*(_QWORD *)v49 || v49[8])
  {
    if (v49[8] != 1)
    {
      v10 = 0;
      goto LABEL_27;
    }
  }
  else if (*(_DWORD *)&v49[16] || *(_DWORD *)&v49[20] || *(_DWORD *)&v49[12] != 1 || !v50)
  {
    goto LABEL_27;
  }
  v12 = this[50];
  *(_OWORD *)((char *)v76 + 9) = *(_OWORD *)&v48[9];
  v76[0] = *(_OWORD *)v48;
  v54 = (WTF *)v56;
  *(_QWORD *)v56 = 0;
  *(_WORD *)&v56[8] = 513;
  *(_DWORD *)&v56[12] = 1;
  *(_DWORD *)&v56[16] = v11;
  *(_DWORD *)&v56[20] = 0;
  v56[24] = 0;
  v57 = *(_OWORD *)v48;
  v58 = v76[1];
  v59 = 0;
  v60 = 513;
  v61 = 1;
  v62 = v8;
  v63 = 0;
  v64 = 0;
  v55 = 0x300000003;
  v65 = v12;
  v66 = v7;
  BYTE2(v66) = v53;
  v52 = 1;
  v26 = v54;
  if (v56 != (_BYTE *)v54 && v54)
  {
    v54 = 0;
    LODWORD(v55) = 0;
    WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  }
  v10 = 1;
LABEL_27:
  if (v51 && !v52)
  {
    __break(0xC471u);
    JUMPOUT(0x197FBDA6CLL);
  }
  if (v73 && !v74)
  {
    __break(0xC471u);
    JUMPOUT(0x197FBDA4CLL);
  }
  if ((v10 & 1) == 0)
  {
LABEL_32:
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  WTF *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  int v35;
  int v36;
  char v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  int v41;
  int v42;
  char v43;
  _BYTE v44[12];

  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 400);
    v10 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v24 = (WTF *)&v26;
    v26 = 0;
    v27 = 513;
    v28 = 1;
    v29 = a3;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 513;
    v34 = 1;
    v35 = a4;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 513;
    v40 = 1;
    v41 = a5;
    v42 = 0;
    v43 = 0;
    v25 = 0x300000003;
    *(_QWORD *)v44 = v9;
    *(_DWORD *)&v44[8] = (_DWORD)a2;
    v11 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v10 + 8))
    {
      WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v10, (unint64_t)&v24, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v12 = *(_QWORD *)v10;
      v13 = *(_QWORD *)v10 + (v11 << 7);
      v14 = (_OWORD *)(v13 + 16);
      *(_QWORD *)v13 = v13 + 16;
      *(_QWORD *)(v13 + 8) = 3;
      v15 = v24;
      if (v24 == (WTF *)&v26)
      {
        if (HIDWORD(v25))
        {
          v16 = 32 * HIDWORD(v25);
          v17 = (__int128 *)&v26;
          do
          {
            v18 = *v17;
            v19 = v17[1];
            v17 += 2;
            *v14 = v18;
            v14[1] = v19;
            v14 += 2;
            v16 -= 32;
          }
          while (v16);
        }
      }
      else
      {
        v24 = (WTF *)&v26;
        *(_QWORD *)v13 = v15;
        *(_DWORD *)(v13 + 8) = v25;
      }
      v20 = HIDWORD(v25);
      HIDWORD(v25) = 0;
      *(_DWORD *)(v13 + 12) = v20;
      v21 = v12 + (v11 << 7);
      v22 = *(_QWORD *)v44;
      *(_DWORD *)(v21 + 119) = *(_DWORD *)&v44[7];
      *(_QWORD *)(v21 + 112) = v22;
      ++*(_DWORD *)(v10 + 12);
    }
    v23 = v24;
    if (&v26 != (uint64_t *)v24)
    {
      if (v24)
      {
        v24 = 0;
        LODWORD(v25) = 0;
        WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendUnOp<(JSC::B3::Air::Opcode)94,(JSC::B3::Air::Opcode)94,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445>(JSC::B3::Value **a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  int v16;
  char v17;
  char v18;
  int v19;
  JSC::B3::Value *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  int v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  __int16 v45;
  int v46;
  int v47;
  int v48;
  char v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  int v53;
  int v54;
  char v55;
  JSC::B3::Value *v56;
  int v57;
  uint64_t v58;
  unsigned __int8 v59;
  char v60;
  __int16 v61;
  int v62;
  uint64_t v63;
  char v64;
  JSC::B3::Value *v65[2];

  v2 = *(_DWORD *)(a2 + 16);
  if (v2 >= 0x80000000)
    v2 = 0x80000000;
  if (v2 - 1 >= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197FBDDFCLL);
  }
  if (*(_BYTE *)(a2 + 12) == 67)
  {
    v13 = v58;
    v12 = v59;
    if (v58)
      goto LABEL_12;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v60 = 2;
    v62 = 1;
    v63 = 0;
    v64 = 0;
    memset(v65, 0, 11);
  }
  if (!v12)
  {
    if (!v63 && v62 == 1 && v65[0])
    {
      v16 = 0;
      v17 = 0;
      LOBYTE(v12) = 1;
      v18 = 2;
      v19 = 1;
LABEL_16:
      v20 = a1[50];
      v40 = (WTF *)&v42;
      v42 = v13;
      v43 = v12;
      v44 = v18;
      v45 = v15;
      v46 = v19;
      v47 = v14;
      v48 = v16;
      v49 = v17;
      v50 = 0;
      v51 = 513;
      v52 = 1;
      v53 = v11;
      v54 = 0;
      v55 = 0;
      v41 = 0x200000003;
      v56 = v20;
      v57 = 94;
      BYTE2(v57) = BYTE2(v65[1]);
      v28 = v40;
      if (&v42 != (uint64_t *)v40)
      {
        if (v40)
        {
          v40 = 0;
          LODWORD(v41) = 0;
          WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
        }
      }
      return;
    }
    goto LABEL_19;
  }
LABEL_12:
  if ((char)v12 <= 0x14 && ((1 << v12) & 0x100E82) != 0)
  {
    v14 = v63;
    if (v65[0])
    {
      v34 = *((unsigned int *)v65[0] + 2);
      v35 = (uint64_t)*a1;
      if (((unint64_t)*a1 & 0x8000000000000000) != 0)
        v36 = 63;
      else
        v36 = *(_QWORD *)(2 * v35);
      if (v36 <= v34)
      {
        v38 = v12;
        v39 = v63;
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)a1, v34 + 1, 0);
        LOBYTE(v12) = v38;
        v14 = v39;
        v35 = (uint64_t)*a1;
      }
      if (v35 >= 0)
        v37 = 2 * v35 + 8;
      else
        v37 = (uint64_t)a1;
      *(_QWORD *)(v37 + ((v34 >> 3) & 0x1FFFFFF8)) |= 1 << v34;
    }
    v18 = v60;
    v15 = v61;
    v19 = v62;
    v16 = HIDWORD(v63);
    v17 = v64;
    goto LABEL_16;
  }
LABEL_19:
  if (LOBYTE(v65[1]) && !BYTE1(v65[1]))
  {
    __break(0xC471u);
    JUMPOUT(0x197FBDE70);
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#2}::operator()(JSC::B3::Value **a1, unsigned int *a2, JSC::B3::Value *this)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  JSC::B3::Value **v14;
  JSC::B3::Value **v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  JSC::B3::Value **v19;
  JSC::B3::Value **v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *((_DWORD *)a1[50] + 4);
  if (v6 >= 0x80000000)
    v6 = 0x80000000;
  if (v6 == 2)
  {
    v7 = 151;
  }
  else
  {
    if (v6 != 1)
      return 0;
    v7 = 150;
  }
  if (*((_BYTE *)this + 12) != 24)
    return 0;
  v9 = *(unsigned int **)JSC::B3::Value::child(this, 0);
  v10 = *(_QWORD *)JSC::B3::Value::child(this, 1u);
  if (a2)
  {
    v11 = a2[2];
    v12 = (_QWORD *)(2 * (_QWORD)*a1);
    v13 = ((unint64_t)*a1 & 0x8000000000000000) != 0 ? 63 : *v12;
    if (v13 > v11)
    {
      v14 = (JSC::B3::Value **)(v12 + 1);
      v15 = (uint64_t)*a1 >= 0 ? v14 : a1;
      if (((*(unint64_t *)((char *)v15 + ((v11 >> 3) & 0x1FFFFFF8)) >> v11) & 1) != 0)
        return 0;
    }
  }
  if (v9)
  {
    v16 = v9[2];
    v17 = (_QWORD *)(2 * (_QWORD)*a1);
    v18 = ((unint64_t)*a1 & 0x8000000000000000) != 0 ? 63 : *v17;
    if (v18 > v16)
    {
      v19 = (JSC::B3::Value **)(v17 + 1);
      v20 = (uint64_t)*a1 >= 0 ? v19 : a1;
      if (((*(unint64_t *)((char *)v20 + ((v16 >> 3) & 0x1FFFFFF8)) >> v16) & 1) != 0)
        return 0;
    }
  }
  v21 = *(_WORD *)(v10 + 12) & 0xFFF;
  if (v10 && v21 == 3)
  {
    v22 = *(int *)(v10 + 40);
LABEL_31:
    if (v22 == -1)
    {
      return 1;
    }
    return 0;
  }
  result = 0;
  if (v10 && v21 == 4)
  {
    v22 = *(_QWORD *)(v10 + 40);
    goto LABEL_31;
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#4}::operator()(uint64_t a1, JSC::B3::Value *this, JSC::B3::Value *a3)
{
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  JSC::B3::Value **v11;
  JSC::B3::Value **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  BOOL v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint8x8_t v38;
  uint8x8_t v39;
  int v40;
  int v41;
  int v42;
  __int128 v43;
  int v44;
  int v45;
  JSC::B3::Value *v46;
  JSC::B3::Value *v47;

  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 16);
  if (v6 >= 0x80000000)
    v6 = 0x80000000;
  if (v6 == 2)
  {
    v7 = 171;
    v8 = 64;
  }
  else
  {
    if (v6 != 1)
      return 0;
    v7 = 170;
    v8 = 32;
  }
  if (*((_BYTE *)this + 12) != 25)
    return 0;
  v10 = JSC::B3::Value::child(this, 0);
  result = 0;
  if (*(_BYTE *)(*(_QWORD *)v10 + 12) == 22)
  {
    if (*((_BYTE *)a3 + 12) != 27)
      return 0;
    v11 = (JSC::B3::Value **)JSC::B3::Value::child(this, 0);
    v47 = *(JSC::B3::Value **)JSC::B3::Value::child(*v11, 0);
    v12 = (JSC::B3::Value **)JSC::B3::Value::child(this, 0);
    v13 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
    v14 = *(_QWORD *)JSC::B3::Value::child(this, 1u);
    v46 = *(JSC::B3::Value **)JSC::B3::Value::child(a3, 0);
    v15 = *(_QWORD *)JSC::B3::Value::child(a3, 1u);
    v16 = WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)a1, (uint64_t)&v47);
    result = 0;
    if ((v16 & 1) == 0)
    {
      if ((WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)a1, (uint64_t)&v46) & 1) != 0)
        return 0;
      result = 0;
      v17 = *(_WORD *)(v13 + 12) & 0xFFF;
      if (v13)
        v18 = v17 == 3;
      else
        v18 = 0;
      v19 = v18;
      if (v13 && (v17 - 3) <= 1)
      {
        if (!(_QWORD)v43 && !BYTE8(v43) && !v44 && !v45 && HIDWORD(v43) == 1)
          return 0;
        v20 = *(_WORD *)(v14 + 12) & 0xFFF;
        v21 = v14 && v20 == 3;
        v22 = v21;
        if (v21)
        {
          v24 = *(int *)(v14 + 40);
        }
        else
        {
          v23 = v20 == 4 ? v14 : 0;
          v24 = *(_QWORD *)(v23 + 40);
        }
        if (v24 < 0)
          return 0;
        if (!(_QWORD)v43 && !BYTE8(v43) && !v44 && !v45 && HIDWORD(v43) == 1)
          return 0;
        v25 = *(_WORD *)(v15 + 12) & 0xFFF;
        v26 = v15 && v25 == 3;
        v27 = v26;
        if (v26)
        {
          v29 = *(int *)(v15 + 40);
        }
        else
        {
          v28 = v25 == 4 ? v15 : 0;
          v29 = *(_QWORD *)(v28 + 40);
        }
        if (v29 < 0)
          return 0;
        if (v19)
        {
          v31 = *(int *)(v13 + 40);
        }
        else
        {
          v30 = v17 == 4 ? v13 : 0;
          v31 = *(_QWORD *)(v30 + 40);
        }
        if (!v31 || ((v31 + 1) & v31) != 0)
          return 0;
        if (v22)
        {
          v33 = *(int *)(v14 + 40);
        }
        else
        {
          if (v20 == 4)
            v32 = v14;
          else
            v32 = 0;
          v33 = *(_QWORD *)(v32 + 40);
        }
        if (v27)
        {
          v35 = *(int *)(v15 + 40);
        }
        else
        {
          if (v25 == 4)
            v34 = v15;
          else
            v34 = 0;
          v35 = *(_QWORD *)(v34 + 40);
        }
        result = 0;
        v36 = v35 + v33;
        v37 = __CFADD__(v35, v33);
        if (v35 != v8 && !v37 && v36 == v8)
        {
          v38 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
          v39 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v31));
          v38.i16[0] = vaddlv_u8(v38);
          v39.i16[0] = vaddlv_u8(v39);
          if (v35 == v39.i32[0] + v38.i32[0])
          {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#5}::operator()(uint64_t a1, JSC::B3::Value *this, JSC::B3::Value *a3)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  JSC::B3::Value **v11;
  JSC::B3::Value **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  _BOOL4 v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  __int32 v33;
  uint8x8_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  _BOOL4 v40;
  uint64_t v41;
  unsigned __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  int v53;
  int v54;
  JSC::B3::Value *v55;
  JSC::B3::Value *v56;

  result = 0;
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 16);
  if (v7 >= 0x80000000)
    v7 = 0x80000000;
  if (v7 == 2)
  {
    v8 = 147;
    v9 = 0;
  }
  else
  {
    if (v7 != 1)
      return result;
    v9 = 1;
    v8 = 146;
  }
  if (*((_BYTE *)this + 12) != 25 || *((_BYTE *)a3 + 12) != 22)
    return 0;
  v10 = JSC::B3::Value::child(this, 0);
  result = 0;
  if (*(_BYTE *)(*(_QWORD *)v10 + 12) != 22)
    return result;
  v11 = (JSC::B3::Value **)JSC::B3::Value::child(this, 0);
  v56 = *(JSC::B3::Value **)JSC::B3::Value::child(*v11, 0);
  v12 = (JSC::B3::Value **)JSC::B3::Value::child(this, 0);
  v13 = *(_QWORD *)JSC::B3::Value::child(*v12, 1u);
  v14 = *(_QWORD *)JSC::B3::Value::child(this, 1u);
  v55 = *(JSC::B3::Value **)JSC::B3::Value::child(a3, 0);
  v15 = *(_QWORD *)JSC::B3::Value::child(a3, 1u);
  if ((WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)a1, (uint64_t)&v56) & 1) != 0
    || (WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)a1, (uint64_t)&v55) & 1) != 0)
  {
    return 0;
  }
  v16 = *(_WORD *)(v13 + 12) & 0xFFF;
  v17 = v13 && v16 == 3;
  v18 = v17;
  if (!v17 && (!v13 || v16 != 4))
    return 0;
  if (!(_QWORD)v52 && !BYTE8(v52) && !v53 && !v54 && HIDWORD(v52) == 1)
    return 0;
  v19 = *(_WORD *)(v14 + 12) & 0xFFF;
  v20 = v14 && v19 == 3;
  v21 = v20;
  if (v20)
  {
    v23 = *(int *)(v14 + 40);
  }
  else
  {
    v22 = v19 == 4 ? v14 : 0;
    v23 = *(_QWORD *)(v22 + 40);
  }
  if (v23 < 0)
    return 0;
  v24 = *(_WORD *)(v15 + 12) & 0xFFF;
  if (v15)
    v25 = v24 == 3;
  else
    v25 = 0;
  v26 = v25;
  if (!v25)
  {
    result = 0;
    if (!v15 || v24 != 4)
      return result;
  }
  if (v21)
  {
    v28 = *(int *)(v14 + 40);
  }
  else
  {
    v27 = v19 == 4 ? v14 : 0;
    v28 = *(_QWORD *)(v27 + 40);
  }
  if (v18)
  {
    v30 = *(int *)(v13 + 40);
  }
  else
  {
    v29 = v16 == 4 ? v13 : 0;
    v30 = *(_QWORD *)(v29 + 40);
  }
  if (!v30 || ((v30 + 1) & v30) != 0)
    return 0;
  result = 0;
  v31 = 64;
  if (v9)
    v31 = 32;
  v32 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
  v32.i16[0] = vaddlv_u8(v32);
  v33 = v32.i32[0];
  v34 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v30));
  v34.i16[0] = vaddlv_u8(v34);
  v35 = (v34.i32[0] + v33);
  if (!__CFADD__(v28, v35) && v28 + v35 <= v31)
  {
    if (v26)
    {
      v37 = *(int *)(v15 + 40);
    }
    else
    {
      if (v24 == 4)
        v36 = v15;
      else
        v36 = 0;
      v37 = *(_QWORD *)(v36 + 40);
    }
    v38 = v37 ^ (v30 << v28);
    v39 = v38 == -1;
    v40 = v38 == -1;
    if (v9)
      v40 = v39;
    if (v40)
    {
      v42 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*(_QWORD *)(a1 + 400) + 16));
      HIDWORD(v49) = 1;
      v50 = 0;
      v51 = 0;
      WORD4(v49) = 514;
      *(_QWORD *)&v49 = v35;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#6}::operator()(uint64_t a1, JSC::B3::Value *this, JSC::B3::Value *a3)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  JSC::B3::Value **v11;
  uint64_t v12;
  JSC::B3::Value **v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  _BOOL4 v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8x8_t v31;
  __int32 v32;
  uint8x8_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  _BOOL4 v42;
  uint64_t v43;
  unsigned __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  int v55;
  int v56;
  JSC::B3::Value *v57;
  JSC::B3::Value *v58;

  result = 0;
  v7 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 16);
  if (v7 >= 0x80000000)
    v7 = 0x80000000;
  if (v7 == 2)
  {
    v8 = 165;
    v9 = 0;
  }
  else
  {
    if (v7 != 1)
      return result;
    v9 = 1;
    v8 = 164;
  }
  if (*((_BYTE *)this + 12) != 22)
    return 0;
  v10 = JSC::B3::Value::child(this, 0);
  result = 0;
  if (*(_BYTE *)(*(_QWORD *)v10 + 12) == 27)
  {
    if (*((_BYTE *)a3 + 12) != 22)
      return 0;
    v11 = (JSC::B3::Value **)JSC::B3::Value::child(this, 0);
    v58 = *(JSC::B3::Value **)JSC::B3::Value::child(*v11, 0);
    v12 = *(_QWORD *)JSC::B3::Value::child(this, 1u);
    v13 = (JSC::B3::Value **)JSC::B3::Value::child(this, 0);
    v14 = *(_QWORD *)JSC::B3::Value::child(*v13, 1u);
    v57 = *(JSC::B3::Value **)JSC::B3::Value::child(a3, 0);
    v15 = *(_QWORD *)JSC::B3::Value::child(a3, 1u);
    if ((WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)a1, (uint64_t)&v58) & 1) != 0
      || (WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)a1, (uint64_t)&v57) & 1) != 0)
    {
      return 0;
    }
    v16 = *(_WORD *)(v12 + 12) & 0xFFF;
    v17 = v12 && v16 == 3;
    v18 = v17;
    if (!v17 && (!v12 || v16 != 4))
      return 0;
    if (!(_QWORD)v54 && !BYTE8(v54) && !v55 && !v56 && HIDWORD(v54) == 1)
      return 0;
    v19 = *(_WORD *)(v14 + 12) & 0xFFF;
    v20 = v14 && v19 == 3;
    v21 = v20;
    if (v20)
    {
      v23 = *(int *)(v14 + 40);
    }
    else
    {
      v22 = v19 == 4 ? v14 : 0;
      v23 = *(_QWORD *)(v22 + 40);
    }
    if (v23 < 0)
      return 0;
    v24 = *(_WORD *)(v15 + 12) & 0xFFF;
    if (v15)
      v25 = v24 == 3;
    else
      v25 = 0;
    v26 = v25;
    if (v25 || (result = 0, v15) && v24 == 4)
    {
      if (v21)
      {
        v28 = *(int *)(v14 + 40);
      }
      else
      {
        if (v19 == 4)
          v27 = v14;
        else
          v27 = 0;
        v28 = *(_QWORD *)(v27 + 40);
      }
      if (v18)
      {
        v30 = *(int *)(v12 + 40);
      }
      else
      {
        if (v16 == 4)
          v29 = v12;
        else
          v29 = 0;
        v30 = *(_QWORD *)(v29 + 40);
      }
      if (!v30 || ((v30 + 1) & v30) != 0)
        return 0;
      result = 0;
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
      v31.i16[0] = vaddlv_u8(v31);
      v32 = v31.i32[0];
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v30));
      v33.i16[0] = vaddlv_u8(v33);
      v34 = (v33.i32[0] + v32);
      v35 = 64;
      if (v9)
        v35 = 32;
      v36 = __CFADD__(v28, v34);
      v37 = v28 + v34;
      if (!v36 && v37 <= v35)
      {
        if (v26)
        {
          v39 = *(int *)(v15 + 40);
        }
        else
        {
          if (v24 == 4)
            v38 = v15;
          else
            v38 = 0;
          v39 = *(_QWORD *)(v38 + 40);
        }
        v40 = v39 ^ v30;
        v41 = v40 == -1;
        v42 = v40 == -1;
        if (v9)
          v42 = v41;
        if (v42)
        {
          v44 = JSC::B3::Air::relaxedMoveForType(*(_DWORD *)(*(_QWORD *)(a1 + 400) + 16));
          HIDWORD(v51) = 1;
          v52 = 0;
          v53 = 0;
          WORD4(v51) = 514;
          *(_QWORD *)&v51 = v34;
          return 1;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#7}::operator()(uint64_t a1, JSC::B3::Value *a2, JSC::B3::Value *this)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::B3::Value *v17;
  JSC::B3::Value *v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 16);
  if (v5 >= 0x80000000)
    v5 = 0x80000000;
  if (v5 == 2)
  {
    v6 = 155;
  }
  else
  {
    if (v5 != 1)
      return 0;
    v6 = 154;
  }
  if (*((_BYTE *)this + 12) != 24)
    return 0;
  v18 = a2;
  v17 = *(JSC::B3::Value **)JSC::B3::Value::child(this, 0);
  v8 = *(_QWORD *)JSC::B3::Value::child(this, 1u);
  if ((WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)a1, (uint64_t)&v18) & 1) != 0
    || (WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)a1, (uint64_t)&v17) & 1) != 0)
  {
    return 0;
  }
  v9 = *(_WORD *)(v8 + 12) & 0xFFF;
  if (v8 && v9 == 3)
  {
    v10 = *(int *)(v8 + 40);
LABEL_17:
    if (v10 == -1)
    {
      return 1;
    }
    return 0;
  }
  result = 0;
  if (v8 && v9 == 4)
  {
    v10 = *(_QWORD *)(v8 + 40);
    goto LABEL_17;
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#8}::operator()(uint64_t a1, JSC::B3::Value *a2, unsigned __int8 *a3)
{
  int v3;
  unint64_t v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = a3[12];
  switch(v3)
  {
    case 25:
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 16);
      if (v6 >= 0x80000000)
        v6 = 0x80000000;
      v7 = v6 - 1;
      if (v7 < 4)
      {
        v4 = 0x1BD01BD00C700C4uLL >> (16 * v7);
      }
      break;
    case 27:
      v8 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 16);
      if (v8 >= 0x80000000)
        v8 = 0x80000000;
      v9 = v8 - 1;
      if (v9 < 4)
      {
        v10 = 16 * v9;
        v11 = 13172934;
LABEL_18:
        v4 = (v11 | 0x1BD01BD00000000uLL) >> v10;
      }
      break;
    case 26:
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 16);
      if (v12 >= 0x80000000)
        v12 = 0x80000000;
      v13 = v12 - 1;
      if (v13 < 4)
      {
        v10 = 16 * v13;
        v11 = 13107397;
        goto LABEL_18;
      }
      break;
  }
  LOWORD(v4) = 445;
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendBinOp<(JSC::B3::Air::Opcode)68,(JSC::B3::Air::Opcode)69,(JSC::B3::Air::Opcode)54,(JSC::B3::Air::Opcode)55,(JSC::B3::Commutativity)0>(JSC::B3::Value **this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  _BOOL4 v25;
  int v26;
  JSC::ARM64LogicalImmediate *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::B3::_anonymous_namespace_::LowerToAir *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  char v37;
  char v38;
  int v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::B3::_anonymous_namespace_::LowerToAir *v48;
  JSC::B3::Value *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char v54;
  int v55;
  int v56;
  char v57;
  unsigned int v58;
  JSC::B3::Value *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int16 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  JSC::B3::Value *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  JSC::B3::Value *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  unint64_t v107;
  unsigned __int16 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  JSC::B3::Value *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  unint64_t v123;
  int v124;
  JSC::B3::Value *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  JSC::B3::Value **v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  JSC::B3::Value **v144;
  __int16 v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  unsigned int v150;
  _OWORD v151[2];
  _BYTE v152[48];
  __int128 v153;
  _BYTE v154[25];
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  __int16 v158;
  int v159;
  int v160;
  int v161;
  char v162;
  JSC::B3::Value *v163;
  int v164;
  uint64_t v165;
  __int16 v166;
  __int16 v167;
  int v168;
  uint64_t v169;
  char v170;
  JSC::B3::Value *v171[2];
  _BYTE v172[39];
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 16);
  if (v3 >= 0x80000000)
    v3 = 0x80000000;
  switch(v3)
  {
    case 1u:
      v26 = *(_WORD *)(a3 + 12) & 0xFFF;
      if (a3 && v26 == 3)
      {
        v27 = (JSC::ARM64LogicalImmediate *)*(int *)(a3 + 40);
      }
      else
      {
        if (!a3 || v26 != 4)
          goto LABEL_126;
        v27 = *(JSC::ARM64LogicalImmediate **)(a3 + 40);
      }
      if (JSC::ARM64LogicalImmediate::create32(v27) != -1)
      {
        HIDWORD(v153) = 1;
        *(_QWORD *)v154 = 0;
        v154[8] = 0;
        WORD4(v153) = 516;
        *(_QWORD *)&v153 = v27;
        v32 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
        v33 = 68;
        goto LABEL_54;
      }
LABEL_126:
      v15 = 68;
      goto LABEL_11;
    case 2u:
      v13 = *(_WORD *)(a3 + 12) & 0xFFF;
      if (a3 && v13 == 3)
      {
        v14 = *(int *)(a3 + 40);
      }
      else
      {
        if (!a3 || v13 != 4)
          goto LABEL_10;
        v14 = *(_QWORD *)(a3 + 40);
      }
      if (JSC::ARM64LogicalImmediate::create64(v14) != -1)
      {
        HIDWORD(v153) = 1;
        *(_QWORD *)v154 = 0;
        v154[8] = 0;
        WORD4(v153) = 517;
        *(_QWORD *)&v153 = v14;
        v32 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
        v33 = 69;
LABEL_54:
        return;
      }
LABEL_10:
      v15 = 69;
LABEL_11:
      if (a2 == a3)
        goto LABEL_87;
      if (*(_BYTE *)(a2 + 12) == 67)
      {
        v17 = v165;
        v16 = v166;
      }
      else
      {
        v16 = 0;
        v17 = 0;
        v165 = 0;
        v166 = 512;
        v168 = 1;
        v169 = 0;
        v170 = 0;
        memset(v171, 0, 11);
      }
      if (v17)
        v18 = 0;
      else
        v18 = v16 == 0;
      v19 = v18;
      v20 = v16;
      if (v18)
      {
        v20 = 0;
        if (!v169 && v168 == 1)
          v20 = v171[0] != 0;
      }
      if (v15 <= 68)
      {
        if (v15 == 68)
        {
          if (v20 == 4)
            goto LABEL_61;
          v20 = (char)v20;
        }
        if (v20 != 1)
          goto LABEL_27;
LABEL_61:
        v147 = v15;
        v149 = v12;
        v35 = v168;
        v34 = v169;
        if ((_DWORD)v169)
          v19 = 0;
        v36 = HIDWORD(v169);
        if (v19 == 1 && !HIDWORD(v169) && v168 == 1)
        {
          if (v171[0])
          {
            v37 = 0;
            v36 = 0;
            v35 = 1;
            v38 = 2;
            LOBYTE(v16) = 1;
            goto LABEL_106;
          }
        }
        else if (v171[0])
        {
          v137 = *((unsigned int *)v171[0] + 2);
          v138 = (uint64_t)*this;
          if (((unint64_t)*this & 0x8000000000000000) != 0)
            v139 = 63;
          else
            v139 = *(_QWORD *)(2 * v138);
          if (v139 <= v137)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)this, v137 + 1, 0);
            v138 = (uint64_t)*this;
          }
          if (v138 >= 0)
            v140 = (JSC::B3::Value **)(2 * v138 + 8);
          else
            v140 = this;
          *(JSC::B3::Value **)((char *)v140 + ((v137 >> 3) & 0x1FFFFFF8)) = (JSC::B3::Value *)(*(unint64_t *)((char *)v140 + ((v137 >> 3) & 0x1FFFFFF8)) | (1 << v137));
        }
        v38 = HIBYTE(v166);
        LOWORD(v12) = v167;
        v37 = v170;
LABEL_106:
        v59 = this[50];
        *(_QWORD *)v154 = v17;
        v154[8] = v16;
        v154[9] = v38;
        *(_WORD *)&v154[10] = v12;
        *(_DWORD *)&v154[12] = v35;
        *(_DWORD *)&v154[16] = v34;
        *(_DWORD *)&v154[20] = v36;
        v154[24] = v37;
        *(_QWORD *)&v153 = v154;
        *(_QWORD *)&v155 = 0;
        WORD4(v155) = 513;
        HIDWORD(v155) = 1;
        *(_QWORD *)&v156 = v58;
        BYTE8(v156) = 0;
        v157 = 0;
        v158 = 513;
        v159 = 1;
        v160 = v149;
        v161 = 0;
        v162 = 0;
        *((_QWORD *)&v153 + 1) = 0x300000003;
        v163 = v59;
        v164 = v147;
        BYTE2(v164) = BYTE2(v171[1]);
        v73 = v153;
        if (v154 == (_BYTE *)v153)
          return;
LABEL_107:
        if (v73)
        {
          *(_QWORD *)&v153 = 0;
          DWORD2(v153) = 0;
          WTF::fastFree(v73, v66, v67, v68, v69, v70, v71, v72);
        }
        return;
      }
      if (((char)v20 | 4) == 5)
        goto LABEL_61;
LABEL_27:
      if (v19)
      {
        v16 = 0;
        if (!v169 && v168 == 1)
          v16 = v171[0] != 0;
      }
      if ((v15 == 69 || v15 == 68) && v16 == 1)
      {
        v84 = JSC::B3::Air::relaxedMoveForType(*((_DWORD *)this[50] + 4));
        v90 = this[50];
        *(_OWORD *)v154 = *(_OWORD *)v152;
        *(_OWORD *)&v154[9] = *(_OWORD *)&v152[9];
        *(_QWORD *)&v153 = v154;
        *(_QWORD *)&v155 = 0;
        WORD4(v155) = 513;
        HIDWORD(v155) = 1;
        *(_QWORD *)&v156 = v12;
        BYTE8(v156) = 0;
        *((_QWORD *)&v153 + 1) = 0x200000003;
        v163 = v90;
        v164 = v15;
        BYTE2(v164) = BYTE2(v171[1]);
        v73 = v153;
        if (v154 == (_BYTE *)v153)
          return;
        goto LABEL_107;
      }
      if (*(_BYTE *)(a3 + 12) == 67)
      {
        v22 = *(_QWORD *)v152;
        v21 = v152[8];
      }
      else
      {
        v21 = 0;
        v22 = 0;
        *(_QWORD *)v152 = 0;
        *(_WORD *)&v152[8] = 512;
        *(_DWORD *)&v152[12] = 1;
        *(_QWORD *)&v152[16] = 0;
        v152[24] = 0;
        memset(&v152[32], 0, 11);
      }
      if (v22)
        v23 = 0;
      else
        v23 = v21 == 0;
      v24 = v23;
      v25 = v21;
      if (v23)
      {
        v25 = 0;
        if (!*(_QWORD *)&v152[16] && *(_DWORD *)&v152[12] == 1)
          v25 = *(_QWORD *)&v152[32] != 0;
      }
      if (v25)
      {
        v125 = this[50];
        *(_OWORD *)&v172[16] = *(_OWORD *)((char *)v151 + 9);
        *(_OWORD *)&v172[7] = v151[0];
        *(_QWORD *)&v153 = v154;
        *(_QWORD *)v154 = 0;
        *(_WORD *)&v154[8] = 513;
        *(_DWORD *)&v154[12] = 1;
        *(_DWORD *)&v154[16] = v124;
        *(_DWORD *)&v154[20] = 0;
        v154[24] = 0;
        v155 = v151[0];
        v156 = *(_OWORD *)&v172[23];
        v157 = 0;
        v158 = 513;
        v159 = 1;
        v160 = v12;
        v161 = 0;
        v162 = 0;
        *((_QWORD *)&v153 + 1) = 0x300000003;
        v163 = v125;
        v164 = v15;
        BYTE2(v164) = v152[42];
        v152[41] = 1;
        v107 = v153;
        if (v154 == (_BYTE *)v153)
          goto LABEL_120;
        goto LABEL_118;
      }
      v39 = v21;
      if (v24)
      {
        v39 = 0;
        if (!*(_QWORD *)&v152[16] && *(_DWORD *)&v152[12] == 1)
          v39 = *(_QWORD *)&v152[32] != 0;
      }
      if (v15 > 68)
      {
        if (((char)v39 | 4) != 5)
          goto LABEL_75;
        goto LABEL_95;
      }
      if (v15 == 68)
      {
        if (v39 == 4)
          goto LABEL_95;
        v39 = (char)v39;
      }
      if (v39 == 1)
      {
LABEL_95:
        v152[40] = 1;
        v51 = *(_DWORD *)&v152[12];
        v50 = *(_DWORD *)&v152[16];
        if (*(_DWORD *)&v152[16])
          v24 = 0;
        v52 = *(_DWORD *)&v152[20];
        v148 = v15;
        v150 = v12;
        v146 = v22;
        if (v24 == 1 && !*(_DWORD *)&v152[20] && *(_DWORD *)&v152[12] == 1)
        {
          if (*(_QWORD *)&v152[32])
          {
            v54 = 0;
            v55 = 0;
            v56 = 1;
            v57 = 2;
            LOBYTE(v21) = 1;
            goto LABEL_117;
          }
        }
        else if (*(_QWORD *)&v152[32])
        {
          v141 = *(unsigned int *)(*(_QWORD *)&v152[32] + 8);
          v142 = (uint64_t)*this;
          if (((unint64_t)*this & 0x8000000000000000) != 0)
            v143 = 63;
          else
            v143 = *(_QWORD *)(2 * v142);
          if (v143 <= v141)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)this, v141 + 1, 0);
            v142 = (uint64_t)*this;
          }
          if (v142 >= 0)
            v144 = (JSC::B3::Value **)(2 * v142 + 8);
          else
            v144 = this;
          *(JSC::B3::Value **)((char *)v144 + ((v141 >> 3) & 0x1FFFFFF8)) = (JSC::B3::Value *)(*(unint64_t *)((char *)v144 + ((v141 >> 3) & 0x1FFFFFF8)) | (1 << v141));
        }
        v57 = v152[9];
        v145 = *(_WORD *)&v152[10];
        v54 = v152[24];
        v53 = v50;
        v55 = v52;
        v56 = v51;
LABEL_117:
        v98 = this[50];
        *(_QWORD *)v154 = v146;
        v154[8] = v21;
        v154[9] = v57;
        *(_WORD *)&v154[10] = v145;
        *(_DWORD *)&v154[12] = v56;
        *(_DWORD *)&v154[16] = v53;
        *(_DWORD *)&v154[20] = v55;
        v154[24] = v54;
        *(_QWORD *)&v153 = v154;
        *(_QWORD *)&v155 = 0;
        WORD4(v155) = 513;
        HIDWORD(v155) = 1;
        *(_QWORD *)&v156 = v97;
        BYTE8(v156) = 0;
        v157 = 0;
        v158 = 513;
        v15 = v148;
        v12 = v150;
        v159 = 1;
        v160 = v150;
        v161 = 0;
        v162 = 0;
        *((_QWORD *)&v153 + 1) = 0x300000003;
        v163 = v98;
        v164 = v148;
        BYTE2(v164) = v152[42];
        v152[41] = 1;
        v107 = v153;
        if (v154 == (_BYTE *)v153)
        {
LABEL_120:
          v40 = 0;
          goto LABEL_82;
        }
LABEL_118:
        if (v107)
        {
          *(_QWORD *)&v153 = 0;
          DWORD2(v153) = 0;
          WTF::fastFree(v107, v105, v106, v7, v8, v9, v10, v11);
        }
        goto LABEL_120;
      }
LABEL_75:
      if (v24)
      {
        v21 = 0;
        if (!*(_QWORD *)&v152[16] && *(_DWORD *)&v152[12] == 1)
          v21 = *(_QWORD *)&v152[32] != 0;
      }
      if ((v15 == 69 || v15 == 68) && v21 == 1)
      {
        v108 = JSC::B3::Air::relaxedMoveForType(*((_DWORD *)this[50] + 4));
        v114 = this[50];
        *(_OWORD *)v154 = *(_OWORD *)v172;
        *(_OWORD *)&v154[9] = *(_OWORD *)&v172[9];
        *(_QWORD *)&v153 = v154;
        *(_QWORD *)&v155 = 0;
        WORD4(v155) = 513;
        HIDWORD(v155) = 1;
        *(_QWORD *)&v156 = v12;
        BYTE8(v156) = 0;
        *((_QWORD *)&v153 + 1) = 0x200000003;
        v163 = v114;
        v164 = v15;
        BYTE2(v164) = v152[42];
        v152[41] = 1;
        v123 = v153;
        if (v154 != (_BYTE *)v153 && (_QWORD)v153)
        {
          *(_QWORD *)&v153 = 0;
          DWORD2(v153) = 0;
          WTF::fastFree(v123, v121, v122, v7, v8, v9, v10, v11);
        }
        v40 = 0;
      }
      else
      {
        v40 = 1;
      }
LABEL_82:
      if (v152[40] && !v152[41])
      {
        __break(0xC471u);
        JUMPOUT(0x197FBF830);
      }
      if (LOBYTE(v171[1]) && !BYTE1(v171[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x197FBF810);
      }
      if (v40)
      {
LABEL_87:
        if ((v15 - 54) <= 0xF && ((1 << (v15 - 54)) & 0xC003) != 0)
        {
        }
        else
        {
          v42 = (unsigned __int16)JSC::B3::Air::relaxedMoveForType(*((_DWORD *)this[50] + 4));
          if (v41)
          {
            v48 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
            v49 = (JSC::B3::Value *)a2;
          }
          else
          {
            v48 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
            v49 = (JSC::B3::Value *)a3;
          }
        }
      }
      return;
    case 3u:
      v15 = 55;
      goto LABEL_11;
    case 4u:
      v15 = 54;
      goto LABEL_11;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FBF880);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::commitInternal(JSC::B3::_anonymous_namespace_::LowerToAir *this, JSC::B3::Value *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  JSC::B3::_anonymous_namespace_::LowerToAir *v6;

  if (a2)
  {
    v3 = *((unsigned int *)a2 + 2);
    v4 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 0x8000000000000000) != 0)
      v5 = 63;
    else
      v5 = *(_QWORD *)(2 * v4);
    if (v5 <= v3)
    {
      WTF::BitVector::resizeOutOfLine(this, v3 + 1, 0);
      v4 = *(_QWORD *)this;
    }
    if (v4 >= 0)
      v6 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(2 * v4 + 8);
    else
      v6 = this;
    *(_QWORD *)((char *)v6 + ((v3 >> 3) & 0x1FFFFFF8)) |= 1 << v3;
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendCAS(JSC::B3::_anonymous_namespace_::LowerToAir *this, JSC::B3::Value *a2, unsigned int a3)
{
  int v4;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  JSC::B3::Value **v19;
  JSC::B3::Value **v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  int v75;
  __int16 v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  BOOL v107;
  int v108;
  __int16 v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  int v207;
  int v208;
  unsigned int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  __int16 v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _OWORD *v224;
  __int128 *v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  int v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  JSC::B3::_anonymous_namespace_::LowerToAir *v234;
  uint64_t v235;
  unsigned int v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _OWORD *v255;
  uint64_t v256;
  uint64_t v257;
  __int128 *v258;
  __int128 v259;
  __int128 v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  BOOL v265;
  int v266;
  __int16 v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  uint64_t *v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _OWORD *v296;
  __int128 *v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  int v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _OWORD *v307;
  __int128 *v308;
  uint64_t v309;
  uint64_t v310;
  __int128 v311;
  __int128 v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  char v323;
  char v324;
  int v325;
  uint64_t v326;
  char v327;
  int v328;
  unsigned int v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  unsigned int v334;
  int v335;
  unsigned int v336;
  unsigned int v337;
  uint64_t v338;
  _BYTE v339[32];
  _OWORD v340[2];
  __int128 v341;
  _BYTE v342[25];
  __int128 v343;
  __int128 v344;
  uint64_t v345;
  __int16 v346;
  int v347;
  int v348;
  int v349;
  char v350;
  _BYTE v351[12];
  _BYTE v352[39];
  uint64_t v353;

  v353 = *MEMORY[0x1E0C80C00];
  if (!a2 || (v4 = *((unsigned __int8 *)a2 + 12), (v4 - 79) <= 0xFFFFFFF7))
  {
    __break(0xC471u);
    JUMPOUT(0x197FC09D4);
  }
  v7 = *(unsigned __int8 *)(*((_QWORD *)this + 50) + 12);
  v8 = v4 != 72;
  v9 = *((_DWORD *)a2 + 13);
  v10 = *((_DWORD *)a2 + 14);
  v11 = *((unsigned __int8 *)a2 + 60);
  if (v7 == 72)
  {
    if (a3)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC0A6CLL);
    }
    v12 = *((_QWORD *)this + 54);
    v13 = *(_DWORD *)(v12 + 176);
    *(_DWORD *)(v12 + 176) = v13 + 1;
    v14 = v13 + 33;
  }
  else
  {
    v15 = *((_QWORD *)this + 54);
    v16 = *(_DWORD *)(v15 + 176);
    if (v7 == 155)
    {
      v337 = v16 + 33;
      *(_DWORD *)(v15 + 176) = v16 + 2;
      v14 = v16 + 34;
      goto LABEL_11;
    }
    *(_DWORD *)(v15 + 176) = v16 + 1;
    v337 = v16 + 33;
  }
  if (v4 == 72)
  {
    v17 = *((_QWORD *)this + 54);
    v18 = *(_DWORD *)(v17 + 176);
    *(_DWORD *)(v17 + 176) = v18 + 1;
    v333 = v18 + 33;
    goto LABEL_12;
  }
LABEL_11:
  v333 = v14;
LABEL_12:
  v19 = (JSC::B3::Value **)JSC::B3::MemoryValue::child(a2, 0);
  v20 = (JSC::B3::Value **)JSC::B3::MemoryValue::child(a2, 1u);
  v335 = v4;
  v336 = v11;
  if (v7 == 155)
  {
    v26 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * **((unsigned int **)this + 48));
    v27 = *(_DWORD *)(v26 + 36);
    if (v27 <= a3)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC0B08);
    }
    if (v27 <= (a3 ^ 1))
    {
      __break(0xC471u);
      JUMPOUT(0x197FC0B10);
    }
    v28 = *(_QWORD *)(v26 + 24);
    v29 = (uint64_t *)(v28 + 16 * a3);
    v326 = *v29;
    v30 = *((_BYTE *)v29 + 8);
    v31 = v28 + 16 * (a3 ^ 1);
    v32 = *(_QWORD *)v31;
    v327 = *(_BYTE *)(v31 + 8);
    if (JSC::MacroAssemblerARM64::s_lseCheckState != 2)
    {
      v321 = *((_BYTE *)v29 + 8);
      v329 = a3;
      v330 = v14;
      v325 = v21;
      v8 = 1;
      if (JSC::MacroAssemblerARM64::s_lseCheckState)
        goto LABEL_29;
      JSC::MacroAssemblerARM64::s_lseCheckState = 1;
      goto LABEL_21;
    }
    v331 = *(_QWORD *)v31;
    v33 = v21;
    if (v11)
    {
      v34 = *v29;
      if (v11 != 1)
      {
        if (v11 == 4)
          goto LABEL_209;
LABEL_116:
        v205 = *(_DWORD *)(JSC::B3::MemoryValue::child(a2, 0) + 16);
        if (v205 >= 0x80000000)
          v205 = 0x80000000;
        v206 = v205 - 1;
        if (v206 >= 5)
        {
          __break(0xC471u);
          JUMPOUT(0x197FC0AE8);
        }
        if (v11)
        {
          v207 = v33;
          if (v11 == 1)
          {
            v208 = 207;
          }
          else if (v11 == 2)
          {
            v208 = 208;
          }
          else
          {
            v208 = 209;
          }
        }
        else
        {
          v208 = 206;
          v207 = v33;
        }
        v209 = *((_DWORD *)this + 91);
        if (!v209)
        {
          __break(0xC471u);
          JUMPOUT(0x197FC0B30);
        }
        v210 = v7;
        v211 = *((_QWORD *)this + 50);
        v212 = *((_QWORD *)this + 44) + 528 * v209 - 528;
        v213 = *(_WORD *)(v211 + 12);
        *(_QWORD *)v352 = 0;
        *(_WORD *)&v352[8] = 513;
        *(_DWORD *)&v352[12] = 1;
        *(_QWORD *)&v352[16] = v337;
        v352[24] = 0;
        v340[0] = *(_OWORD *)v339;
        v340[1] = *(_OWORD *)&v339[16];
        JSC::B3::Air::Inst::Inst<JSC::B3::Air::Tmp,JSC::B3::Air::Arg>((uint64_t *)&v341, v208, v211, (__int128 *)v352, v207, v340);
        v351[10] |= (v213 & 0x200) != 0;
        v221 = *(unsigned int *)(v212 + 12);
        if ((_DWORD)v221 == *(_DWORD *)(v212 + 8))
        {
          v231 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v212, v221 + 1, (unint64_t)&v341, v216, v217, v218, v219, v220);
          v293 = *(unsigned int *)(v212 + 12);
          v294 = *(_QWORD *)v212;
          v295 = *(_QWORD *)v212 + (v293 << 7);
          v296 = (_OWORD *)(v295 + 16);
          *(_QWORD *)v295 = v295 + 16;
          *(_QWORD *)(v295 + 8) = 3;
          v297 = *(__int128 **)v231;
          if (*(_QWORD *)v231 == v231 + 16)
          {
            v298 = *(unsigned int *)(v231 + 12);
            if ((_DWORD)v298)
            {
              v299 = 32 * v298;
              do
              {
                v300 = *v297;
                v301 = v297[1];
                v297 += 2;
                *v296 = v300;
                v296[1] = v301;
                v296 += 2;
                v299 -= 32;
              }
              while (v299);
            }
          }
          else
          {
            *(_QWORD *)v231 = v231 + 16;
            *(_QWORD *)v295 = v297;
            v316 = *(_DWORD *)(v231 + 8);
            *(_DWORD *)(v231 + 8) = 3;
            *(_DWORD *)(v295 + 8) = v316;
          }
          v302 = *(_DWORD *)(v231 + 12);
          *(_DWORD *)(v231 + 12) = 0;
          *(_DWORD *)(v295 + 12) = v302;
          v230 = v294 + (v293 << 7) + 112;
        }
        else
        {
          v222 = *(_QWORD *)v212;
          v223 = *(_QWORD *)v212 + (v221 << 7);
          v224 = (_OWORD *)(v223 + 16);
          *(_QWORD *)v223 = v223 + 16;
          *(_QWORD *)(v223 + 8) = 3;
          v225 = (__int128 *)v341;
          if ((_BYTE *)v341 == v342)
          {
            if (HIDWORD(v341))
            {
              v226 = 32 * HIDWORD(v341);
              do
              {
                v227 = *v225;
                v228 = v225[1];
                v225 += 2;
                *v224 = v227;
                v224[1] = v228;
                v224 += 2;
                v226 -= 32;
              }
              while (v226);
            }
          }
          else
          {
            *(_QWORD *)&v341 = v342;
            *(_QWORD *)v223 = v225;
            v286 = DWORD2(v341);
            DWORD2(v341) = 3;
            *(_DWORD *)(v223 + 8) = v286;
          }
          v229 = HIDWORD(v341);
          HIDWORD(v341) = 0;
          *(_DWORD *)(v223 + 12) = v229;
          v230 = v222 + (v221 << 7) + 112;
          v231 = (unint64_t)&v341;
        }
        v232 = *(_QWORD *)(v231 + 112);
        *(_DWORD *)(v230 + 7) = *(_DWORD *)(v231 + 119);
        *(_QWORD *)v230 = v232;
        ++*(_DWORD *)(v212 + 12);
        v233 = v341;
        if (v342 != (_BYTE *)v341 && (_QWORD)v341)
        {
          *(_QWORD *)&v341 = 0;
          DWORD2(v341) = 0;
          WTF::fastFree(v233, v214, v215, v216, v217, v218, v219, v220);
        }
        if (v210 == 72)
          return;
        if (v210 != 155)
        {
          v236 = *((_DWORD *)this + 91);
          if (!v236)
          {
            __break(0xC471u);
            JUMPOUT(0x197FC0B68);
          }
          if (v11 == 3)
            v237 = 283;
          else
            v237 = 282;
          v238 = *((_QWORD *)this + 44) + 528 * v236 - 528;
          v239 = *((_QWORD *)this + 50);
          *(_QWORD *)&v341 = v342;
          *((_QWORD *)&v341 + 1) = 3;
          v240 = WTF::fastMalloc((WTF *)0x80);
          DWORD2(v341) = 4;
          *(_QWORD *)&v341 = v240;
          v248 = v240 + 32 * HIDWORD(v341);
          *(_QWORD *)v248 = a3;
          *(_WORD *)(v248 + 8) = 526;
          *(_DWORD *)(v248 + 12) = 1;
          *(_QWORD *)(v248 + 16) = 0;
          *(_BYTE *)(v248 + 24) = 0;
          ++HIDWORD(v341);
          v249 = v341 + 32 * HIDWORD(v341);
          *(_QWORD *)v249 = 0;
          *(_WORD *)(v249 + 8) = 513;
          *(_DWORD *)(v249 + 12) = 1;
          *(_DWORD *)(v249 + 16) = v337;
          *(_DWORD *)(v249 + 20) = 0;
          *(_BYTE *)(v249 + 24) = 0;
          ++HIDWORD(v341);
          v250 = v341 + 32 * HIDWORD(v341);
          *(_QWORD *)v250 = 0;
          *(_WORD *)(v250 + 8) = 513;
          *(_DWORD *)(v250 + 12) = 1;
          *(_DWORD *)(v250 + 16) = v334;
          *(_DWORD *)(v250 + 20) = 0;
          *(_BYTE *)(v250 + 24) = 0;
          ++HIDWORD(v341);
          v251 = v341 + 32 * HIDWORD(v341);
          *(_QWORD *)v251 = 0;
          *(_WORD *)(v251 + 8) = 513;
          *(_DWORD *)(v251 + 12) = 1;
          *(_DWORD *)(v251 + 16) = v14;
          *(_DWORD *)(v251 + 20) = 0;
          *(_BYTE *)(v251 + 24) = 0;
          ++HIDWORD(v341);
          *(_QWORD *)v351 = v239;
          *(_DWORD *)&v351[8] = v237;
          v252 = *(unsigned int *)(v238 + 12);
          if ((_DWORD)v252 == *(_DWORD *)(v238 + 8))
          {
            v303 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v238, v252 + 1, (unint64_t)&v341, v243, v244, v245, v246, v247);
            v304 = *(unsigned int *)(v238 + 12);
            v305 = *(_QWORD *)v238;
            v306 = *(_QWORD *)v238 + (v304 << 7);
            v307 = (_OWORD *)(v306 + 16);
            *(_QWORD *)v306 = v306 + 16;
            *(_QWORD *)(v306 + 8) = 3;
            v308 = *(__int128 **)v303;
            if (*(_QWORD *)v303 == v303 + 16)
            {
              v309 = *(unsigned int *)(v303 + 12);
              if ((_DWORD)v309)
              {
                v310 = 32 * v309;
                do
                {
                  v311 = *v308;
                  v312 = v308[1];
                  v308 += 2;
                  *v307 = v311;
                  v307[1] = v312;
                  v307 += 2;
                  v310 -= 32;
                }
                while (v310);
              }
            }
            else
            {
              *(_QWORD *)v303 = v303 + 16;
              *(_QWORD *)v306 = v308;
              v317 = *(_DWORD *)(v303 + 8);
              *(_DWORD *)(v303 + 8) = 3;
              *(_DWORD *)(v306 + 8) = v317;
            }
            v313 = *(_DWORD *)(v303 + 12);
            *(_DWORD *)(v303 + 12) = 0;
            *(_DWORD *)(v306 + 12) = v313;
            v314 = v305 + (v304 << 7);
            v315 = *(_QWORD *)(v303 + 112);
            *(_DWORD *)(v314 + 119) = *(_DWORD *)(v303 + 119);
            *(_QWORD *)(v314 + 112) = v315;
          }
          else
          {
            v253 = *(_QWORD *)v238;
            v254 = *(_QWORD *)v238 + (v252 << 7);
            v255 = (_OWORD *)(v254 + 16);
            *(_QWORD *)v254 = v254 + 16;
            *(_QWORD *)(v254 + 8) = 3;
            v256 = v341;
            if ((_BYTE *)v341 == v342)
            {
              if (HIDWORD(v341))
              {
                v257 = 32 * HIDWORD(v341);
                v258 = (__int128 *)v342;
                do
                {
                  v259 = *v258;
                  v260 = v258[1];
                  v258 += 2;
                  *v255 = v259;
                  v255[1] = v260;
                  v255 += 2;
                  v257 -= 32;
                }
                while (v257);
              }
            }
            else
            {
              *(_QWORD *)&v341 = v342;
              *(_QWORD *)v254 = v256;
              v292 = DWORD2(v341);
              DWORD2(v341) = 3;
              *(_DWORD *)(v254 + 8) = v292;
            }
            v261 = HIDWORD(v341);
            HIDWORD(v341) = 0;
            *(_DWORD *)(v254 + 12) = v261;
            v262 = v253 + (v252 << 7);
            v263 = *(_QWORD *)v351;
            *(_DWORD *)(v262 + 119) = *(_DWORD *)&v351[7];
            *(_QWORD *)(v262 + 112) = v263;
          }
          ++*(_DWORD *)(v238 + 12);
          v264 = v341;
          if (v342 != (_BYTE *)v341 && (_QWORD)v341)
          {
            *(_QWORD *)&v341 = 0;
            DWORD2(v341) = 0;
            WTF::fastFree(v264, v241, v242, v243, v244, v245, v246, v247);
          }
          return;
        }
        if (v11 >= 3)
        {
          if (v11 != 3)
          {
            if (v11 == 4)
            {
              __break(0xC471u);
              JUMPOUT(0x197FC0828);
            }
LABEL_171:
            v287 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * **((unsigned int **)this + 48));
            v288 = (uint64_t *)(v287 + 24);
            WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v287 + 24, 2uLL, v215, v216, v217, v218, v219, v220);
            v289 = *(_DWORD *)(v287 + 36);
            if (!v289)
            {
              __break(0xC471u);
              JUMPOUT(0x197FC0B70);
            }
            v290 = *v288;
            *(_QWORD *)v290 = v34;
            *(_BYTE *)(v290 + 8) = v30;
            if (v289 != 1)
            {
              v291 = *v288;
              *(_QWORD *)(v291 + 16) = v331;
              *(_BYTE *)(v291 + 24) = v327;
              return;
            }
LABEL_209:
            __break(0xC471u);
            JUMPOUT(0x197FBFBD0);
          }
          HIDWORD(v341) = 1;
          *(_QWORD *)v342 = 0;
          v342[8] = 0;
          WORD4(v341) = 526;
          *(_QWORD *)&v341 = 0;
          v234 = this;
          v235 = 292;
        }
        else
        {
          HIDWORD(v341) = 1;
          *(_QWORD *)v342 = 0;
          v342[8] = 0;
          WORD4(v341) = 526;
          *(_QWORD *)&v341 = 0;
          v234 = this;
          v235 = 291;
        }
        goto LABEL_171;
      }
      v200 = 105;
    }
    else
    {
      v200 = 103;
      v34 = *v29;
    }
    goto LABEL_116;
  }
  if (JSC::MacroAssemblerARM64::s_lseCheckState == 2)
  {
    v33 = v21;
    v331 = 0;
    v34 = 0;
    v327 = 0;
    v30 = 0;
    goto LABEL_116;
  }
  v329 = a3;
  v330 = v14;
  v325 = v21;
  if (JSC::MacroAssemblerARM64::s_lseCheckState)
  {
    v327 = 0;
    v321 = 0;
    v32 = 0;
    v326 = 0;
    goto LABEL_29;
  }
  v321 = 0;
  v326 = 0;
  v327 = 0;
  v32 = 0;
  JSC::MacroAssemblerARM64::s_lseCheckState = 1;
LABEL_21:
  if (!JSC::MacroAssemblerARM64::s_jscvtCheckState)
    JSC::MacroAssemblerARM64::s_jscvtCheckState = 1;
LABEL_29:
  v35 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * **((unsigned int **)this + 48));
  v36 = JSC::B3::GenericBlockInsertionSet<JSC::B3::Air::BasicBlock>::insert((uint64_t)this + 440, *(_DWORD *)v35 + 1, *(double *)(v35 + 104));
  v37 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * **((unsigned int **)this + 48));
  v38 = JSC::B3::GenericBlockInsertionSet<JSC::B3::Air::BasicBlock>::insert((uint64_t)this + 440, *(_DWORD *)v37 + 1, *(double *)(v37 + 104));
  if (v8)
  {
    v318 = 0;
    if (v7 == 155)
    {
      v39 = v327;
      v320 = 0;
      goto LABEL_34;
    }
  }
  else
  {
    v40 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * **((unsigned int **)this + 48));
    v318 = JSC::B3::GenericBlockInsertionSet<JSC::B3::Air::BasicBlock>::insert((uint64_t)this + 440, *(_DWORD *)v40 + 1, *(double *)(v40 + 104));
  }
  v41 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * **((unsigned int **)this + 48));
  v32 = JSC::B3::GenericBlockInsertionSet<JSC::B3::Air::BasicBlock>::insert((uint64_t)this + 440, *(_DWORD *)v41 + 1, *(double *)(v41 + 104));
  v39 = 0;
  v320 = v32;
LABEL_34:
  v328 = v7;
  v42 = v335 != 72 || v9 == v10;
  v43 = v42;
  v323 = v43;
  v324 = v39;
  if (v42)
  {
    v49 = 0;
    v322 = 0;
    v44 = v32;
    v45 = v39;
    v46 = v39;
    v47 = v32;
    if (v335 != 72)
      goto LABEL_50;
  }
  else
  {
    v48 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * **((unsigned int **)this + 48));
    v49 = JSC::B3::GenericBlockInsertionSet<JSC::B3::Air::BasicBlock>::insert((uint64_t)this + 440, *(_DWORD *)v48 + 1, *(double *)(v48 + 104));
    v39 = v324;
  }
  v45 = 0;
  if (v9 == v10)
    v46 = v39;
  else
    v46 = 0;
  if (v9 == v10)
    v47 = v32;
  else
    v47 = v49;
  v44 = v32;
  v322 = v49;
  v32 = v36;
LABEL_50:
  v50 = v45;
  v319 = v44;
  v332 = v32;
  *(_QWORD *)&v340[0] = 0;
  v338 = 0;
  v57 = *(_QWORD *)&v340[0];
  v58 = (uint64_t *)(*(_QWORD *)&v340[0] + 24);
  WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(*(_QWORD *)&v340[0] + 24, 1uLL, v59, v60, v61, v62, v63, v64);
  if (!*(_DWORD *)(v57 + 36))
  {
    __break(0xC471u);
    JUMPOUT(0x197FC0AF0);
  }
  v71 = *v58;
  *(_QWORD *)v71 = v36;
  *(_BYTE *)(v71 + 8) = 0;
  v72 = *((_QWORD *)this + 50);
  if (*((_DWORD *)a2 + 13) == *((_DWORD *)a2 + 14))
  {
    if (!v336)
    {
      v73 = 250;
      goto LABEL_64;
    }
    if (v336 == 1)
    {
      v73 = 254;
      goto LABEL_64;
    }
    v74 = v336 == 2;
    v73 = 263;
    v75 = 258;
  }
  else
  {
    if (!v336)
    {
      v73 = 251;
      goto LABEL_64;
    }
    if (v336 == 1)
    {
      v73 = 255;
      goto LABEL_64;
    }
    v74 = v336 == 2;
    v73 = 264;
    v75 = 259;
  }
  if (v74)
    v73 = v75;
LABEL_64:
  v76 = *(_WORD *)(v72 + 12);
  *(_OWORD *)v342 = *(_OWORD *)v339;
  *(_OWORD *)&v342[9] = *(_OWORD *)&v339[9];
  *(_QWORD *)&v341 = v342;
  *(_QWORD *)&v343 = 0;
  WORD4(v343) = 513;
  HIDWORD(v343) = 1;
  *(_QWORD *)&v344 = v337;
  BYTE8(v344) = 0;
  *((_QWORD *)&v341 + 1) = 0x200000003;
  *(_QWORD *)v351 = v72;
  *(_DWORD *)&v351[8] = v73;
  v351[10] = (v76 & 0x200) != 0;
  JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Inst>(v36, (unsigned int *)&v341, v65, v66, v67, v68, v69, v70);
  v84 = v341;
  if (v342 != (_BYTE *)v341 && (_QWORD)v341)
  {
    *(_QWORD *)&v341 = 0;
    DWORD2(v341) = 0;
    WTF::fastFree(v84, v77, v78, v79, v80, v81, v82, v83);
  }
  HIDWORD(v341) = 1;
  *(_QWORD *)v342 = 0;
  v342[8] = 0;
  WORD4(v341) = 526;
  *(_QWORD *)&v341 = 1;
  if (v336 == 3)
    v85 = 292;
  else
    v85 = 291;
  JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v36, (void *)v85, *((_QWORD *)this + 50), &v341, v337, v334, v82, v83);
  v86 = (uint64_t *)(v36 + 24);
  WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v36 + 24, 2uLL, v87, v88, v89, v90, v91, v92);
  v99 = *(_DWORD *)(v36 + 36);
  if (!v99)
  {
    __break(0xC471u);
    JUMPOUT(0x197FC0AF8);
  }
  v100 = *v86;
  *(_QWORD *)v100 = v47;
  *(_BYTE *)(v100 + 8) = v46;
  if (v99 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197FC0B00);
  }
  v101 = *v86;
  *(_QWORD *)(v101 + 16) = v38;
  *(_BYTE *)(v101 + 24) = 0;
  v102 = *((_QWORD *)this + 50);
  if (*((_DWORD *)a2 + 13) != *((_DWORD *)a2 + 14))
  {
    v103 = v336;
    v104 = v330;
    if (v336)
    {
      v105 = v333;
      if (v336 == 1)
      {
        v106 = 257;
        goto LABEL_86;
      }
      v107 = v336 == 2;
      v106 = 267;
      v108 = 261;
      goto LABEL_84;
    }
    v106 = 253;
LABEL_81:
    v105 = v333;
    goto LABEL_86;
  }
  v103 = v336;
  v104 = v330;
  if (!v336)
  {
    v106 = 252;
    goto LABEL_81;
  }
  v105 = v333;
  if (v336 == 1)
  {
    v106 = 256;
    goto LABEL_86;
  }
  v107 = v336 == 2;
  v106 = 266;
  v108 = 260;
LABEL_84:
  if (v107)
    v106 = v108;
LABEL_86:
  v109 = *(_WORD *)(v102 + 12);
  *(_OWORD *)&v352[16] = *(_OWORD *)&v339[9];
  *(_OWORD *)&v352[7] = *(_OWORD *)v339;
  *(_QWORD *)&v341 = v342;
  *(_QWORD *)v342 = 0;
  *(_WORD *)&v342[8] = 513;
  *(_DWORD *)&v342[12] = 1;
  *(_DWORD *)&v342[16] = v325;
  *(_DWORD *)&v342[20] = 0;
  v342[24] = 0;
  v343 = *(_OWORD *)v339;
  v344 = *(_OWORD *)&v352[23];
  v345 = 0;
  v346 = 513;
  v347 = 1;
  v348 = v105;
  v349 = 0;
  v350 = 0;
  *((_QWORD *)&v341 + 1) = 0x300000003;
  *(_QWORD *)v351 = v102;
  *(_DWORD *)&v351[8] = v106;
  v351[10] = (v109 & 0x200) != 0;
  JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Inst>(v38, (unsigned int *)&v341, v93, v94, v95, v96, v97, v98);
  v117 = v341;
  if (v342 != (_BYTE *)v341 && (_QWORD)v341)
  {
    *(_QWORD *)&v341 = 0;
    DWORD2(v341) = 0;
    WTF::fastFree(v117, v110, v111, v112, v113, v114, v115, v116);
  }
  if (v328 == 155)
  {
    HIDWORD(v341) = 1;
    *(_QWORD *)v342 = 0;
    v342[8] = 0;
    WORD4(v341) = 527;
    *(_QWORD *)&v341 = 0;
    JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v38, (void *)0x126, *((_QWORD *)this + 50), &v341, v104, v104, v115, v116);
    v118 = (uint64_t *)(v38 + 24);
    WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v38 + 24, 2uLL, v119, v120, v121, v122, v123, v124);
    v131 = *(_DWORD *)(v38 + 36);
    if (!v131)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC0B18);
    }
    v132 = *v118;
    *(_QWORD *)v132 = v326;
    *(_BYTE *)(v132 + 8) = v321;
    if (v131 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC0B20);
    }
    v133 = *v118;
    *(_QWORD *)(v133 + 16) = v332;
    *(_BYTE *)(v133 + 24) = v50;
    v134 = v338;
    WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v338 + 24, 0, v125, v126, v127, v128, v129, v130);
    if (*(_DWORD *)(v134 + 20))
    {
      __break(0xC471u);
      JUMPOUT(0x197FC0AA8);
    }
    JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&>(v134, (void *)0x1BD, *((_QWORD *)this + 50), v135, v136, v137, v138, v139);
  }
  else
  {
    if (v335 == 72)
    {
      HIDWORD(v341) = 1;
      *(_QWORD *)v342 = 0;
      v342[8] = 0;
      WORD4(v341) = 527;
      *(_QWORD *)&v341 = 0;
      JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v38, (void *)0x126, *((_QWORD *)this + 50), &v341, v105, v105, v115, v116);
      v157 = (uint64_t *)(v38 + 24);
      WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v38 + 24, 2uLL, v158, v159, v160, v161, v162, v163);
      v167 = *(_DWORD *)(v38 + 36);
      if (!v167)
      {
        __break(0xC471u);
        JUMPOUT(0x197FC0B50);
      }
      v168 = *v157;
      *(_QWORD *)v168 = v318;
      *(_BYTE *)(v168 + 8) = 0;
      if (v167 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197FC0B58);
      }
      v169 = *v157;
      *(_QWORD *)(v169 + 16) = v36;
      *(_BYTE *)(v169 + 24) = 0;
      HIDWORD(v341) = 1;
      *(_QWORD *)v342 = 0;
      v342[8] = 0;
      WORD4(v341) = 514;
      *(_QWORD *)&v341 = v329 ^ 1;
      JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &>(v318, (void *)0x5A, *((_QWORD *)this + 50), &v341, v104, v164, v165, v166);
      JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&>(v318, (void *)0x149, *((_QWORD *)this + 50), v170, v171, v172, v173, v174);
      v175 = v338;
      WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v318 + 24, 1uLL, v176, v177, v178, v179, v180, v181);
      if (!*(_DWORD *)(v318 + 36))
      {
        __break(0xC471u);
        JUMPOUT(0x197FC0B60);
      }
      v182 = *(_QWORD *)(v318 + 24);
      *(_QWORD *)v182 = v175;
      *(_BYTE *)(v182 + 8) = 0;
      v146 = v338;
    }
    else
    {
      if ((v329 & 1) == 0)
      {
        HIDWORD(v341) = 1;
        *(_QWORD *)v342 = 0;
        v342[8] = 0;
        WORD4(v341) = 516;
        *(_QWORD *)&v341 = 1;
        JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v38, (void *)0x46, *((_QWORD *)this + 50), &v341, v104, v104, v115, v116);
      }
      JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&>(v38, (void *)0x149, *((_QWORD *)this + 50), v112, v113, v114, v115, v116);
      v146 = v338;
      WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v38 + 24, 1uLL, v147, v148, v149, v150, v151, v152);
      if (!*(_DWORD *)(v38 + 36))
      {
        __break(0xC471u);
        JUMPOUT(0x197FC0B48);
      }
      v156 = *(_QWORD *)(v38 + 24);
      *(_QWORD *)v156 = v146;
      *(_BYTE *)(v156 + 8) = 0;
    }
    HIDWORD(v341) = 1;
    *(_QWORD *)v342 = 0;
    v342[8] = 0;
    WORD4(v341) = 514;
    *(_QWORD *)&v341 = v329;
    JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &>(v320, (void *)0x5A, *((_QWORD *)this + 50), &v341, v104, v153, v154, v155);
    JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&>(v320, (void *)0x149, *((_QWORD *)this + 50), v183, v184, v185, v186, v187);
    WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v320 + 24, 1uLL, v188, v189, v190, v191, v192, v193);
    if (!*(_DWORD *)(v320 + 36))
    {
      __break(0xC471u);
      JUMPOUT(0x197FC0B28);
    }
    v194 = *(_QWORD *)(v320 + 24);
    *(_QWORD *)v194 = v146;
    *(_BYTE *)(v194 + 8) = 0;
  }
  if ((v323 & 1) == 0)
  {
    v195 = *((_QWORD *)this + 54);
    v196 = *(_DWORD *)(v195 + 176);
    *(_DWORD *)(v195 + 176) = v196 + 1;
    v197 = (v196 + 33);
    v198 = *((_QWORD *)this + 50);
    if (*((_DWORD *)a2 + 13) == *((_DWORD *)a2 + 14))
    {
      if (v103)
      {
        if (v103 == 1)
        {
          v199 = 256;
          goto LABEL_159;
        }
        v265 = v103 == 2;
        v199 = 266;
        v266 = 260;
LABEL_157:
        if (v265)
          v199 = v266;
        goto LABEL_159;
      }
      v199 = 252;
    }
    else if (v103)
    {
      if (v103 != 1)
      {
        v265 = v103 == 2;
        v199 = 267;
        v266 = 261;
        goto LABEL_157;
      }
      v199 = 257;
    }
    else
    {
      v199 = 253;
    }
LABEL_159:
    v267 = *(_WORD *)(v198 + 12);
    *(_OWORD *)&v352[16] = *(_OWORD *)&v339[9];
    *(_OWORD *)&v352[7] = *(_OWORD *)v339;
    *(_QWORD *)&v341 = v342;
    *(_QWORD *)v342 = 0;
    *(_WORD *)&v342[8] = 513;
    *(_DWORD *)&v342[12] = 1;
    *(_DWORD *)&v342[16] = v337;
    *(_DWORD *)&v342[20] = 0;
    v342[24] = 0;
    v343 = *(_OWORD *)v339;
    v344 = *(_OWORD *)&v352[23];
    v345 = 0;
    v346 = 513;
    v347 = 1;
    v348 = v197;
    v349 = 0;
    v350 = 0;
    *((_QWORD *)&v341 + 1) = 0x300000003;
    *(_QWORD *)v351 = v198;
    *(_DWORD *)&v351[8] = v199;
    v351[10] = (v267 & 0x200) != 0;
    JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Inst>(v322, (unsigned int *)&v341, v140, v141, v142, v143, v144, v145);
    v275 = v341;
    if (v342 != (_BYTE *)v341 && (_QWORD)v341)
    {
      *(_QWORD *)&v341 = 0;
      DWORD2(v341) = 0;
      WTF::fastFree(v275, v268, v269, v270, v271, v272, v273, v274);
    }
    HIDWORD(v341) = 1;
    *(_QWORD *)v342 = 0;
    v342[8] = 0;
    WORD4(v341) = 527;
    *(_QWORD *)&v341 = 0;
    JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v322, (void *)0x126, *((_QWORD *)this + 50), &v341, v197, v197, v273, v274);
    v276 = (uint64_t *)(v322 + 24);
    WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v322 + 24, 2uLL, v277, v278, v279, v280, v281, v282);
    v283 = *(_DWORD *)(v322 + 36);
    if (!v283)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC0B38);
    }
    v284 = *v276;
    *(_QWORD *)v284 = v319;
    *(_BYTE *)(v284 + 8) = v324;
    if (v283 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC0B40);
    }
    v285 = *v276;
    *(_QWORD *)(v285 + 16) = v36;
    *(_BYTE *)(v285 + 24) = 0;
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#9}::operator()(JSC::B3::Value **a1, unsigned int *a2, JSC::B3::Value *this)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  JSC::B3::Value **v11;
  JSC::B3::Value **v12;
  int v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  JSC::B3::Value **v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::B3::Value *v26;
  _QWORD v27[3];
  JSC::B3::Value *v28;
  JSC::B3::Value *v29;

  v29 = this;
  if (*((_BYTE *)this + 12) != 24)
    return 0;
  v28 = (JSC::B3::Value *)a2;
  v7 = *(_QWORD *)JSC::B3::Value::child(this, 1u);
  if (a2)
  {
    v8 = a2[2];
    v9 = (_QWORD *)(2 * (_QWORD)*a1);
    v10 = ((unint64_t)*a1 & 0x8000000000000000) != 0 ? 63 : *v9;
    if (v10 > v8)
    {
      v11 = (JSC::B3::Value **)(v9 + 1);
      v12 = (uint64_t)*a1 >= 0 ? v11 : a1;
      if (((*(unint64_t *)((char *)v12 + ((v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1) != 0)
        return 0;
    }
  }
  v13 = *(_WORD *)(v7 + 12) & 0xFFF;
  if (v7)
    v14 = v13 == 3;
  else
    v14 = 0;
  if (v14)
  {
    v16 = *(int *)(v7 + 40);
  }
  else
  {
    if (v7)
      v15 = v13 == 4;
    else
      v15 = 0;
    if (!v15)
      return 0;
    v16 = *(_QWORD *)(v7 + 40);
  }
  if (v16 != -1)
    return 0;
  v27[0] = a1;
  v27[1] = &v29;
  v27[2] = &v28;
  v17 = (JSC::B3::Value **)JSC::B3::Value::child(this, 0);
  {
    v26 = *(JSC::B3::Value **)JSC::B3::Value::child(v29, 0);
    v18 = *((_DWORD *)a1[50] + 4);
    if (v18 >= 0x80000000)
      v18 = 0x80000000;
    if (v18 == 2)
    {
      v19 = 157;
    }
    else
    {
      if (v18 != 1)
        return 0;
      v19 = 156;
    }
    if ((WTF::IndexSet<JSC::B3::Value *>::contains((uint64_t *)a1, (uint64_t)&v26) & 1) == 0)
    {
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#10}::operator()(uint64_t a1, JSC::B3::Value *a2, unsigned __int8 *a3)
{
  int v3;
  unint64_t v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = a3[12];
  switch(v3)
  {
    case 25:
      v6 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 16);
      if (v6 >= 0x80000000)
        v6 = 0x80000000;
      v7 = v6 - 1;
      if (v7 < 4)
      {
        v4 = 0x1BD01BD00C100BEuLL >> (16 * v7);
      }
      break;
    case 27:
      v8 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 16);
      if (v8 >= 0x80000000)
        v8 = 0x80000000;
      v9 = v8 - 1;
      if (v9 < 4)
      {
        v10 = 16 * v9;
        v11 = 12779712;
LABEL_18:
        v4 = (v11 | 0x1BD01BD00000000uLL) >> v10;
      }
      break;
    case 26:
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 16);
      if (v12 >= 0x80000000)
        v12 = 0x80000000;
      v13 = v12 - 1;
      if (v13 < 4)
      {
        v10 = 16 * v13;
        v11 = 12714175;
        goto LABEL_18;
      }
      break;
  }
  LOWORD(v4) = 445;
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendBinOp<(JSC::B3::Air::Opcode)70,(JSC::B3::Air::Opcode)71,(JSC::B3::Air::Opcode)56,(JSC::B3::Air::Opcode)57,(JSC::B3::Commutativity)0>(JSC::B3::Value **this, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  _BOOL4 v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::B3::_anonymous_namespace_::LowerToAir *v36;
  JSC::B3::Value *v37;
  int v38;
  JSC::ARM64LogicalImmediate *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::B3::_anonymous_namespace_::LowerToAir *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  char v53;
  char v54;
  unsigned int v55;
  JSC::B3::Value *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  char v89;
  int v90;
  int v91;
  char v92;
  unsigned int v93;
  JSC::B3::Value *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  unint64_t v103;
  unsigned __int16 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  JSC::B3::Value *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int16 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  JSC::B3::Value *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  unint64_t v132;
  int v133;
  JSC::B3::Value *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  JSC::B3::Value **v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  JSC::B3::Value **v156;
  __int16 v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  _OWORD v163[2];
  _BYTE v164[48];
  __int128 v165;
  _BYTE v166[25];
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  __int16 v170;
  int v171;
  int v172;
  int v173;
  char v174;
  JSC::B3::Value *v175;
  unsigned int v176;
  uint64_t v177;
  __int16 v178;
  __int16 v179;
  int v180;
  uint64_t v181;
  char v182;
  JSC::B3::Value *v183[2];
  _BYTE v184[39];
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 16);
  if (v3 >= 0x80000000)
    v3 = 0x80000000;
  switch(v3)
  {
    case 1u:
      v38 = *(_WORD *)(a3 + 12) & 0xFFF;
      if (a3 && v38 == 3)
      {
        v39 = (JSC::ARM64LogicalImmediate *)*(int *)(a3 + 40);
      }
      else
      {
        if (!a3 || v38 != 4)
          goto LABEL_135;
        v39 = *(JSC::ARM64LogicalImmediate **)(a3 + 40);
      }
      if (JSC::ARM64LogicalImmediate::create32(v39) != -1)
      {
        HIDWORD(v165) = 1;
        *(_QWORD *)v166 = 0;
        v166[8] = 0;
        WORD4(v165) = 516;
        *(_QWORD *)&v165 = v39;
        v44 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
        v45 = 70;
        goto LABEL_78;
      }
LABEL_135:
      v15 = 70;
      goto LABEL_11;
    case 2u:
      v13 = *(_WORD *)(a3 + 12) & 0xFFF;
      if (a3 && v13 == 3)
      {
        v14 = *(int *)(a3 + 40);
      }
      else
      {
        if (!a3 || v13 != 4)
          goto LABEL_10;
        v14 = *(_QWORD *)(a3 + 40);
      }
      if (JSC::ARM64LogicalImmediate::create64(v14) == -1)
      {
LABEL_10:
        v15 = 71;
LABEL_11:
        v16 = *(_WORD *)(a3 + 12) & 0xFFF;
        if (a3 && v16 == 3)
        {
          v46 = *(int *)(a3 + 40);
        }
        else
        {
          if (!a3 || v16 != 4)
            goto LABEL_15;
          v46 = *(_QWORD *)(a3 + 40);
        }
        if ((unint64_t)(v46 + 4095) < 0x1FFF)
        {
          if (v15 - 58 > 7)
            goto LABEL_15;
        }
        else if ((v46 & 0xFFF) != 0
               || ((v47 = v46 >> 12, v48 = (unint64_t)v46 >> 24, (unint64_t)(v47 + 4095) >= 0x1000)
                 ? (v49 = v48 == 0)
                 : (v49 = 1),
                   !v49 || v15 - 58 >= 8))
        {
LABEL_15:
          if (a2 == a3)
          {
LABEL_67:
            if (v15 - 58 <= 0xD && ((1 << (v15 - 58)) & 0x3CFF) != 0)
            {
            }
            else
            {
              v30 = (unsigned __int16)JSC::B3::Air::relaxedMoveForType(*((_DWORD *)this[50] + 4));
              if (v29)
              {
                v36 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
                v37 = (JSC::B3::Value *)a2;
              }
              else
              {
                v36 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
                v37 = (JSC::B3::Value *)a3;
              }
            }
          }
          else
          {
            if (*(_BYTE *)(a2 + 12) == 67)
            {
              v18 = v177;
              v17 = v178;
            }
            else
            {
              v17 = 0;
              v18 = 0;
              v177 = 0;
              v178 = 512;
              v180 = 1;
              v181 = 0;
              v182 = 0;
              memset(v183, 0, 11);
            }
            if (v18)
              v19 = 0;
            else
              v19 = v17 == 0;
            v20 = v19;
            v21 = v17;
            if (v19)
            {
              v21 = 0;
              if (!v181 && v180 == 1)
                v21 = v183[0] != 0;
            }
            switch(v15)
            {
              case ':':
              case ';':
              case '<':
              case '=':
              case '>':
              case '?':
              case '@':
              case 'A':
                goto LABEL_97;
              case 'D':
                if (v21 == 4)
                  goto LABEL_98;
                v21 = (char)v21;
LABEL_97:
                if (v21 == 1)
                  goto LABEL_98;
                goto LABEL_31;
              case 'E':
              case 'G':
                if (((char)v21 | 4) != 5)
                  goto LABEL_31;
                goto LABEL_98;
              case 'F':
                if (v21 != 1 && (char)v21 != 4)
                  goto LABEL_31;
LABEL_98:
                v159 = v15;
                v161 = v12;
                v51 = v180;
                v50 = v181;
                if ((_DWORD)v181)
                  v20 = 0;
                v52 = HIDWORD(v181);
                if (v20 == 1 && !HIDWORD(v181) && v180 == 1)
                {
                  if (v183[0])
                  {
                    v53 = 0;
                    v52 = 0;
                    v51 = 1;
                    v54 = 2;
                    LOBYTE(v17) = 1;
                    goto LABEL_107;
                  }
                }
                else if (v183[0])
                {
                  v149 = *((unsigned int *)v183[0] + 2);
                  v150 = (uint64_t)*this;
                  if (((unint64_t)*this & 0x8000000000000000) != 0)
                    v151 = 63;
                  else
                    v151 = *(_QWORD *)(2 * v150);
                  if (v151 <= v149)
                  {
                    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)this, v149 + 1, 0);
                    v150 = (uint64_t)*this;
                  }
                  if (v150 >= 0)
                    v152 = (JSC::B3::Value **)(2 * v150 + 8);
                  else
                    v152 = this;
                  *(JSC::B3::Value **)((char *)v152 + ((v149 >> 3) & 0x1FFFFFF8)) = (JSC::B3::Value *)(*(unint64_t *)((char *)v152 + ((v149 >> 3) & 0x1FFFFFF8)) | (1 << v149));
                }
                v54 = HIBYTE(v178);
                LOWORD(v15) = v179;
                v53 = v182;
LABEL_107:
                v56 = this[50];
                *(_QWORD *)v166 = v18;
                v166[8] = v17;
                v166[9] = v54;
                *(_WORD *)&v166[10] = v15;
                *(_DWORD *)&v166[12] = v51;
                *(_DWORD *)&v166[16] = v50;
                *(_DWORD *)&v166[20] = v52;
                v166[24] = v53;
                *(_QWORD *)&v165 = v166;
                *(_QWORD *)&v167 = 0;
                WORD4(v167) = 513;
                HIDWORD(v167) = 1;
                *(_QWORD *)&v168 = v55;
                BYTE8(v168) = 0;
                v169 = 0;
                v170 = 513;
                v171 = 1;
                v172 = v161;
                v173 = 0;
                v174 = 0;
                *((_QWORD *)&v165 + 1) = 0x300000003;
                v175 = v56;
                v176 = v159;
                BYTE2(v176) = BYTE2(v183[1]);
                v70 = v165;
                if (v166 != (_BYTE *)v165)
                {
LABEL_108:
                  if (v70)
                  {
                    *(_QWORD *)&v165 = 0;
                    DWORD2(v165) = 0;
                    WTF::fastFree(v70, v63, v64, v65, v66, v67, v68, v69);
                  }
                }
                break;
              default:
LABEL_31:
                if (v20)
                {
                  v17 = 0;
                  if (!v181 && v180 == 1)
                    v17 = v183[0] != 0;
                }
                switch(v15)
                {
                  case 'D':
                  case 'E':
                  case 'F':
                  case 'G':
                    if (v17 != 1)
                      goto LABEL_36;
                    v104 = JSC::B3::Air::relaxedMoveForType(*((_DWORD *)this[50] + 4));
                    v110 = this[50];
                    *(_OWORD *)v166 = *(_OWORD *)v164;
                    *(_OWORD *)&v166[9] = *(_OWORD *)&v164[9];
                    *(_QWORD *)&v165 = v166;
                    *(_QWORD *)&v167 = 0;
                    WORD4(v167) = 513;
                    HIDWORD(v167) = 1;
                    *(_QWORD *)&v168 = v12;
                    BYTE8(v168) = 0;
                    *((_QWORD *)&v165 + 1) = 0x200000003;
                    v175 = v110;
                    v176 = v15;
                    BYTE2(v176) = BYTE2(v183[1]);
                    v70 = v165;
                    if (v166 != (_BYTE *)v165)
                      goto LABEL_108;
                    break;
                  default:
LABEL_36:
                    if (*(_BYTE *)(a3 + 12) == 67)
                    {
                      v23 = *(_QWORD *)v164;
                      v22 = v164[8];
                    }
                    else
                    {
                      v22 = 0;
                      v23 = 0;
                      *(_QWORD *)v164 = 0;
                      *(_WORD *)&v164[8] = 512;
                      *(_DWORD *)&v164[12] = 1;
                      *(_QWORD *)&v164[16] = 0;
                      v164[24] = 0;
                      memset(&v164[32], 0, 11);
                    }
                    if (v23)
                      v24 = 0;
                    else
                      v24 = v22 == 0;
                    v25 = v24;
                    v26 = v22;
                    if (v24)
                    {
                      v26 = 0;
                      if (!*(_QWORD *)&v164[16] && *(_DWORD *)&v164[12] == 1)
                        v26 = *(_QWORD *)&v164[32] != 0;
                    }
                    switch(v15)
                    {
                      case ':':
                      case ';':
                      case '<':
                      case '=':
                      case '>':
                      case '?':
                      case '@':
                      case 'A':
                        if ((v26 - 1) < 2)
                          goto LABEL_151;
                        goto LABEL_50;
                      case 'D':
                      case 'E':
                      case 'F':
                      case 'G':
                        if (!v26)
                          goto LABEL_50;
LABEL_151:
                        v134 = this[50];
                        *(_OWORD *)&v184[16] = *(_OWORD *)((char *)v163 + 9);
                        *(_OWORD *)&v184[7] = v163[0];
                        *(_QWORD *)&v165 = v166;
                        *(_QWORD *)v166 = 0;
                        *(_WORD *)&v166[8] = 513;
                        *(_DWORD *)&v166[12] = 1;
                        *(_DWORD *)&v166[16] = v133;
                        *(_DWORD *)&v166[20] = 0;
                        v166[24] = 0;
                        v167 = v163[0];
                        v168 = *(_OWORD *)&v184[23];
                        v169 = 0;
                        v170 = 513;
                        v171 = 1;
                        v172 = v12;
                        v173 = 0;
                        v174 = 0;
                        *((_QWORD *)&v165 + 1) = 0x300000003;
                        v175 = v134;
                        v176 = v15;
                        BYTE2(v176) = v164[42];
                        v164[41] = 1;
                        v143 = v165;
                        if (v166 != (_BYTE *)v165 && (_QWORD)v165)
                        {
                          *(_QWORD *)&v165 = 0;
                          DWORD2(v165) = 0;
                          WTF::fastFree(v143, v141, v142, v7, v8, v9, v10, v11);
                        }
                        v28 = 0;
                        break;
                      default:
LABEL_50:
                        v27 = v22;
                        if (v25)
                        {
                          v27 = 0;
                          if (!*(_QWORD *)&v164[16] && *(_DWORD *)&v164[12] == 1)
                            v27 = *(_QWORD *)&v164[32] != 0;
                        }
                        switch(v15)
                        {
                          case ':':
                          case ';':
                          case '<':
                          case '=':
                          case '>':
                          case '?':
                          case '@':
                          case 'A':
                            goto LABEL_117;
                          case 'D':
                            if (v27 == 4)
                              goto LABEL_118;
                            v27 = (char)v27;
LABEL_117:
                            if (v27 == 1)
                              goto LABEL_118;
                            goto LABEL_56;
                          case 'E':
                          case 'G':
                            if (((char)v27 | 4) != 5)
                              goto LABEL_56;
                            goto LABEL_118;
                          case 'F':
                            if (v27 != 1 && (char)v27 != 4)
                              goto LABEL_56;
LABEL_118:
                            v158 = v23;
                            v160 = v15;
                            v162 = v12;
                            v164[40] = 1;
                            v86 = *(_DWORD *)&v164[12];
                            v85 = *(_DWORD *)&v164[16];
                            if (*(_DWORD *)&v164[16])
                              v25 = 0;
                            v87 = *(_DWORD *)&v164[20];
                            if (v25 == 1 && !*(_DWORD *)&v164[20] && *(_DWORD *)&v164[12] == 1)
                            {
                              if (*(_QWORD *)&v164[32])
                              {
                                v89 = 0;
                                v90 = 0;
                                v91 = 1;
                                v92 = 2;
                                LOBYTE(v22) = 1;
                                goto LABEL_127;
                              }
                            }
                            else if (*(_QWORD *)&v164[32])
                            {
                              v153 = *(unsigned int *)(*(_QWORD *)&v164[32] + 8);
                              v154 = (uint64_t)*this;
                              if (((unint64_t)*this & 0x8000000000000000) != 0)
                                v155 = 63;
                              else
                                v155 = *(_QWORD *)(2 * v154);
                              if (v155 <= v153)
                              {
                                WTF::BitVector::resizeOutOfLine((WTF::BitVector *)this, v153 + 1, 0);
                                v154 = (uint64_t)*this;
                              }
                              if (v154 >= 0)
                                v156 = (JSC::B3::Value **)(2 * v154 + 8);
                              else
                                v156 = this;
                              *(JSC::B3::Value **)((char *)v156 + ((v153 >> 3) & 0x1FFFFFF8)) = (JSC::B3::Value *)(*(unint64_t *)((char *)v156 + ((v153 >> 3) & 0x1FFFFFF8)) | (1 << v153));
                            }
                            v88 = v85;
                            v90 = v87;
                            v91 = v86;
                            v92 = v164[9];
                            v157 = *(_WORD *)&v164[10];
                            v89 = v164[24];
LABEL_127:
                            v94 = this[50];
                            *(_QWORD *)v166 = v158;
                            v166[8] = v22;
                            v166[9] = v92;
                            *(_WORD *)&v166[10] = v157;
                            *(_DWORD *)&v166[12] = v91;
                            *(_DWORD *)&v166[16] = v88;
                            *(_DWORD *)&v166[20] = v90;
                            v166[24] = v89;
                            *(_QWORD *)&v165 = v166;
                            *(_QWORD *)&v167 = 0;
                            WORD4(v167) = 513;
                            HIDWORD(v167) = 1;
                            *(_QWORD *)&v168 = v93;
                            BYTE8(v168) = 0;
                            v169 = 0;
                            v170 = 513;
                            v15 = v160;
                            v12 = v162;
                            v171 = 1;
                            v172 = v162;
                            v173 = 0;
                            v174 = 0;
                            *((_QWORD *)&v165 + 1) = 0x300000003;
                            v175 = v94;
                            v176 = v160;
                            BYTE2(v176) = v164[42];
                            v164[41] = 1;
                            v103 = v165;
                            if (v166 != (_BYTE *)v165 && (_QWORD)v165)
                            {
                              *(_QWORD *)&v165 = 0;
                              DWORD2(v165) = 0;
                              WTF::fastFree(v103, v101, v102, v7, v8, v9, v10, v11);
                            }
                            v28 = 0;
                            break;
                          default:
LABEL_56:
                            if (v25)
                            {
                              v22 = 0;
                              if (!*(_QWORD *)&v164[16] && *(_DWORD *)&v164[12] == 1)
                                v22 = *(_QWORD *)&v164[32] != 0;
                            }
                            switch(v15)
                            {
                              case 'D':
                              case 'E':
                              case 'F':
                              case 'G':
                                if (v22 != 1)
                                  goto LABEL_61;
                                v117 = JSC::B3::Air::relaxedMoveForType(*((_DWORD *)this[50] + 4));
                                v123 = this[50];
                                *(_OWORD *)v166 = *(_OWORD *)v184;
                                *(_OWORD *)&v166[9] = *(_OWORD *)&v184[9];
                                *(_QWORD *)&v165 = v166;
                                *(_QWORD *)&v167 = 0;
                                WORD4(v167) = 513;
                                HIDWORD(v167) = 1;
                                *(_QWORD *)&v168 = v12;
                                BYTE8(v168) = 0;
                                *((_QWORD *)&v165 + 1) = 0x200000003;
                                v175 = v123;
                                v176 = v15;
                                BYTE2(v176) = v164[42];
                                v164[41] = 1;
                                v132 = v165;
                                if (v166 != (_BYTE *)v165 && (_QWORD)v165)
                                {
                                  *(_QWORD *)&v165 = 0;
                                  DWORD2(v165) = 0;
                                  WTF::fastFree(v132, v130, v131, v7, v8, v9, v10, v11);
                                }
                                v28 = 0;
                                break;
                              default:
LABEL_61:
                                v28 = 1;
                                break;
                            }
                            goto LABEL_62;
                        }
                        break;
                    }
LABEL_62:
                    if (v164[40] && !v164[41])
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FC1A78);
                    }
                    if (LOBYTE(v183[1]) && !BYTE1(v183[1]))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x197FC1A58);
                    }
                    if (v28)
                      goto LABEL_67;
                    break;
                }
                return;
            }
          }
          return;
        }
        return;
      }
      HIDWORD(v165) = 1;
      *(_QWORD *)v166 = 0;
      v166[8] = 0;
      WORD4(v165) = 517;
      *(_QWORD *)&v165 = v14;
      v44 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
      v45 = 71;
LABEL_78:
      return;
    case 3u:
      v15 = 57;
      goto LABEL_11;
    case 4u:
      v15 = 56;
      goto LABEL_11;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FC1AC8);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendUnOp<(JSC::B3::Air::Opcode)268,(JSC::B3::Air::Opcode)269,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445>(JSC::B3::Value **this, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  char v17;
  char v18;
  char v19;
  int v20;
  JSC::B3::Value *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  JSC::B3::Value **v38;
  int v39;
  unint64_t v40;
  int v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  __int16 v47;
  int v48;
  int v49;
  int v50;
  char v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  int v55;
  int v56;
  char v57;
  JSC::B3::Value *v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  char v62;
  __int16 v63;
  int v64;
  uint64_t v65;
  char v66;
  JSC::B3::Value *v67[2];

  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x80000000)
    v4 = 0x80000000;
  if (v4 == 2)
  {
    v5 = 269;
  }
  else
  {
    if (v4 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC1E00);
    }
    v5 = 268;
  }
  if (*(_BYTE *)(a2 + 12) != 67)
  {
    v62 = 2;
    v64 = 1;
    v65 = 0;
    v66 = 0;
    memset(v67, 0, 11);
    goto LABEL_9;
  }
  v7 = v60;
  v18 = v61;
  if (!v60 && !v61)
  {
LABEL_9:
    if (!v65 && v64 == 1 && v67[0])
    {
      v7 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 1;
      v19 = 2;
      v20 = 1;
LABEL_18:
      v21 = this[50];
      v42 = (WTF *)&v44;
      v44 = v7;
      v45 = v18;
      v46 = v19;
      v47 = v15;
      v48 = v20;
      v49 = v8;
      v50 = v16;
      v51 = v17;
      v52 = 0;
      v53 = 513;
      v54 = 1;
      v55 = v6;
      v56 = 0;
      v57 = 0;
      v43 = 0x200000003;
      v58 = v21;
      v59 = v5;
      BYTE2(v59) = BYTE2(v67[1]);
      v29 = v42;
      if (&v44 != (uint64_t *)v42)
      {
        if (v42)
        {
          v42 = 0;
          LODWORD(v43) = 0;
          WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
        }
      }
      return;
    }
    goto LABEL_21;
  }
  if (v61 == 1)
  {
    v8 = v65;
    v16 = HIDWORD(v65);
    v20 = v64;
    if (v67[0])
    {
      v35 = *((unsigned int *)v67[0] + 2);
      v36 = (uint64_t)*this;
      if (((unint64_t)*this & 0x8000000000000000) != 0)
        v37 = 63;
      else
        v37 = *(_QWORD *)(2 * v36);
      if (v37 <= v35)
      {
        v41 = v65;
        v39 = v64;
        v40 = *((unsigned int *)v67[0] + 2);
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)this, v35 + 1, 0);
        v35 = v40;
        v20 = v39;
        v18 = 1;
        v8 = v41;
        v36 = (uint64_t)*this;
      }
      if (v36 >= 0)
        v38 = (JSC::B3::Value **)(2 * v36 + 8);
      else
        v38 = this;
      *(JSC::B3::Value **)((char *)v38 + ((v35 >> 3) & 0x1FFFFFF8)) = (JSC::B3::Value *)(*(unint64_t *)((char *)v38 + ((v35 >> 3) & 0x1FFFFFF8)) | (1 << v35));
    }
    v19 = v62;
    v15 = v63;
    v17 = v66;
    goto LABEL_18;
  }
LABEL_21:
  if (LOBYTE(v67[1]) && !BYTE1(v67[1]))
  {
    __break(0xC471u);
    JUMPOUT(0x197FC1E74);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendShift<(JSC::B3::Air::Opcode)64,(JSC::B3::Air::Opcode)65>(JSC::B3::Value **this, JSC::B3::Value *a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;

  v5 = *((_DWORD *)a2 + 4);
  if (v5 >= 0x80000000)
    v5 = 0x80000000;
  v6 = v5 - 1;
  if (v6 > 3)
    v7 = 445;
  else
    v7 = dword_19914F7B0[v6];
  v8 = *(_WORD *)(a3 + 12) & 0xFFF;
  if (a3 && v8 == 3)
  {
    v9 = *(int *)(a3 + 40);
  }
  else
  {
    if (!a3 || v8 != 4)
      goto LABEL_28;
    v9 = *(_QWORD *)(a3 + 40);
  }
  if ((unint64_t)(v9 + 4095) < 0x1FFF)
  {
    if ((v7 & 0x1FC) == 0x40)
      goto LABEL_22;
  }
  else if ((v9 & 0xFFF) == 0)
  {
    v10 = (unint64_t)v9 >> 24 == 0;
    v11 = (v9 >> 12) + 4095;
    v12 = !v10 && v11 >= 0x1000;
    v13 = !v12;
    if ((v7 & 0x1FC) == 0x40 && v13)
    {
LABEL_22:
      v15 = *(_WORD *)(a3 + 12) & 0xFFF;
      if (a3 && v15 == 3)
      {
        v16 = *(int *)(a3 + 40);
      }
      else
      {
        if (!a3 || v15 != 4)
          goto LABEL_38;
        v16 = *(_QWORD *)(a3 + 40);
      }
      if ((unint64_t)(v16 + 4095) < 0x1FFF
        || (v16 & 0xFFF) == 0
        && (!((unint64_t)v16 >> 24) || v16 >> 12 == 0 || (unint64_t)(v16 >> 12) >= 0xFFFFFFFFFFFFF001))
      {
        HIDWORD(v43) = 1;
        v44 = 0;
        v45 = 0;
        WORD4(v43) = 514;
        *(_QWORD *)&v43 = v16;
        goto LABEL_42;
      }
LABEL_38:
      *(_QWORD *)&v43 = 0;
      WORD4(v43) = 512;
      HIDWORD(v43) = 1;
      v44 = 0;
      v45 = 0;
LABEL_42:
      return;
    }
  }
LABEL_28:
  if (v7 - 64 <= 5 && ((1 << (v7 - 64)) & 0x33) != 0
    || v7 - 156 <= 0x31 && ((1 << (v7 + 100)) & 0x3000000000003) != 0
    || v7 == 433)
  {
  }
  else
  {
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendShift<(JSC::B3::Air::Opcode)66,(JSC::B3::Air::Opcode)67>(JSC::B3::Value **this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *((_DWORD *)a2 + 4);
  if (v5 >= 0x80000000)
    v5 = 0x80000000;
  v6 = v5 - 1;
  if (v6 > 3)
    v7 = 445;
  else
    v7 = *(_QWORD *)&aB_4[4 * v6];
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendUnOp<(JSC::B3::Air::Opcode)86,(JSC::B3::Air::Opcode)87,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445>(JSC::B3::Value **this, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  char v17;
  char v18;
  char v19;
  int v20;
  JSC::B3::Value *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  JSC::B3::Value **v38;
  int v39;
  unint64_t v40;
  int v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  __int16 v47;
  int v48;
  int v49;
  int v50;
  char v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  int v55;
  int v56;
  char v57;
  JSC::B3::Value *v58;
  unsigned int v59;
  uint64_t v60;
  char v61;
  char v62;
  __int16 v63;
  int v64;
  uint64_t v65;
  char v66;
  JSC::B3::Value *v67[2];

  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x80000000)
    v4 = 0x80000000;
  if (v4 == 2)
  {
    v5 = 87;
  }
  else
  {
    if (v4 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC246CLL);
    }
    v5 = 86;
  }
  if (*(_BYTE *)(a2 + 12) != 67)
  {
    v62 = 2;
    v64 = 1;
    v65 = 0;
    v66 = 0;
    memset(v67, 0, 11);
    goto LABEL_9;
  }
  v7 = v60;
  v18 = v61;
  if (!v60 && !v61)
  {
LABEL_9:
    if (!v65 && v64 == 1 && v67[0])
    {
      v7 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 1;
      v19 = 2;
      v20 = 1;
LABEL_18:
      v21 = this[50];
      v42 = (WTF *)&v44;
      v44 = v7;
      v45 = v18;
      v46 = v19;
      v47 = v15;
      v48 = v20;
      v49 = v8;
      v50 = v16;
      v51 = v17;
      v52 = 0;
      v53 = 513;
      v54 = 1;
      v55 = v6;
      v56 = 0;
      v57 = 0;
      v43 = 0x200000003;
      v58 = v21;
      v59 = v5;
      BYTE2(v59) = BYTE2(v67[1]);
      v29 = v42;
      if (&v44 != (uint64_t *)v42)
      {
        if (v42)
        {
          v42 = 0;
          LODWORD(v43) = 0;
          WTF::fastFree((unint64_t)v29, v22, v23, v24, v25, v26, v27, v28);
        }
      }
      return;
    }
    goto LABEL_21;
  }
  if (v61 == 1)
  {
    v8 = v65;
    v16 = HIDWORD(v65);
    v20 = v64;
    if (v67[0])
    {
      v35 = *((unsigned int *)v67[0] + 2);
      v36 = (uint64_t)*this;
      if (((unint64_t)*this & 0x8000000000000000) != 0)
        v37 = 63;
      else
        v37 = *(_QWORD *)(2 * v36);
      if (v37 <= v35)
      {
        v41 = v65;
        v39 = v64;
        v40 = *((unsigned int *)v67[0] + 2);
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)this, v35 + 1, 0);
        v35 = v40;
        v20 = v39;
        v18 = 1;
        v8 = v41;
        v36 = (uint64_t)*this;
      }
      if (v36 >= 0)
        v38 = (JSC::B3::Value **)(2 * v36 + 8);
      else
        v38 = this;
      *(JSC::B3::Value **)((char *)v38 + ((v35 >> 3) & 0x1FFFFFF8)) = (JSC::B3::Value *)(*(unint64_t *)((char *)v38 + ((v35 >> 3) & 0x1FFFFFF8)) | (1 << v35));
    }
    v19 = v62;
    v15 = v63;
    v17 = v66;
    goto LABEL_18;
  }
LABEL_21:
  if (LOBYTE(v67[1]) && !BYTE1(v67[1]))
  {
    __break(0xC471u);
    JUMPOUT(0x197FC24E0);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendUnOp<(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)74,(JSC::B3::Air::Opcode)75>(JSC::B3::Value **this, JSC::B3::Value *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  WTF *v28;
  uint64_t v29;
  _BYTE v30[25];
  uint64_t v31;
  __int16 v32;
  int v33;
  int v34;
  int v35;
  char v36;
  JSC::B3::Value *v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v4 = *((_DWORD *)a2 + 4);
  if (v4 >= 0x80000000)
    v4 = 0x80000000;
  if (v4 == 4)
  {
    v5 = 74;
  }
  else
  {
    if (v4 != 3)
    {
      __break(0xC471u);
      goto LABEL_22;
    }
    v5 = 75;
  }
  if (v39 || v40)
  {
    if (v40 == 1)
      goto LABEL_13;
  }
  else if (!v42 && !v43 && v41 == 1 && v44)
  {
LABEL_13:
    v7 = this[50];
    *(_OWORD *)v30 = v27[0];
    *(_OWORD *)&v30[9] = *(_OWORD *)((char *)v27 + 9);
    v28 = (WTF *)v30;
    v31 = 0;
    v32 = 513;
    v33 = 1;
    v34 = v6;
    v35 = 0;
    v36 = 0;
    v29 = 0x200000003;
    v37 = v7;
    v38 = v5;
    BYTE2(v38) = v47;
    v21 = v28;
    if (v30 != (_BYTE *)v28)
    {
      if (v28)
      {
        v28 = 0;
        LODWORD(v29) = 0;
        WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
      }
    }
    return;
  }
  if (v45 && !v46)
  {
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x197FC2570);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendUnOp<(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)76,(JSC::B3::Air::Opcode)77>(JSC::B3::Value **this, JSC::B3::Value *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  WTF *v28;
  uint64_t v29;
  _BYTE v30[25];
  uint64_t v31;
  __int16 v32;
  int v33;
  int v34;
  int v35;
  char v36;
  JSC::B3::Value *v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v4 = *((_DWORD *)a2 + 4);
  if (v4 >= 0x80000000)
    v4 = 0x80000000;
  if (v4 == 4)
  {
    v5 = 76;
  }
  else
  {
    if (v4 != 3)
    {
      __break(0xC471u);
      goto LABEL_22;
    }
    v5 = 77;
  }
  if (v39 || v40)
  {
    if (v40 == 1)
      goto LABEL_13;
  }
  else if (!v42 && !v43 && v41 == 1 && v44)
  {
LABEL_13:
    v7 = this[50];
    *(_OWORD *)v30 = v27[0];
    *(_OWORD *)&v30[9] = *(_OWORD *)((char *)v27 + 9);
    v28 = (WTF *)v30;
    v31 = 0;
    v32 = 513;
    v33 = 1;
    v34 = v6;
    v35 = 0;
    v36 = 0;
    v29 = 0x200000003;
    v37 = v7;
    v38 = v5;
    BYTE2(v38) = v47;
    v21 = v28;
    if (v30 != (_BYTE *)v28)
    {
      if (v28)
      {
        v28 = 0;
        LODWORD(v29) = 0;
        WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
      }
    }
    return;
  }
  if (v45 && !v46)
  {
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x197FC2734);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendUnOp<(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)78,(JSC::B3::Air::Opcode)79>(JSC::B3::Value **this, JSC::B3::Value *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  WTF *v28;
  uint64_t v29;
  _BYTE v30[25];
  uint64_t v31;
  __int16 v32;
  int v33;
  int v34;
  int v35;
  char v36;
  JSC::B3::Value *v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v4 = *((_DWORD *)a2 + 4);
  if (v4 >= 0x80000000)
    v4 = 0x80000000;
  if (v4 == 4)
  {
    v5 = 78;
  }
  else
  {
    if (v4 != 3)
    {
      __break(0xC471u);
      goto LABEL_22;
    }
    v5 = 79;
  }
  if (v39 || v40)
  {
    if (v40 == 1)
      goto LABEL_13;
  }
  else if (!v42 && !v43 && v41 == 1 && v44)
  {
LABEL_13:
    v7 = this[50];
    *(_OWORD *)v30 = v27[0];
    *(_OWORD *)&v30[9] = *(_OWORD *)((char *)v27 + 9);
    v28 = (WTF *)v30;
    v31 = 0;
    v32 = 513;
    v33 = 1;
    v34 = v6;
    v35 = 0;
    v36 = 0;
    v29 = 0x200000003;
    v37 = v7;
    v38 = v5;
    BYTE2(v38) = v47;
    v21 = v28;
    if (v30 != (_BYTE *)v28)
    {
      if (v28)
      {
        v28 = 0;
        LODWORD(v29) = 0;
        WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
      }
    }
    return;
  }
  if (v45 && !v46)
  {
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x197FC28F8);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendUnOp<(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)80,(JSC::B3::Air::Opcode)81>(JSC::B3::Value **this, JSC::B3::Value *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  WTF *v28;
  uint64_t v29;
  _BYTE v30[25];
  uint64_t v31;
  __int16 v32;
  int v33;
  int v34;
  int v35;
  char v36;
  JSC::B3::Value *v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v4 = *((_DWORD *)a2 + 4);
  if (v4 >= 0x80000000)
    v4 = 0x80000000;
  if (v4 == 4)
  {
    v5 = 80;
  }
  else
  {
    if (v4 != 3)
    {
      __break(0xC471u);
      goto LABEL_22;
    }
    v5 = 81;
  }
  if (v39 || v40)
  {
    if (v40 == 1)
      goto LABEL_13;
  }
  else if (!v42 && !v43 && v41 == 1 && v44)
  {
LABEL_13:
    v7 = this[50];
    *(_OWORD *)v30 = v27[0];
    *(_OWORD *)&v30[9] = *(_OWORD *)((char *)v27 + 9);
    v28 = (WTF *)v30;
    v31 = 0;
    v32 = 513;
    v33 = 1;
    v34 = v6;
    v35 = 0;
    v36 = 0;
    v29 = 0x200000003;
    v37 = v7;
    v38 = v5;
    BYTE2(v38) = v47;
    v21 = v28;
    if (v30 != (_BYTE *)v28)
    {
      if (v28)
      {
        v28 = 0;
        LODWORD(v29) = 0;
        WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
      }
    }
    return;
  }
  if (v45 && !v46)
  {
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x197FC2ABCLL);
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::tryAppendStoreUnOp<(JSC::B3::Air::Opcode)13,(JSC::B3::Air::Opcode)14>(JSC::B3::MemoryValue **a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::B3::MemoryValue *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t result;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE v28[32];
  _BYTE v29[12];
  WTF *v30;
  uint64_t v31;
  _OWORD v32[6];
  _BYTE v33[11];
  uint64_t v34;
  unsigned __int8 v35;
  int v36;
  uint64_t v37;
  char v38;
  _QWORD v39[2];
  _BYTE v40[25];

  v4 = *(_DWORD *)(a2 + 16);
  if (v4 >= 0x80000000)
    v4 = 0x80000000;
  if (v4 == 2)
  {
    v5 = 14;
  }
  else
  {
    if (v4 != 1)
      return 0;
    v5 = 13;
  }
  if (*(_BYTE *)(a2 + 12) == 67)
  {
    v12 = v34;
  }
  else
  {
    v12 = 0;
    v35 = 0;
    v36 = 1;
    v37 = 0;
    v38 = 0;
    memset(v39, 0, 11);
  }
  if (v12 == *(_QWORD *)v40 && v35 == v40[8] && v37 == *(_QWORD *)&v40[16] && v36 == *(_DWORD *)&v40[12] && v35 == 1)
  {
    LOBYTE(v39[1]) = 1;
    if (v39[0])
    {
      v24 = *(unsigned int *)(v39[0] + 8);
      v25 = (uint64_t)*a1;
      if (((unint64_t)*a1 & 0x8000000000000000) != 0)
        v26 = 63;
      else
        v26 = *(_QWORD *)(2 * v25);
      if (v26 <= v24)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)a1, v24 + 1, 0);
        v25 = (uint64_t)*a1;
      }
      if (v25 >= 0)
        v27 = 2 * v25 + 8;
      else
        v27 = (uint64_t)a1;
      *(_QWORD *)(v27 + ((v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    v13 = a1[50];
    *(_OWORD *)&v28[9] = *(_OWORD *)&v40[9];
    *(_OWORD *)v28 = *(_OWORD *)v40;
    *(_QWORD *)v29 = v13;
    *(_DWORD *)&v29[8] = v5;
    v29[10] = BYTE2(v39[1]);
    BYTE1(v39[1]) = 1;
    v14 = *((_WORD *)v13 + 6);
    v30 = (WTF *)v32;
    v32[0] = *(_OWORD *)v40;
    v32[1] = *(_OWORD *)&v28[16];
    v31 = 0x100000003;
    *(_DWORD *)&v33[7] = *(_DWORD *)&v29[7];
    *(_QWORD *)v33 = v13;
    v33[10] = BYTE2(v39[1]) | ((v14 & 0x200) != 0);
    v22 = v30;
    if (v32 != (_OWORD *)v30 && v30)
    {
      v30 = 0;
      LODWORD(v31) = 0;
      WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
    }
    result = 1;
  }
  else
  {
    result = 0;
  }
  if (LOBYTE(v39[1]) && !BYTE1(v39[1]))
  {
    __break(0xC471u);
    JUMPOUT(0x197FC2EBCLL);
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::tryAppendStoreBinOp<(JSC::B3::Air::Opcode)9,(JSC::B3::Air::Opcode)10,(JSC::B3::Commutativity)1>(JSC::B3::_anonymous_namespace_::LowerToAir *a1, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  uint64_t v4;
  BOOL v5;
  unsigned int v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  WTF *v34;
  _OWORD v35[2];
  WTF *v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[12];
  _BYTE v44[25];
  uint64_t v45;
  __int16 v46;
  unsigned __int8 v47;
  _BYTE v48[25];
  _BYTE v49[64];
  __int128 v50;
  _BYTE v51[11];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 50);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 12) - 79 > 0xFFFFFFEF;
  else
    v5 = 0;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x197FC3284);
  }
  v8 = *((_DWORD *)a2 + 4);
  if (v8 >= 0x80000000)
    v8 = 0x80000000;
  if (v8 == 2)
  {
    v9 = 10;
  }
  else
  {
    if (v8 != 1)
      return 0;
    v9 = 9;
  }
  if (*(_DWORD *)(v4 + 52) != *(_DWORD *)(v4 + 56))
    return 0;
  *(_OWORD *)v44 = *(_OWORD *)v49;
  *(_OWORD *)&v44[9] = *(_OWORD *)&v49[9];
  v45 = *(_QWORD *)&v49[32];
  v46 = *(_WORD *)&v49[40];
  v47 = v49[42];
  if (*(_QWORD *)v49 == *(_QWORD *)v48
    && v44[8] == v48[8]
    && *(_DWORD *)&v44[16] == *(_DWORD *)&v48[16]
    && *(_DWORD *)&v44[20] == *(_DWORD *)&v48[20]
    && a3
    && *(_DWORD *)&v44[12] == *(_DWORD *)&v48[12]
    && v44[8] == 1)
  {
    if (*(_QWORD *)v49 || v49[8] || *(_QWORD *)&v49[16] || *(_DWORD *)&v49[12] != 1)
    {
      v22 = *((_QWORD *)a1 + 50);
      *(_OWORD *)v49 = v35[0];
      *(_OWORD *)&v49[9] = *(_OWORD *)((char *)v35 + 9);
      *(_OWORD *)&v49[32] = *(_OWORD *)v48;
      *(_OWORD *)&v49[41] = *(_OWORD *)&v48[9];
      v36 = (WTF *)&v39;
      v37 = 3;
      v39 = *(_OWORD *)v49;
      v40 = *(_OWORD *)&v49[16];
      v41 = *(_OWORD *)&v49[32];
      v42 = *(_OWORD *)&v49[48];
      *(_QWORD *)v43 = v22;
      *(_DWORD *)&v43[8] = v9;
      v43[10] = v47;
      v23 = *(unsigned __int16 *)(v22 + 12);
      *(_QWORD *)v49 = &v49[16];
      v24 = *(_OWORD *)&v49[16];
      *(_OWORD *)&v49[16] = v39;
      *(_OWORD *)&v49[32] = v24;
      v25 = *(_OWORD *)&v49[48];
      *(_OWORD *)&v49[48] = v41;
      v50 = v25;
      v38 = 0;
      *(_QWORD *)&v49[8] = 0x200000003;
      *(_QWORD *)v51 = v22;
      *(_DWORD *)&v51[7] = *(_DWORD *)&v43[7];
      v21 = v47 | (v23 >> 9) & 1;
    }
    else
    {
      v11 = *((_QWORD *)a1 + 50);
      v19 = *((_QWORD *)a1 + 50);
      *(_OWORD *)&v49[16] = *(_OWORD *)&v48[9];
      *(_OWORD *)&v49[7] = *(_OWORD *)v48;
      v36 = (WTF *)&v39;
      v37 = 3;
      *(_QWORD *)&v39 = 0;
      WORD4(v39) = 513;
      HIDWORD(v39) = 1;
      *(_QWORD *)&v40 = v12;
      BYTE8(v40) = 0;
      v41 = *(_OWORD *)v48;
      v42 = *(_OWORD *)&v49[23];
      *(_QWORD *)v43 = v19;
      *(_DWORD *)&v43[8] = v9;
      v43[10] = v47;
      v20 = *(unsigned __int16 *)(v11 + 12);
      *(_QWORD *)v49 = &v49[16];
      *(_OWORD *)&v49[16] = v39;
      *(_OWORD *)&v49[32] = v40;
      *(_OWORD *)&v49[48] = *(_OWORD *)v48;
      v50 = v42;
      v38 = 0;
      *(_QWORD *)&v49[8] = 0x200000003;
      *(_QWORD *)v51 = v19;
      *(_DWORD *)&v51[7] = *(_DWORD *)&v43[7];
      v21 = v47 | (v20 >> 9) & 1;
    }
    v51[10] = v21;
    v33 = *(_QWORD *)v49;
    if (&v49[16] != *(_BYTE **)v49 && *(_QWORD *)v49)
    {
      *(_QWORD *)v49 = 0;
      *(_DWORD *)&v49[8] = 0;
      WTF::fastFree(v33, v26, v27, v28, v29, v30, v31, v32);
    }
    v34 = v36;
    if (&v39 != (__int128 *)v36 && v36)
    {
      v36 = 0;
      v37 = 0;
      WTF::fastFree((unint64_t)v34, v26, v27, v28, v29, v30, v31, v32);
    }
    return 1;
  }
  else
  {
    result = 0;
    if (v49[40] && !v49[41])
    {
      __break(0xC471u);
      JUMPOUT(0x197FC32C4);
    }
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::tryAppendStoreBinOp<(JSC::B3::Air::Opcode)50,(JSC::B3::Air::Opcode)51,(JSC::B3::Commutativity)0>(JSC::B3::_anonymous_namespace_::LowerToAir *a1, unsigned int *a2, JSC::B3::Value *a3)
{
  uint64_t v4;
  BOOL v5;
  JSC::B3::Value *v6;
  unsigned int v8;
  char v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[12];
  _BYTE v42[25];
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  _BYTE v47[25];
  _BYTE v48[48];
  __int128 v49;
  __int128 v50;
  _BYTE v51[11];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 50);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 12) - 79 > 0xFFFFFFEF;
  else
    v5 = 0;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x197FC3630);
  }
  v6 = (JSC::B3::Value *)a2;
  v8 = a2[4];
  if (v8 >= 0x80000000)
    v8 = 0x80000000;
  if (v8 == 2)
  {
    v9 = 0;
    v10 = 51;
  }
  else
  {
    if (v8 != 1)
      return 0;
    v10 = 50;
    v9 = 1;
  }
  if (*(_DWORD *)(v4 + 52) != *(_DWORD *)(v4 + 56))
    return 0;
  *(_OWORD *)v42 = *(_OWORD *)v48;
  *(_OWORD *)&v42[9] = *(_OWORD *)&v48[9];
  v43 = *(_QWORD *)&v48[32];
  v11 = v48[40];
  v44 = v48[40];
  v12 = v48[41];
  v45 = v48[41];
  v46 = v48[42];
  if (*(_QWORD *)v48 == *(_QWORD *)v47
    && (v13 = v42[8], v42[8] == v47[8])
    && *(_DWORD *)&v42[16] == *(_DWORD *)&v47[16]
    && *(_DWORD *)&v42[20] == *(_DWORD *)&v47[20]
    && *(_DWORD *)&v42[12] == *(_DWORD *)&v47[12])
  {
    v14 = v48[41];
    v15 = v48[40];
    v6 = a3;
    if (!a3)
    {
LABEL_28:
      result = 0;
      if (!v14 && v15)
      {
        __break(0xC471u);
        JUMPOUT(0x197FC3650);
      }
      return result;
    }
  }
  else
  {
    *(_OWORD *)v42 = *(_OWORD *)v48;
    *(_OWORD *)&v42[9] = *(_OWORD *)&v48[9];
    v43 = *(_QWORD *)&v48[32];
    v15 = v48[40];
    v44 = v48[40];
    v14 = v48[41];
    v45 = v48[41];
    v46 = v48[42];
    if (v11 && !v12)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC3670);
    }
    if (*(_QWORD *)v42 != *(_QWORD *)v47)
      goto LABEL_28;
    v13 = v42[8];
    if (v42[8] != v47[8]
      || *(_DWORD *)&v42[16] != *(_DWORD *)&v47[16]
      || *(_DWORD *)&v42[20] != *(_DWORD *)&v47[20]
      || *(_DWORD *)&v42[12] != *(_DWORD *)&v47[12])
    {
      goto LABEL_28;
    }
  }
  v16 = v13 == 1;
  v17 = v9 ^ 1;
  if (!v16)
    v17 = 1;
  if ((v17 & 1) != 0)
    goto LABEL_28;
  v19 = *((_QWORD *)a1 + 50);
  v21 = *((_QWORD *)a1 + 50);
  *(_OWORD *)&v48[16] = *(_OWORD *)&v47[9];
  *(_OWORD *)&v48[7] = *(_OWORD *)v47;
  *(_QWORD *)&v37 = 0;
  WORD4(v37) = 513;
  HIDWORD(v37) = 1;
  *(_QWORD *)&v38 = v20;
  BYTE8(v38) = 0;
  v39 = *(_OWORD *)v47;
  v40 = *(_OWORD *)&v48[23];
  *(_QWORD *)v41 = v21;
  *(_DWORD *)&v41[8] = v10;
  v41[10] = v46;
  v22 = *(_WORD *)(v19 + 12);
  *(_QWORD *)v48 = &v48[16];
  *(_OWORD *)&v48[16] = v37;
  *(_OWORD *)&v48[32] = v38;
  v49 = *(_OWORD *)v47;
  v50 = v40;
  *(_QWORD *)&v48[8] = 0x200000003;
  *(_QWORD *)v51 = v21;
  *(_DWORD *)&v51[7] = *(_DWORD *)&v41[7];
  v51[10] = v46 | ((v22 & 0x200) != 0);
  v36 = *(_QWORD *)v48;
  if (&v48[16] != *(_BYTE **)v48 && *(_QWORD *)v48)
  {
    *(_QWORD *)v48 = 0;
    *(_DWORD *)&v48[8] = 0;
    WTF::fastFree(v36, v29, v30, v31, v32, v33, v34, v35);
  }
  return 1;
}

void JSC::B3::`anonymous namespace'::LowerToAir::tryAppendStoreUnOp<(JSC::B3::Air::Opcode)72,(JSC::B3::Air::Opcode)73>(JSC::B3::MemoryValue **a1, uint64_t a2)
{
  unsigned int v2;
  _BYTE v5[48];
  _BYTE v6[32];

  v2 = *(_DWORD *)(a2 + 16);
  if (v2 >= 0x80000000)
    v2 = 0x80000000;
  if (v2 - 1 <= 1)
  {
    if (*(_BYTE *)(a2 + 12) == 67)
    {
      if (v5[40])
      {
        if (!v5[41])
          __break(0xC471u);
      }
    }
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::tryAppendStoreBinOp<(JSC::B3::Air::Opcode)70,(JSC::B3::Air::Opcode)71,(JSC::B3::Commutativity)0>(JSC::B3::_anonymous_namespace_::LowerToAir *a1, unsigned int *a2, JSC::B3::Value *a3)
{
  uint64_t v4;
  BOOL v5;
  JSC::B3::Value *v6;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[12];
  _BYTE v39[25];
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  _BYTE v44[25];
  _BYTE v45[48];
  __int128 v46;
  __int128 v47;
  _BYTE v48[11];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 50);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 12) - 79 > 0xFFFFFFEF;
  else
    v5 = 0;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x197FC3AACLL);
  }
  v6 = (JSC::B3::Value *)a2;
  v8 = a2[4];
  if (v8 >= 0x80000000)
    v8 = 0x80000000;
  if (v8 == 2)
  {
    v9 = 71;
  }
  else
  {
    if (v8 != 1)
      return 0;
    v9 = 70;
  }
  if (*(_DWORD *)(v4 + 52) != *(_DWORD *)(v4 + 56))
    return 0;
  *(_OWORD *)v39 = *(_OWORD *)v45;
  *(_OWORD *)&v39[9] = *(_OWORD *)&v45[9];
  v40 = *(_QWORD *)&v45[32];
  v10 = v45[40];
  v41 = v45[40];
  v11 = v45[41];
  v42 = v45[41];
  v43 = v45[42];
  if (*(_QWORD *)v45 == *(_QWORD *)v44
    && (v12 = v39[8], v39[8] == v44[8])
    && *(_DWORD *)&v39[16] == *(_DWORD *)&v44[16]
    && *(_DWORD *)&v39[20] == *(_DWORD *)&v44[20]
    && *(_DWORD *)&v39[12] == *(_DWORD *)&v44[12])
  {
    v14 = v45[41];
    v13 = v45[40];
    if (!a3)
      goto LABEL_32;
    v6 = a3;
  }
  else
  {
    *(_OWORD *)v39 = *(_OWORD *)v45;
    *(_OWORD *)&v39[9] = *(_OWORD *)&v45[9];
    v40 = *(_QWORD *)&v45[32];
    v13 = v45[40];
    v41 = v45[40];
    v14 = v45[41];
    v42 = v45[41];
    v43 = v45[42];
    if (v10 && !v11)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC3AECLL);
    }
    if (*(_QWORD *)v39 != *(_QWORD *)v44)
      goto LABEL_32;
    v12 = v39[8];
    if (v39[8] != v44[8]
      || *(_DWORD *)&v39[16] != *(_DWORD *)&v44[16]
      || *(_DWORD *)&v39[20] != *(_DWORD *)&v44[20]
      || *(_DWORD *)&v39[12] != *(_DWORD *)&v44[12])
    {
      goto LABEL_32;
    }
  }
  if (v12 == 1)
  {
    v15 = *((_QWORD *)a1 + 50);
    v17 = *((_QWORD *)a1 + 50);
    *(_OWORD *)&v45[16] = *(_OWORD *)&v44[9];
    *(_OWORD *)&v45[7] = *(_OWORD *)v44;
    *(_QWORD *)&v34 = 0;
    WORD4(v34) = 513;
    HIDWORD(v34) = 1;
    *(_QWORD *)&v35 = v16;
    BYTE8(v35) = 0;
    v36 = *(_OWORD *)v44;
    v37 = *(_OWORD *)&v45[23];
    *(_QWORD *)v38 = v17;
    *(_DWORD *)&v38[8] = v9;
    v38[10] = v43;
    v18 = *(_WORD *)(v15 + 12);
    *(_QWORD *)v45 = &v45[16];
    *(_OWORD *)&v45[16] = v34;
    *(_OWORD *)&v45[32] = v35;
    v46 = *(_OWORD *)v44;
    v47 = v37;
    *(_QWORD *)&v45[8] = 0x200000003;
    *(_QWORD *)v48 = v17;
    *(_DWORD *)&v48[7] = *(_DWORD *)&v38[7];
    v48[10] = v43 | ((v18 & 0x200) != 0);
    v32 = *(_QWORD *)v45;
    if (&v45[16] != *(_BYTE **)v45 && *(_QWORD *)v45)
    {
      *(_QWORD *)v45 = 0;
      *(_DWORD *)&v45[8] = 0;
      WTF::fastFree(v32, v25, v26, v27, v28, v29, v30, v31);
    }
    return 1;
  }
LABEL_32:
  result = 0;
  if (!v14 && v13)
  {
    __break(0xC471u);
    JUMPOUT(0x197FC3ACCLL);
  }
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendStore(JSC::B3::_anonymous_namespace_::LowerToAir *this, JSC::B3::Value *a2, const JSC::B3::Air::Arg *a3)
{
  JSC::B3::Value *v3;
  int v4;
  JSC::B3::Value *v7;
  unsigned int v8;
  unint64_t v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  JSC::B3::Value **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  int v34;
  uint64_t v35;

  if (*((unsigned __int8 *)a2 + 12) - 63 >= 0x10)
    v3 = 0;
  else
    v3 = a2;
  v4 = *((unsigned __int8 *)v3 + 12);
  if ((v4 - 68) >= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197FC3CD8);
  }
  if (*((_DWORD *)v3 + 13) == *((_DWORD *)v3 + 14))
  {
    v7 = a2;
    switch(v4)
    {
      case 'F':
        v8 = *(_DWORD *)(JSC::B3::MemoryValue::child(v3, 0) + 16);
        if (v8 >= 0x80000000)
          v8 = 0x80000000;
        v14 = v8 >= 6;
        v9 = 0x40302030200uLL >> (8 * v8);
        if (v14)
          v10 = 0;
        else
          v10 = v9;
        break;
      case 'D':
        v10 = 0;
        break;
      case 'E':
        v10 = 1;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FC3DACLL);
    }
    if (*((unsigned __int8 *)v3 + 12) - 63 >= 5)
      v7 = (JSC::B3::Value *)JSC::B3::MemoryValue::child(v3, 0);
    v11 = *((_DWORD *)v7 + 4);
    if (v11 >= 0x80000000)
      v11 = 0x80000000;
    v12 = v11 - 6;
    switch(v10)
    {
      case 0:
        if (v12 >= 0xFFFFFFFD)
        {
          __break(0xC471u);
          JUMPOUT(0x197FC3D70);
        }
        v16 = 124;
        break;
      case 1:
        if (v12 >= 0xFFFFFFFD)
        {
          __break(0xC471u);
          JUMPOUT(0x197FC3DCCLL);
        }
        v16 = 132;
        break;
      case 2:
        v14 = __CFADD__(v12, 3);
        v15 = 107;
        v13 = 94;
        goto LABEL_18;
      case 3:
        v13 = 90;
        v14 = __CFADD__(v12, 3);
        v15 = 108;
LABEL_18:
        if (v14)
          v16 = v15;
        else
          v16 = v13;
        break;
      case 4:
        if (!HIBYTE(dword_1ECF4C7B0))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC3E0CLL);
        }
        if (v12 <= 0xFFFFFFFC)
        {
          __break(0xC471u);
          JUMPOUT(0x197FC3E2CLL);
        }
        v16 = 113;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FC3D28);
    }
  }
  else
  {
    if (JSC::B3::MemoryValue::accessBank(v3))
    {
      __break(0xC471u);
      JUMPOUT(0x197FC3DECLL);
    }
    if (JSC::B3::MemoryValue::accessWidth(v3))
    {
      if (JSC::B3::MemoryValue::accessWidth(v3) == 1)
      {
        v16 = 133;
      }
      else if (JSC::B3::MemoryValue::accessWidth(v3) == 2)
      {
        v16 = 135;
      }
      else
      {
        v16 = 137;
      }
    }
    else
    {
      v16 = 125;
    }
  }
  v17 = v16 & 0xFFFFFFFFFFFEFFFFLL | ((((unint64_t)*((unsigned __int16 *)v3 + 6) >> 9) & 1) << 16);
  v18 = (JSC::B3::Value **)JSC::B3::MemoryValue::child(v3, 0);
  v32 = v33;
  if (&v35 != (uint64_t *)v33)
  {
    if (v33)
    {
      v33 = 0;
      v34 = 0;
      WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
    }
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::tryAppendStoreBinOp<(JSC::B3::Air::Opcode)4,(JSC::B3::Air::Opcode)445,(JSC::B3::Commutativity)0>(JSC::B3::_anonymous_namespace_::LowerToAir *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  BOOL v5;
  unsigned int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  int v23;
  int v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  int v31;

  v4 = *((_QWORD *)a1 + 50);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 12) - 79 > 0xFFFFFFEF;
  else
    v5 = 0;
  if (!v5)
  {
    __break(0xC471u);
    goto LABEL_41;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x80000000)
    v7 = 0x80000000;
  if (v7 == 1 && *(_DWORD *)(v4 + 52) == *(_DWORD *)(v4 + 56))
  {
    v9 = *(unsigned __int8 *)(*((_QWORD *)a1 + 50) + 12);
    if (v9 == 68)
    {
      if (*(unsigned __int8 *)(a2 + 12) - 63 < 2)
        goto LABEL_18;
    }
    else
    {
      if (v9 != 69)
      {
        if (v9 != 70 || *(_BYTE *)(a2 + 12) != 67)
          goto LABEL_14;
LABEL_18:
        v15 = v20;
        v14 = v21;
        v16 = v22;
        v13 = v23;
        v12 = v24;
        v11 = v25;
        v10 = v26;
        goto LABEL_19;
      }
      if (*(unsigned __int8 *)(a2 + 12) - 65 <= 1)
        goto LABEL_18;
    }
LABEL_14:
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 1;
LABEL_19:
    if (v15 == v27 && v14 == v28 && v13 == v30 && v12 == v31 && v16 == v29)
    {
      v19 = v11;
      v18 = v10;
    }
    else
    {
      v17 = *(unsigned __int8 *)(*((_QWORD *)a1 + 50) + 12);
      if (v17 == 68)
      {
        if (a3[12] - 63 >= 2)
          goto LABEL_28;
      }
      else if (v17 == 69)
      {
        if (a3[12] - 65 > 1)
          goto LABEL_28;
      }
      else if (v17 != 70 || a3[12] != 67)
      {
LABEL_28:
        v18 = 0;
        v19 = 0;
        if (v10)
          goto LABEL_36;
LABEL_35:
        if (v11)
        {
          __break(0xC471u);
LABEL_41:
          JUMPOUT(0x197FC4050);
        }
        goto LABEL_36;
      }
      v19 = v25;
      v18 = v26;
      if (!v10)
        goto LABEL_35;
    }
LABEL_36:
    if (v19 && !v18)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC4070);
    }
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::tryAppendStoreBinOp<(JSC::B3::Air::Opcode)5,(JSC::B3::Air::Opcode)445,(JSC::B3::Commutativity)0>(JSC::B3::_anonymous_namespace_::LowerToAir *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  BOOL v5;
  unsigned int v7;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  int v14;
  int v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  int v22;

  v4 = *((_QWORD *)a1 + 50);
  if (v4)
    v5 = *(unsigned __int8 *)(v4 + 12) - 79 > 0xFFFFFFEF;
  else
    v5 = 0;
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x197FC41E0);
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= 0x80000000)
    v7 = 0x80000000;
  if (v7 == 1 && *(_DWORD *)(v4 + 52) == *(_DWORD *)(v4 + 56))
  {
    v9 = v16;
    v10 = v17;
    if (v11 != v18 || v12 != v19 || v14 != v21 || v15 != v22 || v13 != v20)
    {
      if (v9 && !v10)
      {
LABEL_21:
        __break(0xC471u);
        JUMPOUT(0x197FC41C0);
      }
      v10 = v17;
      v9 = v16;
    }
    if (v9 && !v10)
      goto LABEL_21;
  }
}

BOOL JSC::B3::`anonymous namespace'::LowerToAir::isMergeableValue(uint64_t *a1, JSC::B3::Value *this, int a3)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;

  if (*((unsigned __int8 *)this + 12) != a3)
    return 0;
  v4 = JSC::B3::Value::child(this, 0);
  if (!*(_QWORD *)v4)
    return 1;
  v5 = *(unsigned int *)(*(_QWORD *)v4 + 8);
  v6 = (_QWORD *)(2 * *a1);
  v7 = *a1 < 0 ? 63 : *v6;
  if (v7 <= v5)
    return 1;
  v8 = v6 + 1;
  if (*a1 >= 0)
    v9 = v8;
  else
    v9 = a1;
  return (*(uint64_t *)((char *)v9 + ((v5 >> 3) & 0x1FFFFFF8)) & (1 << v5)) == 0;
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Arg,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  WTF *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  _BYTE v26[25];
  uint64_t v27;
  __int16 v28;
  int v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  int v36;
  int v37;
  char v38;
  _BYTE v39[12];

  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 400);
    v10 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    *(_OWORD *)v26 = *a3;
    *(_OWORD *)&v26[9] = *(_OWORD *)((char *)a3 + 9);
    v24 = (WTF *)v26;
    v27 = 0;
    v28 = 513;
    v29 = 1;
    v30 = a4;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 513;
    v35 = 1;
    v36 = a5;
    v37 = 0;
    v38 = 0;
    v25 = 0x300000003;
    *(_QWORD *)v39 = v9;
    *(_DWORD *)&v39[8] = (_DWORD)a2;
    v11 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v10 + 8))
    {
      WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v10, (unint64_t)&v24, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v12 = *(_QWORD *)v10;
      v13 = *(_QWORD *)v10 + (v11 << 7);
      v14 = (_OWORD *)(v13 + 16);
      *(_QWORD *)v13 = v13 + 16;
      *(_QWORD *)(v13 + 8) = 3;
      v15 = v24;
      if (v24 == (WTF *)v26)
      {
        if (HIDWORD(v25))
        {
          v16 = 32 * HIDWORD(v25);
          v17 = (__int128 *)v26;
          do
          {
            v18 = *v17;
            v19 = v17[1];
            v17 += 2;
            *v14 = v18;
            v14[1] = v19;
            v14 += 2;
            v16 -= 32;
          }
          while (v16);
        }
      }
      else
      {
        v24 = (WTF *)v26;
        *(_QWORD *)v13 = v15;
        *(_DWORD *)(v13 + 8) = v25;
      }
      v20 = HIDWORD(v25);
      HIDWORD(v25) = 0;
      *(_DWORD *)(v13 + 12) = v20;
      v21 = v12 + (v11 << 7);
      v22 = *(_QWORD *)v39;
      *(_DWORD *)(v21 + 119) = *(_DWORD *)&v39[7];
      *(_QWORD *)(v21 + 112) = v22;
      ++*(_DWORD *)(v10 + 12);
    }
    v23 = v24;
    if (v26 != (_BYTE *)v24)
    {
      if (v24)
      {
        v24 = 0;
        LODWORD(v25) = 0;
        WTF::fastFree((unint64_t)v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::simdOpcode<(JSC::B3::Air::Opcode)346,(JSC::B3::Air::Opcode)345,(JSC::B3::Air::Opcode)344,(JSC::B3::Air::Opcode)343,(JSC::B3::Air::Opcode)342,(JSC::B3::Air::Opcode)341,(JSC::B3::Air::Opcode)348,(JSC::B3::Air::Opcode)347>(int a1, int a2)
{
  __int16 v2;
  BOOL v3;

  if ((a1 - 5) > 1)
  {
    v2 = 341;
    switch(a1)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x197FC4534);
      case 1:
        if ((a2 - 3) <= 0xFFFFFFFD)
        {
          __break(0xC471u);
          JUMPOUT(0x197FC44B4);
        }
        v3 = a2 == 1;
        v2 = 345;
        goto LABEL_11;
      case 2:
        if ((a2 - 3) <= 0xFFFFFFFD)
        {
          __break(0xC471u);
          JUMPOUT(0x197FC44D4);
        }
        v3 = a2 == 1;
        v2 = 343;
LABEL_11:
        if (!v3)
          ++v2;
        break;
      case 3:
        v2 = 342;
        break;
      case 4:
        return v2;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FC4514);
    }
  }
  else if (a1 == 6)
  {
    return 347;
  }
  else
  {
    if (a1 != 5)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC44F4);
    }
    return 348;
  }
  return v2;
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Tmp,JSC::B3::Air::Tmp&>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  WTF *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  int v44;
  int v45;
  char v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  int v50;
  int v51;
  char v52;
  _BYTE v53[12];

  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v10 = *(_QWORD *)(a1 + 400);
    v39 = (WTF *)&v41;
    v41 = 0;
    v42 = 513;
    v43 = 1;
    v44 = a3;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 513;
    v49 = 1;
    v50 = a4;
    v51 = 0;
    v52 = 0;
    v40 = 0x200000003;
    *(_QWORD *)v53 = v10;
    *(_DWORD *)&v53[8] = (_DWORD)a2;
    v11 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v9 + 8))
    {
      v25 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v11 + 1, (unint64_t)&v39, a4, a5, a6, a7, a8);
      v26 = *(unsigned int *)(v9 + 12);
      v27 = *(_QWORD *)v9;
      v28 = *(_QWORD *)v9 + (v26 << 7);
      v29 = (_OWORD *)(v28 + 16);
      *(_QWORD *)v28 = v28 + 16;
      *(_QWORD *)(v28 + 8) = 3;
      v30 = *(__int128 **)v25;
      if (*(_QWORD *)v25 == v25 + 16)
      {
        v31 = *(unsigned int *)(v25 + 12);
        if ((_DWORD)v31)
        {
          v32 = 32 * v31;
          do
          {
            v33 = *v30;
            v34 = v30[1];
            v30 += 2;
            *v29 = v33;
            v29[1] = v34;
            v29 += 2;
            v32 -= 32;
          }
          while (v32);
        }
      }
      else
      {
        *(_QWORD *)v25 = v25 + 16;
        *(_QWORD *)v28 = v30;
        v38 = *(_DWORD *)(v25 + 8);
        *(_DWORD *)(v25 + 8) = 3;
        *(_DWORD *)(v28 + 8) = v38;
      }
      v35 = *(_DWORD *)(v25 + 12);
      *(_DWORD *)(v25 + 12) = 0;
      *(_DWORD *)(v28 + 12) = v35;
      v36 = v27 + (v26 << 7);
      v37 = *(_QWORD *)(v25 + 112);
      *(_DWORD *)(v36 + 119) = *(_DWORD *)(v25 + 119);
      *(_QWORD *)(v36 + 112) = v37;
    }
    else
    {
      v12 = *(_QWORD *)v9;
      v13 = *(_QWORD *)v9 + (v11 << 7);
      v14 = (_OWORD *)(v13 + 16);
      *(_QWORD *)v13 = v13 + 16;
      *(_QWORD *)(v13 + 8) = 3;
      v15 = v39;
      if (v39 == (WTF *)&v41)
      {
        if (HIDWORD(v40))
        {
          v16 = 32 * HIDWORD(v40);
          v17 = (__int128 *)&v41;
          do
          {
            v18 = *v17;
            v19 = v17[1];
            v17 += 2;
            *v14 = v18;
            v14[1] = v19;
            v14 += 2;
            v16 -= 32;
          }
          while (v16);
        }
      }
      else
      {
        v39 = (WTF *)&v41;
        *(_QWORD *)v13 = v15;
        v24 = v40;
        LODWORD(v40) = 3;
        *(_DWORD *)(v13 + 8) = v24;
      }
      v20 = HIDWORD(v40);
      HIDWORD(v40) = 0;
      *(_DWORD *)(v13 + 12) = v20;
      v21 = v12 + (v11 << 7);
      v22 = *(_QWORD *)v53;
      *(_DWORD *)(v21 + 119) = *(_DWORD *)&v53[7];
      *(_QWORD *)(v21 + 112) = v22;
    }
    ++*(_DWORD *)(v9 + 12);
    v23 = v39;
    if (&v41 != (uint64_t *)v39)
    {
      if (v39)
      {
        v39 = 0;
        LODWORD(v40) = 0;
        WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  WTF *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  _BYTE v41[25];
  uint64_t v42;
  __int16 v43;
  int v44;
  int v45;
  int v46;
  char v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  int v51;
  int v52;
  char v53;
  _BYTE v54[12];

  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 400);
    v10 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    *(_OWORD *)v41 = *a3;
    *(_OWORD *)&v41[9] = *(_OWORD *)((char *)a3 + 9);
    v39 = (WTF *)v41;
    v42 = 0;
    v43 = 513;
    v44 = 1;
    v45 = a4;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 513;
    v50 = 1;
    v51 = a5;
    v52 = 0;
    v53 = 0;
    v40 = 0x300000003;
    *(_QWORD *)v54 = v9;
    *(_DWORD *)&v54[8] = (_DWORD)a2;
    v11 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v10 + 8))
    {
      v25 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v39, a4, a5, a6, a7, a8);
      v26 = *(unsigned int *)(v10 + 12);
      v27 = *(_QWORD *)v10;
      v28 = *(_QWORD *)v10 + (v26 << 7);
      v29 = (_OWORD *)(v28 + 16);
      *(_QWORD *)v28 = v28 + 16;
      *(_QWORD *)(v28 + 8) = 3;
      v30 = *(__int128 **)v25;
      if (*(_QWORD *)v25 == v25 + 16)
      {
        v31 = *(unsigned int *)(v25 + 12);
        if ((_DWORD)v31)
        {
          v32 = 32 * v31;
          do
          {
            v33 = *v30;
            v34 = v30[1];
            v30 += 2;
            *v29 = v33;
            v29[1] = v34;
            v29 += 2;
            v32 -= 32;
          }
          while (v32);
        }
      }
      else
      {
        *(_QWORD *)v25 = v25 + 16;
        *(_QWORD *)v28 = v30;
        v38 = *(_DWORD *)(v25 + 8);
        *(_DWORD *)(v25 + 8) = 3;
        *(_DWORD *)(v28 + 8) = v38;
      }
      v35 = *(_DWORD *)(v25 + 12);
      *(_DWORD *)(v25 + 12) = 0;
      *(_DWORD *)(v28 + 12) = v35;
      v36 = v27 + (v26 << 7);
      v37 = *(_QWORD *)(v25 + 112);
      *(_DWORD *)(v36 + 119) = *(_DWORD *)(v25 + 119);
      *(_QWORD *)(v36 + 112) = v37;
    }
    else
    {
      v12 = *(_QWORD *)v10;
      v13 = *(_QWORD *)v10 + (v11 << 7);
      v14 = (_OWORD *)(v13 + 16);
      *(_QWORD *)v13 = v13 + 16;
      *(_QWORD *)(v13 + 8) = 3;
      v15 = v39;
      if (v39 == (WTF *)v41)
      {
        if (HIDWORD(v40))
        {
          v16 = 32 * HIDWORD(v40);
          v17 = (__int128 *)v41;
          do
          {
            v18 = *v17;
            v19 = v17[1];
            v17 += 2;
            *v14 = v18;
            v14[1] = v19;
            v14 += 2;
            v16 -= 32;
          }
          while (v16);
        }
      }
      else
      {
        v39 = (WTF *)v41;
        *(_QWORD *)v13 = v15;
        v24 = v40;
        LODWORD(v40) = 3;
        *(_DWORD *)(v13 + 8) = v24;
      }
      v20 = HIDWORD(v40);
      HIDWORD(v40) = 0;
      *(_DWORD *)(v13 + 12) = v20;
      v21 = v12 + (v11 << 7);
      v22 = *(_QWORD *)v54;
      *(_DWORD *)(v21 + 119) = *(_DWORD *)&v54[7];
      *(_QWORD *)(v21 + 112) = v22;
    }
    ++*(_DWORD *)(v10 + 12);
    v23 = v39;
    if (v41 != (_BYTE *)v39)
    {
      if (v39)
      {
        v39 = 0;
        LODWORD(v40) = 0;
        WTF::fastFree((unint64_t)v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::simdOpcode<(JSC::B3::Air::Opcode)338,(JSC::B3::Air::Opcode)337,(JSC::B3::Air::Opcode)336,(JSC::B3::Air::Opcode)335,(JSC::B3::Air::Opcode)340,(JSC::B3::Air::Opcode)339>(int a1)
{
  uint64_t result;

  if ((a1 - 5) > 1)
  {
    result = 337;
    switch(a1)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x197FC4A04);
      case 1:
        result = 338;
        break;
      case 2:
        return result;
      case 3:
        result = 336;
        break;
      case 4:
        result = 335;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FC49E4);
    }
  }
  else if (a1 == 6)
  {
    return 339;
  }
  else
  {
    if (a1 != 5)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC49C4);
    }
    return 340;
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::simdOpcode<(JSC::B3::Air::Opcode)439,(JSC::B3::Air::Opcode)440,(JSC::B3::Air::Opcode)441,(JSC::B3::Air::Opcode)442,(JSC::B3::Air::Opcode)443,(JSC::B3::Air::Opcode)444>(int a1)
{
  uint64_t result;

  if ((a1 - 5) > 1)
  {
    result = 440;
    switch(a1)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x197FC4AE8);
      case 1:
        result = 439;
        break;
      case 2:
        return result;
      case 3:
        result = 441;
        break;
      case 4:
        result = 442;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FC4AC8);
    }
  }
  else if (a1 == 6)
  {
    return 444;
  }
  else
  {
    if (a1 != 5)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC4AA8);
    }
    return 443;
  }
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Arg,JSC::B3::Air::Tmp>(uint64_t a1, int a2, int a3, int a4, _OWORD *a5, int a6)
{
  unsigned int v6;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  char *v21;
  _OWORD *v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  WTF *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  _BYTE v40[96];
  _BYTE v41[12];
  _OWORD v42[2];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 364);
  if (v6)
  {
    v11 = *(_QWORD *)(a1 + 352) + 528 * v6 - 528;
    v12 = *(_QWORD *)(a1 + 400);
    v42[0] = *a5;
    *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)a5 + 9);
    v39 = 4;
    v38 = (WTF *)WTF::fastMalloc((WTF *)0x80);
    v20 = v38;
    *(_QWORD *)v38 = 0;
    *((_WORD *)v20 + 4) = 513;
    *((_DWORD *)v20 + 3) = 1;
    *((_DWORD *)v20 + 4) = a3;
    *((_DWORD *)v20 + 5) = 0;
    *((_BYTE *)v20 + 24) = 0;
    ++HIDWORD(v39);
    v21 = (char *)v38 + 32 * HIDWORD(v39);
    *(_QWORD *)v21 = 0;
    *((_WORD *)v21 + 4) = 513;
    *((_DWORD *)v21 + 3) = 1;
    *((_DWORD *)v21 + 4) = a4;
    *((_DWORD *)v21 + 5) = 0;
    v21[24] = 0;
    ++HIDWORD(v39);
    v22 = (_OWORD *)((char *)v38 + 32 * HIDWORD(v39));
    v23 = v42[1];
    *v22 = v42[0];
    v22[1] = v23;
    ++HIDWORD(v39);
    v24 = (char *)v38 + 32 * HIDWORD(v39);
    *(_QWORD *)v24 = 0;
    *((_WORD *)v24 + 4) = 513;
    *((_DWORD *)v24 + 3) = 1;
    *((_DWORD *)v24 + 4) = a6;
    *((_DWORD *)v24 + 5) = 0;
    v24[24] = 0;
    ++HIDWORD(v39);
    *(_QWORD *)v41 = v12;
    *(_DWORD *)&v41[8] = a2;
    v25 = *(unsigned int *)(v11 + 12);
    if ((_DWORD)v25 == *(_DWORD *)(v11 + 8))
    {
      WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v11, (unint64_t)&v38, v14, v15, v16, v17, v18, v19);
    }
    else
    {
      v26 = *(_QWORD *)v11;
      v27 = *(_QWORD *)v11 + (v25 << 7);
      v28 = (_OWORD *)(v27 + 16);
      *(_QWORD *)v27 = v27 + 16;
      *(_QWORD *)(v27 + 8) = 3;
      v29 = v38;
      if (v38 == (WTF *)v40)
      {
        if (HIDWORD(v39))
        {
          v30 = 32 * HIDWORD(v39);
          v31 = (__int128 *)v40;
          do
          {
            v32 = *v31;
            v33 = v31[1];
            v31 += 2;
            *v28 = v32;
            v28[1] = v33;
            v28 += 2;
            v30 -= 32;
          }
          while (v30);
        }
      }
      else
      {
        v38 = (WTF *)v40;
        *(_QWORD *)v27 = v29;
        *(_DWORD *)(v27 + 8) = v39;
      }
      v34 = HIDWORD(v39);
      HIDWORD(v39) = 0;
      *(_DWORD *)(v27 + 12) = v34;
      v35 = v26 + (v25 << 7);
      v36 = *(_QWORD *)v41;
      *(_DWORD *)(v35 + 119) = *(_DWORD *)&v41[7];
      *(_QWORD *)(v35 + 112) = v36;
      ++*(_DWORD *)(v11 + 12);
    }
    v37 = v38;
    if (v40 != (_BYTE *)v38)
    {
      if (v38)
      {
        v38 = 0;
        LODWORD(v39) = 0;
        WTF::fastFree((unint64_t)v37, v13, v14, v15, v16, v17, v18, v19);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Arg,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>(uint64_t a1, int a2, _OWORD *a3, int a4, int a5, int a6)
{
  unsigned int v6;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  WTF *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  WTF *v53;
  uint64_t v54;
  _BYTE v55[96];
  _BYTE v56[12];
  _BYTE v57[32];

  v6 = *(_DWORD *)(a1 + 364);
  if (v6)
  {
    v11 = *(_QWORD *)(a1 + 352) + 528 * v6 - 528;
    v12 = *(_QWORD *)(a1 + 400);
    *(_OWORD *)v57 = *a3;
    *(_OWORD *)&v57[9] = *(_OWORD *)((char *)a3 + 9);
    v54 = 4;
    v53 = (WTF *)WTF::fastMalloc((WTF *)0x80);
    v20 = v53;
    v21 = *(_OWORD *)&v57[16];
    *(_OWORD *)v53 = *(_OWORD *)v57;
    *((_OWORD *)v20 + 1) = v21;
    ++HIDWORD(v54);
    v22 = (char *)v53 + 32 * HIDWORD(v54);
    *(_QWORD *)v22 = 0;
    *((_WORD *)v22 + 4) = 513;
    *((_DWORD *)v22 + 3) = 1;
    *((_DWORD *)v22 + 4) = a4;
    *((_DWORD *)v22 + 5) = 0;
    v22[24] = 0;
    ++HIDWORD(v54);
    v23 = (char *)v53 + 32 * HIDWORD(v54);
    *(_QWORD *)v23 = 0;
    *((_WORD *)v23 + 4) = 513;
    *((_DWORD *)v23 + 3) = 1;
    *((_DWORD *)v23 + 4) = a5;
    *((_DWORD *)v23 + 5) = 0;
    v23[24] = 0;
    ++HIDWORD(v54);
    v24 = (char *)v53 + 32 * HIDWORD(v54);
    *(_QWORD *)v24 = 0;
    *((_WORD *)v24 + 4) = 513;
    *((_DWORD *)v24 + 3) = 1;
    *((_DWORD *)v24 + 4) = a6;
    *((_DWORD *)v24 + 5) = 0;
    v24[24] = 0;
    ++HIDWORD(v54);
    *(_QWORD *)v56 = v12;
    *(_DWORD *)&v56[8] = a2;
    v25 = *(unsigned int *)(v11 + 12);
    if ((_DWORD)v25 == *(_DWORD *)(v11 + 8))
    {
      v39 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v11, v25 + 1, (unint64_t)&v53, v15, v16, v17, v18, v19);
      v40 = *(unsigned int *)(v11 + 12);
      v41 = *(_QWORD *)v11;
      v42 = *(_QWORD *)v11 + (v40 << 7);
      v43 = (_OWORD *)(v42 + 16);
      *(_QWORD *)v42 = v42 + 16;
      *(_QWORD *)(v42 + 8) = 3;
      v44 = *(__int128 **)v39;
      if (*(_QWORD *)v39 == v39 + 16)
      {
        v45 = *(unsigned int *)(v39 + 12);
        if ((_DWORD)v45)
        {
          v46 = 32 * v45;
          do
          {
            v47 = *v44;
            v48 = v44[1];
            v44 += 2;
            *v43 = v47;
            v43[1] = v48;
            v43 += 2;
            v46 -= 32;
          }
          while (v46);
        }
      }
      else
      {
        *(_QWORD *)v39 = v39 + 16;
        *(_QWORD *)v42 = v44;
        v52 = *(_DWORD *)(v39 + 8);
        *(_DWORD *)(v39 + 8) = 3;
        *(_DWORD *)(v42 + 8) = v52;
      }
      v49 = *(_DWORD *)(v39 + 12);
      *(_DWORD *)(v39 + 12) = 0;
      *(_DWORD *)(v42 + 12) = v49;
      v50 = v41 + (v40 << 7);
      v51 = *(_QWORD *)(v39 + 112);
      *(_DWORD *)(v50 + 119) = *(_DWORD *)(v39 + 119);
      *(_QWORD *)(v50 + 112) = v51;
    }
    else
    {
      v26 = *(_QWORD *)v11;
      v27 = *(_QWORD *)v11 + (v25 << 7);
      v28 = (_OWORD *)(v27 + 16);
      *(_QWORD *)v27 = v27 + 16;
      *(_QWORD *)(v27 + 8) = 3;
      v29 = v53;
      if (v53 == (WTF *)v55)
      {
        if (HIDWORD(v54))
        {
          v30 = 32 * HIDWORD(v54);
          v31 = (__int128 *)v55;
          do
          {
            v32 = *v31;
            v33 = v31[1];
            v31 += 2;
            *v28 = v32;
            v28[1] = v33;
            v28 += 2;
            v30 -= 32;
          }
          while (v30);
        }
      }
      else
      {
        v53 = (WTF *)v55;
        *(_QWORD *)v27 = v29;
        v38 = v54;
        LODWORD(v54) = 3;
        *(_DWORD *)(v27 + 8) = v38;
      }
      v34 = HIDWORD(v54);
      HIDWORD(v54) = 0;
      *(_DWORD *)(v27 + 12) = v34;
      v35 = v26 + (v25 << 7);
      v36 = *(_QWORD *)v56;
      *(_DWORD *)(v35 + 119) = *(_DWORD *)&v56[7];
      *(_QWORD *)(v35 + 112) = v36;
    }
    ++*(_DWORD *)(v11 + 12);
    v37 = v53;
    if (v55 != (_BYTE *)v53)
    {
      if (v53)
      {
        v53 = 0;
        LODWORD(v54) = 0;
        WTF::fastFree((unint64_t)v37, v13, v14, v15, v16, v17, v18, v19);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Air::Opcode,JSC::B3::Opcode,JSC::Width)#1}::operator()(uint64_t a1, int a2, int a3, int a4)
{
  __int16 v4;
  JSC::B3::_anonymous_namespace_::LowerToAir *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  int v27;
  char v28;
  char v29;
  int v30;
  JSC::B3::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  JSC::B3::Value **v50;
  int v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  __int16 v57;
  int v58;
  int v59;
  int v60;
  char v61;
  uint64_t v62;
  __int16 v63;
  int v64;
  int v65;
  int v66;
  char v67;
  JSC::B3::Value *v68;
  int v69;
  uint64_t v70;
  unsigned __int8 v71;
  char v72;
  __int16 v73;
  int v74;
  uint64_t v75;
  char v76;
  JSC::B3::Value *v77[3];

  v9 = *(JSC::B3::_anonymous_namespace_::LowerToAir **)(a1 + 8);
  v10 = JSC::B3::Value::child(**(JSC::B3::Value ***)a1, 0);
  result = 0;
  v12 = *(_QWORD *)v10;
  v13 = *(unsigned __int8 *)(*(_QWORD *)v10 + 12);
  if (v12)
    v14 = (v13 - 79) >= 0xFFFFFFF0;
  else
    v14 = 0;
  if (!v14)
    return result;
  v15 = v13 - 63;
  LODWORD(v16) = 0;
  switch(v15)
  {
    case 0:
    case 1:
    case 5:
      goto LABEL_17;
    case 2:
    case 3:
    case 6:
      LODWORD(v16) = 1;
      goto LABEL_17;
    case 4:
      v20 = *(_DWORD *)(v12 + 16);
      if (v20 >= 0x80000000)
        v20 = 0x80000000;
      if (v20 >= 6)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        v19 = 8 * v20;
LABEL_15:
        v16 = (0x40302030200uLL >> v19) & 7;
      }
LABEL_17:
      if ((_DWORD)v16 != a4)
        return 0;
      if (*(unsigned __int8 *)(v12 + 12) == a3)
      {
        v22 = v70;
        v21 = v71;
      }
      else
      {
        v21 = 0;
        v22 = 0;
        v72 = 2;
        v74 = 1;
        v75 = 0;
        v76 = 0;
        memset(v77, 0, 11);
      }
      if (v22)
        v23 = 0;
      else
        v23 = v21 == 0;
      v24 = v23;
      v25 = v21;
      if (v23)
      {
        v25 = 0;
        if (!v75 && v74 == 1)
          v25 = v77[0] != 0;
      }
      break;
    case 7:
      v17 = JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v12, 0);
      LODWORD(v16) = 0;
      v18 = *(_DWORD *)(v17 + 16);
      if (v18 >= 0x80000000)
        v18 = 0x80000000;
      if (v18 >= 6)
        goto LABEL_17;
      v19 = 8 * v18;
      goto LABEL_15;
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      LODWORD(v16) = *(unsigned __int8 *)(v12 + 60);
      goto LABEL_17;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FC536CLL);
  }
  switch(a2)
  {
    case 414:
    case 415:
    case 416:
    case 417:
      if (v25 != 6)
        goto LABEL_34;
      v50 = *(JSC::B3::Value ***)a1;
      LOBYTE(v77[1]) = 1;
      v26 = v75;
      v51 = v74;
      if ((_DWORD)v75)
        v24 = 0;
      v27 = HIDWORD(v75);
      if (v24 == 1 && !HIDWORD(v75) && v74 == 1)
      {
        if (v77[0])
        {
          v27 = 0;
          v28 = 0;
          v29 = 2;
          v51 = 1;
          LOBYTE(v21) = 1;
          goto LABEL_51;
        }
      }
      else if (v77[0])
      {
        v46 = *((unsigned int *)v77[0] + 2);
        v47 = *(_QWORD *)v9;
        if ((*(_QWORD *)v9 & 0x8000000000000000) != 0)
          v48 = 63;
        else
          v48 = *(_QWORD *)(2 * v47);
        if (v48 <= v46)
        {
          WTF::BitVector::resizeOutOfLine(v9, v46 + 1, 0);
          v47 = *(_QWORD *)v9;
        }
        if (v47 >= 0)
          v49 = 2 * v47 + 8;
        else
          v49 = (uint64_t)v9;
        *(_QWORD *)(v49 + ((v46 >> 3) & 0x1FFFFFF8)) |= 1 << v46;
      }
      v29 = v72;
      v4 = v73;
      v28 = v76;
LABEL_51:
      v31 = *v50;
      v52 = (WTF *)&v54;
      v54 = v22;
      v55 = v21;
      v56 = v29;
      v57 = v4;
      v58 = v51;
      v59 = v26;
      v60 = v27;
      v61 = v28;
      v62 = 0;
      v63 = 513;
      v64 = 1;
      v65 = v30;
      v66 = 0;
      v67 = 0;
      v53 = 0x200000003;
      v68 = v31;
      v69 = (unsigned __int16)a2;
      BYTE2(v69) = BYTE2(v77[1]);
      BYTE1(v77[1]) = 1;
      v45 = v52;
      if (&v54 != (uint64_t *)v52 && v52)
      {
        v52 = 0;
        LODWORD(v53) = 0;
        WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
      }
      result = 1;
LABEL_35:
      if (LOBYTE(v77[1]) && !BYTE1(v77[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x197FC527CLL);
      }
      return result;
    default:
LABEL_34:
      result = 0;
      goto LABEL_35;
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  WTF *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  int v36;
  int v37;
  char v38;
  _BYTE v39[12];

  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v10 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v11 = *(_QWORD *)(a1 + 400);
    v25 = (WTF *)&v27;
    v27 = 0;
    v28 = 513;
    v29 = 1;
    v30 = a3;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 513;
    v35 = 1;
    v36 = a4;
    v37 = 0;
    v38 = 0;
    v26 = 0x200000003;
    *(_QWORD *)v39 = v11;
    *(_DWORD *)&v39[8] = (_DWORD)a2;
    v12 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v12 == *(_DWORD *)(v10 + 8))
    {
      WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v10, (unint64_t)&v25, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v13 = *(_QWORD *)v10;
      v14 = *(_QWORD *)v10 + (v12 << 7);
      v15 = (_OWORD *)(v14 + 16);
      *(_QWORD *)v14 = v14 + 16;
      *(_QWORD *)(v14 + 8) = 3;
      v16 = v25;
      if (v25 == (WTF *)&v27)
      {
        if (HIDWORD(v26))
        {
          v17 = 32 * HIDWORD(v26);
          v18 = (__int128 *)&v27;
          do
          {
            v19 = *v18;
            v20 = v18[1];
            v18 += 2;
            *v15 = v19;
            v15[1] = v20;
            v15 += 2;
            v17 -= 32;
          }
          while (v17);
        }
      }
      else
      {
        v25 = (WTF *)&v27;
        *(_QWORD *)v14 = v16;
        *(_DWORD *)(v14 + 8) = v26;
      }
      v21 = HIDWORD(v26);
      HIDWORD(v26) = 0;
      *(_DWORD *)(v14 + 12) = v21;
      v22 = v13 + (v12 << 7);
      v23 = *(_QWORD *)v39;
      *(_DWORD *)(v22 + 119) = *(_DWORD *)&v39[7];
      *(_QWORD *)(v22 + 112) = v23;
      ++*(_DWORD *)(v10 + 12);
    }
    v24 = v25;
    if (&v27 != (uint64_t *)v25)
    {
      if (v25)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::simdOpcode<(JSC::B3::Air::Opcode)349,(JSC::B3::Air::Opcode)350,(JSC::B3::Air::Opcode)351,(JSC::B3::Air::Opcode)352,(JSC::B3::Air::Opcode)353,(JSC::B3::Air::Opcode)354>(int a1)
{
  uint64_t result;

  if ((a1 - 5) > 1)
  {
    result = 350;
    switch(a1)
    {
      case 0:
        __break(0xC471u);
        JUMPOUT(0x197FC5654);
      case 1:
        result = 349;
        break;
      case 2:
        return result;
      case 3:
        result = 351;
        break;
      case 4:
        result = 352;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FC5634);
    }
  }
  else if (a1 == 6)
  {
    return 354;
  }
  else
  {
    if (a1 != 5)
    {
      __break(0xC471u);
      JUMPOUT(0x197FC5614);
    }
    return 353;
  }
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::emitSIMDCompare(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  JSC::B3::Value *v3;
  unsigned int v4;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  JSC::B3::Value **v16;
  int v17;
  JSC::B3::Value **v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  WTF *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  WTF *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  int v56;
  int v57;
  char v58;
  char v59;
  _BYTE v60[7];
  __int16 v61;
  char v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  int v67;
  int v68;
  char v69;
  _BYTE v70[7];
  WTF *v71;
  int v72;
  unsigned int v73;
  _BYTE v74[120];

  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 400) + 12) - 90 >= 0x3E)
    v3 = 0;
  else
    v3 = *(JSC::B3::Value **)(a1 + 400);
  v4 = (*((_BYTE *)v3 + 40) & 0x3F) - 5;
  if (v4 >= 2)
    a3 = a2;
  v6 = *a3;
  v7 = *((unsigned __int8 *)a3 + 8);
  v61 = *(_WORD *)((char *)a3 + 9);
  v62 = *((_BYTE *)a3 + 11);
  v8 = *((_DWORD *)a3 + 3);
  v9 = *((_DWORD *)a3 + 4);
  v10 = *((_DWORD *)a3 + 5);
  *(_DWORD *)v60 = *(_DWORD *)((char *)a3 + 25);
  *(_DWORD *)&v60[3] = *((_DWORD *)a3 + 7);
  if (*a3)
    v11 = 0;
  else
    v11 = v7 == 0;
  if (v11 && v9 == 0 && v10 == 0 && v8 == 1)
    goto LABEL_41;
  v58 = *((_BYTE *)a3 + 24);
  v59 = *((_BYTE *)v3 + 40);
  v16 = (JSC::B3::Value **)JSC::B3::Value::child(v3, 0);
  v18 = (JSC::B3::Value **)JSC::B3::Value::child(v3, 1u);
  v21 = *(_DWORD *)(a1 + 364);
  if (!v21)
  {
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x197FC5984);
  }
  v22 = *(_QWORD *)(a1 + 352);
  if (v4 < 2)
    v23 = 356;
  else
    v23 = 357;
  v24 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)&v66 = v6;
  v25 = v22 + 528 * v21 - 528;
  BYTE8(v66) = v7;
  *(_WORD *)((char *)&v66 + 9) = v61;
  BYTE11(v66) = v62;
  HIDWORD(v66) = v8;
  v67 = v9;
  v68 = v10;
  v69 = v58;
  *(_DWORD *)v70 = *(_DWORD *)v60;
  *(_DWORD *)&v70[3] = *(_DWORD *)&v60[3];
  *(_QWORD *)&v63 = 0;
  WORD4(v63) = 533;
  HIDWORD(v63) = 1;
  v64 = 0;
  v65 = v59;
  JSC::B3::Air::Inst::Inst<JSC::B3::Air::Arg,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>((uint64_t *)&v71, v23, v24, &v66, &v63, v17, v19, v20);
  v33 = *(unsigned int *)(v25 + 12);
  if ((_DWORD)v33 == *(_DWORD *)(v25 + 8))
  {
    v43 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25, v33 + 1, (unint64_t)&v71, v28, v29, v30, v31, v32);
    v47 = *(unsigned int *)(v25 + 12);
    v48 = *(_QWORD *)v25;
    v49 = *(_QWORD *)v25 + (v47 << 7);
    v50 = (_OWORD *)(v49 + 16);
    *(_QWORD *)v49 = v49 + 16;
    *(_QWORD *)(v49 + 8) = 3;
    v51 = *(__int128 **)v43;
    if (*(_QWORD *)v43 == v43 + 16)
    {
      v52 = *(unsigned int *)(v43 + 12);
      if ((_DWORD)v52)
      {
        v53 = 32 * v52;
        do
        {
          v54 = *v51;
          v55 = v51[1];
          v51 += 2;
          *v50 = v54;
          v50[1] = v55;
          v50 += 2;
          v53 -= 32;
        }
        while (v53);
      }
    }
    else
    {
      *(_QWORD *)v43 = v43 + 16;
      *(_QWORD *)v49 = v51;
      v57 = *(_DWORD *)(v43 + 8);
      *(_DWORD *)(v43 + 8) = 3;
      *(_DWORD *)(v49 + 8) = v57;
    }
    v56 = *(_DWORD *)(v43 + 12);
    *(_DWORD *)(v43 + 12) = 0;
    *(_DWORD *)(v49 + 12) = v56;
    v42 = v48 + (v47 << 7) + 112;
  }
  else
  {
    v34 = *(_QWORD *)v25;
    v35 = *(_QWORD *)v25 + (v33 << 7);
    v36 = (_OWORD *)(v35 + 16);
    *(_QWORD *)v35 = v35 + 16;
    *(_QWORD *)(v35 + 8) = 3;
    v37 = v71;
    if (v71 == (WTF *)v74)
    {
      if (v73)
      {
        v38 = 32 * v73;
        do
        {
          v39 = *(_OWORD *)v37;
          v40 = *((_OWORD *)v37 + 1);
          v37 = (WTF *)((char *)v37 + 32);
          *v36 = v39;
          v36[1] = v40;
          v36 += 2;
          v38 -= 32;
        }
        while (v38);
      }
    }
    else
    {
      v71 = (WTF *)v74;
      *(_QWORD *)v35 = v37;
      v46 = v72;
      v72 = 3;
      *(_DWORD *)(v35 + 8) = v46;
    }
    v41 = v73;
    v73 = 0;
    *(_DWORD *)(v35 + 12) = v41;
    v42 = v34 + (v33 << 7) + 112;
    v43 = (unint64_t)&v71;
  }
  v44 = *(_QWORD *)(v43 + 112);
  *(_DWORD *)(v42 + 7) = *(_DWORD *)(v43 + 119);
  *(_QWORD *)v42 = v44;
  ++*(_DWORD *)(v25 + 12);
  v45 = v71;
  if (v74 != (_BYTE *)v71)
  {
    if (v71)
    {
      v71 = 0;
      v72 = 0;
      WTF::fastFree((unint64_t)v45, v26, v27, v28, v29, v30, v31, v32);
    }
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::emitSIMDCompare(uint64_t a1, uint64_t a2)
{
  int v2;
  __int128 v3;
  uint64_t *v4;
  uint64_t *v5;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  char v17;
  _OWORD v18[2];

  v2 = *(unsigned __int8 *)(a2 + 8);
  if (v2 == 16)
  {
    v8 = 0;
    v9 = 512;
    v10 = 1;
    v11 = 0;
    v12 = 0;
    v6 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v6;
    v4 = &v8;
    v5 = (uint64_t *)v7;
  }
  else
  {
    if (v2 != 14)
      return;
    v3 = *(_OWORD *)(a2 + 16);
    v18[0] = *(_OWORD *)a2;
    v18[1] = v3;
    v13 = 0;
    v14 = 512;
    v15 = 1;
    v16 = 0;
    v17 = 0;
    v4 = (uint64_t *)v18;
    v5 = &v13;
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::emitSIMDBinaryOp(uint64_t a1, int a2)
{
  unsigned __int16 v2;
  JSC::B3::Value *v4;
  int v5;
  char v6;
  JSC::B3::Value **v7;
  int v8;
  JSC::B3::Value **v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  JSC::B3::Value **v45;
  int v46;
  JSC::B3::Value **v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  _BYTE v68[12];

  v2 = a2;
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 400) + 12) - 90 >= 0x3E)
    v4 = 0;
  else
    v4 = *(JSC::B3::Value **)(a1 + 400);
  if ((a2 - 361) > 0x1D)
    goto LABEL_7;
  v5 = 1 << (a2 - 105);
  if ((v5 & 0x1C00) == 0)
  {
    if ((v5 & 0x3097839F) != 0)
    {
LABEL_19:
      v44 = *((_BYTE *)v4 + 40);
      *(_QWORD *)&v65 = 0;
      HIDWORD(v65) = 1;
      v66 = 0;
      WORD4(v65) = 533;
      v67 = v44;
      v45 = (JSC::B3::Value **)JSC::B3::Value::child(v4, 0);
      v47 = (JSC::B3::Value **)JSC::B3::Value::child(v4, 1u);
      return;
    }
LABEL_7:
    if ((a2 - 431) >= 2)
      goto LABEL_28;
    goto LABEL_19;
  }
  v6 = *((_BYTE *)v4 + 40);
  v7 = (JSC::B3::Value **)JSC::B3::Value::child(v4, 0);
  v9 = (JSC::B3::Value **)JSC::B3::Value::child(v4, 1u);
  v12 = *(_QWORD *)(a1 + 432);
  v13 = *(_DWORD *)(v12 + 180);
  *(_DWORD *)(v12 + 180) = v13 + 1;
  v14 = *(_DWORD *)(a1 + 364);
  if (!v14)
  {
LABEL_28:
    __break(0xC471u);
    JUMPOUT(0x197FC5AB0);
  }
  v15 = v11;
  v16 = -33 - v13;
  v17 = *(_QWORD *)(a1 + 352) + 528 * v14 - 528;
  v18 = *(_QWORD *)(a1 + 400);
  *((_QWORD *)&v65 + 1) = 5;
  *(_QWORD *)&v65 = WTF::fastMalloc((WTF *)0xA0);
  v26 = v65;
  *(_QWORD *)v65 = 0;
  *(_WORD *)(v26 + 8) = 533;
  *(_DWORD *)(v26 + 12) = 1;
  *(_QWORD *)(v26 + 16) = 0;
  *(_BYTE *)(v26 + 24) = v6;
  ++HIDWORD(v65);
  v27 = v65 + 32 * HIDWORD(v65);
  *(_QWORD *)v27 = 0;
  *(_WORD *)(v27 + 8) = 513;
  *(_DWORD *)(v27 + 12) = 1;
  *(_DWORD *)(v27 + 16) = v8;
  *(_DWORD *)(v27 + 20) = 0;
  *(_BYTE *)(v27 + 24) = 0;
  ++HIDWORD(v65);
  v28 = v65 + 32 * HIDWORD(v65);
  *(_QWORD *)v28 = 0;
  *(_WORD *)(v28 + 8) = 513;
  *(_DWORD *)(v28 + 12) = 1;
  *(_DWORD *)(v28 + 16) = v10;
  *(_DWORD *)(v28 + 20) = 0;
  *(_BYTE *)(v28 + 24) = 0;
  ++HIDWORD(v65);
  v29 = v65 + 32 * HIDWORD(v65);
  *(_QWORD *)v29 = 0;
  *(_WORD *)(v29 + 8) = 513;
  *(_DWORD *)(v29 + 12) = 1;
  *(_DWORD *)(v29 + 16) = v15;
  *(_DWORD *)(v29 + 20) = 0;
  *(_BYTE *)(v29 + 24) = 0;
  ++HIDWORD(v65);
  v30 = v65 + 32 * HIDWORD(v65);
  *(_QWORD *)v30 = 0;
  *(_WORD *)(v30 + 8) = 513;
  *(_DWORD *)(v30 + 12) = 1;
  *(_DWORD *)(v30 + 16) = v16;
  *(_DWORD *)(v30 + 20) = 0;
  *(_BYTE *)(v30 + 24) = 0;
  ++HIDWORD(v65);
  *(_QWORD *)v68 = v18;
  *(_DWORD *)&v68[8] = v2;
  v31 = *(unsigned int *)(v17 + 12);
  if ((_DWORD)v31 == *(_DWORD *)(v17 + 8))
  {
    v51 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v17, v31 + 1, (unint64_t)&v65, v21, v22, v23, v24, v25);
    v52 = *(unsigned int *)(v17 + 12);
    v53 = *(_QWORD *)v17;
    v54 = *(_QWORD *)v17 + (v52 << 7);
    v55 = (_OWORD *)(v54 + 16);
    *(_QWORD *)v54 = v54 + 16;
    *(_QWORD *)(v54 + 8) = 3;
    v56 = *(__int128 **)v51;
    if (*(_QWORD *)v51 == v51 + 16)
    {
      v57 = *(unsigned int *)(v51 + 12);
      if ((_DWORD)v57)
      {
        v58 = 32 * v57;
        do
        {
          v59 = *v56;
          v60 = v56[1];
          v56 += 2;
          *v55 = v59;
          v55[1] = v60;
          v55 += 2;
          v58 -= 32;
        }
        while (v58);
      }
    }
    else
    {
      *(_QWORD *)v51 = v51 + 16;
      *(_QWORD *)v54 = v56;
      v64 = *(_DWORD *)(v51 + 8);
      *(_DWORD *)(v51 + 8) = 3;
      *(_DWORD *)(v54 + 8) = v64;
    }
    v61 = *(_DWORD *)(v51 + 12);
    *(_DWORD *)(v51 + 12) = 0;
    *(_DWORD *)(v54 + 12) = v61;
    v62 = v53 + (v52 << 7);
    v63 = *(_QWORD *)(v51 + 112);
    *(_DWORD *)(v62 + 119) = *(_DWORD *)(v51 + 119);
    *(_QWORD *)(v62 + 112) = v63;
  }
  else
  {
    v32 = *(_QWORD *)v17;
    v33 = *(_QWORD *)v17 + (v31 << 7);
    v34 = (_OWORD *)(v33 + 16);
    *(_QWORD *)v33 = v33 + 16;
    *(_QWORD *)(v33 + 8) = 3;
    v35 = v65;
    if ((uint64_t *)v65 == &v66)
    {
      if (HIDWORD(v65))
      {
        v36 = 32 * HIDWORD(v65);
        v37 = (__int128 *)&v66;
        do
        {
          v38 = *v37;
          v39 = v37[1];
          v37 += 2;
          *v34 = v38;
          v34[1] = v39;
          v34 += 2;
          v36 -= 32;
        }
        while (v36);
      }
    }
    else
    {
      *(_QWORD *)&v65 = &v66;
      *(_QWORD *)v33 = v35;
      v50 = DWORD2(v65);
      DWORD2(v65) = 3;
      *(_DWORD *)(v33 + 8) = v50;
    }
    v40 = HIDWORD(v65);
    HIDWORD(v65) = 0;
    *(_DWORD *)(v33 + 12) = v40;
    v41 = v32 + (v31 << 7);
    v42 = *(_QWORD *)v68;
    *(_DWORD *)(v41 + 119) = *(_DWORD *)&v68[7];
    *(_QWORD *)(v41 + 112) = v42;
  }
  ++*(_DWORD *)(v17 + 12);
  v43 = v65;
  if (&v66 != (uint64_t *)v65 && (_QWORD)v65)
  {
    *(_QWORD *)&v65 = 0;
    DWORD2(v65) = 0;
    WTF::fastFree(v43, v19, v20, v21, v22, v23, v24, v25);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::emitSIMDMonomorphicBinaryOp(JSC::B3::_anonymous_namespace_::LowerToAir *a1, int a2)
{
  unsigned __int16 v2;
  JSC::B3::Value *v4;
  JSC::B3::Value **v5;
  uint64_t v6;
  JSC::B3::Value **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::B3::Value **v13;
  int v14;
  JSC::B3::Value **v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;

  v2 = a2;
  if (*(unsigned __int8 *)(*((_QWORD *)a1 + 50) + 12) - 90 >= 0x3E)
    v4 = 0;
  else
    v4 = (JSC::B3::Value *)*((_QWORD *)a1 + 50);
  if (a2 <= 149)
  {
    switch(a2)
    {
      case 1:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 17:
      case 19:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 68:
      case 69:
      case 70:
      case 71:
        goto LABEL_6;
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
        goto LABEL_16;
      default:
        goto LABEL_15;
    }
  }
  if (a2 <= 432)
  {
    if ((a2 - 150) <= 0x37 && ((1 << (a2 + 106)) & 0xF00000000000F3) != 0
      || a2 == 374)
    {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
  if (a2 != 434)
  {
    if (a2 == 435 || a2 == 433)
    {
LABEL_6:
      v5 = (JSC::B3::Value **)JSC::B3::Value::child(v4, 0);
      v7 = (JSC::B3::Value **)JSC::B3::Value::child(v4, 1u);
      return;
    }
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x197FC5F80);
  }
LABEL_16:
  v13 = (JSC::B3::Value **)JSC::B3::Value::child(v4, 0);
  v15 = (JSC::B3::Value **)JSC::B3::Value::child(v4, 1u);
  v18 = *((_QWORD *)a1 + 54);
  v19 = *(_DWORD *)(v18 + 180);
  *(_DWORD *)(v18 + 180) = v19 + 1;
}

void JSC::B3::`anonymous namespace'::LowerToAir::emitSIMDUnaryOp(JSC::B3::_anonymous_namespace_::LowerToAir *a1, int a2)
{
  JSC::B3::Value *v2;
  char v3;
  unsigned __int16 v5;
  JSC::B3::Value **v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  unsigned __int16 v13;
  JSC::B3::Value **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char v22;

  if (*(unsigned __int8 *)(*((_QWORD *)a1 + 50) + 12) - 90 >= 0x3E)
    v2 = 0;
  else
    v2 = (JSC::B3::Value *)*((_QWORD *)a1 + 50);
  switch(a2)
  {
    case 359:
    case 360:
    case 375:
    case 388:
    case 392:
    case 394:
    case 395:
    case 396:
    case 397:
    case 398:
    case 399:
    case 403:
    case 405:
    case 408:
    case 409:
    case 410:
    case 411:
    case 412:
    case 413:
    case 427:
    case 428:
    case 429:
      v11 = *((_BYTE *)v2 + 40);
      *(_QWORD *)&v20 = 0;
      HIDWORD(v20) = 1;
      v21 = 0;
      WORD4(v20) = 533;
      v22 = v11;
      v13 = a2;
      v14 = (JSC::B3::Value **)JSC::B3::Value::child(v2, 0);
      break;
    case 361:
    case 362:
    case 363:
    case 364:
    case 365:
    case 368:
    case 369:
    case 370:
    case 376:
    case 377:
    case 378:
    case 379:
    case 381:
    case 384:
    case 389:
    case 390:
    case 431:
    case 432:
      v3 = *((_BYTE *)v2 + 40);
      *(_QWORD *)&v20 = 0;
      HIDWORD(v20) = 1;
      v21 = 0;
      WORD4(v20) = 533;
      v22 = v3;
      v5 = a2;
      v6 = (JSC::B3::Value **)JSC::B3::Value::child(v2, 0);
      v9 = *((_QWORD *)a1 + 54);
      v10 = *(_DWORD *)(v9 + 180);
      *(_DWORD *)(v9 + 180) = v10 + 1;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FC618CLL);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::emitSIMDMonomorphicUnaryOp(JSC::B3::_anonymous_namespace_::LowerToAir *a1)
{
  JSC::B3::Value *v2;
  JSC::B3::Value **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(unsigned __int8 *)(*((_QWORD *)a1 + 50) + 12) - 90 >= 0x3E)
    v2 = 0;
  else
    v2 = (JSC::B3::Value *)*((_QWORD *)a1 + 50);
  v3 = (JSC::B3::Value **)JSC::B3::Value::child(v2, 0);
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp&>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  WTF *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  int v44;
  int v45;
  char v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  int v50;
  int v51;
  char v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  int v56;
  int v57;
  char v58;
  _BYTE v59[12];

  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 400);
    v10 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v39 = (WTF *)&v41;
    v41 = 0;
    v42 = 513;
    v43 = 1;
    v44 = a3;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 513;
    v49 = 1;
    v50 = a4;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 513;
    v55 = 1;
    v56 = a5;
    v57 = 0;
    v58 = 0;
    v40 = 0x300000003;
    *(_QWORD *)v59 = v9;
    *(_DWORD *)&v59[8] = (_DWORD)a2;
    v11 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v10 + 8))
    {
      v25 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v11 + 1, (unint64_t)&v39, a4, a5, a6, a7, a8);
      v26 = *(unsigned int *)(v10 + 12);
      v27 = *(_QWORD *)v10;
      v28 = *(_QWORD *)v10 + (v26 << 7);
      v29 = (_OWORD *)(v28 + 16);
      *(_QWORD *)v28 = v28 + 16;
      *(_QWORD *)(v28 + 8) = 3;
      v30 = *(__int128 **)v25;
      if (*(_QWORD *)v25 == v25 + 16)
      {
        v31 = *(unsigned int *)(v25 + 12);
        if ((_DWORD)v31)
        {
          v32 = 32 * v31;
          do
          {
            v33 = *v30;
            v34 = v30[1];
            v30 += 2;
            *v29 = v33;
            v29[1] = v34;
            v29 += 2;
            v32 -= 32;
          }
          while (v32);
        }
      }
      else
      {
        *(_QWORD *)v25 = v25 + 16;
        *(_QWORD *)v28 = v30;
        v38 = *(_DWORD *)(v25 + 8);
        *(_DWORD *)(v25 + 8) = 3;
        *(_DWORD *)(v28 + 8) = v38;
      }
      v35 = *(_DWORD *)(v25 + 12);
      *(_DWORD *)(v25 + 12) = 0;
      *(_DWORD *)(v28 + 12) = v35;
      v36 = v27 + (v26 << 7);
      v37 = *(_QWORD *)(v25 + 112);
      *(_DWORD *)(v36 + 119) = *(_DWORD *)(v25 + 119);
      *(_QWORD *)(v36 + 112) = v37;
    }
    else
    {
      v12 = *(_QWORD *)v10;
      v13 = *(_QWORD *)v10 + (v11 << 7);
      v14 = (_OWORD *)(v13 + 16);
      *(_QWORD *)v13 = v13 + 16;
      *(_QWORD *)(v13 + 8) = 3;
      v15 = v39;
      if (v39 == (WTF *)&v41)
      {
        if (HIDWORD(v40))
        {
          v16 = 32 * HIDWORD(v40);
          v17 = (__int128 *)&v41;
          do
          {
            v18 = *v17;
            v19 = v17[1];
            v17 += 2;
            *v14 = v18;
            v14[1] = v19;
            v14 += 2;
            v16 -= 32;
          }
          while (v16);
        }
      }
      else
      {
        v39 = (WTF *)&v41;
        *(_QWORD *)v13 = v15;
        v24 = v40;
        LODWORD(v40) = 3;
        *(_DWORD *)(v13 + 8) = v24;
      }
      v20 = HIDWORD(v40);
      HIDWORD(v40) = 0;
      *(_DWORD *)(v13 + 12) = v20;
      v21 = v12 + (v11 << 7);
      v22 = *(_QWORD *)v59;
      *(_DWORD *)(v21 + 119) = *(_DWORD *)&v59[7];
      *(_QWORD *)(v21 + 112) = v22;
    }
    ++*(_DWORD *)(v10 + 12);
    v23 = v39;
    if (&v41 != (uint64_t *)v39)
    {
      if (v39)
      {
        v39 = 0;
        LODWORD(v40) = 0;
        WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  WTF *v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  WTF *v47;
  uint64_t v48;
  _BYTE v49[96];
  _BYTE v50[12];

  v3 = *(_DWORD *)(a1 + 364);
  if (v3)
  {
    v6 = *(_QWORD *)(a1 + 352) + 528 * v3 - 528;
    v7 = *(_QWORD *)(a1 + 400);
    v48 = 4;
    v47 = (WTF *)WTF::fastMalloc((WTF *)0x80);
    v15 = v47;
    *(_QWORD *)v47 = 0;
    *((_WORD *)v15 + 4) = 513;
    *(_QWORD *)((char *)v15 + 12) = 0xFFFFFFE100000001;
    *((_DWORD *)v15 + 5) = 0;
    *((_BYTE *)v15 + 24) = 0;
    ++HIDWORD(v48);
    v16 = (char *)v47 + 32 * HIDWORD(v48);
    *(_QWORD *)v16 = 0;
    *((_WORD *)v16 + 4) = 513;
    *(_QWORD *)(v16 + 12) = 0xFFFFFFE000000001;
    *((_DWORD *)v16 + 5) = 0;
    v16[24] = 0;
    ++HIDWORD(v48);
    v17 = (char *)v47 + 32 * HIDWORD(v48);
    *(_QWORD *)v17 = 0;
    *((_WORD *)v17 + 4) = 513;
    *((_DWORD *)v17 + 3) = 1;
    *((_DWORD *)v17 + 4) = a2;
    *((_DWORD *)v17 + 5) = 0;
    v17[24] = 0;
    ++HIDWORD(v48);
    v18 = (char *)v47 + 32 * HIDWORD(v48);
    *(_QWORD *)v18 = 0;
    *((_WORD *)v18 + 4) = 513;
    *((_DWORD *)v18 + 3) = 1;
    *((_DWORD *)v18 + 4) = a3;
    *((_DWORD *)v18 + 5) = 0;
    v18[24] = 0;
    ++HIDWORD(v48);
    *(_QWORD *)v50 = v7;
    *(_DWORD *)&v50[8] = 436;
    v19 = *(unsigned int *)(v6 + 12);
    if ((_DWORD)v19 == *(_DWORD *)(v6 + 8))
    {
      v33 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v19 + 1, (unint64_t)&v47, v10, v11, v12, v13, v14);
      v34 = *(unsigned int *)(v6 + 12);
      v35 = *(_QWORD *)v6;
      v36 = *(_QWORD *)v6 + (v34 << 7);
      v37 = (_OWORD *)(v36 + 16);
      *(_QWORD *)v36 = v36 + 16;
      *(_QWORD *)(v36 + 8) = 3;
      v38 = *(__int128 **)v33;
      if (*(_QWORD *)v33 == v33 + 16)
      {
        v39 = *(unsigned int *)(v33 + 12);
        if ((_DWORD)v39)
        {
          v40 = 32 * v39;
          do
          {
            v41 = *v38;
            v42 = v38[1];
            v38 += 2;
            *v37 = v41;
            v37[1] = v42;
            v37 += 2;
            v40 -= 32;
          }
          while (v40);
        }
      }
      else
      {
        *(_QWORD *)v33 = v33 + 16;
        *(_QWORD *)v36 = v38;
        v46 = *(_DWORD *)(v33 + 8);
        *(_DWORD *)(v33 + 8) = 3;
        *(_DWORD *)(v36 + 8) = v46;
      }
      v43 = *(_DWORD *)(v33 + 12);
      *(_DWORD *)(v33 + 12) = 0;
      *(_DWORD *)(v36 + 12) = v43;
      v44 = v35 + (v34 << 7);
      v45 = *(_QWORD *)(v33 + 112);
      *(_DWORD *)(v44 + 119) = *(_DWORD *)(v33 + 119);
      *(_QWORD *)(v44 + 112) = v45;
    }
    else
    {
      v20 = *(_QWORD *)v6;
      v21 = *(_QWORD *)v6 + (v19 << 7);
      v22 = (_OWORD *)(v21 + 16);
      *(_QWORD *)v21 = v21 + 16;
      *(_QWORD *)(v21 + 8) = 3;
      v23 = v47;
      if (v47 == (WTF *)v49)
      {
        if (HIDWORD(v48))
        {
          v24 = 32 * HIDWORD(v48);
          v25 = (__int128 *)v49;
          do
          {
            v26 = *v25;
            v27 = v25[1];
            v25 += 2;
            *v22 = v26;
            v22[1] = v27;
            v22 += 2;
            v24 -= 32;
          }
          while (v24);
        }
      }
      else
      {
        v47 = (WTF *)v49;
        *(_QWORD *)v21 = v23;
        v32 = v48;
        LODWORD(v48) = 3;
        *(_DWORD *)(v21 + 8) = v32;
      }
      v28 = HIDWORD(v48);
      HIDWORD(v48) = 0;
      *(_DWORD *)(v21 + 12) = v28;
      v29 = v20 + (v19 << 7);
      v30 = *(_QWORD *)v50;
      *(_DWORD *)(v29 + 119) = *(_DWORD *)&v50[7];
      *(_QWORD *)(v29 + 112) = v30;
    }
    ++*(_DWORD *)(v6 + 12);
    v31 = v47;
    if (v49 != (_BYTE *)v47)
    {
      if (v47)
      {
        v47 = 0;
        LODWORD(v48) = 0;
        WTF::fastFree((unint64_t)v31, v8, v9, v10, v11, v12, v13, v14);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Arg,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>(uint64_t a1, int a2, _OWORD *a3, int a4, int a5, int a6, int a7, int a8)
{
  unsigned int v8;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  WTF *v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  WTF *v59;
  uint64_t v60;
  _BYTE v61[96];
  _BYTE v62[12];
  _BYTE v63[32];

  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v15 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v16 = *(_QWORD *)(a1 + 400);
    *(_OWORD *)v63 = *a3;
    *(_OWORD *)&v63[9] = *(_OWORD *)((char *)a3 + 9);
    v60 = 6;
    v59 = (WTF *)WTF::fastMalloc((WTF *)0xC0);
    v24 = v59;
    v25 = *(_OWORD *)&v63[16];
    *(_OWORD *)v59 = *(_OWORD *)v63;
    *((_OWORD *)v24 + 1) = v25;
    ++HIDWORD(v60);
    v26 = (char *)v59 + 32 * HIDWORD(v60);
    *(_QWORD *)v26 = 0;
    *((_WORD *)v26 + 4) = 513;
    *((_DWORD *)v26 + 3) = 1;
    *((_DWORD *)v26 + 4) = a4;
    *((_DWORD *)v26 + 5) = 0;
    v26[24] = 0;
    ++HIDWORD(v60);
    v27 = (char *)v59 + 32 * HIDWORD(v60);
    *(_QWORD *)v27 = 0;
    *((_WORD *)v27 + 4) = 513;
    *((_DWORD *)v27 + 3) = 1;
    *((_DWORD *)v27 + 4) = a5;
    *((_DWORD *)v27 + 5) = 0;
    v27[24] = 0;
    ++HIDWORD(v60);
    v28 = (char *)v59 + 32 * HIDWORD(v60);
    *(_QWORD *)v28 = 0;
    *((_WORD *)v28 + 4) = 513;
    *((_DWORD *)v28 + 3) = 1;
    *((_DWORD *)v28 + 4) = a6;
    *((_DWORD *)v28 + 5) = 0;
    v28[24] = 0;
    ++HIDWORD(v60);
    v29 = (char *)v59 + 32 * HIDWORD(v60);
    *(_QWORD *)v29 = 0;
    *((_WORD *)v29 + 4) = 513;
    *((_DWORD *)v29 + 3) = 1;
    *((_DWORD *)v29 + 4) = a7;
    *((_DWORD *)v29 + 5) = 0;
    v29[24] = 0;
    ++HIDWORD(v60);
    v30 = (char *)v59 + 32 * HIDWORD(v60);
    *(_QWORD *)v30 = 0;
    *((_WORD *)v30 + 4) = 513;
    *((_DWORD *)v30 + 3) = 1;
    *((_DWORD *)v30 + 4) = a8;
    *((_DWORD *)v30 + 5) = 0;
    v30[24] = 0;
    ++HIDWORD(v60);
    *(_QWORD *)v62 = v16;
    *(_DWORD *)&v62[8] = a2;
    v31 = *(unsigned int *)(v15 + 12);
    if ((_DWORD)v31 == *(_DWORD *)(v15 + 8))
    {
      v45 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v15, v31 + 1, (unint64_t)&v59, v19, v20, v21, v22, v23);
      v46 = *(unsigned int *)(v15 + 12);
      v47 = *(_QWORD *)v15;
      v48 = *(_QWORD *)v15 + (v46 << 7);
      v49 = (_OWORD *)(v48 + 16);
      *(_QWORD *)v48 = v48 + 16;
      *(_QWORD *)(v48 + 8) = 3;
      v50 = *(__int128 **)v45;
      if (*(_QWORD *)v45 == v45 + 16)
      {
        v51 = *(unsigned int *)(v45 + 12);
        if ((_DWORD)v51)
        {
          v52 = 32 * v51;
          do
          {
            v53 = *v50;
            v54 = v50[1];
            v50 += 2;
            *v49 = v53;
            v49[1] = v54;
            v49 += 2;
            v52 -= 32;
          }
          while (v52);
        }
      }
      else
      {
        *(_QWORD *)v45 = v45 + 16;
        *(_QWORD *)v48 = v50;
        v58 = *(_DWORD *)(v45 + 8);
        *(_DWORD *)(v45 + 8) = 3;
        *(_DWORD *)(v48 + 8) = v58;
      }
      v55 = *(_DWORD *)(v45 + 12);
      *(_DWORD *)(v45 + 12) = 0;
      *(_DWORD *)(v48 + 12) = v55;
      v56 = v47 + (v46 << 7);
      v57 = *(_QWORD *)(v45 + 112);
      *(_DWORD *)(v56 + 119) = *(_DWORD *)(v45 + 119);
      *(_QWORD *)(v56 + 112) = v57;
    }
    else
    {
      v32 = *(_QWORD *)v15;
      v33 = *(_QWORD *)v15 + (v31 << 7);
      v34 = (_OWORD *)(v33 + 16);
      *(_QWORD *)v33 = v33 + 16;
      *(_QWORD *)(v33 + 8) = 3;
      v35 = v59;
      if (v59 == (WTF *)v61)
      {
        if (HIDWORD(v60))
        {
          v36 = 32 * HIDWORD(v60);
          v37 = (__int128 *)v61;
          do
          {
            v38 = *v37;
            v39 = v37[1];
            v37 += 2;
            *v34 = v38;
            v34[1] = v39;
            v34 += 2;
            v36 -= 32;
          }
          while (v36);
        }
      }
      else
      {
        v59 = (WTF *)v61;
        *(_QWORD *)v33 = v35;
        v44 = v60;
        LODWORD(v60) = 3;
        *(_DWORD *)(v33 + 8) = v44;
      }
      v40 = HIDWORD(v60);
      HIDWORD(v60) = 0;
      *(_DWORD *)(v33 + 12) = v40;
      v41 = v32 + (v31 << 7);
      v42 = *(_QWORD *)v62;
      *(_DWORD *)(v41 + 119) = *(_DWORD *)&v62[7];
      *(_QWORD *)(v41 + 112) = v42;
    }
    ++*(_DWORD *)(v15 + 12);
    v43 = v59;
    if (v61 != (_BYTE *)v59)
    {
      if (v59)
      {
        v59 = 0;
        LODWORD(v60) = 0;
        WTF::fastFree((unint64_t)v43, v17, v18, v19, v20, v21, v22, v23);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  WTF *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  _BYTE v41[96];
  _BYTE v42[12];

  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v10 = *(_QWORD *)(a1 + 400);
    v39 = (WTF *)v41;
    v40 = 3;
    *(_QWORD *)v42 = v10;
    *(_DWORD *)&v42[8] = (_DWORD)a2;
    v11 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v9 + 8))
    {
      v25 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v11 + 1, (unint64_t)&v39, a4, a5, a6, a7, a8);
      v26 = *(unsigned int *)(v9 + 12);
      v27 = *(_QWORD *)v9;
      v28 = *(_QWORD *)v9 + (v26 << 7);
      v29 = (_OWORD *)(v28 + 16);
      *(_QWORD *)v28 = v28 + 16;
      *(_QWORD *)(v28 + 8) = 3;
      v30 = *(__int128 **)v25;
      if (*(_QWORD *)v25 == v25 + 16)
      {
        v31 = *(unsigned int *)(v25 + 12);
        if ((_DWORD)v31)
        {
          v32 = 32 * v31;
          do
          {
            v33 = *v30;
            v34 = v30[1];
            v30 += 2;
            *v29 = v33;
            v29[1] = v34;
            v29 += 2;
            v32 -= 32;
          }
          while (v32);
        }
      }
      else
      {
        *(_QWORD *)v25 = v25 + 16;
        *(_QWORD *)v28 = v30;
        v38 = *(_DWORD *)(v25 + 8);
        *(_DWORD *)(v25 + 8) = 3;
        *(_DWORD *)(v28 + 8) = v38;
      }
      v35 = *(_DWORD *)(v25 + 12);
      *(_DWORD *)(v25 + 12) = 0;
      *(_DWORD *)(v28 + 12) = v35;
      v36 = v27 + (v26 << 7);
      v37 = *(_QWORD *)(v25 + 112);
      *(_DWORD *)(v36 + 119) = *(_DWORD *)(v25 + 119);
      *(_QWORD *)(v36 + 112) = v37;
    }
    else
    {
      v12 = *(_QWORD *)v9;
      v13 = *(_QWORD *)v9 + (v11 << 7);
      v14 = (_OWORD *)(v13 + 16);
      *(_QWORD *)v13 = v13 + 16;
      *(_QWORD *)(v13 + 8) = 3;
      v15 = v39;
      if (v39 == (WTF *)v41)
      {
        if (HIDWORD(v40))
        {
          v16 = 32 * HIDWORD(v40);
          v17 = (__int128 *)v41;
          do
          {
            v18 = *v17;
            v19 = v17[1];
            v17 += 2;
            *v14 = v18;
            v14[1] = v19;
            v14 += 2;
            v16 -= 32;
          }
          while (v16);
        }
      }
      else
      {
        v39 = (WTF *)v41;
        *(_QWORD *)v13 = v15;
        v24 = v40;
        LODWORD(v40) = 3;
        *(_DWORD *)(v13 + 8) = v24;
      }
      v20 = HIDWORD(v40);
      HIDWORD(v40) = 0;
      *(_DWORD *)(v13 + 12) = v20;
      v21 = v12 + (v11 << 7);
      v22 = *(_QWORD *)v42;
      *(_DWORD *)(v21 + 119) = *(_DWORD *)&v42[7];
      *(_QWORD *)(v21 + 112) = v22;
    }
    ++*(_DWORD *)(v9 + 12);
    v23 = v39;
    if (v41 != (_BYTE *)v39)
    {
      if (v39)
      {
        v39 = 0;
        LODWORD(v40) = 0;
        WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendUnOp<(JSC::B3::Air::Opcode)104,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445>(JSC::B3::Value **a1, JSC::B3::Value *a2)
{
  unsigned int v2;
  uint64_t v5;
  BOOL v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  WTF *v28;
  uint64_t v29;
  _BYTE v30[25];
  uint64_t v31;
  __int16 v32;
  int v33;
  int v34;
  int v35;
  char v36;
  JSC::B3::Value *v37;
  int v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v2 = *((_DWORD *)a2 + 4);
  if (v2 >= 0x80000000)
    v2 = 0x80000000;
  if (v2 != 1)
  {
    __break(0xC471u);
    goto LABEL_22;
  }
  if (v39)
    v6 = 0;
  else
    v6 = v40 == 0;
  if (!v6)
  {
    if (v40 != 1)
      goto LABEL_18;
LABEL_14:
    v7 = a1[50];
    *(_OWORD *)v30 = v27[0];
    *(_OWORD *)&v30[9] = *(_OWORD *)((char *)v27 + 9);
    v28 = (WTF *)v30;
    v31 = 0;
    v32 = 513;
    v33 = 1;
    v34 = v5;
    v35 = 0;
    v36 = 0;
    v29 = 0x200000003;
    v37 = v7;
    v38 = 104;
    BYTE2(v38) = v47;
    v21 = v28;
    if (v30 != (_BYTE *)v28 && v28)
    {
      v28 = 0;
      LODWORD(v29) = 0;
      WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
    }
    return;
  }
  if (!v42 && !v43 && v41 == 1 && v44)
    goto LABEL_14;
LABEL_18:
  if (v45 && !v46)
  {
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x197FC6DC8);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendUnOp<(JSC::B3::Air::Opcode)106,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445>(JSC::B3::Value **a1, JSC::B3::Value *a2)
{
  unsigned int v2;
  uint64_t v5;
  BOOL v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  WTF *v28;
  uint64_t v29;
  _BYTE v30[25];
  uint64_t v31;
  __int16 v32;
  int v33;
  int v34;
  int v35;
  char v36;
  JSC::B3::Value *v37;
  int v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v2 = *((_DWORD *)a2 + 4);
  if (v2 >= 0x80000000)
    v2 = 0x80000000;
  if (v2 != 1)
  {
    __break(0xC471u);
    goto LABEL_22;
  }
  if (v39)
    v6 = 0;
  else
    v6 = v40 == 0;
  if (!v6)
  {
    if (v40 != 1)
      goto LABEL_18;
LABEL_14:
    v7 = a1[50];
    *(_OWORD *)v30 = v27[0];
    *(_OWORD *)&v30[9] = *(_OWORD *)((char *)v27 + 9);
    v28 = (WTF *)v30;
    v31 = 0;
    v32 = 513;
    v33 = 1;
    v34 = v5;
    v35 = 0;
    v36 = 0;
    v29 = 0x200000003;
    v37 = v7;
    v38 = 106;
    BYTE2(v38) = v47;
    v21 = v28;
    if (v30 != (_BYTE *)v28 && v28)
    {
      v28 = 0;
      LODWORD(v29) = 0;
      WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
    }
    return;
  }
  if (!v42 && !v43 && v41 == 1 && v44)
    goto LABEL_14;
LABEL_18:
  if (v45 && !v46)
  {
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x197FC6F74);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendUnOp<(JSC::B3::Air::Opcode)100,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445>(JSC::B3::Value **a1, JSC::B3::Value *a2)
{
  unsigned int v2;
  uint64_t v5;
  BOOL v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  WTF *v28;
  uint64_t v29;
  _BYTE v30[25];
  uint64_t v31;
  __int16 v32;
  int v33;
  int v34;
  int v35;
  char v36;
  JSC::B3::Value *v37;
  int v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v2 = *((_DWORD *)a2 + 4);
  if (v2 >= 0x80000000)
    v2 = 0x80000000;
  if (v2 != 1)
  {
    __break(0xC471u);
    goto LABEL_22;
  }
  if (v39)
    v6 = 0;
  else
    v6 = v40 == 0;
  if (!v6)
  {
    if (v40 != 1)
      goto LABEL_18;
LABEL_14:
    v7 = a1[50];
    *(_OWORD *)v30 = v27[0];
    *(_OWORD *)&v30[9] = *(_OWORD *)((char *)v27 + 9);
    v28 = (WTF *)v30;
    v31 = 0;
    v32 = 513;
    v33 = 1;
    v34 = v5;
    v35 = 0;
    v36 = 0;
    v29 = 0x200000003;
    v37 = v7;
    v38 = 100;
    BYTE2(v38) = v47;
    v21 = v28;
    if (v30 != (_BYTE *)v28 && v28)
    {
      v28 = 0;
      LODWORD(v29) = 0;
      WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
    }
    return;
  }
  if (!v42 && !v43 && v41 == 1 && v44)
    goto LABEL_14;
LABEL_18:
  if (v45 && !v46)
  {
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x197FC7120);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendUnOp<(JSC::B3::Air::Opcode)101,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445>(JSC::B3::Value **a1, JSC::B3::Value *a2)
{
  unsigned int v2;
  uint64_t v5;
  BOOL v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  WTF *v28;
  uint64_t v29;
  _BYTE v30[25];
  uint64_t v31;
  __int16 v32;
  int v33;
  int v34;
  int v35;
  char v36;
  JSC::B3::Value *v37;
  int v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v2 = *((_DWORD *)a2 + 4);
  if (v2 >= 0x80000000)
    v2 = 0x80000000;
  if (v2 != 1)
  {
    __break(0xC471u);
    goto LABEL_22;
  }
  if (v39)
    v6 = 0;
  else
    v6 = v40 == 0;
  if (!v6)
  {
    if (v40 != 1)
      goto LABEL_18;
LABEL_14:
    v7 = a1[50];
    *(_OWORD *)v30 = v27[0];
    *(_OWORD *)&v30[9] = *(_OWORD *)((char *)v27 + 9);
    v28 = (WTF *)v30;
    v31 = 0;
    v32 = 513;
    v33 = 1;
    v34 = v5;
    v35 = 0;
    v36 = 0;
    v29 = 0x200000003;
    v37 = v7;
    v38 = 101;
    BYTE2(v38) = v47;
    v21 = v28;
    if (v30 != (_BYTE *)v28 && v28)
    {
      v28 = 0;
      LODWORD(v29) = 0;
      WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
    }
    return;
  }
  if (!v42 && !v43 && v41 == 1 && v44)
    goto LABEL_14;
LABEL_18:
  if (v45 && !v46)
  {
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x197FC72CCLL);
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::imm(uint64_t this, JSC::B3::Value *a2)
{
  int v2;
  uint64_t v3;

  v2 = *((_WORD *)a2 + 6) & 0xFFF;
  if (a2 && v2 == 3)
  {
    v3 = *((int *)a2 + 10);
  }
  else
  {
    if (!a2 || v2 != 4)
      goto LABEL_5;
    v3 = *((_QWORD *)a2 + 5);
  }
  if ((unint64_t)(v3 + 4095) >= 0x1FFF
    && ((v3 & 0xFFF) != 0
     || (unint64_t)v3 >> 24 && v3 >> 12 != 0 && (unint64_t)(v3 >> 12) < 0xFFFFFFFFFFFFF001))
  {
LABEL_5:
    *(_QWORD *)this = 0;
    *(_WORD *)(this + 8) = 512;
    *(_DWORD *)(this + 12) = 1;
    *(_QWORD *)(this + 16) = 0;
    *(_BYTE *)(this + 24) = 0;
    return this;
  }
  *(_DWORD *)(this + 12) = 1;
  *(_QWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 24) = 0;
  *(_WORD *)(this + 8) = 514;
  *(_QWORD *)this = v3;
  return this;
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Arg,JSC::B3::Air::Tmp>(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  WTF *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  _BYTE v41[25];
  uint64_t v42;
  __int16 v43;
  int v44;
  int v45;
  int v46;
  char v47;
  _BYTE v48[12];

  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v10 = *(_QWORD *)(a1 + 400);
    *(_OWORD *)v41 = *a3;
    *(_OWORD *)&v41[9] = *(_OWORD *)((char *)a3 + 9);
    v39 = (WTF *)v41;
    v42 = 0;
    v43 = 513;
    v44 = 1;
    v45 = a4;
    v46 = 0;
    v47 = 0;
    v40 = 0x200000003;
    *(_QWORD *)v48 = v10;
    *(_DWORD *)&v48[8] = (_DWORD)a2;
    v11 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v9 + 8))
    {
      v25 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v11 + 1, (unint64_t)&v39, a4, a5, a6, a7, a8);
      v26 = *(unsigned int *)(v9 + 12);
      v27 = *(_QWORD *)v9;
      v28 = *(_QWORD *)v9 + (v26 << 7);
      v29 = (_OWORD *)(v28 + 16);
      *(_QWORD *)v28 = v28 + 16;
      *(_QWORD *)(v28 + 8) = 3;
      v30 = *(__int128 **)v25;
      if (*(_QWORD *)v25 == v25 + 16)
      {
        v31 = *(unsigned int *)(v25 + 12);
        if ((_DWORD)v31)
        {
          v32 = 32 * v31;
          do
          {
            v33 = *v30;
            v34 = v30[1];
            v30 += 2;
            *v29 = v33;
            v29[1] = v34;
            v29 += 2;
            v32 -= 32;
          }
          while (v32);
        }
      }
      else
      {
        *(_QWORD *)v25 = v25 + 16;
        *(_QWORD *)v28 = v30;
        v38 = *(_DWORD *)(v25 + 8);
        *(_DWORD *)(v25 + 8) = 3;
        *(_DWORD *)(v28 + 8) = v38;
      }
      v35 = *(_DWORD *)(v25 + 12);
      *(_DWORD *)(v25 + 12) = 0;
      *(_DWORD *)(v28 + 12) = v35;
      v36 = v27 + (v26 << 7);
      v37 = *(_QWORD *)(v25 + 112);
      *(_DWORD *)(v36 + 119) = *(_DWORD *)(v25 + 119);
      *(_QWORD *)(v36 + 112) = v37;
    }
    else
    {
      v12 = *(_QWORD *)v9;
      v13 = *(_QWORD *)v9 + (v11 << 7);
      v14 = (_OWORD *)(v13 + 16);
      *(_QWORD *)v13 = v13 + 16;
      *(_QWORD *)(v13 + 8) = 3;
      v15 = v39;
      if (v39 == (WTF *)v41)
      {
        if (HIDWORD(v40))
        {
          v16 = 32 * HIDWORD(v40);
          v17 = (__int128 *)v41;
          do
          {
            v18 = *v17;
            v19 = v17[1];
            v17 += 2;
            *v14 = v18;
            v14[1] = v19;
            v14 += 2;
            v16 -= 32;
          }
          while (v16);
        }
      }
      else
      {
        v39 = (WTF *)v41;
        *(_QWORD *)v13 = v15;
        v24 = v40;
        LODWORD(v40) = 3;
        *(_DWORD *)(v13 + 8) = v24;
      }
      v20 = HIDWORD(v40);
      HIDWORD(v40) = 0;
      *(_DWORD *)(v13 + 12) = v20;
      v21 = v12 + (v11 << 7);
      v22 = *(_QWORD *)v48;
      *(_DWORD *)(v21 + 119) = *(_DWORD *)&v48[7];
      *(_QWORD *)(v21 + 112) = v22;
    }
    ++*(_DWORD *)(v9 + 12);
    v23 = v39;
    if (v41 != (_BYTE *)v39)
    {
      if (v39)
      {
        v39 = 0;
        LODWORD(v40) = 0;
        WTF::fastFree((unint64_t)v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Tmp>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  WTF *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  int v30;
  int v31;
  char v32;
  _BYTE v33[12];

  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v10 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v11 = *(_QWORD *)(a1 + 400);
    v25 = (WTF *)&v27;
    v27 = 0;
    v28 = 513;
    v29 = 1;
    v30 = a3;
    v31 = 0;
    v32 = 0;
    v26 = 0x100000003;
    *(_QWORD *)v33 = v11;
    *(_DWORD *)&v33[8] = (_DWORD)a2;
    v12 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v12 == *(_DWORD *)(v10 + 8))
    {
      WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v10, (unint64_t)&v25, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v13 = *(_QWORD *)v10;
      v14 = *(_QWORD *)v10 + (v12 << 7);
      v15 = (_OWORD *)(v14 + 16);
      *(_QWORD *)v14 = v14 + 16;
      *(_QWORD *)(v14 + 8) = 3;
      v16 = v25;
      if (v25 == (WTF *)&v27)
      {
        if (HIDWORD(v26))
        {
          v17 = 32 * HIDWORD(v26);
          v18 = (__int128 *)&v27;
          do
          {
            v19 = *v18;
            v20 = v18[1];
            v18 += 2;
            *v15 = v19;
            v15[1] = v20;
            v15 += 2;
            v17 -= 32;
          }
          while (v17);
        }
      }
      else
      {
        v25 = (WTF *)&v27;
        *(_QWORD *)v14 = v16;
        *(_DWORD *)(v14 + 8) = v26;
      }
      v21 = HIDWORD(v26);
      HIDWORD(v26) = 0;
      *(_DWORD *)(v14 + 12) = v21;
      v22 = v13 + (v12 << 7);
      v23 = *(_QWORD *)v33;
      *(_DWORD *)(v22 + 119) = *(_DWORD *)&v33[7];
      *(_QWORD *)(v22 + 112) = v23;
      ++*(_DWORD *)(v10 + 12);
    }
    v24 = v25;
    if (&v27 != (uint64_t *)v25)
    {
      if (v25)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        WTF::fastFree((unint64_t)v24, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::forEachImmOrTmp<JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Air::Arg,JSC::B3::Type,unsigned int)#1}>(JSC::B3::_anonymous_namespace_::LowerToAir *a1, JSC::B3::Value *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  char v32;

  v10 = *((_DWORD *)a2 + 4);
  if ((v10 & 0x80000000) != 0)
  {
    v13 = *((_QWORD *)a1 + 53);
    v14 = v10 & 0x7FFFFFFF;
    if (v14 >= *(_DWORD *)(v13 + 44))
    {
      __break(0xC471u);
LABEL_40:
      JUMPOUT(0x197FC7A38);
    }
    v15 = *(_QWORD *)(v13 + 32) + 16 * v14;
    if (*(_DWORD *)(v15 + 12))
    {
      v21 = v16;
      v22 = 0;
      while (1)
      {
        if (v22 >= *((unsigned int *)v21 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC7A60);
        }
        v23 = *(_DWORD *)(*(_QWORD *)v15 + 4 * v22);
        if (v23 >= 0x80000000)
          v23 = 0x80000000;
        if (v23 > 5)
        {
          if (v23 == 0x80000000)
          {
LABEL_36:
            __break(0xC471u);
            goto LABEL_40;
          }
        }
        else
        {
          v24 = *(unsigned int *)(*v21 + 4 * v22);
          v25 = *a3;
          v26 = 1 << v23;
          if ((v26 & 6) != 0)
          {
            HIDWORD(v30) = 1;
            v31 = 0;
            v32 = 0;
            WORD4(v30) = 514;
            *(_QWORD *)&v30 = 0;
          }
          else
          {
            if ((v26 & 0x18) == 0)
              goto LABEL_36;
          }
        }
        if (++v22 >= *(unsigned int *)(v15 + 12))
          return;
      }
    }
    return;
  }
  v11 = *((_WORD *)a2 + 6) & 0xFFF;
  if (v11 == 3)
  {
    v12 = *((int *)a2 + 10);
  }
  else
  {
    if (v11 != 4)
    {
LABEL_22:
      v10 = *((_DWORD *)a2 + 4);
      goto LABEL_23;
    }
    v12 = *((_QWORD *)a2 + 5);
  }
  if ((unint64_t)(v12 + 4095) < 0x1FFF)
  {
    v27 = 0;
  }
  else
  {
    if ((v12 & 0xFFF) != 0)
      goto LABEL_22;
    v27 = 0;
    if ((unint64_t)v12 >> 24)
    {
      if ((unint64_t)((v12 >> 12) + 4095) >= 0x1000)
        goto LABEL_22;
    }
  }
LABEL_23:
  if (v10 >= 0x80000000)
    v10 = 0x80000000;
  if (v10 > 5)
  {
    if (v10 == 0x80000000)
      goto LABEL_37;
  }
  else
  {
    v28 = *a3;
    v29 = 1 << v10;
    if ((v29 & 6) == 0)
    {
      if ((v29 & 0x18) != 0)
      {
        return;
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x197FC7A58);
    }
    HIDWORD(v30) = 1;
    v31 = 0;
    v32 = 0;
    WORD4(v30) = 514;
    *(_QWORD *)&v30 = 0;
  }
}

uint64_t JSC::B3::MemoryValue::isCanonicalWidth(JSC::B3::MemoryValue *this)
{
  int v1;
  uint64_t result;
  uint64_t v4;
  unsigned int v5;

  v1 = *((unsigned __int8 *)this + 12) - 63;
  result = 0;
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
      return result;
    case 4:
      v5 = *((_DWORD *)this + 4);
      if (v5 >= 0x80000000)
        v5 = 0x80000000;
      if (v5 < 6)
        goto LABEL_9;
      result = 0;
      break;
    case 7:
      v4 = JSC::B3::MemoryValue::child(this, 0);
      result = 0;
      v5 = *(_DWORD *)(v4 + 16);
      if (v5 >= 0x80000000)
        v5 = 0x80000000;
      if (v5 >= 6)
        return result;
LABEL_9:
      result = (0x3Eu >> v5) & 1;
      break;
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      result = *((unsigned __int8 *)this + 60) > 1u;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FC7B34);
  }
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::_anonymous_namespace_::LowerToAir *this, JSC::B3::Value *a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *v8;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  unsigned int v26;
  unsigned __int8 v27;
  int v28;
  JSC::B3::_anonymous_namespace_::LowerToAir *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  JSC::B3::Value *j;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  JSC::B3::Value *v37;
  JSC::B3::Value *v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  unsigned __int8 v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v82;
  JSC::B3::Value **v83;
  uint64_t v84;
  JSC::B3::Value *i;
  _QWORD *v86;
  unint64_t v87;
  unint64_t v88;
  JSC::B3::Value *v89;
  JSC::B3::Value *v90;
  unint64_t v91;
  JSC::B3::Value *v92;
  JSC::B3::_anonymous_namespace_::LowerToAir *v93;
  JSC::B3::Value *v94;
  JSC::B3::Value *v95;
  JSC::B3::Value *v96;
  JSC::B3::Value *v97;
  JSC::B3::_anonymous_namespace_::LowerToAir *v98;
  JSC::B3::Value *v99;
  _QWORD v100[2];
  __int128 v101;
  uint64_t v102;
  char v103;
  _QWORD v104[9];
  char v105;
  char v106;
  JSC::B3::Value *v107;
  __int128 v108;
  __int128 v109;
  _QWORD v110[3];
  uint64_t v111;
  __int16 v112;
  int v113;
  uint64_t v114;
  char v115;
  JSC::B3::Value *v116;
  __int16 v117;
  char v118;
  _BYTE v119[32];
  JSC::B3::Value *v120;
  JSC::B3::Value **v121;
  _BYTE *v122;
  _BYTE v123[32];
  _BYTE v124[32];
  uint64_t v125;
  char v126;
  JSC::B3::Value *v127;

  v8 = a3;
  v11 = 0;
  v98 = a2;
  v99 = a2;
  v96 = a2;
  v97 = a2;
  v94 = a2;
  v95 = a2;
  v107 = a3;
  v106 = 0;
  v12 = 1;
  v13 = 1;
  v105 = 1;
  while (1)
  {
    if (*((_BYTE *)v8 + 12) == 24)
    {
      v76 = JSC::B3::Value::child(v8, 1u);
      if (*(_QWORD *)v76 && (*(_WORD *)(*(_QWORD *)v76 + 12) & 0xFFFu) - 3 <= 1)
      {
        v78 = JSC::B3::Value::child(v8, 1u);
        v79 = *(_QWORD *)v78;
        v80 = *(_WORD *)(*(_QWORD *)v78 + 12) & 0xFFF;
        if (*(_QWORD *)v78 && v80 == 3)
        {
          v82 = *(int *)(v79 + 40);
        }
        else
        {
          if (v80 != 4)
            v79 = 0;
          v82 = *(_QWORD *)(v79 + 40);
        }
        if (v82 == 1)
        {
          v83 = (JSC::B3::Value **)JSC::B3::Value::child(v8, 0);
          if (JSC::B3::Value::returnsBool(*v83))
            goto LABEL_237;
        }
      }
    }
    if (*((_BYTE *)v8 + 12) != 51)
      goto LABEL_15;
    v14 = JSC::B3::Value::child(v8, 1u);
    v15 = *(_QWORD *)v14;
    v16 = *(_WORD *)(*(_QWORD *)v14 + 12) & 0xFFF;
    if (!*(_QWORD *)v14 || v16 != 3)
      break;
    v19 = *(int *)(v15 + 40);
LABEL_14:
    if (v19)
      goto LABEL_15;
LABEL_237:
    if (*((JSC::B3::Value **)a2 + 50) != v8)
    {
      if (v13
        && (v84 = *((unsigned int *)v8 + 2), !*(_DWORD *)(*((_QWORD *)a2 + 1) + 4 * v84))
        && *(_DWORD *)(*((_QWORD *)a2 + 10) + 8 * v84) == 1)
      {
        v13 = 1;
      }
      else
      {
        for (i = (JSC::B3::Value *)JSC::B3::Value::children(v8); i != a2; i = (JSC::B3::Value *)((char *)i + 8))
        {
          if (*(_QWORD *)i)
          {
            v86 = (_QWORD *)(2 * *(_QWORD *)a2);
            v87 = (*(_QWORD *)a2 & 0x8000000000000000) != 0 ? 63 : *v86;
            v88 = *(unsigned int *)(*(_QWORD *)i + 8);
            if (v87 > v88)
            {
              v89 = (JSC::B3::Value *)(v86 + 1);
              v90 = *(uint64_t *)a2 >= 0 ? v89 : a2;
              if (((*(_QWORD *)((char *)v90 + ((v88 >> 3) & 0x1FFFFFF8)) >> v88) & 1) != 0)
                goto LABEL_15;
            }
          }
        }
        v12 = 0;
        v13 = 0;
        v105 = 0;
      }
    }
    v8 = *(JSC::B3::Value **)JSC::B3::Value::child(v8, 0);
    v107 = v8;
    v11 ^= 1u;
    v106 = v11;
  }
  if (v15)
    v18 = v16 == 4;
  else
    v18 = 0;
  if (v18)
  {
    v19 = *(_QWORD *)(v15 + 40);
    goto LABEL_14;
  }
LABEL_15:
  v104[0] = &v106;
  v104[1] = &v107;
  v104[2] = a2;
  v104[3] = &v99;
  v104[4] = &v105;
  v104[5] = &v95;
  v104[6] = &v94;
  v104[7] = &v96;
  v104[8] = &v97;
  v20 = *((_DWORD *)v8 + 4);
  if (v20 >= 0x80000000)
    v20 = 0x80000000;
  v21 = v20 > 5;
  v22 = (0xAu >> v20) & 1;
  v23 = (0x14u >> v20) & 1;
  v24 = 0x40302030200uLL >> (8 * v20);
  if (v21)
    v25 = 0;
  else
    v25 = v22;
  if (v21)
    v26 = 0;
  else
    v26 = v23;
  if (v21)
    v27 = 0;
  else
    v27 = v24;
  if (v11)
  {
    HIDWORD(v101) = 1;
    v102 = 0;
    v103 = 0;
    WORD4(v101) = 527;
    *(_QWORD *)&v101 = 0;
  }
  else
  {
    *(_QWORD *)&v101 = 1;
    WORD4(v101) = 527;
    HIDWORD(v101) = 1;
    v102 = 0;
    v103 = 0;
  }
  v100[0] = &v98;
  v100[1] = &v101;
  if (*((JSC::B3::Value **)a2 + 50) == v8)
  {
    v28 = 0;
  }
  else if (v12
         && (v32 = *((unsigned int *)v8 + 2), !*(_DWORD *)(*((_QWORD *)a2 + 1) + 4 * v32))
         && *(_DWORD *)(*((_QWORD *)a2 + 10) + 8 * v32) == 1)
  {
    v28 = 1;
  }
  else
  {
    for (j = (JSC::B3::Value *)JSC::B3::Value::children(v8); j != a2; j = (JSC::B3::Value *)((char *)j + 8))
    {
      if (*(_QWORD *)j)
      {
        v34 = (_QWORD *)(2 * *(_QWORD *)a2);
        v35 = (*(_QWORD *)a2 & 0x8000000000000000) != 0 ? 63 : *v34;
        v36 = *(unsigned int *)(*(_QWORD *)j + 8);
        if (v35 > v36)
        {
          v37 = (JSC::B3::Value *)(v34 + 1);
          v38 = *(uint64_t *)a2 >= 0 ? v37 : a2;
          if (((*(_QWORD *)((char *)v38 + ((v36 >> 3) & 0x1FFFFFF8)) >> v36) & 1) != 0)
            goto LABEL_268;
        }
      }
    }
    v28 = 0;
    v105 = 0;
    v8 = v107;
  }
  switch(*((_BYTE *)v8 + 12))
  {
    case '3':
      v29 = this;
      v30 = 0;
      goto LABEL_32;
    case '4':
      v29 = this;
      v30 = 1;
      v31 = 1;
      goto LABEL_33;
    case '5':
      v29 = this;
      v30 = 11;
      v31 = 3;
      goto LABEL_33;
    case '6':
      v29 = this;
      v30 = 12;
      v31 = 12;
      goto LABEL_33;
    case '7':
      v29 = this;
      v30 = 13;
      v31 = 9;
      goto LABEL_33;
    case '8':
      v29 = this;
      v30 = 10;
      v31 = 10;
      goto LABEL_33;
    case '9':
      v29 = this;
      v30 = 8;
      goto LABEL_32;
    case ':':
      v29 = this;
      v30 = 3;
      goto LABEL_32;
    case ';':
      v29 = this;
      v30 = 2;
      goto LABEL_32;
    case '<':
      v29 = this;
      v30 = 9;
LABEL_32:
      v31 = 0;
      goto LABEL_33;
    case '=':
      v29 = this;
      v30 = 0;
      v31 = 6;
LABEL_33:
      goto LABEL_34;
    default:
      if (*((_BYTE *)v8 + 12) != 22)
      {
        *(_QWORD *)this = (char *)this + 16;
        *((_QWORD *)this + 1) = 3;
        *((_QWORD *)this + 14) = 0;
        *((_WORD *)this + 60) = 0;
        *((_BYTE *)this + 122) &= 0xFCu;
        goto LABEL_34;
      }
      v127 = 0;
      v127 = *(JSC::B3::Value **)JSC::B3::Value::child(v8, 0);
      v39 = *(_QWORD *)JSC::B3::Value::child(v107, 1u);
      v125 = 0;
      *(_QWORD *)v124 = 0;
      *(_WORD *)&v124[8] = 512;
      *(_DWORD *)&v124[12] = 1;
      *(_QWORD *)&v124[16] = 0;
      v124[24] = 0;
      *(_QWORD *)v123 = 0;
      *(_WORD *)&v123[8] = 512;
      *(_DWORD *)&v123[12] = 1;
      *(_QWORD *)&v123[16] = 0;
      v123[24] = 0;
      v40 = *(_WORD *)(v39 + 12) & 0xFFF;
      if (v39 && v40 == 3)
      {
        v126 = 1;
        v43 = *(int *)(v39 + 40);
        goto LABEL_78;
      }
      if (v39)
        v41 = v40 == 4;
      else
        v41 = 0;
      v42 = v41;
      v126 = v42;
      if (v41)
      {
        v43 = *(_QWORD *)(v39 + 40);
LABEL_78:
        v125 = v43;
        *(_OWORD *)v124 = *(_OWORD *)v119;
        *(_OWORD *)&v124[9] = *(_OWORD *)&v119[9];
        *(_OWORD *)v123 = *(_OWORD *)v119;
        *(_OWORD *)&v123[9] = *(_OWORD *)&v119[9];
      }
      *(_QWORD *)v119 = &v126;
      *(_QWORD *)&v119[8] = &v125;
      *(_QWORD *)&v119[16] = v124;
      *(_QWORD *)&v119[24] = v100;
      v120 = a2;
      v121 = &v127;
      v122 = v123;
      if (v105)
      {
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_34;
        }
        v51 = (char *)this + 16;
        v50 = *(_QWORD *)this;
        if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
          && v50)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v50, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_34;
        }
        v52 = *(_QWORD *)this;
        if (v51 != *(char **)this && v52)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v52, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_34;
        }
        v53 = *(_QWORD *)this;
        if (v51 != *(char **)this && v53)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v53, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_34;
        }
        v54 = *(_QWORD *)this;
        if (v51 != *(char **)this && v54)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v54, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_34;
        }
        v55 = *(_QWORD *)this;
        if (v51 != *(char **)this && v55)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v55, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_34;
        }
        v56 = *(_QWORD *)this;
        if (v51 != *(char **)this && v56)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v56, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        v57 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(v107, 0) + 16);
        if (v57 >= 0x80000000)
          v57 = 0x80000000;
        if (v57 >= 6)
          v58 = 0;
        else
          v58 = 0x40302030200uLL >> (8 * v57);
        *(_QWORD *)&v108 = 0;
        WORD4(v108) = 512;
        HIDWORD(v108) = 1;
        *(_QWORD *)&v109 = 0;
        BYTE8(v109) = 0;
        LOWORD(v110[1]) = 0;
        BYTE2(v110[1]) = 0;
        v110[0] = v39;
        if (LOBYTE(v110[1]) && !BYTE1(v110[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC8C2CLL);
        }
        if ((_BYTE)v117 && !HIBYTE(v117))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC8C4CLL);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          v92 = v127;
          v93 = a2;
        }
        else
        {
          v66 = *(_QWORD *)this;
          if (v51 != *(char **)this && v66)
          {
            *(_QWORD *)this = 0;
            *((_DWORD *)this + 2) = 0;
            WTF::fastFree(v66, v59, v60, v61, v62, v63, v64, v65);
          }
          v111 = 0;
          v112 = 512;
          v113 = 1;
          v114 = 0;
          v115 = 0;
          v117 = 0;
          v118 = 0;
          v116 = v127;
          if (LOBYTE(v110[1]) && !BYTE1(v110[1]))
          {
            __break(0xC471u);
            JUMPOUT(0x197FC8C78);
          }
          if ((_BYTE)v117 && !HIBYTE(v117))
          {
            __break(0xC471u);
            JUMPOUT(0x197FC8C98);
          }
          if (!*((_QWORD *)this + 14)
            && !*((_WORD *)this + 60)
            && (*((_BYTE *)this + 122) & 3) == 0
            && !*((_DWORD *)this + 3))
          {
            v74 = *(_QWORD *)this;
            if (v51 != *(char **)this && v74)
            {
              *(_QWORD *)this = 0;
              *((_DWORD *)this + 2) = 0;
              WTF::fastFree(v74, v67, v68, v69, v70, v71, v72, v73);
            }
            goto LABEL_80;
          }
          v93 = a2;
          v92 = (JSC::B3::Value *)v39;
        }
        goto LABEL_34;
      }
LABEL_80:
      if (!v126)
      {
LABEL_112:
        v111 = 0;
        v112 = 512;
        v113 = 1;
        v114 = 0;
        v115 = 0;
        v117 = 0;
        v118 = 0;
        v116 = v127;
        *(_QWORD *)&v108 = 0;
        WORD4(v108) = 512;
        HIDWORD(v108) = 1;
        *(_QWORD *)&v109 = 0;
        BYTE8(v109) = 0;
        LOWORD(v110[1]) = 0;
        BYTE2(v110[1]) = 0;
        v110[0] = v39;
        if (LOBYTE(v110[1]) && !BYTE1(v110[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC8A68);
        }
        if ((_BYTE)v117 && !HIBYTE(v117))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC81F4);
        }
        goto LABEL_34;
      }
      if (v125 == 0xFFFFFFFFLL)
        v44 = v25;
      else
        v44 = 0;
      if (v125 == -1)
        v45 = v26;
      else
        v45 = 0;
      if ((v44 & 1) != 0 || v45)
      {
        v111 = 0;
        v112 = 512;
        v113 = 1;
        v114 = 0;
        v115 = 0;
        v117 = 0;
        v118 = 0;
        v116 = v127;
        *(_QWORD *)&v108 = 0;
        WORD4(v108) = 512;
        HIDWORD(v108) = 1;
        *(_QWORD *)&v109 = 0;
        BYTE8(v109) = 0;
        LOWORD(v110[1]) = 0;
        BYTE2(v110[1]) = 0;
        v110[0] = v127;
        if (LOBYTE(v110[1]) && !BYTE1(v110[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC8A28);
        }
        if ((_BYTE)v117 && !HIBYTE(v117))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC8A48);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_34;
        }
        v75 = *(_QWORD *)this;
        if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
          && v75)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v75, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
      }
      if (!HIDWORD(v125))
      {
        v111 = 0;
        v112 = 512;
        v113 = 1;
        v114 = 0;
        v115 = 0;
        v117 = 0;
        v118 = 0;
        v116 = v127;
        v108 = *(_OWORD *)v124;
        v109 = *(_OWORD *)&v124[16];
        memset(v110, 0, 11);
        if (LOBYTE(v110[1]) && !BYTE1(v110[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC89E8);
        }
        if ((_BYTE)v117 && !HIBYTE(v117))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC8A08);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_34;
        }
        v48 = *(_QWORD *)this;
        if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
          && v48)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v48, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        v111 = 0;
        v112 = 512;
        v113 = 1;
        v114 = 0;
        v115 = 0;
        v117 = 0;
        v118 = 0;
        v116 = v127;
        v108 = *(_OWORD *)v123;
        v109 = *(_OWORD *)&v123[16];
        memset(v110, 0, 11);
        if (LOBYTE(v110[1]) && !BYTE1(v110[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC8BECLL);
        }
        if ((_BYTE)v117 && !HIBYTE(v117))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC8C0CLL);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_34;
        }
        v49 = *(_QWORD *)this;
        if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
          && v49)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v49, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
      }
      v111 = 0;
      v112 = 512;
      v113 = 1;
      v114 = 0;
      v115 = 0;
      v117 = 0;
      v118 = 0;
      v116 = v127;
      v108 = *(_OWORD *)v124;
      v109 = *(_OWORD *)&v124[16];
      memset(v110, 0, 11);
      if (LOBYTE(v110[1]) && !BYTE1(v110[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x197FC89A8);
      }
      if ((_BYTE)v117 && !HIBYTE(v117))
      {
        __break(0xC471u);
        JUMPOUT(0x197FC89C8);
      }
      if (!*((_QWORD *)this + 14)
        && !*((_WORD *)this + 60)
        && (*((_BYTE *)this + 122) & 3) == 0
        && !*((_DWORD *)this + 3))
      {
        v46 = *(_QWORD *)this;
        if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
          && v46)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v46, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        v111 = 0;
        v112 = 512;
        v113 = 1;
        v114 = 0;
        v115 = 0;
        v117 = 0;
        v118 = 0;
        v116 = v127;
        v108 = *(_OWORD *)v123;
        v109 = *(_OWORD *)&v123[16];
        memset(v110, 0, 11);
        if (LOBYTE(v110[1]) && !BYTE1(v110[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC8BACLL);
        }
        if ((_BYTE)v117 && !HIBYTE(v117))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC8BCCLL);
        }
        if (!*((_QWORD *)this + 14)
          && !*((_WORD *)this + 60)
          && (*((_BYTE *)this + 122) & 3) == 0
          && !*((_DWORD *)this + 3))
        {
          v47 = *(_QWORD *)this;
          if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
            && v47)
          {
            *(_QWORD *)this = 0;
            *((_DWORD *)this + 2) = 0;
            WTF::fastFree(v47, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          goto LABEL_112;
        }
      }
LABEL_34:
      if (*((_QWORD *)this + 14) || *((_WORD *)this + 60) || (*((_BYTE *)this + 122) & 3) != 0 || *((_DWORD *)this + 3))
      {
        if (v28)
      }
      else
      {
        v91 = *(_QWORD *)this;
        if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
          && v91)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v91, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
LABEL_268:
        *(_QWORD *)v119 = 0;
        *(_WORD *)&v119[8] = 512;
        *(_DWORD *)&v119[12] = 1;
        *(_QWORD *)&v119[16] = 0;
        v119[24] = 0;
        LOWORD(v121) = 0;
        BYTE2(v121) = 0;
        v120 = v107;
        v111 = 0;
        v112 = 512;
        v113 = 1;
        v114 = 0;
        v115 = 0;
        v117 = 0;
        v118 = 0;
        v116 = v107;
        if ((_BYTE)v117 && !HIBYTE(v117))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC8B4CLL);
        }
        if ((_BYTE)v121 && !BYTE1(v121))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC8B2CLL);
        }
      }
      return;
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::newBlock(JSC::B3::_anonymous_namespace_::LowerToAir *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 7) + 8 * **((unsigned int **)this + 48));
  return JSC::B3::GenericBlockInsertionSet<JSC::B3::Air::BasicBlock>::insert((uint64_t)this + 440, *(_DWORD *)v1 + 1, *(double *)(v1 + 104));
}

void JSC::B3::`anonymous namespace'::LowerToAir::splitBlock(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27[2];

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * **(unsigned int **)(a1 + 384));
  *a2 = v5;
  v6 = JSC::B3::GenericBlockInsertionSet<JSC::B3::Air::BasicBlock>::insert(a1 + 440, *(_DWORD *)v5 + 1, *(double *)(v5 + 104));
  *a3 = v6;
  v5 += 24;
  WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(*a3 + 24, v5, v13, v14, v15, v16, v17, v18);
  WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v5, 0, v19, v20, v21, v22, v23, v24);
  v27[0] = 0;
  v27[1] = 0;
  v25 = *(_DWORD *)(a1 + 364);
  if (v25 == *(_DWORD *)(a1 + 360))
  {
    WTF::Vector<WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1 + 352, v27);
  }
  else
  {
    v26 = (_QWORD *)(*(_QWORD *)(a1 + 352) + 528 * v25);
    *v26 = v26 + 2;
    v26[1] = 4;
    *(_DWORD *)(a1 + 364) = v25 + 1;
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::_anonymous_namespace_::LowerToAir *this, JSC::B3::Value *a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::Value *v8;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unsigned int v20;
  unsigned __int8 v21;
  uint64_t v22;
  char v23;
  JSC::B3::_anonymous_namespace_::LowerToAir *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  char v30;
  JSC::ARM64LogicalImmediate *v31;
  int v32;
  JSC::ARM64LogicalImmediate *v33;
  int v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned __int8 v45;
  JSC::B3::Value *j;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  JSC::B3::Value *v50;
  JSC::B3::Value *v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  JSC::B3::Value *v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  JSC::B3::Value *v65;
  JSC::B3::Value *i;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  JSC::B3::Value *v70;
  JSC::B3::Value *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v78;
  JSC::B3::Value **v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  JSC::B3::Value *v90;
  JSC::B3::_anonymous_namespace_::LowerToAir *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  JSC::B3::Value *v107;
  JSC::B3::Value *v108;
  JSC::B3::Value *v109;
  JSC::B3::Value *v110;
  JSC::B3::Value *v111;
  JSC::B3::Value *v112;
  uint64_t *v113[2];
  uint64_t v114;
  __int16 v115;
  int v116;
  uint64_t v117;
  char v118;
  _QWORD v119[9];
  char v120;
  char v121;
  JSC::B3::Value *v122;
  __int128 v123;
  __int128 v124;
  _QWORD v125[2];
  uint64_t v126;
  __int16 v127;
  int v128;
  uint64_t v129;
  char v130;
  _QWORD v131[2];
  char *v132;
  JSC::ARM64LogicalImmediate **v133;
  __int128 *v134;
  uint64_t **v135;
  JSC::B3::Value *v136;
  JSC::B3::Value **v137;
  __int128 *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  JSC::ARM64LogicalImmediate *v143;
  char v144;
  JSC::B3::Value *v145;

  v8 = a3;
  v11 = 0;
  v111 = a2;
  v112 = a2;
  v109 = a2;
  v110 = a2;
  v107 = a2;
  v108 = a2;
  v122 = a3;
  v121 = 0;
  v12 = 1;
  v13 = 1;
  v120 = 1;
  while (1)
  {
    if (*((_BYTE *)v8 + 12) == 24)
    {
      v72 = JSC::B3::Value::child(v8, 1u);
      if (*(_QWORD *)v72 && (*(_WORD *)(*(_QWORD *)v72 + 12) & 0xFFFu) - 3 <= 1)
      {
        v74 = JSC::B3::Value::child(v8, 1u);
        v75 = *(_QWORD *)v74;
        v76 = *(_WORD *)(*(_QWORD *)v74 + 12) & 0xFFF;
        if (*(_QWORD *)v74 && v76 == 3)
        {
          v78 = *(int *)(v75 + 40);
        }
        else
        {
          if (v76 != 4)
            v75 = 0;
          v78 = *(_QWORD *)(v75 + 40);
        }
        if (v78 == 1)
        {
          v79 = (JSC::B3::Value **)JSC::B3::Value::child(v8, 0);
          if (JSC::B3::Value::returnsBool(*v79))
            goto LABEL_120;
        }
      }
    }
    if (*((_BYTE *)v8 + 12) != 51)
      goto LABEL_4;
    if (*((_BYTE *)v8 + 20) == 4)
    {
      v80 = JSC::B3::Value::childrenVector(v8);
      if (*(_DWORD *)(v80 + 12) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x197FC97C0);
      }
      v52 = (uint64_t *)(*(_QWORD *)v80 + 8);
    }
    else
    {
      v52 = (uint64_t *)((char *)v8 + 48);
    }
    v53 = *v52;
    v54 = *(_WORD *)(v53 + 12) & 0xFFF;
    if (!v53 || v54 != 3)
      break;
    v56 = *(int *)(v53 + 40);
LABEL_119:
    if (v56)
      goto LABEL_4;
LABEL_120:
    if (*((JSC::B3::Value **)a2 + 50) != v8)
    {
      if (v13
        && (v57 = *((unsigned int *)v8 + 2), !*(_DWORD *)(*((_QWORD *)a2 + 1) + 4 * v57))
        && *(_DWORD *)(*((_QWORD *)a2 + 10) + 8 * v57) == 1)
      {
        v58 = *(_QWORD *)a2;
        if ((*(_QWORD *)a2 & 0x8000000000000000) != 0)
          v59 = 63;
        else
          v59 = *(_QWORD *)(2 * v58);
        if (v59 <= v57)
        {
          WTF::BitVector::resizeOutOfLine(a2, v57 + 1, 0);
          v58 = *(_QWORD *)a2;
        }
        if (v58 >= 0)
          v60 = (JSC::B3::Value *)(2 * v58 + 8);
        else
          v60 = a2;
        v13 = 1;
        *(_QWORD *)((char *)v60 + ((v57 >> 3) & 0x1FFFFFF8)) |= 1 << v57;
      }
      else
      {
        for (i = (JSC::B3::Value *)JSC::B3::Value::children(v8); i != a2; i = (JSC::B3::Value *)((char *)i + 8))
        {
          if (*(_QWORD *)i)
          {
            v67 = (_QWORD *)(2 * *(_QWORD *)a2);
            v68 = (*(_QWORD *)a2 & 0x8000000000000000) != 0 ? 63 : *v67;
            v69 = *(unsigned int *)(*(_QWORD *)i + 8);
            if (v68 > v69)
            {
              v70 = (JSC::B3::Value *)(v67 + 1);
              v71 = *(uint64_t *)a2 >= 0 ? v70 : a2;
              if (((*(_QWORD *)((char *)v71 + ((v69 >> 3) & 0x1FFFFFF8)) >> v69) & 1) != 0)
                goto LABEL_4;
            }
          }
        }
        v12 = 0;
        v13 = 0;
        v120 = 0;
      }
    }
    v8 = *(JSC::B3::Value **)JSC::B3::Value::child(v8, 0);
    v122 = v8;
    v11 ^= 1u;
    v121 = v11;
  }
  if (v53 && v54 == 4)
  {
    v56 = *(_QWORD *)(v53 + 40);
    goto LABEL_119;
  }
LABEL_4:
  v119[0] = &v121;
  v119[1] = &v122;
  v119[2] = a2;
  v119[3] = &v112;
  v119[4] = &v120;
  v119[5] = &v108;
  v119[6] = &v107;
  v119[7] = &v109;
  v119[8] = &v110;
  v14 = *((_DWORD *)v8 + 4);
  if (v14 >= 0x80000000)
    v14 = 0x80000000;
  v15 = v14 > 5;
  v16 = (0xAu >> v14) & 1;
  v17 = (0x14u >> v14) & 1;
  v18 = 0x40302030200uLL >> (8 * v14);
  if (v15)
    v19 = 0;
  else
    v19 = v16;
  if (v15)
    v20 = 0;
  else
    v20 = v17;
  if (v15)
    v21 = 0;
  else
    v21 = v18;
  if (v11)
  {
    v116 = 1;
    v117 = 0;
    v118 = 0;
    v115 = 527;
    v114 = 0;
  }
  else
  {
    v114 = 1;
    v115 = 527;
    v116 = 1;
    v117 = 0;
    v118 = 0;
  }
  v113[0] = (uint64_t *)&v111;
  v113[1] = &v114;
  if (*((JSC::B3::Value **)a2 + 50) == v8)
  {
    v23 = 1;
  }
  else if (v12
         && (v22 = *((unsigned int *)v8 + 2), !*(_DWORD *)(*((_QWORD *)a2 + 1) + 4 * v22))
         && *(_DWORD *)(*((_QWORD *)a2 + 10) + 8 * v22) == 1)
  {
    v23 = 0;
  }
  else
  {
    for (j = (JSC::B3::Value *)JSC::B3::Value::children(v8); j != a2; j = (JSC::B3::Value *)((char *)j + 8))
    {
      if (*(_QWORD *)j)
      {
        v47 = (_QWORD *)(2 * *(_QWORD *)a2);
        v48 = (*(_QWORD *)a2 & 0x8000000000000000) != 0 ? 63 : *v47;
        v49 = *(unsigned int *)(*(_QWORD *)j + 8);
        if (v48 > v49)
        {
          v50 = (JSC::B3::Value *)(v47 + 1);
          v51 = *(uint64_t *)a2 >= 0 ? v50 : a2;
          if (((*(_QWORD *)((char *)v51 + ((v49 >> 3) & 0x1FFFFFF8)) >> v49) & 1) != 0)
            goto LABEL_205;
        }
      }
    }
    v120 = 0;
    v23 = 1;
    v8 = v122;
  }
  switch(*((_BYTE *)v8 + 12))
  {
    case '3':
      v24 = this;
      v25 = 0;
      goto LABEL_135;
    case '4':
      v24 = this;
      v25 = 1;
      v26 = 1;
      goto LABEL_136;
    case '5':
      v24 = this;
      v25 = 11;
      v26 = 3;
      goto LABEL_136;
    case '6':
      v24 = this;
      v25 = 12;
      v26 = 12;
      goto LABEL_136;
    case '7':
      v24 = this;
      v25 = 13;
      v26 = 9;
      goto LABEL_136;
    case '8':
      v24 = this;
      v25 = 10;
      v26 = 10;
      goto LABEL_136;
    case '9':
      v24 = this;
      v25 = 8;
      goto LABEL_135;
    case ':':
      v24 = this;
      v25 = 3;
      goto LABEL_135;
    case ';':
      v24 = this;
      v25 = 2;
      goto LABEL_135;
    case '<':
      v24 = this;
      v25 = 9;
LABEL_135:
      v26 = 0;
      goto LABEL_136;
    case '=':
      v24 = this;
      v25 = 0;
      v26 = 6;
LABEL_136:
      goto LABEL_137;
    default:
      if (*((_BYTE *)v8 + 12) != 22)
      {
        *(_QWORD *)this = (char *)this + 16;
        *((_QWORD *)this + 1) = 3;
        *((_QWORD *)this + 14) = 0;
        *((_WORD *)this + 60) = 0;
        *((_BYTE *)this + 122) &= 0xFCu;
        goto LABEL_137;
      }
      v145 = 0;
      v145 = *(JSC::B3::Value **)JSC::B3::Value::child(v8, 0);
      v27 = *(_QWORD *)JSC::B3::Value::child(v122, 1u);
      v143 = 0;
      *(_QWORD *)&v141 = 0;
      WORD4(v141) = 512;
      HIDWORD(v141) = 1;
      *(_QWORD *)&v142 = 0;
      BYTE8(v142) = 0;
      *(_QWORD *)&v139 = 0;
      WORD4(v139) = 512;
      HIDWORD(v139) = 1;
      *(_QWORD *)&v140 = 0;
      BYTE8(v140) = 0;
      v28 = *(_WORD *)(v27 + 12) & 0xFFF;
      if (v27 && v28 == 3)
      {
        v144 = 1;
        v31 = (JSC::ARM64LogicalImmediate *)*(int *)(v27 + 40);
LABEL_36:
        v143 = v31;
        v32 = JSC::ARM64LogicalImmediate::create32(v31);
        BYTE8(v142) = 0;
        *(_QWORD *)&v142 = 0;
        if (v32 == -1)
          v33 = 0;
        else
          v33 = v31;
        *(_QWORD *)&v141 = v33;
        BYTE8(v141) = 4 * (v32 != -1);
        BYTE9(v141) = 2;
        HIDWORD(v141) = 1;
        v34 = *(_WORD *)(v27 + 12) & 0xFFF;
        if (v27 && v34 == 3)
        {
          v35 = *(int *)(v27 + 40);
        }
        else
        {
          if (!v27 || v34 != 4)
            goto LABEL_45;
          v35 = *(_QWORD *)(v27 + 40);
        }
        if (JSC::ARM64LogicalImmediate::create64(v35) != -1)
        {
          v36 = 5;
          goto LABEL_46;
        }
LABEL_45:
        v36 = 0;
        v35 = 0;
LABEL_46:
        BYTE8(v140) = 0;
        *(_QWORD *)&v140 = 0;
        *(_QWORD *)&v139 = v35;
        BYTE8(v139) = v36;
        BYTE9(v139) = 2;
        HIDWORD(v139) = 1;
        goto LABEL_47;
      }
      if (v27)
        v29 = v28 == 4;
      else
        v29 = 0;
      v30 = v29;
      v144 = v30;
      if (v29)
      {
        v31 = *(JSC::ARM64LogicalImmediate **)(v27 + 40);
        goto LABEL_36;
      }
LABEL_47:
      v132 = &v144;
      v133 = &v143;
      v134 = &v141;
      v135 = v113;
      v136 = a2;
      v137 = &v145;
      v138 = &v139;
      if (v120)
      {
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_137;
        }
        v38 = (char *)this + 16;
        v37 = *(_QWORD *)this;
        if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
          && v37)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v37, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_137;
        }
        v39 = *(_QWORD *)this;
        if (v38 != *(char **)this && v39)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v39, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_137;
        }
        v40 = *(_QWORD *)this;
        if (v38 != *(char **)this && v40)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v40, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_137;
        }
        v41 = *(_QWORD *)this;
        if (v38 != *(char **)this && v41)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v41, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_137;
        }
        v42 = *(_QWORD *)this;
        if (v38 != *(char **)this && v42)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v42, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_137;
        }
        v43 = *(_QWORD *)this;
        if (v38 != *(char **)this && v43)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v43, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        v44 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(v122, 0) + 16);
        if (v44 >= 0x80000000)
          v44 = 0x80000000;
        if (v44 >= 6)
          v45 = 0;
        else
          v45 = 0x40302030200uLL >> (8 * v44);
        if (*((_BYTE *)v145 + 12) == 67)
        {
        }
        else
        {
          v126 = 0;
          v127 = 512;
          v128 = 1;
          v129 = 0;
          v130 = 0;
          memset(v131, 0, 11);
        }
        *(_QWORD *)&v123 = 0;
        WORD4(v123) = 512;
        HIDWORD(v123) = 1;
        *(_QWORD *)&v124 = 0;
        BYTE8(v124) = 0;
        LOWORD(v125[1]) = 0;
        BYTE2(v125[1]) = 0;
        v125[0] = v27;
        if (LOBYTE(v125[1]) && !BYTE1(v125[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC99ECLL);
        }
        if (LOBYTE(v131[1]) && !BYTE1(v131[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC9A0CLL);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          v90 = v145;
          v91 = a2;
        }
        else
        {
          v89 = *(_QWORD *)this;
          if (v38 != *(char **)this && v89)
          {
            *(_QWORD *)this = 0;
            *((_DWORD *)this + 2) = 0;
            WTF::fastFree(v89, v82, v83, v84, v85, v86, v87, v88);
          }
          v126 = 0;
          v127 = 512;
          v128 = 1;
          v129 = 0;
          v130 = 0;
          LOWORD(v131[1]) = 0;
          BYTE2(v131[1]) = 0;
          v131[0] = v145;
          if (*(_BYTE *)(v27 + 12) == 67)
          {
          }
          else
          {
            *(_QWORD *)&v123 = 0;
            WORD4(v123) = 512;
            HIDWORD(v123) = 1;
            *(_QWORD *)&v124 = 0;
            BYTE8(v124) = 0;
            memset(v125, 0, 11);
          }
          if (LOBYTE(v125[1]) && !BYTE1(v125[1]))
          {
            __break(0xC471u);
            JUMPOUT(0x197FCA0CCLL);
          }
          if (LOBYTE(v131[1]) && !BYTE1(v131[1]))
          {
            __break(0xC471u);
            JUMPOUT(0x197FCA0ECLL);
          }
          if (!*((_QWORD *)this + 14)
            && !*((_WORD *)this + 60)
            && (*((_BYTE *)this + 122) & 3) == 0
            && !*((_DWORD *)this + 3))
          {
            v99 = *(_QWORD *)this;
            if (v38 != *(char **)this && v99)
            {
              *(_QWORD *)this = 0;
              *((_DWORD *)this + 2) = 0;
              WTF::fastFree(v99, v92, v93, v94, v95, v96, v97, v98);
            }
            goto LABEL_240;
          }
          v91 = a2;
          v90 = (JSC::B3::Value *)v27;
        }
        goto LABEL_137;
      }
LABEL_240:
      if (!v144)
      {
LABEL_272:
        v126 = 0;
        v127 = 512;
        v128 = 1;
        v129 = 0;
        v130 = 0;
        LOWORD(v131[1]) = 0;
        BYTE2(v131[1]) = 0;
        v131[0] = v145;
        *(_QWORD *)&v123 = 0;
        WORD4(v123) = 512;
        HIDWORD(v123) = 1;
        *(_QWORD *)&v124 = 0;
        BYTE8(v124) = 0;
        LOWORD(v125[1]) = 0;
        BYTE2(v125[1]) = 0;
        v125[0] = v27;
        if (LOBYTE(v125[1]) && !BYTE1(v125[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC9FCCLL);
        }
        if (LOBYTE(v131[1]) && !BYTE1(v131[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC9CE8);
        }
        goto LABEL_137;
      }
      if (v143 == (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL)
        v100 = v19;
      else
        v100 = 0;
      if (v143 == (JSC::ARM64LogicalImmediate *)-1)
        v101 = v20;
      else
        v101 = 0;
      if ((v100 & 1) != 0 || v101)
      {
        v126 = 0;
        v127 = 512;
        v128 = 1;
        v129 = 0;
        v130 = 0;
        LOWORD(v131[1]) = 0;
        BYTE2(v131[1]) = 0;
        v131[0] = v145;
        *(_QWORD *)&v123 = 0;
        WORD4(v123) = 512;
        HIDWORD(v123) = 1;
        *(_QWORD *)&v124 = 0;
        BYTE8(v124) = 0;
        LOWORD(v125[1]) = 0;
        BYTE2(v125[1]) = 0;
        v125[0] = v145;
        if (LOBYTE(v125[1]) && !BYTE1(v125[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC9FECLL);
        }
        if (LOBYTE(v131[1]) && !BYTE1(v131[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FCA00CLL);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_137;
        }
        v106 = *(_QWORD *)this;
        if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
          && v106)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v106, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
      }
      if (!HIDWORD(v143))
      {
        v126 = 0;
        v127 = 512;
        v128 = 1;
        v129 = 0;
        v130 = 0;
        LOWORD(v131[1]) = 0;
        BYTE2(v131[1]) = 0;
        v131[0] = v145;
        v123 = v141;
        v124 = v142;
        memset(v125, 0, 11);
        if (LOBYTE(v125[1]) && !BYTE1(v125[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC9F8CLL);
        }
        if (LOBYTE(v131[1]) && !BYTE1(v131[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC9FACLL);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_137;
        }
        v104 = *(_QWORD *)this;
        if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
          && v104)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v104, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        v126 = 0;
        v127 = 512;
        v128 = 1;
        v129 = 0;
        v130 = 0;
        LOWORD(v131[1]) = 0;
        BYTE2(v131[1]) = 0;
        v131[0] = v145;
        v123 = v139;
        v124 = v140;
        memset(v125, 0, 11);
        if (LOBYTE(v125[1]) && !BYTE1(v125[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FCA08CLL);
        }
        if (LOBYTE(v131[1]) && !BYTE1(v131[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FCA0ACLL);
        }
        if (*((_QWORD *)this + 14)
          || *((_WORD *)this + 60)
          || (*((_BYTE *)this + 122) & 3) != 0
          || *((_DWORD *)this + 3))
        {
          goto LABEL_137;
        }
        v105 = *(_QWORD *)this;
        if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
          && v105)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v105, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
      }
      v126 = 0;
      v127 = 512;
      v128 = 1;
      v129 = 0;
      v130 = 0;
      LOWORD(v131[1]) = 0;
      BYTE2(v131[1]) = 0;
      v131[0] = v145;
      v123 = v141;
      v124 = v142;
      memset(v125, 0, 11);
      if (LOBYTE(v125[1]) && !BYTE1(v125[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x197FC9E7CLL);
      }
      if (LOBYTE(v131[1]) && !BYTE1(v131[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x197FC9E9CLL);
      }
      if (!*((_QWORD *)this + 14)
        && !*((_WORD *)this + 60)
        && (*((_BYTE *)this + 122) & 3) == 0
        && !*((_DWORD *)this + 3))
      {
        v102 = *(_QWORD *)this;
        if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
          && v102)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v102, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        v126 = 0;
        v127 = 512;
        v128 = 1;
        v129 = 0;
        v130 = 0;
        LOWORD(v131[1]) = 0;
        BYTE2(v131[1]) = 0;
        v131[0] = v145;
        v123 = v139;
        v124 = v140;
        memset(v125, 0, 11);
        if (LOBYTE(v125[1]) && !BYTE1(v125[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FCA04CLL);
        }
        if (LOBYTE(v131[1]) && !BYTE1(v131[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FCA06CLL);
        }
        if (!*((_QWORD *)this + 14)
          && !*((_WORD *)this + 60)
          && (*((_BYTE *)this + 122) & 3) == 0
          && !*((_DWORD *)this + 3))
        {
          v103 = *(_QWORD *)this;
          if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
            && v103)
          {
            *(_QWORD *)this = 0;
            *((_DWORD *)this + 2) = 0;
            WTF::fastFree(v103, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          goto LABEL_272;
        }
      }
LABEL_137:
      if (*((_QWORD *)this + 14) || *((_WORD *)this + 60) || (*((_BYTE *)this + 122) & 3) != 0 || *((_DWORD *)this + 3))
      {
        if (v122)
          v61 = v23;
        else
          v61 = 1;
        if ((v61 & 1) == 0)
        {
          v62 = *((unsigned int *)v122 + 2);
          v63 = *(_QWORD *)a2;
          if ((*(_QWORD *)a2 & 0x8000000000000000) != 0)
            v64 = 63;
          else
            v64 = *(_QWORD *)(2 * v63);
          if (v64 <= v62)
          {
            WTF::BitVector::resizeOutOfLine(a2, v62 + 1, 0);
            v63 = *(_QWORD *)a2;
          }
          if (v63 >= 0)
            v65 = (JSC::B3::Value *)(2 * v63 + 8);
          else
            v65 = a2;
          *(_QWORD *)((char *)v65 + ((v62 >> 3) & 0x1FFFFFF8)) |= 1 << v62;
        }
      }
      else
      {
        v81 = *(_QWORD *)this;
        if ((JSC::B3::_anonymous_namespace_::LowerToAir *)((char *)this + 16) != *(JSC::B3::_anonymous_namespace_::LowerToAir **)this
          && v81)
        {
          *(_QWORD *)this = 0;
          *((_DWORD *)this + 2) = 0;
          WTF::fastFree(v81, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
LABEL_205:
        v132 = 0;
        LOWORD(v133) = 512;
        HIDWORD(v133) = 1;
        v134 = 0;
        LOBYTE(v135) = 0;
        LOWORD(v137) = 0;
        BYTE2(v137) = 0;
        v136 = v122;
        v126 = 0;
        v127 = 512;
        v128 = 1;
        v129 = 0;
        v130 = 0;
        LOWORD(v131[1]) = 0;
        BYTE2(v131[1]) = 0;
        v131[0] = v122;
        if (LOBYTE(v131[1]) && !BYTE1(v131[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC98A4);
        }
        if ((_BYTE)v137 && !BYTE1(v137))
        {
          __break(0xC471u);
          JUMPOUT(0x197FC9884);
        }
      }
      return;
  }
}

void JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  WTF *v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  WTF *v36;
  int v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  int v44;
  int v45;
  char v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  int v50;
  int v51;
  char v52;
  _BYTE v53[12];

  v39 = (WTF *)&v41;
  v41 = 0;
  v42 = 513;
  v43 = 1;
  v44 = a4;
  v9 = (uint64_t *)(a1 + 8);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 513;
  v49 = 1;
  v50 = a5;
  v51 = 0;
  v52 = 0;
  v40 = 0x200000003;
  *(_QWORD *)v53 = a3;
  *(_DWORD *)&v53[8] = (unsigned __int16)a2;
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 16))
  {
    v22 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v10 + 1, (unint64_t)&v39);
    v23 = *(unsigned int *)(a1 + 20);
    v24 = *(_QWORD *)(a1 + 8);
    v25 = v24 + (v23 << 7);
    v26 = (_OWORD *)(v25 + 16);
    *(_QWORD *)v25 = v25 + 16;
    *(_QWORD *)(v25 + 8) = 3;
    v27 = *(__int128 **)v22;
    if (*(_QWORD *)v22 == v22 + 16)
    {
      v28 = *(unsigned int *)(v22 + 12);
      if ((_DWORD)v28)
      {
        v29 = 32 * v28;
        do
        {
          v30 = *v27;
          v31 = v27[1];
          v27 += 2;
          *v26 = v30;
          v26[1] = v31;
          v26 += 2;
          v29 -= 32;
        }
        while (v29);
      }
    }
    else
    {
      *(_QWORD *)v22 = v22 + 16;
      *(_QWORD *)v25 = v27;
      v38 = *(_DWORD *)(v22 + 8);
      *(_DWORD *)(v22 + 8) = 3;
      *(_DWORD *)(v25 + 8) = v38;
    }
    v32 = *(_DWORD *)(v22 + 12);
    *(_DWORD *)(v22 + 12) = 0;
    *(_DWORD *)(v25 + 12) = v32;
    v33 = v24 + (v23 << 7);
    v34 = *(_QWORD *)(v22 + 112);
    *(_DWORD *)(v33 + 119) = *(_DWORD *)(v22 + 119);
    *(_QWORD *)(v33 + 112) = v34;
  }
  else
  {
    v11 = *v9;
    v12 = *v9 + (v10 << 7);
    v13 = (_OWORD *)(v12 + 16);
    *(_QWORD *)v12 = v12 + 16;
    *(_QWORD *)(v12 + 8) = 3;
    v14 = v39;
    if (v39 == (WTF *)&v41)
    {
      if (HIDWORD(v40))
      {
        v15 = 32 * HIDWORD(v40);
        v16 = (__int128 *)&v41;
        do
        {
          v17 = *v16;
          v18 = v16[1];
          v16 += 2;
          *v13 = v17;
          v13[1] = v18;
          v13 += 2;
          v15 -= 32;
        }
        while (v15);
      }
    }
    else
    {
      v39 = (WTF *)&v41;
      *(_QWORD *)v12 = v14;
      v37 = v40;
      LODWORD(v40) = 3;
      *(_DWORD *)(v12 + 8) = v37;
    }
    v19 = HIDWORD(v40);
    HIDWORD(v40) = 0;
    *(_DWORD *)(v12 + 12) = v19;
    v20 = v11 + (v10 << 7);
    v21 = *(_QWORD *)v53;
    *(_DWORD *)(v20 + 119) = *(_DWORD *)&v53[7];
    *(_QWORD *)(v20 + 112) = v21;
  }
  v35 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 20) = v35;
  v36 = v39;
  if (&v41 == (uint64_t *)v39 || !v39)
  {
    if (v35)
      return;
LABEL_19:
    __break(0xC471u);
    return;
  }
  v39 = 0;
  LODWORD(v40) = 0;
  WTF::fastFree((unint64_t)v36, a2, a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(a1 + 20))
    goto LABEL_19;
}

void JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  WTF *v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  WTF *v36;
  int v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  _BYTE v41[96];
  _BYTE v42[12];

  v9 = (uint64_t *)(a1 + 8);
  v39 = (WTF *)v41;
  v40 = 3;
  *(_QWORD *)v42 = a3;
  *(_DWORD *)&v42[8] = (unsigned __int16)a2;
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 16))
  {
    v22 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v10 + 1, (unint64_t)&v39);
    v23 = *(unsigned int *)(a1 + 20);
    v24 = *(_QWORD *)(a1 + 8);
    v25 = v24 + (v23 << 7);
    v26 = (_OWORD *)(v25 + 16);
    *(_QWORD *)v25 = v25 + 16;
    *(_QWORD *)(v25 + 8) = 3;
    v27 = *(__int128 **)v22;
    if (*(_QWORD *)v22 == v22 + 16)
    {
      v28 = *(unsigned int *)(v22 + 12);
      if ((_DWORD)v28)
      {
        v29 = 32 * v28;
        do
        {
          v30 = *v27;
          v31 = v27[1];
          v27 += 2;
          *v26 = v30;
          v26[1] = v31;
          v26 += 2;
          v29 -= 32;
        }
        while (v29);
      }
    }
    else
    {
      *(_QWORD *)v22 = v22 + 16;
      *(_QWORD *)v25 = v27;
      v38 = *(_DWORD *)(v22 + 8);
      *(_DWORD *)(v22 + 8) = 3;
      *(_DWORD *)(v25 + 8) = v38;
    }
    v32 = *(_DWORD *)(v22 + 12);
    *(_DWORD *)(v22 + 12) = 0;
    *(_DWORD *)(v25 + 12) = v32;
    v33 = v24 + (v23 << 7);
    v34 = *(_QWORD *)(v22 + 112);
    *(_DWORD *)(v33 + 119) = *(_DWORD *)(v22 + 119);
    *(_QWORD *)(v33 + 112) = v34;
  }
  else
  {
    v11 = *v9;
    v12 = *v9 + (v10 << 7);
    v13 = (_OWORD *)(v12 + 16);
    *(_QWORD *)v12 = v12 + 16;
    *(_QWORD *)(v12 + 8) = 3;
    v14 = v39;
    if (v39 == (WTF *)v41)
    {
      if (HIDWORD(v40))
      {
        v15 = 32 * HIDWORD(v40);
        v16 = (__int128 *)v41;
        do
        {
          v17 = *v16;
          v18 = v16[1];
          v16 += 2;
          *v13 = v17;
          v13[1] = v18;
          v13 += 2;
          v15 -= 32;
        }
        while (v15);
      }
    }
    else
    {
      v39 = (WTF *)v41;
      *(_QWORD *)v12 = v14;
      v37 = v40;
      LODWORD(v40) = 3;
      *(_DWORD *)(v12 + 8) = v37;
    }
    v19 = HIDWORD(v40);
    HIDWORD(v40) = 0;
    *(_DWORD *)(v12 + 12) = v19;
    v20 = v11 + (v10 << 7);
    v21 = *(_QWORD *)v42;
    *(_DWORD *)(v20 + 119) = *(_DWORD *)&v42[7];
    *(_QWORD *)(v20 + 112) = v21;
  }
  v35 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 20) = v35;
  v36 = v39;
  if (v41 == (_BYTE *)v39 || !v39)
  {
    if (v35)
      return;
LABEL_19:
    __break(0xC471u);
    return;
  }
  v39 = 0;
  LODWORD(v40) = 0;
  WTF::fastFree((unint64_t)v36, a2, a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(a1 + 20))
    goto LABEL_19;
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendUnOp<(JSC::B3::Air::Opcode)84,(JSC::B3::Air::Opcode)85,(JSC::B3::Air::Opcode)445,(JSC::B3::Air::Opcode)445>(JSC::B3::Value **this, JSC::B3::Value *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  WTF *v28;
  uint64_t v29;
  _BYTE v30[25];
  uint64_t v31;
  __int16 v32;
  int v33;
  int v34;
  int v35;
  char v36;
  JSC::B3::Value *v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v4 = *((_DWORD *)a2 + 4);
  if (v4 >= 0x80000000)
    v4 = 0x80000000;
  if (v4 == 2)
  {
    v5 = 85;
  }
  else
  {
    if (v4 != 1)
    {
      __break(0xC471u);
      goto LABEL_22;
    }
    v5 = 84;
  }
  if (v39 || v40)
  {
    if (v40 == 1)
      goto LABEL_11;
    goto LABEL_17;
  }
  if (v42 || v43 || v41 != 1 || !v44)
  {
LABEL_17:
    if (!v45 || v46)
      return;
    __break(0xC471u);
LABEL_22:
    JUMPOUT(0x197FCA65CLL);
  }
LABEL_11:
  v7 = this[50];
  *(_OWORD *)v30 = v27[0];
  *(_OWORD *)&v30[9] = *(_OWORD *)((char *)v27 + 9);
  v28 = (WTF *)v30;
  v31 = 0;
  v32 = 513;
  v33 = 1;
  v34 = v6;
  v35 = 0;
  v36 = 0;
  v29 = 0x200000003;
  v37 = v7;
  v38 = v5;
  BYTE2(v38) = v47;
  v21 = v28;
  if (v30 != (_BYTE *)v28)
  {
    if (v28)
    {
      v28 = 0;
      LODWORD(v29) = 0;
      WTF::fastFree((unint64_t)v21, v14, v15, v16, v17, v18, v19, v20);
    }
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::fillStackmap(unsigned int **this, JSC::B3::Air::Inst *a2, int8x16_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _UNKNOWN *__ptr32 *v8;
  int8x16_t *v9;
  JSC::B3::Air::Inst *v10;
  JSC::B3::_anonymous_namespace_::LowerToAir *v11;
  __int16 *v12;
  __int128 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int8 *v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  int *v24;
  int v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _UNKNOWN *__ptr32 *v36;
  uint64_t v37;
  unsigned int v38;
  JSC::B3::Air::Inst *v39;
  int v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  JSC::B3::Air::Inst *v47;
  __int128 *v48;
  uint64_t v49;
  int v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  int v58;
  __int128 *v59;
  int v60;
  unsigned int *v61;
  int8x16_t *v62;
  JSC::B3::Air::Inst *v63;
  _UNKNOWN *__ptr32 *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _UNKNOWN *__ptr32 *v71;
  JSC::B3::Air::Inst *v72;
  uint64_t *v73;
  _DWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  JSC::B3::Air::Inst *v78;
  int v79;
  JSC::B3::Air::Inst *v80;
  _UNKNOWN *__ptr32 *v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  __int16 v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  unsigned int v92;
  unsigned int v93;
  JSC::B3::Air::Inst *v94;
  _UNKNOWN *__ptr32 *v95;
  unsigned int *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  WTF *v105;
  unsigned int v106;
  void *v107;
  uint64_t v108;
  unint64_t v109;
  WTF *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  __int16 v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  __int16 *v123;
  int8x16_t *v124;
  WTF *v126;
  int v127;
  unsigned int v128;
  _BYTE v129[96];
  _BYTE v130[11];
  _BYTE v131[20];
  int v132;
  _BYTE v133[11];
  uint64_t v134;
  __int16 v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int16 v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;

  v9 = a3;
  v10 = a2;
  v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
  v12 = &a3->i16[6];
  v13 = &v145;
  v14 = a4;
  v123 = &jpt_197F0BA10;
  while (1)
  {
    v15 = 20;
    switch(*v12)
    {
      case 0u:
      case 1u:
      case 2u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x4Fu:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
        break;
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x50u:
      case 0x54u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x76u:
      case 0x77u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x96u:
      case 0x97u:
      case 0x98u:
        v15 = 24;
        break;
      case 7u:
      case 0x51u:
      case 0x59u:
      case 0x9Cu:
        v15 = 28;
        break;
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x52u:
        v15 = 32;
        break;
      case 0x53u:
        v15 = 88;
        break;
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
        v15 = 56;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FCB198);
    }
    if (v14 >= *(unsigned int *)&v12[v15])
      break;
    v16 = 40;
    switch(*v12)
    {
      case 0u:
      case 1u:
      case 2u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x4Fu:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
        break;
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x50u:
      case 0x54u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x76u:
      case 0x77u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x96u:
      case 0x97u:
      case 0x98u:
        v16 = 48;
        break;
      case 7u:
      case 0x51u:
      case 0x59u:
      case 0x9Cu:
        v16 = 56;
        break;
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x52u:
        v16 = 64;
        break;
      case 0x53u:
        v16 = 176;
        break;
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
        v16 = 112;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FCB1B8);
    }
    v17 = &v9->i8[v16];
    if (v14 >= *((unsigned int *)v17 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x197FCB1C0);
    }
    v18 = *(_QWORD *)(*(_QWORD *)v17 + 8 * v14);
    if (v14 < v9[3].u32[1])
    {
      v76 = v9[2].i64[1] + 16 * v14;
      v77 = *(_QWORD *)v76;
      LODWORD(v76) = *(unsigned __int8 *)(v76 + 8);
      *(_QWORD *)&v144 = 0;
      WORD4(v144) = 512;
      HIDWORD(v144) = 1;
      *(_QWORD *)v13 = 0;
      *((_BYTE *)v13 + 8) = 0;
      switch((int)v76)
      {
        case 0:
        case 1:
        case 2:
          goto LABEL_8;
        case 3:
        case 6:
          v78 = a2;
          a2 = v78;
          v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
          *(_QWORD *)&v144 = 0;
          WORD4(v144) = 513;
          HIDWORD(v144) = 1;
          LODWORD(v145) = v79;
          goto LABEL_25;
        case 4:
          v80 = a2;
          v81 = v8;
          v113 = *((_QWORD *)v11 + 54);
          v114 = *(_DWORD *)(v18 + 16);
          if (v114 >= 0x80000000)
            v114 = 0x80000000;
          if (v114 - 3 < 3)
          {
            v121 = *(_DWORD *)(v113 + 180);
            *(_DWORD *)(v113 + 180) = v121 + 1;
            v83 = -33 - v121;
          }
          else
          {
            v115 = *(_DWORD *)(v113 + 176);
            *(_DWORD *)(v113 + 176) = v115 + 1;
            v83 = v115 + 33;
          }
          v116 = v114 - 1;
          if (v116 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x197FCB330);
          }
          v117 = aZzklq[v116];
          v118 = *(_WORD *)(v18 + 12) & 0xFFF;
          if (v118 == 3)
          {
            v120 = *(int *)(v18 + 40);
          }
          else
          {
            if (v118 != 4)
              goto LABEL_175;
            v120 = *(_QWORD *)(v18 + 40);
          }
          if ((unint64_t)(v120 + 4095) >= 0x1FFF)
          {
            if ((v120 & 0xFFF) != 0
              || (unint64_t)v120 >> 24 && (unint64_t)((v120 >> 12) + 4095) >= 0x1000)
            {
LABEL_175:
              v139 = 0;
              v140 = 513;
              v141 = 1;
              v142 = v119;
              LOBYTE(v143) = 0;
              goto LABEL_176;
            }
LABEL_186:
            v139 = v120;
            v140 = 514;
            v141 = 1;
            v142 = 0;
            v143 = 0;
            goto LABEL_176;
          }
          if (v120)
            goto LABEL_186;
          v141 = 1;
          v142 = 0;
          LOBYTE(v143) = 0;
          v140 = 532;
          v139 = 0;
LABEL_176:
          v89 = v83;
          v90 = v117;
          v91 = &v139;
LABEL_135:
          v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
          *(_QWORD *)&v144 = 0;
          WORD4(v144) = 513;
          HIDWORD(v144) = 1;
          *(_QWORD *)&v145 = v83;
          BYTE8(v145) = 0;
          v8 = v81;
          a2 = v80;
          break;
        case 7:
        case 8:
          if ((v77 & 0x7Fu) >= 0x40uLL)
            goto LABEL_165;
          v80 = a2;
          v81 = v8;
          v9[4] = vandq_s8(v9[4], (int8x16_t)vdupq_n_s64(~(1 << (v77 & 0x7F))));
          v82 = v77 & 0x7F;
          if (v82 == 127)
          {
            v83 = 0;
          }
          else if ((v77 & 0x60) != 0)
          {
            v83 = (char)(31 - v82);
          }
          else
          {
            v83 = v82 + 1;
          }
          v84 = *(_DWORD *)(v18 + 16);
          if (v84 >= 0x80000000)
            v84 = 0x80000000;
          v85 = v84 - 1;
          if (v85 >= 5)
            goto LABEL_166;
          v86 = aZzklq[v85];
          v87 = *(_WORD *)(v18 + 12) & 0xFFF;
          if (v87 == 3)
          {
            v111 = *(int *)(v18 + 40);
          }
          else
          {
            if (v87 != 4)
              goto LABEL_133;
            v111 = *(_QWORD *)(v18 + 40);
          }
          if ((unint64_t)(v111 + 4095) >= 0x1FFF)
          {
            if ((v111 & 0xFFF) != 0
              || (unint64_t)v111 >> 24 && (unint64_t)((v111 >> 12) + 4095) >= 0x1000)
            {
LABEL_133:
              v134 = 0;
              v135 = 513;
              v136 = 1;
              v137 = v88;
              LOBYTE(v138) = 0;
              goto LABEL_134;
            }
LABEL_157:
            v134 = v111;
            v135 = 514;
            v136 = 1;
            v137 = 0;
            v138 = 0;
            goto LABEL_134;
          }
          if (v111)
            goto LABEL_157;
          v136 = 1;
          v137 = 0;
          LOBYTE(v138) = 0;
          v135 = 532;
          v134 = 0;
LABEL_134:
          v89 = v83;
          v90 = v86;
          v91 = &v134;
          goto LABEL_135;
        case 10:
          *(_QWORD *)&v144 = v77;
          WORD4(v144) = 522;
          HIDWORD(v144) = 1;
          v92 = *(_DWORD *)(v18 + 16);
          if (v92 >= 0x80000000)
            v92 = 0x80000000;
          v93 = v92 - 1;
          if (v93 >= 5)
          {
            __break(0xC471u);
            JUMPOUT(0x197FCB270);
          }
          v94 = a2;
          v95 = v8;
          v96 = this[50];
          v97 = qword_19914FA58[v93] | ((unint64_t)(v123 & 0xFC) << 16);
          v122 = v97 | v122 & 0xFFFFFFFF00000000;
          v104 = *((_WORD *)v96 + 6);
          *(_QWORD *)v131 = &v131[16];
          *(_DWORD *)&v131[8] = 3;
          v105 = v126;
          if (v126 == (WTF *)v129)
          {
            v106 = v128;
            if (v128)
              memcpy(&v131[16], v129, 32 * v128);
          }
          else
          {
            v126 = (WTF *)v129;
            *(_QWORD *)v131 = v105;
            v112 = v127;
            v106 = v128;
            v127 = 3;
            *(_DWORD *)&v131[8] = v112;
          }
          v128 = 0;
          *(_DWORD *)&v131[12] = v106;
          *(_DWORD *)&v133[7] = *(_DWORD *)&v130[7];
          *(_QWORD *)v133 = *(_QWORD *)v130;
          v133[10] = v130[10] | ((v104 & 0x200) != 0);
          v109 = *(_QWORD *)v131;
          if (&v131[16] != *(_BYTE **)v131 && *(_QWORD *)v131)
          {
            *(_QWORD *)v131 = 0;
            *(_DWORD *)&v131[8] = 0;
            WTF::fastFree(v109, v107, v108, a4, a5, a6, a7, a8);
          }
          v110 = v126;
          if (v129 != (_BYTE *)v126 && v126)
          {
            v126 = 0;
            v127 = 0;
            WTF::fastFree((unint64_t)v110, v107, v108, a4, a5, a6, a7, a8);
          }
          LOBYTE(v123) = v123 & 0xFC;
          v8 = v95;
          a2 = v94;
          v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
          goto LABEL_26;
        default:
          __break(0xC471u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(0xC471u);
          JUMPOUT(0x197FCB250);
      }
      goto LABEL_26;
    }
    *(_QWORD *)&v144 = 0;
    WORD4(v144) = 512;
    HIDWORD(v144) = 1;
    *(_QWORD *)v13 = 0;
    *((_BYTE *)v13 + 8) = 0;
LABEL_8:
    v19 = *(_WORD *)(v18 + 12);
    v20 = v19 & 0xFFF;
    if (v18)
      v21 = v20 == 3;
    else
      v21 = 0;
    v22 = v21;
    if (v21)
    {
      v30 = *(_DWORD *)(v18 + 40);
      v31 = v30;
LABEL_33:
      if ((unint64_t)(v31 + 4095) < 0x1FFF
        || (v31 & 0xFFF) == 0 && (!((unint64_t)v31 >> 24) || (unint64_t)((v31 >> 12) + 4095) <= 0xFFF))
      {
        if ((v22 & 1) != 0)
        {
          v33 = v30;
        }
        else
        {
          v32 = 0;
          v33 = 0;
          if (!v18 || v20 != 4)
            goto LABEL_39;
          v33 = *(_QWORD *)(v18 + 40);
        }
        if ((unint64_t)(v33 + 4095) < 0x1FFF)
        {
          v32 = 2;
        }
        else if ((v33 & 0xFFF) != 0
               || (v32 = 2, (unint64_t)v33 >> 24) && (unint64_t)((v33 >> 12) + 4095) >= 0x1000)
        {
          v33 = 0;
          v32 = 0;
        }
LABEL_39:
        *((_BYTE *)v13 + 8) = 0;
        *(_QWORD *)v13 = 0;
        *(_QWORD *)&v144 = v33;
        BYTE8(v144) = v32;
        BYTE9(v144) = 2;
LABEL_40:
        HIDWORD(v144) = 1;
        goto LABEL_26;
      }
      goto LABEL_17;
    }
    if (v18 && v20 == 4)
    {
      v31 = *(_QWORD *)(v18 + 40);
      v30 = v31;
      goto LABEL_33;
    }
LABEL_17:
    if (v18 && v20 == 4)
    {
      v49 = *(_QWORD *)(v18 + 40);
      *(_QWORD *)v13 = 0;
      *((_BYTE *)v13 + 8) = 0;
      *(_QWORD *)&v144 = v49;
      WORD4(v144) = 515;
      goto LABEL_40;
    }
    if (v18 && v20 == 5)
    {
      v62 = v9;
      v63 = a2;
      v64 = v8;
      v23 = *(unsigned int *)(v18 + 8);
      v65 = *((_QWORD *)v11 + 1);
      v66 = *(_DWORD *)(v65 + 4 * v23);
      if (v66)
        goto LABEL_113;
      v67 = v18;
      if (this[10][2 * v23] != 1)
        goto LABEL_112;
      v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
      if ((*(_WORD *)(v67 + 12) & 0xFFF) == 5)
        v68 = v67;
      else
        v68 = 0;
      v69 = *(_QWORD *)(v68 + 40);
LABEL_111:
      *(_QWORD *)v13 = 0;
      *((_BYTE *)v13 + 8) = 0;
      *(_QWORD *)&v144 = v69;
      WORD4(v144) = 515;
      HIDWORD(v144) = 1;
      v8 = v64;
      a2 = v63;
      v9 = v62;
      goto LABEL_26;
    }
    v23 = *(unsigned int *)(v18 + 8);
    if (v18 && v20 == 6)
    {
      v62 = v9;
      v63 = a2;
      v64 = v8;
      v65 = *((_QWORD *)v11 + 1);
      v66 = *(_DWORD *)(v65 + 4 * v23);
      if (v66)
      {
LABEL_113:
        v25 = v66;
        v8 = v64;
        a2 = v63;
        v9 = v62;
        v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
        goto LABEL_24;
      }
      v67 = v18;
      if (this[10][2 * v23] != 1)
      {
LABEL_112:
        v24 = (int *)(v65 + 4 * v23);
        v18 = v67;
        v8 = v64;
        a2 = v63;
        v9 = v62;
        while (1)
        {
LABEL_42:
          if (v19 > 0x2Bu)
          {
            v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
            if (v19 != 44
              && (v19 != 90 || *(_BYTE *)(v18 + 41) || (*(_BYTE *)(v18 + 40) & 0x3Fu) - 5 > 1))
            {
LABEL_48:
              v34 = *(unsigned int *)(v18 + 8);
              v35 = *((_QWORD *)v11 + 1);
              v25 = *(_DWORD *)(v35 + 4 * v34);
              if (v25)
              {
LABEL_63:
                *v24 = v25;
                goto LABEL_24;
              }
              v36 = v8;
              v37 = *((_QWORD *)v11 + 54);
              v38 = *(_DWORD *)(v18 + 16);
              if (v38 >= 0x80000000)
                v38 = 0x80000000;
              v124 = v9;
              v39 = a2;
              if (v38 - 3 < 3)
              {
                v50 = *(_DWORD *)(v37 + 180);
                *(_DWORD *)(v37 + 180) = v50 + 1;
                v41 = -33 - v50;
              }
              else
              {
                v40 = *(_DWORD *)(v37 + 176);
                *(_DWORD *)(v37 + 176) = v40 + 1;
                v41 = v40 + 33;
              }
              *(_DWORD *)(v35 + 4 * v34) = v41;
              v42 = *((_QWORD *)v11 + 53);
              JSC::B3::Value::key(v18, (uint64_t)v131);
              if ((v131[0]
                 || v131[1] != 159
                 || (v131[2] & 0xF) != 0
                 || ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_19914F6D0, (int8x16_t)vceqzq_s32(*(int32x4_t *)&v131[4]))) & 0xF) == 0? (v43 = v132 == 0): (v43 = 0), !v43))&& (v45 = *(_QWORD *)(v42 + 136), v44 = (uint64_t *)(v42 + 136), v45))
              {
                v46 = WTF::HashTable<JSC::B3::ValueKey,JSC::B3::ValueKey,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::B3::ValueKey>,WTF::DefaultHash<JSC::B3::ValueKey>>,JSC::B3::ValueKey>(v44, v131);
                v25 = *(_DWORD *)(v35 + 4 * v34);
                if (!v46)
                {
                  v9 = v124;
                  v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
                  a2 = v39;
                  v8 = v36;
                  goto LABEL_63;
                }
                v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
                v51 = this[54];
                v52 = v51 + 38;
                v53 = v51[39];
                if (v53 == 2)
                {
                  a2 = v39;
                  v54 = *v52;
                  v8 = v36;
                  if (*v52)
                  {
                    v55 = *v52;
                    v56 = (int *)(v51 + 40);
                    v57 = v55;
                    while (1)
                    {
                      v58 = *v56++;
                      if (v58 == v25)
                        break;
                      if (!--v57)
                      {
                        if (v54 <= 1)
                          goto LABEL_90;
                        v59 = v13;
                        v60 = *(_DWORD *)(v35 + 4 * v34);
                        v61 = v51 + 38;
                        WTF::SmallSet<JSC::B3::Air::Tmp,JSC::B3::Air::TmpHash,2u>::grow((uint64_t)(v51 + 38), 0x40u);
                        v53 = v51[39];
                        goto LABEL_118;
                      }
                    }
                  }
                  else
                  {
                    v55 = 0;
LABEL_90:
                    v51[v55 + 40] = v25;
LABEL_91:
                    *v52 = v54 + 1;
                  }
                }
                else
                {
                  v61 = v51 + 38;
                  v59 = v13;
                  v60 = *(_DWORD *)(v35 + 4 * v34);
LABEL_118:
                  if (3 * v53 <= 4 * *v61)
                    WTF::SmallSet<JSC::B3::Air::Tmp,JSC::B3::Air::TmpHash,2u>::grow((uint64_t)v61, 2 * v53);
                  v74 = (_DWORD *)WTF::SmallSet<JSC::B3::Air::Tmp,JSC::B3::Air::TmpHash,2u>::bucket((uint64_t)v61, v60);
                  v52 = v61;
                  v75 = v60;
                  v21 = *v74 == v60;
                  v13 = v59;
                  v8 = &jpt_197FCA71C;
                  a2 = (JSC::B3::Air::Inst *)&jpt_197FCA74C;
                  v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
                  if (!v21)
                  {
                    *v74 = v75;
                    v54 = *v52;
                    goto LABEL_91;
                  }
                }
              }
              else
              {
                v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
                a2 = v39;
                v8 = v36;
              }
              v25 = *(_DWORD *)(v35 + 4 * v34);
              v9 = v124;
              goto LABEL_63;
            }
          }
          else
          {
            v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
            if (v19 == 13)
            {
              v25 = 30;
              goto LABEL_24;
            }
            if (v19 - 1 >= 2)
              goto LABEL_48;
          }
          v71 = v8;
          v72 = a2;
          v73 = (uint64_t *)JSC::B3::Value::child((JSC::B3::Value *)v18, 0);
          a2 = v72;
          v8 = v71;
          v18 = *v73;
          v19 = *(_WORD *)(v18 + 12);
        }
      }
      v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
      if ((*(_WORD *)(v67 + 12) & 0xFFF) == 6)
        v70 = v67;
      else
        v70 = 0;
      v69 = *(unsigned int *)(v70 + 40);
      goto LABEL_111;
    }
    v24 = (int *)(*((_QWORD *)v11 + 1) + 4 * v23);
    v25 = *v24;
    if (!*v24)
      goto LABEL_42;
LABEL_24:
    *(_QWORD *)&v144 = 0;
    WORD4(v144) = 513;
    HIDWORD(v144) = 1;
    LODWORD(v145) = v25;
LABEL_25:
    DWORD1(v145) = 0;
    BYTE8(v145) = 0;
LABEL_26:
    v26 = *((unsigned int *)v10 + 3);
    if ((_DWORD)v26 == *((_DWORD *)v10 + 2))
    {
      v47 = a2;
      v48 = (__int128 *)WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v10, (void *)(v26 + 1), (unint64_t)&v144, a4, a5, a6, a7, a8);
      a2 = v47;
      v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)this;
      v27 = (__int128 *)(*(_QWORD *)v10 + 32 * *((unsigned int *)v10 + 3));
      v28 = *v48;
      v29 = v48[1];
    }
    else
    {
      v27 = (__int128 *)(*(_QWORD *)v10 + 32 * v26);
      v28 = v144;
      v29 = v145;
    }
    *v27 = v28;
    v27[1] = v29;
    ++*((_DWORD *)v10 + 3);
    ++v14;
  }
}

uint64_t *JSC::B3::`anonymous namespace'::LowerToAir::tmpsForTuple(JSC::B3::_anonymous_namespace_::LowerToAir *this, JSC::B3::Value *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  JSC::B3::Value **v9;
  JSC::B3::Value *v10;
  int v12;

  v2 = *((_WORD *)a2 + 6);
  if ((v2 - 82) >= 2)
  {
    if ((v2 - 9) < 2)
      return WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find(*((_QWORD *)this + 9), *((_QWORD *)a2 + 5))+ 1;
    if (v2 != 153 && v2 != 8)
    {
      __break(0xC471u);
      JUMPOUT(0x197FCB9E4);
    }
  }
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = (JSC::B3::Value **)(v3 + 24 * v8);
    v10 = *v9;
    if (*v9 != a2)
    {
      v12 = 1;
      while (v10)
      {
        v8 = (v8 + v12) & v4;
        v9 = (JSC::B3::Value **)(v3 + 24 * v8);
        v10 = *v9;
        ++v12;
        if (*v9 == a2)
          return (uint64_t *)(v9 + 1);
      }
      v9 = (JSC::B3::Value **)(v3 + 24 * *(unsigned int *)(v3 - 4));
    }
  }
  else
  {
    v9 = 0;
  }
  return (uint64_t *)(v9 + 1);
}

uint64_t JSC::B3::Air::relaxedMoveForType(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t result;

  if (a1 >= 0x80000000)
    v1 = 0x80000000;
  else
    v1 = a1;
  v2 = v1 - 1;
  if (v2 < 5)
    return aZzklq[v2];
  result = 88;
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::StackmapValue::child(JSC::B3::StackmapValue *this, unsigned int a2)
{
  uint64_t v2;
  char *v3;

  v2 = 40;
  switch(*((_BYTE *)this + 12))
  {
    case 0:
    case 1:
    case 2:
    case 8:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x4F:
    case 0x99:
    case 0x9A:
    case 0x9B:
    case 0x9D:
    case 0x9E:
    case 0x9F:
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x50:
    case 0x54:
    case 0x5A:
    case 0x5B:
    case 0x5C:
    case 0x5D:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x62:
    case 0x63:
    case 0x64:
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6D:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x84:
    case 0x85:
    case 0x86:
    case 0x87:
    case 0x88:
    case 0x89:
    case 0x8A:
    case 0x8B:
    case 0x8C:
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
    case 0x91:
    case 0x92:
    case 0x93:
    case 0x94:
    case 0x95:
    case 0x96:
    case 0x97:
    case 0x98:
      v2 = 48;
      break;
    case 7:
    case 0x51:
    case 0x59:
    case 0x9C:
      v2 = 56;
      break;
    case 0x3F:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
    case 0x49:
    case 0x4A:
    case 0x4B:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x52:
      v2 = 64;
      break;
    case 0x53:
      v2 = 176;
      break;
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
      v2 = 112;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FCBAE4);
  }
  v3 = (char *)this + v2;
  if (*((_DWORD *)v3 + 3) <= a2)
  {
    __break(0xC471u);
    JUMPOUT(0x197FCBAECLL);
  }
  return *(_QWORD *)v3 + 8 * a2;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::ensureCheckSpecial<JSC::B3::Air::Opcode &,int>(uint64_t a1, unsigned __int16 a2)
{
  _QWORD v4[3];
  int v5;
  char v6;
  int v7;

  v5 = a2;
  v6 = 0;
  v7 = 2;
  WTF::HashMap<JSC::B3::CheckSpecial::Key,JSC::B3::CheckSpecial*,WTF::DefaultHash<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial*>,WTF::HashTableTraits>::add<decltype(nullptr)>((uint64_t)v4, (uint64_t *)(a1 + 416), (__int16 *)&v5);
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::preferRightForResult(JSC::B3::_anonymous_namespace_::LowerToAir *this, JSC::B3::Value *a2, JSC::B3::Value *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  JSC::B3::Value *v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;

  v11 = (char *)this + 96;
  v12 = *((_QWORD *)this + 12) + 16 * *((unsigned int *)a2 + 2);
  v26 = (char *)this + 96;
  v27 = a2;
  v32 = *((_QWORD *)this + 50);
  v31 = 0;
  v28 = v12;
  v29 = &v31;
  v30 = &v32;
  JSC::B3::PhiChildren::UpsilonCollection::forAllTransitiveIncomingValues<JSC::B3::PhiChildren::UpsilonCollection::transitivelyUses(JSC::B3::Value *)::{lambda(JSC::B3::Value *)#1}>((uint64_t)&v26, (uint64_t)&v29, (uint64_t)a3, a4, a5, a6, a7, a8);
  v13 = v31 != 0;
  v14 = *(_QWORD *)v11 + 16 * *((unsigned int *)a3 + 2);
  v26 = v11;
  v27 = a3;
  v28 = v14;
  v29 = &v31;
  v32 = *((_QWORD *)v11 + 38);
  v31 = 0;
  v30 = &v32;
  JSC::B3::PhiChildren::UpsilonCollection::forAllTransitiveIncomingValues<JSC::B3::PhiChildren::UpsilonCollection::transitivelyUses(JSC::B3::Value *)::{lambda(JSC::B3::Value *)#1}>((uint64_t)&v26, (uint64_t)&v29, v15, v16, v17, v18, v19, v20);
  LODWORD(v21) = v31 != 0;
  if (((v13 ^ v21) & 1) == 0)
  {
    v22 = *((_QWORD *)this + 10);
    if (*(_DWORD *)(v22 + 8 * *((unsigned int *)a3 + 2) + 4) == 1)
      LOBYTE(v21) = *(_DWORD *)(v22 + 8 * *((unsigned int *)a2 + 2) + 4) != 1
                 || (v23 = *(_QWORD *)(*((_QWORD *)this + 43) + 8),
                     v21 = v23 + 32 * **((unsigned int **)a2 + 4),
                     v24 = v23 + 32 * **((unsigned int **)a3 + 4),
                     *(_DWORD *)(v21 + 24) <= *(_DWORD *)(v24 + 24))
                 || *(_DWORD *)(v21 + 28) >= *(_DWORD *)(v24 + 28);
    else
      LOBYTE(v21) = 0;
  }
  return v21 & 1;
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Arg,JSC::B3::Air::Arg&>(uint64_t a1, void *a2, __int128 *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  WTF *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  WTF *v41;
  uint64_t v42;
  _OWORD v43[6];
  _BYTE v44[12];
  _BYTE v45[32];
  _BYTE v46[32];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v10 = *(_QWORD *)(a1 + 400);
    *(_OWORD *)&v45[9] = *(__int128 *)((char *)a3 + 9);
    v11 = *a3;
    *(_OWORD *)&v46[9] = *(__int128 *)((char *)a4 + 9);
    v12 = *a4;
    *(_OWORD *)v45 = v11;
    *(_OWORD *)v46 = v12;
    v41 = (WTF *)v43;
    v43[0] = v11;
    v43[1] = *(_OWORD *)&v45[16];
    v43[2] = v12;
    v43[3] = *(_OWORD *)&v46[16];
    v42 = 0x200000003;
    *(_QWORD *)v44 = v10;
    *(_DWORD *)&v44[8] = (_DWORD)a2;
    v13 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v13 == *(_DWORD *)(v9 + 8))
    {
      v27 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v13 + 1, (unint64_t)&v41, (uint64_t)a4, a5, a6, a7, a8);
      v28 = *(unsigned int *)(v9 + 12);
      v29 = *(_QWORD *)v9;
      v30 = *(_QWORD *)v9 + (v28 << 7);
      v31 = (_OWORD *)(v30 + 16);
      *(_QWORD *)v30 = v30 + 16;
      *(_QWORD *)(v30 + 8) = 3;
      v32 = *(__int128 **)v27;
      if (*(_QWORD *)v27 == v27 + 16)
      {
        v33 = *(unsigned int *)(v27 + 12);
        if ((_DWORD)v33)
        {
          v34 = 32 * v33;
          do
          {
            v35 = *v32;
            v36 = v32[1];
            v32 += 2;
            *v31 = v35;
            v31[1] = v36;
            v31 += 2;
            v34 -= 32;
          }
          while (v34);
        }
      }
      else
      {
        *(_QWORD *)v27 = v27 + 16;
        *(_QWORD *)v30 = v32;
        v40 = *(_DWORD *)(v27 + 8);
        *(_DWORD *)(v27 + 8) = 3;
        *(_DWORD *)(v30 + 8) = v40;
      }
      v37 = *(_DWORD *)(v27 + 12);
      *(_DWORD *)(v27 + 12) = 0;
      *(_DWORD *)(v30 + 12) = v37;
      v38 = v29 + (v28 << 7);
      v39 = *(_QWORD *)(v27 + 112);
      *(_DWORD *)(v38 + 119) = *(_DWORD *)(v27 + 119);
      *(_QWORD *)(v38 + 112) = v39;
    }
    else
    {
      v14 = *(_QWORD *)v9;
      v15 = *(_QWORD *)v9 + (v13 << 7);
      v16 = (_OWORD *)(v15 + 16);
      *(_QWORD *)v15 = v15 + 16;
      *(_QWORD *)(v15 + 8) = 3;
      v17 = v41;
      if (v41 == (WTF *)v43)
      {
        if (HIDWORD(v42))
        {
          v18 = 32 * HIDWORD(v42);
          v19 = v43;
          do
          {
            v20 = *v19;
            v21 = v19[1];
            v19 += 2;
            *v16 = v20;
            v16[1] = v21;
            v16 += 2;
            v18 -= 32;
          }
          while (v18);
        }
      }
      else
      {
        v41 = (WTF *)v43;
        *(_QWORD *)v15 = v17;
        v26 = v42;
        LODWORD(v42) = 3;
        *(_DWORD *)(v15 + 8) = v26;
      }
      v22 = HIDWORD(v42);
      HIDWORD(v42) = 0;
      *(_DWORD *)(v15 + 12) = v22;
      v23 = v14 + (v13 << 7);
      v24 = *(_QWORD *)v44;
      *(_DWORD *)(v23 + 119) = *(_DWORD *)&v44[7];
      *(_QWORD *)(v23 + 112) = v24;
    }
    ++*(_DWORD *)(v9 + 12);
    v25 = v41;
    if (v43 != (_OWORD *)v41)
    {
      if (v41)
      {
        v41 = 0;
        LODWORD(v42) = 0;
        WTF::fastFree((unint64_t)v25, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Arg &,JSC::B3::Air::Arg &>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  WTF *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  WTF *v41;
  uint64_t v42;
  _OWORD v43[6];
  _BYTE v44[12];
  _BYTE v45[32];
  _BYTE v46[32];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v10 = *(_QWORD *)(a1 + 400);
    *(_OWORD *)&v45[9] = *(__int128 *)((char *)a2 + 9);
    v11 = *a2;
    *(_OWORD *)&v46[9] = *(__int128 *)((char *)a3 + 9);
    v12 = *a3;
    *(_OWORD *)v45 = v11;
    *(_OWORD *)v46 = v12;
    v41 = (WTF *)v43;
    v43[0] = v11;
    v43[1] = *(_OWORD *)&v45[16];
    v43[2] = v12;
    v43[3] = *(_OWORD *)&v46[16];
    v42 = 0x200000003;
    *(_QWORD *)v44 = v10;
    *(_DWORD *)&v44[8] = 6;
    v13 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v13 == *(_DWORD *)(v9 + 8))
    {
      v27 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v13 + 1, (unint64_t)&v41, a4, a5, a6, a7, a8);
      v28 = *(unsigned int *)(v9 + 12);
      v29 = *(_QWORD *)v9;
      v30 = *(_QWORD *)v9 + (v28 << 7);
      v31 = (_OWORD *)(v30 + 16);
      *(_QWORD *)v30 = v30 + 16;
      *(_QWORD *)(v30 + 8) = 3;
      v32 = *(__int128 **)v27;
      if (*(_QWORD *)v27 == v27 + 16)
      {
        v33 = *(unsigned int *)(v27 + 12);
        if ((_DWORD)v33)
        {
          v34 = 32 * v33;
          do
          {
            v35 = *v32;
            v36 = v32[1];
            v32 += 2;
            *v31 = v35;
            v31[1] = v36;
            v31 += 2;
            v34 -= 32;
          }
          while (v34);
        }
      }
      else
      {
        *(_QWORD *)v27 = v27 + 16;
        *(_QWORD *)v30 = v32;
        v40 = *(_DWORD *)(v27 + 8);
        *(_DWORD *)(v27 + 8) = 3;
        *(_DWORD *)(v30 + 8) = v40;
      }
      v37 = *(_DWORD *)(v27 + 12);
      *(_DWORD *)(v27 + 12) = 0;
      *(_DWORD *)(v30 + 12) = v37;
      v38 = v29 + (v28 << 7);
      v39 = *(_QWORD *)(v27 + 112);
      *(_DWORD *)(v38 + 119) = *(_DWORD *)(v27 + 119);
      *(_QWORD *)(v38 + 112) = v39;
    }
    else
    {
      v14 = *(_QWORD *)v9;
      v15 = *(_QWORD *)v9 + (v13 << 7);
      v16 = (_OWORD *)(v15 + 16);
      *(_QWORD *)v15 = v15 + 16;
      *(_QWORD *)(v15 + 8) = 3;
      v17 = v41;
      if (v41 == (WTF *)v43)
      {
        if (HIDWORD(v42))
        {
          v18 = 32 * HIDWORD(v42);
          v19 = v43;
          do
          {
            v20 = *v19;
            v21 = v19[1];
            v19 += 2;
            *v16 = v20;
            v16[1] = v21;
            v16 += 2;
            v18 -= 32;
          }
          while (v18);
        }
      }
      else
      {
        v41 = (WTF *)v43;
        *(_QWORD *)v15 = v17;
        v26 = v42;
        LODWORD(v42) = 3;
        *(_DWORD *)(v15 + 8) = v26;
      }
      v22 = HIDWORD(v42);
      HIDWORD(v42) = 0;
      *(_DWORD *)(v15 + 12) = v22;
      v23 = v14 + (v13 << 7);
      v24 = *(_QWORD *)v44;
      *(_DWORD *)(v23 + 119) = *(_DWORD *)&v44[7];
      *(_QWORD *)(v23 + 112) = v24;
    }
    ++*(_DWORD *)(v9 + 12);
    v25 = v41;
    if (v43 != (_OWORD *)v41)
    {
      if (v41)
      {
        v41 = 0;
        LODWORD(v42) = 0;
        WTF::fastFree((unint64_t)v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::moveToTmp(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  WTF *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  WTF *v40;
  uint64_t v41;
  _BYTE v42[25];
  uint64_t v43;
  __int16 v44;
  int v45;
  int v46;
  int v47;
  char v48;
  _BYTE v49[12];

  if ((_DWORD)a2 != 90)
  {
    switch((_DWORD)a2)
    {
      case 'l':
        if (*(_BYTE *)(a3 + 8) != 20)
          goto LABEL_2;
        v25 = 114;
        break;
      case 'k':
        if (*(_BYTE *)(a3 + 8) != 20)
          goto LABEL_2;
        v25 = 115;
        break;
      case 'q':
        if (*(_BYTE *)(a3 + 8) != 20)
          goto LABEL_2;
        v25 = 380;
        break;
      default:
        goto LABEL_30;
    }
    return;
  }
LABEL_2:
  v8 = *(_DWORD *)(a1 + 364);
  if (!v8)
  {
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x197FCC5D4);
  }
  v9 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
  v10 = *(_QWORD *)(a1 + 400);
  *(_OWORD *)v42 = *(_OWORD *)a3;
  *(_OWORD *)&v42[9] = *(_OWORD *)(a3 + 9);
  v40 = (WTF *)v42;
  v43 = 0;
  v44 = 513;
  v45 = 1;
  v46 = a4;
  v47 = 0;
  v48 = 0;
  v41 = 0x200000003;
  *(_QWORD *)v49 = v10;
  *(_DWORD *)&v49[8] = (unsigned __int16)a2;
  v11 = *(unsigned int *)(v9 + 12);
  if ((_DWORD)v11 == *(_DWORD *)(v9 + 8))
  {
    v26 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v11 + 1, (unint64_t)&v40, a4, a5, a6, a7, a8);
    v27 = *(unsigned int *)(v9 + 12);
    v28 = *(_QWORD *)v9;
    v29 = *(_QWORD *)v9 + (v27 << 7);
    v30 = (_OWORD *)(v29 + 16);
    *(_QWORD *)v29 = v29 + 16;
    *(_QWORD *)(v29 + 8) = 3;
    v31 = *(__int128 **)v26;
    if (*(_QWORD *)v26 == v26 + 16)
    {
      v32 = *(unsigned int *)(v26 + 12);
      if ((_DWORD)v32)
      {
        v33 = 32 * v32;
        do
        {
          v34 = *v31;
          v35 = v31[1];
          v31 += 2;
          *v30 = v34;
          v30[1] = v35;
          v30 += 2;
          v33 -= 32;
        }
        while (v33);
      }
    }
    else
    {
      *(_QWORD *)v26 = v26 + 16;
      *(_QWORD *)v29 = v31;
      v39 = *(_DWORD *)(v26 + 8);
      *(_DWORD *)(v26 + 8) = 3;
      *(_DWORD *)(v29 + 8) = v39;
    }
    v36 = *(_DWORD *)(v26 + 12);
    *(_DWORD *)(v26 + 12) = 0;
    *(_DWORD *)(v29 + 12) = v36;
    v37 = v28 + (v27 << 7);
    v38 = *(_QWORD *)(v26 + 112);
    *(_DWORD *)(v37 + 119) = *(_DWORD *)(v26 + 119);
    *(_QWORD *)(v37 + 112) = v38;
  }
  else
  {
    v12 = *(_QWORD *)v9;
    v13 = *(_QWORD *)v9 + (v11 << 7);
    v14 = (_OWORD *)(v13 + 16);
    *(_QWORD *)v13 = v13 + 16;
    *(_QWORD *)(v13 + 8) = 3;
    v15 = v40;
    if (v40 == (WTF *)v42)
    {
      if (HIDWORD(v41))
      {
        v16 = 32 * HIDWORD(v41);
        v17 = (__int128 *)v42;
        do
        {
          v18 = *v17;
          v19 = v17[1];
          v17 += 2;
          *v14 = v18;
          v14[1] = v19;
          v14 += 2;
          v16 -= 32;
        }
        while (v16);
      }
    }
    else
    {
      v40 = (WTF *)v42;
      *(_QWORD *)v13 = v15;
      v24 = v41;
      LODWORD(v41) = 3;
      *(_DWORD *)(v13 + 8) = v24;
    }
    v20 = HIDWORD(v41);
    HIDWORD(v41) = 0;
    *(_DWORD *)(v13 + 12) = v20;
    v21 = v12 + (v11 << 7);
    v22 = *(_QWORD *)v49;
    *(_DWORD *)(v21 + 119) = *(_DWORD *)&v49[7];
    *(_QWORD *)(v21 + 112) = v22;
  }
  ++*(_DWORD *)(v9 + 12);
  v23 = v40;
  if (v42 != (_BYTE *)v40)
  {
    if (v40)
    {
      v40 = 0;
      LODWORD(v41) = 0;
      WTF::fastFree((unint64_t)v23, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::immOrTmpOrZeroReg(uint64_t this, JSC::B3::Value *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = this;
  v4 = *(_WORD *)(a3 + 12) & 0xFFF;
  if (a3 && v4 == 3)
  {
    v5 = *(int *)(a3 + 40);
  }
  else
  {
    if (!a3 || v4 != 4)
      goto LABEL_5;
    v5 = *(_QWORD *)(a3 + 40);
  }
  if ((unint64_t)(v5 + 4095) >= 0x1FFF)
  {
    if ((v5 & 0xFFF) != 0 || (unint64_t)v5 >> 24 && (unint64_t)((v5 >> 12) + 4095) >= 0x1000)
    {
LABEL_5:
      *(_QWORD *)v3 = 0;
      *(_WORD *)(v3 + 8) = 513;
      *(_DWORD *)(v3 + 12) = 1;
      *(_QWORD *)(v3 + 16) = this;
      *(_BYTE *)(v3 + 24) = 0;
      return this;
    }
    goto LABEL_14;
  }
  if (v5)
  {
LABEL_14:
    *(_QWORD *)this = v5;
    *(_WORD *)(this + 8) = 514;
    *(_DWORD *)(this + 12) = 1;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 24) = 0;
    return this;
  }
  *(_DWORD *)(this + 12) = 1;
  *(_QWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 24) = 0;
  *(_WORD *)(this + 8) = 532;
  *(_QWORD *)this = 0;
  return this;
}

uint64_t *WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v10;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = (uint64_t *)(a1 + 24 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v10 = 1;
    while (v8)
    {
      v6 = (v6 + v10) & v2;
      v7 = (uint64_t *)(a1 + 24 * v6);
      v8 = *v7;
      ++v10;
      if (*v7 == a2)
        return v7;
    }
    return (uint64_t *)(a1 + 24 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

void JSC::B3::`anonymous namespace'::LowerToAir::forEachImmOrTmpOrZeroReg<JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Air::Arg,JSC::B3::Type,unsigned int)#4}>(JSC::B3::_anonymous_namespace_::LowerToAir *a1, JSC::B3::Value *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int **v33;
  __int16 v34;
  _DWORD v35[2];
  uint64_t v36;
  __int16 v37;
  int v38;
  int v39;
  int v40;
  char v41;
  _BYTE v42[7];

  v10 = *((_DWORD *)a2 + 4);
  if ((v10 & 0x80000000) != 0)
  {
    v13 = *((_QWORD *)a1 + 53);
    v14 = v10 & 0x7FFFFFFF;
    if (v14 >= *(_DWORD *)(v13 + 44))
    {
      __break(0xC471u);
    }
    else
    {
      v15 = *(_QWORD *)(v13 + 32) + 16 * v14;
      if (!*(_DWORD *)(v15 + 12))
        return;
      v21 = v16;
      v22 = 0;
      while (1)
      {
        if (v22 >= *((unsigned int *)v21 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x197FCC9BCLL);
        }
        v23 = *(_DWORD *)(*(_QWORD *)v15 + 4 * v22);
        if (v23 >= 0x80000000)
          v23 = 0x80000000;
        v24 = v23 - 1;
        if (v24 >= 5)
          break;
        v25 = *(_DWORD *)(*v21 + 4 * v22);
        v26 = *a3;
        v27 = a3[1];
        v28 = aZzklq[v24];
        v36 = 0;
        v37 = 513;
        v38 = 1;
        v39 = v25;
        v40 = 0;
        v41 = 0;
        if (v22 >= *(unsigned int *)(v27 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x197FCC9C4);
        }
        if (v22 >= *(unsigned int *)(v15 + 12))
          return;
      }
      __break(0xC471u);
    }
    JUMPOUT(0x197FCC994);
  }
  v11 = *((_WORD *)a2 + 6) & 0xFFF;
  if (v11 == 3)
  {
    v12 = *((int *)a2 + 10);
LABEL_16:
    if ((unint64_t)(v12 + 4095) < 0x1FFF)
    {
      if (!v12)
      {
        v29 = 0;
        v30 = 20;
        goto LABEL_19;
      }
    }
    else if ((v12 & 0xFFF) != 0 || (unint64_t)v12 >> 24 && (unint64_t)((v12 >> 12) + 4095) >= 0x1000)
    {
      goto LABEL_18;
    }
    v29 = 0;
    memset(v35, 0, 7);
    v30 = 2;
    goto LABEL_19;
  }
  if (v11 == 4)
  {
    v12 = *((_QWORD *)a2 + 5);
    goto LABEL_16;
  }
LABEL_18:
  v12 = 0;
  v10 = *((_DWORD *)a2 + 4);
  v30 = 1;
LABEL_19:
  if (v10 >= 0x80000000)
    v10 = 0x80000000;
  v31 = v10 - 1;
  if (v10 - 1 >= 5)
  {
    __break(0xC471u);
    JUMPOUT(0x197FCC9B4);
  }
  v32 = *a3;
  v33 = (unsigned int **)a3[1];
  v34 = aZzklq[v31];
  v36 = v12;
  LOBYTE(v37) = v30;
  HIBYTE(v37) = 2;
  v38 = 1;
  v39 = v29;
  v40 = 0;
  v41 = 0;
  *(_DWORD *)v42 = v35[0];
  *(_DWORD *)&v42[3] = *(_DWORD *)((char *)v35 + 3);
  if (!*((_DWORD *)v33 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x197FCC9CCLL);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::forEachImmOrTmp<JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Air::Arg,JSC::B3::Type,unsigned int)#5}>(JSC::B3::_anonymous_namespace_::LowerToAir *a1, JSC::B3::Value *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int **v28;

  v10 = *((_DWORD *)a2 + 4);
  if ((v10 & 0x80000000) != 0)
  {
    v13 = *((_QWORD *)a1 + 53);
    v14 = v10 & 0x7FFFFFFF;
    if (v14 < *(_DWORD *)(v13 + 44))
    {
      v15 = *(_QWORD *)(v13 + 32) + 16 * v14;
      if (!*(_DWORD *)(v15 + 12))
        return;
      v21 = v16;
      v22 = 0;
      while (1)
      {
        if (v22 >= *((unsigned int *)v21 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x197FCCBBCLL);
        }
        v23 = *(_DWORD *)(*(_QWORD *)v15 + 4 * v22);
        if (v23 >= 0x80000000)
          v23 = 0x80000000;
        v24 = v23 - 1;
        if (v24 >= 5)
          break;
        v25 = a3[1];
        if (v22 >= *(unsigned int *)(v25 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x197FCCBC4);
        }
        if (++v22 >= *(unsigned int *)(v15 + 12))
          return;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x197FCCB94);
  }
  v11 = *((_WORD *)a2 + 6) & 0xFFF;
  if (v11 == 3)
  {
    v12 = *((int *)a2 + 10);
  }
  else
  {
    if (v11 != 4)
      goto LABEL_18;
    v12 = *((_QWORD *)a2 + 5);
  }
  if ((unint64_t)(v12 + 4095) < 0x1FFF)
  {
    v26 = 0;
    goto LABEL_19;
  }
  if ((v12 & 0xFFF) == 0)
  {
    v26 = 0;
    if (!((unint64_t)v12 >> 24) || (unint64_t)((v12 >> 12) + 4095) < 0x1000)
      goto LABEL_19;
  }
LABEL_18:
  v10 = *((_DWORD *)a2 + 4);
LABEL_19:
  if (v10 >= 0x80000000)
    v10 = 0x80000000;
  v27 = v10 - 1;
  if (v27 >= 5)
  {
    __break(0xC471u);
    JUMPOUT(0x197FCCBB4);
  }
  v28 = (unsigned int **)a3[1];
  if (!*((_DWORD *)v28 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x197FCCBCCLL);
  }
}

double WTF::Vector<JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::from<JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise>(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  *a1 = WTF::fastMalloc((WTF *)0x60);
  a1[1] = 0x200000002;
}

double JSC::B3::`anonymous namespace'::LowerToAir::loadPromise(JSC::B3::_anonymous_namespace_::LowerToAir *this, JSC::B3::Value *a2, JSC::B3::Value *a3)
{
  double result;

  if (*((_BYTE *)a3 + 12) == 67)
  *(_QWORD *)this = 0;
  *((_WORD *)this + 4) = 512;
  *((_DWORD *)this + 3) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_DWORD *)((char *)this + 39) = 0;
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise::kind(JSC::B3::_anonymous_namespace_::LowerToAir::ArgPromise *this)
{
  int v1;
  BOOL v2;

  v1 = *((unsigned __int8 *)this + 8);
  if (*(_QWORD *)this)
    v2 = 0;
  else
    v2 = v1 == 0;
  if (v2)
    LOBYTE(v1) = !*((_DWORD *)this + 4)
              && !*((_DWORD *)this + 5)
              && *((_DWORD *)this + 3) == 1
              && *((_QWORD *)this + 4) != 0;
  return (char)v1;
}

BOOL JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise::operator BOOL(uint64_t a1)
{
  return *(_QWORD *)a1
      || *(_BYTE *)(a1 + 8)
      || *(_DWORD *)(a1 + 16)
      || *(_DWORD *)(a1 + 20)
      || *(_DWORD *)(a1 + 12) != 1
      || *(_QWORD *)(a1 + 32) != 0;
}

unsigned __int8 *JSC::B3::Air::Arg::inverted@<X0>(unsigned __int8 *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    switch(this[8])
    {
      case 0xEu:
        v4 = *this ^ 1;
        *(_DWORD *)(a3 + 12) = 1;
        *(_QWORD *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 24) = 0;
        v5 = 526;
        goto LABEL_5;
      case 0xFu:
        v6 = *(_QWORD *)this;
        if (*(_QWORD *)this >= 6 || ((0x33u >> v6) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x197FCCE48);
        }
        v4 = qword_19914FA90[(int)v6];
        *(_DWORD *)(a3 + 12) = 1;
        *(_QWORD *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 24) = 0;
        v5 = 527;
        goto LABEL_5;
      case 0x10u:
        v7 = *(_QWORD *)this;
        if (*(_QWORD *)this >= 0xE || ((0x3FCFu >> v7) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x197FCCE68);
        }
        v4 = qword_19914FAD8[(int)v7];
        *(_DWORD *)(a3 + 12) = 1;
        *(_QWORD *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 24) = 0;
        v5 = 528;
LABEL_5:
        *(_WORD *)(a3 + 8) = v5;
        *(_QWORD *)a3 = v4;
        break;
      case 0x11u:
        if (*(_DWORD *)this)
        {
          if (*(_DWORD *)this != 1)
          {
            __break(0xC471u);
            JUMPOUT(0x197FCCE88);
          }
          v8 = 0;
        }
        else
        {
          v8 = 1;
        }
        *(_DWORD *)(a3 + 12) = 1;
        *(_QWORD *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 24) = 0;
        *(_WORD *)(a3 + 8) = 529;
        *(_QWORD *)a3 = v8;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FCCE08);
    }
  }
  else
  {
    v3 = *((_OWORD *)this + 1);
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_OWORD *)(a3 + 16) = v3;
  }
  return this;
}

__n128 JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise::consume(uint64_t a1, uint64_t a2, JSC::B3::_anonymous_namespace_::LowerToAir *this)
{
  unsigned int v4;
  __n128 result;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  JSC::B3::_anonymous_namespace_::LowerToAir *v11;
  JSC::B3::_anonymous_namespace_::LowerToAir *v12;
  uint64_t v13;
  unint64_t v14;

  *(_BYTE *)(a2 + 40) = 1;
  if (*(_QWORD *)a2
    || *(_BYTE *)(a2 + 8)
    || *(_DWORD *)(a2 + 16)
    || *(_DWORD *)(a2 + 20)
    || *(_DWORD *)(a2 + 12) != 1
    || !*(_QWORD *)(a2 + 32))
  {
    v6 = *(_QWORD *)(a2 + 32);
    if (v6)
    {
      v8 = *(unsigned int *)(v6 + 8);
      v9 = *(_QWORD *)this;
      if ((*(_QWORD *)this & 0x8000000000000000) != 0)
        v10 = 63;
      else
        v10 = *(_QWORD *)(2 * v9);
      if (v10 <= v8)
      {
        v13 = a2;
        v14 = v8;
        v12 = this;
        WTF::BitVector::resizeOutOfLine(this, v8 + 1, 0);
        a2 = v13;
        v8 = v14;
        this = v12;
        v9 = *(_QWORD *)v12;
      }
      if (v9 >= 0)
        v11 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(2 * v9 + 8);
      else
        v11 = this;
      *(_QWORD *)((char *)v11 + ((v8 >> 3) & 0x1FFFFFF8)) |= 1 << v8;
    }
    result = *(__n128 *)a2;
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_WORD *)(a1 + 8) = 513;
    *(_DWORD *)(a1 + 12) = 1;
    *(_QWORD *)(a1 + 16) = v4;
    *(_BYTE *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::appendVoidAtomic(JSC::B3::_anonymous_namespace_::LowerToAir *a1)
{
  unsigned int *v1;
  uint64_t v3;

  v1 = (unsigned int *)*((_QWORD *)a1 + 50);
  if (!*(_DWORD *)(*((_QWORD *)a1 + 10) + 8 * v1[2]))
  return 0;
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendTrapping<JSC::B3::Air::Tmp,JSC::B3::Air::Arg &,JSC::B3::Air::Tmp>(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  WTF *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  int v45;
  int v46;
  char v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  int v53;
  int v54;
  char v55;
  _BYTE v56[12];
  _OWORD v57[2];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v10 = *(_QWORD *)(a1 + 400);
    v11 = *(_WORD *)(v10 + 12);
    *(_OWORD *)((char *)v57 + 9) = *(_OWORD *)((char *)a4 + 9);
    v57[0] = *a4;
    v40 = (WTF *)&v42;
    v42 = 0;
    v43 = 513;
    v44 = 1;
    v45 = a3;
    v46 = 0;
    v47 = 0;
    v48 = v57[0];
    v49 = v57[1];
    v50 = 0;
    v51 = 513;
    v52 = 1;
    v53 = a5;
    v54 = 0;
    v55 = 0;
    v41 = 0x300000003;
    *(_QWORD *)v56 = v10;
    *(_DWORD *)&v56[8] = (_DWORD)a2;
    v56[10] = (v11 & 0x200) != 0;
    v12 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v12 == *(_DWORD *)(v9 + 8))
    {
      v26 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v12 + 1, (unint64_t)&v40, (uint64_t)a4, a5, a6, a7, a8);
      v27 = *(unsigned int *)(v9 + 12);
      v28 = *(_QWORD *)v9;
      v29 = *(_QWORD *)v9 + (v27 << 7);
      v30 = (_OWORD *)(v29 + 16);
      *(_QWORD *)v29 = v29 + 16;
      *(_QWORD *)(v29 + 8) = 3;
      v31 = *(__int128 **)v26;
      if (*(_QWORD *)v26 == v26 + 16)
      {
        v32 = *(unsigned int *)(v26 + 12);
        if ((_DWORD)v32)
        {
          v33 = 32 * v32;
          do
          {
            v34 = *v31;
            v35 = v31[1];
            v31 += 2;
            *v30 = v34;
            v30[1] = v35;
            v30 += 2;
            v33 -= 32;
          }
          while (v33);
        }
      }
      else
      {
        *(_QWORD *)v26 = v26 + 16;
        *(_QWORD *)v29 = v31;
        v39 = *(_DWORD *)(v26 + 8);
        *(_DWORD *)(v26 + 8) = 3;
        *(_DWORD *)(v29 + 8) = v39;
      }
      v36 = *(_DWORD *)(v26 + 12);
      *(_DWORD *)(v26 + 12) = 0;
      *(_DWORD *)(v29 + 12) = v36;
      v37 = v28 + (v27 << 7);
      v38 = *(_QWORD *)(v26 + 112);
      *(_DWORD *)(v37 + 119) = *(_DWORD *)(v26 + 119);
      *(_QWORD *)(v37 + 112) = v38;
    }
    else
    {
      v13 = *(_QWORD *)v9;
      v14 = *(_QWORD *)v9 + (v12 << 7);
      v15 = (_OWORD *)(v14 + 16);
      *(_QWORD *)v14 = v14 + 16;
      *(_QWORD *)(v14 + 8) = 3;
      v16 = v40;
      if (v40 == (WTF *)&v42)
      {
        if (HIDWORD(v41))
        {
          v17 = 32 * HIDWORD(v41);
          v18 = (__int128 *)&v42;
          do
          {
            v19 = *v18;
            v20 = v18[1];
            v18 += 2;
            *v15 = v19;
            v15[1] = v20;
            v15 += 2;
            v17 -= 32;
          }
          while (v17);
        }
      }
      else
      {
        v40 = (WTF *)&v42;
        *(_QWORD *)v14 = v16;
        v25 = v41;
        LODWORD(v41) = 3;
        *(_DWORD *)(v14 + 8) = v25;
      }
      v21 = HIDWORD(v41);
      HIDWORD(v41) = 0;
      *(_DWORD *)(v14 + 12) = v21;
      v22 = v13 + (v12 << 7);
      v23 = *(_QWORD *)v56;
      *(_DWORD *)(v22 + 119) = *(_DWORD *)&v56[7];
      *(_QWORD *)(v22 + 112) = v23;
    }
    ++*(_DWORD *)(v9 + 12);
    v24 = v40;
    if (&v42 != (uint64_t *)v40)
    {
      if (v40)
      {
        v40 = 0;
        LODWORD(v41) = 0;
        WTF::fastFree((unint64_t)v24, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::appendGeneralAtomic(uint64_t a1, void *a2, int a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  JSC::B3::Value **v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  __int16 v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  JSC::B3::Value **v73;
  void *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  __int128 v85;
  __int128 v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  __int128 v102;
  __int128 v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  JSC::B3::Value **v107;
  JSC::B3::Value **v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _OWORD *v115;
  __int128 *v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  JSC::B3::Value **v130;
  unsigned int v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _OWORD *v137;
  uint64_t v138;
  uint64_t v139;
  __int128 *v140;
  __int128 v141;
  __int128 v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _OWORD *v150;
  __int128 *v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  BOOL v167;
  int v168;
  __int16 v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t result;
  int v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  char v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _OWORD *v201;
  __int128 *v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _OWORD *v223;
  uint64_t v224;
  uint64_t v225;
  __int128 *v226;
  __int128 v227;
  __int128 v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _OWORD *v236;
  __int128 *v237;
  uint64_t v238;
  uint64_t v239;
  __int128 v240;
  __int128 v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  unint64_t v246;
  int v247;
  int v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  int v252;
  char v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _OWORD *v261;
  uint64_t v262;
  uint64_t v263;
  __int128 *v264;
  __int128 v265;
  __int128 v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _OWORD *v274;
  __int128 *v275;
  uint64_t v276;
  uint64_t v277;
  __int128 v278;
  __int128 v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  unint64_t v284;
  int v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  _OWORD v289[2];
  __int128 v290;
  _BYTE v291[25];
  __int128 v292;
  __int128 v293;
  uint64_t v294;
  __int16 v295;
  int v296;
  int v297;
  int v298;
  char v299;
  _BYTE v300[12];
  _BYTE v301[39];
  uint64_t v302;

  v302 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 **)(a1 + 400);
  if (v6[12] - 71 >= 8)
    v7 = 0;
  else
    v7 = *(_QWORD *)(a1 + 400);
  v8 = *(_QWORD *)(a1 + 432);
  v9 = *(_DWORD *)(v8 + 176);
  *(_DWORD *)(v8 + 176) = v9 + 1;
  if ((_DWORD)a2)
  {
    *(_DWORD *)(v8 + 176) = v9 + 2;
    v10 = (v9 + 34);
  }
  else
  {
    v11 = (JSC::B3::Value **)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v7, 0);
  }
  v12 = *(_DWORD *)(v7 + 16);
  if (v12 >= 0x80000000)
    v12 = 0x80000000;
  v13 = v12 - 1;
  if (v13 >= 5)
  {
    __break(0xC471u);
    JUMPOUT(0x197FCE480);
  }
  v14 = (v9 + 33);
  v15 = (void *)qword_19914FB48[v13];
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * **(unsigned int **)(a1 + 384));
  v22 = JSC::B3::GenericBlockInsertionSet<JSC::B3::Air::BasicBlock>::insert(a1 + 440, *(_DWORD *)v21 + 1, *(double *)(v21 + 104));
  v287 = 0;
  v288 = 0;
  v29 = v288;
  v30 = (uint64_t *)(v288 + 24);
  WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v288 + 24, 1uLL, v31, v32, v33, v34, v35, v36);
  if (!*(_DWORD *)(v29 + 36))
  {
    __break(0xC471u);
    JUMPOUT(0x197FCE4ACLL);
  }
  v43 = *v30;
  *(_QWORD *)v43 = v22;
  *(_BYTE *)(v43 + 8) = 0;
  v44 = *(unsigned __int8 *)(v7 + 60);
  if (*(_DWORD *)(v7 + 52) == *(_DWORD *)(v7 + 56))
  {
    if (!*(_BYTE *)(v7 + 60))
    {
      v45 = 250;
      goto LABEL_24;
    }
    if (v44 == 1)
    {
      v45 = 254;
      goto LABEL_24;
    }
    v46 = v44 == 2;
    v45 = 263;
    v47 = 258;
  }
  else
  {
    if (!*(_BYTE *)(v7 + 60))
    {
      v45 = 251;
      goto LABEL_24;
    }
    if (v44 == 1)
    {
      v45 = 255;
      goto LABEL_24;
    }
    v46 = v44 == 2;
    v45 = 264;
    v47 = 259;
  }
  if (v46)
    v45 = v47;
LABEL_24:
  v48 = *(_QWORD *)(a1 + 400);
  v49 = *(_WORD *)(v48 + 12);
  *(_OWORD *)v291 = v289[0];
  *(_OWORD *)&v291[9] = *(_OWORD *)((char *)v289 + 9);
  *(_QWORD *)&v290 = v291;
  *(_QWORD *)&v292 = 0;
  WORD4(v292) = 513;
  HIDWORD(v292) = 1;
  *(_QWORD *)&v293 = v14;
  BYTE8(v293) = 0;
  *((_QWORD *)&v290 + 1) = 0x200000003;
  *(_QWORD *)v300 = v48;
  *(_DWORD *)&v300[8] = v45;
  v300[10] = (v49 & 0x200) != 0;
  JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Inst>(v22, (unsigned int *)&v290, v37, v38, v39, v40, v41, v42);
  v57 = v290;
  if (v291 != (_BYTE *)v290 && (_QWORD)v290)
  {
    *(_QWORD *)&v290 = 0;
    DWORD2(v290) = 0;
    WTF::fastFree(v57, v50, v51, v52, v53, v54, v55, v56);
    if (!(_DWORD)a2)
      goto LABEL_108;
  }
  else if (!(_DWORD)a2)
  {
    goto LABEL_108;
  }
  if (!a3)
  {
    v69 = JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v7, 0);
    v70 = *(_QWORD *)v69;
    v71 = *(_WORD *)(*(_QWORD *)v69 + 12) & 0xFFF;
    if (*(_QWORD *)v69 && v71 == 3)
    {
      v72 = *(int *)(v70 + 40);
    }
    else
    {
      if (!v70 || v71 != 4)
        goto LABEL_28;
      v72 = *(_QWORD *)(v70 + 40);
    }
    if ((unint64_t)(v72 + 4095) >= 0x1FFF
      && ((v72 & 0xFFF) != 0 || (unint64_t)v72 >> 24 && (unint64_t)((v72 >> 12) + 4095) > 0xFFF))
    {
      goto LABEL_28;
    }
    if ((int)a2 <= 5)
    {
      if ((_DWORD)a2 != 1)
        goto LABEL_28;
    }
    else if ((_DWORD)a2 != 6 && ((_DWORD)a2 - 335) >= 0xE && ((_DWORD)a2 - 439) > 5)
    {
      goto LABEL_28;
    }
    v212 = JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v7, 0);
    v213 = *(_QWORD *)v212;
    v214 = *(_WORD *)(*(_QWORD *)v212 + 12) & 0xFFF;
    if (*(_QWORD *)v212 && v214 == 3)
    {
      v215 = *(int *)(v213 + 40);
    }
    else
    {
      if (!v213 || v214 != 4)
      {
LABEL_198:
        *(_QWORD *)&v290 = 0;
        WORD4(v290) = 512;
        HIDWORD(v290) = 1;
        *(_QWORD *)v291 = 0;
        v291[8] = 0;
        goto LABEL_210;
      }
      v215 = *(_QWORD *)(v213 + 40);
    }
    if ((unint64_t)(v215 + 4095) < 0x1FFF
      || (v215 & 0xFFF) == 0
      && (!((unint64_t)v215 >> 24) || v215 >> 12 == 0 || (unint64_t)(v215 >> 12) >= 0xFFFFFFFFFFFFF001))
    {
      HIDWORD(v290) = 1;
      *(_QWORD *)v291 = 0;
      v291[8] = 0;
      WORD4(v290) = 514;
      *(_QWORD *)&v290 = v215;
      goto LABEL_210;
    }
    goto LABEL_198;
  }
LABEL_28:
  v58 = JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v7, 0);
  v66 = *(_QWORD *)v58;
  v67 = *(_WORD *)(*(_QWORD *)v58 + 12) & 0xFFF;
  if (*(_QWORD *)v58 && v67 == 3)
  {
    v68 = *(int *)(v66 + 40);
  }
  else
  {
    if (!v66 || v67 != 4)
      goto LABEL_45;
    v68 = *(_QWORD *)(v66 + 40);
  }
  if ((unint64_t)(v68 + 4095) >= 0x1FFF
    && ((v68 & 0xFFF) != 0 || (unint64_t)v68 >> 24 && (unint64_t)((v68 >> 12) + 4095) > 0xFFF)
    || ((_DWORD)a2 - 9) > 0x38
    || ((1 << (a2 - 9)) & 0x1FE000000000003) == 0)
  {
LABEL_45:
    if (!a3)
    {
      v107 = (JSC::B3::Value **)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v7, 0);
      if (((_QWORD)v290 || BYTE8(v290) || *(_QWORD *)v291 || HIDWORD(v290) != 1)
        && ((_DWORD)a2 - 50) <= 0x14
        && ((1 << ((_BYTE)a2 - 50)) & 0x140001) != 0)
      {
        v108 = (JSC::B3::Value **)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v7, 0);
LABEL_210:
        JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v22, a2, *(_QWORD *)(a1 + 400), &v290, v14, v10, v109, v110);
        goto LABEL_108;
      }
    }
    switch((int)a2)
    {
      case 1:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 17:
      case 19:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 68:
      case 69:
      case 70:
      case 71:
        goto LABEL_47;
      case 2:
      case 3:
      case 4:
      case 5:
      case 13:
      case 14:
      case 15:
      case 16:
      case 18:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 56:
      case 57:
      case 66:
      case 67:
        goto LABEL_57;
      default:
        if (((_DWORD)a2 - 150) <= 0x37
          && ((1 << (a2 + 106)) & 0xF00000000000F3) != 0
          || ((_DWORD)a2 - 374) <= 0x3D
          && ((1 << (a2 - 118)) & 0x2800000000000001) != 0)
        {
LABEL_47:
          v73 = (JSC::B3::Value **)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v7, 0);
          v76 = *(_QWORD *)(a1 + 400);
          *(_QWORD *)&v290 = v291;
          v77 = (uint64_t *)(v22 + 8);
          *(_QWORD *)v291 = 0;
          *(_WORD *)&v291[8] = 513;
          *(_DWORD *)&v291[12] = 1;
          *(_QWORD *)&v291[16] = v14;
          v291[24] = 0;
          *(_QWORD *)&v292 = 0;
          WORD4(v292) = 513;
          HIDWORD(v292) = 1;
          *(_QWORD *)&v293 = v75;
          BYTE8(v293) = 0;
          v294 = 0;
          v295 = 513;
          v296 = 1;
          v297 = v10;
          v298 = 0;
          v299 = 0;
          *((_QWORD *)&v290 + 1) = 0x300000003;
          *(_QWORD *)v300 = v76;
          *(_DWORD *)&v300[8] = (unsigned __int16)a2;
          v78 = *(unsigned int *)(v22 + 20);
          if ((_DWORD)v78 == *(_DWORD *)(v22 + 16))
          {
            v197 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v77, v78 + 1, (unint64_t)&v290);
            v198 = *(unsigned int *)(v22 + 20);
            v199 = *(_QWORD *)(v22 + 8);
            v200 = v199 + (v198 << 7);
            v201 = (_OWORD *)(v200 + 16);
            *(_QWORD *)v200 = v200 + 16;
            *(_QWORD *)(v200 + 8) = 3;
            v202 = *(__int128 **)v197;
            if (*(_QWORD *)v197 == v197 + 16)
            {
              v203 = *(unsigned int *)(v197 + 12);
              if ((_DWORD)v203)
              {
                v204 = 32 * v203;
                do
                {
                  v205 = *v202;
                  v206 = v202[1];
                  v202 += 2;
                  *v201 = v205;
                  v201[1] = v206;
                  v201 += 2;
                  v204 -= 32;
                }
                while (v204);
              }
            }
            else
            {
              *(_QWORD *)v197 = v197 + 16;
              *(_QWORD *)v200 = v202;
              v247 = *(_DWORD *)(v197 + 8);
              *(_DWORD *)(v197 + 8) = 3;
              *(_DWORD *)(v200 + 8) = v247;
            }
            v207 = *(_DWORD *)(v197 + 12);
            *(_DWORD *)(v197 + 12) = 0;
            *(_DWORD *)(v200 + 12) = v207;
            v208 = v199 + (v198 << 7);
            v209 = *(_QWORD *)(v197 + 112);
            *(_DWORD *)(v208 + 119) = *(_DWORD *)(v197 + 119);
            *(_QWORD *)(v208 + 112) = v209;
          }
          else
          {
            v79 = *v77;
            v80 = *v77 + (v78 << 7);
            v81 = (_OWORD *)(v80 + 16);
            *(_QWORD *)v80 = v80 + 16;
            *(_QWORD *)(v80 + 8) = 3;
            v82 = v290;
            if ((_BYTE *)v290 == v291)
            {
              if (HIDWORD(v290))
              {
                v83 = 32 * HIDWORD(v290);
                v84 = (__int128 *)v291;
                do
                {
                  v85 = *v84;
                  v86 = v84[1];
                  v84 += 2;
                  *v81 = v85;
                  v81[1] = v86;
                  v81 += 2;
                  v83 -= 32;
                }
                while (v83);
              }
            }
            else
            {
              *(_QWORD *)&v290 = v291;
              *(_QWORD *)v80 = v82;
              v218 = DWORD2(v290);
              DWORD2(v290) = 3;
              *(_DWORD *)(v80 + 8) = v218;
            }
            v87 = HIDWORD(v290);
            HIDWORD(v290) = 0;
            *(_DWORD *)(v80 + 12) = v87;
            v88 = v79 + (v78 << 7);
            v89 = *(_QWORD *)v300;
            *(_DWORD *)(v88 + 119) = *(_DWORD *)&v300[7];
            *(_QWORD *)(v88 + 112) = v89;
          }
          v210 = *(_DWORD *)(v22 + 20) + 1;
          *(_DWORD *)(v22 + 20) = v210;
          v211 = v290;
          if (v291 != (_BYTE *)v290 && (_QWORD)v290)
          {
            *(_QWORD *)&v290 = 0;
            DWORD2(v290) = 0;
            WTF::fastFree(v211, v74, v51, v52, v53, v54, v55, v56);
            if (*(_DWORD *)(v22 + 20))
              goto LABEL_108;
          }
          else if (v210)
          {
            goto LABEL_108;
          }
          __break(0xC471u);
          JUMPOUT(0x197FCDE1CLL);
        }
LABEL_57:
        v90 = *(_DWORD *)(v7 + 16);
        if (v90 >= 0x80000000)
          v90 = 0x80000000;
        v91 = v90 - 1;
        if (v91 >= 5)
        {
          __break(0xC471u);
          JUMPOUT(0x197FCE4A4);
        }
        v92 = dword_19914FB70[v91];
        v93 = *(_QWORD *)(a1 + 400);
        *(_QWORD *)&v290 = v291;
        v94 = (uint64_t *)(v22 + 8);
        *(_QWORD *)v291 = 0;
        *(_WORD *)&v291[8] = 513;
        *(_DWORD *)&v291[12] = 1;
        *(_QWORD *)&v291[16] = v14;
        v291[24] = 0;
        *(_QWORD *)&v292 = 0;
        WORD4(v292) = 513;
        HIDWORD(v292) = 1;
        *(_QWORD *)&v293 = v10;
        BYTE8(v293) = 0;
        *((_QWORD *)&v290 + 1) = 0x200000003;
        *(_QWORD *)v300 = v93;
        *(_DWORD *)&v300[8] = v92;
        v95 = *(unsigned int *)(v22 + 20);
        if ((_DWORD)v95 == *(_DWORD *)(v22 + 16))
        {
          v111 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22 + 8, v95 + 1, (unint64_t)&v290);
          v112 = *(unsigned int *)(v22 + 20);
          v113 = *(_QWORD *)(v22 + 8);
          v114 = v113 + (v112 << 7);
          v115 = (_OWORD *)(v114 + 16);
          *(_QWORD *)v114 = v114 + 16;
          *(_QWORD *)(v114 + 8) = 3;
          v116 = *(__int128 **)v111;
          if (*(_QWORD *)v111 == v111 + 16)
          {
            v117 = *(unsigned int *)(v111 + 12);
            if ((_DWORD)v117)
            {
              v118 = 32 * v117;
              do
              {
                v119 = *v116;
                v120 = v116[1];
                v116 += 2;
                *v115 = v119;
                v115[1] = v120;
                v115 += 2;
                v118 -= 32;
              }
              while (v118);
            }
          }
          else
          {
            *(_QWORD *)v111 = v111 + 16;
            *(_QWORD *)v114 = v116;
            v216 = *(_DWORD *)(v111 + 8);
            *(_DWORD *)(v111 + 8) = 3;
            *(_DWORD *)(v114 + 8) = v216;
          }
          v121 = *(_DWORD *)(v111 + 12);
          *(_DWORD *)(v111 + 12) = 0;
          *(_DWORD *)(v114 + 12) = v121;
          v122 = v113 + (v112 << 7);
          v123 = *(_QWORD *)(v111 + 112);
          *(_DWORD *)(v122 + 119) = *(_DWORD *)(v111 + 119);
          *(_QWORD *)(v122 + 112) = v123;
        }
        else
        {
          v96 = *v94;
          v97 = *v94 + (v95 << 7);
          v98 = (_OWORD *)(v97 + 16);
          *(_QWORD *)v97 = v97 + 16;
          *(_QWORD *)(v97 + 8) = 3;
          v99 = v290;
          if ((_BYTE *)v290 == v291)
          {
            if (HIDWORD(v290))
            {
              v100 = 32 * HIDWORD(v290);
              v101 = (__int128 *)v291;
              do
              {
                v102 = *v101;
                v103 = v101[1];
                v101 += 2;
                *v98 = v102;
                v98[1] = v103;
                v98 += 2;
                v100 -= 32;
              }
              while (v100);
            }
          }
          else
          {
            *(_QWORD *)&v290 = v291;
            *(_QWORD *)v97 = v99;
            v189 = DWORD2(v290);
            DWORD2(v290) = 3;
            *(_DWORD *)(v97 + 8) = v189;
          }
          v104 = HIDWORD(v290);
          HIDWORD(v290) = 0;
          *(_DWORD *)(v97 + 12) = v104;
          v105 = v96 + (v95 << 7);
          v106 = *(_QWORD *)v300;
          *(_DWORD *)(v105 + 119) = *(_DWORD *)&v300[7];
          *(_QWORD *)(v105 + 112) = v106;
        }
        v124 = *(_DWORD *)(v22 + 20) + 1;
        *(_DWORD *)(v22 + 20) = v124;
        v125 = v290;
        if (v291 != (_BYTE *)v290 && (_QWORD)v290)
        {
          *(_QWORD *)&v290 = 0;
          DWORD2(v290) = 0;
          WTF::fastFree(v125, v59, v60, v61, v62, v63, v64, v65);
          if (*(_DWORD *)(v22 + 20))
            goto LABEL_81;
        }
        else if (v124)
        {
LABEL_81:
          v126 = JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v7, 0);
          v127 = *(_QWORD *)v126;
          v128 = *(_WORD *)(*(_QWORD *)v126 + 12) & 0xFFF;
          if (*(_QWORD *)v126 && v128 == 3)
          {
            v129 = *(int *)(v127 + 40);
          }
          else
          {
            if (!v127 || v128 != 4)
              goto LABEL_94;
            v129 = *(_QWORD *)(v127 + 40);
          }
          if ((unint64_t)(v129 + 4095) >= 0x1FFF
            && ((v129 & 0xFFF) != 0 || (unint64_t)v129 >> 24 && (unint64_t)((v129 >> 12) + 4095) > 0xFFF)
            || (_DWORD)a2 != 90 && (a2 > 0xA || ((1 << (char)a2) & 0x642) == 0))
          {
LABEL_94:
            v130 = (JSC::B3::Value **)JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v7, 0);
            v133 = *(_QWORD *)(a1 + 400);
            *(_QWORD *)&v290 = v291;
            *(_QWORD *)v291 = 0;
            *(_WORD *)&v291[8] = 513;
            *(_DWORD *)&v291[12] = 1;
            *(_QWORD *)&v291[16] = v131;
            v291[24] = 0;
            *(_QWORD *)&v292 = 0;
            WORD4(v292) = 513;
            HIDWORD(v292) = 1;
            *(_QWORD *)&v293 = v10;
            BYTE8(v293) = 0;
            *((_QWORD *)&v290 + 1) = 0x200000003;
            *(_QWORD *)v300 = v133;
            *(_DWORD *)&v300[8] = (unsigned __int16)a2;
            v134 = *(unsigned int *)(v22 + 20);
            if ((_DWORD)v134 == *(_DWORD *)(v22 + 16))
            {
              v146 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22 + 8, v134 + 1, (unint64_t)&v290);
              v147 = *(unsigned int *)(v22 + 20);
              v148 = *(_QWORD *)(v22 + 8);
              v149 = v148 + (v147 << 7);
              v150 = (_OWORD *)(v149 + 16);
              *(_QWORD *)v149 = v149 + 16;
              *(_QWORD *)(v149 + 8) = 3;
              v151 = *(__int128 **)v146;
              if (*(_QWORD *)v146 == v146 + 16)
              {
                v152 = *(unsigned int *)(v146 + 12);
                if ((_DWORD)v152)
                {
                  v153 = 32 * v152;
                  do
                  {
                    v154 = *v151;
                    v155 = v151[1];
                    v151 += 2;
                    *v150 = v154;
                    v150[1] = v155;
                    v150 += 2;
                    v153 -= 32;
                  }
                  while (v153);
                }
              }
              else
              {
                *(_QWORD *)v146 = v146 + 16;
                *(_QWORD *)v149 = v151;
                v217 = *(_DWORD *)(v146 + 8);
                *(_DWORD *)(v146 + 8) = 3;
                *(_DWORD *)(v149 + 8) = v217;
              }
              v156 = *(_DWORD *)(v146 + 12);
              *(_DWORD *)(v146 + 12) = 0;
              *(_DWORD *)(v149 + 12) = v156;
              v157 = v148 + (v147 << 7);
              v158 = *(_QWORD *)(v146 + 112);
              *(_DWORD *)(v157 + 119) = *(_DWORD *)(v146 + 119);
              *(_QWORD *)(v157 + 112) = v158;
            }
            else
            {
              v135 = *v94;
              v136 = *v94 + (v134 << 7);
              v137 = (_OWORD *)(v136 + 16);
              *(_QWORD *)v136 = v136 + 16;
              *(_QWORD *)(v136 + 8) = 3;
              v138 = v290;
              if ((_BYTE *)v290 == v291)
              {
                if (HIDWORD(v290))
                {
                  v139 = 32 * HIDWORD(v290);
                  v140 = (__int128 *)v291;
                  do
                  {
                    v141 = *v140;
                    v142 = v140[1];
                    v140 += 2;
                    *v137 = v141;
                    v137[1] = v142;
                    v137 += 2;
                    v139 -= 32;
                  }
                  while (v139);
                }
              }
              else
              {
                *(_QWORD *)&v290 = v291;
                *(_QWORD *)v136 = v138;
                v190 = DWORD2(v290);
                DWORD2(v290) = 3;
                *(_DWORD *)(v136 + 8) = v190;
              }
              v143 = HIDWORD(v290);
              HIDWORD(v290) = 0;
              *(_DWORD *)(v136 + 12) = v143;
              v144 = v135 + (v134 << 7);
              v145 = *(_QWORD *)v300;
              *(_DWORD *)(v144 + 119) = *(_DWORD *)&v300[7];
              *(_QWORD *)(v144 + 112) = v145;
            }
            v159 = *(_DWORD *)(v22 + 20) + 1;
            *(_DWORD *)(v22 + 20) = v159;
            v160 = v290;
            if (v291 != (_BYTE *)v290 && (_QWORD)v290)
            {
              *(_QWORD *)&v290 = 0;
              DWORD2(v290) = 0;
              WTF::fastFree(v160, v132, v51, v52, v53, v54, v55, v56);
              if (*(_DWORD *)(v22 + 20))
                goto LABEL_108;
            }
            else if (v159)
            {
              goto LABEL_108;
            }
            __break(0xC471u);
            JUMPOUT(0x197FCDEF0);
          }
          v191 = JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v7, 0);
          v193 = *(_QWORD *)v191;
          v194 = *(_WORD *)(*(_QWORD *)v191 + 12) & 0xFFF;
          if (*(_QWORD *)v191 && v194 == 3)
          {
            v195 = *(int *)(v193 + 40);
          }
          else
          {
            v195 = 0;
            v196 = 0;
            if (!v193 || v194 != 4)
              goto LABEL_173;
            v195 = *(_QWORD *)(v193 + 40);
          }
          if ((unint64_t)(v195 + 4095) < 0x1FFF)
          {
            v196 = 2;
          }
          else if ((v195 & 0xFFF) != 0
                 || (v196 = 2, (unint64_t)v195 >> 24) && (unint64_t)((v195 >> 12) + 4095) >= 0x1000)
          {
            v196 = 0;
            v195 = 0;
          }
LABEL_173:
          v301[8] = 0;
          *(_QWORD *)v301 = 0;
          v219 = *(_QWORD *)(a1 + 400);
          *(_QWORD *)v291 = v195;
          v291[8] = v196;
          v291[9] = 2;
          *(_DWORD *)&v291[12] = 1;
          *(_QWORD *)&v291[16] = 0;
          v291[24] = 0;
          *(_QWORD *)&v290 = v291;
          *(_QWORD *)&v292 = 0;
          WORD4(v292) = 513;
          HIDWORD(v292) = 1;
          *(_QWORD *)&v293 = v10;
          BYTE8(v293) = 0;
          *((_QWORD *)&v290 + 1) = 0x200000003;
          *(_QWORD *)v300 = v219;
          *(_DWORD *)&v300[8] = (unsigned __int16)a2;
          v220 = *(unsigned int *)(v22 + 20);
          if ((_DWORD)v220 == *(_DWORD *)(v22 + 16))
          {
            v232 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22 + 8, v220 + 1, (unint64_t)&v290);
            v233 = *(unsigned int *)(v22 + 20);
            v234 = *(_QWORD *)(v22 + 8);
            v235 = v234 + (v233 << 7);
            v236 = (_OWORD *)(v235 + 16);
            *(_QWORD *)v235 = v235 + 16;
            *(_QWORD *)(v235 + 8) = 3;
            v237 = *(__int128 **)v232;
            if (*(_QWORD *)v232 == v232 + 16)
            {
              v238 = *(unsigned int *)(v232 + 12);
              if ((_DWORD)v238)
              {
                v239 = 32 * v238;
                do
                {
                  v240 = *v237;
                  v241 = v237[1];
                  v237 += 2;
                  *v236 = v240;
                  v236[1] = v241;
                  v236 += 2;
                  v239 -= 32;
                }
                while (v239);
              }
            }
            else
            {
              *(_QWORD *)v232 = v232 + 16;
              *(_QWORD *)v235 = v237;
              v255 = *(_DWORD *)(v232 + 8);
              *(_DWORD *)(v232 + 8) = 3;
              *(_DWORD *)(v235 + 8) = v255;
            }
            v242 = *(_DWORD *)(v232 + 12);
            *(_DWORD *)(v232 + 12) = 0;
            *(_DWORD *)(v235 + 12) = v242;
            v243 = v234 + (v233 << 7);
            v244 = *(_QWORD *)(v232 + 112);
            *(_DWORD *)(v243 + 119) = *(_DWORD *)(v232 + 119);
            *(_QWORD *)(v243 + 112) = v244;
          }
          else
          {
            v221 = *v94;
            v222 = *v94 + (v220 << 7);
            v223 = (_OWORD *)(v222 + 16);
            *(_QWORD *)v222 = v222 + 16;
            *(_QWORD *)(v222 + 8) = 3;
            v224 = v290;
            if ((_BYTE *)v290 == v291)
            {
              if (HIDWORD(v290))
              {
                v225 = 32 * HIDWORD(v290);
                v226 = (__int128 *)v291;
                do
                {
                  v227 = *v226;
                  v228 = v226[1];
                  v226 += 2;
                  *v223 = v227;
                  v223[1] = v228;
                  v223 += 2;
                  v225 -= 32;
                }
                while (v225);
              }
            }
            else
            {
              *(_QWORD *)&v290 = v291;
              *(_QWORD *)v222 = v224;
              v248 = DWORD2(v290);
              DWORD2(v290) = 3;
              *(_DWORD *)(v222 + 8) = v248;
            }
            v229 = HIDWORD(v290);
            HIDWORD(v290) = 0;
            *(_DWORD *)(v222 + 12) = v229;
            v230 = v221 + (v220 << 7);
            v231 = *(_QWORD *)v300;
            *(_DWORD *)(v230 + 119) = *(_DWORD *)&v300[7];
            *(_QWORD *)(v230 + 112) = v231;
          }
          v245 = *(_DWORD *)(v22 + 20) + 1;
          *(_DWORD *)(v22 + 20) = v245;
          v246 = v290;
          if (v291 != (_BYTE *)v290 && (_QWORD)v290)
          {
            *(_QWORD *)&v290 = 0;
            DWORD2(v290) = 0;
            WTF::fastFree(v246, v192, v51, v52, v53, v54, v55, v56);
            if (*(_DWORD *)(v22 + 20))
              goto LABEL_108;
          }
          else if (v245)
          {
            goto LABEL_108;
          }
          __break(0xC471u);
          JUMPOUT(0x197FCE0B8);
        }
        __break(0xC471u);
        JUMPOUT(0x197FCDED4);
    }
  }
  v249 = JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v7, 0);
  v251 = *(_QWORD *)v249;
  v252 = *(_WORD *)(*(_QWORD *)v249 + 12) & 0xFFF;
  if (*(_QWORD *)v249 && v252 == 3)
  {
    v254 = *(int *)(v251 + 40);
  }
  else
  {
    v253 = 0;
    v254 = 0;
    if (!v251 || v252 != 4)
      goto LABEL_216;
    v254 = *(_QWORD *)(v251 + 40);
  }
  if ((unint64_t)(v254 + 4095) < 0x1FFF)
  {
    v253 = 2;
  }
  else if ((v254 & 0xFFF) != 0
         || (v253 = 2, (unint64_t)v254 >> 24) && (unint64_t)((v254 >> 12) + 4095) >= 0x1000)
  {
    v254 = 0;
    v253 = 0;
  }
LABEL_216:
  v301[8] = 0;
  *(_QWORD *)v301 = 0;
  v256 = *(_QWORD *)(a1 + 400);
  v257 = (uint64_t *)(v22 + 8);
  *(_QWORD *)&v293 = 0;
  BYTE8(v293) = 0;
  *(_QWORD *)&v290 = v291;
  *(_QWORD *)v291 = 0;
  *(_WORD *)&v291[8] = 513;
  *(_DWORD *)&v291[12] = 1;
  *(_QWORD *)&v291[16] = v14;
  v291[24] = 0;
  *(_QWORD *)&v292 = v254;
  BYTE8(v292) = v253;
  BYTE9(v292) = 2;
  HIDWORD(v292) = 1;
  v294 = 0;
  v295 = 513;
  v296 = 1;
  v297 = v10;
  v298 = 0;
  v299 = 0;
  *((_QWORD *)&v290 + 1) = 0x300000003;
  *(_QWORD *)v300 = v256;
  *(_DWORD *)&v300[8] = (unsigned __int16)a2;
  v258 = *(unsigned int *)(v22 + 20);
  if ((_DWORD)v258 == *(_DWORD *)(v22 + 16))
  {
    v270 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v257, v258 + 1, (unint64_t)&v290);
    v271 = *(unsigned int *)(v22 + 20);
    v272 = *(_QWORD *)(v22 + 8);
    v273 = v272 + (v271 << 7);
    v274 = (_OWORD *)(v273 + 16);
    *(_QWORD *)v273 = v273 + 16;
    *(_QWORD *)(v273 + 8) = 3;
    v275 = *(__int128 **)v270;
    if (*(_QWORD *)v270 == v270 + 16)
    {
      v276 = *(unsigned int *)(v270 + 12);
      if ((_DWORD)v276)
      {
        v277 = 32 * v276;
        do
        {
          v278 = *v275;
          v279 = v275[1];
          v275 += 2;
          *v274 = v278;
          v274[1] = v279;
          v274 += 2;
          v277 -= 32;
        }
        while (v277);
      }
    }
    else
    {
      *(_QWORD *)v270 = v270 + 16;
      *(_QWORD *)v273 = v275;
      v286 = *(_DWORD *)(v270 + 8);
      *(_DWORD *)(v270 + 8) = 3;
      *(_DWORD *)(v273 + 8) = v286;
    }
    v280 = *(_DWORD *)(v270 + 12);
    *(_DWORD *)(v270 + 12) = 0;
    *(_DWORD *)(v273 + 12) = v280;
    v281 = v272 + (v271 << 7);
    v282 = *(_QWORD *)(v270 + 112);
    *(_DWORD *)(v281 + 119) = *(_DWORD *)(v270 + 119);
    *(_QWORD *)(v281 + 112) = v282;
  }
  else
  {
    v259 = *v257;
    v260 = *v257 + (v258 << 7);
    v261 = (_OWORD *)(v260 + 16);
    *(_QWORD *)v260 = v260 + 16;
    *(_QWORD *)(v260 + 8) = 3;
    v262 = v290;
    if ((_BYTE *)v290 == v291)
    {
      if (HIDWORD(v290))
      {
        v263 = 32 * HIDWORD(v290);
        v264 = (__int128 *)v291;
        do
        {
          v265 = *v264;
          v266 = v264[1];
          v264 += 2;
          *v261 = v265;
          v261[1] = v266;
          v261 += 2;
          v263 -= 32;
        }
        while (v263);
      }
    }
    else
    {
      *(_QWORD *)&v290 = v291;
      *(_QWORD *)v260 = v262;
      v285 = DWORD2(v290);
      DWORD2(v290) = 3;
      *(_DWORD *)(v260 + 8) = v285;
    }
    v267 = HIDWORD(v290);
    HIDWORD(v290) = 0;
    *(_DWORD *)(v260 + 12) = v267;
    v268 = v259 + (v258 << 7);
    v269 = *(_QWORD *)v300;
    *(_DWORD *)(v268 + 119) = *(_DWORD *)&v300[7];
    *(_QWORD *)(v268 + 112) = v269;
  }
  v283 = *(_DWORD *)(v22 + 20) + 1;
  *(_DWORD *)(v22 + 20) = v283;
  v284 = v290;
  if (v291 != (_BYTE *)v290 && (_QWORD)v290)
  {
    *(_QWORD *)&v290 = 0;
    DWORD2(v290) = 0;
    WTF::fastFree(v284, v250, v51, v52, v53, v54, v55, v56);
    if (!*(_DWORD *)(v22 + 20))
      goto LABEL_230;
  }
  else if (!v283)
  {
LABEL_230:
    __break(0xC471u);
    JUMPOUT(0x197FCE3F0);
  }
LABEL_108:
  v161 = *(_QWORD *)(a1 + 432);
  v162 = *(_DWORD *)(v161 + 176);
  *(_DWORD *)(v161 + 176) = v162 + 1;
  v163 = (v162 + 33);
  v164 = *(_QWORD *)(a1 + 400);
  v165 = *(unsigned __int8 *)(v7 + 60);
  if (*(_DWORD *)(v7 + 52) == *(_DWORD *)(v7 + 56))
  {
    if (!*(_BYTE *)(v7 + 60))
    {
      v166 = 252;
      goto LABEL_121;
    }
    if (v165 == 1)
    {
      v166 = 256;
      goto LABEL_121;
    }
    v167 = v165 == 2;
    v166 = 266;
    v168 = 260;
  }
  else
  {
    if (!*(_BYTE *)(v7 + 60))
    {
      v166 = 253;
      goto LABEL_121;
    }
    if (v165 == 1)
    {
      v166 = 257;
      goto LABEL_121;
    }
    v167 = v165 == 2;
    v166 = 267;
    v168 = 261;
  }
  if (v167)
    v166 = v168;
LABEL_121:
  v169 = *(_WORD *)(v164 + 12);
  *(_OWORD *)&v301[16] = *(_OWORD *)((char *)v289 + 9);
  *(_OWORD *)&v301[7] = v289[0];
  *(_QWORD *)&v290 = v291;
  *(_QWORD *)v291 = 0;
  *(_WORD *)&v291[8] = 513;
  *(_DWORD *)&v291[12] = 1;
  *(_QWORD *)&v291[16] = v10;
  v291[24] = 0;
  v292 = v289[0];
  v293 = *(_OWORD *)&v301[23];
  v294 = 0;
  v295 = 513;
  v296 = 1;
  v297 = v163;
  v298 = 0;
  v299 = 0;
  *((_QWORD *)&v290 + 1) = 0x300000003;
  *(_QWORD *)v300 = v164;
  *(_DWORD *)&v300[8] = v166;
  v300[10] = (v169 & 0x200) != 0;
  JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Inst>(v22, (unsigned int *)&v290, v51, v52, v53, v54, v55, v56);
  v177 = v290;
  if (v291 != (_BYTE *)v290 && (_QWORD)v290)
  {
    *(_QWORD *)&v290 = 0;
    DWORD2(v290) = 0;
    WTF::fastFree(v177, v170, v171, v172, v173, v174, v175, v176);
  }
  HIDWORD(v290) = 1;
  *(_QWORD *)v291 = 0;
  v291[8] = 0;
  WORD4(v290) = 527;
  *(_QWORD *)&v290 = 0;
  JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(v22, (void *)0x126, *(_QWORD *)(a1 + 400), &v290, v163, v163, v175, v176);
  v178 = v287;
  result = WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(v22 + 24, 2uLL, v179, v180, v181, v182, v183, v184);
  v186 = *(_DWORD *)(v22 + 36);
  if (!v186)
  {
    __break(0xC471u);
    JUMPOUT(0x197FCE4B4);
  }
  v187 = *(_QWORD *)(v22 + 24);
  *(_QWORD *)v187 = v178;
  *(_BYTE *)(v187 + 8) = 0;
  if (v186 == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197FCE4BCLL);
  }
  v188 = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v188 + 16) = v22;
  *(_BYTE *)(v188 + 24) = 0;
  return result;
}

uint64_t WTF::dataLog<char [24],JSC::B3::DeepValueDump,char [2]>(const JSC::B3::Procedure **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  JSC::B3::Value *v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "FATAL: could not lower ");
  v5 = a1[1];
  if (v5)
  {
    JSC::B3::Value::deepDump(v5, *a1, v4);
  }
  else
  {
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v6, "%s", "<null>");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  }
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Arg &,JSC::B3::Air::Tmp>(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  WTF *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  _BYTE v27[25];
  uint64_t v28;
  __int16 v29;
  int v30;
  int v31;
  int v32;
  char v33;
  _BYTE v34[12];

  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v10 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v11 = *(_QWORD *)(a1 + 400);
    *(_OWORD *)v27 = *a3;
    *(_OWORD *)&v27[9] = *(_OWORD *)((char *)a3 + 9);
    v25 = (WTF *)v27;
    v28 = 0;
    v29 = 513;
    v30 = 1;
    v31 = a4;
    v32 = 0;
    v33 = 0;
    v26 = 0x200000003;
    *(_QWORD *)v34 = v11;
    *(_DWORD *)&v34[8] = (_DWORD)a2;
    v12 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v12 == *(_DWORD *)(v10 + 8))
    {
      WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v10, (unint64_t)&v25, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v13 = *(_QWORD *)v10;
      v14 = *(_QWORD *)v10 + (v12 << 7);
      v15 = (_OWORD *)(v14 + 16);
      *(_QWORD *)v14 = v14 + 16;
      *(_QWORD *)(v14 + 8) = 3;
      v16 = v25;
      if (v25 == (WTF *)v27)
      {
        if (HIDWORD(v26))
        {
          v17 = 32 * HIDWORD(v26);
          v18 = (__int128 *)v27;
          do
          {
            v19 = *v18;
            v20 = v18[1];
            v18 += 2;
            *v15 = v19;
            v15[1] = v20;
            v15 += 2;
            v17 -= 32;
          }
          while (v17);
        }
      }
      else
      {
        v25 = (WTF *)v27;
        *(_QWORD *)v14 = v16;
        *(_DWORD *)(v14 + 8) = v26;
      }
      v21 = HIDWORD(v26);
      HIDWORD(v26) = 0;
      *(_DWORD *)(v14 + 12) = v21;
      v22 = v13 + (v12 << 7);
      v23 = *(_QWORD *)v34;
      *(_DWORD *)(v22 + 119) = *(_DWORD *)&v34[7];
      *(_QWORD *)(v22 + 112) = v23;
      ++*(_DWORD *)(v10 + 12);
    }
    v24 = v25;
    if (v27 != (_BYTE *)v25)
    {
      if (v25)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        WTF::fastFree((unint64_t)v24, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::B3::Air::Arg::isValidForm(unsigned int *a1, uint64_t a2, __int16 a3)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL4 v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  int v17;

  v4 = *((char *)a1 + 8);
  v5 = *((unsigned __int8 *)a1 + 8);
  if (v4 == 7)
  {
LABEL_2:
    if (v5 == 9)
      v6 = a1[3];
    else
      v6 = *a1;
    result = 1;
    if ((a3 & 0xFF00) != 0 && v6 + 256 >= 0x200)
    {
      switch((char)a3)
      {
        case 0:
          v14 = v6 >= 0x1000;
          goto LABEL_27;
        case 1:
          v8 = 8190;
          v9 = (v6 & 1) == 0;
          break;
        case 2:
          v8 = 16380;
          v9 = (v6 & 3) == 0;
          break;
        case 3:
          v8 = 32760;
          v9 = (v6 & 7) == 0;
          break;
        case 4:
          v8 = 65520;
          v9 = (v6 & 0xF) == 0;
          break;
        default:
          goto LABEL_37;
      }
      v10 = v9;
      if (v6 <= v8)
        return v10;
      else
        return 0;
    }
  }
  else
  {
    result = 0;
    switch(v4)
    {
      case 1:
      case 3:
      case 6:
      case 8:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
        goto LABEL_46;
      case 2:
        v16 = *(_QWORD *)a1;
        if ((unint64_t)(v16 + 4095) < 0x1FFF)
          goto LABEL_46;
        if ((v16 & 0xFFF) != 0)
        {
LABEL_37:
          result = 0;
        }
        else if ((unint64_t)v16 >> 24)
        {
          v14 = (unint64_t)((v16 >> 12) + 4095) >= 0x1000;
LABEL_27:
          result = !v14;
        }
        else
        {
LABEL_46:
          result = 1;
        }
        break;
      case 4:
        v17 = JSC::ARM64LogicalImmediate::create32((JSC::ARM64LogicalImmediate *)*a1);
        return v17 != -1;
      case 5:
        v17 = JSC::ARM64LogicalImmediate::create64(*(_QWORD *)a1);
        return v17 != -1;
      case 9:
      case 10:
        goto LABEL_2;
      case 11:
        v11 = a1[3];
        v12 = v11;
        if (v5 != 9)
          v12 = *a1;
        v13 = 1;
        switch(v11)
        {
          case 1u:
            break;
          case 2u:
          case 4u:
          case 8u:
            if ((a3 & 0xFF00) != 0)
            {
              if (a3 >= 5u)
              {
                __break(0xC471u);
                JUMPOUT(0x197FCEA4CLL);
              }
              v13 = dword_19914FAC0[(char)a3] == v11;
            }
            break;
          default:
            v13 = 0;
            break;
        }
        return !v12 && v13;
      case 12:
      case 13:
        if (v5 == 9)
          v15 = a1[3];
        else
          v15 = *a1;
        v14 = v15 + 256 >= 0x200;
        goto LABEL_27;
      default:
        return result;
    }
  }
  return result;
}

uint64_t *JSC::B3::`anonymous namespace'::LowerToAir::effectiveAddr<int,JSC::B3::Value::IsLegalOffset<int>>(JSC::B3::Value*,int,JSC::Width)::{lambda(JSC::B3::Value*,JSC::B3::Value*)#1}::operator()(uint64_t *result, int **a2, JSC::B3::Value *this, unsigned int *a4)
{
  uint64_t v7;
  JSC::B3::_anonymous_namespace_::LowerToAir *v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  JSC::B3::_anonymous_namespace_::LowerToAir *v23;
  JSC::B3::_anonymous_namespace_::LowerToAir *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  JSC::B3::_anonymous_namespace_::LowerToAir *v28;
  JSC::B3::_anonymous_namespace_::LowerToAir *v29;
  int v30;
  JSC::B3::Value *v31;

  v7 = (uint64_t)result;
  v8 = (JSC::B3::_anonymous_namespace_::LowerToAir *)a2[2];
  if (*((_BYTE *)this + 12) != 25)
    goto LABEL_2;
  v11 = **a2;
  v12 = *(char *)a2[1];
  result = (uint64_t *)JSC::B3::Value::child(this, 1u);
  if (!*result || (*(_WORD *)(*result + 12) & 0xFFF) != 3)
    goto LABEL_2;
  result = (uint64_t *)JSC::B3::Value::child(this, 1u);
  v14 = *result;
  if ((*(_WORD *)(*result + 12) & 0xFFF) != 3)
    v14 = 0;
  v15 = *(_DWORD *)(v14 + 40);
  v16 = *((_DWORD *)this + 4) == 1 ? 31 : 63;
  v17 = v16 & v15;
  if (v17 <= 0x1E)
  {
    v9 = 0;
    v18 = 1 << v17;
    v19 = 1;
    v10 = 0;
    switch((int)v18)
    {
      case 1:
        goto LABEL_19;
      case 2:
      case 4:
      case 8:
        if (v12 >= 5)
        {
          __break(0xC471u);
          JUMPOUT(0x197FCED50);
        }
        v19 = dword_19914FAC0[v12] == (_DWORD)v18;
LABEL_19:
        v9 = 0x100000000;
        if (v11 == 0 && v19)
        {
          v10 = v18;
        }
        else
        {
          v9 = 0;
          v10 = 0;
        }
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      default:
        v10 = 0;
        break;
    }
  }
  else
  {
LABEL_2:
    v9 = 0;
    v10 = 0;
  }
  if (!HIDWORD(v9))
    goto LABEL_4;
  result = (uint64_t *)JSC::B3::Value::child(this, 0);
  if (*result)
  {
    v20 = *(unsigned int *)(*result + 8);
    v21 = (_QWORD *)(2 * *(_QWORD *)v8);
    v22 = (*(_QWORD *)v8 & 0x8000000000000000) != 0 ? 63 : *v21;
    if (v22 > v20)
    {
      v23 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v21 + 1);
      v24 = *(uint64_t *)v8 >= 0 ? v23 : v8;
      if (((*(_QWORD *)((char *)v24 + ((v20 >> 3) & 0x1FFFFFF8)) >> v20) & 1) != 0)
        goto LABEL_4;
    }
  }
  if (a4
    && ((v25 = a4[2], v26 = (unint64_t *)(2 * *(_QWORD *)v8), (*(_QWORD *)v8 & 0x8000000000000000) != 0)
      ? (v27 = 63)
      : (v27 = *v26),
        v27 > v25
     && ((v28 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v26 + 1), *(uint64_t *)v8 >= 0) ? (v29 = v28) : (v29 = v8),
         ((*(_QWORD *)((char *)v29 + ((v25 >> 3) & 0x1FFFFFF8)) >> v25) & 1) != 0)))
  {
LABEL_4:
    *(_QWORD *)v7 = 0;
    *(_WORD *)(v7 + 8) = 512;
    *(_DWORD *)(v7 + 12) = 1;
    *(_QWORD *)(v7 + 16) = 0;
    *(_BYTE *)(v7 + 24) = 0;
  }
  else
  {
    v31 = *(JSC::B3::Value **)JSC::B3::Value::child(this, 0);
  }
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::indexArg<int,JSC::B3::Value::IsLegalOffset<int>>(uint64_t a1, JSC::B3::_anonymous_namespace_::LowerToAir *this, int a3, JSC::B3::Value *a4, int a5, int a6)
{
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  JSC::B3::_anonymous_namespace_::LowerToAir *v17;
  JSC::B3::_anonymous_namespace_::LowerToAir *v18;
  JSC::B3::Value **v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  JSC::B3::_anonymous_namespace_::LowerToAir *v26;
  JSC::B3::_anonymous_namespace_::LowerToAir *v27;
  JSC::B3::Value **v28;

  v12 = *((unsigned __int8 *)a4 + 12);
  if (v12 == 43)
  {
    v13 = *(_QWORD *)JSC::B3::Value::child(a4, 0);
    if (!v13
      || ((v14 = *(unsigned int *)(v13 + 8),
           v15 = (unint64_t *)(2 * *(_QWORD *)this),
           (*(_QWORD *)this & 0x8000000000000000) != 0)
        ? (v16 = 63)
        : (v16 = *v15),
          v16 <= v14
       || ((v17 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v15 + 1), *(uint64_t *)this >= 0)
         ? (v18 = v17)
         : (v18 = this),
           ((*(_QWORD *)((char *)v18 + ((v14 >> 3) & 0x1FFFFFF8)) >> v14) & 1) == 0)))
    {
      v19 = (JSC::B3::Value **)JSC::B3::Value::child(a4, 0);
      v21 = 0;
      goto LABEL_11;
    }
    v12 = *((unsigned __int8 *)a4 + 12);
  }
  if (v12 != 42
    || (v22 = *(_QWORD *)JSC::B3::Value::child(a4, 0)) != 0
    && ((v23 = *(unsigned int *)(v22 + 8),
         v24 = (unint64_t *)(2 * *(_QWORD *)this),
         (*(_QWORD *)this & 0x8000000000000000) != 0)
      ? (v25 = 63)
      : (v25 = *v24),
        v25 > v23
     && ((v26 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v24 + 1), *(uint64_t *)this >= 0)
       ? (v27 = v26)
       : (v27 = this),
         ((*(_QWORD *)((char *)v27 + ((v23 >> 3) & 0x1FFFFFF8)) >> v23) & 1) != 0)))
  {
    v21 = 2;
  }
  else
  {
    v28 = (JSC::B3::Value **)JSC::B3::Value::child(a4, 0);
    v21 = 1;
  }
LABEL_11:
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 8) = 11;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 12) = a5;
  *(_QWORD *)a1 = a6;
  *(_BYTE *)(a1 + 9) = v21;
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(void)#2}::operator() const(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#1}::operator()(uint64_t a1, JSC::B3::Value *this, unsigned int *a3)
{
  uint64_t v6;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  JSC::B3::_anonymous_namespace_::LowerToAir *v34;
  JSC::B3::Value *v35;
  int v36;
  int v37;
  int v38;
  JSC::B3::Value **v39;

  if (*((_BYTE *)this + 12) != 16)
    return 0;
  v6 = *((unsigned int *)this + 2);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v6) || *(_DWORD *)(*(_QWORD *)(a1 + 80) + 8 * v6) != 1)
    return 0;
  if (a3)
  {
    v8 = a3[2];
    v9 = (_QWORD *)(2 * *(_QWORD *)a1);
    v10 = (*(_QWORD *)a1 & 0x8000000000000000) != 0 ? 63 : *v9;
    if (v10 > v8)
    {
      v11 = v9 + 1;
      v12 = *(uint64_t *)a1 >= 0 ? v11 : (_QWORD *)a1;
      if (((*(_QWORD *)((char *)v12 + ((v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1) != 0)
        return 0;
    }
  }
  v13 = *(_QWORD *)JSC::B3::Value::child(this, 0);
  v14 = *(unsigned int **)JSC::B3::Value::child(this, 1u);
  v15 = *(_DWORD *)(*(_QWORD *)(a1 + 400) + 16);
  if (v15 >= 0x80000000)
    v15 = 0x80000000;
  if (v15 == 2)
  {
    if (*(_BYTE *)(v13 + 12) == 42
      && ((v16 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v13, 0)) == 0
       || ((v17 = *(unsigned int *)(v16 + 8),
            v18 = (unint64_t *)(2 * *(_QWORD *)a1),
            (*(_QWORD *)a1 & 0x8000000000000000) != 0)
         ? (v19 = 63)
         : (v19 = *v18),
           v19 <= v17
        || ((v20 = v18 + 1, *(uint64_t *)a1 >= 0) ? (v21 = (uint64_t)v20) : (v21 = a1),
            ((*(_QWORD *)(v21 + ((v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) == 0)))
    {
      v22 = 22;
    }
    else
    {
      {
        v22 = 21;
LABEL_29:
        v23 = *(unsigned int *)(v13 + 8);
        v24 = (unint64_t *)(2 * *(_QWORD *)a1);
        if ((*(_QWORD *)a1 & 0x8000000000000000) != 0)
          v25 = 63;
        else
          v25 = *v24;
        if (v25 > v23)
        {
          v26 = v24 + 1;
          v27 = *(uint64_t *)a1 >= 0 ? v26 : (_QWORD *)a1;
          if (((*(_QWORD *)((char *)v27 + ((v23 >> 3) & 0x1FFFFFF8)) >> v23) & 1) != 0)
            return 0;
        }
        goto LABEL_36;
      }
      v22 = 23;
    }
    v39 = (JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v13, 0);
    v35 = *(JSC::B3::Value **)JSC::B3::Value::child((JSC::B3::Value *)v14, 0);
    v34 = (JSC::B3::_anonymous_namespace_::LowerToAir *)a1;
    goto LABEL_45;
  }
  if (v15 != 1)
    return 0;
  v22 = 20;
  if (v13)
    goto LABEL_29;
LABEL_36:
  if (v14)
  {
    v28 = v14[2];
    v29 = (_QWORD *)(2 * *(_QWORD *)a1);
    v30 = (*(_QWORD *)a1 & 0x8000000000000000) != 0 ? 63 : *v29;
    if (v30 > v28)
    {
      v31 = v29 + 1;
      v32 = *(uint64_t *)a1 >= 0 ? v31 : (_QWORD *)a1;
      if (((*(_QWORD *)((char *)v32 + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) != 0)
        return 0;
    }
  }
  v34 = (JSC::B3::_anonymous_namespace_::LowerToAir *)a1;
  v35 = (JSC::B3::Value *)v14;
LABEL_45:
  return 1;
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>(uint64_t a1, int a2, int a3, int a4, int a5, int a6)
{
  unsigned int v6;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  WTF *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  _BYTE v40[96];
  _BYTE v41[12];

  v6 = *(_DWORD *)(a1 + 364);
  if (v6)
  {
    v12 = *(_QWORD *)(a1 + 352) + 528 * v6 - 528;
    v13 = *(_QWORD *)(a1 + 400);
    v39 = 4;
    v38 = (WTF *)WTF::fastMalloc((WTF *)0x80);
    v21 = v38;
    *(_QWORD *)v38 = 0;
    *((_WORD *)v21 + 4) = 513;
    *((_DWORD *)v21 + 3) = 1;
    *((_DWORD *)v21 + 4) = a3;
    *((_DWORD *)v21 + 5) = 0;
    *((_BYTE *)v21 + 24) = 0;
    ++HIDWORD(v39);
    v22 = (char *)v38 + 32 * HIDWORD(v39);
    *(_QWORD *)v22 = 0;
    *((_WORD *)v22 + 4) = 513;
    *((_DWORD *)v22 + 3) = 1;
    *((_DWORD *)v22 + 4) = a4;
    *((_DWORD *)v22 + 5) = 0;
    v22[24] = 0;
    ++HIDWORD(v39);
    v23 = (char *)v38 + 32 * HIDWORD(v39);
    *(_QWORD *)v23 = 0;
    *((_WORD *)v23 + 4) = 513;
    *((_DWORD *)v23 + 3) = 1;
    *((_DWORD *)v23 + 4) = a5;
    *((_DWORD *)v23 + 5) = 0;
    v23[24] = 0;
    ++HIDWORD(v39);
    v24 = (char *)v38 + 32 * HIDWORD(v39);
    *(_QWORD *)v24 = 0;
    *((_WORD *)v24 + 4) = 513;
    *((_DWORD *)v24 + 3) = 1;
    *((_DWORD *)v24 + 4) = a6;
    *((_DWORD *)v24 + 5) = 0;
    v24[24] = 0;
    ++HIDWORD(v39);
    *(_QWORD *)v41 = v13;
    *(_DWORD *)&v41[8] = a2;
    v25 = *(unsigned int *)(v12 + 12);
    if ((_DWORD)v25 == *(_DWORD *)(v12 + 8))
    {
      WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v12, (unint64_t)&v38, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      v26 = *(_QWORD *)v12;
      v27 = *(_QWORD *)v12 + (v25 << 7);
      v28 = (_OWORD *)(v27 + 16);
      *(_QWORD *)v27 = v27 + 16;
      *(_QWORD *)(v27 + 8) = 3;
      v29 = v38;
      if (v38 == (WTF *)v40)
      {
        if (HIDWORD(v39))
        {
          v30 = 32 * HIDWORD(v39);
          v31 = (__int128 *)v40;
          do
          {
            v32 = *v31;
            v33 = v31[1];
            v31 += 2;
            *v28 = v32;
            v28[1] = v33;
            v28 += 2;
            v30 -= 32;
          }
          while (v30);
        }
      }
      else
      {
        v38 = (WTF *)v40;
        *(_QWORD *)v27 = v29;
        *(_DWORD *)(v27 + 8) = v39;
      }
      v34 = HIDWORD(v39);
      HIDWORD(v39) = 0;
      *(_DWORD *)(v27 + 12) = v34;
      v35 = v26 + (v25 << 7);
      v36 = *(_QWORD *)v41;
      *(_DWORD *)(v35 + 119) = *(_DWORD *)&v41[7];
      *(_QWORD *)(v35 + 112) = v36;
      ++*(_DWORD *)(v12 + 12);
    }
    v37 = v38;
    if (v40 != (_BYTE *)v38)
    {
      if (v38)
      {
        v38 = 0;
        LODWORD(v39) = 0;
        WTF::fastFree((unint64_t)v37, v14, v15, v16, v17, v18, v19, v20);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t *WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, __int128 *a2, unint64_t a3)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v5 = result;
  *result = (uint64_t)(result + 2);
  result[1] = 3;
  if (a3 < 4)
  {
    if (!a3)
      return v5;
    v6 = 0;
LABEL_4:
    v7 = 32 * a3;
    do
    {
      v8 = (_OWORD *)(*v5 + 32 * v6);
      v9 = *a2;
      v10 = a2[1];
      a2 += 2;
      *v8 = v9;
      v8[1] = v10;
      v6 = *((_DWORD *)v5 + 3) + 1;
      *((_DWORD *)v5 + 3) = v6;
      v7 -= 32;
    }
    while (v7);
    return v5;
  }
  if (!(a3 >> 27))
  {
    v11 = WTF::fastMalloc((WTF *)(32 * a3));
    *((_DWORD *)v5 + 2) = a3;
    *v5 = v11;
    v6 = *((_DWORD *)v5 + 3);
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::bitImm(uint64_t this, JSC::B3::Value *a2)
{
  uint64_t v2;
  int v3;
  JSC::ARM64LogicalImmediate *v4;

  v2 = this;
  v3 = *((_WORD *)a2 + 6) & 0xFFF;
  if (a2 && v3 == 3)
  {
    v4 = (JSC::ARM64LogicalImmediate *)*((int *)a2 + 10);
  }
  else
  {
    if (!a2 || v3 != 4)
      goto LABEL_9;
    v4 = (JSC::ARM64LogicalImmediate *)*((_QWORD *)a2 + 5);
  }
  this = JSC::ARM64LogicalImmediate::create32(v4);
  if ((_DWORD)this != -1)
  {
    *(_DWORD *)(v2 + 12) = 1;
    *(_QWORD *)(v2 + 16) = 0;
    *(_BYTE *)(v2 + 24) = 0;
    *(_WORD *)(v2 + 8) = 516;
    *(_QWORD *)v2 = v4;
    return this;
  }
LABEL_9:
  *(_QWORD *)v2 = 0;
  *(_WORD *)(v2 + 8) = 512;
  *(_DWORD *)(v2 + 12) = 1;
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  return this;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::bitImm64(uint64_t this, JSC::B3::Value *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = this;
  v3 = *((_WORD *)a2 + 6) & 0xFFF;
  if (a2 && v3 == 3)
  {
    v4 = *((int *)a2 + 10);
  }
  else
  {
    if (!a2 || v3 != 4)
      goto LABEL_7;
    v4 = *((_QWORD *)a2 + 5);
  }
  this = JSC::ARM64LogicalImmediate::create64(v4);
  if ((_DWORD)this == -1)
  {
LABEL_7:
    *(_QWORD *)v2 = 0;
    *(_WORD *)(v2 + 8) = 512;
    *(_DWORD *)(v2 + 12) = 1;
    *(_QWORD *)(v2 + 16) = 0;
    *(_BYTE *)(v2 + 24) = 0;
    return this;
  }
  *(_DWORD *)(v2 + 12) = 1;
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 8) = 517;
  *(_QWORD *)v2 = v4;
  return this;
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Tmp,JSC::B3::Air::Arg,JSC::B3::Air::Tmp&>(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  WTF *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  int v44;
  int v45;
  char v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  int v52;
  int v53;
  char v54;
  _BYTE v55[12];
  _OWORD v56[2];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v10 = *(_QWORD *)(a1 + 400);
    *(_OWORD *)((char *)v56 + 9) = *(_OWORD *)((char *)a4 + 9);
    v56[0] = *a4;
    v39 = (WTF *)&v41;
    v41 = 0;
    v42 = 513;
    v43 = 1;
    v44 = a3;
    v45 = 0;
    v46 = 0;
    v47 = v56[0];
    v48 = v56[1];
    v49 = 0;
    v50 = 513;
    v51 = 1;
    v52 = a5;
    v53 = 0;
    v54 = 0;
    v40 = 0x300000003;
    *(_QWORD *)v55 = v10;
    *(_DWORD *)&v55[8] = (_DWORD)a2;
    v11 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v11 == *(_DWORD *)(v9 + 8))
    {
      v25 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v11 + 1, (unint64_t)&v39, (uint64_t)a4, a5, a6, a7, a8);
      v26 = *(unsigned int *)(v9 + 12);
      v27 = *(_QWORD *)v9;
      v28 = *(_QWORD *)v9 + (v26 << 7);
      v29 = (_OWORD *)(v28 + 16);
      *(_QWORD *)v28 = v28 + 16;
      *(_QWORD *)(v28 + 8) = 3;
      v30 = *(__int128 **)v25;
      if (*(_QWORD *)v25 == v25 + 16)
      {
        v31 = *(unsigned int *)(v25 + 12);
        if ((_DWORD)v31)
        {
          v32 = 32 * v31;
          do
          {
            v33 = *v30;
            v34 = v30[1];
            v30 += 2;
            *v29 = v33;
            v29[1] = v34;
            v29 += 2;
            v32 -= 32;
          }
          while (v32);
        }
      }
      else
      {
        *(_QWORD *)v25 = v25 + 16;
        *(_QWORD *)v28 = v30;
        v38 = *(_DWORD *)(v25 + 8);
        *(_DWORD *)(v25 + 8) = 3;
        *(_DWORD *)(v28 + 8) = v38;
      }
      v35 = *(_DWORD *)(v25 + 12);
      *(_DWORD *)(v25 + 12) = 0;
      *(_DWORD *)(v28 + 12) = v35;
      v36 = v27 + (v26 << 7);
      v37 = *(_QWORD *)(v25 + 112);
      *(_DWORD *)(v36 + 119) = *(_DWORD *)(v25 + 119);
      *(_QWORD *)(v36 + 112) = v37;
    }
    else
    {
      v12 = *(_QWORD *)v9;
      v13 = *(_QWORD *)v9 + (v11 << 7);
      v14 = (_OWORD *)(v13 + 16);
      *(_QWORD *)v13 = v13 + 16;
      *(_QWORD *)(v13 + 8) = 3;
      v15 = v39;
      if (v39 == (WTF *)&v41)
      {
        if (HIDWORD(v40))
        {
          v16 = 32 * HIDWORD(v40);
          v17 = (__int128 *)&v41;
          do
          {
            v18 = *v17;
            v19 = v17[1];
            v17 += 2;
            *v14 = v18;
            v14[1] = v19;
            v14 += 2;
            v16 -= 32;
          }
          while (v16);
        }
      }
      else
      {
        v39 = (WTF *)&v41;
        *(_QWORD *)v13 = v15;
        v24 = v40;
        LODWORD(v40) = 3;
        *(_DWORD *)(v13 + 8) = v24;
      }
      v20 = HIDWORD(v40);
      HIDWORD(v40) = 0;
      *(_DWORD *)(v13 + 12) = v20;
      v21 = v12 + (v11 << 7);
      v22 = *(_QWORD *)v55;
      *(_DWORD *)(v21 + 119) = *(_DWORD *)&v55[7];
      *(_QWORD *)(v21 + 112) = v22;
    }
    ++*(_DWORD *)(v9 + 12);
    v23 = v39;
    if (&v41 != (uint64_t *)v39)
    {
      if (v39)
      {
        v39 = 0;
        LODWORD(v40) = 0;
        WTF::fastFree((unint64_t)v23, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()(uint64_t a1)
{
  uint64_t *v2;
  JSC::B3::Value *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  JSC::B3::Value *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  JSC::B3::Value *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v30;
  uint64_t *v31;

  if (**(_WORD **)a1 != 29)
    return 445;
  v2 = *(uint64_t **)(a1 + 8);
  v3 = **(JSC::B3::Value ***)(a1 + 16);
  if (*((_BYTE *)v3 + 12) == 42)
  {
    v4 = JSC::B3::Value::child(v3, 0);
    if (!*(_QWORD *)v4
      || ((v5 = *(unsigned int *)(*(_QWORD *)v4 + 8), v6 = (unint64_t *)(2 * *v2), *v2 < 0)
        ? (v7 = 63)
        : (v7 = *v6),
          v7 <= v5
       || ((v8 = (uint64_t *)(v6 + 1), *v2 >= 0) ? (v9 = v8) : (v9 = v2),
           ((*(unint64_t *)((char *)v9 + ((v5 >> 3) & 0x1FFFFFF8)) >> v5) & 1) == 0)))
    {
      v10 = **(JSC::B3::Value ***)(a1 + 24);
      if (*((_BYTE *)v10 + 12) == 42)
      {
        v11 = JSC::B3::Value::child(v10, 0);
        if (!*(_QWORD *)v11)
          return 30;
        v12 = *(unsigned int *)(*(_QWORD *)v11 + 8);
        v13 = (_QWORD *)(2 * *v2);
        v14 = *v2 < 0 ? 63 : *v13;
        if (v14 <= v12)
          return 30;
        v15 = v13 + 1;
        v16 = *v2 >= 0 ? v15 : v2;
        if (((*(unint64_t *)((char *)v16 + ((v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) == 0)
          return 30;
      }
    }
  }
  v17 = **(JSC::B3::Value ***)(a1 + 16);
  if (*((_BYTE *)v17 + 12) != 43)
    return 445;
  v18 = JSC::B3::Value::child(v17, 0);
  if (*(_QWORD *)v18)
  {
    v19 = *(unsigned int *)(*(_QWORD *)v18 + 8);
    v20 = (_QWORD *)(2 * *v2);
    v21 = *v2 < 0 ? 63 : *v20;
    if (v21 > v19)
    {
      v22 = v20 + 1;
      v23 = *v2 >= 0 ? v22 : v2;
      if (((*(unint64_t *)((char *)v23 + ((v19 >> 3) & 0x1FFFFFF8)) >> v19) & 1) != 0)
        return 445;
    }
  }
  v24 = **(JSC::B3::Value ***)(a1 + 24);
  if (*((_BYTE *)v24 + 12) != 43)
    return 445;
  v25 = JSC::B3::Value::child(v24, 0);
  if (*(_QWORD *)v25
    && ((v26 = *(unsigned int *)(*(_QWORD *)v25 + 8), v27 = (unint64_t *)(2 * *v2), *v2 < 0)
      ? (v28 = 63)
      : (v28 = *v27),
        v28 > v26
     && ((v30 = (uint64_t *)(v27 + 1), *v2 >= 0) ? (v31 = v30) : (v31 = v2),
         ((*(unint64_t *)((char *)v31 + ((v26 >> 3) & 0x1FFFFFF8)) >> v26) & 1) != 0)))
  {
    return 445;
  }
  else
  {
    return 31;
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Tmp,JSC::B3::Air::Arg,JSC::B3::Air::Arg,JSC::B3::Air::Tmp>(uint64_t a1, int a2, int a3, _OWORD *a4, _OWORD *a5, int a6)
{
  unsigned int v6;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  _OWORD *v20;
  __int128 v21;
  _OWORD *v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  WTF *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  _BYTE v40[96];
  _BYTE v41[12];
  _BYTE v42[32];
  _OWORD v43[2];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 364);
  if (v6)
  {
    v10 = *(_QWORD *)(a1 + 352) + 528 * v6 - 528;
    v11 = *(_QWORD *)(a1 + 400);
    v43[0] = *a4;
    *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)((char *)a4 + 9);
    *(_OWORD *)v42 = *a5;
    *(_OWORD *)&v42[9] = *(_OWORD *)((char *)a5 + 9);
    v39 = 4;
    v38 = (WTF *)WTF::fastMalloc((WTF *)0x80);
    v19 = v38;
    *(_QWORD *)v38 = 0;
    *((_WORD *)v19 + 4) = 513;
    *((_DWORD *)v19 + 3) = 1;
    *((_DWORD *)v19 + 4) = a3;
    *((_DWORD *)v19 + 5) = 0;
    *((_BYTE *)v19 + 24) = 0;
    ++HIDWORD(v39);
    v20 = (_OWORD *)((char *)v38 + 32 * HIDWORD(v39));
    v21 = v43[1];
    *v20 = v43[0];
    v20[1] = v21;
    ++HIDWORD(v39);
    v22 = (_OWORD *)((char *)v38 + 32 * HIDWORD(v39));
    v23 = *(_OWORD *)&v42[16];
    *v22 = *(_OWORD *)v42;
    v22[1] = v23;
    ++HIDWORD(v39);
    v24 = (char *)v38 + 32 * HIDWORD(v39);
    *(_QWORD *)v24 = 0;
    *((_WORD *)v24 + 4) = 513;
    *((_DWORD *)v24 + 3) = 1;
    *((_DWORD *)v24 + 4) = a6;
    *((_DWORD *)v24 + 5) = 0;
    v24[24] = 0;
    ++HIDWORD(v39);
    *(_QWORD *)v41 = v11;
    *(_DWORD *)&v41[8] = a2;
    v25 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v25 == *(_DWORD *)(v10 + 8))
    {
      WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v10, (unint64_t)&v38, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      v26 = *(_QWORD *)v10;
      v27 = *(_QWORD *)v10 + (v25 << 7);
      v28 = (_OWORD *)(v27 + 16);
      *(_QWORD *)v27 = v27 + 16;
      *(_QWORD *)(v27 + 8) = 3;
      v29 = v38;
      if (v38 == (WTF *)v40)
      {
        if (HIDWORD(v39))
        {
          v30 = 32 * HIDWORD(v39);
          v31 = (__int128 *)v40;
          do
          {
            v32 = *v31;
            v33 = v31[1];
            v31 += 2;
            *v28 = v32;
            v28[1] = v33;
            v28 += 2;
            v30 -= 32;
          }
          while (v30);
        }
      }
      else
      {
        v38 = (WTF *)v40;
        *(_QWORD *)v27 = v29;
        *(_DWORD *)(v27 + 8) = v39;
      }
      v34 = HIDWORD(v39);
      HIDWORD(v39) = 0;
      *(_DWORD *)(v27 + 12) = v34;
      v35 = v26 + (v25 << 7);
      v36 = *(_QWORD *)v41;
      *(_DWORD *)(v35 + 119) = *(_DWORD *)&v41[7];
      *(_QWORD *)(v35 + 112) = v36;
      ++*(_DWORD *)(v10 + 12);
    }
    v37 = v38;
    if (v40 != (_BYTE *)v38)
    {
      if (v38)
      {
        v38 = 0;
        LODWORD(v39) = 0;
        WTF::fastFree((unint64_t)v37, v12, v13, v14, v15, v16, v17, v18);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::B3::Air::Inst::Inst<JSC::B3::Air::Arg,JSC::B3::Air::Arg,JSC::B3::Air::Tmp>(uint64_t a1, int a2, uint64_t a3, _OWORD *a4, _OWORD *a5, _OWORD *a6, int a7)
{
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[32];
  _BYTE v21[32];
  _BYTE v22[32];

  *(_OWORD *)v20 = *a4;
  *(_OWORD *)&v20[9] = *(_OWORD *)((char *)a4 + 9);
  *(_OWORD *)v21 = *a5;
  *(_OWORD *)&v21[9] = *(_OWORD *)((char *)a5 + 9);
  *(_OWORD *)v22 = *a6;
  *(_OWORD *)&v22[9] = *(_OWORD *)((char *)a6 + 9);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 3;
  v11 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(a1 + 8) = 4;
  *(_QWORD *)a1 = v11;
  v12 = (_OWORD *)(v11 + 32 * *(unsigned int *)(a1 + 12));
  *v12 = *(_OWORD *)v20;
  v12[1] = *(_OWORD *)&v20[16];
  v13 = (*(_DWORD *)(a1 + 12) + 1);
  *(_DWORD *)(a1 + 12) = v13;
  v14 = (_OWORD *)(*(_QWORD *)a1 + 32 * v13);
  *v14 = *(_OWORD *)v21;
  v14[1] = *(_OWORD *)&v21[16];
  v15 = (*(_DWORD *)(a1 + 12) + 1);
  *(_DWORD *)(a1 + 12) = v15;
  v16 = (_OWORD *)(*(_QWORD *)a1 + 32 * v15);
  *v16 = *(_OWORD *)v22;
  v16[1] = *(_OWORD *)&v22[16];
  v17 = (*(_DWORD *)(a1 + 12) + 1);
  *(_DWORD *)(a1 + 12) = v17;
  v18 = *(_QWORD *)a1 + 32 * v17;
  *(_QWORD *)v18 = 0;
  *(_WORD *)(v18 + 8) = 513;
  *(_DWORD *)(v18 + 12) = 1;
  *(_DWORD *)(v18 + 16) = a7;
  *(_DWORD *)(v18 + 20) = 0;
  *(_BYTE *)(v18 + 24) = 0;
  ++*(_DWORD *)(a1 + 12);
  *(_QWORD *)(a1 + 112) = a3;
  *(_DWORD *)(a1 + 120) = a2;
  return a1;
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Tmp,JSC::B3::Air::Arg,JSC::B3::Air::Arg,JSC::B3::Air::Tmp&>(uint64_t a1, int a2, int a3, _OWORD *a4, _OWORD *a5, int a6)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  WTF *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  _OWORD v30[2];
  _OWORD v31[2];
  __int128 v32;
  int v33;
  int v34;
  char v35;
  WTF *v36;
  int v37;
  unsigned int v38;
  _BYTE v39[96];
  _QWORD v40[2];

  v6 = *(_DWORD *)(a1 + 364);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 400);
    v8 = *(_QWORD *)(a1 + 352) + 528 * v6 - 528;
    *(_QWORD *)&v32 = 0;
    WORD4(v32) = 513;
    HIDWORD(v32) = 1;
    v33 = a3;
    v34 = 0;
    v35 = 0;
    v9 = a4[1];
    v31[0] = *a4;
    v31[1] = v9;
    v10 = a5[1];
    v30[0] = *a5;
    v30[1] = v10;
    JSC::B3::Air::Inst::Inst<JSC::B3::Air::Arg,JSC::B3::Air::Arg,JSC::B3::Air::Tmp>((uint64_t)&v36, a2, v7, &v32, v31, v30, a6);
    v18 = *(unsigned int *)(v8 + 12);
    if ((_DWORD)v18 == *(_DWORD *)(v8 + 8))
    {
      WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v8, (unint64_t)&v36, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      v19 = *(_QWORD *)v8;
      v20 = *(_QWORD *)v8 + (v18 << 7);
      v21 = (_OWORD *)(v20 + 16);
      *(_QWORD *)v20 = v20 + 16;
      *(_QWORD *)(v20 + 8) = 3;
      v22 = v36;
      if (v36 == (WTF *)v39)
      {
        if (v38)
        {
          v23 = 32 * v38;
          do
          {
            v24 = *(_OWORD *)v22;
            v25 = *((_OWORD *)v22 + 1);
            v22 = (WTF *)((char *)v22 + 32);
            *v21 = v24;
            v21[1] = v25;
            v21 += 2;
            v23 -= 32;
          }
          while (v23);
        }
      }
      else
      {
        v36 = (WTF *)v39;
        *(_QWORD *)v20 = v22;
        *(_DWORD *)(v20 + 8) = v37;
      }
      v26 = v38;
      v38 = 0;
      *(_DWORD *)(v20 + 12) = v26;
      v27 = v19 + (v18 << 7);
      v28 = v40[0];
      *(_DWORD *)(v27 + 119) = *(_DWORD *)((char *)v40 + 7);
      *(_QWORD *)(v27 + 112) = v28;
      ++*(_DWORD *)(v8 + 12);
    }
    v29 = v36;
    if (v39 != (_BYTE *)v36)
    {
      if (v36)
      {
        v36 = 0;
        v37 = 0;
        WTF::fastFree((unint64_t)v29, v11, v12, v13, v14, v15, v16, v17);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::appendTrapping<JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  WTF *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  WTF *v40;
  uint64_t v41;
  _BYTE v42[25];
  uint64_t v43;
  __int16 v44;
  int v45;
  int v46;
  int v47;
  char v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  int v52;
  int v53;
  char v54;
  _BYTE v55[12];

  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 400);
    v10 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v11 = *(_WORD *)(v9 + 12);
    *(_OWORD *)v42 = *a3;
    *(_OWORD *)&v42[9] = *(_OWORD *)((char *)a3 + 9);
    v40 = (WTF *)v42;
    v43 = 0;
    v44 = 513;
    v45 = 1;
    v46 = a4;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 513;
    v51 = 1;
    v52 = a5;
    v53 = 0;
    v54 = 0;
    v41 = 0x300000003;
    *(_QWORD *)v55 = v9;
    *(_DWORD *)&v55[8] = (_DWORD)a2;
    v55[10] = (v11 & 0x200) != 0;
    v12 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v12 == *(_DWORD *)(v10 + 8))
    {
      v26 = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v12 + 1, (unint64_t)&v40, a4, a5, a6, a7, a8);
      v27 = *(unsigned int *)(v10 + 12);
      v28 = *(_QWORD *)v10;
      v29 = *(_QWORD *)v10 + (v27 << 7);
      v30 = (_OWORD *)(v29 + 16);
      *(_QWORD *)v29 = v29 + 16;
      *(_QWORD *)(v29 + 8) = 3;
      v31 = *(__int128 **)v26;
      if (*(_QWORD *)v26 == v26 + 16)
      {
        v32 = *(unsigned int *)(v26 + 12);
        if ((_DWORD)v32)
        {
          v33 = 32 * v32;
          do
          {
            v34 = *v31;
            v35 = v31[1];
            v31 += 2;
            *v30 = v34;
            v30[1] = v35;
            v30 += 2;
            v33 -= 32;
          }
          while (v33);
        }
      }
      else
      {
        *(_QWORD *)v26 = v26 + 16;
        *(_QWORD *)v29 = v31;
        v39 = *(_DWORD *)(v26 + 8);
        *(_DWORD *)(v26 + 8) = 3;
        *(_DWORD *)(v29 + 8) = v39;
      }
      v36 = *(_DWORD *)(v26 + 12);
      *(_DWORD *)(v26 + 12) = 0;
      *(_DWORD *)(v29 + 12) = v36;
      v37 = v28 + (v27 << 7);
      v38 = *(_QWORD *)(v26 + 112);
      *(_DWORD *)(v37 + 119) = *(_DWORD *)(v26 + 119);
      *(_QWORD *)(v37 + 112) = v38;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      v14 = *(_QWORD *)v10 + (v12 << 7);
      v15 = (_OWORD *)(v14 + 16);
      *(_QWORD *)v14 = v14 + 16;
      *(_QWORD *)(v14 + 8) = 3;
      v16 = v40;
      if (v40 == (WTF *)v42)
      {
        if (HIDWORD(v41))
        {
          v17 = 32 * HIDWORD(v41);
          v18 = (__int128 *)v42;
          do
          {
            v19 = *v18;
            v20 = v18[1];
            v18 += 2;
            *v15 = v19;
            v15[1] = v20;
            v15 += 2;
            v17 -= 32;
          }
          while (v17);
        }
      }
      else
      {
        v40 = (WTF *)v42;
        *(_QWORD *)v14 = v16;
        v25 = v41;
        LODWORD(v41) = 3;
        *(_DWORD *)(v14 + 8) = v25;
      }
      v21 = HIDWORD(v41);
      HIDWORD(v41) = 0;
      *(_DWORD *)(v14 + 12) = v21;
      v22 = v13 + (v12 << 7);
      v23 = *(_QWORD *)v55;
      *(_DWORD *)(v22 + 119) = *(_DWORD *)&v55[7];
      *(_QWORD *)(v22 + 112) = v23;
    }
    ++*(_DWORD *)(v10 + 12);
    v24 = v40;
    if (v42 != (_BYTE *)v40)
    {
      if (v40)
      {
        v40 = 0;
        LODWORD(v41) = 0;
        WTF::fastFree((unint64_t)v24, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Inst>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  WTF *v20;
  uint64_t v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  WTF *v42;
  unsigned int v43;
  int v44;
  int v45;
  WTF *v46;
  uint64_t v47;
  _BYTE v48[96];
  _QWORD v49[2];

  v46 = (WTF *)v48;
  v47 = 3;
  v9 = *(WTF **)a2;
  if (*(unsigned int **)a2 == a2 + 4)
  {
    v10 = a2[3];
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      v12 = v48;
      do
      {
        v13 = *(_OWORD *)v9;
        v14 = *((_OWORD *)v9 + 1);
        v9 = (WTF *)((char *)v9 + 32);
        *v12 = v13;
        v12[1] = v14;
        v12 += 2;
        v11 -= 32;
      }
      while (v11);
    }
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    v46 = v9;
    v43 = a2[2];
    LODWORD(v10) = a2[3];
    a2[2] = 3;
    LODWORD(v47) = v43;
  }
  v15 = (uint64_t *)(a1 + 8);
  a2[3] = 0;
  HIDWORD(v47) = v10;
  v49[0] = *((_QWORD *)a2 + 14);
  *(_DWORD *)((char *)v49 + 7) = *(unsigned int *)((char *)a2 + 119);
  v16 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v16 == *(_DWORD *)(a1 + 16))
  {
    v28 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v46);
    v29 = *(unsigned int *)(a1 + 20);
    v30 = *(_QWORD *)(a1 + 8);
    v31 = v30 + (v29 << 7);
    v32 = (_OWORD *)(v31 + 16);
    *(_QWORD *)v31 = v31 + 16;
    *(_QWORD *)(v31 + 8) = 3;
    v33 = *(__int128 **)v28;
    if (*(_QWORD *)v28 == v28 + 16)
    {
      v34 = *(unsigned int *)(v28 + 12);
      if ((_DWORD)v34)
      {
        v35 = 32 * v34;
        do
        {
          v36 = *v33;
          v37 = v33[1];
          v33 += 2;
          *v32 = v36;
          v32[1] = v37;
          v32 += 2;
          v35 -= 32;
        }
        while (v35);
      }
    }
    else
    {
      *(_QWORD *)v28 = v28 + 16;
      *(_QWORD *)v31 = v33;
      v45 = *(_DWORD *)(v28 + 8);
      *(_DWORD *)(v28 + 8) = 3;
      *(_DWORD *)(v31 + 8) = v45;
    }
    v38 = *(_DWORD *)(v28 + 12);
    *(_DWORD *)(v28 + 12) = 0;
    *(_DWORD *)(v31 + 12) = v38;
    v39 = v30 + (v29 << 7);
    v40 = *(_QWORD *)(v28 + 112);
    *(_DWORD *)(v39 + 119) = *(_DWORD *)(v28 + 119);
    *(_QWORD *)(v39 + 112) = v40;
  }
  else
  {
    v17 = *v15;
    v18 = *v15 + (v16 << 7);
    v19 = (_OWORD *)(v18 + 16);
    *(_QWORD *)v18 = v18 + 16;
    *(_QWORD *)(v18 + 8) = 3;
    v20 = v46;
    if (v46 == (WTF *)v48)
    {
      if (HIDWORD(v47))
      {
        v21 = 32 * HIDWORD(v47);
        v22 = (__int128 *)v48;
        do
        {
          v23 = *v22;
          v24 = v22[1];
          v22 += 2;
          *v19 = v23;
          v19[1] = v24;
          v19 += 2;
          v21 -= 32;
        }
        while (v21);
      }
    }
    else
    {
      v46 = (WTF *)v48;
      *(_QWORD *)v18 = v20;
      v44 = v47;
      LODWORD(v47) = 3;
      *(_DWORD *)(v18 + 8) = v44;
    }
    v25 = HIDWORD(v47);
    HIDWORD(v47) = 0;
    *(_DWORD *)(v18 + 12) = v25;
    v26 = v17 + (v16 << 7);
    v27 = v49[0];
    *(_DWORD *)(v26 + 119) = *(_DWORD *)((char *)v49 + 7);
    *(_QWORD *)(v26 + 112) = v27;
  }
  v41 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 20) = v41;
  v42 = v46;
  if (v48 == (_BYTE *)v46 || !v46)
  {
    if (v41)
      return;
LABEL_24:
    __break(0xC471u);
    return;
  }
  v46 = 0;
  LODWORD(v47) = 0;
  WTF::fastFree((unint64_t)v42, a2, a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(a1 + 20))
    goto LABEL_24;
}

void JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  WTF *v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  WTF *v36;
  int v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  _BYTE v41[25];
  uint64_t v42;
  __int16 v43;
  int v44;
  int v45;
  int v46;
  char v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  int v51;
  int v52;
  char v53;
  _BYTE v54[12];

  *(_OWORD *)v41 = *a4;
  v9 = (uint64_t *)(a1 + 8);
  *(_OWORD *)&v41[9] = *(_OWORD *)((char *)a4 + 9);
  v39 = (WTF *)v41;
  v42 = 0;
  v43 = 513;
  v44 = 1;
  v45 = a5;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 513;
  v50 = 1;
  v51 = a6;
  v52 = 0;
  v53 = 0;
  v40 = 0x300000003;
  *(_QWORD *)v54 = a3;
  *(_DWORD *)&v54[8] = (unsigned __int16)a2;
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 16))
  {
    v22 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v10 + 1, (unint64_t)&v39);
    v23 = *(unsigned int *)(a1 + 20);
    v24 = *(_QWORD *)(a1 + 8);
    v25 = v24 + (v23 << 7);
    v26 = (_OWORD *)(v25 + 16);
    *(_QWORD *)v25 = v25 + 16;
    *(_QWORD *)(v25 + 8) = 3;
    v27 = *(__int128 **)v22;
    if (*(_QWORD *)v22 == v22 + 16)
    {
      v28 = *(unsigned int *)(v22 + 12);
      if ((_DWORD)v28)
      {
        v29 = 32 * v28;
        do
        {
          v30 = *v27;
          v31 = v27[1];
          v27 += 2;
          *v26 = v30;
          v26[1] = v31;
          v26 += 2;
          v29 -= 32;
        }
        while (v29);
      }
    }
    else
    {
      *(_QWORD *)v22 = v22 + 16;
      *(_QWORD *)v25 = v27;
      v38 = *(_DWORD *)(v22 + 8);
      *(_DWORD *)(v22 + 8) = 3;
      *(_DWORD *)(v25 + 8) = v38;
    }
    v32 = *(_DWORD *)(v22 + 12);
    *(_DWORD *)(v22 + 12) = 0;
    *(_DWORD *)(v25 + 12) = v32;
    v33 = v24 + (v23 << 7);
    v34 = *(_QWORD *)(v22 + 112);
    *(_DWORD *)(v33 + 119) = *(_DWORD *)(v22 + 119);
    *(_QWORD *)(v33 + 112) = v34;
  }
  else
  {
    v11 = *v9;
    v12 = *v9 + (v10 << 7);
    v13 = (_OWORD *)(v12 + 16);
    *(_QWORD *)v12 = v12 + 16;
    *(_QWORD *)(v12 + 8) = 3;
    v14 = v39;
    if (v39 == (WTF *)v41)
    {
      if (HIDWORD(v40))
      {
        v15 = 32 * HIDWORD(v40);
        v16 = (__int128 *)v41;
        do
        {
          v17 = *v16;
          v18 = v16[1];
          v16 += 2;
          *v13 = v17;
          v13[1] = v18;
          v13 += 2;
          v15 -= 32;
        }
        while (v15);
      }
    }
    else
    {
      v39 = (WTF *)v41;
      *(_QWORD *)v12 = v14;
      v37 = v40;
      LODWORD(v40) = 3;
      *(_DWORD *)(v12 + 8) = v37;
    }
    v19 = HIDWORD(v40);
    HIDWORD(v40) = 0;
    *(_DWORD *)(v12 + 12) = v19;
    v20 = v11 + (v10 << 7);
    v21 = *(_QWORD *)v54;
    *(_DWORD *)(v20 + 119) = *(_DWORD *)&v54[7];
    *(_QWORD *)(v20 + 112) = v21;
  }
  v35 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 20) = v35;
  v36 = v39;
  if (v41 == (_BYTE *)v39 || !v39)
  {
    if (v35)
      return;
LABEL_19:
    __break(0xC471u);
    return;
  }
  v39 = 0;
  LODWORD(v40) = 0;
  WTF::fastFree((unint64_t)v36, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(a1 + 20))
    goto LABEL_19;
}

void JSC::B3::Air::BasicBlock::append<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &>(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  WTF *v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  WTF *v36;
  int v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  _BYTE v41[25];
  uint64_t v42;
  __int16 v43;
  int v44;
  int v45;
  int v46;
  char v47;
  _BYTE v48[12];

  *(_OWORD *)v41 = *a4;
  v9 = (uint64_t *)(a1 + 8);
  *(_OWORD *)&v41[9] = *(_OWORD *)((char *)a4 + 9);
  v39 = (WTF *)v41;
  v42 = 0;
  v43 = 513;
  v44 = 1;
  v45 = a5;
  v46 = 0;
  v47 = 0;
  v40 = 0x200000003;
  *(_QWORD *)v48 = a3;
  *(_DWORD *)&v48[8] = (unsigned __int16)a2;
  v10 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v10 == *(_DWORD *)(a1 + 16))
  {
    v22 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, v10 + 1, (unint64_t)&v39);
    v23 = *(unsigned int *)(a1 + 20);
    v24 = *(_QWORD *)(a1 + 8);
    v25 = v24 + (v23 << 7);
    v26 = (_OWORD *)(v25 + 16);
    *(_QWORD *)v25 = v25 + 16;
    *(_QWORD *)(v25 + 8) = 3;
    v27 = *(__int128 **)v22;
    if (*(_QWORD *)v22 == v22 + 16)
    {
      v28 = *(unsigned int *)(v22 + 12);
      if ((_DWORD)v28)
      {
        v29 = 32 * v28;
        do
        {
          v30 = *v27;
          v31 = v27[1];
          v27 += 2;
          *v26 = v30;
          v26[1] = v31;
          v26 += 2;
          v29 -= 32;
        }
        while (v29);
      }
    }
    else
    {
      *(_QWORD *)v22 = v22 + 16;
      *(_QWORD *)v25 = v27;
      v38 = *(_DWORD *)(v22 + 8);
      *(_DWORD *)(v22 + 8) = 3;
      *(_DWORD *)(v25 + 8) = v38;
    }
    v32 = *(_DWORD *)(v22 + 12);
    *(_DWORD *)(v22 + 12) = 0;
    *(_DWORD *)(v25 + 12) = v32;
    v33 = v24 + (v23 << 7);
    v34 = *(_QWORD *)(v22 + 112);
    *(_DWORD *)(v33 + 119) = *(_DWORD *)(v22 + 119);
    *(_QWORD *)(v33 + 112) = v34;
  }
  else
  {
    v11 = *v9;
    v12 = *v9 + (v10 << 7);
    v13 = (_OWORD *)(v12 + 16);
    *(_QWORD *)v12 = v12 + 16;
    *(_QWORD *)(v12 + 8) = 3;
    v14 = v39;
    if (v39 == (WTF *)v41)
    {
      if (HIDWORD(v40))
      {
        v15 = 32 * HIDWORD(v40);
        v16 = (__int128 *)v41;
        do
        {
          v17 = *v16;
          v18 = v16[1];
          v16 += 2;
          *v13 = v17;
          v13[1] = v18;
          v13 += 2;
          v15 -= 32;
        }
        while (v15);
      }
    }
    else
    {
      v39 = (WTF *)v41;
      *(_QWORD *)v12 = v14;
      v37 = v40;
      LODWORD(v40) = 3;
      *(_DWORD *)(v12 + 8) = v37;
    }
    v19 = HIDWORD(v40);
    HIDWORD(v40) = 0;
    *(_DWORD *)(v12 + 12) = v19;
    v20 = v11 + (v10 << 7);
    v21 = *(_QWORD *)v48;
    *(_DWORD *)(v20 + 119) = *(_DWORD *)&v48[7];
    *(_QWORD *)(v20 + 112) = v21;
  }
  v35 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 20) = v35;
  v36 = v39;
  if (v41 == (_BYTE *)v39 || !v39)
  {
    if (v35)
      return;
LABEL_19:
    __break(0xC471u);
    return;
  }
  v39 = 0;
  LODWORD(v40) = 0;
  WTF::fastFree((unint64_t)v36, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(a1 + 20))
    goto LABEL_19;
}

uint64_t *JSC::B3::Air::Inst::Inst<JSC::B3::Air::Tmp,JSC::B3::Air::Arg>(uint64_t *a1, int a2, uint64_t a3, __int128 *a4, int a5, _OWORD *a6)
{
  uint64_t *result;
  __int128 v9[2];
  uint64_t v10;
  __int16 v11;
  int v12;
  int v13;
  int v14;
  char v15;
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v9[0] = *a4;
  *(__int128 *)((char *)v9 + 9) = *(__int128 *)((char *)a4 + 9);
  v10 = 0;
  v11 = 513;
  v12 = 1;
  v13 = a5;
  v14 = 0;
  v15 = 0;
  v16[0] = *a6;
  *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)a6 + 9);
  result = WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, v9, 3uLL);
  result[14] = a3;
  *((_DWORD *)result + 30) = a2;
  return result;
}

void WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;

  if (*(unsigned int *)(a1 + 8) > (unint64_t)a2)
  {
    v9 = *(unsigned int *)(a1 + 12);
    if (v9 > (unint64_t)a2)
    {
      *(_DWORD *)(a1 + 12) = (_DWORD)a2;
      LODWORD(v9) = (_DWORD)a2;
    }
    v10 = *(_QWORD *)a1;
    if (a2)
    {
      WTF::VectorBuffer<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, (unint64_t)a2);
      if ((_DWORD)v9)
      {
        v11 = *(_OWORD **)a1;
        if (*(_QWORD *)a1 != v10)
        {
          v12 = 16 * v9;
          v13 = (__int128 *)v10;
          do
          {
            v14 = *v13++;
            *v11++ = v14;
            v12 -= 16;
          }
          while (v12);
        }
      }
    }
    if (a1 + 16 != v10 && v10)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    if (!*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 2;
    }
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Value *,JSC::B3::Value *)#9}::operator() const(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::B3::Value *)#1}::operator()(uint64_t a1, JSC::B3::Value *this)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  char v45;

  v4 = *(_QWORD *)a1;
  v5 = *((unsigned __int8 *)this + 12);
  switch(v5)
  {
    case 25:
      v7 = *(_DWORD *)(*(_QWORD *)(v4 + 400) + 16);
      if (v7 >= 0x80000000)
        v7 = 0x80000000;
      if (v7 == 2)
      {
        v8 = 161;
      }
      else
      {
        if (v7 != 1)
          return 0;
        v8 = 158;
      }
      break;
    case 27:
      v17 = *(_DWORD *)(*(_QWORD *)(v4 + 400) + 16);
      if (v17 >= 0x80000000)
        v17 = 0x80000000;
      if (v17 == 2)
      {
        v8 = 163;
      }
      else
      {
        if (v17 != 1)
          return 0;
        v8 = 160;
      }
      break;
    case 26:
      v18 = *(_DWORD *)(*(_QWORD *)(v4 + 400) + 16);
      if (v18 >= 0x80000000)
        v18 = 0x80000000;
      if (v18 == 2)
      {
        v8 = 162;
      }
      else
      {
        if (v18 != 1)
          return 0;
        v8 = 159;
      }
      break;
    default:
      return 0;
  }
  v9 = *(unsigned int *)(**(_QWORD **)(a1 + 8) + 8);
  if (*(_DWORD *)(*(_QWORD *)(v4 + 8) + 4 * v9))
    return 0;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 80) + 8 * v9) != 1)
    return 0;
  v10 = *(unsigned int **)JSC::B3::Value::child(this, 0);
  v11 = (uint64_t *)JSC::B3::Value::child(this, 1u);
  v12 = *((unsigned int *)this + 2);
  if (*(_DWORD *)(*(_QWORD *)(v4 + 8) + 4 * v12) || *(_DWORD *)(*(_QWORD *)(v4 + 80) + 8 * v12) != 1)
    return 0;
  v13 = *v11;
  if (v10)
  {
    v14 = v10[2];
    v15 = (_QWORD *)(2 * *(_QWORD *)v4);
    v16 = (*(_QWORD *)v4 & 0x8000000000000000) != 0 ? 63 : *v15;
    if (v16 > v14)
    {
      v19 = v15 + 1;
      v20 = *(uint64_t *)v4 >= 0 ? v19 : (_QWORD *)v4;
      if (((*(_QWORD *)((char *)v20 + ((v14 >> 3) & 0x1FFFFFF8)) >> v14) & 1) != 0)
        return 0;
    }
  }
  v21 = *(_WORD *)(v13 + 12) & 0xFFF;
  if (v13)
    v22 = v21 == 3;
  else
    v22 = 0;
  v23 = v22;
  if (v22)
  {
    v25 = *(_DWORD *)(v13 + 40);
    v24 = (int)v25;
  }
  else
  {
    result = 0;
    if (!v13 || v21 != 4)
      return result;
    v24 = *(_QWORD *)(v13 + 40);
    v25 = v24;
  }
  if ((unint64_t)(v24 + 4095) >= 0x1FFF
    && ((v24 & 0xFFF) != 0 || (unint64_t)v24 >> 24 && (unint64_t)((v24 >> 12) + 4095) > 0xFFF))
  {
    return 0;
  }
  if (v23)
  {
    if ((v25 & 0x80000000) != 0)
      return 0;
    v27 = v25;
  }
  else
  {
    if (v21 == 4)
      v26 = v13;
    else
      v26 = 0;
    v27 = *(_QWORD *)(v26 + 40);
    if ((v27 & 0x8000000000000000) != 0)
      return 0;
  }
  v28 = 64;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 400) + 16) == 1)
    v28 = 32;
  if (v27 >= v28)
    return 0;
  v31 = *(_WORD *)(v13 + 12) & 0xFFF;
  if (v13 && v31 == 3)
  {
    v32 = *(int *)(v13 + 40);
  }
  else
  {
    if (!v13 || v31 != 4)
      goto LABEL_71;
    v32 = *(_QWORD *)(v13 + 40);
  }
  if ((unint64_t)(v32 + 4095) < 0x1FFF
    || (v32 & 0xFFF) == 0
    && (!((unint64_t)v32 >> 24) || v32 >> 12 == 0 || (unint64_t)(v32 >> 12) >= 0xFFFFFFFFFFFFF001))
  {
    HIDWORD(v43) = 1;
    v44 = 0;
    v45 = 0;
    WORD4(v43) = 514;
    *(_QWORD *)&v43 = v32;
    goto LABEL_75;
  }
LABEL_71:
  *(_QWORD *)&v43 = 0;
  WORD4(v43) = 512;
  HIDWORD(v43) = 1;
  v44 = 0;
  v45 = 0;
LABEL_75:
  v34 = **(_QWORD **)(a1 + 8);
  if (v34)
  {
    v35 = *(unsigned int *)(v34 + 8);
    v36 = *(_QWORD *)v4;
    if ((*(_QWORD *)v4 & 0x8000000000000000) != 0)
      v37 = 63;
    else
      v37 = *(_QWORD *)(2 * v36);
    if (v37 <= v35)
    {
      WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v4, v35 + 1, 0);
      v36 = *(_QWORD *)v4;
    }
    if (v36 >= 0)
      v38 = 2 * v36 + 8;
    else
      v38 = v4;
    *(_QWORD *)(v38 + ((v35 >> 3) & 0x1FFFFFF8)) |= 1 << v35;
  }
  v39 = *((unsigned int *)this + 2);
  v40 = *(_QWORD *)v4;
  if ((*(_QWORD *)v4 & 0x8000000000000000) != 0)
    v41 = 63;
  else
    v41 = *(_QWORD *)(2 * v40);
  if (v41 <= v39)
  {
    WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v4, v39 + 1, 0);
    v40 = *(_QWORD *)v4;
  }
  if (v40 >= 0)
    v42 = 2 * v40 + 8;
  else
    v42 = v4;
  result = 1;
  *(_QWORD *)(v42 + ((v39 >> 3) & 0x1FFFFFF8)) |= 1 << v39;
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(void)#7}::operator() const(void)::{lambda(JSC::B3::Value *,unsigned long long)#1}::operator()(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  JSC::B3::_anonymous_namespace_::LowerToAir *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  JSC::B3::_anonymous_namespace_::LowerToAir *v8;
  JSC::B3::_anonymous_namespace_::LowerToAir *v9;
  uint64_t v10;
  uint64_t v11;
  uint8x8_t v12;
  __int32 v13;
  uint8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  char v32;

  v4 = *(JSC::B3::_anonymous_namespace_::LowerToAir **)a1;
  if (a2
    && ((v5 = a2[2], v6 = (unint64_t *)(2 * *(_QWORD *)v4), (*(_QWORD *)v4 & 0x8000000000000000) != 0)
      ? (v7 = 63)
      : (v7 = *v6),
        v7 > v5))
  {
    v8 = (JSC::B3::_anonymous_namespace_::LowerToAir *)(v6 + 1);
    if (*(uint64_t *)v4 >= 0)
      v9 = v8;
    else
      v9 = *(JSC::B3::_anonymous_namespace_::LowerToAir **)a1;
    v10 = (*(_QWORD *)((char *)v9 + ((v5 >> 3) & 0x1FFFFFF8)) >> v5) & 1;
  }
  else
  {
    LOBYTE(v10) = 0;
  }
  v11 = 0;
  if (a3 && (v10 & 1) == 0)
  {
    if (((a3 + 1) & a3) != 0)
      return 0;
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)a3);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.i32[0];
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(a3));
    v14.i16[0] = vaddlv_u8(v14);
    v15 = (v14.i32[0] + v13);
    v16 = **(_QWORD **)(a1 + 16);
    v17 = __CFADD__(v16, v15);
    v18 = v16 + v15;
    if (v17)
      return 0;
    v19 = **(unsigned __int16 **)(a1 + 8);
    v20 = 64;
    if (v19 == 144)
      v20 = 32;
    if (v18 > v20)
      return 0;
    v22 = **(_QWORD **)(a1 + 24);
    v23 = *(_WORD *)(v22 + 12) & 0xFFF;
    if (v22 && v23 == 3)
    {
      v26 = *(int *)(v22 + 40);
    }
    else
    {
      if (!v22 || v23 != 4)
        goto LABEL_20;
      v26 = *(_QWORD *)(v22 + 40);
    }
    if ((unint64_t)(v26 + 4095) < 0x1FFF
      || (v26 & 0xFFF) == 0
      && (!((unint64_t)v26 >> 24) || v26 >> 12 == 0 || (unint64_t)(v26 >> 12) >= 0xFFFFFFFFFFFFF001))
    {
      HIDWORD(v30) = 1;
      v31 = 0;
      v32 = 0;
      WORD4(v30) = 514;
      *(_QWORD *)&v30 = v26;
      goto LABEL_21;
    }
LABEL_20:
    *(_QWORD *)&v30 = 0;
    WORD4(v30) = 512;
    HIDWORD(v30) = 1;
    v31 = 0;
    v32 = 0;
LABEL_21:
    v11 = 1;
    HIDWORD(v27) = 1;
    v28 = 0;
    v29 = 0;
    WORD4(v27) = 514;
    *(_QWORD *)&v27 = v15;
  }
  return v11;
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Tmp,JSC::B3::Air::Arg,JSC::B3::Air::Tmp>(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  WTF *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  int v30;
  int v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  int v38;
  int v39;
  char v40;
  _BYTE v41[12];
  _OWORD v42[2];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v10 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v11 = *(_QWORD *)(a1 + 400);
    *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)a4 + 9);
    v42[0] = *a4;
    v25 = (WTF *)&v27;
    v27 = 0;
    v28 = 513;
    v29 = 1;
    v30 = a3;
    v31 = 0;
    v32 = 0;
    v33 = v42[0];
    v34 = v42[1];
    v35 = 0;
    v36 = 513;
    v37 = 1;
    v38 = a5;
    v39 = 0;
    v40 = 0;
    v26 = 0x300000003;
    *(_QWORD *)v41 = v11;
    *(_DWORD *)&v41[8] = (_DWORD)a2;
    v12 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v12 == *(_DWORD *)(v10 + 8))
    {
      WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v10, (unint64_t)&v25, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else
    {
      v13 = *(_QWORD *)v10;
      v14 = *(_QWORD *)v10 + (v12 << 7);
      v15 = (_OWORD *)(v14 + 16);
      *(_QWORD *)v14 = v14 + 16;
      *(_QWORD *)(v14 + 8) = 3;
      v16 = v25;
      if (v25 == (WTF *)&v27)
      {
        if (HIDWORD(v26))
        {
          v17 = 32 * HIDWORD(v26);
          v18 = (__int128 *)&v27;
          do
          {
            v19 = *v18;
            v20 = v18[1];
            v18 += 2;
            *v15 = v19;
            v15[1] = v20;
            v15 += 2;
            v17 -= 32;
          }
          while (v17);
        }
      }
      else
      {
        v25 = (WTF *)&v27;
        *(_QWORD *)v14 = v16;
        *(_DWORD *)(v14 + 8) = v26;
      }
      v21 = HIDWORD(v26);
      HIDWORD(v26) = 0;
      *(_DWORD *)(v14 + 12) = v21;
      v22 = v13 + (v12 << 7);
      v23 = *(_QWORD *)v41;
      *(_DWORD *)(v22 + 119) = *(_DWORD *)&v41[7];
      *(_QWORD *)(v22 + 112) = v23;
      ++*(_DWORD *)(v10 + 12);
    }
    v24 = v25;
    if (&v27 != (uint64_t *)v25)
    {
      if (v25)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        WTF::fastFree((unint64_t)v24, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::append<JSC::B3::Air::Tmp,JSC::B3::Air::Arg &>(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  WTF *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  int v30;
  int v31;
  char v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[12];
  _OWORD v36[2];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 364);
  if (v8)
  {
    v10 = *(_QWORD *)(a1 + 352) + 528 * v8 - 528;
    v11 = *(_QWORD *)(a1 + 400);
    *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)((char *)a4 + 9);
    v36[0] = *a4;
    v25 = (WTF *)&v27;
    v27 = 0;
    v28 = 513;
    v29 = 1;
    v30 = a3;
    v31 = 0;
    v32 = 0;
    v33 = v36[0];
    v34 = v36[1];
    v26 = 0x200000003;
    *(_QWORD *)v35 = v11;
    *(_DWORD *)&v35[8] = (_DWORD)a2;
    v12 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v12 == *(_DWORD *)(v10 + 8))
    {
      WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v10, (unint64_t)&v25, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    else
    {
      v13 = *(_QWORD *)v10;
      v14 = *(_QWORD *)v10 + (v12 << 7);
      v15 = (_OWORD *)(v14 + 16);
      *(_QWORD *)v14 = v14 + 16;
      *(_QWORD *)(v14 + 8) = 3;
      v16 = v25;
      if (v25 == (WTF *)&v27)
      {
        if (HIDWORD(v26))
        {
          v17 = 32 * HIDWORD(v26);
          v18 = (__int128 *)&v27;
          do
          {
            v19 = *v18;
            v20 = v18[1];
            v18 += 2;
            *v15 = v19;
            v15[1] = v20;
            v15 += 2;
            v17 -= 32;
          }
          while (v17);
        }
      }
      else
      {
        v25 = (WTF *)&v27;
        *(_QWORD *)v14 = v16;
        *(_DWORD *)(v14 + 8) = v26;
      }
      v21 = HIDWORD(v26);
      HIDWORD(v26) = 0;
      *(_DWORD *)(v14 + 12) = v21;
      v22 = v13 + (v12 << 7);
      v23 = *(_QWORD *)v35;
      *(_DWORD *)(v22 + 119) = *(_DWORD *)&v35[7];
      *(_QWORD *)(v22 + 112) = v23;
      ++*(_DWORD *)(v10 + 12);
    }
    v24 = v25;
    if (&v27 != (uint64_t *)v25)
    {
      if (v25)
      {
        v25 = 0;
        LODWORD(v26) = 0;
        WTF::fastFree((unint64_t)v24, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
    }
  }
  else
  {
    __break(0xC471u);
  }
}

double JSC::B3::`anonymous namespace'::LowerToAir::loadPromiseAnyOpcode(uint64_t a1, uint64_t a2, JSC::B3::Value *this, int a4)
{
  uint64_t v7;
  double result;
  unint64_t v10;
  uint64_t v11;
  JSC::B3::Value *v12;
  JSC::B3::Value *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[24];

  if (!this || *((unsigned __int8 *)this + 12) - 79 <= 0xFFFFFFEF)
  {
    __break(0xC471u);
    goto LABEL_26;
  }
  v7 = *((unsigned int *)this + 2);
  if (*(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v7)
    || *(_DWORD *)(*(_QWORD *)(a2 + 80) + 8 * v7) != 1
    || *((_QWORD *)this + 4) != *(_QWORD *)(*(_QWORD *)(a2 + 400) + 32))
  {
LABEL_5:
    *(_QWORD *)a1 = 0;
    *(_WORD *)(a1 + 8) = 512;
    *(_DWORD *)(a1 + 12) = 1;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 39) = 0;
    return result;
  }
  JSC::B3::Value::effects((uint64_t)this, (uint64_t)&v15);
  v10 = *(unsigned int *)(a2 + 396) - 1;
  while (1)
  {
    if (v10 == -1)
      goto LABEL_5;
    v11 = *(_QWORD *)(a2 + 384);
    if (v10 >= *(unsigned int *)(v11 + 20))
    {
      __break(0xC471u);
LABEL_26:
      JUMPOUT(0x197FD1320);
    }
    v12 = *(JSC::B3::Value **)(*(_QWORD *)(v11 + 8) + 8 * v10);
    if (v12 == this)
      break;
    JSC::B3::Value::effects((uint64_t)v12, (uint64_t)v17);
    --v10;
    if (JSC::B3::Effects::interferes((uint64_t)&v15, (uint64_t)v17))
      goto LABEL_5;
  }
  if (*((unsigned __int8 *)this + 12) - 63 >= 0x10)
    v13 = 0;
  else
    v13 = this;
  if (*((_DWORD *)v13 + 13) != *((_DWORD *)v13 + 14))
    goto LABEL_5;
  if (!(_QWORD)v15 && !BYTE8(v15) && !(_QWORD)v16 && HIDWORD(v15) == 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197FD1340);
  }
  result = *(double *)&v15;
  v14 = v16;
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 32) = this;
  *(_WORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 42) = (*((_WORD *)this + 6) & 0x200) != 0;
  return result;
}

__n128 JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise::swap(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  uint64_t v5;
  __n128 v6;

  v2 = *a1;
  v3 = *(__int128 *)((char *)a2 + 9);
  *a1 = *a2;
  *(__int128 *)((char *)a1 + 9) = v3;
  *a2 = v2;
  result = v6;
  *(__int128 *)((char *)a2 + 9) = (__int128)v6;
  v5 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  LOBYTE(v5) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v5;
  LOBYTE(v5) = *((_BYTE *)a1 + 41);
  *((_BYTE *)a1 + 41) = *((_BYTE *)a2 + 41);
  *((_BYTE *)a2 + 41) = v5;
  LOBYTE(v5) = *((_BYTE *)a1 + 42);
  *((_BYTE *)a1 + 42) = *((_BYTE *)a2 + 42);
  *((_BYTE *)a2 + 42) = v5;
  return result;
}

double JSC::B3::`anonymous namespace'::LowerToAir::tryAppendStoreBinOp<(JSC::B3::Air::Opcode)9,(JSC::B3::Air::Opcode)10,(JSC::B3::Commutativity)1>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::B3::Value *)#1}::operator()(uint64_t a1, uint64_t a2, JSC::B3::Value *a3)
{
  int v3;
  unsigned int v4;
  double result;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 400) + 12);
  if (v3 == 70)
  {
    if (*((_BYTE *)a3 + 12) != 67)
    {
LABEL_3:
      *(_QWORD *)a1 = 0;
      *(_WORD *)(a1 + 8) = 512;
      *(_DWORD *)(a1 + 12) = 1;
      *(_QWORD *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 39) = 0;
      return result;
    }
  }
  else
  {
    if (v3 == 68)
    {
      v4 = *((unsigned __int8 *)a3 + 12) - 63;
    }
    else
    {
      if (v3 != 69)
        goto LABEL_3;
      v4 = *((unsigned __int8 *)a3 + 12) - 65;
    }
    if (v4 >= 2)
      goto LABEL_3;
  }
}

double JSC::B3::`anonymous namespace'::LowerToAir::createStore(uint64_t a1, JSC::B3::_anonymous_namespace_::LowerToAir *this, int a3, JSC::B3::Value *a4, __int128 *a5)
{
  int v10;
  uint64_t v11;
  unsigned int v12;
  double result;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  __int16 v19;
  int v20;
  int v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;

  v10 = *((_WORD *)a4 + 6) & 0xFFF;
  if (a4 && v10 == 3)
  {
    v14 = *((int *)a4 + 10);
  }
  else
  {
    if (!a4 || v10 != 4)
      goto LABEL_5;
    v14 = *((_QWORD *)a4 + 5);
  }
  if ((unint64_t)(v14 + 4095) < 0x1FFF)
  {
    if (!v14)
    {
      v16 = (__int16)a3;
      if ((unsigned __int16)a3 == 90)
      {
        v17 = *((char *)a5 + 8);
        if (v17 != 7 && (v17 > 0xB || ((1 << v17) & 0xE02) == 0))
          goto LABEL_15;
        v18 = (unsigned int *)a5;
        v19 = 259;
      }
      else
      {
        switch((_DWORD)v16)
        {
          case 0x5E:
            v20 = *((char *)a5 + 8);
            if ((v20 - 9) >= 3 && v20 != 7 && v20 != 1)
              goto LABEL_15;
            v18 = (unsigned int *)a5;
            v19 = 258;
            break;
          case 0x84:
            v21 = *((char *)a5 + 8);
            if ((v21 - 9) >= 3 && v21 != 7)
              goto LABEL_15;
            v18 = (unsigned int *)a5;
            v16 = 90;
            v19 = 257;
            break;
          case 0x7C:
            v22 = *((char *)a5 + 8);
            if (v22 > 0xB || ((1 << v22) & 0xE80) == 0)
              goto LABEL_15;
            v18 = (unsigned int *)a5;
            v16 = 90;
            v19 = 256;
            break;
          default:
            goto LABEL_15;
        }
      }
      if (JSC::B3::Air::Arg::isValidForm(v18, v16, v19))
      {
        v11 = *((_QWORD *)this + 50);
        *(__int128 *)((char *)&v24 - 7) = *(__int128 *)((char *)a5 + 9);
        v23 = *a5;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = a1 + 16;
        v15 = 532;
        goto LABEL_24;
      }
    }
LABEL_15:
    if ((unsigned __int16)a3 != 90)
    {
      switch((__int16)a3)
      {
        case 1:
        case 6:
        case 9:
        case 10:
          break;
        default:
          goto LABEL_5;
      }
    }
    if (*((_BYTE *)a5 + 8) != 1)
      goto LABEL_5;
    v11 = *((_QWORD *)this + 50);
    *(__int128 *)((char *)&v24 - 7) = *(__int128 *)((char *)a5 + 9);
    v23 = *a5;
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)a1 = a1 + 16;
    v15 = 514;
LABEL_24:
    *(_WORD *)(a1 + 24) = v15;
    *(_DWORD *)(a1 + 28) = 1;
    *(_QWORD *)(a1 + 32) = 0;
    goto LABEL_6;
  }
  if ((v14 & 0xFFF) == 0 && (!((unint64_t)v14 >> 24) || (unint64_t)((v14 >> 12) + 4095) < 0x1000))
    goto LABEL_15;
LABEL_5:
  v11 = *((_QWORD *)this + 50);
  *(__int128 *)((char *)&v24 - 7) = *(__int128 *)((char *)a5 + 9);
  v23 = *a5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 16;
  *(_WORD *)(a1 + 24) = 513;
  *(_DWORD *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 32) = v12;
LABEL_6:
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v23;
  *(_OWORD *)(a1 + 64) = v24;
  *(_QWORD *)&result = 0x200000003;
  *(_QWORD *)(a1 + 8) = 0x200000003;
  *(_QWORD *)(a1 + 112) = v11;
  *(_DWORD *)(a1 + 120) = a3;
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::tryAppendStoreBinOp<(JSC::B3::Air::Opcode)5,(JSC::B3::Air::Opcode)445,(JSC::B3::Commutativity)0>(JSC::B3::Value *,JSC::B3::Value *)::{lambda(JSC::B3::Value *)#1}::operator()(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  unsigned int v4;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 400) + 12);
  if (v3 == 69)
  {
    v4 = a3[12] - 65;
  }
  else
  {
    if (v3 != 68)
    {
      if (v3 == 70 && a3[12] == 67)
        goto LABEL_4;
      goto LABEL_8;
    }
    v4 = a3[12] - 63;
  }
  if (v4 < 2)
  {
LABEL_4:
    return;
  }
LABEL_8:
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 512;
  *(_DWORD *)(a1 + 12) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 39) = 0;
}

uint64_t *JSC::B3::Air::Inst::Inst<JSC::B3::Air::Arg,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>(uint64_t *a1, int a2, uint64_t a3, __int128 *a4, __int128 *a5, int a6, int a7, int a8)
{
  __int128 v10;
  __int128 v11;
  uint64_t *result;
  __int128 v13[2];
  _OWORD v14[2];
  uint64_t v15;
  __int16 v16;
  int v17;
  int v18;
  int v19;
  char v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v10 = *(__int128 *)((char *)a4 + 9);
  v11 = *a5;
  v13[0] = *a4;
  *(__int128 *)((char *)v13 + 9) = v10;
  v14[0] = v11;
  *(_OWORD *)((char *)v14 + 9) = *(__int128 *)((char *)a5 + 9);
  v15 = 0;
  v16 = 513;
  v17 = 1;
  v18 = a6;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 513;
  v23 = 1;
  v24 = a7;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 513;
  v29 = 1;
  v30 = a8;
  v31 = 0;
  v32 = 0;
  result = WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1, v13, 5uLL);
  result[14] = a3;
  *((_DWORD *)result + 30) = a2;
  return result;
}

unint64_t WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  result = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + (v4 << 7);
  v7 = (_OWORD *)(v6 + 16);
  *(_QWORD *)v6 = v6 + 16;
  *(_QWORD *)(v6 + 8) = 3;
  v8 = *(__int128 **)result;
  if (*(_QWORD *)result == result + 16)
  {
    v9 = *(unsigned int *)(result + 12);
    if ((_DWORD)v9)
    {
      v10 = 32 * v9;
      do
      {
        v11 = *v8;
        v12 = v8[1];
        v8 += 2;
        *v7 = v11;
        v7[1] = v12;
        v7 += 2;
        v10 -= 32;
      }
      while (v10);
    }
  }
  else
  {
    *(_QWORD *)result = result + 16;
    *(_QWORD *)v6 = v8;
    v16 = *(_DWORD *)(result + 8);
    *(_DWORD *)(result + 8) = 3;
    *(_DWORD *)(v6 + 8) = v16;
  }
  v13 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(v6 + 12) = v13;
  v14 = v5 + (v4 << 7);
  v15 = *(_QWORD *)(result + 112);
  *(_DWORD *)(v14 + 119) = *(_DWORD *)(result + 119);
  *(_QWORD *)(v14 + 112) = v15;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + ((unint64_t)*(unsigned int *)(a1 + 12) << 7) > a3)
  {
    v8 = a3 - v4;
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 25))
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = WTF::fastMalloc((WTF *)(a2 << 7));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    if ((_DWORD)v5)
    {
      v14 = v6;
      v15 = v4;
      do
      {
        *(_QWORD *)v14 = v14 + 16;
        *(_QWORD *)(v14 + 8) = 3;
        v16 = v15 + 16;
        v17 = *(_QWORD *)v15;
        if (*(_QWORD *)v15 == v15 + 16)
        {
          v18 = *(unsigned int *)(v15 + 12);
          if ((_DWORD)v18)
          {
            v19 = 0;
            v20 = 32 * v18;
            do
            {
              v21 = v14 + v19;
              v22 = *(_OWORD *)(v17 + v19 + 16);
              *(_OWORD *)(v21 + 16) = *(_OWORD *)(v17 + v19);
              *(_OWORD *)(v21 + 32) = v22;
              v19 += 32;
            }
            while (v20 != v19);
          }
        }
        else
        {
          *(_QWORD *)v15 = v16;
          *(_QWORD *)v14 = v17;
          v26 = *(_DWORD *)(v15 + 8);
          *(_DWORD *)(v15 + 8) = 3;
          *(_DWORD *)(v14 + 8) = v26;
        }
        v23 = *(_DWORD *)(v15 + 12);
        *(_DWORD *)(v15 + 12) = 0;
        *(_DWORD *)(v14 + 12) = v23;
        v24 = *(_QWORD *)(v15 + 112);
        *(_DWORD *)(v14 + 119) = *(_DWORD *)(v15 + 119);
        *(_QWORD *)(v14 + 112) = v24;
        v25 = *(_QWORD *)v15;
        if (v16 != *(_QWORD *)v15 && v25)
        {
          *(_QWORD *)v15 = 0;
          *(_DWORD *)(v15 + 8) = 0;
          WTF::fastFree(v25, v7, v8, v9, v10, v11, v12, v13);
        }
        v14 += 128;
        v15 += 128;
      }
      while (v15 != v4 + (v5 << 7));
    }
    if (v4)
    {
      if (*(_QWORD *)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unint64_t WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  result = WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2, a4, a5, a6, a7, a8);
  v10 = *(unsigned int *)(a1 + 12);
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)a1 + (v10 << 7);
  v13 = (_OWORD *)(v12 + 16);
  *(_QWORD *)v12 = v12 + 16;
  *(_QWORD *)(v12 + 8) = 3;
  v14 = *(__int128 **)result;
  if (*(_QWORD *)result == result + 16)
  {
    v15 = *(unsigned int *)(result + 12);
    if ((_DWORD)v15)
    {
      v16 = 32 * v15;
      do
      {
        v17 = *v14;
        v18 = v14[1];
        v14 += 2;
        *v13 = v17;
        v13[1] = v18;
        v13 += 2;
        v16 -= 32;
      }
      while (v16);
    }
  }
  else
  {
    *(_QWORD *)result = result + 16;
    *(_QWORD *)v12 = v14;
    v22 = *(_DWORD *)(result + 8);
    *(_DWORD *)(result + 8) = 3;
    *(_DWORD *)(v12 + 8) = v22;
  }
  v19 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(v12 + 12) = v19;
  v20 = v11 + (v10 << 7);
  v21 = *(_QWORD *)(result + 112);
  *(_DWORD *)(v20 + 119) = *(_DWORD *)(result + 119);
  *(_QWORD *)(v20 + 112) = v21;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v9 + ((unint64_t)*(unsigned int *)(a1 + 12) << 7) > a3)
  {
    v13 = a3 - v9;
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v13;
  }
  else
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return v8;
}

void WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v8 = a2;
    v10 = *(_QWORD *)a1;
    v11 = *(unsigned int *)(a1 + 12);
    if (a2 < 5)
    {
      v12 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (a2 >> 25)
      {
        __break(0xC471u);
        return;
      }
      v12 = WTF::fastMalloc((WTF *)(a2 << 7));
      *(_DWORD *)(a1 + 8) = v8;
      *(_QWORD *)a1 = v12;
    }
    if ((_DWORD)v11)
    {
      v13 = v10;
      do
      {
        *(_QWORD *)v12 = v12 + 16;
        *(_QWORD *)(v12 + 8) = 3;
        v14 = v13 + 16;
        v15 = *(_QWORD *)v13;
        if (*(_QWORD *)v13 == v13 + 16)
        {
          v16 = *(unsigned int *)(v13 + 12);
          if ((_DWORD)v16)
          {
            v17 = 0;
            v18 = 32 * v16;
            do
            {
              v19 = v12 + v17;
              v20 = *(_OWORD *)(v15 + v17 + 16);
              *(_OWORD *)(v19 + 16) = *(_OWORD *)(v15 + v17);
              *(_OWORD *)(v19 + 32) = v20;
              v17 += 32;
            }
            while (v18 != v17);
          }
        }
        else
        {
          *(_QWORD *)v13 = v14;
          *(_QWORD *)v12 = v15;
          v24 = *(_DWORD *)(v13 + 8);
          *(_DWORD *)(v13 + 8) = 3;
          *(_DWORD *)(v12 + 8) = v24;
        }
        v21 = *(_DWORD *)(v13 + 12);
        *(_DWORD *)(v13 + 12) = 0;
        *(_DWORD *)(v12 + 12) = v21;
        v22 = *(_QWORD *)(v13 + 112);
        *(_DWORD *)(v12 + 119) = *(_DWORD *)(v13 + 119);
        *(_QWORD *)(v12 + 112) = v22;
        v23 = *(_QWORD *)v13;
        if (v14 != *(_QWORD *)v13 && v23)
        {
          *(_QWORD *)v13 = 0;
          *(_DWORD *)(v13 + 8) = 0;
          WTF::fastFree(v23, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v12 += 128;
        v13 += 128;
      }
      while (v13 != v10 + (v11 << 7));
    }
    if (a1 + 16 != v10 && v10 != 0)
    {
      if (*(_QWORD *)a1 == v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

double JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::Width,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise&&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise&)#1}::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;

  if (!*(_QWORD *)(a1 + 112) && !*(_WORD *)(a1 + 120) && (*(_BYTE *)(a1 + 122) & 3) == 0 && !*(_DWORD *)(a1 + 12))
  {
    v19 = a1 + 16;
    v18 = *(_QWORD *)a1;
    if (a1 + 16 != *(_QWORD *)a1 && v18)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
    }
    if (!*(_QWORD *)(a1 + 112) && !*(_WORD *)(a1 + 120))
    {
      v27 = *(_BYTE *)(a1 + 122);
      if ((v27 & 3) == 0 && !*(_DWORD *)(a1 + 12))
      {
        v28 = *(_QWORD *)a1;
        if (v19 != *(_QWORD *)a1)
        {
          if (v28)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v28, v20, v21, v22, v23, v24, v25, v26);
            v27 = *(_BYTE *)(a1 + 122);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)&result = 3;
        *(_QWORD *)(a1 + 8) = 3;
        *(_QWORD *)(a1 + 112) = 0;
        *(_WORD *)(a1 + 120) = 0;
        *(_BYTE *)(a1 + 122) = v27 & 0xFC;
      }
    }
  }
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}::operator()(uint64_t a1, JSC::B3::Value **this, int a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  __int128 v16;
  JSC::B3::Value *v17;
  WTF *v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  _OWORD *v23;
  __int128 v24;
  char *v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  _OWORD v40[2];
  _BYTE v41[25];
  WTF *v42;
  uint64_t v43;
  _BYTE v44[96];
  _BYTE v45[12];
  _BYTE v46[32];
  _BYTE v47[32];
  _BYTE v48[32];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  switch(a3)
  {
    case 2:
      v11 = *(unsigned __int8 *)(a5 + 8);
      if (*(_QWORD *)a5)
        v12 = 0;
      else
        v12 = v11 == 0;
      if (v12)
      {
        v11 = 0;
        if (!*(_DWORD *)(a5 + 16) && !*(_DWORD *)(a5 + 20) && *(_DWORD *)(a5 + 12) == 1)
          v11 = *(_QWORD *)(a5 + 32) != 0;
      }
      v13 = *(unsigned __int8 *)(a6 + 8);
      if (*(_QWORD *)a6)
        v14 = 0;
      else
        v14 = v13 == 0;
      if (v14)
      {
        v13 = 0;
        if (!*(_DWORD *)(a6 + 16) && !*(_DWORD *)(a6 + 20) && *(_DWORD *)(a6 + 12) == 1)
          v13 = *(_QWORD *)(a6 + 32) != 0;
      }
      if (v11 != 1 || v13 != 1 && (char)v13 != 4)
        goto LABEL_46;
      v16 = *(_OWORD *)((char *)a4 + 9);
      *(_OWORD *)v46 = *a4;
      *(_OWORD *)&v46[9] = v16;
      v17 = this[50];
      *(_OWORD *)v47 = *(_OWORD *)v41;
      *(_OWORD *)&v47[9] = *(_OWORD *)&v41[9];
      *(_OWORD *)v48 = v40[0];
      *(_OWORD *)&v48[9] = *(_OWORD *)((char *)v40 + 9);
      v42 = (WTF *)v44;
      v43 = 3;
      v18 = (WTF *)WTF::fastMalloc((WTF *)0x80);
      LODWORD(v43) = 4;
      v42 = v18;
      v19 = (_OWORD *)((char *)v18 + 32 * HIDWORD(v43));
      v20 = *(_OWORD *)&v46[16];
      *v19 = *(_OWORD *)v46;
      v19[1] = v20;
      ++HIDWORD(v43);
      v21 = (_OWORD *)((char *)v42 + 32 * HIDWORD(v43));
      v22 = *(_OWORD *)&v47[16];
      *v21 = *(_OWORD *)v47;
      v21[1] = v22;
      ++HIDWORD(v43);
      v23 = (_OWORD *)((char *)v42 + 32 * HIDWORD(v43));
      v24 = *(_OWORD *)&v48[16];
      *v23 = *(_OWORD *)v48;
      v23[1] = v24;
      ++HIDWORD(v43);
      v25 = (char *)v42 + 32 * HIDWORD(v43);
      *(_QWORD *)v25 = 0;
      *((_WORD *)v25 + 4) = 513;
      *((_DWORD *)v25 + 3) = 1;
      *((_DWORD *)v25 + 4) = v15;
      *((_DWORD *)v25 + 5) = 0;
      v25[24] = 0;
      v26 = HIDWORD(v43) + 1;
      *(_QWORD *)v45 = v17;
      *(_DWORD *)&v45[8] = 284;
      v45[10] = *(_BYTE *)(a6 + 42);
      *(_BYTE *)(a6 + 41) = 1;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
      if (v42 == (WTF *)v44)
      {
        if (v26)
          memcpy((void *)(a1 + 16), v44, 32 * v26);
      }
      else
      {
        *(_QWORD *)a1 = v42;
        *(_DWORD *)(a1 + 8) = v43;
      }
      *(_DWORD *)(a1 + 12) = v26;
      *(_DWORD *)(a1 + 119) = *(_DWORD *)&v45[7];
      *(_QWORD *)(a1 + 112) = *(_QWORD *)v45;
      *(_BYTE *)(a1 + 122) |= *(_BYTE *)(a5 + 42);
      *(_BYTE *)(a5 + 41) = 1;
      break;
    case 3:
      v27 = *(unsigned __int8 *)(a5 + 8);
      if (*(_QWORD *)a5)
        v28 = 0;
      else
        v28 = v27 == 0;
      if (v28)
      {
        v27 = 0;
        if (!*(_DWORD *)(a5 + 16) && !*(_DWORD *)(a5 + 20) && *(_DWORD *)(a5 + 12) == 1)
          v27 = *(_QWORD *)(a5 + 32) != 0;
      }
      v29 = *(unsigned __int8 *)(a6 + 8);
      if (*(_QWORD *)a6)
        v30 = 0;
      else
        v30 = v29 == 0;
      if (v30)
      {
        v29 = 0;
        if (!*(_DWORD *)(a6 + 16) && !*(_DWORD *)(a6 + 20) && *(_DWORD *)(a6 + 12) == 1)
          v29 = *(_QWORD *)(a6 + 32) != 0;
      }
      if (v27 != 1 || v29 != 1)
        goto LABEL_46;
      v39 = v42;
      if (v44 != (_BYTE *)v42 && v42)
      {
        v42 = 0;
        LODWORD(v43) = 0;
        WTF::fastFree((unint64_t)v39, v32, v33, v34, v35, v36, v37, v38);
      }
      break;
    case 4:
      __break(0xC471u);
      JUMPOUT(0x197FD232CLL);
    default:
LABEL_46:
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 3;
      *(_QWORD *)(a1 + 112) = 0;
      *(_WORD *)(a1 + 120) = 0;
      *(_BYTE *)(a1 + 122) &= 0xFCu;
      break;
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)#1}::operator()(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  JSC::B3::_anonymous_namespace_::LowerToAir *v6;
  JSC::B3::Value *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  unsigned int v13;
  unsigned __int8 v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  BOOL v32;
  int v33;
  int v34;
  JSC::B3::Value **v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 v55;
  JSC::B3::Value **v56;
  int v57;
  JSC::B3::Value *v58;
  uint64_t v59;
  void *v60;
  unsigned int v61;
  int v62;
  int v63;
  JSC::B3::Value *v64;
  WTF *v65;
  _OWORD *v66;
  char *v67;
  char *v68;
  char *v69;
  unsigned int v70;
  WTF *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  __int128 v84;
  WTF *v85;
  WTF *v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  __int128 v94;
  WTF *v95;
  WTF *v96;
  WTF *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  __int128 v109;
  int v110;
  WTF *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  __int128 v123;
  WTF *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  __int128 v129;
  __int16 v130;
  int v131;
  char v132;
  char v133;
  int v134;
  __int128 v135;
  __int128 v136;
  JSC::B3::Value *v137[3];
  _QWORD v138[4];
  _QWORD v139[2];
  JSC::B3::Value *v140;
  _BYTE v141[25];
  __int128 v142;
  uint64_t v143;
  char v144;
  WTF *v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  __int16 v152;
  int v153;
  int v154;
  int v155;
  char v156;
  _BYTE v157[12];
  _BYTE v158[32];
  _BYTE v159[32];
  _BYTE v160[32];
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v6 = *(JSC::B3::_anonymous_namespace_::LowerToAir **)(a2 + 16);
  if (**(_BYTE **)a2)
  {
    HIDWORD(v142) = 1;
    v143 = 0;
    v144 = 0;
    WORD4(v142) = 526;
    *(_QWORD *)&v142 = a3 ^ 1;
    if (a4 >= 0xE || ((0x3FCFu >> a4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197FD2D38);
    }
    v41 = qword_19914FAD8[a4];
    *(_DWORD *)&v141[12] = 1;
    *(_QWORD *)&v141[16] = 0;
    v141[24] = 0;
    *(_WORD *)&v141[8] = 528;
    *(_QWORD *)v141 = v41;
  }
  else
  {
    *(_QWORD *)&v142 = a3;
    WORD4(v142) = 526;
    HIDWORD(v142) = 1;
    v143 = 0;
    v144 = 0;
    *(_QWORD *)v141 = a4;
    *(_WORD *)&v141[8] = 528;
    *(_DWORD *)&v141[12] = 1;
    *(_QWORD *)&v141[16] = 0;
    v141[24] = 0;
  }
  v7 = *(JSC::B3::Value **)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0);
  v140 = v7;
  v8 = *(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 1u);
  v9 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16);
  if (v9 >= 0x80000000)
    v9 = 0x80000000;
  if (v9 - 1 <= 1)
  {
    v10 = *(_WORD *)(v8 + 12) & 0xFFF;
    if (v8)
      v11 = v10 == 3;
    else
      v11 = 0;
    if (v11)
    {
      v29 = *(int *)(v8 + 40);
    }
    else
    {
      if (v8)
        v12 = v10 == 4;
      else
        v12 = 0;
      if (!v12)
        goto LABEL_14;
      v29 = *(_QWORD *)(v8 + 40);
    }
    if ((unint64_t)(v29 + 4095) < 0x1FFF
      || (v29 & 0xFFF) == 0
      && (!((unint64_t)v29 >> 24) || v29 >> 12 == 0 || (unint64_t)(v29 >> 12) >= 0xFFFFFFFFFFFFF001))
    {
      *(_DWORD *)&v158[12] = 1;
      *(_QWORD *)&v158[16] = 0;
      v158[24] = 0;
      *(_WORD *)&v158[8] = 514;
      *(_QWORD *)v158 = v29;
LABEL_15:
      v139[0] = *(_QWORD *)(a2 + 24);
      v139[1] = &v142;
      v138[0] = v158;
      v138[1] = v139;
      v138[2] = v6;
      v138[3] = &v140;
      v13 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16);
      if (v13 >= 0x80000000)
        v13 = 0x80000000;
      if (v13 >= 6)
        v14 = 0;
      else
        v14 = 0x40302030200uLL >> (8 * v13);
      if (!**(_BYTE **)(a2 + 32))
      {
LABEL_225:
        if (*(_QWORD *)v158)
        {
          if (*(_QWORD *)v158 != *(int *)v158)
          {
LABEL_229:
            v145 = 0;
            LOWORD(v146) = 512;
            HIDWORD(v146) = 1;
            *(_QWORD *)&v147 = 0;
            BYTE8(v147) = 0;
            WORD4(v148) = 0;
            BYTE10(v148) = 0;
            *(_QWORD *)&v148 = v140;
            *(_QWORD *)v159 = 0;
            *(_WORD *)&v159[8] = 512;
            *(_DWORD *)&v159[12] = 1;
            *(_QWORD *)&v159[16] = 0;
            v159[24] = 0;
            *(_WORD *)&v160[8] = 0;
            v160[10] = 0;
            *(_QWORD *)v160 = v8;
            if (v160[8] && !v160[9])
            {
              __break(0xC471u);
              JUMPOUT(0x197FD3674);
            }
            if (BYTE8(v148) && !BYTE9(v148))
            {
              __break(0xC471u);
              JUMPOUT(0x197FD34A0);
            }
            return;
          }
        }
        else if (!v158[8] && !*(_QWORD *)&v158[16] && *(_DWORD *)&v158[12] == 1)
        {
          goto LABEL_229;
        }
        *(_QWORD *)v159 = 0;
        *(_WORD *)&v159[8] = 512;
        *(_DWORD *)&v159[12] = 1;
        *(_QWORD *)&v159[16] = 0;
        v159[24] = 0;
        *(_WORD *)&v160[8] = 0;
        v160[10] = 0;
        *(_QWORD *)v160 = v140;
        v135 = *(_OWORD *)v158;
        v136 = *(_OWORD *)&v158[16];
        memset(v137, 0, 11);
        if (LOBYTE(v137[1]) && !BYTE1(v137[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FD3634);
        }
        if (v160[8] && !v160[9])
        {
          __break(0xC471u);
          JUMPOUT(0x197FD3654);
        }
        if (!*(_QWORD *)v157 && !*(_WORD *)&v157[8] && (v157[10] & 3) == 0 && !HIDWORD(v146))
        {
          v124 = v145;
          if (&v147 != (__int128 *)v145 && v145)
          {
            v145 = 0;
            LODWORD(v146) = 0;
            WTF::fastFree((unint64_t)v124, v16, v17, v18, v19, v20, v21, v22);
          }
          goto LABEL_229;
        }
        *(_QWORD *)a1 = a1 + 16;
        *(_QWORD *)(a1 + 8) = 3;
        v23 = v145;
        if (v145 == (WTF *)&v147)
        {
          v24 = HIDWORD(v146);
          if (HIDWORD(v146))
          {
            v120 = 0;
            v121 = 32 * HIDWORD(v146);
            do
            {
              v122 = (_OWORD *)(a1 + 16 + v120);
              v123 = *(_OWORD *)((char *)v23 + v120 + 16);
              *v122 = *(_OWORD *)((char *)v23 + v120);
              v122[1] = v123;
              v120 += 32;
            }
            while (v121 != v120);
          }
          goto LABEL_248;
        }
LABEL_247:
        *(_QWORD *)a1 = v23;
        v24 = HIDWORD(v146);
        *(_DWORD *)(a1 + 8) = v146;
        v23 = (WTF *)&v147;
        goto LABEL_248;
      }
      if (BYTE8(v142) != 14)
        goto LABEL_167;
      v15 = v142;
      if (v142 <= 0xD && ((1 << v142) & 0x3C03) != 0)
      {
        if (*(_QWORD *)v157 || *(_WORD *)&v157[8] || (v157[10] & 3) != 0 || HIDWORD(v146))
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v23 = v145;
          if (v145 != (WTF *)&v147)
            goto LABEL_247;
          v24 = HIDWORD(v146);
          if (HIDWORD(v146))
          {
            v25 = 0;
            v26 = 32 * HIDWORD(v146);
            do
            {
              v27 = (_OWORD *)(a1 + 16 + v25);
              v28 = *(_OWORD *)((char *)v23 + v25 + 16);
              *v27 = *(_OWORD *)((char *)v23 + v25);
              v27[1] = v28;
              v25 += 32;
            }
            while (v26 != v25);
          }
          goto LABEL_248;
        }
        v76 = v145;
        if (&v147 != (__int128 *)v145 && v145)
        {
          v145 = 0;
          LODWORD(v146) = 0;
          WTF::fastFree((unint64_t)v76, v16, v17, v18, v19, v20, v21, v22);
        }
        if (BYTE8(v142) != 14)
          goto LABEL_167;
        v15 = v142;
      }
      if (v15 < 4 || v15 - 8 <= 1)
      {
        if (*(_QWORD *)v157 || *(_WORD *)&v157[8] || (v157[10] & 3) != 0 || HIDWORD(v146))
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v23 = v145;
          if (v145 != (WTF *)&v147)
            goto LABEL_247;
          v24 = HIDWORD(v146);
          if (HIDWORD(v146))
          {
            v77 = 0;
            v78 = 32 * HIDWORD(v146);
            do
            {
              v79 = (_OWORD *)(a1 + 16 + v77);
              v80 = *(_OWORD *)((char *)v23 + v77 + 16);
              *v79 = *(_OWORD *)((char *)v23 + v77);
              v79[1] = v80;
              v77 += 32;
            }
            while (v78 != v77);
          }
          goto LABEL_248;
        }
        v85 = v145;
        if (&v147 != (__int128 *)v145 && v145)
        {
          v145 = 0;
          LODWORD(v146) = 0;
          WTF::fastFree((unint64_t)v85, v16, v17, v18, v19, v20, v21, v22);
        }
        if (BYTE8(v142) != 14)
          goto LABEL_167;
        v15 = v142;
      }
      if (v15 <= 0xD && ((1 << v15) & 0x3C03) != 0)
      {
        if (*(_QWORD *)v157 || *(_WORD *)&v157[8] || (v157[10] & 3) != 0 || HIDWORD(v146))
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v23 = v145;
          if (v145 != (WTF *)&v147)
            goto LABEL_247;
          v24 = HIDWORD(v146);
          if (HIDWORD(v146))
          {
            v81 = 0;
            v82 = 32 * HIDWORD(v146);
            do
            {
              v83 = (_OWORD *)(a1 + 16 + v81);
              v84 = *(_OWORD *)((char *)v23 + v81 + 16);
              *v83 = *(_OWORD *)((char *)v23 + v81);
              v83[1] = v84;
              v81 += 32;
            }
            while (v82 != v81);
          }
          goto LABEL_248;
        }
        v86 = v145;
        if (&v147 != (__int128 *)v145 && v145)
        {
          v145 = 0;
          LODWORD(v146) = 0;
          WTF::fastFree((unint64_t)v86, v16, v17, v18, v19, v20, v21, v22);
        }
        if (BYTE8(v142) != 14)
          goto LABEL_167;
        v15 = v142;
      }
      if (v15 < 4 || v15 - 8 <= 1)
      {
        if (*(_QWORD *)v157 || *(_WORD *)&v157[8] || (v157[10] & 3) != 0 || HIDWORD(v146))
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v23 = v145;
          if (v145 != (WTF *)&v147)
            goto LABEL_247;
          v24 = HIDWORD(v146);
          if (HIDWORD(v146))
          {
            v87 = 0;
            v88 = 32 * HIDWORD(v146);
            do
            {
              v89 = (_OWORD *)(a1 + 16 + v87);
              v90 = *(_OWORD *)((char *)v23 + v87 + 16);
              *v89 = *(_OWORD *)((char *)v23 + v87);
              v89[1] = v90;
              v87 += 32;
            }
            while (v88 != v87);
          }
          goto LABEL_248;
        }
        v95 = v145;
        if (&v147 != (__int128 *)v145 && v145)
        {
          v145 = 0;
          LODWORD(v146) = 0;
          WTF::fastFree((unint64_t)v95, v16, v17, v18, v19, v20, v21, v22);
        }
      }
LABEL_167:
      if (!*(_QWORD *)v157 && !*(_WORD *)&v157[8] && (v157[10] & 3) == 0 && !HIDWORD(v146))
      {
        v97 = v145;
        if (&v147 != (__int128 *)v145 && v145)
        {
          v145 = 0;
          LODWORD(v146) = 0;
          WTF::fastFree((unint64_t)v97, v16, v17, v18, v19, v20, v21, v22);
        }
        if (*((_BYTE *)v140 + 12) == 67)
        {
        }
        else
        {
          *(_QWORD *)v159 = 0;
          *(_WORD *)&v159[8] = 512;
          *(_DWORD *)&v159[12] = 1;
          *(_QWORD *)&v159[16] = 0;
          v159[24] = 0;
          *(_QWORD *)v160 = 0;
          *(_DWORD *)&v160[7] = 0;
        }
        *(_QWORD *)&v135 = 0;
        WORD4(v135) = 512;
        HIDWORD(v135) = 1;
        *(_QWORD *)&v136 = 0;
        BYTE8(v136) = 0;
        LOWORD(v137[1]) = 0;
        BYTE2(v137[1]) = 0;
        v137[0] = (JSC::B3::Value *)v8;
        if (LOBYTE(v137[1]) && !BYTE1(v137[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FD3290);
        }
        if (v160[8] && !v160[9])
        {
          __break(0xC471u);
          JUMPOUT(0x197FD32B0);
        }
        if (*(_QWORD *)v157 || *(_WORD *)&v157[8] || (v157[10] & 3) != 0 || HIDWORD(v146))
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v23 = v145;
          if (v145 == (WTF *)&v147)
          {
            v105 = HIDWORD(v146);
            if (HIDWORD(v146))
            {
              v106 = 0;
              v107 = 32 * HIDWORD(v146);
              do
              {
                v108 = (_OWORD *)(a1 + 16 + v106);
                v109 = *(_OWORD *)((char *)v23 + v106 + 16);
                *v108 = *(_OWORD *)((char *)v23 + v106);
                v108[1] = v109;
                v106 += 32;
              }
              while (v107 != v106);
            }
          }
          else
          {
            *(_QWORD *)a1 = v145;
            v105 = HIDWORD(v146);
            *(_DWORD *)(a1 + 8) = v146;
            v23 = (WTF *)&v147;
          }
          HIDWORD(v146) = 0;
          *(_DWORD *)(a1 + 12) = v105;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)v157;
          v110 = *(_DWORD *)&v157[7];
        }
        else
        {
          v111 = v145;
          if (&v147 != (__int128 *)v145 && v145)
          {
            v145 = 0;
            LODWORD(v146) = 0;
            WTF::fastFree((unint64_t)v111, v98, v99, v100, v101, v102, v103, v104);
          }
          *(_QWORD *)v159 = 0;
          *(_WORD *)&v159[8] = 512;
          *(_DWORD *)&v159[12] = 1;
          *(_QWORD *)&v159[16] = 0;
          v159[24] = 0;
          *(_WORD *)&v160[8] = 0;
          v160[10] = 0;
          *(_QWORD *)v160 = v140;
          if (*(_BYTE *)(v8 + 12) == 67)
          {
          }
          else
          {
            *(_QWORD *)&v135 = 0;
            WORD4(v135) = 512;
            HIDWORD(v135) = 1;
            *(_QWORD *)&v136 = 0;
            BYTE8(v136) = 0;
            memset(v137, 0, 11);
          }
          if (LOBYTE(v137[1]) && !BYTE1(v137[1]))
          {
            __break(0xC471u);
            JUMPOUT(0x197FD36C4);
          }
          if (v160[8] && !v160[9])
          {
            __break(0xC471u);
            JUMPOUT(0x197FD36E4);
          }
          if (!*(_QWORD *)v157 && !*(_WORD *)&v157[8] && (v157[10] & 3) == 0 && !HIDWORD(v146))
          {
            v119 = v145;
            if (&v147 != (__int128 *)v145 && v145)
            {
              v145 = 0;
              LODWORD(v146) = 0;
              WTF::fastFree((unint64_t)v119, v112, v113, v114, v115, v116, v117, v118);
            }
            goto LABEL_225;
          }
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v23 = v145;
          if (v145 == (WTF *)&v147)
          {
            v125 = HIDWORD(v146);
            if (HIDWORD(v146))
            {
              v126 = 0;
              v127 = 32 * HIDWORD(v146);
              do
              {
                v128 = (_OWORD *)(a1 + 16 + v126);
                v129 = *(_OWORD *)((char *)v23 + v126 + 16);
                *v128 = *(_OWORD *)((char *)v23 + v126);
                v128[1] = v129;
                v126 += 32;
              }
              while (v127 != v126);
            }
          }
          else
          {
            *(_QWORD *)a1 = v145;
            v125 = HIDWORD(v146);
            *(_DWORD *)(a1 + 8) = v146;
            v23 = (WTF *)&v147;
          }
          HIDWORD(v146) = 0;
          *(_DWORD *)(a1 + 12) = v125;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)v157;
          v110 = *(_DWORD *)&v157[7];
        }
        *(_DWORD *)(a1 + 119) = v110;
        if (&v147 == (__int128 *)v23)
          return;
LABEL_249:
        if (v23)
        {
          v145 = 0;
          LODWORD(v146) = 0;
          WTF::fastFree((unint64_t)v23, v16, v17, v18, v19, v20, v21, v22);
        }
        return;
      }
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 3;
      v23 = v145;
      if (v145 != (WTF *)&v147)
        goto LABEL_247;
      v24 = HIDWORD(v146);
      if (HIDWORD(v146))
      {
        v91 = 0;
        v92 = 32 * HIDWORD(v146);
        do
        {
          v93 = (_OWORD *)(a1 + 16 + v91);
          v94 = *(_OWORD *)((char *)v23 + v91 + 16);
          *v93 = *(_OWORD *)((char *)v23 + v91);
          v93[1] = v94;
          v91 += 32;
        }
        while (v92 != v91);
      }
LABEL_248:
      HIDWORD(v146) = 0;
      *(_DWORD *)(a1 + 12) = v24;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)v157;
      *(_DWORD *)(a1 + 119) = *(_DWORD *)&v157[7];
      if (&v147 == (__int128 *)v23)
        return;
      goto LABEL_249;
    }
LABEL_14:
    *(_QWORD *)v158 = 0;
    *(_WORD *)&v158[8] = 512;
    *(_DWORD *)&v158[12] = 1;
    *(_QWORD *)&v158[16] = 0;
    v158[24] = 0;
    goto LABEL_15;
  }
  *(_QWORD *)&v135 = 0;
  WORD4(v135) = 512;
  HIDWORD(v135) = 1;
  *(_QWORD *)&v136 = 0;
  BYTE8(v136) = 0;
  LOWORD(v137[1]) = 0;
  BYTE2(v137[1]) = 0;
  v137[0] = v7;
  if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16) == 4
    && v8
    && (*(_WORD *)(v8 + 12) & 0xFFF) == 5
    && !*(_QWORD *)(v8 + 40)
    && v7)
  {
    v56 = **(JSC::B3::Value ****)(a2 + 40);
    v58 = v56[50];
    *(_OWORD *)&v159[9] = *(_OWORD *)&v141[9];
    *(_OWORD *)&v160[9] = *(_OWORD *)&v158[9];
    *(_OWORD *)v159 = *(_OWORD *)v141;
    *(_OWORD *)v160 = *(_OWORD *)v158;
    v145 = (WTF *)&v147;
    v147 = *(_OWORD *)v141;
    v148 = *(_OWORD *)&v159[16];
    v149 = *(_OWORD *)v158;
    v150 = *(_OWORD *)&v160[16];
    v151 = 0;
    v152 = 513;
    v153 = 1;
    v154 = v57;
    v155 = 0;
    v156 = 0;
    v146 = 0x300000003;
    *(_QWORD *)v157 = v58;
    *(_DWORD *)&v157[8] = 288;
    v157[10] = BYTE2(v137[1]);
    BYTE1(v137[1]) = 1;
    v59 = *(unsigned int *)(v8 + 8);
    if (!*(_DWORD *)(*((_QWORD *)v6 + 1) + 4 * v59) && *(_DWORD *)(*((_QWORD *)v6 + 10) + 8 * v59) == 1)
    {
      v71 = v145;
      v60 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
      v61 = HIDWORD(v146);
      if (v71 != (WTF *)&v147)
      {
        *(_QWORD *)a1 = v71;
        *(_DWORD *)(a1 + 8) = v146;
        goto LABEL_96;
      }
      if (!HIDWORD(v146))
      {
LABEL_96:
        *(_DWORD *)(a1 + 12) = v61;
        *(_QWORD *)(a1 + 112) = *(_QWORD *)v157;
        *(_DWORD *)(a1 + 119) = *(_DWORD *)&v157[7];
        goto LABEL_70;
      }
    }
    else
    {
      v60 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      v61 = 3;
      *(_DWORD *)(a1 + 8) = 3;
    }
    memcpy(v60, &v147, 32 * v61);
    goto LABEL_96;
  }
  if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16) == 3
    && v8
    && (*(_WORD *)(v8 + 12) & 0xFFF) == 6
    && !*(_DWORD *)(v8 + 40))
  {
    if (*(_QWORD *)v157 || *(_WORD *)&v157[8] || (v157[10] & 3) != 0 || HIDWORD(v146))
    {
      v49 = *(unsigned int *)(v8 + 8);
      if (!*(_DWORD *)(*((_QWORD *)v6 + 1) + 4 * v49) && *(_DWORD *)(*((_QWORD *)v6 + 10) + 8 * v49) == 1)
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 3;
      v50 = v145;
      if (v145 == (WTF *)&v147)
      {
        v51 = HIDWORD(v146);
        if (HIDWORD(v146))
        {
          v52 = 0;
          v53 = 32 * HIDWORD(v146);
          do
          {
            v54 = (_OWORD *)(a1 + 16 + v52);
            v55 = *(_OWORD *)((char *)v50 + v52 + 16);
            *v54 = *(_OWORD *)((char *)v50 + v52);
            v54[1] = v55;
            v52 += 32;
          }
          while (v53 != v52);
        }
      }
      else
      {
        *(_QWORD *)a1 = v145;
        v51 = HIDWORD(v146);
        *(_DWORD *)(a1 + 8) = v146;
        v50 = (WTF *)&v147;
      }
      HIDWORD(v146) = 0;
      *(_DWORD *)(a1 + 12) = v51;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)v157;
      *(_DWORD *)(a1 + 119) = *(_DWORD *)&v157[7];
      if (&v147 != (__int128 *)v50 && v50)
      {
        v145 = 0;
        LODWORD(v146) = 0;
        WTF::fastFree((unint64_t)v50, v42, v43, v44, v45, v46, v47, v48);
      }
      goto LABEL_70;
    }
    v96 = v145;
    if (&v147 != (__int128 *)v145 && v145)
    {
      v145 = 0;
      LODWORD(v146) = 0;
      WTF::fastFree((unint64_t)v96, v42, v43, v44, v45, v46, v47, v48);
    }
  }
  *(_QWORD *)v159 = 0;
  *(_WORD *)&v159[8] = 512;
  *(_DWORD *)&v159[12] = 1;
  *(_QWORD *)&v159[16] = 0;
  v159[24] = 0;
  *(_WORD *)&v160[8] = 0;
  v160[10] = 0;
  *(_QWORD *)v160 = v8;
  if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16) == 3)
  {
    if (v160[8] && !v160[9])
    {
      __break(0xC471u);
      JUMPOUT(0x197FD2978);
    }
    goto LABEL_70;
  }
  v30 = v135;
  v31 = BYTE8(v135);
  if ((_QWORD)v135)
    v32 = 0;
  else
    v32 = BYTE8(v135) == 0;
  v33 = v32;
  v34 = BYTE8(v135);
  if (v32)
  {
    v34 = 0;
    if (!(_QWORD)v136 && HIDWORD(v135) == 1)
      v34 = v137[0] != 0;
  }
  if (v8 && v34 == 1)
  {
    v35 = **(JSC::B3::Value ****)(a2 + 64);
    LOBYTE(v137[1]) = 1;
    v36 = HIDWORD(v135);
    v37 = v136;
    if ((_DWORD)v136)
      v33 = 0;
    v38 = DWORD1(v136);
    if (v33 == 1 && !DWORD1(v136) && HIDWORD(v135) == 1)
    {
      if (v137[0])
      {
        v133 = 0;
        v131 = 0;
        v132 = 2;
        v31 = 1;
        v40 = 1;
LABEL_99:
        v64 = v35[50];
        *(_OWORD *)v158 = *(_OWORD *)v141;
        *(_OWORD *)&v158[9] = *(_OWORD *)&v141[9];
        v145 = (WTF *)&v147;
        v146 = 3;
        v65 = (WTF *)WTF::fastMalloc((WTF *)0x80);
        LODWORD(v146) = 4;
        v145 = v65;
        v66 = (_OWORD *)((char *)v65 + 32 * HIDWORD(v146));
        v66[1] = *(_OWORD *)&v158[16];
        *v66 = *(_OWORD *)v158;
        ++HIDWORD(v146);
        v67 = (char *)v145 + 32 * HIDWORD(v146);
        *(_QWORD *)v67 = v30;
        v67[8] = v31;
        v67[9] = v132;
        *((_WORD *)v67 + 5) = v130;
        *((_DWORD *)v67 + 3) = v40;
        *((_DWORD *)v67 + 4) = v39;
        *((_DWORD *)v67 + 5) = v131;
        v67[24] = v133;
        ++HIDWORD(v146);
        v68 = (char *)v145 + 32 * HIDWORD(v146);
        *(_QWORD *)v68 = 0;
        *((_WORD *)v68 + 4) = 513;
        *((_DWORD *)v68 + 3) = 1;
        *((_DWORD *)v68 + 4) = v62;
        *((_DWORD *)v68 + 5) = 0;
        v68[24] = 0;
        ++HIDWORD(v146);
        v69 = (char *)v145 + 32 * HIDWORD(v146);
        *(_QWORD *)v69 = 0;
        *((_WORD *)v69 + 4) = 513;
        *((_DWORD *)v69 + 3) = 1;
        *((_DWORD *)v69 + 4) = v63;
        *((_DWORD *)v69 + 5) = 0;
        v69[24] = 0;
        v70 = ++HIDWORD(v146);
        *(_QWORD *)v157 = v64;
        *(_DWORD *)&v157[8] = 286;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 3;
        if (v145 == (WTF *)&v147)
        {
          if (v70)
            memcpy((void *)(a1 + 16), &v147, 32 * v70);
        }
        else
        {
          *(_QWORD *)a1 = v145;
          *(_DWORD *)(a1 + 8) = v146;
        }
        *(_DWORD *)(a1 + 12) = v70;
        *(_DWORD *)(a1 + 119) = *(_DWORD *)&v157[7];
        *(_QWORD *)(a1 + 112) = *(_QWORD *)v157;
        *(_BYTE *)(a1 + 122) |= BYTE2(v137[1]);
        BYTE1(v137[1]) = 1;
        goto LABEL_70;
      }
    }
    else if (v137[0])
    {
      v134 = HIDWORD(v135);
      v72 = *((unsigned int *)v137[0] + 2);
      v73 = (uint64_t)*v35;
      if (((unint64_t)*v35 & 0x8000000000000000) != 0)
        v74 = 63;
      else
        v74 = *(_QWORD *)(2 * v73);
      if (v74 <= v72)
      {
        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v35, v72 + 1, 0);
        v73 = (uint64_t)*v35;
      }
      if (v73 >= 0)
        v75 = 2 * v73 + 8;
      else
        v75 = (uint64_t)v35;
      *(_QWORD *)(v75 + ((v72 >> 3) & 0x1FFFFFF8)) |= 1 << v72;
      v36 = v134;
    }
    v131 = v38;
    v132 = BYTE9(v135);
    v130 = WORD5(v135);
    v133 = BYTE8(v136);
    v39 = v37;
    v40 = v36;
    goto LABEL_99;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 122) &= 0xFCu;
LABEL_70:
  if (LOBYTE(v137[1]) && !BYTE1(v137[1]))
  {
    __break(0xC471u);
    JUMPOUT(0x197FD2828);
  }
}

void JSC::B3::Air::Inst JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(void)#1}::operator() const(void)::{lambda(JSC::Width,JSC::B3::Air::Arg::Signedness,JSC::B3::Opcode)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v7;
  JSC::B3::_anonymous_namespace_::LowerToAir *v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[2];
  uint64_t v37;
  __int16 v38;
  int v39;
  uint64_t v40;
  char v41;
  _QWORD v42[2];

  if (!**(_BYTE **)a2)
    goto LABEL_14;
  v7 = a3;
  v9 = *(JSC::B3::_anonymous_namespace_::LowerToAir **)(a2 + 32);
  if (!a4 && !JSC::B3::Air::Arg::isRepresentableAs(a3, **(_QWORD **)(a2 + 8)))
    goto LABEL_14;
  v10 = *(__int128 **)(a2 + 16);
  if (*(_QWORD *)v10
    || *((_BYTE *)v10 + 8)
    || *((_DWORD *)v10 + 4)
    || *((_DWORD *)v10 + 5)
    || *((_DWORD *)v10 + 3) != 1)
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = **(unsigned __int8 ***)(a2 + 40);
    if (v13[12] == a5)
    {
      v10 = *(__int128 **)(a2 + 16);
    }
    else
    {
      v37 = 0;
      v38 = 512;
      v39 = 1;
      v40 = 0;
      v41 = 0;
      memset(v42, 0, 11);
    }
    v14 = v10[1];
    v34 = *v10;
    v35 = v14;
    memset(v36, 0, 11);
    if (LOBYTE(v36[1]) && !BYTE1(v36[1]))
    {
      __break(0xC471u);
      JUMPOUT(0x197FD3A44);
    }
    if (LOBYTE(v42[1]) && !BYTE1(v42[1]))
    {
      __break(0xC471u);
      JUMPOUT(0x197FD3A64);
    }
    if (*(_QWORD *)(a1 + 112) || *(_WORD *)(a1 + 120) || (*(_BYTE *)(a1 + 122) & 3) != 0 || *(_DWORD *)(a1 + 12))
      goto LABEL_37;
    v22 = *(_QWORD *)a1;
    if (a1 + 16 != *(_QWORD *)a1 && v22)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v22, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  v11 = *(__int128 **)(a2 + 48);
  if (!*(_QWORD *)v11
    && !*((_BYTE *)v11 + 8)
    && !*((_DWORD *)v11 + 4)
    && !*((_DWORD *)v11 + 5)
    && *((_DWORD *)v11 + 3) == 1)
  {
LABEL_14:
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 3;
    *(_QWORD *)(a1 + 112) = 0;
    *(_WORD *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 122) &= 0xFCu;
    return;
  }
  v23 = *(_QWORD *)(a2 + 24);
  v24 = **(unsigned __int8 ***)(a2 + 40);
  if (v24[12] == a5)
  {
    v11 = *(__int128 **)(a2 + 48);
  }
  else
  {
    v37 = 0;
    v38 = 512;
    v39 = 1;
    v40 = 0;
    v41 = 0;
    memset(v42, 0, 11);
  }
  v25 = v11[1];
  v34 = *v11;
  v35 = v25;
  memset(v36, 0, 11);
  if (LOBYTE(v36[1]) && !BYTE1(v36[1]))
  {
    __break(0xC471u);
    JUMPOUT(0x197FD3A84);
  }
  if (LOBYTE(v42[1]) && !BYTE1(v42[1]))
  {
    __break(0xC471u);
    JUMPOUT(0x197FD3AA4);
  }
  if (!*(_QWORD *)(a1 + 112) && !*(_WORD *)(a1 + 120) && (*(_BYTE *)(a1 + 122) & 3) == 0 && !*(_DWORD *)(a1 + 12))
  {
    v33 = *(_QWORD *)a1;
    if (a1 + 16 != *(_QWORD *)a1)
    {
      if (v33)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree(v33, v26, v27, v28, v29, v30, v31, v32);
      }
    }
    goto LABEL_14;
  }
LABEL_37:
}

void JSC::B3::Air::Inst JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)#1}::operator() const(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)::{lambda(JSC::Width,JSC::B3::Opcode,JSC::B3::Air::Arg::Signedness)#1}::operator()(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  JSC::B3::_anonymous_namespace_::LowerToAir *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _OWORD v22[3];
  uint64_t v23;
  __int16 v24;
  int v25;
  uint64_t v26;
  char v27;
  _QWORD v28[2];

  v8 = *(JSC::B3::_anonymous_namespace_::LowerToAir **)(a2 + 16);
  v9 = *(unint64_t **)a2;
  v10 = **(_QWORD **)a2;
  if (v10 || *((_BYTE *)v9 + 8) || *((_DWORD *)v9 + 4) || *((_DWORD *)v9 + 5) || *((_DWORD *)v9 + 3) != 1)
  {
    if (a5 == 1)
    {
      switch(a3)
      {
        case 0:
          if (v10 < 0x100)
            goto LABEL_16;
          goto LABEL_6;
        case 1:
          if (v10 >= 0x10000)
            goto LABEL_6;
          goto LABEL_16;
        case 2:
          if (HIDWORD(v10))
            goto LABEL_6;
          goto LABEL_16;
        case 3:
          goto LABEL_16;
        default:
          goto LABEL_35;
      }
    }
    if (a5)
    {
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x197FD3D3CLL);
    }
    switch(a3)
    {
      case 0:
        if (v10 != (char)v10)
          break;
        goto LABEL_16;
      case 1:
        if (v10 != (__int16)v10)
          break;
        goto LABEL_16;
      case 2:
        if (v10 != (int)v10)
          break;
        goto LABEL_16;
      case 3:
LABEL_16:
        v11 = *(_QWORD *)(a2 + 8);
        v12 = **(unsigned __int8 ***)(a2 + 24);
        if (v12[12] == a4)
        {
          v9 = *(unint64_t **)a2;
        }
        else
        {
          v23 = 0;
          v24 = 512;
          v25 = 1;
          v26 = 0;
          v27 = 0;
          memset(v28, 0, 11);
        }
        v13 = *((_OWORD *)v9 + 1);
        v22[0] = *(_OWORD *)v9;
        v22[1] = v13;
        memset(&v22[2], 0, 11);
        if (BYTE8(v22[2]) && !BYTE9(v22[2]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FD3CFCLL);
        }
        if (LOBYTE(v28[1]) && !BYTE1(v28[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FD3D1CLL);
        }
        if (*(_QWORD *)(a1 + 112) || *(_WORD *)(a1 + 120) || (*(_BYTE *)(a1 + 122) & 3) != 0 || *(_DWORD *)(a1 + 12))
        {
          return;
        }
        v21 = *(_QWORD *)a1;
        if (a1 + 16 != *(_QWORD *)a1)
        {
          if (v21)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v21, v14, v15, v16, v17, v18, v19, v20);
          }
        }
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FD3D5CLL);
    }
  }
LABEL_6:
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 122) &= 0xFCu;
}

double JSC::B3::Air::Inst JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)#1}::operator() const(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)::{lambda(JSC::Width,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise&&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise&)#1}::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  unint64_t v18;
  uint64_t v19;
  JSC::B3::Value ***v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;

  if (!*(_QWORD *)(a1 + 112) && !*(_WORD *)(a1 + 120) && (*(_BYTE *)(a1 + 122) & 3) == 0 && !*(_DWORD *)(a1 + 12))
  {
    v19 = a1 + 16;
    v18 = *(_QWORD *)a1;
    if (a1 + 16 != *(_QWORD *)a1 && v18)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v18, v10, v11, v12, v13, v14, v15, v16);
    }
    v20 = *(JSC::B3::Value ****)a2;
    v21 = **(_QWORD **)(a2 + 8);
    switch(**(_QWORD **)(a2 + 8))
    {
      case 0u:
      case 1u:
        break;
      case 2u:
        v21 = 9;
        break;
      case 3u:
        v21 = 8;
        break;
      case 8u:
        v21 = 3;
        break;
      case 9u:
        v21 = 2;
        break;
      case 0xAu:
        v21 = 13;
        break;
      case 0xBu:
        v21 = 12;
        break;
      case 0xCu:
        v21 = 11;
        break;
      case 0xDu:
        v21 = 10;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FD3F74);
    }
    HIDWORD(v31) = 1;
    v32 = 0;
    v33 = 0;
    WORD4(v31) = 526;
    *(_QWORD *)&v31 = v21;
    if (!*(_QWORD *)(a1 + 112) && !*(_WORD *)(a1 + 120))
    {
      v29 = *(_BYTE *)(a1 + 122);
      if ((v29 & 3) == 0 && !*(_DWORD *)(a1 + 12))
      {
        v30 = *(_QWORD *)a1;
        if (v19 != *(_QWORD *)a1)
        {
          if (v30)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v30, v22, v23, v24, v25, v26, v27, v28);
            v29 = *(_BYTE *)(a1 + 122);
          }
        }
        *(_QWORD *)a1 = v19;
        *(_QWORD *)&result = 3;
        *(_QWORD *)(a1 + 8) = 3;
        *(_QWORD *)(a1 + 112) = 0;
        *(_WORD *)(a1 + 120) = 0;
        *(_BYTE *)(a1 + 122) = v29 & 0xFC;
      }
    }
  }
  return result;
}

_QWORD *JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1}::operator()(_QWORD *result, JSC::B3::Value **this, int a3, _OWORD *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  __int128 v16;
  JSC::B3::Value *v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  _OWORD *v23;
  __int128 v24;
  _BYTE *v25;
  unsigned int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  int v32;
  __int128 v33;
  JSC::B3::Value *v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  _OWORD *v38;
  __int128 v39;
  _OWORD *v40;
  __int128 v41;
  _BYTE *v42;
  _BYTE v43[25];
  _BYTE v44[25];
  _BYTE *v45;
  uint64_t v46;
  _BYTE v47[96];
  _BYTE v48[12];
  _BYTE v49[32];
  _BYTE v50[32];
  _BYTE v51[32];
  uint64_t v52;

  v6 = result;
  v52 = *MEMORY[0x1E0C80C00];
  switch(a3)
  {
    case 2:
      v28 = *(unsigned __int8 *)(a5 + 8);
      if (*(_QWORD *)a5)
        v29 = 0;
      else
        v29 = v28 == 0;
      if (v29)
      {
        v28 = 0;
        if (!*(_DWORD *)(a5 + 16) && !*(_DWORD *)(a5 + 20) && *(_DWORD *)(a5 + 12) == 1)
          v28 = *(_QWORD *)(a5 + 32) != 0;
      }
      v30 = *(unsigned __int8 *)(a6 + 8);
      if (*(_QWORD *)a6)
        v31 = 0;
      else
        v31 = v30 == 0;
      if (v31)
      {
        LOBYTE(v30) = 0;
        if (!*(_DWORD *)(a6 + 16) && !*(_DWORD *)(a6 + 20) && *(_DWORD *)(a6 + 12) == 1)
          LOBYTE(v30) = *(_QWORD *)(a6 + 32) != 0;
      }
      if (v28 != 1 || ((char)v30 - 1) > 1)
        goto LABEL_2;
      v33 = *(_OWORD *)((char *)a4 + 9);
      *(_OWORD *)v49 = *a4;
      *(_OWORD *)&v49[9] = v33;
      v34 = this[50];
      *(_OWORD *)v50 = *(_OWORD *)v44;
      *(_OWORD *)&v50[9] = *(_OWORD *)&v44[9];
      *(_OWORD *)v51 = *(_OWORD *)v43;
      *(_OWORD *)&v51[9] = *(_OWORD *)&v43[9];
      v45 = v47;
      v46 = 3;
      v35 = WTF::fastMalloc((WTF *)0x80);
      LODWORD(v46) = 4;
      v45 = (_BYTE *)v35;
      v36 = (_OWORD *)(v35 + 32 * HIDWORD(v46));
      v37 = *(_OWORD *)&v49[16];
      *v36 = *(_OWORD *)v49;
      v36[1] = v37;
      ++HIDWORD(v46);
      v38 = &v45[32 * HIDWORD(v46)];
      v39 = *(_OWORD *)&v50[16];
      *v38 = *(_OWORD *)v50;
      v38[1] = v39;
      ++HIDWORD(v46);
      v40 = &v45[32 * HIDWORD(v46)];
      v41 = *(_OWORD *)&v51[16];
      *v40 = *(_OWORD *)v51;
      v40[1] = v41;
      ++HIDWORD(v46);
      v42 = &v45[32 * HIDWORD(v46)];
      *(_QWORD *)v42 = 0;
      *((_WORD *)v42 + 4) = 513;
      *((_DWORD *)v42 + 3) = 1;
      *((_DWORD *)v42 + 4) = v32;
      *((_DWORD *)v42 + 5) = 0;
      v42[24] = 0;
      v26 = HIDWORD(v46) + 1;
      *(_QWORD *)v48 = v34;
      v27 = 282;
      goto LABEL_25;
    case 3:
      v11 = *(unsigned __int8 *)(a5 + 8);
      if (*(_QWORD *)a5)
        v12 = 0;
      else
        v12 = v11 == 0;
      if (v12)
      {
        v11 = 0;
        if (!*(_DWORD *)(a5 + 16) && !*(_DWORD *)(a5 + 20) && *(_DWORD *)(a5 + 12) == 1)
          v11 = *(_QWORD *)(a5 + 32) != 0;
      }
      v13 = *(unsigned __int8 *)(a6 + 8);
      if (*(_QWORD *)a6)
        v14 = 0;
      else
        v14 = v13 == 0;
      if (v14)
      {
        LOBYTE(v13) = 0;
        if (!*(_DWORD *)(a6 + 16) && !*(_DWORD *)(a6 + 20) && *(_DWORD *)(a6 + 12) == 1)
          LOBYTE(v13) = *(_QWORD *)(a6 + 32) != 0;
      }
      if (v11 != 1 || ((char)v13 - 1) > 1)
        goto LABEL_2;
      v16 = *(_OWORD *)((char *)a4 + 9);
      *(_OWORD *)v49 = *a4;
      *(_OWORD *)&v49[9] = v16;
      v17 = this[50];
      *(_OWORD *)v50 = *(_OWORD *)v44;
      *(_OWORD *)&v50[9] = *(_OWORD *)&v44[9];
      *(_OWORD *)v51 = *(_OWORD *)v43;
      *(_OWORD *)&v51[9] = *(_OWORD *)&v43[9];
      v45 = v47;
      v46 = 3;
      v18 = WTF::fastMalloc((WTF *)0x80);
      LODWORD(v46) = 4;
      v45 = (_BYTE *)v18;
      v19 = (_OWORD *)(v18 + 32 * HIDWORD(v46));
      v20 = *(_OWORD *)&v49[16];
      *v19 = *(_OWORD *)v49;
      v19[1] = v20;
      ++HIDWORD(v46);
      v21 = &v45[32 * HIDWORD(v46)];
      v22 = *(_OWORD *)&v50[16];
      *v21 = *(_OWORD *)v50;
      v21[1] = v22;
      ++HIDWORD(v46);
      v23 = &v45[32 * HIDWORD(v46)];
      v24 = *(_OWORD *)&v51[16];
      *v23 = *(_OWORD *)v51;
      v23[1] = v24;
      ++HIDWORD(v46);
      v25 = &v45[32 * HIDWORD(v46)];
      *(_QWORD *)v25 = 0;
      *((_WORD *)v25 + 4) = 513;
      *((_DWORD *)v25 + 3) = 1;
      *((_DWORD *)v25 + 4) = v15;
      *((_DWORD *)v25 + 5) = 0;
      v25[24] = 0;
      v26 = HIDWORD(v46) + 1;
      *(_QWORD *)v48 = v17;
      v27 = 283;
LABEL_25:
      *(_DWORD *)&v48[8] = v27;
      v48[10] = *(_BYTE *)(a6 + 42);
      *(_BYTE *)(a6 + 41) = 1;
      result = v6 + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 3;
      if (v45 == v47)
      {
        if (v26)
          result = memcpy(result, v47, 32 * v26);
      }
      else
      {
        *v6 = v45;
        *((_DWORD *)v6 + 2) = v46;
      }
      *((_DWORD *)v6 + 3) = v26;
      *(_DWORD *)((char *)v6 + 119) = *(_DWORD *)&v48[7];
      v6[14] = *(_QWORD *)v48;
      *((_BYTE *)v6 + 122) |= *(_BYTE *)(a5 + 42);
      *(_BYTE *)(a5 + 41) = 1;
      break;
    case 4:
      __break(0xC471u);
      JUMPOUT(0x197FD4480);
    default:
LABEL_2:
      *result = result + 2;
      result[1] = 3;
      result[14] = 0;
      *((_WORD *)result + 60) = 0;
      *((_BYTE *)result + 122) &= 0xFCu;
      break;
  }
  return result;
}

double JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}::operator()(uint64_t a1, JSC::B3::Value **a2, __int128 *a3, JSC::B3::_anonymous_namespace_::LowerToAir::ArgPromise *this)
{
  unsigned int v8;
  JSC::B3::Value *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  _BYTE v14[25];
  _BYTE v15[32];
  _BYTE v16[32];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  {
    v9 = a2[50];
    *(_OWORD *)&v15[9] = *(__int128 *)((char *)a3 + 9);
    v10 = *a3;
    *(_OWORD *)&v16[9] = *(_OWORD *)&v14[9];
    *(_OWORD *)v15 = v10;
    *(_OWORD *)v16 = *(_OWORD *)v14;
    *(_QWORD *)a1 = a1 + 16;
    v11 = *(_OWORD *)&v15[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v15;
    *(_OWORD *)(a1 + 32) = v11;
    v12 = *(_OWORD *)&v16[16];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v16;
    *(_OWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 88) = 513;
    *(_DWORD *)(a1 + 92) = 1;
    *(_QWORD *)(a1 + 96) = v8;
    *(_BYTE *)(a1 + 104) = 0;
    *(_QWORD *)&result = 0x300000003;
    *(_QWORD *)(a1 + 8) = 0x300000003;
    *(_QWORD *)(a1 + 112) = v9;
    *(_DWORD *)(a1 + 120) = 289;
    *(_BYTE *)(a1 + 122) = *((_BYTE *)this + 42);
    *((_BYTE *)this + 41) = 1;
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)&result = 3;
    *(_QWORD *)(a1 + 8) = 3;
    *(_QWORD *)(a1 + 112) = 0;
    *(_WORD *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 122) &= 0xFCu;
  }
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::createCompare(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}::operator()(uint64_t a1, JSC::B3::Value **a2, _OWORD *a3, JSC::B3::_anonymous_namespace_::LowerToAir::ArgPromise *this, JSC::B3::_anonymous_namespace_::LowerToAir::ArgPromise *a5)
{
  int v10;
  int v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  _OWORD v21[2];
  _OWORD v22[2];
  WTF *v23;
  int v24;
  uint64_t v25;

  if (v10 == 1 && v11 == 1)
  {
    v20 = v23;
    if (&v25 != (uint64_t *)v23)
    {
      if (v23)
      {
        v23 = 0;
        v24 = 0;
        WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
      }
    }
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 3;
    *(_QWORD *)(a1 + 112) = 0;
    *(_WORD *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 122) &= 0xFCu;
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise::inst<JSC::B3::Air::Inst>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;

  v3 = (_OWORD *)(result + 16);
  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 3;
  v4 = *(__int128 **)a3;
  if (*(_QWORD *)a3 == a3 + 16)
  {
    v5 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v5)
    {
      v6 = 32 * v5;
      do
      {
        v7 = *v4;
        v8 = v4[1];
        v4 += 2;
        *v3 = v7;
        v3[1] = v8;
        v3 += 2;
        v6 -= 32;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)a3 = a3 + 16;
    *(_QWORD *)result = v4;
    v9 = *(_DWORD *)(a3 + 8);
    LODWORD(v5) = *(_DWORD *)(a3 + 12);
    *(_DWORD *)(a3 + 8) = 3;
    *(_DWORD *)(result + 8) = v9;
  }
  *(_DWORD *)(a3 + 12) = 0;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(result + 119) = *(_DWORD *)(a3 + 119);
  *(_QWORD *)(result + 112) = *(_QWORD *)(a3 + 112);
  *(_BYTE *)(result + 122) |= *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a2 + 41) = 1;
  return result;
}

__n128 JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise::inst<JSC::B3::Air::Opcode,JSC::B3::Value *&,JSC::B3::Air::Arg const&,JSC::B3::Air::Arg,JSC::B3::Air::Arg,JSC::B3::Air::Tmp>(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, _OWORD *a5, _OWORD *a6, _OWORD *a7, int a8)
{
  int v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  __n128 result;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[32];
  _BYTE v23[32];
  _BYTE v24[32];

  *(_OWORD *)v22 = *a5;
  *(_OWORD *)&v22[9] = *(_OWORD *)((char *)a5 + 9);
  v12 = a3;
  *(_OWORD *)v23 = *a6;
  *(_OWORD *)&v23[9] = *(_OWORD *)((char *)a6 + 9);
  *(_OWORD *)v24 = *a7;
  *(_OWORD *)&v24[9] = *(_OWORD *)((char *)a7 + 9);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 3;
  v13 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(a1 + 8) = 4;
  *(_QWORD *)a1 = v13;
  v14 = (_OWORD *)(v13 + 32 * *(unsigned int *)(a1 + 12));
  *v14 = *(_OWORD *)v22;
  v14[1] = *(_OWORD *)&v22[16];
  v15 = (*(_DWORD *)(a1 + 12) + 1);
  *(_DWORD *)(a1 + 12) = v15;
  v16 = (_OWORD *)(*(_QWORD *)a1 + 32 * v15);
  *v16 = *(_OWORD *)v23;
  v16[1] = *(_OWORD *)&v23[16];
  v17 = (*(_DWORD *)(a1 + 12) + 1);
  *(_DWORD *)(a1 + 12) = v17;
  v18 = (_OWORD *)(*(_QWORD *)a1 + 32 * v17);
  result = *(__n128 *)v24;
  *v18 = *(_OWORD *)v24;
  v18[1] = *(_OWORD *)&v24[16];
  v20 = (*(_DWORD *)(a1 + 12) + 1);
  *(_DWORD *)(a1 + 12) = v20;
  v21 = *(_QWORD *)a1 + 32 * v20;
  *(_QWORD *)v21 = 0;
  *(_WORD *)(v21 + 8) = 513;
  *(_DWORD *)(v21 + 12) = 1;
  *(_DWORD *)(v21 + 16) = a8;
  *(_DWORD *)(v21 + 20) = 0;
  *(_BYTE *)(v21 + 24) = 0;
  ++*(_DWORD *)(a1 + 12);
  *(_QWORD *)(a1 + 112) = a4;
  *(_DWORD *)(a1 + 120) = v12;
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a2 + 41) = 1;
  return result;
}

BOOL JSC::B3::Air::Arg::isRepresentableAs(uint64_t a1, unint64_t a2)
{
  return a2 < 0x10000;
}

uint64_t JSC::B3::GenericBlockInsertionSet<JSC::B3::Air::BasicBlock>::insert(uint64_t a1, unsigned int a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  WTF **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  _QWORD *v22;
  WTF *v23;
  uint64_t v25;
  WTF *v26;

  v12 = WTF::fastMalloc((WTF *)0x70);
  *(_DWORD *)v12 = -1;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = v12 + 40;
  *(_QWORD *)(v12 + 32) = 2;
  *(_QWORD *)(v12 + 72) = v12 + 88;
  *(_QWORD *)(v12 + 80) = 2;
  *(double *)(v12 + 104) = a3;
  v25 = a2;
  v26 = (WTF *)v12;
  v13 = (_QWORD *)(a1 + 8);
  v14 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(a1 + 16))
  {
    v15 = (_QWORD *)WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::Air::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v13, v14 + 1, (unint64_t)&v25, v7, v8, v9, v10, v11);
    v14 = *v15;
    v18 = v15[1];
    v16 = (WTF **)(v15 + 1);
    v17 = v18;
    v19 = *(unsigned int *)(a1 + 20);
    v20 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v19);
    *v20 = v14;
    v21 = v20 + 1;
    LODWORD(v14) = v19;
  }
  else
  {
    v22 = (_QWORD *)(*v13 + 16 * v14);
    *v22 = a2;
    v21 = v22 + 1;
    v17 = v12;
    v16 = &v26;
  }
  *v16 = 0;
  *v21 = v17;
  *(_DWORD *)(a1 + 20) = v14 + 1;
  v23 = v26;
  v26 = 0;
  if (v23)
    std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)&v26, v23, v6, v7, v8, v9, v10, v11);
  return v12;
}

unint64_t WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::Air::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::Air::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = a3 - v10;
    v12 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 > a2)
      a2 = v13;
    WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::Air::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v11;
  }
  return v8;
}

uint64_t WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::Air::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v8 = a2;
  v9 = result;
  v10 = *(_QWORD *)result;
  v11 = *(unsigned int *)(result + 12);
  if (a2 < 9)
  {
    v12 = (_QWORD *)(result + 16);
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 8;
    if (!(_DWORD)v11)
    {
LABEL_11:
      if (v9 + 16 != v10 && v10)
      {
        if (*(_QWORD *)v9 == v10)
        {
          *(_QWORD *)v9 = 0;
          *(_DWORD *)(v9 + 8) = 0;
        }
        WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
      return 1;
    }
LABEL_7:
    v13 = 16 * v11;
    v14 = (unint64_t *)(v10 + 8);
    do
    {
      v15 = *(v14 - 1);
      v16 = *v14;
      *v14 = 0;
      *v12 = v15;
      v12[1] = v16;
      a2 = *v14;
      *v14 = 0;
      if (a2)
        std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)v14, (WTF *)a2, a3, a4, a5, a6, a7, a8);
      v14 += 2;
      v12 += 2;
      v13 -= 16;
    }
    while (v13);
    goto LABEL_11;
  }
  if (!(a2 >> 28))
  {
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(v9 + 8) = v8;
    *(_QWORD *)v9 = v12;
    if (!(_DWORD)v11)
      goto LABEL_11;
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

void std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100](int a1, WTF *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  if (this)
  {
    v9 = (WTF *)*((_QWORD *)this + 9);
    if ((WTF *)((char *)this + 88) != v9 && v9 != 0)
    {
      *((_QWORD *)this + 9) = 0;
      *((_DWORD *)this + 20) = 0;
      WTF::fastFree((unint64_t)v9, this, a3, a4, a5, a6, a7, a8);
    }
    v11 = (WTF *)*((_QWORD *)this + 3);
    if ((WTF *)((char *)this + 40) != v11 && v11 != 0)
    {
      *((_QWORD *)this + 3) = 0;
      *((_DWORD *)this + 8) = 0;
      WTF::fastFree((unint64_t)v11, this, a3, a4, a5, a6, a7, a8);
    }
    v13 = *((unsigned int *)this + 5);
    v14 = *((_QWORD *)this + 1);
    if ((_DWORD)v13)
    {
      v15 = v13 << 7;
      v16 = v14 + 16;
      do
      {
        v17 = *(_QWORD *)(v16 - 16);
        if (v16 != v17 && v17 != 0)
        {
          *(_QWORD *)(v16 - 16) = 0;
          *(_DWORD *)(v16 - 8) = 0;
          WTF::fastFree(v17, this, a3, a4, a5, a6, a7, a8);
        }
        v16 += 128;
        v15 -= 128;
      }
      while (v15);
      v14 = *((_QWORD *)this + 1);
      if (!v14)
        goto LABEL_14;
    }
    else if (!v14)
    {
LABEL_14:
      WTF::fastFree((unint64_t)this, this, a3, a4, a5, a6, a7, a8);
      return;
    }
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v14, this, a3, a4, a5, a6, a7, a8);
    goto LABEL_14;
  }
}

uint64_t WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2 != a1)
  {
    v10 = *(_DWORD *)(a1 + 12);
    v11 = *(_DWORD *)(a2 + 12);
    if (v10 > v11)
    {
      *(_DWORD *)(a1 + 12) = v11;
      v10 = v11;
    }
    else if (v11 > *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0, a3, a4, a5, a6, a7, a8);
      WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12), v18, v19, v20, v21, v22, v23);
      v10 = *(_DWORD *)(a1 + 12);
    }
    if (v10)
    {
      memmove(*(void **)a1, *(const void **)a2, 16 * v10 - 7);
      v10 = *(_DWORD *)(a1 + 12);
    }
    v12 = *(unsigned int *)(a2 + 12);
    if (v10 != (_DWORD)v12)
    {
      v13 = (_OWORD *)(*(_QWORD *)a1 + 16 * v10);
      v14 = (__int128 *)(*(_QWORD *)a2 + 16 * v10);
      v15 = 16 * v12 - 16 * v10;
      do
      {
        v16 = *v14++;
        *v13++ = v16;
        v15 -= 16;
      }
      while (v15);
      v10 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v10;
  }
  return a1;
}

double JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::Width,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise&&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise&)#1}::operator()(uint64_t a1, uint64_t **a2, int a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;

  if (!*(_QWORD *)(a1 + 112) && !*(_WORD *)(a1 + 120) && (*(_BYTE *)(a1 + 122) & 3) == 0 && !*(_DWORD *)(a1 + 12))
  {
    v15 = a1 + 16;
    v14 = *(_QWORD *)a1;
    if (a1 + 16 != *(_QWORD *)a1 && v14)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v14, v6, v7, v8, v9, v10, v11, v12);
    }
    if (!*(_QWORD *)(a1 + 112) && !*(_WORD *)(a1 + 120))
    {
      v23 = *(_BYTE *)(a1 + 122);
      if ((v23 & 3) == 0 && !*(_DWORD *)(a1 + 12))
      {
        v24 = *(_QWORD *)a1;
        if (v15 != *(_QWORD *)a1)
        {
          if (v24)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v24, v16, v17, v18, v19, v20, v21, v22);
            v23 = *(_BYTE *)(a1 + 122);
          }
        }
        *(_QWORD *)a1 = v15;
        *(_QWORD *)&result = 3;
        *(_QWORD *)(a1 + 8) = 3;
        *(_QWORD *)(a1 + 112) = 0;
        *(_WORD *)(a1 + 120) = 0;
        *(_BYTE *)(a1 + 122) = v23 & 0xFC;
      }
    }
  }
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}::operator()(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }
}

void sub_197FD4F14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,__int128 a41,uint64_t a42,uint64_t a43,__int128 a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,__int128 a57,__int128 a58,__int128 a59,__int128 a60)
{
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  JSC::B3::_anonymous_namespace_::LowerToAir *v64;
  uint64_t v65;
  int v66;
  BOOL v67;
  BOOL v68;
  int v71;
  BOOL v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[25];
  _BYTE v79[25];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;

  v66 = *(unsigned __int8 *)(v61 + 8);
  if (*(_QWORD *)v61)
    v67 = 0;
  else
    v67 = v66 == 0;
  if (v67)
  {
    if (*(_DWORD *)(v61 + 16))
      v68 = 0;
    else
      v68 = *(_DWORD *)(v61 + 20) == 0;
    v66 = v68 && *(_DWORD *)(v61 + 12) == 1 && *(_QWORD *)(v61 + 32) != 0;
  }
  v71 = *(unsigned __int8 *)(v62 + 8);
  if (*(_QWORD *)v62)
    v72 = 0;
  else
    v72 = v71 == 0;
  if (v72)
  {
    LOBYTE(v71) = 0;
    if (!*(_DWORD *)(v62 + 16) && !*(_DWORD *)(v62 + 20) && *(_DWORD *)(v62 + 12) == 1)
      LOBYTE(v71) = *(_QWORD *)(v62 + 32) != 0;
  }
  if (v66 == 1 && ((char)v71 | 4) == 5)
  {
    v73 = *((_QWORD *)v64 + 50);
    *(_OWORD *)(v65 + 9) = *(__int128 *)((char *)v63 + 9);
    v86 = *v63;
    v88 = *(_OWORD *)v79;
    *(_OWORD *)(v65 + 41) = *(_OWORD *)&v79[9];
    v90 = *(_OWORD *)v78;
    *(_OWORD *)(v65 + 73) = *(_OWORD *)&v78[9];
    v80 = v86;
    v81 = v87;
    v82 = v88;
    v83 = v89;
    v84 = v90;
    v85 = v91;
    v74 = *(_BYTE *)(v62 + 42);
    *(_BYTE *)(v62 + 41) = 1;
    *(_QWORD *)v60 = v60 + 16;
    v75 = v83;
    *(_OWORD *)(v60 + 48) = v82;
    *(_OWORD *)(v60 + 64) = v75;
    v76 = v85;
    *(_OWORD *)(v60 + 80) = v84;
    *(_OWORD *)(v60 + 96) = v76;
    v77 = v81;
    *(_OWORD *)(v60 + 16) = v80;
    *(_OWORD *)(v60 + 32) = v77;
    *(_QWORD *)(v60 + 8) = 0x300000003;
    *(_QWORD *)(v60 + 112) = v73;
    *(_WORD *)(v60 + 120) = 295;
    *(_BYTE *)(v60 + 122) = v74 | *(_BYTE *)(v61 + 42);
    *(_BYTE *)(v61 + 41) = 1;
  }
  else
  {
    *(_QWORD *)v60 = v60 + 16;
    *(_QWORD *)(v60 + 8) = 3;
    *(_QWORD *)(v60 + 112) = 0;
    *(_WORD *)(v60 + 120) = 0;
    *(_BYTE *)(v60 + 122) &= 0xFCu;
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)#1}::operator()(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  JSC::B3::_anonymous_namespace_::LowerToAir *v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  BOOL v33;
  int v34;
  int v35;
  JSC::B3::_anonymous_namespace_::LowerToAir *v36;
  int v37;
  int v38;
  int v39;
  JSC::B3::_anonymous_namespace_::LowerToAir *v40;
  char v41;
  JSC::B3::_anonymous_namespace_::LowerToAir *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  unsigned int v47;
  JSC::B3::_anonymous_namespace_::LowerToAir *v48;
  unsigned int v49;
  uint64_t v50;
  JSC::B3::_anonymous_namespace_::LowerToAir **v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  WTF *v68;
  uint64_t v69;
  JSC::B3::_anonymous_namespace_::LowerToAir **v70;
  int v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  __int128 v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  __int128 v95;
  WTF *v96;
  WTF *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  __int128 v109;
  int v110;
  WTF *v111;
  WTF *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD *v123;
  __int128 v124;
  WTF *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  _OWORD *v129;
  __int128 v130;
  __int16 v131;
  char v132;
  int v133;
  __int128 v134;
  JSC::B3::Value *v135;
  char v136;
  _BYTE v137[7];
  __int128 v138;
  JSC::B3::Value *v139;
  char v140;
  _BYTE v141[7];
  __int128 v142;
  __int128 v143;
  _QWORD v144[2];
  uint64_t v145;
  __int16 v146;
  __int16 v147;
  int v148;
  uint64_t v149;
  char v150;
  JSC::B3::Value *v151[2];
  WTF *v152;
  uint64_t v153;
  uint64_t v154;
  __int16 v155;
  int v156;
  JSC::B3::Value *v157;
  __int16 v158;
  char v159;
  uint64_t v160;
  __int16 v161;
  int v162;
  int v163;
  int v164;
  char v165;
  _BYTE v166[12];
  _QWORD v167[4];
  uint64_t *v168[2];
  __int128 v169;
  __int128 v170;
  JSC::B3::Value *v171;
  _BYTE v172[7];
  JSC::B3::Value *v173;
  char v174;
  uint64_t v175;
  __int16 v176;
  int v177;
  uint64_t v178;
  char v179;

  v6 = *(JSC::B3::_anonymous_namespace_::LowerToAir **)(a2 + 16);
  if (**(_BYTE **)a2)
  {
    v177 = 1;
    v178 = 0;
    v179 = 0;
    v176 = 526;
    v175 = a3 ^ 1;
    if (a4 >= 0xE || ((0x3FCFu >> a4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197FD5BA8);
    }
    v7 = qword_19914FAD8[a4];
  }
  else
  {
    v175 = a3;
    v176 = 526;
    v177 = 1;
    v178 = 0;
    v7 = a4;
    v179 = 0;
  }
  v174 = 0;
  v173 = 0;
  v8 = *(JSC::B3::Value **)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0);
  v171 = v8;
  v9 = *(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 1u);
  v10 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16);
  if (v10 >= 0x80000000)
    v10 = 0x80000000;
  if (v10 - 1 <= 1)
  {
    v11 = *(_WORD *)(v9 + 12) & 0xFFF;
    if (v9)
      v12 = v11 == 3;
    else
      v12 = 0;
    if (v12)
    {
      v30 = *(int *)(v9 + 40);
    }
    else
    {
      if (v9)
        v13 = v11 == 4;
      else
        v13 = 0;
      if (!v13)
        goto LABEL_14;
      v30 = *(_QWORD *)(v9 + 40);
    }
    if ((unint64_t)(v30 + 4095) < 0x1FFF
      || (v30 & 0xFFF) == 0
      && (!((unint64_t)v30 >> 24) || v30 >> 12 == 0 || (unint64_t)(v30 >> 12) >= 0xFFFFFFFFFFFFF001))
    {
      HIDWORD(v169) = 1;
      *(_QWORD *)&v170 = 0;
      BYTE8(v170) = 0;
      WORD4(v169) = 514;
      *(_QWORD *)&v169 = v30;
LABEL_15:
      v168[0] = *(uint64_t **)(a2 + 24);
      v168[1] = &v175;
      v167[0] = &v169;
      v167[1] = v168;
      v167[2] = v6;
      v167[3] = &v171;
      v14 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16);
      if (v14 >= 0x80000000)
        v14 = 0x80000000;
      if (v14 >= 6)
        v15 = 0;
      else
        v15 = 0x40302030200uLL >> (8 * v14);
      if (!**(_BYTE **)(a2 + 32))
      {
LABEL_226:
        if ((_QWORD)v169)
        {
          if ((_QWORD)v169 != (int)v169)
          {
LABEL_230:
            v152 = 0;
            LOWORD(v153) = 512;
            HIDWORD(v153) = 1;
            v154 = 0;
            LOBYTE(v155) = 0;
            v158 = 0;
            v159 = 0;
            v157 = v171;
            v145 = 0;
            v146 = 512;
            v148 = 1;
            v149 = 0;
            v150 = 0;
            LOWORD(v151[1]) = 0;
            BYTE2(v151[1]) = 0;
            v151[0] = (JSC::B3::Value *)v9;
            if (LOBYTE(v151[1]) && !BYTE1(v151[1]))
            {
              __break(0xC471u);
              JUMPOUT(0x197FD64C8);
            }
            if ((_BYTE)v158 && !HIBYTE(v158))
            {
              __break(0xC471u);
              JUMPOUT(0x197FD6310);
            }
            return;
          }
        }
        else if (!BYTE8(v169) && !(_QWORD)v170 && HIDWORD(v169) == 1)
        {
          goto LABEL_230;
        }
        v145 = 0;
        v146 = 512;
        v148 = 1;
        v149 = 0;
        v150 = 0;
        LOWORD(v151[1]) = 0;
        BYTE2(v151[1]) = 0;
        v151[0] = v171;
        v142 = v169;
        v143 = v170;
        memset(v144, 0, 11);
        if (LOBYTE(v144[1]) && !BYTE1(v144[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FD6488);
        }
        if (LOBYTE(v151[1]) && !BYTE1(v151[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FD64A8);
        }
        if (!*(_QWORD *)v166 && !*(_WORD *)&v166[8] && (v166[10] & 3) == 0 && !HIDWORD(v153))
        {
          v125 = v152;
          if (&v154 != (uint64_t *)v152 && v152)
          {
            v152 = 0;
            LODWORD(v153) = 0;
            WTF::fastFree((unint64_t)v125, v17, v18, v19, v20, v21, v22, v23);
          }
          goto LABEL_230;
        }
        *(_QWORD *)a1 = a1 + 16;
        *(_QWORD *)(a1 + 8) = 3;
        v24 = v152;
        if (v152 == (WTF *)&v154)
        {
          v25 = HIDWORD(v153);
          if (HIDWORD(v153))
          {
            v121 = 0;
            v122 = 32 * HIDWORD(v153);
            do
            {
              v123 = (_OWORD *)(a1 + 16 + v121);
              v124 = *(_OWORD *)((char *)v24 + v121 + 16);
              *v123 = *(_OWORD *)((char *)v24 + v121);
              v123[1] = v124;
              v121 += 32;
            }
            while (v122 != v121);
          }
          goto LABEL_249;
        }
LABEL_248:
        *(_QWORD *)a1 = v24;
        v25 = HIDWORD(v153);
        *(_DWORD *)(a1 + 8) = v153;
        v24 = (WTF *)&v154;
        goto LABEL_249;
      }
      if (v176 != 14)
        goto LABEL_171;
      v16 = v175;
      if (v175 <= 0xD && ((1 << v175) & 0x3C03) != 0)
      {
        if (*(_QWORD *)v166 || *(_WORD *)&v166[8] || (v166[10] & 3) != 0 || HIDWORD(v153))
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v24 = v152;
          if (v152 != (WTF *)&v154)
            goto LABEL_248;
          v25 = HIDWORD(v153);
          if (HIDWORD(v153))
          {
            v26 = 0;
            v27 = 32 * HIDWORD(v153);
            do
            {
              v28 = (_OWORD *)(a1 + 16 + v26);
              v29 = *(_OWORD *)((char *)v24 + v26 + 16);
              *v28 = *(_OWORD *)((char *)v24 + v26);
              v28[1] = v29;
              v26 += 32;
            }
            while (v27 != v26);
          }
          goto LABEL_249;
        }
        v77 = v152;
        if (&v154 != (uint64_t *)v152 && v152)
        {
          v152 = 0;
          LODWORD(v153) = 0;
          WTF::fastFree((unint64_t)v77, v17, v18, v19, v20, v21, v22, v23);
        }
        if (v176 != 14)
          goto LABEL_171;
        v16 = v175;
      }
      if (v16 < 4 || v16 - 8 <= 1)
      {
        if (*(_QWORD *)v166 || *(_WORD *)&v166[8] || (v166[10] & 3) != 0 || HIDWORD(v153))
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v24 = v152;
          if (v152 != (WTF *)&v154)
            goto LABEL_248;
          v25 = HIDWORD(v153);
          if (HIDWORD(v153))
          {
            v78 = 0;
            v79 = 32 * HIDWORD(v153);
            do
            {
              v80 = (_OWORD *)(a1 + 16 + v78);
              v81 = *(_OWORD *)((char *)v24 + v78 + 16);
              *v80 = *(_OWORD *)((char *)v24 + v78);
              v80[1] = v81;
              v78 += 32;
            }
            while (v79 != v78);
          }
          goto LABEL_249;
        }
        v86 = v152;
        if (&v154 != (uint64_t *)v152 && v152)
        {
          v152 = 0;
          LODWORD(v153) = 0;
          WTF::fastFree((unint64_t)v86, v17, v18, v19, v20, v21, v22, v23);
        }
        if (v176 != 14)
          goto LABEL_171;
        v16 = v175;
      }
      if (v16 <= 0xD && ((1 << v16) & 0x3C03) != 0)
      {
        if (*(_QWORD *)v166 || *(_WORD *)&v166[8] || (v166[10] & 3) != 0 || HIDWORD(v153))
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v24 = v152;
          if (v152 != (WTF *)&v154)
            goto LABEL_248;
          v25 = HIDWORD(v153);
          if (HIDWORD(v153))
          {
            v82 = 0;
            v83 = 32 * HIDWORD(v153);
            do
            {
              v84 = (_OWORD *)(a1 + 16 + v82);
              v85 = *(_OWORD *)((char *)v24 + v82 + 16);
              *v84 = *(_OWORD *)((char *)v24 + v82);
              v84[1] = v85;
              v82 += 32;
            }
            while (v83 != v82);
          }
          goto LABEL_249;
        }
        v87 = v152;
        if (&v154 != (uint64_t *)v152 && v152)
        {
          v152 = 0;
          LODWORD(v153) = 0;
          WTF::fastFree((unint64_t)v87, v17, v18, v19, v20, v21, v22, v23);
        }
        if (v176 != 14)
          goto LABEL_171;
        v16 = v175;
      }
      if (v16 < 4 || v16 - 8 <= 1)
      {
        if (*(_QWORD *)v166 || *(_WORD *)&v166[8] || (v166[10] & 3) != 0 || HIDWORD(v153))
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v24 = v152;
          if (v152 != (WTF *)&v154)
            goto LABEL_248;
          v25 = HIDWORD(v153);
          if (HIDWORD(v153))
          {
            v88 = 0;
            v89 = 32 * HIDWORD(v153);
            do
            {
              v90 = (_OWORD *)(a1 + 16 + v88);
              v91 = *(_OWORD *)((char *)v24 + v88 + 16);
              *v90 = *(_OWORD *)((char *)v24 + v88);
              v90[1] = v91;
              v88 += 32;
            }
            while (v89 != v88);
          }
          goto LABEL_249;
        }
        v96 = v152;
        if (&v154 != (uint64_t *)v152 && v152)
        {
          v152 = 0;
          LODWORD(v153) = 0;
          WTF::fastFree((unint64_t)v96, v17, v18, v19, v20, v21, v22, v23);
        }
      }
LABEL_171:
      if (!*(_QWORD *)v166 && !*(_WORD *)&v166[8] && (v166[10] & 3) == 0 && !HIDWORD(v153))
      {
        v97 = v152;
        if (&v154 != (uint64_t *)v152 && v152)
        {
          v152 = 0;
          LODWORD(v153) = 0;
          WTF::fastFree((unint64_t)v97, v17, v18, v19, v20, v21, v22, v23);
        }
        if (*((_BYTE *)v171 + 12) == 67)
        {
        }
        else
        {
          v145 = 0;
          v146 = 512;
          v148 = 1;
          v149 = 0;
          v150 = 0;
          memset(v151, 0, 11);
        }
        *(_QWORD *)&v142 = 0;
        WORD4(v142) = 512;
        HIDWORD(v142) = 1;
        *(_QWORD *)&v143 = 0;
        BYTE8(v143) = 0;
        LOWORD(v144[1]) = 0;
        BYTE2(v144[1]) = 0;
        v144[0] = v9;
        if (LOBYTE(v151[1]) && !BYTE1(v151[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FD6120);
        }
        if (*(_QWORD *)v166 || *(_WORD *)&v166[8] || (v166[10] & 3) != 0 || HIDWORD(v153))
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v24 = v152;
          if (v152 == (WTF *)&v154)
          {
            v105 = HIDWORD(v153);
            if (HIDWORD(v153))
            {
              v106 = 0;
              v107 = 32 * HIDWORD(v153);
              do
              {
                v108 = (_OWORD *)(a1 + 16 + v106);
                v109 = *(_OWORD *)((char *)v24 + v106 + 16);
                *v108 = *(_OWORD *)((char *)v24 + v106);
                v108[1] = v109;
                v106 += 32;
              }
              while (v107 != v106);
            }
          }
          else
          {
            *(_QWORD *)a1 = v152;
            v105 = HIDWORD(v153);
            *(_DWORD *)(a1 + 8) = v153;
            v24 = (WTF *)&v154;
          }
          HIDWORD(v153) = 0;
          *(_DWORD *)(a1 + 12) = v105;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)v166;
          v110 = *(_DWORD *)&v166[7];
        }
        else
        {
          v112 = v152;
          if (&v154 != (uint64_t *)v152 && v152)
          {
            v152 = 0;
            LODWORD(v153) = 0;
            WTF::fastFree((unint64_t)v112, v98, v99, v100, v101, v102, v103, v104);
          }
          v145 = 0;
          v146 = 512;
          v148 = 1;
          v149 = 0;
          v150 = 0;
          LOWORD(v151[1]) = 0;
          BYTE2(v151[1]) = 0;
          v151[0] = v171;
          if (*(_BYTE *)(v9 + 12) == 67)
          {
          }
          else
          {
            *(_QWORD *)&v142 = 0;
            WORD4(v142) = 512;
            HIDWORD(v142) = 1;
            *(_QWORD *)&v143 = 0;
            BYTE8(v143) = 0;
            memset(v144, 0, 11);
          }
          if (LOBYTE(v144[1]) && !BYTE1(v144[1]))
          {
            __break(0xC471u);
            JUMPOUT(0x197FD6518);
          }
          if (LOBYTE(v151[1]) && !BYTE1(v151[1]))
          {
            __break(0xC471u);
            JUMPOUT(0x197FD6538);
          }
          if (!*(_QWORD *)v166 && !*(_WORD *)&v166[8] && (v166[10] & 3) == 0 && !HIDWORD(v153))
          {
            v120 = v152;
            if (&v154 != (uint64_t *)v152 && v152)
            {
              v152 = 0;
              LODWORD(v153) = 0;
              WTF::fastFree((unint64_t)v120, v113, v114, v115, v116, v117, v118, v119);
            }
            goto LABEL_226;
          }
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v24 = v152;
          if (v152 == (WTF *)&v154)
          {
            v126 = HIDWORD(v153);
            if (HIDWORD(v153))
            {
              v127 = 0;
              v128 = 32 * HIDWORD(v153);
              do
              {
                v129 = (_OWORD *)(a1 + 16 + v127);
                v130 = *(_OWORD *)((char *)v24 + v127 + 16);
                *v129 = *(_OWORD *)((char *)v24 + v127);
                v129[1] = v130;
                v127 += 32;
              }
              while (v128 != v127);
            }
          }
          else
          {
            *(_QWORD *)a1 = v152;
            v126 = HIDWORD(v153);
            *(_DWORD *)(a1 + 8) = v153;
            v24 = (WTF *)&v154;
          }
          HIDWORD(v153) = 0;
          *(_DWORD *)(a1 + 12) = v126;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)v166;
          v110 = *(_DWORD *)&v166[7];
        }
        *(_DWORD *)(a1 + 119) = v110;
        if (&v154 == (uint64_t *)v24)
          return;
LABEL_250:
        if (v24)
        {
          v152 = 0;
          LODWORD(v153) = 0;
          WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
        }
        return;
      }
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 3;
      v24 = v152;
      if (v152 != (WTF *)&v154)
        goto LABEL_248;
      v25 = HIDWORD(v153);
      if (HIDWORD(v153))
      {
        v92 = 0;
        v93 = 32 * HIDWORD(v153);
        do
        {
          v94 = (_OWORD *)(a1 + 16 + v92);
          v95 = *(_OWORD *)((char *)v24 + v92 + 16);
          *v94 = *(_OWORD *)((char *)v24 + v92);
          v94[1] = v95;
          v92 += 32;
        }
        while (v93 != v92);
      }
LABEL_249:
      HIDWORD(v153) = 0;
      *(_DWORD *)(a1 + 12) = v25;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)v166;
      *(_DWORD *)(a1 + 119) = *(_DWORD *)&v166[7];
      if (&v154 == (uint64_t *)v24)
        return;
      goto LABEL_250;
    }
LABEL_14:
    *(_QWORD *)&v169 = 0;
    WORD4(v169) = 512;
    HIDWORD(v169) = 1;
    *(_QWORD *)&v170 = 0;
    BYTE8(v170) = 0;
    goto LABEL_15;
  }
  v145 = 0;
  v146 = 512;
  v148 = 1;
  v149 = 0;
  v150 = 0;
  LOWORD(v151[1]) = 0;
  BYTE2(v151[1]) = 0;
  v151[0] = v8;
  if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16) == 4
    && v9
    && (*(_WORD *)(v9 + 12) & 0xFFF) == 5
    && !*(_QWORD *)(v9 + 40)
    && v8)
  {
    v42 = **(JSC::B3::_anonymous_namespace_::LowerToAir ***)(a2 + 40);
    LOWORD(v151[1]) = 257;
    v44 = *((_QWORD *)v42 + 50);
    v154 = v7;
    v155 = 528;
    v156 = 1;
    v157 = v173;
    LOBYTE(v158) = v174;
    v152 = (WTF *)&v154;
    v160 = 0;
    v161 = 513;
    v162 = 1;
    v163 = v43;
    v164 = 0;
    v165 = 0;
    v153 = 0x200000003;
    *(_QWORD *)v166 = v44;
    *(_DWORD *)&v166[8] = 300;
    v45 = *(unsigned int *)(v9 + 8);
    if (!*(_DWORD *)(*((_QWORD *)v6 + 1) + 4 * v45) && *(_DWORD *)(*((_QWORD *)v6 + 10) + 8 * v45) == 1)
    {
      v66 = *(_QWORD *)v6;
      if ((*(_QWORD *)v6 & 0x8000000000000000) != 0)
        v67 = 63;
      else
        v67 = *(_QWORD *)(2 * v66);
      if (v67 <= v45)
      {
        WTF::BitVector::resizeOutOfLine(v6, v45 + 1, 0);
        v66 = *(_QWORD *)v6;
        v68 = v152;
        v47 = HIDWORD(v153);
      }
      else
      {
        v47 = 2;
        v68 = (WTF *)&v154;
      }
      if (v66 >= 0)
        v69 = 2 * v66 + 8;
      else
        v69 = (uint64_t)v6;
      *(_QWORD *)(v69 + ((v45 >> 3) & 0x1FFFFFF8)) |= 1 << v45;
      v46 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
      if (v68 != (WTF *)&v154)
      {
        *(_QWORD *)a1 = v68;
        *(_DWORD *)(a1 + 8) = v153;
        goto LABEL_77;
      }
    }
    else
    {
      v46 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
      v47 = 2;
    }
    memcpy(v46, &v154, 32 * v47);
LABEL_77:
    *(_DWORD *)(a1 + 12) = v47;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)v166;
    *(_DWORD *)(a1 + 119) = *(_DWORD *)&v166[7];
    goto LABEL_68;
  }
  if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16) == 3
    && v9
    && (*(_WORD *)(v9 + 12) & 0xFFF) == 6
    && !*(_DWORD *)(v9 + 40))
  {
    v51 = *(JSC::B3::_anonymous_namespace_::LowerToAir ***)(a2 + 48);
    *(_QWORD *)&v138 = v7;
    WORD4(v138) = 528;
    HIDWORD(v138) = 1;
    v139 = v173;
    v140 = v174;
    *(_DWORD *)v141 = *(_DWORD *)v172;
    *(_DWORD *)&v141[3] = *(_DWORD *)&v172[3];
    if (*(_QWORD *)v166 || *(_WORD *)&v166[8] || (v166[10] & 3) != 0 || HIDWORD(v153))
    {
      v59 = *(unsigned int *)(v9 + 8);
      if (!*(_DWORD *)(*((_QWORD *)v6 + 1) + 4 * v59) && *(_DWORD *)(*((_QWORD *)v6 + 10) + 8 * v59) == 1)
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 3;
      v60 = v152;
      if (v152 == (WTF *)&v154)
      {
        v61 = HIDWORD(v153);
        if (HIDWORD(v153))
        {
          v62 = 0;
          v63 = 32 * HIDWORD(v153);
          do
          {
            v64 = (_OWORD *)(a1 + 16 + v62);
            v65 = *(_OWORD *)((char *)v60 + v62 + 16);
            *v64 = *(_OWORD *)((char *)v60 + v62);
            v64[1] = v65;
            v62 += 32;
          }
          while (v63 != v62);
        }
      }
      else
      {
        *(_QWORD *)a1 = v152;
        v61 = HIDWORD(v153);
        *(_DWORD *)(a1 + 8) = v153;
        v60 = (WTF *)&v154;
      }
      HIDWORD(v153) = 0;
      *(_DWORD *)(a1 + 12) = v61;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)v166;
      *(_DWORD *)(a1 + 119) = *(_DWORD *)&v166[7];
      if (&v154 != (uint64_t *)v60 && v60)
      {
        v152 = 0;
        LODWORD(v153) = 0;
        WTF::fastFree((unint64_t)v60, v52, v53, v54, v55, v56, v57, v58);
      }
      goto LABEL_68;
    }
    v111 = v152;
    if (&v154 != (uint64_t *)v152 && v152)
    {
      v152 = 0;
      LODWORD(v153) = 0;
      WTF::fastFree((unint64_t)v111, v52, v53, v54, v55, v56, v57, v58);
    }
  }
  v152 = 0;
  LOWORD(v153) = 512;
  HIDWORD(v153) = 1;
  v154 = 0;
  LOBYTE(v155) = 0;
  v158 = 0;
  v159 = 0;
  v157 = (JSC::B3::Value *)v9;
  if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16) == 3)
  {
    v70 = *(JSC::B3::_anonymous_namespace_::LowerToAir ***)(a2 + 56);
    *(_QWORD *)&v134 = v7;
    WORD4(v134) = 528;
    HIDWORD(v134) = 1;
    v135 = v173;
    v136 = v174;
    *(_DWORD *)v137 = *(_DWORD *)v172;
    *(_DWORD *)&v137[3] = *(_DWORD *)&v172[3];
    if ((_BYTE)v158 && !HIBYTE(v158))
    {
      __break(0xC471u);
      JUMPOUT(0x197FD5AACLL);
    }
    goto LABEL_68;
  }
  v31 = v145;
  v32 = v146;
  if (v145)
    v33 = 0;
  else
    v33 = v146 == 0;
  v34 = v33;
  v35 = v146;
  if (v33)
  {
    v35 = 0;
    if (!v149 && v148 == 1)
      v35 = v151[0] != 0;
  }
  if (v9 && v35 == 1)
  {
    v36 = **(JSC::B3::_anonymous_namespace_::LowerToAir ***)(a2 + 64);
    LOBYTE(v151[1]) = 1;
    v37 = v148;
    v38 = v149;
    if ((_DWORD)v149)
      v34 = 0;
    v39 = HIDWORD(v149);
    if (v34 == 1 && !HIDWORD(v149) && v148 == 1)
    {
      if (v151[0])
      {
        v40 = v36;
        v36 = v40;
        v39 = 0;
        v132 = 0;
        v41 = 2;
        v32 = 1;
        v37 = 1;
LABEL_80:
        v48 = v36;
        v50 = *((_QWORD *)v48 + 50);
        *(_QWORD *)(a1 + 16) = v7;
        *(_QWORD *)a1 = a1 + 16;
        *(_WORD *)(a1 + 24) = 528;
        *(_DWORD *)(a1 + 28) = 1;
        *(_BYTE *)(a1 + 40) = v174;
        *(_QWORD *)(a1 + 32) = v173;
        *(_QWORD *)(a1 + 48) = v31;
        *(_BYTE *)(a1 + 56) = v32;
        *(_BYTE *)(a1 + 57) = v41;
        *(_WORD *)(a1 + 58) = v131;
        *(_DWORD *)(a1 + 60) = v37;
        *(_DWORD *)(a1 + 64) = v38;
        *(_DWORD *)(a1 + 68) = v39;
        *(_BYTE *)(a1 + 72) = v132;
        *(_QWORD *)(a1 + 80) = 0;
        *(_WORD *)(a1 + 88) = 513;
        *(_DWORD *)(a1 + 92) = 1;
        *(_QWORD *)(a1 + 96) = v49;
        *(_BYTE *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 8) = 0x300000003;
        *(_QWORD *)(a1 + 112) = v50;
        *(_WORD *)(a1 + 120) = 298;
        *(_BYTE *)(a1 + 122) = BYTE2(v151[1]);
        BYTE1(v151[1]) = 1;
        goto LABEL_68;
      }
    }
    else if (v151[0])
    {
      v133 = v148;
      v71 = HIDWORD(v149);
      v72 = *((unsigned int *)v151[0] + 2);
      v73 = (uint64_t *)v36;
      v74 = *(_QWORD *)v36;
      if ((*(_QWORD *)v36 & 0x8000000000000000) != 0)
        v75 = 63;
      else
        v75 = *(_QWORD *)(2 * v74);
      if (v75 <= v72)
      {
        WTF::BitVector::resizeOutOfLine(v36, v72 + 1, 0);
        v74 = *v73;
      }
      v36 = (JSC::B3::_anonymous_namespace_::LowerToAir *)v73;
      if (v74 >= 0)
        v76 = 2 * v74 + 8;
      else
        v76 = (uint64_t)v73;
      *(_QWORD *)(v76 + ((v72 >> 3) & 0x1FFFFFF8)) |= 1 << v72;
      v39 = v71;
      v37 = v133;
    }
    v41 = HIBYTE(v146);
    v131 = v147;
    v132 = v150;
    goto LABEL_80;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 122) &= 0xFCu;
LABEL_68:
  if (LOBYTE(v151[1]) && !BYTE1(v151[1]))
  {
    __break(0xC471u);
    JUMPOUT(0x197FD56E8);
  }
}

void JSC::B3::Air::Inst JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(void)#1}::operator() const(void)::{lambda(JSC::Width,JSC::B3::Air::Arg::Signedness,JSC::B3::Opcode)#1}::operator()(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  JSC::B3::_anonymous_namespace_::LowerToAir *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  unsigned __int8 *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  unsigned __int8 *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  uint64_t v36;
  char v37;
  _QWORD v38[2];

  if (!**(_BYTE **)a2)
    goto LABEL_7;
  v9 = *(JSC::B3::_anonymous_namespace_::LowerToAir **)(a2 + 32);
  if (!a4)
  {
    v10 = **(_QWORD **)(a2 + 8);
    switch(a3)
    {
      case 0:
        if (v10 >= 0x100)
          goto LABEL_7;
        break;
      case 1:
        if (v10 < 0x10000)
          break;
        goto LABEL_7;
      case 2:
        if (!HIDWORD(v10))
          break;
        goto LABEL_7;
      case 3:
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FD67F8);
    }
  }
  v11 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)v11
    || *(_BYTE *)(v11 + 8)
    || *(_DWORD *)(v11 + 16)
    || *(_DWORD *)(v11 + 20)
    || *(_DWORD *)(v11 + 12) != 1)
  {
    v12 = *(uint64_t ***)(a2 + 24);
    v13 = **(unsigned __int8 ***)(a2 + 40);
    if (v13[12] == a5)
    {
    }
    else
    {
      v33 = 0;
      v34 = 512;
      v35 = 1;
      v36 = 0;
      v37 = 0;
      memset(v38, 0, 11);
    }
    if (LOBYTE(v38[1]) && !BYTE1(v38[1]))
    {
      __break(0xC471u);
      JUMPOUT(0x197FD67D8);
    }
    if (*(_QWORD *)(a1 + 112) || *(_WORD *)(a1 + 120) || (*(_BYTE *)(a1 + 122) & 3) != 0 || *(_DWORD *)(a1 + 12))
      goto LABEL_21;
    v21 = *(_QWORD *)a1;
    if (a1 + 16 != *(_QWORD *)a1 && v21)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v21, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  v22 = *(_QWORD *)(a2 + 48);
  if (!*(_QWORD *)v22
    && !*(_BYTE *)(v22 + 8)
    && !*(_DWORD *)(v22 + 16)
    && !*(_DWORD *)(v22 + 20)
    && *(_DWORD *)(v22 + 12) == 1)
  {
LABEL_7:
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 3;
    *(_QWORD *)(a1 + 112) = 0;
    *(_WORD *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 122) &= 0xFCu;
    return;
  }
  v23 = *(uint64_t ***)(a2 + 24);
  v24 = **(unsigned __int8 ***)(a2 + 40);
  if (v24[12] == a5)
  {
  }
  else
  {
    v33 = 0;
    v34 = 512;
    v35 = 1;
    v36 = 0;
    v37 = 0;
    memset(v38, 0, 11);
  }
  if (LOBYTE(v38[1]) && !BYTE1(v38[1]))
  {
    __break(0xC471u);
    JUMPOUT(0x197FD6968);
  }
  if (!*(_QWORD *)(a1 + 112) && !*(_WORD *)(a1 + 120) && (*(_BYTE *)(a1 + 122) & 3) == 0 && !*(_DWORD *)(a1 + 12))
  {
    v32 = *(_QWORD *)a1;
    if (a1 + 16 != *(_QWORD *)a1)
    {
      if (v32)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree(v32, v25, v26, v27, v28, v29, v30, v31);
      }
    }
    goto LABEL_7;
  }
LABEL_21:
}

void JSC::B3::Air::Inst JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)#1}::operator() const(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)::{lambda(JSC::Width,JSC::B3::Opcode,JSC::B3::Air::Arg::Signedness)#1}::operator()(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  JSC::B3::_anonymous_namespace_::LowerToAir *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t **v11;
  unsigned __int8 *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  char v25;
  _QWORD v26[2];

  v8 = *(JSC::B3::_anonymous_namespace_::LowerToAir **)(a2 + 16);
  v9 = *(unint64_t **)a2;
  v10 = **(_QWORD **)a2;
  if (v10 || *((_BYTE *)v9 + 8) || *((_DWORD *)v9 + 4) || *((_DWORD *)v9 + 5) || *((_DWORD *)v9 + 3) != 1)
  {
    if (a5 == 1)
    {
      switch(a3)
      {
        case 0:
          if (v10 < 0x100)
            goto LABEL_16;
          goto LABEL_6;
        case 1:
          if (v10 >= 0x10000)
            goto LABEL_6;
          goto LABEL_16;
        case 2:
          if (HIDWORD(v10))
            goto LABEL_6;
          goto LABEL_16;
        case 3:
          goto LABEL_16;
        default:
          goto LABEL_32;
      }
    }
    if (a5)
    {
LABEL_32:
      __break(0xC471u);
      JUMPOUT(0x197FD6BF4);
    }
    switch(a3)
    {
      case 0:
        if (v10 != (char)v10)
          break;
        goto LABEL_16;
      case 1:
        if (v10 != (__int16)v10)
          break;
        goto LABEL_16;
      case 2:
        if (v10 != (int)v10)
          break;
        goto LABEL_16;
      case 3:
LABEL_16:
        v11 = *(uint64_t ***)(a2 + 8);
        v12 = **(unsigned __int8 ***)(a2 + 24);
        if (v12[12] == a4)
        {
        }
        else
        {
          v21 = 0;
          v22 = 512;
          v23 = 1;
          v24 = 0;
          v25 = 0;
          memset(v26, 0, 11);
        }
        if (LOBYTE(v26[1]) && !BYTE1(v26[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FD6BD4);
        }
        if (*(_QWORD *)(a1 + 112) || *(_WORD *)(a1 + 120) || (*(_BYTE *)(a1 + 122) & 3) != 0 || *(_DWORD *)(a1 + 12))
        {
          return;
        }
        v20 = *(_QWORD *)a1;
        if (a1 + 16 != *(_QWORD *)a1)
        {
          if (v20)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v20, v13, v14, v15, v16, v17, v18, v19);
          }
        }
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FD6C14);
    }
  }
LABEL_6:
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 122) &= 0xFCu;
}

double JSC::B3::Air::Inst JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)#1}::operator() const(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)::{lambda(JSC::Width,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise&&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise&)#1}::operator()(uint64_t a1, uint64_t **a2, int a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;

  if (!*(_QWORD *)(a1 + 112) && !*(_WORD *)(a1 + 120) && (*(_BYTE *)(a1 + 122) & 3) == 0 && !*(_DWORD *)(a1 + 12))
  {
    v15 = a1 + 16;
    v14 = *(_QWORD *)a1;
    if (a1 + 16 != *(_QWORD *)a1 && v14)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v14, v6, v7, v8, v9, v10, v11, v12);
    }
    switch(*a2[1])
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
        if (!*(_QWORD *)(a1 + 112) && !*(_WORD *)(a1 + 120))
        {
          v23 = *(_BYTE *)(a1 + 122);
          if ((v23 & 3) == 0 && !*(_DWORD *)(a1 + 12))
          {
            v24 = *(_QWORD *)a1;
            if (v15 != *(_QWORD *)a1)
            {
              if (v24)
              {
                *(_QWORD *)a1 = 0;
                *(_DWORD *)(a1 + 8) = 0;
                WTF::fastFree(v24, v16, v17, v18, v19, v20, v21, v22);
                v23 = *(_BYTE *)(a1 + 122);
              }
            }
            *(_QWORD *)a1 = v15;
            *(_QWORD *)&result = 3;
            *(_QWORD *)(a1 + 8) = 3;
            *(_QWORD *)(a1 + 112) = 0;
            *(_WORD *)(a1 + 120) = 0;
            *(_BYTE *)(a1 + 122) = v23 & 0xFC;
          }
        }
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FD6E2CLL);
    }
  }
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1}::operator()(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }
}

void sub_197FD6EC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,__int128 a41,uint64_t a42,uint64_t a43,__int128 a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,__int128 a49,__int128 a50,__int128 a51,__int128 a52,__int128 a53,__int128 a54,__int128 a55,__int128 a56,__int128 a57,__int128 a58,__int128 a59,__int128 a60)
{
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  JSC::B3::_anonymous_namespace_::LowerToAir *v64;
  uint64_t v65;
  int v66;
  BOOL v67;
  BOOL v68;
  int v71;
  BOOL v72;
  uint64_t v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[25];
  _BYTE v79[25];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;

  v66 = *(unsigned __int8 *)(v61 + 8);
  if (*(_QWORD *)v61)
    v67 = 0;
  else
    v67 = v66 == 0;
  if (v67)
  {
    if (*(_DWORD *)(v61 + 16))
      v68 = 0;
    else
      v68 = *(_DWORD *)(v61 + 20) == 0;
    v66 = v68 && *(_DWORD *)(v61 + 12) == 1 && *(_QWORD *)(v61 + 32) != 0;
  }
  v71 = *(unsigned __int8 *)(v62 + 8);
  if (*(_QWORD *)v62)
    v72 = 0;
  else
    v72 = v71 == 0;
  if (v72)
  {
    LOBYTE(v71) = 0;
    if (!*(_DWORD *)(v62 + 16) && !*(_DWORD *)(v62 + 20) && *(_DWORD *)(v62 + 12) == 1)
      LOBYTE(v71) = *(_QWORD *)(v62 + 32) != 0;
  }
  if (v66 == 1 && ((char)v71 - 1) <= 1)
  {
    v73 = *((_QWORD *)v64 + 50);
    *(_OWORD *)(v65 + 9) = *(__int128 *)((char *)v63 + 9);
    v86 = *v63;
    v88 = *(_OWORD *)v79;
    *(_OWORD *)(v65 + 41) = *(_OWORD *)&v79[9];
    v90 = *(_OWORD *)v78;
    *(_OWORD *)(v65 + 73) = *(_OWORD *)&v78[9];
    v80 = v86;
    v81 = v87;
    v82 = v88;
    v83 = v89;
    v84 = v90;
    v85 = v91;
    v74 = *(_BYTE *)(v62 + 42);
    *(_BYTE *)(v62 + 41) = 1;
    *(_QWORD *)v60 = v60 + 16;
    v75 = v83;
    *(_OWORD *)(v60 + 48) = v82;
    *(_OWORD *)(v60 + 64) = v75;
    v76 = v85;
    *(_OWORD *)(v60 + 80) = v84;
    *(_OWORD *)(v60 + 96) = v76;
    v77 = v81;
    *(_OWORD *)(v60 + 16) = v80;
    *(_OWORD *)(v60 + 32) = v77;
    *(_QWORD *)(v60 + 8) = 0x300000003;
    *(_QWORD *)(v60 + 112) = v73;
    *(_WORD *)(v60 + 120) = 291;
    *(_BYTE *)(v60 + 122) = v74 | *(_BYTE *)(v61 + 42);
    *(_BYTE *)(v61 + 41) = 1;
  }
  else
  {
    *(_QWORD *)v60 = v60 + 16;
    *(_QWORD *)(v60 + 8) = 3;
    *(_QWORD *)(v60 + 112) = 0;
    *(_WORD *)(v60 + 120) = 0;
    *(_BYTE *)(v60 + 122) &= 0xFCu;
  }
}

double JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}::operator()(uint64_t a1, JSC::B3::_anonymous_namespace_::LowerToAir *a2, __int128 *a3, JSC::B3::_anonymous_namespace_::LowerToAir::ArgPromise *this)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double result;
  _BYTE v13[25];
  _BYTE v14[32];
  _BYTE v15[32];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  {
    v8 = *((_QWORD *)a2 + 50);
    *(_OWORD *)&v14[9] = *(__int128 *)((char *)a3 + 9);
    v9 = *a3;
    *(_OWORD *)&v15[9] = *(_OWORD *)&v13[9];
    *(_OWORD *)v14 = v9;
    *(_OWORD *)v15 = *(_OWORD *)v13;
    *(_QWORD *)a1 = a1 + 16;
    v10 = *(_OWORD *)&v14[16];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v14;
    *(_OWORD *)(a1 + 32) = v10;
    v11 = *(_OWORD *)&v15[16];
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v15;
    *(_OWORD *)(a1 + 64) = v11;
    *(_QWORD *)&result = 0x200000003;
    *(_QWORD *)(a1 + 8) = 0x200000003;
    *(_QWORD *)(a1 + 112) = v8;
    *(_DWORD *)(a1 + 120) = 301;
    *(_BYTE *)(a1 + 122) = *((_BYTE *)this + 42);
    *((_BYTE *)this + 41) = 1;
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)&result = 3;
    *(_QWORD *)(a1 + 8) = 3;
    *(_QWORD *)(a1 + 112) = 0;
    *(_WORD *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 122) &= 0xFCu;
  }
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::createBranch(JSC::B3::Value *,BOOL)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}::operator()(uint64_t a1, JSC::B3::_anonymous_namespace_::LowerToAir *a2, _OWORD *a3, JSC::B3::_anonymous_namespace_::LowerToAir::ArgPromise *this, JSC::B3::_anonymous_namespace_::LowerToAir::ArgPromise *a5)
{
  int v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  _OWORD v21[2];
  _OWORD v22[2];
  WTF *v23;
  uint64_t v24;
  _OWORD v25[6];
  uint64_t v26;
  int v27;
  _BYTE v28[32];
  _BYTE v29[32];
  _BYTE v30[32];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (v10 == 1 && v11 == 1)
  {
    v12 = *((_QWORD *)a2 + 50);
    *(_OWORD *)&v28[9] = *(_OWORD *)((char *)a3 + 9);
    *(_OWORD *)v28 = *a3;
    *(_OWORD *)v29 = v22[0];
    *(_OWORD *)&v29[9] = *(_OWORD *)((char *)v22 + 9);
    *(_OWORD *)v30 = v21[0];
    *(_OWORD *)&v30[9] = *(_OWORD *)((char *)v21 + 9);
    v23 = (WTF *)v25;
    v25[0] = *(_OWORD *)v28;
    v25[1] = *(_OWORD *)&v28[16];
    v25[2] = *(_OWORD *)v29;
    v25[3] = *(_OWORD *)&v29[16];
    v25[4] = *(_OWORD *)v30;
    v25[5] = *(_OWORD *)&v30[16];
    v24 = 0x300000003;
    v26 = v12;
    v27 = 299;
    BYTE2(v27) = *((_BYTE *)a5 + 42);
    *((_BYTE *)a5 + 41) = 1;
    v20 = v23;
    if (v25 != (_OWORD *)v23)
    {
      if (v23)
      {
        v23 = 0;
        LODWORD(v24) = 0;
        WTF::fastFree((unint64_t)v20, v13, v14, v15, v16, v17, v18, v19);
      }
    }
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 3;
    *(_QWORD *)(a1 + 112) = 0;
    *(_WORD *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 122) &= 0xFCu;
  }
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::B3::Value *)#1}::operator()(uint64_t **a1, JSC::B3::Value *this)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v2 = *a1;
  if ((JSC::B3::Value *)(*a1)[50] == this)
    return 2;
  if (*(_BYTE *)a1[1])
  {
    v4 = *((unsigned int *)this + 2);
    if (!*(_DWORD *)(v2[1] + 4 * v4) && *(_DWORD *)(v2[10] + 8 * v4) == 1)
      return 1;
  }
  for (i = JSC::B3::Value::children(this); ; i += 8)
  {
    if (i == v7)
    {
      *(_BYTE *)a1[1] = 0;
      return 2;
    }
    if (*(_QWORD *)i)
    {
      v8 = (_QWORD *)(2 * *v2);
      v9 = *v2 < 0 ? 63 : *v8;
      v10 = *(unsigned int *)(*(_QWORD *)i + 8);
      if (v9 > v10)
      {
        v11 = v8 + 1;
        v12 = *v2 >= 0 ? v11 : v2;
        if (((*(unint64_t *)((char *)v12 + ((v10 >> 3) & 0x1FFFFFF8)) >> v10) & 1) != 0)
          break;
      }
    }
  }
  return 0;
}

void JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::B3::Value *,JSC::B3::Air::Inst JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::FusionResult)#1}::operator()(WTF::BitVector *this, uint64_t a2, int a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF::BitVector *v7;

  if (a2 && a3 == 1)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(_QWORD *)this;
    if ((*(_QWORD *)this & 0x8000000000000000) != 0)
      v6 = 63;
    else
      v6 = *(_QWORD *)(2 * v5);
    if (v6 <= v4)
    {
      WTF::BitVector::resizeOutOfLine(this, v4 + 1, 0);
      v5 = *(_QWORD *)this;
    }
    if (v5 >= 0)
      v7 = (WTF::BitVector *)(2 * v5 + 8);
    else
      v7 = this;
    *(_QWORD *)((char *)v7 + ((v4 >> 3) & 0x1FFFFFF8)) |= 1 << v4;
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::Width,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise&&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise&)#1}::operator()(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X11 }
}

void sub_197FD7658(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  __int16 *v20;

  if (*(_QWORD *)(v2 + 112) || *(_WORD *)(v2 + 120) || (*(_BYTE *)(v2 + 122) & 3) != 0 || *(_DWORD *)(v2 + 12))
    return;
  v15 = v2 + 16;
  v14 = *(_QWORD *)v2;
  if (v2 + 16 != *(_QWORD *)v2 && v14)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v14, v7, v8, v9, v10, v11, v12, v13);
  }
  v17 = *v6;
  v16 = v6[1];
  if (v5 == 3)
  {
    v20 = (__int16 *)(*(_QWORD *)(v17 + 8) + 6);
    goto LABEL_19;
  }
  if (v5 >= 2)
  {
    v20 = (__int16 *)(*(_QWORD *)(v17 + 8) + 4);
LABEL_19:
    if (*(_QWORD *)(v2 + 112) || *(_WORD *)(v2 + 120))
      return;
    v18 = *(_BYTE *)(v2 + 122);
    goto LABEL_12;
  }
  *(_QWORD *)v2 = v15;
  *(_QWORD *)(v2 + 8) = 3;
  *(_QWORD *)(v2 + 112) = 0;
  *(_WORD *)(v2 + 120) = 0;
  v18 = *(_BYTE *)(v2 + 122) & 0xFC;
  *(_BYTE *)(v2 + 122) = v18;
LABEL_12:
  if ((v18 & 3) == 0 && !*(_DWORD *)(v2 + 12))
  {
    v19 = *(_QWORD *)v2;
    if (v15 != *(_QWORD *)v2)
    {
      if (v19)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
        WTF::fastFree(v19, v7, v8, v16, v10, v11, v12, v13);
        v18 = *(_BYTE *)(v2 + 122);
      }
    }
    *(_QWORD *)v2 = v15;
    *(_QWORD *)(v2 + 8) = 3;
    *(_QWORD *)(v2 + 112) = 0;
    *(_WORD *)(v2 + 120) = 0;
    *(_BYTE *)(v2 + 122) = v18 & 0xFC;
  }
}

void JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)#1}::operator()(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  JSC::B3::_anonymous_namespace_::LowerToAir *v6;
  uint64_t v7;
  JSC::B3::Value *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  unsigned int v14;
  unsigned __int8 v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  JSC::B3::Value ***v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 v50;
  JSC::B3::Value ***v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 v56;
  WTF *v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 v65;
  WTF *v66;
  WTF *v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  __int128 v76;
  WTF *v77;
  WTF *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 v90;
  WTF *v91;
  WTF *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD *v103;
  __int128 v104;
  WTF *v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  __int128 v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  __int16 v113;
  int v114;
  uint64_t v115;
  char v116;
  _BYTE v117[7];
  uint64_t v118;
  __int16 v119;
  int v120;
  uint64_t v121;
  char v122;
  _BYTE v123[7];
  __int128 v124;
  __int128 v125;
  _QWORD v126[2];
  uint64_t v127;
  __int16 v128;
  int v129;
  uint64_t v130;
  char v131;
  _QWORD v132[2];
  WTF *v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  char v137;
  JSC::B3::Value *v138;
  __int16 v139;
  char v140;
  _BYTE v141[11];
  _QWORD v142[4];
  _QWORD v143[2];
  __int128 v144;
  __int128 v145;
  JSC::B3::Value *v146;
  _BYTE v147[7];
  uint64_t v148;
  char v149;
  uint64_t v150;
  __int16 v151;
  int v152;
  uint64_t v153;
  char v154;

  v6 = *(JSC::B3::_anonymous_namespace_::LowerToAir **)(a2 + 16);
  if (**(_BYTE **)a2)
  {
    v152 = 1;
    v153 = 0;
    v154 = 0;
    v151 = 526;
    v150 = a3 ^ 1;
    if (a4 >= 0xE || ((0x3FCFu >> a4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197FD7EF0);
    }
    v7 = qword_19914FAD8[a4];
  }
  else
  {
    v150 = a3;
    v151 = 526;
    v152 = 1;
    v153 = 0;
    v7 = a4;
    v154 = 0;
  }
  v149 = 0;
  v148 = 0;
  v8 = *(JSC::B3::Value **)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0);
  v146 = v8;
  v9 = *(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 1u);
  v10 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16);
  if (v10 >= 0x80000000)
    v10 = 0x80000000;
  if (v10 - 1 <= 1)
  {
    v11 = *(_WORD *)(v9 + 12) & 0xFFF;
    if (v9)
      v12 = v11 == 3;
    else
      v12 = 0;
    if (v12)
    {
      v30 = *(int *)(v9 + 40);
    }
    else
    {
      if (v9)
        v13 = v11 == 4;
      else
        v13 = 0;
      if (!v13)
        goto LABEL_14;
      v30 = *(_QWORD *)(v9 + 40);
    }
    if ((unint64_t)(v30 + 4095) < 0x1FFF
      || (v30 & 0xFFF) == 0
      && (!((unint64_t)v30 >> 24) || v30 >> 12 == 0 || (unint64_t)(v30 >> 12) >= 0xFFFFFFFFFFFFF001))
    {
      HIDWORD(v144) = 1;
      *(_QWORD *)&v145 = 0;
      BYTE8(v145) = 0;
      WORD4(v144) = 514;
      *(_QWORD *)&v144 = v30;
LABEL_15:
      v143[0] = *(_QWORD *)(a2 + 24);
      v143[1] = &v150;
      v142[0] = &v144;
      v142[1] = v143;
      v142[2] = v6;
      v142[3] = &v146;
      v14 = *(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16);
      if (v14 >= 0x80000000)
        v14 = 0x80000000;
      if (v14 >= 6)
        v15 = 0;
      else
        v15 = 0x40302030200uLL >> (8 * v14);
      if (!**(_BYTE **)(a2 + 32))
      {
LABEL_192:
        if ((_QWORD)v144)
        {
          if ((_QWORD)v144 != (int)v144)
            goto LABEL_196;
        }
        else if (!BYTE8(v144) && !(_QWORD)v145 && HIDWORD(v144) == 1)
        {
          goto LABEL_196;
        }
        v127 = 0;
        v128 = 512;
        v129 = 1;
        v130 = 0;
        v131 = 0;
        LOWORD(v132[1]) = 0;
        BYTE2(v132[1]) = 0;
        v132[0] = v146;
        v124 = v144;
        v125 = v145;
        memset(v126, 0, 11);
        if (LOBYTE(v126[1]) && !BYTE1(v126[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FD8844);
        }
        if (LOBYTE(v132[1]) && !BYTE1(v132[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FD8864);
        }
        if (!*(_QWORD *)v141 && !*(_WORD *)&v141[8] && (v141[10] & 3) == 0 && !v135)
        {
          v105 = v133;
          if (&v136 != (uint64_t *)v133 && v133)
          {
            v133 = 0;
            v134 = 0;
            WTF::fastFree((unint64_t)v105, v17, v18, v19, v20, v21, v22, v23);
          }
LABEL_196:
          v133 = 0;
          LOWORD(v134) = 512;
          v135 = 1;
          v136 = 0;
          v137 = 0;
          v139 = 0;
          v140 = 0;
          v138 = v146;
          v127 = 0;
          v128 = 512;
          v129 = 1;
          v130 = 0;
          v131 = 0;
          LOWORD(v132[1]) = 0;
          BYTE2(v132[1]) = 0;
          v132[0] = v9;
          __asm { BR              X11 }
        }
        *(_QWORD *)a1 = a1 + 16;
        *(_QWORD *)(a1 + 8) = 3;
        v24 = v133;
        if (v133 == (WTF *)&v136)
        {
          v25 = v135;
          if (v135)
          {
            v101 = 0;
            v102 = 32 * v135;
            do
            {
              v103 = (_OWORD *)(a1 + 16 + v101);
              v104 = *(_OWORD *)((char *)v24 + v101 + 16);
              *v103 = *(_OWORD *)((char *)v24 + v101);
              v103[1] = v104;
              v101 += 32;
            }
            while (v102 != v101);
          }
          goto LABEL_211;
        }
LABEL_210:
        *(_QWORD *)a1 = v24;
        v25 = v135;
        *(_DWORD *)(a1 + 8) = v134;
        v24 = (WTF *)&v136;
        goto LABEL_211;
      }
      if (v151 != 14)
        goto LABEL_139;
      v16 = v150;
      if (v150 <= 0xD && ((1 << v150) & 0x3C03) != 0)
      {
        if (*(_QWORD *)v141 || *(_WORD *)&v141[8] || (v141[10] & 3) != 0 || v135)
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v24 = v133;
          if (v133 != (WTF *)&v136)
            goto LABEL_210;
          v25 = v135;
          if (v135)
          {
            v26 = 0;
            v27 = 32 * v135;
            do
            {
              v28 = (_OWORD *)(a1 + 16 + v26);
              v29 = *(_OWORD *)((char *)v24 + v26 + 16);
              *v28 = *(_OWORD *)((char *)v24 + v26);
              v28[1] = v29;
              v26 += 32;
            }
            while (v27 != v26);
          }
          goto LABEL_211;
        }
        v57 = v133;
        if (&v136 != (uint64_t *)v133 && v133)
        {
          v133 = 0;
          v134 = 0;
          WTF::fastFree((unint64_t)v57, v17, v18, v19, v20, v21, v22, v23);
        }
        if (v151 != 14)
          goto LABEL_139;
        v16 = v150;
      }
      if (v16 < 4 || v16 - 8 <= 1)
      {
        if (*(_QWORD *)v141 || *(_WORD *)&v141[8] || (v141[10] & 3) != 0 || v135)
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v24 = v133;
          if (v133 != (WTF *)&v136)
            goto LABEL_210;
          v25 = v135;
          if (v135)
          {
            v58 = 0;
            v59 = 32 * v135;
            do
            {
              v60 = (_OWORD *)(a1 + 16 + v58);
              v61 = *(_OWORD *)((char *)v24 + v58 + 16);
              *v60 = *(_OWORD *)((char *)v24 + v58);
              v60[1] = v61;
              v58 += 32;
            }
            while (v59 != v58);
          }
          goto LABEL_211;
        }
        v66 = v133;
        if (&v136 != (uint64_t *)v133 && v133)
        {
          v133 = 0;
          v134 = 0;
          WTF::fastFree((unint64_t)v66, v17, v18, v19, v20, v21, v22, v23);
        }
        if (v151 != 14)
          goto LABEL_139;
        v16 = v150;
      }
      if (v16 <= 0xD && ((1 << v16) & 0x3C03) != 0)
      {
        if (*(_QWORD *)v141 || *(_WORD *)&v141[8] || (v141[10] & 3) != 0 || v135)
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v24 = v133;
          if (v133 != (WTF *)&v136)
            goto LABEL_210;
          v25 = v135;
          if (v135)
          {
            v62 = 0;
            v63 = 32 * v135;
            do
            {
              v64 = (_OWORD *)(a1 + 16 + v62);
              v65 = *(_OWORD *)((char *)v24 + v62 + 16);
              *v64 = *(_OWORD *)((char *)v24 + v62);
              v64[1] = v65;
              v62 += 32;
            }
            while (v63 != v62);
          }
          goto LABEL_211;
        }
        v68 = v133;
        if (&v136 != (uint64_t *)v133 && v133)
        {
          v133 = 0;
          v134 = 0;
          WTF::fastFree((unint64_t)v68, v17, v18, v19, v20, v21, v22, v23);
        }
        if (v151 != 14)
          goto LABEL_139;
        v16 = v150;
      }
      if (v16 < 4 || v16 - 8 <= 1)
      {
        if (*(_QWORD *)v141 || *(_WORD *)&v141[8] || (v141[10] & 3) != 0 || v135)
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v24 = v133;
          if (v133 != (WTF *)&v136)
            goto LABEL_210;
          v25 = v135;
          if (v135)
          {
            v69 = 0;
            v70 = 32 * v135;
            do
            {
              v71 = (_OWORD *)(a1 + 16 + v69);
              v72 = *(_OWORD *)((char *)v24 + v69 + 16);
              *v71 = *(_OWORD *)((char *)v24 + v69);
              v71[1] = v72;
              v69 += 32;
            }
            while (v70 != v69);
          }
          goto LABEL_211;
        }
        v77 = v133;
        if (&v136 != (uint64_t *)v133 && v133)
        {
          v133 = 0;
          v134 = 0;
          WTF::fastFree((unint64_t)v77, v17, v18, v19, v20, v21, v22, v23);
        }
      }
LABEL_139:
      if (!*(_QWORD *)v141 && !*(_WORD *)&v141[8] && (v141[10] & 3) == 0 && !v135)
      {
        v78 = v133;
        if (&v136 != (uint64_t *)v133 && v133)
        {
          v133 = 0;
          v134 = 0;
          WTF::fastFree((unint64_t)v78, v17, v18, v19, v20, v21, v22, v23);
        }
        if (*((_BYTE *)v146 + 12) == 67)
        {
        }
        else
        {
          v127 = 0;
          v128 = 512;
          v129 = 1;
          v130 = 0;
          v131 = 0;
          memset(v132, 0, 11);
        }
        *(_QWORD *)&v124 = 0;
        WORD4(v124) = 512;
        HIDWORD(v124) = 1;
        *(_QWORD *)&v125 = 0;
        BYTE8(v125) = 0;
        LOWORD(v126[1]) = 0;
        BYTE2(v126[1]) = 0;
        v126[0] = v9;
        if (LOBYTE(v132[1]) && !BYTE1(v132[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197FD8484);
        }
        if (*(_QWORD *)v141 || *(_WORD *)&v141[8] || (v141[10] & 3) != 0 || v135)
        {
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v24 = v133;
          if (v133 == (WTF *)&v136)
          {
            v86 = v135;
            if (v135)
            {
              v87 = 0;
              v88 = 32 * v135;
              do
              {
                v89 = (_OWORD *)(a1 + 16 + v87);
                v90 = *(_OWORD *)((char *)v24 + v87 + 16);
                *v89 = *(_OWORD *)((char *)v24 + v87);
                v89[1] = v90;
                v87 += 32;
              }
              while (v88 != v87);
            }
LABEL_166:
            v135 = 0;
            *(_DWORD *)(a1 + 12) = v86;
            *(_QWORD *)(a1 + 112) = *(_QWORD *)v141;
            *(_DWORD *)(a1 + 119) = *(_DWORD *)&v141[7];
            if (&v136 == (uint64_t *)v24)
              return;
LABEL_212:
            if (v24)
            {
              v133 = 0;
              v134 = 0;
              WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
            }
            return;
          }
        }
        else
        {
          v92 = v133;
          if (&v136 != (uint64_t *)v133 && v133)
          {
            v133 = 0;
            v134 = 0;
            WTF::fastFree((unint64_t)v92, v79, v80, v81, v82, v83, v84, v85);
          }
          v127 = 0;
          v128 = 512;
          v129 = 1;
          v130 = 0;
          v131 = 0;
          LOWORD(v132[1]) = 0;
          BYTE2(v132[1]) = 0;
          v132[0] = v146;
          if (*(_BYTE *)(v9 + 12) == 67)
          {
          }
          else
          {
            *(_QWORD *)&v124 = 0;
            WORD4(v124) = 512;
            HIDWORD(v124) = 1;
            *(_QWORD *)&v125 = 0;
            BYTE8(v125) = 0;
            memset(v126, 0, 11);
          }
          if (LOBYTE(v126[1]) && !BYTE1(v126[1]))
          {
            __break(0xC471u);
            JUMPOUT(0x197FD88F4);
          }
          if (LOBYTE(v132[1]) && !BYTE1(v132[1]))
          {
            __break(0xC471u);
            JUMPOUT(0x197FD8914);
          }
          if (!*(_QWORD *)v141 && !*(_WORD *)&v141[8] && (v141[10] & 3) == 0 && !v135)
          {
            v100 = v133;
            if (&v136 != (uint64_t *)v133 && v133)
            {
              v133 = 0;
              v134 = 0;
              WTF::fastFree((unint64_t)v100, v93, v94, v95, v96, v97, v98, v99);
            }
            goto LABEL_192;
          }
          *(_QWORD *)a1 = a1 + 16;
          *(_QWORD *)(a1 + 8) = 3;
          v24 = v133;
          if (v133 == (WTF *)&v136)
          {
            v86 = v135;
            if (v135)
            {
              v106 = 0;
              v107 = 32 * v135;
              do
              {
                v108 = (_OWORD *)(a1 + 16 + v106);
                v109 = *(_OWORD *)((char *)v24 + v106 + 16);
                *v108 = *(_OWORD *)((char *)v24 + v106);
                v108[1] = v109;
                v106 += 32;
              }
              while (v107 != v106);
            }
            goto LABEL_166;
          }
        }
        *(_QWORD *)a1 = v24;
        v86 = v135;
        *(_DWORD *)(a1 + 8) = v134;
        v24 = (WTF *)&v136;
        goto LABEL_166;
      }
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 3;
      v24 = v133;
      if (v133 != (WTF *)&v136)
        goto LABEL_210;
      v25 = v135;
      if (v135)
      {
        v73 = 0;
        v74 = 32 * v135;
        do
        {
          v75 = (_OWORD *)(a1 + 16 + v73);
          v76 = *(_OWORD *)((char *)v24 + v73 + 16);
          *v75 = *(_OWORD *)((char *)v24 + v73);
          v75[1] = v76;
          v73 += 32;
        }
        while (v74 != v73);
      }
LABEL_211:
      v135 = 0;
      *(_DWORD *)(a1 + 12) = v25;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)v141;
      *(_DWORD *)(a1 + 119) = *(_DWORD *)&v141[7];
      if (&v136 == (uint64_t *)v24)
        return;
      goto LABEL_212;
    }
LABEL_14:
    *(_QWORD *)&v144 = 0;
    WORD4(v144) = 512;
    HIDWORD(v144) = 1;
    *(_QWORD *)&v145 = 0;
    BYTE8(v145) = 0;
    goto LABEL_15;
  }
  v127 = 0;
  v128 = 512;
  v129 = 1;
  v130 = 0;
  v131 = 0;
  LOWORD(v132[1]) = 0;
  BYTE2(v132[1]) = 0;
  v132[0] = v8;
  if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16) == 4
    && v9
    && (*(_WORD *)(v9 + 12) & 0xFFF) == 5
    && !*(_QWORD *)(v9 + 40))
  {
    v36 = *(JSC::B3::Value ****)(a2 + 40);
    v118 = v7;
    v119 = 528;
    v120 = 1;
    v121 = v148;
    v122 = v149;
    *(_DWORD *)v123 = *(_DWORD *)v147;
    *(_DWORD *)&v123[3] = *(_DWORD *)&v147[3];
    if (*(_QWORD *)v141 || *(_WORD *)&v141[8] || (v141[10] & 3) != 0 || v135)
    {
      v44 = *(unsigned int *)(v9 + 8);
      if (!*(_DWORD *)(*((_QWORD *)v6 + 1) + 4 * v44) && *(_DWORD *)(*((_QWORD *)v6 + 10) + 8 * v44) == 1)
      *(_QWORD *)a1 = a1 + 16;
      *(_QWORD *)(a1 + 8) = 3;
      v45 = v133;
      if (v133 == (WTF *)&v136)
      {
        v46 = v135;
        if (v135)
        {
          v47 = 0;
          v48 = 32 * v135;
          do
          {
            v49 = (_OWORD *)(a1 + 16 + v47);
            v50 = *(_OWORD *)((char *)v45 + v47 + 16);
            *v49 = *(_OWORD *)((char *)v45 + v47);
            v49[1] = v50;
            v47 += 32;
          }
          while (v48 != v47);
        }
        goto LABEL_67;
      }
      goto LABEL_84;
    }
    v67 = v133;
    if (&v136 != (uint64_t *)v133 && v133)
    {
      v133 = 0;
      v134 = 0;
      WTF::fastFree((unint64_t)v67, v37, v38, v39, v40, v41, v42, v43);
    }
  }
  if (*(_DWORD *)(*(_QWORD *)JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0) + 16) == 3
    && v9
    && (*(_WORD *)(v9 + 12) & 0xFFF) == 6
    && !*(_DWORD *)(v9 + 40))
  {
    v51 = *(JSC::B3::Value ****)(a2 + 48);
    v112 = v7;
    v113 = 528;
    v114 = 1;
    v115 = v148;
    v116 = v149;
    *(_DWORD *)v117 = *(_DWORD *)v147;
    *(_DWORD *)&v117[3] = *(_DWORD *)&v147[3];
    if (!*(_QWORD *)v141 && !*(_WORD *)&v141[8] && (v141[10] & 3) == 0 && !v135)
    {
      v91 = v133;
      if (&v136 != (uint64_t *)v133 && v133)
      {
        v133 = 0;
        v134 = 0;
        WTF::fastFree((unint64_t)v91, v37, v38, v39, v40, v41, v42, v43);
      }
      goto LABEL_42;
    }
    v52 = *(unsigned int *)(v9 + 8);
    if (!*(_DWORD *)(*((_QWORD *)v6 + 1) + 4 * v52) && *(_DWORD *)(*((_QWORD *)v6 + 10) + 8 * v52) == 1)
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 3;
    v45 = v133;
    if (v133 == (WTF *)&v136)
    {
      v46 = v135;
      if (v135)
      {
        v53 = 0;
        v54 = 32 * v135;
        do
        {
          v55 = (_OWORD *)(a1 + 16 + v53);
          v56 = *(_OWORD *)((char *)v45 + v53 + 16);
          *v55 = *(_OWORD *)((char *)v45 + v53);
          v55[1] = v56;
          v53 += 32;
        }
        while (v54 != v53);
      }
      goto LABEL_67;
    }
LABEL_84:
    *(_QWORD *)a1 = v45;
    v46 = v135;
    *(_DWORD *)(a1 + 8) = v134;
    v45 = (WTF *)&v136;
LABEL_67:
    v135 = 0;
    *(_DWORD *)(a1 + 12) = v46;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)v141;
    *(_DWORD *)(a1 + 119) = *(_DWORD *)&v141[7];
    if (&v136 != (uint64_t *)v45 && v45)
    {
      v133 = 0;
      v134 = 0;
      WTF::fastFree((unint64_t)v45, v37, v38, v39, v40, v41, v42, v43);
    }
    goto LABEL_49;
  }
LABEL_42:
  v133 = 0;
  LOWORD(v134) = 512;
  v135 = 1;
  v136 = 0;
  v137 = 0;
  v139 = 0;
  v140 = 0;
  v138 = (JSC::B3::Value *)v9;
  v31 = JSC::B3::Value::child(**(JSC::B3::Value ***)(a2 + 8), 0);
  v32 = 64;
  if (*(_DWORD *)(*(_QWORD *)v31 + 16) == 3)
  {
    v32 = 56;
    v33 = (uint64_t *)&v111;
  }
  else
  {
    v33 = &v110;
  }
  v34 = 8;
  v35 = *(_QWORD *)(a2 + v32);
  if (*(_DWORD *)(*(_QWORD *)v31 + 16) == 3)
    v34 = 10;
  *v33 = v7;
  *((_WORD *)v33 + 4) = 528;
  *((_DWORD *)v33 + 3) = 1;
  v33[2] = v148;
  *((_BYTE *)v33 + 24) = v149;
  *(_DWORD *)((char *)v33 + 25) = *(_DWORD *)v147;
  *((_DWORD *)v33 + 7) = *(_DWORD *)&v147[3];
  if ((_BYTE)v139 && !HIBYTE(v139))
  {
    __break(0xC471u);
    JUMPOUT(0x197FD7ED0);
  }
LABEL_49:
  if (LOBYTE(v132[1]) && !BYTE1(v132[1]))
  {
    __break(0xC471u);
    JUMPOUT(0x197FD7C00);
  }
}

double JSC::B3::Air::Inst JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(void)#1}::operator() const(void)::{lambda(JSC::Width,JSC::B3::Air::Arg::Signedness,JSC::B3::Opcode)#1}::operator()(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  JSC::B3::_anonymous_namespace_::LowerToAir *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  uint64_t v37;
  char v38;
  _QWORD v39[2];

  if (**(_BYTE **)a2)
  {
    v9 = *(JSC::B3::_anonymous_namespace_::LowerToAir **)(a2 + 32);
    if (!a4)
    {
      v10 = **(_QWORD **)(a2 + 8);
      switch(a3)
      {
        case 0:
          if (v10 < 0x100)
            break;
          goto LABEL_22;
        case 1:
          if (v10 >= 0x10000)
            goto LABEL_22;
          break;
        case 2:
          if (HIDWORD(v10))
            goto LABEL_22;
          break;
        case 3:
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197FD8BD4);
      }
    }
    v11 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)v11
      || *(_BYTE *)(v11 + 8)
      || *(_DWORD *)(v11 + 16)
      || *(_DWORD *)(v11 + 20)
      || *(_DWORD *)(v11 + 12) != 1)
    {
      v12 = *(_QWORD *)(a2 + 24);
      v13 = **(unsigned __int8 ***)(a2 + 40);
      if (v13[12] == a5)
      {
      }
      else
      {
        v34 = 0;
        v35 = 512;
        v36 = 1;
        v37 = 0;
        v38 = 0;
        memset(v39, 0, 11);
      }
      if (LOBYTE(v39[1]) && !BYTE1(v39[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x197FD8BB4);
      }
      if (*(_QWORD *)(a1 + 112) || *(_WORD *)(a1 + 120) || (*(_BYTE *)(a1 + 122) & 3) != 0 || *(_DWORD *)(a1 + 12))
        goto LABEL_19;
      v22 = *(_QWORD *)a1;
      if (a1 + 16 != *(_QWORD *)a1 && v22)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree(v22, v14, v15, v16, v17, v18, v19, v20);
      }
    }
    v23 = *(_QWORD *)(a2 + 48);
    if (*(_QWORD *)v23
      || *(_BYTE *)(v23 + 8)
      || *(_DWORD *)(v23 + 16)
      || *(_DWORD *)(v23 + 20)
      || *(_DWORD *)(v23 + 12) != 1)
    {
      v24 = *(_QWORD *)(a2 + 24);
      v25 = **(unsigned __int8 ***)(a2 + 40);
      if (v25[12] == a5)
      {
      }
      else
      {
        v34 = 0;
        v35 = 512;
        v36 = 1;
        v37 = 0;
        v38 = 0;
        memset(v39, 0, 11);
      }
      if (LOBYTE(v39[1]) && !BYTE1(v39[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x197FD8D44);
      }
      if (!*(_QWORD *)(a1 + 112) && !*(_WORD *)(a1 + 120) && (*(_BYTE *)(a1 + 122) & 3) == 0 && !*(_DWORD *)(a1 + 12))
      {
        v33 = *(_QWORD *)a1;
        if (a1 + 16 != *(_QWORD *)a1)
        {
          if (v33)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v33, v26, v27, v28, v29, v30, v31, v32);
          }
        }
        goto LABEL_22;
      }
LABEL_19:
      return result;
    }
  }
LABEL_22:
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)&result = 3;
  *(_QWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 122) &= 0xFCu;
  return result;
}

void JSC::B3::Air::Inst JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)#1}::operator() const(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)::{lambda(JSC::Width,JSC::B3::Opcode,JSC::B3::Air::Arg::Signedness)#1}::operator()(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  JSC::B3::_anonymous_namespace_::LowerToAir *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  char v25;
  _QWORD v26[2];

  v9 = *(JSC::B3::_anonymous_namespace_::LowerToAir **)(a2 + 16);
  v10 = *(_QWORD **)a2;
  if (!**(_QWORD **)a2
    && !*((_BYTE *)v10 + 8)
    && !*((_DWORD *)v10 + 4)
    && !*((_DWORD *)v10 + 5)
    && *((_DWORD *)v10 + 3) == 1
    || !JSC::B3::Air::Arg::isRepresentableAs(v10, a3, a5))
  {
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(a2 + 8);
  v12 = **(unsigned __int8 ***)(a2 + 24);
  if (v12[12] == a4)
  {
  }
  else
  {
    v21 = 0;
    v22 = 512;
    v23 = 1;
    v24 = 0;
    v25 = 0;
    memset(v26, 0, 11);
  }
  if (LOBYTE(v26[1]) && !BYTE1(v26[1]))
  {
    __break(0xC471u);
    JUMPOUT(0x197FD8F2CLL);
  }
  if (!*(_QWORD *)(a1 + 112) && !*(_WORD *)(a1 + 120) && (*(_BYTE *)(a1 + 122) & 3) == 0 && !*(_DWORD *)(a1 + 12))
  {
    v20 = *(_QWORD *)a1;
    if (a1 + 16 != *(_QWORD *)a1)
    {
      if (v20)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree(v20, v13, v14, v15, v16, v17, v18, v19);
      }
    }
LABEL_6:
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 3;
    *(_QWORD *)(a1 + 112) = 0;
    *(_WORD *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 122) &= 0xFCu;
    return;
  }
}

void JSC::B3::Air::Inst JSC::B3::`anonymous namespace'::LowerToAir::createGenericCompare<JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1},JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}>(JSC::B3::Value *,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::Width,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1} const&,JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2} const&,BOOL)::{lambda(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)#1}::operator() const(JSC::MacroAssemblerARM64::RelationalCondition,JSC::MacroAssemblerARM64::DoubleCondition)::{lambda(JSC::Width,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise&&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise&)#1}::operator()(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X11 }
}

void sub_197FD8FA8(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  char v25;

  if (*(_QWORD *)(v2 + 112) || *(_WORD *)(v2 + 120) || (*(_BYTE *)(v2 + 122) & 3) != 0 || *(_DWORD *)(v2 + 12))
    return;
  v15 = v2 + 16;
  v14 = *(_QWORD *)v2;
  if (v2 + 16 != *(_QWORD *)v2 && v14)
  {
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v2 + 8) = 0;
    WTF::fastFree(v14, v7, v8, v9, v10, v11, v12, v13);
  }
  v16 = *v6;
  v17 = *(_QWORD *)v6[1];
  switch(*(_QWORD *)v6[1])
  {
    case 0u:
    case 1u:
      break;
    case 2u:
      v17 = 9;
      break;
    case 3u:
      v17 = 8;
      break;
    case 8u:
      v17 = 3;
      break;
    case 9u:
      v17 = 2;
      break;
    case 0xAu:
      v17 = 13;
      break;
    case 0xBu:
      v17 = 12;
      break;
    case 0xCu:
      v17 = 11;
      break;
    case 0xDu:
      v17 = 10;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FD91F0);
  }
  v23 = 1;
  v24 = 0;
  v25 = 0;
  v22 = 526;
  v21 = v17;
  if (v5 == 2)
  {
    v18 = *(__int16 **)(v16 + 8);
    goto LABEL_13;
  }
  if (v5 >= 2)
  {
    v18 = (__int16 *)(*(_QWORD *)(v16 + 8) + 2);
LABEL_13:
    if (*(_QWORD *)(v2 + 112) || *(_WORD *)(v2 + 120))
      return;
    v19 = *(_BYTE *)(v2 + 122);
    goto LABEL_18;
  }
  *(_QWORD *)v2 = v15;
  *(_QWORD *)(v2 + 8) = 3;
  *(_QWORD *)(v2 + 112) = 0;
  *(_WORD *)(v2 + 120) = 0;
  v19 = *(_BYTE *)(v2 + 122) & 0xFC;
  *(_BYTE *)(v2 + 122) = v19;
LABEL_18:
  if ((v19 & 3) == 0 && !*(_DWORD *)(v2 + 12))
  {
    v20 = *(_QWORD *)v2;
    if (v15 != *(_QWORD *)v2)
    {
      if (v20)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
        WTF::fastFree(v20, v7, v8, v9, v10, v11, v12, v13);
        v19 = *(_BYTE *)(v2 + 122);
      }
    }
    *(_QWORD *)v2 = v15;
    *(_QWORD *)(v2 + 8) = 3;
    *(_QWORD *)(v2 + 112) = 0;
    *(_WORD *)(v2 + 120) = 0;
    *(_BYTE *)(v2 + 122) = v19 & 0xFC;
  }
}

double JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1}::operator()(uint64_t a1, signed __int16 a2, JSC::B3::Value **a3, uint64_t a4, JSC::B3::_anonymous_namespace_::LowerToAir::ArgPromise *this)
{
  int v10;
  int v11;
  double result;
  int v14;
  JSC::B3::Value **v15;
  int v16;
  JSC::B3::Value **v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  JSC::B3::Value **v22;
  int v23;
  unsigned __int16 v24;
  JSC::B3::Value **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31[2];
  __int128 v32[2];

  v10 = *(unsigned __int8 *)(a4 + 8);
  if (a2 != 310)
  {
    if (a2 <= 355)
    {
      switch(a2)
      {
        case 282:
        case 283:
          if (v10 != 14)
            goto LABEL_6;
          goto LABEL_17;
        case 284:
        case 285:
        case 302:
        case 303:
        case 304:
          if (v10 != 15)
            goto LABEL_6;
          goto LABEL_17;
        case 286:
        case 287:
          if (v10 != 16)
            goto LABEL_6;
          goto LABEL_17;
        case 288:
        case 289:
        case 290:
        case 291:
        case 292:
        case 293:
        case 294:
        case 295:
        case 296:
        case 297:
        case 298:
        case 299:
        case 300:
        case 301:
        case 306:
        case 307:
        case 308:
        case 309:
        case 310:
        case 318:
        case 319:
        case 320:
        case 321:
        case 322:
        case 324:
          goto LABEL_6;
        case 305:
        case 312:
        case 313:
          if (v10 == 15)
            goto LABEL_12;
          goto LABEL_6;
        case 311:
          if (v10 != 14)
            goto LABEL_6;
          goto LABEL_12;
        case 314:
        case 315:
        case 316:
        case 317:
        case 323:
        case 325:
          if (v10 != 16)
            goto LABEL_6;
          goto LABEL_12;
        default:
          switch(a2)
          {
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
              goto LABEL_20;
            default:
              goto LABEL_6;
          }
      }
    }
    if (a2 <= 430)
    {
      switch(a2)
      {
        case 356:
          if (v10 != 16)
            goto LABEL_6;
          goto LABEL_39;
        case 357:
          if (v10 != 14)
            goto LABEL_6;
LABEL_39:
          if (v11 != 21)
            goto LABEL_6;
          goto LABEL_13;
        case 358:
          if (v10 != 14 || v11 != 21)
            goto LABEL_6;
          goto LABEL_18;
        case 361:
        case 362:
        case 363:
        case 364:
        case 365:
        case 368:
        case 369:
        case 370:
        case 376:
        case 377:
        case 378:
        case 379:
        case 381:
        case 384:
        case 389:
        case 390:
          goto LABEL_16;
        case 371:
        case 372:
        case 373:
          if (v10 != 21)
            goto LABEL_6;
LABEL_12:
          if (v11 == 1)
            goto LABEL_13;
          goto LABEL_6;
        case 391:
          if (v10 != 21 || v11 != 2)
            goto LABEL_6;
          goto LABEL_13;
        default:
          goto LABEL_6;
      }
    }
    if (a2 == 431 || a2 == 432)
    {
LABEL_16:
      if (v10 != 21)
        goto LABEL_6;
    }
    else
    {
      if (a2 != 434)
        goto LABEL_6;
LABEL_20:
      if (v10 != 1)
        goto LABEL_6;
    }
LABEL_17:
    if (v11 == 1)
    {
LABEL_18:
      v22 = (JSC::B3::Value **)JSC::B3::Value::child(a3[50], 1u);
      v24 = JSC::B3::Air::relaxedMoveForType(*((_DWORD *)a3[50] + 4));
      v25 = (JSC::B3::Value **)JSC::B3::Value::child(a3[50], 2u);
      return result;
    }
LABEL_6:
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)&result = 3;
    *(_QWORD *)(a1 + 8) = 3;
    *(_QWORD *)(a1 + 112) = 0;
    *(_WORD *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 122) &= 0xFCu;
    return result;
  }
  if (v10 != 14 || v11 != 1)
    goto LABEL_6;
LABEL_13:
  v15 = (JSC::B3::Value **)JSC::B3::Value::child(a3[50], 1u);
  v17 = (JSC::B3::Value **)JSC::B3::Value::child(a3[50], 2u);
  v19 = (uint64_t)a3[50];
  v20 = *(_OWORD *)(a4 + 16);
  v32[0] = *(_OWORD *)a4;
  v32[1] = v20;
  JSC::B3::Air::Inst::Inst<JSC::B3::Air::Arg,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>((uint64_t *)a1, (unsigned __int16)a2, v19, v32, v31, v16, v18, v14);
  *(_BYTE *)(a1 + 122) |= *((_BYTE *)this + 42);
  *((_BYTE *)this + 41) = 1;
  return result;
}

double JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Arg,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#2}::operator()(uint64_t a1, unsigned __int16 a2, JSC::B3::Value **this, uint64_t a4, uint64_t a5)
{
  int v10;
  BOOL v11;
  int v12;
  int v13;
  BOOL v14;
  int v17;
  uint64_t v19;
  JSC::B3::Value **v20;
  int v21;
  JSC::B3::Value *v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  JSC::B3::Value **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  JSC::B3::Value *v33;
  uint64_t v34;
  _OWORD *v35;
  uint64_t v36;
  _OWORD *v37;
  double result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  JSC::B3::Value **v45;
  int v46;
  JSC::B3::Value **v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  _BYTE v51[25];
  _BYTE v52[32];
  _BYTE v53[32];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int8 *)(a5 + 8);
  if (*(_QWORD *)a5)
    v11 = 0;
  else
    v11 = v10 == 0;
  v12 = v11;
  v13 = *(unsigned __int8 *)(a5 + 8);
  if (v11)
  {
    if (*(_DWORD *)(a5 + 16))
      v14 = 0;
    else
      v14 = *(_DWORD *)(a5 + 20) == 0;
    v13 = v14 && *(_DWORD *)(a5 + 12) == 1 && *(_QWORD *)(a5 + 32) != 0;
  }
  v17 = *(unsigned __int8 *)(a4 + 8);
  if (a2 == 310)
  {
    if (v17 != 14 || v13 != 1)
      goto LABEL_26;
LABEL_59:
    v45 = (JSC::B3::Value **)JSC::B3::Value::child(this[50], 1u);
    v47 = (JSC::B3::Value **)JSC::B3::Value::child(this[50], 2u);
    v49 = (uint64_t)this[50];
    v50 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)v52 = *(_OWORD *)a4;
    *(_OWORD *)&v52[16] = v50;
    JSC::B3::Air::Inst::Inst<JSC::B3::Air::Arg,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp,JSC::B3::Air::Tmp>((uint64_t *)a1, a2, v49, (__int128 *)v52, (__int128 *)v51, v46, v48, v44);
    v43 = *(_BYTE *)(a1 + 122) | *(_BYTE *)(a5 + 42);
LABEL_60:
    *(_BYTE *)(a1 + 122) = v43;
    *(_BYTE *)(a5 + 41) = 1;
    return result;
  }
  if ((__int16)a2 <= 355)
  {
    switch(a2)
    {
      case 0x131u:
      case 0x138u:
      case 0x139u:
        if (v17 == 15)
          goto LABEL_58;
        goto LABEL_26;
      case 0x137u:
        if (v17 != 14)
          goto LABEL_26;
        goto LABEL_58;
      case 0x13Au:
      case 0x13Bu:
      case 0x13Cu:
      case 0x13Du:
      case 0x143u:
      case 0x145u:
        if (v17 != 16)
          goto LABEL_26;
        goto LABEL_58;
      default:
        goto LABEL_26;
    }
  }
  if ((__int16)a2 > 371)
  {
    if (a2 != 372 && a2 != 373)
    {
      if (a2 == 391 && v17 == 21 && v13 == 2)
        goto LABEL_59;
      goto LABEL_26;
    }
    goto LABEL_84;
  }
  if (a2 == 356)
  {
    if (v17 != 16)
      goto LABEL_26;
    goto LABEL_89;
  }
  if (a2 == 357)
  {
    if (v17 != 14)
      goto LABEL_26;
LABEL_89:
    if (v13 == 21)
      goto LABEL_59;
    goto LABEL_26;
  }
  if (a2 != 371)
    goto LABEL_26;
LABEL_84:
  if (v17 == 21)
  {
LABEL_58:
    if (v13 == 1)
      goto LABEL_59;
  }
LABEL_26:
  if (v12)
  {
    v10 = 0;
    if (!*(_DWORD *)(a5 + 16) && !*(_DWORD *)(a5 + 20) && *(_DWORD *)(a5 + 12) == 1)
      v10 = *(_QWORD *)(a5 + 32) != 0;
  }
  if ((__int16)a2 <= 301)
  {
    switch(a2)
    {
      case 0x11Au:
      case 0x11Bu:
        if (v17 == 14)
          goto LABEL_48;
        goto LABEL_66;
      case 0x11Cu:
      case 0x11Du:
        goto LABEL_67;
      case 0x11Eu:
      case 0x11Fu:
        goto LABEL_82;
      default:
        switch(a2)
        {
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
            goto LABEL_34;
          default:
            goto LABEL_66;
        }
    }
  }
  if ((__int16)a2 <= 303)
    goto LABEL_67;
  if ((__int16)a2 > 316)
  {
    if ((__int16)a2 <= 430)
    {
      switch(a2)
      {
        case 0x166u:
          if (v17 != 14 || v10 != 21)
            goto LABEL_66;
          goto LABEL_49;
        case 0x167u:
        case 0x168u:
        case 0x16Eu:
        case 0x16Fu:
        case 0x173u:
        case 0x174u:
        case 0x175u:
        case 0x176u:
        case 0x177u:
        case 0x17Cu:
        case 0x17Eu:
        case 0x17Fu:
        case 0x181u:
        case 0x182u:
        case 0x183u:
        case 0x184u:
          goto LABEL_66;
        case 0x169u:
        case 0x16Au:
        case 0x16Bu:
        case 0x16Cu:
        case 0x16Du:
        case 0x170u:
        case 0x171u:
        case 0x172u:
        case 0x178u:
        case 0x179u:
        case 0x17Au:
        case 0x17Bu:
        case 0x17Du:
        case 0x180u:
        case 0x185u:
        case 0x186u:
          goto LABEL_55;
        default:
          if (a2 != 317)
            goto LABEL_66;
          goto LABEL_82;
      }
    }
    if (a2 == 431 || a2 == 432)
    {
LABEL_55:
      if (v17 != 21)
        goto LABEL_66;
    }
    else
    {
      if (a2 != 434)
        goto LABEL_66;
LABEL_34:
      if (v17 != 1)
        goto LABEL_66;
    }
    goto LABEL_48;
  }
  if (a2 == 304)
  {
LABEL_67:
    if (v17 != 15)
      goto LABEL_66;
  }
  else
  {
    if (a2 != 315)
      goto LABEL_66;
LABEL_82:
    if (v17 != 16)
      goto LABEL_66;
  }
LABEL_48:
  if (v10 == 1)
  {
LABEL_49:
    v20 = (JSC::B3::Value **)JSC::B3::Value::child(this[50], 1u);
    v22 = this[50];
    v23 = *((_DWORD *)v22 + 4);
    if (v23 >= 0x80000000)
      v23 = 0x80000000;
    v24 = v23 - 1;
    if (v24 >= 5)
    {
      __break(0xC471u);
      JUMPOUT(0x197FD9B00);
    }
    v25 = (void *)qword_19914FB48[v24];
    v26 = (JSC::B3::Value **)JSC::B3::Value::child(v22, 2u);
    v32 = *(_OWORD *)(a4 + 9);
    *(_OWORD *)v52 = *(_OWORD *)a4;
    *(_OWORD *)&v52[9] = v32;
    v33 = this[50];
    *(_OWORD *)v53 = *(_OWORD *)v51;
    *(_OWORD *)&v53[9] = *(_OWORD *)&v51[9];
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 3;
    v34 = WTF::fastMalloc((WTF *)0x80);
    *(_DWORD *)(a1 + 8) = 4;
    *(_QWORD *)a1 = v34;
    v35 = (_OWORD *)(v34 + 32 * *(unsigned int *)(a1 + 12));
    v35[1] = *(_OWORD *)&v52[16];
    *v35 = *(_OWORD *)v52;
    v36 = (*(_DWORD *)(a1 + 12) + 1);
    *(_DWORD *)(a1 + 12) = v36;
    v37 = (_OWORD *)(*(_QWORD *)a1 + 32 * v36);
    *v37 = *(_OWORD *)v53;
    result = *(double *)&v53[16];
    v37[1] = *(_OWORD *)&v53[16];
    v39 = (*(_DWORD *)(a1 + 12) + 1);
    *(_DWORD *)(a1 + 12) = v39;
    v40 = *(_QWORD *)a1 + 32 * v39;
    *(_QWORD *)v40 = 0;
    *(_WORD *)(v40 + 8) = 513;
    *(_DWORD *)(v40 + 12) = 1;
    *(_DWORD *)(v40 + 16) = v21;
    *(_DWORD *)(v40 + 20) = 0;
    *(_BYTE *)(v40 + 24) = 0;
    v41 = (*(_DWORD *)(a1 + 12) + 1);
    *(_DWORD *)(a1 + 12) = v41;
    v42 = *(_QWORD *)a1 + 32 * v41;
    *(_QWORD *)v42 = 0;
    *(_WORD *)(v42 + 8) = 513;
    *(_DWORD *)(v42 + 12) = 1;
    *(_DWORD *)(v42 + 16) = v19;
    *(_DWORD *)(v42 + 20) = 0;
    *(_BYTE *)(v42 + 24) = 0;
    ++*(_DWORD *)(a1 + 12);
    *(_QWORD *)(a1 + 112) = v33;
    *(_DWORD *)(a1 + 120) = a2;
    v43 = *(_BYTE *)(a5 + 42);
    goto LABEL_60;
  }
LABEL_66:
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)&result = 3;
  *(_QWORD *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 112) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 122) &= 0xFCu;
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::createSelect(JSC::B3::`anonymous namespace'::LowerToAir::MoveConditionallyConfig const&)::{lambda(JSC::B3::Air::Opcode,JSC::B3::Air::Arg const&,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise &)#1}::operator()(uint64_t a1, JSC::B3::Value **this, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int16 v9;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  BOOL v16;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  JSC::B3::Value **v24;
  int v25;
  JSC::B3::Value **v26;
  int v27;
  __int128 v28;
  JSC::B3::Value *v29;
  WTF *v30;
  _OWORD *v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  _OWORD *v35;
  __int128 v36;
  char *v37;
  char *v38;
  char *v39;
  unsigned int v40;
  uint64_t v41;
  JSC::B3::Value **v42;
  int v43;
  unsigned __int16 v44;
  JSC::B3::Value **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF *v58;
  unsigned int v59;
  _OWORD v60[2];
  _BYTE v61[25];
  WTF *v62;
  uint64_t v63;
  _BYTE v64[96];
  _BYTE v65[12];
  _BYTE v66[32];
  _BYTE v67[32];
  _BYTE v68[32];
  uint64_t v69;

  v9 = a3;
  v69 = *MEMORY[0x1E0C80C00];
  v12 = *(unsigned __int8 *)(a5 + 8);
  if (*(_QWORD *)a5)
    v13 = 0;
  else
    v13 = v12 == 0;
  v14 = v13;
  v15 = *(unsigned __int8 *)(a5 + 8);
  if (v13)
  {
    if (*(_DWORD *)(a5 + 16))
      v16 = 0;
    else
      v16 = *(_DWORD *)(a5 + 20) == 0;
    v15 = v16 && *(_DWORD *)(a5 + 12) == 1 && *(_QWORD *)(a5 + 32) != 0;
  }
  v19 = *(unsigned __int8 *)(a6 + 8);
  if (*(_QWORD *)a6)
    v20 = 0;
  else
    v20 = v19 == 0;
  v21 = v20;
  v22 = *(unsigned __int8 *)(a6 + 8);
  if (v20)
  {
    v22 = 0;
    if (!*(_DWORD *)(a6 + 16) && !*(_DWORD *)(a6 + 20) && *(_DWORD *)(a6 + 12) == 1)
      v22 = *(_QWORD *)(a6 + 32) != 0;
  }
  v23 = *(unsigned __int8 *)(a4 + 8);
  if (a3 == 310)
  {
LABEL_34:
    if (v23 != 14 || v15 != 1 || ((char)v22 - 1) >= 2)
      goto LABEL_37;
LABEL_57:
    v24 = (JSC::B3::Value **)JSC::B3::Value::child(this[50], 1u);
    v26 = (JSC::B3::Value **)JSC::B3::Value::child(this[50], 2u);
    v28 = *(_OWORD *)(a4 + 9);
    *(_OWORD *)v66 = *(_OWORD *)a4;
    *(_OWORD *)&v66[9] = v28;
    v29 = this[50];
    *(_OWORD *)v67 = *(_OWORD *)v61;
    *(_OWORD *)&v67[9] = *(_OWORD *)&v61[9];
    *(_OWORD *)v68 = v60[0];
    *(_OWORD *)&v68[9] = *(_OWORD *)((char *)v60 + 9);
    v62 = (WTF *)v64;
    v63 = 3;
    v30 = (WTF *)WTF::fastMalloc((WTF *)0xC0);
    LODWORD(v63) = 6;
    v62 = v30;
    v31 = (_OWORD *)((char *)v30 + 32 * HIDWORD(v63));
    v32 = *(_OWORD *)&v66[16];
    *v31 = *(_OWORD *)v66;
    v31[1] = v32;
    ++HIDWORD(v63);
    v33 = (_OWORD *)((char *)v62 + 32 * HIDWORD(v63));
    v34 = *(_OWORD *)&v67[16];
    *v33 = *(_OWORD *)v67;
    v33[1] = v34;
    ++HIDWORD(v63);
    v35 = (_OWORD *)((char *)v62 + 32 * HIDWORD(v63));
    v36 = *(_OWORD *)&v68[16];
    *v35 = *(_OWORD *)v68;
    v35[1] = v36;
    ++HIDWORD(v63);
    v37 = (char *)v62 + 32 * HIDWORD(v63);
    *(_QWORD *)v37 = 0;
    *((_WORD *)v37 + 4) = 513;
    *((_DWORD *)v37 + 3) = 1;
    *((_DWORD *)v37 + 4) = v25;
    *((_DWORD *)v37 + 5) = 0;
    v37[24] = 0;
    ++HIDWORD(v63);
    v38 = (char *)v62 + 32 * HIDWORD(v63);
    *(_QWORD *)v38 = 0;
    *((_WORD *)v38 + 4) = 513;
    *((_DWORD *)v38 + 3) = 1;
    *((_DWORD *)v38 + 4) = v27;
    *((_DWORD *)v38 + 5) = 0;
    v38[24] = 0;
    ++HIDWORD(v63);
    v39 = (char *)v62 + 32 * HIDWORD(v63);
    *(_QWORD *)v39 = 0;
    *((_WORD *)v39 + 4) = 513;
    *((_DWORD *)v39 + 3) = 1;
    *((_QWORD *)v39 + 2) = v59;
    v39[24] = 0;
    v40 = HIDWORD(v63) + 1;
    *(_QWORD *)v65 = v29;
    *(_DWORD *)&v65[8] = v9;
    v65[10] = *(_BYTE *)(a6 + 42);
    *(_BYTE *)(a6 + 41) = 1;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 3;
    if (v62 == (WTF *)v64)
    {
      if (v40)
        memcpy((void *)(a1 + 16), v64, 32 * v40);
    }
    else
    {
      *(_QWORD *)a1 = v62;
      *(_DWORD *)(a1 + 8) = v63;
    }
    *(_DWORD *)(a1 + 12) = v40;
    *(_DWORD *)(a1 + 119) = *(_DWORD *)&v65[7];
    *(_QWORD *)(a1 + 112) = *(_QWORD *)v65;
    *(_BYTE *)(a1 + 122) |= *(_BYTE *)(a5 + 42);
    *(_BYTE *)(a5 + 41) = 1;
    return;
  }
  switch(a3)
  {
    case 311:
    case 318:
    case 319:
      goto LABEL_34;
    case 312:
    case 320:
      if (v23 != 15 || v15 != 1 || v22 != 1 && (char)v22 != 4)
        goto LABEL_37;
      goto LABEL_57;
    case 313:
    case 321:
      if (v23 != 15)
        goto LABEL_37;
      break;
    case 314:
    case 316:
    case 322:
    case 324:
      if (v23 != 16)
        goto LABEL_37;
      break;
    case 315:
    case 317:
    case 323:
      goto LABEL_37;
    default:
      if (a3 != 437 && a3 != 438 || v23 != 21)
        goto LABEL_37;
      break;
  }
  if (v15 == 1 && v22 == 1)
    goto LABEL_57;
LABEL_37:
  if (v14)
  {
    v12 = 0;
    if (!*(_DWORD *)(a5 + 16) && !*(_DWORD *)(a5 + 20) && *(_DWORD *)(a5 + 12) == 1)
      v12 = *(_QWORD *)(a5 + 32) != 0;
  }
  if (v21)
  {
    v19 = 0;
    if (!*(_DWORD *)(a6 + 16) && !*(_DWORD *)(a6 + 20) && *(_DWORD *)(a6 + 12) == 1)
      v19 = *(_QWORD *)(a6 + 32) != 0;
  }
  if (a3 != 310)
  {
    if (a3 <= 355)
    {
      switch(a3)
      {
        case 305:
        case 312:
        case 313:
          if (v23 != 15)
            goto LABEL_51;
          goto LABEL_49;
        case 311:
          goto LABEL_48;
        case 314:
        case 315:
        case 316:
        case 317:
        case 323:
        case 325:
          if (v23 != 16)
            goto LABEL_51;
          goto LABEL_49;
        default:
          goto LABEL_51;
      }
    }
    if (a3 <= 371)
    {
      switch(a3)
      {
        case 356:
          if (v23 != 16)
            goto LABEL_51;
          break;
        case 357:
          if (v23 != 14)
            goto LABEL_51;
          break;
        case 371:
LABEL_93:
          if (v23 != 21)
            goto LABEL_51;
          goto LABEL_49;
        default:
          goto LABEL_51;
      }
      if (v12 != 21)
        goto LABEL_51;
      goto LABEL_50;
    }
    if (a3 != 372 && a3 != 373)
    {
      if (a3 != 391 || v23 != 21 || v12 != 2)
        goto LABEL_51;
      goto LABEL_50;
    }
    goto LABEL_93;
  }
LABEL_48:
  if (v23 != 14)
  {
LABEL_51:
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 3;
    *(_QWORD *)(a1 + 112) = 0;
    *(_WORD *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 122) &= 0xFCu;
    return;
  }
LABEL_49:
  if (v12 != 1)
    goto LABEL_51;
LABEL_50:
  if (v19 != 1)
    goto LABEL_51;
  v42 = (JSC::B3::Value **)JSC::B3::Value::child(this[50], 1u);
  v44 = JSC::B3::Air::relaxedMoveForType(*((_DWORD *)this[50] + 4));
  v45 = (JSC::B3::Value **)JSC::B3::Value::child(this[50], 2u);
  v58 = v62;
  if (v64 != (_BYTE *)v62)
  {
    if (v62)
    {
      v62 = 0;
      LODWORD(v63) = 0;
      WTF::fastFree((unint64_t)v58, v51, v52, v53, v54, v55, v56, v57);
    }
  }
}

__n128 JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise::inst<JSC::B3::Air::Opcode &,JSC::B3::Value *&,JSC::B3::Air::Arg const&,JSC::B3::Air::Arg,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, _OWORD *a5, _OWORD *a6, _OWORD *a7, int a8, int a9)
{
  int v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  __n128 result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[32];
  _BYTE v26[32];
  _BYTE v27[32];

  *(_OWORD *)v25 = *a5;
  *(_OWORD *)&v25[9] = *(_OWORD *)((char *)a5 + 9);
  v13 = a3;
  *(_OWORD *)v26 = *a6;
  *(_OWORD *)&v26[9] = *(_OWORD *)((char *)a6 + 9);
  *(_OWORD *)v27 = *a7;
  *(_OWORD *)&v27[9] = *(_OWORD *)((char *)a7 + 9);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 3;
  v14 = WTF::fastMalloc((WTF *)0xA0);
  *(_DWORD *)(a1 + 8) = 5;
  *(_QWORD *)a1 = v14;
  v15 = (_OWORD *)(v14 + 32 * *(unsigned int *)(a1 + 12));
  *v15 = *(_OWORD *)v25;
  v15[1] = *(_OWORD *)&v25[16];
  v16 = (*(_DWORD *)(a1 + 12) + 1);
  *(_DWORD *)(a1 + 12) = v16;
  v17 = (_OWORD *)(*(_QWORD *)a1 + 32 * v16);
  *v17 = *(_OWORD *)v26;
  v17[1] = *(_OWORD *)&v26[16];
  v18 = (*(_DWORD *)(a1 + 12) + 1);
  *(_DWORD *)(a1 + 12) = v18;
  v19 = (_OWORD *)(*(_QWORD *)a1 + 32 * v18);
  result = *(__n128 *)v27;
  *v19 = *(_OWORD *)v27;
  v19[1] = *(_OWORD *)&v27[16];
  v21 = (*(_DWORD *)(a1 + 12) + 1);
  *(_DWORD *)(a1 + 12) = v21;
  v22 = *(_QWORD *)a1 + 32 * v21;
  *(_QWORD *)v22 = 0;
  *(_WORD *)(v22 + 8) = 513;
  *(_DWORD *)(v22 + 12) = 1;
  *(_DWORD *)(v22 + 16) = a8;
  *(_DWORD *)(v22 + 20) = 0;
  *(_BYTE *)(v22 + 24) = 0;
  v23 = (*(_DWORD *)(a1 + 12) + 1);
  *(_DWORD *)(a1 + 12) = v23;
  v24 = *(_QWORD *)a1 + 32 * v23;
  *(_QWORD *)v24 = 0;
  *(_WORD *)(v24 + 8) = 513;
  *(_DWORD *)(v24 + 12) = 1;
  *(_DWORD *)(v24 + 16) = a9;
  *(_DWORD *)(v24 + 20) = 0;
  *(_BYTE *)(v24 + 24) = 0;
  ++*(_DWORD *)(a1 + 12);
  *(_QWORD *)(a1 + 112) = a4;
  *(_DWORD *)(a1 + 120) = v13;
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a2 + 41) = 1;
  return result;
}

__n128 JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise::inst<JSC::B3::Air::Opcode &,JSC::B3::Value *&,JSC::B3::Air::Arg &,JSC::B3::Air::Arg,JSC::B3::Air::Tmp &,JSC::B3::Air::Tmp &>(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, _OWORD *a5, _OWORD *a6, int a7, int a8)
{
  int v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  _OWORD *v17;
  __n128 result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[32];
  _BYTE v24[32];

  *(_OWORD *)v23 = *a5;
  *(_OWORD *)&v23[9] = *(_OWORD *)((char *)a5 + 9);
  v13 = a3;
  *(_OWORD *)v24 = *a6;
  *(_OWORD *)&v24[9] = *(_OWORD *)((char *)a6 + 9);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 3;
  v14 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(a1 + 8) = 4;
  *(_QWORD *)a1 = v14;
  v15 = (_OWORD *)(v14 + 32 * *(unsigned int *)(a1 + 12));
  *v15 = *(_OWORD *)v23;
  v15[1] = *(_OWORD *)&v23[16];
  v16 = (*(_DWORD *)(a1 + 12) + 1);
  *(_DWORD *)(a1 + 12) = v16;
  v17 = (_OWORD *)(*(_QWORD *)a1 + 32 * v16);
  result = *(__n128 *)v24;
  *v17 = *(_OWORD *)v24;
  v17[1] = *(_OWORD *)&v24[16];
  v19 = (*(_DWORD *)(a1 + 12) + 1);
  *(_DWORD *)(a1 + 12) = v19;
  v20 = *(_QWORD *)a1 + 32 * v19;
  *(_QWORD *)v20 = 0;
  *(_WORD *)(v20 + 8) = 513;
  *(_DWORD *)(v20 + 12) = 1;
  *(_DWORD *)(v20 + 16) = a7;
  *(_DWORD *)(v20 + 20) = 0;
  *(_BYTE *)(v20 + 24) = 0;
  v21 = (*(_DWORD *)(a1 + 12) + 1);
  *(_DWORD *)(a1 + 12) = v21;
  v22 = *(_QWORD *)a1 + 32 * v21;
  *(_QWORD *)v22 = 0;
  *(_WORD *)(v22 + 8) = 513;
  *(_DWORD *)(v22 + 12) = 1;
  *(_DWORD *)(v22 + 16) = a8;
  *(_DWORD *)(v22 + 20) = 0;
  *(_BYTE *)(v22 + 24) = 0;
  ++*(_DWORD *)(a1 + 12);
  *(_QWORD *)(a1 + 112) = a4;
  *(_DWORD *)(a1 + 120) = v13;
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 42);
  *(_BYTE *)(a2 + 41) = 1;
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;

  v9 = result;
  v10 = *(unsigned int *)(result + 8);
  v11 = *(unsigned int *)(result + 12);
  v12 = v10 + (v10 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= v11 + 1)
    v14 = v11 + 1;
  else
    v14 = v13;
  v15 = *(_QWORD *)result;
  if (v14 <= v10)
  {
LABEL_8:
    v16 = v15 + 32 * *(unsigned int *)(v9 + 12);
    v17 = *a2;
    *(_QWORD *)v16 = 0;
    *(_WORD *)(v16 + 8) = 513;
    *(_DWORD *)(v16 + 12) = 1;
    *(_QWORD *)(v16 + 16) = v17;
    *(_BYTE *)(v16 + 24) = 0;
    ++*(_DWORD *)(v9 + 12);
    return 1;
  }
  if (v14 < 4)
  {
    v18 = (_OWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 3;
    goto LABEL_12;
  }
  if (!(v14 >> 27))
  {
    v18 = (_OWORD *)WTF::fastMalloc((WTF *)(32 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v18;
LABEL_12:
    if ((_DWORD)v11)
    {
      v19 = 32 * v11;
      v20 = (__int128 *)v15;
      do
      {
        v21 = *v20;
        v22 = v20[1];
        v20 += 2;
        *v18 = v21;
        v18[1] = v22;
        v18 += 2;
        v19 -= 32;
      }
      while (v19);
      v18 = *(_OWORD **)v9;
    }
    if (v9 + 16 != v15 && v15)
    {
      if (v18 == (_OWORD *)v15)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_QWORD *)v9;
    }
    else
    {
      v15 = (unint64_t)v18;
    }
    goto LABEL_8;
  }
  __break(0xC471u);
  return result;
}

void JSC::B3::`anonymous namespace'::LowerToAir::lower(void)::{lambda(JSC::B3::Air::Arg,JSC::B3::Type,unsigned int)#3}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  WTF *v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 v60;
  unsigned __int16 v61;
  uint64_t v62;
  _OWORD *v63;
  WTF *v64;
  uint64_t v65;
  __int128 *v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[32];
  WTF *v70;
  uint64_t v71;
  _BYTE v72[25];
  uint64_t v73;
  __int16 v74;
  int v75;
  int v76;
  int v77;
  char v78;
  _BYTE v79[12];
  unsigned int v80;

  if (*(_DWORD *)(a2 + 148) <= a5)
    goto LABEL_53;
  v8 = a3;
  v9 = *(_QWORD *)(a2 + 136) + 16 * a5;
  v10 = *(_QWORD *)v9;
  v11 = *(unsigned __int8 *)(v9 + 8);
  v80 = a3;
  if (v11 > 0xA)
    goto LABEL_53;
  if (((1 << v11) & 0x6F) != 0)
  {
    v13 = *a1;
    v14 = *(unsigned int *)(*a1 + 12);
    if ((_DWORD)v14 == *(_DWORD *)(*a1 + 8))
    {
      WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(v13, &v80, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v15 = *(_QWORD *)v13 + 32 * v14;
      *(_QWORD *)v15 = 0;
      *(_WORD *)(v15 + 8) = 513;
      *(_DWORD *)(v15 + 12) = 1;
      *(_QWORD *)(v15 + 16) = a3;
      *(_BYTE *)(v15 + 24) = 0;
      ++*(_DWORD *)(v13 + 12);
    }
    return;
  }
  v16 = a4;
  v17 = a1[2];
  if (v11 != 7)
  {
    if (v11 == 10)
    {
      v56 = a4;
      *(_DWORD *)&v69[12] = 1;
      *(_QWORD *)&v69[16] = 0;
      v69[24] = 0;
      *(_WORD *)&v69[8] = 522;
      *(_QWORD *)v69 = v10;
      v57 = *a1;
      v58 = *(unsigned int *)(*a1 + 12);
      if ((_DWORD)v58 == *(_DWORD *)(*a1 + 8))
      {
        WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Arg&>(v57, (unint64_t)v69, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v59 = (_OWORD *)(*(_QWORD *)v57 + 32 * v58);
        v60 = *(_OWORD *)&v69[16];
        *v59 = *(_OWORD *)v69;
        v59[1] = v60;
        ++*(_DWORD *)(v57 + 12);
      }
      v25 = a1[1];
      v61 = JSC::B3::Air::moveForType(v56);
      v62 = *(_QWORD *)(v17 + 400);
      *(_OWORD *)v72 = *(_OWORD *)v69;
      *(_OWORD *)&v72[9] = *(_OWORD *)&v69[9];
      v70 = (WTF *)v72;
      v73 = 0;
      v74 = 513;
      v75 = 1;
      v76 = v8;
      v77 = 0;
      v78 = 0;
      v71 = 0x200000003;
      *(_QWORD *)v79 = v62;
      *(_DWORD *)&v79[8] = v61;
      v28 = *(unsigned int *)(v25 + 12);
      if ((_DWORD)v28 == *(_DWORD *)(v25 + 8))
      {
        WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Inst>(v25, (unint64_t)&v70);
        goto LABEL_26;
      }
      v29 = *(_QWORD *)v25;
      v30 = *(_QWORD *)v25 + (v28 << 7);
      v63 = (_OWORD *)(v30 + 16);
      *(_QWORD *)v30 = v30 + 16;
      *(_QWORD *)(v30 + 8) = 3;
      v64 = v70;
      if (v70 == (WTF *)v72)
      {
        if (HIDWORD(v71))
        {
          v65 = 32 * HIDWORD(v71);
          v66 = (__int128 *)v72;
          do
          {
            v67 = *v66;
            v68 = v66[1];
            v66 += 2;
            *v63 = v67;
            v63[1] = v68;
            v63 += 2;
            v65 -= 32;
          }
          while (v65);
        }
        goto LABEL_24;
      }
      v70 = (WTF *)v72;
      *(_QWORD *)v30 = v64;
      v54 = v71;
      goto LABEL_36;
    }
LABEL_53:
    __break(0xC471u);
    JUMPOUT(0x197FDAAB0);
  }
  v18 = v10 & 0x7F;
  if ((v10 & 0x60) != 0)
    v19 = (char)(31 - (v10 & 0x7F));
  else
    v19 = v18 + 1;
  if (v18 == 127)
    v19 = 0;
  *(_DWORD *)v69 = v19;
  v20 = *a1;
  v21 = *(unsigned int *)(*a1 + 12);
  if ((_DWORD)v21 == *(_DWORD *)(*a1 + 8))
  {
    WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(v20, (unsigned int *)v69, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v22 = *(_QWORD *)v20 + 32 * v21;
    *(_QWORD *)v22 = 0;
    *(_WORD *)(v22 + 8) = 513;
    *(_DWORD *)(v22 + 12) = 1;
    *(_DWORD *)(v22 + 16) = v19;
    *(_DWORD *)(v22 + 20) = 0;
    *(_BYTE *)(v22 + 24) = 0;
    ++*(_DWORD *)(v20 + 12);
  }
  if (v16 >= 0x80000000)
    v23 = 0x80000000;
  else
    v23 = v16;
  v24 = v23 - 1;
  if (v24 >= 5)
  {
    __break(0xC471u);
    JUMPOUT(0x197FDAAFCLL);
  }
  v25 = a1[1];
  v26 = dword_19914FB70[v24];
  v27 = *(_QWORD *)(v17 + 400);
  v70 = (WTF *)v72;
  *(_QWORD *)v72 = 0;
  *(_WORD *)&v72[8] = 513;
  *(_DWORD *)&v72[12] = 1;
  *(_DWORD *)&v72[16] = *(_DWORD *)v69;
  *(_DWORD *)&v72[20] = 0;
  v72[24] = 0;
  v73 = 0;
  v74 = 513;
  v75 = 1;
  v76 = v8;
  v77 = 0;
  v78 = 0;
  v71 = 0x200000003;
  *(_QWORD *)v79 = v27;
  *(_DWORD *)&v79[8] = v26;
  v28 = *(unsigned int *)(v25 + 12);
  if ((_DWORD)v28 == *(_DWORD *)(v25 + 8))
  {
    v41 = WTF::Vector<JSC::B3::Air::Inst,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v25, v28 + 1, (unint64_t)&v70);
    v42 = *(unsigned int *)(v25 + 12);
    v43 = *(_QWORD *)v25;
    v44 = *(_QWORD *)v25 + (v42 << 7);
    v45 = (_OWORD *)(v44 + 16);
    *(_QWORD *)v44 = v44 + 16;
    *(_QWORD *)(v44 + 8) = 3;
    v46 = *(__int128 **)v41;
    if (*(_QWORD *)v41 == v41 + 16)
    {
      v47 = *(unsigned int *)(v41 + 12);
      if ((_DWORD)v47)
      {
        v48 = 32 * v47;
        do
        {
          v49 = *v46;
          v50 = v46[1];
          v46 += 2;
          *v45 = v49;
          v45[1] = v50;
          v45 += 2;
          v48 -= 32;
        }
        while (v48);
      }
    }
    else
    {
      *(_QWORD *)v41 = v41 + 16;
      *(_QWORD *)v44 = v46;
      v55 = *(_DWORD *)(v41 + 8);
      *(_DWORD *)(v41 + 8) = 3;
      *(_DWORD *)(v44 + 8) = v55;
    }
    v51 = *(_DWORD *)(v41 + 12);
    *(_DWORD *)(v41 + 12) = 0;
    *(_DWORD *)(v44 + 12) = v51;
    v52 = v43 + (v42 << 7);
    v53 = *(_QWORD *)(v41 + 112);
    *(_DWORD *)(v52 + 119) = *(_DWORD *)(v41 + 119);
    *(_QWORD *)(v52 + 112) = v53;
    goto LABEL_25;
  }
  v29 = *(_QWORD *)v25;
  v30 = *(_QWORD *)v25 + (v28 << 7);
  v31 = (_OWORD *)(v30 + 16);
  *(_QWORD *)v30 = v30 + 16;
  *(_QWORD *)(v30 + 8) = 3;
  v32 = v70;
  if (v70 == (WTF *)v72)
  {
    if (HIDWORD(v71))
    {
      v33 = 32 * HIDWORD(v71);
      v34 = (__int128 *)v72;
      do
      {
        v35 = *v34;
        v36 = v34[1];
        v34 += 2;
        *v31 = v35;
        v31[1] = v36;
        v31 += 2;
        v33 -= 32;
      }
      while (v33);
    }
    goto LABEL_24;
  }
  v70 = (WTF *)v72;
  *(_QWORD *)v30 = v32;
  v54 = v71;
  LODWORD(v71) = 3;
LABEL_36:
  *(_DWORD *)(v30 + 8) = v54;
LABEL_24:
  v37 = HIDWORD(v71);
  HIDWORD(v71) = 0;
  *(_DWORD *)(v30 + 12) = v37;
  v38 = v29 + (v28 << 7);
  v39 = *(_QWORD *)v79;
  *(_DWORD *)(v38 + 119) = *(_DWORD *)&v79[7];
  *(_QWORD *)(v38 + 112) = v39;
LABEL_25:
  ++*(_DWORD *)(v25 + 12);
LABEL_26:
  v40 = v70;
  if (v72 != (_BYTE *)v70 && v70)
  {
    v70 = 0;
    LODWORD(v71) = 0;
    WTF::fastFree((unint64_t)v40, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

__n128 WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Arg&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _OWORD *v10;
  __n128 result;
  __int128 v12;

  v9 = WTF::Vector<JSC::B3::Air::Arg,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  v10 = (_OWORD *)(*(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
  result = *(__n128 *)v9;
  v12 = *(_OWORD *)(v9 + 16);
  *v10 = *(_OWORD *)v9;
  v10[1] = v12;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t *WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::find(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;

  if (!a1)
    return 0;
  v2 = *(_DWORD *)(a1 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = (uint64_t *)(a1 + 24 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8)
    {
      v6 = (v6 + v9) & v2;
      v7 = (uint64_t *)(a1 + 24 * v6);
      v8 = *v7;
      ++v9;
      if (*v7 == a2)
        return v7;
    }
    return (uint64_t *)(a1 + 24 * *(unsigned int *)(a1 - 4));
  }
  return v7;
}

uint64_t WTF::HashMap<JSC::B3::CheckSpecial::Key,JSC::B3::CheckSpecial*,WTF::DefaultHash<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial*>,WTF::HashTableTraits>::add<decltype(nullptr)>(uint64_t a1, uint64_t *a2, __int16 *a3)
{
  uint64_t v6;
  char v7;
  unsigned int v8;
  unsigned __int16 *v9;
  unsigned int v10;
  int v11;
  int v12;
  int i;
  uint64_t result;
  unsigned __int16 *v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  unsigned int v27;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::B3::CheckSpecial::Key,WTF::KeyValuePair<JSC::B3::CheckSpecial::Key,JSC::B3::CheckSpecial*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::CheckSpecial::Key,JSC::B3::CheckSpecial*>>,WTF::DefaultHash<JSC::B3::CheckSpecial::Key>,WTF::HashMap<JSC::B3::CheckSpecial::Key,JSC::B3::CheckSpecial*,WTF::DefaultHash<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::CheckSpecial::Key>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *((unsigned __int8 *)a3 + 2);
  v11 = *((_DWORD *)a3 + 2);
  v12 = v11 + *a3 + ((v10 & 1) << 16) + *((char *)a3 + 4) + (((v10 >> 1) & 1) << 17);
  for (i = 1; ; ++i)
  {
    result = v12 & v8;
    v15 = (unsigned __int16 *)(v6 + 24 * result);
    if (!*v15 && !(v15[1] & 3 | *((_DWORD *)v15 + 2)) && !*((_BYTE *)v15 + 4))
    {
      if (v9)
      {
        *(_QWORD *)v9 = 0;
        *((_DWORD *)v9 + 2) = 0;
        *((_QWORD *)v9 + 2) = 0;
        --*(_DWORD *)(*a2 - 16);
        v15 = v9;
      }
      v17 = *(_QWORD *)a3;
      *((_DWORD *)v15 + 2) = *((_DWORD *)a3 + 2);
      *(_QWORD *)v15 = v17;
      *((_QWORD *)v15 + 2) = 0;
      v18 = *a2;
      if (*a2)
        v19 = *(_DWORD *)(v18 - 12) + 1;
      else
        v19 = 1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *a2;
      if (*a2)
        v21 = *(_DWORD *)(v20 - 12);
      else
        v21 = 0;
      v22 = (*(_DWORD *)(v20 - 16) + v21);
      v23 = *(unsigned int *)(v20 - 4);
      if (v23 > 0x400)
      {
        if (v23 > 2 * v22)
          goto LABEL_28;
      }
      else
      {
        if (3 * v23 > 4 * v22)
        {
LABEL_28:
          v24 = v20 + 24 * v23;
          v25 = 1;
          goto LABEL_32;
        }
        if (!(_DWORD)v23)
        {
          v27 = 8;
LABEL_42:
          result = WTF::HashTable<JSC::B3::CheckSpecial::Key,WTF::KeyValuePair<JSC::B3::CheckSpecial::Key,JSC::B3::CheckSpecial*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::CheckSpecial::Key,JSC::B3::CheckSpecial*>>,WTF::DefaultHash<JSC::B3::CheckSpecial::Key>,WTF::HashMap<JSC::B3::CheckSpecial::Key,JSC::B3::CheckSpecial*,WTF::DefaultHash<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::CheckSpecial::Key>>::rehash(a2, v27, (__int16 *)v15);
          v15 = (unsigned __int16 *)result;
          v20 = *a2;
          if (*a2)
            LODWORD(v23) = *(_DWORD *)(v20 - 4);
          else
            LODWORD(v23) = 0;
          goto LABEL_28;
        }
      }
      v27 = (_DWORD)v23 << (6 * *(_DWORD *)(v20 - 12) >= (2 * v23));
      goto LABEL_42;
    }
    if (*v15 == (unsigned __int16)*a3
      && ((*((_BYTE *)v15 + 2) ^ v10) & 3) == 0
      && *((_DWORD *)v15 + 2) == v11
      && *((unsigned __int8 *)v15 + 4) == *((unsigned __int8 *)a3 + 4))
    {
      break;
    }
    if (!*v15 && (v15[1] & 3) == 0 && *((_DWORD *)v15 + 2) == 1 && !*((_BYTE *)v15 + 4))
      v9 = (unsigned __int16 *)(v6 + 24 * result);
    v12 = i + result;
  }
  if ((v7 & 1) != 0)
    v26 = 0;
  else
    v26 = *(_DWORD *)(v6 - 4);
  v25 = 0;
  v24 = v6 + 24 * v26;
LABEL_32:
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v24;
  *(_BYTE *)(a1 + 16) = v25;
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::LowerToAir::ensureSpecial<JSC::B3::CheckSpecial,JSC::B3::CheckSpecial::Key &>(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;

  result = *a2;
  if (!*a2)
  {
    v7 = *(_QWORD *)(a1 + 432);
    v8 = WTF::fastMalloc((WTF *)0x28);
    v9 = *a3;
    v10 = a3[2];
    v11 = *((_BYTE *)a3 + 4);
    *(_DWORD *)(v8 + 8) = -1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = off_1E357D498;
    *(_DWORD *)(v8 + 24) = v9;
    *(_BYTE *)(v8 + 28) = v11;
    *(_DWORD *)(v8 + 32) = v10;
    v12 = v8;
    result = JSC::B3::Air::Code::addSpecial(v7, &v12);
    *a2 = result;
    if (v12)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      return *a2;
    }
  }
  return result;
}

uint64_t WTF::HashTable<JSC::B3::CheckSpecial::Key,WTF::KeyValuePair<JSC::B3::CheckSpecial::Key,JSC::B3::CheckSpecial*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::CheckSpecial::Key,JSC::B3::CheckSpecial*>>,WTF::DefaultHash<JSC::B3::CheckSpecial::Key>,WTF::HashMap<JSC::B3::CheckSpecial::Key,JSC::B3::CheckSpecial*,WTF::DefaultHash<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial::Key>,WTF::HashTraits<JSC::B3::CheckSpecial*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::CheckSpecial::Key>>::rehash(uint64_t *a1, unsigned int a2, __int16 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  __int16 *v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int i;
  int v29;
  uint64_t v30;
  __int128 v31;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 32);
    do
    {
      *(v18 - 2) = 0;
      *((_DWORD *)v18 - 2) = 0;
      *v18 = 0;
      v18 += 3;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v21 = 0;
    v19 = 0;
    do
    {
      v22 = (__int16 *)(v6 + 24 * v21);
      if (*v22
        || ((v23 = *((_DWORD *)v22 + 2), (v22[1] & 3) == 0) ? (v24 = v23 == 1) : (v24 = 0),
            !v24 && v22[1] & 3 | v23 || *((_BYTE *)v22 + 4)))
      {
        v25 = *a1;
        if (*a1)
          v26 = *(_DWORD *)(v25 - 8);
        else
          v26 = 0;
        v27 = 0;
        v10 = *((char *)v22 + 4);
        for (i = *((_DWORD *)v22 + 2)
                + *v22
                + ((v22[1] & 1) << 16)
                + v10
                + (((*((unsigned __int8 *)v22 + 2) >> 1) & 1) << 17); ; i = v27 + v29)
        {
          v29 = i & v26;
          v30 = v25 + 24 * (i & v26);
          if (!*(_WORD *)v30 && !(*(_BYTE *)(v30 + 2) & 3 | *(_DWORD *)(v30 + 8)) && !*(_BYTE *)(v30 + 4))
            break;
          ++v27;
        }
        v31 = *(_OWORD *)v22;
        *(_QWORD *)(v30 + 16) = *((_QWORD *)v22 + 2);
        *(_OWORD *)v30 = v31;
        if (v22 == a3)
          v19 = v30;
      }
      ++v21;
    }
    while (v21 != v7);
    goto LABEL_27;
  }
  v19 = 0;
  result = 0;
  if (v6)
  {
LABEL_27:
    WTF::fastFree(v6 - 16, (void *)v10, v11, v12, v13, v14, v15, v16);
    return v19;
  }
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Air::Tmp>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  result = WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v9 = *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12);
  v10 = *a2;
  *(_QWORD *)v9 = 0;
  *(_WORD *)(v9 + 8) = 513;
  *(_DWORD *)(v9 + 12) = 1;
  *(_QWORD *)(v9 + 16) = v10;
  *(_BYTE *)(v9 + 24) = 0;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<JSC::B3::Air::Arg,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<JSC::B3::Air::Arg,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    if ((_DWORD)v4)
    {
      v12 = *(_OWORD **)a1;
      v13 = 32 * v4;
      v14 = (__int128 *)v3;
      do
      {
        v15 = *v14;
        v16 = v14[1];
        v14 += 2;
        *v12 = v15;
        v12[1] = v16;
        v12 += 2;
        v13 -= 32;
      }
      while (v13);
    }
    if (a1 + 16 != v3 && v3)
    {
      if (*(_QWORD *)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  return 1;
}

uint64_t WTF::VectorBuffer<JSC::B3::Air::Arg,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  if (a2 < 3)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 2;
    return 1;
  }
  v3 = a2;
  if (!(a2 >> 27))
  {
    v4 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

void JSC::B3::PhiChildren::UpsilonCollection::forAllTransitiveIncomingValues<JSC::B3::PhiChildren::UpsilonCollection::transitivelyUses(JSC::B3::Value *)::{lambda(JSC::B3::Value *)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  _BYTE v29[128];

  v9 = *(_QWORD *)(a1 + 8);
  if (*(unsigned __int8 *)(v9 + 12) == 153)
  {
    v26 = 0;
    v27 = (WTF *)v29;
    v28 = 16;
    WTF::GraphNodeWorklist<JSC::B3::Value *,WTF::HashSet<JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>>::push((uint64_t)&v26, v9, a3, a4, a5, a6, a7, a8);
    v18 = HIDWORD(v28);
    while (v18)
    {
      v19 = *((_QWORD *)v27 + --v18);
      HIDWORD(v28) = v18;
      if (!v19)
        break;
      v20 = **(_QWORD **)a1 + 16 * *(unsigned int *)(v19 + 8);
      v21 = *(_DWORD *)(v20 + 12);
      if (v21)
      {
        v22 = 0;
        v23 = 0;
        while (*(_DWORD *)(v20 + 12) > v22)
        {
          v11 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)v20 + 8 * v23) + 48);
          if (v11[12] == 153)
            WTF::GraphNodeWorklist<JSC::B3::Value *,WTF::HashSet<JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>>::push((uint64_t)&v26, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
          else
            **(_BYTE **)a2 |= **(_QWORD **)(a2 + 8) == (_QWORD)v11;
          v22 = v23 + 1;
          v23 = (v23 + 1);
          if (v21 == v22)
          {
            v18 = HIDWORD(v28);
            goto LABEL_12;
          }
        }
        __break(0xC471u);
        return;
      }
LABEL_12:
      ;
    }
    v24 = v27;
    if (v29 != (_BYTE *)v27 && v27 != 0)
    {
      v27 = 0;
      LODWORD(v28) = 0;
      WTF::fastFree((unint64_t)v24, v11, v12, v13, v14, v15, v16, v17);
    }
    if (v26)
      WTF::fastFree(v26 - 16, v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    **(_BYTE **)a2 |= **(_QWORD **)(a2 + 8) == v9;
  }
}

uint64_t WTF::GraphNodeWorklist<JSC::B3::Value *,WTF::HashSet<JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>>::push(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v8 = a2;
  v9 = result;
  v40 = a2;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
LABEL_2:
    v11 = *(_DWORD *)(v10 - 8);
    goto LABEL_3;
  }
  v27 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v27)
    goto LABEL_45;
  v28 = (_BYTE *)(v27 + 9040);
  *(_BYTE *)(v27 + 9040) = 1;
  v29 = *(unsigned int *)(v27 + 9056);
  if (!(_DWORD)v29)
  {
    v31 = *(_QWORD *)(v27 + 9080);
    v32 = *(_QWORD *)(v27 + 9064);
    if (v31)
    {
LABEL_33:
      v33 = __clz(v31);
      *(_QWORD *)(v27 + 9080) = v31 & ~(0x8000000000000000 >> v33);
      result = v32 + 16 * v33;
      goto LABEL_24;
    }
    if (*(_BYTE *)(v27 + 9045) == 6)
    {
      v34 = *(_DWORD *)(v27 + 9076);
      v35 = *(unsigned int *)(v27 + 9072);
      if (v35 < v34)
      {
        *(_QWORD *)&v28[8 * v35 + 56] = 0;
        v36 = (unint64_t *)(v27 + 8 * v35 + 9104);
        v37 = v34 - 1 - v35;
        while (v37)
        {
          v32 += 1024;
          v39 = *v36++;
          v38 = v39;
          LODWORD(v35) = v35 + 1;
          --v37;
          if (v39)
          {
            v31 = __rbit64(v38);
            *(_DWORD *)(v27 + 9072) = v35;
            *(_QWORD *)(v27 + 9064) = v32;
            goto LABEL_33;
          }
        }
        *(_DWORD *)(v27 + 9072) = v34;
      }
    }
    *v28 = 0;
LABEL_45:
    result = (uint64_t)bmalloc_allocate_impl_casual_case(0x50uLL, 1, a3, a4, a5, a6, a7, a8);
    goto LABEL_25;
  }
  *(_DWORD *)(v27 + 9056) = v29 - *(_DWORD *)(v27 + 9060);
  result = *(_QWORD *)(v27 + 9048) - v29;
LABEL_24:
  *v28 = 0;
  v30 = 1;
LABEL_25:
  if ((v30 & 1) != 0 && (v30 & 0xFFFFFFFF00000000) != 0x100000000)
  {
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
  }
  *(_QWORD *)v9 = result + 16;
  *(_DWORD *)(result + 12) = 8;
  *(_DWORD *)(*(_QWORD *)v9 - 8) = 7;
  *(_DWORD *)(*(_QWORD *)v9 - 16) = 0;
  *(_DWORD *)(*(_QWORD *)v9 - 12) = 0;
  v10 = *(_QWORD *)v9;
  if (*(_QWORD *)v9)
    goto LABEL_2;
  v11 = 0;
LABEL_3:
  v12 = (~(v8 << 32) + v8) ^ ((unint64_t)(~(v8 << 32) + v8) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v11 & ((v14 >> 31) ^ v14);
  v16 = (_QWORD *)(v10 + 8 * v15);
  v17 = *v16;
  if (!*v16)
  {
LABEL_4:
    *v16 = v8;
    v18 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v20 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
      v21 = *(_DWORD *)(v20 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(v20 - 16) + v21);
    v23 = *(unsigned int *)(v20 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        goto LABEL_10;
    }
    else if (3 * v23 > 4 * v22)
    {
LABEL_10:
      result = v9 + 8;
      v24 = *(unsigned int *)(v9 + 20);
      if ((_DWORD)v24 == *(_DWORD *)(v9 + 16))
      {
        result = WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v24 + 1, (unint64_t)&v40);
        v24 = *(unsigned int *)(v9 + 20);
        *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v24) = *(_QWORD *)result;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)result + 8 * v24) = v40;
      }
      *(_DWORD *)(v9 + 20) = v24 + 1;
      return result;
    }
    WTF::HashTable<JSC::B3::Value *,JSC::B3::Value *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>>::expand((uint64_t *)v9, (unint64_t)v16, a3, a4, a5, a6, a7, a8);
    goto LABEL_10;
  }
  v25 = 0;
  v26 = 1;
  while (v17 != v8)
  {
    if (v17 == -1)
      v25 = v16;
    v15 = (v15 + v26) & v11;
    v16 = (_QWORD *)(v10 + 8 * v15);
    v17 = *v16;
    ++v26;
    if (!*v16)
    {
      if (v25)
      {
        *v25 = 0;
        --*(_DWORD *)(*(_QWORD *)v9 - 16);
        v8 = v40;
        v16 = v25;
      }
      goto LABEL_4;
    }
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::B3::Value *,JSC::B3::Value *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;

  v10 = *a1;
  if (!*a1)
  {
    v11 = 0;
    v12 = 0;
    goto LABEL_3;
  }
  v11 = *(_DWORD *)(v10 - 4);
  v12 = *(_DWORD *)(v10 - 12);
  if (!v11)
  {
LABEL_3:
    v13 = 8;
    goto LABEL_4;
  }
  v13 = v11 << (6 * v12 >= (2 * v11));
LABEL_4:
  v14 = WTF::fastZeroedMalloc(8 * v13 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v24 = 0;
    v22 = 0;
    do
    {
      v25 = (uint64_t *)(v10 + 8 * v24);
      v26 = *v25;
      if ((unint64_t)(*v25 + 1) >= 2)
      {
        v27 = *a1;
        v28 = *a1 ? *(_DWORD *)(v27 - 8) : 0;
        v29 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
        v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
        v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
        v32 = v28 & ((v31 >> 31) ^ v31);
        v33 = 1;
        do
        {
          v34 = v32;
          v35 = *(_QWORD *)(v27 + 8 * v32);
          v32 = (v32 + v33++) & v28;
        }
        while (v35);
        v36 = (_QWORD *)(v27 + 8 * v34);
        *v36 = v26;
        if (v25 == (uint64_t *)a2)
          v22 = v36;
      }
      ++v24;
    }
    while (v24 != v11);
  }
  else
  {
    v22 = 0;
  }
  if (v10)
    WTF::fastFree(v10 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v22;
}

uint64_t WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::Variable *>>,JSC::B3::Variable *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;

  v3 = result;
  if (!a2)
  {
LABEL_12:
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    return result;
  }
  v4 = *(_DWORD *)(a2 - 8);
  v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(a2 + 24 * v8);
  if (v9 != a3)
  {
    v10 = 1;
    while (v9)
    {
      v8 = (v8 + v10) & v4;
      v9 = *(_QWORD *)(a2 + 24 * v8);
      ++v10;
      if (v9 == a3)
        goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_6:
  v11 = a2 + 24 * v8;
  v12 = *(unsigned int *)(v11 + 20);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v12;
  if ((_DWORD)v12)
  {
    if (v12 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      v13 = v11 + 8;
      result = WTF::fastMalloc((WTF *)(4 * v12));
      *(_DWORD *)(v3 + 8) = v12;
      *(_QWORD *)v3 = result;
      v14 = *(unsigned int *)(v13 + 12);
      if ((_DWORD)v14)
      {
        v15 = *(int **)v13;
        v16 = 4 * v14;
        do
        {
          v17 = *v15++;
          *(_DWORD *)result = v17;
          result += 4;
          v16 -= 4;
        }
        while (v16);
      }
    }
  }
  return result;
}

double WTF::Vector<JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::uncheckedInitialize<0ul,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise>(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  double result;

  v5 = *a1;
  *(_QWORD *)v5 = 0;
  *(_WORD *)(v5 + 8) = 512;
  *(_DWORD *)(v5 + 12) = 1;
  *(_QWORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 39) = 0;
  v6 = *a1;
  *(_QWORD *)(v6 + 48) = 0;
  v6 += 48;
  *(_WORD *)(v6 + 8) = 512;
  *(_DWORD *)(v6 + 12) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_DWORD *)(v6 + 39) = 0;
  return result;
}

uint64_t WTF::Vector<JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v10;

  v9 = *(_DWORD *)(a1 + 12);
  if (v9)
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,JSC::B3::`anonymous namespace'::LowerToAir::ArgPromise>::destruct(uint64_t result, uint64_t a2)
{
  while (result != a2)
  {
    if (*(_BYTE *)(result + 40) && !*(_BYTE *)(result + 41))
    {
      __break(0xC471u);
      JUMPOUT(0x197FDB970);
    }
    result += 48;
  }
  return result;
}

void WTF::VectorTypeOperations<WTF::Vector<JSC::B3::Air::Inst,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::destruct(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = *((unsigned int *)v9 + 3);
      v11 = *v9;
      if ((_DWORD)v10)
      {
        v12 = v10 << 7;
        v13 = v11 + 16;
        do
        {
          v14 = *(_QWORD *)(v13 - 16);
          if (v13 != v14 && v14 != 0)
          {
            *(_QWORD *)(v13 - 16) = 0;
            *(_DWORD *)(v13 - 8) = 0;
            WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
          }
          v13 += 128;
          v12 -= 128;
        }
        while (v12);
        v11 = *v9;
      }
      if (v9 + 2 != (unint64_t *)v11 && v11 != 0)
      {
        *v9 = 0;
        *((_DWORD *)v9 + 2) = 0;
        WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
      }
      v9 += 66;
    }
    while (v9 != a2);
  }
}

uint64_t WTF::bubbleSort<WTF::Insertion<std::unique_ptr<JSC::B3::Air::BasicBlock>> *>(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v2 = (uint64_t *)(result + 40);
  do
  {
    if ((unint64_t)(a2 - result) < 0x11)
      break;
    v3 = 0;
    v4 = (a2 - result) >> 4;
LABEL_4:
    v5 = 16 * v4;
    do
    {
      --v4;
      v6 = result + v5;
      v7 = *(_QWORD *)(result + v5 - 16);
      v8 = *(_QWORD *)(result + v5 - 32);
      if (v7 < v8)
      {
        v9 = *(_QWORD *)(v6 - 8);
        v10 = *(_QWORD *)(v6 - 24);
        *(_QWORD *)(v6 - 16) = v8;
        *(_QWORD *)(v6 - 8) = v10;
        *(_QWORD *)(v6 - 32) = v7;
        *(_QWORD *)(v6 - 24) = v9;
        v3 = 1;
        if (v4 > 1)
          goto LABEL_4;
        goto LABEL_11;
      }
      v5 -= 16;
    }
    while (v4 > 1);
    if ((v3 & 1) == 0)
      return result;
LABEL_11:
    result += 16;
    if ((unint64_t)(a2 - result) < 0x11)
      break;
    v11 = 0;
    v12 = (a2 - result) >> 4;
    if (v12 <= 2)
      v12 = 2;
    v13 = v12 - 1;
    v14 = v2;
    do
    {
      v15 = *(v14 - 1);
      v16 = *(v14 - 3);
      if (v15 < v16)
      {
        v17 = *v14;
        *(v14 - 1) = v16;
        *v14 = *(v14 - 2);
        *(v14 - 3) = v15;
        *(v14 - 2) = v17;
        v11 = 1;
      }
      v14 += 2;
      --v13;
    }
    while (v13);
    a2 -= 16;
    v2 += 2;
  }
  while ((v11 & 1) != 0);
  return result;
}

uint64_t WTF::executeInsertions<WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::Insertion<std::unique_ptr<JSC::B3::Air::BasicBlock>>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  void *v17;
  unint64_t v18;
  unint64_t StatusReg;
  unsigned int *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  unsigned int **v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  WTF **v47;
  WTF *v48;
  uint64_t v50;
  unsigned int *v51;

  v8 = a2[3];
  if ((_DWORD)v8)
  {
    v51 = a2;
    v10 = *(unsigned int *)(a1 + 8);
    v11 = *(unsigned int *)(a1 + 12);
    v12 = v11 + v8;
    if (v11 + v8 > v10)
    {
      v13 = v10 + (v10 >> 2);
      if (v13 >= 0x10)
        v14 = v13 + 1;
      else
        v14 = 16;
      if (v14 <= v12)
        v15 = v11 + v8;
      else
        v15 = v14;
      if (v15 >> 29)
      {
LABEL_74:
        __break(0xC471u);
        JUMPOUT(0x197FDBE74);
      }
      v16 = *(_QWORD **)a1;
      v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      memcpy(v17, v16, 8 * v11);
      if (v16)
      {
        if (*(_QWORD **)a1 == v16)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    if (*(_QWORD *)a1)
      bzero((void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), 8 * v12 - 8 * *(unsigned int *)(a1 + 12));
    *(_DWORD *)(a1 + 12) = v12;
    v18 = (v11 + v8);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v50 = v8;
    v20 = v51;
    do
    {
      v21 = v8 - 1;
      v22 = v20[3];
      if (v8 - 1 >= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x197FDBE84);
      }
      v23 = *(_QWORD *)(*(_QWORD *)v20 + 16 * v21) + v21;
      v24 = v18 - 1;
      if (v18 - 1 > v23)
      {
        while (1)
        {
          v25 = v24 - v8;
          v26 = *(unsigned int *)(a1 + 12);
          if (v24 - v8 >= v26)
            goto LABEL_74;
          if (v24 >= v26)
          {
            __break(0xC471u);
            JUMPOUT(0x197FDBE7CLL);
          }
          v27 = *(_QWORD **)a1;
          v28 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v25);
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = 0;
          v29 = v27[v24];
          v27[v24] = v28;
          if (!v29)
            goto LABEL_39;
          v30 = *(_QWORD *)(v29 + 72);
          if (v29 + 88 != v30 && v30 != 0)
          {
            *(_QWORD *)(v29 + 72) = 0;
            *(_DWORD *)(v29 + 80) = 0;
            WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
          }
          v32 = *(_QWORD *)(v29 + 24);
          if (v29 + 40 != v32 && v32 != 0)
          {
            *(_QWORD *)(v29 + 24) = 0;
            *(_DWORD *)(v29 + 32) = 0;
            WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
          }
          v34 = *(unsigned int *)(v29 + 20);
          v35 = *(_QWORD *)(v29 + 8);
          if (!(_DWORD)v34)
            break;
          v38 = v34 << 7;
          v39 = v35 + 16;
          do
          {
            v40 = *(_QWORD *)(v39 - 16);
            if (v39 != v40 && v40 != 0)
            {
              *(_QWORD *)(v39 - 16) = 0;
              *(_DWORD *)(v39 - 8) = 0;
              WTF::fastFree(v40, a2, a3, a4, a5, a6, a7, a8);
            }
            v39 += 128;
            v38 -= 128;
          }
          while (v38);
          v35 = *(_QWORD *)(v29 + 8);
          if (v35)
            goto LABEL_49;
LABEL_34:
          v36 = *(_QWORD *)(StatusReg + 752);
          if (v36)
          {
            if (!(v29 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v29 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v29)) & 1) != 0)
            {
LABEL_37:
              v37 = *(unsigned int *)(v36 + 8000);
              if (v37 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v36, v29, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
              }
              else
              {
                *(_QWORD *)(v36 + 8 * v37) = v29 | 0x5000000000000;
                *(_DWORD *)(v36 + 8000) = v37 + 1;
              }
              goto LABEL_39;
            }
            if (v29 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v29 >> 24)
            {
              a4 = 0;
            }
            else
            {
              a4 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v29 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v29) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)a4 == 1)
                goto LABEL_37;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v36, v29, 1, a4, a5, a6, a7, a8);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v29, (uint64_t)&bmalloc_heap_config, 1);
          }
LABEL_39:
          if (--v24 <= v23)
          {
            v22 = v51[3];
            goto LABEL_57;
          }
        }
        if (!v35)
          goto LABEL_34;
LABEL_49:
        *(_QWORD *)(v29 + 8) = 0;
        *(_DWORD *)(v29 + 16) = 0;
        WTF::fastFree(v35, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_34;
      }
LABEL_57:
      if (v21 >= v22)
      {
        __break(0xC471u);
        JUMPOUT(0x197FDBE8CLL);
      }
      v20 = v51;
      if (v23 >= *(unsigned int *)(a1 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x197FDBE94);
      }
      v42 = *(_QWORD *)v51 + 16 * v21;
      v43 = (unsigned int **)(*(_QWORD *)a1 + 8 * v23);
      v44 = *(unsigned int **)(v42 + 8);
      *(_QWORD *)(v42 + 8) = 0;
      a2 = *v43;
      *v43 = v44;
      if (a2)
        std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)v43, (WTF *)a2, a3, a4, a5, a6, a7, a8);
      --v8;
      v18 = v23;
    }
    while (v21);
    v45 = v51[3];
    v8 = v50;
    if ((_DWORD)v45)
    {
      v46 = 16 * v45;
      v47 = (WTF **)(*(_QWORD *)v51 + 8);
      do
      {
        v48 = *v47;
        *v47 = 0;
        if (v48)
          std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)v47, v48, a3, a4, a5, a6, a7, a8);
        v47 += 2;
        v46 -= 16;
      }
      while (v46);
    }
    v51[3] = 0;
  }
  return v8;
}

uint64_t WTF::Vector<std::unique_ptr<JSC::B3::Air::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<JSC::B3::GenericBlockInsertionSet<JSC::B3::Air::BasicBlock>::execute(void)::{lambda(std::unique_ptr<JSC::B3::Air::BasicBlock>&)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF **v6;
  uint64_t v7;
  WTF **v8;
  WTF **v9;
  char *v10;
  char *v11;
  WTF **v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  char *v21;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 3);
  v6 = (WTF **)(*a1 + 8 * v5);
  if (v5 > a3)
  {
    v7 = 0;
    v8 = (WTF **)(v4 + 8 * a3);
    v9 = v8;
    v10 = (char *)(*a1 + 8 * v5);
    v11 = v10;
    while (*v9)
    {
LABEL_11:
      ++v9;
      ++v8;
      if (v9 >= v6)
      {
        v4 = *a1;
        v5 = *((unsigned int *)a1 + 3);
        v6 = (WTF **)v11;
        goto LABEL_14;
      }
    }
    v12 = v9;
    if (v11 != (char *)(*a1 + 8 * *((unsigned int *)a1 + 3)))
    {
      if (v9 != (WTF **)v10)
      {
        v13 = (char *)v8 - v10;
        memmove(v11, v10, (char *)v8 - v10);
        v11 += v13;
        v20 = *v9;
        *v9 = 0;
        if (v20)
          std::default_delete<JSC::B3::Air::BasicBlock>::operator()[abi:sn180100]((int)v9, v20, v14, v15, v16, v17, v18, v19);
        goto LABEL_10;
      }
      v12 = (WTF **)v11;
    }
    *v9 = 0;
    v11 = (char *)v12;
LABEL_10:
    v10 = (char *)(v9 + 1);
    v7 = (v7 + 1);
    goto LABEL_11;
  }
  v7 = 0;
  v10 = (char *)(*a1 + 8 * v5);
LABEL_14:
  v21 = (char *)(v4 + 8 * v5);
  if (v10 != v21)
  {
    memmove(v6, v10, v21 - v10);
    LODWORD(v5) = *((_DWORD *)a1 + 3);
  }
  *((_DWORD *)a1 + 3) = v5 - v7;
  return v7;
}

unint64_t JSC::B3::Air::InsertionSet::appendInsertion<WTF::Insertion<JSC::B3::Air::Inst>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD *v14;
  __int128 **v15;
  _DWORD *v16;
  _DWORD *v17;
  __int128 *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  int v33;

  v8 = a2;
  result = a1 + 8;
  v11 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v11 != *(_DWORD *)(a1 + 16))
  {
    v12 = *(_QWORD *)result;
    v13 = (_QWORD *)(*(_QWORD *)result + 136 * v11);
    *v13 = *(_QWORD *)a2;
    v14 = v13 + 3;
    v13[1] = v13 + 3;
    v15 = (__int128 **)(v13 + 1);
    v16 = (_DWORD *)v13 + 5;
    v13[2] = 3;
    v17 = v13 + 2;
    v18 = *(__int128 **)(a2 + 8);
    v19 = a2 + 24;
    if (v18 == (__int128 *)(a2 + 24))
    {
      v20 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v20)
      {
        v21 = 32 * v20;
        do
        {
          v22 = *v18;
          v23 = v18[1];
          v18 += 2;
          *v14 = v22;
          v14[1] = v23;
          v14 += 2;
          v21 -= 32;
        }
        while (v21);
      }
      goto LABEL_6;
    }
LABEL_12:
    *(_QWORD *)(v8 + 8) = v19;
    *v15 = v18;
    v33 = *(_DWORD *)(v8 + 16);
    *(_DWORD *)(v8 + 16) = 3;
    *v17 = v33;
    goto LABEL_6;
  }
  result = WTF::Vector<WTF::Insertion<JSC::B3::Air::Inst>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v11 + 1, a2, a4, a5, a6, a7, a8);
  v8 = result;
  LODWORD(v11) = *(_DWORD *)(a1 + 20);
  v12 = *(_QWORD *)(a1 + 8);
  v27 = (_QWORD *)(v12 + 136 * v11);
  *v27 = *(_QWORD *)result;
  v28 = v27 + 3;
  v27[1] = v27 + 3;
  v15 = (__int128 **)(v27 + 1);
  v16 = (_DWORD *)v27 + 5;
  v27[2] = 3;
  v17 = v27 + 2;
  v18 = *(__int128 **)(result + 8);
  v19 = result + 24;
  if (v18 != (__int128 *)(result + 24))
    goto LABEL_12;
  v29 = *(unsigned int *)(result + 20);
  if ((_DWORD)v29)
  {
    v30 = 32 * v29;
    do
    {
      v31 = *v18;
      v32 = v18[1];
      v18 += 2;
      *v28 = v31;
      v28[1] = v32;
      v28 += 2;
      v30 -= 32;
    }
    while (v30);
  }
LABEL_6:
  v24 = *(_DWORD *)(v8 + 20);
  *(_DWORD *)(v8 + 20) = 0;
  *v16 = v24;
  v25 = v12 + 136 * v11 + 120;
  v26 = *(_QWORD *)(v8 + 120);
  *(_DWORD *)(v25 + 7) = *(_DWORD *)(v8 + 127);
  *(_QWORD *)v25 = v26;
  ++*(_DWORD *)(a1 + 20);
  return result;
}

unint64_t WTF::Vector<WTF::Insertion<JSC::B3::Air::Inst>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 136 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v11 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 > a2)
      a2 = v12;
    WTF::Vector<WTF::Insertion<JSC::B3::Air::Inst>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v14 = a3 - v10;
    v15 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 > a2)
      a2 = v16;
    WTF::Vector<WTF::Insertion<JSC::B3::Air::Inst>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v14;
  }
  return v8;
}

uint64_t WTF::Vector<WTF::Insertion<JSC::B3::Air::Inst>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v8 = result;
  v9 = *(_QWORD *)result;
  v10 = *(_DWORD *)(result + 12);
  if (a2 < 9)
  {
    v12 = result + 16;
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 8;
    goto LABEL_5;
  }
  if (a2 < 0x1E1E1E2)
  {
    v11 = 136 * a2;
    v12 = WTF::fastMalloc((WTF *)(136 * a2));
    *(_DWORD *)(v8 + 8) = (v11 & 0xFFFFFFF8) / 0x88;
    *(_QWORD *)v8 = v12;
LABEL_5:
    if (v10)
    {
      v13 = v9;
      do
      {
        *(_QWORD *)(v12 + 8) = v12 + 24;
        v14 = *(_QWORD *)(v13 + 8);
        *(_QWORD *)v12 = *(_QWORD *)v13;
        *(_QWORD *)(v12 + 16) = 3;
        v15 = v13 + 24;
        if (v14 == v13 + 24)
        {
          v16 = *(unsigned int *)(v13 + 20);
          if ((_DWORD)v16)
          {
            v17 = 0;
            v18 = 32 * v16;
            do
            {
              v19 = v12 + v17;
              v20 = *(_OWORD *)(v14 + v17);
              *(_OWORD *)(v19 + 40) = *(_OWORD *)(v14 + v17 + 16);
              *(_OWORD *)(v19 + 24) = v20;
              v17 += 32;
            }
            while (v18 != v17);
          }
        }
        else
        {
          *(_QWORD *)(v13 + 8) = v15;
          *(_QWORD *)(v12 + 8) = v14;
          v24 = *(_DWORD *)(v13 + 16);
          *(_DWORD *)(v13 + 16) = 3;
          *(_DWORD *)(v12 + 16) = v24;
        }
        v21 = *(_DWORD *)(v13 + 20);
        *(_DWORD *)(v13 + 20) = 0;
        *(_DWORD *)(v12 + 20) = v21;
        v22 = *(_QWORD *)(v13 + 120);
        *(_DWORD *)(v12 + 127) = *(_DWORD *)(v13 + 127);
        *(_QWORD *)(v12 + 120) = v22;
        v23 = *(_QWORD *)(v13 + 8);
        if (v15 != v23 && v23)
        {
          *(_QWORD *)(v13 + 8) = 0;
          *(_DWORD *)(v13 + 16) = 0;
          WTF::fastFree(v23, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v12 += 136;
        v13 += 136;
      }
      while (v13 != v9 + 136 * v10);
    }
    if (v8 + 16 != v9 && v9)
    {
      if (*(_QWORD *)v8 == v9)
      {
        *(_QWORD *)v8 = 0;
        *(_DWORD *)(v8 + 8) = 0;
      }
      WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashMap<JSC::B3::ValueKey,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add<JSC::B3::Value *&>@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t result;
  int v22;
  int i;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = a2[1];
  v13 = a2[2];
  v14 = *((_DWORD *)a2 + 1);
  v15 = *((_DWORD *)a2 + 2);
  v16 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
  v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
  v18 = v17 ^ HIWORD(v17);
  v19 = *((_DWORD *)a2 + 3);
  v20 = *((_DWORD *)a2 + 4);
  result = *((unsigned int *)a2 + 5);
  v22 = v14
      + v12
      + ((v13 & 1) << 16)
      + ((v13 << 6) & 0x80)
      + v19
      + (((v13 >> 2) & 1) << 24)
      + (((v13 >> 3) & 1) << 13)
      + v20
      + result
      + v18;
  for (i = 1; ; ++i)
  {
    v24 = v22 & v10;
    v25 = (unsigned __int8 *)(v8 + 32 * v24);
    v26 = v25[1];
    if (*v25)
      v27 = 0;
    else
      v27 = v26 == 159;
    v28 = v27;
    if (v27
      && (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v25 + 4), *(int32x4_t *)(v25 + 4)))) & 1) == 0
      && (v25[2] & 0xF) == 0
      && !*((_DWORD *)v25 + 5))
    {
      if (v11)
      {
        *(_WORD *)v11 = -24832;
        v11[2] &= 0xF0u;
        *(_QWORD *)(v11 + 4) = 0;
        *(_QWORD *)(v11 + 20) = 0;
        *(_QWORD *)(v11 + 12) = 0;
        *((_DWORD *)v11 + 7) = 0;
        --*(_DWORD *)(*a1 - 16);
        v25 = v11;
      }
      v33 = *(_OWORD *)a2;
      *((_QWORD *)v25 + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v25 = v33;
      *((_QWORD *)v25 + 3) = *a3;
      v34 = *a1;
      if (*a1)
        v35 = *(_DWORD *)(v34 - 12) + 1;
      else
        v35 = 1;
      *(_DWORD *)(v34 - 12) = v35;
      v36 = *a1;
      if (*a1)
        v37 = *(_DWORD *)(v36 - 12);
      else
        v37 = 0;
      v38 = (*(_DWORD *)(v36 - 16) + v37);
      v39 = *(unsigned int *)(v36 - 4);
      if (v39 > 0x400)
      {
        if (v39 > 2 * v38)
          goto LABEL_43;
      }
      else
      {
        if (3 * v39 > 4 * v38)
        {
LABEL_43:
          v32 = v36 + 32 * v39;
          v31 = 1;
          goto LABEL_44;
        }
        if (!(_DWORD)v39)
        {
          v40 = 8;
          goto LABEL_47;
        }
      }
      v40 = (_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39));
LABEL_47:
      result = WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(a1, v40, (uint64_t)v25);
      v25 = (unsigned __int8 *)result;
      v36 = *a1;
      if (*a1)
        v39 = *(unsigned int *)(v36 - 4);
      else
        v39 = 0;
      goto LABEL_43;
    }
    v29 = *v25 == *a2 && v26 == v12;
    if (v29
      && ((v25[2] ^ v13) & 0xF) == 0
      && *((_DWORD *)v25 + 1) == v14
      && *((_DWORD *)v25 + 2) == v15
      && *((_DWORD *)v25 + 3) == v19
      && *((_QWORD *)v25 + 2) == __PAIR64__(result, v20))
    {
      break;
    }
    if (v28
      && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v25 + 4), (int32x4_t)xmmword_199123080)))) & 1) == 0&& (v25[2] & 0xF) == 0&& !*((_DWORD *)v25 + 5))
    {
      v11 = (unsigned __int8 *)(v8 + 32 * v24);
    }
    v22 = i + v24;
  }
  if ((v9 & 1) != 0)
    v30 = 0;
  else
    v30 = *(unsigned int *)(v8 - 4);
  v31 = 0;
  v32 = v8 + 32 * v30;
LABEL_44:
  *(_QWORD *)a4 = v25;
  *(_QWORD *)(a4 + 8) = v32;
  *(_BYTE *)(a4 + 16) = v31;
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::MoveConstants::hoistConstants<JSC::B3::`anonymous namespace'::MoveConstants::run(void)::{lambda(JSC::B3::Value const*)#1}>(JSC::B3::`anonymous namespace'::MoveConstants::run(void)::{lambda(JSC::B3::Value const*)#1} const&)::{lambda(JSC::B3::`anonymous namespace'::MoveConstants::run(void)::{lambda(JSC::B3::Value const*)#1} const&)#1}::operator()<void JSC::B3::`anonymous namespace'::MoveConstants::hoistConstants<JSC::B3::`anonymous namespace'::MoveConstants::run(void)::{lambda(JSC::B3::Value const*)#1}>(JSC::B3::`anonymous namespace'::MoveConstants::run(void)::{lambda(JSC::B3::Value const*)#1} const&)::{lambda(JSC::B3::Value*)#3}>(uint64_t a1, _QWORD **a2)
{
  unsigned int *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  unsigned int v24;

  v2 = **(unsigned int ***)(a1 + 16);
  if (!v2)
    return 0;
  v4 = 0;
  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  do
  {
    v7 = *v2;
    v8 = *v5 + 16 * v7;
    v9 = *(unsigned int *)(v8 + 12);
    if (!(_DWORD)v9)
      goto LABEL_43;
    v10 = *(uint64_t **)v8;
    v11 = 8 * v9;
    while (1)
    {
      v12 = *v10;
      if (*v10 && (*(_WORD *)(*v10 + 12) & 0xFFF) == 4)
      {
        v14 = *(_QWORD *)(*a2)[1];
        if ((*(_WORD *)(v14 + 12) & 0xFFF) != 4)
          v14 = 0;
        v15 = *(_QWORD *)(v12 + 40);
        v16 = *(_QWORD *)(v14 + 40) + *(int *)(*(_QWORD *)**a2 + 40);
        v17 = v16 - v15;
        if (v16 - v15 == (_DWORD)v16 - (_DWORD)v15)
          break;
      }
LABEL_13:
      ++v10;
      v11 -= 8;
      if (!v11)
      {
        v12 = v4;
        goto LABEL_42;
      }
    }
    v18 = *a2[1];
    if (*(_DWORD *)(v18 + 52) != *(_DWORD *)(v18 + 56)
      || (LODWORD(v19) = *(unsigned __int8 *)(v18 + 12), (v19 - 71) <= 7))
    {
      if (!v17)
        goto LABEL_42;
      goto LABEL_13;
    }
    v20 = v19 - 63;
    LOBYTE(v19) = 0;
    switch(v20)
    {
      case 0:
      case 1:
      case 5:
        goto LABEL_24;
      case 2:
      case 3:
      case 6:
        LOBYTE(v19) = 1;
        goto LABEL_24;
      case 4:
        goto LABEL_19;
      case 7:
        v18 = JSC::B3::MemoryValue::child((JSC::B3::MemoryValue *)v18, 0);
LABEL_19:
        v21 = *(_DWORD *)(v18 + 16);
        if (v21 >= 0x80000000)
          v21 = 0x80000000;
        v22 = v21 >= 6;
        v19 = 0x40302030200uLL >> (8 * v21);
        if (v22)
          LOBYTE(v19) = 0;
LABEL_24:
        if (v17 + 256 >= 0x200)
        {
          switch((char)v19)
          {
            case 0:
              if (v17 < 0x1000)
                goto LABEL_42;
              goto LABEL_13;
            case 1:
              if (v17 <= 0x1FFE && (v17 & 1) == 0)
                goto LABEL_42;
              goto LABEL_13;
            case 2:
              v23 = v17 & 3;
              v24 = 16380;
              goto LABEL_30;
            case 3:
              v23 = v17 & 7;
              v24 = 32760;
              goto LABEL_30;
            case 4:
              v23 = v17 & 0xF;
              v24 = 65520;
LABEL_30:
              if (v17 > v24 || v23 != 0)
                goto LABEL_13;
              goto LABEL_42;
            default:
              goto LABEL_13;
          }
        }
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FDC890);
    }
LABEL_42:
    v7 = *v2;
    v4 = v12;
LABEL_43:
    v2 = *(unsigned int **)(*(_QWORD *)(v6 + 8) + 32 * v7 + 16);
  }
  while (v2);
  return v4;
}

uint64_t JSC::B3::`anonymous namespace'::MoveConstants::hoistConstants<JSC::B3::`anonymous namespace'::MoveConstants::run(void)::{lambda(JSC::B3::Value const*)#1}>(JSC::B3::`anonymous namespace'::MoveConstants::run(void)::{lambda(JSC::B3::Value const*)#1} const&)::{lambda(JSC::B3::`anonymous namespace'::MoveConstants::run(void)::{lambda(JSC::B3::Value const*)#1} const&)#1}::operator()<void JSC::B3::`anonymous namespace'::MoveConstants::hoistConstants<JSC::B3::`anonymous namespace'::MoveConstants::run(void)::{lambda(JSC::B3::Value const*)#1}>(JSC::B3::`anonymous namespace'::MoveConstants::run(void)::{lambda(JSC::B3::Value const*)#1} const&)::{lambda(JSC::B3::Value*)#4}>(uint64_t **a1, uint64_t *a2, _QWORD *a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;

  v3 = (unsigned int *)*a1[2];
  if (!v3)
    return 0;
  v4 = 0;
  v5 = **a1;
  v6 = a1[1][1];
  do
  {
    v7 = *v3;
    v8 = (uint64_t **)(v5 + 16 * v7);
    v9 = *((unsigned int *)v8 + 3);
    if (!(_DWORD)v9)
    {
LABEL_14:
      result = v4;
      goto LABEL_15;
    }
    v10 = *v8;
    v11 = *a2;
    v12 = 8 * v9;
    while (1)
    {
      result = *v10;
      if (*(_DWORD *)(*v10 + 16) != *(_DWORD *)(*a2 + 16))
        goto LABEL_13;
      v14 = *(_WORD *)(result + 12) & 0xFFF;
      if (v14 == 4)
        break;
      if (v14 == 3)
      {
        if (v11 == result)
          goto LABEL_17;
        v15 = *(int *)(result + 40);
        goto LABEL_12;
      }
LABEL_13:
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_14;
    }
    if (v11 != result)
    {
      v15 = *(_QWORD *)(result + 40);
LABEL_12:
      if (!(v15 + *a3))
        goto LABEL_15;
      goto LABEL_13;
    }
LABEL_17:
    result = *a2;
LABEL_15:
    v3 = *(unsigned int **)(v6 + 32 * v7 + 16);
    v4 = result;
  }
  while (v3);
  return result;
}

uint64_t JSC::B3::`anonymous namespace'::MoveConstants::hoistConstants<JSC::B3::`anonymous namespace'::MoveConstants::run(void)::{lambda(JSC::B3::Value const*)#1}>(JSC::B3::`anonymous namespace'::MoveConstants::run(void)::{lambda(JSC::B3::Value const*)#1} const&)::{lambda(JSC::B3::Value*)#1}::operator()(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (*(unsigned __int8 *)(a2 + 12) - 5 <= 2 && *(_QWORD *)(a2 + 32) == **(_QWORD **)(result + 8))
  {
    v8 = *(_QWORD *)(result + 16);
    *(_QWORD *)&v14 = **(unsigned int **)(result + 24);
    *((_QWORD *)&v14 + 1) = a2;
    result = v8 + 16;
    v9 = *(unsigned int *)(v8 + 28);
    if ((_DWORD)v9 == *(_DWORD *)(v8 + 24))
    {
      v12 = a2;
      v13 = v8;
      result = WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v9 + 1), (unint64_t)&v14, a4, a5, a6, a7, a8);
      a2 = v12;
      v8 = v13;
      v9 = *(unsigned int *)(v13 + 28);
      v10 = *(_QWORD *)(v13 + 16);
      v11 = *(_OWORD *)result;
    }
    else
    {
      v10 = *(_QWORD *)result;
      v11 = v14;
    }
    *(_OWORD *)(v10 + 16 * v9) = v11;
    ++*(_DWORD *)(v8 + 28);
    *(_QWORD *)(a2 + 32) = 0;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int i;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v18 = v10 + 20;
    do
    {
      *(_WORD *)(v18 - 4) = -24832;
      *(_BYTE *)(v18 - 2) &= 0xF0u;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = 0;
      *(_QWORD *)v18 = 0;
      *(_DWORD *)(v18 + 24) = 0;
      v18 += 32;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = v6 + 32 * v19;
      v22 = *(unsigned __int8 *)(v21 + 1);
      if (*(_BYTE *)v21 || v22 != 159)
        goto LABEL_38;
      v23 = *(_DWORD *)(v21 + 4);
      v24 = *(_DWORD *)(v21 + 8);
      v25 = *(_DWORD *)(v21 + 12);
      v26 = *(_DWORD *)(v21 + 16);
      v27 = (*(_BYTE *)(v21 + 2) & 0xF) == 0 && v23 == 1;
      v28 = v27 && v24 == 0;
      v29 = v28 && v25 == 0;
      if (!v29 || v26 != 0)
      {
        v31 = (*(_BYTE *)(v21 + 2) & 0xF) == 0 && v23 == 0;
        v32 = v31 && v24 == 0;
        v33 = v32 && v25 == 0;
        if (!v33 || v26 != 0)
          goto LABEL_38;
      }
      if (*(_DWORD *)(v21 + 20))
      {
LABEL_38:
        v35 = *a1;
        if (*a1)
          v36 = *(_DWORD *)(v35 - 8);
        else
          v36 = 0;
        v37 = 0;
        v38 = *(unsigned __int8 *)(v21 + 2);
        v11 = (void *)((v38 >> 2) & 1);
        v39 = *(_DWORD *)(v21 + 8) + ~(*(_DWORD *)(v21 + 8) << 15);
        v40 = (9 * (v39 ^ (v39 >> 10))) ^ ((9 * (v39 ^ (v39 >> 10))) >> 6);
        v13 = (v40 + ~(v40 << 11)) ^ ((v40 + ~(v40 << 11)) >> 16);
        v14 = *(unsigned int *)(v21 + 12);
        v15 = *(unsigned int *)(v21 + 16);
        v12 = *(unsigned int *)(v21 + 20);
        for (i = *(_DWORD *)(v21 + 4)
                + v22
                + ((v38 & 1) << 16)
                + ((v38 << 6) & 0x80)
                + v14
                + ((_DWORD)v11 << 24)
                + (((v38 >> 3) & 1) << 13)
                + v15
                + v12
                + v13; ; i = v37 + v42)
        {
          v42 = i & v36;
          v43 = v35 + 32 * v42;
          if (!*(_BYTE *)v43
            && *(unsigned __int8 *)(v43 + 1) == 159
            && (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v43 + 4), *(int32x4_t *)(v43 + 4)))) & 1) == 0
            && (*(_BYTE *)(v43 + 2) & 0xF) == 0
            && !*(_DWORD *)(v43 + 20))
          {
            break;
          }
          ++v37;
        }
        v44 = *(_OWORD *)(v21 + 16);
        *(_OWORD *)v43 = *(_OWORD *)v21;
        *(_OWORD *)(v43 + 16) = v44;
        if (v21 == a3)
          v20 = v35 + 32 * v42;
      }
      ++v19;
    }
    while (v19 != v7);
    goto LABEL_50;
  }
  v20 = 0;
  result = 0;
  if (v6)
  {
LABEL_50:
    WTF::fastFree(v6 - 16, v11, v12, v13, v14, v15, v16, v17);
    return v20;
  }
  return result;
}

unsigned __int8 *WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, _DWORD *a4)
{
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *result;
  uint64_t *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;

  v5 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(a2, 8u, 0), (v5 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
  }
  v39 = v5;
  v8 = a3[2];
  v10 = *((_DWORD *)a3 + 1);
  v9 = *((_DWORD *)a3 + 2);
  v11 = 9 * ((v9 + ~(v9 << 15)) ^ ((v9 + ~(v9 << 15)) >> 10));
  v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
  v13 = *((_DWORD *)a3 + 3);
  v14 = *((_DWORD *)a3 + 4);
  v15 = *((_DWORD *)a3 + 5);
  v40 = a3[1];
  v16 = (v10
       + v40
       + ((v8 & 1) << 16)
       + ((v8 << 6) & 0x80)
       + v13
       + (((v8 >> 2) & 1) << 24)
       + (((v8 >> 3) & 1) << 13)
       + v14
       + v15
       + (v12 ^ HIWORD(v12))) & v7;
  v17 = (unsigned __int8 *)(v5 + 32 * v16);
  result = (unsigned __int8 *)WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::isEmptyBucket((uint64_t)v17);
  if ((result & 1) != 0)
  {
    v19 = a2;
    v20 = a1;
  }
  else
  {
    v38 = v15;
    v36 = v7;
    v30 = 0;
    v37 = *a3;
    v31 = 1;
    do
    {
      v32 = v17[1];
      v33 = *v17 == v37 && v32 == v40;
      if (v33
        && ((v17[2] ^ v8) & 0xF) == 0
        && *((_DWORD *)v17 + 1) == v10
        && *((_DWORD *)v17 + 2) == v9
        && *((_DWORD *)v17 + 3) == v13
        && *((_DWORD *)v17 + 4) == v14
        && *((_DWORD *)v17 + 5) == v38)
      {
        if (v39)
          v35 = *(unsigned int *)(v39 - 4);
        else
          v35 = 0;
        v20 = a1;
        v29 = 0;
        v28 = v39 + 32 * v35;
        goto LABEL_13;
      }
      if (*v17)
      {
        v34 = v36;
      }
      else
      {
        v34 = v36;
        if (v32 == 159
          && (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v17 + 4), (int32x4_t)xmmword_199123080)))) & 1) == 0&& (v17[2] & 0xF) == 0&& !*((_DWORD *)v17 + 5))
        {
          v30 = v17;
        }
      }
      v16 = ((_DWORD)v16 + v31) & v34;
      v17 = (unsigned __int8 *)(v39 + 32 * v16);
      result = (unsigned __int8 *)WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::isEmptyBucket((uint64_t)v17);
      ++v31;
    }
    while (!(_DWORD)result);
    v19 = a2;
    v20 = a1;
    if (v30)
    {
      *(_WORD *)v30 = -24832;
      v30[2] &= 0xF0u;
      *(_QWORD *)(v30 + 4) = 0;
      *(_QWORD *)(v30 + 20) = 0;
      *(_QWORD *)(v30 + 12) = 0;
      --*(_DWORD *)(*a2 - 16);
      v17 = v30;
    }
  }
  v21 = *(_OWORD *)a3;
  *((_QWORD *)v17 + 2) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v17 = v21;
  *((_DWORD *)v17 + 6) = *a4;
  v22 = *v19;
  if (*v19)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v19;
  if (*v19)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_12;
LABEL_38:
    result = (unsigned __int8 *)WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::expand(v19, (uint64_t)v17);
    v17 = result;
    v24 = *v19;
    if (*v19)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
    goto LABEL_12;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_38;
LABEL_12:
  v28 = v24 + 32 * v27;
  v29 = 1;
LABEL_13:
  *(_QWORD *)v20 = v17;
  *(_QWORD *)(v20 + 8) = v28;
  *(_BYTE *)(v20 + 16) = v29;
  return result;
}

_OWORD *WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(a1, v4, a2);
}

BOOL WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::isEmptyBucket(uint64_t a1)
{
  _BOOL8 result;

  result = 0;
  if (!*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 1) == 159)
  {
    result = 0;
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(a1 + 4), *(int32x4_t *)(a1 + 4)))) & 1) == 0
      && (*(_BYTE *)(a1 + 2) & 0xF) == 0)
    {
      return *(_DWORD *)(a1 + 20) == 0;
    }
  }
  return result;
}

_OWORD *WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  _OWORD *v34;
  __int128 v35;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v18 = (_QWORD *)(v10 + 20);
    do
    {
      *((_WORD *)v18 - 2) = -24832;
      *((_BYTE *)v18 - 2) &= 0xF0u;
      v18[1] = 0;
      v18[2] = 0;
      *v18 = 0;
      v18 += 4;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v19 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v21 = v6;
    do
    {
      if (*(_BYTE *)v21 || *(unsigned __int8 *)(v21 + 1) != 159)
        goto LABEL_40;
      v22 = *(_DWORD *)(v21 + 4);
      v23 = *(_DWORD *)(v21 + 8);
      v24 = *(_DWORD *)(v21 + 12);
      v25 = *(_DWORD *)(v21 + 16);
      v26 = (*(_BYTE *)(v21 + 2) & 0xF) == 0 && v22 == 1;
      v27 = v26 && v23 == 0;
      v28 = v27 && v24 == 0;
      if (!v28 || v25 != 0)
      {
        v30 = (*(_BYTE *)(v21 + 2) & 0xF) == 0 && v22 == 0;
        v31 = v30 && v23 == 0;
        v32 = v31 && v24 == 0;
        if (!v32 || v25 != 0)
          goto LABEL_40;
      }
      if (*(_DWORD *)(v21 + 20))
      {
LABEL_40:
        WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::ValueKey>>,JSC::B3::ValueKey>(*a1, v21);
        v35 = *(_OWORD *)(v21 + 16);
        *v34 = *(_OWORD *)v21;
        v34[1] = v35;
        if (v21 == a3)
          v19 = v34;
      }
      v21 += 32;
      --v7;
    }
    while (v7);
    goto LABEL_43;
  }
  result = 0;
  if (v6)
  {
LABEL_43:
    WTF::fastFree(v6 - 16, v11, v12, v13, v14, v15, v16, v17);
    return v19;
  }
  return result;
}

unsigned __int16 WTF::HashTable<JSC::B3::ValueKey,WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::ValueKey,unsigned int>>,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::ValueKey>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::ValueKey>>,JSC::B3::ValueKey>@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  unsigned int v3;
  int v4;
  int i;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 result;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::ValueKey>>::hash<JSC::B3::ValueKey>(a2);
  for (i = 0; ; v4 = i + v6)
  {
    v6 = v4 & v3;
    v7 = a1 + 32 * v6;
    if (!*(_BYTE *)v7 && *(unsigned __int8 *)(v7 + 1) == 159)
    {
      result = vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)(v7 + 4), *(int32x4_t *)(v7 + 4))));
      if ((result & 1) == 0 && (*(_BYTE *)(v7 + 2) & 0xF) == 0 && !*(_DWORD *)(v7 + 20))
        break;
    }
    ++i;
  }
  return result;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashMap<JSC::B3::ValueKey,unsigned int,WTF::DefaultHash<JSC::B3::ValueKey>,WTF::HashTraits<JSC::B3::ValueKey>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::B3::ValueKey>>::hash<JSC::B3::ValueKey>(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 2);
  v2 = *(_DWORD *)(a1 + 8) + ~(*(_DWORD *)(a1 + 8) << 15);
  v3 = (9 * (v2 ^ (v2 >> 10))) ^ ((9 * (v2 ^ (v2 >> 10))) >> 6);
  return *(_DWORD *)(a1 + 4)
       + *(unsigned __int8 *)(a1 + 1)
       + ((v1 & 1) << 16)
       + ((v1 << 6) & 0x80)
       + *(_DWORD *)(a1 + 12)
       + (((v1 >> 2) & 1) << 24)
       + (((v1 >> 3) & 1) << 13)
       + *(_DWORD *)(a1 + 16)
       + *(_DWORD *)(a1 + 20)
       + ((v3 + ~(v3 << 11)) ^ ((v3 + ~(v3 << 11)) >> 16));
}

JSC::B3::Value *JSC::B3::Procedure::add<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Const32Value *>(JSC::B3::Value *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v9;
  JSC::B3::Value *Space;

  v9 = a2;
  Space = (JSC::B3::Value *)JSC::B3::Value::allocateSpace(a2, 40);
  JSC::B3::Value::Value<JSC::B3::Value*,JSC::B3::Const32Value *>((uint64_t)Space, v9, a3, a4, a5);
  return JSC::B3::Procedure::addValueImpl(a1, Space);
}

uint64_t JSC::B3::Value::Value<JSC::B3::Value*,JSC::B3::Const32Value *>(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch((char)a2)
  {
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 35:
    case 36:
    case 46:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 91:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case -116:
    case -112:
    case -110:
    case -106:
    case -105:
      return JSC::B3::Value::Value<>(a1, 0, a2, 2, a3, a4, a5);
    default:
      JSC::B3::Value::badKind(a2, 2);
  }
}

JSC::B3::Value *JSC::B3::Procedure::add<JSC::B3::ConstPtrValue,JSC::B3::Origin,void *>(JSC::B3::Value *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v4 + 8) = -1;
  *(_WORD *)(v4 + 12) = 4;
  *(_DWORD *)(v4 + 16) = 2;
  *(_BYTE *)(v4 + 20) = 0;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = stdPowDouble;
  *(_QWORD *)v4 = off_1E357E2D0;
  return JSC::B3::Procedure::addValueImpl(a1, (JSC::B3::Value *)v4);
}

JSC::B3::Value *JSC::B3::Procedure::add<JSC::B3::CCallValue,JSC::B3::TypeKind,JSC::B3::Origin,JSC::B3::ConstPtrValue *,JSC::B3::Value *,JSC::B3::Value *>(JSC::B3::Value *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  JSC::B3::Value *v12;

  v12 = (JSC::B3::Value *)WTF::fastMalloc((WTF *)0x68);
  JSC::B3::CCallValue::CCallValue<JSC::B3::ConstPtrValue *,JSC::B3::Value *,JSC::B3::Value *>((uint64_t)v12, a2, a3, a4, a5, a6);
  return JSC::B3::Procedure::addValueImpl(a1, v12);
}

uint64_t JSC::B3::CCallValue::CCallValue<JSC::B3::ConstPtrValue *,JSC::B3::Value *,JSC::B3::Value *>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  uint64_t result;

  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 82;
  *(_DWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v10 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)a1);
  v10[2] = a4;
  *v10 = v10 + 2;
  v10[3] = a5;
  v10[4] = a6;
  v10[1] = 0x300000003;
  *(_QWORD *)a1 = &unk_1E357CF78;
  *(_OWORD *)(a1 + 40) = xmmword_1991243D0;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFF00000000;
  if (*(_DWORD *)(a1 + 76))
    return a1;
  result = 60;
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Value::allocate<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::TypeKind,JSC::B3::Origin>(int a1, int a2, uint64_t a3)
{
  __int16 v5;
  uint64_t Space;

  v5 = a1;
  Space = JSC::B3::Value::allocateSpace(a1, 40);
  return JSC::B3::Value::Value(Space, v5, a2, a3);
}

_QWORD *JSC::B3::OptimizeAssociativeExpressionTrees::emitValue(_QWORD *result, uint64_t a2, unsigned int a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v18 = a2;
  if (((_DWORD)result - 22) < 2)
    goto LABEL_2;
  v10 = a3;
  switch((_DWORD)result)
  {
    case 0xE:
      if (a3 >= 2)
      {
        v13 = *(_QWORD *)(a2 + 24);
        if (*(_DWORD *)(a2 + 16) == 1)
          v14 = JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,unsigned int>(a4, a5, v13, v10);
        else
          v14 = (uint64_t)JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,long long>(a4, a5, v13, v10);
        result = (_QWORD *)JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(a4, a5, 16, *(_QWORD *)(a2 + 24), a2, v14);
        v17 = result;
        v16 = *(unsigned int *)(a6 + 12);
        if ((_DWORD)v16 == *(_DWORD *)(a6 + 8))
          return WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *>(a6, (unint64_t)&v17);
        v9 = v16 + 1;
        *(_QWORD *)(*(_QWORD *)a6 + 8 * v16) = result;
        goto LABEL_4;
      }
LABEL_2:
      v8 = *(unsigned int *)(a6 + 12);
      if ((_DWORD)v8 == *(_DWORD *)(a6 + 8))
        return WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *>(a6, (unint64_t)&v18);
      v9 = v8 + 1;
      *(_QWORD *)(*(_QWORD *)a6 + 8 * v8) = a2;
LABEL_4:
      *(_DWORD *)(a6 + 12) = v9;
      return result;
    case 0x18:
      if ((a3 & 1) != 0)
        goto LABEL_2;
      break;
    case 0x10:
      if (a3)
      {
        do
        {
          v15 = *(unsigned int *)(a6 + 12);
          if ((_DWORD)v15 == *(_DWORD *)(a6 + 8))
          {
            result = WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *>(a6, (unint64_t)&v18);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a6 + 8 * v15) = v18;
            *(_DWORD *)(a6 + 12) = v15 + 1;
          }
          --v10;
        }
        while (v10);
      }
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FDD668);
  }
  return result;
}

uint64_t JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,unsigned int>(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;

  v8 = *a1;
  result = WTF::fastMalloc((WTF *)0x30);
  v15 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 3;
  *(_DWORD *)(result + 16) = 1;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D8E0;
  *(_DWORD *)(result + 40) = a4;
  v16 = *(unsigned int *)(v8 + 92);
  if ((_DWORD)v16)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 8 * v16 - 8);
    *(_DWORD *)(v8 + 92) = v16 - 1;
    v18 = *(_QWORD *)(v8 + 64);
  }
  else
  {
    v17 = *(unsigned int *)(v8 + 76);
    if ((_DWORD)v17 == *(_DWORD *)(v8 + 72))
    {
      v23 = v17 + (v17 >> 2);
      if (v23 >= 0x10)
        v24 = v23 + 1;
      else
        v24 = 16;
      if (v24 <= v17 + 1)
        v25 = v17 + 1;
      else
        v25 = v24;
      if (v25 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v26 = *(const void **)(v8 + 64);
      v27 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
      *(_DWORD *)(v8 + 72) = v25;
      *(_QWORD *)(v8 + 64) = v27;
      memcpy(v27, v26, 8 * v17);
      if (v26)
      {
        if (*(const void **)(v8 + 64) == v26)
        {
          *(_QWORD *)(v8 + 64) = 0;
          *(_DWORD *)(v8 + 72) = 0;
        }
        WTF::fastFree((unint64_t)v26, v28, v29, v10, v11, v12, v13, v14);
      }
      v30 = *(unsigned int *)(v8 + 76);
      v18 = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v18 + 8 * v30) = 0;
      *(_DWORD *)(v8 + 76) = v30 + 1;
    }
    else
    {
      v18 = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v18 + 8 * v17) = 0;
      *(_DWORD *)(v8 + 76) = v17 + 1;
    }
  }
  *(_DWORD *)(v15 + 8) = v17;
  *(_QWORD *)(v18 + 8 * v17) = v15;
  *(_QWORD *)&v32 = a2;
  *((_QWORD *)&v32 + 1) = v15;
  v19 = a1 + 1;
  v20 = *((unsigned int *)a1 + 5);
  if ((_DWORD)v20 == *((_DWORD *)a1 + 4))
  {
    v31 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v19, (void *)(v20 + 1), (unint64_t)&v32, v10, v11, v12, v13, v14);
    v20 = *((unsigned int *)a1 + 5);
    v21 = a1[1];
    v22 = *v31;
  }
  else
  {
    v21 = *v19;
    v22 = v32;
  }
  *(_OWORD *)(v21 + 16 * v20) = v22;
  ++*((_DWORD *)a1 + 5);
  return v15;
}

uint64_t JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,int>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 *v17;
  __int128 v18;

  v11 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>(*(_QWORD *)a1, a3, a4);
  *(_QWORD *)&v18 = a2;
  *((_QWORD *)&v18 + 1) = v11;
  v12 = (uint64_t *)(a1 + 8);
  v13 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v13 == *(_DWORD *)(a1 + 16))
  {
    v17 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v12, (void *)(v13 + 1), (unint64_t)&v18, v6, v7, v8, v9, v10);
    v13 = *(unsigned int *)(a1 + 20);
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *v17;
  }
  else
  {
    v14 = *v12;
    v15 = v18;
  }
  *(_OWORD *)(v14 + 16 * v13) = v15;
  ++*(_DWORD *)(a1 + 20);
  return v11;
}

uint64_t JSC::B3::OptimizeAssociativeExpressionTrees::run(JSC::B3::OptimizeAssociativeExpressionTrees *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *i;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  __int16 v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  int v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF *v88;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  JSC::B3::Value *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF *v108;
  __int128 v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  _QWORD *v117;
  uint64_t v118;
  int v119;
  __int16 v120;
  JSC::B3::Value *v121;
  __int128 *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  JSC::B3::OptimizeAssociativeExpressionTrees *v131;
  unsigned int v132;
  WTF *v133;
  uint64_t v134;
  WTF *v135;
  uint64_t v136;
  _BYTE v137[176];
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  JSC::B3::Value *v141;
  uint64_t v142;
  _BYTE v143[32];
  _QWORD *v144;
  uint64_t v145;
  _QWORD v146[3];
  uint64_t *v147;
  uint64_t v148;
  _BYTE v149[32];
  __int128 v150;

  v9 = *(_QWORD *)this;
  v10 = *(unsigned int *)(*(_QWORD *)this + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = *(_QWORD *)(v9 + 48);
    while (!*(_QWORD *)(v12 + 8 * v11))
    {
      if (v10 == ++v11)
        goto LABEL_16;
    }
    while ((_DWORD)v10 != (_DWORD)v11)
    {
      if (v10 <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x197FDE62CLL);
      }
      v13 = *(_QWORD *)(v12 + 8 * v11);
      v14 = *(unsigned int *)(v13 + 20);
      if ((_DWORD)v14)
      {
        v15 = *(uint64_t **)(v13 + 8);
        v16 = 8 * v14;
        do
        {
          v17 = *v15++;
          *(_QWORD *)(v17 + 32) = v13;
          v16 -= 8;
        }
        while (v16);
      }
      v11 = (v11 + 1);
      if (v10 > v11)
      {
        while (!*(_QWORD *)(v12 + 8 * v11))
        {
          if (v10 == ++v11)
            goto LABEL_16;
        }
      }
    }
  }
LABEL_16:
  v18 = *(unsigned int *)(v9 + 76);
  v132 = v18;
  if ((_DWORD)v18)
  {
    if (v18 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x197FDE654);
    }
    v19 = 4 * v18;
    v133 = (WTF *)WTF::fastMalloc((WTF *)(4 * v18));
    bzero(v133, v19);
    v9 = *(_QWORD *)this;
    LODWORD(v10) = *(_DWORD *)(*(_QWORD *)this + 60);
  }
  else
  {
    v133 = 0;
  }
  v139 = 0;
  v140 = 0;
  if ((_DWORD)v10)
  {
    v20 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v20))
    {
      if (v10 == ++v20)
      {
        LODWORD(v20) = v10;
        break;
      }
    }
  }
  else
  {
    LODWORD(v20) = 0;
  }
  if ((_DWORD)v10 == (_DWORD)v20)
  {
    v45 = 0;
  }
  else
  {
    v131 = this;
    v21 = v10;
    do
    {
      if (v21 <= v20)
      {
        __break(0xC471u);
        JUMPOUT(0x197FDE5E4);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v20);
      v23 = *(unsigned int *)(v22 + 20);
      if ((_DWORD)v23)
      {
        v24 = *(uint64_t **)(v22 + 8);
        v25 = &v24[v23];
        do
        {
          v26 = *v24;
          v27 = *(unsigned __int8 *)(*v24 + 20);
          if (v27 == 4)
          {
            v36 = 40;
            switch(*(_WORD *)(*v24 + 12))
            {
              case 0u:
              case 1u:
              case 2u:
              case 8u:
              case 0xDu:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
              case 0x18u:
              case 0x19u:
              case 0x1Au:
              case 0x1Bu:
              case 0x1Cu:
              case 0x1Du:
              case 0x1Eu:
              case 0x1Fu:
              case 0x20u:
              case 0x21u:
              case 0x22u:
              case 0x23u:
              case 0x24u:
              case 0x25u:
              case 0x26u:
              case 0x27u:
              case 0x28u:
              case 0x29u:
              case 0x2Au:
              case 0x2Bu:
              case 0x2Cu:
              case 0x2Du:
              case 0x2Eu:
              case 0x2Fu:
              case 0x30u:
              case 0x31u:
              case 0x32u:
              case 0x33u:
              case 0x34u:
              case 0x35u:
              case 0x36u:
              case 0x37u:
              case 0x38u:
              case 0x39u:
              case 0x3Au:
              case 0x3Bu:
              case 0x3Cu:
              case 0x3Du:
              case 0x3Eu:
              case 0x4Fu:
              case 0x99u:
              case 0x9Au:
              case 0x9Bu:
              case 0x9Du:
              case 0x9Eu:
              case 0x9Fu:
                break;
              case 3u:
              case 4u:
              case 5u:
              case 6u:
              case 9u:
              case 0xAu:
              case 0xBu:
              case 0xCu:
              case 0x50u:
              case 0x54u:
              case 0x5Au:
              case 0x5Bu:
              case 0x5Cu:
              case 0x5Du:
              case 0x5Eu:
              case 0x5Fu:
              case 0x60u:
              case 0x61u:
              case 0x62u:
              case 0x63u:
              case 0x64u:
              case 0x65u:
              case 0x66u:
              case 0x67u:
              case 0x68u:
              case 0x69u:
              case 0x6Au:
              case 0x6Bu:
              case 0x6Cu:
              case 0x6Du:
              case 0x6Eu:
              case 0x6Fu:
              case 0x70u:
              case 0x71u:
              case 0x72u:
              case 0x73u:
              case 0x74u:
              case 0x75u:
              case 0x76u:
              case 0x77u:
              case 0x78u:
              case 0x79u:
              case 0x7Au:
              case 0x7Bu:
              case 0x7Cu:
              case 0x7Du:
              case 0x7Eu:
              case 0x7Fu:
              case 0x80u:
              case 0x81u:
              case 0x82u:
              case 0x83u:
              case 0x84u:
              case 0x85u:
              case 0x86u:
              case 0x87u:
              case 0x88u:
              case 0x89u:
              case 0x8Au:
              case 0x8Bu:
              case 0x8Cu:
              case 0x8Du:
              case 0x8Eu:
              case 0x8Fu:
              case 0x90u:
              case 0x91u:
              case 0x92u:
              case 0x93u:
              case 0x94u:
              case 0x95u:
              case 0x96u:
              case 0x97u:
              case 0x98u:
                v36 = 48;
                break;
              case 7u:
              case 0x51u:
              case 0x59u:
              case 0x9Cu:
                v36 = 56;
                break;
              case 0x3Fu:
              case 0x40u:
              case 0x41u:
              case 0x42u:
              case 0x43u:
              case 0x44u:
              case 0x45u:
              case 0x46u:
              case 0x47u:
              case 0x48u:
              case 0x49u:
              case 0x4Au:
              case 0x4Bu:
              case 0x4Cu:
              case 0x4Du:
              case 0x4Eu:
              case 0x52u:
                v36 = 64;
                break;
              case 0x53u:
                v36 = 176;
                break;
              case 0x55u:
              case 0x56u:
              case 0x57u:
              case 0x58u:
                v36 = 112;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x197FDE624);
            }
            v37 = v26 + v36;
            v29 = *(uint64_t **)v37;
            v27 = *(unsigned int *)(v37 + 12);
          }
          else
          {
            v28 = 40;
            switch(*(_WORD *)(*v24 + 12))
            {
              case 0u:
              case 1u:
              case 2u:
              case 8u:
              case 0xDu:
              case 0xEu:
              case 0xFu:
              case 0x10u:
              case 0x11u:
              case 0x12u:
              case 0x13u:
              case 0x14u:
              case 0x15u:
              case 0x16u:
              case 0x17u:
              case 0x18u:
              case 0x19u:
              case 0x1Au:
              case 0x1Bu:
              case 0x1Cu:
              case 0x1Du:
              case 0x1Eu:
              case 0x1Fu:
              case 0x20u:
              case 0x21u:
              case 0x22u:
              case 0x23u:
              case 0x24u:
              case 0x25u:
              case 0x26u:
              case 0x27u:
              case 0x28u:
              case 0x29u:
              case 0x2Au:
              case 0x2Bu:
              case 0x2Cu:
              case 0x2Du:
              case 0x2Eu:
              case 0x2Fu:
              case 0x30u:
              case 0x31u:
              case 0x32u:
              case 0x33u:
              case 0x34u:
              case 0x35u:
              case 0x36u:
              case 0x37u:
              case 0x38u:
              case 0x39u:
              case 0x3Au:
              case 0x3Bu:
              case 0x3Cu:
              case 0x3Du:
              case 0x3Eu:
              case 0x4Fu:
              case 0x99u:
              case 0x9Au:
              case 0x9Bu:
              case 0x9Du:
              case 0x9Eu:
              case 0x9Fu:
                break;
              case 3u:
              case 4u:
              case 5u:
              case 6u:
              case 9u:
              case 0xAu:
              case 0xBu:
              case 0xCu:
              case 0x50u:
              case 0x54u:
              case 0x5Au:
              case 0x5Bu:
              case 0x5Cu:
              case 0x5Du:
              case 0x5Eu:
              case 0x5Fu:
              case 0x60u:
              case 0x61u:
              case 0x62u:
              case 0x63u:
              case 0x64u:
              case 0x65u:
              case 0x66u:
              case 0x67u:
              case 0x68u:
              case 0x69u:
              case 0x6Au:
              case 0x6Bu:
              case 0x6Cu:
              case 0x6Du:
              case 0x6Eu:
              case 0x6Fu:
              case 0x70u:
              case 0x71u:
              case 0x72u:
              case 0x73u:
              case 0x74u:
              case 0x75u:
              case 0x76u:
              case 0x77u:
              case 0x78u:
              case 0x79u:
              case 0x7Au:
              case 0x7Bu:
              case 0x7Cu:
              case 0x7Du:
              case 0x7Eu:
              case 0x7Fu:
              case 0x80u:
              case 0x81u:
              case 0x82u:
              case 0x83u:
              case 0x84u:
              case 0x85u:
              case 0x86u:
              case 0x87u:
              case 0x88u:
              case 0x89u:
              case 0x8Au:
              case 0x8Bu:
              case 0x8Cu:
              case 0x8Du:
              case 0x8Eu:
              case 0x8Fu:
              case 0x90u:
              case 0x91u:
              case 0x92u:
              case 0x93u:
              case 0x94u:
              case 0x95u:
              case 0x96u:
              case 0x97u:
              case 0x98u:
                v28 = 48;
                break;
              case 7u:
              case 0x51u:
              case 0x59u:
              case 0x9Cu:
                v28 = 56;
                break;
              case 0x3Fu:
              case 0x40u:
              case 0x41u:
              case 0x42u:
              case 0x43u:
              case 0x44u:
              case 0x45u:
              case 0x46u:
              case 0x47u:
              case 0x48u:
              case 0x49u:
              case 0x4Au:
              case 0x4Bu:
              case 0x4Cu:
              case 0x4Du:
              case 0x4Eu:
              case 0x52u:
                v28 = 64;
                break;
              case 0x53u:
                v28 = 176;
                break;
              case 0x55u:
              case 0x56u:
              case 0x57u:
              case 0x58u:
                v28 = 112;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x197FDE5DCLL);
            }
            v29 = (uint64_t *)(v26 + v28);
          }
          for (i = &v29[v27]; v29 != i; ++v29)
          {
            v147 = 0;
            v147 = (uint64_t *)*v29;
            v31 = (uint64_t)v147;
            if ((*((_DWORD *)v147 + 4) - 1) <= 1)
            {
              v32 = *((unsigned __int8 *)v147 + 12);
              v33 = v32 > 0x18;
              v34 = (1 << v32) & 0x1C14000;
              if (!v33 && v34 != 0)
              {
                v38 = *((unsigned int *)v147 + 2);
                if (v132 <= v38)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FDE5B4);
                }
                ++*((_DWORD *)v133 + v38);
                if (*(unsigned __int8 *)(v31 + 12) != *(unsigned __int8 *)(v26 + 12))
                  goto LABEL_48;
                v44 = *(unsigned int *)(v31 + 8);
                if (v132 <= v44)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197FDE5BCLL);
                }
                if (*((_DWORD *)v133 + v44) >= 2u)
                {
LABEL_48:
                  WTF::HashSet<JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add(&v140, (uint64_t *)&v147, a3, a4, a5, a6, a7, a8, (uint64_t)&v134);
                  WTF::HashTable<JSC::B3::BasicBlock *,JSC::B3::BasicBlock *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>>::add(&v139, v147 + 4, v39, v40, v41, v42, v43, (uint64_t)&v134);
                }
              }
            }
          }
          ++v24;
        }
        while (v24 != v25);
        v21 = *(_DWORD *)(v9 + 60);
      }
      v20 = (v20 + 1);
      if (v21 > v20)
      {
        while (!*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v20))
        {
          if (v21 == ++v20)
          {
            LODWORD(v20) = v21;
            break;
          }
        }
      }
    }
    while ((_DWORD)v10 != (_DWORD)v20);
    v9 = *(_QWORD *)v131;
    v45 = v139;
  }
  v134 = v9;
  v135 = (WTF *)v137;
  v136 = 8;
  memset(&v137[128], 0, 48);
  v138 = 0;
  if (v45)
  {
    v46 = *(unsigned int *)(v45 - 4);
    v47 = v45 + 8 * v46;
    if (*(_DWORD *)(v45 - 12))
    {
      v48 = v45;
      if ((_DWORD)v46)
      {
        v49 = 8 * v46;
        v48 = v45;
        while ((unint64_t)(*(_QWORD *)v48 + 1) <= 1)
        {
          v48 += 8;
          v49 -= 8;
          if (!v49)
          {
            v48 = v47;
            goto LABEL_72;
          }
        }
      }
      goto LABEL_72;
    }
    v48 = v45 + 8 * v46;
  }
  else
  {
    v48 = 0;
    v46 = 0;
  }
  v47 = v45 + 8 * v46;
LABEL_72:
  if (v45)
    v50 = v45 + 8 * *(unsigned int *)(v45 - 4);
  else
    v50 = 0;
  if (v50 == v48)
  {
    v51 = 0;
    goto LABEL_125;
  }
  v51 = 0;
  do
  {
    v52 = *(_QWORD *)v48;
    v53 = *(unsigned int *)(*(_QWORD *)v48 + 20);
    if (!(_DWORD)v53)
      goto LABEL_90;
    v54 = v140;
    if (!v140)
      goto LABEL_90;
    v55 = 0;
    while (2)
    {
      if (!v54)
        goto LABEL_88;
      v56 = *(_QWORD *)(*(_QWORD *)(v52 + 8) + 8 * v55);
      v57 = *(_DWORD *)(v54 - 8);
      v58 = (~(v56 << 32) + v56) ^ ((unint64_t)(~(v56 << 32) + v56) >> 22);
      v59 = 9 * ((v58 + ~(v58 << 13)) ^ ((v58 + ~(v58 << 13)) >> 8));
      v60 = (v59 ^ (v59 >> 15)) + ~((v59 ^ (v59 >> 15)) << 27);
      v61 = v57 & ((v60 >> 31) ^ v60);
      v62 = *(_QWORD *)(v54 + 8 * v61);
      if (v62 != v56)
      {
        v63 = 1;
        do
        {
          if (!v62)
            goto LABEL_88;
          v61 = (v61 + v63) & v57;
          v62 = *(_QWORD *)(v54 + 8 * v61);
          ++v63;
        }
        while (v62 != v56);
      }
      v64 = *(_WORD *)(v56 + 12);
      if (*(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child(*(JSC::B3::Value **)(*(_QWORD *)(v52 + 8) + 8 * v55), 0)+ 12) != v64)goto LABEL_152;
      v85 = *(unsigned int *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v56, 0) + 8);
      if (v132 <= v85)
      {
        __break(0xC471u);
        JUMPOUT(0x197FDE63CLL);
      }
      if (*((_DWORD *)v133 + v85) >= 2u)
      {
LABEL_152:
        if (*(unsigned __int8 *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v56, 1u) + 12) != v64)
          goto LABEL_86;
        v94 = *(unsigned int *)(*(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v56, 1u) + 8);
        if (v132 <= v94)
        {
          __break(0xC471u);
          JUMPOUT(0x197FDE644);
        }
        if (*((_DWORD *)v133 + v94) > 1u)
        {
LABEL_86:
          v65 = 0;
          goto LABEL_87;
        }
      }
      v147 = (uint64_t *)v149;
      v148 = 4;
      v86 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v56, 0);
      v87 = *(_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v56, 1u);
      v144 = v146;
      v146[0] = v86;
      v146[1] = v87;
      v145 = 0x200000003;
      if ((v64 - 14) >= 0xBu || ((0x705u >> (v64 - 14)) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x197FDE5ACLL);
      }
      v70 = 0;
      v125 = v64 - 14;
      v83 = qword_19914FBB0[(char)(v64 - 14)];
      v68 = 2;
      do
      {
        v141 = 0;
        v67 = v144[--v68];
        HIDWORD(v145) = v68;
        v141 = (JSC::B3::Value *)v67;
        if (*(_WORD *)(v67 + 12) != v64)
          goto LABEL_98;
        v72 = *(unsigned int *)(v67 + 8);
        if (v132 <= v72)
        {
          __break(0xC471u);
          JUMPOUT(0x197FDE634);
        }
        if (*((_DWORD *)v133 + v72) <= 1u)
        {
          v127 = v83;
          v73 = (_QWORD *)JSC::B3::Value::child((JSC::B3::Value *)v67, 0);
          v74 = HIDWORD(v145);
          if (HIDWORD(v145) == (_DWORD)v145)
          {
            v73 = (_QWORD *)WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v144, HIDWORD(v145) + 1, (unint64_t)v73);
            v74 = HIDWORD(v145);
          }
          v144[HIDWORD(v145)] = *v73;
          HIDWORD(v145) = v74 + 1;
          v75 = (_QWORD *)JSC::B3::Value::child(v141, 1u);
          v81 = (uint64_t)v75;
          v82 = HIDWORD(v145);
          if (HIDWORD(v145) == (_DWORD)v145)
          {
            v75 = (_QWORD *)WTF::Vector<JSC::B3::Value *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v144, HIDWORD(v145) + 1, (unint64_t)v75);
            v82 = HIDWORD(v145);
          }
          v68 = HIDWORD(v145) + 1;
          v144[v82] = *v75;
          HIDWORD(v145) = v68;
          v83 = v127;
        }
        else
        {
LABEL_98:
          v69 = *(_WORD *)(v67 + 12) & 0xFFF;
          if (v69 == 3)
          {
            v84 = *(int *)(v67 + 40);
          }
          else
          {
            if (v69 != 4)
            {
              ++v70;
              v71 = HIDWORD(v148);
              if (HIDWORD(v148) == (_DWORD)v148)
              {
                v129 = v83;
                WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::B3::Value *>((uint64_t)&v147, (unint64_t)&v141);
                v83 = v129;
                v68 = HIDWORD(v145);
              }
              else
              {
                v147[HIDWORD(v148)] = v67;
                HIDWORD(v148) = v71 + 1;
              }
              continue;
            }
            v84 = *(_QWORD *)(v67 + 40);
          }
          switch((char)v64)
          {
            case 14:
              v83 += v84;
              break;
            case 16:
              v83 *= v84;
              break;
            case 22:
              v83 &= v84;
              break;
            case 23:
              v83 |= v84;
              break;
            case 24:
              v83 ^= v84;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197FDE51CLL);
          }
          ++v70;
        }
      }
      while (v68);
      switch((char)v64)
      {
        case 14:
        case 24:
          goto LABEL_134;
        case 16:
        case 22:
          if (!v83)
            goto LABEL_149;
          goto LABEL_134;
        case 23:
          if (v83 == -1)
          {
LABEL_149:
            v92 = *(_QWORD *)(v56 + 24);
            if (*(_DWORD *)(v56 + 16) == 1)
              v93 = (JSC::B3::Value *)JSC::B3::InsertionSet::insert<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)&v134, v55, v92, v83);
            else
              v93 = JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,long long>(&v134, v55, v92, v83);
            JSC::B3::Value::replaceWithIdentity((JSC::B3::Value *)v56, v93);
            goto LABEL_195;
          }
LABEL_134:
          if (v70 < 4)
          {
            v65 = 0;
            goto LABEL_136;
          }
          v128 = v83;
          v95 = 126 - 2 * __clz(HIDWORD(v148));
          if (HIDWORD(v148))
            v96 = v95;
          else
            v96 = 0;
          std::__introsort<std::_ClassicAlgPolicy,JSC::B3::OptimizeAssociativeExpressionTrees::optimizeRootedTree(JSC::B3::Value *,JSC::B3::InsertionSet &,unsigned long,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0 &,JSC::B3::Value **,false>((uint64_t)v147, &v147[HIDWORD(v148)], v96, 1);
          v141 = (JSC::B3::Value *)v143;
          v142 = 4;
          if (HIDWORD(v148))
          {
            v97 = 0;
            v98 = 0;
            v99 = v147;
            v100 = 8 * HIDWORD(v148);
            do
            {
              if (v98 == *v99)
              {
                ++v97;
              }
              else if (v98)
              {
                v123 = *v99;
                v124 = v100;
                JSC::B3::OptimizeAssociativeExpressionTrees::emitValue((_QWORD *)v64, v98, v97, &v134, v55, (uint64_t)&v141);
                v98 = v123;
                v100 = v124;
                v97 = 1;
              }
              else
              {
                v97 = 1;
                v98 = *v99;
              }
              ++v99;
              v100 -= 8;
            }
            while (v100);
            if (v98)
              JSC::B3::OptimizeAssociativeExpressionTrees::emitValue((_QWORD *)v64, v98, v97, &v134, v55, (uint64_t)&v141);
          }
          if ((v64 - 14) >= 0xBu || ((0x705u >> v125) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x197FDE604);
          }
          if (v128 == qword_19914FBB0[v125])
          {
            v111 = HIDWORD(v142);
            if (HIDWORD(v142))
              goto LABEL_177;
          }
          if (*(_DWORD *)(v56 + 16) == 1)
          {
            v106 = JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>(v134, *(_QWORD *)(v56 + 24), v128);
            *(_QWORD *)&v150 = v55;
            *((_QWORD *)&v150 + 1) = v106;
            v107 = HIDWORD(v136);
            if (HIDWORD(v136) == (_DWORD)v136)
            {
              v122 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v135, (void *)(HIDWORD(v136) + 1), (unint64_t)&v150, v101, v102, v103, v104, v105);
              v107 = HIDWORD(v136);
              v108 = v135;
              v109 = *v122;
            }
            else
            {
              v108 = v135;
              v109 = v150;
            }
            *((_OWORD *)v108 + v107) = v109;
            ++HIDWORD(v136);
            v110 = HIDWORD(v142);
            if (HIDWORD(v142) != (_DWORD)v142)
            {
              *((_QWORD *)v141 + HIDWORD(v142)) = v106;
              goto LABEL_176;
            }
          }
          else
          {
            v106 = (uint64_t)JSC::B3::InsertionSet::insert<JSC::B3::Const64Value,JSC::B3::Origin,long long>(&v134, v55, *(_QWORD *)(v56 + 24), v128);
            v110 = HIDWORD(v142);
            if (HIDWORD(v142) != (_DWORD)v142)
              goto LABEL_198;
          }
          WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v141, v110 + 1);
          v110 = HIDWORD(v142);
LABEL_198:
          *((_QWORD *)v141 + v110) = v106;
LABEL_176:
          v111 = v110 + 1;
          HIDWORD(v142) = v111;
LABEL_177:
          if (v111 < 2)
          {
            v116 = 0;
          }
          else
          {
            v112 = 0;
            v113 = 1;
            do
            {
              v114 = JSC::B3::InsertionSet::insert<JSC::B3::Value,JSC::B3::Opcode,JSC::B3::Origin,JSC::B3::Value*,JSC::B3::Value*>(&v134, v55, v64, *(_QWORD *)(v56 + 24), *((_QWORD *)v141 + v112), *((_QWORD *)v141 + v113));
              *(_QWORD *)&v150 = v114;
              v115 = HIDWORD(v142);
              if (HIDWORD(v142) == (_DWORD)v142)
              {
                v117 = (_QWORD *)WTF::Vector<JSC::B3::Value *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v141, HIDWORD(v142) + 1, (unint64_t)&v150);
                v115 = HIDWORD(v142);
                *((_QWORD *)v141 + HIDWORD(v142)) = *v117;
              }
              else
              {
                *((_QWORD *)v141 + HIDWORD(v142)) = v114;
              }
              v111 = v115 + 1;
              HIDWORD(v142) = v111;
              v116 = v112 + 2;
              v113 = v112 + 3;
              v112 += 2;
            }
            while (v111 > v113);
          }
          if (v111 <= v116)
          {
            __break(0xC471u);
            JUMPOUT(0x197FDE64CLL);
          }
          v118 = *((_QWORD *)v141 + v116);
          v119 = *(_DWORD *)(v56 + 16);
          if (v119 != *(_DWORD *)(v118 + 16))
          {
            __break(0xC471u);
            JUMPOUT(0x197FDE58CLL);
          }
          v130 = *(_QWORD *)(v56 + 32);
          v126 = *(_DWORD *)(v56 + 8);
          (**(void (***)(uint64_t))v56)(v56);
          *(_QWORD *)v56 = off_1E357F5F0;
          if (v119)
          {
            *(_QWORD *)(v56 + 40) = v118;
            v120 = 1;
          }
          else
          {
            v120 = 0;
          }
          *(_WORD *)(v56 + 12) = v120;
          *(_DWORD *)(v56 + 16) = v119;
          *(_BYTE *)(v56 + 20) = v120;
          *(_DWORD *)(v56 + 8) = v126;
          *(_QWORD *)(v56 + 32) = v130;
          v121 = v141;
          if (v143 != (_BYTE *)v141 && v141)
          {
            v141 = 0;
            LODWORD(v142) = 0;
            WTF::fastFree((unint64_t)v121, v76, v81, v83, v77, v78, v79, v80);
          }
LABEL_195:
          v65 = 1;
LABEL_136:
          v90 = (unint64_t)v144;
          if (v146 != v144 && v144)
          {
            v144 = 0;
            LODWORD(v145) = 0;
            WTF::fastFree(v90, v76, v81, v83, v77, v78, v79, v80);
          }
          v91 = (unint64_t)v147;
          if (v149 != (_BYTE *)v147 && v147)
          {
            v147 = 0;
            LODWORD(v148) = 0;
            WTF::fastFree(v91, v76, v81, v83, v77, v78, v79, v80);
          }
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x197FDE544);
      }
LABEL_87:
      v51 |= v65;
      v53 = *(unsigned int *)(v52 + 20);
LABEL_88:
      if (++v55 < v53)
      {
        v54 = v140;
        continue;
      }
      break;
    }
LABEL_90:
    JSC::B3::InsertionSet::execute((JSC::B3::InsertionSet *)&v134, (JSC::B3::BasicBlock *)v52);
    v66 = v48 + 8;
    v48 = v47;
    if (v66 != v47)
    {
      v48 = v66;
      while ((unint64_t)(*(_QWORD *)v48 + 1) <= 1)
      {
        v48 += 8;
        if (v48 == v47)
        {
          v48 = v47;
          break;
        }
      }
    }
  }
  while (v48 != v50);
  v88 = v135;
  if (v137 != (_BYTE *)v135 && v135)
  {
    v135 = 0;
    LODWORD(v136) = 0;
    WTF::fastFree((unint64_t)v88, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_125:
  if (v139)
    WTF::fastFree(v139 - 16, a2, a3, a4, a5, a6, a7, a8);
  if (v140)
    WTF::fastFree(v140 - 16, a2, a3, a4, a5, a6, a7, a8);
  if (v133)
    WTF::fastFree((unint64_t)v133, a2, a3, a4, a5, a6, a7, a8);
  return v51 & 1;
}

uint64_t *WTF::HashSet<JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v10;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;

  v10 = result;
  v12 = *result;
  if (*result)
  {
LABEL_2:
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
    goto LABEL_3;
  }
  v32 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v32)
    goto LABEL_47;
  v33 = (_BYTE *)(v32 + 9040);
  *(_BYTE *)(v32 + 9040) = 1;
  v34 = *(unsigned int *)(v32 + 9056);
  if (!(_DWORD)v34)
  {
    v36 = *(_QWORD *)(v32 + 9080);
    v37 = *(_QWORD *)(v32 + 9064);
    if (v36)
    {
LABEL_31:
      v38 = __clz(v36);
      *(_QWORD *)(v32 + 9080) = v36 & ~(0x8000000000000000 >> v38);
      result = (uint64_t *)(v37 + 16 * v38);
      goto LABEL_22;
    }
    if (*(_BYTE *)(v32 + 9045) == 6)
    {
      v40 = *(_DWORD *)(v32 + 9076);
      v41 = *(unsigned int *)(v32 + 9072);
      if (v41 < v40)
      {
        *(_QWORD *)&v33[8 * v41 + 56] = 0;
        v42 = (unint64_t *)(v32 + 8 * v41 + 9104);
        v43 = v40 - 1 - v41;
        while (v43)
        {
          v37 += 1024;
          v45 = *v42++;
          v44 = v45;
          LODWORD(v41) = v41 + 1;
          --v43;
          if (v45)
          {
            v36 = __rbit64(v44);
            *(_DWORD *)(v32 + 9072) = v41;
            *(_QWORD *)(v32 + 9064) = v37;
            goto LABEL_31;
          }
        }
        *(_DWORD *)(v32 + 9072) = v40;
      }
    }
    *v33 = 0;
LABEL_47:
    result = (uint64_t *)bmalloc_allocate_impl_casual_case(0x50uLL, 1, a3, a4, a5, a6, a7, a8);
    goto LABEL_23;
  }
  *(_DWORD *)(v32 + 9056) = v34 - *(_DWORD *)(v32 + 9060);
  result = (uint64_t *)(*(_QWORD *)(v32 + 9048) - v34);
LABEL_22:
  *v33 = 0;
  v35 = 1;
LABEL_23:
  if ((v35 & 1) != 0 && (v35 & 0xFFFFFFFF00000000) != 0x100000000)
  {
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_OWORD *)result = 0u;
  }
  *v10 = (uint64_t)(result + 2);
  *((_DWORD *)result + 3) = 8;
  *(_DWORD *)(*v10 - 8) = 7;
  *(_DWORD *)(*v10 - 16) = 0;
  *(_DWORD *)(*v10 - 12) = 0;
  v12 = *v10;
  if (*v10)
    goto LABEL_2;
  v14 = 0;
  v13 = 1;
LABEL_3:
  v15 = *a2;
  v16 = ~(*a2 << 32) + *a2;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 8 * v19);
  v21 = *v20;
  if (*v20)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v39 = 0;
        else
          v39 = *(unsigned int *)(v12 - 4);
        v29 = 0;
        v28 = v12 + 8 * v39;
        goto LABEL_11;
      }
      if (v21 == -1)
        v30 = v20;
      v19 = (v19 + v31) & v14;
      v20 = (uint64_t *)(v12 + 8 * v19);
      v21 = *v20;
      ++v31;
    }
    while (*v20);
    if (v30)
    {
      *v30 = 0;
      --*(_DWORD *)(*v10 - 16);
      v15 = *a2;
      v20 = v30;
    }
  }
  *v20 = v15;
  v22 = *v10;
  if (*v10)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v10;
  if (*v10)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_10;
LABEL_33:
    result = WTF::HashTable<JSC::B3::Value *,JSC::B3::Value *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>>::expand(v10, (unint64_t)v20, a3, a4, a5, a6, a7, a8);
    v20 = result;
    v24 = *v10;
    if (*v10)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
    goto LABEL_10;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_33;
LABEL_10:
  v28 = v24 + 8 * v27;
  v29 = 1;
LABEL_11:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v28;
  *(_BYTE *)(a9 + 16) = v29;
  return result;
}

uint64_t JSC::B3::optimizeAssociativeExpressionTrees(WTF **this, JSC::B3::Procedure *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  WTF *v19;
  const char *v21;
  _QWORD v22[3];
  uint64_t v23;
  WTF *v24;
  const char *v25[2];

  JSC::B3::PhaseScope::PhaseScope((uint64_t)v22, this, (uint64_t)"optimizeAssociativeExpressionTrees", 35);
  v25[0] = (const char *)this;
  v17 = JSC::B3::OptimizeAssociativeExpressionTrees::run((JSC::B3::OptimizeAssociativeExpressionTrees *)v25, v3, v4, v5, v6, v7, v8, v9);
  v18 = (const char *)v22[0];
  *(_QWORD *)(v22[0] + 144) = v22[1];
  if (HIBYTE(qword_1ECF4C32A))
  {
    if (v24)
      v21 = (char *)v24 + 16;
    else
      v21 = 0;
    v25[0] = v18;
    v25[1] = v21;
  }
  v19 = v24;
  v24 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
      WTF::fastFree((unint64_t)v19, v10, v11, v12, v13, v14, v15, v16);
    else
      --*(_DWORD *)v19;
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)&v23);
  return v17;
}

uint64_t JSC::B3::OriginDump::dump(JSC::B3::OriginDump *this, WTF::PrintStream *a2)
{
  const void *v4;
  uint64_t v5;
  uint64_t v7;
  const void *v8;
  WTF::PrintStream *v9;
  WTF::PrintStream *v10;

  if (*(_QWORD *)this)
  {
    v4 = (const void *)*((_QWORD *)this + 1);
    v5 = *(_QWORD *)(*(_QWORD *)this + 168);
    if (v5)
      return (*(uint64_t (**)(uint64_t, WTF::PrintStream *, const void *))(*(_QWORD *)v5 + 16))(v5, a2, v4);
    v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v10 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    WTF::PrintStream::printf(v10, "%s", "Origin(");
    WTF::PrintStream::printf(v10, "%p", v4);
    WTF::PrintStream::printf(v10, "%s");
  }
  else
  {
    v7 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v8 = (const void *)*((_QWORD *)this + 1);
    v9 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    WTF::PrintStream::printf(v9, "%s", "Origin(");
    WTF::PrintStream::printf(v9, "%p", v8);
    WTF::PrintStream::printf(v9, "%s");
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::B3::PatchpointSpecial::PatchpointSpecial(uint64_t this)
{
  *(_DWORD *)(this + 8) = -1;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_1E357E670;
  return this;
}

{
  *(_DWORD *)(this + 8) = -1;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_1E357E670;
  return this;
}

uint64_t JSC::B3::PatchpointSpecial::forEachArg(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _BOOL8 v21;
  unsigned __int8 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  _BOOL8 v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  _BOOL8 v48;
  unsigned __int8 v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;

  v50 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  if (*(_BYTE *)(*(_QWORD *)(a2 + 112) + 12) == 83)
    v5 = *(_QWORD *)(a2 + 112);
  else
    v5 = 0;
  v6 = *(_DWORD *)(v5 + 16);
  v52 = v5;
  if ((v6 & 0x80000000) != 0)
  {
    v40 = v6 & 0x7FFFFFFF;
    v41 = *(_DWORD *)(v50 + 44);
    if (v40 >= v41)
    {
LABEL_88:
      __break(0xC471u);
      JUMPOUT(0x197FDF5C8);
    }
    v42 = 0;
    v43 = 32;
    v44 = 8;
    while (1)
    {
      v45 = *(_QWORD *)(v50 + 32);
      if (v42 + 1 > *(unsigned int *)(v45 + 16 * v40 + 12))
        break;
      if (v42 >= *(unsigned int *)(v52 + 148))
        goto LABEL_99;
      if (*(_BYTE *)(*(_QWORD *)(v52 + 136) + v44) == 5)
        v46 = 8;
      else
        v46 = 4;
      if (v40 >= v41)
      {
        __break(0xC471u);
        JUMPOUT(0x197FDF6CCLL);
      }
      if (v42 + 1 >= *(unsigned int *)(a2 + 12))
        goto LABEL_100;
      v47 = *(_DWORD *)(*(_QWORD *)(v45 + 16 * v40) + 4 * v42);
      if (v47 >= 0x80000000)
        v47 = 0x80000000;
      v48 = v47 - 3 < 3;
      if (v47 >= 6)
        v49 = 0;
      else
        v49 = 0x40302030200uLL >> (8 * v47);
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _BOOL8, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(_QWORD *)a2 + v43, v46, v48, v49);
      v41 = *(_DWORD *)(v50 + 44);
      ++v42;
      v43 += 32;
      v44 += 16;
      if (v40 >= v41)
        goto LABEL_88;
    }
    v7 = v42 + 1;
  }
  else if (v6 - 1 <= 4)
  {
    v30 = v6 - 3 < 3;
    if (!*(_DWORD *)(v5 + 148))
    {
LABEL_99:
      __break(0xC471u);
      JUMPOUT(0x197FDF6ACLL);
    }
    if (*(_DWORD *)(a2 + 12) <= 1u)
    {
LABEL_100:
      __break(0xC471u);
      JUMPOUT(0x197FDF6B4);
    }
    v31 = *(_QWORD *)a2 + 32;
    if (v6 >= 6)
      v32 = 0;
    else
      v32 = 0x40302030200uLL >> (8 * v6);
    v33 = *(_QWORD *)(a3 + 8);
    if (*(_BYTE *)(*(_QWORD *)(v5 + 136) + 8) == 5)
      v34 = 8;
    else
      v34 = 4;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BOOL8, _QWORD))a3)(v33, v31, v34, v30, v32);
    v7 = 2;
  }
  else
  {
    v7 = 1;
  }
  v8 = *(_QWORD *)(a2 + 112);
  v9 = *(unsigned __int8 *)(v8 + 12) - 83;
  if (v9 > 5 || v9 == 1)
    v8 = 0;
  v11 = 0;
  v12 = (_WORD *)(v8 + 12);
  v13 = 32 * v7;
  v51 = v7;
  v14 = v7;
  v15 = 8;
  while (2)
  {
    v16 = 20;
    switch(*v12)
    {
      case 0u:
      case 1u:
      case 2u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x3Bu:
      case 0x3Cu:
      case 0x3Du:
      case 0x3Eu:
      case 0x4Fu:
      case 0x99u:
      case 0x9Au:
      case 0x9Bu:
      case 0x9Du:
      case 0x9Eu:
      case 0x9Fu:
        goto LABEL_14;
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x50u:
      case 0x54u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x76u:
      case 0x77u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x88u:
      case 0x89u:
      case 0x8Au:
      case 0x8Bu:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x94u:
      case 0x95u:
      case 0x96u:
      case 0x97u:
      case 0x98u:
        v16 = 24;
        goto LABEL_14;
      case 7u:
      case 0x51u:
      case 0x59u:
      case 0x9Cu:
        v16 = 28;
        goto LABEL_14;
      case 0x3Fu:
      case 0x40u:
      case 0x41u:
      case 0x42u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x4Bu:
      case 0x4Cu:
      case 0x4Du:
      case 0x4Eu:
      case 0x52u:
        v16 = 32;
LABEL_14:
        if (v11 < *(unsigned int *)&v12[v16])
          goto LABEL_15;
        goto LABEL_37;
      case 0x53u:
        if (v11 >= *(unsigned int *)(v8 + 188))
          goto LABEL_37;
        goto LABEL_15;
      case 0x55u:
      case 0x56u:
      case 0x57u:
      case 0x58u:
        if (v11 < *(unsigned int *)(v8 + 124))
        {
LABEL_15:
          if (v14 + v11 >= *(unsigned int *)(a2 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x197FDF634);
          }
          v17 = 40;
          switch(*v12)
          {
            case 0u:
            case 1u:
            case 2u:
            case 8u:
            case 0xDu:
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x14u:
            case 0x15u:
            case 0x16u:
            case 0x17u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
            case 0x28u:
            case 0x29u:
            case 0x2Au:
            case 0x2Bu:
            case 0x2Cu:
            case 0x2Du:
            case 0x2Eu:
            case 0x2Fu:
            case 0x30u:
            case 0x31u:
            case 0x32u:
            case 0x33u:
            case 0x34u:
            case 0x35u:
            case 0x36u:
            case 0x37u:
            case 0x38u:
            case 0x39u:
            case 0x3Au:
            case 0x3Bu:
            case 0x3Cu:
            case 0x3Du:
            case 0x3Eu:
            case 0x4Fu:
            case 0x99u:
            case 0x9Au:
            case 0x9Bu:
            case 0x9Du:
            case 0x9Eu:
            case 0x9Fu:
              break;
            case 3u:
            case 4u:
            case 5u:
            case 6u:
            case 9u:
            case 0xAu:
            case 0xBu:
            case 0xCu:
            case 0x50u:
            case 0x54u:
            case 0x5Au:
            case 0x5Bu:
            case 0x5Cu:
            case 0x5Du:
            case 0x5Eu:
            case 0x5Fu:
            case 0x60u:
            case 0x61u:
            case 0x62u:
            case 0x63u:
            case 0x64u:
            case 0x65u:
            case 0x66u:
            case 0x67u:
            case 0x68u:
            case 0x69u:
            case 0x6Au:
            case 0x6Bu:
            case 0x6Cu:
            case 0x6Du:
            case 0x6Eu:
            case 0x6Fu:
            case 0x70u:
            case 0x71u:
            case 0x72u:
            case 0x73u:
            case 0x74u:
            case 0x75u:
            case 0x76u:
            case 0x77u:
            case 0x78u:
            case 0x79u:
            case 0x7Au:
            case 0x7Bu:
            case 0x7Cu:
            case 0x7Du:
            case 0x7Eu:
            case 0x7Fu:
            case 0x80u:
            case 0x81u:
            case 0x82u:
            case 0x83u:
            case 0x84u:
            case 0x85u:
            case 0x86u:
            case 0x87u:
            case 0x88u:
            case 0x89u:
            case 0x8Au:
            case 0x8Bu:
            case 0x8Cu:
            case 0x8Du:
            case 0x8Eu:
            case 0x8Fu:
            case 0x90u:
            case 0x91u:
            case 0x92u:
            case 0x93u:
            case 0x94u:
            case 0x95u:
            case 0x96u:
            case 0x97u:
            case 0x98u:
              v17 = 48;
              break;
            case 7u:
            case 0x51u:
            case 0x59u:
            case 0x9Cu:
              v17 = 56;
              break;
            case 0x3Fu:
            case 0x40u:
            case 0x41u:
            case 0x42u:
            case 0x43u:
            case 0x44u:
            case 0x45u:
            case 0x46u:
            case 0x47u:
            case 0x48u:
            case 0x49u:
            case 0x4Au:
            case 0x4Bu:
            case 0x4Cu:
            case 0x4Du:
            case 0x4Eu:
            case 0x52u:
              v17 = 64;
              break;
            case 0x53u:
              v17 = 176;
              break;
            case 0x55u:
            case 0x56u:
            case 0x57u:
            case 0x58u:
              v17 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197FDF654);
          }
          if (v11 >= *(unsigned int *)(v8 + v17 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x197FDF65CLL);
          }
          if (v11 < *(unsigned int *)(v8 + 52))
          {
            v18 = 0;
            v19 = 2;
            switch(*(_BYTE *)(*(_QWORD *)(v8 + 40) + v15))
            {
              case 1:
                break;
              case 2:
                v19 = 3;
                goto LABEL_21;
              case 4:
                v18 = 6;
                goto LABEL_20;
              case 5:
                __break(0xC471u);
                JUMPOUT(0x197FDF67CLL);
              case 6:
              case 8:
                goto LABEL_21;
              default:
                goto LABEL_20;
            }
          }
          v18 = 1;
LABEL_20:
          v19 = v18;
LABEL_21:
          v20 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + v17) + 8 * v11) + 16);
          if (v20 >= 0x80000000)
            v20 = 0x80000000;
          v21 = v20 - 3 < 3;
          if (v20 >= 6)
            v22 = 0;
          else
            v22 = 0x40302030200uLL >> (8 * v20);
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _BOOL8, _QWORD))a3)(*(_QWORD *)(a3 + 8), *(_QWORD *)a2 + v13, v19, v21, v22);
          ++v11;
          v15 += 16;
          v13 += 32;
          continue;
        }
LABEL_37:
        v23 = *(_QWORD *)(a2 + 112);
        v24 = *(unsigned __int8 *)(v23 + 20);
        if (v24 == 4)
        {
          v25 = v52;
          v26 = 40;
          switch(*(_BYTE *)(v23 + 12))
          {
            case 0:
            case 1:
            case 2:
            case 8:
            case 0xD:
            case 0xE:
            case 0xF:
            case 0x10:
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
            case 0x1C:
            case 0x1D:
            case 0x1E:
            case 0x1F:
            case 0x20:
            case 0x21:
            case 0x22:
            case 0x23:
            case 0x24:
            case 0x25:
            case 0x26:
            case 0x27:
            case 0x28:
            case 0x29:
            case 0x2A:
            case 0x2B:
            case 0x2C:
            case 0x2D:
            case 0x2E:
            case 0x2F:
            case 0x30:
            case 0x31:
            case 0x32:
            case 0x33:
            case 0x34:
            case 0x35:
            case 0x36:
            case 0x37:
            case 0x38:
            case 0x39:
            case 0x3A:
            case 0x3B:
            case 0x3C:
            case 0x3D:
            case 0x3E:
            case 0x4F:
            case 0x99:
            case 0x9A:
            case 0x9B:
            case 0x9D:
            case 0x9E:
            case 0x9F:
              break;
            case 3:
            case 4:
            case 5:
            case 6:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0x50:
            case 0x54:
            case 0x5A:
            case 0x5B:
            case 0x5C:
            case 0x5D:
            case 0x5E:
            case 0x5F:
            case 0x60:
            case 0x61:
            case 0x62:
            case 0x63:
            case 0x64:
            case 0x65:
            case 0x66:
            case 0x67:
            case 0x68:
            case 0x69:
            case 0x6A:
            case 0x6B:
            case 0x6C:
            case 0x6D:
            case 0x6E:
            case 0x6F:
            case 0x70:
            case 0x71:
            case 0x72:
            case 0x73:
            case 0x74:
            case 0x75:
            case 0x76:
            case 0x77:
            case 0x78:
            case 0x79:
            case 0x7A:
            case 0x7B:
            case 0x7C:
            case 0x7D:
            case 0x7E:
            case 0x7F:
            case 0x80:
            case 0x81:
            case 0x82:
            case 0x83:
            case 0x84:
            case 0x85:
            case 0x86:
            case 0x87:
            case 0x88:
            case 0x89:
            case 0x8A:
            case 0x8B:
            case 0x8C:
            case 0x8D:
            case 0x8E:
            case 0x8F:
            case 0x90:
            case 0x91:
            case 0x92:
            case 0x93:
            case 0x94:
            case 0x95:
            case 0x96:
            case 0x97:
            case 0x98:
              v26 = 48;
              break;
            case 7:
            case 0x51:
            case 0x59:
            case 0x9C:
              v26 = 56;
              break;
            case 0x3F:
            case 0x40:
            case 0x41:
            case 0x42:
            case 0x43:
            case 0x44:
            case 0x45:
            case 0x46:
            case 0x47:
            case 0x48:
            case 0x49:
            case 0x4A:
            case 0x4B:
            case 0x4C:
            case 0x4D:
            case 0x4E:
            case 0x52:
              v26 = 64;
              break;
            case 0x53:
              v26 = 176;
              break;
            case 0x55:
            case 0x56:
            case 0x57:
            case 0x58:
              v26 = 112;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x197FDF69CLL);
          }
          v24 = *(_DWORD *)(v23 + v26 + 12);
        }
        else
        {
          v25 = v52;
        }
        v27 = v24 + v51;
        v28 = *(unsigned __int8 *)(v25 + 168);
        if (*(_BYTE *)(v25 + 168))
        {
          v35 = 0;
          v36 = 32 * (v24 + v51);
          do
          {
            if (v27 + v35 >= (unint64_t)*(unsigned int *)(a2 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x197FDF6BCLL);
            }
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), *(_QWORD *)a2 + v36, 10, 0, 3);
            ++v35;
            v36 += 32;
          }
          while (v28 != (_DWORD)v35);
          LODWORD(v27) = v27 + v35;
        }
        v29 = *(unsigned __int8 *)(v25 + 169);
        if (*(_BYTE *)(v25 + 169))
        {
          v37 = v27;
          v38 = 32 * v27;
          do
          {
            if (v37 >= *(unsigned int *)(a2 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x197FDF6C4);
            }
            if (HIBYTE(dword_1ECF4C7B0) && (HIBYTE(word_1ECF4C79E) || *(_BYTE *)(v50 + 212)))
              v39 = 4;
            else
              v39 = 3;
            --v29;
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))a3)(*(_QWORD *)(a3 + 8), *(_QWORD *)a2 + v38, 10, 1, v39);
            v38 += 32;
            ++v37;
          }
          while (v29);
        }
        return result;
      default:
        __break(0xC471u);
        JUMPOUT(0x197FDF62CLL);
    }
  }
}

uint64_t JSC::B3::PatchpointSpecial::isValid(JSC::B3::PatchpointSpecial *this, JSC::B3::Air::Inst *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (*(_BYTE *)(*((_QWORD *)a2 + 14) + 12) == 83)
    v4 = *((_QWORD *)a2 + 14);
  else
    v4 = 0;
  v5 = *(_DWORD *)(v4 + 16);
  if ((v5 & 0x80000000) != 0)
  {
    v16 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    v17 = v5 & 0x7FFFFFFF;
    v18 = *(unsigned int *)(v16 + 44);
    if (v17 >= v18)
    {
LABEL_49:
      __break(0xC471u);
      JUMPOUT(0x197FE00BCLL);
    }
    v19 = 0;
    v20 = 0;
    v21 = 32;
    while (1)
    {
      v22 = v20 + 1;
      v23 = *(_QWORD *)(v16 + 32);
      if (v20 + 1 > *(unsigned int *)(v23 + 16 * v17 + 12))
        break;
      if (v22 >= *((unsigned int *)a2 + 3))
        return 0;
      if (v18 <= v17)
        goto LABEL_49;
      result = JSC::B3::StackmapSpecial::isArgValidForType(*(_QWORD *)a2 + v21, *(_DWORD *)(*(_QWORD *)(v23 + 16 * v17) + 4 * v20));
      if (!(_DWORD)result)
        return result;
      if (v22 >= *((unsigned int *)a2 + 3))
        goto LABEL_47;
      if (v20 >= *(unsigned int *)(v4 + 148))
        goto LABEL_48;
      result = JSC::B3::StackmapSpecial::isArgValidForRep(*((_QWORD *)this + 2), *(_QWORD *)a2 + v21, (_BYTE *)(*(_QWORD *)(v4 + 136) + v19));
      if (!(_DWORD)result)
        return result;
      LODWORD(v18) = *(_DWORD *)(v16 + 44);
      ++v20;
      v19 += 16;
      v21 += 32;
      if (v18 <= v17)
        goto LABEL_49;
    }
    v6 = v20 + 1;
  }
  else if (v5 - 1 <= 4)
  {
    if (*((_DWORD *)a2 + 3) <= 1u || !JSC::B3::StackmapSpecial::isArgValidForType(*(_QWORD *)a2 + 32, v5))
      return 0;
    if (*((_DWORD *)a2 + 3) <= 1u)
    {
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x197FE00DCLL);
    }
    if (!*(_DWORD *)(v4 + 148))
    {
LABEL_48:
      __break(0xC471u);
      JUMPOUT(0x197FE00E4);
    }
    if ((JSC::B3::StackmapSpecial::isArgValidForRep(*((_QWORD *)this + 2), *(_QWORD *)a2 + 32, *(_BYTE **)(v4 + 136)) & 1) == 0)
      return 0;
    v6 = 2;
  }
  else
  {
    v6 = 1;
  }
  result = JSC::B3::StackmapSpecial::isValidImpl(this, 0, v6, a2);
  if (!(_DWORD)result)
    return result;
  v8 = JSC::B3::StackmapValue::numChildren((JSC::B3::StackmapValue *)v4) + v6;
  v9 = *(unsigned __int8 *)(v4 + 168);
  v10 = v8 + v9;
  v11 = *(unsigned __int8 *)(v4 + 169);
  v12 = v8 + v9 + v11;
  if (*((_DWORD *)a2 + 3) != v12)
    return 0;
  v13 = *(_QWORD *)a2;
  if (v12 <= v8)
    v14 = v8;
  else
    v14 = v8 + v9 + v11;
  while (v9)
  {
    if (v14 == v8)
    {
      __break(0xC471u);
      JUMPOUT(0x197FE00CCLL);
    }
    v24 = v13 + 32 * v8;
    if (*(_BYTE *)(v24 + 8) != 1)
      return 0;
    result = 0;
    ++v8;
    --v9;
    if (*(int *)(v24 + 16) <= 0)
      return result;
  }
  if (v12 <= v10)
    v15 = v10;
  else
    v15 = v12;
  do
  {
    result = v11 == 0;
    if (!v11)
      break;
    if (v15 == v10)
    {
      __break(0xC471u);
      JUMPOUT(0x197FE00D4);
    }
    v25 = v13 + 32 * v10;
    if (*(_BYTE *)(v25 + 8) != 1)
      break;
    ++v10;
    --v11;
  }
  while ((*(_DWORD *)(v25 + 16) & 0x80000000) != 0);
  return result;
}

BOOL JSC::B3::PatchpointSpecial::admitsStack(JSC::B3::PatchpointSpecial *this, JSC::B3::Air::Inst *a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)a2 + 14);
  v4 = *(_DWORD *)(v3 + 16);
  if (v4 < 0)
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    v9 = v4 & 0x7FFFFFFF;
    if (v9 >= *(_DWORD *)(v8 + 44))
      goto LABEL_15;
    v5 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 16 * v9 + 12);
  }
  else
  {
    v5 = (v4 - 1) < 5;
  }
  if (v5 < a3)
    return JSC::B3::StackmapSpecial::admitsStackImpl((uint64_t)this, 0, v5 + 1, (uint64_t)a2, a3);
  if (*(_BYTE *)(v3 + 12) != 83)
    v3 = 0;
  if (*(_DWORD *)(v3 + 148) <= a3 - 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197FE01BCLL);
  }
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 136) + 16 * (a3 - 1) + 8);
  if (v7 >= 0xB || ((0x5F9u >> v7) & 1) == 0)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x197FE018CLL);
  }
  return (0x607u >> v7) & 1;
}

BOOL JSC::B3::PatchpointSpecial::admitsExtendedOffsetAddr(JSC::B3::PatchpointSpecial *this, JSC::B3::Air::Inst *a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)a2 + 14);
  v4 = *(_DWORD *)(v3 + 16);
  if (v4 < 0)
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    v9 = v4 & 0x7FFFFFFF;
    if (v9 >= *(_DWORD *)(v8 + 44))
      goto LABEL_15;
    v5 = *(_DWORD *)(*(_QWORD *)(v8 + 32) + 16 * v9 + 12);
  }
  else
  {
    v5 = (v4 - 1) < 5;
  }
  if (v5 < a3)
    return JSC::B3::StackmapSpecial::admitsStackImpl((uint64_t)this, 0, v5 + 1, (uint64_t)a2, a3);
  if (*(_BYTE *)(v3 + 12) != 83)
    v3 = 0;
  if (*(_DWORD *)(v3 + 148) <= a3 - 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197FE0294);
  }
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 136) + 16 * (a3 - 1) + 8);
  if (v7 >= 0xB || ((0x5F9u >> v7) & 1) == 0)
  {
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x197FE0264);
  }
  return (0x607u >> v7) & 1;
}

void JSC::B3::PatchpointSpecial::generate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int64x2_t v14;
  int64x2_t v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  int v19;
  int v20;
  char v21;
  uint64_t v22;
  int64x2_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 *v37;
  WTF *v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  WTF *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  int v47;
  int v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  WTF *v57;
  WTF *v58;
  unint64_t v59;
  WTF *v60;
  unsigned int v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  char v65;
  _BYTE *v66;
  uint64_t v67;
  __int128 *v68;
  __int128 v69;
  __int128 *v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char v75;
  int v76;
  _BYTE *v77;
  int v78;
  int64x2_t v79;
  int v80;
  int64x2_t v81;
  char v82;
  WTF *v83[2];
  int v84;
  int v85;
  WTF *v86[2];
  WTF *v87[2];
  uint64_t v88;
  __int128 *v89;
  uint64_t v90;

  v9 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  if (*(_BYTE *)(*(_QWORD *)(a2 + 112) + 12) == 83)
    v11 = *(_QWORD *)(a2 + 112);
  else
    v11 = 0;
  v89 = 0;
  v90 = 0;
  v12 = *(_DWORD *)(v11 + 16);
  v13 = 1;
  v14 = vdupq_n_s64(7uLL);
  v15 = vdupq_n_s64(9uLL);
  while (1)
  {
    v16 = (v12 - 1) < 5;
    if (v12 < 0)
    {
      if ((v12 & 0x7FFFFFFFu) >= *(_DWORD *)(v10 + 44))
      {
        __break(0xC471u);
        JUMPOUT(0x197FE07F4);
      }
      v16 = *(_DWORD *)(*(_QWORD *)(v10 + 32) + 16 * (v12 & 0x7FFFFFFF) + 12);
    }
    if (v13 > v16)
      break;
    if (*(_DWORD *)(a2 + 12) <= v13)
    {
      __break(0xC471u);
      JUMPOUT(0x197FE07ECLL);
    }
    v17 = *(_QWORD *)a2;
    v18 = (int *)(*(_QWORD *)a2 + 32 * v13);
    v19 = *((char *)v18 + 8);
    if (v19 == 1)
    {
      v20 = v18[4];
      if (v20 <= 0)
        v21 = 31 - v20;
      else
        v21 = v20 - 1;
      v22 = v21 & 0x7F;
      v23.i64[1] = v14.i64[1];
    }
    else
    {
      if ((v19 - 7) >= 2)
      {
        if ((v19 - 2) >= 2)
        {
          v23 = 0uLL;
        }
        else
        {
          v23 = vdupq_n_s64(0xBuLL);
          v23.i64[0] = *(_QWORD *)v18;
        }
        goto LABEL_14;
      }
      v71 = *((unsigned __int8 *)v18 + 8);
      v72 = v17 + 32 * v13;
      if (*(_DWORD *)(v72 + 16) == 30)
      {
        if (v71 == 9)
          v18 = (int *)(v72 + 12);
        v22 = *v18;
        v23.i64[1] = v15.i64[1];
      }
      else
      {
        v78 = *(_DWORD *)(*(_QWORD *)(a4 + 48) + 184);
        if (v78 < 0)
        {
          __break(0xC471u);
          goto LABEL_91;
        }
        if (v71 == 9)
          v18 = (int *)(v17 + 32 * v13 + 12);
        v22 = *v18 - v78;
        v23 = vdupq_n_s64(9uLL);
      }
    }
    v23.i64[0] = v22;
LABEL_14:
    *(int64x2_t *)v83 = v23;
    if (v9 == (_DWORD)v90)
    {
      v79 = v15;
      v81 = v14;
      v70 = (__int128 *)WTF::Vector<JSC::B3::ValueRep,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v89, v9 + 1, (unint64_t)v83);
      v15 = v79;
      v14 = v81;
      v89[HIDWORD(v90)] = *v70;
    }
    else
    {
      v89[v9] = *(_OWORD *)v83;
    }
    v9 = ++HIDWORD(v90);
    ++v13;
  }
  JSC::B3::StackmapSpecial::repsImpl(a4, 0, v13, (uint64_t *)a2, (uint64_t)v83);
  v31 = HIDWORD(v90);
  v32 = HIDWORD(v83[1]) + (unint64_t)HIDWORD(v90);
  if (v32 > v90)
  {
    v33 = v90 + ((unint64_t)v90 >> 2);
    if (v33 >= 0x10)
      v34 = v33 + 1;
    else
      v34 = 16;
    if (v34 <= v32)
      v35 = HIDWORD(v83[1]) + (unint64_t)HIDWORD(v90);
    else
      v35 = v34;
    if (v35 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197FE0804);
    }
    v36 = (unint64_t)v89;
    v37 = (__int128 *)WTF::fastMalloc((WTF *)(16 * v35));
    LODWORD(v90) = v35;
    v89 = v37;
    if ((_DWORD)v31)
    {
      v67 = 16 * v31;
      v68 = (__int128 *)v36;
      do
      {
        v69 = *v68++;
        *v37++ = v69;
        v67 -= 16;
      }
      while (v67);
    }
    if (v36)
    {
      if (v89 == (__int128 *)v36)
      {
        v89 = 0;
        LODWORD(v90) = 0;
      }
      WTF::fastFree(v36, v24, v25, v26, v27, v28, v29, v30);
    }
  }
  v38 = v83[0];
  if (HIDWORD(v83[1]))
  {
    v39 = HIDWORD(v90);
    v40 = 16 * HIDWORD(v83[1]);
    do
    {
      v41 = *(_OWORD *)v38;
      v38 = (WTF *)((char *)v38 + 16);
      v89[v39] = v41;
      v39 = ++HIDWORD(v90);
      v40 -= 16;
    }
    while (v40);
    v38 = v83[0];
  }
  if (v38)
  {
    v83[0] = 0;
    LODWORD(v83[1]) = 0;
    WTF::fastFree((unint64_t)v38, v24, v25, v26, v27, v28, v29, v30);
  }
  v80 = JSC::B3::StackmapValue::numChildren((JSC::B3::StackmapValue *)v11);
  v42 = HIDWORD(v90);
  v83[1] = 0;
  v84 = 0;
  v83[0] = (WTF *)v11;
  v85 = HIDWORD(v90);
  if (HIDWORD(v90))
  {
    if (HIDWORD(v90) >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x197FE07FCLL);
    }
    v43 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v90)));
    v84 = v42;
    v83[1] = v43;
    if (HIDWORD(v90))
    {
      v44 = v89;
      v45 = 16 * HIDWORD(v90);
      do
      {
        v46 = *v44++;
        *(_OWORD *)v43 = v46;
        v43 = (WTF *)((char *)v43 + 16);
        v45 -= 16;
      }
      while (v45);
    }
  }
  *(_OWORD *)v87 = 0u;
  *(_OWORD *)v86 = 0u;
  v88 = a4;
  v47 = *(unsigned __int8 *)(v11 + 168);
  if (*(_BYTE *)(v11 + 168))
  {
    v60 = 0;
    v61 = 0;
    v62 = v80 + v13;
    v63 = *(unsigned __int8 *)(v11 + 168);
    v64 = (32 * v62) | 0x10;
    do
    {
      if (v62 >= *(unsigned int *)(a2 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x197FE080CLL);
      }
      v65 = *(_BYTE *)(*(_QWORD *)a2 + v64) - 1;
      v82 = v65;
      if (v61 == LODWORD(v86[1]))
      {
        v66 = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, (WTF *)(v61 + 1), (unint64_t)&v82);
        v61 = HIDWORD(v86[1]);
        v60 = v86[0];
        *((_BYTE *)v86[0] + HIDWORD(v86[1])) = *v66;
      }
      else
      {
        *((_BYTE *)v60 + v61) = v65;
      }
      HIDWORD(v86[1]) = ++v61;
      v64 += 32;
      ++v62;
      --v63;
    }
    while (v63);
  }
  v48 = *(unsigned __int8 *)(v11 + 169);
  if (*(_BYTE *)(v11 + 169))
  {
    v73 = v80 + v47 + v13;
    v74 = (32 * v73) | 0x10;
    while (v73 < *(unsigned int *)(a2 + 12))
    {
      v75 = ~*(_BYTE *)(*(_QWORD *)a2 + v74);
      v82 = v75;
      v76 = HIDWORD(v87[1]);
      if (HIDWORD(v87[1]) == LODWORD(v87[1]))
      {
        v77 = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v87, (WTF *)(HIDWORD(v87[1]) + 1), (unint64_t)&v82);
        v76 = HIDWORD(v87[1]);
        *((_BYTE *)v87[0] + HIDWORD(v87[1])) = *v77;
      }
      else
      {
        *((_BYTE *)v87[0] + HIDWORD(v87[1])) = v75;
      }
      HIDWORD(v87[1]) = v76 + 1;
      v74 += 32;
      ++v73;
      if (!--v48)
        goto LABEL_43;
    }
    __break(0xC471u);
LABEL_91:
    JUMPOUT(0x197FE07B8);
  }
LABEL_43:
  (*(void (**)(_QWORD, uint64_t, WTF **))(**(_QWORD **)(v11 + 56) + 16))(*(_QWORD *)(v11 + 56), a3, v83);
  *(_QWORD *)a5 = 0xFFFFFFFFLL;
  *(_DWORD *)(a5 + 8) = -16773311;
  v56 = v87[0];
  if (v87[0])
  {
    v87[0] = 0;
    LODWORD(v87[1]) = 0;
    WTF::fastFree((unint64_t)v56, v49, v50, v51, v52, v53, v54, v55);
  }
  v57 = v86[0];
  if (v86[0])
  {
    v86[0] = 0;
    LODWORD(v86[1]) = 0;
    WTF::fastFree((unint64_t)v57, v49, v50, v51, v52, v53, v54, v55);
  }
  v58 = v83[1];
  if (v83[1])
  {
    v83[1] = 0;
    v84 = 0;
    WTF::fastFree((unint64_t)v58, v49, v50, v51, v52, v53, v54, v55);
  }
  v59 = (unint64_t)v89;
  if (v89)
  {
    v89 = 0;
    LODWORD(v90) = 0;
    WTF::fastFree(v59, v49, v50, v51, v52, v53, v54, v55);
  }
}

uint64_t JSC::B3::PatchpointSpecial::isTerminal(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 112);
  if (*(_BYTE *)(v2 + 12) != 83)
    v2 = 0;
  return *(unsigned __int8 *)(v2 + 112);
}

uint64_t JSC::B3::PatchpointSpecial::dumpImpl(JSC::B3::PatchpointSpecial *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v3;

  v3 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v3, "%s", "Patchpoint");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

uint64_t JSC::B3::PatchpointSpecial::deepDumpImpl(JSC::B3::PatchpointSpecial *this, WTF::PrintStream *a2)
{
  WTF::PrintStream *v3;

  v3 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v3, "%s", "Lowered B3::PatchpointValue.");
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
}

void JSC::B3::PatchpointValue::~PatchpointValue(JSC::B3::PatchpointValue *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::B3::PatchpointValue *v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v9 = (JSC::B3::PatchpointValue *)*((_QWORD *)this + 17);
  if ((JSC::B3::PatchpointValue *)((char *)this + 152) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E357EF48;
  v11 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  v15 = *((_QWORD *)this + 5);
  if (v15)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v16 = JSC::B3::Value::childrenAlloc(this);
    v24 = *(_QWORD *)v16;
    if (v16 + 16 != *(_QWORD *)v16)
    {
      if (v24)
      {
        *(_QWORD *)v16 = 0;
        *(_DWORD *)(v16 + 8) = 0;
        WTF::fastFree(v24, v17, v18, v19, v20, v21, v22, v23);
      }
    }
  }
}

{
  JSC::B3::PatchpointValue *v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v9 = (JSC::B3::PatchpointValue *)*((_QWORD *)this + 17);
  if ((JSC::B3::PatchpointValue *)((char *)this + 152) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 17) = 0;
    *((_DWORD *)this + 36) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E357EF48;
  v11 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v11 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  v15 = *((_QWORD *)this + 5);
  if (v15)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E357F5F0;
  if (*((_BYTE *)this + 20) == 4)
  {
    v16 = JSC::B3::Value::childrenAlloc(this);
    v17 = *(_QWORD *)v16;
    if (v16 + 16 != *(_QWORD *)v16)
    {
      if (v17)
      {
        *(_QWORD *)v16 = 0;
        *(_DWORD *)(v16 + 8) = 0;
        WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::B3::PatchpointValue::dumpMeta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  WTF::PrintStream *v11;
  float v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::PrintStream *v22;
  float v23;
  size_t v24;
  char *v25;
  uint64_t v26;
  WTF::PrintStream *v27;
  float v28;
  uint64_t v29;
  int v30;
  JSC::B3::ValueRep *v31;
  uint64_t v32;
  WTF::PrintStream *v33;
  uint64_t v34;
  WTF::PrintStream *v35;
  float v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  WTF::PrintStream *v40;
  float v41;
  uint64_t result;
  const char **v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char **v50;
  const char **v51;

  v4 = a2;
  v5 = a1;
  v47 = *(const char **)(a1 + 56);
  v49 = a2;
  v50 = (const char **)"generator = ";
  v51 = &v47;
  WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,char [13],WTF::RawPointer>(WTF::CommaPrinter,char [13],WTF::RawPointer const&)::{lambda(WTF::PrintStream&)#1}>(a3, &v49);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v7 = v6;
  if (*(_BYTE *)(v4 + 32))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v10 = *(char **)v4;
    v9 = *(_QWORD *)(v4 + 8);
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    if (v10)
    {
      v13 = v9 - 1;
      if (!v9)
        v13 = 0;
      WTF::StringImpl::utf8ForCharacters(v10, v13, (uint64_t)&v49, v12);
    }
    else
    {
      v20 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = 0;
      v49 = v20;
      LODWORD(v50) = 0;
    }
    WTF::printExpectedCStringHelper(v11, "StringView", &v49);
    if ((_DWORD)v50 != -1)
      ((void (*)(const char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v50])(&v47, &v49);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  else
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v16 = *(char **)(v4 + 16);
    v15 = *(_QWORD *)(v4 + 24);
    v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
    if (v16)
    {
      v19 = v15 - 1;
      if (!v15)
        v19 = 0;
      WTF::StringImpl::utf8ForCharacters(v16, v19, (uint64_t)&v49, v18);
    }
    else
    {
      v21 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 0;
      v49 = v21;
      LODWORD(v50) = 0;
    }
    WTF::printExpectedCStringHelper(v17, "StringView", &v49);
    if ((_DWORD)v50 != -1)
      ((void (*)(const char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v50])(&v47, &v49);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *(_BYTE *)(v4 + 32) = 1;
  }
  v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  WTF::StringImpl::utf8ForCharacters("resultConstraints = ", 0x14uLL, (uint64_t)&v49, v23);
  WTF::printExpectedCStringHelper(v22, "StringView", &v49);
  if ((_DWORD)v50 != -1)
    ((void (*)(const char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v50])(&v47, &v49);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  v24 = *(_DWORD *)(v5 + 148) > 1u;
  if (*(_DWORD *)(v5 + 148) <= 1u)
    v25 = "";
  else
    v25 = "[";
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v27 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
  WTF::StringImpl::utf8ForCharacters(v25, v24, (uint64_t)&v49, v28);
  WTF::printExpectedCStringHelper(v27, "StringView", &v49);
  if ((_DWORD)v50 != -1)
    ((void (*)(const char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v50])(&v47, &v49);
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
  (*(void (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  v29 = *(unsigned int *)(v5 + 148);
  if (!(_DWORD)v29)
    goto LABEL_36;
  v45 = v4;
  v46 = v5;
  v30 = 0;
  v31 = *(JSC::B3::ValueRep **)(v5 + 136);
  v32 = 16 * v29;
  do
  {
    v33 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
    v34 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v33 + 32))(v33);
    v35 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 32))(v34);
    if (v30)
    {
      WTF::StringImpl::utf8ForCharacters(", ", 2uLL, (uint64_t)&v49, v36);
      WTF::printExpectedCStringHelper(v35, "StringView", &v49);
      if ((_DWORD)v50 != -1)
        ((void (*)(const char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v50])(&v47, &v49);
    }
    else
    {
      WTF::StringImpl::utf8ForCharacters("", 0, (uint64_t)&v49, v36);
      WTF::printExpectedCStringHelper(v35, "StringView", &v49);
      if ((_DWORD)v50 != -1)
        ((void (*)(const char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v50])(&v47, &v49);
      v30 = 1;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 40))(v34);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v33 + 40))(v33);
    JSC::B3::ValueRep::dump(v31, v33);
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
    v31 = (JSC::B3::ValueRep *)((char *)v31 + 16);
    v32 -= 16;
  }
  while (v32);
  v4 = v45;
  v5 = v46;
  if (*(_DWORD *)(v46 + 148) > 1u)
  {
    v37 = "]";
    v38 = 1;
  }
  else
  {
LABEL_36:
    v38 = 0;
    v37 = "";
  }
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
  v40 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
  WTF::StringImpl::utf8ForCharacters(v37, v38, (uint64_t)&v49, v41);
  WTF::printExpectedCStringHelper(v40, "StringView", &v49);
  if ((_DWORD)v50 != -1)
    ((void (*)(const char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v50])(&v47, &v49);
  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  if (*(_BYTE *)(v5 + 168))
  {
    v47 = "numGPScratchRegisters = ";
    v48 = 25;
    v49 = v4;
    v50 = &v47;
    v51 = (const char **)(v5 + 168);
    result = WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned char>(WTF::CommaPrinter,WTF::ASCIILiteral,unsigned char const&)::{lambda(WTF::PrintStream&)#1}>(a3, &v49);
  }
  v44 = *(unsigned __int8 *)(v5 + 169);
  v43 = (const char **)(v5 + 169);
  if (v44)
  {
    v47 = "numFPScratchRegisters = ";
    v48 = 25;
    v49 = v4;
    v50 = &v47;
    v51 = v43;
    return WTF::PrintStream::atomically<void WTF::PrintStream::print<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned char>(WTF::CommaPrinter,WTF::ASCIILiteral,unsigned char const&)::{lambda(WTF::PrintStream&)#1}>(a3, &v49);
  }
  return result;
}

uint64_t JSC::B3::PatchpointValue::PatchpointValue(uint64_t a1, int a2, uint64_t a3, __int16 a4)
{
  _QWORD *v6;
  char v7;

  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = a4;
  *(_DWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)a1);
  *v6 = v6 + 2;
  v6[1] = 3;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = off_1E357E700;
  *(_OWORD *)(a1 + 112) = xmmword_1991243D0;
  *(_QWORD *)(a1 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 136) = a1 + 152;
  *(_QWORD *)(a1 + 144) = 1;
  *(_WORD *)(a1 + 168) = 0;
  if ((a2 & 0x80000000) == 0)
  {
    if (a2)
      v7 = 3;
    else
      v7 = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_BYTE *)(a1 + 160) = v7;
    *(_DWORD *)(a1 + 148) = 1;
  }
  return a1;
}

{
  _QWORD *v6;
  char v7;

  *(_QWORD *)a1 = off_1E357F5F0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = a4;
  *(_DWORD *)(a1 + 16) = a2;
  *(_BYTE *)(a1 + 20) = 4;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = (_QWORD *)JSC::B3::Value::childrenAlloc((JSC::B3::Value *)a1);
  *v6 = v6 + 2;
  v6[1] = 3;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)a1 = off_1E357E700;
  *(_OWORD *)(a1 + 112) = xmmword_1991243D0;
  *(_QWORD *)(a1 + 128) = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 136) = a1 + 152;
  *(_QWORD *)(a1 + 144) = 1;
  *(_WORD *)(a1 + 168) = 0;
  if ((a2 & 0x80000000) == 0)
  {
    if (a2)
      v7 = 3;
    else
      v7 = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_BYTE *)(a1 + 160) = v7;
    *(_DWORD *)(a1 + 148) = 1;
  }
  return a1;
}

uint64_t JSC::B3::PhaseScope::PhaseScope(uint64_t a1, WTF **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  WTF *v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  WTF **v29;
  WTF *v30;

  *(_QWORD *)&v27 = a3;
  *((_QWORD *)&v27 + 1) = a4;
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 24) = "B3";
  *(_QWORD *)(a1 + 32) = 3;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = 0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v7 = mach_absolute_time();
    v9 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v9 != -1)
    {
      v30 = (WTF *)&v28;
      v29 = &v30;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v29, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v8) = dword_1ECF4400C;
    *(double *)(a1 + 56) = (double)(v7 * WTF::machTimebaseInfo(void)::timebaseInfo)
                         / ((double)v8
                          * 1000000000.0);
  }
  *(_QWORD *)(a1 + 64) = 0;
  if (byte_1ECF4C323 | byte_1ECF4C326)
  {
    v30 = a2[18];
    WTF::dataLog<char [10],char const*,char [10],WTF::ASCIILiteral,char [3]>("B3 after ", (const char **)&v30, ", before ", (uint64_t)&v27, ":\n");
    WTF::dataLog<JSC::B3::Procedure>((JSC::B3::Procedure *)a2);
  }
  if ((_BYTE)qword_1ECF4C332)
  {
    WTF::toCString<JSC::B3::Procedure>((JSC::B3::Procedure *)a2, (uint64_t *)&v30);
    v17 = v30;
    v30 = 0;
    v18 = *(WTF **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v17;
    if (v18)
    {
      v19 = *(_DWORD *)v18 - 1;
      if (*(_DWORD *)v18 == 1)
      {
        WTF::fastFree((unint64_t)v18, v10, v11, v12, v13, v14, v15, v16);
        v18 = v30;
        v30 = 0;
        if (!v18)
          return a1;
        v19 = *(_DWORD *)v18 - 1;
        if (*(_DWORD *)v18 == 1)
        {
          WTF::fastFree((unint64_t)v18, v20, v21, v22, v23, v24, v25, v26);
          return a1;
        }
      }
      *(_DWORD *)v18 = v19;
    }
  }
  return a1;
}

uint64_t WTF::dataLog<char [10],char const*,char [10],WTF::ASCIILiteral,char [3]>(const char *a1, const char **a2, const char *a3, uint64_t a4, const char *a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  char v20;
  char **v21;
  char *v22;
  int v23;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v22 = &v20;
    v21 = &v22;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", a1);
  WTF::PrintStream::printf(v12, "%s", *a2);
  WTF::PrintStream::printf(v12, "%s", a3);
  v13 = *(char **)a4;
  v14 = *(_QWORD *)(a4 + 8);
  v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 32))(v12);
  if (v13)
  {
    v17 = v14 - 1;
    if (!v14)
      v17 = 0;
    WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v22, v16);
  }
  else
  {
    v18 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = 0;
    *(_BYTE *)(v18 + 16) = 0;
    v22 = (char *)v18;
    v23 = 0;
  }
  WTF::printExpectedCStringHelper(v15, "StringView", &v22);
  if (v23 != -1)
    ((void (*)(char ***, char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v23])(&v21, &v22);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v12 + 40))(v12);
  WTF::PrintStream::printf(v12, "%s", a5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

void WTF::toCString<JSC::B3::Procedure>(JSC::B3::Procedure *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (**v15)(WTF::StringPrintStream *__hidden);
  _BYTE *v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v15 = off_1E3572250;
  v16 = v18;
  v17 = xmmword_199122F80;
  v18[0] = 0;
  JSC::B3::Procedure::dump(a1, (WTF::PrintStream *)&v15);
  v15[5]((WTF::StringPrintStream *)&v15);
  v11 = v16;
  v10 = v17;
  *a2 = 0;
  if (!v11)
  {
    v14 = 0;
LABEL_6:
    WTF::fastFree(v14, v3, v4, v5, v6, v7, v8, v9);
    return;
  }
  if (v10 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x197FE163CLL);
  }
  v12 = WTF::fastMalloc((WTF *)(v10 + 17));
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = v10;
  *a2 = v12;
  v13 = v12 + 16;
  memcpy((void *)(v12 + 16), v11, v10);
  *(_BYTE *)(v13 + v10) = 0;
  v14 = (unint64_t)v16;
  if (v16 != v18)
    goto LABEL_6;
}

uint64_t JSC::B3::PhiChildren::PhiChildren(uint64_t this, JSC::B3::Procedure *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v3 = this;
  v4 = *((unsigned int *)a2 + 19);
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 28)
    {
      __break(0xC471u);
      return this;
    }
    v5 = (void *)WTF::fastMalloc((WTF *)(16 * v4));
    *(_DWORD *)(v3 + 8) = v4;
    *(_QWORD *)v3 = v5;
    v6 = *(unsigned int *)(v3 + 12);
    if ((_DWORD)v6)
      bzero(v5, 16 * v6);
  }
  *(_QWORD *)(v3 + 16) = v3 + 32;
  *(_QWORD *)(v3 + 24) = 8;
  v7 = *((unsigned int *)a2 + 19);
  if ((_DWORD)v7)
  {
    v8 = 0;
    while (!*(_QWORD *)(*((_QWORD *)a2 + 8) + 8 * v8))
    {
      if (v7 == ++v8)
        return v3;
    }
    if ((_DWORD)v7 != (_DWORD)v8)
    {
      v9 = *((_DWORD *)a2 + 19);
      do
      {
        v10 = *(_QWORD *)(*((_QWORD *)a2 + 8) + 8 * v8);
        if ((*(_WORD *)(v10 + 12) & 0xFFF) != 0x98)
          v10 = 0;
        v18 = v10;
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 40);
          v17 = v11;
          v12 = *(_QWORD *)v3 + 16 * *(unsigned int *)(v11 + 8);
          LODWORD(v13) = *(_DWORD *)(v12 + 12);
          if (!(_DWORD)v13)
          {
            v15 = *(unsigned int *)(v3 + 28);
            if ((_DWORD)v15 == *(_DWORD *)(v3 + 24))
            {
              v16 = (_QWORD *)WTF::Vector<JSC::B3::Value *,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v3 + 16, v15 + 1, (unint64_t)&v17);
              v13 = *(unsigned int *)(v3 + 28);
              *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v13) = *v16;
              *(_DWORD *)(v3 + 28) = v13 + 1;
              LODWORD(v13) = *(_DWORD *)(v12 + 12);
            }
            else
            {
              LODWORD(v13) = 0;
              *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v15) = v11;
              *(_DWORD *)(v3 + 28) = v15 + 1;
            }
          }
          if ((_DWORD)v13 == *(_DWORD *)(v12 + 8))
          {
            v14 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v13 + 1, (unint64_t)&v18);
            v13 = *(unsigned int *)(v12 + 12);
            *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = *v14;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = v18;
          }
          *(_DWORD *)(v12 + 12) = v13 + 1;
          v9 = *((_DWORD *)a2 + 19);
        }
        v8 = (v8 + 1);
        if (v9 > v8)
        {
          while (!*(_QWORD *)(*((_QWORD *)a2 + 8) + 8 * v8))
          {
            if (v9 == ++v8)
            {
              LODWORD(v8) = v9;
              break;
            }
          }
        }
      }
      while ((_DWORD)v7 != (_DWORD)v8);
    }
  }
  return v3;
}

uint64_t JSC::B3::Procedure::Procedure(JSC::B3::Procedure *this, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  JSC::B3::Air::Code *v6;
  JSC::B3::Air::Code *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::B3::Air::Code *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;

  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v4 = this;
  *((_QWORD *)this + 12) = v4;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = "initial";
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = 0;
  v5[1] = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = v5;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 50) = 1;
  *((_DWORD *)this + 51) = dword_1ECF4C420;
  *((_BYTE *)this + 208) = 1;
  *(_DWORD *)((char *)this + 209) = 0;
  if (a2)
  {
    if (!HIBYTE(dword_1ECF4C7B0))
    {
      result = 289;
      __break(0xC471u);
      return result;
    }
    *((_BYTE *)this + 212) = 1;
  }
  v6 = (JSC::B3::Air::Code *)WTF::fastMalloc((WTF *)0x148);
  v7 = JSC::B3::Air::Code::Code(v6, this);
  v15 = (JSC::B3::Air::Code *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v7;
  if (v15)
  {
    JSC::B3::Air::Code::~Code(v15, v8, v9, v10, v11, v12, v13, v14);
    WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    v7 = (JSC::B3::Air::Code *)*((_QWORD *)this + 20);
  }
  JSC::B3::Air::Code::setNumEntrypoints(v7, (void *)*((unsigned int *)this + 50), v9, v10, v11, v12, v13, v14);
  return (uint64_t)this;
}

void JSC::B3::Procedure::~Procedure(JSC::B3::Procedure *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  JSC::B3::Air::Code *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  JSC::B3::BasicBlock **v70;
  uint64_t v71;
  JSC::B3::BasicBlock *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  unint64_t v83;

  v9 = *((_QWORD *)this + 23);
  if (v9)
  {
    *((_QWORD *)this + 23) = 0;
    *((_DWORD *)this + 48) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  v14 = (JSC::B3::Air::Code *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v14)
  {
    JSC::B3::Air::Code::~Code(v14, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  v23 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v23)
  {
    v24 = *(unsigned int *)(v23 + 12);
    if ((_DWORD)v24)
    {
      v67 = *(uint64_t **)v23;
      v68 = 8 * v24;
      do
      {
        v69 = *v67;
        *v67 = 0;
        if (v69)
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
        ++v67;
        v68 -= 8;
      }
      while (v68);
    }
    v25 = *(_QWORD *)v23;
    if (*(_QWORD *)v23)
    {
      *(_QWORD *)v23 = 0;
      *(_DWORD *)(v23 + 8) = 0;
      WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = *((_QWORD *)this + 17);
  if (v26)
    WTF::fastFree(v26 - 16, a2, a3, a4, a5, a6, a7, a8);
  v27 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 24);
    if (v28)
    {
      *(_QWORD *)(v27 + 24) = 0;
      *(_DWORD *)(v27 + 32) = 0;
      WTF::fastFree(v28, a2, a3, a4, a5, a6, a7, a8);
    }
    v29 = *(unsigned int *)(v27 + 20);
    v30 = *(_QWORD *)(v27 + 8);
    if ((_DWORD)v29)
    {
      v31 = 40 * v29;
      do
      {
        v32 = *(_QWORD *)v30;
        if (*(_QWORD *)v30)
        {
          *(_QWORD *)v30 = 0;
          *(_DWORD *)(v30 + 8) = 0;
          WTF::fastFree(v32, a2, a3, a4, a5, a6, a7, a8);
        }
        v30 += 40;
        v31 -= 40;
      }
      while (v31);
      v30 = *(_QWORD *)(v27 + 8);
    }
    if (v30)
    {
      *(_QWORD *)(v27 + 8) = 0;
      *(_DWORD *)(v27 + 16) = 0;
      WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v27, a2, a3, a4, a5, a6, a7, a8);
  }
  v33 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 88);
    if ((v34 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v34, a2, a3, a4, a5, a6, a7, a8);
    v35 = *(_QWORD *)(v33 + 8);
    if (v33 + 24 != v35 && v35 != 0)
    {
      *(_QWORD *)(v33 + 8) = 0;
      *(_DWORD *)(v33 + 16) = 0;
      WTF::fastFree(v35, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v33, a2, a3, a4, a5, a6, a7, a8);
  }
  v37 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v37)
  {
    v38 = *(_QWORD *)(v37 + 312);
    if (v38)
    {
      *(_QWORD *)(v37 + 312) = 0;
      *(_DWORD *)(v37 + 320) = 0;
      WTF::fastFree(v38, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::Vector<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v37 + 8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v37, v39, v40, v41, v42, v43, v44, v45);
  }
  v46 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v46)
  {
    v47 = *(unsigned int *)(v46 + 20);
    v48 = *(_QWORD *)(v46 + 8);
    if ((_DWORD)v47)
    {
      v49 = 32 * v47;
      do
      {
        v50 = *(_QWORD *)v48;
        if (*(_QWORD *)v48)
        {
          *(_QWORD *)v48 = 0;
          *(_DWORD *)(v48 + 8) = 0;
          WTF::fastFree(v50, a2, a3, a4, a5, a6, a7, a8);
        }
        v48 += 32;
        v49 -= 32;
      }
      while (v49);
      v48 = *(_QWORD *)(v46 + 8);
    }
    if (v48)
    {
      *(_QWORD *)(v46 + 8) = 0;
      *(_DWORD *)(v46 + 16) = 0;
      WTF::fastFree(v48, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v46, a2, a3, a4, a5, a6, a7, a8);
  }
  v51 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v51)
    WTF::fastFree(v51, a2, a3, a4, a5, a6, a7, a8);
  v52 = *((_QWORD *)this + 10);
  if (v52)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree(v52, a2, a3, a4, a5, a6, a7, a8);
  }
  v53 = *((unsigned int *)this + 19);
  if ((_DWORD)v53)
  {
    v54 = (uint64_t *)*((_QWORD *)this + 8);
    v55 = 8 * v53;
    do
    {
      v56 = *v54;
      *v54 = 0;
      if (v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      ++v54;
      v55 -= 8;
    }
    while (v55);
  }
  v57 = *((_QWORD *)this + 8);
  if (v57)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v57, a2, a3, a4, a5, a6, a7, a8);
  }
  v58 = *((unsigned int *)this + 15);
  if ((_DWORD)v58)
  {
    v70 = (JSC::B3::BasicBlock **)*((_QWORD *)this + 6);
    v71 = 8 * v58;
    do
    {
      v72 = *v70;
      *v70 = 0;
      if (v72)
      {
        JSC::B3::BasicBlock::~BasicBlock(v72, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
      }
      ++v70;
      v71 -= 8;
    }
    while (v71);
  }
  v59 = *((_QWORD *)this + 6);
  if (v59)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v59, a2, a3, a4, a5, a6, a7, a8);
  }
  v60 = *((unsigned int *)this + 11);
  v61 = *((_QWORD *)this + 4);
  if ((_DWORD)v60)
  {
    v65 = 16 * v60;
    do
    {
      v66 = *(_QWORD *)v61;
      if (*(_QWORD *)v61)
      {
        *(_QWORD *)v61 = 0;
        *(_DWORD *)(v61 + 8) = 0;
        WTF::fastFree(v66, a2, a3, a4, a5, a6, a7, a8);
      }
      v61 += 16;
      v65 -= 16;
    }
    while (v65);
    v61 = *((_QWORD *)this + 4);
  }
  if (v61)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v61, a2, a3, a4, a5, a6, a7, a8);
  }
  v62 = *((_QWORD *)this + 2);
  if (v62)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v62, a2, a3, a4, a5, a6, a7, a8);
  }
  v63 = *((unsigned int *)this + 3);
  if ((_DWORD)v63)
  {
    v81 = *(unint64_t **)this;
    v82 = 8 * v63;
    do
    {
      v83 = *v81;
      *v81 = 0;
      if (v83)
        WTF::fastFree(v83, a2, a3, a4, a5, a6, a7, a8);
      ++v81;
      v82 -= 8;
    }
    while (v82);
  }
  v64 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v64, a2, a3, a4, a5, a6, a7, a8);
  }
}

unint64_t *std::unique_ptr<JSC::B3::NaturalLoops>::~unique_ptr[abi:sn180100](unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 312);
    if (v10)
    {
      *(_QWORD *)(v9 + 312) = 0;
      *(_DWORD *)(v9 + 320) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::Vector<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v9 + 8, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v9, v11, v12, v13, v14, v15, v16, v17);
  }
  return a1;
}

uint64_t JSC::B3::Procedure::addBlock(JSC::B3::Procedure *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  WTF *v23;

  v4 = WTF::fastMalloc((WTF *)0x70);
  v5 = v4;
  *(_DWORD *)v4 = *((_DWORD *)this + 15);
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v4 + 40;
  *(_QWORD *)(v4 + 32) = 2;
  *(_QWORD *)(v4 + 56) = v4 + 72;
  *(_QWORD *)(v4 + 64) = 2;
  *(double *)(v4 + 104) = a2;
  v23 = (WTF *)v4;
  v6 = *((unsigned int *)this + 15);
  if ((_DWORD)v6 == *((_DWORD *)this + 14))
  {
    v8 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::B3::BasicBlock>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 48, v6 + 1, (unint64_t)&v23);
    v16 = *((unsigned int *)this + 15);
    v17 = *((_QWORD *)this + 6);
    v18 = *v8;
    *v8 = 0;
    *(_QWORD *)(v17 + 8 * v16) = v18;
    v19 = v23;
    *((_DWORD *)this + 15) = v16 + 1;
    v23 = 0;
    if (v19)
    {
      v20 = *((_QWORD *)v19 + 7);
      if ((WTF *)((char *)v19 + 72) != (WTF *)v20 && v20)
      {
        *((_QWORD *)v19 + 7) = 0;
        *((_DWORD *)v19 + 16) = 0;
        WTF::fastFree(v20, v9, v10, v11, v12, v13, v14, v15);
      }
      v21 = *((_QWORD *)v19 + 3);
      if ((WTF *)((char *)v19 + 40) != (WTF *)v21 && v21)
      {
        *((_QWORD *)v19 + 3) = 0;
        *((_DWORD *)v19 + 8) = 0;
        WTF::fastFree(v21, v9, v10, v11, v12, v13, v14, v15);
      }
      v22 = *((_QWORD *)v19 + 1);
      if (v22)
      {
        *((_QWORD *)v19 + 1) = 0;
        *((_DWORD *)v19 + 4) = 0;
        WTF::fastFree(v22, v9, v10, v11, v12, v13, v14, v15);
      }
      WTF::fastFree((unint64_t)v19, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v6) = v4;
    *((_DWORD *)this + 15) = v6 + 1;
  }
  return v5;
}

unsigned int *JSC::B3::Procedure::addStackSlot(JSC::B3::Procedure *this, unint64_t a2)
{
  return JSC::B3::Air::Code::addStackSlot(*((_QWORD *)this + 20), a2, 0);
}

_DWORD *JSC::B3::Procedure::addVariable(_DWORD *a1, int a2)
{
  WTF *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v13;
  WTF *v15;

  v4 = (WTF *)WTF::fastMalloc((WTF *)8);
  *((_DWORD *)v4 + 1) = a2;
  v15 = v4;
  v12 = JSC::B3::SparseCollection<JSC::B3::Variable>::add(a1, &v15);
  v13 = v15;
  v15 = 0;
  if (v13)
    WTF::fastFree((unint64_t)v13, v5, v6, v7, v8, v9, v10, v11);
  return v12;
}

uint64_t JSC::B3::Procedure::addTuple(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  v4 = (_QWORD *)(a1 + 32);
  v5 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 40))
  {
    v2 = WTF::Vector<WTF::Vector<JSC::B3::Type,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v5 + 1, a2);
    v6 = *(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 44);
  }
  else
  {
    v6 = *v4 + 16 * v5;
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  v7 = *(_QWORD *)v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)v6 = v7;
  LODWORD(v7) = *(_DWORD *)(v2 + 8);
  *(_DWORD *)(v2 + 8) = 0;
  *(_DWORD *)(v6 + 8) = v7;
  LODWORD(v7) = *(_DWORD *)(v2 + 12);
  *(_DWORD *)(v2 + 12) = 0;
  *(_DWORD *)(v6 + 12) = v7;
  ++*(_DWORD *)(a1 + 44);
  return v5 | 0x80000000;
}

uint64_t JSC::B3::Procedure::tupleForType(uint64_t result, int a2)
{
  if ((a2 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(result + 44))
    return *(_QWORD *)(result + 32) + 16 * (a2 & 0x7FFFFFFF);
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Procedure::clone(JSC::B3::Procedure *this, JSC::B3::Value *a2)
{
  uint64_t Space;
  uint64_t casual;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  const void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  __int128 *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  __int128 v76;
  __int128 v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  __int128 v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;

  switch(*((_WORD *)a2 + 6))
  {
    case 0u:
    case 1u:
    case 2u:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
    case 0x23u:
    case 0x24u:
    case 0x25u:
    case 0x26u:
    case 0x27u:
    case 0x28u:
    case 0x29u:
    case 0x2Au:
    case 0x2Bu:
    case 0x2Cu:
    case 0x2Du:
    case 0x2Eu:
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
    case 0x32u:
    case 0x33u:
    case 0x34u:
    case 0x35u:
    case 0x36u:
    case 0x37u:
    case 0x38u:
    case 0x39u:
    case 0x3Au:
    case 0x3Bu:
    case 0x3Cu:
    case 0x3Du:
    case 0x3Eu:
    case 0x4Fu:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Du:
    case 0x9Eu:
    case 0x9Fu:
      Space = JSC::B3::Value::allocateSpace(*((_WORD *)a2 + 6), 40);
      casual = Space;
      *(_QWORD *)Space = off_1E357F5F0;
      v6 = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)(Space + 8) = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)(Space + 24) = v6;
      v7 = 40;
      goto LABEL_12;
    case 3u:
      v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v18)
        goto LABEL_122;
      v19 = (_BYTE *)(v18 + 8672);
      *(_BYTE *)(v18 + 8672) = 1;
      v20 = *(unsigned int *)(v18 + 8688);
      if ((_DWORD)v20)
      {
        *(_DWORD *)(v18 + 8688) = v20 - *(_DWORD *)(v18 + 8692);
        casual = *(_QWORD *)(v18 + 8680) - v20;
        goto LABEL_21;
      }
      v25 = *(_QWORD *)(v18 + 8712);
      v26 = *(_QWORD *)(v18 + 8696);
      if (v25)
        goto LABEL_26;
      if (*(_BYTE *)(v18 + 8677) == 6)
      {
        v112 = *(_DWORD *)(v18 + 8708);
        v113 = *(unsigned int *)(v18 + 8704);
        if (v113 < v112)
        {
          *(_QWORD *)&v19[8 * v113 + 56] = 0;
          v114 = (unint64_t *)(v18 + 8 * v113 + 8736);
          v115 = v112 - 1 - v113;
          while (v115)
          {
            v26 += 1024;
            v117 = *v114++;
            v116 = v117;
            LODWORD(v113) = v113 + 1;
            --v115;
            if (v117)
            {
              v25 = __rbit64(v116);
              *(_DWORD *)(v18 + 8704) = v113;
              *(_QWORD *)(v18 + 8696) = v26;
LABEL_26:
              v27 = __clz(v25);
              *(_QWORD *)(v18 + 8712) = v25 & ~(0x8000000000000000 >> v27);
              casual = v26 + 16 * v27;
LABEL_21:
              *v19 = 0;
              goto LABEL_22;
            }
          }
          *(_DWORD *)(v18 + 8704) = v112;
        }
      }
      *v19 = 0;
LABEL_122:
      casual = bmalloc_allocate_casual(48, 1);
LABEL_22:
      *(_QWORD *)casual = off_1E357F5F0;
      v21 = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)(casual + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)(casual + 8) = v21;
      *(_QWORD *)casual = off_1E357D8E0;
      *(_DWORD *)(casual + 40) = *((_DWORD *)a2 + 10);
      goto LABEL_10;
    case 4u:
      v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v9)
        goto LABEL_113;
      v10 = (_BYTE *)(v9 + 8672);
      *(_BYTE *)(v9 + 8672) = 1;
      v11 = *(unsigned int *)(v9 + 8688);
      if ((_DWORD)v11)
      {
        *(_DWORD *)(v9 + 8688) = v11 - *(_DWORD *)(v9 + 8692);
        casual = *(_QWORD *)(v9 + 8680) - v11;
        goto LABEL_7;
      }
      v22 = *(_QWORD *)(v9 + 8712);
      v23 = *(_QWORD *)(v9 + 8696);
      if (v22)
        goto LABEL_24;
      if (*(_BYTE *)(v9 + 8677) == 6)
      {
        v106 = *(_DWORD *)(v9 + 8708);
        v107 = *(unsigned int *)(v9 + 8704);
        if (v107 < v106)
        {
          *(_QWORD *)&v10[8 * v107 + 56] = 0;
          v108 = (unint64_t *)(v9 + 8 * v107 + 8736);
          v109 = v106 - 1 - v107;
          while (v109)
          {
            v23 += 1024;
            v111 = *v108++;
            v110 = v111;
            LODWORD(v107) = v107 + 1;
            --v109;
            if (v111)
            {
              v22 = __rbit64(v110);
              *(_DWORD *)(v9 + 8704) = v107;
              *(_QWORD *)(v9 + 8696) = v23;
LABEL_24:
              v24 = __clz(v22);
              *(_QWORD *)(v9 + 8712) = v22 & ~(0x8000000000000000 >> v24);
              casual = v23 + 16 * v24;
LABEL_7:
              *v10 = 0;
              goto LABEL_8;
            }
          }
          *(_DWORD *)(v9 + 8704) = v106;
        }
      }
      *v10 = 0;
LABEL_113:
      casual = bmalloc_allocate_casual(48, 1);
LABEL_8:
      *(_QWORD *)casual = off_1E357F5F0;
      v12 = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)(casual + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)(casual + 8) = v12;
      goto LABEL_9;
    case 5u:
      v87 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v87)
        goto LABEL_159;
      v88 = (_BYTE *)(v87 + 8672);
      *(_BYTE *)(v87 + 8672) = 1;
      v89 = *(unsigned int *)(v87 + 8688);
      if ((_DWORD)v89)
      {
        *(_DWORD *)(v87 + 8688) = v89 - *(_DWORD *)(v87 + 8692);
        casual = *(_QWORD *)(v87 + 8680) - v89;
        goto LABEL_81;
      }
      v94 = *(_QWORD *)(v87 + 8712);
      v95 = *(_QWORD *)(v87 + 8696);
      if (v94)
        goto LABEL_86;
      if (*(_BYTE *)(v87 + 8677) == 6)
      {
        v130 = *(_DWORD *)(v87 + 8708);
        v131 = *(unsigned int *)(v87 + 8704);
        if (v131 < v130)
        {
          *(_QWORD *)&v88[8 * v131 + 56] = 0;
          v132 = (unint64_t *)(v87 + 8 * v131 + 8736);
          v133 = v130 - 1 - v131;
          while (v133)
          {
            v95 += 1024;
            v135 = *v132++;
            v134 = v135;
            LODWORD(v131) = v131 + 1;
            --v133;
            if (v135)
            {
              v94 = __rbit64(v134);
              *(_DWORD *)(v87 + 8704) = v131;
              *(_QWORD *)(v87 + 8696) = v95;
LABEL_86:
              v96 = __clz(v94);
              *(_QWORD *)(v87 + 8712) = v94 & ~(0x8000000000000000 >> v96);
              casual = v95 + 16 * v96;
LABEL_81:
              *v88 = 0;
              goto LABEL_82;
            }
          }
          *(_DWORD *)(v87 + 8704) = v130;
        }
      }
      *v88 = 0;
LABEL_159:
      casual = bmalloc_allocate_casual(48, 1);
LABEL_82:
      *(_QWORD *)casual = off_1E357F5F0;
      v90 = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)(casual + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)(casual + 8) = v90;
      *(_QWORD *)casual = off_1E357DC30;
      *(_QWORD *)(casual + 40) = *((_QWORD *)a2 + 5);
      goto LABEL_10;
    case 6u:
      v105 = JSC::B3::Value::allocate<JSC::B3::ConstFloatValue>((uint64_t)a2);
      goto LABEL_95;
    case 7u:
      v105 = JSC::B3::Value::allocate<JSC::B3::Const128Value>((uint64_t)a2);
      goto LABEL_95;
    case 8u:
      v105 = JSC::B3::Value::allocate<JSC::B3::BottomTupleValue>((uint64_t)a2);
      goto LABEL_95;
    case 9u:
    case 0xAu:
      Space = JSC::B3::Value::allocateSpace(*((_WORD *)a2 + 6), 48);
      casual = Space;
      *(_QWORD *)Space = off_1E357F5F0;
      v8 = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)(Space + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)(Space + 8) = v8;
      *(_QWORD *)Space = off_1E357F0F8;
      *(_QWORD *)(Space + 40) = *((_QWORD *)a2 + 5);
      goto LABEL_11;
    case 0xBu:
      v105 = JSC::B3::Value::allocate<JSC::B3::SlotBaseValue>((uint64_t)a2);
      goto LABEL_95;
    case 0xCu:
      v105 = JSC::B3::Value::allocate<JSC::B3::ArgumentRegValue>((uint64_t)a2);
      goto LABEL_95;
    case 0x3Fu:
    case 0x40u:
    case 0x41u:
    case 0x42u:
    case 0x43u:
    case 0x44u:
    case 0x45u:
    case 0x46u:
      Space = JSC::B3::Value::allocateSpace(*((_WORD *)a2 + 6), 64);
      casual = Space;
      *(_QWORD *)Space = off_1E357F5F0;
      v60 = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)(Space + 8) = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)(Space + 24) = v60;
      *(_QWORD *)Space = off_1E357E4C8;
      v61 = *((_DWORD *)a2 + 14);
      *(_OWORD *)(Space + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_DWORD *)(Space + 56) = v61;
      goto LABEL_53;
    case 0x47u:
    case 0x48u:
    case 0x49u:
    case 0x4Au:
    case 0x4Bu:
    case 0x4Cu:
    case 0x4Du:
    case 0x4Eu:
      v105 = JSC::B3::Value::allocate<JSC::B3::AtomicValue>((uint64_t)a2);
      goto LABEL_95;
    case 0x50u:
      v105 = JSC::B3::Value::allocate<JSC::B3::WasmAddressValue>((uint64_t)a2);
      goto LABEL_95;
    case 0x51u:
      v105 = JSC::B3::Value::allocate<JSC::B3::FenceValue>((uint64_t)a2);
      goto LABEL_95;
    case 0x52u:
      v97 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v97)
        goto LABEL_162;
      v98 = (_BYTE *)(v97 + 9408);
      *(_BYTE *)(v97 + 9408) = 1;
      v99 = *(unsigned int *)(v97 + 9424);
      if ((_DWORD)v99)
      {
        *(_DWORD *)(v97 + 9424) = v99 - *(_DWORD *)(v97 + 9428);
        casual = *(_QWORD *)(v97 + 9416) - v99;
        goto LABEL_90;
      }
      v102 = *(_QWORD *)(v97 + 9448);
      v103 = *(_QWORD *)(v97 + 9432);
      if (v102)
        goto LABEL_93;
      if (*(_BYTE *)(v97 + 9413) == 6)
      {
        v136 = *(_DWORD *)(v97 + 9444);
        v137 = *(unsigned int *)(v97 + 9440);
        if (v137 < v136)
        {
          *(_QWORD *)&v98[8 * v137 + 56] = 0;
          v138 = (unint64_t *)(v97 + 8 * v137 + 9472);
          v139 = v136 - 1 - v137;
          while (v139)
          {
            v103 += 1024;
            v141 = *v138++;
            v140 = v141;
            LODWORD(v137) = v137 + 1;
            --v139;
            if (v141)
            {
              v102 = __rbit64(v140);
              *(_DWORD *)(v97 + 9440) = v137;
              *(_QWORD *)(v97 + 9432) = v103;
LABEL_93:
              v104 = __clz(v102);
              *(_QWORD *)(v97 + 9448) = v102 & ~(0x8000000000000000 >> v104);
              casual = v103 + 16 * v104;
LABEL_90:
              *v98 = 0;
              goto LABEL_91;
            }
          }
          *(_DWORD *)(v97 + 9440) = v136;
        }
      }
      *v98 = 0;
LABEL_162:
      casual = bmalloc_allocate_casual(104, 1);
LABEL_91:
      *(_QWORD *)casual = off_1E357F5F0;
      v100 = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)(casual + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)(casual + 8) = v100;
      *(_QWORD *)casual = &unk_1E357CF78;
      v101 = *(_OWORD *)((char *)a2 + 40);
      *(_QWORD *)(casual + 56) = *((_QWORD *)a2 + 7);
      *(_OWORD *)(casual + 40) = v101;
      Space = casual;
LABEL_53:
      v7 = 64;
      goto LABEL_12;
    case 0x53u:
      casual = JSC::B3::Value::allocateSpace(83, 176);
      *(_QWORD *)casual = off_1E357F5F0;
      v28 = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)(casual + 8) = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)(casual + 24) = v28;
      *(_QWORD *)casual = off_1E357EF48;
      v29 = *((unsigned int *)a2 + 13);
      *(_QWORD *)(casual + 40) = 0;
      *(_QWORD *)(casual + 48) = 0;
      *(_DWORD *)(casual + 52) = v29;
      if ((_DWORD)v29)
      {
        if (v29 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x197FE2B3CLL);
        }
        v30 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v29));
        *(_DWORD *)(casual + 48) = v29;
        *(_QWORD *)(casual + 40) = v30;
        v31 = *((unsigned int *)a2 + 13);
        if ((_DWORD)v31)
        {
          v32 = (__int128 *)*((_QWORD *)a2 + 5);
          v33 = 16 * v31;
          do
          {
            v34 = *v32++;
            *v30++ = v34;
            v33 -= 16;
          }
          while (v33);
        }
      }
      v35 = *((_QWORD *)a2 + 7);
      if (v35)
      {
        v36 = (unsigned int *)(v35 + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 + 1, v36));
      }
      *(_QWORD *)(casual + 56) = v35;
      v38 = *((_OWORD *)a2 + 4);
      v39 = *((_OWORD *)a2 + 6);
      *(_OWORD *)(casual + 80) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(casual + 96) = v39;
      *(_OWORD *)(casual + 64) = v38;
      *(_QWORD *)casual = off_1E357E700;
      v40 = *((_QWORD *)a2 + 16);
      *(_OWORD *)(casual + 112) = *((_OWORD *)a2 + 7);
      v41 = (_OWORD *)(casual + 152);
      *(_QWORD *)(casual + 128) = v40;
      v42 = *((unsigned int *)a2 + 37);
      *(_QWORD *)(casual + 136) = casual + 152;
      *(_DWORD *)(casual + 144) = 1;
      *(_DWORD *)(casual + 148) = v42;
      if (v42 >= 2)
      {
        if (v42 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x197FE2B5CLL);
        }
        v41 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v42));
        *(_DWORD *)(casual + 144) = v42;
        *(_QWORD *)(casual + 136) = v41;
      }
      v43 = *((unsigned int *)a2 + 37);
      if ((_DWORD)v43)
      {
        v44 = (__int128 *)*((_QWORD *)a2 + 17);
        v45 = 16 * v43;
        do
        {
          v46 = *v44++;
          *v41++ = v46;
          v45 -= 16;
        }
        while (v45);
      }
      *(_WORD *)(casual + 168) = *((_WORD *)a2 + 84);
      Space = casual;
      v7 = 176;
      goto LABEL_12;
    case 0x54u:
      v105 = JSC::B3::Value::allocate<JSC::B3::ExtractValue>((uint64_t)a2);
      goto LABEL_95;
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
      casual = JSC::B3::Value::allocateSpace(*((_WORD *)a2 + 6), 112);
      *(_QWORD *)casual = off_1E357F5F0;
      v66 = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)(casual + 8) = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)(casual + 24) = v66;
      *(_QWORD *)casual = off_1E357EF48;
      v67 = *((unsigned int *)a2 + 13);
      *(_QWORD *)(casual + 40) = 0;
      *(_QWORD *)(casual + 48) = 0;
      *(_DWORD *)(casual + 52) = v67;
      if ((_DWORD)v67)
      {
        if (v67 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x197FE2B4CLL);
        }
        v68 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v67));
        *(_DWORD *)(casual + 48) = v67;
        *(_QWORD *)(casual + 40) = v68;
        v69 = *((unsigned int *)a2 + 13);
        if ((_DWORD)v69)
        {
          v70 = (__int128 *)*((_QWORD *)a2 + 5);
          v71 = 16 * v69;
          do
          {
            v72 = *v70++;
            *v68++ = v72;
            v71 -= 16;
          }
          while (v71);
        }
      }
      v73 = *((_QWORD *)a2 + 7);
      if (v73)
      {
        v74 = (unsigned int *)(v73 + 8);
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 + 1, v74));
      }
      *(_QWORD *)(casual + 56) = v73;
      v76 = *((_OWORD *)a2 + 4);
      v77 = *((_OWORD *)a2 + 6);
      *(_OWORD *)(casual + 80) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(casual + 96) = v77;
      *(_OWORD *)(casual + 64) = v76;
      *(_QWORD *)casual = off_1E357D550;
      Space = casual;
      v7 = 112;
      goto LABEL_12;
    case 0x59u:
      v105 = JSC::B3::Value::allocate<JSC::B3::WasmBoundsCheckValue>((uint64_t)a2);
      goto LABEL_95;
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x5Du:
    case 0x5Eu:
    case 0x5Fu:
    case 0x60u:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
    case 0x65u:
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x74u:
    case 0x75u:
    case 0x76u:
    case 0x77u:
    case 0x78u:
    case 0x79u:
    case 0x7Au:
    case 0x7Bu:
    case 0x7Cu:
    case 0x7Du:
    case 0x7Eu:
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x82u:
    case 0x83u:
    case 0x84u:
    case 0x85u:
    case 0x86u:
    case 0x87u:
    case 0x88u:
    case 0x89u:
    case 0x8Au:
    case 0x8Bu:
    case 0x8Cu:
    case 0x8Du:
    case 0x8Eu:
    case 0x8Fu:
    case 0x90u:
    case 0x91u:
    case 0x92u:
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
      v105 = JSC::B3::Value::allocate<JSC::B3::SIMDValue>((uint64_t)a2);
LABEL_95:
      casual = v105;
      goto LABEL_13;
    case 0x98u:
      v62 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v62)
        goto LABEL_141;
      v63 = (_BYTE *)(v62 + 8856);
      *(_BYTE *)(v62 + 8856) = 1;
      v64 = *(unsigned int *)(v62 + 8872);
      if ((_DWORD)v64)
      {
        *(_DWORD *)(v62 + 8872) = v64 - *(_DWORD *)(v62 + 8876);
        casual = *(_QWORD *)(v62 + 8864) - v64;
        goto LABEL_57;
      }
      v78 = *(_QWORD *)(v62 + 8896);
      v79 = *(_QWORD *)(v62 + 8880);
      if (v78)
        goto LABEL_69;
      if (*(_BYTE *)(v62 + 8861) == 6)
      {
        v118 = *(_DWORD *)(v62 + 8892);
        v119 = *(unsigned int *)(v62 + 8888);
        if (v119 < v118)
        {
          *(_QWORD *)&v63[8 * v119 + 56] = 0;
          v120 = (unint64_t *)(v62 + 8 * v119 + 8920);
          v121 = v118 - 1 - v119;
          while (v121)
          {
            v79 += 1024;
            v123 = *v120++;
            v122 = v123;
            LODWORD(v119) = v119 + 1;
            --v121;
            if (v123)
            {
              v78 = __rbit64(v122);
              *(_DWORD *)(v62 + 8888) = v119;
              *(_QWORD *)(v62 + 8880) = v79;
LABEL_69:
              v80 = __clz(v78);
              *(_QWORD *)(v62 + 8896) = v78 & ~(0x8000000000000000 >> v80);
              casual = v79 + 16 * v80;
LABEL_57:
              *v63 = 0;
              goto LABEL_58;
            }
          }
          *(_DWORD *)(v62 + 8888) = v118;
        }
      }
      *v63 = 0;
LABEL_141:
      casual = bmalloc_allocate_casual(56, 1);
LABEL_58:
      *(_QWORD *)casual = off_1E357F5F0;
      v65 = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)(casual + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)(casual + 8) = v65;
LABEL_9:
      *(_QWORD *)casual = v13 + 16;
      *(_QWORD *)(casual + 40) = *((_QWORD *)a2 + 5);
LABEL_10:
      Space = casual;
LABEL_11:
      v7 = 48;
      goto LABEL_12;
    case 0x9Cu:
      v81 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
      if (!v81)
        goto LABEL_156;
      v82 = (_BYTE *)(v81 + 8856);
      *(_BYTE *)(v81 + 8856) = 1;
      v83 = *(unsigned int *)(v81 + 8872);
      if ((_DWORD)v83)
      {
        *(_DWORD *)(v81 + 8872) = v83 - *(_DWORD *)(v81 + 8876);
        casual = *(_QWORD *)(v81 + 8864) - v83;
        goto LABEL_73;
      }
      v91 = *(_QWORD *)(v81 + 8896);
      v92 = *(_QWORD *)(v81 + 8880);
      if (v91)
        goto LABEL_84;
      if (*(_BYTE *)(v81 + 8861) == 6)
      {
        v124 = *(_DWORD *)(v81 + 8892);
        v125 = *(unsigned int *)(v81 + 8888);
        if (v125 < v124)
        {
          *(_QWORD *)&v82[8 * v125 + 56] = 0;
          v126 = (unint64_t *)(v81 + 8 * v125 + 8920);
          v127 = v124 - 1 - v125;
          while (v127)
          {
            v92 += 1024;
            v129 = *v126++;
            v128 = v129;
            LODWORD(v125) = v125 + 1;
            --v127;
            if (v129)
            {
              v91 = __rbit64(v128);
              *(_DWORD *)(v81 + 8888) = v125;
              *(_QWORD *)(v81 + 8880) = v92;
LABEL_84:
              v93 = __clz(v91);
              *(_QWORD *)(v81 + 8896) = v91 & ~(0x8000000000000000 >> v93);
              casual = v92 + 16 * v93;
LABEL_73:
              *v82 = 0;
              goto LABEL_74;
            }
          }
          *(_DWORD *)(v81 + 8888) = v124;
        }
      }
      *v82 = 0;
LABEL_156:
      casual = bmalloc_allocate_casual(64, 1);
LABEL_74:
      *(_QWORD *)casual = off_1E357F5F0;
      v84 = *(_OWORD *)((char *)a2 + 8);
      *(_OWORD *)(casual + 24) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)(casual + 8) = v84;
      *(_QWORD *)casual = off_1E357EBF8;
      v85 = *((unsigned int *)a2 + 13);
      *(_QWORD *)(casual + 40) = 0;
      *(_QWORD *)(casual + 48) = 0;
      *(_DWORD *)(casual + 52) = v85;
      if ((_DWORD)v85)
      {
        if (v85 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x197FE2B54);
        }
        v86 = (void *)WTF::fastMalloc((WTF *)(8 * v85));
        *(_DWORD *)(casual + 48) = v85;
        *(_QWORD *)(casual + 40) = v86;
        memcpy(v86, *((const void **)a2 + 5), 8 * *((unsigned int *)a2 + 13));
      }
      Space = casual;
      v7 = 56;
LABEL_12:
      JSC::B3::Value::buildAdjacencyList((_QWORD *)Space, v7, a2);
LABEL_13:
      *(_DWORD *)(casual + 8) = -1;
      *(_QWORD *)(casual + 32) = 0;
      v14 = *((unsigned int *)this + 23);
      if ((_DWORD)v14)
      {
        v15 = *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v14 - 8);
        *((_DWORD *)this + 23) = v14 - 1;
        v16 = *((_QWORD *)this + 8);
      }
      else
      {
        v15 = *((unsigned int *)this + 19);
        if ((_DWORD)v15 == *((_DWORD *)this + 18))
        {
          v47 = v15 + (v15 >> 2);
          if (v47 >= 0x10)
            v48 = v47 + 1;
          else
            v48 = 16;
          if (v48 <= v15 + 1)
            v49 = v15 + 1;
          else
            v49 = v48;
          if (v49 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x197FE2B44);
          }
          v50 = (const void *)*((_QWORD *)this + 8);
          v51 = (void *)WTF::fastMalloc((WTF *)(8 * v49));
          *((_DWORD *)this + 18) = v49;
          *((_QWORD *)this + 8) = v51;
          memcpy(v51, v50, 8 * v15);
          if (v50)
          {
            if (*((const void **)this + 8) == v50)
            {
              *((_QWORD *)this + 8) = 0;
              *((_DWORD *)this + 18) = 0;
            }
            WTF::fastFree((unint64_t)v50, v52, v53, v54, v55, v56, v57, v58);
          }
          v59 = *((unsigned int *)this + 19);
          v16 = *((_QWORD *)this + 8);
          *(_QWORD *)(v16 + 8 * v59) = 0;
          *((_DWORD *)this + 19) = v59 + 1;
        }
        else
        {
          v16 = *((_QWORD *)this + 8);
          *(_QWORD *)(v16 + 8 * v15) = 0;
          *((_DWORD *)this + 19) = v15 + 1;
        }
      }
      *(_DWORD *)(casual + 8) = v15;
      *(_QWORD *)(v16 + 8 * v15) = casual;
      return casual;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FE29A4);
  }
}

uint64_t JSC::B3::Procedure::addIntConstant(JSC::B3::Value *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t result;

  if (a3 >= 0x80000000)
    v4 = 0x80000000;
  else
    v4 = a3;
  switch(v4)
  {
    case 1u:
      return JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)a1, a2, a4);
    case 2u:
      return JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>((uint64_t)a1, a2, a4);
    case 3u:
      return (uint64_t)JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a1, a2, (float)a4);
    case 4u:
      return JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)a1, a2, (double)a4);
  }
  result = 129;
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Procedure::addIntConstant(JSC::B3::Procedure *this, JSC::B3::Value *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_DWORD *)a2 + 4);
  if (v5 >= 0x80000000)
    v5 = 0x80000000;
  switch(v5)
  {
    case 1u:
      return JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)this, v4, a3);
    case 2u:
      return JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>((uint64_t)this, v4, a3);
    case 3u:
      return (uint64_t)JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(this, v4, (float)a3);
    case 4u:
      return JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)this, v4, (double)a3);
  }
  result = 129;
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Procedure::addConstant(JSC::B3::Value *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t result;

  if (a3 >= 0x80000000)
    v4 = 0x80000000;
  else
    v4 = a3;
  if (v4 == 1)
    return JSC::B3::Procedure::add<JSC::B3::Const32Value,JSC::B3::Origin,int>((uint64_t)a1, a2, a4);
  switch(v4)
  {
    case 2u:
      result = JSC::B3::Procedure::add<JSC::B3::Const64Value,JSC::B3::Origin,long long>((uint64_t)a1, a2, a4);
      break;
    case 3u:
      result = (uint64_t)JSC::B3::Procedure::add<JSC::B3::ConstFloatValue,JSC::B3::Origin,float>(a1, a2, *(float *)&a4);
      break;
    case 4u:
      result = JSC::B3::Procedure::add<JSC::B3::ConstDoubleValue,JSC::B3::Origin,double>((uint64_t)a1, a2, *(double *)&a4);
      break;
    case 5u:
      if (a4)
      {
        __break(0xC471u);
        JUMPOUT(0x197FE2F60);
      }
      result = JSC::B3::Procedure::addConstant((uint64_t)a1, a2, a3, 0, 0);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197FE2F30);
  }
  return result;
}

uint64_t JSC::B3::Procedure::addConstant(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t result;

  if (a3 >= 0x80000000)
    v5 = 0x80000000;
  else
    v5 = a3;
  if (v5 == 5)
    return JSC::B3::Procedure::add<JSC::B3::Const128Value,JSC::B3::Origin,JSC::v128_u>(a1, a2, a4, a5);
  result = 165;
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Procedure::add<JSC::B3::Const128Value,JSC::B3::Origin,JSC::v128_u>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  result = WTF::fastMalloc((WTF *)0x38);
  v9 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 7;
  *(_DWORD *)(result + 16) = 5;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = off_1E357D6F8;
  *(_QWORD *)(result + 40) = a3;
  *(_QWORD *)(result + 48) = a4;
  v10 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v10 - 8);
    *(_DWORD *)(a1 + 92) = v10 - 1;
    v12 = *(_QWORD *)(a1 + 64);
    goto LABEL_5;
  }
  v11 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v11 != *(_DWORD *)(a1 + 72))
  {
    v12 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v12 + 8 * v11) = 0;
    *(_DWORD *)(a1 + 76) = v11 + 1;
LABEL_5:
    *(_DWORD *)(v9 + 8) = v11;
    *(_QWORD *)(v12 + 8 * v11) = v9;
    return v9;
  }
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v11 + 1)
    v15 = v11 + 1;
  else
    v15 = v14;
  if (!(v15 >> 29))
  {
    v16 = *(const void **)(a1 + 64);
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 64) = v17;
    memcpy(v17, v16, 8 * v11);
    if (v16)
    {
      if (*(const void **)(a1 + 64) == v16)
      {
        *(_QWORD *)(a1 + 64) = 0;
        *(_DWORD *)(a1 + 72) = 0;
      }
      WTF::fastFree((unint64_t)v16, v18, v19, v20, v21, v22, v23, v24);
    }
    v25 = *(unsigned int *)(a1 + 76);
    v12 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v12 + 8 * v25) = 0;
    *(_DWORD *)(a1 + 76) = v25 + 1;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::B3::Procedure::addBottom(JSC::B3::Value *a1, uint64_t a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0)
    return JSC::B3::Procedure::add<JSC::B3::BottomTupleValue,JSC::B3::Origin,JSC::B3::Type>((uint64_t)a1, a2, a3);
  else
    return JSC::B3::Procedure::addConstant(a1, a2, a3, 0);
}

uint64_t JSC::B3::Procedure::add<JSC::B3::BottomTupleValue,JSC::B3::Origin,JSC::B3::Type>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  result = WTF::fastMalloc((WTF *)0x30);
  v7 = result;
  *(_DWORD *)(result + 8) = -1;
  *(_WORD *)(result + 12) = 8;
  *(_DWORD *)(result + 16) = a3;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)result = &unk_1E357D120;
  v8 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v8 - 8);
    *(_DWORD *)(a1 + 92) = v8 - 1;
    v10 = *(_QWORD *)(a1 + 64);
    goto LABEL_5;
  }
  v9 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v9 != *(_DWORD *)(a1 + 72))
  {
    v10 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v10 + 8 * v9) = 0;
    *(_DWORD *)(a1 + 76) = v9 + 1;
LABEL_5:
    *(_DWORD *)(v7 + 8) = v9;
    *(_QWORD *)(v10 + 8 * v9) = v7;
    return v7;
  }
  v11 = v9 + (v9 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= v9 + 1)
    v13 = v9 + 1;
  else
    v13 = v12;
  if (!(v13 >> 29))
  {
    v14 = *(const void **)(a1 + 64);
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *(_DWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 64) = v15;
    memcpy(v15, v14, 8 * v9);
    if (v14)
    {
      if (*(const void **)(a1 + 64) == v14)
      {
        *(_QWORD *)(a1 + 64) = 0;
        *(_DWORD *)(a1 + 72) = 0;
      }
      WTF::fastFree((unint64_t)v14, v16, v17, v18, v19, v20, v21, v22);
    }
    v23 = *(unsigned int *)(a1 + 76);
    v10 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(v10 + 8 * v23) = 0;
    *(_DWORD *)(a1 + 76) = v23 + 1;
    goto LABEL_5;
  }
  __break(0xC471u);
  return result;
}

void JSC::B3::Procedure::resetReachability(JSC::B3::Procedure *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v53;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  const void *v59;
  void *v60;

  v8 = *((unsigned int *)this + 15);
  if (!(_DWORD)v8)
  {
    __break(0xC471u);
    JUMPOUT(0x197FE33DCLL);
  }
  v10 = 0;
  v11 = (uint64_t *)*((_QWORD *)this + 6);
  v12 = 8 * v8;
  do
  {
    v13 = v11[v10 / 8];
    if (v13)
      *(_DWORD *)(v13 + 36) = 0;
    v10 += 8;
  }
  while (v12 != v10);
  JSC::B3::updatePredecessorsAfter<JSC::B3::BasicBlock>(*v11, a2, a3, a4, a5, a6, a7, a8);
  v21 = *((unsigned int *)this + 15);
  if (!(_DWORD)v21)
    return;
  v22 = 0;
  v23 = (unint64_t *)*((_QWORD *)this + 6);
  v24 = &v23[v21];
  while (1)
  {
    v25 = (_DWORD *)v23[v22];
    if (v25)
    {
      if (*v25 && !v25[9])
        break;
    }
    if (v21 == ++v22)
      return;
  }
  v26 = 0;
  while (!v23[v26])
  {
    if (v21 == ++v26)
      goto LABEL_27;
  }
  while ((_DWORD)v21 != (_DWORD)v26)
  {
    if (v21 <= v26)
    {
LABEL_93:
      __break(0xC471u);
      JUMPOUT(0x197FE33D4);
    }
    v27 = v23[v26];
    v28 = *(unsigned int *)(v27 + 20);
    if ((_DWORD)v28)
    {
      v29 = *(uint64_t **)(v27 + 8);
      v30 = 8 * v28;
      do
      {
        v31 = *v29++;
        *(_QWORD *)(v31 + 32) = v27;
        v30 -= 8;
      }
      while (v30);
    }
    v26 = (v26 + 1);
    if (v21 > v26)
    {
      while (!v23[v26])
      {
        if (v21 == ++v26)
          goto LABEL_27;
      }
    }
  }
LABEL_27:
  v32 = *((unsigned int *)this + 19);
  if (!(_DWORD)v32)
    goto LABEL_100;
  v33 = 0;
  while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v33))
  {
    if (v32 == ++v33)
      goto LABEL_50;
  }
  if ((_DWORD)v32 == (_DWORD)v33)
  {
LABEL_100:
    while (1)
    {
LABEL_50:
      v41 = *v23;
      if (*v23 && *(_DWORD *)v41 && !*(_DWORD *)(v41 + 36))
      {
        v42 = *(unsigned int *)(v41 + 20);
        if ((_DWORD)v42)
        {
          v43 = *(uint64_t **)(v41 + 8);
          v44 = 8 * v42;
          do
          {
            v45 = *v43;
            v46 = *(unsigned int *)(*v43 + 8);
            v47 = *((_QWORD *)this + 8);
            if (*(_QWORD *)(v47 + 8 * v46) != *v43)
            {
              __break(0xC471u);
              JUMPOUT(0x197FE364CLL);
            }
            v48 = *((unsigned int *)this + 23);
            if ((_DWORD)v48 == *((_DWORD *)this + 22))
            {
              v56 = v48 + (v48 >> 2);
              if (v56 >= 0x10)
                v57 = v56 + 1;
              else
                v57 = 16;
              if (v57 <= v48 + 1)
                v58 = v48 + 1;
              else
                v58 = v57;
              if (v58 >> 29)
                goto LABEL_93;
              v59 = (const void *)*((_QWORD *)this + 10);
              v60 = (void *)WTF::fastMalloc((WTF *)(8 * v58));
              *((_DWORD *)this + 22) = v58;
              *((_QWORD *)this + 10) = v60;
              memcpy(v60, v59, 8 * v48);
              if (v59)
              {
                if (*((const void **)this + 10) == v59)
                {
                  *((_QWORD *)this + 10) = 0;
                  *((_DWORD *)this + 22) = 0;
                }
                WTF::fastFree((unint64_t)v59, v14, v15, v16, v17, v18, v19, v20);
              }
              v48 = *((unsigned int *)this + 23);
              *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v48) = *(unsigned int *)(v45 + 8);
              v47 = *((_QWORD *)this + 8);
            }
            else
            {
              *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v48) = v46;
            }
            *((_DWORD *)this + 23) = v48 + 1;
            v49 = *(unsigned int *)(v45 + 8);
            v50 = *(_QWORD *)(v47 + 8 * v49);
            *(_QWORD *)(v47 + 8 * v49) = 0;
            if (v50)
              (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
            ++v43;
            v44 -= 8;
          }
          while (v44);
          v41 = *v23;
          *v23 = 0;
          if (!v41)
            goto LABEL_53;
        }
        else
        {
          *v23 = 0;
        }
        v51 = *(_QWORD *)(v41 + 56);
        if (v41 + 72 != v51 && v51 != 0)
        {
          *(_QWORD *)(v41 + 56) = 0;
          *(_DWORD *)(v41 + 64) = 0;
          WTF::fastFree(v51, v14, v15, v16, v17, v18, v19, v20);
        }
        v53 = *(_QWORD *)(v41 + 24);
        if (v41 + 40 != v53 && v53 != 0)
        {
          *(_QWORD *)(v41 + 24) = 0;
          *(_DWORD *)(v41 + 32) = 0;
          WTF::fastFree(v53, v14, v15, v16, v17, v18, v19, v20);
        }
        v55 = *(_QWORD *)(v41 + 8);
        if (v55)
        {
          *(_QWORD *)(v41 + 8) = 0;
          *(_DWORD *)(v41 + 16) = 0;
          WTF::fastFree(v55, v14, v15, v16, v17, v18, v19, v20);
        }
        WTF::fastFree(v41, v14, v15, v16, v17, v18, v19, v20);
      }
LABEL_53:
      if (++v23 == v24)
        return;
    }
  }
  v34 = *((_DWORD *)this + 19);
  LODWORD(v35) = v33;
  do
  {
    v36 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v35);
    if (v36)
    {
      if ((*(_WORD *)(v36 + 12) & 0xFFF) == 0x98)
      {
        v37 = *(_DWORD **)(*(_QWORD *)(v36 + 40) + 32);
        if (v37)
        {
          if (*v37 && !v37[9])
          {
            if (*(_DWORD *)(v36 + 16))
            {
              __break(0xC471u);
              JUMPOUT(0x197FE366CLL);
            }
            v38 = *(_QWORD *)(v36 + 32);
            v39 = *(_DWORD *)(v36 + 8);
            (**(void (***)(uint64_t))v36)(v36);
            *(_QWORD *)v36 = off_1E357F5F0;
            *(_WORD *)(v36 + 12) = 0;
            *(_DWORD *)(v36 + 16) = 0;
            *(_BYTE *)(v36 + 20) = 0;
            *(_DWORD *)(v36 + 8) = v39;
            *(_QWORD *)(v36 + 32) = v38;
            v34 = *((_DWORD *)this + 19);
          }
        }
      }
    }
    v35 = (v35 + 1);
    if (v34 > v35)
    {
      while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v35))
      {
        if (v34 == ++v35)
        {
          LODWORD(v35) = v34;
          break;
        }
      }
    }
  }
  while ((_DWORD)v32 != (_DWORD)v35);
  v40 = *((unsigned int *)this + 15);
  if ((_DWORD)v40)
  {
    v23 = (unint64_t *)*((_QWORD *)this + 6);
    v24 = &v23[v40];
    goto LABEL_50;
  }
}

uint64_t JSC::B3::Procedure::deleteValue(JSC::B3::Procedure *this, JSC::B3::Value *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *((unsigned int *)a2 + 2);
  v3 = *((_QWORD *)this + 8);
  if (*(JSC::B3::Value **)(v3 + 8 * v2) != a2)
    goto LABEL_19;
  v6 = *((unsigned int *)this + 23);
  if ((_DWORD)v6 != *((_DWORD *)this + 22))
  {
    *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v6) = v2;
    goto LABEL_4;
  }
  v9 = v6 + (v6 >> 2);
  v10 = v9 >= 0x10 ? v9 + 1 : 16;
  v11 = v10 <= v6 + 1 ? v6 + 1 : v10;
  if (v11 >> 29)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x197FE37A0);
  }
  v12 = (const void *)*((_QWORD *)this + 10);
  v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
  *((_DWORD *)this + 22) = v11;
  *((_QWORD *)this + 10) = v13;
  memcpy(v13, v12, 8 * v6);
  if (v12)
  {
    if (*((const void **)this + 10) == v12)
    {
      *((_QWORD *)this + 10) = 0;
      *((_DWORD *)this + 22) = 0;
    }
    WTF::fastFree((unint64_t)v12, v14, v15, v16, v17, v18, v19, v20);
  }
  v6 = *((unsigned int *)this + 23);
  *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v6) = *((unsigned int *)a2 + 2);
  v3 = *((_QWORD *)this + 8);
LABEL_4:
  *((_DWORD *)this + 23) = v6 + 1;
  v7 = *((unsigned int *)a2 + 2);
  result = *(_QWORD *)(v3 + 8 * v7);
  *(_QWORD *)(v3 + 8 * v7) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void JSC::B3::Procedure::invalidateCFG(JSC::B3::Procedure *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t StatusReg;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v9 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (!v9)
    goto LABEL_15;
  v10 = *(unsigned int *)(v9 + 20);
  v11 = *(_QWORD *)(v9 + 8);
  if (!(_DWORD)v10)
    goto LABEL_12;
  v12 = 32 * v10;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    a2 = *(_QWORD *)v11;
    if (!*(_QWORD *)v11)
      goto LABEL_5;
    *(_QWORD *)v11 = 0;
    *(_DWORD *)(v11 + 8) = 0;
    v14 = *(_QWORD *)(StatusReg + 752);
    if (v14)
    {
      if (a2 >> 43
        || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) == 0)
      {
        if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
        {
          a4 = 0;
LABEL_44:
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v14, a2, 1, a4, a5, a6, a7, a8);
          goto LABEL_5;
        }
        a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
        if ((_DWORD)a4 != 1)
          goto LABEL_44;
      }
      v15 = *(unsigned int *)(v14 + 8000);
      if (v15 >= 0x3E7)
      {
        pas_thread_local_cache_append_deallocation_slow(v14, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
      }
      else
      {
        *(_QWORD *)(v14 + 8 * v15) = a2 | 0x5000000000000;
        *(_DWORD *)(v14 + 8000) = v15 + 1;
      }
    }
    else
    {
      pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
    }
LABEL_5:
    v11 += 32;
    v12 -= 32;
  }
  while (v12);
  v11 = *(_QWORD *)(v9 + 8);
LABEL_12:
  if (v11)
  {
    *(_QWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 16) = 0;
    WTF::fastFree(v11, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
LABEL_15:
  v16 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 312);
    if (v17)
    {
      *(_QWORD *)(v16 + 312) = 0;
      *(_DWORD *)(v16 + 320) = 0;
      WTF::fastFree(v17, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::Vector<WTF::NaturalLoop<JSC::B3::CFG>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v16 + 8, (void *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v16, v18, v19, v20, v21, v22, v23, v24);
  }
  v25 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 88);
    if ((v26 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v26, (void *)a2, a3, a4, a5, a6, a7, a8);
    v27 = *(_QWORD *)(v25 + 8);
    if (v25 + 24 != v27 && v27 != 0)
    {
      *(_QWORD *)(v25 + 8) = 0;
      *(_DWORD *)(v25 + 16) = 0;
      WTF::fastFree(v27, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v25, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v29 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 24);
    if (v30)
    {
      *(_QWORD *)(v29 + 24) = 0;
      *(_DWORD *)(v29 + 32) = 0;
      WTF::fastFree(v30, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    v31 = *(unsigned int *)(v29 + 20);
    v32 = *(_QWORD *)(v29 + 8);
    if ((_DWORD)v31)
    {
      v33 = 40 * v31;
      do
      {
        v34 = *(_QWORD *)v32;
        if (*(_QWORD *)v32)
        {
          *(_QWORD *)v32 = 0;
          *(_DWORD *)(v32 + 8) = 0;
          WTF::fastFree(v34, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v32 += 40;
        v33 -= 40;
      }
      while (v33);
      v32 = *(_QWORD *)(v29 + 8);
    }
    if (v32)
    {
      *(_QWORD *)(v29 + 8) = 0;
      *(_DWORD *)(v29 + 16) = 0;
      WTF::fastFree(v32, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
    WTF::fastFree(v29, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::B3::Procedure::dump(JSC::B3::Procedure *this, WTF::PrintStream *a2)
{
  int v4;
  WTF::PrintStream *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::PrintStream *v17;
  WTF::PrintStream *v18;
  WTF::PrintStream *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  unsigned int v33;
  unsigned int *v34;
  unint64_t v35;
  unint64_t v36;
  WTF::PrintStream *v37;
  WTF::PrintStream *v38;
  uint64_t v39;
  uint64_t v40;
  JSC::B3::Variable *v41;
  WTF::PrintStream *v42;
  WTF::PrintStream *v43;
  uint64_t v44;
  WTF::PrintStream *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::PrintStream *v49;
  uint64_t v50;
  uint64_t v51;
  WTF::PrintStream *v52;
  const JSC::B3::Procedure *v53;
  const JSC::B3::Procedure *v54[2];
  uint64_t v55;

  v4 = *((_DWORD *)this + 51);
  v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
  WTF::PrintStream::printf(v5, "%s", "Opt Level: ");
  WTF::PrintStream::printf(v5, "%u", v4);
  WTF::PrintStream::printf(v5, "%s", "\n");
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  v55 = 0x8000000000000000;
  v13 = *((unsigned int *)this + 15);
  if (!(_DWORD)v13)
    goto LABEL_28;
  v14 = 0;
  while (!*(_QWORD *)(*((_QWORD *)this + 6) + 8 * v14))
  {
    if (v13 == ++v14)
      goto LABEL_28;
  }
  if ((_DWORD)v13 == (_DWORD)v14)
  {
LABEL_28:
    v27 = *((unsigned int *)this + 19);
    if ((_DWORD)v27)
    {
      v28 = 0;
      while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v28))
      {
        if (v27 == ++v28)
          goto LABEL_52;
      }
      if ((_DWORD)v27 != (_DWORD)v28)
      {
        v29 = 0;
        v30 = v55;
        v31 = (unint64_t *)(2 * v55);
        if (v55 >= 0)
          v32 = (uint64_t *)(2 * v55 + 8);
        else
          v32 = &v55;
        v33 = *((_DWORD *)this + 19);
        do
        {
          v34 = *(unsigned int **)(*((_QWORD *)this + 8) + 8 * v28);
          if (!v34
            || (v30 < 0 ? (v35 = 63) : (v35 = *v31),
                (v36 = v34[2], v35 <= v36)
             || ((*(unint64_t *)((char *)v32 + ((v36 >> 3) & 0x1FFFFFF8)) >> v36) & 1) == 0))
          {
            if ((v29 & 1) == 0)
              WTF::dataLog<char const*,char [18]>();
            v54[0] = this;
            v54[1] = (const JSC::B3::Procedure *)v34;
            WTF::dataLog<char const*,char [5],JSC::B3::DeepValueDump,char [2]>(v54);
            v33 = *((_DWORD *)this + 19);
            v29 = 1;
          }
          v28 = (v28 + 1);
          if (v33 > v28)
          {
            while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v28))
            {
              if (v33 == ++v28)
              {
                LODWORD(v28) = v33;
                break;
              }
            }
          }
        }
        while ((_DWORD)v27 != (_DWORD)v28);
      }
    }
LABEL_52:
    if (*((_BYTE *)this + 209))
    {
      v37 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v37, "%s", "b3  ");
      WTF::PrintStream::printf(v37, "%s", "Has Quirks: True\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    if (*((_DWORD *)this + 3))
    {
      v38 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v38, "%s", "b3  ");
      WTF::PrintStream::printf(v38, "%s", "Variables:\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v39 = *((unsigned int *)this + 3);
      if ((_DWORD)v39)
      {
        v40 = 0;
        while (!*(_QWORD *)(*(_QWORD *)this + 8 * v40))
        {
          if (v39 == ++v40)
            goto LABEL_69;
        }
        while ((_DWORD)v39 != (_DWORD)v40)
        {
          v41 = *(JSC::B3::Variable **)(*(_QWORD *)this + 8 * v40);
          v42 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v42, "%s", "b3  ");
          WTF::PrintStream::printf(v42, "%s", "    ");
          if (v41)
          {
            JSC::B3::Variable::deepDump(v41, v42);
          }
          else
          {
            v43 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v42 + 32))(v42);
            WTF::PrintStream::printf(v43, "%s", "<null>");
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v42 + 40))(v42);
          }
          WTF::PrintStream::printf(v42, "%s", "\n");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          v40 = (v40 + 1);
          v44 = *((unsigned int *)this + 3);
          if (v44 > v40)
          {
            while (!*(_QWORD *)(*(_QWORD *)this + 8 * v40))
            {
              if (v44 == ++v40)
              {
                LODWORD(v40) = *((_DWORD *)this + 3);
                break;
              }
            }
          }
        }
      }
    }
LABEL_69:
    if (*(_DWORD *)(*((_QWORD *)this + 20) + 76))
    {
      v45 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      WTF::PrintStream::printf(v45, "%s", "b3  ");
      WTF::PrintStream::printf(v45, "%s", "Stack slots:\n");
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v46 = *((_QWORD *)this + 20);
      v47 = *(unsigned int *)(v46 + 76);
      if ((_DWORD)v47)
      {
        v48 = 0;
        while (!*(_QWORD *)(*(_QWORD *)(v46 + 64) + 8 * v48))
        {
          if (v47 == ++v48)
            goto LABEL_81;
        }
        while ((_DWORD)v47 != (_DWORD)v48)
        {
          v53 = *(const JSC::B3::Procedure **)(*(_QWORD *)(v46 + 64) + 8 * v48);
          v54[0] = v53;
          v49 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v49, "%s", "b3  ");
          WTF::PrintStream::printf(v49, "%s", "    ");
          WTF::PrintStream::printImpl<WTF::PointerDump<JSC::B3::Air::StackSlot>,char [3],JSC::B3::Air::DeepStackSlotDump,char [2]>(v49, (uint64_t)v54, ": ", (uint64_t *)&v53, "\n");
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          v48 = (v48 + 1);
          v50 = *(unsigned int *)(v46 + 76);
          if (v50 > v48)
          {
            while (!*(_QWORD *)(*(_QWORD *)(v46 + 64) + 8 * v48))
            {
              if (v50 == ++v48)
              {
                LODWORD(v48) = *(_DWORD *)(v46 + 76);
                break;
              }
            }
          }
        }
      }
    }
LABEL_81:
    v51 = *((_QWORD *)this + 19);
    if (*(_DWORD *)(v51 + 12))
    {
      v52 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      JSC::OpaqueByproducts::dump((uint64_t **)v51, v52);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    }
    if ((v55 & 0x8000000000000000) == 0)
      WTF::fastFree(2 * v55, v6, v7, v8, v9, v10, v11, v12);
  }
  else
  {
    LODWORD(v15) = *((_DWORD *)this + 15);
    while (v15 > v14)
    {
      v16 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v14);
      v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v18 = v17;
      if (v16)
      {
        JSC::B3::BasicBlock::deepDump((JSC::B3::BasicBlock *)v16, this, v17);
      }
      else
      {
        v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v17 + 32))(v17);
        WTF::PrintStream::printf(v19, "%s", "<null>");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v18 + 40))(v18);
      }
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      v20 = *(unsigned int *)(v16 + 20);
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD *)(v16 + 8);
        v22 = 8 * v20;
        do
        {
          v23 = v55;
          if (v55 < 0)
            v24 = 63;
          else
            v24 = *(_QWORD *)(2 * v55);
          v25 = *(unsigned int *)(*(_QWORD *)v21 + 8);
          if (v24 <= v25)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v55, v25 + 1, 0);
            v23 = v55;
          }
          if (v23 >= 0)
            v26 = (uint64_t *)(2 * v23 + 8);
          else
            v26 = &v55;
          *(uint64_t *)((char *)v26 + ((v25 >> 3) & 0x1FFFFFF8)) |= 1 << v25;
          v21 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v14 = (v14 + 1);
      v15 = *((unsigned int *)this + 15);
      if (v15 > v14)
      {
        while (!*(_QWORD *)(*((_QWORD *)this + 6) + 8 * v14))
        {
          if (v15 == ++v14)
          {
            LODWORD(v14) = *((_DWORD *)this + 15);
            break;
          }
        }
      }
      if ((_DWORD)v13 == (_DWORD)v14)
        goto LABEL_28;
    }
    __break(0xC471u);
  }
}

uint64_t WTF::dataLog<char const*,char [18]>()
{
  unint64_t v0;
  uint64_t v1;
  WTF::PrintStream *v2;
  char v4;
  char **v5;
  char *v6;

  v0 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v0 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v1 = WTF::s_file;
  v2 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v2, "%s", "b3  ");
  WTF::PrintStream::printf(v2, "%s", "Orphaned values:\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
}

uint64_t WTF::dataLog<char const*,char [5],JSC::B3::DeepValueDump,char [2]>(const JSC::B3::Procedure **a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  JSC::B3::Value *v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "b3  ");
  WTF::PrintStream::printf(v4, "%s", "    ");
  v5 = a1[1];
  if (v5)
  {
    JSC::B3::Value::deepDump(v5, *a1, v4);
  }
  else
  {
    v6 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 32))(v4);
    WTF::PrintStream::printf(v6, "%s", "<null>");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v4 + 40))(v4);
  }
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

void JSC::B3::blocksInPreOrder<JSC::B3::BasicBlock>(unsigned int *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  WTF *v38;
  uint64_t v39;
  _BYTE v40[128];
  _QWORD v41[2];

  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  v37 = 0x8000000000000000;
  v38 = (WTF *)v40;
  v39 = 16;
  v41[0] = a1;
  v11 = *a1;
  if (v11 < 0x3F
    || (WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v37, v11 + 1, 0), (v37 & 0x8000000000000000) != 0))
  {
    v12 = &v37;
  }
  else
  {
    v12 = (unint64_t *)(2 * v37 + 8);
  }
  v13 = (v11 >> 3) & 0x1FFFFFF8;
  v14 = *(unint64_t *)((char *)v12 + v13);
  *(unint64_t *)((char *)v12 + v13) = v14 | (1 << v11);
  v15 = HIDWORD(v39);
  if ((v14 & (1 << v11)) == 0)
  {
    if (HIDWORD(v39) == (_DWORD)v39)
    {
      v35 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, HIDWORD(v39) + 1, (unint64_t)v41);
      v15 = HIDWORD(v39);
      *((_QWORD *)v38 + HIDWORD(v39)) = *v35;
    }
    else
    {
      *((_QWORD *)v38 + HIDWORD(v39)) = a1;
    }
    HIDWORD(v39) = ++v15;
  }
  v36 = 0;
  if (v15)
  {
    while (1)
    {
      v16 = v38;
      v17 = *((_QWORD *)v38 + v15 - 1);
      HIDWORD(v39) = v15 - 1;
      v36 = v17;
      if (!v17)
        break;
      v18 = *(unsigned int *)(a9 + 12);
      if ((_DWORD)v18 == *(_DWORD *)(a9 + 8))
      {
        v32 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, v18 + 1, (unint64_t)&v36);
        v18 = *(unsigned int *)(a9 + 12);
        *(_QWORD *)(*(_QWORD *)a9 + 8 * v18) = *v32;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)a9 + 8 * v18) = v17;
      }
      *(_DWORD *)(a9 + 12) = v18 + 1;
      v19 = v36;
      v20 = *(unsigned int *)(v36 + 68);
      if ((_DWORD)v20)
      {
        v21 = 0;
        v22 = 0;
        v23 = 16 * v20;
        while (v22 < *(unsigned int *)(v19 + 68))
        {
          v24 = *(unsigned int **)(*(_QWORD *)(v19 + 56) + v21);
          v41[0] = v24;
          v25 = v37;
          if ((v37 & 0x8000000000000000) != 0)
            v26 = 63;
          else
            v26 = *(_QWORD *)(2 * v37);
          v27 = *v24;
          if (v26 <= v27)
          {
            WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v37, v27 + 1, 0);
            v25 = v37;
          }
          if (v25 >= 0)
            v28 = (unint64_t *)(2 * v25 + 8);
          else
            v28 = &v37;
          v29 = (v27 >> 3) & 0x1FFFFFF8;
          v30 = *(unint64_t *)((char *)v28 + v29);
          *(unint64_t *)((char *)v28 + v29) = v30 | (1 << v27);
          if ((v30 & (1 << v27)) == 0)
          {
            v31 = HIDWORD(v39);
            if (HIDWORD(v39) == (_DWORD)v39)
            {
              v33 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v38, HIDWORD(v39) + 1, (unint64_t)v41);
              v31 = HIDWORD(v39);
              *((_QWORD *)v38 + HIDWORD(v39)) = *v33;
            }
            else
            {
              *((_QWORD *)v38 + HIDWORD(v39)) = v24;
            }
            HIDWORD(v39) = v31 + 1;
          }
          ++v22;
          v21 += 16;
          if (v23 == v21)
            goto LABEL_28;
        }
        __break(0xC471u);
        return;
      }
LABEL_28:
      v36 = 0;
      v15 = HIDWORD(v39);
      if (!HIDWORD(v39))
        goto LABEL_32;
    }
  }
  else
  {
LABEL_32:
    v16 = v38;
  }
  if (v40 != (_BYTE *)v16 && v16 != 0)
  {
    v38 = 0;
    LODWORD(v39) = 0;
    WTF::fastFree((unint64_t)v16, a2, a3, a4, a5, a6, a7, a8);
  }
  if ((v37 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v37, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::B3::blocksInPostOrder<JSC::B3::BasicBlock>(unsigned int *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  _OWORD *v34;
  _OWORD *v35;
  _OWORD *v36;
  _QWORD v37[2];
  unint64_t v38;
  WTF *v39;
  uint64_t v40;
  __int128 v41;

  *(_QWORD *)a9 = 0;
  *(_QWORD *)(a9 + 8) = 0;
  v39 = 0;
  v40 = 0;
  v38 = 0x8000000000000000;
  *(_QWORD *)&v41 = a1;
  BYTE8(v41) = 0;
  v10 = *a1;
  if (v10 < 0x3F
    || (WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v38, v10 + 1, 0), (v38 & 0x8000000000000000) != 0))
  {
    v11 = &v38;
  }
  else
  {
    v11 = (unint64_t *)(2 * v38 + 8);
  }
  v12 = (v10 >> 3) & 0x1FFFFFF8;
  v13 = *(unint64_t *)((char *)v11 + v12);
  *(unint64_t *)((char *)v11 + v12) = v13 | (1 << v10);
  LODWORD(v14) = HIDWORD(v40);
  if ((v13 & (1 << v10)) == 0)
  {
    if (HIDWORD(v40) == (_DWORD)v40)
    {
      v36 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)&v41);
      LODWORD(v14) = HIDWORD(v40);
      *((_OWORD *)v39 + HIDWORD(v40)) = *v36;
    }
    else
    {
      *((_OWORD *)v39 + HIDWORD(v40)) = v41;
    }
    LODWORD(v14) = v14 + 1;
  }
  if ((_DWORD)v14)
  {
    while (1)
    {
      v15 = v39;
      v16 = (char *)v39 + 16 * v14;
      v17 = *((_QWORD *)v16 - 2);
      v18 = *(v16 - 8);
      v14 = (v14 - 1);
      HIDWORD(v40) = v14;
      v37[0] = v17;
      v37[1] = v18;
      if (!v17)
        break;
      if ((_DWORD)v18 == 1)
      {
        v19 = *(unsigned int *)(a9 + 12);
        if ((_DWORD)v19 == *(_DWORD *)(a9 + 8))
        {
          v33 = (_QWORD *)WTF::Vector<JSC::B3::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a9, v19 + 1, (unint64_t)v37);
          v19 = *(unsigned int *)(a9 + 12);
          *(_QWORD *)(*(_QWORD *)a9 + 8 * v19) = *v33;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a9 + 8 * v19) = v17;
        }
        *(_DWORD *)(a9 + 12) = v19 + 1;
      }
      else if (!(_DWORD)v18)
      {
        *(_QWORD *)&v41 = v17;
        BYTE8(v41) = 1;
        if ((_DWORD)v14 == (_DWORD)v40)
        {
          v34 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, v14 + 1, (unint64_t)&v41);
          LODWORD(v14) = HIDWORD(v40);
          *((_OWORD *)v39 + HIDWORD(v40)) = *v34;
        }
        else
        {
          *((_OWORD *)v39 + v14) = v41;
        }
        LODWORD(v14) = v14 + 1;
        HIDWORD(v40) = v14;
        v20 = v37[0];
        v21 = *(unsigned int *)(v37[0] + 68);
        if ((_DWORD)v21)
        {
          v22 = 0;
          v23 = 0;
          v24 = 16 * v21;
          while (v23 < *(unsigned int *)(v20 + 68))
          {
            v25 = *(unsigned int **)(*(_QWORD *)(v20 + 56) + v22);
            *(_QWORD *)&v41 = v25;
            BYTE8(v41) = 0;
            v26 = v38;
            if ((v38 & 0x8000000000000000) != 0)
              v27 = 63;
            else
              v27 = *(_QWORD *)(2 * v38);
            v28 = *v25;
            if (v27 <= v28)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v38, v28 + 1, 0);
              v26 = v38;
            }
            if (v26 >= 0)
              v29 = (unint64_t *)(2 * v26 + 8);
            else
              v29 = &v38;
            v30 = (v28 >> 3) & 0x1FFFFFF8;
            v31 = *(unint64_t *)((char *)v29 + v30);
            *(unint64_t *)((char *)v29 + v30) = v31 | (1 << v28);
            if ((v31 & (1 << v28)) == 0)
            {
              v32 = HIDWORD(v40);
              if (HIDWORD(v40) == (_DWORD)v40)
              {
                v35 = (_OWORD *)WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v39, HIDWORD(v40) + 1, (unint64_t)&v41);
                v32 = HIDWORD(v40);
                *((_OWORD *)v39 + HIDWORD(v40)) = *v35;
              }
              else
              {
                *((_OWORD *)v39 + HIDWORD(v40)) = v41;
              }
              HIDWORD(v40) = v32 + 1;
            }
            ++v23;
            v22 += 16;
            if (v24 == v22)
            {
              LODWORD(v14) = HIDWORD(v40);
              goto LABEL_9;
            }
          }
          __break(0xC471u);
          return;
        }
      }
LABEL_9:
      if (!(_DWORD)v14)
        goto LABEL_38;
    }
  }
  else
  {
LABEL_38:
    v15 = v39;
    if (!v39)
      goto LABEL_40;
  }
  WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
LABEL_40:
  if ((v38 & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v38, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::B3::SparseCollection<JSC::B3::Variable>::remove(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const void *v18;
  void *v19;

  v8 = *a2;
  v9 = *a1;
  if (*(unsigned int **)(*a1 + 8 * v8) != a2)
    goto LABEL_19;
  v12 = *((unsigned int *)a1 + 7);
  if ((_DWORD)v12 != *((_DWORD *)a1 + 6))
  {
    *(_QWORD *)(a1[2] + 8 * v12) = v8;
    goto LABEL_4;
  }
  v15 = v12 + (v12 >> 2);
  v16 = v15 >= 0x10 ? v15 + 1 : 16;
  v17 = v16 <= v12 + 1 ? v12 + 1 : v16;
  if (v17 >> 29)
  {
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x197FE498CLL);
  }
  v18 = (const void *)a1[2];
  v19 = (void *)WTF::fastMalloc((WTF *)(8 * v17));
  *((_DWORD *)a1 + 6) = v17;
  a1[2] = (uint64_t)v19;
  memcpy(v19, v18, 8 * v12);
  if (v18)
  {
    if ((const void *)a1[2] == v18)
    {
      a1[2] = 0;
      *((_DWORD *)a1 + 6) = 0;
    }
    WTF::fastFree((unint64_t)v18, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *((unsigned int *)a1 + 7);
  *(_QWORD *)(a1[2] + 8 * v12) = *a2;
  v9 = *a1;
LABEL_4:
  *((_DWORD *)a1 + 7) = v12 + 1;
  v13 = *a2;
  v14 = *(_QWORD *)(v9 + 8 * v13);
  *(_QWORD *)(v9 + 8 * v13) = 0;
  if (v14)
    WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::B3::Procedure::deleteOrphans(JSC::B3::Procedure *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  WTF *v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  int v28;
  WTF *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  const void *v49;
  void *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  _BYTE v54[128];
  _QWORD v55[2];

  v55[0] = 0x8000000000000000;
  v9 = *((unsigned int *)this + 15);
  if ((_DWORD)v9)
  {
    v10 = 0;
    while (!*(_QWORD *)(*((_QWORD *)this + 6) + 8 * v10))
    {
      if (v9 == ++v10)
        goto LABEL_5;
    }
    if ((_DWORD)v9 != (_DWORD)v10)
    {
      v30 = *((_DWORD *)this + 15);
      do
      {
        if (v30 <= v10)
        {
          __break(0xC471u);
          JUMPOUT(0x197FE4E20);
        }
        v31 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * v10);
        v32 = *(unsigned int *)(v31 + 20);
        if ((_DWORD)v32)
        {
          v33 = *(_QWORD *)(v31 + 8);
          v34 = 8 * v32;
          do
          {
            v35 = v55[0];
            if ((v55[0] & 0x8000000000000000) != 0)
              v36 = 63;
            else
              v36 = *(_QWORD *)(2 * v55[0]);
            v37 = *(unsigned int *)(*(_QWORD *)v33 + 8);
            if (v36 <= v37)
            {
              WTF::BitVector::resizeOutOfLine((WTF::BitVector *)v55, v37 + 1, 0);
              v35 = v55[0];
            }
            if (v35 >= 0)
              v38 = (_QWORD *)(2 * v35 + 8);
            else
              v38 = v55;
            *(_QWORD *)((char *)v38 + ((v37 >> 3) & 0x1FFFFFF8)) |= 1 << v37;
            v33 += 8;
            v34 -= 8;
          }
          while (v34);
          v30 = *((_DWORD *)this + 15);
        }
        v10 = (v10 + 1);
        if (v30 > v10)
        {
          while (!*(_QWORD *)(*((_QWORD *)this + 6) + 8 * v10))
          {
            if (v30 == ++v10)
            {
              LODWORD(v10) = v30;
              break;
            }
          }
        }
      }
      while ((_DWORD)v9 != (_DWORD)v10);
    }
  }
LABEL_5:
  v11 = (WTF *)v54;
  v52 = (WTF *)v54;
  v53 = 16;
  v12 = *((unsigned int *)this + 19);
  if ((_DWORD)v12)
  {
    v13 = 0;
    while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v13))
    {
      if (v12 == ++v13)
        goto LABEL_42;
    }
    if ((_DWORD)v12 != (_DWORD)v13)
    {
      v14 = v55[0];
      v15 = (unint64_t *)(2 * v55[0]);
      if (v55[0] >= 0)
        v16 = (_QWORD *)(2 * v55[0] + 8);
      else
        v16 = v55;
      do
      {
        v51 = 0;
        v17 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * v13);
        v51 = v17;
        if (v17
          && (v14 < 0 ? (v18 = 63) : (v18 = *v15),
              (v19 = *(unsigned int *)(v17 + 8), v18 > v19)
           && ((*(_QWORD *)((char *)v16 + ((v19 >> 3) & 0x1FFFFFF8)) >> v19) & 1) != 0))
        {
          if ((*(_WORD *)(v17 + 12) & 0xFFF) == 0x98)
          {
            v21 = *(_QWORD *)(v17 + 40);
            if (!v21
              || (v14 < 0 ? (v22 = 63) : (v22 = *v15),
                  (v23 = *(unsigned int *)(v21 + 8), v22 <= v23)
               || ((*(_QWORD *)((char *)v16 + ((v23 >> 3) & 0x1FFFFFF8)) >> v23) & 1) == 0))
            {
              if (*(_DWORD *)(v17 + 16))
              {
                __break(0xC471u);
                JUMPOUT(0x197FE4E18);
              }
              v24 = v11;
              v25 = *(_QWORD *)(v17 + 32);
              (**(void (***)(uint64_t))v17)(v17);
              *(_QWORD *)v17 = off_1E357F5F0;
              *(_WORD *)(v17 + 12) = 0;
              *(_DWORD *)(v17 + 16) = 0;
              *(_BYTE *)(v17 + 20) = 0;
              *(_DWORD *)(v17 + 8) = v19;
              *(_QWORD *)(v17 + 32) = v25;
              v11 = v24;
            }
          }
        }
        else
        {
          v26 = HIDWORD(v53);
          if (HIDWORD(v53) == (_DWORD)v53)
          {
            v27 = (_QWORD *)WTF::Vector<JSC::B3::Value *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v52, HIDWORD(v53) + 1, (unint64_t)&v51);
            v28 = HIDWORD(v53) + 1;
            *((_QWORD *)v52 + HIDWORD(v53)) = *v27;
            HIDWORD(v53) = v28;
          }
          else
          {
            *((_QWORD *)v52 + HIDWORD(v53)) = v17;
            HIDWORD(v53) = v26 + 1;
          }
        }
        v13 = (v13 + 1);
        v20 = *((unsigned int *)this + 19);
        if (v20 > v13)
        {
          while (!*(_QWORD *)(*((_QWORD *)this + 8) + 8 * v13))
          {
            if (v20 == ++v13)
            {
              LODWORD(v13) = *((_DWORD *)this + 19);
              break;
            }
          }
        }
      }
      while ((_DWORD)v12 != (_DWORD)v13);
      v29 = v52;
      if (HIDWORD(v53))
      {
        v39 = 8 * HIDWORD(v53);
        do
        {
          v40 = *(_QWORD *)v29;
          v41 = *(unsigned int *)(*(_QWORD *)v29 + 8);
          v42 = *((_QWORD *)this + 8);
          if (*(_QWORD *)(v42 + 8 * v41) != *(_QWORD *)v29)
          {
LABEL_89:
            __break(0xC471u);
            JUMPOUT(0x197FE4DF8);
          }
          v43 = *((unsigned int *)this + 23);
          if ((_DWORD)v43 == *((_DWORD *)this + 22))
          {
            v46 = v43 + (v43 >> 2);
            if (v46 >= 0x10)
              v47 = v46 + 1;
            else
              v47 = 16;
            if (v47 <= v43 + 1)
              v48 = v43 + 1;
            else
              v48 = v47;
            if (v48 >> 29)
              goto LABEL_89;
            v49 = (const void *)*((_QWORD *)this + 10);
            v50 = (void *)WTF::fastMalloc((WTF *)(8 * v48));
            *((_DWORD *)this + 22) = v48;
            *((_QWORD *)this + 10) = v50;
            memcpy(v50, v49, 8 * v43);
            if (v49)
            {
              if (*((const void **)this + 10) == v49)
              {
                *((_QWORD *)this + 10) = 0;
                *((_DWORD *)this + 22) = 0;
              }
              WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, a8);
            }
            v43 = *((unsigned int *)this + 23);
            *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v43) = *(unsigned int *)(v40 + 8);
            v42 = *((_QWORD *)this + 8);
          }
          else
          {
            *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v43) = v41;
          }
          *((_DWORD *)this + 23) = v43 + 1;
          v44 = *(unsigned int *)(v40 + 8);
          v45 = *(_QWORD *)(v42 + 8 * v44);
          *(_QWORD *)(v42 + 8 * v44) = 0;
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          v29 = (WTF *)((char *)v29 + 8);
          v39 -= 8;
        }
        while (v39);
        v29 = v52;
      }
      if (v11 != v29 && v29)
      {
        v52 = 0;
        LODWORD(v53) = 0;
        WTF::fastFree((unint64_t)v29, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
LABEL_42:
  if ((v55[0] & 0x8000000000000000) == 0)
    WTF::fastFree(2 * v55[0], a2, a3, a4, a5, a6, a7, a8);
}

